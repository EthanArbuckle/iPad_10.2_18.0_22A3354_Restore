uint64_t sub_2231567D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float32x4_t *a5, uint64_t a6, float32x4_t a7, int8x16_t a8, double a9, double a10, double a11, float32x4_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t i;
  float32x4_t *v17;
  uint64_t v18;
  uint64_t v19;
  float32x4_t *v20;
  float32x4_t *v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t *v28;
  float32x4_t v29;
  float32x4_t *v30;
  float32x4_t v31;
  float32x4_t *v32;
  float32x4_t v33;
  float32x4_t v34;
  __n128 *v35;
  float32x4_t *v36;
  float32x4_t *v37;
  float32x4_t *v38;
  uint64_t v39;
  float32x4_t *v40;
  float32x2_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x2_t *v44;
  float32x4_t *v45;
  float32x2_t v46;
  float32x4_t *v47;
  float32x4_t v48;
  float32x4_t v49;
  __int32 *v50;
  float32x4_t v51;
  __int32 *v52;
  float32x2_t *v53;
  float32x2_t *v54;
  uint64_t result;
  float32x2_t *v56;
  uint64_t v57;
  uint64_t v58;
  float32x2_t *v59;
  float32x2_t *v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x2_t *v65;
  float32x2_t v66;
  float32x2_t v67;
  float32x2_t *v68;
  float32x2_t *v69;
  uint64_t v70;
  unint64_t *v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x2_t *v74;
  float32x2_t v75;
  float32x2_t *v76;
  float32x2_t *v77;
  uint64_t v78;
  uint64_t v79;
  float *v80;
  float32x2_t *v81;
  float32x2_t v82;
  float32x2_t v83;
  float v84;
  uint64_t v85;
  unsigned __int32 *v86;
  float32x2_t v87;
  float v88;
  unsigned __int32 *v89;

  a7.i64[1] = a8.i64[0];
  v12 = 0;
  v13 = 4 * a4;
  v14 = 4 * a6;
  v15 = a1 <= 3;
  for (i = a1 - 3; !v15; v12 += 4)
  {
    v17 = a5;
    a5 = (float32x4_t *)((char *)a5 + 4 * v14);
    if (v12)
    {
      v18 = 0;
      do
      {
        v19 = a2;
        v20 = (float32x4_t *)(a3 + 4 * v12);
        v21 = (float32x4_t *)(a3 + 4 * v18);
        v22 = (float32x4_t)veorq_s8(a8, a8);
        v23 = v22;
        v24 = v22;
        v25 = v22;
        do
        {
          v26 = *v21;
          v21 = (float32x4_t *)((char *)v21 + v13);
          v27 = *v20;
          v20 = (float32x4_t *)((char *)v20 + v13);
          v22 = vmlaq_n_f32(v22, v26, v27.f32[0]);
          v23 = vmlaq_lane_f32(v23, v26, *(float32x2_t *)v27.f32, 1);
          v24 = vmlaq_laneq_f32(v24, v26, v27, 2);
          v25 = vmlaq_laneq_f32(v25, v26, v27, 3);
          v15 = v19-- <= 1;
        }
        while (!v15);
        v29 = *v17;
        v28 = (float32x4_t *)((char *)v17 + v14);
        v31 = *v28;
        v30 = (float32x4_t *)((char *)v28 + v14);
        v33 = *v30;
        v32 = (float32x4_t *)((char *)v30 + v14);
        v34 = *v32;
        v35 = (__n128 *)((char *)v32 + v14 + -4 * v14);
        a8 = (int8x16_t)vmlaq_laneq_f32(vmulq_n_f32(v22, a7.f32[0]), v29, a7, 2);
        *v35 = (__n128)a8;
        v36 = (float32x4_t *)((char *)v35 + v14);
        *v36 = vmlaq_laneq_f32(vmulq_n_f32(v23, a7.f32[0]), v31, a7, 2);
        v37 = (float32x4_t *)((char *)v36 + v14);
        *v37 = vmlaq_laneq_f32(vmulq_n_f32(v24, a7.f32[0]), v33, a7, 2);
        v38 = (float32x4_t *)((char *)v37 + v14);
        *v38 = vmlaq_laneq_f32(vmulq_n_f32(v25, a7.f32[0]), v34, a7, 2);
        v17 = (float32x4_t *)((char *)v38 + v14 + -4 * v14 + 16);
        v18 += 4;
      }
      while (v18 < v12);
    }
    v39 = a2;
    v40 = (float32x4_t *)(a3 + 4 * v12);
    a8 = veorq_s8(a8, a8);
    v41 = *(float32x2_t *)a8.i8;
    v42 = (float32x4_t)a8;
    v43 = (float32x4_t)a8;
    do
    {
      a12 = *v40;
      v40 = (float32x4_t *)((char *)v40 + v13);
      *(float32x2_t *)a8.i8 = vmla_n_f32(*(float32x2_t *)a8.i8, *(float32x2_t *)a12.f32, a12.f32[0]);
      v41 = vmla_lane_f32(v41, *(float32x2_t *)a12.f32, *(float32x2_t *)a12.f32, 1);
      v42 = vmlaq_laneq_f32(v42, a12, a12, 2);
      v43 = vmlaq_laneq_f32(v43, a12, a12, 3);
      v15 = v39-- <= 1;
    }
    while (!v15);
    a12.i32[0] = v17->i32[0];
    v44 = (float32x2_t *)((char *)v17 + v14);
    v46 = *v44;
    v45 = (float32x4_t *)((char *)v44 + v14);
    v48 = *v45;
    v47 = (float32x4_t *)((char *)v45 + v14);
    v49 = *v47;
    v50 = (__int32 *)((char *)v47 + v14 + -4 * v14);
    *(float *)a8.i32 = *(float *)a8.i32 * a7.f32[0];
    *(float32x2_t *)a8.i8 = vmla_laneq_f32(*(float32x2_t *)a8.i8, *(float32x2_t *)a12.f32, a7, 2);
    v51 = vmlaq_laneq_f32(vmulq_n_f32(v42, a7.f32[0]), v48, a7, 2);
    v52 = &v50[(unint64_t)v14 / 2];
    *v50 = a8.i32[0];
    v53 = (float32x2_t *)&v50[(unint64_t)v14 / 4];
    *v53 = vmla_laneq_f32(vmul_n_f32(v41, a7.f32[0]), v46, a7, 2);
    v54 = (float32x2_t *)((char *)v53 + v14);
    *v54 = *(float32x2_t *)v51.f32;
    v52[2] = v51.i32[2];
    *(float32x4_t *)&v54->f32[(unint64_t)v14 / 4] = vmlaq_laneq_f32(vmulq_n_f32(v43, a7.f32[0]), v49, a7, 2);
    v15 = i <= 4;
    i -= 4;
  }
  v15 = i <= -3;
  result = i + 3;
  if (!v15)
  {
    if (result >= 2)
    {
      v56 = (float32x2_t *)a5;
      a5 = (float32x4_t *)((char *)a5 + 2 * v14);
      if (v12)
      {
        v57 = 0;
        do
        {
          v58 = a2;
          v59 = (float32x2_t *)(a3 + 4 * v12);
          v60 = (float32x2_t *)(a3 + 4 * v57);
          v61 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
          v62 = v61;
          do
          {
            v63 = *v60;
            v60 = (float32x2_t *)((char *)v60 + v13);
            v64 = *v59;
            v59 = (float32x2_t *)((char *)v59 + v13);
            v61 = vmla_n_f32(v61, v63, v64.f32[0]);
            v62 = vmla_lane_f32(v62, v63, v64, 1);
            v15 = v58-- <= 1;
          }
          while (!v15);
          v66 = *v56;
          v65 = (float32x2_t *)((char *)v56 + v14);
          v67 = *v65;
          v68 = (float32x2_t *)((char *)v65 + v14 + -2 * v14);
          *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v61, a7.f32[0]), v66, a7, 2);
          *v68 = *(float32x2_t *)a8.i8;
          v69 = (float32x2_t *)((char *)v68 + v14);
          *v69 = vmla_laneq_f32(vmul_n_f32(v62, a7.f32[0]), v67, a7, 2);
          v56 = (float32x2_t *)((char *)v69 + v14 + -2 * v14 + 8);
          v57 += 2;
        }
        while (v57 < v12);
      }
      v70 = a2;
      v71 = (unint64_t *)(a3 + 4 * v12);
      v72 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
      v73 = v72;
      do
      {
        a12.i64[0] = *v71;
        v71 = (unint64_t *)((char *)v71 + v13);
        v72 = vmla_n_f32(v72, *(float32x2_t *)a12.f32, a12.f32[0]);
        v73 = vmla_lane_f32(v73, *(float32x2_t *)a12.f32, *(float32x2_t *)a12.f32, 1);
        v15 = v70-- <= 1;
      }
      while (!v15);
      a12.i32[0] = v56->i32[0];
      v74 = (float32x2_t *)((char *)v56 + v14);
      v75 = *v74;
      v76 = (float32x2_t *)((char *)v74 + v14 + -2 * v14);
      v72.f32[0] = v72.f32[0] * a7.f32[0];
      *(float32x2_t *)a8.i8 = vmla_laneq_f32(v72, *(float32x2_t *)a12.f32, a7, 2);
      v76->i32[0] = a8.i32[0];
      *(float32x2_t *)((char *)v76 + v14) = vmla_laneq_f32(vmul_n_f32(v73, a7.f32[0]), v75, a7, 2);
      result -= 2;
      v12 += 2;
    }
    if (result >= 1)
    {
      v77 = (float32x2_t *)a5;
      v78 = 0;
      if (v12 >= 1)
      {
        do
        {
          v79 = a2;
          v80 = (float *)(a3 + 4 * v12);
          v81 = (float32x2_t *)(a3 + 4 * v78);
          v82 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
          do
          {
            v83 = *v81;
            v81 = (float32x2_t *)((char *)v81 + v13);
            v84 = *v80;
            v80 = (float *)((char *)v80 + v13);
            v82 = vmla_n_f32(v82, v83, v84);
            v15 = v79-- <= 1;
          }
          while (!v15);
          *(float32x2_t *)a12.f32 = *v77;
          *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v82, a7.f32[0]), *v77, a7, 2);
          *v77++ = *(float32x2_t *)a8.i8;
          v78 += 2;
        }
        while (v78 < v12 - 1);
      }
      v85 = a2;
      v86 = (unsigned __int32 *)(a3 + 4 * v12);
      v87 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
      if ((a2 & 1) == 0
        || (v88 = *(float *)v86,
            v86 = (unsigned __int32 *)((char *)v86 + v13),
            v87.f32[0] = v88 * v88,
            v85 = a2 - 1,
            a2 > 1))
      {
        do
        {
          a12.i32[0] = *v86;
          v89 = &v86[(unint64_t)v13 / 4];
          a12.i32[1] = *v89;
          v86 = &v89[(unint64_t)v13 / 4];
          v87 = vmla_f32(v87, *(float32x2_t *)a12.f32, *(float32x2_t *)a12.f32);
          v15 = v85 <= 2;
          v85 -= 2;
        }
        while (!v15);
        v87.f32[0] = vaddv_f32(v87);
      }
      a12.i32[0] = v77->i32[0];
      v87.f32[0] = v87.f32[0] * a7.f32[0];
      v77->i32[0] = vmla_laneq_f32(v87, *(float32x2_t *)a12.f32, a7, 2).u32[0];
    }
  }
  return result;
}

uint64_t sub_223156AB0(uint64_t result, uint64_t a2, _QWORD *a3, uint64_t a4, _OWORD *a5)
{
  _QWORD *v5;
  __int128 *v6;
  _QWORD *v7;
  __int128 *v8;
  _QWORD *v9;
  __int128 *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD *v22;
  BOOL v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v5 = &a3[a4];
  v6 = (__int128 *)&a3[2 * a4];
  v7 = &v5[2 * a4];
  v8 = &v6[a4];
  v9 = &v7[2 * a4];
  v10 = &v8[a4];
  v11 = &v9[2 * a4];
  v12 = (a4 << 6) - 8 * a2;
  do
  {
    v13 = a2 - 1;
    if (a2 > 1)
    {
      do
      {
        *(_QWORD *)&v14 = *a3;
        *(_QWORD *)&v15 = a3[1];
        a3 += 2;
        *((_QWORD *)&v14 + 1) = *v5;
        *((_QWORD *)&v15 + 1) = v5[1];
        v5 += 2;
        v16 = *v6;
        *(_QWORD *)&v17 = *((_QWORD *)v6++ + 1);
        *((_QWORD *)&v17 + 1) = v7[1];
        v7 += 2;
        v18 = *v8;
        *(_QWORD *)&v19 = *((_QWORD *)v8++ + 1);
        *((_QWORD *)&v19 + 1) = v9[1];
        v9 += 2;
        v20 = *v10;
        *(_QWORD *)&v21 = *((_QWORD *)v10++ + 1);
        *((_QWORD *)&v21 + 1) = v11[1];
        v11 += 2;
        *a5 = v14;
        a5[1] = v16;
        v22 = a5 + 2;
        *v22 = v18;
        v22[1] = v20;
        v22 += 2;
        *v22 = v15;
        v22[1] = v17;
        v22 += 2;
        *v22 = v19;
        v22[1] = v21;
        a5 = v22 + 2;
        v23 = v13 <= 2;
        v13 -= 2;
      }
      while (!v23);
    }
    if (!v13)
    {
      *(_QWORD *)&v24 = *a3++;
      *((_QWORD *)&v24 + 1) = *v5++;
      v25 = *v6;
      v6 = (__int128 *)((char *)v6 + 8);
      ++v7;
      v26 = *v8;
      v8 = (__int128 *)((char *)v8 + 8);
      ++v9;
      v27 = *v10;
      v10 = (__int128 *)((char *)v10 + 8);
      ++v11;
      *a5 = v24;
      a5[1] = v25;
      a5[2] = v26;
      a5[3] = v27;
      a5 += 4;
    }
    v23 = result <= 8;
    result -= 8;
    a3 = (_QWORD *)((char *)a3 + v12);
    v5 = (_QWORD *)((char *)v5 + v12);
    v6 = (__int128 *)((char *)v6 + v12);
    v7 = (_QWORD *)((char *)v7 + v12);
    v8 = (__int128 *)((char *)v8 + v12);
    v9 = (_QWORD *)((char *)v9 + v12);
    v10 = (__int128 *)((char *)v10 + v12);
    v11 = (_QWORD *)((char *)v11 + v12);
  }
  while (!v23);
  return result;
}

_OWORD *sub_223156B90(_OWORD *a1, float64x2_t *a2, float64x2_t *_X2, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  float64x2_t *v8;
  uint64_t v9;
  _OWORD *v10;
  float64x2_t v11;
  float64x2_t v12;
  _OWORD *result;
  float64x2_t v14;
  float64x2_t v15;
  uint64_t v16;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  _OWORD *v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t *v69;
  float64x2_t *v70;
  float64x2_t *v71;

  v8 = _X2;
  v9 = 8 * a4;
  v11 = *(float64x2_t *)a1;
  v12 = *((float64x2_t *)a1 + 1);
  v10 = a1 + 2;
  v14 = *(float64x2_t *)v10;
  v15 = *((float64x2_t *)v10 + 1);
  result = v10 + 2;
  do
  {
    v16 = a6;
    __asm { PRFM            #1, [X2,#0x40] }
    v23 = *_X2;
    v24 = _X2[1];
    v25 = _X2[2];
    v26 = _X2[3];
    _X2 = (float64x2_t *)((char *)_X2 + v9);
    __asm { PRFM            #1, [X2,#0x40] }
    v29 = *_X2;
    v30 = _X2[1];
    v31 = _X2[2];
    v32 = _X2[3];
    _X2 = (float64x2_t *)((char *)_X2 + v9);
    __asm { PRFM            #1, [X2,#0x40] }
    v35 = *_X2;
    v36 = _X2[1];
    v37 = _X2[2];
    v38 = _X2[3];
    _X2 = (float64x2_t *)((char *)_X2 + v9);
    __asm { PRFM            #1, [X2,#0x40] }
    v41 = *a2;
    v42 = a2[1];
    _X6 = a2 + 2;
    __asm
    {
      PRFM            #1, [X6]
      PRFM            #1, [X6,#0x20]
      PRFM            #1, [X6,#0x40]
    }
    v46 = vmulq_n_f64(v23, a7);
    v47 = vmulq_n_f64(v24, a7);
    v48 = vmulq_n_f64(v25, a7);
    v49 = vmulq_n_f64(v26, a7);
    v50 = vmulq_n_f64(v29, a7);
    v51 = vmulq_n_f64(v30, a7);
    v52 = vmulq_n_f64(v31, a7);
    v53 = vmulq_n_f64(v32, a7);
    v54 = vmulq_n_f64(v35, a7);
    v55 = vmulq_n_f64(v36, a7);
    v56 = vmulq_n_f64(v37, a7);
    v57 = vmulq_n_f64(v38, a7);
    v58 = vmulq_n_f64(*_X2, a7);
    v59 = vmulq_n_f64(_X2[1], a7);
    v60 = vmulq_n_f64(_X2[2], a7);
    v61 = vmulq_n_f64(_X2[3], a7);
    do
    {
      v62 = v11;
      v63 = v12;
      v46 = vmlaq_n_f64(v46, v11, v41.f64[0]);
      v50 = vmlaq_laneq_f64(v50, v11, v41, 1);
      v11 = *(float64x2_t *)result;
      v12 = *((float64x2_t *)result + 1);
      v64 = result + 2;
      v54 = vmlaq_n_f64(v54, v62, v42.f64[0]);
      v58 = vmlaq_laneq_f64(v58, v62, v42, 1);
      v65 = *_X6;
      v66 = _X6[1];
      _X6 += 2;
      v67 = v14;
      v47 = vmlaq_n_f64(v47, v63, v41.f64[0]);
      v51 = vmlaq_laneq_f64(v51, v63, v41, 1);
      v68 = v15;
      v55 = vmlaq_n_f64(v55, v63, v42.f64[0]);
      v59 = vmlaq_laneq_f64(v59, v63, v42, 1);
      v14 = *(float64x2_t *)v64;
      v15 = *((float64x2_t *)v64 + 1);
      result = v64 + 2;
      v48 = vmlaq_n_f64(v48, v67, v41.f64[0]);
      v52 = vmlaq_laneq_f64(v52, v67, v41, 1);
      v56 = vmlaq_n_f64(v56, v67, v42.f64[0]);
      v60 = vmlaq_laneq_f64(v60, v67, v42, 1);
      v49 = vmlaq_n_f64(v49, v68, v41.f64[0]);
      v53 = vmlaq_laneq_f64(v53, v68, v41, 1);
      v41 = v65;
      v57 = vmlaq_n_f64(v57, v68, v42.f64[0]);
      v61 = vmlaq_laneq_f64(v61, v68, v42, 1);
      v42 = v66;
      --v16;
    }
    while (v16);
    v69 = (float64x2_t *)((char *)v8 + v9);
    *v8 = v46;
    v8[1] = v47;
    v8[2] = v48;
    v8[3] = v49;
    v8 += 4;
    *v69 = v50;
    v69[1] = v51;
    v69[2] = v52;
    v69[3] = v53;
    v70 = (float64x2_t *)((char *)v69 + v9);
    *v70 = v54;
    v70[1] = v55;
    v70[2] = v56;
    v70[3] = v57;
    v71 = (float64x2_t *)((char *)v70 + v9);
    *v71 = v58;
    v71[1] = v59;
    v71[2] = v60;
    v71[3] = v61;
    _X2 = v8;
    a5 -= 8;
  }
  while (a5);
  return result;
}

_OWORD *sub_223156CE0(_OWORD *a1, float64x2_t *a2, float64x2_t *_X2, uint64_t a4, uint64_t a5, uint64_t a6)
{
  float64x2_t *v7;
  uint64_t v8;
  _OWORD *v9;
  float64x2_t v10;
  float64x2_t v11;
  _OWORD *result;
  float64x2_t v13;
  float64x2_t v14;
  uint64_t v15;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v49;
  float64x2_t v50;
  _OWORD *v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t *v56;
  float64x2_t *v57;
  float64x2_t *v58;

  v7 = _X2;
  v8 = 8 * a4;
  v10 = *(float64x2_t *)a1;
  v11 = *((float64x2_t *)a1 + 1);
  v9 = a1 + 2;
  v13 = *(float64x2_t *)v9;
  v14 = *((float64x2_t *)v9 + 1);
  result = v9 + 2;
  do
  {
    v15 = a6;
    __asm { PRFM            #1, [X2,#0x40] }
    v22 = *_X2;
    v23 = _X2[1];
    v24 = _X2[2];
    v25 = _X2[3];
    _X2 = (float64x2_t *)((char *)_X2 + v8);
    __asm { PRFM            #1, [X2,#0x40] }
    v28 = *_X2;
    v29 = _X2[1];
    v30 = _X2[2];
    v31 = _X2[3];
    _X2 = (float64x2_t *)((char *)_X2 + v8);
    __asm { PRFM            #1, [X2,#0x40] }
    v34 = *_X2;
    v35 = _X2[1];
    v36 = _X2[2];
    v37 = _X2[3];
    _X2 = (float64x2_t *)((char *)_X2 + v8);
    __asm { PRFM            #1, [X2,#0x40] }
    v39 = *_X2;
    v40 = _X2[1];
    v41 = _X2[2];
    v42 = _X2[3];
    v44 = *a2;
    v45 = a2[1];
    _X6 = a2 + 2;
    __asm
    {
      PRFM            #1, [X6]
      PRFM            #1, [X6,#0x20]
      PRFM            #1, [X6,#0x40]
    }
    do
    {
      v49 = v10;
      v50 = v11;
      v22 = vmlaq_n_f64(v22, v10, v44.f64[0]);
      v28 = vmlaq_laneq_f64(v28, v10, v44, 1);
      v10 = *(float64x2_t *)result;
      v11 = *((float64x2_t *)result + 1);
      v51 = result + 2;
      v34 = vmlaq_n_f64(v34, v49, v45.f64[0]);
      v39 = vmlaq_laneq_f64(v39, v49, v45, 1);
      v52 = *_X6;
      v53 = _X6[1];
      _X6 += 2;
      v54 = v13;
      v23 = vmlaq_n_f64(v23, v50, v44.f64[0]);
      v29 = vmlaq_laneq_f64(v29, v50, v44, 1);
      v55 = v14;
      v35 = vmlaq_n_f64(v35, v50, v45.f64[0]);
      v40 = vmlaq_laneq_f64(v40, v50, v45, 1);
      v13 = *(float64x2_t *)v51;
      v14 = *((float64x2_t *)v51 + 1);
      result = v51 + 2;
      v24 = vmlaq_n_f64(v24, v54, v44.f64[0]);
      v30 = vmlaq_laneq_f64(v30, v54, v44, 1);
      v36 = vmlaq_n_f64(v36, v54, v45.f64[0]);
      v41 = vmlaq_laneq_f64(v41, v54, v45, 1);
      v25 = vmlaq_n_f64(v25, v55, v44.f64[0]);
      v31 = vmlaq_laneq_f64(v31, v55, v44, 1);
      v44 = v52;
      v37 = vmlaq_n_f64(v37, v55, v45.f64[0]);
      v42 = vmlaq_laneq_f64(v42, v55, v45, 1);
      v45 = v53;
      --v15;
    }
    while (v15);
    v56 = (float64x2_t *)((char *)v7 + v8);
    *v7 = v22;
    v7[1] = v23;
    v7[2] = v24;
    v7[3] = v25;
    v7 += 4;
    *v56 = v28;
    v56[1] = v29;
    v56[2] = v30;
    v56[3] = v31;
    v57 = (float64x2_t *)((char *)v56 + v8);
    *v57 = v34;
    v57[1] = v35;
    v57[2] = v36;
    v57[3] = v37;
    v58 = (float64x2_t *)((char *)v57 + v8);
    *v58 = v39;
    v58[1] = v40;
    v58[2] = v41;
    v58[3] = v42;
    _X2 = v7;
    a5 -= 8;
  }
  while (a5);
  return result;
}

uint64_t sub_223156DE0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  float32x4_t *v18;
  float32x4_t *v19;
  float32x4_t *v20;
  float32x4_t *v21;
  float *v22;
  uint64_t v23;
  uint64_t v24;
  float32x2_t *v25;
  float v26;
  float32x4_t *v27;
  float32x2_t v28;
  float32x4_t *v29;
  float32x4_t v30;
  float32x4_t *v31;
  float32x4_t v32;
  float32x2_t *v33;
  float32x4_t v34;
  float32x2_t *v35;
  float32x4_t v36;
  float32x2_t *v37;
  float32x4_t v38;
  float32x2_t *v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t *v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x2_t v64;
  BOOL v65;
  uint64_t v66;
  float32x2_t *v67;
  float32x2_t *v68;
  float32x2_t *v69;
  float32x2_t *v70;
  __int32 *v71;
  __int32 *v72;
  float32x2_t v73;
  __int32 *v74;
  float32x2_t *v75;
  float32x2_t v76;
  float32x2_t *v77;
  float32x2_t v78;
  float32x2_t *v79;
  float32x2_t v80;
  float32x2_t *v81;
  float32x2_t v82;
  float32x2_t v83;
  float32x2_t v84;
  float32x2_t v85;
  float32x2_t v86;
  __int32 *v87;
  float32x2_t v88;
  float32_t v89;
  float32_t v90;
  float32_t v91;
  float32_t v92;
  float32_t v93;
  float32_t v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  float32x4_t *v98;
  float32x4_t *v99;
  float *v100;
  uint64_t v101;
  uint64_t v102;
  float32x2_t *v103;
  float v104;
  float32x4_t *v105;
  float32x2_t v106;
  float32x4_t *v107;
  float32x4_t v108;
  float32x4_t *v109;
  float32x4_t v110;
  float32x2_t *v111;
  float32x4_t v112;
  float32x2_t *v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float v120;
  float v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t *v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x2_t v127;
  float32x2_t v128;
  uint64_t v129;
  float32x2_t *v130;
  float32x2_t *v131;
  __int32 *v132;
  __int32 *v133;
  float32x2_t v134;
  __int32 *v135;
  float32x2_t *v136;
  float32x2_t v137;
  float32x2_t *v138;
  float32x2_t v139;
  float32x2_t v140;
  float32x2_t v141;
  __int32 *v142;
  float32x2_t v143;
  float32_t v144;
  float32_t v145;
  uint64_t v146;
  BOOL v147;
  uint64_t v148;
  float32x4_t *v149;
  float *v150;
  uint64_t v151;
  float32x2_t *v152;
  float v153;
  float32x4_t *v154;
  float32x2_t v155;
  float32x4_t *v156;
  float32x4_t v157;
  float32x4_t *v158;
  float32x4_t v159;
  float32x2_t *v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float v165;
  float32x4_t v166;
  float32x4_t *v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x2_t v170;
  uint64_t v171;
  float32x2_t *v172;
  __int32 *v173;
  __int32 *v174;
  float32x2_t v175;
  __int32 *v176;
  float32x2_t *v177;
  float32x2_t v178;
  float32x2_t v179;
  __int32 *v180;
  float32x2_t v181;

  v11 = 4 * a6;
  v12 = 4 * a4;
  v13 = 0;
  if (a2 <= 3)
    goto LABEL_22;
  v14 = a2 - 3;
  do
  {
    v15 = 0;
    v16 = __OFSUB__(result, 3);
    v17 = result - 3;
    if (result > 3)
    {
      do
      {
        v18 = (float32x4_t *)(a5 + v13 * v11 + 4 * v15);
        v19 = (float32x4_t *)((char *)v18 + v11);
        v20 = (float32x4_t *)((char *)v18 + 2 * v11);
        v21 = (float32x4_t *)((char *)v18 + 2 * v11 + v11);
        v22 = (float *)(a3 + v15 * v12 + 4 * v15);
        v23 = 4 * (result - v15);
        v24 = result - v15 - 4;
        v26 = *v22;
        v25 = (float32x2_t *)&v22[(unint64_t)v12 / 4];
        v28 = *v25;
        v27 = (float32x4_t *)((char *)v25 + v12);
        v30 = *v27;
        v29 = (float32x4_t *)((char *)v27 + v12);
        v32 = *v29;
        v31 = (float32x4_t *)((char *)v29 + v12);
        v34 = *v18;
        v33 = (float32x2_t *)&v18[1];
        v36 = *v19;
        v35 = (float32x2_t *)&v19[1];
        v38 = *v20;
        v37 = (float32x2_t *)&v20[1];
        v40 = *v21;
        v39 = (float32x2_t *)&v21[1];
        v30.i32[3] = 0;
        *(float32x2_t *)v7.f32 = vmul_lane_f32(v28, *(float32x2_t *)v34.f32, 1);
        *(float32x2_t *)v8.f32 = vmul_lane_f32(v28, *(float32x2_t *)v36.f32, 1);
        *(float32x2_t *)v9.f32 = vmul_lane_f32(v28, *(float32x2_t *)v38.f32, 1);
        *(float32x2_t *)v10.f32 = vmul_lane_f32(v28, *(float32x2_t *)v40.f32, 1);
        v41 = vmulq_laneq_f32(v30, v34, 2);
        v42 = vmulq_laneq_f32(v30, v36, 2);
        v43 = vmulq_laneq_f32(v30, v38, 2);
        v44 = vmulq_laneq_f32(v30, v40, 2);
        v41.f32[0] = (float)(v26 * v34.f32[0]) + v41.f32[0];
        v42.f32[0] = (float)(v26 * v36.f32[0]) + v42.f32[0];
        v43.f32[0] = (float)(v26 * v38.f32[0]) + v43.f32[0];
        v44.f32[0] = (float)(v26 * v40.f32[0]) + v44.f32[0];
        v45 = vaddq_f32(vmlaq_laneq_f32(v7, v32, v34, 3), v41);
        v46 = vaddq_f32(vmlaq_laneq_f32(v8, v32, v36, 3), v42);
        v47 = vaddq_f32(vmlaq_laneq_f32(v9, v32, v38, 3), v43);
        v48 = vaddq_f32(vmlaq_laneq_f32(v10, v32, v40, 3), v44);
        if ((v24 & 1) != 0)
        {
          v49 = *v31;
          v31 = (float32x4_t *)((char *)v31 + v12);
          v50 = v33->f32[0];
          v33 = (float32x2_t *)((char *)v33 + 4);
          v51 = v35->f32[0];
          v35 = (float32x2_t *)((char *)v35 + 4);
          v52 = v37->f32[0];
          v37 = (float32x2_t *)((char *)v37 + 4);
          v53 = v39->f32[0];
          v39 = (float32x2_t *)((char *)v39 + 4);
          v45 = vmlaq_n_f32(v45, v49, v50);
          v46 = vmlaq_n_f32(v46, v49, v51);
          v47 = vmlaq_n_f32(v47, v49, v52);
          v48 = vmlaq_n_f32(v48, v49, v53);
          v24 = result - v15 - 5;
        }
        if (v24)
        {
          v54 = 0uLL;
          v55 = 0uLL;
          v56 = 0uLL;
          v57 = 0uLL;
          do
          {
            v59 = *v31;
            v58 = (float32x4_t *)((char *)v31 + v12);
            v60 = *v58;
            v31 = (float32x4_t *)((char *)v58 + v12);
            v61 = *v33++;
            v62 = *v35++;
            v63 = *v37++;
            v64 = *v39++;
            v45 = vmlaq_n_f32(v45, v59, v61.f32[0]);
            v46 = vmlaq_n_f32(v46, v59, v62.f32[0]);
            v47 = vmlaq_n_f32(v47, v59, v63.f32[0]);
            v48 = vmlaq_n_f32(v48, v59, v64.f32[0]);
            v54 = vmlaq_lane_f32(v54, v60, v61, 1);
            v55 = vmlaq_lane_f32(v55, v60, v62, 1);
            v56 = vmlaq_lane_f32(v56, v60, v63, 1);
            v57 = vmlaq_lane_f32(v57, v60, v64, 1);
            v65 = v24 <= 2;
            v24 -= 2;
          }
          while (!v65);
          v45 = vaddq_f32(v45, v54);
          v46 = vaddq_f32(v46, v55);
          v47 = vaddq_f32(v47, v56);
          v48 = vaddq_f32(v48, v57);
        }
        v7 = vmulq_n_f32(v45, a7);
        v8 = vmulq_n_f32(v46, a7);
        v9 = vmulq_n_f32(v47, a7);
        v10 = vmulq_n_f32(v48, a7);
        *(float32x4_t *)&v33->f32[v23 / 0xFFFFFFFFFFFFFFFCLL] = v7;
        *(float32x4_t *)&v35->f32[v23 / 0xFFFFFFFFFFFFFFFCLL] = v8;
        *(float32x4_t *)&v37->f32[v23 / 0xFFFFFFFFFFFFFFFCLL] = v9;
        *(float32x4_t *)&v39->f32[v23 / 0xFFFFFFFFFFFFFFFCLL] = v10;
        v15 += 4;
        v16 = __OFSUB__(v17, 4);
        v65 = v17 <= 4;
        v17 -= 4;
      }
      while (!v65);
    }
    v66 = result & 3;
    if (!v16 && v66 != 0)
    {
      v67 = (float32x2_t *)(a5 + v13 * v11 + 4 * v15);
      v68 = (float32x2_t *)((char *)v67 + v11);
      v69 = &v67[(unint64_t)v11 / 4];
      v70 = (float32x2_t *)((char *)&v67[(unint64_t)v11 / 4] + v11);
      v71 = (__int32 *)(a3 + v15 * v12 + 4 * v15);
      if (v66 != 1)
      {
        if (v66 != 2)
        {
          v73.i32[0] = *v71;
          v72 = &v71[(unint64_t)v12 / 4];
          v73.i32[1] = *v72;
          v74 = &v72[(unint64_t)v12 / 4];
          v76 = *v67;
          v75 = v67 + 1;
          v78 = *v68;
          v77 = v68 + 1;
          v80 = *v69;
          v79 = v69 + 1;
          v82 = *v70;
          v81 = v70 + 1;
          v83 = vmul_f32(v73, v76);
          v84 = vmul_f32(v73, v78);
          v85 = vmul_f32(v73, v80);
          v86 = vmul_f32(v73, v82);
          v73.i32[0] = *v74;
          v76.i32[0] = v75->i32[0];
          --v75;
          v78.i32[0] = v77->i32[0];
          --v77;
          v80.i32[0] = v79->i32[0];
          --v79;
          v82.i32[0] = v81->i32[0];
          --v81;
          v71 = &v74[v12 / 0xFFFFFFFFFFFFFFFCLL + 1];
          v75->f32[0] = (float)(vaddv_f32(v83) + (float)(v73.f32[0] * v76.f32[0])) * a7;
          v67 = (float32x2_t *)((char *)v75 + 4);
          v77->f32[0] = (float)(vaddv_f32(v84) + (float)(v73.f32[0] * v78.f32[0])) * a7;
          v68 = (float32x2_t *)((char *)v77 + 4);
          v79->f32[0] = (float)(vaddv_f32(v85) + (float)(v73.f32[0] * v80.f32[0])) * a7;
          v69 = (float32x2_t *)((char *)v79 + 4);
          v81->f32[0] = (float)(vaddv_f32(v86) + (float)(v73.f32[0] * v82.f32[0])) * a7;
          v70 = (float32x2_t *)((char *)v81 + 4);
        }
        v88.i32[0] = *v71;
        v87 = &v71[(unint64_t)v12 / 4];
        v88.i32[1] = *v87;
        v71 = v87 + 1;
        v89 = vaddv_f32(vmul_f32(v88, *v68)) * a7;
        v90 = vaddv_f32(vmul_f32(v88, *v69)) * a7;
        v91 = vaddv_f32(vmul_f32(v88, *v70)) * a7;
        v67->f32[0] = vaddv_f32(vmul_f32(v88, *v67)) * a7;
        v67 = (float32x2_t *)((char *)v67 + 4);
        v68->f32[0] = v89;
        v68 = (float32x2_t *)((char *)v68 + 4);
        v69->f32[0] = v90;
        v69 = (float32x2_t *)((char *)v69 + 4);
        v70->f32[0] = v91;
        v70 = (float32x2_t *)((char *)v70 + 4);
      }
      v92 = (float)(*(float *)v71 * v68->f32[0]) * a7;
      v93 = (float)(*(float *)v71 * v69->f32[0]) * a7;
      v94 = (float)(*(float *)v71 * v70->f32[0]) * a7;
      v67->f32[0] = (float)(*(float *)v71 * v67->f32[0]) * a7;
      v68->f32[0] = v92;
      v69->f32[0] = v93;
      v70->f32[0] = v94;
    }
    v13 += 4;
    v65 = v14 <= 4;
    v14 -= 4;
  }
  while (!v65);
  v65 = v14 <= -3;
  a2 = v14 + 3;
  if (!v65)
  {
LABEL_22:
    if (a2 > 1)
    {
      v95 = 0;
      v96 = __OFSUB__(result, 3);
      v97 = result - 3;
      if (result > 3)
      {
        do
        {
          v98 = (float32x4_t *)(a5 + v13 * v11 + 4 * v95);
          v99 = (float32x4_t *)((char *)v98 + v11);
          v100 = (float *)(a3 + v95 * v12 + 4 * v95);
          v101 = 4 * (result - v95);
          v102 = result - v95 - 4;
          v104 = *v100;
          v103 = (float32x2_t *)&v100[(unint64_t)v12 / 4];
          v106 = *v103;
          v105 = (float32x4_t *)((char *)v103 + v12);
          v108 = *v105;
          v107 = (float32x4_t *)((char *)v105 + v12);
          v110 = *v107;
          v109 = (float32x4_t *)((char *)v107 + v12);
          v112 = *v98;
          v111 = (float32x2_t *)&v98[1];
          v114 = *v99;
          v113 = (float32x2_t *)&v99[1];
          v108.i32[3] = 0;
          *(float32x2_t *)v7.f32 = vmul_lane_f32(v106, *(float32x2_t *)v112.f32, 1);
          *(float32x2_t *)v8.f32 = vmul_lane_f32(v106, *(float32x2_t *)v114.f32, 1);
          v115 = vmulq_laneq_f32(v108, v112, 2);
          v116 = vmulq_laneq_f32(v108, v114, 2);
          v115.f32[0] = (float)(v104 * v112.f32[0]) + v115.f32[0];
          v116.f32[0] = (float)(v104 * v114.f32[0]) + v116.f32[0];
          v117 = vaddq_f32(vmlaq_laneq_f32(v7, v110, v112, 3), v115);
          v118 = vaddq_f32(vmlaq_laneq_f32(v8, v110, v114, 3), v116);
          if ((v102 & 1) != 0)
          {
            v119 = *v109;
            v109 = (float32x4_t *)((char *)v109 + v12);
            v120 = v111->f32[0];
            v111 = (float32x2_t *)((char *)v111 + 4);
            v121 = v113->f32[0];
            v113 = (float32x2_t *)((char *)v113 + 4);
            v117 = vmlaq_n_f32(v117, v119, v120);
            v118 = vmlaq_n_f32(v118, v119, v121);
            v102 = result - v95 - 5;
          }
          if (v102)
          {
            v122 = 0uLL;
            v123 = 0uLL;
            do
            {
              v125 = *v109;
              v124 = (float32x4_t *)((char *)v109 + v12);
              v126 = *v124;
              v109 = (float32x4_t *)((char *)v124 + v12);
              v127 = *v111++;
              v128 = *v113++;
              v117 = vmlaq_n_f32(v117, v125, v127.f32[0]);
              v118 = vmlaq_n_f32(v118, v125, v128.f32[0]);
              v122 = vmlaq_lane_f32(v122, v126, v127, 1);
              v123 = vmlaq_lane_f32(v123, v126, v128, 1);
              v65 = v102 <= 2;
              v102 -= 2;
            }
            while (!v65);
            v117 = vaddq_f32(v117, v122);
            v118 = vaddq_f32(v118, v123);
          }
          v7 = vmulq_n_f32(v117, a7);
          v8 = vmulq_n_f32(v118, a7);
          *(float32x4_t *)&v111->f32[v101 / 0xFFFFFFFFFFFFFFFCLL] = v7;
          *(float32x4_t *)&v113->f32[v101 / 0xFFFFFFFFFFFFFFFCLL] = v8;
          v95 += 4;
          v96 = __OFSUB__(v97, 4);
          v65 = v97 <= 4;
          v97 -= 4;
        }
        while (!v65);
      }
      v129 = result & 3;
      if (!v96 && v129 != 0)
      {
        v130 = (float32x2_t *)(a5 + v13 * v11 + 4 * v95);
        v131 = (float32x2_t *)((char *)v130 + v11);
        v132 = (__int32 *)(a3 + v95 * v12 + 4 * v95);
        if (v129 != 1)
        {
          if (v129 != 2)
          {
            v134.i32[0] = *v132;
            v133 = &v132[(unint64_t)v12 / 4];
            v134.i32[1] = *v133;
            v135 = &v133[(unint64_t)v12 / 4];
            v137 = *v130;
            v136 = v130 + 1;
            v139 = *v131;
            v138 = v131 + 1;
            v140 = vmul_f32(v134, v137);
            v141 = vmul_f32(v134, v139);
            v134.i32[0] = *v135;
            v137.i32[0] = v136->i32[0];
            --v136;
            v139.i32[0] = v138->i32[0];
            --v138;
            v132 = &v135[v12 / 0xFFFFFFFFFFFFFFFCLL + 1];
            v136->f32[0] = (float)(vaddv_f32(v140) + (float)(v134.f32[0] * v137.f32[0])) * a7;
            v130 = (float32x2_t *)((char *)v136 + 4);
            v138->f32[0] = (float)(vaddv_f32(v141) + (float)(v134.f32[0] * v139.f32[0])) * a7;
            v131 = (float32x2_t *)((char *)v138 + 4);
          }
          v143.i32[0] = *v132;
          v142 = &v132[(unint64_t)v12 / 4];
          v143.i32[1] = *v142;
          v132 = v142 + 1;
          v144 = vaddv_f32(vmul_f32(v143, *v131)) * a7;
          v130->f32[0] = vaddv_f32(vmul_f32(v143, *v130)) * a7;
          v130 = (float32x2_t *)((char *)v130 + 4);
          v131->f32[0] = v144;
          v131 = (float32x2_t *)((char *)v131 + 4);
        }
        v145 = (float)(*(float *)v132 * v131->f32[0]) * a7;
        v130->f32[0] = (float)(*(float *)v132 * v130->f32[0]) * a7;
        v131->f32[0] = v145;
      }
      a2 -= 2;
      v13 += 2;
    }
    if (a2)
    {
      v146 = 0;
      v147 = __OFSUB__(result, 3);
      v148 = result - 3;
      if (result > 3)
      {
        do
        {
          v149 = (float32x4_t *)(a5 + v13 * v11 + 4 * v146);
          v150 = (float *)(a3 + v146 * v12 + 4 * v146);
          v151 = result - v146 - 4;
          v153 = *v150;
          v152 = (float32x2_t *)&v150[(unint64_t)v12 / 4];
          v155 = *v152;
          v154 = (float32x4_t *)((char *)v152 + v12);
          v157 = *v154;
          v156 = (float32x4_t *)((char *)v154 + v12);
          v159 = *v156;
          v158 = (float32x4_t *)((char *)v156 + v12);
          v161 = *v149;
          v160 = (float32x2_t *)&v149[1];
          v157.i32[3] = 0;
          *(float32x2_t *)v7.f32 = vmul_lane_f32(v155, *(float32x2_t *)v161.f32, 1);
          v162 = vmulq_laneq_f32(v157, v161, 2);
          v162.f32[0] = (float)(v153 * v161.f32[0]) + v162.f32[0];
          v163 = vaddq_f32(vmlaq_laneq_f32(v7, v159, v161, 3), v162);
          if ((v151 & 1) != 0)
          {
            v164 = *v158;
            v158 = (float32x4_t *)((char *)v158 + v12);
            v165 = v160->f32[0];
            v160 = (float32x2_t *)((char *)v160 + 4);
            v163 = vmlaq_n_f32(v163, v164, v165);
            v151 = result - v146 - 5;
          }
          if (v151)
          {
            v166 = 0uLL;
            do
            {
              v168 = *v158;
              v167 = (float32x4_t *)((char *)v158 + v12);
              v169 = *v167;
              v158 = (float32x4_t *)((char *)v167 + v12);
              v170 = *v160++;
              v163 = vmlaq_n_f32(v163, v168, v170.f32[0]);
              v166 = vmlaq_lane_f32(v166, v169, v170, 1);
              v65 = v151 <= 2;
              v151 -= 2;
            }
            while (!v65);
            v163 = vaddq_f32(v163, v166);
          }
          v7 = vmulq_n_f32(v163, a7);
          *(float32x4_t *)&v160->f32[-(result - v146)] = v7;
          v146 += 4;
          v147 = __OFSUB__(v148, 4);
          v65 = v148 <= 4;
          v148 -= 4;
        }
        while (!v65);
      }
      v171 = result & 3;
      if (!v147 && v171 != 0)
      {
        v172 = (float32x2_t *)(a5 + v13 * v11 + 4 * v146);
        v173 = (__int32 *)(a3 + v146 * v12 + 4 * v146);
        if (v171 != 1)
        {
          if (v171 != 2)
          {
            v175.i32[0] = *v173;
            v174 = &v173[(unint64_t)v12 / 4];
            v175.i32[1] = *v174;
            v176 = &v174[(unint64_t)v12 / 4];
            v178 = *v172;
            v177 = v172 + 1;
            v179 = vmul_f32(v175, v178);
            v175.i32[0] = *v176;
            v178.i32[0] = v177->i32[0];
            --v177;
            v173 = &v176[v12 / 0xFFFFFFFFFFFFFFFCLL + 1];
            v177->f32[0] = (float)(vaddv_f32(v179) + (float)(v175.f32[0] * v178.f32[0])) * a7;
            v172 = (float32x2_t *)((char *)v177 + 4);
          }
          v181.i32[0] = *v173;
          v180 = &v173[(unint64_t)v12 / 4];
          v181.i32[1] = *v180;
          v173 = v180 + 1;
          v172->f32[0] = vaddv_f32(vmul_n_f32(vmul_f32(v181, *v172), a7));
          v172 = (float32x2_t *)((char *)v172 + 4);
        }
        v172->f32[0] = (float)(*(float *)v173 * v172->f32[0]) * a7;
      }
    }
  }
  return result;
}

uint64_t sub_223157450(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  float32x4_t *v14;
  float32x4_t *v15;
  float32x4_t *v16;
  float32x4_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  float32x2_t *v21;
  unsigned int v22;
  float32x4_t *v23;
  float32x2_t v24;
  float32x4_t *v25;
  float32x4_t v26;
  float32x2_t *v27;
  float32x4_t v28;
  float32x2_t *v29;
  float32x4_t v30;
  float32x2_t *v31;
  float32x4_t v32;
  float32x2_t *v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t *v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x2_t v54;
  BOOL v55;
  uint64_t v56;
  int32x2_t *v57;
  int32x2_t *v58;
  int32x2_t *v59;
  int32x2_t *v60;
  float *v61;
  __int32 *v62;
  float32x2_t v63;
  float32x2_t *v64;
  float v65;
  float32x2_t *v66;
  float v67;
  float32x2_t *v68;
  float v69;
  float32x2_t *v70;
  float v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x2_t v74;
  float32x2_t v75;
  float32x2_t v76;
  float32x2_t v77;
  float v78;
  float v79;
  float v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  float32x4_t *v84;
  float32x4_t *v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int *v88;
  float32x2_t *v89;
  unsigned int v90;
  float32x4_t *v91;
  float32x2_t v92;
  float32x4_t *v93;
  float32x4_t v94;
  float32x2_t *v95;
  float32x4_t v96;
  float32x2_t *v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float v102;
  float v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t *v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x2_t v109;
  float32x2_t v110;
  uint64_t v111;
  int32x2_t *v112;
  int32x2_t *v113;
  float *v114;
  __int32 *v115;
  float32x2_t v116;
  float32x2_t *v117;
  float v118;
  float32x2_t *v119;
  float v120;
  float32x2_t v121;
  float32x2_t v122;
  float32x2_t v123;
  float v124;
  uint64_t v125;
  BOOL v126;
  uint64_t v127;
  float32x4_t *v128;
  uint64_t v129;
  unsigned int *v130;
  float32x2_t *v131;
  unsigned int v132;
  float32x4_t *v133;
  float32x2_t v134;
  float32x4_t *v135;
  float32x4_t v136;
  float32x2_t *v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float v141;
  float32x4_t v142;
  float32x4_t *v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x2_t v146;
  uint64_t v147;
  _QWORD *v148;
  __int32 *v149;
  __int32 *v150;
  float32x2_t v151;
  float32x2_t *v152;
  float v153;
  float32x2_t v154;

  v7 = 4 * a6;
  v8 = 4 * a4;
  v9 = 0;
  if (a2 <= 3)
    goto LABEL_22;
  v10 = a2 - 3;
  do
  {
    v11 = 0;
    v12 = __OFSUB__(result, 3);
    v13 = result - 3;
    if (result > 3)
    {
      do
      {
        v14 = (float32x4_t *)(a5 + v9 * v7 + 4 * v11);
        v15 = (float32x4_t *)((char *)v14 + v7);
        v16 = (float32x4_t *)((char *)v14 + 2 * v7);
        v17 = (float32x4_t *)((char *)v14 + 2 * v7 + v7);
        v18 = 4 * (result - v11);
        v19 = result - v11 - 4;
        v20 = (unsigned int *)(a3 + v11 * v8 + 4 * v11 + v8);
        v22 = *v20;
        v21 = (float32x2_t *)&v20[(unint64_t)v8 / 4];
        v24 = *v21;
        v23 = (float32x4_t *)((char *)v21 + v8);
        v26 = *v23;
        v25 = (float32x4_t *)((char *)v23 + v8);
        v28 = *v14;
        v27 = (float32x2_t *)&v14[1];
        v30 = *v15;
        v29 = (float32x2_t *)&v15[1];
        v32 = *v16;
        v31 = (float32x2_t *)&v16[1];
        v34 = *v17;
        v33 = (float32x2_t *)&v17[1];
        v26.i32[3] = 0;
        v35 = vmlaq_laneq_f32(v28, v26, v28, 3);
        v36 = vmlaq_laneq_f32(v30, v26, v30, 3);
        v37 = vmlaq_laneq_f32(v32, v26, v32, 3);
        v38 = vmlaq_laneq_f32(v34, v26, v34, 3);
        *(float32x2_t *)v35.f32 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(v24, v28, 2), (float32x2_t)v22, *(float32x2_t *)v28.f32, 1), *(float32x2_t *)v35.f32);
        *(float32x2_t *)v36.f32 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(v24, v30, 2), (float32x2_t)v22, *(float32x2_t *)v30.f32, 1), *(float32x2_t *)v36.f32);
        *(float32x2_t *)v37.f32 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(v24, v32, 2), (float32x2_t)v22, *(float32x2_t *)v32.f32, 1), *(float32x2_t *)v37.f32);
        *(float32x2_t *)v38.f32 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(v24, v34, 2), (float32x2_t)v22, *(float32x2_t *)v34.f32, 1), *(float32x2_t *)v38.f32);
        if ((v19 & 1) != 0)
        {
          v39 = *v25;
          v25 = (float32x4_t *)((char *)v25 + v8);
          v40 = v27->f32[0];
          v27 = (float32x2_t *)((char *)v27 + 4);
          v41 = v29->f32[0];
          v29 = (float32x2_t *)((char *)v29 + 4);
          v42 = v31->f32[0];
          v31 = (float32x2_t *)((char *)v31 + 4);
          v43 = v33->f32[0];
          v33 = (float32x2_t *)((char *)v33 + 4);
          v35 = vmlaq_n_f32(v35, v39, v40);
          v36 = vmlaq_n_f32(v36, v39, v41);
          v37 = vmlaq_n_f32(v37, v39, v42);
          v38 = vmlaq_n_f32(v38, v39, v43);
          v19 = result - v11 - 5;
        }
        if (v19)
        {
          v44 = 0uLL;
          v45 = 0uLL;
          v46 = 0uLL;
          v47 = 0uLL;
          do
          {
            v49 = *v25;
            v48 = (float32x4_t *)((char *)v25 + v8);
            v50 = *v48;
            v25 = (float32x4_t *)((char *)v48 + v8);
            v51 = *v27++;
            v52 = *v29++;
            v53 = *v31++;
            v54 = *v33++;
            v35 = vmlaq_n_f32(v35, v49, v51.f32[0]);
            v36 = vmlaq_n_f32(v36, v49, v52.f32[0]);
            v37 = vmlaq_n_f32(v37, v49, v53.f32[0]);
            v38 = vmlaq_n_f32(v38, v49, v54.f32[0]);
            v44 = vmlaq_lane_f32(v44, v50, v51, 1);
            v45 = vmlaq_lane_f32(v45, v50, v52, 1);
            v46 = vmlaq_lane_f32(v46, v50, v53, 1);
            v47 = vmlaq_lane_f32(v47, v50, v54, 1);
            v55 = v19 <= 2;
            v19 -= 2;
          }
          while (!v55);
          v35 = vaddq_f32(v35, v44);
          v36 = vaddq_f32(v36, v45);
          v37 = vaddq_f32(v37, v46);
          v38 = vaddq_f32(v38, v47);
        }
        *(float32x4_t *)&v27->f32[v18 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v35, a7);
        *(float32x4_t *)&v29->f32[v18 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v36, a7);
        *(float32x4_t *)&v31->f32[v18 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v37, a7);
        *(float32x4_t *)&v33->f32[v18 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v38, a7);
        v11 += 4;
        v12 = __OFSUB__(v13, 4);
        v55 = v13 <= 4;
        v13 -= 4;
      }
      while (!v55);
    }
    v56 = result & 3;
    if (!v12 && v56 != 0)
    {
      v57 = (int32x2_t *)(a5 + v9 * v7 + 4 * v11);
      v58 = (int32x2_t *)((char *)v57 + v7);
      v59 = &v57[(unint64_t)v7 / 4];
      v60 = (int32x2_t *)((char *)&v57[(unint64_t)v7 / 4] + v7);
      v61 = (float *)(a3 + v11 * v8 + 4 * v11 + v8);
      if (v56 != 1)
      {
        if (v56 != 2)
        {
          v63.f32[0] = *v61;
          v62 = (__int32 *)&v61[(unint64_t)v8 / 4];
          v63.i32[1] = *v62;
          v65 = *(float *)v57->i32;
          v64 = (float32x2_t *)((char *)v57 + 4);
          v67 = *(float *)v58->i32;
          v66 = (float32x2_t *)((char *)v58 + 4);
          v69 = *(float *)v59->i32;
          v68 = (float32x2_t *)((char *)v59 + 4);
          v71 = *(float *)v60->i32;
          v70 = (float32x2_t *)((char *)v60 + 4);
          v72 = vmul_f32(v63, *v64);
          v73 = vmul_f32(v63, *v66);
          v74 = vmul_f32(v63, *v68);
          v75 = vmul_f32(v63, *v70);
          v64 = (float32x2_t *)((char *)v64 - 4);
          v66 = (float32x2_t *)((char *)v66 - 4);
          v68 = (float32x2_t *)((char *)v68 - 4);
          v70 = (float32x2_t *)((char *)v70 - 4);
          v61 = (float *)(v62 + 1);
          v64->f32[0] = (float)(vaddv_f32(v72) + v65) * a7;
          v57 = (int32x2_t *)((char *)v64 + 4);
          v66->f32[0] = (float)(vaddv_f32(v73) + v67) * a7;
          v58 = (int32x2_t *)((char *)v66 + 4);
          v68->f32[0] = (float)(vaddv_f32(v74) + v69) * a7;
          v59 = (int32x2_t *)((char *)v68 + 4);
          v70->f32[0] = (float)(vaddv_f32(v75) + v71) * a7;
          v60 = (int32x2_t *)((char *)v70 + 4);
        }
        v76 = vmul_n_f32(vadd_f32((float32x2_t)vtrn1_s32(*v57, *v58), vmul_n_f32((float32x2_t)vtrn2_s32(*v57, *v58), *v61)), a7);
        v77 = vmul_n_f32(vadd_f32((float32x2_t)vtrn1_s32(*v59, *v60), vmul_n_f32((float32x2_t)vtrn2_s32(*v59, *v60), *v61)), a7);
        v57->i32[0] = v76.i32[0];
        v57 = (int32x2_t *)((char *)v57 + 4);
        v58->i32[0] = v76.i32[1];
        v58 = (int32x2_t *)((char *)v58 + 4);
        v59->i32[0] = v77.i32[0];
        v59 = (int32x2_t *)((char *)v59 + 4);
        v60->i32[0] = v77.i32[1];
        v60 = (int32x2_t *)((char *)v60 + 4);
      }
      v78 = *(float *)v58->i32 * a7;
      v79 = *(float *)v59->i32 * a7;
      v80 = *(float *)v60->i32 * a7;
      *(float *)v57->i32 = *(float *)v57->i32 * a7;
      *(float *)v58->i32 = v78;
      *(float *)v59->i32 = v79;
      *(float *)v60->i32 = v80;
    }
    v9 += 4;
    v55 = v10 <= 4;
    v10 -= 4;
  }
  while (!v55);
  v55 = v10 <= -3;
  a2 = v10 + 3;
  if (!v55)
  {
LABEL_22:
    if (a2 > 1)
    {
      v81 = 0;
      v82 = __OFSUB__(result, 3);
      v83 = result - 3;
      if (result > 3)
      {
        do
        {
          v84 = (float32x4_t *)(a5 + v9 * v7 + 4 * v81);
          v85 = (float32x4_t *)((char *)v84 + v7);
          v86 = 4 * (result - v81);
          v87 = result - v81 - 4;
          v88 = (unsigned int *)(a3 + v81 * v8 + 4 * v81 + v8);
          v90 = *v88;
          v89 = (float32x2_t *)&v88[(unint64_t)v8 / 4];
          v92 = *v89;
          v91 = (float32x4_t *)((char *)v89 + v8);
          v94 = *v91;
          v93 = (float32x4_t *)((char *)v91 + v8);
          v96 = *v84;
          v95 = (float32x2_t *)&v84[1];
          v98 = *v85;
          v97 = (float32x2_t *)&v85[1];
          v94.i32[3] = 0;
          v99 = vmlaq_laneq_f32(v96, v94, v96, 3);
          v100 = vmlaq_laneq_f32(v98, v94, v98, 3);
          *(float32x2_t *)v99.f32 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(v92, v96, 2), (float32x2_t)v90, *(float32x2_t *)v96.f32, 1), *(float32x2_t *)v99.f32);
          *(float32x2_t *)v100.f32 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(v92, v98, 2), (float32x2_t)v90, *(float32x2_t *)v98.f32, 1), *(float32x2_t *)v100.f32);
          if ((v87 & 1) != 0)
          {
            v101 = *v93;
            v93 = (float32x4_t *)((char *)v93 + v8);
            v102 = v95->f32[0];
            v95 = (float32x2_t *)((char *)v95 + 4);
            v103 = v97->f32[0];
            v97 = (float32x2_t *)((char *)v97 + 4);
            v99 = vmlaq_n_f32(v99, v101, v102);
            v100 = vmlaq_n_f32(v100, v101, v103);
            v87 = result - v81 - 5;
          }
          if (v87)
          {
            v104 = 0uLL;
            v105 = 0uLL;
            do
            {
              v107 = *v93;
              v106 = (float32x4_t *)((char *)v93 + v8);
              v108 = *v106;
              v93 = (float32x4_t *)((char *)v106 + v8);
              v109 = *v95++;
              v110 = *v97++;
              v99 = vmlaq_n_f32(v99, v107, v109.f32[0]);
              v100 = vmlaq_n_f32(v100, v107, v110.f32[0]);
              v104 = vmlaq_lane_f32(v104, v108, v109, 1);
              v105 = vmlaq_lane_f32(v105, v108, v110, 1);
              v55 = v87 <= 2;
              v87 -= 2;
            }
            while (!v55);
            v99 = vaddq_f32(v99, v104);
            v100 = vaddq_f32(v100, v105);
          }
          *(float32x4_t *)&v95->f32[v86 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v99, a7);
          *(float32x4_t *)&v97->f32[v86 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v100, a7);
          v81 += 4;
          v82 = __OFSUB__(v83, 4);
          v55 = v83 <= 4;
          v83 -= 4;
        }
        while (!v55);
      }
      v111 = result & 3;
      if (!v82 && v111 != 0)
      {
        v112 = (int32x2_t *)(a5 + v9 * v7 + 4 * v81);
        v113 = (int32x2_t *)((char *)v112 + v7);
        v114 = (float *)(a3 + v81 * v8 + 4 * v81 + v8);
        if (v111 != 1)
        {
          if (v111 != 2)
          {
            v116.f32[0] = *v114;
            v115 = (__int32 *)&v114[(unint64_t)v8 / 4];
            v116.i32[1] = *v115;
            v118 = *(float *)v112->i32;
            v117 = (float32x2_t *)((char *)v112 + 4);
            v120 = *(float *)v113->i32;
            v119 = (float32x2_t *)((char *)v113 + 4);
            v121 = vmul_f32(v116, *v117);
            v122 = vmul_f32(v116, *v119);
            v117 = (float32x2_t *)((char *)v117 - 4);
            v119 = (float32x2_t *)((char *)v119 - 4);
            v114 = (float *)(v115 + 1);
            v117->f32[0] = (float)(vaddv_f32(v121) + v118) * a7;
            v112 = (int32x2_t *)((char *)v117 + 4);
            v119->f32[0] = (float)(vaddv_f32(v122) + v120) * a7;
            v113 = (int32x2_t *)((char *)v119 + 4);
          }
          v123 = vmul_n_f32(vadd_f32((float32x2_t)vtrn1_s32(*v112, *v113), vmul_n_f32((float32x2_t)vtrn2_s32(*v112, *v113), *v114)), a7);
          v112->i32[0] = v123.i32[0];
          v112 = (int32x2_t *)((char *)v112 + 4);
          v113->i32[0] = v123.i32[1];
          v113 = (int32x2_t *)((char *)v113 + 4);
        }
        v124 = *(float *)v113->i32 * a7;
        *(float *)v112->i32 = *(float *)v112->i32 * a7;
        *(float *)v113->i32 = v124;
      }
      a2 -= 2;
      v9 += 2;
    }
    if (a2)
    {
      v125 = 0;
      v126 = __OFSUB__(result, 3);
      v127 = result - 3;
      if (result > 3)
      {
        do
        {
          v128 = (float32x4_t *)(a5 + v9 * v7 + 4 * v125);
          v129 = result - v125 - 4;
          v130 = (unsigned int *)(a3 + v125 * v8 + 4 * v125 + v8);
          v132 = *v130;
          v131 = (float32x2_t *)&v130[(unint64_t)v8 / 4];
          v134 = *v131;
          v133 = (float32x4_t *)((char *)v131 + v8);
          v136 = *v133;
          v135 = (float32x4_t *)((char *)v133 + v8);
          v138 = *v128;
          v137 = (float32x2_t *)&v128[1];
          v136.i32[3] = 0;
          v139 = vmlaq_laneq_f32(v138, v136, v138, 3);
          *(float32x2_t *)v139.f32 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(v134, v138, 2), (float32x2_t)v132, *(float32x2_t *)v138.f32, 1), *(float32x2_t *)v139.f32);
          if ((v129 & 1) != 0)
          {
            v140 = *v135;
            v135 = (float32x4_t *)((char *)v135 + v8);
            v141 = v137->f32[0];
            v137 = (float32x2_t *)((char *)v137 + 4);
            v139 = vmlaq_n_f32(v139, v140, v141);
            v129 = result - v125 - 5;
          }
          if (v129)
          {
            v142 = 0uLL;
            do
            {
              v144 = *v135;
              v143 = (float32x4_t *)((char *)v135 + v8);
              v145 = *v143;
              v135 = (float32x4_t *)((char *)v143 + v8);
              v146 = *v137++;
              v139 = vmlaq_n_f32(v139, v144, v146.f32[0]);
              v142 = vmlaq_lane_f32(v142, v145, v146, 1);
              v55 = v129 <= 2;
              v129 -= 2;
            }
            while (!v55);
            v139 = vaddq_f32(v139, v142);
          }
          *(float32x4_t *)&v137->f32[-(result - v125)] = vmulq_n_f32(v139, a7);
          v125 += 4;
          v126 = __OFSUB__(v127, 4);
          v55 = v127 <= 4;
          v127 -= 4;
        }
        while (!v55);
      }
      v147 = result & 3;
      if (!v126 && v147 != 0)
      {
        v148 = (_QWORD *)(a5 + v9 * v7 + 4 * v125);
        v149 = (__int32 *)(a3 + v125 * v8 + 4 * v125 + v8);
        if (v147 != 1)
        {
          if (v147 != 2)
          {
            v151.i32[0] = *v149;
            v150 = &v149[(unint64_t)v8 / 4];
            v151.i32[1] = *v150;
            v149 = v150 + 1;
            v153 = *(float *)v148;
            v152 = (float32x2_t *)((char *)v148 + 4);
            v154 = vmul_f32(v151, *v152);
            v152 = (float32x2_t *)((char *)v152 - 4);
            v152->f32[0] = (float)(vaddv_f32(v154) + v153) * a7;
            v148 = (_QWORD *)((char *)v152 + 4);
          }
          *(float *)v148 = (float)((float)(COERCE_FLOAT(HIDWORD(*v148)) * *(float *)v149) + COERCE_FLOAT(*v148)) * a7;
          v148 = (_QWORD *)((char *)v148 + 4);
        }
        *(float *)v148 = *(float *)v148 * a7;
      }
    }
  }
  return result;
}

uint64_t sub_223157A40(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  int32x2_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  int64x2_t *v13;
  int64x2_t *v14;
  int64x2_t *v15;
  int64x2_t *v16;
  float *v17;
  float32x2_t *v18;
  float32x4_t *v19;
  float32x4_t *v20;
  uint64_t v21;
  float v22;
  __int32 *v23;
  float32x2_t v24;
  __int32 *v25;
  float32x4_t v26;
  __int32 *v27;
  float32x4_t v28;
  __int32 *v29;
  int64x2_t v30;
  float32x2_t *v31;
  int64x2_t v32;
  float32x2_t *v33;
  int64x2_t v34;
  float32x2_t *v35;
  int64x2_t v36;
  float32x4_t *v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  int64x2_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  uint64_t v68;
  uint64_t v69;
  float32x2_t v70;
  float32x2_t v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x4_t v74;
  float32x4_t v75;
  BOOL v76;
  float32x2_t *v77;
  float32x2_t *v78;
  float32x2_t *v79;
  float32x2_t *v80;
  float32x2_t *v81;
  float32x2_t v82;
  float v83;
  float32_t v84;
  float32_t v85;
  float32_t v86;
  float32x2_t v87;
  float32_t v88;
  float32_t v89;
  float32_t v90;
  float32_t v91;
  float32_t v92;
  float32_t v93;
  uint64_t j;
  int32x4_t *v95;
  int32x4_t *v96;
  float *v97;
  float32x2_t *v98;
  float32x4_t *v99;
  float32x4_t *v100;
  uint64_t v101;
  float v102;
  __int32 *v103;
  float32x2_t v104;
  __int32 *v105;
  float32x4_t v106;
  __int32 *v107;
  float32x4_t v108;
  __int32 *v109;
  int32x4_t v110;
  float32x2_t *v111;
  int32x4_t v112;
  float32x4_t *v113;
  int32x4_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float v121;
  float v122;
  float32x4_t v123;
  float32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  uint64_t v127;
  uint64_t v128;
  float32x2_t v129;
  float32x2_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x2_t *v133;
  float32x2_t *v134;
  float32x2_t *v135;
  float32x2_t v136;
  float v137;
  float32_t v138;
  float32x2_t v139;
  float32_t v140;
  float32_t v141;
  uint64_t k;
  float *v143;
  float32x2_t *v144;
  float32x4_t *v145;
  float32x4_t *v146;
  uint64_t v147;
  float v148;
  __int32 *v149;
  float32x2_t v150;
  __int32 *v151;
  float32x4_t v152;
  __int32 *v153;
  float32x4_t v154;
  __int32 *v155;
  float32x4_t v156;
  float32x4_t *v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x2_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float v163;
  float32x4_t v164;
  int32x4_t v165;
  int32x4_t v166;
  uint64_t v167;
  uint64_t v168;
  float32x2_t v169;
  float32x2_t *v170;
  float32x2_t *v171;
  float32x2_t v172;
  float v173;
  float32x2_t v174;

  v8 = 4 * a6;
  v9 = 4 * a4;
  v10 = 0;
  if (a2 <= 3)
    goto LABEL_21;
  v11 = a2 - 3;
  do
  {
    for (i = result; i > 3; *v37 = vmulq_n_f32(v56, a7))
    {
      i -= 4;
      v13 = (int64x2_t *)(a5 + v10 * v8 + 4 * i);
      v14 = (int64x2_t *)((char *)v13 + v8);
      v15 = (int64x2_t *)((char *)v13 + 2 * v8);
      v16 = (int64x2_t *)((char *)v13 + 2 * v8 + v8);
      v17 = (float *)(a3 + i * v9 + 4 * i);
      v18 = (float32x2_t *)&v17[(unint64_t)v9 / 4];
      v19 = (float32x4_t *)&v17[(unint64_t)v9 / 2];
      v20 = (float32x4_t *)&v17[(unint64_t)v9 / 4 + (unint64_t)v9 / 2];
      v21 = i;
      v22 = *v17;
      v23 = (__int32 *)(a3 + i * v9);
      v24 = *v18;
      v25 = (__int32 *)v18 - i;
      v26 = *v19;
      v27 = (__int32 *)v19 - i;
      v28 = *v20;
      v29 = (__int32 *)v20 - i;
      v30 = *v13;
      v31 = (float32x2_t *)(a5 + v10 * v8);
      v32 = *v14;
      v33 = (float32x2_t *)((char *)v14 - 4 * i);
      v34 = *v15;
      v35 = (float32x2_t *)((char *)v15 - 4 * i);
      v36 = *v16;
      v37 = (float32x4_t *)((char *)v16 - 4 * i);
      v38 = (int32x4_t)vtrn1q_s64(v30, v34);
      v39 = (int32x4_t)vtrn1q_s64(v32, v36);
      v40 = (int32x4_t)vtrn2q_s64(v30, v34);
      v41 = (int32x4_t)vtrn2q_s64(v32, v36);
      v42 = (float32x4_t)vtrn1q_s32(v38, v39);
      v43 = (float32x4_t)vtrn2q_s32(v38, v39);
      v44 = (float32x4_t)vtrn1q_s32(v40, v41);
      v45 = (int64x2_t)vmulq_n_f32(v42, v22);
      v46 = (int64x2_t)vaddq_f32(vmulq_n_f32(v42, v24.f32[0]), vmulq_lane_f32(v43, v24, 1));
      v47 = (int64x2_t)vaddq_f32(vmlaq_laneq_f32(vmulq_n_f32(v42, v26.f32[0]), v44, v26, 2), vmulq_lane_f32(v43, *(float32x2_t *)v26.f32, 1));
      v48 = (int64x2_t)vaddq_f32(vaddq_f32(vmlaq_laneq_f32(vmulq_n_f32(v42, v28.f32[0]), v44, v28, 2), vmulq_lane_f32(v43, *(float32x2_t *)v28.f32, 1)), vmulq_laneq_f32((float32x4_t)vtrn2q_s32(v40, v41), v28, 3));
      v49 = (int32x4_t)vtrn1q_s64(v45, v47);
      v50 = (int32x4_t)vtrn1q_s64(v46, v48);
      v51 = (int32x4_t)vtrn2q_s64(v45, v47);
      v52 = (int32x4_t)vtrn2q_s64(v46, v48);
      v53 = (float32x4_t)vtrn1q_s32(v49, v50);
      v54 = (float32x4_t)vtrn2q_s32(v49, v50);
      v55 = (float32x4_t)vtrn1q_s32(v51, v52);
      v56 = (float32x4_t)vtrn2q_s32(v51, v52);
      if ((i & 1) != 0)
      {
        v57.i32[0] = *v23++;
        v57.i32[1] = *v25++;
        v57.i32[2] = *v27++;
        v57.i32[3] = *v29++;
        v58 = v31->f32[0];
        v31 = (float32x2_t *)((char *)v31 + 4);
        v59 = v33->f32[0];
        v33 = (float32x2_t *)((char *)v33 + 4);
        v60 = v35->f32[0];
        v35 = (float32x2_t *)((char *)v35 + 4);
        v61 = v37->f32[0];
        v37 = (float32x4_t *)((char *)v37 + 4);
        v53 = vmlaq_n_f32(v53, v57, v58);
        v54 = vmlaq_n_f32(v54, v57, v59);
        v55 = vmlaq_n_f32(v55, v57, v60);
        v56 = vmlaq_n_f32(v56, v57, v61);
        v21 = i - 1;
      }
      if (v21)
      {
        v62 = 0uLL;
        v63 = 0uLL;
        v64 = 0uLL;
        v65 = 0uLL;
        do
        {
          v66.i64[0] = *(_QWORD *)v23;
          v23 += 2;
          v67.i64[0] = *(_QWORD *)v25;
          v25 += 2;
          v68 = *(_QWORD *)v27;
          v27 += 2;
          v69 = *(_QWORD *)v29;
          v29 += 2;
          v70 = *v31++;
          v71 = *v33++;
          v72 = *v35++;
          v73 = *(float32x2_t *)v37->f32;
          v37 = (float32x4_t *)((char *)v37 + 8);
          v66.i64[1] = v68;
          v67.i64[1] = v69;
          v74 = (float32x4_t)vtrn1q_s32(v66, v67);
          v75 = (float32x4_t)vtrn2q_s32(v66, v67);
          v53 = vmlaq_n_f32(v53, v74, v70.f32[0]);
          v54 = vmlaq_n_f32(v54, v74, v71.f32[0]);
          v55 = vmlaq_n_f32(v55, v74, v72.f32[0]);
          v56 = vmlaq_n_f32(v56, v74, v73.f32[0]);
          v62 = vmlaq_lane_f32(v62, v75, v70, 1);
          v63 = vmlaq_lane_f32(v63, v75, v71, 1);
          v64 = vmlaq_lane_f32(v64, v75, v72, 1);
          v65 = vmlaq_lane_f32(v65, v75, v73, 1);
          v76 = v21 <= 2;
          v21 -= 2;
        }
        while (!v76);
        v53 = vaddq_f32(v53, v62);
        v54 = vaddq_f32(v54, v63);
        v55 = vaddq_f32(v55, v64);
        v56 = vaddq_f32(v56, v65);
      }
      *(float32x4_t *)v31->f32 = vmulq_n_f32(v53, a7);
      *(float32x4_t *)v33->f32 = vmulq_n_f32(v54, a7);
      *(float32x4_t *)v35->f32 = vmulq_n_f32(v55, a7);
    }
    if (i)
    {
      v77 = (float32x2_t *)(a5 + v10 * v8);
      v78 = (float32x2_t *)((char *)v77 + v8);
      v79 = &v77[(unint64_t)v8 / 4];
      v80 = (float32x2_t *)((char *)&v77[(unint64_t)v8 / 4] + v8);
      v81 = (float32x2_t *)(a3 + (i - 1) * v9);
      if ((result & 3) != 1)
      {
        if ((result & 3) != 2)
        {
          v82 = *v81;
          v83 = v81[1].f32[0];
          v81 = (float32x2_t *)((char *)v81 - v9);
          v84 = (float)(vaddv_f32(vmul_f32(v82, *v78)) + (float)(v78[1].f32[0] * v83)) * a7;
          v85 = (float)(vaddv_f32(vmul_f32(v82, *v79)) + (float)(v79[1].f32[0] * v83)) * a7;
          v86 = (float)(vaddv_f32(vmul_f32(v82, *v80)) + (float)(v80[1].f32[0] * v83)) * a7;
          v77[1].f32[0] = (float)(vaddv_f32(vmul_f32(v82, *v77)) + (float)(v77[1].f32[0] * v83)) * a7;
          v78[1].f32[0] = v84;
          v79[1].f32[0] = v85;
          v80[1].f32[0] = v86;
        }
        v87 = *v81;
        v81 = (float32x2_t *)((char *)v81 - v9);
        v88 = vaddv_f32(vmul_f32(v87, *v78)) * a7;
        v89 = vaddv_f32(vmul_f32(v87, *v79)) * a7;
        v90 = vaddv_f32(vmul_f32(v87, *v80)) * a7;
        v77->f32[1] = vaddv_f32(vmul_f32(v87, *v77)) * a7;
        v78->f32[1] = v88;
        v79->f32[1] = v89;
        v80->f32[1] = v90;
      }
      v91 = (float)(v81->f32[0] * v78->f32[0]) * a7;
      v92 = (float)(v81->f32[0] * v79->f32[0]) * a7;
      v93 = (float)(v81->f32[0] * v80->f32[0]) * a7;
      v77->f32[0] = (float)(v81->f32[0] * v77->f32[0]) * a7;
      v78->f32[0] = v91;
      v79->f32[0] = v92;
      v80->f32[0] = v93;
    }
    v10 += 4;
    v76 = v11 <= 4;
    v11 -= 4;
  }
  while (!v76);
  v76 = v11 <= -3;
  a2 = v11 + 3;
  if (!v76)
  {
LABEL_21:
    if (a2 > 1)
    {
      for (j = result; j > 3; *v113 = vmulq_n_f32(v119, a7))
      {
        j -= 4;
        v95 = (int32x4_t *)(a5 + v10 * v8 + 4 * j);
        v96 = (int32x4_t *)((char *)v95 + v8);
        v97 = (float *)(a3 + j * v9 + 4 * j);
        v98 = (float32x2_t *)&v97[(unint64_t)v9 / 4];
        v99 = (float32x4_t *)&v97[(unint64_t)v9 / 2];
        v100 = (float32x4_t *)&v97[(unint64_t)v9 / 4 + (unint64_t)v9 / 2];
        v101 = j;
        v102 = *v97;
        v103 = (__int32 *)(a3 + j * v9);
        v104 = *v98;
        v105 = (__int32 *)v98 - j;
        v106 = *v99;
        v107 = (__int32 *)v99 - j;
        v108 = *v100;
        v109 = (__int32 *)v100 - j;
        v110 = *v95;
        v111 = (float32x2_t *)(a5 + v10 * v8);
        v112 = *v96;
        v113 = (float32x4_t *)((char *)v96 - 4 * j);
        v114 = vtrn1q_s32(v110, v112);
        v115 = vtrn2q_s32(v110, v112);
        *(float32x2_t *)v116.i8 = vmul_n_f32(*(float32x2_t *)v114.i8, v102);
        *(float32x2_t *)v117.i8 = vadd_f32(vmul_n_f32(*(float32x2_t *)v114.i8, v104.f32[0]), vmul_lane_f32(*(float32x2_t *)v115.i8, v104, 1));
        v116.u64[1] = (unint64_t)vadd_f32(vmla_laneq_f32(vmul_n_f32(*(float32x2_t *)v114.i8, v106.f32[0]), (float32x2_t)v114.u64[1], v106, 2), vmul_lane_f32(*(float32x2_t *)v115.i8, *(float32x2_t *)v106.f32, 1));
        v117.u64[1] = (unint64_t)vadd_f32(vadd_f32(vmla_laneq_f32(vmul_n_f32(*(float32x2_t *)v114.i8, v108.f32[0]), (float32x2_t)v114.u64[1], v108, 2), vmul_lane_f32(*(float32x2_t *)v115.i8, *(float32x2_t *)v108.f32, 1)), vmul_laneq_f32((float32x2_t)v115.u64[1], v108, 3));
        v118 = (float32x4_t)vtrn1q_s32(v116, v117);
        v119 = (float32x4_t)vtrn2q_s32(v116, v117);
        if ((j & 1) != 0)
        {
          v120.i32[0] = *v103++;
          v120.i32[1] = *v105++;
          v120.i32[2] = *v107++;
          v120.i32[3] = *v109++;
          v121 = v111->f32[0];
          v111 = (float32x2_t *)((char *)v111 + 4);
          v122 = v113->f32[0];
          v113 = (float32x4_t *)((char *)v113 + 4);
          v118 = vmlaq_n_f32(v118, v120, v121);
          v119 = vmlaq_n_f32(v119, v120, v122);
          v101 = j - 1;
        }
        if (v101)
        {
          v123 = 0uLL;
          v124 = 0uLL;
          do
          {
            v125.i64[0] = *(_QWORD *)v103;
            v103 += 2;
            v126.i64[0] = *(_QWORD *)v105;
            v105 += 2;
            v127 = *(_QWORD *)v107;
            v107 += 2;
            v128 = *(_QWORD *)v109;
            v109 += 2;
            v129 = *v111++;
            v130 = *(float32x2_t *)v113->f32;
            v113 = (float32x4_t *)((char *)v113 + 8);
            v125.i64[1] = v127;
            v126.i64[1] = v128;
            v131 = (float32x4_t)vtrn1q_s32(v125, v126);
            v132 = (float32x4_t)vtrn2q_s32(v125, v126);
            v118 = vmlaq_n_f32(v118, v131, v129.f32[0]);
            v119 = vmlaq_n_f32(v119, v131, v130.f32[0]);
            v123 = vmlaq_lane_f32(v123, v132, v129, 1);
            v124 = vmlaq_lane_f32(v124, v132, v130, 1);
            v76 = v101 <= 2;
            v101 -= 2;
          }
          while (!v76);
          v118 = vaddq_f32(v118, v123);
          v119 = vaddq_f32(v119, v124);
        }
        *(float32x4_t *)v111->f32 = vmulq_n_f32(v118, a7);
      }
      if (j)
      {
        v133 = (float32x2_t *)(a5 + v10 * v8);
        v134 = (float32x2_t *)((char *)v133 + v8);
        v135 = (float32x2_t *)(a3 + (j - 1) * v9);
        if ((result & 3) != 1)
        {
          if ((result & 3) != 2)
          {
            v136 = *v135;
            v137 = v135[1].f32[0];
            v135 = (float32x2_t *)((char *)v135 - v9);
            v138 = (float)(vaddv_f32(vmul_f32(v136, *v134)) + (float)(v134[1].f32[0] * v137)) * a7;
            v133[1].f32[0] = (float)(vaddv_f32(vmul_f32(v136, *v133)) + (float)(v133[1].f32[0] * v137)) * a7;
            v134[1].f32[0] = v138;
          }
          v139 = *v135;
          v135 = (float32x2_t *)((char *)v135 - v9);
          v140 = vaddv_f32(vmul_f32(v139, *v134)) * a7;
          v133->f32[1] = vaddv_f32(vmul_f32(v139, *v133)) * a7;
          v134->f32[1] = v140;
        }
        v141 = (float)(v135->f32[0] * v134->f32[0]) * a7;
        v133->f32[0] = (float)(v135->f32[0] * v133->f32[0]) * a7;
        v134->f32[0] = v141;
      }
      a2 -= 2;
      v10 += 2;
    }
    if (a2)
    {
      for (k = result; k > 3; *v157 = vmulq_n_f32(v161, a7))
      {
        k -= 4;
        v143 = (float *)(a3 + k * v9 + 4 * k);
        v144 = (float32x2_t *)&v143[(unint64_t)v9 / 4];
        v145 = (float32x4_t *)&v143[(unint64_t)v9 / 2];
        v146 = (float32x4_t *)&v143[(unint64_t)v9 / 4 + (unint64_t)v9 / 2];
        v147 = k;
        v148 = *v143;
        v149 = (__int32 *)(a3 + k * v9);
        v150 = *v144;
        v151 = (__int32 *)v144 - k;
        v152 = *v145;
        v153 = (__int32 *)v145 - k;
        v154 = *v146;
        v155 = (__int32 *)v146 - k;
        v156 = *(float32x4_t *)(a5 + v10 * v8 + 4 * k);
        v157 = (float32x4_t *)(a5 + v10 * v8);
        v152.i32[3] = 0;
        v158 = vmulq_f32(v154, v156);
        v159 = vmulq_f32(v152, v156);
        v160 = vmul_f32(v150, *(float32x2_t *)v156.f32);
        *(float *)v7.i32 = v148 * v156.f32[0];
        v158.i64[0] = vpaddq_f32(v158, v158).u64[0];
        v159.i64[0] = vpaddq_f32(v159, v159).u64[0];
        v160.f32[0] = vaddv_f32(v160);
        v158.f32[0] = vaddv_f32(*(float32x2_t *)v158.f32);
        v159.f32[0] = vaddv_f32(*(float32x2_t *)v159.f32);
        *(int32x2_t *)v161.f32 = vtrn1_s32(v7, (int32x2_t)v160);
        *(int32x2_t *)&v161.u32[2] = vtrn1_s32(*(int32x2_t *)v159.f32, *(int32x2_t *)v158.f32);
        if ((k & 1) != 0)
        {
          v162.i32[0] = *v149++;
          v162.i32[1] = *v151++;
          v162.i32[2] = *v153++;
          v162.i32[3] = *v155++;
          v163 = v157->f32[0];
          v157 = (float32x4_t *)((char *)v157 + 4);
          v161 = vmlaq_n_f32(v161, v162, v163);
          v147 = k - 1;
        }
        if (v147)
        {
          v164 = 0uLL;
          do
          {
            v165.i64[0] = *(_QWORD *)v149;
            v149 += 2;
            v166.i64[0] = *(_QWORD *)v151;
            v151 += 2;
            v167 = *(_QWORD *)v153;
            v153 += 2;
            v168 = *(_QWORD *)v155;
            v155 += 2;
            v169 = *(float32x2_t *)v157->f32;
            v157 = (float32x4_t *)((char *)v157 + 8);
            v165.i64[1] = v167;
            v166.i64[1] = v168;
            v161 = vmlaq_n_f32(v161, (float32x4_t)vtrn1q_s32(v165, v166), v169.f32[0]);
            v164 = vmlaq_lane_f32(v164, (float32x4_t)vtrn2q_s32(v165, v166), v169, 1);
            v76 = v147 <= 2;
            v147 -= 2;
          }
          while (!v76);
          v161 = vaddq_f32(v161, v164);
        }
      }
      if (k)
      {
        v170 = (float32x2_t *)(a5 + v10 * v8);
        v171 = (float32x2_t *)(a3 + (k - 1) * v9);
        if ((result & 3) != 1)
        {
          if ((result & 3) != 2)
          {
            v172 = *v171;
            v173 = v171[1].f32[0];
            v171 = (float32x2_t *)((char *)v171 - v9);
            v170[1].f32[0] = (float)(vaddv_f32(vmul_f32(v172, *v170)) + (float)(v170[1].f32[0] * v173)) * a7;
          }
          v174 = *v171;
          v171 = (float32x2_t *)((char *)v171 - v9);
          v170->f32[1] = vaddv_f32(vmul_f32(v174, *v170)) * a7;
        }
        v170->f32[0] = (float)(v171->f32[0] * v170->f32[0]) * a7;
      }
    }
  }
  return result;
}

uint64_t sub_223158140(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  float32x4_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  int64x2_t *v13;
  int64x2_t *v14;
  int64x2_t *v15;
  int64x2_t *v16;
  uint64_t v17;
  float *v18;
  float32x2_t *v19;
  float32x4_t *v20;
  uint64_t v21;
  __int32 *v22;
  float v23;
  __int32 *v24;
  float32x2_t v25;
  __int32 *v26;
  float32x4_t v27;
  __int32 *v28;
  int64x2_t v29;
  float32x2_t *v30;
  int64x2_t v31;
  float32x2_t *v32;
  int64x2_t v33;
  float32x2_t *v34;
  int64x2_t v35;
  float32x4_t *v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  uint64_t v65;
  uint64_t v66;
  float32x2_t v67;
  float32x2_t v68;
  float32x2_t v69;
  float32x2_t v70;
  float32x4_t v71;
  BOOL v72;
  float32x2_t *v73;
  float32x2_t *v74;
  float32x2_t *v75;
  float32x2_t *v76;
  float32x2_t *v77;
  float32x2_t v78;
  float32_t v79;
  float32_t v80;
  float32_t v81;
  float32_t v82;
  float32_t v83;
  float32_t v84;
  float32_t v85;
  float32_t v86;
  float32_t v87;
  uint64_t j;
  int32x4_t *v89;
  int32x4_t *v90;
  uint64_t v91;
  float *v92;
  float32x2_t *v93;
  float32x4_t *v94;
  uint64_t v95;
  __int32 *v96;
  float v97;
  __int32 *v98;
  float32x2_t v99;
  __int32 *v100;
  float32x4_t v101;
  __int32 *v102;
  int32x4_t v103;
  float32x2_t *v104;
  int32x4_t v105;
  float32x4_t *v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  float32x2_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float v114;
  float v115;
  float32x4_t v116;
  float32x4_t v117;
  int32x4_t v118;
  int32x4_t v119;
  uint64_t v120;
  uint64_t v121;
  float32x2_t v122;
  float32x2_t v123;
  float32x4_t v124;
  float32x2_t *v125;
  float32x2_t *v126;
  float32x2_t *v127;
  float32x2_t v128;
  float32_t v129;
  float32_t v130;
  float32_t v131;
  uint64_t k;
  uint64_t v133;
  float *v134;
  float32x2_t *v135;
  float32x4_t *v136;
  uint64_t v137;
  __int32 *v138;
  float v139;
  __int32 *v140;
  float32x2_t v141;
  __int32 *v142;
  float32x4_t v143;
  __int32 *v144;
  float32x4_t v145;
  float32x4_t *v146;
  float32x4_t v147;
  float32x2_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float v152;
  float32x4_t v153;
  int32x4_t v154;
  int32x4_t v155;
  uint64_t v156;
  uint64_t v157;
  float32x2_t v158;
  float32x2_t *v159;
  float32x2_t *v160;
  float32x2_t v161;

  v8 = 4 * a6;
  v9 = 4 * a4;
  v10 = 0;
  if (a2 <= 3)
    goto LABEL_21;
  v11 = a2 - 3;
  do
  {
    for (i = result; i > 3; *v36 = vmulq_n_f32(v53, a7))
    {
      i -= 4;
      v13 = (int64x2_t *)(a5 + v10 * v8 + 4 * i);
      v14 = (int64x2_t *)((char *)v13 + v8);
      v15 = (int64x2_t *)((char *)v13 + 2 * v8);
      v16 = (int64x2_t *)((char *)v13 + 2 * v8 + v8);
      v17 = a3 + i * v9 + 4 * i;
      v18 = (float *)(v17 + v9);
      v19 = (float32x2_t *)(v17 + 2 * v9);
      v20 = (float32x4_t *)(v17 + v9 + 2 * v9);
      v21 = i;
      v22 = (__int32 *)(a3 + i * v9);
      v23 = *v18;
      v24 = (__int32 *)&v18[-i];
      v25 = *v19;
      v26 = (__int32 *)v19 - i;
      v27 = *v20;
      v28 = (__int32 *)v20 - i;
      v29 = *v13;
      v30 = (float32x2_t *)(a5 + v10 * v8);
      v31 = *v14;
      v32 = (float32x2_t *)((char *)v14 - 4 * i);
      v33 = *v15;
      v34 = (float32x2_t *)((char *)v15 - 4 * i);
      v35 = *v16;
      v36 = (float32x4_t *)((char *)v16 - 4 * i);
      v37 = (int32x4_t)vtrn1q_s64(v29, v33);
      v38 = (int32x4_t)vtrn1q_s64(v31, v35);
      v39 = (int32x4_t)vtrn2q_s64(v29, v33);
      v40 = (int32x4_t)vtrn2q_s64(v31, v35);
      v41 = (float32x4_t)vtrn1q_s32(v37, v38);
      v42 = (float32x4_t)vtrn2q_s32(v37, v38);
      v43 = (float32x4_t)vtrn1q_s32(v39, v40);
      v44 = (int64x2_t)vmlaq_n_f32(v42, v41, v23);
      v45 = (int64x2_t)vaddq_f32(vmlaq_n_f32(v43, v41, v25.f32[0]), vmulq_lane_f32(v42, v25, 1));
      v46 = (int64x2_t)vaddq_f32(vmlaq_laneq_f32(vmlaq_n_f32((float32x4_t)vtrn2q_s32(v39, v40), v41, v27.f32[0]), v43, v27, 2), vmulq_lane_f32(v42, *(float32x2_t *)v27.f32, 1));
      v47 = (int32x4_t)vtrn1q_s64((int64x2_t)v41, v45);
      v48 = (int32x4_t)vtrn1q_s64(v44, v46);
      v49 = (int32x4_t)vtrn2q_s64((int64x2_t)v41, v45);
      v7 = (float32x4_t)vtrn2q_s64(v44, v46);
      v50 = (float32x4_t)vtrn1q_s32(v47, v48);
      v51 = (float32x4_t)vtrn2q_s32(v47, v48);
      v52 = (float32x4_t)vtrn1q_s32(v49, (int32x4_t)v7);
      v53 = (float32x4_t)vtrn2q_s32(v49, (int32x4_t)v7);
      if ((i & 1) != 0)
      {
        v54.i32[0] = *v22++;
        v54.i32[1] = *v24++;
        v54.i32[2] = *v26++;
        v54.i32[3] = *v28++;
        v55 = v30->f32[0];
        v30 = (float32x2_t *)((char *)v30 + 4);
        v56 = v32->f32[0];
        v32 = (float32x2_t *)((char *)v32 + 4);
        v57 = v34->f32[0];
        v34 = (float32x2_t *)((char *)v34 + 4);
        v58 = v36->f32[0];
        v36 = (float32x4_t *)((char *)v36 + 4);
        v50 = vmlaq_n_f32(v50, v54, v55);
        v51 = vmlaq_n_f32(v51, v54, v56);
        v52 = vmlaq_n_f32(v52, v54, v57);
        v53 = vmlaq_n_f32(v53, v54, v58);
        v21 = i - 1;
      }
      if (v21)
      {
        v59 = 0uLL;
        v60 = 0uLL;
        v61 = 0uLL;
        v62 = 0uLL;
        do
        {
          v63.i64[0] = *(_QWORD *)v22;
          v22 += 2;
          v64.i64[0] = *(_QWORD *)v24;
          v24 += 2;
          v65 = *(_QWORD *)v26;
          v26 += 2;
          v66 = *(_QWORD *)v28;
          v28 += 2;
          v67 = *v30++;
          v68 = *v32++;
          v69 = *v34++;
          v70 = *(float32x2_t *)v36->f32;
          v36 = (float32x4_t *)((char *)v36 + 8);
          v63.i64[1] = v65;
          v64.i64[1] = v66;
          v71 = (float32x4_t)vtrn1q_s32(v63, v64);
          v7 = (float32x4_t)vtrn2q_s32(v63, v64);
          v50 = vmlaq_n_f32(v50, v71, v67.f32[0]);
          v51 = vmlaq_n_f32(v51, v71, v68.f32[0]);
          v52 = vmlaq_n_f32(v52, v71, v69.f32[0]);
          v53 = vmlaq_n_f32(v53, v71, v70.f32[0]);
          v59 = vmlaq_lane_f32(v59, v7, v67, 1);
          v60 = vmlaq_lane_f32(v60, v7, v68, 1);
          v61 = vmlaq_lane_f32(v61, v7, v69, 1);
          v62 = vmlaq_lane_f32(v62, v7, v70, 1);
          v72 = v21 <= 2;
          v21 -= 2;
        }
        while (!v72);
        v50 = vaddq_f32(v50, v59);
        v51 = vaddq_f32(v51, v60);
        v52 = vaddq_f32(v52, v61);
        v53 = vaddq_f32(v53, v62);
      }
      *(float32x4_t *)v30->f32 = vmulq_n_f32(v50, a7);
      *(float32x4_t *)v32->f32 = vmulq_n_f32(v51, a7);
      *(float32x4_t *)v34->f32 = vmulq_n_f32(v52, a7);
    }
    if (i)
    {
      v73 = (float32x2_t *)(a5 + v10 * v8);
      v74 = (float32x2_t *)((char *)v73 + v8);
      v75 = &v73[(unint64_t)v8 / 4];
      v76 = (float32x2_t *)((char *)&v73[(unint64_t)v8 / 4] + v8);
      v77 = (float32x2_t *)(a3 + (i - 1) * v9);
      if ((result & 3) != 1)
      {
        if ((result & 3) != 2)
        {
          v78 = *v77;
          v77 = (float32x2_t *)((char *)v77 - v9);
          v79 = (float)(vaddv_f32(vmul_f32(v78, *v74)) + v74[1].f32[0]) * a7;
          v80 = (float)(vaddv_f32(vmul_f32(v78, *v75)) + v75[1].f32[0]) * a7;
          v81 = (float)(vaddv_f32(vmul_f32(v78, *v76)) + v76[1].f32[0]) * a7;
          v73[1].f32[0] = (float)(vaddv_f32(vmul_f32(v78, *v73)) + v73[1].f32[0]) * a7;
          v74[1].f32[0] = v79;
          v75[1].f32[0] = v80;
          v76[1].f32[0] = v81;
        }
        v82 = (float)(COERCE_FLOAT(HIDWORD(*(unint64_t *)v74)) + (float)(v77->f32[0] * COERCE_FLOAT(*v74))) * a7;
        v83 = (float)(COERCE_FLOAT(HIDWORD(*(unint64_t *)v75)) + (float)(v77->f32[0] * COERCE_FLOAT(*v75))) * a7;
        v84 = (float)(COERCE_FLOAT(HIDWORD(*(unint64_t *)v76)) + (float)(v77->f32[0] * COERCE_FLOAT(*v76))) * a7;
        v73->f32[1] = (float)(COERCE_FLOAT(HIDWORD(*(unint64_t *)v73)) + (float)(v77->f32[0] * COERCE_FLOAT(*v73)))
                    * a7;
        v74->f32[1] = v82;
        v75->f32[1] = v83;
        v76->f32[1] = v84;
      }
      v85 = v74->f32[0] * a7;
      v86 = v75->f32[0] * a7;
      v87 = v76->f32[0] * a7;
      v73->f32[0] = v73->f32[0] * a7;
      v74->f32[0] = v85;
      v75->f32[0] = v86;
      v76->f32[0] = v87;
    }
    v10 += 4;
    v72 = v11 <= 4;
    v11 -= 4;
  }
  while (!v72);
  v72 = v11 <= -3;
  a2 = v11 + 3;
  if (!v72)
  {
LABEL_21:
    if (a2 > 1)
    {
      for (j = result; j > 3; *v106 = vmulq_n_f32(v112, a7))
      {
        j -= 4;
        v89 = (int32x4_t *)(a5 + v10 * v8 + 4 * j);
        v90 = (int32x4_t *)((char *)v89 + v8);
        v91 = a3 + j * v9 + 4 * j;
        v92 = (float *)(v91 + v9);
        v93 = (float32x2_t *)(v91 + 2 * v9);
        v94 = (float32x4_t *)(v91 + v9 + 2 * v9);
        v95 = j;
        v96 = (__int32 *)(a3 + j * v9);
        v97 = *v92;
        v98 = (__int32 *)&v92[-j];
        v99 = *v93;
        v100 = (__int32 *)v93 - j;
        v101 = *v94;
        v102 = (__int32 *)v94 - j;
        v103 = *v89;
        v104 = (float32x2_t *)(a5 + v10 * v8);
        v105 = *v90;
        v106 = (float32x4_t *)((char *)v90 - 4 * j);
        v107 = vtrn1q_s32(v103, v105);
        v108 = vtrn2q_s32(v103, v105);
        *(float32x2_t *)v109.i8 = vmla_n_f32(*(float32x2_t *)v108.i8, *(float32x2_t *)v107.i8, v97);
        v110 = vadd_f32(vmla_laneq_f32(vmla_n_f32((float32x2_t)v108.u64[1], *(float32x2_t *)v107.i8, v101.f32[0]), (float32x2_t)v107.u64[1], v101, 2), vmul_lane_f32(*(float32x2_t *)v108.i8, *(float32x2_t *)v101.f32, 1));
        v107.u64[1] = (unint64_t)vadd_f32(vmla_n_f32((float32x2_t)v107.u64[1], *(float32x2_t *)v107.i8, v99.f32[0]), vmul_lane_f32(*(float32x2_t *)v108.i8, v99, 1));
        v109.u64[1] = (unint64_t)v110;
        v111 = (float32x4_t)vtrn1q_s32(v107, v109);
        v112 = (float32x4_t)vtrn2q_s32(v107, v109);
        if ((j & 1) != 0)
        {
          v113.i32[0] = *v96++;
          v113.i32[1] = *v98++;
          v113.i32[2] = *v100++;
          v113.i32[3] = *v102++;
          v114 = v104->f32[0];
          v104 = (float32x2_t *)((char *)v104 + 4);
          v115 = v106->f32[0];
          v106 = (float32x4_t *)((char *)v106 + 4);
          v111 = vmlaq_n_f32(v111, v113, v114);
          v112 = vmlaq_n_f32(v112, v113, v115);
          v95 = j - 1;
        }
        if (v95)
        {
          v116 = 0uLL;
          v117 = 0uLL;
          do
          {
            v118.i64[0] = *(_QWORD *)v96;
            v96 += 2;
            v119.i64[0] = *(_QWORD *)v98;
            v98 += 2;
            v120 = *(_QWORD *)v100;
            v100 += 2;
            v121 = *(_QWORD *)v102;
            v102 += 2;
            v122 = *v104++;
            v123 = *(float32x2_t *)v106->f32;
            v106 = (float32x4_t *)((char *)v106 + 8);
            v118.i64[1] = v120;
            v119.i64[1] = v121;
            v124 = (float32x4_t)vtrn1q_s32(v118, v119);
            v7 = (float32x4_t)vtrn2q_s32(v118, v119);
            v111 = vmlaq_n_f32(v111, v124, v122.f32[0]);
            v112 = vmlaq_n_f32(v112, v124, v123.f32[0]);
            v116 = vmlaq_lane_f32(v116, v7, v122, 1);
            v117 = vmlaq_lane_f32(v117, v7, v123, 1);
            v72 = v95 <= 2;
            v95 -= 2;
          }
          while (!v72);
          v111 = vaddq_f32(v111, v116);
          v112 = vaddq_f32(v112, v117);
        }
        *(float32x4_t *)v104->f32 = vmulq_n_f32(v111, a7);
      }
      if (j)
      {
        v125 = (float32x2_t *)(a5 + v10 * v8);
        v126 = (float32x2_t *)((char *)v125 + v8);
        v127 = (float32x2_t *)(a3 + (j - 1) * v9);
        if ((result & 3) != 1)
        {
          if ((result & 3) != 2)
          {
            v128 = *v127;
            v127 = (float32x2_t *)((char *)v127 - v9);
            v129 = (float)(vaddv_f32(vmul_f32(v128, *v126)) + v126[1].f32[0]) * a7;
            v125[1].f32[0] = (float)(vaddv_f32(vmul_f32(v128, *v125)) + v125[1].f32[0]) * a7;
            v126[1].f32[0] = v129;
          }
          v130 = (float)(COERCE_FLOAT(HIDWORD(*(unint64_t *)v126)) + (float)(v127->f32[0] * COERCE_FLOAT(*v126)))
               * a7;
          v125->f32[1] = (float)(COERCE_FLOAT(HIDWORD(*(unint64_t *)v125))
                               + (float)(v127->f32[0] * COERCE_FLOAT(*v125)))
                       * a7;
          v126->f32[1] = v130;
        }
        v131 = v126->f32[0] * a7;
        v125->f32[0] = v125->f32[0] * a7;
        v126->f32[0] = v131;
      }
      a2 -= 2;
      v10 += 2;
    }
    if (a2)
    {
      for (k = result; k > 3; *v146 = vmulq_n_f32(v150, a7))
      {
        k -= 4;
        v133 = a3 + k * v9 + 4 * k;
        v134 = (float *)(v133 + v9);
        v135 = (float32x2_t *)(v133 + 2 * v9);
        v136 = (float32x4_t *)(v133 + v9 + 2 * v9);
        v137 = k;
        v138 = (__int32 *)(a3 + k * v9);
        v139 = *v134;
        v140 = (__int32 *)&v134[-k];
        v141 = *v135;
        v142 = (__int32 *)v135 - k;
        v143 = *v136;
        v144 = (__int32 *)v136 - k;
        v145 = *(float32x4_t *)(a5 + v10 * v8 + 4 * k);
        v146 = (float32x4_t *)(a5 + v10 * v8);
        v143.i32[3] = 0;
        v147 = vmulq_f32(v143, v145);
        v148 = vmul_f32(v141, *(float32x2_t *)v145.f32);
        v7.f32[0] = v139 * v145.f32[0];
        v147.i64[0] = vpaddq_f32(v147, v147).u64[0];
        *(int32x2_t *)v149.f32 = vtrn1_s32(*(int32x2_t *)v145.f32, *(int32x2_t *)v7.f32);
        *(int32x2_t *)&v149.u32[2] = vtrn1_s32((int32x2_t)vpadd_f32(v148, v148), (int32x2_t)vpadd_f32(*(float32x2_t *)v147.f32, *(float32x2_t *)v147.f32));
        v145.i32[0] = 0;
        v150 = vaddq_f32(v149, v145);
        if ((k & 1) != 0)
        {
          v151.i32[0] = *v138++;
          v151.i32[1] = *v140++;
          v151.i32[2] = *v142++;
          v151.i32[3] = *v144++;
          v152 = v146->f32[0];
          v146 = (float32x4_t *)((char *)v146 + 4);
          v150 = vmlaq_n_f32(v150, v151, v152);
          v137 = k - 1;
        }
        if (v137)
        {
          v153 = 0uLL;
          do
          {
            v154.i64[0] = *(_QWORD *)v138;
            v138 += 2;
            v155.i64[0] = *(_QWORD *)v140;
            v140 += 2;
            v156 = *(_QWORD *)v142;
            v142 += 2;
            v157 = *(_QWORD *)v144;
            v144 += 2;
            v158 = *(float32x2_t *)v146->f32;
            v146 = (float32x4_t *)((char *)v146 + 8);
            v154.i64[1] = v156;
            v155.i64[1] = v157;
            v7 = (float32x4_t)vtrn2q_s32(v154, v155);
            v150 = vmlaq_n_f32(v150, (float32x4_t)vtrn1q_s32(v154, v155), v158.f32[0]);
            v153 = vmlaq_lane_f32(v153, v7, v158, 1);
            v72 = v137 <= 2;
            v137 -= 2;
          }
          while (!v72);
          v150 = vaddq_f32(v150, v153);
        }
      }
      if (k)
      {
        v159 = (float32x2_t *)(a5 + v10 * v8);
        v160 = (float32x2_t *)(a3 + (k - 1) * v9);
        if ((result & 3) != 1)
        {
          if ((result & 3) != 2)
          {
            v161 = *v160;
            v160 = (float32x2_t *)((char *)v160 - v9);
            v159[1].f32[0] = (float)(vaddv_f32(vmul_f32(v161, *v159)) + v159[1].f32[0]) * a7;
          }
          v159->f32[1] = (float)(COERCE_FLOAT(HIDWORD(*(unint64_t *)v159))
                               + (float)(v160->f32[0] * COERCE_FLOAT(*v159)))
                       * a7;
        }
        v159->f32[0] = v159->f32[0] * a7;
      }
    }
  }
  return result;
}

_OWORD *sub_2231587E0(_OWORD *a1, _OWORD *a2, float32x4_t *_X2, uint64_t a4, uint64_t a5, uint64_t a6)
{
  float32x4_t v6;
  float32x4_t *v8;
  uint64_t v9;
  _OWORD *v10;
  float32x4_t v11;
  float32x4_t v12;
  _OWORD *result;
  float32x4_t v14;
  float32x4_t v15;
  uint64_t v16;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v44;
  float32x4_t v45;
  _OWORD *v49;
  _OWORD *v50;
  float32x4_t *v51;
  float32x4_t *v52;
  float32x4_t *v53;

  v8 = _X2;
  v9 = 4 * a4;
  v11 = *(float32x4_t *)a1;
  v12 = *((float32x4_t *)a1 + 1);
  v10 = a1 + 2;
  v14 = *(float32x4_t *)v10;
  v15 = *((float32x4_t *)v10 + 1);
  result = v10 + 2;
  do
  {
    v16 = a6;
    v6 = (float32x4_t)veorq_s8((int8x16_t)v6, (int8x16_t)v6);
    __asm { PRFM            #1, [X2,#0x40] }
    v23 = *_X2;
    v24 = _X2[1];
    _X2 = (float32x4_t *)((char *)_X2 + v9);
    __asm { PRFM            #1, [X2,#0x40] }
    v27 = *_X2;
    v28 = _X2[1];
    _X2 = (float32x4_t *)((char *)_X2 + v9);
    __asm { PRFM            #1, [X2,#0x40] }
    v31 = *_X2;
    v32 = _X2[1];
    _X2 = (float32x4_t *)((char *)_X2 + v9);
    __asm { PRFM            #1, [X2,#0x40] }
    v34 = *_X2;
    v35 = _X2[1];
    _X2 = v8 + 2;
    v36 = v6;
    v37 = v6;
    v38 = v6;
    v39 = v6;
    v40 = v6;
    v41 = v6;
    v42 = v6;
    v44 = *(float32x4_t *)a2;
    v45 = *((float32x4_t *)a2 + 1);
    _X6 = a2 + 2;
    __asm
    {
      PRFM            #1, [X6]
      PRFM            #1, [X6,#0x20]
      PRFM            #1, [X6,#0x40]
    }
    if ((a6 & 1) == 0)
      goto LABEL_9;
    v23 = vmlaq_n_f32(v23, v11, v44.f32[0]);
    v27 = vmlaq_lane_f32(v27, v11, *(float32x2_t *)v44.f32, 1);
    v31 = vmlaq_laneq_f32(v31, v11, v44, 2);
    v34 = vmlaq_laneq_f32(v34, v11, v44, 3);
    v11 = v14;
    v24 = vmlaq_n_f32(v24, v12, v44.f32[0]);
    v28 = vmlaq_lane_f32(v28, v12, *(float32x2_t *)v44.f32, 1);
    v32 = vmlaq_laneq_f32(v32, v12, v44, 2);
    v35 = vmlaq_laneq_f32(v35, v12, v44, 3);
    v12 = v15;
    v14 = *(float32x4_t *)result;
    v15 = *((float32x4_t *)result + 1);
    result += 2;
    v44 = *((float32x4_t *)a2 + 1);
    v45 = *(float32x4_t *)_X6;
    _X6 = a2 + 3;
    v16 = a6 - 1;
    if (a6 > 1)
    {
LABEL_9:
      do
      {
        v23 = vmlaq_n_f32(v23, v11, v44.f32[0]);
        v27 = vmlaq_lane_f32(v27, v11, *(float32x2_t *)v44.f32, 1);
        v31 = vmlaq_laneq_f32(v31, v11, v44, 2);
        v34 = vmlaq_laneq_f32(v34, v11, v44, 3);
        v24 = vmlaq_n_f32(v24, v12, v44.f32[0]);
        v28 = vmlaq_lane_f32(v28, v12, *(float32x2_t *)v44.f32, 1);
        v32 = vmlaq_laneq_f32(v32, v12, v44, 2);
        v35 = vmlaq_laneq_f32(v35, v12, v44, 3);
        v11 = *(float32x4_t *)result;
        v12 = *((float32x4_t *)result + 1);
        v49 = result + 2;
        v44 = *(float32x4_t *)_X6;
        v50 = _X6 + 1;
        v6 = vmlaq_n_f32(v6, v14, v45.f32[0]);
        v37 = vmlaq_lane_f32(v37, v14, *(float32x2_t *)v45.f32, 1);
        v39 = vmlaq_laneq_f32(v39, v14, v45, 2);
        v41 = vmlaq_laneq_f32(v41, v14, v45, 3);
        v36 = vmlaq_n_f32(v36, v15, v45.f32[0]);
        v38 = vmlaq_lane_f32(v38, v15, *(float32x2_t *)v45.f32, 1);
        v40 = vmlaq_laneq_f32(v40, v15, v45, 2);
        v42 = vmlaq_laneq_f32(v42, v15, v45, 3);
        v14 = *(float32x4_t *)v49;
        v15 = *((float32x4_t *)v49 + 1);
        result = v49 + 2;
        v45 = *(float32x4_t *)v50;
        _X6 = v50 + 1;
        v16 -= 2;
      }
      while (v16);
      v23 = vaddq_f32(v23, v6);
      v24 = vaddq_f32(v24, v36);
      v27 = vaddq_f32(v27, v37);
      v28 = vaddq_f32(v28, v38);
      v31 = vaddq_f32(v31, v39);
      v32 = vaddq_f32(v32, v40);
      v34 = vaddq_f32(v34, v41);
      v35 = vaddq_f32(v35, v42);
    }
    *v8 = v23;
    v8[1] = v24;
    v51 = (float32x4_t *)((char *)v8 + v9);
    *v51 = v27;
    v51[1] = v28;
    v52 = (float32x4_t *)((char *)v51 + v9);
    *v52 = v31;
    v52[1] = v32;
    v53 = (float32x4_t *)((char *)v52 + v9);
    *v53 = v34;
    v53[1] = v35;
    v8 = _X2;
    a5 -= 8;
  }
  while (a5);
  return result;
}

void sub_223158950(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double *a6, uint64_t a7, float32x4_t *a8, float a9, float a10, int8x16_t a11, uint64_t a12)
{
  unint64_t v12;
  BOOL v13;
  uint64_t i;
  float32x4_t *v15;
  float32x4_t *v16;
  float32x4_t *v17;
  float32x4_t *v18;
  const double *v19;
  const double *v20;
  float32x4_t *v21;
  BOOL v22;
  uint64_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  uint64_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  BOOL v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  uint64_t v52;
  uint64_t v53;
  float32x4_t v54;
  uint64_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  __int32 v61;
  float32x4_t v62;
  uint64_t v63;
  uint64_t v64;
  float v65;
  float v66;
  __int32 v67;
  float32x2_t v68;
  float32x2_t v69;
  float32x2_t v70;
  double v71;
  int32x2_t v72;
  double v73;
  float32x2_t v74;
  __int32 *v75;

  v12 = 4 * a5;
  v13 = a2 <= 1;
  for (i = a2 - 1; !v13; i -= 2)
  {
    v15 = (float32x4_t *)a4;
    v16 = (float32x4_t *)(a4 + v12);
    v17 = (float32x4_t *)(a4 + 2 * v12);
    v18 = (float32x4_t *)(a4 + v12 + 2 * v12);
    v19 = a6;
    v20 = (double *)((char *)a6 + 4 * a7);
    v21 = (float32x4_t *)((char *)a8 + 8 * a12);
    v22 = __OFSUB__(a1, 3);
    v23 = a1 - 3;
    if (a1 > 3)
    {
      do
      {
        v24 = (float32x4_t)veorq_s8(a11, a11);
        v25 = v24;
        v26 = v24;
        v27 = v24;
        v28 = v24;
        v29 = v24;
        v30 = v24;
        v31 = v24;
        v32 = a3 - 3;
        if (a3 > 3)
        {
          v33 = *v15++;
          v34 = v33;
          v35 = *v16++;
          v36 = v35;
          v37 = *v17++;
          v38 = v37;
          v39 = *v18++;
          v40 = v39;
          v41 = *(float32x4_t *)v19;
          v19 += 2;
          v42 = v41;
          v43 = *(float32x4_t *)v20;
          v20 += 2;
          v44 = v43;
          v22 = __OFSUB__(v32, 4);
          v45 = v32 == 4;
          v32 = a3 - 7;
          if (!((a3 - 7 < 0) ^ v22 | v45))
          {
            do
            {
              v24 = vmlaq_f32(v24, v34, v42);
              v25 = vmlaq_f32(v25, v36, v42);
              v26 = vmlaq_f32(v26, v38, v42);
              v27 = vmlaq_f32(v27, v40, v42);
              v46 = *(float32x4_t *)v19;
              v19 += 2;
              v42 = v46;
              v28 = vmlaq_f32(v28, v34, v44);
              v47 = *v15++;
              v34 = v47;
              v29 = vmlaq_f32(v29, v36, v44);
              v48 = *v16++;
              v36 = v48;
              v30 = vmlaq_f32(v30, v38, v44);
              v49 = *v17++;
              v38 = v49;
              v31 = vmlaq_f32(v31, v40, v44);
              v50 = *v18++;
              v40 = v50;
              v51 = *(float32x4_t *)v20;
              v20 += 2;
              v44 = v51;
              v13 = v32 <= 4;
              v32 -= 4;
            }
            while (!v13);
          }
          v24 = vpaddq_f32(vmlaq_f32(v24, v34, v42), vmlaq_f32(v25, v36, v42));
          v25 = vpaddq_f32(vmlaq_f32(v26, v38, v42), vmlaq_f32(v27, v40, v42));
          v26 = vpaddq_f32(vmlaq_f32(v28, v34, v44), vmlaq_f32(v29, v36, v44));
          v27 = vpaddq_f32(vmlaq_f32(v30, v38, v44), vmlaq_f32(v31, v40, v44));
        }
        v13 = v32 <= -2;
        v52 = v32 + 2;
        if (!v13)
        {
          v53 = v15->i64[0];
          v15 = (float32x4_t *)((char *)v15 + 8);
          v54.i64[0] = v53;
          v54.i64[1] = v16->i64[0];
          v16 = (float32x4_t *)((char *)v16 + 8);
          v55 = v17->i64[0];
          v17 = (float32x4_t *)((char *)v17 + 8);
          v56.i64[0] = v55;
          v56.i64[1] = v18->i64[0];
          v18 = (float32x4_t *)((char *)v18 + 8);
          v57 = (float32x4_t)vld1q_dup_f64(v19++);
          v58 = (float32x4_t)vld1q_dup_f64(v20++);
          v24 = vmlaq_f32(v24, v54, v57);
          v25 = vmlaq_f32(v25, v56, v57);
          v26 = vmlaq_f32(v26, v54, v58);
          v27 = vmlaq_f32(v27, v56, v58);
          v52 -= 2;
        }
        v59 = vpaddq_f32(v24, v25);
        v60 = vpaddq_f32(v26, v27);
        if (v52 > -1)
        {
          v61 = v15->i32[0];
          v15 = (float32x4_t *)((char *)v15 + 4);
          v62.i32[0] = v61;
          v62.i32[1] = v16->i32[0];
          v62.i32[2] = v17->i32[0];
          v62.i32[3] = v18->i32[0];
          v59 = vmlaq_n_f32(v59, v62, *(float *)v19);
          v60 = vmlaq_n_f32(v60, v62, *(float *)v20);
        }
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v59, a9), *a8, a10);
        *(float32x4_t *)((char *)a8 + 4 * a12) = vmlaq_n_f32(vmulq_n_f32(v60, a9), *(float32x4_t *)((char *)a8 + 4 * a12), a10);
        *a8++ = (float32x4_t)a11;
        v19 = a6;
        v20 = (double *)((char *)a6 + 4 * a7);
        v15 = (float32x4_t *)((char *)&v15[v12 / 4] - 4 * a3);
        v16 = (float32x4_t *)((char *)v15 + v12);
        v17 = (float32x4_t *)((char *)v15 + 2 * v12);
        v18 = (float32x4_t *)((char *)v15 + 2 * v12 + v12);
        v22 = __OFSUB__(v23, 4);
        v13 = v23 <= 4;
        v23 -= 4;
      }
      while (!v13);
    }
    v63 = a1 & 3;
    if (!v22 && v63 != 0)
    {
      do
      {
        v64 = a3;
        a11 = veorq_s8(a11, a11);
        if ((a3 & 1) == 0)
          goto LABEL_18;
        v65 = v15->f32[0];
        v15 = (float32x4_t *)((char *)v15 + 4);
        v66 = v65;
        v67 = *(_DWORD *)v19;
        v19 = (const double *)((char *)v19 + 4);
        v68.i32[0] = v67;
        v68.i32[1] = *(_DWORD *)v20;
        v20 = (const double *)((char *)v20 + 4);
        *(float32x2_t *)a11.i8 = vmla_n_f32(*(float32x2_t *)a11.i8, v68, v66);
        v64 = a3 - 1;
        if (a3 > 1)
        {
LABEL_18:
          do
          {
            v69 = *(float32x2_t *)v15->f32;
            v15 = (float32x4_t *)((char *)v15 + 8);
            v70 = v69;
            v71 = *v19++;
            v72 = *(int32x2_t *)&v71;
            v73 = *v20++;
            *(float32x2_t *)a11.i8 = vmla_lane_f32(vmla_n_f32(*(float32x2_t *)a11.i8, (float32x2_t)vtrn1_s32(v72, *(int32x2_t *)&v73), v70.f32[0]), (float32x2_t)vtrn2_s32(v72, *(int32x2_t *)&v73), v70, 1);
            v13 = v64 <= 2;
            v64 -= 2;
          }
          while (!v13);
        }
        v74.i32[0] = a8->i32[0];
        v74.i32[1] = a8->i32[a12];
        *(float32x2_t *)a11.i8 = vmla_n_f32(vmul_n_f32(*(float32x2_t *)a11.i8, a9), v74, a10);
        v75 = &a8->i32[a12];
        a8->i32[0] = a11.i32[0];
        a8 = (float32x4_t *)((char *)a8 + 4);
        *v75 = a11.i32[1];
        v19 = a6;
        v20 = (double *)((char *)a6 + 4 * a7);
        v15 = (float32x4_t *)((char *)v15 + v12 + -4 * a3);
        v13 = v63-- <= 1;
      }
      while (!v13);
    }
    a6 += a7;
    a8 = v21;
    v13 = i <= 2;
  }
  if (i > -1)
    sub_22315A8BC(a3, a1, a4, v12 >> 2, a6, 1, a8->f32, 1, a9, a10);
}

uint64_t sub_223158BC0()
{
  size_t v1;
  uint64_t v2;

  v1 = 8;
  v2 = 0;
  if (!sysctlbyname("hw.cpufamily", &v2, &v1, 0, 0))
  {
    if (v2 > 1176831185)
    {
      if (v2 <= 2465937351)
      {
        if (v2 == 1176831186)
          return 8;
        if (v2 == 1741614739)
          return 5;
      }
      else
      {
        switch(v2)
        {
          case 2465937352:
            return 4;
          case 3660830781:
            return 10;
          case 3894312694:
            return 6;
        }
      }
    }
    else if (v2 <= 506291072)
    {
      if (v2 == 131287967)
        return 7;
      if (v2 == 458787763)
        return 9;
    }
    else
    {
      switch(v2)
      {
        case 506291073:
          return 1;
        case 747742334:
          return 3;
        case 933271106:
          return 2;
      }
    }
  }
  return 0;
}

uint64_t sub_223158D28()
{
  int v0;
  unsigned int v1;
  size_t v3;
  uint64_t v4;

  v3 = 8;
  v4 = 0;
  v0 = sysctlbyname("hw.cpusubfamily", &v4, &v3, 0, 0);
  if ((unint64_t)(v4 - 1) <= 4)
    v1 = v4;
  else
    v1 = 0;
  if (v0)
    return 0;
  else
    return v1;
}

unint64_t sub_223158D7C@<X0>(uint64_t a1@<X8>)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unint64_t result;
  size_t v17;
  uint64_t v18;

  v2 = sub_223158BC0();
  *(_DWORD *)(a1 + 4) = v2;
  v3 = sub_223158D28();
  *(_DWORD *)(a1 + 8) = v3;
  v17 = 8;
  v18 = 0;
  v4 = sysctlbyname("hw.perflevel0.l2cachesize", &v18, &v17, 0, 0);
  v5 = v18;
  if (v4)
    v5 = 0x800000;
  *(_QWORD *)(a1 + 40) = v5;
  v17 = 8;
  v18 = 0;
  if (sysctlbyname("hw.perflevel0.physicalcpu_max", &v18, &v17, 0, 0))
    v6 = 2;
  else
    v6 = v18;
  *(_DWORD *)(a1 + 12) = v6;
  v17 = 8;
  v18 = 0;
  v7 = sysctlbyname("hw.perflevel0.cpusperl2", &v18, &v17, 0, 0);
  v8 = v18;
  if (v7)
    v8 = 2;
  *(_DWORD *)(a1 + 28) = v8;
  *(_DWORD *)(a1 + 20) = v6 / v8;
  v17 = 8;
  v18 = 0;
  v9 = sysctlbyname("hw.perflevel1.l2cachesize", &v18, &v17, 0, 0);
  v10 = v18;
  if (v9)
    v10 = 0x400000;
  *(_QWORD *)(a1 + 48) = v10;
  v17 = 8;
  v18 = 0;
  if (sysctlbyname("hw.perflevel1.physicalcpu_max", &v18, &v17, 0, 0))
    v11 = 4;
  else
    v11 = v18;
  *(_DWORD *)(a1 + 16) = v11;
  v17 = 8;
  v18 = 0;
  v12 = sysctlbyname("hw.perflevel1.cpusperl2", &v18, &v17, 0, 0);
  v13 = v18;
  if (v12)
    v13 = 4;
  *(_DWORD *)(a1 + 32) = v13;
  *(_DWORD *)(a1 + 24) = v11 / v13;
  switch(v2)
  {
    case 8:
      v15 = 1;
      break;
    case 10:
      if ((v3 & 6) == 4)
        v15 = 8;
      else
        v15 = 3;
      break;
    case 9:
      v14 = v3 - 2;
      if (v14 >= 4)
        v15 = 2;
      else
        v15 = dword_2245B8C80[v14];
      break;
    default:
      v15 = 0;
      break;
  }
  *(_DWORD *)a1 = v15;
  result = _get_cpu_capabilities();
  *(_DWORD *)(a1 + 56) = (result >> 59) & 2;
  return result;
}

uint64_t sub_223158F90(uint64_t result, uint64_t a2, __int128 *_X2, uint64_t a4, _OWORD *a5)
{
  uint64_t v5;
  __int128 *v7;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD *v18;

  v5 = a2;
  _X3 = 8 * a4;
  v7 = _X2 + 4;
  do
  {
    do
    {
      v9 = *_X2;
      v10 = _X2[1];
      v8 = _X2 + 2;
      v11 = *v8;
      v12 = v8[1];
      _X2 = (__int128 *)((char *)v8 + _X3 - 32);
      __asm { PRFM            #1, [X2,X3,LSL#3] }
      --a2;
      *a5 = v9;
      a5[1] = v10;
      v18 = a5 + 2;
      *v18 = v11;
      v18[1] = v12;
      a5 = v18 + 2;
    }
    while (a2);
    a2 = v5;
    result -= 8;
    _X2 = v7;
    v7 += 4;
  }
  while (result);
  return result;
}

void sub_223158FD8(const float *__X, const float *__Y, float *a3, int a4, uint64_t a5, int a6, uint64_t __N, float a8)
{
  int v9;
  uint64_t v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;

  if (a5 >= 1)
  {
    v9 = __N;
    v10 = a5;
    v14 = __N & 3;
    if (__N <= 0)
      v14 = -(-__N & 3);
    v15 = __N - v14 + 4;
    if ((__N & 3) == 0)
      v15 = __N;
    v16 = 4 * v15;
    do
    {
      v17 = *a3;
      *a3++ = cblas_sdot(v9, __X, 1, __Y, 1) + (float)(a8 * v17);
      __X = (const float *)((char *)__X + v16);
      --v10;
    }
    while (v10);
  }
}

float sub_22315907C(const float *__X, const float *__Y, float *a3, int a4, uint64_t a5, int a6, uint64_t __N)
{
  int v7;
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float result;

  if (a5 >= 1)
  {
    v7 = __N;
    v8 = a5;
    v12 = __N & 3;
    if (__N <= 0)
      v12 = -(-__N & 3);
    v13 = __N - v12 + 4;
    if ((__N & 3) == 0)
      v13 = __N;
    v14 = 4 * v13;
    do
    {
      result = cblas_sdot(v7, __X, 1, __Y, 1) + *a3;
      *a3++ = result;
      __X = (const float *)((char *)__X + v14);
      --v8;
    }
    while (v8);
  }
  return result;
}

void sub_223159114(float32x4_t *a1, const float *__Y, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t __N, float a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  float32x4_t *v19;
  uint64_t v20;
  float32x4_t *v21;
  const float *v22;
  uint64_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float v26;
  float32x4_t v27;
  float32x4_t v28;

  if (__N >= 1 && a6 >= 1)
  {
    v15 = 0;
    v16 = a5 - 7;
    if (a5 <= 0)
      v17 = -(-a5 & 7);
    else
      v17 = a5 & 7;
    v18 = (__N + 3) & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v19 = (float32x4_t *)(a3 + 4 * v15 * a4);
      if (a5 < 8)
      {
        v21 = a1;
        if (!v17)
          goto LABEL_14;
      }
      else
      {
        v20 = 0;
        v21 = a1;
        do
        {
          v22 = __Y;
          v23 = __N;
          v24 = vmulq_n_f32(*v19, a8);
          v25 = vmulq_n_f32(v19[1], a8);
          do
          {
            v26 = *v22++;
            v27 = *v21;
            v28 = v21[1];
            v21 += 2;
            v24 = vmlaq_n_f32(v24, v27, v26);
            v25 = vmlaq_n_f32(v25, v28, v26);
            --v23;
          }
          while (v23);
          *v19 = v24;
          v19[1] = v25;
          v19 += 2;
          v20 += 8;
        }
        while (v20 < v16);
        if (!v17)
          goto LABEL_14;
      }
      sub_223158FD8(v21->f32, __Y, v19->f32, a4, v17, a6, __N, a8);
LABEL_14:
      __Y += v18;
      ++v15;
    }
    while (v15 != a6);
  }
}

void sub_223159244(float32x4_t *a1, const float *__Y, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t __N)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  float32x4_t *v17;
  uint64_t v18;
  float32x4_t *v19;
  const float *v20;
  uint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float v24;
  float32x4_t v25;
  float32x4_t v26;

  if (__N >= 1 && a6 >= 1)
  {
    v13 = 0;
    v14 = a5 - 7;
    if (a5 <= 0)
      v15 = -(-a5 & 7);
    else
      v15 = a5 & 7;
    v16 = (__N + 3) & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v17 = (float32x4_t *)(a3 + 4 * v13 * a4);
      if (a5 < 8)
      {
        v19 = a1;
        if (!v15)
          goto LABEL_14;
      }
      else
      {
        v18 = 0;
        v19 = a1;
        do
        {
          v20 = __Y;
          v21 = __N;
          v22 = *v17;
          v23 = v17[1];
          do
          {
            v24 = *v20++;
            v25 = *v19;
            v26 = v19[1];
            v19 += 2;
            v22 = vmlaq_n_f32(v22, v25, v24);
            v23 = vmlaq_n_f32(v23, v26, v24);
            --v21;
          }
          while (v21);
          *v17 = v22;
          v17[1] = v23;
          v17 += 2;
          v18 += 8;
        }
        while (v18 < v14);
        if (!v15)
          goto LABEL_14;
      }
      sub_22315907C(v19->f32, __Y, v17->f32, a4, v15, a6, __N);
LABEL_14:
      __Y += v16;
      ++v13;
    }
    while (v13 != a6);
  }
}

float *sub_223159354(float *result, float32x4_t *a2, __int32 *a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float32x4_t *v10;
  uint64_t v11;
  float32x4_t v12;
  __int32 *v13;
  float32x4_t v14;
  float32x4_t v15;
  float v16;
  __int32 *v17;
  __int32 *v18;

  if (a5 >= 1)
  {
    v7 = a4;
    if (a6 <= 0)
      v8 = -(-a6 & 3);
    else
      v8 = a6 & 3;
    v9 = 4 - v8;
    if (!v8)
      v9 = 0;
    do
    {
      v10 = a2;
      v11 = a6;
      v12.i32[0] = *a3;
      v13 = &a3[v7 + v7];
      v12.i32[1] = a3[a4];
      v12.i32[2] = *v13;
      v12.i32[3] = v13[a4];
      v14 = vmulq_n_f32(v12, a7);
      do
      {
        v15 = *v10++;
        v16 = *result++;
        v14 = vmlaq_n_f32(v14, v15, v16);
        --v11;
      }
      while (v11);
      v17 = &a3[v7];
      *a3++ = v14.i32[0];
      *v17 = v14.i32[1];
      v18 = &v17[v7];
      *v18 = v14.i32[2];
      v18[a4] = v14.i32[3];
      result += v9;
      --a5;
    }
    while (a5);
  }
  return result;
}

float *sub_2231593E8(float *result, float32x4_t *a2, __int32 *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float32x4_t *v9;
  uint64_t v10;
  __int32 *v11;
  float32x4_t v12;
  float32x4_t v13;
  float v14;
  __int32 *v15;
  __int32 *v16;

  if (a5 >= 1)
  {
    v6 = a4;
    if (a6 <= 0)
      v7 = -(-a6 & 3);
    else
      v7 = a6 & 3;
    v8 = 4 - v7;
    if (!v7)
      v8 = 0;
    do
    {
      v9 = a2;
      v10 = a6;
      v12.i32[0] = *a3;
      v11 = &a3[v6 + v6];
      v12.i32[1] = a3[a4];
      v12.i32[2] = *v11;
      v12.i32[3] = v11[a4];
      do
      {
        v13 = *v9++;
        v14 = *result++;
        v12 = vmlaq_n_f32(v12, v13, v14);
        --v10;
      }
      while (v10);
      v15 = &a3[v6];
      *a3++ = v12.i32[0];
      *v15 = v12.i32[1];
      v16 = &v15[v6];
      *v16 = v12.i32[2];
      v16[a4] = v12.i32[3];
      result += v8;
      --a5;
    }
    while (a5);
  }
  return result;
}

void sub_223159478(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, float32x4_t *a6, uint64_t a7, float32x2_t *a8, float a9, float a10, int8x16_t a11, uint64_t a12, char *a13, uint64_t a14)
{
  float32x4_t *v18;
  uint64_t v25;
  int v26;
  double v27;
  int v31;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  char v44;

  if (!a3 || !a4)
    return;
  v18 = (float32x4_t *)a13;
  if (a5 && a9 != 0.0)
  {
    v25 = a12;
    if (a5 == 1)
    {
      if (a10 == 0.0)
      {
        v26 = a12;
        sub_2231631C4(a3, a4, a13, a14);
      }
      else
      {
        if (a10 == 1.0)
        {
LABEL_31:
          if (a1 == 114 || a1 == 111)
            v31 = 1;
          else
            v31 = a7;
          if (a2 != 114 && a2 != 111)
            LODWORD(v25) = 1;
          cblas_sger(CblasColMajor, a3, a4, a9, a6->f32, v31, (const float *)a8, v25, (float *)a13, a14);
          return;
        }
        v26 = a12;
        sub_223163214(a3, a4, (float *)a13, a14, a10);
      }
      LODWORD(v25) = v26;
      goto LABEL_31;
    }
    if (a10 == 0.0)
    {
      v33 = (uint64_t)a13;
      sub_2231631C4(a3, a4, a13, a14);
      v25 = a12;
      v18 = (float32x4_t *)a13;
    }
    *(double *)a11.i64 = fmax((double)a3 / (double)a4, (double)a4 / (double)a3);
    v27 = (double)a3 * (double)a4 * (double)a5;
    if (*(double *)a11.i64 <= 4.0)
    {
      if ((v27 < 4096.0 || a5 <= 31) && v27 < 262144.0)
        goto LABEL_14;
    }
    else if (v27 < 262144.0)
    {
LABEL_14:
      if (a2 == 111)
      {
        if (a1 == 111)
          sub_22315AB00(a3, a4, a5, a6, a7, a8, v25, v18, a9, a10, a11, a14);
        else
          sub_223158950(a3, a4, a5, (uint64_t)a6, a7, (double *)a8, v25, v18, a9, a10, a11, a14);
      }
      else if (a1 == 111)
      {
        sub_22315D360(a3, a4, a5, a6, a7, (float32x4_t *)a8, v25, v18, a9, a10, a11, a14);
      }
      else
      {
        sub_22315A160(a3, a4, a5, a6->f32, a7, a8, v25, v18, a9, a10, a11, a14);
      }
      return;
    }
    sub_22315C66C(a1, a2, a3, a4, a5, (int)a6, a7, (int)a8, v25, (uint64_t)v18, a14, 0, 0, v33, v34, v35, v36, v37, v38,
      v39,
      v40,
      v41,
      v42,
      v43,
      SWORD2(v43),
      SHIWORD(v43),
      v44);
    return;
  }
  if (a10 == 0.0)
  {
    sub_2231631C4(a3, a4, a13, a14);
  }
  else if (a10 != 1.0)
  {
    sub_223163214(a3, a4, (float *)a13, a14, a10);
  }
}

#error "223159D78: call analysis failed (funcsize=366)"

_OWORD *sub_223159E50(_OWORD *a1, _OWORD *a2, float32x4_t *_X2, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  float32x4_t v7;
  float32x4_t *v9;
  uint64_t v10;
  _OWORD *v11;
  float32x4_t v12;
  float32x4_t v13;
  _OWORD *result;
  float32x4_t v15;
  float32x4_t v16;
  uint64_t v17;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  _OWORD *v58;
  _OWORD *v59;
  float32x4_t *v60;
  float32x4_t *v61;
  float32x4_t *v62;

  v9 = _X2;
  v10 = 4 * a4;
  v12 = *(float32x4_t *)a1;
  v13 = *((float32x4_t *)a1 + 1);
  v11 = a1 + 2;
  v15 = *(float32x4_t *)v11;
  v16 = *((float32x4_t *)v11 + 1);
  result = v11 + 2;
  do
  {
    v17 = a6;
    v7 = (float32x4_t)veorq_s8((int8x16_t)v7, (int8x16_t)v7);
    __asm { PRFM            #1, [X2,#0x40] }
    v24 = *_X2;
    v25 = _X2[1];
    _X2 = (float32x4_t *)((char *)_X2 + v10);
    __asm { PRFM            #1, [X2,#0x40] }
    v28 = *_X2;
    v29 = _X2[1];
    _X2 = (float32x4_t *)((char *)_X2 + v10);
    __asm { PRFM            #1, [X2,#0x40] }
    v32 = *_X2;
    v33 = _X2[1];
    _X2 = (float32x4_t *)((char *)_X2 + v10);
    __asm { PRFM            #1, [X2,#0x40] }
    v35 = *_X2;
    v36 = _X2[1];
    _X2 = v9 + 2;
    v37 = v7;
    v38 = v7;
    v39 = v7;
    v40 = v7;
    v41 = v7;
    v42 = v7;
    v43 = v7;
    v45 = *(float32x4_t *)a2;
    v46 = *((float32x4_t *)a2 + 1);
    _X6 = a2 + 2;
    __asm
    {
      PRFM            #1, [X6]
      PRFM            #1, [X6,#0x20]
      PRFM            #1, [X6,#0x40]
    }
    v50 = vmulq_n_f32(v24, a7);
    v51 = vmulq_n_f32(v25, a7);
    v52 = vmulq_n_f32(v28, a7);
    v53 = vmulq_n_f32(v29, a7);
    v54 = vmulq_n_f32(v32, a7);
    v55 = vmulq_n_f32(v33, a7);
    v56 = vmulq_n_f32(v35, a7);
    v57 = vmulq_n_f32(v36, a7);
    if ((a6 & 1) == 0)
      goto LABEL_9;
    v50 = vmlaq_n_f32(v50, v12, v45.f32[0]);
    v52 = vmlaq_lane_f32(v52, v12, *(float32x2_t *)v45.f32, 1);
    v54 = vmlaq_laneq_f32(v54, v12, v45, 2);
    v56 = vmlaq_laneq_f32(v56, v12, v45, 3);
    v12 = v15;
    v51 = vmlaq_n_f32(v51, v13, v45.f32[0]);
    v53 = vmlaq_lane_f32(v53, v13, *(float32x2_t *)v45.f32, 1);
    v55 = vmlaq_laneq_f32(v55, v13, v45, 2);
    v57 = vmlaq_laneq_f32(v57, v13, v45, 3);
    v13 = v16;
    v15 = *(float32x4_t *)result;
    v16 = *((float32x4_t *)result + 1);
    result += 2;
    v45 = *((float32x4_t *)a2 + 1);
    v46 = *(float32x4_t *)_X6;
    _X6 = a2 + 3;
    v17 = a6 - 1;
    if (a6 > 1)
    {
LABEL_9:
      do
      {
        v50 = vmlaq_n_f32(v50, v12, v45.f32[0]);
        v52 = vmlaq_lane_f32(v52, v12, *(float32x2_t *)v45.f32, 1);
        v54 = vmlaq_laneq_f32(v54, v12, v45, 2);
        v56 = vmlaq_laneq_f32(v56, v12, v45, 3);
        v51 = vmlaq_n_f32(v51, v13, v45.f32[0]);
        v53 = vmlaq_lane_f32(v53, v13, *(float32x2_t *)v45.f32, 1);
        v55 = vmlaq_laneq_f32(v55, v13, v45, 2);
        v57 = vmlaq_laneq_f32(v57, v13, v45, 3);
        v12 = *(float32x4_t *)result;
        v13 = *((float32x4_t *)result + 1);
        v58 = result + 2;
        v45 = *(float32x4_t *)_X6;
        v59 = _X6 + 1;
        v7 = vmlaq_n_f32(v7, v15, v46.f32[0]);
        v38 = vmlaq_lane_f32(v38, v15, *(float32x2_t *)v46.f32, 1);
        v40 = vmlaq_laneq_f32(v40, v15, v46, 2);
        v42 = vmlaq_laneq_f32(v42, v15, v46, 3);
        v37 = vmlaq_n_f32(v37, v16, v46.f32[0]);
        v39 = vmlaq_lane_f32(v39, v16, *(float32x2_t *)v46.f32, 1);
        v41 = vmlaq_laneq_f32(v41, v16, v46, 2);
        v43 = vmlaq_laneq_f32(v43, v16, v46, 3);
        v15 = *(float32x4_t *)v58;
        v16 = *((float32x4_t *)v58 + 1);
        result = v58 + 2;
        v46 = *(float32x4_t *)v59;
        _X6 = v59 + 1;
        v17 -= 2;
      }
      while (v17);
      v50 = vaddq_f32(v50, v7);
      v51 = vaddq_f32(v51, v37);
      v52 = vaddq_f32(v52, v38);
      v53 = vaddq_f32(v53, v39);
      v54 = vaddq_f32(v54, v40);
      v55 = vaddq_f32(v55, v41);
      v56 = vaddq_f32(v56, v42);
      v57 = vaddq_f32(v57, v43);
    }
    *v9 = v50;
    v9[1] = v51;
    v60 = (float32x4_t *)((char *)v9 + v10);
    *v60 = v52;
    v60[1] = v53;
    v61 = (float32x4_t *)((char *)v60 + v10);
    *v61 = v54;
    v61[1] = v55;
    v62 = (float32x4_t *)((char *)v61 + v10);
    *v62 = v56;
    v62[1] = v57;
    v9 = _X2;
    a5 -= 8;
  }
  while (a5);
  return result;
}

double *sub_223159FF0(float64x2_t *a1, float64x2_t *a2, float64x2_t *_X2, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v8;
  uint64_t v9;
  double *result;
  float64x2_t *v11;
  uint64_t v12;
  float64x2_t *v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  uint64_t v18;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t *v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t *v71;
  float64x2_t *v72;
  float64x2_t *v73;

  v8 = a5 & 7;
  v9 = a5 - v8;
  if (v9)
  {
    v11 = _X2;
    v12 = 8 * a4;
    v14 = *a1;
    v15 = a1[1];
    v13 = a1 + 2;
    v16 = *v13;
    v17 = v13[1];
    result = v13[2].f64;
    do
    {
      v18 = a6;
      __asm { PRFM            #1, [X2,#0x40] }
      v25 = *_X2;
      v26 = _X2[1];
      v27 = _X2[2];
      v28 = _X2[3];
      _X2 = (float64x2_t *)((char *)_X2 + v12);
      __asm { PRFM            #1, [X2,#0x40] }
      v31 = *_X2;
      v32 = _X2[1];
      v33 = _X2[2];
      v34 = _X2[3];
      _X2 = (float64x2_t *)((char *)_X2 + v12);
      __asm { PRFM            #1, [X2,#0x40] }
      v37 = *_X2;
      v38 = _X2[1];
      v39 = _X2[2];
      v40 = _X2[3];
      _X2 = (float64x2_t *)((char *)_X2 + v12);
      __asm { PRFM            #1, [X2,#0x40] }
      v43 = *a2;
      v44 = a2[1];
      _X6 = a2 + 2;
      __asm
      {
        PRFM            #1, [X6]
        PRFM            #1, [X6,#0x20]
        PRFM            #1, [X6,#0x40]
      }
      v48 = vmulq_n_f64(v25, a7);
      v49 = vmulq_n_f64(v26, a7);
      v50 = vmulq_n_f64(v27, a7);
      v51 = vmulq_n_f64(v28, a7);
      v52 = vmulq_n_f64(v31, a7);
      v53 = vmulq_n_f64(v32, a7);
      v54 = vmulq_n_f64(v33, a7);
      v55 = vmulq_n_f64(v34, a7);
      v56 = vmulq_n_f64(v37, a7);
      v57 = vmulq_n_f64(v38, a7);
      v58 = vmulq_n_f64(v39, a7);
      v59 = vmulq_n_f64(v40, a7);
      v60 = vmulq_n_f64(*_X2, a7);
      v61 = vmulq_n_f64(_X2[1], a7);
      v62 = vmulq_n_f64(_X2[2], a7);
      v63 = vmulq_n_f64(_X2[3], a7);
      do
      {
        v64 = v14;
        v65 = v15;
        v48 = vmlaq_n_f64(v48, v14, v43.f64[0]);
        v52 = vmlaq_laneq_f64(v52, v14, v43, 1);
        v14 = *(float64x2_t *)result;
        v15 = *(float64x2_t *)(result + 2);
        v66 = (float64x2_t *)(result + 4);
        v56 = vmlaq_n_f64(v56, v64, v44.f64[0]);
        v60 = vmlaq_laneq_f64(v60, v64, v44, 1);
        v67 = *_X6;
        v68 = _X6[1];
        _X6 += 2;
        v69 = v16;
        v49 = vmlaq_n_f64(v49, v65, v43.f64[0]);
        v53 = vmlaq_laneq_f64(v53, v65, v43, 1);
        v70 = v17;
        v57 = vmlaq_n_f64(v57, v65, v44.f64[0]);
        v61 = vmlaq_laneq_f64(v61, v65, v44, 1);
        v16 = *v66;
        v17 = v66[1];
        result = v66[2].f64;
        v50 = vmlaq_n_f64(v50, v69, v43.f64[0]);
        v54 = vmlaq_laneq_f64(v54, v69, v43, 1);
        v58 = vmlaq_n_f64(v58, v69, v44.f64[0]);
        v62 = vmlaq_laneq_f64(v62, v69, v44, 1);
        v51 = vmlaq_n_f64(v51, v70, v43.f64[0]);
        v55 = vmlaq_laneq_f64(v55, v70, v43, 1);
        v43 = v67;
        v59 = vmlaq_n_f64(v59, v70, v44.f64[0]);
        v63 = vmlaq_laneq_f64(v63, v70, v44, 1);
        v44 = v68;
        --v18;
      }
      while (v18);
      v71 = (float64x2_t *)((char *)v11 + v12);
      *v11 = v48;
      v11[1] = v49;
      v11[2] = v50;
      v11[3] = v51;
      v11 += 4;
      *v71 = v52;
      v71[1] = v53;
      v71[2] = v54;
      v71[3] = v55;
      v72 = (float64x2_t *)((char *)v71 + v12);
      *v72 = v56;
      v72[1] = v57;
      v72[2] = v58;
      v72[3] = v59;
      v73 = (float64x2_t *)((char *)v72 + v12);
      *v73 = v60;
      v73[1] = v61;
      v73[2] = v62;
      v73[3] = v63;
      _X2 = v11;
      v9 -= 8;
    }
    while (v9);
  }
  else
  {
    result = a1[4].f64;
  }
  if (v8)
    return sub_22315C464(result - 8, a2, _X2->f64, a4, v8, a6, a7);
  return result;
}

uint64_t sub_22315A160(uint64_t result, uint64_t a2, uint64_t a3, float *a4, uint64_t a5, _OWORD *a6, uint64_t a7, float32x4_t *a8, float a9, float a10, int8x16_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t i;
  float *v17;
  float *v18;
  float *v19;
  float *v20;
  float32x4_t *v21;
  float32x4_t *v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t *v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t *v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t *v48;
  float32x2_t v49;
  float32x2_t v50;
  uint64_t j;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x4_t *v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  uint64_t v67;
  uint64_t v68;
  float32x4_t v69;
  float v70;
  float32x4_t v71;
  float32x2_t v72;
  float32x4_t v73;
  float32x4_t v74;
  __int32 *v75;
  float32x4_t v76;
  __int32 *v77;
  __int32 *v78;
  __int32 *v79;
  __int32 *v80;
  __int32 *v81;
  uint64_t k;
  __int32 *v83;
  __int32 *v84;
  __int32 *v85;
  __int32 *v86;
  __int32 *v87;
  float32x4_t *v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  float32x4_t v92;
  __int32 v93;
  float32x4_t v94;
  __int32 v95;
  uint64_t v96;
  int32x4_t v97;
  uint64_t v98;
  int32x4_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  float32x2_t v103;
  __int32 *v104;
  uint64_t v105;
  uint64_t v106;
  float v107;
  float v108;
  float32x2_t v109;
  float32x2_t v110;
  __int32 *v111;

  v12 = 4 * a5;
  v13 = a12;
  v14 = 4 * a7;
  v15 = a2 <= 3;
  for (i = a2 - 3; !v15; i -= 4)
  {
    v17 = a4;
    v18 = &a4[(unint64_t)v12 / 4];
    v19 = &a4[(unint64_t)v12 / 2];
    v20 = &a4[(unint64_t)v12 / 4 + (unint64_t)v12 / 2];
    v21 = (float32x4_t *)a6;
    v22 = &a8[a12];
    v23 = __OFSUB__(result, 3);
    v24 = result - 3;
    if (result > 3)
    {
      do
      {
        v25 = a3;
        v26 = (float32x4_t)veorq_s8(a11, a11);
        v27 = v26;
        v28 = v26;
        v29 = v26;
        if ((a3 & 1) == 0)
          goto LABEL_5;
        v30 = *v17++;
        v31 = v30;
        v32 = *v18++;
        v33 = v32;
        v34 = *v19++;
        v35 = v34;
        v36 = *v20++;
        v37 = *v21;
        v21 = (float32x4_t *)((char *)v21 + v14);
        v26 = vmlaq_n_f32(v26, v37, v31);
        v27 = vmlaq_n_f32(v27, v37, v33);
        v28 = vmlaq_n_f32(v28, v37, v35);
        v29 = vmlaq_n_f32(v29, v37, v36);
        v25 = a3 - 1;
        if (a3 > 1)
        {
LABEL_5:
          v38 = *v21;
          v39 = *(float32x4_t *)((char *)v21 + v14);
          v40 = *(float32x2_t *)v17;
          v17 += 2;
          v41 = v40;
          v43 = *(float32x2_t *)v18;
          v42 = (float32x2_t *)(v18 + 2);
          v44 = v43;
          v46 = *(float32x2_t *)v19;
          v45 = (float32x2_t *)(v19 + 2);
          v47 = v46;
          v49 = *(float32x2_t *)v20;
          v48 = (float32x2_t *)(v20 + 2);
          v50 = v49;
          v15 = v25 <= 2;
          for (j = v25 - 2; !v15; j -= 2)
          {
            v21 = (float32x4_t *)((char *)v21 + 2 * v14);
            v52 = vmlaq_n_f32(v26, v38, v41.f32[0]);
            v53 = vmlaq_n_f32(v27, v38, v44.f32[0]);
            v54 = vmlaq_n_f32(v28, v38, v47.f32[0]);
            v55 = vmlaq_n_f32(v29, v38, v50.f32[0]);
            v38 = *v21;
            v26 = vmlaq_lane_f32(v52, v39, v41, 1);
            v56 = *(float32x2_t *)v17;
            v17 += 2;
            v41 = v56;
            v27 = vmlaq_lane_f32(v53, v39, v44, 1);
            v57 = *v42++;
            v44 = v57;
            v28 = vmlaq_lane_f32(v54, v39, v47, 1);
            v58 = *v45++;
            v47 = v58;
            v29 = vmlaq_lane_f32(v55, v39, v50, 1);
            v59 = *v48++;
            v50 = v59;
            v39 = *(float32x4_t *)((char *)v21 + v14);
            v15 = j <= 2;
          }
          v26 = vmlaq_lane_f32(vmlaq_n_f32(v26, v38, v41.f32[0]), v39, v41, 1);
          v27 = vmlaq_lane_f32(vmlaq_n_f32(v27, v38, v44.f32[0]), v39, v44, 1);
          v28 = vmlaq_lane_f32(vmlaq_n_f32(v28, v38, v47.f32[0]), v39, v47, 1);
          v29 = vmlaq_lane_f32(vmlaq_n_f32(v29, v38, v50.f32[0]), v39, v50, 1);
        }
        v60 = (float32x4_t *)((char *)a8 + 8 * a12);
        v61 = vzip1q_s32((int32x4_t)v26, (int32x4_t)v28);
        v62 = vzip2q_s32((int32x4_t)v26, (int32x4_t)v28);
        v63 = vzip1q_s32((int32x4_t)v27, (int32x4_t)v29);
        v64 = vzip2q_s32((int32x4_t)v27, (int32x4_t)v29);
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vzip1q_s32(v61, v63), a9), *a8, a10);
        v65 = vmlaq_n_f32(vmulq_n_f32((float32x4_t)vzip1q_s32(v62, v64), a9), *v60, a10);
        v66 = vmlaq_n_f32(vmulq_n_f32((float32x4_t)vzip2q_s32(v62, v64), a9), *(float32x4_t *)((char *)v60 + 4 * a12), a10);
        *(float32x4_t *)((char *)a8 + 4 * a12) = vmlaq_n_f32(vmulq_n_f32((float32x4_t)vzip2q_s32(v61, v63), a9), *(float32x4_t *)((char *)a8 + 4 * a12), a10);
        *a8++ = (float32x4_t)a11;
        *v60 = v65;
        *(float32x4_t *)((char *)v60 + 4 * a12) = v66;
        v21 = (float32x4_t *)a6;
        v17 = &v17[v12 - a3];
        v18 = &v17[(unint64_t)v12 / 4];
        v19 = &v17[(unint64_t)v12 / 2];
        v20 = &v17[(unint64_t)v12 / 4 + (unint64_t)v12 / 2];
        v23 = __OFSUB__(v24, 4);
        v15 = v24 <= 4;
        v24 -= 4;
      }
      while (!v15);
    }
    v67 = result & 3;
    if (!v23 && v67 != 0)
    {
      do
      {
        v68 = a3;
        v69 = (float32x4_t)veorq_s8(a11, a11);
        if ((a3 & 1) == 0
          || (v70 = *v17,
              ++v17,
              v71 = *v21,
              v21 = (float32x4_t *)((char *)v21 + v14),
              v69 = vmlaq_n_f32(v69, v71, v70),
              v68 = a3 - 1,
              a3 > 1))
        {
          do
          {
            v72 = *(float32x2_t *)v17;
            v17 += 2;
            v73 = *v21;
            v74 = *(float32x4_t *)((char *)v21 + v14);
            v21 = (float32x4_t *)((char *)v21 + 2 * v14);
            v69 = vmlaq_lane_f32(vmlaq_n_f32(v69, v73, v72.f32[0]), v74, v72, 1);
            v15 = v68 <= 2;
            v68 -= 2;
          }
          while (!v15);
        }
        v76.i32[0] = a8->i32[0];
        v75 = (__int32 *)((char *)a8 + v13 * 4);
        v76.i32[1] = *v75;
        v77 = &v75[v13];
        v76.i32[2] = *v77;
        v78 = &v77[v13];
        v76.i32[3] = *v78;
        v79 = &v78[a12 + -4 * a12];
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v69, a9), v76, a10);
        v80 = &v79[v13];
        *v79 = a11.i32[0];
        a8 = (float32x4_t *)(v79 + 1);
        *v80 = a11.i32[1];
        v81 = &v80[v13];
        *v81 = a11.i32[2];
        v81[a12] = a11.i32[3];
        v21 = (float32x4_t *)a6;
        v17 = &v17[(unint64_t)v12 / 4 - a3];
        v15 = v67-- <= 1;
      }
      while (!v15);
    }
    ++a6;
    a8 = v22;
    v15 = i <= 4;
  }
  v15 = i <= -3;
  for (k = i + 3; !v15; --k)
  {
    v83 = (__int32 *)a4;
    v84 = (__int32 *)&a4[(unint64_t)v12 / 4];
    v85 = (__int32 *)&a4[(unint64_t)v12 / 2];
    v86 = (__int32 *)&a4[(unint64_t)v12 / 4 + (unint64_t)v12 / 2];
    v87 = (__int32 *)a6;
    v88 = (float32x4_t *)((char *)a8 + v13 * 4);
    v89 = __OFSUB__(result, 3);
    v90 = result - 3;
    if (result > 3)
    {
      do
      {
        v91 = a3;
        v92 = (float32x4_t)veorq_s8(a11, a11);
        if ((a3 & 1) == 0)
          goto LABEL_25;
        v93 = *v83++;
        v94.i32[0] = v93;
        v94.i32[1] = *v84++;
        v94.i32[2] = *v85++;
        v94.i32[3] = *v86++;
        v95 = *v87;
        v87 = (__int32 *)((char *)v87 + v14);
        v92 = vmlaq_n_f32(v92, v94, *(float *)&v95);
        v91 = a3 - 1;
        if (a3 > 1)
        {
LABEL_25:
          do
          {
            v96 = *(_QWORD *)v83;
            v83 += 2;
            v97.i64[0] = v96;
            v98 = *(_QWORD *)v84;
            v84 += 2;
            v99.i64[0] = v98;
            v100 = *(_QWORD *)v85;
            v85 += 2;
            v101 = v100;
            v102 = *(_QWORD *)v86;
            v86 += 2;
            v103.i32[0] = *v87;
            v104 = &v87[(unint64_t)v14 / 4];
            v103.i32[1] = *v104;
            v87 = &v104[(unint64_t)v14 / 4];
            v97.i64[1] = v101;
            v99.i64[1] = v102;
            v92 = vmlaq_lane_f32(vmlaq_n_f32(v92, (float32x4_t)vtrn1q_s32(v97, v99), v103.f32[0]), (float32x4_t)vtrn2q_s32(v97, v99), v103, 1);
            v15 = v91 <= 2;
            v91 -= 2;
          }
          while (!v15);
        }
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v92, a9), *a8, a10);
        *a8++ = (float32x4_t)a11;
        v87 = (__int32 *)a6;
        v83 = &v83[v12 - a3];
        v84 = &v83[(unint64_t)v12 / 4];
        v85 = &v83[(unint64_t)v12 / 2];
        v86 = &v83[(unint64_t)v12 / 4 + (unint64_t)v12 / 2];
        v89 = __OFSUB__(v90, 4);
        v15 = v90 <= 4;
        v90 -= 4;
      }
      while (!v15);
    }
    v105 = result & 3;
    if (!v89 && v105 != 0)
    {
      do
      {
        v106 = a3;
        a11 = veorq_s8(a11, a11);
        if ((a3 & 1) == 0
          || (v107 = *(float *)v83,
              ++v83,
              v108 = *(float *)v87,
              v87 = (__int32 *)((char *)v87 + v14),
              *(float *)a11.i32 = vmlas_n_f32(*(float *)a11.i32, v108, v107),
              v106 = a3 - 1,
              a3 > 1))
        {
          do
          {
            v109 = *(float32x2_t *)v83;
            v83 += 2;
            v110.i32[0] = *v87;
            v111 = &v87[(unint64_t)v14 / 4];
            v110.i32[1] = *v111;
            v87 = &v111[(unint64_t)v14 / 4];
            *(float32x2_t *)a11.i8 = vmla_f32(*(float32x2_t *)a11.i8, v110, v109);
            v15 = v106 <= 2;
            v106 -= 2;
          }
          while (!v15);
          *(float *)a11.i32 = vaddv_f32(*(float32x2_t *)a11.i8);
        }
        *(float *)a11.i32 = vmlas_n_f32(*(float *)a11.i32 * a9, a8->f32[0], a10);
        a8->i32[0] = a11.i32[0];
        a8 = (float32x4_t *)((char *)a8 + 4);
        v87 = (__int32 *)a6;
        v83 = &v83[(unint64_t)v12 / 4 - a3];
        v15 = v105-- <= 1;
      }
      while (!v15);
    }
    a6 = (_OWORD *)((char *)a6 + 4);
    a8 = v88;
    v15 = k <= 1;
  }
  return result;
}

double *sub_22315A4F0(float64x2_t *a1, float64x2_t *a2, float64x2_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  double *result;
  float64x2_t *v10;
  uint64_t v11;
  float64x2_t *v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  uint64_t v17;
  float64x2_t *v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t *v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t *v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t *v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t *v40;
  float64x2_t *v41;
  float64x2_t *v42;
  float64x2_t *v43;

  v7 = a5 & 7;
  v8 = a5 - v7;
  if (v8)
  {
    v10 = a3;
    v11 = 8 * a4;
    v13 = *a1;
    v14 = a1[1];
    v12 = a1 + 2;
    v15 = *v12;
    v16 = v12[1];
    result = v12[2].f64;
    do
    {
      v17 = a6;
      v19 = *a3;
      v20 = a3[1];
      v21 = a3[2];
      v22 = a3[3];
      v18 = (float64x2_t *)((char *)a3 + v11);
      v24 = *v18;
      v25 = v18[1];
      v26 = v18[2];
      v27 = v18[3];
      v23 = (float64x2_t *)((char *)v18 + v11);
      v29 = *v23;
      v30 = v23[1];
      v31 = v23[2];
      v32 = v23[3];
      v28 = (float64x2_t *)((char *)v23 + v11);
      v33 = *v28;
      v34 = v28[1];
      v35 = v28[2];
      v36 = v28[3];
      v38 = *a2;
      v39 = a2[1];
      v37 = a2 + 2;
      do
      {
        v19 = vmlaq_n_f64(v19, v13, v38.f64[0]);
        v24 = vmlaq_laneq_f64(v24, v13, v38, 1);
        v29 = vmlaq_n_f64(v29, v13, v39.f64[0]);
        v33 = vmlaq_laneq_f64(v33, v13, v39, 1);
        v20 = vmlaq_n_f64(v20, v14, v38.f64[0]);
        v25 = vmlaq_laneq_f64(v25, v14, v38, 1);
        v30 = vmlaq_n_f64(v30, v14, v39.f64[0]);
        v34 = vmlaq_laneq_f64(v34, v14, v39, 1);
        v13 = *(float64x2_t *)result;
        v14 = *(float64x2_t *)(result + 2);
        v40 = (float64x2_t *)(result + 4);
        v21 = vmlaq_n_f64(v21, v15, v38.f64[0]);
        v26 = vmlaq_laneq_f64(v26, v15, v38, 1);
        v31 = vmlaq_n_f64(v31, v15, v39.f64[0]);
        v35 = vmlaq_laneq_f64(v35, v15, v39, 1);
        v22 = vmlaq_n_f64(v22, v16, v38.f64[0]);
        v27 = vmlaq_laneq_f64(v27, v16, v38, 1);
        v32 = vmlaq_n_f64(v32, v16, v39.f64[0]);
        v36 = vmlaq_laneq_f64(v36, v16, v39, 1);
        v15 = *v40;
        v16 = v40[1];
        result = v40[2].f64;
        v38 = *v37;
        v39 = v37[1];
        v37 += 2;
        --v17;
      }
      while (v17);
      v41 = (float64x2_t *)((char *)v10 + v11);
      *v10 = v19;
      v10[1] = v20;
      v10[2] = v21;
      v10[3] = v22;
      v10 += 4;
      *v41 = v24;
      v41[1] = v25;
      v41[2] = v26;
      v41[3] = v27;
      v42 = (float64x2_t *)((char *)v41 + v11);
      *v42 = v29;
      v42[1] = v30;
      v42[2] = v31;
      v42[3] = v32;
      v43 = (float64x2_t *)((char *)v42 + v11);
      *v43 = v33;
      v43[1] = v34;
      v43[2] = v35;
      v43[3] = v36;
      a3 = v10;
      v8 -= 8;
    }
    while (v8);
  }
  else
  {
    result = a1[4].f64;
  }
  if (v7)
    return sub_22315C4D4(result - 8, a2, a3->f64, a4, v7, a6);
  return result;
}

void sub_22315A5E4(int a1, int a2, unsigned int a3, unsigned int a4, uint64_t a5, int a6, uint64_t a7, int a8, float32x4_t a9, float32x4_t a10, float32x4_t a11, float32x4_t a12, float32x4_t a13, float32x4_t a14, float32x4_t a15, float32x4_t a16, float *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,float32x2_t a28,float32x4_t a29,float32x4_t a30,float32x4_t a31,float32x4_t a32,uint64_t a33,float32x2_t a34,float32x4_t a35,float32x4_t a36,float32x4_t a37,char a38)
{
  int v38;
  char v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  int v44;
  int v45;
  float *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v38 = a1 - 101;
  if ((a1 - 101) > 1)
  {
    v45 = 1;
LABEL_32:
    cblas_xerbla(v45, "cblas_sgemv", "");
    return;
  }
  if ((a2 - 111) > 3)
  {
    v45 = 2;
    goto LABEL_32;
  }
  if ((a3 & 0x80000000) != 0)
  {
    v45 = 3;
    goto LABEL_32;
  }
  if ((a4 & 0x80000000) != 0)
  {
    v45 = 4;
    goto LABEL_32;
  }
  if (!a8)
  {
    v45 = 9;
    goto LABEL_32;
  }
  if (!(_DWORD)a18)
  {
    v45 = 12;
    goto LABEL_32;
  }
  if ((a2 - 113) >= 2)
    v40 = (a2 & 0xFFFFFFFE) == 112;
  else
    v40 = ((a2 & 0xFFFFFFFE) == 112) | 2;
  v41 = a3;
  v42 = a4;
  if ((a2 & 0xFFFFFFFE) == 0x70)
  {
    v43 = (_DWORD *)(a7 + 4 * (int)((a8 - a8 * a3) & (a8 >> 31)));
    v44 = a18 - a18 * a4;
  }
  else
  {
    v43 = (_DWORD *)(a7 + 4 * (int)((a8 - a8 * a4) & (a8 >> 31)));
    v44 = a18 - a18 * a3;
  }
  v46 = &a17[v44];
  if ((int)a18 >= 0)
    v46 = a17;
  if (!v38)
  {
    if (a4 <= 1uLL)
      v50 = 1;
    else
      v50 = a4;
    if (v50 <= a6)
    {
      v40 ^= 1u;
      v48 = a8;
      v51 = (int)a18;
      v49 = a4;
      v42 = v41;
      goto LABEL_34;
    }
    goto LABEL_31;
  }
  if (v41 <= 1)
    v47 = 1;
  else
    v47 = v41;
  if (v47 > a6)
  {
LABEL_31:
    v45 = 7;
    goto LABEL_32;
  }
  v48 = a8;
  v51 = (int)a18;
  v49 = v41;
LABEL_34:
  sub_22315A870(v40, v49, v42, a5, a6, v43, v48, v46, a9, a10, a11, a12, a13, a14, a15, a16, v51, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32,
    a33,
    a34,
    a35,
    a36,
    a37,
    a38);
}

double *sub_22315A730(float64x2_t *a1, float64x2_t *a2, float64x2_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v8;
  uint64_t v9;
  double *result;
  float64x2_t *v11;
  uint64_t v12;
  float64x2_t *v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  uint64_t v18;
  float64x2_t *v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t *v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t *v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t *v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t *v53;
  float64x2_t *v54;
  float64x2_t *v55;
  float64x2_t *v56;

  v8 = a5 & 7;
  v9 = a5 - v8;
  if (v9)
  {
    v11 = a3;
    v12 = 8 * a4;
    v14 = *a1;
    v15 = a1[1];
    v13 = a1 + 2;
    v16 = *v13;
    v17 = v13[1];
    result = v13[2].f64;
    do
    {
      v18 = a6;
      v20 = *a3;
      v21 = a3[1];
      v22 = a3[2];
      v23 = a3[3];
      v19 = (float64x2_t *)((char *)a3 + v12);
      v25 = *v19;
      v26 = v19[1];
      v27 = v19[2];
      v28 = v19[3];
      v24 = (float64x2_t *)((char *)v19 + v12);
      v30 = *v24;
      v31 = v24[1];
      v32 = v24[2];
      v33 = v24[3];
      v29 = (float64x2_t *)((char *)v24 + v12);
      v35 = *a2;
      v36 = a2[1];
      v34 = a2 + 2;
      v37 = vmulq_n_f64(v20, a7);
      v38 = vmulq_n_f64(v21, a7);
      v39 = vmulq_n_f64(v22, a7);
      v40 = vmulq_n_f64(v23, a7);
      v41 = vmulq_n_f64(v25, a7);
      v42 = vmulq_n_f64(v26, a7);
      v43 = vmulq_n_f64(v27, a7);
      v44 = vmulq_n_f64(v28, a7);
      v45 = vmulq_n_f64(v30, a7);
      v46 = vmulq_n_f64(v31, a7);
      v47 = vmulq_n_f64(v32, a7);
      v48 = vmulq_n_f64(v33, a7);
      v49 = vmulq_n_f64(*v29, a7);
      v50 = vmulq_n_f64(v29[1], a7);
      v51 = vmulq_n_f64(v29[2], a7);
      v52 = vmulq_n_f64(v29[3], a7);
      do
      {
        v37 = vmlaq_n_f64(v37, v14, v35.f64[0]);
        v41 = vmlaq_laneq_f64(v41, v14, v35, 1);
        v45 = vmlaq_n_f64(v45, v14, v36.f64[0]);
        v49 = vmlaq_laneq_f64(v49, v14, v36, 1);
        v38 = vmlaq_n_f64(v38, v15, v35.f64[0]);
        v42 = vmlaq_laneq_f64(v42, v15, v35, 1);
        v46 = vmlaq_n_f64(v46, v15, v36.f64[0]);
        v50 = vmlaq_laneq_f64(v50, v15, v36, 1);
        v14 = *(float64x2_t *)result;
        v15 = *(float64x2_t *)(result + 2);
        v53 = (float64x2_t *)(result + 4);
        v39 = vmlaq_n_f64(v39, v16, v35.f64[0]);
        v43 = vmlaq_laneq_f64(v43, v16, v35, 1);
        v47 = vmlaq_n_f64(v47, v16, v36.f64[0]);
        v51 = vmlaq_laneq_f64(v51, v16, v36, 1);
        v40 = vmlaq_n_f64(v40, v17, v35.f64[0]);
        v44 = vmlaq_laneq_f64(v44, v17, v35, 1);
        v48 = vmlaq_n_f64(v48, v17, v36.f64[0]);
        v52 = vmlaq_laneq_f64(v52, v17, v36, 1);
        v16 = *v53;
        v17 = v53[1];
        result = v53[2].f64;
        v35 = *v34;
        v36 = v34[1];
        v34 += 2;
        --v18;
      }
      while (v18);
      v54 = (float64x2_t *)((char *)v11 + v12);
      *v11 = v37;
      v11[1] = v38;
      v11[2] = v39;
      v11[3] = v40;
      v11 += 4;
      *v54 = v41;
      v54[1] = v42;
      v54[2] = v43;
      v54[3] = v44;
      v55 = (float64x2_t *)((char *)v54 + v12);
      *v55 = v45;
      v55[1] = v46;
      v55[2] = v47;
      v55[3] = v48;
      v56 = (float64x2_t *)((char *)v55 + v12);
      *v56 = v49;
      v56[1] = v50;
      v56[2] = v51;
      v56[3] = v52;
      a3 = v11;
      v9 -= 8;
    }
    while (v9);
  }
  else
  {
    result = a1[4].f64;
  }
  if (v8)
    return sub_22315C464(result - 8, a2, a3->f64, a4, v8, a6, a7);
  return result;
}

void sub_22315A870(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6, uint64_t a7, float *a8, float32x4_t a9, float32x4_t a10, float32x4_t a11, float32x4_t a12, float32x4_t a13, float32x4_t a14, float32x4_t a15, float32x4_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,float32x2_t a28,float32x4_t a29,float32x4_t a30,float32x4_t a31,float32x4_t a32,uint64_t a33,float32x2_t a34,float32x4_t a35,float32x4_t a36,float32x4_t a37,char a38)
{
  if ((a1 & 1) != 0)
    sub_22315A8BC(a2, a3, a4, a5, a6, a7, a8, a17, a9.f32[0], a10.f32[0]);
  else
    sub_22315AAC0(a2, a3, a4, a5, (uint64_t)a6, a7, (uint64_t)a8, a17, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
      a20,
      a21,
      a22,
      a23,
      a24,
      a25,
      a26,
      a27,
      a28,
      a29,
      a30,
      a31,
      a32,
      a33,
      a34,
      a35,
      a36,
      a37,
      a38);
}

void sub_22315A8BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6, float *a7, uint64_t a8, float a9, float a10)
{
  float v10;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t v28;
  _QWORD v29[4];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float *v33;
  uint64_t v34;

  v32 = a2;
  v33 = a7;
  v10 = a10;
  v30 = a3;
  v31 = a4;
  v34 = *MEMORY[0x24BDAC8D0];
  if (!a1 || a9 == 0.0)
  {
    if (a10 != 1.0)
    {
      if (a8 >= 0)
        LODWORD(v28) = a8;
      else
        v28 = -a8;
      cblas_sscal(v32, a10, &v33[((v32 - 1) * a8) & (a8 >> 63)], v28);
    }
  }
  else
  {
    sub_22315CF0C();
    v29[3] = v29;
    MEMORY[0x24BDAC7A8]();
    v17 = (void *)(((unint64_t)v29 - v16) & 0xFFFFFFFFFFFFFFC0);
    v19 = (uint64_t)v17 + 4 * v18;
    v21 = v20 & 0xFFFFFFFFFFFFFFFCLL;
    bzero(v17, v20 & 0xFFFFFFFFFFFFFFFCLL);
    bzero((void *)(v19 + 2048), v21);
    if (a1 >= 1)
    {
      v22 = 0;
      v23 = a1;
      do
      {
        v24 = v23 - 512;
        if (v23 >= 512)
          v23 = 512;
        if (a1 - v22 >= 512)
          v25 = 512;
        else
          v25 = a1 - v22;
        if (a1 - v22 >= 1)
        {
          v26 = a5;
          v27 = (_DWORD *)v19;
          do
          {
            *v27++ = *v26;
            v26 += a6;
            --v23;
          }
          while (v23);
        }
        sub_22315FF0C(v25, v32, v30 + 4 * v22, v31, v19, v33, a8, a9, v10);
        v22 += 512;
        a5 += 512 * a6;
        v10 = 1.0;
        v23 = v24;
      }
      while (v22 < a1);
    }
  }
}

void sub_22315AAC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t a9, float32x4_t a10, float32x4_t a11, float32x4_t a12, float32x4_t a13, float32x4_t a14, float32x4_t a15, float32x4_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,float32x2_t a28,float32x4_t a29,float32x4_t a30,float32x4_t a31,float32x4_t a32,uint64_t a33,float32x2_t a34,float32x4_t a35,float32x4_t a36,float32x4_t a37,char a38)
{
  uint64_t v38;

  if (a9.f32[0] == 0.0)
  {
    if (a10.f32[0] != 1.0)
    {
      if (a8 >= 0)
        LODWORD(v38) = a8;
      else
        v38 = -a8;
      cblas_sscal(a1, a10.f32[0], (float *)(a7 + 4 * (((a1 - 1) * a8) & (a8 >> 63))), v38);
    }
  }
  else
  {
    sub_22315E230(a1, a2, a3, a4, a5, a6, a7, a8, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a9,
      a10,
      a11,
      a12,
      a13,
      a14,
      a15,
      a16,
      a27,
      a28,
      a29,
      a30,
      a31,
      a32,
      a33,
      a34,
      a35,
      a36,
      a37,
      a38);
  }
}

uint64_t sub_22315AB00(uint64_t result, uint64_t a2, uint64_t a3, float32x4_t *a4, uint64_t a5, float32x2_t *a6, uint64_t a7, float32x4_t *a8, float a9, float a10, int8x16_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t i;
  float32x4_t *v16;
  __int32 *v17;
  __int32 *v18;
  __int32 *v19;
  __int32 *v20;
  float32x4_t *v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float v30;
  float v31;
  __int32 v32;
  float v33;
  __int32 v34;
  float v35;
  __int32 v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x2_t *v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t *v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t *v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t *v48;
  float32x2_t v49;
  float32x2_t v50;
  uint64_t j;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x4_t *v60;
  float32x4_t v61;
  float32x4_t v62;
  uint64_t v63;
  uint64_t v64;
  float32x4_t v65;
  float v66;
  __int32 v67;
  float32x4_t v68;
  float v69;
  float v70;
  uint64_t v71;
  int32x4_t v72;
  uint64_t v73;
  int32x4_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int32 *v78;
  float32x4_t v79;
  __int32 *v80;
  __int32 *v81;
  __int32 *v82;
  __int32 *v83;
  __int32 *v84;
  uint64_t k;
  float32x4_t *v86;
  float32x2_t *v87;
  float32x4_t *v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float v94;
  float32x4_t v95;
  float32x4_t v96;
  uint64_t m;
  float32x2_t v98;
  float32x4_t v99;
  uint64_t v100;
  uint64_t v101;
  float v102;
  float v103;
  float32x2_t v104;
  __int32 *v105;
  float32x2_t v106;

  v12 = 4 * a5;
  v13 = a12;
  v14 = a2 <= 3;
  for (i = a2 - 3; !v14; i -= 4)
  {
    v16 = a4;
    v17 = (__int32 *)a6;
    v18 = (__int32 *)a6 + a7;
    v19 = (__int32 *)&a6[a7];
    v20 = &v18[2 * a7];
    v21 = &a8[a12];
    v22 = __OFSUB__(result, 3);
    v23 = result - 3;
    if (result > 3)
    {
      do
      {
        v24 = a3;
        v25 = (float32x4_t)veorq_s8(a11, a11);
        v26 = v25;
        v27 = v25;
        v28 = v25;
        if ((a3 & 1) == 0)
          goto LABEL_5;
        v29 = *v16;
        v16 = (float32x4_t *)((char *)v16 + v12);
        v30 = *(float *)v17++;
        v31 = v30;
        v32 = *v18++;
        v33 = *(float *)&v32;
        v34 = *v19++;
        v35 = *(float *)&v34;
        v36 = *v20++;
        v25 = vmlaq_n_f32(v25, v29, v31);
        v26 = vmlaq_n_f32(v26, v29, v33);
        v27 = vmlaq_n_f32(v27, v29, v35);
        v28 = vmlaq_n_f32(v28, v29, *(float *)&v36);
        v24 = a3 - 1;
        if (a3 > 1)
        {
LABEL_5:
          v37 = *v16;
          v38 = *(float32x4_t *)((char *)v16 + v12);
          v40 = *(float32x2_t *)v17;
          v39 = (float32x2_t *)(v17 + 2);
          v41 = v40;
          v43 = *(float32x2_t *)v18;
          v42 = (float32x2_t *)(v18 + 2);
          v44 = v43;
          v46 = *(float32x2_t *)v19;
          v45 = (float32x2_t *)(v19 + 2);
          v47 = v46;
          v49 = *(float32x2_t *)v20;
          v48 = (float32x2_t *)(v20 + 2);
          v50 = v49;
          v14 = v24 <= 2;
          for (j = v24 - 2; !v14; j -= 2)
          {
            v16 = (float32x4_t *)((char *)v16 + 2 * v12);
            v52 = vmlaq_n_f32(v25, v37, v41.f32[0]);
            v53 = vmlaq_n_f32(v26, v37, v44.f32[0]);
            v54 = vmlaq_n_f32(v27, v37, v47.f32[0]);
            v55 = vmlaq_n_f32(v28, v37, v50.f32[0]);
            v37 = *v16;
            v25 = vmlaq_lane_f32(v52, v38, v41, 1);
            v56 = *v39++;
            v41 = v56;
            v26 = vmlaq_lane_f32(v53, v38, v44, 1);
            v57 = *v42++;
            v44 = v57;
            v27 = vmlaq_lane_f32(v54, v38, v47, 1);
            v58 = *v45++;
            v47 = v58;
            v28 = vmlaq_lane_f32(v55, v38, v50, 1);
            v59 = *v48++;
            v50 = v59;
            v38 = *(float32x4_t *)((char *)v16 + v12);
            v14 = j <= 2;
          }
          v16 = (float32x4_t *)((char *)v16 + 2 * v12);
          v25 = vmlaq_lane_f32(vmlaq_n_f32(v25, v37, v41.f32[0]), v38, v41, 1);
          v26 = vmlaq_lane_f32(vmlaq_n_f32(v26, v37, v44.f32[0]), v38, v44, 1);
          v27 = vmlaq_lane_f32(vmlaq_n_f32(v27, v37, v47.f32[0]), v38, v47, 1);
          v28 = vmlaq_lane_f32(vmlaq_n_f32(v28, v37, v50.f32[0]), v38, v50, 1);
        }
        v60 = (float32x4_t *)((char *)a8 + 8 * a12);
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v25, a9), *a8, a10);
        v61 = vmlaq_n_f32(vmulq_n_f32(v27, a9), *v60, a10);
        v62 = vmlaq_n_f32(vmulq_n_f32(v28, a9), *(float32x4_t *)((char *)v60 + 4 * a12), a10);
        *(float32x4_t *)((char *)a8 + 4 * a12) = vmlaq_n_f32(vmulq_n_f32(v26, a9), *(float32x4_t *)((char *)a8 + 4 * a12), a10);
        *a8++ = (float32x4_t)a11;
        *v60 = v61;
        *(float32x4_t *)((char *)v60 + 4 * a12) = v62;
        v17 = (__int32 *)a6;
        v18 = (__int32 *)a6 + a7;
        v19 = (__int32 *)&a6[a7];
        v20 = &v18[2 * a7];
        v16 = (float32x4_t *)((char *)v16 - v12 * a3 + 16);
        v22 = __OFSUB__(v23, 4);
        v14 = v23 <= 4;
        v23 -= 4;
      }
      while (!v14);
    }
    v63 = result & 3;
    if (!v22 && v63 != 0)
    {
      do
      {
        v64 = a3;
        v65 = (float32x4_t)veorq_s8(a11, a11);
        if ((a3 & 1) == 0)
          goto LABEL_15;
        v66 = v16->f32[0];
        v16 = (float32x4_t *)((char *)v16 + v12);
        v67 = *v17++;
        v68.i32[0] = v67;
        v68.i32[1] = *v18++;
        v68.i32[2] = *v19++;
        v68.i32[3] = *v20++;
        v65 = vmlaq_n_f32(v65, v68, v66);
        v64 = a3 - 1;
        if (a3 > 1)
        {
LABEL_15:
          do
          {
            v69 = v16->f32[0];
            v70 = v16->f32[(unint64_t)v12 / 4];
            v16 = (float32x4_t *)((char *)v16 + 2 * v12);
            v71 = *(_QWORD *)v17;
            v17 += 2;
            v72.i64[0] = v71;
            v73 = *(_QWORD *)v18;
            v18 += 2;
            v74.i64[0] = v73;
            v75 = *(_QWORD *)v19;
            v19 += 2;
            v76 = v75;
            v77 = *(_QWORD *)v20;
            v20 += 2;
            v72.i64[1] = v76;
            v74.i64[1] = v77;
            v65 = vmlaq_n_f32(vmlaq_n_f32(v65, (float32x4_t)vtrn1q_s32(v72, v74), v69), (float32x4_t)vtrn2q_s32(v72, v74), v70);
            v14 = v64 <= 2;
            v64 -= 2;
          }
          while (!v14);
        }
        v79.i32[0] = a8->i32[0];
        v78 = (__int32 *)((char *)a8 + v13 * 4);
        v79.i32[1] = *v78;
        v80 = &v78[v13];
        v79.i32[2] = *v80;
        v81 = &v80[v13];
        v79.i32[3] = *v81;
        v82 = &v81[a12 + -4 * a12];
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v65, a9), v79, a10);
        v83 = &v82[v13];
        *v82 = a11.i32[0];
        a8 = (float32x4_t *)(v82 + 1);
        *v83 = a11.i32[1];
        v84 = &v83[v13];
        *v84 = a11.i32[2];
        v84[a12] = a11.i32[3];
        v17 = (__int32 *)a6;
        v18 = (__int32 *)a6 + a7;
        v19 = (__int32 *)&a6[a7];
        v20 = &v18[2 * a7];
        v16 = (float32x4_t *)((char *)&v16->i32[1] - v12 * a3);
        v14 = v63-- <= 1;
      }
      while (!v14);
    }
    a6 += 2 * a7;
    a8 = v21;
    v14 = i <= 4;
  }
  v14 = i <= -3;
  for (k = i + 3; !v14; --k)
  {
    v86 = a4;
    v87 = a6;
    v88 = (float32x4_t *)((char *)a8 + v13 * 4);
    v89 = __OFSUB__(result, 3);
    v90 = result - 3;
    if (result > 3)
    {
      do
      {
        v91 = a3;
        v92 = (float32x4_t)veorq_s8(a11, a11);
        if ((a3 & 1) == 0
          || (v93 = *v86,
              v86 = (float32x4_t *)((char *)v86 + v12),
              v94 = v87->f32[0],
              v87 = (float32x2_t *)((char *)v87 + 4),
              v92 = vmlaq_n_f32(v92, v93, v94),
              v91 = a3 - 1,
              a3 > 1))
        {
          v95 = *v86;
          v96 = *(float32x4_t *)((char *)v86 + v12);
          v14 = v91 <= 2;
          for (m = v91 - 2; !v14; m -= 2)
          {
            v86 = (float32x4_t *)((char *)v86 + 2 * v12);
            v98 = *v87++;
            v99 = vmlaq_n_f32(v92, v95, v98.f32[0]);
            v95 = *v86;
            v92 = vmlaq_lane_f32(v99, v96, v98, 1);
            v96 = *(float32x4_t *)((char *)v86 + v12);
            v14 = m <= 2;
          }
          v86 = (float32x4_t *)((char *)v86 + 2 * v12);
          v92 = vmlaq_lane_f32(vmlaq_n_f32(v92, v95, COERCE_FLOAT(*v87)), v96, *v87, 1);
        }
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v92, a9), *a8, a10);
        *a8++ = (float32x4_t)a11;
        v87 = a6;
        v86 = (float32x4_t *)((char *)v86 - v12 * a3 + 16);
        v89 = __OFSUB__(v90, 4);
        v14 = v90 <= 4;
        v90 -= 4;
      }
      while (!v14);
    }
    v100 = result & 3;
    if (!v89 && v100 != 0)
    {
      do
      {
        v101 = a3;
        a11 = veorq_s8(a11, a11);
        if ((a3 & 1) == 0
          || (v102 = v86->f32[0],
              v86 = (float32x4_t *)((char *)v86 + v12),
              v103 = v87->f32[0],
              v87 = (float32x2_t *)((char *)v87 + 4),
              *(float *)a11.i32 = vmlas_n_f32(*(float *)a11.i32, v103, v102),
              v101 = a3 - 1,
              a3 > 1))
        {
          do
          {
            v104.i32[0] = v86->i32[0];
            v105 = (__int32 *)((char *)v86 + v12);
            v104.i32[1] = *v105;
            v86 = (float32x4_t *)&v105[(unint64_t)v12 / 4];
            v106 = *v87++;
            *(float32x2_t *)a11.i8 = vmla_f32(*(float32x2_t *)a11.i8, v106, v104);
            v14 = v101 <= 2;
            v101 -= 2;
          }
          while (!v14);
          *(float *)a11.i32 = vaddv_f32(*(float32x2_t *)a11.i8);
        }
        *(float *)a11.i32 = vmlas_n_f32(*(float *)a11.i32 * a9, a8->f32[0], a10);
        a8->i32[0] = a11.i32[0];
        a8 = (float32x4_t *)((char *)a8 + 4);
        v87 = a6;
        v86 = (float32x4_t *)((char *)&v86->i32[1] - v12 * a3);
        v14 = v100-- <= 1;
      }
      while (!v14);
    }
    a6 = (float32x2_t *)((char *)a6 + 4 * a7);
    a8 = v88;
    v14 = k <= 1;
  }
  return result;
}

uint64_t sub_22315AE80(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7, double a8, double a9, double a10, float32x4_t a11, float32x4_t a12, float32x4_t a13, float32x4_t a14)
{
  float32x4_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  float32x4_t *v22;
  float32x4_t *v23;
  float32x4_t *v24;
  uint64_t v25;
  float32x2_t *v26;
  float *v27;
  float *f32;
  float32x4_t v29;
  float *v30;
  float32x4_t v31;
  float *v32;
  float32x2_t v33;
  float *v34;
  float v35;
  float32x4_t *v36;
  float32x4_t *v37;
  float32x4_t *v38;
  float32x4_t *v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t *v53;
  float32x4_t v54;
  float32x4_t v55;
  BOOL v56;
  float32x4_t *v57;
  float32x4_t *v58;
  float32x4_t *v59;
  uint64_t v60;
  float32x4_t *v61;
  float *v62;
  unint64_t *v63;
  float v64;
  float32x4_t *v65;
  float32x4_t v66;
  float32x4_t *v67;
  float32x4_t v68;
  float32x4_t *v69;
  float32x2_t v70;
  float32x4_t *v71;
  float32x4_t v72;
  float32x4_t *v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  unint64_t *v77;
  float32x4_t *v78;
  float32x4_t *v79;
  uint64_t v80;
  float32x2_t *v81;
  float *v82;
  float *v83;
  float32x4_t v84;
  float *v85;
  float32x4_t v86;
  float *v87;
  float32x2_t v88;
  float *v89;
  float v90;
  unint64_t *v91;
  unint64_t *v92;
  unint64_t *v93;
  float32x2_t *v94;
  float32x2_t v95;
  float32x2_t v96;
  float32x2_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float32x2_t v104;
  float32x2_t v105;
  float32x2_t v106;
  float32x2_t v107;
  float32x2_t *v108;
  float32x2_t v109;
  float32x2_t v110;
  float32x2_t *v111;
  float32x2_t *v112;
  float32x2_t *v113;
  uint64_t v114;
  float32x2_t *v115;
  float *v116;
  unint64_t *v117;
  float v118;
  float32x2_t *v119;
  float32x2_t v120;
  unint64_t *v121;
  float32x2_t v122;
  float32x2_t *v123;
  float32x2_t v124;
  unint64_t *v125;
  float32x2_t v126;
  float32x2_t *v127;
  uint64_t v128;
  BOOL v129;
  uint64_t v130;
  unsigned __int32 *v131;
  float32x4_t *v132;
  float32x4_t *v133;
  uint64_t v134;
  float32x2_t *v135;
  float *v136;
  float *v137;
  float32x4_t v138;
  float *v139;
  float32x4_t v140;
  float *v141;
  float32x2_t v142;
  float *v143;
  float v144;
  unsigned __int32 *v145;
  unsigned __int32 *v146;
  unsigned __int32 *v147;
  float *v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x2_t v151;
  float32x2_t v152;
  float32x2_t v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  __int32 *v159;
  float32x2_t v160;
  float *v161;
  float *v162;
  float *v163;
  uint64_t v164;
  float *v165;
  float *v166;
  uint64_t *v167;
  float v168;
  uint64_t v169;
  float *v170;
  float v171;
  float *v172;
  float v173;
  float v174;
  float *v175;
  float *v176;
  float v177;
  float v178;
  float *v179;
  float v180;
  float v181;
  float *v182;

  v15 = 4 * a6;
  v16 = 4 * a4;
  v17 = 0;
  if (result <= 3)
    goto LABEL_22;
  v18 = result - 3;
  do
  {
    v19 = 0;
    v20 = __OFSUB__(a2, 3);
    v21 = a2 - 3;
    if (a2 > 3)
    {
      do
      {
        v22 = (float32x4_t *)(a5 + v19 * v15 + 4 * v17);
        v23 = (float32x4_t *)(a3 + v19 * v16 + 4 * v19);
        v24 = (float32x4_t *)((char *)v23 + v16);
        v25 = a2 - v19 - 4;
        v26 = (float32x2_t *)&v23->u32[(unint64_t)v16 / 2 + 2];
        v27 = &v23->f32[(unint64_t)v16 / 2 + 3 + (unint64_t)v16 / 4];
        v29 = *v23;
        f32 = v23[1].f32;
        v31 = *v24;
        v30 = v24[1].f32;
        v33 = *v26;
        v32 = (float *)&v26[1];
        v35 = *v27;
        v34 = v27 + 1;
        a11 = *v22;
        v36 = (float32x4_t *)((char *)v22 + v15);
        a12 = *v36;
        v37 = (float32x4_t *)((char *)v36 + v15);
        a13 = *v37;
        v38 = (float32x4_t *)((char *)v37 + v15);
        a14 = *v38;
        v39 = (float32x4_t *)((char *)v38 + v15);
        v40 = vmulq_n_f32(a14, v35);
        v41 = vaddq_f32(vmlaq_lane_f32(vmulq_laneq_f32(a14, v31, 3), a12, *(float32x2_t *)v31.f32, 1), vmulq_laneq_f32(a13, v31, 2));
        v42 = vaddq_f32(vmulq_lane_f32(a14, v33, 1), vmulq_n_f32(a13, v33.f32[0]));
        v43 = vaddq_f32(vmlaq_lane_f32(vmulq_laneq_f32(a14, v29, 3), a12, *(float32x2_t *)v29.f32, 1), vmlaq_n_f32(vmulq_laneq_f32(a13, v29, 2), a11, v29.f32[0]));
        if ((v25 & 1) != 0)
        {
          v44 = *v39;
          v39 = (float32x4_t *)((char *)v39 + v15);
          v45 = *f32++;
          v46 = *v30++;
          v47 = *v32++;
          v48 = *v34++;
          v43 = vmlaq_n_f32(v43, v44, v45);
          v41 = vmlaq_n_f32(v41, v44, v46);
          v42 = vmlaq_n_f32(v42, v44, v47);
          v40 = vmlaq_n_f32(v40, v44, v48);
          v25 = a2 - v19 - 5;
        }
        if (v25)
        {
          v49 = 0uLL;
          v50 = 0uLL;
          v51 = 0uLL;
          v52 = 0uLL;
          do
          {
            v54 = *v39;
            v53 = (float32x4_t *)((char *)v39 + v15);
            v55 = *v53;
            v39 = (float32x4_t *)((char *)v53 + v15);
            a11.i64[0] = *(_QWORD *)f32;
            f32 += 2;
            a12.i64[0] = *(_QWORD *)v30;
            v30 += 2;
            a13.i64[0] = *(_QWORD *)v32;
            v32 += 2;
            a14.i64[0] = *(_QWORD *)v34;
            v34 += 2;
            v43 = vmlaq_n_f32(v43, v54, a11.f32[0]);
            v41 = vmlaq_n_f32(v41, v54, a12.f32[0]);
            v42 = vmlaq_n_f32(v42, v54, a13.f32[0]);
            v40 = vmlaq_n_f32(v40, v54, a14.f32[0]);
            v49 = vmlaq_lane_f32(v49, v55, *(float32x2_t *)a11.f32, 1);
            v50 = vmlaq_lane_f32(v50, v55, *(float32x2_t *)a12.f32, 1);
            v51 = vmlaq_lane_f32(v51, v55, *(float32x2_t *)a13.f32, 1);
            v52 = vmlaq_lane_f32(v52, v55, *(float32x2_t *)a14.f32, 1);
            v56 = v25 <= 2;
            v25 -= 2;
          }
          while (!v56);
          v43 = vaddq_f32(v43, v49);
          v41 = vaddq_f32(v41, v50);
          v42 = vaddq_f32(v42, v51);
          v40 = vaddq_f32(v40, v52);
        }
        v14 = vmulq_n_f32(v40, a7);
        v57 = (float32x4_t *)((char *)v39 - (a2 - v19) * v15);
        *v57 = vmulq_n_f32(v43, a7);
        v58 = (float32x4_t *)((char *)v57 + v15);
        *v58 = vmulq_n_f32(v41, a7);
        v59 = (float32x4_t *)((char *)v58 + v15);
        *v59 = vmulq_n_f32(v42, a7);
        *(float32x4_t *)((char *)v59 + v15) = v14;
        v19 += 4;
        v20 = __OFSUB__(v21, 4);
        v56 = v21 <= 4;
        v21 -= 4;
      }
      while (!v56);
    }
    v60 = a2 & 3;
    if (!v20 && v60 != 0)
    {
      v61 = (float32x4_t *)(a5 + v19 * v15 + 4 * v17);
      v62 = (float *)(a3 + v19 * v16 + 4 * v19);
      if (v60 != 1)
      {
        if (v60 != 2)
        {
          v64 = *v62;
          v63 = (unint64_t *)(v62 + 1);
          a13.i64[0] = *v63;
          v62 = (float *)((char *)v63 + v16);
          v66 = *v61;
          v65 = (float32x4_t *)((char *)v61 + v15);
          v68 = *v65;
          v67 = (float32x4_t *)((char *)v65 + v15);
          a12 = *v67;
          v69 = (float32x4_t *)((char *)v67 - 2 * v15);
          *v69 = vmulq_n_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(v66, v64), vmulq_n_f32(v68, a13.f32[0])), vmulq_lane_f32(a12, *(float32x2_t *)a13.f32, 1)), a7);
          v61 = (float32x4_t *)((char *)v69 + v15);
        }
        v70 = *(float32x2_t *)v62;
        v62 = (float *)((char *)v62 + v16 + 4);
        v72 = *v61;
        v71 = (float32x4_t *)((char *)v61 + v15);
        a11 = *v71;
        v73 = (float32x4_t *)((char *)v71 - v15);
        *v73 = vmulq_n_f32(vaddq_f32(vmulq_n_f32(v72, v70.f32[0]), vmulq_lane_f32(a11, v70, 1)), a7);
        v61 = (float32x4_t *)((char *)v73 + v15);
      }
      *v61 = vmulq_n_f32(vmulq_n_f32(*v61, *v62), a7);
    }
    v17 += 4;
    v56 = v18 <= 4;
    v18 -= 4;
  }
  while (!v56);
  v56 = v18 <= -3;
  result = v18 + 3;
  if (!v56)
  {
LABEL_22:
    if (result > 1)
    {
      v74 = 0;
      v75 = __OFSUB__(a2, 3);
      v76 = a2 - 3;
      if (a2 > 3)
      {
        do
        {
          v77 = (unint64_t *)(a5 + v74 * v15 + 4 * v17);
          v78 = (float32x4_t *)(a3 + v74 * v16 + 4 * v74);
          v79 = (float32x4_t *)((char *)v78 + v16);
          v80 = a2 - v74 - 4;
          v81 = (float32x2_t *)&v78->u32[(unint64_t)v16 / 2 + 2];
          v82 = &v78->f32[(unint64_t)v16 / 2 + 3 + (unint64_t)v16 / 4];
          v84 = *v78;
          v83 = v78[1].f32;
          v86 = *v79;
          v85 = v79[1].f32;
          v88 = *v81;
          v87 = (float *)&v81[1];
          v90 = *v82;
          v89 = v82 + 1;
          a11.i64[0] = *v77;
          v91 = (unint64_t *)((char *)v77 + v15);
          a12.i64[0] = *v91;
          v92 = (unint64_t *)((char *)v91 + v15);
          a13.i64[0] = *v92;
          v93 = (unint64_t *)((char *)v92 + v15);
          a14.i64[0] = *v93;
          v94 = (float32x2_t *)((char *)v93 + v15);
          v95 = vmul_n_f32(*(float32x2_t *)a14.f32, v90);
          v96 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(*(float32x2_t *)a14.f32, v86, 3), *(float32x2_t *)a12.f32, *(float32x2_t *)v86.f32, 1), vmul_laneq_f32(*(float32x2_t *)a13.f32, v86, 2));
          v97 = vadd_f32(vmul_lane_f32(*(float32x2_t *)a14.f32, v88, 1), vmul_n_f32(*(float32x2_t *)a13.f32, v88.f32[0]));
          v98 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(*(float32x2_t *)a14.f32, v84, 3), *(float32x2_t *)a12.f32, *(float32x2_t *)v84.f32, 1), vmla_n_f32(vmul_laneq_f32(*(float32x2_t *)a13.f32, v84, 2), *(float32x2_t *)a11.f32, v84.f32[0]));
          if ((v80 & 1) != 0)
          {
            v99 = *v94;
            v94 = (float32x2_t *)((char *)v94 + v15);
            v100 = *v83++;
            v101 = *v85++;
            v102 = *v87++;
            v103 = *v89++;
            v98 = vmla_n_f32(v98, v99, v100);
            v96 = vmla_n_f32(v96, v99, v101);
            v97 = vmla_n_f32(v97, v99, v102);
            v95 = vmla_n_f32(v95, v99, v103);
            v80 = a2 - v74 - 5;
          }
          if (v80)
          {
            v104 = 0;
            v105 = 0;
            v106 = 0;
            v107 = 0;
            do
            {
              v109 = *v94;
              v108 = (float32x2_t *)((char *)v94 + v15);
              v110 = *v108;
              v94 = (float32x2_t *)((char *)v108 + v15);
              a11.i64[0] = *(_QWORD *)v83;
              v83 += 2;
              a12.i64[0] = *(_QWORD *)v85;
              v85 += 2;
              a13.i64[0] = *(_QWORD *)v87;
              v87 += 2;
              a14.i64[0] = *(_QWORD *)v89;
              v89 += 2;
              v98 = vmla_n_f32(v98, v109, a11.f32[0]);
              v96 = vmla_n_f32(v96, v109, a12.f32[0]);
              v97 = vmla_n_f32(v97, v109, a13.f32[0]);
              v95 = vmla_n_f32(v95, v109, a14.f32[0]);
              v104 = vmla_lane_f32(v104, v110, *(float32x2_t *)a11.f32, 1);
              v105 = vmla_lane_f32(v105, v110, *(float32x2_t *)a12.f32, 1);
              v106 = vmla_lane_f32(v106, v110, *(float32x2_t *)a13.f32, 1);
              v107 = vmla_lane_f32(v107, v110, *(float32x2_t *)a14.f32, 1);
              v56 = v80 <= 2;
              v80 -= 2;
            }
            while (!v56);
            v98 = vadd_f32(v98, v104);
            v96 = vadd_f32(v96, v105);
            v97 = vadd_f32(v97, v106);
            v95 = vadd_f32(v95, v107);
          }
          *(float32x2_t *)v14.f32 = vmul_n_f32(v95, a7);
          v111 = (float32x2_t *)((char *)v94 - (a2 - v74) * v15);
          *v111 = vmul_n_f32(v98, a7);
          v112 = (float32x2_t *)((char *)v111 + v15);
          *v112 = vmul_n_f32(v96, a7);
          v113 = (float32x2_t *)((char *)v112 + v15);
          *v113 = vmul_n_f32(v97, a7);
          *(float32x2_t *)((char *)v113 + v15) = *(float32x2_t *)v14.f32;
          v74 += 4;
          v75 = __OFSUB__(v76, 4);
          v56 = v76 <= 4;
          v76 -= 4;
        }
        while (!v56);
      }
      v114 = a2 & 3;
      if (!v75 && v114 != 0)
      {
        v115 = (float32x2_t *)(a5 + v74 * v15 + 4 * v17);
        v116 = (float *)(a3 + v74 * v16 + 4 * v74);
        if (v114 != 1)
        {
          if (v114 != 2)
          {
            v118 = *v116;
            v117 = (unint64_t *)(v116 + 1);
            a13.i64[0] = *v117;
            v116 = (float *)((char *)v117 + v16);
            v120 = *v115;
            v119 = (float32x2_t *)((char *)v115 + v15);
            v122 = *v119;
            v121 = (unint64_t *)((char *)v119 + v15);
            a12.i64[0] = *v121;
            v123 = (float32x2_t *)&v121[v15 / 0xFFFFFFFFFFFFFFFCLL];
            *v123 = vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(v120, v118), vmul_n_f32(v122, a13.f32[0])), vmul_lane_f32(*(float32x2_t *)a12.f32, *(float32x2_t *)a13.f32, 1)), a7);
            v115 = (float32x2_t *)((char *)v123 + v15);
          }
          v124 = *(float32x2_t *)v116;
          v116 = (float *)((char *)v116 + v16 + 4);
          v126 = *v115;
          v125 = (unint64_t *)((char *)v115 + v15);
          a11.i64[0] = *v125;
          v127 = (float32x2_t *)((char *)v125 - v15);
          *v127 = vmul_n_f32(vadd_f32(vmul_n_f32(v126, v124.f32[0]), vmul_lane_f32(*(float32x2_t *)a11.f32, v124, 1)), a7);
          v115 = (float32x2_t *)((char *)v127 + v15);
        }
        *v115 = vmul_n_f32(vmul_n_f32(*v115, *v116), a7);
      }
      v17 += 2;
      result -= 2;
    }
    if (result)
    {
      v128 = 0;
      v129 = __OFSUB__(a2, 3);
      v130 = a2 - 3;
      if (a2 > 3)
      {
        do
        {
          v131 = (unsigned __int32 *)(a5 + v128 * v15 + 4 * v17);
          v132 = (float32x4_t *)(a3 + v128 * v16 + 4 * v128);
          v133 = (float32x4_t *)((char *)v132 + v16);
          v134 = a2 - v128 - 4;
          v135 = (float32x2_t *)&v132->u32[(unint64_t)v16 / 2 + 2];
          v136 = &v132->f32[(unint64_t)v16 / 2 + 3 + (unint64_t)v16 / 4];
          v138 = *v132;
          v137 = v132[1].f32;
          v140 = *v133;
          v139 = v133[1].f32;
          v142 = *v135;
          v141 = (float *)&v135[1];
          v144 = *v136;
          v143 = v136 + 1;
          a11.i32[0] = *v131;
          v145 = &v131[(unint64_t)v15 / 4];
          a12.i32[0] = *v145;
          v146 = &v145[(unint64_t)v15 / 4];
          a13.i32[0] = *v146;
          v147 = &v146[(unint64_t)v15 / 4];
          a14.i32[0] = *v147;
          v148 = (float *)&v147[(unint64_t)v15 / 4];
          *(int32x2_t *)a11.f32 = vtrn1_s32(*(int32x2_t *)a11.f32, *(int32x2_t *)a12.f32);
          *(int32x2_t *)a13.f32 = vtrn1_s32(*(int32x2_t *)a13.f32, *(int32x2_t *)a14.f32);
          a11.i64[1] = a13.i64[0];
          v140.i32[0] = 0;
          v149 = vmulq_f32(v138, a11);
          v150 = vmulq_f32(v140, a11);
          v151 = vmul_f32(v142, *(float32x2_t *)a13.f32);
          v14.f32[0] = v144 * a14.f32[0];
          v152 = (float32x2_t)vpaddq_f32(v149, v149).u64[0];
          v153 = (float32x2_t)vpaddq_f32(v150, v150).u64[0];
          if ((v134 & 1) != 0)
          {
            v154 = *v148;
            v148 = (float *)((char *)v148 + v15);
            v155 = *v137++;
            v156 = *v139++;
            v157 = *v141++;
            v158 = *v143++;
            v152.f32[0] = vaddv_f32(v152) + (float)(v154 * v155);
            v153.f32[0] = vaddv_f32(v153) + (float)(v154 * v156);
            v151.f32[0] = vaddv_f32(v151) + (float)(v154 * v157);
            v14.f32[0] = vaddv_f32(*(float32x2_t *)v14.f32) + (float)(v154 * v158);
            v134 = a2 - v128 - 5;
          }
          if (v134)
          {
            do
            {
              v160.f32[0] = *v148;
              v159 = (__int32 *)&v148[(unint64_t)v15 / 4];
              v160.i32[1] = *v159;
              v148 = (float *)&v159[(unint64_t)v15 / 4];
              a11.i64[0] = *(_QWORD *)v137;
              v137 += 2;
              a12.i64[0] = *(_QWORD *)v139;
              v139 += 2;
              a13.i64[0] = *(_QWORD *)v141;
              v141 += 2;
              a14.i64[0] = *(_QWORD *)v143;
              v143 += 2;
              v152 = vmla_f32(v152, v160, *(float32x2_t *)a11.f32);
              v153 = vmla_f32(v153, v160, *(float32x2_t *)a12.f32);
              v151 = vmla_f32(v151, v160, *(float32x2_t *)a13.f32);
              *(float32x2_t *)v14.f32 = vmla_f32(*(float32x2_t *)v14.f32, v160, *(float32x2_t *)a14.f32);
              v56 = v134 <= 2;
              v134 -= 2;
            }
            while (!v56);
          }
          v161 = (float *)((char *)v148 - (a2 - v128) * v15);
          *v161 = vaddv_f32(v152) * a7;
          v162 = &v161[(unint64_t)v15 / 4];
          *v162 = vaddv_f32(v153) * a7;
          v163 = &v162[(unint64_t)v15 / 4];
          *v163 = vaddv_f32(v151) * a7;
          v163[(unint64_t)v15 / 4] = vaddv_f32(*(float32x2_t *)v14.f32) * a7;
          v128 += 4;
          v129 = __OFSUB__(v130, 4);
          v56 = v130 <= 4;
          v130 -= 4;
        }
        while (!v56);
      }
      v164 = a2 & 3;
      if (!v129 && v164 != 0)
      {
        v165 = (float *)(a5 + v128 * v15 + 4 * v17);
        v166 = (float *)(a3 + v128 * v16 + 4 * v128);
        if (v164 != 1)
        {
          if (v164 != 2)
          {
            v168 = *v166;
            v167 = (uint64_t *)(v166 + 1);
            v169 = *v167;
            v166 = (float *)((char *)v167 + v16);
            v171 = *v165;
            v170 = &v165[(unint64_t)v15 / 4];
            v173 = *v170;
            v172 = &v170[(unint64_t)v15 / 4];
            v174 = *v172;
            v175 = &v172[v15 / 0xFFFFFFFFFFFFFFFELL];
            *v175 = (float)((float)((float)(v168 * v171) + (float)(*(float *)&v169 * v173))
                          + (float)(*((float *)&v169 + 1) * v174))
                  * a7;
            v165 = &v175[(unint64_t)v15 / 4];
          }
          v177 = *v166;
          v176 = v166 + 1;
          v178 = *v176;
          v166 = &v176[(unint64_t)v16 / 4];
          v180 = *v165;
          v179 = &v165[(unint64_t)v15 / 4];
          v181 = *v179;
          v182 = &v179[v15 / 0xFFFFFFFFFFFFFFFCLL];
          *v182 = (float)((float)(v177 * v180) + (float)(v178 * v181)) * a7;
          v165 = &v182[(unint64_t)v15 / 4];
        }
        *v165 = (float)(*v165 * *v166) * a7;
      }
    }
  }
  return result;
}

uint64_t sub_22315B470(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7, double a8, double a9, double a10, float32x4_t a11, float32x4_t a12, float32x4_t a13, double a14)
{
  float32x4_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  float32x4_t *v22;
  float32x4_t *v23;
  uint64_t v24;
  float32x2_t *v25;
  float *v26;
  float *v27;
  float *f32;
  float32x4_t v29;
  float *v30;
  float32x2_t v31;
  float *v32;
  float v33;
  float32x4_t *v34;
  float32x4_t *v35;
  float32x4_t *v36;
  float32x4_t *v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t *v51;
  float32x4_t v52;
  float32x4_t v53;
  BOOL v54;
  float32x4_t *v55;
  float32x4_t *v56;
  float32x4_t *v57;
  uint64_t v58;
  float32x4_t *v59;
  float *v60;
  float32x4_t *v61;
  float32x4_t v62;
  float32x4_t *v63;
  float32x4_t v64;
  float32x4_t *v65;
  float32x4_t *v66;
  float32x4_t v67;
  float32x4_t *v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  unint64_t *v72;
  float32x4_t *v73;
  uint64_t v74;
  float32x2_t *v75;
  float *v76;
  float *v77;
  float *v78;
  float32x4_t v79;
  float *v80;
  float32x2_t v81;
  float *v82;
  float v83;
  unint64_t *v84;
  unint64_t *v85;
  float32x2_t *v86;
  float32x2_t *v87;
  float32x2_t v88;
  float32x2_t v89;
  float32x2_t v90;
  float32x2_t v91;
  float32x2_t v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float32x2_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float32x2_t v100;
  float32x2_t *v101;
  float32x2_t v102;
  float32x2_t v103;
  float32x2_t *v104;
  float32x2_t *v105;
  float32x2_t *v106;
  uint64_t v107;
  float32x2_t *v108;
  float *v109;
  float32x2_t *v110;
  float32x2_t v111;
  unint64_t *v112;
  float32x2_t v113;
  float32x2_t *v114;
  unint64_t *v115;
  float32x2_t v116;
  float32x2_t *v117;
  uint64_t v118;
  BOOL v119;
  uint64_t v120;
  unsigned __int32 *v121;
  float32x4_t *v122;
  uint64_t v123;
  float32x2_t *v124;
  float *v125;
  float *v126;
  float *v127;
  float32x4_t v128;
  float *v129;
  float32x2_t v130;
  float *v131;
  float v132;
  unsigned __int32 *v133;
  unsigned __int32 *v134;
  unsigned __int32 *v135;
  float *v136;
  float32x4_t v137;
  float32x2_t v138;
  float32x2_t v139;
  float32x2_t v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  __int32 *v146;
  float32x2_t v147;
  float *v148;
  float *v149;
  float *v150;
  uint64_t v151;
  float *v152;
  float *v153;
  uint64_t v154;
  float *v155;
  float v156;
  float *v157;
  float v158;
  float v159;
  float *v160;
  float *v161;
  float v162;
  float v163;
  float *v164;

  v15 = 4 * a6;
  v16 = 4 * a4;
  v17 = 0;
  if (result <= 3)
    goto LABEL_22;
  v18 = result - 3;
  do
  {
    v19 = 0;
    v20 = __OFSUB__(a2, 3);
    v21 = a2 - 3;
    if (a2 > 3)
    {
      do
      {
        v22 = (float32x4_t *)(a5 + v19 * v15 + 4 * v17);
        v23 = (float32x4_t *)(a3 + v19 * v16 + 4 * v19);
        v24 = a2 - v19 - 4;
        v25 = (float32x2_t *)&v23->u32[(unint64_t)v16 / 4 + 2];
        v26 = &v23->f32[(unint64_t)v16 / 2 + 3];
        v27 = &v23[1].f32[(unint64_t)v16 / 2 + (unint64_t)v16 / 4];
        v29 = *v23;
        f32 = v23[1].f32;
        v31 = *v25;
        v30 = (float *)&v25[1];
        v33 = *v26;
        v32 = v26 + 1;
        a11 = *v22;
        v34 = (float32x4_t *)((char *)v22 + v15);
        a12 = *v34;
        v35 = (float32x4_t *)((char *)v34 + v15);
        a13 = *v35;
        v36 = (float32x4_t *)((char *)v35 + v15);
        v38 = *v36;
        v37 = (float32x4_t *)((char *)v36 + v15);
        v39 = vmlaq_n_f32(a13, v38, v33);
        v40 = vaddq_f32(vmlaq_lane_f32(a12, v38, v31, 1), vmulq_n_f32(a13, v31.f32[0]));
        v41 = vaddq_f32(vmlaq_lane_f32(vmlaq_laneq_f32(a11, v38, v29, 3), a12, *(float32x2_t *)v29.f32, 1), vmulq_laneq_f32(a13, v29, 2));
        if ((v24 & 1) != 0)
        {
          v42 = *v37;
          v37 = (float32x4_t *)((char *)v37 + v15);
          v43 = *f32++;
          v44 = *v30++;
          v45 = *v32++;
          v46 = *v27++;
          v41 = vmlaq_n_f32(v41, v42, v43);
          v40 = vmlaq_n_f32(v40, v42, v44);
          v39 = vmlaq_n_f32(v39, v42, v45);
          v38 = vmlaq_n_f32(v38, v42, v46);
          v24 = a2 - v19 - 5;
        }
        if (v24)
        {
          v47 = 0uLL;
          v48 = 0uLL;
          v49 = 0uLL;
          v50 = 0uLL;
          do
          {
            v52 = *v37;
            v51 = (float32x4_t *)((char *)v37 + v15);
            v53 = *v51;
            v37 = (float32x4_t *)((char *)v51 + v15);
            a11.i64[0] = *(_QWORD *)f32;
            f32 += 2;
            a12.i64[0] = *(_QWORD *)v30;
            v30 += 2;
            a13.i64[0] = *(_QWORD *)v32;
            v32 += 2;
            a14 = *(double *)v27;
            v27 += 2;
            v41 = vmlaq_n_f32(v41, v52, a11.f32[0]);
            v40 = vmlaq_n_f32(v40, v52, a12.f32[0]);
            v39 = vmlaq_n_f32(v39, v52, a13.f32[0]);
            v38 = vmlaq_n_f32(v38, v52, *(float *)&a14);
            v47 = vmlaq_lane_f32(v47, v53, *(float32x2_t *)a11.f32, 1);
            v48 = vmlaq_lane_f32(v48, v53, *(float32x2_t *)a12.f32, 1);
            v49 = vmlaq_lane_f32(v49, v53, *(float32x2_t *)a13.f32, 1);
            v50 = vmlaq_lane_f32(v50, v53, *(float32x2_t *)&a14, 1);
            v54 = v24 <= 2;
            v24 -= 2;
          }
          while (!v54);
          v41 = vaddq_f32(v41, v47);
          v40 = vaddq_f32(v40, v48);
          v39 = vaddq_f32(v39, v49);
          v38 = vaddq_f32(v38, v50);
        }
        v14 = vmulq_n_f32(v39, a7);
        v55 = (float32x4_t *)((char *)v37 - (a2 - v19) * v15);
        *v55 = vmulq_n_f32(v41, a7);
        v56 = (float32x4_t *)((char *)v55 + v15);
        *v56 = vmulq_n_f32(v40, a7);
        v57 = (float32x4_t *)((char *)v56 + v15);
        *v57 = v14;
        *(float32x4_t *)((char *)v57 + v15) = vmulq_n_f32(v38, a7);
        v19 += 4;
        v20 = __OFSUB__(v21, 4);
        v54 = v21 <= 4;
        v21 -= 4;
      }
      while (!v54);
    }
    v58 = a2 & 3;
    if (!v20 && v58 != 0)
    {
      v59 = (float32x4_t *)(a5 + v19 * v15 + 4 * v17);
      v60 = (float *)(a3 + v19 * v16 + 4 * v19 + 4);
      if (v58 != 1)
      {
        if (v58 != 2)
        {
          a13.i64[0] = *(_QWORD *)v60;
          v60 = (float *)((char *)v60 + v16 + 4);
          v62 = *v59;
          v61 = (float32x4_t *)((char *)v59 + v15);
          v64 = *v61;
          v63 = (float32x4_t *)((char *)v61 + v15);
          a12 = *v63;
          v65 = (float32x4_t *)((char *)v63 - 2 * v15);
          *v65 = vmulq_n_f32(vmlaq_lane_f32(vmlaq_n_f32(v62, v64, a13.f32[0]), a12, *(float32x2_t *)a13.f32, 1), a7);
          v59 = (float32x4_t *)((char *)v65 + v15);
        }
        v67 = *v59;
        v66 = (float32x4_t *)((char *)v59 + v15);
        a11 = *v66;
        v68 = (float32x4_t *)((char *)v66 - v15);
        *v68 = vmulq_n_f32(vmlaq_n_f32(v67, a11, *v60), a7);
        v59 = (float32x4_t *)((char *)v68 + v15);
      }
      *v59 = vmulq_n_f32(*v59, a7);
    }
    v17 += 4;
    v54 = v18 <= 4;
    v18 -= 4;
  }
  while (!v54);
  v54 = v18 <= -3;
  result = v18 + 3;
  if (!v54)
  {
LABEL_22:
    if (result > 1)
    {
      v69 = 0;
      v70 = __OFSUB__(a2, 3);
      v71 = a2 - 3;
      if (a2 > 3)
      {
        do
        {
          v72 = (unint64_t *)(a5 + v69 * v15 + 4 * v17);
          v73 = (float32x4_t *)(a3 + v69 * v16 + 4 * v69);
          v74 = a2 - v69 - 4;
          v75 = (float32x2_t *)&v73->u32[(unint64_t)v16 / 4 + 2];
          v76 = &v73->f32[(unint64_t)v16 / 2 + 3];
          v77 = &v73[1].f32[(unint64_t)v16 / 2 + (unint64_t)v16 / 4];
          v79 = *v73;
          v78 = v73[1].f32;
          v81 = *v75;
          v80 = (float *)&v75[1];
          v83 = *v76;
          v82 = v76 + 1;
          a11.i64[0] = *v72;
          v84 = (unint64_t *)((char *)v72 + v15);
          a12.i64[0] = *v84;
          v85 = (unint64_t *)((char *)v84 + v15);
          a13.i64[0] = *v85;
          v86 = (float32x2_t *)((char *)v85 + v15);
          v88 = *v86;
          v87 = (float32x2_t *)((char *)v86 + v15);
          v89 = vmla_n_f32(*(float32x2_t *)a13.f32, v88, v83);
          v90 = vadd_f32(vmla_lane_f32(*(float32x2_t *)a12.f32, v88, v81, 1), vmul_n_f32(*(float32x2_t *)a13.f32, v81.f32[0]));
          v91 = vadd_f32(vmla_lane_f32(vmla_laneq_f32(*(float32x2_t *)a11.f32, v88, v79, 3), *(float32x2_t *)a12.f32, *(float32x2_t *)v79.f32, 1), vmul_laneq_f32(*(float32x2_t *)a13.f32, v79, 2));
          if ((v74 & 1) != 0)
          {
            v92 = *v87;
            v87 = (float32x2_t *)((char *)v87 + v15);
            v93 = *v78++;
            v94 = *v80++;
            v95 = *v82++;
            v96 = *v77++;
            v91 = vmla_n_f32(v91, v92, v93);
            v90 = vmla_n_f32(v90, v92, v94);
            v89 = vmla_n_f32(v89, v92, v95);
            v88 = vmla_n_f32(v88, v92, v96);
            v74 = a2 - v69 - 5;
          }
          if (v74)
          {
            v97 = 0;
            v98 = 0;
            v99 = 0;
            v100 = 0;
            do
            {
              v102 = *v87;
              v101 = (float32x2_t *)((char *)v87 + v15);
              v103 = *v101;
              v87 = (float32x2_t *)((char *)v101 + v15);
              a11.i64[0] = *(_QWORD *)v78;
              v78 += 2;
              a12.i64[0] = *(_QWORD *)v80;
              v80 += 2;
              a13.i64[0] = *(_QWORD *)v82;
              v82 += 2;
              a14 = *(double *)v77;
              v77 += 2;
              v91 = vmla_n_f32(v91, v102, a11.f32[0]);
              v90 = vmla_n_f32(v90, v102, a12.f32[0]);
              v89 = vmla_n_f32(v89, v102, a13.f32[0]);
              v88 = vmla_n_f32(v88, v102, *(float *)&a14);
              v97 = vmla_lane_f32(v97, v103, *(float32x2_t *)a11.f32, 1);
              v98 = vmla_lane_f32(v98, v103, *(float32x2_t *)a12.f32, 1);
              v99 = vmla_lane_f32(v99, v103, *(float32x2_t *)a13.f32, 1);
              v100 = vmla_lane_f32(v100, v103, *(float32x2_t *)&a14, 1);
              v54 = v74 <= 2;
              v74 -= 2;
            }
            while (!v54);
            v91 = vadd_f32(v91, v97);
            v90 = vadd_f32(v90, v98);
            v89 = vadd_f32(v89, v99);
            v88 = vadd_f32(v88, v100);
          }
          *(float32x2_t *)v14.f32 = vmul_n_f32(v89, a7);
          v104 = (float32x2_t *)((char *)v87 - (a2 - v69) * v15);
          *v104 = vmul_n_f32(v91, a7);
          v105 = (float32x2_t *)((char *)v104 + v15);
          *v105 = vmul_n_f32(v90, a7);
          v106 = (float32x2_t *)((char *)v105 + v15);
          *v106 = *(float32x2_t *)v14.f32;
          *(float32x2_t *)((char *)v106 + v15) = vmul_n_f32(v88, a7);
          v69 += 4;
          v70 = __OFSUB__(v71, 4);
          v54 = v71 <= 4;
          v71 -= 4;
        }
        while (!v54);
      }
      v107 = a2 & 3;
      if (!v70 && v107 != 0)
      {
        v108 = (float32x2_t *)(a5 + v69 * v15 + 4 * v17);
        v109 = (float *)(a3 + v69 * v16 + 4 * v69 + 4);
        if (v107 != 1)
        {
          if (v107 != 2)
          {
            a13.i64[0] = *(_QWORD *)v109;
            v109 = (float *)((char *)v109 + v16 + 4);
            v111 = *v108;
            v110 = (float32x2_t *)((char *)v108 + v15);
            v113 = *v110;
            v112 = (unint64_t *)((char *)v110 + v15);
            a12.i64[0] = *v112;
            v114 = (float32x2_t *)&v112[v15 / 0xFFFFFFFFFFFFFFFCLL];
            *v114 = vmul_n_f32(vmla_lane_f32(vmla_n_f32(v111, v113, a13.f32[0]), *(float32x2_t *)a12.f32, *(float32x2_t *)a13.f32, 1), a7);
            v108 = (float32x2_t *)((char *)v114 + v15);
          }
          v116 = *v108;
          v115 = (unint64_t *)((char *)v108 + v15);
          a11.i64[0] = *v115;
          v117 = (float32x2_t *)((char *)v115 - v15);
          *v117 = vmul_n_f32(vmla_n_f32(v116, *(float32x2_t *)a11.f32, *v109), a7);
          v108 = (float32x2_t *)((char *)v117 + v15);
        }
        *v108 = vmul_n_f32(*v108, a7);
      }
      v17 += 2;
      result -= 2;
    }
    if (result)
    {
      v118 = 0;
      v119 = __OFSUB__(a2, 3);
      v120 = a2 - 3;
      if (a2 > 3)
      {
        do
        {
          v121 = (unsigned __int32 *)(a5 + v118 * v15 + 4 * v17);
          v122 = (float32x4_t *)(a3 + v118 * v16 + 4 * v118);
          v123 = a2 - v118 - 4;
          v124 = (float32x2_t *)&v122->u32[(unint64_t)v16 / 4 + 2];
          v125 = &v122->f32[(unint64_t)v16 / 2 + 3];
          v126 = &v122[1].f32[(unint64_t)v16 / 2 + (unint64_t)v16 / 4];
          v128 = *v122;
          v127 = v122[1].f32;
          v130 = *v124;
          v129 = (float *)&v124[1];
          v132 = *v125;
          v131 = v125 + 1;
          a11.i32[0] = *v121;
          v133 = &v121[(unint64_t)v15 / 4];
          a12.i32[0] = *v133;
          v134 = &v133[(unint64_t)v15 / 4];
          a13.i32[0] = *v134;
          v135 = &v134[(unint64_t)v15 / 4];
          LODWORD(a14) = *v135;
          v136 = (float *)&v135[(unint64_t)v15 / 4];
          *(int32x2_t *)a11.f32 = vtrn1_s32(*(int32x2_t *)a11.f32, *(int32x2_t *)a12.f32);
          *(int32x2_t *)a13.f32 = vtrn1_s32(*(int32x2_t *)a13.f32, *(int32x2_t *)&a14);
          a11.i64[1] = a13.i64[0];
          v128.i32[0] = 0;
          v137 = vmulq_f32(v128, a11);
          v139 = vmul_f32(v130, *(float32x2_t *)a13.f32);
          v138 = (float32x2_t)LODWORD(a14);
          v140 = (float32x2_t)vpaddq_f32(v137, v137).u64[0];
          v139.f32[0] = vaddv_f32(v139) + a12.f32[0];
          v14.f32[0] = (float)(v132 * *(float *)&a14) + a13.f32[0];
          v140.f32[0] = vaddv_f32(v140) + a11.f32[0];
          if ((v123 & 1) != 0)
          {
            v141 = *v136;
            v136 = (float *)((char *)v136 + v15);
            v142 = *v127++;
            v143 = *v129++;
            v144 = *v131++;
            v145 = *v126++;
            v140.f32[0] = vaddv_f32(v140) + (float)(v141 * v142);
            v139.f32[0] = vaddv_f32(v139) + (float)(v141 * v143);
            v14.f32[0] = vaddv_f32(*(float32x2_t *)v14.f32) + (float)(v141 * v144);
            v138.f32[0] = vaddv_f32(v138) + (float)(v141 * v145);
            v123 = a2 - v118 - 5;
          }
          if (v123)
          {
            do
            {
              v147.f32[0] = *v136;
              v146 = (__int32 *)&v136[(unint64_t)v15 / 4];
              v147.i32[1] = *v146;
              v136 = (float *)&v146[(unint64_t)v15 / 4];
              a11.i64[0] = *(_QWORD *)v127;
              v127 += 2;
              a12.i64[0] = *(_QWORD *)v129;
              v129 += 2;
              a13.i64[0] = *(_QWORD *)v131;
              v131 += 2;
              a14 = *(double *)v126;
              v126 += 2;
              v140 = vmla_f32(v140, v147, *(float32x2_t *)a11.f32);
              v139 = vmla_f32(v139, v147, *(float32x2_t *)a12.f32);
              *(float32x2_t *)v14.f32 = vmla_f32(*(float32x2_t *)v14.f32, v147, *(float32x2_t *)a13.f32);
              v138 = vmla_f32(v138, v147, *(float32x2_t *)&a14);
              v54 = v123 <= 2;
              v123 -= 2;
            }
            while (!v54);
          }
          v148 = (float *)((char *)v136 - (a2 - v118) * v15);
          *v148 = vaddv_f32(v140) * a7;
          v149 = &v148[(unint64_t)v15 / 4];
          *v149 = vaddv_f32(v139) * a7;
          v150 = &v149[(unint64_t)v15 / 4];
          *v150 = vaddv_f32(*(float32x2_t *)v14.f32) * a7;
          v150[(unint64_t)v15 / 4] = vaddv_f32(v138) * a7;
          v118 += 4;
          v119 = __OFSUB__(v120, 4);
          v54 = v120 <= 4;
          v120 -= 4;
        }
        while (!v54);
      }
      v151 = a2 & 3;
      if (!v119 && v151 != 0)
      {
        v152 = (float *)(a5 + v118 * v15 + 4 * v17);
        v153 = (float *)(a3 + v118 * v16 + 4 * v118 + 4);
        if (v151 != 1)
        {
          if (v151 != 2)
          {
            v154 = *(_QWORD *)v153;
            v153 = (float *)((char *)v153 + v16 + 4);
            v156 = *v152;
            v155 = &v152[(unint64_t)v15 / 4];
            v158 = *v155;
            v157 = &v155[(unint64_t)v15 / 4];
            v159 = *v157;
            v160 = &v157[v15 / 0xFFFFFFFFFFFFFFFELL];
            *v160 = (float)((float)(v156 + (float)(*(float *)&v154 * v158)) + (float)(*((float *)&v154 + 1) * v159))
                  * a7;
            v152 = &v160[(unint64_t)v15 / 4];
          }
          v162 = *v152;
          v161 = &v152[(unint64_t)v15 / 4];
          v163 = *v161;
          v164 = &v161[v15 / 0xFFFFFFFFFFFFFFFCLL];
          *v164 = (float)(v162 + (float)(*v153 * v163)) * a7;
          v152 = &v164[(unint64_t)v15 / 4];
        }
        *v152 = *v152 * a7;
      }
    }
  }
  return result;
}

uint64_t sub_22315BA20(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL i;
  float32x4_t *v13;
  float32x4_t *v14;
  float32x4_t *v15;
  uint64_t v16;
  float32x4_t *v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x2_t *v20;
  float32x4_t *v21;
  float32x4_t v22;
  float32x4_t *v23;
  float32x4_t v24;
  float32x4_t *v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t *v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t *v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t *v42;
  float32x4_t v43;
  float32x4_t v44;
  BOOL v45;
  float32x4_t *v46;
  float32x4_t *v47;
  uint64_t v48;
  float32x4_t *v49;
  float *v50;
  float *v51;
  float v52;
  float *v53;
  float v54;
  float32x4_t *v55;
  float32x4_t v56;
  float32x4_t *v57;
  float32x4_t v58;
  float v59;
  float v60;
  float v61;
  float32x4_t *v62;
  float32x4_t v63;
  uint64_t v64;
  BOOL j;
  float32x2_t *v66;
  float32x4_t *v67;
  float32x4_t *v68;
  uint64_t v69;
  float32x4_t *v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x2_t *v73;
  float32x2_t *v74;
  float32x2_t v75;
  float32x2_t *v76;
  float32x2_t v77;
  float32x2_t *v78;
  float32x2_t v79;
  float32x2_t v80;
  float32x2_t *v81;
  float32x2_t v82;
  float32x2_t v83;
  float32x2_t v84;
  float32x2_t v85;
  float32x2_t v86;
  float32x4_t v87;
  float32x2_t v88;
  float32x2_t v89;
  float32x2_t v90;
  float32x2_t v91;
  float32x2_t *v92;
  float32x2_t v93;
  float32x2_t v94;
  float32x4_t *v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x2_t *v98;
  float32x2_t *v99;
  uint64_t v100;
  float32x2_t *v101;
  float *v102;
  float *v103;
  float v104;
  float *v105;
  float v106;
  float32x2_t *v107;
  float32x2_t v108;
  float32x2_t *v109;
  float32x2_t v110;
  float v111;
  float v112;
  float v113;
  float32x2_t *v114;
  float32x2_t v115;
  uint64_t v116;
  BOOL k;
  float *v118;
  float32x4_t *v119;
  float32x4_t *v120;
  uint64_t v121;
  float32x4_t *v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x2_t *v125;
  float *v126;
  float v127;
  float *v128;
  float v129;
  float *v130;
  float v131;
  float v132;
  float *v133;
  float32x2_t v134;
  float32x2_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float v138;
  float32x4_t v139;
  float32x4_t v140;
  float *v141;
  float v142;
  float v143;
  float32x4_t *v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float *v148;
  float *v149;
  uint64_t v150;
  __int32 *v151;
  __int32 *v152;
  __int32 *v153;
  float32x2_t v154;
  float v155;
  __int32 *v156;
  float32x2_t v157;
  float *v158;
  float v159;
  float v160;
  float *v161;
  float v162;

  v7 = 4 * a6;
  v8 = 4 * a4;
  v9 = 0;
  if (result <= 3)
    goto LABEL_21;
  v10 = result - 3;
  do
  {
    v11 = a2;
    for (i = __OFSUB__(a2, 3); v11 > 3; i = __OFSUB__(v11, 3))
    {
      v11 -= 4;
      v13 = (float32x4_t *)(a5 + v11 * v7 + 4 * v9);
      v14 = (float32x4_t *)(a3 + 4 * v11);
      v15 = (float32x4_t *)((char *)v14 + v11 * v8);
      v16 = v11;
      v18 = *v15;
      v17 = (float32x4_t *)((char *)v15 + v8);
      v19 = *v17;
      v20 = (float32x2_t *)&v17->u32[(unint64_t)v8 / 4 + 2];
      v22 = *v13;
      v21 = (float32x4_t *)((char *)v13 + v7);
      v24 = *v21;
      v23 = (float32x4_t *)((char *)v21 + v7);
      v26 = *v23;
      v25 = (float32x4_t *)((char *)v23 + v7);
      v27 = *v25;
      v28 = (float32x4_t *)((char *)v25 + v7 - v11 * v7 + -4 * v7);
      v29 = vmulq_n_f32(v22, v18.f32[0]);
      v30 = vaddq_f32(vmulq_lane_f32(v22, *(float32x2_t *)v18.f32, 1), vmulq_lane_f32(v24, *(float32x2_t *)v19.f32, 1));
      v31 = vaddq_f32(vmlaq_n_f32(vmulq_laneq_f32(v22, v18, 2), v26, COERCE_FLOAT(*v20)), vmulq_laneq_f32(v24, v19, 2));
      v32 = vaddq_f32(vmlaq_lane_f32(vmulq_laneq_f32(v22, v18, 3), v26, *v20, 1), vmlaq_n_f32(vmulq_laneq_f32(v24, v19, 3), v27, v20->f32[(unint64_t)v8 / 4 + 1]));
      if ((v11 & 1) != 0)
      {
        v33 = *v28;
        v28 = (float32x4_t *)((char *)v28 + v7);
        v34 = *v14;
        v14 = (float32x4_t *)((char *)v14 + v8);
        v29 = vmlaq_n_f32(v29, v33, v34.f32[0]);
        v30 = vmlaq_lane_f32(v30, v33, *(float32x2_t *)v34.f32, 1);
        v31 = vmlaq_laneq_f32(v31, v33, v34, 2);
        v32 = vmlaq_laneq_f32(v32, v33, v34, 3);
        v16 = v11 - 1;
      }
      if (v16)
      {
        v35 = 0uLL;
        v36 = 0uLL;
        v37 = 0uLL;
        v38 = 0uLL;
        do
        {
          v40 = *v28;
          v39 = (float32x4_t *)((char *)v28 + v7);
          v41 = *v39;
          v28 = (float32x4_t *)((char *)v39 + v7);
          v43 = *v14;
          v42 = (float32x4_t *)((char *)v14 + v8);
          v44 = *v42;
          v14 = (float32x4_t *)((char *)v42 + v8);
          v29 = vmlaq_n_f32(v29, v40, v43.f32[0]);
          v30 = vmlaq_lane_f32(v30, v40, *(float32x2_t *)v43.f32, 1);
          v31 = vmlaq_laneq_f32(v31, v40, v43, 2);
          v32 = vmlaq_laneq_f32(v32, v40, v43, 3);
          v35 = vmlaq_n_f32(v35, v41, v44.f32[0]);
          v36 = vmlaq_lane_f32(v36, v41, *(float32x2_t *)v44.f32, 1);
          v37 = vmlaq_laneq_f32(v37, v41, v44, 2);
          v38 = vmlaq_laneq_f32(v38, v41, v44, 3);
          v45 = v16 <= 2;
          v16 -= 2;
        }
        while (!v45);
        v29 = vaddq_f32(v29, v35);
        v30 = vaddq_f32(v30, v36);
        v31 = vaddq_f32(v31, v37);
        v32 = vaddq_f32(v32, v38);
      }
      *v28 = vmulq_n_f32(v29, a7);
      v46 = (float32x4_t *)((char *)v28 + v7);
      *v46 = vmulq_n_f32(v30, a7);
      v47 = (float32x4_t *)((char *)v46 + v7);
      *v47 = vmulq_n_f32(v31, a7);
      *(float32x4_t *)((char *)v47 + v7) = vmulq_n_f32(v32, a7);
    }
    v48 = a2 & 3;
    if (!i && v48 != 0)
    {
      v49 = (float32x4_t *)(a5 + 4 * v9);
      v50 = (float *)(a3 + 4 * (v11 - 1));
      if (v48 != 1)
      {
        if (v48 != 2)
        {
          v52 = *v50;
          v51 = &v50[(unint64_t)v8 / 4];
          v54 = *v51;
          v53 = &v51[(unint64_t)v8 / 4];
          v56 = *v49;
          v55 = (float32x4_t *)((char *)v49 + v7);
          v58 = *v55;
          v57 = (float32x4_t *)((char *)v55 + v7);
          v59 = *v53;
          v50 = &v53[v8 / 0xFFFFFFFFFFFFFFFELL - 1];
          *v57 = vmulq_n_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(v56, v52), vmulq_n_f32(v58, v54)), vmulq_n_f32(*v57, v59)), a7);
          v49 = (float32x4_t *)((char *)v57 - 2 * v7);
        }
        v60 = *v50;
        v61 = v50[(unint64_t)v8 / 4];
        v63 = *v49;
        v62 = (float32x4_t *)((char *)v49 + v7);
        --v50;
        *v62 = vmulq_n_f32(vaddq_f32(vmulq_n_f32(v63, v60), vmulq_n_f32(*v62, v61)), a7);
        v49 = (float32x4_t *)((char *)v62 - v7);
      }
      *v49 = vmulq_n_f32(vmulq_n_f32(*v49, *v50), a7);
    }
    v9 += 4;
    v45 = v10 <= 4;
    v10 -= 4;
  }
  while (!v45);
  v45 = v10 <= -3;
  result = v10 + 3;
  if (!v45)
  {
LABEL_21:
    if (result > 1)
    {
      v64 = a2;
      for (j = __OFSUB__(a2, 3); v64 > 3; j = __OFSUB__(v64, 3))
      {
        v64 -= 4;
        v66 = (float32x2_t *)(a5 + v64 * v7 + 4 * v9);
        v67 = (float32x4_t *)(a3 + 4 * v64);
        v68 = (float32x4_t *)((char *)v67 + v64 * v8);
        v69 = v64;
        v71 = *v68;
        v70 = (float32x4_t *)((char *)v68 + v8);
        v72 = *v70;
        v73 = (float32x2_t *)&v70->u32[(unint64_t)v8 / 4 + 2];
        v75 = *v66;
        v74 = (float32x2_t *)((char *)v66 + v7);
        v77 = *v74;
        v76 = (float32x2_t *)((char *)v74 + v7);
        v79 = *v76;
        v78 = (float32x2_t *)((char *)v76 + v7);
        v80 = *v78;
        v81 = (float32x2_t *)((char *)v78 + v7 - v64 * v7 + -4 * v7);
        v82 = vmul_n_f32(v75, v71.f32[0]);
        v83 = vadd_f32(vmul_lane_f32(v75, *(float32x2_t *)v71.f32, 1), vmul_lane_f32(v77, *(float32x2_t *)v72.f32, 1));
        v84 = vadd_f32(vmla_n_f32(vmul_laneq_f32(v75, v71, 2), v79, COERCE_FLOAT(*v73)), vmul_laneq_f32(v77, v72, 2));
        v85 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(v75, v71, 3), v79, *v73, 1), vmla_n_f32(vmul_laneq_f32(v77, v72, 3), v80, v73->f32[(unint64_t)v8 / 4 + 1]));
        if ((v64 & 1) != 0)
        {
          v86 = *v81;
          v81 = (float32x2_t *)((char *)v81 + v7);
          v87 = *v67;
          v67 = (float32x4_t *)((char *)v67 + v8);
          v82 = vmla_n_f32(v82, v86, v87.f32[0]);
          v83 = vmla_lane_f32(v83, v86, *(float32x2_t *)v87.f32, 1);
          v84 = vmla_laneq_f32(v84, v86, v87, 2);
          v85 = vmla_laneq_f32(v85, v86, v87, 3);
          v69 = v64 - 1;
        }
        if (v69)
        {
          v88 = 0;
          v89 = 0;
          v90 = 0;
          v91 = 0;
          do
          {
            v93 = *v81;
            v92 = (float32x2_t *)((char *)v81 + v7);
            v94 = *v92;
            v81 = (float32x2_t *)((char *)v92 + v7);
            v96 = *v67;
            v95 = (float32x4_t *)((char *)v67 + v8);
            v97 = *v95;
            v67 = (float32x4_t *)((char *)v95 + v8);
            v82 = vmla_n_f32(v82, v93, v96.f32[0]);
            v83 = vmla_lane_f32(v83, v93, *(float32x2_t *)v96.f32, 1);
            v84 = vmla_laneq_f32(v84, v93, v96, 2);
            v85 = vmla_laneq_f32(v85, v93, v96, 3);
            v88 = vmla_n_f32(v88, v94, v97.f32[0]);
            v89 = vmla_lane_f32(v89, v94, *(float32x2_t *)v97.f32, 1);
            v90 = vmla_laneq_f32(v90, v94, v97, 2);
            v91 = vmla_laneq_f32(v91, v94, v97, 3);
            v45 = v69 <= 2;
            v69 -= 2;
          }
          while (!v45);
          v82 = vadd_f32(v82, v88);
          v83 = vadd_f32(v83, v89);
          v84 = vadd_f32(v84, v90);
          v85 = vadd_f32(v85, v91);
        }
        *v81 = vmul_n_f32(v82, a7);
        v98 = (float32x2_t *)((char *)v81 + v7);
        *v98 = vmul_n_f32(v83, a7);
        v99 = (float32x2_t *)((char *)v98 + v7);
        *v99 = vmul_n_f32(v84, a7);
        *(float32x2_t *)((char *)v99 + v7) = vmul_n_f32(v85, a7);
      }
      v100 = a2 & 3;
      if (!j && v100 != 0)
      {
        v101 = (float32x2_t *)(a5 + 4 * v9);
        v102 = (float *)(a3 + 4 * (v64 - 1));
        if (v100 != 1)
        {
          if (v100 != 2)
          {
            v104 = *v102;
            v103 = &v102[(unint64_t)v8 / 4];
            v106 = *v103;
            v105 = &v103[(unint64_t)v8 / 4];
            v108 = *v101;
            v107 = (float32x2_t *)((char *)v101 + v7);
            v110 = *v107;
            v109 = (float32x2_t *)((char *)v107 + v7);
            v111 = *v105;
            v102 = &v105[v8 / 0xFFFFFFFFFFFFFFFELL - 1];
            *v109 = vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(v108, v104), vmul_n_f32(v110, v106)), vmul_n_f32(*v109, v111)), a7);
            v101 = &v109[v7 / 0xFFFFFFFFFFFFFFFCLL];
          }
          v112 = *v102;
          v113 = v102[(unint64_t)v8 / 4];
          --v102;
          v115 = *v101;
          v114 = (float32x2_t *)((char *)v101 + v7);
          *v114 = vmul_n_f32(vadd_f32(vmul_n_f32(v115, v112), vmul_n_f32(*v114, v113)), a7);
          v101 = (float32x2_t *)((char *)v114 - v7);
        }
        *v101 = vmul_n_f32(vmul_n_f32(*v101, *v102), a7);
      }
      v9 += 2;
      result -= 2;
    }
    if (result)
    {
      v116 = a2;
      for (k = __OFSUB__(a2, 3); v116 > 3; k = __OFSUB__(v116, 3))
      {
        v116 -= 4;
        v118 = (float *)(a5 + v116 * v7 + 4 * v9);
        v119 = (float32x4_t *)(a3 + 4 * v116);
        v120 = (float32x4_t *)((char *)v119 + v116 * v8);
        v121 = v116;
        v123 = *v120;
        v122 = (float32x4_t *)((char *)v120 + v8);
        v124 = *v122;
        v125 = (float32x2_t *)&v122->u32[(unint64_t)v8 / 4 + 2];
        v127 = *v118;
        v126 = &v118[(unint64_t)v7 / 4];
        v129 = *v126;
        v128 = &v126[(unint64_t)v7 / 4];
        v131 = *v128;
        v130 = &v128[(unint64_t)v7 / 4];
        v132 = *v130;
        v133 = (float *)((char *)&v130[(unint64_t)v7 / 4] - v116 * v7 + -4 * v7);
        v124.i32[0] = 0;
        v134.i32[0] = 0;
        v134.f32[1] = v125->f32[(unint64_t)v8 / 4 + 1] * v132;
        v135 = vadd_f32(v134, vmul_n_f32(*v125, v131));
        v136.i64[0] = 0;
        *(float32x2_t *)&v136.u32[2] = v135;
        v137 = vaddq_f32(vmlaq_n_f32(vmulq_n_f32(v123, v127), v124, v129), v136);
        if ((v116 & 1) != 0)
        {
          v138 = *v133;
          v133 = (float *)((char *)v133 + v7);
          v139 = *v119;
          v119 = (float32x4_t *)((char *)v119 + v8);
          v137 = vmlaq_n_f32(v137, v139, v138);
          v121 = v116 - 1;
        }
        if (v121)
        {
          v140 = 0uLL;
          do
          {
            v142 = *v133;
            v141 = &v133[(unint64_t)v7 / 4];
            v143 = *v141;
            v133 = &v141[(unint64_t)v7 / 4];
            v145 = *v119;
            v144 = (float32x4_t *)((char *)v119 + v8);
            v146 = *v144;
            v119 = (float32x4_t *)((char *)v144 + v8);
            v137 = vmlaq_n_f32(v137, v145, v142);
            v140 = vmlaq_n_f32(v140, v146, v143);
            v45 = v121 <= 2;
            v121 -= 2;
          }
          while (!v45);
          v137 = vaddq_f32(v137, v140);
        }
        v147 = vmulq_n_f32(v137, a7);
        *v133 = v147.f32[0];
        v148 = &v133[(unint64_t)v7 / 4];
        *v148 = v147.f32[1];
        v149 = &v148[(unint64_t)v7 / 4];
        *v149 = v147.f32[2];
        v149[(unint64_t)v7 / 4] = v147.f32[3];
      }
      v150 = a2 & 3;
      if (!k && v150 != 0)
      {
        v151 = (__int32 *)(a5 + 4 * v9);
        v152 = (__int32 *)(a3 + 4 * (v116 - 1));
        if (v150 != 1)
        {
          if (v150 != 2)
          {
            v154.i32[0] = *v152;
            v153 = &v152[(unint64_t)v8 / 4];
            v154.i32[1] = *v153;
            v155 = *(float *)&v153[(unint64_t)v8 / 4];
            v152 = &v153[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
            v157.i32[0] = *v151;
            v156 = &v151[(unint64_t)v7 / 4];
            v157.i32[1] = *v156;
            v158 = (float *)&v156[(unint64_t)v7 / 4];
            *v158 = (float)(vaddv_f32(vmul_f32(v157, v154)) + (float)(v155 * *v158)) * a7;
            v151 = (__int32 *)&v158[v7 / 0xFFFFFFFFFFFFFFFELL];
          }
          v159 = *(float *)v152;
          v160 = *(float *)&v152[(unint64_t)v8 / 4];
          --v152;
          v162 = *(float *)v151;
          v161 = (float *)&v151[(unint64_t)v7 / 4];
          *v161 = (float)((float)(v162 * v159) + (float)(*v161 * v160)) * a7;
          v151 = (__int32 *)&v161[v7 / 0xFFFFFFFFFFFFFFFCLL];
        }
        *(float *)v151 = (float)(*(float *)v151 * *(float *)v152) * a7;
      }
    }
  }
  return result;
}

uint64_t sub_22315BF80(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7, double a8, double a9, double a10, float32x4_t a11, float32x4_t a12, float32x4_t a13, float32x4_t a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL i;
  float32x4_t *v20;
  float32x4_t *v21;
  float32x4_t *v22;
  uint64_t v23;
  float32x4_t v24;
  float32x2_t *v25;
  float32x4_t *v26;
  float32x4_t v27;
  float32x4_t *v28;
  float32x4_t *v29;
  float32x4_t *v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t *v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t *v42;
  BOOL v43;
  float32x4_t *v44;
  float32x4_t *v45;
  uint64_t v46;
  float32x4_t *v47;
  float *v48;
  float v49;
  float v50;
  float32x4_t *v51;
  float32x4_t v52;
  float32x4_t *v53;
  float32x4_t v54;
  float32x4_t *v55;
  float32x4_t v56;
  uint64_t v57;
  BOOL j;
  float32x2_t *v59;
  float32x4_t *v60;
  float32x4_t *v61;
  uint64_t v62;
  float32x4_t v63;
  float32x2_t *v64;
  unint64_t *v65;
  float32x2_t v66;
  unint64_t *v67;
  unint64_t *v68;
  float32x2_t *v69;
  float32x2_t v70;
  float32x2_t v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x2_t v74;
  float32x2_t v75;
  float32x2_t v76;
  float32x2_t v77;
  float32x2_t *v78;
  float32x2_t v79;
  float32x2_t v80;
  float32x4_t *v81;
  float32x2_t *v82;
  float32x2_t *v83;
  uint64_t v84;
  float32x2_t *v85;
  float *v86;
  float v87;
  float v88;
  float32x2_t *v89;
  float32x2_t v90;
  float32x2_t *v91;
  float32x2_t v92;
  float32x2_t *v93;
  float32x2_t v94;
  uint64_t v95;
  BOOL k;
  unsigned __int32 *v97;
  float32x4_t *v98;
  float32x4_t *v99;
  uint64_t v100;
  float32x4_t v101;
  float32x2_t *v102;
  unsigned __int32 *v103;
  unsigned __int32 *v104;
  unsigned __int32 *v105;
  float *v106;
  float32x4_t v107;
  float32x2_t v108;
  float32x2_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float v112;
  float32x4_t v113;
  float *v114;
  float v115;
  float v116;
  float32x4_t *v117;
  float32x4_t v118;
  float *v119;
  float *v120;
  uint64_t v121;
  __int32 *v122;
  __int32 *v123;
  __int32 *v124;
  float32x2_t v125;
  __int32 *v126;
  float32x2_t v127;
  float *v128;
  float *v129;
  float v130;

  v14 = 4 * a6;
  v15 = 4 * a4;
  v16 = 0;
  if (result <= 3)
    goto LABEL_21;
  v17 = result - 3;
  do
  {
    v18 = a2;
    for (i = __OFSUB__(a2, 3); v18 > 3; i = __OFSUB__(v18, 3))
    {
      v18 -= 4;
      v20 = (float32x4_t *)(a5 + v18 * v14 + 4 * v16);
      v21 = (float32x4_t *)(a3 + 4 * v18);
      v22 = (float32x4_t *)((char *)v21 + v18 * v15);
      v23 = v18;
      v24 = *v22;
      v25 = (float32x2_t *)&v22->u32[(unint64_t)v15 / 4 + 2];
      v27 = *v20;
      v26 = (float32x4_t *)((char *)v20 + v14);
      a12 = *v26;
      v28 = (float32x4_t *)((char *)v26 + v14);
      a13 = *v28;
      v29 = (float32x4_t *)((char *)v28 + v14);
      a14 = *v29;
      v30 = (float32x4_t *)((char *)v29 + v14 - v18 * v14 + -4 * v14);
      v31 = vmlaq_lane_f32(a12, v27, *(float32x2_t *)v24.f32, 1);
      v32 = vaddq_f32(vmlaq_laneq_f32(a13, v27, v24, 2), vmulq_n_f32(a12, COERCE_FLOAT(*v25)));
      v33 = vaddq_f32(vmlaq_n_f32(vmlaq_laneq_f32(a14, v27, v24, 3), a13, v25->f32[(unint64_t)v15 / 4 + 1]), vmulq_lane_f32(a12, *v25, 1));
      if ((v18 & 1) != 0)
      {
        v34 = *v30;
        v30 = (float32x4_t *)((char *)v30 + v14);
        a11 = *v21;
        v21 = (float32x4_t *)((char *)v21 + v15);
        v27 = vmlaq_n_f32(v27, v34, a11.f32[0]);
        v31 = vmlaq_lane_f32(v31, v34, *(float32x2_t *)a11.f32, 1);
        v32 = vmlaq_laneq_f32(v32, v34, a11, 2);
        v33 = vmlaq_laneq_f32(v33, v34, a11, 3);
        v23 = v18 - 1;
      }
      if (v23)
      {
        v35 = 0uLL;
        v36 = 0uLL;
        v37 = 0uLL;
        v38 = 0uLL;
        do
        {
          v40 = *v30;
          v39 = (float32x4_t *)((char *)v30 + v14);
          v41 = *v39;
          v30 = (float32x4_t *)((char *)v39 + v14);
          a11 = *v21;
          v42 = (float32x4_t *)((char *)v21 + v15);
          a12 = *v42;
          v21 = (float32x4_t *)((char *)v42 + v15);
          v27 = vmlaq_n_f32(v27, v40, a11.f32[0]);
          v31 = vmlaq_lane_f32(v31, v40, *(float32x2_t *)a11.f32, 1);
          v32 = vmlaq_laneq_f32(v32, v40, a11, 2);
          v33 = vmlaq_laneq_f32(v33, v40, a11, 3);
          v35 = vmlaq_n_f32(v35, v41, a12.f32[0]);
          v36 = vmlaq_lane_f32(v36, v41, *(float32x2_t *)a12.f32, 1);
          v37 = vmlaq_laneq_f32(v37, v41, a12, 2);
          v38 = vmlaq_laneq_f32(v38, v41, a12, 3);
          v43 = v23 <= 2;
          v23 -= 2;
        }
        while (!v43);
        v27 = vaddq_f32(v27, v35);
        v31 = vaddq_f32(v31, v36);
        v32 = vaddq_f32(v32, v37);
        v33 = vaddq_f32(v33, v38);
      }
      *v30 = vmulq_n_f32(v27, a7);
      v44 = (float32x4_t *)((char *)v30 + v14);
      *v44 = vmulq_n_f32(v31, a7);
      v45 = (float32x4_t *)((char *)v44 + v14);
      *v45 = vmulq_n_f32(v32, a7);
      *(float32x4_t *)((char *)v45 + v14) = vmulq_n_f32(v33, a7);
    }
    v46 = a2 & 3;
    if (!i && v46 != 0)
    {
      v47 = (float32x4_t *)(a5 + 4 * v16);
      v48 = (float *)(a3 + 4 * (v18 - 1));
      if (v46 != 1)
      {
        if (v46 != 2)
        {
          v49 = *v48;
          v50 = v48[(unint64_t)v15 / 4];
          v52 = *v47;
          v51 = (float32x4_t *)((char *)v47 + v14);
          v54 = *v51;
          v53 = (float32x4_t *)((char *)v51 + v14);
          --v48;
          a12 = vmlaq_n_f32(*v53, v52, v49);
          *v53 = vmulq_n_f32(vaddq_f32(a12, vmulq_n_f32(v54, v50)), a7);
          v47 = (float32x4_t *)((char *)v53 - 2 * v14);
        }
        v56 = *v47;
        v55 = (float32x4_t *)((char *)v47 + v14);
        a11 = vmlaq_n_f32(*v55, v56, *v48);
        *v55 = vmulq_n_f32(a11, a7);
        v47 = (float32x4_t *)((char *)v55 - v14);
      }
      *v47 = vmulq_n_f32(*v47, a7);
    }
    v16 += 4;
    v43 = v17 <= 4;
    v17 -= 4;
  }
  while (!v43);
  v43 = v17 <= -3;
  result = v17 + 3;
  if (!v43)
  {
LABEL_21:
    if (result > 1)
    {
      v57 = a2;
      for (j = __OFSUB__(a2, 3); v57 > 3; j = __OFSUB__(v57, 3))
      {
        v57 -= 4;
        v59 = (float32x2_t *)(a5 + v57 * v14 + 4 * v16);
        v60 = (float32x4_t *)(a3 + 4 * v57);
        v61 = (float32x4_t *)((char *)v60 + v57 * v15);
        v62 = v57;
        v63 = *v61;
        v64 = (float32x2_t *)&v61->u32[(unint64_t)v15 / 4 + 2];
        v66 = *v59;
        v65 = (unint64_t *)((char *)v59 + v14);
        a12.i64[0] = *v65;
        v67 = (unint64_t *)((char *)v65 + v14);
        a13.i64[0] = *v67;
        v68 = (unint64_t *)((char *)v67 + v14);
        a14.i64[0] = *v68;
        v69 = (float32x2_t *)((char *)v68 + v14 - v57 * v14 + -4 * v14);
        v70 = vmla_lane_f32(*(float32x2_t *)a12.f32, v66, *(float32x2_t *)v63.f32, 1);
        v71 = vadd_f32(vmla_laneq_f32(*(float32x2_t *)a13.f32, v66, v63, 2), vmul_n_f32(*(float32x2_t *)a12.f32, COERCE_FLOAT(*v64)));
        v72 = vadd_f32(vmla_n_f32(vmla_laneq_f32(*(float32x2_t *)a14.f32, v66, v63, 3), *(float32x2_t *)a13.f32, v64->f32[(unint64_t)v15 / 4 + 1]), vmul_lane_f32(*(float32x2_t *)a12.f32, *v64, 1));
        if ((v57 & 1) != 0)
        {
          v73 = *v69;
          v69 = (float32x2_t *)((char *)v69 + v14);
          a11 = *v60;
          v60 = (float32x4_t *)((char *)v60 + v15);
          v66 = vmla_n_f32(v66, v73, a11.f32[0]);
          v70 = vmla_lane_f32(v70, v73, *(float32x2_t *)a11.f32, 1);
          v71 = vmla_laneq_f32(v71, v73, a11, 2);
          v72 = vmla_laneq_f32(v72, v73, a11, 3);
          v62 = v57 - 1;
        }
        if (v62)
        {
          v74 = 0;
          v75 = 0;
          v76 = 0;
          v77 = 0;
          do
          {
            v79 = *v69;
            v78 = (float32x2_t *)((char *)v69 + v14);
            v80 = *v78;
            v69 = (float32x2_t *)((char *)v78 + v14);
            a11 = *v60;
            v81 = (float32x4_t *)((char *)v60 + v15);
            a12 = *v81;
            v60 = (float32x4_t *)((char *)v81 + v15);
            v66 = vmla_n_f32(v66, v79, a11.f32[0]);
            v70 = vmla_lane_f32(v70, v79, *(float32x2_t *)a11.f32, 1);
            v71 = vmla_laneq_f32(v71, v79, a11, 2);
            v72 = vmla_laneq_f32(v72, v79, a11, 3);
            v74 = vmla_n_f32(v74, v80, a12.f32[0]);
            v75 = vmla_lane_f32(v75, v80, *(float32x2_t *)a12.f32, 1);
            v76 = vmla_laneq_f32(v76, v80, a12, 2);
            v77 = vmla_laneq_f32(v77, v80, a12, 3);
            v43 = v62 <= 2;
            v62 -= 2;
          }
          while (!v43);
          v66 = vadd_f32(v66, v74);
          v70 = vadd_f32(v70, v75);
          v71 = vadd_f32(v71, v76);
          v72 = vadd_f32(v72, v77);
        }
        *v69 = vmul_n_f32(v66, a7);
        v82 = (float32x2_t *)((char *)v69 + v14);
        *v82 = vmul_n_f32(v70, a7);
        v83 = (float32x2_t *)((char *)v82 + v14);
        *v83 = vmul_n_f32(v71, a7);
        *(float32x2_t *)((char *)v83 + v14) = vmul_n_f32(v72, a7);
      }
      v84 = a2 & 3;
      if (!j && v84 != 0)
      {
        v85 = (float32x2_t *)(a5 + 4 * v16);
        v86 = (float *)(a3 + 4 * (v57 - 1));
        if (v84 != 1)
        {
          if (v84 != 2)
          {
            v87 = *v86;
            v88 = v86[(unint64_t)v15 / 4];
            v90 = *v85;
            v89 = (float32x2_t *)((char *)v85 + v14);
            v92 = *v89;
            v91 = (float32x2_t *)((char *)v89 + v14);
            --v86;
            *(float32x2_t *)a12.f32 = vmla_n_f32(*v91, v90, v87);
            *v91 = vmul_n_f32(vadd_f32(*(float32x2_t *)a12.f32, vmul_n_f32(v92, v88)), a7);
            v85 = &v91[v14 / 0xFFFFFFFFFFFFFFFCLL];
          }
          v94 = *v85;
          v93 = (float32x2_t *)((char *)v85 + v14);
          *(float32x2_t *)a11.f32 = vmla_n_f32(*v93, v94, *v86);
          *v93 = vmul_n_f32(*(float32x2_t *)a11.f32, a7);
          v85 = (float32x2_t *)((char *)v93 - v14);
        }
        *v85 = vmul_n_f32(*v85, a7);
      }
      v16 += 2;
      result -= 2;
    }
    if (result)
    {
      v95 = a2;
      for (k = __OFSUB__(a2, 3); v95 > 3; k = __OFSUB__(v95, 3))
      {
        v95 -= 4;
        v97 = (unsigned __int32 *)(a5 + v95 * v14 + 4 * v16);
        v98 = (float32x4_t *)(a3 + 4 * v95);
        v99 = (float32x4_t *)((char *)v98 + v95 * v15);
        v100 = v95;
        v101 = *v99;
        v102 = (float32x2_t *)&v99->u32[(unint64_t)v15 / 4 + 2];
        a11.i32[0] = *v97;
        v103 = &v97[(unint64_t)v14 / 4];
        a12.i32[0] = *v103;
        v104 = &v103[(unint64_t)v14 / 4];
        a13.i32[0] = *v104;
        v105 = &v104[(unint64_t)v14 / 4];
        a14.i32[0] = *v105;
        v106 = (float *)((char *)&v105[(unint64_t)v14 / 4] - v95 * v14 + -4 * v14);
        v101.i32[0] = 0;
        *(int32x2_t *)v107.f32 = vtrn1_s32(*(int32x2_t *)a11.f32, *(int32x2_t *)a12.f32);
        *(int32x2_t *)&v107.u32[2] = vtrn1_s32(*(int32x2_t *)a13.f32, *(int32x2_t *)a14.f32);
        v108.i32[0] = 0;
        v108.f32[1] = v102->f32[(unint64_t)v15 / 4 + 1] * a13.f32[0];
        v109 = vadd_f32(v108, vmul_n_f32(*v102, a12.f32[0]));
        v110.i64[0] = 0;
        *(float32x2_t *)&v110.u32[2] = v109;
        v111 = vaddq_f32(vaddq_f32(vmulq_n_f32(v101, a11.f32[0]), v107), v110);
        if ((v95 & 1) != 0)
        {
          v112 = *v106;
          v106 = (float *)((char *)v106 + v14);
          a11 = *v98;
          v98 = (float32x4_t *)((char *)v98 + v15);
          v111 = vmlaq_n_f32(v111, a11, v112);
          v100 = v95 - 1;
        }
        if (v100)
        {
          v113 = 0uLL;
          do
          {
            v115 = *v106;
            v114 = &v106[(unint64_t)v14 / 4];
            v116 = *v114;
            v106 = &v114[(unint64_t)v14 / 4];
            a11 = *v98;
            v117 = (float32x4_t *)((char *)v98 + v15);
            a12 = *v117;
            v98 = (float32x4_t *)((char *)v117 + v15);
            v111 = vmlaq_n_f32(v111, a11, v115);
            v113 = vmlaq_n_f32(v113, a12, v116);
            v43 = v100 <= 2;
            v100 -= 2;
          }
          while (!v43);
          v111 = vaddq_f32(v111, v113);
        }
        v118 = vmulq_n_f32(v111, a7);
        *v106 = v118.f32[0];
        v119 = &v106[(unint64_t)v14 / 4];
        *v119 = v118.f32[1];
        v120 = &v119[(unint64_t)v14 / 4];
        *v120 = v118.f32[2];
        v120[(unint64_t)v14 / 4] = v118.f32[3];
      }
      v121 = a2 & 3;
      if (!k && v121 != 0)
      {
        v122 = (__int32 *)(a5 + 4 * v16);
        v123 = (__int32 *)(a3 + 4 * (v95 - 1));
        if (v121 != 1)
        {
          if (v121 != 2)
          {
            v125.i32[0] = *v123;
            v124 = &v123[(unint64_t)v15 / 4];
            v125.i32[1] = *v124;
            v123 = &v124[v15 / 0xFFFFFFFFFFFFFFFCLL - 1];
            v127.i32[0] = *v122;
            v126 = &v122[(unint64_t)v14 / 4];
            v127.i32[1] = *v126;
            v128 = (float *)&v126[(unint64_t)v14 / 4];
            *v128 = (float)(vaddv_f32(vmul_f32(v127, v125)) + *v128) * a7;
            v122 = (__int32 *)&v128[v14 / 0xFFFFFFFFFFFFFFFELL];
          }
          v130 = *(float *)v122;
          v129 = (float *)&v122[(unint64_t)v14 / 4];
          *v129 = (float)((float)(v130 * *(float *)v123) + *v129) * a7;
          v122 = (__int32 *)&v129[v14 / 0xFFFFFFFFFFFFFFFCLL];
        }
        *(float *)v122 = *(float *)v122 * a7;
      }
    }
  }
  return result;
}

double *sub_22315C464(double *result, float64x2_t *a2, float64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v7;
  uint64_t v8;
  float64x2_t *v9;
  float64x2_t v10;
  float64_t *v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  double v17;
  float64_t *v18;
  float64_t *v19;

  if (a5 >= 1)
  {
    v7 = a4;
    do
    {
      v8 = a6;
      v9 = a2;
      v10.f64[0] = *a3;
      v10.f64[1] = a3[a4];
      v11 = &a3[v7 + v7];
      v12.f64[0] = *v11;
      v12.f64[1] = v11[a4];
      v13 = vmulq_n_f64(v10, a7);
      v14 = vmulq_n_f64(v12, a7);
      do
      {
        v15 = *v9;
        v16 = v9[1];
        v9 += 2;
        v17 = *result++;
        v13 = vmlaq_n_f64(v13, v15, v17);
        v14 = vmlaq_n_f64(v14, v16, v17);
        --v8;
      }
      while (v8);
      v18 = &a3[v7];
      *a3++ = v13.f64[0];
      *v18 = v13.f64[1];
      v19 = &v18[v7];
      *v19 = v14.f64[0];
      v19[a4] = v14.f64[1];
      result += a6 & 1;
      --a5;
    }
    while (a5);
  }
  return result;
}

double *sub_22315C4D4(double *result, float64x2_t *a2, float64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  float64x2_t *v7;
  uint64_t v8;
  float64_t *v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  double v14;
  float64_t *v15;
  float64_t *v16;

  if (a5 >= 1)
  {
    v6 = a4;
    do
    {
      v7 = a2;
      v8 = a6;
      v10.f64[0] = *a3;
      v10.f64[1] = a3[a4];
      v9 = &a3[v6 + v6];
      v11.f64[0] = *v9;
      v11.f64[1] = v9[a4];
      do
      {
        v12 = *v7;
        v13 = v7[1];
        v7 += 2;
        v14 = *result++;
        v10 = vmlaq_n_f64(v10, v12, v14);
        v11 = vmlaq_n_f64(v11, v13, v14);
        --v8;
      }
      while (v8);
      v15 = &a3[v6];
      *a3++ = v10.f64[0];
      *v15 = v10.f64[1];
      v16 = &v15[v6];
      *v16 = v11.f64[0];
      v16[a4] = v11.f64[1];
      result += a6 & 1;
      --a5;
    }
    while (a5);
  }
  return result;
}

double *sub_22315C540(float64x2_t *a1, float64x2_t *a2, float64x2_t *_X2, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  double *result;
  float64x2_t *v10;
  uint64_t v11;
  float64x2_t *v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  uint64_t v17;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t *v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t *v58;
  float64x2_t *v59;
  float64x2_t *v60;

  v7 = a5 & 7;
  v8 = a5 - v7;
  if (v8)
  {
    v10 = _X2;
    v11 = 8 * a4;
    v13 = *a1;
    v14 = a1[1];
    v12 = a1 + 2;
    v15 = *v12;
    v16 = v12[1];
    result = v12[2].f64;
    do
    {
      v17 = a6;
      __asm { PRFM            #1, [X2,#0x40] }
      v24 = *_X2;
      v25 = _X2[1];
      v26 = _X2[2];
      v27 = _X2[3];
      _X2 = (float64x2_t *)((char *)_X2 + v11);
      __asm { PRFM            #1, [X2,#0x40] }
      v30 = *_X2;
      v31 = _X2[1];
      v32 = _X2[2];
      v33 = _X2[3];
      _X2 = (float64x2_t *)((char *)_X2 + v11);
      __asm { PRFM            #1, [X2,#0x40] }
      v36 = *_X2;
      v37 = _X2[1];
      v38 = _X2[2];
      v39 = _X2[3];
      _X2 = (float64x2_t *)((char *)_X2 + v11);
      __asm { PRFM            #1, [X2,#0x40] }
      v41 = *_X2;
      v42 = _X2[1];
      v43 = _X2[2];
      v44 = _X2[3];
      v46 = *a2;
      v47 = a2[1];
      _X6 = a2 + 2;
      __asm
      {
        PRFM            #1, [X6]
        PRFM            #1, [X6,#0x20]
        PRFM            #1, [X6,#0x40]
      }
      do
      {
        v51 = v13;
        v52 = v14;
        v24 = vmlaq_n_f64(v24, v13, v46.f64[0]);
        v30 = vmlaq_laneq_f64(v30, v13, v46, 1);
        v13 = *(float64x2_t *)result;
        v14 = *(float64x2_t *)(result + 2);
        v53 = (float64x2_t *)(result + 4);
        v36 = vmlaq_n_f64(v36, v51, v47.f64[0]);
        v41 = vmlaq_laneq_f64(v41, v51, v47, 1);
        v54 = *_X6;
        v55 = _X6[1];
        _X6 += 2;
        v56 = v15;
        v25 = vmlaq_n_f64(v25, v52, v46.f64[0]);
        v31 = vmlaq_laneq_f64(v31, v52, v46, 1);
        v57 = v16;
        v37 = vmlaq_n_f64(v37, v52, v47.f64[0]);
        v42 = vmlaq_laneq_f64(v42, v52, v47, 1);
        v15 = *v53;
        v16 = v53[1];
        result = v53[2].f64;
        v26 = vmlaq_n_f64(v26, v56, v46.f64[0]);
        v32 = vmlaq_laneq_f64(v32, v56, v46, 1);
        v38 = vmlaq_n_f64(v38, v56, v47.f64[0]);
        v43 = vmlaq_laneq_f64(v43, v56, v47, 1);
        v27 = vmlaq_n_f64(v27, v57, v46.f64[0]);
        v33 = vmlaq_laneq_f64(v33, v57, v46, 1);
        v46 = v54;
        v39 = vmlaq_n_f64(v39, v57, v47.f64[0]);
        v44 = vmlaq_laneq_f64(v44, v57, v47, 1);
        v47 = v55;
        --v17;
      }
      while (v17);
      v58 = (float64x2_t *)((char *)v10 + v11);
      *v10 = v24;
      v10[1] = v25;
      v10[2] = v26;
      v10[3] = v27;
      v10 += 4;
      *v58 = v30;
      v58[1] = v31;
      v58[2] = v32;
      v58[3] = v33;
      v59 = (float64x2_t *)((char *)v58 + v11);
      *v59 = v36;
      v59[1] = v37;
      v59[2] = v38;
      v59[3] = v39;
      v60 = (float64x2_t *)((char *)v59 + v11);
      *v60 = v41;
      v60[1] = v42;
      v60[2] = v43;
      v60[3] = v44;
      _X2 = v10;
      v8 -= 8;
    }
    while (v8);
  }
  else
  {
    result = a1[4].f64;
  }
  if (v7)
    return sub_22315C4D4(result - 8, a2, _X2->f64, a4, v7, a6);
  return result;
}

void sub_22315C66C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t (**a12)(), uint64_t (**a13)(), uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,int a24,__int16 a25,__int16 a26,char a27)
{
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  float v39;
  float v40;
  uint64_t (**v42)();
  uint64_t (**v43)();
  uint64_t (**v44)();
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  __int16 *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BOOL4 v65;
  float32x4_t *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)();
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t vars8;
  uint64_t (*v84)();
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _OWORD *(*v96)(char *, char *, float32x4_t *, uint64_t, uint64_t, uint64_t);
  _OWORD *(*v97)(char *, char *, float32x4_t *, uint64_t, uint64_t, uint64_t, float);
  char *v98;

  v33 = MEMORY[0x24BDAC7A8]();
  v79 = v34;
  v73 = v35;
  v36 = v31;
  v37 = v29;
  v39 = v38;
  v40 = v33;
  v43 = a12;
  v42 = a13;
  STACK[0x10118] = *MEMORY[0x24BDAC8D0];
  if (!a12)
    v43 = off_24EC1EEC0;
  if (!a13)
    v42 = off_24EC1EF00;
  v91 = (uint64_t)v42;
  v44 = v43 + 1;
  if (v27 == 111)
    v45 = 1;
  else
    v45 = v32;
  v85 = v45;
  v86 = v32;
  if (v27 == 111)
    v46 = v32;
  else
    v46 = 1;
  v72 = v46;
  if (v27 == 111)
    v44 = v43;
  v84 = *v44;
  if (v28 == 111)
    v47 = 1;
  else
    v47 = a9;
  v77 = v47;
  v78 = a9;
  v48 = 3;
  if (v28 == 111)
    v48 = 2;
  v76 = v43[v48];
  if (v31 <= 512)
    v49 = 64;
  else
    v49 = 384;
  v50 = 256;
  if (v29 < 512)
    v50 = 64;
  v87 = v50;
  a26 = 0;
  v51 = 8;
  if (v29 < 512)
    v51 = 6;
  v52 = ((((unint64_t)(v49 << v51) >> 6) & 0x1FFFF) << 8) | 0x40;
  v89 = v30;
  v53 = ((unint64_t)(v30 * v49) >> 6 << 8) | 0x20;
  if ((unint64_t)(v52 + v53) > 0x10000)
  {
    v55 = v49;
    v56 = (char *)malloc_type_malloc(v52 + v53, 0xC9775249uLL);
    v49 = v55;
    v90 = v56;
    v98 = &v56[v53];
    LOBYTE(a26) = 1;
    v54 = (__int16 *)((char *)&a26 + 1);
  }
  else
  {
    v98 = &a27;
    v90 = &a27 + v52;
    HIBYTE(a26) = 0;
    v54 = &a26;
  }
  *(_BYTE *)v54 = 0;
  if (v36 >= 1)
  {
    v82 = 0;
    v57 = 0;
    v96 = *(_OWORD *(**)(char *, char *, float32x4_t *, uint64_t, uint64_t, uint64_t))v91;
    v97 = *(_OWORD *(**)(char *, char *, float32x4_t *, uint64_t, uint64_t, uint64_t, float))(v91 + 24);
    if (v89 <= 0)
      v58 = -(-v89 & 3);
    else
      v58 = v89 & 3;
    v93 = v58;
    v59 = v49;
    v74 = v49;
    v75 = v36;
    vars8 = v37;
    do
    {
      v81 = v59;
      if (v36 >= v59)
        v60 = v59;
      else
        v60 = v36;
      v80 = v57 + v49;
      if (v57 + v49 <= v36)
        v61 = v49;
      else
        v61 = v36 - v57;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, float))v76)(v61, v89, v79 + 4 * v57 * v77, v78, v90, v40);
      if (v37 >= 1)
      {
        v62 = 0;
        v63 = 16 * (v60 + v82);
        v88 = v73 + 4 * v57 * v72;
        v65 = v39 != 1.0 && v57 == 0 && v39 != 0.0;
        v66 = (float32x4_t *)v85;
        do
        {
          v94 = v62 + v87;
          if (v62 + v87 <= v37)
            v67 = v87;
          else
            v67 = v37 - v62;
          if ((v67 & 7) != 0)
          {
            v96 = *(_OWORD *(**)(char *, char *, float32x4_t *, uint64_t, uint64_t, uint64_t))(v91 + 8);
            v97 = *(_OWORD *(**)(char *, char *, float32x4_t *, uint64_t, uint64_t, uint64_t, float))(v91 + 32);
          }
          v92 = v62;
          ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *))v84)(v67, v61, v88 + 4 * v62 * v85, v86, v98);
          v95 = (uint64_t)v66;
          v68 = 0;
          if (v89 >= 4)
          {
            v69 = v90;
            do
            {
              if (v65)
                v97(v98, v69, v66, v86, v67, v61, v39);
              else
                v96(v98, v69, v66, v86, v67, v61);
              v68 += 4;
              v69 += v63;
              v66 += v86;
            }
            while (v68 < v89 - 3);
          }
          if (v93)
          {
            v70 = v85 + 4 * v92 + 4 * v68 * v86;
            v71 = &v90[4 * v68 * v61];
            if (v65)
              (*(void (**)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(v91 + 40))(v98, v71, v70, v86, v67, v93, v61, v39);
            else
              (*(void (**)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v91 + 16))(v98, v71, v70, v86, v67, v93, v61);
          }
          v37 = vars8;
          v66 = (float32x4_t *)(v95 + 4 * v87);
          v62 = v94;
        }
        while (v94 < vars8);
      }
      v49 = v74;
      v36 = v75;
      v59 = v81 + v74;
      v82 -= v74;
      v57 = v80;
      v97 = (_OWORD *(*)(char *, char *, float32x4_t *, uint64_t, uint64_t, uint64_t, float))sub_223159E50;
      v96 = (_OWORD *(*)(char *, char *, float32x4_t *, uint64_t, uint64_t, uint64_t))sub_2231587E0;
    }
    while (v80 < v75);
  }
  if (HIBYTE(a26))
    free(v98);
  if ((_BYTE)a26)
    free(v90);
}

uint64_t sub_22315CAF0(uint64_t result, uint64_t a2, float *a3, uint64_t a4, _DWORD *a5, uint64_t a6, float32x4_t a7, int8x16_t a8, double a9, double a10, double a11, float32x2_t a12, double a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  float *v18;
  float32x2_t v19;
  __int32 *v20;
  BOOL v21;
  float32x2_t *v22;
  uint64_t v23;
  uint64_t v24;
  float *v25;
  float32x2_t *v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t *v29;
  uint64_t v30;
  float32x2_t *v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x2_t v34;
  char *v35;
  float32x2_t v36;
  char *v37;
  char *v38;
  float32x2_t *v39;
  uint64_t v40;
  uint64_t v41;
  float32x2_t *v42;
  float32x2_t *v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t *v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x2_t *v51;
  float32x2_t *v52;
  float32x4_t *v53;
  uint64_t v54;
  float32x4_t *v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x4_t v60;
  float32x4_t *v61;
  float32x4_t v62;
  float32x2_t *v63;
  float32x4_t v64;
  float32x2_t v65;
  float32x2_t v66;
  __n128 *v67;
  float32x4_t v68;
  __n128 *v69;
  __n128 *v70;
  float32x2_t *v71;
  uint64_t i;
  uint64_t v73;
  float32x4_t *v74;
  float32x4_t *v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t *v82;
  float32x4_t v83;
  float32x4_t *v84;
  float32x4_t v85;
  float32x4_t *v86;
  float32x4_t v87;
  float32x4_t v88;
  __n128 *v89;
  float32x4_t *v90;
  float32x4_t *v91;
  float32x4_t *v92;

  a7.i64[1] = a8.i64[0];
  v13 = 0;
  v14 = 4 * a4;
  v15 = 4 * a6;
  if ((result & 1) == 0)
  {
LABEL_13:
    if ((result & 2) != 0)
    {
      v29 = (float32x2_t *)&a5[v13];
      a5 = (_DWORD *)((char *)a5 + 2 * v15);
      v30 = a2;
      v31 = (float32x2_t *)&a3[v13];
      v32 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
      v33 = v32;
      do
      {
        v34 = *v31;
        v31 = (float32x2_t *)((char *)v31 + v14);
        v32 = vmla_n_f32(v32, v34, v34.f32[0]);
        v33 = vmla_lane_f32(v33, v34, v34, 1);
        v21 = v30-- <= 1;
      }
      while (!v21);
      v36 = *v29;
      v35 = (char *)v29 + v15;
      HIDWORD(a13) = *((_DWORD *)v35 + 1);
      v37 = &v35[-v15];
      *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v32, a7.f32[0]), v36, a7, 2);
      *(_QWORD *)v37 = a8.i64[0];
      v38 = &v37[v15];
      *((_DWORD *)v38 + 1) = vmla_laneq_f32(vmul_n_f32(v33, *(float *)&a7), *(float32x2_t *)&a13, a7, 2).i32[1];
      v39 = (float32x2_t *)&v38[-v15 + 8];
      v40 = v13 + 2;
      if (result > v13 + 2)
      {
        do
        {
          v41 = a2;
          v42 = (float32x2_t *)&a3[v13];
          v43 = (float32x2_t *)&a3[v40];
          v44 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
          v45 = v44;
          do
          {
            v46 = *v43;
            v43 = (float32x2_t *)((char *)v43 + v14);
            v47 = *v42;
            v42 = (float32x2_t *)((char *)v42 + v14);
            v44 = vmla_n_f32(v44, v46, v47.f32[0]);
            v45 = vmla_lane_f32(v45, v46, v47, 1);
            v21 = v41-- <= 1;
          }
          while (!v21);
          v49 = *v39;
          v48 = (float32x2_t *)((char *)v39 + v15);
          v50 = *v48;
          v51 = (float32x2_t *)((char *)v48 + v15 + -2 * v15);
          *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v44, a7.f32[0]), v49, a7, 2);
          *v51 = *(float32x2_t *)a8.i8;
          v52 = (float32x2_t *)((char *)v51 + v15);
          *v52 = vmla_laneq_f32(vmul_n_f32(v45, a7.f32[0]), v50, a7, 2);
          v39 = (float32x2_t *)((char *)v52 + v15 + -2 * v15 + 8);
          v40 += 2;
        }
        while (v40 < result);
        v13 += 2;
      }
      else
      {
        v13 += 2;
      }
    }
    for (; result > v13; v13 += 4)
    {
      v53 = (float32x4_t *)&a5[v13];
      a5 += v15;
      v54 = a2;
      v55 = (float32x4_t *)&a3[v13];
      v56 = (float32x4_t)veorq_s8(a8, a8);
      v57 = v56;
      v58 = *(float32x2_t *)v56.f32;
      v59 = *(float32x2_t *)v56.f32;
      do
      {
        v60 = *v55;
        v55 = (float32x4_t *)((char *)v55 + v14);
        v56 = vmlaq_n_f32(v56, v60, v60.f32[0]);
        v57 = vmlaq_lane_f32(v57, v60, *(float32x2_t *)v60.f32, 1);
        v58 = vmla_laneq_f32(v58, *(float32x2_t *)&v60.u32[2], v60, 2);
        v59 = vmla_laneq_f32(v59, *(float32x2_t *)&v60.u32[2], v60, 3);
        v21 = v54-- <= 1;
      }
      while (!v21);
      v62 = *v53;
      v61 = (float32x4_t *)((char *)v53 + v15);
      v64 = *v61;
      v63 = (float32x2_t *)((char *)v61 + v15);
      v65 = v63[1];
      v66 = *(float32x2_t *)((char *)v63 + v15 + 8);
      v67 = (__n128 *)&v63[v15 / 0xFFFFFFFFFFFFFFFCLL];
      a8 = (int8x16_t)vmlaq_laneq_f32(vmulq_n_f32(v56, a7.f32[0]), v62, a7, 2);
      v68 = vmlaq_laneq_f32(vmulq_n_f32(v57, a7.f32[0]), v64, a7, 2);
      v69 = (__n128 *)((char *)v67 + v15);
      *v67 = (__n128)a8;
      v70 = v67 + 1;
      v69 = (__n128 *)((char *)v69 + 4);
      v69->n128_u32[0] = v68.u32[1];
      v69 = (__n128 *)((char *)v69 + 4);
      v69->n128_u64[0] = v68.u64[1];
      v71 = (float32x2_t *)((char *)v69 + v15);
      *v71 = vmla_laneq_f32(vmul_n_f32(v58, a7.f32[0]), v65, a7, 2);
      v71->i32[(unint64_t)v15 / 4 + 1] = vmla_laneq_f32(vmul_n_f32(v59, *(float *)&a7), v66, a7, 2).i32[1];
      for (i = v13 + 4; i < result; i += 4)
      {
        v73 = a2;
        v74 = (float32x4_t *)&a3[v13];
        v75 = (float32x4_t *)&a3[i];
        v76 = (float32x4_t)veorq_s8(a8, a8);
        v77 = v76;
        v78 = v76;
        v79 = v76;
        do
        {
          v80 = *v75;
          v75 = (float32x4_t *)((char *)v75 + v14);
          v81 = *v74;
          v74 = (float32x4_t *)((char *)v74 + v14);
          v76 = vmlaq_n_f32(v76, v80, v81.f32[0]);
          v77 = vmlaq_lane_f32(v77, v80, *(float32x2_t *)v81.f32, 1);
          v78 = vmlaq_laneq_f32(v78, v80, v81, 2);
          v79 = vmlaq_laneq_f32(v79, v80, v81, 3);
          v21 = v73-- <= 1;
        }
        while (!v21);
        v83 = *(float32x4_t *)v70;
        v82 = (float32x4_t *)((char *)v70 + v15);
        v85 = *v82;
        v84 = (float32x4_t *)((char *)v82 + v15);
        v87 = *v84;
        v86 = (float32x4_t *)((char *)v84 + v15);
        v88 = *v86;
        v89 = (__n128 *)((char *)v86 + v15 + -4 * v15);
        a8 = (int8x16_t)vmlaq_laneq_f32(vmulq_n_f32(v76, a7.f32[0]), v83, a7, 2);
        *v89 = (__n128)a8;
        v90 = (float32x4_t *)((char *)v89 + v15);
        *v90 = vmlaq_laneq_f32(vmulq_n_f32(v77, a7.f32[0]), v85, a7, 2);
        v91 = (float32x4_t *)((char *)v90 + v15);
        *v91 = vmlaq_laneq_f32(vmulq_n_f32(v78, a7.f32[0]), v87, a7, 2);
        v92 = (float32x4_t *)((char *)v91 + v15);
        *v92 = vmlaq_laneq_f32(vmulq_n_f32(v79, a7.f32[0]), v88, a7, 2);
        v70 = (__n128 *)((char *)&v92[1] + v15 + -4 * v15);
      }
    }
    return result;
  }
  v16 = a5;
  a5 = (_DWORD *)((char *)a5 + v15);
  v17 = a2;
  v18 = a3;
  v19 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
  if ((a2 & 1) == 0 || (v18 = &a3[(unint64_t)v14 / 4], v19.f32[0] = *a3 * *a3, v17 = a2 - 1, a2 > 1))
  {
    do
    {
      a12.f32[0] = *v18;
      v20 = (__int32 *)&v18[(unint64_t)v14 / 4];
      a12.i32[1] = *v20;
      v18 = (float *)&v20[(unint64_t)v14 / 4];
      v19 = vmla_f32(v19, a12, a12);
      v21 = v17 <= 2;
      v17 -= 2;
    }
    while (!v21);
    v19.f32[0] = vaddv_f32(v19);
  }
  a12.i32[0] = *v16;
  v19.f32[0] = v19.f32[0] * a7.f32[0];
  *(float32x2_t *)a8.i8 = vmla_laneq_f32(v19, a12, a7, 2);
  *v16 = a8.i32[0];
  v22 = (float32x2_t *)(v16 + 1);
  v23 = 1;
  if (result > 1)
  {
    do
    {
      v24 = a2;
      v25 = a3;
      v26 = (float32x2_t *)&a3[v23];
      v27 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
      do
      {
        v28 = *v26;
        v26 = (float32x2_t *)((char *)v26 + v14);
        *(float *)&a13 = *v25;
        v25 = (float *)((char *)v25 + v14);
        v27 = vmla_n_f32(v27, v28, *(float *)&a13);
        v21 = v24-- <= 1;
      }
      while (!v21);
      *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v27, a7.f32[0]), *v22, a7, 2);
      *v22++ = *(float32x2_t *)a8.i8;
      v23 += 2;
    }
    while (v23 < result);
    v13 = 1;
    goto LABEL_13;
  }
  return result;
}

unint64_t sub_22315CDE4()
{
  unsigned int v0;
  unsigned int v1;
  char *v3;
  unsigned int v4;
  unint64_t result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  qos_class_self();
  dword_255792C30 = pthread_qos_max_parallelism();
  v0 = pthread_qos_max_parallelism();
  dword_255792C34 = v0;
  v1 = dword_255792C30;
  if (dword_255792C30 == -1 || v0 == -1)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      sub_22315CF6C();
    v1 = 1;
    dword_255792C30 = 1;
    goto LABEL_12;
  }
  if (!dword_255792C30)
  {
    v1 = 2;
    dword_255792C30 = 2;
  }
  if (v0 < v1)
LABEL_12:
    dword_255792C34 = v1;
  v3 = getenv("VECLIB_MAXIMUM_THREADS");
  if (v3)
  {
    v4 = strtol(v3, 0, 0);
    if (v4)
    {
      if (dword_255792C34 > v4)
      {
        dword_255792C30 = v4;
        dword_255792C34 = v4;
      }
    }
  }
  byte_255792C3C = getenv("APPLE_LAPACK_FILL_NAN") != 0;
  v8 = 0u;
  v9 = 0u;
  v6 = 0u;
  v7 = 0u;
  result = sub_223158D7C((uint64_t)&v6);
  dword_255792C40 = DWORD1(v7);
  *(_QWORD *)&algn_255792C44[4] = *((_QWORD *)&v8 + 1);
  dword_255792C50 = DWORD2(v9);
  return result;
}

uint64_t sub_22315CF0C()
{
  if (qword_255792C58 != -1)
    dispatch_once(&qword_255792C58, &unk_24EC1EF50);
  if ((dword_255792C38 - 1) > 2)
    return 16;
  else
    return dword_2245B8C90[dword_255792C38 - 1];
}

void sub_22315CF6C()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_error_impl(&dword_22314D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "pthread_qos_max_parallelism() returned error in LAPACK call to initHardwareInfo()\n", v0, 2u);
}

void sub_22315CFB0(int a1, int a2, uint64_t a3, uint64_t a4, float *a5, uint64_t a6, float32x4_t *a7, uint64_t a8, float32x4_t a9, int8x16_t a10, double a11, double a12, double a13, float32x4_t a14, double a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,__int128 a32,__int128 a33,__int128 a34,__int128 a35,__int128 a36,__int128 a37,__int128 a38,__int128 a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,__int128 a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int128 a49,__int128 a50,__int128 a51,__int128 a52,__int128 a53,__int128 a54,__int128 a55,__int128 a56,char a57)
{
  unsigned __int32 v57;
  unsigned __int32 v58;
  BOOL v60;
  _BOOL4 v61;

  if (a3)
  {
    v57 = a10.i32[0];
    v58 = a9.i32[0];
    v60 = a9.f32[0] == 0.0 || a4 == 0;
    v61 = v60;
    if (!v61 || *(float *)a10.i32 != 1.0)
    {
      if (v61)
      {
        sub_223163278(a1, a3, a7->f32, a8, *(float *)a10.i32);
      }
      else
      {
        if (*(float *)a10.i32 == 0.0)
          sub_223163278(a1, a3, a7->f32, a8, *(float *)a10.i32);
        if (a3 > 85 || a4 >= 86)
        {
          if (a1 == 121)
            sub_22316275C(a2, a3, a4, (int)a5, a6, (int)a7, a8, a8, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26,
              (uint64_t)a27,
              a28,
              a29,
              a30,
              a31,
              a32,
              a33,
              *((uint64_t *)&a33 + 1),
              a34,
              *((uint64_t *)&a34 + 1),
              a35,
              *((uint64_t *)&a35 + 1),
              a36,
              *((uint64_t *)&a36 + 1),
              a37,
              *((uint64_t *)&a37 + 1),
              a38,
              SDWORD2(a38),
              SHIDWORD(a38),
              a39,
              *((uint64_t *)&a39 + 1),
              a40,
              a41,
              a42,
              a43,
              a44,
              a45,
              a46,
              a47,
              a48,
              a49,
              a50,
              a51,
              a52,
              a53,
              a54,
              a55,
              a56,
              a57);
          else
            sub_223166614(a2, a3, a4, (int)a5, a6, (int)a7, a8, a8, a16, a17, a18, a19, a20, SHIDWORD(a20), a21, a22, a23, a24, a25,
              a26,
              a27,
              a28,
              a29,
              a30,
              a31,
              a32,
              a33,
              a34,
              a35,
              a36,
              a37,
              a38,
              a39,
              a40);
        }
        else
        {
          a9.i32[0] = v58;
          a10.i32[0] = v57;
          if (a1 == 121)
          {
            if (a2 == 111)
              sub_2231567D0(a3, a4, (uint64_t)a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
            else
              sub_2231622A0(a3, a4, (uint64_t)a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
          }
          else if (a2 == 111)
          {
            sub_22315CAF0(a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, *(float32x2_t *)a14.f32, a15);
          }
          else
          {
            sub_22315D6B0(a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, *(float32x2_t *)a14.f32, *(float32x2_t *)&a15);
          }
        }
      }
    }
  }
}

float *sub_22315D1A0(float32x4_t *a1, uint64_t a2, float32x4_t *_X2, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  int8x16_t v7;
  uint64_t v9;
  uint64_t v10;
  float *result;
  float32x4_t *v12;
  uint64_t v13;
  float32x4_t *v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  uint64_t v19;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t *v60;
  _OWORD *v61;
  float32x4_t *v62;
  float32x4_t *v63;
  float32x4_t *v64;

  v9 = a5 & 7;
  v10 = a5 - v9;
  if (v10)
  {
    v12 = _X2;
    v13 = 4 * a4;
    v15 = *a1;
    v16 = a1[1];
    v14 = a1 + 2;
    v17 = *v14;
    v18 = v14[1];
    result = v14[2].f32;
    do
    {
      v19 = a6;
      v7 = veorq_s8(v7, v7);
      __asm { PRFM            #1, [X2,#0x40] }
      v26 = *_X2;
      v27 = _X2[1];
      _X2 = (float32x4_t *)((char *)_X2 + v13);
      __asm { PRFM            #1, [X2,#0x40] }
      v30 = *_X2;
      v31 = _X2[1];
      _X2 = (float32x4_t *)((char *)_X2 + v13);
      __asm { PRFM            #1, [X2,#0x40] }
      v34 = *_X2;
      v35 = _X2[1];
      _X2 = (float32x4_t *)((char *)_X2 + v13);
      __asm { PRFM            #1, [X2,#0x40] }
      v37 = *_X2;
      v38 = _X2[1];
      _X2 = v12 + 2;
      v39 = (float32x4_t)v7;
      v40 = (float32x4_t)v7;
      v41 = (float32x4_t)v7;
      v42 = (float32x4_t)v7;
      v43 = (float32x4_t)v7;
      v44 = (float32x4_t)v7;
      v45 = (float32x4_t)v7;
      v47 = *(float32x4_t *)a2;
      v48 = *(float32x4_t *)(a2 + 16);
      _X6 = (_OWORD *)(a2 + 32);
      __asm
      {
        PRFM            #1, [X6]
        PRFM            #1, [X6,#0x20]
        PRFM            #1, [X6,#0x40]
      }
      v52 = vmulq_n_f32(v26, a7);
      v53 = vmulq_n_f32(v27, a7);
      v54 = vmulq_n_f32(v30, a7);
      v55 = vmulq_n_f32(v31, a7);
      v56 = vmulq_n_f32(v34, a7);
      v57 = vmulq_n_f32(v35, a7);
      v58 = vmulq_n_f32(v37, a7);
      v59 = vmulq_n_f32(v38, a7);
      if ((a6 & 1) == 0)
        goto LABEL_13;
      v52 = vmlaq_n_f32(v52, v15, v47.f32[0]);
      v54 = vmlaq_lane_f32(v54, v15, *(float32x2_t *)v47.f32, 1);
      v56 = vmlaq_laneq_f32(v56, v15, v47, 2);
      v58 = vmlaq_laneq_f32(v58, v15, v47, 3);
      v15 = v17;
      v53 = vmlaq_n_f32(v53, v16, v47.f32[0]);
      v55 = vmlaq_lane_f32(v55, v16, *(float32x2_t *)v47.f32, 1);
      v57 = vmlaq_laneq_f32(v57, v16, v47, 2);
      v59 = vmlaq_laneq_f32(v59, v16, v47, 3);
      v16 = v18;
      v17 = *(float32x4_t *)result;
      v18 = *(float32x4_t *)(result + 4);
      result += 8;
      v47 = *(float32x4_t *)(a2 + 16);
      v48 = *(float32x4_t *)_X6;
      _X6 = (_OWORD *)(a2 + 48);
      v19 = a6 - 1;
      if (a6 > 1)
      {
LABEL_13:
        do
        {
          v52 = vmlaq_n_f32(v52, v15, v47.f32[0]);
          v54 = vmlaq_lane_f32(v54, v15, *(float32x2_t *)v47.f32, 1);
          v56 = vmlaq_laneq_f32(v56, v15, v47, 2);
          v58 = vmlaq_laneq_f32(v58, v15, v47, 3);
          v53 = vmlaq_n_f32(v53, v16, v47.f32[0]);
          v55 = vmlaq_lane_f32(v55, v16, *(float32x2_t *)v47.f32, 1);
          v57 = vmlaq_laneq_f32(v57, v16, v47, 2);
          v59 = vmlaq_laneq_f32(v59, v16, v47, 3);
          v15 = *(float32x4_t *)result;
          v16 = *(float32x4_t *)(result + 4);
          v60 = (float32x4_t *)(result + 8);
          v47 = *(float32x4_t *)_X6;
          v61 = _X6 + 1;
          v7 = (int8x16_t)vmlaq_n_f32((float32x4_t)v7, v17, v48.f32[0]);
          v40 = vmlaq_lane_f32(v40, v17, *(float32x2_t *)v48.f32, 1);
          v42 = vmlaq_laneq_f32(v42, v17, v48, 2);
          v44 = vmlaq_laneq_f32(v44, v17, v48, 3);
          v39 = vmlaq_n_f32(v39, v18, v48.f32[0]);
          v41 = vmlaq_lane_f32(v41, v18, *(float32x2_t *)v48.f32, 1);
          v43 = vmlaq_laneq_f32(v43, v18, v48, 2);
          v45 = vmlaq_laneq_f32(v45, v18, v48, 3);
          v17 = *v60;
          v18 = v60[1];
          result = v60[2].f32;
          v48 = *(float32x4_t *)v61;
          _X6 = v61 + 1;
          v19 -= 2;
        }
        while (v19);
        v52 = vaddq_f32(v52, (float32x4_t)v7);
        v53 = vaddq_f32(v53, v39);
        v54 = vaddq_f32(v54, v40);
        v55 = vaddq_f32(v55, v41);
        v56 = vaddq_f32(v56, v42);
        v57 = vaddq_f32(v57, v43);
        v58 = vaddq_f32(v58, v44);
        v59 = vaddq_f32(v59, v45);
      }
      *v12 = v52;
      v12[1] = v53;
      v62 = (float32x4_t *)((char *)v12 + v13);
      *v62 = v54;
      v62[1] = v55;
      v63 = (float32x4_t *)((char *)v62 + v13);
      *v63 = v56;
      v63[1] = v57;
      v64 = (float32x4_t *)((char *)v63 + v13);
      *v64 = v58;
      v64[1] = v59;
      v12 = _X2;
      v10 -= 8;
    }
    while (v10);
  }
  else
  {
    result = a1[4].f32;
  }
  if (v9)
    return sub_223159354(result - 16, (float32x4_t *)a2, (__int32 *)_X2, a4, v9, a6, a7);
  return result;
}

uint64_t sub_22315D360(uint64_t result, uint64_t a2, uint64_t a3, float32x4_t *a4, uint64_t a5, float32x4_t *a6, uint64_t a7, float32x4_t *a8, float a9, float a10, int8x16_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t i;
  float32x4_t *v17;
  float32x4_t *v18;
  float32x4_t *v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  uint64_t j;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t *v38;
  float32x4_t v39;
  float32x4_t v40;
  uint64_t v41;
  uint64_t v42;
  float32x4_t v43;
  float v44;
  float32x4_t v45;
  float v46;
  float v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  __int32 *v51;
  __int32 *v52;
  __int32 *v53;
  uint64_t k;
  float32x4_t *v55;
  float *v56;
  float32x4_t *v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float v63;
  float32x4_t v64;
  float32x4_t v65;
  uint64_t m;
  float v67;
  float v68;
  float32x4_t v69;
  uint64_t v70;
  uint64_t v71;
  float v72;
  float v73;
  __int32 *v74;
  float32x2_t v75;
  __int32 *v76;
  float32x2_t v77;

  v12 = 4 * a5;
  v13 = 4 * a12;
  v14 = 4 * a7;
  v15 = a2 <= 3;
  for (i = a2 - 3; !v15; i -= 4)
  {
    v17 = a4;
    v18 = a6;
    v19 = &a8[a12];
    v20 = __OFSUB__(result, 3);
    v21 = result - 3;
    if (result > 3)
    {
      do
      {
        v22 = a3;
        v23 = (float32x4_t)veorq_s8(a11, a11);
        v24 = v23;
        v25 = v23;
        v26 = v23;
        if ((a3 & 1) == 0)
          goto LABEL_5;
        v27 = *v17;
        v17 = (float32x4_t *)((char *)v17 + v12);
        v28 = *v18;
        v18 = (float32x4_t *)((char *)v18 + v14);
        v23 = vmlaq_n_f32(v23, v27, v28.f32[0]);
        v24 = vmlaq_lane_f32(v24, v27, *(float32x2_t *)v28.f32, 1);
        v25 = vmlaq_laneq_f32(v25, v27, v28, 2);
        v26 = vmlaq_laneq_f32(v26, v27, v28, 3);
        v22 = a3 - 1;
        if (a3 > 1)
        {
LABEL_5:
          v29 = *v17;
          v30 = *(float32x4_t *)((char *)v17 + v12);
          v31 = *v18;
          v32 = *(float32x4_t *)((char *)v18 + v14);
          v15 = v22 <= 2;
          for (j = v22 - 2; !v15; j -= 2)
          {
            v17 = (float32x4_t *)((char *)v17 + 2 * v12);
            v34 = vmlaq_n_f32(v23, v29, v31.f32[0]);
            v18 = (float32x4_t *)((char *)v18 + 2 * v14);
            v35 = vmlaq_lane_f32(v24, v29, *(float32x2_t *)v31.f32, 1);
            v36 = vmlaq_laneq_f32(v25, v29, v31, 2);
            v37 = vmlaq_laneq_f32(v26, v29, v31, 3);
            v29 = *v17;
            v23 = vmlaq_n_f32(v34, v30, v32.f32[0]);
            v31 = *v18;
            v24 = vmlaq_lane_f32(v35, v30, *(float32x2_t *)v32.f32, 1);
            v25 = vmlaq_laneq_f32(v36, v30, v32, 2);
            v26 = vmlaq_laneq_f32(v37, v30, v32, 3);
            v30 = *(float32x4_t *)((char *)v17 + v12);
            v32 = *(float32x4_t *)((char *)v18 + v14);
            v15 = j <= 2;
          }
          v17 = (float32x4_t *)((char *)v17 + 2 * v12);
          v23 = vmlaq_n_f32(vmlaq_n_f32(v23, v29, v31.f32[0]), v30, v32.f32[0]);
          v24 = vmlaq_lane_f32(vmlaq_lane_f32(v24, v29, *(float32x2_t *)v31.f32, 1), v30, *(float32x2_t *)v32.f32, 1);
          v25 = vmlaq_laneq_f32(vmlaq_laneq_f32(v25, v29, v31, 2), v30, v32, 2);
          v26 = vmlaq_laneq_f32(vmlaq_laneq_f32(v26, v29, v31, 3), v30, v32, 3);
        }
        v38 = (float32x4_t *)((char *)a8 + 8 * a12);
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v23, a9), *a8, a10);
        v39 = vmlaq_n_f32(vmulq_n_f32(v25, a9), *v38, a10);
        v40 = vmlaq_n_f32(vmulq_n_f32(v26, a9), *(float32x4_t *)((char *)v38 + 4 * a12), a10);
        *(float32x4_t *)((char *)a8 + 4 * a12) = vmlaq_n_f32(vmulq_n_f32(v24, a9), *(float32x4_t *)((char *)a8 + 4 * a12), a10);
        *a8++ = (float32x4_t)a11;
        *v38 = v39;
        *(float32x4_t *)((char *)v38 + 4 * a12) = v40;
        v18 = a6;
        v17 = (float32x4_t *)((char *)v17 - v12 * a3 + 16);
        v20 = __OFSUB__(v21, 4);
        v15 = v21 <= 4;
        v21 -= 4;
      }
      while (!v15);
    }
    v41 = result & 3;
    if (!v20 && v41 != 0)
    {
      do
      {
        v42 = a3;
        v43 = (float32x4_t)veorq_s8(a11, a11);
        if ((a3 & 1) == 0
          || (v44 = v17->f32[0],
              v17 = (float32x4_t *)((char *)v17 + v12),
              v45 = *v18,
              v18 = (float32x4_t *)((char *)v18 + v14),
              v43 = vmlaq_n_f32(v43, v45, v44),
              v42 = a3 - 1,
              a3 > 1))
        {
          do
          {
            v46 = v17->f32[0];
            v47 = v17->f32[(unint64_t)v12 / 4];
            v48 = *(float32x4_t *)((char *)v18 + v14);
            v17 = (float32x4_t *)((char *)v17 + 2 * v12);
            v49 = vmlaq_n_f32(v43, *v18, v46);
            v18 = (float32x4_t *)((char *)v18 + 2 * v14);
            v43 = vmlaq_n_f32(v49, v48, v47);
            v15 = v42 <= 2;
            v42 -= 2;
          }
          while (!v15);
        }
        v50.i32[0] = a8->i32[0];
        v50.i32[1] = a8->i32[a12];
        v51 = (__int32 *)((char *)a8 + v13 + v13);
        v50.i32[2] = *v51;
        v50.i32[3] = v51[a12];
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v43, a9), v50, a10);
        v52 = (__int32 *)((char *)a8 + v13);
        a8->i32[0] = a11.i32[0];
        a8 = (float32x4_t *)((char *)a8 + 4);
        *v52 = a11.i32[1];
        v53 = &v52[(unint64_t)v13 / 4];
        *v53 = a11.i32[2];
        v53[a12] = a11.i32[3];
        v18 = a6;
        v17 = (float32x4_t *)((char *)&v17->i32[1] - v12 * a3);
        v15 = v41-- <= 1;
      }
      while (!v15);
    }
    ++a6;
    a8 = v19;
    v15 = i <= 4;
  }
  v15 = i <= -3;
  for (k = i + 3; !v15; --k)
  {
    v55 = a4;
    v56 = (float *)a6;
    v57 = (float32x4_t *)((char *)a8 + v13);
    v58 = __OFSUB__(result, 3);
    v59 = result - 3;
    if (result > 3)
    {
      do
      {
        v60 = a3;
        v61 = (float32x4_t)veorq_s8(a11, a11);
        if ((a3 & 1) == 0
          || (v62 = *v55,
              v55 = (float32x4_t *)((char *)v55 + v12),
              v63 = *v56,
              v56 = (float *)((char *)v56 + v14),
              v61 = vmlaq_n_f32(v61, v62, v63),
              v60 = a3 - 1,
              a3 > 1))
        {
          v64 = *v55;
          v65 = *(float32x4_t *)((char *)v55 + v12);
          v15 = v60 <= 2;
          for (m = v60 - 2; !v15; m -= 2)
          {
            v55 = (float32x4_t *)((char *)v55 + 2 * v12);
            v67 = *v56;
            v68 = v56[(unint64_t)v14 / 4];
            v56 = (float *)((char *)v56 + 2 * v14);
            v69 = vmlaq_n_f32(v61, v64, v67);
            v64 = *v55;
            v61 = vmlaq_n_f32(v69, v65, v68);
            v65 = *(float32x4_t *)((char *)v55 + v12);
            v15 = m <= 2;
          }
          v55 = (float32x4_t *)((char *)v55 + 2 * v12);
          v61 = vmlaq_n_f32(vmlaq_n_f32(v61, v64, *v56), v65, v56[(unint64_t)v14 / 4]);
        }
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v61, a9), *a8, a10);
        *a8++ = (float32x4_t)a11;
        v56 = (float *)a6;
        v55 = (float32x4_t *)((char *)v55 - v12 * a3 + 16);
        v58 = __OFSUB__(v59, 4);
        v15 = v59 <= 4;
        v59 -= 4;
      }
      while (!v15);
    }
    v70 = result & 3;
    if (!v58 && v70 != 0)
    {
      do
      {
        v71 = a3;
        a11 = veorq_s8(a11, a11);
        if ((a3 & 1) == 0
          || (v72 = v55->f32[0],
              v55 = (float32x4_t *)((char *)v55 + v12),
              v73 = *v56,
              v56 = (float *)((char *)v56 + v14),
              *(float *)a11.i32 = vmlas_n_f32(*(float *)a11.i32, v73, v72),
              v71 = a3 - 1,
              a3 > 1))
        {
          do
          {
            v75.i32[0] = v55->i32[0];
            v74 = (__int32 *)((char *)v55 + v12);
            v75.i32[1] = *v74;
            v55 = (float32x4_t *)&v74[(unint64_t)v12 / 4];
            v77.f32[0] = *v56;
            v76 = (__int32 *)&v56[(unint64_t)v14 / 4];
            v77.i32[1] = *v76;
            v56 = (float *)&v76[(unint64_t)v14 / 4];
            *(float32x2_t *)a11.i8 = vmla_f32(*(float32x2_t *)a11.i8, v77, v75);
            v15 = v71 <= 2;
            v71 -= 2;
          }
          while (!v15);
          *(float *)a11.i32 = vaddv_f32(*(float32x2_t *)a11.i8);
        }
        *(float *)a11.i32 = vmlas_n_f32(*(float *)a11.i32 * a9, a8->f32[0], a10);
        a8->i32[0] = a11.i32[0];
        a8 = (float32x4_t *)((char *)a8 + 4);
        v56 = (float *)a6;
        v55 = (float32x4_t *)((char *)&v55->i32[1] - v12 * a3);
        v15 = v70-- <= 1;
      }
      while (!v15);
    }
    a6 = (float32x4_t *)((char *)a6 + 4);
    a8 = v57;
    v15 = k <= 1;
  }
  return result;
}

uint64_t sub_22315D6B0(uint64_t result, uint64_t a2, float *a3, uint64_t a4, _DWORD *a5, uint64_t a6, float32x4_t a7, int8x16_t a8, double a9, double a10, double a11, float32x2_t a12, float32x2_t a13)
{
  float32x4_t v13;
  float32x4_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x4_t v17;
  int32x4_t v18;
  int32x2_t v19;
  float32x2_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  double *v26;
  float32x2_t v27;
  BOOL v28;
  float32x2_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  __int32 *v33;
  __int32 *v34;
  float32x2_t v35;
  float32x2_t *v36;
  uint64_t v37;
  __int32 *v38;
  __int32 *v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  char *v43;
  float32x2_t v44;
  char *v45;
  char *v46;
  float32x2_t *v47;
  uint64_t v48;
  uint64_t v49;
  float *v50;
  __int32 *v51;
  float *v52;
  __int32 *v53;
  float32x2_t v54;
  float32x2_t v55;
  float v56;
  float v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x2_t *v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x2_t *v63;
  float32x2_t *v64;
  float32x4_t *v65;
  uint64_t v66;
  __int32 *v67;
  __int32 *v68;
  float32x2_t *v69;
  float32x2_t *v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x2_t v73;
  float32x2_t v74;
  int32x4_t v75;
  int32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t *v79;
  float32x4_t v80;
  char *v81;
  float32x4_t v82;
  __n128 *v83;
  float32x4_t v84;
  __n128 *v85;
  __n128 *v86;
  float32x2_t *v87;
  uint64_t i;
  uint64_t v89;
  float32x2_t *v90;
  __int32 *v91;
  float32x2_t *v92;
  __int32 *v93;
  float32x2_t *v94;
  int32x2_t *v95;
  float32x2_t *v96;
  float32x2_t *v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float32x2_t v106;
  float32x2_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t *v110;
  float32x4_t v111;
  float32x4_t *v112;
  float32x4_t v113;
  float32x4_t *v114;
  __n128 *v115;
  float32x4_t *v116;
  float32x4_t *v117;
  float32x4_t *v118;

  a7.i64[1] = a8.i64[0];
  v21 = 0;
  v22 = 4 * a4;
  v23 = 4 * a6;
  if ((result & 1) == 0)
  {
LABEL_14:
    if ((result & 2) != 0)
    {
      v36 = (float32x2_t *)&a5[v21];
      a5 = (_DWORD *)((char *)a5 + 2 * v23);
      v37 = a2;
      v38 = (__int32 *)((char *)a3 + v21 * v22);
      v39 = &v38[(unint64_t)v22 / 4];
      v40 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
      v41 = v40;
      if ((a2 & 1) == 0)
        goto LABEL_18;
      v13.i32[0] = *v38++;
      v14.i32[0] = *v39++;
      *(int32x2_t *)v17.f32 = vtrn1_s32(*(int32x2_t *)v13.f32, *(int32x2_t *)v14.f32);
      v40 = vmla_n_f32(v40, *(float32x2_t *)v17.f32, v13.f32[0]);
      v41 = vmla_n_f32(v41, *(float32x2_t *)v17.f32, v14.f32[0]);
      v37 = a2 - 1;
      if (a2 > 1)
      {
LABEL_18:
        do
        {
          v13.i64[0] = *(_QWORD *)v38;
          v38 += 2;
          v14.i64[0] = *(_QWORD *)v39;
          v39 += 2;
          v42 = (float32x2_t)vtrn1_s32(*(int32x2_t *)v13.f32, *(int32x2_t *)v14.f32);
          a13 = (float32x2_t)vtrn2_s32(*(int32x2_t *)v13.f32, *(int32x2_t *)v14.f32);
          v40 = vmla_lane_f32(vmla_n_f32(v40, v42, v13.f32[0]), a13, *(float32x2_t *)v13.f32, 1);
          v41 = vmla_lane_f32(vmla_n_f32(v41, v42, v14.f32[0]), a13, *(float32x2_t *)v14.f32, 1);
          v28 = v37 <= 2;
          v37 -= 2;
        }
        while (!v28);
      }
      v44 = *v36;
      v43 = (char *)v36 + v23;
      a13.i32[1] = *((_DWORD *)v43 + 1);
      v45 = &v43[-v23];
      *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v40, a7.f32[0]), v44, a7, 2);
      *(_QWORD *)v45 = a8.i64[0];
      v46 = &v45[v23];
      *((_DWORD *)v46 + 1) = vmla_laneq_f32(vmul_n_f32(v41, *(float *)&a7), a13, a7, 2).i32[1];
      v47 = (float32x2_t *)&v46[-v23 + 8];
      v48 = v21 + 2;
      if (result > v21 + 2)
      {
        do
        {
          v49 = a2;
          v50 = (float *)((char *)a3 + v21 * v22);
          v51 = (__int32 *)((char *)a3 + v48 * v22);
          v52 = &v50[(unint64_t)v22 / 4];
          v53 = &v51[(unint64_t)v22 / 4];
          v54 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
          v55 = v54;
          if ((a2 & 1) == 0)
            goto LABEL_24;
          v17.i32[0] = *v51++;
          v18.i32[0] = *v53++;
          v56 = *v50++;
          v57 = *v52++;
          *(int32x2_t *)v17.f32 = vtrn1_s32(*(int32x2_t *)v17.f32, *(int32x2_t *)v18.i8);
          v54 = vmla_n_f32(v54, *(float32x2_t *)v17.f32, v56);
          v55 = vmla_n_f32(v55, *(float32x2_t *)v17.f32, v57);
          v49 = a2 - 1;
          if (a2 > 1)
          {
LABEL_24:
            do
            {
              v17.i64[0] = *(_QWORD *)v51;
              v51 += 2;
              v18.i64[0] = *(_QWORD *)v53;
              v53 += 2;
              v13.i64[0] = *(_QWORD *)v50;
              v50 += 2;
              v14.i64[0] = *(_QWORD *)v52;
              v52 += 2;
              v58 = (float32x2_t)vtrn1_s32(*(int32x2_t *)v17.f32, *(int32x2_t *)v18.i8);
              v59 = (float32x2_t)vtrn2_s32(*(int32x2_t *)v17.f32, *(int32x2_t *)v18.i8);
              v54 = vmla_lane_f32(vmla_n_f32(v54, v58, v13.f32[0]), v59, *(float32x2_t *)v13.f32, 1);
              v55 = vmla_lane_f32(vmla_n_f32(v55, v58, v14.f32[0]), v59, *(float32x2_t *)v14.f32, 1);
              v28 = v49 <= 2;
              v49 -= 2;
            }
            while (!v28);
          }
          v61 = *v47;
          v60 = (float32x2_t *)((char *)v47 + v23);
          v62 = *v60;
          v63 = (float32x2_t *)((char *)v60 + v23 + -2 * v23);
          *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v54, a7.f32[0]), v61, a7, 2);
          *v63 = *(float32x2_t *)a8.i8;
          v64 = (float32x2_t *)((char *)v63 + v23);
          *v64 = vmla_laneq_f32(vmul_n_f32(v55, a7.f32[0]), v62, a7, 2);
          v47 = (float32x2_t *)((char *)v64 + v23 + -2 * v23 + 8);
          v48 += 2;
        }
        while (v48 < result);
        v21 += 2;
      }
      else
      {
        v21 += 2;
      }
    }
    for (; result > v21; v21 += 4)
    {
      v65 = (float32x4_t *)&a5[v21];
      a5 += v23;
      v66 = a2;
      v67 = (__int32 *)((char *)a3 + v21 * v22);
      v68 = &v67[(unint64_t)v22 / 4];
      v69 = (float32x2_t *)&v67[(unint64_t)v22 / 4 + (unint64_t)v22 / 4];
      v70 = (float32x2_t *)((char *)v69 + v22);
      v71 = (float32x4_t)veorq_s8(a8, a8);
      v72 = v71;
      v73 = *(float32x2_t *)v71.f32;
      v74 = *(float32x2_t *)v71.f32;
      if ((a2 & 1) == 0)
        goto LABEL_31;
      v13.i32[0] = *v67++;
      v14.i32[0] = *v68++;
      v15.i32[0] = v69->i32[0];
      v69 = (float32x2_t *)((char *)v69 + 4);
      v16.i32[0] = v70->i32[0];
      v70 = (float32x2_t *)((char *)v70 + 4);
      *(int32x2_t *)v17.f32 = vtrn1_s32(*(int32x2_t *)v13.f32, *(int32x2_t *)v14.f32);
      v20 = (float32x2_t)vtrn1_s32((int32x2_t)v15, (int32x2_t)v16);
      *(float32x2_t *)&v17.u32[2] = v20;
      v71 = vmlaq_n_f32(v71, v17, v13.f32[0]);
      v72 = vmlaq_n_f32(v72, v17, v14.f32[0]);
      v73 = vmla_n_f32(v73, v20, v15.f32[0]);
      v74 = vmla_n_f32(v74, v20, v16.f32[0]);
      v66 = a2 - 1;
      if (a2 > 1)
      {
LABEL_31:
        do
        {
          v75.i64[0] = *(_QWORD *)v67;
          v67 += 2;
          v76.i64[0] = *(_QWORD *)v68;
          v68 += 2;
          v15 = *v69++;
          v16 = *v70++;
          v75.u64[1] = (unint64_t)v15;
          v76.u64[1] = (unint64_t)v16;
          v77 = (float32x4_t)vtrn1q_s32(v75, v76);
          v78 = (float32x4_t)vtrn2q_s32(v75, v76);
          v71 = vmlaq_lane_f32(vmlaq_n_f32(v71, v77, *(float *)v75.i32), v78, *(float32x2_t *)v75.i8, 1);
          v72 = vmlaq_lane_f32(vmlaq_n_f32(v72, v77, *(float *)v76.i32), v78, *(float32x2_t *)v76.i8, 1);
          v73 = vmla_lane_f32(vmla_n_f32(v73, *(float32x2_t *)&v77.u32[2], v15.f32[0]), *(float32x2_t *)&v78.u32[2], v15, 1);
          v74 = vmla_lane_f32(vmla_n_f32(v74, *(float32x2_t *)&v77.u32[2], v16.f32[0]), *(float32x2_t *)&v78.u32[2], v16, 1);
          v28 = v66 <= 2;
          v66 -= 2;
        }
        while (!v28);
      }
      v80 = *v65;
      v79 = (float32x4_t *)((char *)v65 + v23);
      v82 = *v79;
      v81 = (char *)v79 + v23;
      v13.i64[0] = *((_QWORD *)v81 + 1);
      v14.i64[0] = *(_QWORD *)&v81[v23 + 8];
      v83 = (__n128 *)&v81[-2 * v23];
      a8 = (int8x16_t)vmlaq_laneq_f32(vmulq_n_f32(v71, a7.f32[0]), v80, a7, 2);
      v84 = vmlaq_laneq_f32(vmulq_n_f32(v72, a7.f32[0]), v82, a7, 2);
      v85 = (__n128 *)((char *)v83 + v23);
      *v83 = (__n128)a8;
      v86 = v83 + 1;
      v85 = (__n128 *)((char *)v85 + 4);
      v85->n128_u32[0] = v84.u32[1];
      v85 = (__n128 *)((char *)v85 + 4);
      v85->n128_u64[0] = v84.u64[1];
      v87 = (float32x2_t *)((char *)v85 + v23);
      *v87 = vmla_laneq_f32(vmul_n_f32(v73, a7.f32[0]), *(float32x2_t *)v13.f32, a7, 2);
      v87->i32[(unint64_t)v23 / 4 + 1] = vmla_laneq_f32(vmul_n_f32(v74, *(float *)&a7), *(float32x2_t *)&v14, a7, 2).i32[1];
      for (i = v21 + 4; i < result; i += 4)
      {
        v89 = a2;
        v90 = (float32x2_t *)((char *)a3 + v21 * v22);
        v91 = (__int32 *)((char *)a3 + i * v22);
        v92 = (float32x2_t *)((char *)v90 + v22);
        v93 = &v91[(unint64_t)v22 / 4];
        v94 = (float32x2_t *)((char *)v90 + v22 + v22);
        v95 = (int32x2_t *)&v91[(unint64_t)v22 / 4 + (unint64_t)v22 / 4];
        v96 = (float32x2_t *)((char *)v94 + v22);
        v97 = (float32x2_t *)((char *)v95 + v22);
        v98 = (float32x4_t)veorq_s8(a8, a8);
        v99 = v98;
        v100 = v98;
        v101 = v98;
        if ((a2 & 1) == 0)
          goto LABEL_36;
        v17.i32[0] = *v91++;
        v18.i32[0] = *v93++;
        v19.i32[0] = v95->i32[0];
        v95 = (int32x2_t *)((char *)v95 + 4);
        v20.i32[0] = v97->i32[0];
        v97 = (float32x2_t *)((char *)v97 + 4);
        v102 = v90->f32[0];
        v90 = (float32x2_t *)((char *)v90 + 4);
        v103 = v92->f32[0];
        v92 = (float32x2_t *)((char *)v92 + 4);
        v104 = v94->f32[0];
        v94 = (float32x2_t *)((char *)v94 + 4);
        v105 = v96->f32[0];
        v96 = (float32x2_t *)((char *)v96 + 4);
        *(int32x2_t *)v17.f32 = vtrn1_s32(*(int32x2_t *)v17.f32, *(int32x2_t *)v18.i8);
        v20 = (float32x2_t)vtrn1_s32(v19, (int32x2_t)v20);
        *(float32x2_t *)&v17.u32[2] = v20;
        v98 = vmlaq_n_f32(v98, v17, v102);
        v99 = vmlaq_n_f32(v99, v17, v103);
        v100 = vmlaq_n_f32(v100, v17, v104);
        v101 = vmlaq_n_f32(v101, v17, v105);
        v89 = a2 - 1;
        if (a2 > 1)
        {
LABEL_36:
          do
          {
            v17.i64[0] = *(_QWORD *)v91;
            v91 += 2;
            v18.i64[0] = *(_QWORD *)v93;
            v93 += 2;
            v19 = *v95++;
            v20 = *v97++;
            v106 = *v90++;
            v107 = *v92++;
            v15 = *v94++;
            v16 = *v96++;
            *(int32x2_t *)&v17.u32[2] = v19;
            v18.u64[1] = (unint64_t)v20;
            v108 = (float32x4_t)vtrn1q_s32((int32x4_t)v17, v18);
            v109 = (float32x4_t)vtrn2q_s32((int32x4_t)v17, v18);
            v98 = vmlaq_lane_f32(vmlaq_n_f32(v98, v108, v106.f32[0]), v109, v106, 1);
            v99 = vmlaq_lane_f32(vmlaq_n_f32(v99, v108, v107.f32[0]), v109, v107, 1);
            v100 = vmlaq_lane_f32(vmlaq_n_f32(v100, v108, v15.f32[0]), v109, v15, 1);
            v101 = vmlaq_lane_f32(vmlaq_n_f32(v101, v108, v16.f32[0]), v109, v16, 1);
            v28 = v89 <= 2;
            v89 -= 2;
          }
          while (!v28);
        }
        v111 = *(float32x4_t *)v86;
        v110 = (float32x4_t *)((char *)v86 + v23);
        v113 = *v110;
        v112 = (float32x4_t *)((char *)v110 + v23);
        v13 = *v112;
        v114 = (float32x4_t *)((char *)v112 + v23);
        v14 = *v114;
        v115 = (__n128 *)((char *)v114 + v23 + -4 * v23);
        a8 = (int8x16_t)vmlaq_laneq_f32(vmulq_n_f32(v98, a7.f32[0]), v111, a7, 2);
        *v115 = (__n128)a8;
        v116 = (float32x4_t *)((char *)v115 + v23);
        *v116 = vmlaq_laneq_f32(vmulq_n_f32(v99, a7.f32[0]), v113, a7, 2);
        v117 = (float32x4_t *)((char *)v116 + v23);
        *v117 = vmlaq_laneq_f32(vmulq_n_f32(v100, a7.f32[0]), v13, a7, 2);
        v118 = (float32x4_t *)((char *)v117 + v23);
        *v118 = vmlaq_laneq_f32(vmulq_n_f32(v101, a7.f32[0]), v14, a7, 2);
        v86 = (__n128 *)((char *)&v118[1] + v23 + -4 * v23);
      }
    }
    return result;
  }
  v24 = a5;
  a5 = (_DWORD *)((char *)a5 + v23);
  v25 = a2;
  v26 = (double *)a3;
  v27 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
  if ((a2 & 1) == 0 || (v26 = (double *)(a3 + 1), v27.f32[0] = *a3 * *a3, v25 = a2 - 1, a2 > 1))
  {
    do
    {
      a12 = *(float32x2_t *)v26++;
      v27 = vmla_f32(v27, a12, a12);
      v28 = v25 <= 2;
      v25 -= 2;
    }
    while (!v28);
    v27.f32[0] = vaddv_f32(v27);
  }
  a12.i32[0] = *v24;
  v27.f32[0] = v27.f32[0] * a7.f32[0];
  *(float32x2_t *)a8.i8 = vmla_laneq_f32(v27, a12, a7, 2);
  *v24 = a8.i32[0];
  v29 = (float32x2_t *)(v24 + 1);
  v30 = 1;
  if (result > 1)
  {
    do
    {
      v31 = a2;
      v32 = (uint64_t *)a3;
      v33 = (__int32 *)((char *)a3 + v30 * v22);
      v34 = &v33[(unint64_t)v22 / 4];
      v35 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
      if ((a2 & 1) == 0)
        goto LABEL_11;
      v17.i32[0] = *v33++;
      v18.i32[0] = *v34++;
      v32 = (uint64_t *)(a3 + 1);
      *(int32x2_t *)v17.f32 = vtrn1_s32(*(int32x2_t *)v17.f32, *(int32x2_t *)v18.i8);
      v35 = vmla_n_f32(v35, *(float32x2_t *)v17.f32, *a3);
      v31 = a2 - 1;
      if (a2 > 1)
      {
LABEL_11:
        do
        {
          v17.i64[0] = *(_QWORD *)v33;
          v33 += 2;
          v18.i64[0] = *(_QWORD *)v34;
          v34 += 2;
          v13.i64[0] = *v32++;
          a13 = (float32x2_t)vtrn2_s32(*(int32x2_t *)v17.f32, *(int32x2_t *)v18.i8);
          v35 = vmla_lane_f32(vmla_n_f32(v35, (float32x2_t)vtrn1_s32(*(int32x2_t *)v17.f32, *(int32x2_t *)v18.i8), v13.f32[0]), a13, *(float32x2_t *)v13.f32, 1);
          v28 = v31 <= 2;
          v31 -= 2;
        }
        while (!v28);
      }
      *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v35, a7.f32[0]), *v29, a7, 2);
      *v29++ = *(float32x2_t *)a8.i8;
      v30 += 2;
    }
    while (v30 < result);
    v21 = 1;
    goto LABEL_14;
  }
  return result;
}

uint64_t sub_22315DB90(uint64_t result, uint64_t a2, __int128 *_X2, uint64_t a4, _OWORD *a5)
{
  uint64_t v5;
  __int128 *v7;
  __int128 v8;
  __int128 v9;

  v5 = a2;
  _X3 = 4 * a4;
  v7 = _X2 + 2;
  do
  {
    do
    {
      v8 = *_X2;
      v9 = _X2[1];
      _X2 = (__int128 *)((char *)_X2 + _X3);
      __asm { PRFM            #1, [X2,X3,LSL#3] }
      --a2;
      *a5 = v8;
      a5[1] = v9;
      a5 += 2;
    }
    while (a2);
    a2 = v5;
    result -= 8;
    _X2 = v7;
    v7 += 2;
  }
  while (result);
  return result;
}

uint64_t sub_22315DBCC(uint64_t result, uint64_t a2, unint64_t *a3, uint64_t a4, float32x4_t *a5, float a6, double a7, float32x4_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t *v11;
  unint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t *v15;
  int32x4_t v16;
  unint64_t v17;
  uint64_t v18;
  float32x4_t *v19;
  BOOL v20;
  float32x4_t v21;
  uint64_t v22;
  float32x4_t *v23;
  float32x4_t *v24;
  uint64_t v25;
  float32x4_t v26;

  if (result >= 1)
  {
    v8 = 4 * a4;
    if (a2 < 4)
    {
      v9 = 0;
    }
    else
    {
      v9 = 0;
      v10 = a3;
      do
      {
        v11 = (uint64_t *)((char *)v10 + v8);
        v12 = &v10[a4];
        v13 = (uint64_t *)((char *)v10 + 12 * a4);
        v14 = result - 1;
        v15 = v10;
        if (result != 1)
        {
          do
          {
            a8.i64[0] = *v15++;
            v16.i64[0] = *v11++;
            v17 = *v12++;
            v18 = *v13++;
            a8.i64[1] = v17;
            v16.i64[1] = v18;
            *a5 = vmulq_n_f32((float32x4_t)vtrn1q_s32((int32x4_t)a8, v16), a6);
            v19 = a5 + 1;
            *v19 = vmulq_n_f32((float32x4_t)vtrn2q_s32((int32x4_t)a8, v16), a6);
            a5 = v19 + 1;
            v20 = v14 <= 2;
            v14 -= 2;
          }
          while (!v20);
        }
        if (!v14)
        {
          v21.i32[0] = *(_DWORD *)v15;
          v21.i32[1] = *(_DWORD *)v11;
          v21.i32[2] = *(_DWORD *)v12;
          v21.i32[3] = *(_DWORD *)v13;
          a8 = vmulq_n_f32(v21, a6);
          *a5++ = a8;
        }
        v9 += 4;
        v10 += 2 * a4;
      }
      while (v9 < a2 - 3);
    }
    v22 = a2 - v9;
    if (a2 > v9)
    {
      v23 = (float32x4_t *)((char *)a3 + 4 * v9 * a4);
      do
      {
        v24 = v23;
        v25 = result - 3;
        if (result > 3)
        {
          do
          {
            v26 = *v24++;
            a8 = vmulq_n_f32(v26, a6);
            *a5++ = a8;
            v20 = v25 <= 4;
            v25 -= 4;
          }
          while (!v20);
        }
        if (v25 != -2)
        {
          if (v25)
          {
            if (v25 != -1)
              goto LABEL_24;
          }
          else
          {
            a8.i32[2] = v24->i32[2];
          }
          a8.i32[1] = v24->i32[1];
        }
        a8.i32[0] = v24->i32[0];
        a8 = vmulq_n_f32(a8, a6);
        *a5++ = a8;
LABEL_24:
        v23 = (float32x4_t *)((char *)v23 + v8);
        --v22;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t sub_22315DD08(uint64_t result, uint64_t a2, float32x4_t *a3, uint64_t a4, __n128 *a5, float a6, double a7, float32x4_t a8)
{
  uint64_t v8;
  uint64_t v9;
  float32x4_t *v10;
  float32x4_t *v11;
  uint64_t v12;
  float32x4_t v13;
  uint64_t v14;
  __int32 *v15;
  __int32 *v16;
  uint64_t v17;
  __int32 *v18;
  float32x4_t v19;
  __int32 *v20;
  __int32 v21;
  __int32 *v22;
  __int32 v23;
  __int32 v24;
  BOOL v25;

  if (result >= 1)
  {
    v8 = a4;
    if (a2 < 4)
    {
      v9 = 0;
    }
    else
    {
      v9 = 0;
      v10 = a3;
      do
      {
        v11 = v10;
        v12 = result;
        do
        {
          v13 = *v11;
          v11 = (float32x4_t *)((char *)v11 + v8 * 4);
          a8 = vmulq_n_f32(v13, a6);
          *a5++ = (__n128)a8;
          --v12;
        }
        while (v12);
        v9 += 4;
        ++v10;
      }
      while (v9 < a2 - 3);
    }
    v14 = a2 - v9;
    if (a2 > v9)
    {
      v15 = (__int32 *)&a3[(unint64_t)v9 / 4];
      do
      {
        v16 = v15;
        v17 = result - 3;
        if (result > 3)
        {
          do
          {
            v19.i32[0] = *v16;
            v18 = &v16[v8];
            v21 = *v18;
            v20 = &v18[v8];
            v19.i32[1] = v21;
            v23 = *v20;
            v22 = &v20[v8];
            v19.i32[2] = v23;
            v24 = *v22;
            v16 = &v22[v8];
            v19.i32[3] = v24;
            a8 = vmulq_n_f32(v19, a6);
            *a5++ = (__n128)a8;
            v25 = v17 <= 4;
            v17 -= 4;
          }
          while (!v25);
        }
        if (v17 != -2)
        {
          if (v17)
          {
            if (v17 != -1)
              goto LABEL_21;
          }
          else
          {
            a8.i32[2] = v16[2 * a4];
          }
          a8.i32[1] = v16[a4];
        }
        a8.i32[0] = *v16;
        a8 = vmulq_n_f32(a8, a6);
        *a5++ = (__n128)a8;
LABEL_21:
        ++v15;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t sub_22315DDF0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  __int128 *v9;
  __int128 v10;
  uint64_t v11;
  _DWORD *i;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;

  v5 = a4;
  if (result < 8)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    v7 = (__int128 *)(a3 + 16);
    do
    {
      v8 = a2;
      v9 = v7;
      if (a2 >= 1)
      {
        do
        {
          v10 = *v9;
          *(_OWORD *)a5 = *(v9 - 1);
          *(_OWORD *)(a5 + 16) = v10;
          a5 += 32;
          v9 = (__int128 *)((char *)v9 + v5 * 4);
          --v8;
        }
        while (v8);
      }
      v6 += 8;
      v7 += 2;
    }
    while (v6 < result - 7);
  }
  if (v6 < result)
  {
    if (a2 <= 0)
      v11 = -(-a2 & 3);
    else
      v11 = a2 & 3;
    for (i = (_DWORD *)(a3 + 4 * v6); ; ++i)
    {
      if (a2 < 4)
      {
        v21 = (_DWORD *)(a3 + 4 * v6);
      }
      else
      {
        v13 = 0;
        v14 = i;
        do
        {
          v15 = v14;
          LODWORD(v16) = *v14;
          v17 = &v14[v5];
          HIDWORD(v16) = *v17;
          v18 = &v17[v5];
          LODWORD(v19) = *v18;
          v20 = &v18[v5];
          HIDWORD(v19) = *v20;
          v14 = &v20[v5];
          *(_QWORD *)a5 = v16;
          *(_QWORD *)(a5 + 8) = v19;
          a5 += 16;
          v13 += 4;
        }
        while (v13 < a2 - 3);
        v21 = &v15[4 * a4];
      }
      if (v11 == 1)
        goto LABEL_23;
      if (v11 == 2)
        goto LABEL_22;
      if (v11 == 3)
        break;
LABEL_24:
      if (++v6 == result)
        return result;
    }
    *(_DWORD *)(a5 + 8) = v21[2 * a4];
LABEL_22:
    *(_DWORD *)(a5 + 4) = v21[a4];
LABEL_23:
    *(_DWORD *)a5 = *v21;
    a5 += 16;
    goto LABEL_24;
  }
  return result;
}

uint64_t sub_22315DEF8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((result & 7) != 0)
    return sub_22315DDF0(result, a2, a3, a4, a5);
  else
    return sub_22315DB90(result, a2, (__int128 *)a3, a4, (_OWORD *)a5);
}

uint64_t sub_22315DF08(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4, int32x4_t *a5)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  int32x4_t v16;
  int32x4_t v17;
  uint64_t v18;
  uint64_t v19;
  int32x4_t v20;
  int32x4_t v21;
  uint64_t v22;
  uint64_t v23;
  int32x4_t *v24;
  BOOL v25;
  int32x4_t v26;
  int32x4_t v27;
  uint64_t v28;
  int32x4_t *v29;
  uint64_t v30;
  int32x4_t v31;

  if (result < 8)
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    v6 = (uint64_t *)((char *)a3 + 28 * a4);
    v7 = &a3[3 * a4];
    v8 = 8 * a4 - a2;
    v9 = a3;
    v10 = (uint64_t *)((char *)a3 + 20 * a4);
    v11 = &a3[2 * a4];
    v12 = (uint64_t *)((char *)a3 + 12 * a4);
    v13 = &a3[a4];
    v14 = (uint64_t *)((char *)a3 + 4 * a4);
    do
    {
      v15 = a2 - 1;
      if (a2 > 1)
      {
        do
        {
          v16.i64[0] = *v9++;
          v17.i64[0] = *v14++;
          v18 = *v13++;
          v19 = *v12++;
          v20.i64[0] = *v11++;
          v21.i64[0] = *v10++;
          v22 = *v7++;
          v23 = *v6++;
          v16.i64[1] = v18;
          v17.i64[1] = v19;
          v20.i64[1] = v22;
          v21.i64[1] = v23;
          *a5 = vtrn1q_s32(v16, v17);
          a5[1] = vtrn1q_s32(v20, v21);
          v24 = a5 + 2;
          *v24 = vtrn2q_s32(v16, v17);
          v24[1] = vtrn2q_s32(v20, v21);
          a5 = v24 + 2;
          v25 = v15 <= 2;
          v15 -= 2;
        }
        while (!v25);
      }
      if (!v15)
      {
        v26.i32[0] = *(_DWORD *)v9;
        v9 = (uint64_t *)((char *)v9 + 4);
        v26.i32[1] = *(_DWORD *)v14;
        v14 = (uint64_t *)((char *)v14 + 4);
        v26.i32[2] = *(_DWORD *)v13;
        v13 = (uint64_t *)((char *)v13 + 4);
        v26.i32[3] = *(_DWORD *)v12;
        v12 = (uint64_t *)((char *)v12 + 4);
        v27.i32[0] = *(_DWORD *)v11;
        v11 = (uint64_t *)((char *)v11 + 4);
        v27.i32[1] = *(_DWORD *)v10;
        v10 = (uint64_t *)((char *)v10 + 4);
        v27.i32[2] = *(_DWORD *)v7;
        v7 = (uint64_t *)((char *)v7 + 4);
        v27.i32[3] = *(_DWORD *)v6;
        v6 = (uint64_t *)((char *)v6 + 4);
        *a5 = v26;
        a5[1] = v27;
        a5 += 2;
      }
      v9 = (uint64_t *)((char *)v9 + 4 * v8);
      v14 = (uint64_t *)((char *)v14 + 4 * v8);
      v13 = (uint64_t *)((char *)v13 + 4 * v8);
      v12 = (uint64_t *)((char *)v12 + 4 * v8);
      v11 = (uint64_t *)((char *)v11 + 4 * v8);
      v10 = (uint64_t *)((char *)v10 + 4 * v8);
      v7 = (uint64_t *)((char *)v7 + 4 * v8);
      v5 += 8;
      v6 = (uint64_t *)((char *)v6 + 4 * v8);
    }
    while (v5 < result - 7);
  }
  if (v5 < result)
  {
    if (a2 <= 0)
      v28 = -(-a2 & 3);
    else
      v28 = a2 & 3;
    while (1)
    {
      v29 = (int32x4_t *)((char *)a3 + 4 * v5 * a4);
      if (a2 >= 4)
      {
        v30 = 0;
        do
        {
          v31 = *v29++;
          *a5++ = v31;
          v30 += 4;
        }
        while (v30 < a2 - 3);
      }
      if (v28 == 1)
        goto LABEL_23;
      if (v28 == 2)
        goto LABEL_22;
      if (v28 == 3)
        break;
LABEL_24:
      if (++v5 == result)
        return result;
    }
    a5->i32[2] = v29->i32[2];
LABEL_22:
    a5->i32[1] = v29->i32[1];
LABEL_23:
    a5->i32[0] = v29->i32[0];
    ++a5;
    goto LABEL_24;
  }
  return result;
}

uint64_t sub_22315E08C(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4, int32x4_t *a5)
{
  if ((result & 7) != 0)
    return sub_22315DF08(result, a2, a3, a4, a5);
  else
    return sub_2231633E0(result, a2, a3, a4, a5);
}

float *sub_22315E0A0(float32x4_t *a1, uint64_t a2, float32x4_t *_X2, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int8x16_t v6;
  uint64_t v8;
  uint64_t v9;
  float *result;
  float32x4_t *v11;
  uint64_t v12;
  float32x4_t *v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  uint64_t v18;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t *v51;
  _OWORD *v52;
  float32x4_t *v53;
  float32x4_t *v54;
  float32x4_t *v55;

  v8 = a5 & 7;
  v9 = a5 - v8;
  if (v9)
  {
    v11 = _X2;
    v12 = 4 * a4;
    v14 = *a1;
    v15 = a1[1];
    v13 = a1 + 2;
    v16 = *v13;
    v17 = v13[1];
    result = v13[2].f32;
    do
    {
      v18 = a6;
      v6 = veorq_s8(v6, v6);
      __asm { PRFM            #1, [X2,#0x40] }
      v25 = *_X2;
      v26 = _X2[1];
      _X2 = (float32x4_t *)((char *)_X2 + v12);
      __asm { PRFM            #1, [X2,#0x40] }
      v29 = *_X2;
      v30 = _X2[1];
      _X2 = (float32x4_t *)((char *)_X2 + v12);
      __asm { PRFM            #1, [X2,#0x40] }
      v33 = *_X2;
      v34 = _X2[1];
      _X2 = (float32x4_t *)((char *)_X2 + v12);
      __asm { PRFM            #1, [X2,#0x40] }
      v36 = *_X2;
      v37 = _X2[1];
      _X2 = v11 + 2;
      v38 = (float32x4_t)v6;
      v39 = (float32x4_t)v6;
      v40 = (float32x4_t)v6;
      v41 = (float32x4_t)v6;
      v42 = (float32x4_t)v6;
      v43 = (float32x4_t)v6;
      v44 = (float32x4_t)v6;
      v46 = *(float32x4_t *)a2;
      v47 = *(float32x4_t *)(a2 + 16);
      _X6 = (_OWORD *)(a2 + 32);
      __asm
      {
        PRFM            #1, [X6]
        PRFM            #1, [X6,#0x20]
        PRFM            #1, [X6,#0x40]
      }
      if ((a6 & 1) == 0)
        goto LABEL_13;
      v25 = vmlaq_n_f32(v25, v14, v46.f32[0]);
      v29 = vmlaq_lane_f32(v29, v14, *(float32x2_t *)v46.f32, 1);
      v33 = vmlaq_laneq_f32(v33, v14, v46, 2);
      v36 = vmlaq_laneq_f32(v36, v14, v46, 3);
      v14 = v16;
      v26 = vmlaq_n_f32(v26, v15, v46.f32[0]);
      v30 = vmlaq_lane_f32(v30, v15, *(float32x2_t *)v46.f32, 1);
      v34 = vmlaq_laneq_f32(v34, v15, v46, 2);
      v37 = vmlaq_laneq_f32(v37, v15, v46, 3);
      v15 = v17;
      v16 = *(float32x4_t *)result;
      v17 = *(float32x4_t *)(result + 4);
      result += 8;
      v46 = *(float32x4_t *)(a2 + 16);
      v47 = *(float32x4_t *)_X6;
      _X6 = (_OWORD *)(a2 + 48);
      v18 = a6 - 1;
      if (a6 > 1)
      {
LABEL_13:
        do
        {
          v25 = vmlaq_n_f32(v25, v14, v46.f32[0]);
          v29 = vmlaq_lane_f32(v29, v14, *(float32x2_t *)v46.f32, 1);
          v33 = vmlaq_laneq_f32(v33, v14, v46, 2);
          v36 = vmlaq_laneq_f32(v36, v14, v46, 3);
          v26 = vmlaq_n_f32(v26, v15, v46.f32[0]);
          v30 = vmlaq_lane_f32(v30, v15, *(float32x2_t *)v46.f32, 1);
          v34 = vmlaq_laneq_f32(v34, v15, v46, 2);
          v37 = vmlaq_laneq_f32(v37, v15, v46, 3);
          v14 = *(float32x4_t *)result;
          v15 = *(float32x4_t *)(result + 4);
          v51 = (float32x4_t *)(result + 8);
          v46 = *(float32x4_t *)_X6;
          v52 = _X6 + 1;
          v6 = (int8x16_t)vmlaq_n_f32((float32x4_t)v6, v16, v47.f32[0]);
          v39 = vmlaq_lane_f32(v39, v16, *(float32x2_t *)v47.f32, 1);
          v41 = vmlaq_laneq_f32(v41, v16, v47, 2);
          v43 = vmlaq_laneq_f32(v43, v16, v47, 3);
          v38 = vmlaq_n_f32(v38, v17, v47.f32[0]);
          v40 = vmlaq_lane_f32(v40, v17, *(float32x2_t *)v47.f32, 1);
          v42 = vmlaq_laneq_f32(v42, v17, v47, 2);
          v44 = vmlaq_laneq_f32(v44, v17, v47, 3);
          v16 = *v51;
          v17 = v51[1];
          result = v51[2].f32;
          v47 = *(float32x4_t *)v52;
          _X6 = v52 + 1;
          v18 -= 2;
        }
        while (v18);
        v25 = vaddq_f32(v25, (float32x4_t)v6);
        v26 = vaddq_f32(v26, v38);
        v29 = vaddq_f32(v29, v39);
        v30 = vaddq_f32(v30, v40);
        v33 = vaddq_f32(v33, v41);
        v34 = vaddq_f32(v34, v42);
        v36 = vaddq_f32(v36, v43);
        v37 = vaddq_f32(v37, v44);
      }
      *v11 = v25;
      v11[1] = v26;
      v53 = (float32x4_t *)((char *)v11 + v12);
      *v53 = v29;
      v53[1] = v30;
      v54 = (float32x4_t *)((char *)v53 + v12);
      *v54 = v33;
      v54[1] = v34;
      v55 = (float32x4_t *)((char *)v54 + v12);
      *v55 = v36;
      v55[1] = v37;
      v11 = _X2;
      v9 -= 8;
    }
    while (v9);
  }
  else
  {
    result = a1[4].f32;
  }
  if (v8)
    return sub_2231593E8(result - 16, (float32x4_t *)a2, (__int32 *)_X2, a4, v8, a6);
  return result;
}

void sub_22315E230(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, float32x4_t a19, float32x4_t a20,float32x4_t a21,float32x4_t a22,float32x4_t a23,float32x4_t a24,float32x4_t a25,float32x4_t a26,uint64_t a27,float32x2_t a28,float32x4_t a29,float32x4_t a30,float32x4_t a31,float32x4_t a32,uint64_t a33,float32x2_t a34,float32x4_t a35,float32x4_t a36,float32x4_t a37,char a38)
{
  uint64_t v38;
  uint64_t v39;
  float32x2_t *v40;
  uint64_t v41;
  float *v42;
  uint64_t v43;
  float32x4_t *v44;
  uint64_t v45;
  float v46;
  int32x2_t v47;
  float32x2_t *v48;
  __int128 v49;
  uint64_t v50;
  float32x4_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  float *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  float32x4_t *v69;
  uint64_t v70;
  float32x4_t *v71;
  uint64_t v72;
  uint64_t v73;
  float *v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  float *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  float32x4_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _DWORD *v95;
  int64_t v96;
  float v97;
  float v98;
  _BOOL4 v100;
  uint64_t v101;
  uint64_t v102;
  int64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  float *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  float32x4_t *v117;
  uint64_t v118;
  float32x4_t *v119;
  uint64_t v120;
  uint64_t v121;
  float *v122;
  int64_t v123;
  float v124;
  float v125;
  uint64_t v126;
  uint64_t v127;
  int64_t v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  float *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  float32x4_t *v142;
  uint64_t v143;
  float32x4_t *v144;
  uint64_t v145;
  uint64_t v146;
  float *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int64_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t *v156;
  _DWORD *v157;
  uint64_t v158;
  const float *v159;
  float32x4_t v160;
  uint64_t v161;
  float v162;
  float32x4_t *v163;
  float32x4_t v164;
  float32x4_t v165;
  uint64_t v166;
  float *v167;
  uint64_t m;
  int64_t v169;
  float v170;
  float v171;
  int64_t v172;
  float v173;
  float v174;
  uint64_t v175;
  float *v176;
  float *v177;
  float v178;
  float v179;
  float v180;
  int64_t v181;
  float32x2_t v182;
  float32x2_t v183;
  float32x2_t v184;
  float32x2_t v185;
  int64_t v186;
  float32x2_t v187;
  float32x2_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  int64_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t *v197;
  _DWORD *v198;
  uint64_t v199;
  const float *v200;
  float32x4_t v201;
  uint64_t v202;
  float v203;
  float32x4_t *v204;
  float32x4_t v205;
  float32x4_t v206;
  uint64_t v207;
  _DWORD *v208;
  uint64_t i;
  int64_t v210;
  float32x4_t v211;
  float32x4_t v212;
  uint64_t v213;
  float32x4_t *v214;
  float *v215;
  float32x4_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  float32x2_t *v220;
  _DWORD *v221;
  const float *v222;
  float32x2_t v223;
  uint64_t v224;
  float v225;
  float32x2_t *v226;
  float32x2_t v227;
  float32x2_t v228;
  float v229;
  uint64_t v230;
  float *v231;
  float *v232;
  int64_t v233;
  float32x2_t v234;
  float32x2_t v235;
  float32x2_t v236;
  float32x2_t v237;
  int64_t v238;
  float32x2_t v239;
  float32x2_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  int64_t v244;
  float32x4_t v245;
  float32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  float32x4_t *v249;
  _DWORD *v250;
  uint64_t v251;
  const float *v252;
  float32x4_t v253;
  uint64_t v254;
  float v255;
  float32x4_t *v256;
  float32x4_t v257;
  float32x4_t v258;
  uint64_t v259;
  float *v260;
  uint64_t j;
  int64_t v262;
  float32x4_t v263;
  float32x4_t v264;
  uint64_t v265;
  float32x4_t *v266;
  float *v267;
  float32x4_t v268;
  uint64_t v269;
  uint64_t v270;
  float32x2_t *v271;
  float *v272;
  float32x2_t v273;
  __int32 *v274;
  uint64_t v275;
  uint64_t v276;
  float32x2_t *v277;
  _DWORD *v278;
  const float *v279;
  float32x2_t v280;
  uint64_t v281;
  float v282;
  int64_t v283;
  float32x2_t v284;
  float32x2_t v285;
  uint64_t v286;
  float32x4_t v287;
  uint64_t v288;
  uint64_t v289;
  int64_t v290;
  float32x4_t v291;
  float32x4_t v292;
  float32x4_t v293;
  float32x4_t v294;
  float32x4_t *v295;
  _DWORD *v296;
  uint64_t v297;
  const float *v298;
  float32x4_t v299;
  uint64_t v300;
  float v301;
  float32x4_t *v302;
  float32x4_t v303;
  float32x4_t v304;
  uint64_t v305;
  float *v306;
  uint64_t k;
  int64_t v308;
  float32x4_t v309;
  float32x4_t v310;
  uint64_t v311;
  float *v312;
  float *v313;
  int64_t v314;
  float32x2_t v315;
  float32x2_t v316;
  float32x2_t v317;
  float32x2_t v318;
  uint64_t v319;
  float32x4_t *v320;
  float *v321;
  float32x4_t v322;
  uint64_t v323;
  uint64_t v324;
  float *v325;
  float *v326;
  int64_t v327;
  float32x2_t v328;
  float32x2_t v329;
  float32x2_t v330;
  float32x2_t v331;
  uint64_t v332;
  float32x2_t *v333;
  float *v334;
  uint64_t v335;
  float32x2_t v336;
  uint64_t v337;
  uint64_t v338;
  float32x2_t *v339;
  _DWORD *v340;
  const float *v341;
  float32x2_t v342;
  uint64_t v343;
  float v344;
  float32x2_t v345;
  uint64_t v346;
  float32x2_t *v347;
  float *v348;
  uint64_t v349;
  float32x2_t v350;
  uint64_t v351;
  uint64_t v352;
  float32x2_t *v353;
  _DWORD *v354;
  const float *v355;
  float32x2_t v356;
  uint64_t v357;
  float v358;
  float32x2_t v359;
  uint64_t v360;
  float32x4_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  float v365;
  float32x4_t *v366;
  float32x4_t *v367;
  float32x4_t *v368;
  float32x4_t *v369;
  uint64_t v370;
  uint64_t v371;
  __int128 vars0;
  float *v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  float32x4_t *v378;
  float32x4_t *v379;
  float32x4_t *v380;
  float32x4_t *v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  float32x2_t *v390;
  float32x2_t *v391;
  float32x2_t *v392;
  float32x2_t *v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;

  v38 = MEMORY[0x24BDAC7A8]();
  v373 = v42;
  v48 = v40;
  LODWORD(v49) = v51.i32[0];
  v50 = v38;
  STACK[0x1218] = *MEMORY[0x24BDAC8D0];
  v51.i32[0] = 1.0;
  v52 = v39 * v38;
  vars0 = v49;
  v370 = v38;
  v371 = v45;
  if (v46 != 1.0)
  {
    *(float *)v47.i32 = v46;
    if (v46 == 0.0)
    {
      if (v38 >= 16 && v52 >= 0x2000)
      {
        v75 = 0;
        v76 = 0;
        v77 = -v41 & v41;
        if (v77 >= 4)
          v77 = 4;
        v78 = __clz(v77) - 61;
        v79 = (1 << v78);
        v399 = v43 << v78;
        v403 = v41 << v78;
        v395 = 4 * v43;
        v80 = 4 * v41;
        v81 = v39 - 1;
        v363 = v45 << 12;
        v82 = 16 * v45;
        v83 = 4 * v45;
        v367 = v44;
        do
        {
          v379 = v44;
          v383 = v76;
          if (v50 - v76 >= 1024)
            v84 = 1024;
          else
            v84 = v50 - v76;
          v375 = v50 - v76;
          if (v50 - v76 >= 1)
          {
            v85 = v50 - (v75 << 10);
            if (v85 >= 1024)
              v85 = 1024;
            bzero((void *)((unint64_t)&a38 | 0x10), 4 * (v85 - (v85 != 0)) + 4);
          }
          v387 = v75;
          v391 = v48;
          v86 = (uint64_t)v48;
          v87 = v373;
          v88 = v79;
          do
          {
            v89 = (v81 + v88) / v79;
            if (!v89)
              break;
            v51 = sub_223161D5C(v84, v89, v86, v403, v87, v399, (unint64_t)&a38 | 0x10, v51);
            v87 = (float *)((char *)v87 + v395);
            v86 += v80;
            --v88;
          }
          while (v88);
          v50 = v370;
          if (v375 >= 1)
          {
            v90 = 0;
            v91 = v379;
            do
            {
              v92 = v84 - v90;
              v51 = vmulq_n_f32(*(float32x4_t *)(((unint64_t)&a38 | 0x10) + 4 * v90), *(float *)&vars0);
              if (v371 == 1 && v92 >= 4)
              {
                *(float32x4_t *)((char *)v367 + 4 * v383 * v371 + 4 * v90) = v51;
              }
              else
              {
                if (v92 >= 4)
                  v93 = 4;
                else
                  v93 = v84 - v90;
                v94 = (v93 + 4) & (v93 >> 63);
                if (v93 < 0)
                  v93 = 4;
                if (v94 < v93)
                {
                  v95 = (__int32 *)((char *)v91->i32 + v83 * v94);
                  do
                  {
                    a22 = v51;
                    *v95 = *(_DWORD *)((unint64_t)&a22 & 0xFFFFFFFFFFFFFFF3 | (4 * (v94++ & 3)));
                    v95 = (_DWORD *)((char *)v95 + v83);
                  }
                  while (v93 != v94);
                }
              }
              v90 += 4;
              v91 = (float32x4_t *)((char *)v91 + v82);
            }
            while (v90 < v84);
          }
          v76 = v383 + 1024;
          v75 = v387 + 1;
          v48 = v391 + 512;
          v44 = (float32x4_t *)((char *)v379 + v363);
        }
        while (v383 + 1024 < v370);
        return;
      }
      if (v38 < 1)
        return;
      if ((unint64_t)v38 < 4)
      {
        if ((unint64_t)v38 < 2)
        {
          if (v39 >= 2)
          {
            v125 = 0.0;
            v230 = 2;
            v231 = (float *)v40;
            v124 = 0.0;
            v232 = v42;
            do
            {
              v124 = v124 + (float)(*v231 * *v232);
              v125 = v125 + (float)(v231[v41] * v232[v43]);
              v230 += 2;
              v232 += 2 * v43;
              v231 += 2 * v41;
            }
            while (v230 <= v39);
            v123 = v39 & 0xFFFFFFFFFFFFFFFELL;
          }
          else
          {
            v123 = 0;
            v124 = 0.0;
            v125 = 0.0;
          }
          if (v123 < v39)
            v124 = v124 + (float)(v40->f32[v123 * v41] * v42[v123 * v43]);
          v180 = (float)(v125 + v124) * *(float *)&v49;
          goto LABEL_352;
        }
        if (v38 == 2)
        {
          if (v39 >= 2)
          {
            v188 = 0;
            v270 = 2;
            v271 = v40;
            v187 = 0;
            v272 = v42;
            do
            {
              v187 = vmla_n_f32(v187, *v271, *v272);
              v188 = vmla_n_f32(v188, *(float32x2_t *)((char *)v271 + 4 * v41), v272[v43]);
              v270 += 2;
              v272 += 2 * v43;
              v271 += v41;
            }
            while (v270 <= v39);
            v186 = v39 & 0xFFFFFFFFFFFFFFFELL;
          }
          else
          {
            v186 = 0;
            v187 = 0;
            v188 = 0;
          }
          if (v186 < v39)
            v187 = vmla_n_f32(v187, *(float32x2_t *)((char *)v40 + 4 * v186 * v41), v42[v186 * v43]);
          v273 = vmul_n_f32(vadd_f32(v188, v187), *(float *)&v49);
          v44->i32[0] = v273.i32[0];
          v274 = &v44->i32[v45];
          goto LABEL_313;
        }
        if (v39 >= 2)
        {
          v233 = v39 & 0xFFFFFFFFFFFFFFFELL;
          v237 = 0;
          v276 = 2;
          v277 = v40;
          v278 = v42;
          v236 = 0;
          v235 = 0;
          v234 = 0;
          v279 = v42;
          do
          {
            v280 = vld1_dup_f32(v279);
            v275 = 8 * v43;
            v279 = (const float *)((char *)v279 + v275);
            v237 = vmla_f32(v237, v280, *v277);
            v235 = vmla_f32(v235, v280, *(float32x2_t *)((char *)v277 + 4));
            v280.i32[0] = v278[v43];
            v234 = vmla_n_f32(v234, *(float32x2_t *)((char *)v277 + 4 * v41), v280.f32[0]);
            v236 = vmla_n_f32(v236, *(float32x2_t *)((char *)v277 + 4 * v41 + 4), v280.f32[0]);
            v276 += 2;
            v277 += v41;
            v278 = v279;
          }
          while (v276 <= v39);
        }
        else
        {
          v233 = 0;
          v234 = 0;
          v235 = 0;
          v236 = 0;
          v237 = 0;
        }
        if (v233 < v39)
        {
          v281 = 4 * v233 * v41;
          v282 = v42[v233 * v43];
          v237 = vmla_n_f32(v237, *(float32x2_t *)((char *)v40 + v281), v282);
          v235 = vmla_n_f32(v235, *(float32x2_t *)((char *)v40 + (v281 | 4)), v282);
        }
        v226 = (float32x2_t *)&v44->f32[v45];
        v44->i32[0] = vmul_n_f32(vadd_f32(v234, v237), *(float *)&v49).u32[0];
        v273 = vmul_n_f32(vadd_f32(v236, v235), *(float *)&v49);
        if (v45 != 1)
        {
          v226->i32[0] = v273.i32[0];
          v274 = (__int32 *)v226 + v45;
LABEL_313:
          *v274 = v273.i32[1];
          return;
        }
LABEL_311:
        *v226 = v273;
        return;
      }
      if (v38 == 4)
      {
        v50 = 4;
LABEL_227:
        if (v39 >= 2)
        {
          v212 = 0uLL;
          v213 = 2;
          v214 = (float32x4_t *)((char *)&v48[-2] + 4 * v50);
          v211 = 0uLL;
          v215 = v373;
          do
          {
            v211 = vmlaq_n_f32(v211, *v214, *v215);
            v212 = vmlaq_n_f32(v212, *(float32x4_t *)((char *)v214 + 4 * v41), v215[v43]);
            v213 += 2;
            v215 += 2 * v43;
            v214 = (float32x4_t *)((char *)v214 + 8 * v41);
          }
          while (v213 <= v39);
          v210 = v39 & 0xFFFFFFFFFFFFFFFELL;
        }
        else
        {
          v210 = 0;
          v211 = 0uLL;
          v212 = 0uLL;
        }
        if (v210 < v39)
          v211 = vmlaq_n_f32(v211, *(float32x4_t *)&v48[-2].f32[v50 + v210 * v41], v373[v210 * v43]);
        v216 = vmulq_n_f32(vaddq_f32(v212, v211), *(float *)&v49);
        v217 = 4 - v50;
        if (4 - v50 <= 3)
        {
          do
          {
            a23 = v216;
            v44->i32[0] = *(_DWORD *)((unint64_t)&a23 & 0xFFFFFFFFFFFFFFF3 | (4 * (v217++ & 3)));
            v44 = (float32x4_t *)((char *)v44 + 4 * v45);
          }
          while (v217 != 4);
        }
        return;
      }
      v190 = 4 * v45;
      while (1)
      {
        if (v50 >= 8)
          v191 = 8;
        else
          v191 = v50;
        if (v39 >= 2)
        {
          v196 = 0uLL;
          v197 = (float32x4_t *)v48;
          v198 = v373;
          v199 = 2;
          v195 = 0uLL;
          v194 = 0uLL;
          v193 = 0uLL;
          v200 = v373;
          do
          {
            v201 = vld1q_dup_f32(v200);
            v189 = 8 * v43;
            v200 = (const float *)((char *)v200 + v189);
            v196 = vmlaq_f32(v196, v201, *v197);
            v194 = vmlaq_f32(v194, v201, *(float32x4_t *)((char *)v197 + 4 * v191 - 16));
            v201.i32[0] = v198[v43];
            v193 = vmlaq_n_f32(v193, *(float32x4_t *)((char *)v197 + 4 * v41), v201.f32[0]);
            v195 = vmlaq_n_f32(v195, *(float32x4_t *)((char *)v197 + 4 * v41 + 4 * v191 - 16), v201.f32[0]);
            v199 += 2;
            v197 = (float32x4_t *)((char *)v197 + 8 * v41);
            v198 = v200;
          }
          while (v199 <= v39);
          v192 = v39 & 0xFFFFFFFFFFFFFFFELL;
        }
        else
        {
          v192 = 0;
          v193 = 0uLL;
          v194 = 0uLL;
          v195 = 0uLL;
          v196 = 0uLL;
        }
        v202 = v191 - 4;
        if (v192 < v39)
        {
          v203 = v373[v192 * v43];
          v196 = vmlaq_n_f32(v196, *(float32x4_t *)&v48->f32[v192 * v41], v203);
          v194 = vmlaq_n_f32(v194, *(float32x4_t *)&v48->f32[v192 * v41 + v202], v203);
        }
        v204 = (float32x4_t *)((char *)v44 + 4 * v202 * v45);
        v205 = vmulq_n_f32(vaddq_f32(v193, v196), *(float *)&v49);
        if (v45 == 1 && v191 == 8)
        {
          *v44 = v205;
          v206 = vmulq_n_f32(vaddq_f32(v195, v194), *(float *)&v49);
        }
        else
        {
          if (v191 >= 4)
            v207 = 0;
          else
            v207 = v191;
          if (v191 < 4)
            v202 = 4;
          if (v207 < v202)
          {
            v208 = (__int32 *)((char *)v44->i32 + v190 * v207);
            do
            {
              a25 = v205;
              *v208 = *(_DWORD *)((unint64_t)&a25 & 0xFFFFFFFFFFFFFFF3 | (4 * (v207++ & 3)));
              v208 = (_DWORD *)((char *)v208 + v190);
            }
            while (v202 != v207);
          }
          v206 = vmulq_n_f32(vaddq_f32(v195, v194), *(float *)&v49);
          if (v45 != 1)
          {
            for (i = 0; i != 4; ++i)
            {
              a24 = v206;
              v204->i32[0] = *(_DWORD *)((unint64_t)&a24 & 0xFFFFFFFFFFFFFFF3 | (4 * (i & 3)));
              v204 = (float32x4_t *)((char *)v204 + v190);
            }
            goto LABEL_225;
          }
        }
        *v204 = v206;
LABEL_225:
        v48 = (float32x2_t *)((char *)v48 + 4 * v191);
        v44 = (float32x4_t *)((char *)v44 + 4 * v191 * v45);
        v50 -= v191;
        if (v50 <= 4)
        {
          if (v50 < 1)
            return;
          goto LABEL_227;
        }
      }
    }
    v100 = (v52 & 0xFFFFFFFFFFFFE000) != 0 && v38 > 15;
    v51.i32[0] = -1.0;
    if (v46 == -1.0)
    {
      if (v100)
      {
        v101 = 0;
        v102 = 0;
        v103 = -v41 & v41;
        if (v103 >= 4)
          v103 = 4;
        v104 = __clz(v103) - 61;
        v105 = (1 << v104);
        v400 = v43 << v104;
        v404 = v41 << v104;
        v396 = 4 * v43;
        v106 = 4 * v41;
        v107 = v39 - 1;
        v364 = v45 << 12;
        v108 = 16 * v45;
        v109 = 4 * v45;
        v368 = v44;
        do
        {
          v380 = v44;
          v384 = v102;
          if (v50 - v102 >= 1024)
            v110 = 1024;
          else
            v110 = v50 - v102;
          v376 = v50 - v102;
          if (v50 - v102 >= 1)
          {
            v111 = v50 - (v101 << 10);
            if (v111 >= 1024)
              v111 = 1024;
            bzero((void *)((unint64_t)&a38 | 0x10), 4 * (v111 - (v111 != 0)) + 4);
          }
          v388 = v101;
          v392 = v48;
          v112 = (uint64_t)v48;
          v113 = v373;
          v114 = v105;
          do
          {
            v115 = (v107 + v114) / v105;
            if (!v115)
              break;
            v51 = sub_223161D5C(v110, v115, v112, v404, v113, v400, (unint64_t)&a38 | 0x10, v51);
            v113 = (float *)((char *)v113 + v396);
            v112 += v106;
            --v114;
          }
          while (v114);
          v50 = v370;
          if (v376 >= 1)
          {
            v116 = 0;
            v117 = v380;
            do
            {
              v118 = v110 - v116;
              v51 = vmulq_n_f32(*(float32x4_t *)(((unint64_t)&a38 | 0x10) + 4 * v116), *(float *)&vars0);
              if (v371 == 1 && v118 >= 4)
              {
                v119 = (float32x4_t *)((char *)v368 + 4 * v384 * v371 + 4 * v116);
                v51 = vsubq_f32(v51, *v119);
                *v119 = v51;
              }
              else
              {
                if (v118 >= 4)
                  v120 = 4;
                else
                  v120 = v110 - v116;
                v121 = (v120 + 4) & (v120 >> 63);
                if (v120 < 0)
                  v120 = 4;
                if (v121 < v120)
                {
                  v122 = (float *)((char *)v117->f32 + v109 * v121);
                  do
                  {
                    a26 = v51;
                    *v122 = *(float *)((unint64_t)&a26 & 0xFFFFFFFFFFFFFFF3 | (4 * (v121++ & 3))) - *v122;
                    v122 = (float *)((char *)v122 + v109);
                  }
                  while (v120 != v121);
                }
              }
              v116 += 4;
              v117 = (float32x4_t *)((char *)v117 + v108);
            }
            while (v116 < v110);
          }
          v102 = v384 + 1024;
          v101 = v388 + 1;
          v48 = v392 + 512;
          v44 = (float32x4_t *)((char *)v380 + v364);
        }
        while (v384 + 1024 < v370);
        return;
      }
      if (v38 < 1)
        return;
      if ((unint64_t)v38 < 4)
      {
        if ((unint64_t)v38 < 2)
        {
          if (v39 >= 2)
          {
            v171 = 0.0;
            v311 = 2;
            v312 = (float *)v40;
            v170 = 0.0;
            v313 = v42;
            do
            {
              v170 = v170 + (float)(*v312 * *v313);
              v171 = v171 + (float)(v312[v41] * v313[v43]);
              v311 += 2;
              v313 += 2 * v43;
              v312 += 2 * v41;
            }
            while (v311 <= v39);
            v169 = v39 & 0xFFFFFFFFFFFFFFFELL;
          }
          else
          {
            v169 = 0;
            v170 = 0.0;
            v171 = 0.0;
          }
          if (v169 < v39)
            v170 = v170 + (float)(v40->f32[v169 * v41] * v42[v169 * v43]);
          v180 = -(float)(v44->f32[0] - (float)(*(float *)&v49 * (float)(v171 + v170)));
          goto LABEL_352;
        }
        if (v38 == 2)
        {
          if (v39 >= 2)
          {
            v240 = 0;
            v332 = 2;
            v333 = v40;
            v239 = 0;
            v334 = v42;
            do
            {
              v239 = vmla_n_f32(v239, *v333, *v334);
              v240 = vmla_n_f32(v240, *(float32x2_t *)((char *)v333 + 4 * v41), v334[v43]);
              v332 += 2;
              v334 += 2 * v43;
              v333 += v41;
            }
            while (v332 <= v39);
            v238 = v39 & 0xFFFFFFFFFFFFFFFELL;
          }
          else
          {
            v238 = 0;
            v239 = 0;
            v240 = 0;
          }
          if (v238 < v39)
            v239 = vmla_n_f32(v239, *(float32x2_t *)((char *)v40 + 4 * v238 * v41), v42[v238 * v43]);
          v335 = 0;
          v336 = vmul_n_f32(vadd_f32(v240, v239), *(float *)&v49);
          do
          {
            a28 = v336;
            v44->f32[0] = *(float *)((unint64_t)&a28 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v335++ & 1))) - v44->f32[0];
            v44 = (float32x4_t *)((char *)v44 + 4 * v45);
          }
          while (v335 != 2);
          return;
        }
        if (v39 >= 2)
        {
          v314 = v39 & 0xFFFFFFFFFFFFFFFELL;
          v318 = 0;
          v338 = 2;
          v339 = v40;
          v340 = v42;
          v317 = 0;
          v316 = 0;
          v315 = 0;
          v341 = v42;
          do
          {
            v342 = vld1_dup_f32(v341);
            v337 = 8 * v43;
            v341 = (const float *)((char *)v341 + v337);
            v318 = vmla_f32(v318, v342, *v339);
            v316 = vmla_f32(v316, v342, *(float32x2_t *)((char *)v339 + 4));
            v342.i32[0] = v340[v43];
            v315 = vmla_n_f32(v315, *(float32x2_t *)((char *)v339 + 4 * v41), v342.f32[0]);
            v317 = vmla_n_f32(v317, *(float32x2_t *)((char *)v339 + 4 * v41 + 4), v342.f32[0]);
            v338 += 2;
            v339 += v41;
            v340 = v341;
          }
          while (v338 <= v39);
        }
        else
        {
          v314 = 0;
          v315 = 0;
          v316 = 0;
          v317 = 0;
          v318 = 0;
        }
        if (v314 < v39)
        {
          v343 = 4 * v314 * v41;
          v344 = v42[v314 * v43];
          v318 = vmla_n_f32(v318, *(float32x2_t *)((char *)v40 + v343), v344);
          v316 = vmla_n_f32(v316, *(float32x2_t *)((char *)v40 + (v343 | 4)), v344);
        }
        v226 = (float32x2_t *)&v44->f32[v45];
        v44->f32[0] = vmul_n_f32(vadd_f32(v315, v318), *(float *)&v49).f32[0] - v44->f32[0];
        v345 = vmul_n_f32(vadd_f32(v317, v316), *(float *)&v49);
        if (v45 == 1)
        {
          v228 = vsub_f32(v345, *v226);
          goto LABEL_246;
        }
        v226->f32[0] = v345.f32[0] - v226->f32[0];
        v229 = v345.f32[1] - v226->f32[v45];
LABEL_248:
        v226->f32[v45] = v229;
        return;
      }
      if (v38 == 4)
      {
        v50 = 4;
LABEL_290:
        if (v39 >= 2)
        {
          v264 = 0uLL;
          v265 = 2;
          v266 = (float32x4_t *)((char *)&v48[-2] + 4 * v50);
          v263 = 0uLL;
          v267 = v373;
          do
          {
            v263 = vmlaq_n_f32(v263, *v266, *v267);
            v264 = vmlaq_n_f32(v264, *(float32x4_t *)((char *)v266 + 4 * v41), v267[v43]);
            v265 += 2;
            v267 += 2 * v43;
            v266 = (float32x4_t *)((char *)v266 + 8 * v41);
          }
          while (v265 <= v39);
          v262 = v39 & 0xFFFFFFFFFFFFFFFELL;
        }
        else
        {
          v262 = 0;
          v263 = 0uLL;
          v264 = 0uLL;
        }
        if (v262 < v39)
          v263 = vmlaq_n_f32(v263, *(float32x4_t *)&v48[-2].f32[v50 + v262 * v41], v373[v262 * v43]);
        v268 = vmulq_n_f32(vaddq_f32(v264, v263), *(float *)&v49);
        v269 = 4 - v50;
        if (4 - v50 <= 3)
        {
          do
          {
            a29 = v268;
            v44->f32[0] = *(float *)((unint64_t)&a29 & 0xFFFFFFFFFFFFFFF3 | (4 * (v269++ & 3))) - v44->f32[0];
            v44 = (float32x4_t *)((char *)v44 + 4 * v45);
          }
          while (v269 != 4);
        }
        return;
      }
      v242 = 4 * v45;
      while (1)
      {
        if (v50 >= 8)
          v243 = 8;
        else
          v243 = v50;
        if (v39 >= 2)
        {
          v248 = 0uLL;
          v249 = (float32x4_t *)v48;
          v250 = v373;
          v251 = 2;
          v247 = 0uLL;
          v246 = 0uLL;
          v245 = 0uLL;
          v252 = v373;
          do
          {
            v253 = vld1q_dup_f32(v252);
            v241 = 8 * v43;
            v252 = (const float *)((char *)v252 + v241);
            v248 = vmlaq_f32(v248, v253, *v249);
            v246 = vmlaq_f32(v246, v253, *(float32x4_t *)((char *)v249 + 4 * v243 - 16));
            v253.i32[0] = v250[v43];
            v245 = vmlaq_n_f32(v245, *(float32x4_t *)((char *)v249 + 4 * v41), v253.f32[0]);
            v247 = vmlaq_n_f32(v247, *(float32x4_t *)((char *)v249 + 4 * v41 + 4 * v243 - 16), v253.f32[0]);
            v251 += 2;
            v249 = (float32x4_t *)((char *)v249 + 8 * v41);
            v250 = v252;
          }
          while (v251 <= v39);
          v244 = v39 & 0xFFFFFFFFFFFFFFFELL;
        }
        else
        {
          v244 = 0;
          v245 = 0uLL;
          v246 = 0uLL;
          v247 = 0uLL;
          v248 = 0uLL;
        }
        v254 = v243 - 4;
        if (v244 < v39)
        {
          v255 = v373[v244 * v43];
          v248 = vmlaq_n_f32(v248, *(float32x4_t *)&v48->f32[v244 * v41], v255);
          v246 = vmlaq_n_f32(v246, *(float32x4_t *)&v48->f32[v244 * v41 + v254], v255);
        }
        v256 = (float32x4_t *)((char *)v44 + 4 * v254 * v45);
        v257 = vmulq_n_f32(vaddq_f32(v245, v248), *(float *)&v49);
        if (v45 == 1 && v243 == 8)
        {
          *v44 = vsubq_f32(v257, *v44);
          v258 = vmulq_n_f32(vaddq_f32(v247, v246), *(float *)&v49);
        }
        else
        {
          if (v243 >= 4)
            v259 = 0;
          else
            v259 = v243;
          if (v243 < 4)
            v254 = 4;
          if (v259 < v254)
          {
            v260 = (float *)((char *)v44->f32 + v242 * v259);
            do
            {
              a31 = v257;
              *v260 = *(float *)((unint64_t)&a31 & 0xFFFFFFFFFFFFFFF3 | (4 * (v259++ & 3))) - *v260;
              v260 = (float *)((char *)v260 + v242);
            }
            while (v254 != v259);
          }
          v258 = vmulq_n_f32(vaddq_f32(v247, v246), *(float *)&v49);
          if (v45 != 1)
          {
            for (j = 0; j != 4; ++j)
            {
              a30 = v258;
              v256->f32[0] = *(float *)((unint64_t)&a30 & 0xFFFFFFFFFFFFFFF3 | (4 * (j & 3))) - v256->f32[0];
              v256 = (float32x4_t *)((char *)v256 + v242);
            }
            goto LABEL_288;
          }
        }
        *v256 = vsubq_f32(v258, *v256);
LABEL_288:
        v48 = (float32x2_t *)((char *)v48 + 4 * v243);
        v44 = (float32x4_t *)((char *)v44 + 4 * v243 * v45);
        v50 -= v243;
        if (v50 <= 4)
        {
          if (v50 < 1)
            return;
          goto LABEL_290;
        }
      }
    }
    if (v100)
    {
      v126 = 0;
      v127 = 0;
      v128 = -v41 & v41;
      if (v128 >= 4)
        v128 = 4;
      v129 = __clz(v128) - 61;
      v130 = (1 << v129);
      v401 = v43 << v129;
      v405 = v41 << v129;
      v397 = 4 * v43;
      v131 = 4 * v41;
      v132 = v39 - 1;
      v360 = v45 << 12;
      v133 = 16 * v45;
      v134 = 4 * v45;
      v369 = v44;
      v361 = (float32x4_t)vdupq_lane_s32(v47, 0);
      v365 = v46;
      do
      {
        v381 = v44;
        v385 = v127;
        if (v50 - v127 >= 1024)
          v135 = 1024;
        else
          v135 = v50 - v127;
        v377 = v50 - v127;
        if (v50 - v127 >= 1)
        {
          v136 = v50 - (v126 << 10);
          if (v136 >= 1024)
            v136 = 1024;
          bzero((void *)((unint64_t)&a38 | 0x10), 4 * (v136 - (v136 != 0)) + 4);
        }
        v389 = v126;
        v393 = v48;
        v137 = (uint64_t)v48;
        v138 = v373;
        v139 = v130;
        do
        {
          v140 = (v132 + v139) / v130;
          if (!v140)
            break;
          v51 = sub_223161D5C(v135, v140, v137, v405, v138, v401, (unint64_t)&a38 | 0x10, v51);
          v138 = (float *)((char *)v138 + v397);
          v137 += v131;
          --v139;
        }
        while (v139);
        v50 = v370;
        if (v377 >= 1)
        {
          v141 = 0;
          v142 = v381;
          do
          {
            v143 = v135 - v141;
            v51 = vmulq_n_f32(*(float32x4_t *)(((unint64_t)&a38 | 0x10) + 4 * v141), *(float *)&vars0);
            if (v371 == 1 && v143 >= 4)
            {
              v144 = (float32x4_t *)((char *)v369 + 4 * v385 * v371 + 4 * v141);
              v51 = vmlaq_f32(v51, *v144, v361);
              *v144 = v51;
            }
            else
            {
              if (v143 >= 4)
                v145 = 4;
              else
                v145 = v135 - v141;
              v146 = (v145 + 4) & (v145 >> 63);
              if (v145 < 0)
                v145 = 4;
              if (v146 < v145)
              {
                v147 = (float *)((char *)v142->f32 + v134 * v146);
                do
                {
                  a32 = v51;
                  *v147 = *(float *)((unint64_t)&a32 & 0xFFFFFFFFFFFFFFF3 | (4 * (v146++ & 3)))
                        + (float)(v365 * *v147);
                  v147 = (float *)((char *)v147 + v134);
                }
                while (v145 != v146);
              }
            }
            v141 += 4;
            v142 = (float32x4_t *)((char *)v142 + v133);
          }
          while (v141 < v135);
        }
        v127 = v385 + 1024;
        v126 = v389 + 1;
        v48 = v393 + 512;
        v44 = (float32x4_t *)((char *)v381 + v360);
      }
      while (v385 + 1024 < v370);
      return;
    }
    if (v38 < 1)
      return;
    if ((unint64_t)v38 < 4)
    {
      if ((unint64_t)v38 < 2)
      {
        if (v39 >= 2)
        {
          v174 = 0.0;
          v324 = 2;
          v325 = (float *)v40;
          v173 = 0.0;
          v326 = v42;
          do
          {
            v173 = v173 + (float)(*v325 * *v326);
            v174 = v174 + (float)(v325[v41] * v326[v43]);
            v324 += 2;
            v326 += 2 * v43;
            v325 += 2 * v41;
          }
          while (v324 <= v39);
          v172 = v39 & 0xFFFFFFFFFFFFFFFELL;
        }
        else
        {
          v172 = 0;
          v173 = 0.0;
          v174 = 0.0;
        }
        if (v172 < v39)
          v173 = v173 + (float)(v40->f32[v172 * v41] * v42[v172 * v43]);
        v178 = v174 + v173;
        v179 = v44->f32[0] * *(float *)v47.i32;
        goto LABEL_194;
      }
      if (v38 == 2)
      {
        if (v39 >= 2)
        {
          v285 = 0;
          v346 = 2;
          v347 = v40;
          v284 = 0;
          v348 = v42;
          do
          {
            v284 = vmla_n_f32(v284, *v347, *v348);
            v285 = vmla_n_f32(v285, *(float32x2_t *)((char *)v347 + 4 * v41), v348[v43]);
            v346 += 2;
            v348 += 2 * v43;
            v347 += v41;
          }
          while (v346 <= v39);
          v283 = v39 & 0xFFFFFFFFFFFFFFFELL;
        }
        else
        {
          v283 = 0;
          v284 = 0;
          v285 = 0;
        }
        if (v283 < v39)
          v284 = vmla_n_f32(v284, *(float32x2_t *)((char *)v40 + 4 * v283 * v41), v42[v283 * v43]);
        v349 = 0;
        v350 = vmul_n_f32(vadd_f32(v285, v284), *(float *)&v49);
        do
        {
          a34 = v350;
          v44->f32[0] = *(float *)((unint64_t)&a34 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v349++ & 1)))
                      + (float)(*(float *)v47.i32 * v44->f32[0]);
          v44 = (float32x4_t *)((char *)v44 + 4 * v45);
        }
        while (v349 != 2);
        return;
      }
      if (v39 >= 2)
      {
        v327 = v39 & 0xFFFFFFFFFFFFFFFELL;
        v331 = 0;
        v352 = 2;
        v353 = v40;
        v354 = v42;
        v330 = 0;
        v329 = 0;
        v328 = 0;
        v355 = v42;
        do
        {
          v356 = vld1_dup_f32(v355);
          v351 = 8 * v43;
          v355 = (const float *)((char *)v355 + v351);
          v331 = vmla_f32(v331, v356, *v353);
          v329 = vmla_f32(v329, v356, *(float32x2_t *)((char *)v353 + 4));
          v356.i32[0] = v354[v43];
          v328 = vmla_n_f32(v328, *(float32x2_t *)((char *)v353 + 4 * v41), v356.f32[0]);
          v330 = vmla_n_f32(v330, *(float32x2_t *)((char *)v353 + 4 * v41 + 4), v356.f32[0]);
          v352 += 2;
          v353 += v41;
          v354 = v355;
        }
        while (v352 <= v39);
      }
      else
      {
        v327 = 0;
        v328 = 0;
        v329 = 0;
        v330 = 0;
        v331 = 0;
      }
      if (v327 < v39)
      {
        v357 = 4 * v327 * v41;
        v358 = v42[v327 * v43];
        v331 = vmla_n_f32(v331, *(float32x2_t *)((char *)v40 + v357), v358);
        v329 = vmla_n_f32(v329, *(float32x2_t *)((char *)v40 + (v357 | 4)), v358);
      }
      v226 = (float32x2_t *)&v44->f32[v45];
      v44->f32[0] = vmul_n_f32(vadd_f32(v328, v331), *(float *)&v49).f32[0] + (float)(*(float *)v47.i32 * v44->f32[0]);
      v359 = vmul_n_f32(vadd_f32(v330, v329), *(float *)&v49);
      if (v45 != 1)
      {
        v226->f32[0] = v359.f32[0] + (float)(*(float *)v47.i32 * v226->f32[0]);
        v229 = v359.f32[1] + (float)(*(float *)v47.i32 * v226->f32[v45]);
        goto LABEL_248;
      }
      v273 = vmla_f32(v359, *v226, (float32x2_t)vdup_lane_s32(v47, 0));
      goto LABEL_311;
    }
    if (v38 == 4)
    {
      v50 = 4;
LABEL_344:
      if (v39 >= 2)
      {
        v310 = 0uLL;
        v319 = 2;
        v320 = (float32x4_t *)((char *)&v48[-2] + 4 * v50);
        v309 = 0uLL;
        v321 = v373;
        do
        {
          v309 = vmlaq_n_f32(v309, *v320, *v321);
          v310 = vmlaq_n_f32(v310, *(float32x4_t *)((char *)v320 + 4 * v41), v321[v43]);
          v319 += 2;
          v321 += 2 * v43;
          v320 = (float32x4_t *)((char *)v320 + 8 * v41);
        }
        while (v319 <= v39);
        v308 = v39 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v308 = 0;
        v309 = 0uLL;
        v310 = 0uLL;
      }
      if (v308 < v39)
        v309 = vmlaq_n_f32(v309, *(float32x4_t *)&v48[-2].f32[v50 + v308 * v41], v373[v308 * v43]);
      v322 = vmulq_n_f32(vaddq_f32(v310, v309), *(float *)&v49);
      v323 = 4 - v50;
      if (4 - v50 <= 3)
      {
        do
        {
          a35 = v322;
          v44->f32[0] = *(float *)((unint64_t)&a35 & 0xFFFFFFFFFFFFFFF3 | (4 * (v323++ & 3)))
                      + (float)(*(float *)v47.i32 * v44->f32[0]);
          v44 = (float32x4_t *)((char *)v44 + 4 * v45);
        }
        while (v323 != 4);
      }
      return;
    }
    v287 = (float32x4_t)vdupq_lane_s32(v47, 0);
    v288 = 4 * v45;
    while (1)
    {
      if (v50 >= 8)
        v289 = 8;
      else
        v289 = v50;
      if (v39 >= 2)
      {
        v294 = 0uLL;
        v295 = (float32x4_t *)v48;
        v296 = v373;
        v297 = 2;
        v293 = 0uLL;
        v292 = 0uLL;
        v291 = 0uLL;
        v298 = v373;
        do
        {
          v299 = vld1q_dup_f32(v298);
          v286 = 8 * v43;
          v298 = (const float *)((char *)v298 + v286);
          v294 = vmlaq_f32(v294, v299, *v295);
          v292 = vmlaq_f32(v292, v299, *(float32x4_t *)((char *)v295 + 4 * v289 - 16));
          v299.i32[0] = v296[v43];
          v291 = vmlaq_n_f32(v291, *(float32x4_t *)((char *)v295 + 4 * v41), v299.f32[0]);
          v293 = vmlaq_n_f32(v293, *(float32x4_t *)((char *)v295 + 4 * v41 + 4 * v289 - 16), v299.f32[0]);
          v297 += 2;
          v295 = (float32x4_t *)((char *)v295 + 8 * v41);
          v296 = v298;
        }
        while (v297 <= v39);
        v290 = v39 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v290 = 0;
        v291 = 0uLL;
        v292 = 0uLL;
        v293 = 0uLL;
        v294 = 0uLL;
      }
      v300 = v289 - 4;
      if (v290 < v39)
      {
        v301 = v373[v290 * v43];
        v294 = vmlaq_n_f32(v294, *(float32x4_t *)&v48->f32[v290 * v41], v301);
        v292 = vmlaq_n_f32(v292, *(float32x4_t *)&v48->f32[v290 * v41 + v300], v301);
      }
      v302 = (float32x4_t *)((char *)v44 + 4 * v300 * v45);
      v303 = vmulq_n_f32(vaddq_f32(v291, v294), *(float *)&v49);
      if (v45 == 1 && v289 == 8)
      {
        *v44 = vmlaq_f32(v303, *v44, v287);
        v304 = vmulq_n_f32(vaddq_f32(v293, v292), *(float *)&v49);
      }
      else
      {
        if (v289 >= 4)
          v305 = 0;
        else
          v305 = v289;
        if (v289 < 4)
          v300 = 4;
        if (v305 < v300)
        {
          v306 = (float *)((char *)v44->f32 + v288 * v305);
          do
          {
            a37 = v303;
            *v306 = *(float *)((unint64_t)&a37 & 0xFFFFFFFFFFFFFFF3 | (4 * (v305++ & 3)))
                  + (float)(*(float *)v47.i32 * *v306);
            v306 = (float *)((char *)v306 + v288);
          }
          while (v300 != v305);
        }
        v304 = vmulq_n_f32(vaddq_f32(v293, v292), *(float *)&v49);
        if (v45 != 1)
        {
          for (k = 0; k != 4; ++k)
          {
            a36 = v304;
            v302->f32[0] = *(float *)((unint64_t)&a36 & 0xFFFFFFFFFFFFFFF3 | (4 * (k & 3)))
                         + (float)(*(float *)v47.i32 * v302->f32[0]);
            v302 = (float32x4_t *)((char *)v302 + v288);
          }
          goto LABEL_342;
        }
      }
      *v302 = vmlaq_f32(v304, *v302, v287);
LABEL_342:
      v48 = (float32x2_t *)((char *)v48 + 4 * v289);
      v44 = (float32x4_t *)((char *)v44 + 4 * v289 * v45);
      v50 -= v289;
      if (v50 <= 4)
      {
        if (v50 < 1)
          return;
        goto LABEL_344;
      }
    }
  }
  if (v38 >= 16 && v52 >= 0x2000)
  {
    v53 = 0;
    v54 = 0;
    v55 = -v41 & v41;
    if (v55 >= 4)
      v55 = 4;
    v56 = __clz(v55) - 61;
    v57 = (1 << v56);
    v398 = v43 << v56;
    v402 = v41 << v56;
    v394 = 4 * v43;
    v58 = 4 * v41;
    v59 = v39 - 1;
    v362 = v45 << 12;
    v60 = 16 * v45;
    v61 = 4 * v45;
    v366 = v44;
    do
    {
      v378 = v44;
      v382 = v54;
      if (v50 - v54 >= 1024)
        v62 = 1024;
      else
        v62 = v50 - v54;
      v374 = v50 - v54;
      if (v50 - v54 >= 1)
      {
        v63 = v50 - (v53 << 10);
        if (v63 >= 1024)
          v63 = 1024;
        bzero((void *)((unint64_t)&a38 | 0x10), 4 * (v63 - (v63 != 0)) + 4);
      }
      v386 = v53;
      v390 = v48;
      v64 = (uint64_t)v48;
      v65 = v373;
      v66 = v57;
      do
      {
        v67 = (v59 + v66) / v57;
        if (!v67)
          break;
        v51 = sub_223161D5C(v62, v67, v64, v402, v65, v398, (unint64_t)&a38 | 0x10, v51);
        v65 = (float *)((char *)v65 + v394);
        v64 += v58;
        --v66;
      }
      while (v66);
      v50 = v370;
      if (v374 >= 1)
      {
        v68 = 0;
        v69 = v378;
        do
        {
          v70 = v62 - v68;
          v51 = vmulq_n_f32(*(float32x4_t *)(((unint64_t)&a38 | 0x10) + 4 * v68), *(float *)&vars0);
          if (v371 == 1 && v70 >= 4)
          {
            v71 = (float32x4_t *)((char *)v366 + 4 * v382 * v371 + 4 * v68);
            v51 = vaddq_f32(v51, *v71);
            *v71 = v51;
          }
          else
          {
            if (v70 >= 4)
              v72 = 4;
            else
              v72 = v62 - v68;
            v73 = (v72 + 4) & (v72 >> 63);
            if (v72 < 0)
              v72 = 4;
            if (v73 < v72)
            {
              v74 = (float *)((char *)v69->f32 + v61 * v73);
              do
              {
                a19 = v51;
                *v74 = *(float *)((unint64_t)&a19 & 0xFFFFFFFFFFFFFFF3 | (4 * (v73++ & 3))) + *v74;
                v74 = (float *)((char *)v74 + v61);
              }
              while (v72 != v73);
            }
          }
          v68 += 4;
          v69 = (float32x4_t *)((char *)v69 + v60);
        }
        while (v68 < v62);
      }
      v54 = v382 + 1024;
      v53 = v386 + 1;
      v48 = v390 + 512;
      v44 = (float32x4_t *)((char *)v378 + v362);
    }
    while (v382 + 1024 < v370);
    return;
  }
  if (v38 < 1)
    return;
  if ((unint64_t)v38 < 4)
  {
    if ((unint64_t)v38 < 2)
    {
      if (v39 >= 2)
      {
        v98 = 0.0;
        v175 = 2;
        v176 = (float *)v40;
        v97 = 0.0;
        v177 = v42;
        do
        {
          v97 = v97 + (float)(*v176 * *v177);
          v98 = v98 + (float)(v176[v41] * v177[v43]);
          v175 += 2;
          v177 += 2 * v43;
          v176 += 2 * v41;
        }
        while (v175 <= v39);
        v96 = v39 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v96 = 0;
        v97 = 0.0;
        v98 = 0.0;
      }
      if (v96 < v39)
        v97 = v97 + (float)(v40->f32[v96 * v41] * v42[v96 * v43]);
      v178 = v98 + v97;
      v179 = v44->f32[0];
LABEL_194:
      v180 = v179 + (float)(*(float *)&v49 * v178);
LABEL_352:
      v44->f32[0] = v180;
      return;
    }
    if (v38 == 2)
    {
      sub_223162064(-2, v39, v40, v41, v42, v43, (float32x2_t *)v44, v45, *(float *)&v49);
      return;
    }
    if (v39 >= 2)
    {
      v181 = v39 & 0xFFFFFFFFFFFFFFFELL;
      v185 = 0;
      v219 = 2;
      v220 = v40;
      v221 = v42;
      v184 = 0;
      v183 = 0;
      v182 = 0;
      v222 = v42;
      do
      {
        v223 = vld1_dup_f32(v222);
        v218 = 8 * v43;
        v222 = (const float *)((char *)v222 + v218);
        v185 = vmla_f32(v185, v223, *v220);
        v183 = vmla_f32(v183, v223, *(float32x2_t *)((char *)v220 + 4));
        v223.i32[0] = v221[v43];
        v182 = vmla_n_f32(v182, *(float32x2_t *)((char *)v220 + 4 * v41), v223.f32[0]);
        v184 = vmla_n_f32(v184, *(float32x2_t *)((char *)v220 + 4 * v41 + 4), v223.f32[0]);
        v219 += 2;
        v220 += v41;
        v221 = v222;
      }
      while (v219 <= v39);
    }
    else
    {
      v181 = 0;
      v182 = 0;
      v183 = 0;
      v184 = 0;
      v185 = 0;
    }
    if (v181 < v39)
    {
      v224 = 4 * v181 * v41;
      v225 = v42[v181 * v43];
      v185 = vmla_n_f32(v185, *(float32x2_t *)((char *)v40 + v224), v225);
      v183 = vmla_n_f32(v183, *(float32x2_t *)((char *)v40 + (v224 | 4)), v225);
    }
    v226 = (float32x2_t *)&v44->f32[v45];
    v44->f32[0] = v44->f32[0] + vmul_n_f32(vadd_f32(v182, v185), *(float *)&v49).f32[0];
    v227 = vmul_n_f32(vadd_f32(v184, v183), *(float *)&v49);
    if (v45 == 1)
    {
      v228 = vadd_f32(v227, *v226);
LABEL_246:
      *v226 = v228;
      return;
    }
    v226->f32[0] = v227.f32[0] + v226->f32[0];
    v229 = v227.f32[1] + v226->f32[v45];
    goto LABEL_248;
  }
  if (v38 == 4)
  {
    v50 = 4;
    goto LABEL_174;
  }
  v149 = 4 * v45;
  do
  {
    if (v50 >= 8)
      v150 = 8;
    else
      v150 = v50;
    if (v39 >= 2)
    {
      v155 = 0uLL;
      v156 = (float32x4_t *)v48;
      v157 = v373;
      v158 = 2;
      v154 = 0uLL;
      v153 = 0uLL;
      v152 = 0uLL;
      v159 = v373;
      do
      {
        v160 = vld1q_dup_f32(v159);
        v148 = 8 * v43;
        v159 = (const float *)((char *)v159 + v148);
        v155 = vmlaq_f32(v155, v160, *v156);
        v153 = vmlaq_f32(v153, v160, *(float32x4_t *)((char *)v156 + 4 * v150 - 16));
        v160.i32[0] = v157[v43];
        v152 = vmlaq_n_f32(v152, *(float32x4_t *)((char *)v156 + 4 * v41), v160.f32[0]);
        v154 = vmlaq_n_f32(v154, *(float32x4_t *)((char *)v156 + 4 * v41 + 4 * v150 - 16), v160.f32[0]);
        v158 += 2;
        v156 = (float32x4_t *)((char *)v156 + 8 * v41);
        v157 = v159;
      }
      while (v158 <= v39);
      v151 = v39 & 0xFFFFFFFFFFFFFFFELL;
    }
    else
    {
      v151 = 0;
      v152 = 0uLL;
      v153 = 0uLL;
      v154 = 0uLL;
      v155 = 0uLL;
    }
    v161 = v150 - 4;
    if (v151 < v39)
    {
      v162 = v373[v151 * v43];
      v155 = vmlaq_n_f32(v155, *(float32x4_t *)&v48->f32[v151 * v41], v162);
      v153 = vmlaq_n_f32(v153, *(float32x4_t *)&v48->f32[v151 * v41 + v161], v162);
    }
    v163 = (float32x4_t *)((char *)v44 + 4 * v161 * v45);
    v164 = vmulq_n_f32(vaddq_f32(v152, v155), *(float *)&v49);
    if (v45 == 1 && v150 == 8)
    {
      *v44 = vaddq_f32(v164, *v44);
      v165 = vmulq_n_f32(vaddq_f32(v154, v153), *(float *)&v49);
LABEL_169:
      *v163 = vaddq_f32(v165, *v163);
      goto LABEL_172;
    }
    if (v150 >= 4)
      v166 = 0;
    else
      v166 = v150;
    if (v150 < 4)
      v161 = 4;
    if (v166 < v161)
    {
      v167 = (float *)((char *)v44->f32 + v149 * v166);
      do
      {
        a21 = v164;
        *v167 = *(float *)((unint64_t)&a21 & 0xFFFFFFFFFFFFFFF3 | (4 * (v166++ & 3))) + *v167;
        v167 = (float *)((char *)v167 + v149);
      }
      while (v161 != v166);
    }
    v165 = vmulq_n_f32(vaddq_f32(v154, v153), *(float *)&v49);
    if (v45 == 1)
      goto LABEL_169;
    for (m = 0; m != 4; ++m)
    {
      a20 = v165;
      v163->f32[0] = *(float *)((unint64_t)&a20 & 0xFFFFFFFFFFFFFFF3 | (4 * (m & 3))) + v163->f32[0];
      v163 = (float32x4_t *)((char *)v163 + v149);
    }
LABEL_172:
    v48 = (float32x2_t *)((char *)v48 + 4 * v150);
    v44 = (float32x4_t *)((char *)v44 + 4 * v150 * v45);
    v50 -= v150;
  }
  while (v50 > 4);
  if (v50 >= 1)
LABEL_174:
    sub_223161C4C(-v50, v39, (float32x4_t *)((char *)&v48[-2] + 4 * v50), v41, v373, v43, (float32x4_t *)((char *)v44 + 4 * (v50 - 4) * v45), v45, *(float *)&v49);
}

uint64_t sub_22315FF0C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float *a6, uint64_t a7, float _S0, float a9)
{
  uint64_t v10;
  float32x4_t *v11;
  uint64_t v12;
  float v13;
  float v14;
  uint64_t v15;
  float32x4_t v16;
  int8x16_t v17;
  float32x2_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  float v23;
  uint64_t v24;
  float32x4_t v25;
  int8x16_t v26;
  float32x2_t v27;
  float32x2_t *v28;
  int8x16_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float32x4_t *v43;
  float32x4_t v44;
  float32x4_t v45;
  uint64_t v46;
  __int8 *v47;
  uint64_t v48;
  float32x4_t *v49;
  uint64_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t *v58;
  float32x4_t *v59;
  float32x4_t *v60;
  float32x4_t *v61;
  float32x4_t *v62;
  float32x4_t v64;
  float32x4_t v66;
  float32x4_t v73;
  uint64_t v76;
  float32x4_t *v77;
  uint64_t v78;
  float32x4_t *v79;
  uint64_t v80;
  float32x4_t *v81;
  float32x4_t *v82;
  uint64_t v83;
  uint64_t v84;
  float32x4_t *v85;
  uint64_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t *v91;
  float32x4_t *v92;
  float32x4_t *v93;
  float32x4_t *v94;
  float32x4_t *v95;
  uint64_t i;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  __int8 *v103;
  float32x2_t v108;
  float32x4_t v109;
  float32x4_t v110;
  int8x16_t v111;
  int8x16_t v112;
  float v113;
  uint64_t v114;
  float32x4_t v115;
  int8x16_t v116;
  float32x4_t *v117;
  uint64_t v118;
  float32x4_t *v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t *v122;
  float32x4_t *v123;
  float32x4_t *v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float *v129;
  float32x4_t *v132;
  float32x4_t v133;
  float32x4_t *v134;
  float32x4_t *v135;
  uint64_t j;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  int8x16_t v140;
  float32x2_t v141;
  float32x2_t *v142;
  int8x16_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  float32x4_t *v157;
  float32x4_t v158;
  float32x4_t v159;
  uint64_t v160;
  __int8 *v161;
  uint64_t v162;
  float32x4_t *v163;
  uint64_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t *v172;
  float32x4_t *v173;
  float32x4_t *v174;
  float32x4_t *v175;
  float32x4_t *v176;
  float *v177;
  float32x4_t v178;
  float32x4_t v179;
  uint64_t v180;
  float32x4_t *v181;
  uint64_t v182;
  float32x4_t *v183;
  uint64_t v184;
  float32x4_t *v185;
  float32x4_t *v186;
  uint64_t v187;
  uint64_t v188;
  float32x4_t *v189;
  uint64_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t *v195;
  float32x4_t *v196;
  float32x4_t *v197;
  float32x4_t *v198;
  float32x4_t *v199;
  uint64_t k;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  __int8 *v207;
  float32x4_t v208;
  uint64_t v209;
  float32x4_t v210;
  int8x16_t v211;
  float32x2_t v212;
  float32x4_t v213;
  float32x4_t v214;
  int8x16_t v215;
  int8x16_t v216;
  float32x4_t *v217;
  uint64_t v218;
  float32x4_t *v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x4_t *v222;
  float32x4_t *v223;
  float32x4_t *v224;
  float32x4_t v225;
  float32x4_t v226;
  float32x4_t v227;
  float32x4_t v228;
  float *v229;
  float32x4_t v230;
  float32x4_t *v231;
  float32x4_t v232;
  float32x4_t *v233;
  float32x4_t *v234;
  uint64_t m;
  float32x4_t v236;
  float32x4_t v237;
  float32x4_t v238;
  int8x16_t v239;
  float32x2_t v240;
  float32x4_t v241;
  float32x4_t v242;
  int8x16_t v243;
  int8x16_t v244;
  float32x2_t v245;
  float32x2_t *v246;
  int8x16_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  float32x4_t *v260;
  float32x4_t v261;
  float32x4_t v262;
  uint64_t v263;
  __int8 *v264;
  uint64_t v265;
  float32x4_t *v266;
  uint64_t v267;
  float32x4_t v268;
  float32x4_t v269;
  float32x4_t v270;
  float32x4_t v271;
  float32x4_t v272;
  float32x4_t v273;
  float32x4_t v274;
  float32x4_t *v275;
  float32x4_t *v276;
  float32x4_t *v277;
  float32x4_t *v278;
  float32x4_t *v279;
  float *v280;
  uint64_t v289;
  float32x4_t *v290;
  uint64_t v291;
  float32x4_t *v292;
  uint64_t v293;
  float32x4_t *v294;
  float32x4_t *v295;
  uint64_t v296;
  uint64_t v297;
  float32x4_t *v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x4_t v301;
  float32x4_t v302;
  float32x4_t *v303;
  float32x4_t *v304;
  float32x4_t *v305;
  float32x4_t *v306;
  float32x4_t *v307;
  uint64_t n;
  float32x4_t v309;
  float32x4_t v310;
  float32x4_t v311;
  float32x4_t v312;
  float32x4_t v313;
  float32x4_t v314;
  __int8 *v315;
  float32x2_t v320;
  float32x2_t *v321;
  int8x16_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  float32x4_t *v335;
  float32x4_t v336;
  float32x4_t v337;
  uint64_t v338;
  __int8 *v339;
  uint64_t v340;
  float32x4_t *v341;
  uint64_t v342;
  float32x4_t v343;
  float32x4_t v344;
  float32x4_t v345;
  float32x4_t v346;
  float32x4_t v347;
  float32x4_t v348;
  float32x4_t v349;
  float32x4_t *v350;
  float32x4_t *v351;
  float32x4_t *v352;
  float32x4_t *v353;
  float32x4_t *v354;
  float *v355;
  uint64_t v364;
  float32x4_t *v365;
  uint64_t v366;
  float32x4_t *v367;
  uint64_t v368;
  float32x4_t *v369;
  float32x4_t *v370;
  uint64_t v371;
  uint64_t v372;
  float32x4_t *v373;
  float32x4_t v374;
  float32x4_t v375;
  float32x4_t v376;
  float32x4_t v377;
  float32x4_t *v378;
  float32x4_t *v379;
  float32x4_t *v380;
  float32x4_t *v381;
  float32x4_t *v382;
  uint64_t jj;
  float32x4_t v384;
  float32x4_t v385;
  float32x4_t v386;
  float32x4_t v387;
  float32x4_t v388;
  float32x4_t v389;
  __int8 *v390;
  float32x4_t *v395;
  uint64_t v396;
  float32x4_t *v397;
  float32x4_t v398;
  float32x4_t v399;
  float32x4_t *v400;
  float32x4_t *v401;
  float32x4_t *v402;
  float32x4_t v403;
  float32x4_t v404;
  float32x4_t v405;
  float32x4_t v406;
  float *v407;
  float32x4_t *v410;
  float32x4_t v411;
  float32x4_t *v412;
  float32x4_t *v413;
  uint64_t ii;
  float32x4_t v415;
  float32x4_t v416;
  float32x4_t v417;
  int8x16_t v418;
  char *v419;
  uint64_t v420;
  float32x4_t *v421;
  float32x4_t v422;
  float32x4_t v423;
  float32x4_t *v424;
  float32x4_t *v425;
  uint64_t kk;
  float32x4_t v427;
  float32x4_t v428;
  float32x4_t v429;
  float32x4_t v430;
  float *v431;
  float32x4_t *v434;
  float32x4_t v435;
  float32x4_t *v436;
  float32x4_t *v437;
  uint64_t mm;
  float32x4_t v439;
  float32x4_t v440;
  float32x4_t v441;
  int8x16_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  float32x4_t *v449;
  float32x4_t *v450;
  float32x4_t *v451;
  float32x4_t *v452;
  uint64_t v453;
  uint64_t v454;

  v10 = a4;
  v11 = (float32x4_t *)a3;
  v12 = result;
  if (a9 == 1.0)
  {
    if (result > 3)
    {
      v15 = result - 4;
      if (result == 4)
      {
        if (a2 >= 1)
        {
          v16 = *(float32x4_t *)a5;
          do
          {
            v17 = (int8x16_t)vmulq_f32(v16, *v11);
            *a6 = *a6
                + (float)(_S0
                        * vaddv_f32(vadd_f32(*(float32x2_t *)v17.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL))));
            a6 += a7;
            v11 = (float32x4_t *)((char *)v11 + 4 * a4);
            --a2;
          }
          while (a2);
        }
      }
      else if ((unint64_t)result > 8)
      {
        v29 = *(int8x16_t *)((char *)&unk_2245B8CC0 + 4 * (4 - (-(int)result & 3)));
        v453 = result;
        v445 = result - 4;
        v30 = 0;
        if (a2 >= 8)
        {
          v31 = 4 * a4;
          v449 = (float32x4_t *)(a5 + 4 * v15);
          v32 = v15 + 2 * a4;
          v33 = v15 + 4 * a4;
          v34 = 32 * a4;
          v35 = 4 * v15;
          v36 = 4 * (v15 + a4);
          v37 = 4 * v32;
          v38 = 4 * (v32 + a4);
          v39 = 4 * v33;
          v40 = 4 * (v33 + a4);
          v41 = 4 * (v15 + 6 * a4);
          v42 = 4 * (v15 - a4 + 8 * a4);
          v43 = v11;
          do
          {
            v44 = 0uLL;
            v45 = 0uLL;
            v46 = v10;
            v47 = &v11->i8[4 * v30 * v10];
            v48 = a5;
            v49 = v43;
            v50 = v453;
            v51 = 0uLL;
            v52 = 0uLL;
            v53 = 0uLL;
            v54 = 0uLL;
            v55 = 0uLL;
            v56 = 0uLL;
            do
            {
              v57 = *(float32x4_t *)a5;
              a5 += 16;
              v44 = vmlaq_f32(v44, v57, *v49);
              v45 = vmlaq_f32(v45, v57, *(float32x4_t *)((char *)v49 + v31));
              v58 = (float32x4_t *)((char *)v49 + v31 + v31);
              v51 = vmlaq_f32(v51, v57, *v58);
              v59 = (float32x4_t *)((char *)v58 + v31);
              v56 = vmlaq_f32(v56, v57, *v59);
              v60 = (float32x4_t *)((char *)v59 + v31);
              v55 = vmlaq_f32(v55, v57, *v60);
              v61 = (float32x4_t *)((char *)v60 + v31);
              v54 = vmlaq_f32(v54, v57, *v61);
              v62 = (float32x4_t *)((char *)v61 + v31);
              v53 = vmlaq_f32(v53, v57, *v62);
              v52 = vmlaq_f32(v52, v57, *(float32x4_t *)((char *)v62 + v31));
              v50 -= 4;
              ++v49;
            }
            while (v50 > 4);
            result = (uint64_t)&a6[v30 * a7];
            _Q5 = vaddq_f32(v55, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v449, *(float32x4_t *)&v47[v39])));
            v64 = vaddq_f32(v54, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v449, *(float32x4_t *)&v47[v40])));
            _Q3 = vaddq_f32(v53, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v449, *(float32x4_t *)&v47[v41])));
            v66 = (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v449, *(float32x4_t *)&v47[v42]));
            _Q6 = vpaddq_f32(vpaddq_f32(vaddq_f32(v44, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v449, *(float32x4_t *)&v47[v35]))), vaddq_f32(v45, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v449, *(float32x4_t *)&v47[v36])))), vpaddq_f32(vaddq_f32(v51, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v449, *(float32x4_t *)&v47[v37]))), vaddq_f32(v56, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v449, *(float32x4_t *)&v47[v38])))));
            *(float *)result = vmlas_n_f32(*(float *)result, _S0, _Q6.f32[0]);
            __asm { FMLA            S7, S0, V6.S[1] }
            *(_DWORD *)(result + 4 * a7) = _S7;
            v73 = vpaddq_f32(_Q5, v64);
            __asm { FMLA            S7, S0, V6.S[2] }
            *(_DWORD *)(result + 8 * a7) = _S7;
            __asm { FMLA            S5, S0, V6.S[3] }
            *(_DWORD *)(result + 12 * a7) = _Q5.i32[0];
            _Q2 = vpaddq_f32(v73, vpaddq_f32(_Q3, vaddq_f32(v52, v66)));
            *(float *)(result + 16 * a7) = vmlas_n_f32(*(float *)(result + 16 * a7), _S0, _Q2.f32[0]);
            __asm { FMLA            S3, S0, V2.S[1] }
            *(_DWORD *)(result + 20 * a7) = _Q3.i32[0];
            __asm { FMLA            S3, S0, V2.S[2] }
            *(_DWORD *)(result + 24 * a7) = _Q3.i32[0];
            __asm { FMLA            S3, S0, V2.S[3] }
            *(_DWORD *)(result + 28 * a7) = _Q3.i32[0];
            v30 += 8;
            v43 = (float32x4_t *)((char *)v43 + v34);
            v10 = v46;
            a5 = v48;
          }
          while ((v30 | 7) < a2);
        }
        if ((v30 | 3) >= a2)
        {
          v86 = v453;
          v76 = v445;
        }
        else
        {
          v76 = v445;
          v78 = v445 + 2 * v10;
          v79 = (float32x4_t *)((char *)v11 + v10 * (4 * v30 + 12));
          v80 = 16 * v10;
          v81 = (float32x4_t *)((char *)v11 + v10 * (4 * v30 + 8));
          v82 = (float32x4_t *)((char *)v11 + v10 * (4 * v30 + 4));
          v83 = 4 * v78;
          v84 = 4 * (v78 + v10);
          v85 = (float32x4_t *)((char *)v11 + 4 * v30 * v10);
          v86 = v453;
          do
          {
            v87 = 0uLL;
            v88 = 0uLL;
            v89 = 0uLL;
            v90 = 0uLL;
            v91 = (float32x4_t *)a5;
            v92 = v85;
            v93 = v82;
            v94 = v81;
            v95 = v79;
            for (i = v453; i > 4; i -= 4)
            {
              v97 = *v91++;
              v98 = v97;
              v99 = *v92++;
              v90 = vmlaq_f32(v90, v98, v99);
              v100 = *v93++;
              v89 = vmlaq_f32(v89, v98, v100);
              v101 = *v94++;
              v88 = vmlaq_f32(v88, v98, v101);
              v102 = *v95++;
              v87 = vmlaq_f32(v87, v98, v102);
            }
            v103 = &v11->i8[4 * v30 * v10];
            result = (uint64_t)&a6[v30 * a7];
            v77 = (float32x4_t *)(a5 + 4 * v445);
            _Q2 = vpaddq_f32(vpaddq_f32(vaddq_f32(v90, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v77, *(float32x4_t *)&v103[4 * v445]))), vaddq_f32(v89, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v77, *(float32x4_t *)&v103[4 * v445 + 4 * v10])))), vpaddq_f32(vaddq_f32(v88, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v77, *(float32x4_t *)&v103[v83]))), vaddq_f32(v87, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v77, *(float32x4_t *)&v103[v84])))));
            *(float *)result = vmlas_n_f32(*(float *)result, _S0, _Q2.f32[0]);
            __asm { FMLA            S3, S0, V2.S[1] }
            *(_DWORD *)(result + 4 * a7) = _S3;
            __asm { FMLA            S3, S0, V2.S[2] }
            *(_DWORD *)(result + 8 * a7) = _S3;
            __asm { FMLA            S3, S0, V2.S[3] }
            *(_DWORD *)(result + 12 * a7) = _S3;
            v30 += 4;
            v79 = (float32x4_t *)((char *)v79 + v80);
            v81 = (float32x4_t *)((char *)v81 + v80);
            v82 = (float32x4_t *)((char *)v82 + v80);
            v85 = (float32x4_t *)((char *)v85 + v80);
          }
          while ((v30 | 3) < a2);
        }
        if ((v30 | 1) < a2)
        {
          v117 = (float32x4_t *)((char *)v11 + v10 * (4 * v30 + 4));
          v118 = 8 * v10;
          v119 = (float32x4_t *)((char *)v11 + 4 * v30 * v10);
          do
          {
            v120 = 0uLL;
            v121 = 0uLL;
            v122 = (float32x4_t *)a5;
            v123 = v119;
            v124 = v117;
            for (result = v86; result > 4; result -= 4)
            {
              v125 = *v122++;
              v126 = v125;
              v127 = *v123++;
              v121 = vmlaq_f32(v121, v126, v127);
              v128 = *v124++;
              v120 = vmlaq_f32(v120, v126, v128);
            }
            v129 = &a6[v30 * a7];
            _Q2 = vpaddq_f32(vaddq_f32(v121, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v76), *(float32x4_t *)((char *)v11 + 4 * v30 * v10 + 4 * v76)))), vaddq_f32(v120, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v76), *(float32x4_t *)((char *)v11 + 4 * v30 * v10 + 4 * v76 + 4 * v10)))));
            _Q2.i64[0] = vpaddq_f32(_Q2, _Q2).u64[0];
            *v129 = vmlas_n_f32(*v129, _S0, _Q2.f32[0]);
            __asm { FMLA            S3, S0, V2.S[1] }
            v129[a7] = _S3;
            v30 += 2;
            v117 = (float32x4_t *)((char *)v117 + v118);
            v119 = (float32x4_t *)((char *)v119 + v118);
          }
          while ((v30 | 1) < a2);
        }
        if (v30 < a2)
        {
          v132 = (float32x4_t *)((char *)v11 + 4 * v30 * v10);
          do
          {
            v133 = 0uLL;
            v134 = (float32x4_t *)a5;
            v135 = v132;
            for (j = v86; j > 4; j -= 4)
            {
              v137 = *v134++;
              v138 = v137;
              v139 = *v135++;
              v133 = vmlaq_f32(v133, v138, v139);
            }
            v140 = (int8x16_t)vaddq_f32(v133, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v76), *(float32x4_t *)((char *)v11 + 4 * v30 * v10 + 4 * v76))));
            a6[v30 * a7] = a6[v30 * a7]
                         + (float)(_S0
                                 * vaddv_f32(vadd_f32(*(float32x2_t *)v140.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v140, v140, 8uLL))));
            ++v30;
            v132 = (float32x4_t *)((char *)v132 + 4 * v10);
          }
          while (v30 != a2);
        }
      }
      else if (a2 >= 1)
      {
        v19 = *(float32x4_t *)a5;
        v20 = *(float32x4_t *)(a5 + 4 * result - 16);
        v21 = vmvnq_s8(*(int8x16_t *)((char *)&unk_2245B8CC0 + 4 * (8 - result)));
        do
        {
          v22 = (int8x16_t)vaddq_f32(vmulq_f32(v20, *(float32x4_t *)((char *)v11 + 4 * result - 16)), (float32x4_t)vandq_s8((int8x16_t)vmulq_f32(v19, *v11), v21));
          *a6 = *a6
              + (float)(_S0
                      * vaddv_f32(vadd_f32(*(float32x2_t *)v22.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL))));
          a6 += a7;
          v11 = (float32x4_t *)((char *)v11 + 4 * a4);
          --a2;
        }
        while (a2);
      }
    }
    else if (result > 1)
    {
      v18 = *(float32x2_t *)a5;
      if (result == 2)
      {
        if (a2 >= 1)
        {
          do
          {
            *a6 = *a6 + (float)(_S0 * vaddv_f32(vmul_f32(v18, *(float32x2_t *)v11->f32)));
            a6 += a7;
            v11 = (float32x4_t *)((char *)v11 + 4 * a4);
            --a2;
          }
          while (a2);
        }
      }
      else if (a2 >= 1)
      {
        v27 = *(float32x2_t *)(a5 + 4);
        v28 = (float32x2_t *)(a3 + 4);
        do
        {
          *a6 = *a6
              + (float)(_S0
                      * vaddv_f32(vadd_f32(vmul_f32(v27, *v28), (float32x2_t)vmul_f32(v18, *(float32x2_t *)((char *)v28 - 4)).u32[0])));
          a6 += a7;
          v28 = (float32x2_t *)((char *)v28 + 4 * a4);
          --a2;
        }
        while (a2);
      }
    }
    else if (a2 >= 1)
    {
      v13 = *(float *)a5;
      do
      {
        *a6 = *a6 + (float)(_S0 * (float)(v13 * v11->f32[0]));
        a6 += a7;
        v11 = (float32x4_t *)((char *)v11 + 4 * a4);
        --a2;
      }
      while (a2);
    }
  }
  else if (a9 == 0.0)
  {
    if (result > 3)
    {
      v24 = result - 4;
      if (result == 4)
      {
        if (a2 >= 1)
        {
          v25 = *(float32x4_t *)a5;
          do
          {
            v26 = (int8x16_t)vmulq_f32(v25, *v11);
            *a6 = vaddv_f32(vadd_f32(*(float32x2_t *)v26.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL))) * _S0;
            a6 += a7;
            v11 = (float32x4_t *)((char *)v11 + 4 * v10);
            --a2;
          }
          while (a2);
        }
      }
      else if ((unint64_t)result > 8)
      {
        v143 = *(int8x16_t *)((char *)&unk_2245B8CC0 + 4 * (4 - (-(int)result & 3)));
        v454 = result;
        v446 = result - 4;
        v144 = 0;
        if (a2 >= 8)
        {
          v145 = 4 * v10;
          v450 = (float32x4_t *)(a5 + 4 * v24);
          v146 = v24 + 2 * v10;
          v147 = v24 + 4 * v10;
          v148 = 32 * v10;
          v149 = 4 * v24;
          v150 = 4 * (v24 + v10);
          v151 = 4 * v146;
          v152 = 4 * (v146 + v10);
          v153 = 4 * v147;
          v154 = 4 * (v147 + v10);
          v155 = 4 * (v24 + 6 * v10);
          v156 = 4 * (v24 - v10 + 8 * v10);
          v157 = v11;
          do
          {
            v158 = 0uLL;
            v159 = 0uLL;
            v160 = v10;
            v161 = &v11->i8[4 * v144 * v10];
            v162 = a5;
            v163 = v157;
            v164 = v454;
            v165 = 0uLL;
            v166 = 0uLL;
            v167 = 0uLL;
            v168 = 0uLL;
            v169 = 0uLL;
            v170 = 0uLL;
            do
            {
              v171 = *(float32x4_t *)a5;
              a5 += 16;
              v158 = vmlaq_f32(v158, v171, *v163);
              v159 = vmlaq_f32(v159, v171, *(float32x4_t *)((char *)v163 + v145));
              v172 = (float32x4_t *)((char *)v163 + v145 + v145);
              v165 = vmlaq_f32(v165, v171, *v172);
              v173 = (float32x4_t *)((char *)v172 + v145);
              v170 = vmlaq_f32(v170, v171, *v173);
              v174 = (float32x4_t *)((char *)v173 + v145);
              v169 = vmlaq_f32(v169, v171, *v174);
              v175 = (float32x4_t *)((char *)v174 + v145);
              v168 = vmlaq_f32(v168, v171, *v175);
              v176 = (float32x4_t *)((char *)v175 + v145);
              v167 = vmlaq_f32(v167, v171, *v176);
              v166 = vmlaq_f32(v166, v171, *(float32x4_t *)((char *)v176 + v145));
              v164 -= 4;
              ++v163;
            }
            while (v164 > 4);
            v177 = &a6[v144 * a7];
            v178 = vpaddq_f32(vpaddq_f32(vaddq_f32(v158, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v450, *(float32x4_t *)&v161[v149]))), vaddq_f32(v159, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v450, *(float32x4_t *)&v161[v150])))), vpaddq_f32(vaddq_f32(v165, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v450, *(float32x4_t *)&v161[v151]))), vaddq_f32(v170, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v450, *(float32x4_t *)&v161[v152])))));
            v179 = vpaddq_f32(vpaddq_f32(vaddq_f32(v169, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v450, *(float32x4_t *)&v161[v153]))), vaddq_f32(v168, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v450, *(float32x4_t *)&v161[v154])))), vpaddq_f32(vaddq_f32(v167, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v450, *(float32x4_t *)&v161[v155]))), vaddq_f32(v166, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v450, *(float32x4_t *)&v161[v156])))));
            *v177 = _S0 * v178.f32[0];
            v177[a7] = vmuls_lane_f32(_S0, *(float32x2_t *)v178.f32, 1);
            v177[2 * a7] = vmuls_lane_f32(_S0, v178, 2);
            v177[3 * a7] = vmuls_lane_f32(_S0, v178, 3);
            v177[4 * a7] = _S0 * v179.f32[0];
            v177[5 * a7] = vmuls_lane_f32(_S0, *(float32x2_t *)v179.f32, 1);
            v177[6 * a7] = vmuls_lane_f32(_S0, v179, 2);
            v177[7 * a7] = vmuls_lane_f32(_S0, v179, 3);
            v144 += 8;
            result = v144 | 7;
            v157 = (float32x4_t *)((char *)v157 + v148);
            v10 = v160;
            a5 = v162;
          }
          while ((v144 | 7) < a2);
        }
        if ((v144 | 3) >= a2)
        {
          v190 = v454;
          v180 = v446;
        }
        else
        {
          v180 = v446;
          v182 = v446 + 2 * v10;
          v183 = (float32x4_t *)((char *)v11 + v10 * (4 * v144 + 12));
          v184 = 16 * v10;
          v185 = (float32x4_t *)((char *)v11 + v10 * (4 * v144 + 8));
          v186 = (float32x4_t *)((char *)v11 + v10 * (4 * v144 + 4));
          v187 = 4 * v182;
          v188 = 4 * (v182 + v10);
          v189 = (float32x4_t *)((char *)v11 + 4 * v144 * v10);
          v190 = v454;
          do
          {
            v191 = 0uLL;
            v192 = 0uLL;
            v193 = 0uLL;
            v194 = 0uLL;
            v195 = (float32x4_t *)a5;
            v196 = v189;
            v197 = v186;
            v198 = v185;
            v199 = v183;
            for (k = v454; k > 4; k -= 4)
            {
              v201 = *v195++;
              v202 = v201;
              v203 = *v196++;
              v194 = vmlaq_f32(v194, v202, v203);
              v204 = *v197++;
              v193 = vmlaq_f32(v193, v202, v204);
              v205 = *v198++;
              v192 = vmlaq_f32(v192, v202, v205);
              v206 = *v199++;
              v191 = vmlaq_f32(v191, v202, v206);
            }
            v207 = &v11->i8[4 * v144 * v10];
            result = (uint64_t)&a6[v144 * a7];
            v181 = (float32x4_t *)(a5 + 4 * v446);
            v208 = vpaddq_f32(vpaddq_f32(vaddq_f32(v194, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v181, *(float32x4_t *)&v207[4 * v446]))), vaddq_f32(v193, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v181, *(float32x4_t *)&v207[4 * v446 + 4 * v10])))), vpaddq_f32(vaddq_f32(v192, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v181, *(float32x4_t *)&v207[v187]))), vaddq_f32(v191, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v181, *(float32x4_t *)&v207[v188])))));
            *(float *)result = _S0 * v208.f32[0];
            *(float *)(result + 4 * a7) = vmuls_lane_f32(_S0, *(float32x2_t *)v208.f32, 1);
            *(float *)(result + 8 * a7) = vmuls_lane_f32(_S0, v208, 2);
            *(float *)(result + 12 * a7) = vmuls_lane_f32(_S0, v208, 3);
            v144 += 4;
            v183 = (float32x4_t *)((char *)v183 + v184);
            v185 = (float32x4_t *)((char *)v185 + v184);
            v186 = (float32x4_t *)((char *)v186 + v184);
            v189 = (float32x4_t *)((char *)v189 + v184);
          }
          while ((v144 | 3) < a2);
        }
        if ((v144 | 1) < a2)
        {
          v217 = (float32x4_t *)((char *)v11 + v10 * (4 * v144 + 4));
          v218 = 8 * v10;
          v219 = (float32x4_t *)((char *)v11 + 4 * v144 * v10);
          do
          {
            v220 = 0uLL;
            v221 = 0uLL;
            v222 = (float32x4_t *)a5;
            v223 = v219;
            v224 = v217;
            for (result = v190; result > 4; result -= 4)
            {
              v225 = *v222++;
              v226 = v225;
              v227 = *v223++;
              v221 = vmlaq_f32(v221, v226, v227);
              v228 = *v224++;
              v220 = vmlaq_f32(v220, v226, v228);
            }
            v229 = &a6[v144 * a7];
            v230 = vpaddq_f32(vaddq_f32(v221, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v180), *(float32x4_t *)((char *)v11 + 4 * v144 * v10 + 4 * v180)))), vaddq_f32(v220, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v180), *(float32x4_t *)((char *)v11 + 4 * v144 * v10 + 4 * v180 + 4 * v10)))));
            v230.i64[0] = vpaddq_f32(v230, v230).u64[0];
            *v229 = _S0 * v230.f32[0];
            v229[a7] = vmuls_lane_f32(_S0, *(float32x2_t *)v230.f32, 1);
            v144 += 2;
            v217 = (float32x4_t *)((char *)v217 + v218);
            v219 = (float32x4_t *)((char *)v219 + v218);
          }
          while ((v144 | 1) < a2);
        }
        if (v144 < a2)
        {
          v231 = (float32x4_t *)((char *)v11 + 4 * v144 * v10);
          do
          {
            v232 = 0uLL;
            v233 = (float32x4_t *)a5;
            v234 = v231;
            for (m = v190; m > 4; m -= 4)
            {
              v236 = *v233++;
              v237 = v236;
              v238 = *v234++;
              v232 = vmlaq_f32(v232, v237, v238);
            }
            v239 = (int8x16_t)vaddq_f32(v232, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v180), *(float32x4_t *)((char *)v11 + 4 * v144 * v10 + 4 * v180))));
            a6[v144 * a7] = vaddv_f32(vadd_f32(*(float32x2_t *)v239.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v239, v239, 8uLL)))* _S0;
            ++v144;
            v231 = (float32x4_t *)((char *)v231 + 4 * v10);
          }
          while (v144 != a2);
        }
      }
      else if (a2 >= 1)
      {
        v109 = *(float32x4_t *)a5;
        v110 = *(float32x4_t *)(a5 + 4 * result - 16);
        v111 = vmvnq_s8(*(int8x16_t *)((char *)&unk_2245B8CC0 + 4 * (8 - result)));
        do
        {
          v112 = (int8x16_t)vaddq_f32(vmulq_f32(v110, *(float32x4_t *)((char *)v11 + 4 * result - 16)), (float32x4_t)vandq_s8((int8x16_t)vmulq_f32(v109, *v11), v111));
          *a6 = vaddv_f32(vadd_f32(*(float32x2_t *)v112.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v112, v112, 8uLL))) * _S0;
          a6 += a7;
          v11 = (float32x4_t *)((char *)v11 + 4 * v10);
          --a2;
        }
        while (a2);
      }
    }
    else if (result > 1)
    {
      v108 = *(float32x2_t *)a5;
      if (result == 2)
      {
        if (a2 >= 1)
        {
          do
          {
            *a6 = vaddv_f32(vmul_f32(v108, *(float32x2_t *)v11->f32)) * _S0;
            a6 += a7;
            v11 = (float32x4_t *)((char *)v11 + 4 * a4);
            --a2;
          }
          while (a2);
        }
      }
      else if (a2 >= 1)
      {
        v141 = *(float32x2_t *)(a5 + 4);
        v142 = (float32x2_t *)(a3 + 4);
        do
        {
          *a6 = vaddv_f32(vadd_f32(vmul_f32(v141, *v142), (float32x2_t)vmul_f32(v108, *(float32x2_t *)((char *)v142 - 4)).u32[0]))* _S0;
          a6 += a7;
          v142 = (float32x2_t *)((char *)v142 + 4 * a4);
          --a2;
        }
        while (a2);
      }
    }
    else if (a2 >= 1)
    {
      v14 = *(float *)a5;
      do
      {
        *a6 = (float)(v14 * v11->f32[0]) * _S0;
        a6 += a7;
        v11 = (float32x4_t *)((char *)v11 + 4 * a4);
        --a2;
      }
      while (a2);
    }
  }
  else if (a9 == -1.0)
  {
    if (result > 3)
    {
      v114 = result - 4;
      if (result == 4)
      {
        if (a2 >= 1)
        {
          v115 = *(float32x4_t *)a5;
          do
          {
            v116 = (int8x16_t)vmulq_f32(v115, *v11);
            *a6 = -(float)(*a6
                         - (float)(_S0
                                 * vaddv_f32(vadd_f32(*(float32x2_t *)v116.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v116, v116, 8uLL)))));
            a6 += a7;
            v11 = (float32x4_t *)((char *)v11 + 4 * a4);
            --a2;
          }
          while (a2);
        }
      }
      else if ((unint64_t)result > 8)
      {
        v247 = *(int8x16_t *)((char *)&unk_2245B8CC0 + 4 * (4 - (-(int)result & 3)));
        v443 = result - 4;
        v248 = 0;
        if (a2 >= 8)
        {
          v249 = 4 * a4;
          v451 = (float32x4_t *)(a5 + 4 * v114);
          v250 = v114 + 2 * a4;
          v251 = v114 + 4 * a4;
          v447 = 32 * a4;
          v252 = 4 * v114;
          v253 = 4 * (v114 + a4);
          v254 = 4 * v250;
          v255 = 4 * (v250 + a4);
          v256 = 4 * v251;
          v257 = 4 * (v251 + a4);
          v258 = 4 * (v114 + 6 * a4);
          v259 = 4 * (v114 - a4 + 8 * a4);
          v260 = v11;
          do
          {
            v261 = 0uLL;
            v262 = 0uLL;
            v263 = v10;
            v264 = &v11->i8[4 * v248 * v10];
            v265 = a5;
            v266 = v260;
            v267 = v12;
            v268 = 0uLL;
            v269 = 0uLL;
            v270 = 0uLL;
            v271 = 0uLL;
            v272 = 0uLL;
            v273 = 0uLL;
            do
            {
              v274 = *(float32x4_t *)a5;
              a5 += 16;
              v261 = vmlaq_f32(v261, v274, *v266);
              v262 = vmlaq_f32(v262, v274, *(float32x4_t *)((char *)v266 + v249));
              v275 = (float32x4_t *)((char *)v266 + v249 + v249);
              v268 = vmlaq_f32(v268, v274, *v275);
              v276 = (float32x4_t *)((char *)v275 + v249);
              v273 = vmlaq_f32(v273, v274, *v276);
              v277 = (float32x4_t *)((char *)v276 + v249);
              v272 = vmlaq_f32(v272, v274, *v277);
              v278 = (float32x4_t *)((char *)v277 + v249);
              v271 = vmlaq_f32(v271, v274, *v278);
              v279 = (float32x4_t *)((char *)v278 + v249);
              v270 = vmlaq_f32(v270, v274, *v279);
              v269 = vmlaq_f32(v269, v274, *(float32x4_t *)((char *)v279 + v249));
              v267 -= 4;
              ++v266;
            }
            while (v267 > 4);
            v280 = &a6[v248 * a7];
            _Q6 = vpaddq_f32(vpaddq_f32(vaddq_f32(v261, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v451, *(float32x4_t *)&v264[v252]))), vaddq_f32(v262, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v451, *(float32x4_t *)&v264[v253])))), vpaddq_f32(vaddq_f32(v268, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v451, *(float32x4_t *)&v264[v254]))), vaddq_f32(v273, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v451, *(float32x4_t *)&v264[v255])))));
            _Q2 = vpaddq_f32(vpaddq_f32(vaddq_f32(v272, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v451, *(float32x4_t *)&v264[v256]))), vaddq_f32(v271, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v451, *(float32x4_t *)&v264[v257])))), vpaddq_f32(vaddq_f32(v270, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v451, *(float32x4_t *)&v264[v258]))), vaddq_f32(v269, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v451, *(float32x4_t *)&v264[v259])))));
            *v280 = vmlas_n_f32(-*v280, _S0, _Q6.f32[0]);
            __asm { FMLA            S3, S0, V6.S[1] }
            v280[a7] = _S3;
            __asm { FMLA            S3, S0, V6.S[2] }
            v280[2 * a7] = _S3;
            __asm { FMLA            S3, S0, V6.S[3] }
            v280[3 * a7] = _S3;
            v280[4 * a7] = vmlas_n_f32(-v280[4 * a7], _S0, _Q2.f32[0]);
            __asm { FMLA            S3, S0, V2.S[1] }
            v280[5 * a7] = _S3;
            __asm { FMLA            S3, S0, V2.S[2] }
            v280[6 * a7] = _S3;
            __asm { FMLA            S3, S0, V2.S[3] }
            v280[7 * a7] = _S3;
            v248 += 8;
            result = v248 | 7;
            v260 = (float32x4_t *)((char *)v260 + v447);
            v10 = v263;
            a5 = v265;
          }
          while ((v248 | 7) < a2);
        }
        if ((v248 | 3) >= a2)
        {
          v289 = v443;
        }
        else
        {
          v289 = v443;
          v291 = v443 + 2 * v10;
          v292 = (float32x4_t *)((char *)v11 + v10 * (4 * v248 + 12));
          v293 = 16 * v10;
          v294 = (float32x4_t *)((char *)v11 + v10 * (4 * v248 + 8));
          v295 = (float32x4_t *)((char *)v11 + v10 * (4 * v248 + 4));
          v296 = 4 * v291;
          v297 = 4 * (v291 + v10);
          v298 = (float32x4_t *)((char *)v11 + 4 * v248 * v10);
          do
          {
            v299 = 0uLL;
            v300 = 0uLL;
            v301 = 0uLL;
            v302 = 0uLL;
            if (v12 >= 5)
            {
              v303 = (float32x4_t *)a5;
              v304 = v298;
              v305 = v295;
              v306 = v294;
              v307 = v292;
              for (n = v12; n > 4; n -= 4)
              {
                v309 = *v303++;
                v310 = v309;
                v311 = *v304++;
                v302 = vmlaq_f32(v302, v310, v311);
                v312 = *v305++;
                v301 = vmlaq_f32(v301, v310, v312);
                v313 = *v306++;
                v300 = vmlaq_f32(v300, v310, v313);
                v314 = *v307++;
                v299 = vmlaq_f32(v299, v310, v314);
              }
            }
            v315 = &v11->i8[4 * v248 * v10];
            result = (uint64_t)&a6[v248 * a7];
            v290 = (float32x4_t *)(a5 + 4 * v443);
            _Q2 = vpaddq_f32(vpaddq_f32(vaddq_f32(v302, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v290, *(float32x4_t *)&v315[4 * v443]))), vaddq_f32(v301, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v290, *(float32x4_t *)&v315[4 * v443 + 4 * v10])))), vpaddq_f32(vaddq_f32(v300, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v290, *(float32x4_t *)&v315[v296]))), vaddq_f32(v299, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v290, *(float32x4_t *)&v315[v297])))));
            *(float *)result = vmlas_n_f32(-*(float *)result, _S0, _Q2.f32[0]);
            __asm { FMLA            S3, S0, V2.S[1] }
            *(_DWORD *)(result + 4 * a7) = _S3;
            __asm { FMLA            S3, S0, V2.S[2] }
            *(_DWORD *)(result + 8 * a7) = _S3;
            __asm { FMLA            S3, S0, V2.S[3] }
            *(_DWORD *)(result + 12 * a7) = _S3;
            v248 += 4;
            v292 = (float32x4_t *)((char *)v292 + v293);
            v294 = (float32x4_t *)((char *)v294 + v293);
            v295 = (float32x4_t *)((char *)v295 + v293);
            v298 = (float32x4_t *)((char *)v298 + v293);
          }
          while ((v248 | 3) < a2);
        }
        if ((v248 | 1) < a2)
        {
          v395 = (float32x4_t *)((char *)v11 + v10 * (4 * v248 + 4));
          v396 = 8 * v10;
          v397 = (float32x4_t *)((char *)v11 + 4 * v248 * v10);
          do
          {
            v398 = 0uLL;
            v399 = 0uLL;
            if (v12 >= 5)
            {
              v400 = (float32x4_t *)a5;
              v401 = v397;
              v402 = v395;
              for (result = v12; result > 4; result -= 4)
              {
                v403 = *v400++;
                v404 = v403;
                v405 = *v401++;
                v399 = vmlaq_f32(v399, v404, v405);
                v406 = *v402++;
                v398 = vmlaq_f32(v398, v404, v406);
              }
            }
            v407 = &a6[v248 * a7];
            _Q2 = vpaddq_f32(vaddq_f32(v399, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v289), *(float32x4_t *)((char *)v11 + 4 * v248 * v10 + 4 * v289)))), vaddq_f32(v398, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v289), *(float32x4_t *)((char *)v11 + 4 * v248 * v10 + 4 * v289 + 4 * v10)))));
            _Q2.i64[0] = vpaddq_f32(_Q2, _Q2).u64[0];
            *v407 = vmlas_n_f32(-*v407, _S0, _Q2.f32[0]);
            __asm { FMLA            S3, S0, V2.S[1] }
            v407[a7] = _S3;
            v248 += 2;
            v395 = (float32x4_t *)((char *)v395 + v396);
            v397 = (float32x4_t *)((char *)v397 + v396);
          }
          while ((v248 | 1) < a2);
        }
        if (v248 < a2)
        {
          v410 = (float32x4_t *)((char *)v11 + 4 * v248 * v10);
          do
          {
            v411 = 0uLL;
            if (v12 >= 5)
            {
              v412 = (float32x4_t *)a5;
              v413 = v410;
              for (ii = v12; ii > 4; ii -= 4)
              {
                v415 = *v412++;
                v416 = v415;
                v417 = *v413++;
                v411 = vmlaq_f32(v411, v416, v417);
              }
            }
            v418 = (int8x16_t)vaddq_f32(v411, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v289), *(float32x4_t *)((char *)v11 + 4 * v248 * v10 + 4 * v289))));
            a6[v248 * a7] = -(float)(a6[v248 * a7]
                                   - (float)(_S0
                                           * vaddv_f32(vadd_f32(*(float32x2_t *)v418.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v418, v418, 8uLL)))));
            ++v248;
            v410 = (float32x4_t *)((char *)v410 + 4 * v10);
          }
          while (v248 != a2);
        }
      }
      else if (a2 >= 1)
      {
        v213 = *(float32x4_t *)a5;
        v214 = *(float32x4_t *)(a5 + 4 * result - 16);
        v215 = vmvnq_s8(*(int8x16_t *)((char *)&unk_2245B8CC0 + 4 * (8 - result)));
        do
        {
          v216 = (int8x16_t)vaddq_f32(vmulq_f32(v214, *(float32x4_t *)((char *)v11 + 4 * result - 16)), (float32x4_t)vandq_s8((int8x16_t)vmulq_f32(v213, *v11), v215));
          *a6 = -(float)(*a6
                       - (float)(_S0
                               * vaddv_f32(vadd_f32(*(float32x2_t *)v216.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v216, v216, 8uLL)))));
          a6 += a7;
          v11 = (float32x4_t *)((char *)v11 + 4 * a4);
          --a2;
        }
        while (a2);
      }
    }
    else if (result > 1)
    {
      v212 = *(float32x2_t *)a5;
      if (result == 2)
      {
        if (a2 >= 1)
        {
          do
          {
            *a6 = -(float)(*a6 - (float)(_S0 * vaddv_f32(vmul_f32(v212, *(float32x2_t *)v11->f32))));
            a6 += a7;
            v11 = (float32x4_t *)((char *)v11 + 4 * a4);
            --a2;
          }
          while (a2);
        }
      }
      else if (a2 >= 1)
      {
        v245 = *(float32x2_t *)(a5 + 4);
        v246 = (float32x2_t *)(a3 + 4);
        do
        {
          *a6 = -(float)(*a6
                       - (float)(_S0
                               * vaddv_f32(vadd_f32(vmul_f32(v245, *v246), (float32x2_t)vmul_f32(v212, *(float32x2_t *)((char *)v246 - 4)).u32[0]))));
          a6 += a7;
          v246 = (float32x2_t *)((char *)v246 + 4 * a4);
          --a2;
        }
        while (a2);
      }
    }
    else if (a2 >= 1)
    {
      v23 = *(float *)a5;
      do
      {
        *a6 = -(float)(*a6 - (float)(_S0 * (float)(v23 * v11->f32[0])));
        a6 += a7;
        v11 = (float32x4_t *)((char *)v11 + 4 * a4);
        --a2;
      }
      while (a2);
    }
  }
  else if (result > 3)
  {
    v209 = result - 4;
    if (result == 4)
    {
      if (a2 >= 1)
      {
        v210 = *(float32x4_t *)a5;
        do
        {
          v211 = (int8x16_t)vmulq_f32(v210, *v11);
          *a6 = (float)(*a6 * a9)
              + (float)(_S0
                      * vaddv_f32(vadd_f32(*(float32x2_t *)v211.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v211, v211, 8uLL))));
          a6 += a7;
          v11 = (float32x4_t *)((char *)v11 + 4 * a4);
          --a2;
        }
        while (a2);
      }
    }
    else if ((unint64_t)result > 8)
    {
      v322 = *(int8x16_t *)((char *)&unk_2245B8CC0 + 4 * (4 - (-(int)result & 3)));
      v323 = 4 * a4;
      v444 = result - 4;
      v324 = 0;
      if (a2 >= 8)
      {
        v452 = (float32x4_t *)(a5 + 4 * v209);
        v325 = v209 + 2 * a4;
        v326 = v209 + 4 * a4;
        v448 = 32 * a4;
        v327 = 4 * v209;
        v328 = 4 * (v209 + a4);
        v329 = 4 * v325;
        v330 = 4 * (v325 + a4);
        v331 = 4 * v326;
        v332 = 4 * (v326 + a4);
        v333 = 4 * (v209 + 6 * a4);
        v334 = 4 * (v209 - a4 + 8 * a4);
        v335 = v11;
        do
        {
          v336 = 0uLL;
          v337 = 0uLL;
          v338 = v10;
          v339 = &v11->i8[4 * v324 * v10];
          v340 = a5;
          v341 = v335;
          v342 = v12;
          v343 = 0uLL;
          v344 = 0uLL;
          v345 = 0uLL;
          v346 = 0uLL;
          v347 = 0uLL;
          v348 = 0uLL;
          do
          {
            v349 = *(float32x4_t *)a5;
            a5 += 16;
            v336 = vmlaq_f32(v336, v349, *v341);
            v337 = vmlaq_f32(v337, v349, *(float32x4_t *)((char *)v341 + v323));
            v350 = (float32x4_t *)((char *)v341 + v323 + v323);
            v343 = vmlaq_f32(v343, v349, *v350);
            v351 = (float32x4_t *)((char *)v350 + v323);
            v348 = vmlaq_f32(v348, v349, *v351);
            v352 = (float32x4_t *)((char *)v351 + v323);
            v347 = vmlaq_f32(v347, v349, *v352);
            v353 = (float32x4_t *)((char *)v352 + v323);
            v346 = vmlaq_f32(v346, v349, *v353);
            v354 = (float32x4_t *)((char *)v353 + v323);
            v345 = vmlaq_f32(v345, v349, *v354);
            v344 = vmlaq_f32(v344, v349, *(float32x4_t *)((char *)v354 + v323));
            v342 -= 4;
            ++v341;
          }
          while (v342 > 4);
          v355 = &a6[v324 * a7];
          _Q7 = vpaddq_f32(vpaddq_f32(vaddq_f32(v336, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v452, *(float32x4_t *)&v339[v327]))), vaddq_f32(v337, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v452, *(float32x4_t *)&v339[v328])))), vpaddq_f32(vaddq_f32(v343, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v452, *(float32x4_t *)&v339[v329]))), vaddq_f32(v348, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v452, *(float32x4_t *)&v339[v330])))));
          _Q3 = vpaddq_f32(vpaddq_f32(vaddq_f32(v347, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v452, *(float32x4_t *)&v339[v331]))), vaddq_f32(v346, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v452, *(float32x4_t *)&v339[v332])))), vpaddq_f32(vaddq_f32(v345, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v452, *(float32x4_t *)&v339[v333]))), vaddq_f32(v344, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v452, *(float32x4_t *)&v339[v334])))));
          *v355 = vmlas_n_f32(*v355 * a9, _S0, _Q7.f32[0]);
          __asm { FMLA            S4, S0, V7.S[1] }
          v355[a7] = _S4;
          __asm { FMLA            S4, S0, V7.S[2] }
          v355[2 * a7] = _S4;
          __asm { FMLA            S4, S0, V7.S[3] }
          v355[3 * a7] = _S4;
          v355[4 * a7] = vmlas_n_f32(v355[4 * a7] * a9, _S0, _Q3.f32[0]);
          __asm { FMLA            S4, S0, V3.S[1] }
          v355[5 * a7] = _S4;
          __asm { FMLA            S4, S0, V3.S[2] }
          v355[6 * a7] = _S4;
          __asm { FMLA            S4, S0, V3.S[3] }
          v355[7 * a7] = _S4;
          v324 += 8;
          result = v324 | 7;
          v335 = (float32x4_t *)((char *)v335 + v448);
          v10 = v338;
          a5 = v340;
        }
        while ((v324 | 7) < a2);
      }
      if ((v324 | 3) >= a2)
      {
        v364 = v444;
      }
      else
      {
        v364 = v444;
        v366 = v444 + 2 * v10;
        v367 = (float32x4_t *)((char *)v11 + v10 * (4 * v324 + 12));
        v368 = 16 * v10;
        v369 = (float32x4_t *)((char *)v11 + v10 * (4 * v324 + 8));
        v370 = (float32x4_t *)((char *)v11 + v10 * (4 * v324 + 4));
        v371 = 4 * v366;
        v372 = 4 * (v366 + v10);
        v373 = (float32x4_t *)((char *)v11 + 4 * v324 * v10);
        do
        {
          v374 = 0uLL;
          v375 = 0uLL;
          v376 = 0uLL;
          v377 = 0uLL;
          if (v12 >= 5)
          {
            v378 = (float32x4_t *)a5;
            v379 = v373;
            v380 = v370;
            v381 = v369;
            v382 = v367;
            for (jj = v12; jj > 4; jj -= 4)
            {
              v384 = *v378++;
              v385 = v384;
              v386 = *v379++;
              v377 = vmlaq_f32(v377, v385, v386);
              v387 = *v380++;
              v376 = vmlaq_f32(v376, v385, v387);
              v388 = *v381++;
              v375 = vmlaq_f32(v375, v385, v388);
              v389 = *v382++;
              v374 = vmlaq_f32(v374, v385, v389);
            }
          }
          v390 = &v11->i8[4 * v324 * v10];
          result = (uint64_t)&a6[v324 * a7];
          v365 = (float32x4_t *)(a5 + 4 * v444);
          _Q3 = vpaddq_f32(vpaddq_f32(vaddq_f32(v377, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v365, *(float32x4_t *)&v390[4 * v444]))), vaddq_f32(v376, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v365, *(float32x4_t *)&v390[4 * v444 + 4 * v10])))), vpaddq_f32(vaddq_f32(v375, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v365, *(float32x4_t *)&v390[v371]))), vaddq_f32(v374, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v365, *(float32x4_t *)&v390[v372])))));
          *(float *)result = vmlas_n_f32(*(float *)result * a9, _S0, _Q3.f32[0]);
          __asm { FMLA            S4, S0, V3.S[1] }
          *(_DWORD *)(result + 4 * a7) = _S4;
          __asm { FMLA            S4, S0, V3.S[2] }
          *(_DWORD *)(result + 8 * a7) = _S4;
          __asm { FMLA            S4, S0, V3.S[3] }
          *(_DWORD *)(result + 12 * a7) = _S4;
          v324 += 4;
          v367 = (float32x4_t *)((char *)v367 + v368);
          v369 = (float32x4_t *)((char *)v369 + v368);
          v370 = (float32x4_t *)((char *)v370 + v368);
          v373 = (float32x4_t *)((char *)v373 + v368);
        }
        while ((v324 | 3) < a2);
      }
      if ((v324 | 1) < a2)
      {
        v419 = (char *)v11 + v10 * (4 * v324 + 4);
        v420 = 8 * v10;
        v421 = (float32x4_t *)((char *)v11 + 4 * v324 * v10);
        do
        {
          v422 = 0uLL;
          v423 = 0uLL;
          if (v12 >= 5)
          {
            v424 = (float32x4_t *)a5;
            v425 = v421;
            result = (uint64_t)v419;
            for (kk = v12; kk > 4; kk -= 4)
            {
              v427 = *v424++;
              v428 = v427;
              v429 = *v425++;
              v423 = vmlaq_f32(v423, v428, v429);
              v430 = *(float32x4_t *)result;
              result += 16;
              v422 = vmlaq_f32(v422, v428, v430);
            }
          }
          v431 = &a6[v324 * a7];
          _Q3 = vpaddq_f32(vaddq_f32(v423, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v364), *(float32x4_t *)((char *)v11 + 4 * v324 * v10 + 4 * v364)))), vaddq_f32(v422, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v364), *(float32x4_t *)((char *)v11 + 4 * v324 * v10 + 4 * v364 + 4 * v10)))));
          _Q3.i64[0] = vpaddq_f32(_Q3, _Q3).u64[0];
          *v431 = vmlas_n_f32(*v431 * a9, _S0, _Q3.f32[0]);
          __asm { FMLA            S4, S0, V3.S[1] }
          v431[a7] = _S4;
          v324 += 2;
          v419 += v420;
          v421 = (float32x4_t *)((char *)v421 + v420);
        }
        while ((v324 | 1) < a2);
      }
      if (v324 < a2)
      {
        v434 = (float32x4_t *)((char *)v11 + 4 * v324 * v10);
        do
        {
          v435 = 0uLL;
          if (v12 >= 5)
          {
            v436 = (float32x4_t *)a5;
            v437 = v434;
            for (mm = v12; mm > 4; mm -= 4)
            {
              v439 = *v436++;
              v440 = v439;
              v441 = *v437++;
              v435 = vmlaq_f32(v435, v440, v441);
            }
          }
          v442 = (int8x16_t)vaddq_f32(v435, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v364), *(float32x4_t *)((char *)v11 + 4 * v324 * v10 + 4 * v364))));
          a6[v324 * a7] = (float)(a6[v324 * a7] * a9)
                        + (float)(_S0
                                * vaddv_f32(vadd_f32(*(float32x2_t *)v442.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v442, v442, 8uLL))));
          ++v324;
          v434 = (float32x4_t *)((char *)v434 + v323);
        }
        while (v324 != a2);
      }
    }
    else if (a2 >= 1)
    {
      v241 = *(float32x4_t *)a5;
      v242 = *(float32x4_t *)(a5 + 4 * result - 16);
      v243 = vmvnq_s8(*(int8x16_t *)((char *)&unk_2245B8CC0 + 4 * (8 - result)));
      do
      {
        v244 = (int8x16_t)vaddq_f32(vmulq_f32(v242, *(float32x4_t *)((char *)v11 + 4 * result - 16)), (float32x4_t)vandq_s8((int8x16_t)vmulq_f32(v241, *v11), v243));
        *a6 = (float)(*a6 * a9)
            + (float)(_S0
                    * vaddv_f32(vadd_f32(*(float32x2_t *)v244.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v244, v244, 8uLL))));
        a6 += a7;
        v11 = (float32x4_t *)((char *)v11 + 4 * a4);
        --a2;
      }
      while (a2);
    }
  }
  else if (result > 1)
  {
    v240 = *(float32x2_t *)a5;
    if (result == 2)
    {
      if (a2 >= 1)
      {
        do
        {
          *a6 = (float)(*a6 * a9) + (float)(_S0 * vaddv_f32(vmul_f32(v240, *(float32x2_t *)v11->f32)));
          a6 += a7;
          v11 = (float32x4_t *)((char *)v11 + 4 * a4);
          --a2;
        }
        while (a2);
      }
    }
    else if (a2 >= 1)
    {
      v320 = *(float32x2_t *)(a5 + 4);
      v321 = (float32x2_t *)(a3 + 4);
      do
      {
        *a6 = (float)(*a6 * a9)
            + (float)(_S0
                    * vaddv_f32(vadd_f32(vmul_f32(v320, *v321), (float32x2_t)vmul_f32(v240, *(float32x2_t *)((char *)v321 - 4)).u32[0])));
        a6 += a7;
        v321 = (float32x2_t *)((char *)v321 + 4 * a4);
        --a2;
      }
      while (a2);
    }
  }
  else if (a2 >= 1)
  {
    v113 = *(float *)a5;
    do
    {
      *a6 = (float)(*a6 * a9) + (float)(_S0 * (float)(v113 * v11->f32[0]));
      a6 += a7;
      v11 = (float32x4_t *)((char *)v11 + 4 * a4);
      --a2;
    }
    while (a2);
  }
  return result;
}

uint64_t sub_223161C4C(uint64_t result, uint64_t a2, float32x4_t *a3, uint64_t a4, float *a5, uint64_t a6, float32x4_t *a7, uint64_t a8, float a9)
{
  int64_t v9;
  float32x4_t v10;
  float32x4_t v11;
  uint64_t v12;
  float *v13;
  float32x4_t *v14;
  float32x4_t v15;
  uint64_t v16;
  uint64_t v17;
  float *v18;
  float32x4_t v19;

  if (a2 >= 2)
  {
    v9 = a2 & 0xFFFFFFFFFFFFFFFELL;
    v11 = 0uLL;
    v12 = 2;
    v13 = a5;
    v10 = 0uLL;
    v14 = a3;
    do
    {
      v10 = vmlaq_n_f32(v10, *v14, *v13);
      v11 = vmlaq_n_f32(v11, *(float32x4_t *)((char *)v14 + 4 * a4), v13[a6]);
      v12 += 2;
      v14 = (float32x4_t *)((char *)v14 + 8 * a4);
      v13 += 2 * a6;
    }
    while (v12 <= a2);
  }
  else
  {
    v9 = 0;
    v10 = 0uLL;
    v11 = 0uLL;
  }
  if (v9 < a2)
    v10 = vmlaq_n_f32(v10, *(float32x4_t *)((char *)a3 + 4 * v9 * a4), a5[v9 * a6]);
  v15 = vmulq_n_f32(vaddq_f32(v11, v10), a9);
  if (result == 4 && a8 == 1)
  {
    *a7 = vaddq_f32(v15, *a7);
  }
  else
  {
    v16 = (result + 4) & (result >> 63);
    v17 = 4;
    if (result >= 0)
      v17 = result;
    if (v16 < v17)
    {
      v18 = &a7->f32[v16 * a8];
      do
      {
        v19 = v15;
        *v18 = *(float *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF3 | (4 * (v16++ & 3))) + *v18;
        v18 += a8;
      }
      while (v17 != v16);
    }
  }
  return result;
}

float32x4_t sub_223161D5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float *a5, uint64_t a6, uint64_t a7, float32x4_t result)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t *v21;
  const float *v22;
  uint64_t v23;
  const float *v24;
  float32x4_t v25;
  float v26;
  float32x4_t *v27;
  float v28;
  float32x4_t *v29;
  float32x4_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t *v39;
  const float *v40;
  uint64_t v41;
  const float *v42;
  float32x4_t v43;
  float v44;
  float32x4_t *v45;
  float v46;
  float32x4_t *v47;
  uint64_t v48;
  uint64_t v49;
  float32x4_t *v50;
  int64_t v51;
  float32x4_t v52;
  float32x4_t v53;
  uint64_t v54;
  float32x4_t *v55;
  float *v56;

  v8 = a3 & 0xFFFFFFFFFFFFFFF0;
  v9 = (uint64_t)((a3 & 0xFFFFFFFFFFFFFFF0) - a3) >> 2;
  if (v9 + 12 >= a1)
  {
    v31 = (uint64_t)((a3 & 0xFFFFFFFFFFFFFFF0) - a3) >> 2;
  }
  else
  {
    v11 = 4 * a4;
    do
    {
      if (a2 >= 2)
      {
        v20 = 0uLL;
        v21 = (float32x4_t *)v8;
        v19 = 0uLL;
        v22 = a5;
        v23 = 2;
        v18 = 0uLL;
        v17 = 0uLL;
        v16 = 0uLL;
        v15 = 0uLL;
        v14 = 0uLL;
        v24 = a5;
        v13 = 0uLL;
        do
        {
          v25 = vld1q_dup_f32(v24);
          v10 = 8 * a6;
          v24 = (const float *)((char *)v24 + v10);
          v13 = vmlaq_f32(v13, v25, *v21);
          v15 = vmlaq_f32(v15, v25, v21[1]);
          v17 = vmlaq_f32(v17, v25, v21[2]);
          v19 = vmlaq_f32(v19, v25, v21[3]);
          v26 = v22[a6];
          v14 = vmlaq_n_f32(v14, *(float32x4_t *)((char *)v21 + 4 * a4), v26);
          v16 = vmlaq_n_f32(v16, *(float32x4_t *)((char *)v21 + v11 + 16), v26);
          v18 = vmlaq_n_f32(v18, *(float32x4_t *)((char *)v21 + v11 + 32), v26);
          v20 = vmlaq_n_f32(v20, *(float32x4_t *)((char *)v21 + v11 + 48), v26);
          v23 += 2;
          v21 = (float32x4_t *)((char *)v21 + 8 * a4);
          v22 = v24;
        }
        while (v23 <= a2);
        v12 = a2 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v12 = 0;
        v13 = 0uLL;
        v14 = 0uLL;
        v15 = 0uLL;
        v16 = 0uLL;
        v17 = 0uLL;
        v18 = 0uLL;
        v19 = 0uLL;
        v20 = 0uLL;
      }
      if (v12 < a2)
      {
        v27 = (float32x4_t *)(v8 + 4 * v12 * a4);
        v28 = a5[v12 * a6];
        v13 = vmlaq_n_f32(v13, *v27, v28);
        v15 = vmlaq_n_f32(v15, v27[1], v28);
        v17 = vmlaq_n_f32(v17, v27[2], v28);
        v19 = vmlaq_n_f32(v19, v27[3], v28);
      }
      v29 = (float32x4_t *)(a7 + 4 * v9);
      v30 = vaddq_f32(vaddq_f32(v16, v15), v29[1]);
      *v29 = vaddq_f32(vaddq_f32(v14, v13), *v29);
      v29[1] = v30;
      result = vaddq_f32(vaddq_f32(v20, v19), v29[3]);
      v29[2] = vaddq_f32(vaddq_f32(v18, v17), v29[2]);
      v29[3] = result;
      v8 += 64;
      v31 = v9 + 16;
      v32 = v9 + 28;
      v9 += 16;
    }
    while (v32 < a1);
  }
  if (v31 + 4 >= a1)
  {
    v48 = v31;
  }
  else
  {
    do
    {
      if (a2 >= 2)
      {
        v38 = 0uLL;
        v39 = (float32x4_t *)v8;
        v40 = a5;
        v41 = 2;
        v37 = 0uLL;
        v36 = 0uLL;
        v35 = 0uLL;
        v42 = a5;
        do
        {
          v43 = vld1q_dup_f32(v42);
          v33 = 8 * a6;
          v42 = (const float *)((char *)v42 + v33);
          v35 = vmlaq_f32(v35, v43, *v39);
          v37 = vmlaq_f32(v37, v43, v39[1]);
          v44 = v40[a6];
          v36 = vmlaq_n_f32(v36, *(float32x4_t *)((char *)v39 + 4 * a4), v44);
          v38 = vmlaq_n_f32(v38, *(float32x4_t *)((char *)v39 + 4 * a4 + 16), v44);
          v41 += 2;
          v39 = (float32x4_t *)((char *)v39 + 8 * a4);
          v40 = v42;
        }
        while (v41 <= a2);
        v34 = a2 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v34 = 0;
        v35 = 0uLL;
        v36 = 0uLL;
        v37 = 0uLL;
        v38 = 0uLL;
      }
      if (v34 < a2)
      {
        v45 = (float32x4_t *)(v8 + 4 * v34 * a4);
        v46 = a5[v34 * a6];
        v35 = vmlaq_n_f32(v35, *v45, v46);
        v37 = vmlaq_n_f32(v37, v45[1], v46);
      }
      v47 = (float32x4_t *)(a7 + 4 * v31);
      result = vaddq_f32(vaddq_f32(v38, v37), v47[1]);
      *v47 = vaddq_f32(vaddq_f32(v36, v35), *v47);
      v47[1] = result;
      v8 += 32;
      v48 = v31 + 8;
      v49 = v31 + 12;
      v31 += 8;
    }
    while (v49 < a1);
  }
  if (v48 < a1)
  {
    v50 = (float32x4_t *)(a7 + 4 * v48);
    if (a2 >= 2)
    {
      v53 = 0uLL;
      v54 = 2;
      v55 = (float32x4_t *)v8;
      v52 = 0uLL;
      v56 = a5;
      do
      {
        v52 = vmlaq_n_f32(v52, *v55, *v56);
        v53 = vmlaq_n_f32(v53, *(float32x4_t *)((char *)v55 + 4 * a4), v56[a6]);
        v54 += 2;
        v56 += 2 * a6;
        v55 = (float32x4_t *)((char *)v55 + 8 * a4);
      }
      while (v54 <= a2);
      v51 = a2 & 0xFFFFFFFFFFFFFFFELL;
    }
    else
    {
      v51 = 0;
      v52 = 0uLL;
      v53 = 0uLL;
    }
    if (v51 < a2)
      v52 = vmlaq_n_f32(v52, *(float32x4_t *)(v8 + 4 * v51 * a4), a5[v51 * a6]);
    result = vaddq_f32(vaddq_f32(v53, v52), *v50);
    *v50 = result;
  }
  return result;
}

uint64_t sub_223162064(uint64_t result, uint64_t a2, float32x2_t *a3, uint64_t a4, float *a5, uint64_t a6, float32x2_t *a7, uint64_t a8, float a9)
{
  int64_t v9;
  float32x2_t v10;
  float32x2_t v11;
  uint64_t v12;
  float *v13;
  float32x2_t *v14;
  float32x2_t v15;
  uint64_t v16;
  uint64_t v17;
  float *v18;
  float32x2_t v19;

  if (a2 >= 2)
  {
    v9 = a2 & 0xFFFFFFFFFFFFFFFELL;
    v11 = 0;
    v12 = 2;
    v13 = a5;
    v10 = 0;
    v14 = a3;
    do
    {
      v10 = vmla_n_f32(v10, *v14, *v13);
      v11 = vmla_n_f32(v11, *(float32x2_t *)((char *)v14 + 4 * a4), v13[a6]);
      v12 += 2;
      v14 += a4;
      v13 += 2 * a6;
    }
    while (v12 <= a2);
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
  }
  if (v9 < a2)
    v10 = vmla_n_f32(v10, *(float32x2_t *)((char *)a3 + 4 * v9 * a4), a5[v9 * a6]);
  v15 = vmul_n_f32(vadd_f32(v11, v10), a9);
  if (result == 2 && a8 == 1)
  {
    *a7 = vadd_f32(v15, *a7);
  }
  else
  {
    v16 = (result + 2) & (result >> 63);
    v17 = 2;
    if (result >= 0)
      v17 = result;
    if (v16 < v17)
    {
      v18 = (float *)a7 + v16 * a8;
      do
      {
        v19 = v15;
        *v18 = *(float *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v16++ & 1))) + *v18;
        v18 += a8;
      }
      while (v17 != v16);
    }
  }
  return result;
}

_OWORD *sub_223162180(_OWORD *a1, float64x2_t *a2, float64x2_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  float64x2_t *v8;
  uint64_t v9;
  _OWORD *v10;
  float64x2_t v11;
  float64x2_t v12;
  _OWORD *result;
  float64x2_t v14;
  float64x2_t v15;
  uint64_t v16;
  float64x2_t *v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t *v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t *v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t *v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  _OWORD *v51;
  float64x2_t *v52;
  float64x2_t *v53;
  float64x2_t *v54;

  v8 = a3;
  v9 = 8 * a4;
  v11 = *(float64x2_t *)a1;
  v12 = *((float64x2_t *)a1 + 1);
  v10 = a1 + 2;
  v14 = *(float64x2_t *)v10;
  v15 = *((float64x2_t *)v10 + 1);
  result = v10 + 2;
  do
  {
    v16 = a6;
    v18 = *a3;
    v19 = a3[1];
    v20 = a3[2];
    v21 = a3[3];
    v17 = (float64x2_t *)((char *)a3 + v9);
    v23 = *v17;
    v24 = v17[1];
    v25 = v17[2];
    v26 = v17[3];
    v22 = (float64x2_t *)((char *)v17 + v9);
    v28 = *v22;
    v29 = v22[1];
    v30 = v22[2];
    v31 = v22[3];
    v27 = (float64x2_t *)((char *)v22 + v9);
    v33 = *a2;
    v34 = a2[1];
    v32 = a2 + 2;
    v35 = vmulq_n_f64(v18, a7);
    v36 = vmulq_n_f64(v19, a7);
    v37 = vmulq_n_f64(v20, a7);
    v38 = vmulq_n_f64(v21, a7);
    v39 = vmulq_n_f64(v23, a7);
    v40 = vmulq_n_f64(v24, a7);
    v41 = vmulq_n_f64(v25, a7);
    v42 = vmulq_n_f64(v26, a7);
    v43 = vmulq_n_f64(v28, a7);
    v44 = vmulq_n_f64(v29, a7);
    v45 = vmulq_n_f64(v30, a7);
    v46 = vmulq_n_f64(v31, a7);
    v47 = vmulq_n_f64(*v27, a7);
    v48 = vmulq_n_f64(v27[1], a7);
    v49 = vmulq_n_f64(v27[2], a7);
    v50 = vmulq_n_f64(v27[3], a7);
    do
    {
      v35 = vmlaq_n_f64(v35, v11, v33.f64[0]);
      v39 = vmlaq_laneq_f64(v39, v11, v33, 1);
      v43 = vmlaq_n_f64(v43, v11, v34.f64[0]);
      v47 = vmlaq_laneq_f64(v47, v11, v34, 1);
      v36 = vmlaq_n_f64(v36, v12, v33.f64[0]);
      v40 = vmlaq_laneq_f64(v40, v12, v33, 1);
      v44 = vmlaq_n_f64(v44, v12, v34.f64[0]);
      v48 = vmlaq_laneq_f64(v48, v12, v34, 1);
      v11 = *(float64x2_t *)result;
      v12 = *((float64x2_t *)result + 1);
      v51 = result + 2;
      v37 = vmlaq_n_f64(v37, v14, v33.f64[0]);
      v41 = vmlaq_laneq_f64(v41, v14, v33, 1);
      v45 = vmlaq_n_f64(v45, v14, v34.f64[0]);
      v49 = vmlaq_laneq_f64(v49, v14, v34, 1);
      v38 = vmlaq_n_f64(v38, v15, v33.f64[0]);
      v42 = vmlaq_laneq_f64(v42, v15, v33, 1);
      v46 = vmlaq_n_f64(v46, v15, v34.f64[0]);
      v50 = vmlaq_laneq_f64(v50, v15, v34, 1);
      v14 = *(float64x2_t *)v51;
      v15 = *((float64x2_t *)v51 + 1);
      result = v51 + 2;
      v33 = *v32;
      v34 = v32[1];
      v32 += 2;
      --v16;
    }
    while (v16);
    v52 = (float64x2_t *)((char *)v8 + v9);
    *v8 = v35;
    v8[1] = v36;
    v8[2] = v37;
    v8[3] = v38;
    v8 += 4;
    *v52 = v39;
    v52[1] = v40;
    v52[2] = v41;
    v52[3] = v42;
    v53 = (float64x2_t *)((char *)v52 + v9);
    *v53 = v43;
    v53[1] = v44;
    v53[2] = v45;
    v53[3] = v46;
    v54 = (float64x2_t *)((char *)v53 + v9);
    *v54 = v47;
    v54[1] = v48;
    v54[2] = v49;
    v54[3] = v50;
    a3 = v8;
    a5 -= 8;
  }
  while (a5);
  return result;
}

uint64_t sub_2231622A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float32x4_t *a5, uint64_t a6, float32x4_t a7, int8x16_t a8, double a9, double a10, double a11, float32x4_t a12)
{
  float32x4_t v12;
  float32x4_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x4_t v16;
  int32x4_t v17;
  int32x2_t v18;
  int32x2_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t i;
  float32x4_t *v25;
  uint64_t v26;
  uint64_t v27;
  float32x2_t *v28;
  __int32 *v29;
  float32x2_t *v30;
  __int32 *v31;
  float32x2_t *v32;
  int32x2_t *v33;
  float32x2_t *v34;
  int32x2_t *v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t *v48;
  float32x4_t *v49;
  float32x4_t v50;
  float32x4_t *v51;
  __n128 *v52;
  float32x4_t *v53;
  float32x4_t *v54;
  float32x4_t *v55;
  uint64_t v56;
  __int32 *v57;
  __int32 *v58;
  float32x2_t *v59;
  float32x2_t *v60;
  float32x2_t v61;
  float32x4_t v62;
  float32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  float32x4_t v66;
  float32x2_t *v67;
  float32x4_t *v68;
  float32x2_t v69;
  float32x4_t *v70;
  __int32 *v71;
  float32x4_t v72;
  __int32 *v73;
  float32x2_t *v74;
  float32x2_t *v75;
  uint64_t result;
  unint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  float *v80;
  __int32 *v81;
  float *v82;
  __int32 *v83;
  float32x2_t v84;
  float32x2_t v85;
  float v86;
  float v87;
  float32x2_t v88;
  float32x2_t v89;
  float32x2_t *v90;
  float32x2_t v91;
  float32x2_t *v92;
  float32x2_t *v93;
  uint64_t v94;
  float32x2_t *v95;
  float32x2_t *v96;
  float32x2_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float32x2_t v100;
  float32x2_t v101;
  float32x2_t *v102;
  float32x2_t v103;
  float32x2_t *v104;
  float32x2_t *v105;
  uint64_t v106;
  uint64_t v107;
  float32x2_t *v108;
  __int32 *v109;
  __int32 *v110;
  float32x2_t v111;
  float v112;
  float32x2_t v113;
  uint64_t v114;
  unint64_t *v115;
  float32x2_t v116;
  float v117;

  a7.i64[1] = a8.i64[0];
  v20 = 0;
  v21 = 4 * a4;
  v22 = 4 * a6;
  v23 = a1 <= 3;
  for (i = a1 - 3; !v23; v20 += 4)
  {
    v25 = a5;
    a5 = (float32x4_t *)((char *)a5 + 4 * v22);
    if (v20)
    {
      v26 = 0;
      do
      {
        v27 = a2;
        v28 = (float32x2_t *)(a3 + v20 * v21);
        v29 = (__int32 *)(a3 + v26 * v21);
        v30 = (float32x2_t *)((char *)v28 + v21);
        v31 = &v29[(unint64_t)v21 / 4];
        v32 = (float32x2_t *)((char *)v28 + v21 + v21);
        v33 = (int32x2_t *)&v29[(unint64_t)v21 / 4 + (unint64_t)v21 / 4];
        v34 = (float32x2_t *)((char *)v32 + v21);
        v35 = (int32x2_t *)((char *)v33 + v21);
        v36 = (float32x4_t)veorq_s8(a8, a8);
        v37 = v36;
        v38 = v36;
        v39 = v36;
        if ((a2 & 1) == 0)
          goto LABEL_7;
        v16.i32[0] = *v29++;
        v17.i32[0] = *v31++;
        v18.i32[0] = v33->i32[0];
        v33 = (int32x2_t *)((char *)v33 + 4);
        v19.i32[0] = v35->i32[0];
        v35 = (int32x2_t *)((char *)v35 + 4);
        v40 = v28->f32[0];
        v28 = (float32x2_t *)((char *)v28 + 4);
        v41 = v30->f32[0];
        v30 = (float32x2_t *)((char *)v30 + 4);
        v42 = v32->f32[0];
        v32 = (float32x2_t *)((char *)v32 + 4);
        v43 = v34->f32[0];
        v34 = (float32x2_t *)((char *)v34 + 4);
        *(int32x2_t *)v16.f32 = vtrn1_s32(*(int32x2_t *)v16.f32, *(int32x2_t *)v17.i8);
        v19 = vtrn1_s32(v18, v19);
        *(int32x2_t *)&v16.u32[2] = v19;
        v36 = vmlaq_n_f32(v36, v16, v40);
        v37 = vmlaq_n_f32(v37, v16, v41);
        v38 = vmlaq_n_f32(v38, v16, v42);
        v39 = vmlaq_n_f32(v39, v16, v43);
        v27 = a2 - 1;
        if (a2 > 1)
        {
LABEL_7:
          do
          {
            v16.i64[0] = *(_QWORD *)v29;
            v29 += 2;
            v17.i64[0] = *(_QWORD *)v31;
            v31 += 2;
            v18 = *v33++;
            v19 = *v35++;
            v44 = *v28++;
            v45 = *v30++;
            v14 = *v32++;
            v15 = *v34++;
            *(int32x2_t *)&v16.u32[2] = v18;
            v17.u64[1] = (unint64_t)v19;
            v46 = (float32x4_t)vtrn1q_s32((int32x4_t)v16, v17);
            v47 = (float32x4_t)vtrn2q_s32((int32x4_t)v16, v17);
            v36 = vmlaq_lane_f32(vmlaq_n_f32(v36, v46, v44.f32[0]), v47, v44, 1);
            v37 = vmlaq_lane_f32(vmlaq_n_f32(v37, v46, v45.f32[0]), v47, v45, 1);
            v38 = vmlaq_lane_f32(vmlaq_n_f32(v38, v46, v14.f32[0]), v47, v14, 1);
            v39 = vmlaq_lane_f32(vmlaq_n_f32(v39, v46, v15.f32[0]), v47, v15, 1);
            v23 = v27 <= 2;
            v27 -= 2;
          }
          while (!v23);
        }
        a12 = *v25;
        v48 = (float32x4_t *)((char *)v25 + v22);
        v50 = *v48;
        v49 = (float32x4_t *)((char *)v48 + v22);
        v12 = *v49;
        v51 = (float32x4_t *)((char *)v49 + v22);
        v13 = *v51;
        v52 = (__n128 *)((char *)v51 + v22 + -4 * v22);
        a8 = (int8x16_t)vmlaq_laneq_f32(vmulq_n_f32(v36, a7.f32[0]), a12, a7, 2);
        *v52 = (__n128)a8;
        v53 = (float32x4_t *)((char *)v52 + v22);
        *v53 = vmlaq_laneq_f32(vmulq_n_f32(v37, a7.f32[0]), v50, a7, 2);
        v54 = (float32x4_t *)((char *)v53 + v22);
        *v54 = vmlaq_laneq_f32(vmulq_n_f32(v38, a7.f32[0]), v12, a7, 2);
        v55 = (float32x4_t *)((char *)v54 + v22);
        *v55 = vmlaq_laneq_f32(vmulq_n_f32(v39, a7.f32[0]), v13, a7, 2);
        v25 = (float32x4_t *)((char *)v55 + v22 + -4 * v22 + 16);
        v26 += 4;
      }
      while (v26 < v20);
    }
    v56 = a2;
    v57 = (__int32 *)(a3 + v20 * v21);
    v58 = &v57[(unint64_t)v21 / 4];
    v59 = (float32x2_t *)&v57[(unint64_t)v21 / 4 + (unint64_t)v21 / 4];
    v60 = (float32x2_t *)((char *)v59 + v21);
    a8 = veorq_s8(a8, a8);
    v61 = *(float32x2_t *)a8.i8;
    v62 = (float32x4_t)a8;
    v63 = (float32x4_t)a8;
    if ((a2 & 1) == 0)
      goto LABEL_12;
    v12.i32[0] = *v57++;
    v13.i32[0] = *v58++;
    v14.i32[0] = v59->i32[0];
    v59 = (float32x2_t *)((char *)v59 + 4);
    v15.i32[0] = v60->i32[0];
    v60 = (float32x2_t *)((char *)v60 + 4);
    *(int32x2_t *)v16.f32 = vtrn1_s32(*(int32x2_t *)v12.f32, *(int32x2_t *)v13.f32);
    v19 = vtrn1_s32((int32x2_t)v14, (int32x2_t)v15);
    *(int32x2_t *)&v16.u32[2] = v19;
    *(float32x2_t *)a8.i8 = vmla_n_f32(*(float32x2_t *)a8.i8, *(float32x2_t *)v16.f32, v12.f32[0]);
    v61 = vmla_n_f32(v61, *(float32x2_t *)v16.f32, v13.f32[0]);
    v62 = vmlaq_n_f32(v62, v16, v14.f32[0]);
    v63 = vmlaq_n_f32(v63, v16, v15.f32[0]);
    v56 = a2 - 1;
    if (a2 > 1)
    {
LABEL_12:
      do
      {
        v64.i64[0] = *(_QWORD *)v57;
        v57 += 2;
        v65.i64[0] = *(_QWORD *)v58;
        v58 += 2;
        v14 = *v59++;
        v15 = *v60++;
        v64.u64[1] = (unint64_t)v14;
        v65.u64[1] = (unint64_t)v15;
        a12 = (float32x4_t)vtrn1q_s32(v64, v65);
        v66 = (float32x4_t)vtrn2q_s32(v64, v65);
        *(float32x2_t *)a8.i8 = vmla_lane_f32(vmla_n_f32(*(float32x2_t *)a8.i8, *(float32x2_t *)a12.f32, *(float *)v64.i32), *(float32x2_t *)v66.f32, *(float32x2_t *)v64.i8, 1);
        v61 = vmla_lane_f32(vmla_n_f32(v61, *(float32x2_t *)a12.f32, *(float *)v65.i32), *(float32x2_t *)v66.f32, *(float32x2_t *)v65.i8, 1);
        v62 = vmlaq_lane_f32(vmlaq_n_f32(v62, a12, v14.f32[0]), v66, v14, 1);
        v63 = vmlaq_lane_f32(vmlaq_n_f32(v63, a12, v15.f32[0]), v66, v15, 1);
        v23 = v56 <= 2;
        v56 -= 2;
      }
      while (!v23);
    }
    a12.i32[0] = v25->i32[0];
    v67 = (float32x2_t *)((char *)v25 + v22);
    v69 = *v67;
    v68 = (float32x4_t *)((char *)v67 + v22);
    v12 = *v68;
    v70 = (float32x4_t *)((char *)v68 + v22);
    v13 = *v70;
    v71 = (__int32 *)((char *)v70 + v22 + -4 * v22);
    *(float *)a8.i32 = *(float *)a8.i32 * a7.f32[0];
    *(float32x2_t *)a8.i8 = vmla_laneq_f32(*(float32x2_t *)a8.i8, *(float32x2_t *)a12.f32, a7, 2);
    v72 = vmlaq_laneq_f32(vmulq_n_f32(v62, a7.f32[0]), v12, a7, 2);
    v73 = &v71[(unint64_t)v22 / 2];
    *v71 = a8.i32[0];
    v74 = (float32x2_t *)&v71[(unint64_t)v22 / 4];
    *v74 = vmla_laneq_f32(vmul_n_f32(v61, a7.f32[0]), v69, a7, 2);
    v75 = (float32x2_t *)((char *)v74 + v22);
    *v75 = *(float32x2_t *)v72.f32;
    v73[2] = v72.i32[2];
    *(float32x4_t *)&v75->f32[(unint64_t)v22 / 4] = vmlaq_laneq_f32(vmulq_n_f32(v63, a7.f32[0]), v13, a7, 2);
    v23 = i <= 4;
    i -= 4;
  }
  v23 = i <= -3;
  result = i + 3;
  if (!v23)
  {
    if (result >= 2)
    {
      v77 = (unint64_t *)a5;
      a5 = (float32x4_t *)((char *)a5 + 2 * v22);
      if (v20)
      {
        v78 = 0;
        do
        {
          v79 = a2;
          v80 = (float *)(a3 + v20 * v21);
          v81 = (__int32 *)(a3 + v78 * v21);
          v82 = &v80[(unint64_t)v21 / 4];
          v83 = &v81[(unint64_t)v21 / 4];
          v84 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
          v85 = v84;
          if ((a2 & 1) == 0)
            goto LABEL_22;
          v16.i32[0] = *v81++;
          v17.i32[0] = *v83++;
          v86 = *v80++;
          v87 = *v82++;
          *(int32x2_t *)v16.f32 = vtrn1_s32(*(int32x2_t *)v16.f32, *(int32x2_t *)v17.i8);
          v84 = vmla_n_f32(v84, *(float32x2_t *)v16.f32, v86);
          v85 = vmla_n_f32(v85, *(float32x2_t *)v16.f32, v87);
          v79 = a2 - 1;
          if (a2 > 1)
          {
LABEL_22:
            do
            {
              v16.i64[0] = *(_QWORD *)v81;
              v81 += 2;
              v17.i64[0] = *(_QWORD *)v83;
              v83 += 2;
              v12.i64[0] = *(_QWORD *)v80;
              v80 += 2;
              v13.i64[0] = *(_QWORD *)v82;
              v82 += 2;
              v88 = (float32x2_t)vtrn1_s32(*(int32x2_t *)v16.f32, *(int32x2_t *)v17.i8);
              v89 = (float32x2_t)vtrn2_s32(*(int32x2_t *)v16.f32, *(int32x2_t *)v17.i8);
              v84 = vmla_lane_f32(vmla_n_f32(v84, v88, v12.f32[0]), v89, *(float32x2_t *)v12.f32, 1);
              v85 = vmla_lane_f32(vmla_n_f32(v85, v88, v13.f32[0]), v89, *(float32x2_t *)v13.f32, 1);
              v23 = v79 <= 2;
              v79 -= 2;
            }
            while (!v23);
          }
          a12.i64[0] = *v77;
          v90 = (float32x2_t *)((char *)v77 + v22);
          v91 = *v90;
          v92 = (float32x2_t *)((char *)v90 + v22 + -2 * v22);
          *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v84, a7.f32[0]), *(float32x2_t *)a12.f32, a7, 2);
          *v92 = *(float32x2_t *)a8.i8;
          v93 = (float32x2_t *)((char *)v92 + v22);
          *v93 = vmla_laneq_f32(vmul_n_f32(v85, a7.f32[0]), v91, a7, 2);
          v77 = (unint64_t *)((char *)&v93[1] + v22 + -2 * v22);
          v78 += 2;
        }
        while (v78 < v20);
      }
      v94 = a2;
      v95 = (float32x2_t *)(a3 + v20 * v21);
      v96 = (float32x2_t *)((char *)v95 + v21);
      v97 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
      v98 = v97;
      if ((a2 & 1) == 0)
        goto LABEL_27;
      v12.i32[0] = v95->i32[0];
      v95 = (float32x2_t *)((char *)v95 + 4);
      v13.i32[0] = v96->i32[0];
      v96 = (float32x2_t *)((char *)v96 + 4);
      *(int32x2_t *)v16.f32 = vtrn1_s32(*(int32x2_t *)v12.f32, *(int32x2_t *)v13.f32);
      v97 = vmla_n_f32(v97, *(float32x2_t *)v16.f32, v12.f32[0]);
      v98 = vmla_n_f32(v98, *(float32x2_t *)v16.f32, v13.f32[0]);
      v94 = a2 - 1;
      if (a2 > 1)
      {
LABEL_27:
        do
        {
          v99 = *v95++;
          v100 = *v96++;
          *(int32x2_t *)a12.f32 = vtrn1_s32((int32x2_t)v99, (int32x2_t)v100);
          v101 = (float32x2_t)vtrn2_s32((int32x2_t)v99, (int32x2_t)v100);
          v97 = vmla_lane_f32(vmla_n_f32(v97, *(float32x2_t *)a12.f32, v99.f32[0]), v101, v99, 1);
          v98 = vmla_lane_f32(vmla_n_f32(v98, *(float32x2_t *)a12.f32, v100.f32[0]), v101, v100, 1);
          v23 = v94 <= 2;
          v94 -= 2;
        }
        while (!v23);
      }
      a12.i32[0] = *(_DWORD *)v77;
      v102 = (float32x2_t *)((char *)v77 + v22);
      v103 = *v102;
      v104 = (float32x2_t *)((char *)v102 + v22 + -2 * v22);
      v97.f32[0] = v97.f32[0] * a7.f32[0];
      *(float32x2_t *)a8.i8 = vmla_laneq_f32(v97, *(float32x2_t *)a12.f32, a7, 2);
      v104->i32[0] = a8.i32[0];
      *(float32x2_t *)((char *)v104 + v22) = vmla_laneq_f32(vmul_n_f32(v98, a7.f32[0]), v103, a7, 2);
      result -= 2;
      v20 += 2;
    }
    if (result >= 1)
    {
      v105 = (float32x2_t *)a5;
      v106 = 0;
      if (v20 >= 1)
      {
        do
        {
          v107 = a2;
          v108 = (float32x2_t *)(a3 + v20 * v21);
          v109 = (__int32 *)(a3 + v106 * v21);
          v110 = &v109[(unint64_t)v21 / 4];
          v111 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
          if ((a2 & 1) == 0)
            goto LABEL_34;
          v16.i32[0] = *v109++;
          v17.i32[0] = *v110++;
          v112 = v108->f32[0];
          v108 = (float32x2_t *)((char *)v108 + 4);
          *(int32x2_t *)v16.f32 = vtrn1_s32(*(int32x2_t *)v16.f32, *(int32x2_t *)v17.i8);
          v111 = vmla_n_f32(v111, *(float32x2_t *)v16.f32, v112);
          v107 = a2 - 1;
          if (a2 > 1)
          {
LABEL_34:
            do
            {
              v16.i64[0] = *(_QWORD *)v109;
              v109 += 2;
              v17.i64[0] = *(_QWORD *)v110;
              v110 += 2;
              v113 = *v108++;
              v111 = vmla_lane_f32(vmla_n_f32(v111, (float32x2_t)vtrn1_s32(*(int32x2_t *)v16.f32, *(int32x2_t *)v17.i8), v113.f32[0]), (float32x2_t)vtrn2_s32(*(int32x2_t *)v16.f32, *(int32x2_t *)v17.i8), v113, 1);
              v23 = v107 <= 2;
              v107 -= 2;
            }
            while (!v23);
          }
          *(float32x2_t *)a12.f32 = *v105;
          *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v111, a7.f32[0]), *v105, a7, 2);
          *v105++ = *(float32x2_t *)a8.i8;
          v106 += 2;
        }
        while (v106 < v20 - 1);
      }
      v114 = a2;
      v115 = (unint64_t *)(a3 + v20 * v21);
      v116 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
      if ((a2 & 1) == 0
        || (v117 = *(float *)v115,
            v115 = (unint64_t *)((char *)v115 + 4),
            v116.f32[0] = v117 * v117,
            v114 = a2 - 1,
            a2 > 1))
      {
        do
        {
          a12.i64[0] = *v115++;
          v116 = vmla_f32(v116, *(float32x2_t *)a12.f32, *(float32x2_t *)a12.f32);
          v23 = v114 <= 2;
          v114 -= 2;
        }
        while (!v23);
        v116.f32[0] = vaddv_f32(v116);
      }
      a12.i32[0] = v105->i32[0];
      v116.f32[0] = v116.f32[0] * a7.f32[0];
      v105->i32[0] = vmla_laneq_f32(v116, *(float32x2_t *)a12.f32, a7, 2).u32[0];
    }
  }
  return result;
}

void sub_22316275C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,__int128 a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,int a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,__int128 a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int128 a50,__int128 a51,__int128 a52,__int128 a53,__int128 a54,__int128 a55,__int128 a56,__int128 a57,char a58)
{
  int v58;
  uint64_t v59;
  uint64_t v60;
  float v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  float v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(float);
  void (*v71)(__n128);
  float32x4_t *v72;
  unint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __n128 v79;
  uint64_t v80;
  uint64_t v81;
  _BOOL4 v82;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  float *(*v88)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float);
  float *(*v89)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v90;
  float v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _OWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  float32x4_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  float32x2_t v110;
  float32x2_t *v111;
  __n128 *v112;
  float32x4_t v113;
  __int128 *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  float32x2_t v119;
  float32x2_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  float32x4_t *v124;
  float32x4_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  float32x4_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  const float *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  __int128 *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  __int128 *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void (*v153)(float);
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void (*vars0)(__n128);
  uint64_t vars8;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  float32x2_t v175;
  float *(*v176)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float);
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  uint64_t v184;
  float *(*v185)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  __int128 v190;
  float32x4_t *v191;
  uint64_t v192;
  uint64_t v193;

  v61 = MEMORY[0x24BDAC7A8]();
  v193 = v63;
  v186 = v64;
  v66 = v65;
  v67 = v61;
  v68 = v59;
  STACK[0x102A8] = *MEMORY[0x24BDAC8D0];
  if (v58 == 111)
    v69 = 1;
  else
    v69 = v60;
  v70 = (void (*)(float))sub_22315DBCC;
  if (v58 == 111)
    v70 = (void (*)(float))sub_22315DD08;
  v153 = v70;
  if (v58 == 111)
    v71 = (void (*)(__n128))sub_22315DEF8;
  else
    v71 = (void (*)(__n128))sub_22315E08C;
  v190 = v62;
  if (v59 < 1)
  {
    v191 = (float32x4_t *)&a58;
    v73 = &STACK[0x10240];
  }
  else
  {
    v72 = (float32x4_t *)malloc_type_malloc((v59 << 9) + 65632, 0x100004052888210uLL);
    *(_QWORD *)&v62 = v190;
    v191 = v72;
    v73 = (unint64_t *)&v72[4096];
  }
  v163 = (uint64_t)(v73 + 8);
  if (v66 >= 1)
  {
    v156 = 0;
    v74 = 0;
    v184 = v68 - 3;
    v175 = (float32x2_t)vdupq_lane_s32(*(int32x2_t *)&v62, 0).u64[0];
    if (v68 <= 0)
      v75 = -(-v68 & 3);
    else
      v75 = v68 & 3;
    v164 = (v193 << 9) + 512;
    v165 = v75;
    v181 = 16 * v193;
    v179 = v186 + 12 * v193;
    v162 = 4 * v193;
    v174 = v186 + 16;
    v76 = 128;
    v178 = v186 + 8 * v193;
    v177 = v186 + 4 * v193;
    v152 = v66;
    vars8 = v69;
    v161 = v68;
    vars0 = v71;
    while (1)
    {
      v77 = v66 >= v76 ? v76 : v66;
      v154 = v74 + 128;
      v155 = v76;
      v78 = v74 + 128 <= v66 ? 128 : v66 - v74;
      v192 = v78;
      v153(v67);
      v79 = (__n128)v190;
      if (v68 >= 1)
        break;
LABEL_134:
      v76 = v155 + 128;
      v156 -= 128;
      v74 = v154;
      v66 = v152;
      if (v154 >= v152)
        goto LABEL_135;
    }
    v173 = 0;
    v80 = 0;
    v81 = 0;
    v166 = (v77 + v156) << 9;
    v182 = 16 * (v77 + v156);
    v82 = *(float *)&v190 != 0.0;
    if (*(float *)&v190 == 1.0 || v74 != 0)
      v82 = 0;
    v183 = v82;
    v84 = v192 & 3;
    if (v192 <= 0)
      v84 = -(-v192 & 3);
    v157 = 4 - v84;
    v158 = v84;
    v170 = v186;
    v85 = 128;
    v172 = v186;
    v171 = v163;
    v185 = (float *(*)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t))sub_2231587E0;
    v176 = (float *(*)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float))sub_223159E50;
    while (1)
    {
      v168 = v85;
      v169 = v80;
      if (v68 >= v85)
        v86 = v85;
      else
        v86 = v68;
      v180 = v86 + v80;
      v167 = v81 + 128;
      if (v81 + 128 <= v68)
        v87 = 128;
      else
        v87 = v68 - v81;
      v188 = v186 + 4 * v81;
      v189 = v81;
      v88 = v176;
      if ((v87 & 7) != 0)
        v88 = sub_22315D1A0;
      v176 = v88;
      v89 = v185;
      if ((v87 & 7) != 0)
        v89 = sub_22315E0A0;
      v185 = v89;
      v187 = v87;
      v71(v79);
      v90 = v189;
      v91 = *(float *)&v190;
      v92 = v189;
      if (v189 < v184)
        break;
LABEL_92:
      if (v165)
      {
        if (v92 - v90 >= v187)
          v131 = v187;
        else
          v131 = v92 - v90;
        v132 = v187 - v131;
        if (v187 - v131 >= 3)
          v133 = 3;
        else
          v133 = v187 - v131;
        if (v132 >= 1)
        {
          v79 = 0uLL;
          a54 = 0u;
          a55 = 0u;
          a52 = 0u;
          a53 = 0u;
          a50 = 0u;
          a51 = 0u;
        }
        v134 = v188 + 4 * v92 * v193;
        v135 = (const float *)(v163 + 4 * v92 * v192);
        if (v183)
        {
          if (v131)
            sub_223159114(v191, (const float *)(v163 + 4 * v92 * v192), v134, v193, v131, v165, v192, v91);
          if (v132 >= 1)
          {
            v136 = v158;
            if (v158)
            {
              if (v131 <= 0)
                v137 = -(-v131 & 7);
              else
                v137 = v131 & 7;
              v136 = v137 * v157;
            }
            sub_223159244((float32x4_t *)((char *)v191 + 4 * v131 * v192 + 4 * v136), v135, (uint64_t)&a50, 8, v133, v165, v192);
            if (v165 >= 1)
            {
              v138 = 0;
              v139 = v92 + v169;
              if (v92 + v169 >= v180)
                v139 = v180;
              v140 = v170 + v162 * v92 + 4 * v139;
              v141 = &a50;
              v142 = 1;
              do
              {
                v143 = 0;
                do
                {
                  v79.n128_f32[0] = *((float *)v141 + v143) + (float)(*(float *)(v140 + 4 * v143) * *(float *)&v190);
                  *(_DWORD *)(v140 + 4 * v143++) = v79.n128_u32[0];
                }
                while (v142 != v143);
                ++v138;
                ++v142;
                v141 += 2;
                v140 += v162;
              }
              while (v138 != v165);
            }
          }
        }
        else
        {
          if (v131)
            sub_223159244(v191, (const float *)(v163 + 4 * v92 * v192), v134, v193, v131, v165, v192);
          if (v132 >= 1)
          {
            v144 = v158;
            if (v158)
            {
              if (v131 <= 0)
                v145 = -(-v131 & 7);
              else
                v145 = v131 & 7;
              v144 = v145 * v157;
            }
            sub_223159244((float32x4_t *)((char *)v191 + 4 * v131 * v192 + 4 * v144), v135, (uint64_t)&a50, 8, v133, v165, v192);
            if (v165 >= 1)
            {
              v146 = 0;
              v147 = v92 + v169;
              if (v92 + v169 >= v180)
                v147 = v180;
              v148 = v170 + v162 * v92 + 4 * v147;
              v149 = &a50;
              v150 = 1;
              do
              {
                v151 = 0;
                do
                {
                  v79.n128_f32[0] = *(float *)(v148 + 4 * v151) + *((float *)v149 + v151);
                  *(_DWORD *)(v148 + 4 * v151++) = v79.n128_u32[0];
                }
                while (v150 != v151);
                ++v146;
                ++v150;
                v149 += 2;
                v148 += v162;
              }
              while (v146 != v165);
            }
          }
        }
      }
      v171 += v166;
      v172 += v164;
      v85 = v168 + 128;
      v80 = v169 - 128;
      v173 += v164;
      v170 += 512;
      v81 = v167;
      if (v167 >= v68)
        goto LABEL_134;
    }
    v93 = 0;
    v95 = v172;
    v94 = v173;
    v96 = (_OWORD *)v171;
    v97 = v189;
    while (1)
    {
      if (v93 <= 0)
        v98 = -(-v93 & 7);
      else
        v98 = v93 & 7;
      v99 = v93 - v98;
      if (v93 - v98 >= v187)
        v100 = v187;
      else
        v100 = v93 - v98;
      v101 = v187 - v100;
      if (v187 - v100 >= 1)
      {
        v79 = 0uLL;
        a56 = 0u;
        a57 = 0u;
        a54 = 0u;
        a55 = 0u;
        a52 = 0u;
        a53 = 0u;
        a50 = 0u;
        a51 = 0u;
      }
      v102 = v90 + v93;
      v103 = v188 + 4 * v97 * v193;
      v104 = (float32x4_t *)(v186 + v94);
      if (v183)
      {
        if (v100)
        {
          v176(v191, (uint64_t)v96, v104, v193, v100, v192, v91);
          v91 = *(float *)&v190;
        }
        if (v101 < 1)
          goto LABEL_90;
        if (v101 >= 8)
          v105 = 8;
        else
          v105 = v187 - v100;
        ((void (*)(float32_t *, _OWORD *, __int128 *, uint64_t, uint64_t))v185)(&v191->f32[v100 * v192], v96, &a50, 8, v105);
        v106 = v103 + 4 * v100;
        if (v180 >= v99)
          v107 = v99;
        else
          v107 = v180;
        v108 = 4 * v107;
        if ((v102 & 4) != 0)
        {
          v91 = *(float *)&v190;
          *(float32x4_t *)(v95 + v108) = vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v95 + v108), *(float *)&v190), (float32x4_t)a50);
          if (v180 >= v99)
            v121 = v99;
          else
            v121 = v180;
          *(float *)(v174 + 4 * v121 + v94) = *(float *)&a51
                                            + (float)(*(float *)(v174 + 4 * v121 + v94) * *(float *)&v190);
          v122 = v177 + 4 * v121 + v94;
          *(float32x4_t *)v122 = vaddq_f32(vmulq_n_f32(*(float32x4_t *)v122, *(float *)&v190), (float32x4_t)a52);
          *(float32x2_t *)(v122 + 16) = vadd_f32(vmul_f32(v175, *(float32x2_t *)(v122 + 16)), *(float32x2_t *)&a53);
          v123 = v178 + 4 * v121 + v94;
          *(float32x4_t *)v123 = vaddq_f32(vmulq_n_f32(*(float32x4_t *)v123, *(float *)&v190), (float32x4_t)a54);
          *(float32x2_t *)(v123 + 16) = vadd_f32(vmul_f32(v175, *(float32x2_t *)(v123 + 16)), *(float32x2_t *)&a55);
          *(float *)(v123 + 24) = *((float *)&a55 + 2) + (float)(*(float *)(v123 + 24) * *(float *)&v190);
          v124 = (float32x4_t *)(v179 + v94 + 4 * v121);
          v125 = v124[1];
          *v124 = vaddq_f32(vmulq_n_f32(*v124, *(float *)&v190), (float32x4_t)a56);
          v112 = (__n128 *)(v106 + 12 * v193 + 16);
          v113 = vmulq_n_f32(v125, *(float *)&v190);
          v114 = &a57;
        }
        else
        {
          v91 = *(float *)&v190;
          *(float *)(v95 + v108) = *(float *)&a50 + (float)(*(float *)(v95 + v108) * *(float *)&v190);
          if (v180 >= v99)
            v109 = v99;
          else
            v109 = v180;
          v110 = (float32x2_t)a54;
          *(float32x2_t *)(v177 + 4 * v109 + v94) = vadd_f32(vmul_f32(v175, *(float32x2_t *)(v177 + 4 * v109 + v94)), *(float32x2_t *)&a52);
          v111 = (float32x2_t *)(v178 + 4 * v109 + v94);
          *v111 = vadd_f32(vmul_f32(v175, *v111), v110);
          v111[1].f32[0] = *((float *)&a54 + 2) + (float)(v111[1].f32[0] * *(float *)&v190);
          v112 = (__n128 *)(v106 + 12 * v193);
          v113 = vmulq_n_f32(*(float32x4_t *)(v179 + v94 + 4 * v109), *(float *)&v190);
          v114 = &a56;
        }
      }
      else
      {
        if (v100)
        {
          v185(v191, (uint64_t)v96, v104, v193, v100, v192);
          v91 = *(float *)&v190;
        }
        if (v101 < 1)
          goto LABEL_90;
        if (v101 >= 8)
          v115 = 8;
        else
          v115 = v187 - v100;
        ((void (*)(float32_t *, _OWORD *, __int128 *, uint64_t, uint64_t))v185)(&v191->f32[v100 * v192], v96, &a50, 8, v115);
        v116 = v180;
        if (v180 >= v99)
          v117 = v99;
        else
          v117 = v180;
        v118 = 4 * v117;
        if ((v102 & 4) != 0)
        {
          *(float32x4_t *)(v95 + v118) = vaddq_f32(*(float32x4_t *)(v95 + v118), (float32x4_t)a50);
          if (v180 >= v99)
            v126 = v99;
          else
            v126 = v180;
          *(float *)(v174 + 4 * v126 + v94) = *(float *)(v174 + 4 * v126 + v94) + *(float *)&a51;
          v127 = v177 + 4 * v126 + v94;
          *(float32x4_t *)v127 = vaddq_f32(*(float32x4_t *)v127, (float32x4_t)a52);
          *(float32x2_t *)(v127 + 16) = vadd_f32(*(float32x2_t *)(v127 + 16), *(float32x2_t *)&a53);
          v128 = v178 + 4 * v126 + v94;
          *(float32x4_t *)v128 = vaddq_f32(*(float32x4_t *)v128, (float32x4_t)a54);
          *(float32x2_t *)(v128 + 16) = vadd_f32(*(float32x2_t *)(v128 + 16), *(float32x2_t *)&a55);
          *(float *)(v128 + 24) = *(float *)(v128 + 24) + *((float *)&a55 + 2);
          v129 = v179 + v94 + 4 * v126;
          *(float32x4_t *)v129 = vaddq_f32(*(float32x4_t *)v129, (float32x4_t)a56);
          v130 = *(float32x4_t *)(v129 + 16);
          v112 = (__n128 *)(v129 + 16);
          v113 = v130;
          v114 = &a57;
        }
        else
        {
          *(float *)(v95 + v118) = *(float *)(v95 + v118) + *(float *)&a50;
          if (v180 >= v99)
            v116 = v99;
          v119 = (float32x2_t)a54;
          *(float32x2_t *)(v177 + 4 * v116 + v94) = vadd_f32(*(float32x2_t *)(v177 + 4 * v116 + v94), *(float32x2_t *)&a52);
          v120 = (float32x2_t *)(v178 + 4 * v116 + v94);
          *v120 = vadd_f32(*v120, v119);
          v120[1].f32[0] = v120[1].f32[0] + *((float *)&a54 + 2);
          v112 = (__n128 *)(v103 + 4 * v100 + 12 * v193);
          v113 = *(float32x4_t *)(v179 + v94 + 4 * v116);
          v114 = &a56;
        }
        v91 = *(float *)&v190;
      }
      v79 = (__n128)vaddq_f32(v113, *(float32x4_t *)v114);
      *v112 = v79;
LABEL_90:
      v97 += 4;
      v93 += 4;
      v90 = v189;
      v92 = v189 + v93;
      v96 = (_OWORD *)((char *)v96 + v182);
      v95 += v181;
      v94 += v181;
      if (v189 + v93 >= v184)
      {
        v68 = v161;
        v71 = vars0;
        goto LABEL_92;
      }
    }
  }
LABEL_135:
  if (v68 >= 1)
    free(v191);
}

void sub_2231631C4(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v5;
  size_t v6;
  uint64_t v7;

  if (a2 >= 1)
  {
    v5 = a2;
    v6 = 4 * a1;
    v7 = 4 * a4;
    do
    {
      bzero(a3, v6);
      a3 += v7;
      --v5;
    }
    while (v5);
  }
}

void sub_223163214(int __N, uint64_t a2, float *__X, uint64_t a4, float a5)
{
  uint64_t v7;
  uint64_t v9;

  if (a2 >= 1)
  {
    v7 = a2;
    v9 = 4 * a4;
    do
    {
      cblas_sscal(__N, a5, __X, 1);
      __X = (float *)((char *)__X + v9);
      --v7;
    }
    while (v7);
  }
}

void sub_223163278(int a1, uint64_t __N, float *__X, uint64_t a4, float a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = __N;
  if (a1 == 121)
  {
    if (__N >= 1)
    {
      v8 = 0;
      v9 = 4 * a4;
      do
      {
        cblas_sscal(++v8, a5, __X, 1);
        __X = (float *)((char *)__X + v9);
      }
      while (v7 != v8);
    }
  }
  else if (__N >= 1)
  {
    v10 = 4 * a4 + 4;
    do
    {
      cblas_sscal(v7, a5, __X, 1);
      __X = (float *)((char *)__X + v10);
      --v7;
    }
    while (v7);
  }
}

void sub_22316331C(int a1, uint64_t a2, uint64_t a3, uint64_t __incY)
{
  uint64_t v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  const float *v9;

  v5 = a3;
  v6 = a2;
  if (a1 == 121)
  {
    if (a2 >= 2)
    {
      v7 = (float *)(a3 + 4);
      v8 = 1;
      v9 = (const float *)(a3 + 4 * __incY);
      do
      {
        cblas_scopy(v8++, v9, 1, v7++, __incY);
        v9 += __incY;
      }
      while (v6 != v8);
    }
  }
  else if (a2 >= 2)
  {
    do
    {
      cblas_scopy(--v6, (const float *)(v5 + 4), 1, (float *)(v5 + 4 * __incY), __incY);
      v5 += 4 * __incY + 4;
    }
    while (v6 != 1);
  }
}

uint64_t sub_2231633E0(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4, int32x4_t *a5)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int32x4_t v14;
  int32x4_t v15;
  uint64_t v16;
  uint64_t v17;
  int32x4_t v18;
  int32x4_t v19;
  uint64_t v20;
  uint64_t v21;
  int32x4_t *v22;
  BOOL v23;
  int32x4_t v24;
  int32x4_t v25;

  v5 = (uint64_t *)((char *)a3 + 4 * a4);
  v6 = &a3[a4];
  v7 = &v5[a4];
  v8 = &v6[a4];
  v9 = &v7[a4];
  v10 = &v8[a4];
  v11 = &v9[a4];
  v12 = 32 * a4 - 4 * a2;
  do
  {
    v13 = a2 - 1;
    if (a2 > 1)
    {
      do
      {
        v14.i64[0] = *a3++;
        v15.i64[0] = *v5++;
        v16 = *v6++;
        v17 = *v7++;
        v18.i64[0] = *v8++;
        v19.i64[0] = *v9++;
        v20 = *v10++;
        v21 = *v11++;
        v14.i64[1] = v16;
        v15.i64[1] = v17;
        v18.i64[1] = v20;
        v19.i64[1] = v21;
        *a5 = vtrn1q_s32(v14, v15);
        a5[1] = vtrn1q_s32(v18, v19);
        v22 = a5 + 2;
        *v22 = vtrn2q_s32(v14, v15);
        v22[1] = vtrn2q_s32(v18, v19);
        a5 = v22 + 2;
        v23 = v13 <= 2;
        v13 -= 2;
      }
      while (!v23);
    }
    if (!v13)
    {
      v24.i32[0] = *(_DWORD *)a3;
      a3 = (uint64_t *)((char *)a3 + 4);
      v24.i32[1] = *(_DWORD *)v5;
      v5 = (uint64_t *)((char *)v5 + 4);
      v24.i32[2] = *(_DWORD *)v6;
      v6 = (uint64_t *)((char *)v6 + 4);
      v24.i32[3] = *(_DWORD *)v7;
      v7 = (uint64_t *)((char *)v7 + 4);
      v25.i32[0] = *(_DWORD *)v8;
      v8 = (uint64_t *)((char *)v8 + 4);
      v25.i32[1] = *(_DWORD *)v9;
      v9 = (uint64_t *)((char *)v9 + 4);
      v25.i32[2] = *(_DWORD *)v10;
      v10 = (uint64_t *)((char *)v10 + 4);
      v25.i32[3] = *(_DWORD *)v11;
      v11 = (uint64_t *)((char *)v11 + 4);
      *a5 = v24;
      a5[1] = v25;
      a5 += 2;
    }
    v23 = result <= 8;
    result -= 8;
    a3 = (uint64_t *)((char *)a3 + v12);
    v5 = (uint64_t *)((char *)v5 + v12);
    v6 = (uint64_t *)((char *)v6 + v12);
    v7 = (uint64_t *)((char *)v7 + v12);
    v8 = (uint64_t *)((char *)v8 + v12);
    v9 = (uint64_t *)((char *)v9 + v12);
    v10 = (uint64_t *)((char *)v10 + v12);
    v11 = (uint64_t *)((char *)v11 + v12);
  }
  while (!v23);
  return result;
}

uint64_t sub_2231634B0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  int64x2_t *v12;
  int64x2_t *v13;
  int64x2_t *v14;
  int64x2_t *v15;
  float32x4_t *v16;
  float32x4_t *v17;
  uint64_t v18;
  float32x4_t *v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x2_t *v22;
  int64x2_t v23;
  float32x2_t *v24;
  int64x2_t v25;
  float32x2_t *v26;
  int64x2_t v27;
  float32x2_t *v28;
  int64x2_t v29;
  float32x4_t *v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t *v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x2_t v65;
  BOOL v66;
  float32x2_t *v67;
  float32x2_t *v68;
  float32x2_t *v69;
  float32x2_t *v70;
  __int32 *v71;
  __int32 *v72;
  float32x2_t v73;
  float v74;
  float32_t v75;
  float32_t v76;
  float32_t v77;
  __int32 *v78;
  float32x2_t v79;
  float32_t v80;
  float32_t v81;
  float32_t v82;
  float32_t v83;
  float32_t v84;
  float32_t v85;
  uint64_t j;
  int32x4_t *v87;
  int32x4_t *v88;
  float32x4_t *v89;
  float32x4_t *v90;
  uint64_t v91;
  float32x4_t *v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x2_t *v95;
  int32x4_t v96;
  float32x2_t *v97;
  int32x4_t v98;
  float32x4_t *v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float v107;
  float v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t *v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x2_t v114;
  float32x2_t v115;
  float32x2_t *v116;
  float32x2_t *v117;
  __int32 *v118;
  __int32 *v119;
  float32x2_t v120;
  float v121;
  float32_t v122;
  __int32 *v123;
  float32x2_t v124;
  float32_t v125;
  float32_t v126;
  uint64_t k;
  float32x4_t *v128;
  float32x4_t *v129;
  uint64_t v130;
  float32x4_t *v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x2_t *v134;
  float32x2_t v135;
  float32x4_t v136;
  float32x4_t *v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float v141;
  float32x4_t v142;
  float32x4_t *v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x2_t v146;
  float32x2_t *v147;
  __int32 *v148;
  __int32 *v149;
  float32x2_t v150;
  float v151;
  __int32 *v152;
  float32x2_t v153;

  v7 = 4 * a6;
  v8 = 4 * a4;
  v9 = 0;
  if (a2 <= 3)
    goto LABEL_21;
  v10 = a2 - 3;
  do
  {
    for (i = result; i > 3; *v30 = vmulq_n_f32(v49, a7))
    {
      i -= 4;
      v12 = (int64x2_t *)(a5 + v9 * v7 + 4 * i);
      v13 = (int64x2_t *)((char *)v12 + v7);
      v14 = (int64x2_t *)((char *)v12 + 2 * v7);
      v15 = (int64x2_t *)((char *)v12 + 2 * v7 + v7);
      v16 = (float32x4_t *)(a3 + 4 * i);
      v17 = (float32x4_t *)((char *)v16 + i * v8);
      v18 = i;
      v20 = *v17;
      v19 = (float32x4_t *)((char *)v17 + v8);
      v21 = *v19;
      v22 = (float32x2_t *)&v19->u32[(unint64_t)v8 / 4 + 2];
      v23 = *v12;
      v24 = (float32x2_t *)(a5 + v9 * v7);
      v25 = *v13;
      v26 = (float32x2_t *)((char *)v13 - 4 * i);
      v27 = *v14;
      v28 = (float32x2_t *)((char *)v14 - 4 * i);
      v29 = *v15;
      v30 = (float32x4_t *)((char *)v15 - 4 * i);
      v31 = (int32x4_t)vtrn1q_s64(v23, v27);
      v32 = (int32x4_t)vtrn1q_s64(v25, v29);
      v33 = (int32x4_t)vtrn2q_s64(v23, v27);
      v34 = (int32x4_t)vtrn2q_s64(v25, v29);
      v35 = (float32x4_t)vtrn1q_s32(v31, v32);
      v36 = (float32x4_t)vtrn2q_s32(v31, v32);
      v37 = (float32x4_t)vtrn1q_s32(v33, v34);
      v38 = (int64x2_t)vmulq_n_f32(v35, v20.f32[0]);
      v39 = (int64x2_t)vaddq_f32(vmulq_lane_f32(v35, *(float32x2_t *)v20.f32, 1), vmulq_lane_f32(v36, *(float32x2_t *)v21.f32, 1));
      v40 = (int64x2_t)vaddq_f32(vmlaq_n_f32(vmulq_laneq_f32(v35, v20, 2), v37, COERCE_FLOAT(*v22)), vmulq_laneq_f32(v36, v21, 2));
      v41 = (int64x2_t)vaddq_f32(vaddq_f32(vmlaq_lane_f32(vmulq_laneq_f32(v35, v20, 3), v37, *v22, 1), vmulq_laneq_f32(v36, v21, 3)), vmulq_n_f32((float32x4_t)vtrn2q_s32(v33, v34), v22->f32[(unint64_t)v8 / 4 + 1]));
      v42 = (int32x4_t)vtrn1q_s64(v38, v40);
      v43 = (int32x4_t)vtrn1q_s64(v39, v41);
      v44 = (int32x4_t)vtrn2q_s64(v38, v40);
      v45 = (int32x4_t)vtrn2q_s64(v39, v41);
      v46 = (float32x4_t)vtrn1q_s32(v42, v43);
      v47 = (float32x4_t)vtrn2q_s32(v42, v43);
      v48 = (float32x4_t)vtrn1q_s32(v44, v45);
      v49 = (float32x4_t)vtrn2q_s32(v44, v45);
      if ((i & 1) != 0)
      {
        v50 = *v16;
        v16 = (float32x4_t *)((char *)v16 + v8);
        v51 = v24->f32[0];
        v24 = (float32x2_t *)((char *)v24 + 4);
        v52 = v26->f32[0];
        v26 = (float32x2_t *)((char *)v26 + 4);
        v53 = v28->f32[0];
        v28 = (float32x2_t *)((char *)v28 + 4);
        v54 = v30->f32[0];
        v30 = (float32x4_t *)((char *)v30 + 4);
        v46 = vmlaq_n_f32(v46, v50, v51);
        v47 = vmlaq_n_f32(v47, v50, v52);
        v48 = vmlaq_n_f32(v48, v50, v53);
        v49 = vmlaq_n_f32(v49, v50, v54);
        v18 = i - 1;
      }
      if (v18)
      {
        v55 = 0uLL;
        v56 = 0uLL;
        v57 = 0uLL;
        v58 = 0uLL;
        do
        {
          v60 = *v16;
          v59 = (float32x4_t *)((char *)v16 + v8);
          v61 = *v59;
          v16 = (float32x4_t *)((char *)v59 + v8);
          v62 = *v24++;
          v63 = *v26++;
          v64 = *v28++;
          v65 = *(float32x2_t *)v30->f32;
          v30 = (float32x4_t *)((char *)v30 + 8);
          v46 = vmlaq_n_f32(v46, v60, v62.f32[0]);
          v47 = vmlaq_n_f32(v47, v60, v63.f32[0]);
          v48 = vmlaq_n_f32(v48, v60, v64.f32[0]);
          v49 = vmlaq_n_f32(v49, v60, v65.f32[0]);
          v55 = vmlaq_lane_f32(v55, v61, v62, 1);
          v56 = vmlaq_lane_f32(v56, v61, v63, 1);
          v57 = vmlaq_lane_f32(v57, v61, v64, 1);
          v58 = vmlaq_lane_f32(v58, v61, v65, 1);
          v66 = v18 <= 2;
          v18 -= 2;
        }
        while (!v66);
        v46 = vaddq_f32(v46, v55);
        v47 = vaddq_f32(v47, v56);
        v48 = vaddq_f32(v48, v57);
        v49 = vaddq_f32(v49, v58);
      }
      *(float32x4_t *)v24->f32 = vmulq_n_f32(v46, a7);
      *(float32x4_t *)v26->f32 = vmulq_n_f32(v47, a7);
      *(float32x4_t *)v28->f32 = vmulq_n_f32(v48, a7);
    }
    if (i)
    {
      v67 = (float32x2_t *)(a5 + v9 * v7);
      v68 = (float32x2_t *)((char *)v67 + v7);
      v69 = &v67[(unint64_t)v7 / 4];
      v70 = (float32x2_t *)((char *)&v67[(unint64_t)v7 / 4] + v7);
      v71 = (__int32 *)(a3 + 4 * (i - 1));
      if ((result & 3) != 1)
      {
        if ((result & 3) != 2)
        {
          v73.i32[0] = *v71;
          v72 = &v71[(unint64_t)v8 / 4];
          v73.i32[1] = *v72;
          v74 = *(float *)&v72[(unint64_t)v8 / 4];
          v71 = &v72[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
          v75 = (float)(vaddv_f32(vmul_f32(v73, *v68)) + (float)(v68[1].f32[0] * v74)) * a7;
          v76 = (float)(vaddv_f32(vmul_f32(v73, *v69)) + (float)(v69[1].f32[0] * v74)) * a7;
          v77 = (float)(vaddv_f32(vmul_f32(v73, *v70)) + (float)(v70[1].f32[0] * v74)) * a7;
          v67[1].f32[0] = (float)(vaddv_f32(vmul_f32(v73, *v67)) + (float)(v67[1].f32[0] * v74)) * a7;
          v68[1].f32[0] = v75;
          v69[1].f32[0] = v76;
          v70[1].f32[0] = v77;
        }
        v79.i32[0] = *v71;
        v78 = &v71[(unint64_t)v8 / 4];
        v79.i32[1] = *v78;
        v71 = &v78[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
        v80 = vaddv_f32(vmul_f32(v79, *v68)) * a7;
        v81 = vaddv_f32(vmul_f32(v79, *v69)) * a7;
        v82 = vaddv_f32(vmul_f32(v79, *v70)) * a7;
        v67->f32[1] = vaddv_f32(vmul_f32(v79, *v67)) * a7;
        v68->f32[1] = v80;
        v69->f32[1] = v81;
        v70->f32[1] = v82;
      }
      v83 = (float)(*(float *)v71 * v68->f32[0]) * a7;
      v84 = (float)(*(float *)v71 * v69->f32[0]) * a7;
      v85 = (float)(*(float *)v71 * v70->f32[0]) * a7;
      v67->f32[0] = (float)(*(float *)v71 * v67->f32[0]) * a7;
      v68->f32[0] = v83;
      v69->f32[0] = v84;
      v70->f32[0] = v85;
    }
    v9 += 4;
    v66 = v10 <= 4;
    v10 -= 4;
  }
  while (!v66);
  v66 = v10 <= -3;
  a2 = v10 + 3;
  if (!v66)
  {
LABEL_21:
    if (a2 > 1)
    {
      for (j = result; j > 3; *v99 = vmulq_n_f32(v105, a7))
      {
        j -= 4;
        v87 = (int32x4_t *)(a5 + v9 * v7 + 4 * j);
        v88 = (int32x4_t *)((char *)v87 + v7);
        v89 = (float32x4_t *)(a3 + 4 * j);
        v90 = (float32x4_t *)((char *)v89 + j * v8);
        v91 = j;
        v93 = *v90;
        v92 = (float32x4_t *)((char *)v90 + v8);
        v94 = *v92;
        v95 = (float32x2_t *)&v92->u32[(unint64_t)v8 / 4 + 2];
        v96 = *v87;
        v97 = (float32x2_t *)(a5 + v9 * v7);
        v98 = *v88;
        v99 = (float32x4_t *)((char *)v88 - 4 * j);
        v100 = vtrn1q_s32(v96, v98);
        v101 = vtrn2q_s32(v96, v98);
        *(float32x2_t *)v102.i8 = vmul_n_f32(*(float32x2_t *)v100.i8, v93.f32[0]);
        *(float32x2_t *)v103.i8 = vadd_f32(vmul_lane_f32(*(float32x2_t *)v100.i8, *(float32x2_t *)v93.f32, 1), vmul_lane_f32(*(float32x2_t *)v101.i8, *(float32x2_t *)v94.f32, 1));
        v102.u64[1] = (unint64_t)vadd_f32(vmla_n_f32(vmul_laneq_f32(*(float32x2_t *)v100.i8, v93, 2), (float32x2_t)v100.u64[1], COERCE_FLOAT(*v95)), vmul_laneq_f32(*(float32x2_t *)v101.i8, v94, 2));
        v103.u64[1] = (unint64_t)vadd_f32(vadd_f32(vmla_lane_f32(vmul_laneq_f32(*(float32x2_t *)v100.i8, v93, 3), (float32x2_t)v100.u64[1], *v95, 1), vmul_laneq_f32(*(float32x2_t *)v101.i8, v94, 3)), vmul_n_f32((float32x2_t)v101.u64[1], v95->f32[(unint64_t)v8 / 4 + 1]));
        v104 = (float32x4_t)vtrn1q_s32(v102, v103);
        v105 = (float32x4_t)vtrn2q_s32(v102, v103);
        if ((j & 1) != 0)
        {
          v106 = *v89;
          v89 = (float32x4_t *)((char *)v89 + v8);
          v107 = v97->f32[0];
          v97 = (float32x2_t *)((char *)v97 + 4);
          v108 = v99->f32[0];
          v99 = (float32x4_t *)((char *)v99 + 4);
          v104 = vmlaq_n_f32(v104, v106, v107);
          v105 = vmlaq_n_f32(v105, v106, v108);
          v91 = j - 1;
        }
        if (v91)
        {
          v109 = 0uLL;
          v110 = 0uLL;
          do
          {
            v112 = *v89;
            v111 = (float32x4_t *)((char *)v89 + v8);
            v113 = *v111;
            v89 = (float32x4_t *)((char *)v111 + v8);
            v114 = *v97++;
            v115 = *(float32x2_t *)v99->f32;
            v99 = (float32x4_t *)((char *)v99 + 8);
            v104 = vmlaq_n_f32(v104, v112, v114.f32[0]);
            v105 = vmlaq_n_f32(v105, v112, v115.f32[0]);
            v109 = vmlaq_lane_f32(v109, v113, v114, 1);
            v110 = vmlaq_lane_f32(v110, v113, v115, 1);
            v66 = v91 <= 2;
            v91 -= 2;
          }
          while (!v66);
          v104 = vaddq_f32(v104, v109);
          v105 = vaddq_f32(v105, v110);
        }
        *(float32x4_t *)v97->f32 = vmulq_n_f32(v104, a7);
      }
      if (j)
      {
        v116 = (float32x2_t *)(a5 + v9 * v7);
        v117 = (float32x2_t *)((char *)v116 + v7);
        v118 = (__int32 *)(a3 + 4 * (j - 1));
        if ((result & 3) != 1)
        {
          if ((result & 3) != 2)
          {
            v120.i32[0] = *v118;
            v119 = &v118[(unint64_t)v8 / 4];
            v120.i32[1] = *v119;
            v121 = *(float *)&v119[(unint64_t)v8 / 4];
            v118 = &v119[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
            v122 = (float)(vaddv_f32(vmul_f32(v120, *v117)) + (float)(v117[1].f32[0] * v121)) * a7;
            v116[1].f32[0] = (float)(vaddv_f32(vmul_f32(v120, *v116)) + (float)(v116[1].f32[0] * v121)) * a7;
            v117[1].f32[0] = v122;
          }
          v124.i32[0] = *v118;
          v123 = &v118[(unint64_t)v8 / 4];
          v124.i32[1] = *v123;
          v118 = &v123[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
          v125 = vaddv_f32(vmul_f32(v124, *v117)) * a7;
          v116->f32[1] = vaddv_f32(vmul_f32(v124, *v116)) * a7;
          v117->f32[1] = v125;
        }
        v126 = (float)(*(float *)v118 * v117->f32[0]) * a7;
        v116->f32[0] = (float)(*(float *)v118 * v116->f32[0]) * a7;
        v117->f32[0] = v126;
      }
      a2 -= 2;
      v9 += 2;
    }
    if (a2)
    {
      for (k = result; k > 3; *v137 = vmulq_n_f32(v139, a7))
      {
        k -= 4;
        v128 = (float32x4_t *)(a3 + 4 * k);
        v129 = (float32x4_t *)((char *)v128 + k * v8);
        v130 = k;
        v132 = *v129;
        v131 = (float32x4_t *)((char *)v129 + v8);
        v133 = *v131;
        v134 = (float32x2_t *)&v131->u32[(unint64_t)v8 / 4 + 2];
        v135 = *(float32x2_t *)((char *)v134 + v8);
        v136 = *(float32x4_t *)(a5 + v9 * v7 + 4 * k);
        v137 = (float32x4_t *)(a5 + v9 * v7);
        v133.i32[0] = 0;
        v135.i32[0] = 0;
        v138.i64[0] = 0;
        *(float32x2_t *)&v138.u32[2] = vmla_laneq_f32(vmul_laneq_f32(*v134, v136, 2), v135, v136, 3);
        v139 = vaddq_f32(vmlaq_lane_f32(vmulq_n_f32(v132, v136.f32[0]), v133, *(float32x2_t *)v136.f32, 1), v138);
        if ((k & 1) != 0)
        {
          v140 = *v128;
          v128 = (float32x4_t *)((char *)v128 + v8);
          v141 = v137->f32[0];
          v137 = (float32x4_t *)((char *)v137 + 4);
          v139 = vmlaq_n_f32(v139, v140, v141);
          v130 = k - 1;
        }
        if (v130)
        {
          v142 = 0uLL;
          do
          {
            v144 = *v128;
            v143 = (float32x4_t *)((char *)v128 + v8);
            v145 = *v143;
            v128 = (float32x4_t *)((char *)v143 + v8);
            v146 = *(float32x2_t *)v137->f32;
            v137 = (float32x4_t *)((char *)v137 + 8);
            v139 = vmlaq_n_f32(v139, v144, v146.f32[0]);
            v142 = vmlaq_lane_f32(v142, v145, v146, 1);
            v66 = v130 <= 2;
            v130 -= 2;
          }
          while (!v66);
          v139 = vaddq_f32(v139, v142);
        }
      }
      if (k)
      {
        v147 = (float32x2_t *)(a5 + v9 * v7);
        v148 = (__int32 *)(a3 + 4 * (k - 1));
        if ((result & 3) != 1)
        {
          if ((result & 3) != 2)
          {
            v150.i32[0] = *v148;
            v149 = &v148[(unint64_t)v8 / 4];
            v150.i32[1] = *v149;
            v151 = *(float *)&v149[(unint64_t)v8 / 4];
            v148 = &v149[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
            v147[1].f32[0] = (float)(vaddv_f32(vmul_f32(v150, *v147)) + (float)(v147[1].f32[0] * v151)) * a7;
          }
          v153.i32[0] = *v148;
          v152 = &v148[(unint64_t)v8 / 4];
          v153.i32[1] = *v152;
          v148 = &v152[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
          v147->f32[1] = vaddv_f32(vmul_f32(v153, *v147)) * a7;
        }
        v147->f32[0] = (float)(*(float *)v148 * v147->f32[0]) * a7;
      }
    }
  }
  return result;
}

uint64_t sub_223163B20(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  int64x2_t *v12;
  int64x2_t *v13;
  int64x2_t *v14;
  int64x2_t *v15;
  float32x4_t *v16;
  float32x4_t *v17;
  uint64_t v18;
  float32x4_t v19;
  float32x2_t *v20;
  int64x2_t v21;
  float32x2_t *v22;
  int64x2_t v23;
  float32x2_t *v24;
  int64x2_t v25;
  float32x2_t *v26;
  int64x2_t v27;
  float32x4_t *v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int64x2_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t *v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x2_t v59;
  float32x2_t v60;
  float32x2_t v61;
  float32x2_t v62;
  BOOL v63;
  float32x2_t *v64;
  float32x2_t *v65;
  float32x2_t *v66;
  float32x2_t *v67;
  __int32 *v68;
  __int32 *v69;
  float32x2_t v70;
  float32_t v71;
  float32_t v72;
  float32_t v73;
  float32_t v74;
  float32_t v75;
  float32_t v76;
  float32_t v77;
  float32_t v78;
  float32_t v79;
  uint64_t j;
  int32x4_t *v81;
  int32x4_t *v82;
  float32x4_t *v83;
  float32x4_t *v84;
  uint64_t v85;
  float32x4_t v86;
  float32x2_t *v87;
  int32x4_t v88;
  float32x2_t *v89;
  int32x4_t v90;
  float32x4_t *v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  float32x2_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float v99;
  float v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t *v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x2_t v106;
  float32x2_t v107;
  float32x2_t *v108;
  float32x2_t *v109;
  __int32 *v110;
  __int32 *v111;
  float32x2_t v112;
  float32_t v113;
  float32_t v114;
  float32_t v115;
  uint64_t k;
  float32x4_t *v117;
  float32x4_t *v118;
  uint64_t v119;
  float32x4_t v120;
  float32x2_t *v121;
  float32x2_t v122;
  float32x4_t v123;
  float32x4_t *v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float v128;
  float32x4_t v129;
  float32x4_t *v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x2_t v133;
  float32x2_t *v134;
  __int32 *v135;
  __int32 *v136;
  float32x2_t v137;

  v7 = 4 * a6;
  v8 = 4 * a4;
  v9 = 0;
  if (a2 <= 3)
    goto LABEL_21;
  v10 = a2 - 3;
  do
  {
    for (i = result; i > 3; *v28 = vmulq_n_f32(v46, a7))
    {
      i -= 4;
      v12 = (int64x2_t *)(a5 + v9 * v7 + 4 * i);
      v13 = (int64x2_t *)((char *)v12 + v7);
      v14 = (int64x2_t *)((char *)v12 + 2 * v7);
      v15 = (int64x2_t *)((char *)v12 + 2 * v7 + v7);
      v16 = (float32x4_t *)(a3 + 4 * i);
      v17 = (float32x4_t *)((char *)v16 + i * v8);
      v18 = i;
      v19 = *v17;
      v20 = (float32x2_t *)&v17->u32[(unint64_t)v8 / 4 + 2];
      v21 = *v12;
      v22 = (float32x2_t *)(a5 + v9 * v7);
      v23 = *v13;
      v24 = (float32x2_t *)((char *)v13 - 4 * i);
      v25 = *v14;
      v26 = (float32x2_t *)((char *)v14 - 4 * i);
      v27 = *v15;
      v28 = (float32x4_t *)((char *)v15 - 4 * i);
      v29 = (int32x4_t)vtrn1q_s64(v21, v25);
      v30 = (int32x4_t)vtrn1q_s64(v23, v27);
      v31 = (int32x4_t)vtrn2q_s64(v21, v25);
      v32 = (int32x4_t)vtrn2q_s64(v23, v27);
      v33 = (float32x4_t)vtrn1q_s32(v29, v30);
      v34 = (float32x4_t)vtrn2q_s32(v29, v30);
      v35 = (float32x4_t)vtrn1q_s32(v31, v32);
      v36 = (int64x2_t)vmlaq_lane_f32(v34, v33, *(float32x2_t *)v19.f32, 1);
      v37 = (int64x2_t)vaddq_f32(vmlaq_laneq_f32(v35, v33, v19, 2), vmulq_n_f32(v34, COERCE_FLOAT(*v20)));
      v38 = (int64x2_t)vaddq_f32(vmlaq_n_f32(vmlaq_laneq_f32((float32x4_t)vtrn2q_s32(v31, v32), v33, v19, 3), v35, v20->f32[(unint64_t)v8 / 4 + 1]), vmulq_lane_f32(v34, *v20, 1));
      v39 = (int32x4_t)vtrn1q_s64((int64x2_t)v33, v37);
      v40 = (int32x4_t)vtrn1q_s64(v36, v38);
      v41 = (int32x4_t)vtrn2q_s64((int64x2_t)v33, v37);
      v42 = (int32x4_t)vtrn2q_s64(v36, v38);
      v43 = (float32x4_t)vtrn1q_s32(v39, v40);
      v44 = (float32x4_t)vtrn2q_s32(v39, v40);
      v45 = (float32x4_t)vtrn1q_s32(v41, v42);
      v46 = (float32x4_t)vtrn2q_s32(v41, v42);
      if ((i & 1) != 0)
      {
        v47 = *v16;
        v16 = (float32x4_t *)((char *)v16 + v8);
        v48 = v22->f32[0];
        v22 = (float32x2_t *)((char *)v22 + 4);
        v49 = v24->f32[0];
        v24 = (float32x2_t *)((char *)v24 + 4);
        v50 = v26->f32[0];
        v26 = (float32x2_t *)((char *)v26 + 4);
        v51 = v28->f32[0];
        v28 = (float32x4_t *)((char *)v28 + 4);
        v43 = vmlaq_n_f32(v43, v47, v48);
        v44 = vmlaq_n_f32(v44, v47, v49);
        v45 = vmlaq_n_f32(v45, v47, v50);
        v46 = vmlaq_n_f32(v46, v47, v51);
        v18 = i - 1;
      }
      if (v18)
      {
        v52 = 0uLL;
        v53 = 0uLL;
        v54 = 0uLL;
        v55 = 0uLL;
        do
        {
          v57 = *v16;
          v56 = (float32x4_t *)((char *)v16 + v8);
          v58 = *v56;
          v16 = (float32x4_t *)((char *)v56 + v8);
          v59 = *v22++;
          v60 = *v24++;
          v61 = *v26++;
          v62 = *(float32x2_t *)v28->f32;
          v28 = (float32x4_t *)((char *)v28 + 8);
          v43 = vmlaq_n_f32(v43, v57, v59.f32[0]);
          v44 = vmlaq_n_f32(v44, v57, v60.f32[0]);
          v45 = vmlaq_n_f32(v45, v57, v61.f32[0]);
          v46 = vmlaq_n_f32(v46, v57, v62.f32[0]);
          v52 = vmlaq_lane_f32(v52, v58, v59, 1);
          v53 = vmlaq_lane_f32(v53, v58, v60, 1);
          v54 = vmlaq_lane_f32(v54, v58, v61, 1);
          v55 = vmlaq_lane_f32(v55, v58, v62, 1);
          v63 = v18 <= 2;
          v18 -= 2;
        }
        while (!v63);
        v43 = vaddq_f32(v43, v52);
        v44 = vaddq_f32(v44, v53);
        v45 = vaddq_f32(v45, v54);
        v46 = vaddq_f32(v46, v55);
      }
      *(float32x4_t *)v22->f32 = vmulq_n_f32(v43, a7);
      *(float32x4_t *)v24->f32 = vmulq_n_f32(v44, a7);
      *(float32x4_t *)v26->f32 = vmulq_n_f32(v45, a7);
    }
    if (i)
    {
      v64 = (float32x2_t *)(a5 + v9 * v7);
      v65 = (float32x2_t *)((char *)v64 + v7);
      v66 = &v64[(unint64_t)v7 / 4];
      v67 = (float32x2_t *)((char *)&v64[(unint64_t)v7 / 4] + v7);
      v68 = (__int32 *)(a3 + 4 * (i - 1));
      if ((result & 3) != 1)
      {
        if ((result & 3) != 2)
        {
          v70.i32[0] = *v68;
          v69 = &v68[(unint64_t)v8 / 4];
          v70.i32[1] = *v69;
          v68 = &v69[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
          v71 = (float)(vaddv_f32(vmul_f32(v70, *v65)) + v65[1].f32[0]) * a7;
          v72 = (float)(vaddv_f32(vmul_f32(v70, *v66)) + v66[1].f32[0]) * a7;
          v73 = (float)(vaddv_f32(vmul_f32(v70, *v67)) + v67[1].f32[0]) * a7;
          v64[1].f32[0] = (float)(vaddv_f32(vmul_f32(v70, *v64)) + v64[1].f32[0]) * a7;
          v65[1].f32[0] = v71;
          v66[1].f32[0] = v72;
          v67[1].f32[0] = v73;
        }
        v74 = (float)((float)(*(float *)v68 * COERCE_FLOAT(*v65)) + COERCE_FLOAT(HIDWORD(*(unint64_t *)v65)))
            * a7;
        v75 = (float)((float)(*(float *)v68 * COERCE_FLOAT(*v66)) + COERCE_FLOAT(HIDWORD(*(unint64_t *)v66)))
            * a7;
        v76 = (float)((float)(*(float *)v68 * COERCE_FLOAT(*v67)) + COERCE_FLOAT(HIDWORD(*(unint64_t *)v67)))
            * a7;
        v64->f32[1] = (float)((float)(*(float *)v68 * COERCE_FLOAT(*v64))
                            + COERCE_FLOAT(HIDWORD(*(unint64_t *)v64)))
                    * a7;
        v65->f32[1] = v74;
        v66->f32[1] = v75;
        v67->f32[1] = v76;
      }
      v77 = v65->f32[0] * a7;
      v78 = v66->f32[0] * a7;
      v79 = v67->f32[0] * a7;
      v64->f32[0] = v64->f32[0] * a7;
      v65->f32[0] = v77;
      v66->f32[0] = v78;
      v67->f32[0] = v79;
    }
    v9 += 4;
    v63 = v10 <= 4;
    v10 -= 4;
  }
  while (!v63);
  v63 = v10 <= -3;
  a2 = v10 + 3;
  if (!v63)
  {
LABEL_21:
    if (a2 > 1)
    {
      for (j = result; j > 3; *v91 = vmulq_n_f32(v97, a7))
      {
        j -= 4;
        v81 = (int32x4_t *)(a5 + v9 * v7 + 4 * j);
        v82 = (int32x4_t *)((char *)v81 + v7);
        v83 = (float32x4_t *)(a3 + 4 * j);
        v84 = (float32x4_t *)((char *)v83 + j * v8);
        v85 = j;
        v86 = *v84;
        v87 = (float32x2_t *)&v84->u32[(unint64_t)v8 / 4 + 2];
        v88 = *v81;
        v89 = (float32x2_t *)(a5 + v9 * v7);
        v90 = *v82;
        v91 = (float32x4_t *)((char *)v82 - 4 * j);
        v92 = vtrn1q_s32(v88, v90);
        v93 = vtrn2q_s32(v88, v90);
        *(float32x2_t *)v94.i8 = vmla_lane_f32(*(float32x2_t *)v93.i8, *(float32x2_t *)v92.i8, *(float32x2_t *)v86.f32, 1);
        v95 = vadd_f32(vmla_n_f32(vmla_laneq_f32((float32x2_t)v93.u64[1], *(float32x2_t *)v92.i8, v86, 3), (float32x2_t)v92.u64[1], v87->f32[(unint64_t)v8 / 4 + 1]), vmul_lane_f32(*(float32x2_t *)v93.i8, *v87, 1));
        v92.u64[1] = (unint64_t)vadd_f32(vmla_laneq_f32((float32x2_t)v92.u64[1], *(float32x2_t *)v92.i8, v86, 2), vmul_n_f32(*(float32x2_t *)v93.i8, COERCE_FLOAT(*v87)));
        v94.u64[1] = (unint64_t)v95;
        v96 = (float32x4_t)vtrn1q_s32(v92, v94);
        v97 = (float32x4_t)vtrn2q_s32(v92, v94);
        if ((j & 1) != 0)
        {
          v98 = *v83;
          v83 = (float32x4_t *)((char *)v83 + v8);
          v99 = v89->f32[0];
          v89 = (float32x2_t *)((char *)v89 + 4);
          v100 = v91->f32[0];
          v91 = (float32x4_t *)((char *)v91 + 4);
          v96 = vmlaq_n_f32(v96, v98, v99);
          v97 = vmlaq_n_f32(v97, v98, v100);
          v85 = j - 1;
        }
        if (v85)
        {
          v101 = 0uLL;
          v102 = 0uLL;
          do
          {
            v104 = *v83;
            v103 = (float32x4_t *)((char *)v83 + v8);
            v105 = *v103;
            v83 = (float32x4_t *)((char *)v103 + v8);
            v106 = *v89++;
            v107 = *(float32x2_t *)v91->f32;
            v91 = (float32x4_t *)((char *)v91 + 8);
            v96 = vmlaq_n_f32(v96, v104, v106.f32[0]);
            v97 = vmlaq_n_f32(v97, v104, v107.f32[0]);
            v101 = vmlaq_lane_f32(v101, v105, v106, 1);
            v102 = vmlaq_lane_f32(v102, v105, v107, 1);
            v63 = v85 <= 2;
            v85 -= 2;
          }
          while (!v63);
          v96 = vaddq_f32(v96, v101);
          v97 = vaddq_f32(v97, v102);
        }
        *(float32x4_t *)v89->f32 = vmulq_n_f32(v96, a7);
      }
      if (j)
      {
        v108 = (float32x2_t *)(a5 + v9 * v7);
        v109 = (float32x2_t *)((char *)v108 + v7);
        v110 = (__int32 *)(a3 + 4 * (j - 1));
        if ((result & 3) != 1)
        {
          if ((result & 3) != 2)
          {
            v112.i32[0] = *v110;
            v111 = &v110[(unint64_t)v8 / 4];
            v112.i32[1] = *v111;
            v110 = &v111[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
            v113 = (float)(vaddv_f32(vmul_f32(v112, *v109)) + v109[1].f32[0]) * a7;
            v108[1].f32[0] = (float)(vaddv_f32(vmul_f32(v112, *v108)) + v108[1].f32[0]) * a7;
            v109[1].f32[0] = v113;
          }
          v114 = (float)((float)(*(float *)v110 * COERCE_FLOAT(*v109)) + COERCE_FLOAT(HIDWORD(*(unint64_t *)v109)))
               * a7;
          v108->f32[1] = (float)((float)(*(float *)v110 * COERCE_FLOAT(*v108))
                               + COERCE_FLOAT(HIDWORD(*(unint64_t *)v108)))
                       * a7;
          v109->f32[1] = v114;
        }
        v115 = v109->f32[0] * a7;
        v108->f32[0] = v108->f32[0] * a7;
        v109->f32[0] = v115;
      }
      a2 -= 2;
      v9 += 2;
    }
    if (a2)
    {
      for (k = result; k > 3; *v124 = vmulq_n_f32(v126, a7))
      {
        k -= 4;
        v117 = (float32x4_t *)(a3 + 4 * k);
        v118 = (float32x4_t *)((char *)v117 + k * v8);
        v119 = k;
        v120 = *v118;
        v121 = (float32x2_t *)&v118->u32[(unint64_t)v8 / 4 + 2];
        v122 = *(float32x2_t *)((char *)v121 + v8);
        v123 = *(float32x4_t *)(a5 + v9 * v7 + 4 * k);
        v124 = (float32x4_t *)(a5 + v9 * v7);
        v120.i32[0] = 0;
        v122.i32[0] = 0;
        v125.i64[0] = 0;
        *(float32x2_t *)&v125.u32[2] = vmla_laneq_f32(vmul_lane_f32(*v121, *(float32x2_t *)v123.f32, 1), v122, v123, 2);
        v126 = vaddq_f32(vmlaq_n_f32(v123, v120, v123.f32[0]), v125);
        if ((k & 1) != 0)
        {
          v127 = *v117;
          v117 = (float32x4_t *)((char *)v117 + v8);
          v128 = v124->f32[0];
          v124 = (float32x4_t *)((char *)v124 + 4);
          v126 = vmlaq_n_f32(v126, v127, v128);
          v119 = k - 1;
        }
        if (v119)
        {
          v129 = 0uLL;
          do
          {
            v131 = *v117;
            v130 = (float32x4_t *)((char *)v117 + v8);
            v132 = *v130;
            v117 = (float32x4_t *)((char *)v130 + v8);
            v133 = *(float32x2_t *)v124->f32;
            v124 = (float32x4_t *)((char *)v124 + 8);
            v126 = vmlaq_n_f32(v126, v131, v133.f32[0]);
            v129 = vmlaq_lane_f32(v129, v132, v133, 1);
            v63 = v119 <= 2;
            v119 -= 2;
          }
          while (!v63);
          v126 = vaddq_f32(v126, v129);
        }
      }
      if (k)
      {
        v134 = (float32x2_t *)(a5 + v9 * v7);
        v135 = (__int32 *)(a3 + 4 * (k - 1));
        if ((result & 3) != 1)
        {
          if ((result & 3) != 2)
          {
            v137.i32[0] = *v135;
            v136 = &v135[(unint64_t)v8 / 4];
            v137.i32[1] = *v136;
            v135 = &v136[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
            v134[1].f32[0] = (float)(vaddv_f32(vmul_f32(v137, *v134)) + v134[1].f32[0]) * a7;
          }
          v134->f32[1] = (float)((float)(*(float *)v135 * COERCE_FLOAT(*v134))
                               + COERCE_FLOAT(HIDWORD(*(unint64_t *)v134)))
                       * a7;
        }
        v134->f32[0] = v134->f32[0] * a7;
      }
    }
  }
  return result;
}

uint64_t sub_223164110(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64x2_t *v14;
  int64x2_t *v15;
  int64x2_t *v16;
  int64x2_t *v17;
  float32x4_t *v18;
  float32x4_t *v19;
  uint64_t v20;
  uint64_t v21;
  float32x2_t *v22;
  __int32 *v23;
  __int32 *v24;
  float32x4_t v25;
  __int32 *v26;
  float32x4_t v27;
  __int32 *v28;
  float32x2_t v29;
  __int32 *v30;
  float v31;
  float32x2_t *v32;
  int64x2_t v33;
  float32x2_t *v34;
  int64x2_t v35;
  float32x2_t *v36;
  int64x2_t v37;
  float32x2_t *v38;
  int64x2_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  int64x2_t v47;
  int64x2_t v48;
  int64x2_t v49;
  int64x2_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  uint64_t v70;
  uint64_t v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x2_t v74;
  float32x2_t v75;
  float32x4_t v76;
  float32x4_t v77;
  BOOL v78;
  uint64_t v79;
  float32x2_t *v80;
  float32x2_t *v81;
  float32x2_t *v82;
  float32x2_t *v83;
  float32x2_t *v84;
  __int32 *v85;
  float32x2_t v86;
  float32x2_t v87;
  float32x2_t v88;
  float32x2_t v89;
  float32x2_t v90;
  float32x2_t v91;
  float32_t v92;
  float32_t v93;
  float32_t v94;
  float32_t v95;
  float32_t v96;
  float32_t v97;
  uint64_t v98;
  BOOL v99;
  uint64_t v100;
  int32x4_t *v101;
  int32x4_t *v102;
  float32x4_t *v103;
  float32x4_t *v104;
  uint64_t v105;
  uint64_t v106;
  float32x2_t *v107;
  __int32 *v108;
  __int32 *v109;
  float32x4_t v110;
  __int32 *v111;
  float32x4_t v112;
  __int32 *v113;
  float32x2_t v114;
  __int32 *v115;
  float v116;
  float32x2_t *v117;
  int32x4_t v118;
  float32x2_t *v119;
  int32x4_t v120;
  int32x4_t v121;
  int32x4_t v122;
  int32x4_t v123;
  int32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float v128;
  float v129;
  float32x4_t v130;
  float32x4_t v131;
  int32x4_t v132;
  int32x4_t v133;
  uint64_t v134;
  uint64_t v135;
  float32x2_t v136;
  float32x2_t v137;
  float32x4_t v138;
  float32x4_t v139;
  uint64_t v140;
  float32x2_t *v141;
  float32x2_t *v142;
  float32x2_t *v143;
  __int32 *v144;
  float32x2_t v145;
  float32x2_t *v146;
  float32x2_t v147;
  float32x2_t *v148;
  float32x2_t v149;
  float32x2_t v150;
  float32x2_t v151;
  float32x2_t v152;
  float32_t v153;
  float32_t v154;
  uint64_t v155;
  BOOL v156;
  uint64_t v157;
  float32x4_t *v158;
  float32x4_t *v159;
  float32x4_t *v160;
  uint64_t v161;
  float32x2_t *v162;
  float *v163;
  __int32 *v164;
  float32x4_t v165;
  __int32 *v166;
  float32x4_t v167;
  __int32 *v168;
  float32x2_t v169;
  __int32 *v170;
  float v171;
  float32x2_t *v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float v178;
  float32x4_t v179;
  int32x4_t v180;
  int32x4_t v181;
  uint64_t v182;
  uint64_t v183;
  float32x2_t v184;
  uint64_t v185;
  float32x2_t *v186;
  float32x2_t *v187;
  float *v188;
  float32x2_t v189;
  float v190;
  float32x2_t v191;

  v7 = 4 * a6;
  v8 = 4 * a4;
  v9 = 0;
  if (a2 <= 3)
    goto LABEL_22;
  v10 = a2 - 3;
  do
  {
    v11 = 0;
    v12 = __OFSUB__(result, 3);
    v13 = result - 3;
    if (result > 3)
    {
      do
      {
        v14 = (int64x2_t *)(a5 + v9 * v7 + 4 * v11);
        v15 = (int64x2_t *)((char *)v14 + v7);
        v16 = (int64x2_t *)((char *)v14 + 2 * v7);
        v17 = (int64x2_t *)((char *)v14 + 2 * v7 + v7);
        v18 = (float32x4_t *)(a3 + v11 * v8 + 4 * v11);
        v19 = (float32x4_t *)((char *)v18 + v8);
        v20 = 4 * (result - v11);
        v21 = result - v11 - 4;
        v22 = (float32x2_t *)&v18->u32[(unint64_t)v8 / 2 + 2];
        v23 = &v18->i32[(unint64_t)v8 / 2 + 3 + (unint64_t)v8 / 4];
        v25 = *v18;
        v24 = (__int32 *)&v18[1];
        v27 = *v19;
        v26 = (__int32 *)&v19[1];
        v29 = *v22;
        v28 = (__int32 *)&v22[1];
        v31 = *(float *)v23;
        v30 = v23 + 1;
        v33 = *v14;
        v32 = (float32x2_t *)&v14[1];
        v35 = *v15;
        v34 = (float32x2_t *)&v15[1];
        v37 = *v16;
        v36 = (float32x2_t *)&v16[1];
        v39 = *v17;
        v38 = (float32x2_t *)&v17[1];
        v40 = (int32x4_t)vtrn1q_s64(v33, v37);
        v41 = (int32x4_t)vtrn1q_s64(v35, v39);
        v42 = (int32x4_t)vtrn2q_s64(v33, v37);
        v43 = (int32x4_t)vtrn2q_s64(v35, v39);
        v44 = (float32x4_t)vtrn2q_s32(v40, v41);
        v45 = (float32x4_t)vtrn1q_s32(v42, v43);
        v46 = (float32x4_t)vtrn2q_s32(v42, v43);
        v47 = (int64x2_t)vmulq_n_f32(v46, v31);
        v48 = (int64x2_t)vaddq_f32(vmlaq_lane_f32(vmulq_laneq_f32(v46, v27, 3), v44, *(float32x2_t *)v27.f32, 1), vmulq_laneq_f32(v45, v27, 2));
        v49 = (int64x2_t)vaddq_f32(vmulq_lane_f32(v46, v29, 1), vmulq_n_f32(v45, v29.f32[0]));
        v50 = (int64x2_t)vaddq_f32(vaddq_f32(vmlaq_lane_f32(vmulq_laneq_f32(v46, v25, 3), v44, *(float32x2_t *)v25.f32, 1), vmulq_laneq_f32(v45, v25, 2)), vmulq_n_f32((float32x4_t)vtrn1q_s32(v40, v41), v25.f32[0]));
        v51 = (int32x4_t)vtrn1q_s64(v50, v49);
        v52 = (int32x4_t)vtrn1q_s64(v48, v47);
        v53 = (int32x4_t)vtrn2q_s64(v50, v49);
        v54 = (int32x4_t)vtrn2q_s64(v48, v47);
        v55 = (float32x4_t)vtrn1q_s32(v51, v52);
        v56 = (float32x4_t)vtrn2q_s32(v51, v52);
        v57 = (float32x4_t)vtrn1q_s32(v53, v54);
        v58 = (float32x4_t)vtrn2q_s32(v53, v54);
        if ((v21 & 1) != 0)
        {
          v59.i32[0] = *v24++;
          v59.i32[1] = *v26++;
          v59.i32[2] = *v28++;
          v59.i32[3] = *v30++;
          v60 = v32->f32[0];
          v32 = (float32x2_t *)((char *)v32 + 4);
          v61 = v34->f32[0];
          v34 = (float32x2_t *)((char *)v34 + 4);
          v62 = v36->f32[0];
          v36 = (float32x2_t *)((char *)v36 + 4);
          v63 = v38->f32[0];
          v38 = (float32x2_t *)((char *)v38 + 4);
          v55 = vmlaq_n_f32(v55, v59, v60);
          v56 = vmlaq_n_f32(v56, v59, v61);
          v57 = vmlaq_n_f32(v57, v59, v62);
          v58 = vmlaq_n_f32(v58, v59, v63);
          v21 = result - v11 - 5;
        }
        if (v21)
        {
          v64 = 0uLL;
          v65 = 0uLL;
          v66 = 0uLL;
          v67 = 0uLL;
          do
          {
            v68.i64[0] = *(_QWORD *)v24;
            v24 += 2;
            v69.i64[0] = *(_QWORD *)v26;
            v26 += 2;
            v70 = *(_QWORD *)v28;
            v28 += 2;
            v71 = *(_QWORD *)v30;
            v30 += 2;
            v72 = *v32++;
            v73 = *v34++;
            v74 = *v36++;
            v75 = *v38++;
            v68.i64[1] = v70;
            v69.i64[1] = v71;
            v76 = (float32x4_t)vtrn1q_s32(v68, v69);
            v77 = (float32x4_t)vtrn2q_s32(v68, v69);
            v55 = vmlaq_n_f32(v55, v76, v72.f32[0]);
            v56 = vmlaq_n_f32(v56, v76, v73.f32[0]);
            v57 = vmlaq_n_f32(v57, v76, v74.f32[0]);
            v58 = vmlaq_n_f32(v58, v76, v75.f32[0]);
            v64 = vmlaq_lane_f32(v64, v77, v72, 1);
            v65 = vmlaq_lane_f32(v65, v77, v73, 1);
            v66 = vmlaq_lane_f32(v66, v77, v74, 1);
            v67 = vmlaq_lane_f32(v67, v77, v75, 1);
            v78 = v21 <= 2;
            v21 -= 2;
          }
          while (!v78);
          v55 = vaddq_f32(v55, v64);
          v56 = vaddq_f32(v56, v65);
          v57 = vaddq_f32(v57, v66);
          v58 = vaddq_f32(v58, v67);
        }
        *(float32x4_t *)&v32->f32[v20 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v55, a7);
        *(float32x4_t *)&v34->f32[v20 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v56, a7);
        *(float32x4_t *)&v36->f32[v20 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v57, a7);
        *(float32x4_t *)&v38->f32[v20 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v58, a7);
        v11 += 4;
        v12 = __OFSUB__(v13, 4);
        v78 = v13 <= 4;
        v13 -= 4;
      }
      while (!v78);
    }
    v79 = result & 3;
    if (!v12 && v79 != 0)
    {
      v80 = (float32x2_t *)(a5 + v9 * v7 + 4 * v11);
      v81 = (float32x2_t *)((char *)v80 + v7);
      v82 = &v80[(unint64_t)v7 / 4];
      v83 = (float32x2_t *)((char *)&v80[(unint64_t)v7 / 4] + v7);
      v84 = (float32x2_t *)(a3 + v11 * v8 + 4 * v11);
      if (v79 != 1)
      {
        if (v79 != 2)
        {
          v86 = *v84;
          v85 = (__int32 *)&v84[1];
          v87 = vmul_f32(v86, *v80);
          v88 = vmul_f32(v86, *v81);
          v89 = vmul_f32(v86, *v82);
          v90 = vmul_f32(v86, *v83);
          v86.i32[0] = *v85;
          v84 = (float32x2_t *)&v85[(unint64_t)v8 / 4 - 1];
          v88.f32[0] = (float)(vaddv_f32(v88) + (float)(v86.f32[0] * v81[1].f32[0])) * a7;
          v89.f32[0] = (float)(vaddv_f32(v89) + (float)(v86.f32[0] * v82[1].f32[0])) * a7;
          v90.f32[0] = (float)(vaddv_f32(v90) + (float)(v86.f32[0] * v83[1].f32[0])) * a7;
          v80->f32[0] = (float)(vaddv_f32(v87) + (float)(v86.f32[0] * v80[1].f32[0])) * a7;
          v80 = (float32x2_t *)((char *)v80 + 4);
          v81->i32[0] = v88.i32[0];
          v81 = (float32x2_t *)((char *)v81 + 4);
          v82->i32[0] = v89.i32[0];
          v82 = (float32x2_t *)((char *)v82 + 4);
          v83->i32[0] = v90.i32[0];
          v83 = (float32x2_t *)((char *)v83 + 4);
        }
        v91 = *v84;
        v84 = (float32x2_t *)((char *)v84 + v8 + 4);
        v92 = vaddv_f32(vmul_f32(v91, *v81)) * a7;
        v93 = vaddv_f32(vmul_f32(v91, *v82)) * a7;
        v94 = vaddv_f32(vmul_f32(v91, *v83)) * a7;
        v80->f32[0] = vaddv_f32(vmul_f32(v91, *v80)) * a7;
        v80 = (float32x2_t *)((char *)v80 + 4);
        v81->f32[0] = v92;
        v81 = (float32x2_t *)((char *)v81 + 4);
        v82->f32[0] = v93;
        v82 = (float32x2_t *)((char *)v82 + 4);
        v83->f32[0] = v94;
        v83 = (float32x2_t *)((char *)v83 + 4);
      }
      v95 = (float)(v84->f32[0] * v81->f32[0]) * a7;
      v96 = (float)(v84->f32[0] * v82->f32[0]) * a7;
      v97 = (float)(v84->f32[0] * v83->f32[0]) * a7;
      v80->f32[0] = (float)(v84->f32[0] * v80->f32[0]) * a7;
      v81->f32[0] = v95;
      v82->f32[0] = v96;
      v83->f32[0] = v97;
    }
    v9 += 4;
    v78 = v10 <= 4;
    v10 -= 4;
  }
  while (!v78);
  v78 = v10 <= -3;
  a2 = v10 + 3;
  if (!v78)
  {
LABEL_22:
    if (a2 > 1)
    {
      v98 = 0;
      v99 = __OFSUB__(result, 3);
      v100 = result - 3;
      if (result > 3)
      {
        do
        {
          v101 = (int32x4_t *)(a5 + v9 * v7 + 4 * v98);
          v102 = (int32x4_t *)((char *)v101 + v7);
          v103 = (float32x4_t *)(a3 + v98 * v8 + 4 * v98);
          v104 = (float32x4_t *)((char *)v103 + v8);
          v105 = 4 * (result - v98);
          v106 = result - v98 - 4;
          v107 = (float32x2_t *)&v103->u32[(unint64_t)v8 / 2 + 2];
          v108 = &v103->i32[(unint64_t)v8 / 2 + 3 + (unint64_t)v8 / 4];
          v110 = *v103;
          v109 = (__int32 *)&v103[1];
          v112 = *v104;
          v111 = (__int32 *)&v104[1];
          v114 = *v107;
          v113 = (__int32 *)&v107[1];
          v116 = *(float *)v108;
          v115 = v108 + 1;
          v118 = *v101;
          v117 = (float32x2_t *)&v101[1];
          v120 = *v102;
          v119 = (float32x2_t *)&v102[1];
          v121 = vtrn1q_s32(v118, v120);
          v122 = vtrn2q_s32(v118, v120);
          *(float32x2_t *)v123.i8 = vadd_f32(vmla_lane_f32(vmul_laneq_f32((float32x2_t)v122.u64[1], v112, 3), *(float32x2_t *)v122.i8, *(float32x2_t *)v112.f32, 1), vmul_laneq_f32((float32x2_t)v121.u64[1], v112, 2));
          *(float32x2_t *)v124.i8 = vadd_f32(vadd_f32(vmla_lane_f32(vmul_laneq_f32((float32x2_t)v122.u64[1], v110, 3), *(float32x2_t *)v122.i8, *(float32x2_t *)v110.f32, 1), vmul_laneq_f32((float32x2_t)v121.u64[1], v110, 2)), vmul_n_f32(*(float32x2_t *)v121.i8, v110.f32[0]));
          v124.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32((float32x2_t)v122.u64[1], v114, 1), vmul_n_f32((float32x2_t)v121.u64[1], v114.f32[0]));
          v123.u64[1] = (unint64_t)vmul_n_f32((float32x2_t)v122.u64[1], v116);
          v125 = (float32x4_t)vtrn1q_s32(v124, v123);
          v126 = (float32x4_t)vtrn2q_s32(v124, v123);
          if ((v106 & 1) != 0)
          {
            v127.i32[0] = *v109++;
            v127.i32[1] = *v111++;
            v127.i32[2] = *v113++;
            v127.i32[3] = *v115++;
            v128 = v117->f32[0];
            v117 = (float32x2_t *)((char *)v117 + 4);
            v129 = v119->f32[0];
            v119 = (float32x2_t *)((char *)v119 + 4);
            v125 = vmlaq_n_f32(v125, v127, v128);
            v126 = vmlaq_n_f32(v126, v127, v129);
            v106 = result - v98 - 5;
          }
          if (v106)
          {
            v130 = 0uLL;
            v131 = 0uLL;
            do
            {
              v132.i64[0] = *(_QWORD *)v109;
              v109 += 2;
              v133.i64[0] = *(_QWORD *)v111;
              v111 += 2;
              v134 = *(_QWORD *)v113;
              v113 += 2;
              v135 = *(_QWORD *)v115;
              v115 += 2;
              v136 = *v117++;
              v137 = *v119++;
              v132.i64[1] = v134;
              v133.i64[1] = v135;
              v138 = (float32x4_t)vtrn1q_s32(v132, v133);
              v139 = (float32x4_t)vtrn2q_s32(v132, v133);
              v125 = vmlaq_n_f32(v125, v138, v136.f32[0]);
              v126 = vmlaq_n_f32(v126, v138, v137.f32[0]);
              v130 = vmlaq_lane_f32(v130, v139, v136, 1);
              v131 = vmlaq_lane_f32(v131, v139, v137, 1);
              v78 = v106 <= 2;
              v106 -= 2;
            }
            while (!v78);
            v125 = vaddq_f32(v125, v130);
            v126 = vaddq_f32(v126, v131);
          }
          *(float32x4_t *)&v117->f32[v105 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v125, a7);
          *(float32x4_t *)&v119->f32[v105 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v126, a7);
          v98 += 4;
          v99 = __OFSUB__(v100, 4);
          v78 = v100 <= 4;
          v100 -= 4;
        }
        while (!v78);
      }
      v140 = result & 3;
      if (!v99 && v140 != 0)
      {
        v141 = (float32x2_t *)(a5 + v9 * v7 + 4 * v98);
        v142 = (float32x2_t *)((char *)v141 + v7);
        v143 = (float32x2_t *)(a3 + v98 * v8 + 4 * v98);
        if (v140 != 1)
        {
          if (v140 != 2)
          {
            v145 = *v143;
            v144 = (__int32 *)&v143[1];
            v147 = *v141;
            v146 = v141 + 1;
            v149 = *v142;
            v148 = v142 + 1;
            v150 = vmul_f32(v145, v147);
            v151 = vmul_f32(v145, v149);
            v145.i32[0] = *v144;
            v143 = (float32x2_t *)&v144[(unint64_t)v8 / 4 - 1];
            v147.i32[0] = v146->i32[0];
            --v146;
            v149.i32[0] = v148->i32[0];
            --v148;
            v146->f32[0] = (float)(vaddv_f32(v150) + (float)(v145.f32[0] * v147.f32[0])) * a7;
            v141 = (float32x2_t *)((char *)v146 + 4);
            v148->f32[0] = (float)(vaddv_f32(v151) + (float)(v145.f32[0] * v149.f32[0])) * a7;
            v142 = (float32x2_t *)((char *)v148 + 4);
          }
          v152 = *v143;
          v143 = (float32x2_t *)((char *)v143 + v8 + 4);
          v153 = vaddv_f32(vmul_f32(v152, *v142)) * a7;
          v141->f32[0] = vaddv_f32(vmul_f32(v152, *v141)) * a7;
          v141 = (float32x2_t *)((char *)v141 + 4);
          v142->f32[0] = v153;
          v142 = (float32x2_t *)((char *)v142 + 4);
        }
        v154 = (float)(v143->f32[0] * v142->f32[0]) * a7;
        v141->f32[0] = (float)(v143->f32[0] * v141->f32[0]) * a7;
        v142->f32[0] = v154;
      }
      a2 -= 2;
      v9 += 2;
    }
    if (a2)
    {
      v155 = 0;
      v156 = __OFSUB__(result, 3);
      v157 = result - 3;
      if (result > 3)
      {
        do
        {
          v158 = (float32x4_t *)(a5 + v9 * v7 + 4 * v155);
          v159 = (float32x4_t *)(a3 + v155 * v8 + 4 * v155);
          v160 = (float32x4_t *)((char *)v159 + v8);
          v161 = result - v155 - 4;
          v162 = (float32x2_t *)&v159->u32[(unint64_t)v8 / 2 + 2];
          v163 = &v159->f32[(unint64_t)v8 / 2 + 3 + (unint64_t)v8 / 4];
          v165 = *v159;
          v164 = (__int32 *)&v159[1];
          v167 = *v160;
          v166 = (__int32 *)&v160[1];
          v169 = *v162;
          v168 = (__int32 *)&v162[1];
          v171 = *v163;
          v170 = (__int32 *)(v163 + 1);
          v173 = *v158;
          v172 = (float32x2_t *)&v158[1];
          v167.i32[0] = 0;
          v174 = vmulq_f32(v165, v173);
          v175 = vmulq_f32(v167, v173);
          v176.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v174, v174));
          v176.f32[3] = v171 * v173.f32[3];
          v176.i32[2] = vaddv_f32(vmul_f32(v169, *(float32x2_t *)&v173.u32[2]));
          v176.i32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v175, v175));
          if ((v161 & 1) != 0)
          {
            v177.i32[0] = *v164++;
            v177.i32[1] = *v166++;
            v177.i32[2] = *v168++;
            v177.i32[3] = *v170++;
            v178 = v172->f32[0];
            v172 = (float32x2_t *)((char *)v172 + 4);
            v176 = vmlaq_n_f32(v176, v177, v178);
            v161 = result - v155 - 5;
          }
          if (v161)
          {
            v179 = 0uLL;
            do
            {
              v180.i64[0] = *(_QWORD *)v164;
              v164 += 2;
              v181.i64[0] = *(_QWORD *)v166;
              v166 += 2;
              v182 = *(_QWORD *)v168;
              v168 += 2;
              v183 = *(_QWORD *)v170;
              v170 += 2;
              v184 = *v172++;
              v180.i64[1] = v182;
              v181.i64[1] = v183;
              v176 = vmlaq_n_f32(v176, (float32x4_t)vtrn1q_s32(v180, v181), v184.f32[0]);
              v179 = vmlaq_lane_f32(v179, (float32x4_t)vtrn2q_s32(v180, v181), v184, 1);
              v78 = v161 <= 2;
              v161 -= 2;
            }
            while (!v78);
            v176 = vaddq_f32(v176, v179);
          }
          *(float32x4_t *)&v172->f32[-(result - v155)] = vmulq_n_f32(v176, a7);
          v155 += 4;
          v156 = __OFSUB__(v157, 4);
          v78 = v157 <= 4;
          v157 -= 4;
        }
        while (!v78);
      }
      v185 = result & 3;
      if (!v156 && v185 != 0)
      {
        v186 = (float32x2_t *)(a5 + v9 * v7 + 4 * v155);
        v187 = (float32x2_t *)(a3 + v155 * v8 + 4 * v155);
        if (v185 != 1)
        {
          if (v185 != 2)
          {
            v189 = *v187;
            v188 = (float *)&v187[1];
            v190 = *v188;
            v187 = (float32x2_t *)&v188[(unint64_t)v8 / 4 - 1];
            v186->f32[0] = (float)(vaddv_f32(vmul_f32(v189, *v186)) + (float)(v190 * v186[1].f32[0])) * a7;
            v186 = (float32x2_t *)((char *)v186 + 4);
          }
          v191 = *v187;
          v187 = (float32x2_t *)((char *)v187 + v8 + 4);
          v186->f32[0] = vaddv_f32(vmul_n_f32(vmul_f32(v191, *v186), a7));
          v186 = (float32x2_t *)((char *)v186 + 4);
        }
        v186->f32[0] = (float)(v187->f32[0] * v186->f32[0]) * a7;
      }
    }
  }
  return result;
}

uint64_t sub_223164840(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64x2_t *v14;
  int64x2_t *v15;
  int64x2_t *v16;
  int64x2_t *v17;
  float32x4_t *v18;
  uint64_t v19;
  uint64_t v20;
  float32x2_t *v21;
  __int32 *v22;
  __int32 *v23;
  __int32 *v24;
  float32x4_t v25;
  __int32 *v26;
  float32x2_t v27;
  __int32 *v28;
  float v29;
  float32x2_t *v30;
  int64x2_t v31;
  float32x2_t *v32;
  int64x2_t v33;
  float32x2_t *v34;
  int64x2_t v35;
  float32x2_t *v36;
  int64x2_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  uint64_t v67;
  uint64_t v68;
  float32x2_t v69;
  float32x2_t v70;
  float32x2_t v71;
  float32x2_t v72;
  float32x4_t v73;
  float32x4_t v74;
  BOOL v75;
  uint64_t v76;
  int32x2_t *v77;
  int32x2_t *v78;
  int32x2_t *v79;
  int32x2_t *v80;
  float *v81;
  float32x2_t v82;
  int32x2_t *v83;
  float v84;
  float v85;
  int32x2_t *v86;
  float v87;
  float v88;
  int32x2_t *v89;
  float v90;
  float v91;
  int32x2_t *v92;
  float v93;
  float32x2_t v94;
  float32x2_t v95;
  float32x2_t v96;
  float32x2_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float v100;
  float v101;
  float v102;
  uint64_t v103;
  BOOL v104;
  uint64_t v105;
  int32x4_t *v106;
  int32x4_t *v107;
  float32x4_t *v108;
  uint64_t v109;
  uint64_t v110;
  float32x2_t *v111;
  __int32 *v112;
  __int32 *v113;
  __int32 *v114;
  float32x4_t v115;
  __int32 *v116;
  float32x2_t v117;
  __int32 *v118;
  float v119;
  float32x2_t *v120;
  int32x4_t v121;
  float32x2_t *v122;
  int32x4_t v123;
  int32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float v131;
  float v132;
  float32x4_t v133;
  float32x4_t v134;
  int32x4_t v135;
  int32x4_t v136;
  uint64_t v137;
  uint64_t v138;
  float32x2_t v139;
  float32x2_t v140;
  float32x4_t v141;
  float32x4_t v142;
  uint64_t v143;
  int32x2_t *v144;
  int32x2_t *v145;
  float *v146;
  float32x2_t v147;
  float32x2_t *v148;
  float v149;
  float32x2_t *v150;
  float v151;
  float32x2_t v152;
  float32x2_t v153;
  float32x2_t v154;
  float v155;
  uint64_t v156;
  BOOL v157;
  uint64_t v158;
  float32x4_t *v159;
  float32x4_t *v160;
  uint64_t v161;
  float32x2_t *v162;
  float *v163;
  __int32 *v164;
  __int32 *v165;
  float32x4_t v166;
  __int32 *v167;
  float32x2_t v168;
  __int32 *v169;
  float v170;
  float32x2_t *v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float v177;
  float32x4_t v178;
  int32x4_t v179;
  int32x4_t v180;
  uint64_t v181;
  uint64_t v182;
  float32x2_t v183;
  uint64_t v184;
  _QWORD *v185;
  float32x2_t *v186;
  float32x2_t v187;
  _QWORD *v188;
  float v189;
  float32x2_t v190;

  v7 = 4 * a6;
  v8 = 4 * a4;
  v9 = 0;
  if (a2 <= 3)
    goto LABEL_22;
  v10 = a2 - 3;
  do
  {
    v11 = 0;
    v12 = __OFSUB__(result, 3);
    v13 = result - 3;
    if (result > 3)
    {
      do
      {
        v14 = (int64x2_t *)(a5 + v9 * v7 + 4 * v11);
        v15 = (int64x2_t *)((char *)v14 + v7);
        v16 = (int64x2_t *)((char *)v14 + 2 * v7);
        v17 = (int64x2_t *)((char *)v14 + 2 * v7 + v7);
        v18 = (float32x4_t *)(a3 + v11 * v8 + 4 * v11);
        v19 = 4 * (result - v11);
        v20 = result - v11 - 4;
        v21 = (float32x2_t *)&v18->u32[(unint64_t)v8 / 4 + 2];
        v22 = &v18->i32[(unint64_t)v8 / 2 + 3];
        v23 = (__int32 *)((char *)&v18[1] + 2 * v8 + v8);
        v25 = *v18;
        v24 = (__int32 *)&v18[1];
        v27 = *v21;
        v26 = (__int32 *)&v21[1];
        v29 = *(float *)v22;
        v28 = v22 + 1;
        v31 = *v14;
        v30 = (float32x2_t *)&v14[1];
        v33 = *v15;
        v32 = (float32x2_t *)&v15[1];
        v35 = *v16;
        v34 = (float32x2_t *)&v16[1];
        v37 = *v17;
        v36 = (float32x2_t *)&v17[1];
        v38 = (int32x4_t)vtrn1q_s64(v31, v35);
        v39 = (int32x4_t)vtrn1q_s64(v33, v37);
        v40 = (int32x4_t)vtrn2q_s64(v31, v35);
        v41 = (int32x4_t)vtrn2q_s64(v33, v37);
        v42 = (float32x4_t)vtrn2q_s32(v38, v39);
        v43 = (float32x4_t)vtrn1q_s32(v40, v41);
        v44 = (float32x4_t)vtrn2q_s32(v40, v41);
        v45 = (int64x2_t)vmlaq_n_f32(v43, v44, v29);
        v46 = (int64x2_t)vaddq_f32(vmlaq_lane_f32(vmlaq_laneq_f32((float32x4_t)vtrn1q_s32(v38, v39), v44, v25, 3), v42, *(float32x2_t *)v25.f32, 1), vmulq_laneq_f32(v43, v25, 2));
        v47 = (int64x2_t)vaddq_f32(vmlaq_lane_f32(v42, v44, v27, 1), vmulq_n_f32(v43, v27.f32[0]));
        v48 = (int32x4_t)vtrn1q_s64(v46, v45);
        v49 = (int32x4_t)vtrn1q_s64(v47, (int64x2_t)v44);
        v50 = (int32x4_t)vtrn2q_s64(v46, v45);
        v51 = (int32x4_t)vtrn2q_s64(v47, (int64x2_t)v44);
        v52 = (float32x4_t)vtrn1q_s32(v48, v49);
        v53 = (float32x4_t)vtrn2q_s32(v48, v49);
        v54 = (float32x4_t)vtrn1q_s32(v50, v51);
        v55 = (float32x4_t)vtrn2q_s32(v50, v51);
        if ((v20 & 1) != 0)
        {
          v56.i32[0] = *v24++;
          v56.i32[1] = *v26++;
          v56.i32[2] = *v28++;
          v56.i32[3] = *v23++;
          v57 = v30->f32[0];
          v30 = (float32x2_t *)((char *)v30 + 4);
          v58 = v32->f32[0];
          v32 = (float32x2_t *)((char *)v32 + 4);
          v59 = v34->f32[0];
          v34 = (float32x2_t *)((char *)v34 + 4);
          v60 = v36->f32[0];
          v36 = (float32x2_t *)((char *)v36 + 4);
          v52 = vmlaq_n_f32(v52, v56, v57);
          v53 = vmlaq_n_f32(v53, v56, v58);
          v54 = vmlaq_n_f32(v54, v56, v59);
          v55 = vmlaq_n_f32(v55, v56, v60);
          v20 = result - v11 - 5;
        }
        if (v20)
        {
          v61 = 0uLL;
          v62 = 0uLL;
          v63 = 0uLL;
          v64 = 0uLL;
          do
          {
            v65.i64[0] = *(_QWORD *)v24;
            v24 += 2;
            v66.i64[0] = *(_QWORD *)v26;
            v26 += 2;
            v67 = *(_QWORD *)v28;
            v28 += 2;
            v68 = *(_QWORD *)v23;
            v23 += 2;
            v69 = *v30++;
            v70 = *v32++;
            v71 = *v34++;
            v72 = *v36++;
            v65.i64[1] = v67;
            v66.i64[1] = v68;
            v73 = (float32x4_t)vtrn1q_s32(v65, v66);
            v74 = (float32x4_t)vtrn2q_s32(v65, v66);
            v52 = vmlaq_n_f32(v52, v73, v69.f32[0]);
            v53 = vmlaq_n_f32(v53, v73, v70.f32[0]);
            v54 = vmlaq_n_f32(v54, v73, v71.f32[0]);
            v55 = vmlaq_n_f32(v55, v73, v72.f32[0]);
            v61 = vmlaq_lane_f32(v61, v74, v69, 1);
            v62 = vmlaq_lane_f32(v62, v74, v70, 1);
            v63 = vmlaq_lane_f32(v63, v74, v71, 1);
            v64 = vmlaq_lane_f32(v64, v74, v72, 1);
            v75 = v20 <= 2;
            v20 -= 2;
          }
          while (!v75);
          v52 = vaddq_f32(v52, v61);
          v53 = vaddq_f32(v53, v62);
          v54 = vaddq_f32(v54, v63);
          v55 = vaddq_f32(v55, v64);
        }
        *(float32x4_t *)&v30->f32[v19 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v52, a7);
        *(float32x4_t *)&v32->f32[v19 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v53, a7);
        *(float32x4_t *)&v34->f32[v19 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v54, a7);
        *(float32x4_t *)&v36->f32[v19 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v55, a7);
        v11 += 4;
        v12 = __OFSUB__(v13, 4);
        v75 = v13 <= 4;
        v13 -= 4;
      }
      while (!v75);
    }
    v76 = result & 3;
    if (!v12 && v76 != 0)
    {
      v77 = (int32x2_t *)(a5 + v9 * v7 + 4 * v11);
      v78 = (int32x2_t *)((char *)v77 + v7);
      v79 = &v77[(unint64_t)v7 / 4];
      v80 = (int32x2_t *)((char *)&v77[(unint64_t)v7 / 4] + v7);
      v81 = (float *)(a3 + v11 * v8 + 4 * v11 + 4);
      if (v76 != 1)
      {
        if (v76 != 2)
        {
          v82 = *(float32x2_t *)v81;
          v81 = (float *)((char *)v81 + v8 + 4);
          v84 = *(float *)v77->i32;
          v83 = (int32x2_t *)((char *)v77 + 4);
          v85 = v84;
          v87 = *(float *)v78->i32;
          v86 = (int32x2_t *)((char *)v78 + 4);
          v88 = v87;
          v90 = *(float *)v79->i32;
          v89 = (int32x2_t *)((char *)v79 + 4);
          v91 = v90;
          v93 = *(float *)v80->i32;
          v92 = (int32x2_t *)((char *)v80 + 4);
          v94 = (float32x2_t)*v83;
          v83 = (int32x2_t *)((char *)v83 - 4);
          v95 = (float32x2_t)*v86;
          v86 = (int32x2_t *)((char *)v86 - 4);
          v96 = (float32x2_t)*v89;
          v89 = (int32x2_t *)((char *)v89 - 4);
          v97 = (float32x2_t)*v92;
          v92 = (int32x2_t *)((char *)v92 - 4);
          *(float *)v83->i32 = (float)(vaddv_f32(vmul_f32(v82, v94)) + v85) * a7;
          v77 = (int32x2_t *)((char *)v83 + 4);
          *(float *)v86->i32 = (float)(vaddv_f32(vmul_f32(v82, v95)) + v88) * a7;
          v78 = (int32x2_t *)((char *)v86 + 4);
          *(float *)v89->i32 = (float)(vaddv_f32(vmul_f32(v82, v96)) + v91) * a7;
          v79 = (int32x2_t *)((char *)v89 + 4);
          *(float *)v92->i32 = (float)(vaddv_f32(vmul_f32(v82, v97)) + v93) * a7;
          v80 = (int32x2_t *)((char *)v92 + 4);
        }
        v98 = vmul_n_f32(vadd_f32((float32x2_t)vtrn1_s32(*v77, *v78), vmul_n_f32((float32x2_t)vtrn2_s32(*v77, *v78), *v81)), a7);
        v99 = vmul_n_f32(vadd_f32((float32x2_t)vtrn1_s32(*v79, *v80), vmul_n_f32((float32x2_t)vtrn2_s32(*v79, *v80), *v81)), a7);
        v77->i32[0] = v98.i32[0];
        v77 = (int32x2_t *)((char *)v77 + 4);
        v78->i32[0] = v98.i32[1];
        v78 = (int32x2_t *)((char *)v78 + 4);
        v79->i32[0] = v99.i32[0];
        v79 = (int32x2_t *)((char *)v79 + 4);
        v80->i32[0] = v99.i32[1];
        v80 = (int32x2_t *)((char *)v80 + 4);
      }
      v100 = *(float *)v78->i32 * a7;
      v101 = *(float *)v79->i32 * a7;
      v102 = *(float *)v80->i32 * a7;
      *(float *)v77->i32 = *(float *)v77->i32 * a7;
      *(float *)v78->i32 = v100;
      *(float *)v79->i32 = v101;
      *(float *)v80->i32 = v102;
    }
    v9 += 4;
    v75 = v10 <= 4;
    v10 -= 4;
  }
  while (!v75);
  v75 = v10 <= -3;
  a2 = v10 + 3;
  if (!v75)
  {
LABEL_22:
    if (a2 > 1)
    {
      v103 = 0;
      v104 = __OFSUB__(result, 3);
      v105 = result - 3;
      if (result > 3)
      {
        do
        {
          v106 = (int32x4_t *)(a5 + v9 * v7 + 4 * v103);
          v107 = (int32x4_t *)((char *)v106 + v7);
          v108 = (float32x4_t *)(a3 + v103 * v8 + 4 * v103);
          v109 = 4 * (result - v103);
          v110 = result - v103 - 4;
          v111 = (float32x2_t *)&v108->u32[(unint64_t)v8 / 4 + 2];
          v112 = &v108->i32[(unint64_t)v8 / 2 + 3];
          v113 = (__int32 *)((char *)&v108[1] + 2 * v8 + v8);
          v115 = *v108;
          v114 = (__int32 *)&v108[1];
          v117 = *v111;
          v116 = (__int32 *)&v111[1];
          v119 = *(float *)v112;
          v118 = v112 + 1;
          v121 = *v106;
          v120 = (float32x2_t *)&v106[1];
          v123 = *v107;
          v122 = (float32x2_t *)&v107[1];
          v124 = vtrn1q_s32(v121, v123);
          v125 = vtrn2q_s32(v121, v123);
          *(float32x2_t *)v126.i8 = vadd_f32(vmla_lane_f32(vmla_laneq_f32(*(float32x2_t *)v124.i8, (float32x2_t)v125.u64[1], v115, 3), *(float32x2_t *)v125.i8, *(float32x2_t *)v115.f32, 1), vmul_laneq_f32((float32x2_t)v124.u64[1], v115, 2));
          *(float32x2_t *)v127.i8 = vadd_f32(vmla_lane_f32(*(float32x2_t *)v125.i8, (float32x2_t)v125.u64[1], v117, 1), vmul_n_f32((float32x2_t)v124.u64[1], v117.f32[0]));
          v126.u64[1] = (unint64_t)vmla_n_f32((float32x2_t)v124.u64[1], (float32x2_t)v125.u64[1], v119);
          v127.i64[1] = v125.i64[1];
          v128 = (float32x4_t)vtrn1q_s32(v126, v127);
          v129 = (float32x4_t)vtrn2q_s32(v126, v127);
          if ((v110 & 1) != 0)
          {
            v130.i32[0] = *v114++;
            v130.i32[1] = *v116++;
            v130.i32[2] = *v118++;
            v130.i32[3] = *v113++;
            v131 = v120->f32[0];
            v120 = (float32x2_t *)((char *)v120 + 4);
            v132 = v122->f32[0];
            v122 = (float32x2_t *)((char *)v122 + 4);
            v128 = vmlaq_n_f32(v128, v130, v131);
            v129 = vmlaq_n_f32(v129, v130, v132);
            v110 = result - v103 - 5;
          }
          if (v110)
          {
            v133 = 0uLL;
            v134 = 0uLL;
            do
            {
              v135.i64[0] = *(_QWORD *)v114;
              v114 += 2;
              v136.i64[0] = *(_QWORD *)v116;
              v116 += 2;
              v137 = *(_QWORD *)v118;
              v118 += 2;
              v138 = *(_QWORD *)v113;
              v113 += 2;
              v139 = *v120++;
              v140 = *v122++;
              v135.i64[1] = v137;
              v136.i64[1] = v138;
              v141 = (float32x4_t)vtrn1q_s32(v135, v136);
              v142 = (float32x4_t)vtrn2q_s32(v135, v136);
              v128 = vmlaq_n_f32(v128, v141, v139.f32[0]);
              v129 = vmlaq_n_f32(v129, v141, v140.f32[0]);
              v133 = vmlaq_lane_f32(v133, v142, v139, 1);
              v134 = vmlaq_lane_f32(v134, v142, v140, 1);
              v75 = v110 <= 2;
              v110 -= 2;
            }
            while (!v75);
            v128 = vaddq_f32(v128, v133);
            v129 = vaddq_f32(v129, v134);
          }
          *(float32x4_t *)&v120->f32[v109 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v128, a7);
          *(float32x4_t *)&v122->f32[v109 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v129, a7);
          v103 += 4;
          v104 = __OFSUB__(v105, 4);
          v75 = v105 <= 4;
          v105 -= 4;
        }
        while (!v75);
      }
      v143 = result & 3;
      if (!v104 && v143 != 0)
      {
        v144 = (int32x2_t *)(a5 + v9 * v7 + 4 * v103);
        v145 = (int32x2_t *)((char *)v144 + v7);
        v146 = (float *)(a3 + v103 * v8 + 4 * v103 + 4);
        if (v143 != 1)
        {
          if (v143 != 2)
          {
            v147 = *(float32x2_t *)v146;
            v146 = (float *)((char *)v146 + v8 + 4);
            v149 = *(float *)v144->i32;
            v148 = (float32x2_t *)((char *)v144 + 4);
            v151 = *(float *)v145->i32;
            v150 = (float32x2_t *)((char *)v145 + 4);
            v152 = vmul_f32(v147, *v148);
            v153 = vmul_f32(v147, *v150);
            v148 = (float32x2_t *)((char *)v148 - 4);
            v150 = (float32x2_t *)((char *)v150 - 4);
            v148->f32[0] = (float)(vaddv_f32(v152) + v149) * a7;
            v144 = (int32x2_t *)((char *)v148 + 4);
            v150->f32[0] = (float)(vaddv_f32(v153) + v151) * a7;
            v145 = (int32x2_t *)((char *)v150 + 4);
          }
          v154 = vmul_n_f32(vadd_f32((float32x2_t)vtrn1_s32(*v144, *v145), vmul_n_f32((float32x2_t)vtrn2_s32(*v144, *v145), *v146)), a7);
          v144->i32[0] = v154.i32[0];
          v144 = (int32x2_t *)((char *)v144 + 4);
          v145->i32[0] = v154.i32[1];
          v145 = (int32x2_t *)((char *)v145 + 4);
        }
        v155 = *(float *)v145->i32 * a7;
        *(float *)v144->i32 = *(float *)v144->i32 * a7;
        *(float *)v145->i32 = v155;
      }
      a2 -= 2;
      v9 += 2;
    }
    if (a2)
    {
      v156 = 0;
      v157 = __OFSUB__(result, 3);
      v158 = result - 3;
      if (result > 3)
      {
        do
        {
          v159 = (float32x4_t *)(a5 + v9 * v7 + 4 * v156);
          v160 = (float32x4_t *)(a3 + v156 * v8 + 4 * v156);
          v161 = result - v156 - 4;
          v162 = (float32x2_t *)&v160->u32[(unint64_t)v8 / 4 + 2];
          v163 = &v160->f32[(unint64_t)v8 / 2 + 3];
          v164 = (__int32 *)((char *)&v160[1] + 2 * v8 + v8);
          v166 = *v160;
          v165 = (__int32 *)&v160[1];
          v168 = *v162;
          v167 = (__int32 *)&v162[1];
          v170 = *v163;
          v169 = (__int32 *)(v163 + 1);
          v172 = *v159;
          v171 = (float32x2_t *)&v159[1];
          v166.i32[0] = 0;
          v173 = vmulq_f32(v166, v172);
          v174.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v173, v173));
          v174.i64[1] = COERCE_UNSIGNED_INT(v170 * v172.f32[3]);
          v174.i32[1] = vaddv_f32(vmul_f32(v168, *(float32x2_t *)&v172.u32[2]));
          v175 = vaddq_f32(v174, v172);
          if ((v161 & 1) != 0)
          {
            v176.i32[0] = *v165++;
            v176.i32[1] = *v167++;
            v176.i32[2] = *v169++;
            v176.i32[3] = *v164++;
            v177 = v171->f32[0];
            v171 = (float32x2_t *)((char *)v171 + 4);
            v175 = vmlaq_n_f32(v175, v176, v177);
            v161 = result - v156 - 5;
          }
          if (v161)
          {
            v178 = 0uLL;
            do
            {
              v179.i64[0] = *(_QWORD *)v165;
              v165 += 2;
              v180.i64[0] = *(_QWORD *)v167;
              v167 += 2;
              v181 = *(_QWORD *)v169;
              v169 += 2;
              v182 = *(_QWORD *)v164;
              v164 += 2;
              v183 = *v171++;
              v179.i64[1] = v181;
              v180.i64[1] = v182;
              v175 = vmlaq_n_f32(v175, (float32x4_t)vtrn1q_s32(v179, v180), v183.f32[0]);
              v178 = vmlaq_lane_f32(v178, (float32x4_t)vtrn2q_s32(v179, v180), v183, 1);
              v75 = v161 <= 2;
              v161 -= 2;
            }
            while (!v75);
            v175 = vaddq_f32(v175, v178);
          }
          *(float32x4_t *)&v171->f32[-(result - v156)] = vmulq_n_f32(v175, a7);
          v156 += 4;
          v157 = __OFSUB__(v158, 4);
          v75 = v158 <= 4;
          v158 -= 4;
        }
        while (!v75);
      }
      v184 = result & 3;
      if (!v157 && v184 != 0)
      {
        v185 = (_QWORD *)(a5 + v9 * v7 + 4 * v156);
        v186 = (float32x2_t *)(a3 + v156 * v8 + 4 * v156 + 4);
        if (v184 != 1)
        {
          if (v184 != 2)
          {
            v187 = *v186;
            v186 = (float32x2_t *)((char *)v186 + v8 + 4);
            v189 = *(float *)v185;
            v188 = (_QWORD *)((char *)v185 + 4);
            v190 = *(float32x2_t *)v188;
            v188 = (_QWORD *)((char *)v188 - 4);
            *(float *)v188 = (float)(vaddv_f32(vmul_f32(v187, v190)) + v189) * a7;
            v185 = (_QWORD *)((char *)v188 + 4);
          }
          *(float *)v185 = (float)((float)(COERCE_FLOAT(HIDWORD(*v185)) * v186->f32[0]) + COERCE_FLOAT(*v185)) * a7;
          v185 = (_QWORD *)((char *)v185 + 4);
        }
        *(float *)v185 = *(float *)v185 * a7;
      }
    }
  }
  return result;
}

_OWORD *sub_223164F00(_OWORD *a1, float64x2_t *a2, float64x2_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  float64x2_t *v7;
  uint64_t v8;
  _OWORD *v9;
  float64x2_t v10;
  float64x2_t v11;
  _OWORD *result;
  float64x2_t v13;
  float64x2_t v14;
  uint64_t v15;
  float64x2_t *v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t *v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t *v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t *v35;
  float64x2_t v36;
  float64x2_t v37;
  _OWORD *v38;
  float64x2_t *v39;
  float64x2_t *v40;
  float64x2_t *v41;

  v7 = a3;
  v8 = 8 * a4;
  v10 = *(float64x2_t *)a1;
  v11 = *((float64x2_t *)a1 + 1);
  v9 = a1 + 2;
  v13 = *(float64x2_t *)v9;
  v14 = *((float64x2_t *)v9 + 1);
  result = v9 + 2;
  do
  {
    v15 = a6;
    v17 = *a3;
    v18 = a3[1];
    v19 = a3[2];
    v20 = a3[3];
    v16 = (float64x2_t *)((char *)a3 + v8);
    v22 = *v16;
    v23 = v16[1];
    v24 = v16[2];
    v25 = v16[3];
    v21 = (float64x2_t *)((char *)v16 + v8);
    v27 = *v21;
    v28 = v21[1];
    v29 = v21[2];
    v30 = v21[3];
    v26 = (float64x2_t *)((char *)v21 + v8);
    v31 = *v26;
    v32 = v26[1];
    v33 = v26[2];
    v34 = v26[3];
    v36 = *a2;
    v37 = a2[1];
    v35 = a2 + 2;
    do
    {
      v17 = vmlaq_n_f64(v17, v10, v36.f64[0]);
      v22 = vmlaq_laneq_f64(v22, v10, v36, 1);
      v27 = vmlaq_n_f64(v27, v10, v37.f64[0]);
      v31 = vmlaq_laneq_f64(v31, v10, v37, 1);
      v18 = vmlaq_n_f64(v18, v11, v36.f64[0]);
      v23 = vmlaq_laneq_f64(v23, v11, v36, 1);
      v28 = vmlaq_n_f64(v28, v11, v37.f64[0]);
      v32 = vmlaq_laneq_f64(v32, v11, v37, 1);
      v10 = *(float64x2_t *)result;
      v11 = *((float64x2_t *)result + 1);
      v38 = result + 2;
      v19 = vmlaq_n_f64(v19, v13, v36.f64[0]);
      v24 = vmlaq_laneq_f64(v24, v13, v36, 1);
      v29 = vmlaq_n_f64(v29, v13, v37.f64[0]);
      v33 = vmlaq_laneq_f64(v33, v13, v37, 1);
      v20 = vmlaq_n_f64(v20, v14, v36.f64[0]);
      v25 = vmlaq_laneq_f64(v25, v14, v36, 1);
      v30 = vmlaq_n_f64(v30, v14, v37.f64[0]);
      v34 = vmlaq_laneq_f64(v34, v14, v37, 1);
      v13 = *(float64x2_t *)v38;
      v14 = *((float64x2_t *)v38 + 1);
      result = v38 + 2;
      v36 = *v35;
      v37 = v35[1];
      v35 += 2;
      --v15;
    }
    while (v15);
    v39 = (float64x2_t *)((char *)v7 + v8);
    *v7 = v17;
    v7[1] = v18;
    v7[2] = v19;
    v7[3] = v20;
    v7 += 4;
    *v39 = v22;
    v39[1] = v23;
    v39[2] = v24;
    v39[3] = v25;
    v40 = (float64x2_t *)((char *)v39 + v8);
    *v40 = v27;
    v40[1] = v28;
    v40[2] = v29;
    v40[3] = v30;
    v41 = (float64x2_t *)((char *)v40 + v8);
    *v41 = v31;
    v41[1] = v32;
    v41[2] = v33;
    v41[3] = v34;
    a3 = v7;
    a5 -= 8;
  }
  while (a5);
  return result;
}

uint64_t sub_223164FD0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7, double a8, double a9, double a10, __n128 a11, __n128 a12, float32x4_t a13, float32x4_t a14)
{
  float32x4_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL i;
  __n128 *v21;
  float *v22;
  float32x2_t *v23;
  float32x4_t *v24;
  float32x4_t *v25;
  uint64_t v26;
  float v27;
  float *v28;
  float32x2_t v29;
  float *v30;
  float32x4_t v31;
  float *v32;
  float32x4_t v33;
  float *v34;
  __n128 *v35;
  float32x4_t *v36;
  float32x4_t *v37;
  float32x4_t *v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t *v52;
  float32x4_t v53;
  float32x4_t v54;
  BOOL v55;
  float32x4_t *v56;
  float32x4_t *v57;
  uint64_t v58;
  float32x4_t *v59;
  float32x2_t *v60;
  float32x2_t v61;
  float32x4_t *v62;
  float32x4_t v63;
  float32x4_t *v64;
  float32x4_t v65;
  float v66;
  float32x2_t v67;
  float32x4_t *v68;
  float32x4_t v69;
  uint64_t v70;
  BOOL j;
  unint64_t *v72;
  float *v73;
  float32x2_t *v74;
  float32x4_t *v75;
  float32x4_t *v76;
  uint64_t v77;
  float v78;
  float *v79;
  float32x2_t v80;
  float *v81;
  float32x4_t v82;
  float *v83;
  float32x4_t v84;
  float *v85;
  unint64_t *v86;
  unint64_t *v87;
  unint64_t *v88;
  float32x2_t *v89;
  float32x2_t v90;
  float32x2_t v91;
  float32x2_t v92;
  float32x2_t v93;
  float32x2_t v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float32x2_t v99;
  float32x2_t v100;
  float32x2_t v101;
  float32x2_t v102;
  float32x2_t *v103;
  float32x2_t v104;
  float32x2_t v105;
  float32x2_t *v106;
  float32x2_t *v107;
  uint64_t v108;
  float32x2_t *v109;
  float32x2_t *v110;
  float32x2_t v111;
  float32x2_t *v112;
  float32x2_t v113;
  float32x2_t *v114;
  float32x2_t v115;
  float v116;
  float32x2_t v117;
  float32x2_t *v118;
  float32x2_t v119;
  uint64_t v120;
  BOOL k;
  unsigned __int32 *v122;
  float *v123;
  float32x2_t *v124;
  float32x4_t *v125;
  float32x4_t *v126;
  uint64_t v127;
  float v128;
  float *v129;
  float32x2_t v130;
  float *v131;
  float32x4_t v132;
  float *v133;
  float32x4_t v134;
  float *v135;
  unsigned __int32 *v136;
  unsigned __int32 *v137;
  unsigned __int32 *v138;
  float *v139;
  float32x2_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x2_t v143;
  float32x2_t v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  __int32 *v150;
  float32x2_t v151;
  float *v152;
  float *v153;
  uint64_t v154;
  __int32 *v155;
  float32x2_t *v156;
  float32x2_t v157;
  __int32 *v158;
  float32x2_t v159;
  float *v160;
  float v161;
  float32x2_t v162;
  __int32 *v163;
  float32x2_t v164;

  v15 = 4 * a6;
  v16 = 4 * a4;
  v17 = 0;
  if (result <= 3)
    goto LABEL_21;
  v18 = result - 3;
  do
  {
    v19 = a2;
    for (i = __OFSUB__(a2, 3); v19 > 3; i = __OFSUB__(v19, 3))
    {
      v19 -= 4;
      v21 = (__n128 *)(a5 + v19 * v15 + 4 * v17);
      v22 = (float *)(a3 + v19 * v16 + 4 * v19);
      v23 = (float32x2_t *)&v22[(unint64_t)v16 / 4];
      v24 = (float32x4_t *)&v22[(unint64_t)v16 / 2];
      v25 = (float32x4_t *)&v22[(unint64_t)v16 / 4 + (unint64_t)v16 / 2];
      v26 = v19;
      v27 = *v22;
      v28 = (float *)(a3 + v19 * v16);
      v29 = *v23;
      v30 = (float *)v23 - v19;
      v31 = *v24;
      v32 = &v24->f32[-v19];
      v33 = *v25;
      v34 = &v25->f32[-v19];
      a11 = *v21;
      v35 = (__n128 *)((char *)v21 + v15);
      a12 = *v35;
      v36 = (float32x4_t *)((char *)v35 + v15);
      a13 = *v36;
      v37 = (float32x4_t *)((char *)v36 + v15);
      a14 = *v37;
      v38 = (float32x4_t *)((char *)v37 + v15 - v19 * v15 + -4 * v15);
      v39 = vmulq_n_f32((float32x4_t)a11, v27);
      v40 = vaddq_f32(vmulq_n_f32((float32x4_t)a11, v29.f32[0]), vmulq_lane_f32((float32x4_t)a12, v29, 1));
      v41 = vaddq_f32(vmlaq_laneq_f32(vmulq_n_f32((float32x4_t)a11, v31.f32[0]), a13, v31, 2), vmulq_lane_f32((float32x4_t)a12, *(float32x2_t *)v31.f32, 1));
      v42 = vaddq_f32(vmlaq_laneq_f32(vmulq_n_f32((float32x4_t)a11, v33.f32[0]), a13, v33, 2), vmlaq_laneq_f32(vmulq_lane_f32((float32x4_t)a12, *(float32x2_t *)v33.f32, 1), a14, v33, 3));
      if ((v19 & 1) != 0)
      {
        v43 = *v38;
        v38 = (float32x4_t *)((char *)v38 + v15);
        v44 = *v28++;
        v45 = *v30++;
        v46 = *v32++;
        v47 = *v34++;
        v39 = vmlaq_n_f32(v39, v43, v44);
        v40 = vmlaq_n_f32(v40, v43, v45);
        v41 = vmlaq_n_f32(v41, v43, v46);
        v42 = vmlaq_n_f32(v42, v43, v47);
        v26 = v19 - 1;
      }
      if (v26)
      {
        v48 = 0uLL;
        v49 = 0uLL;
        v50 = 0uLL;
        v51 = 0uLL;
        do
        {
          v53 = *v38;
          v52 = (float32x4_t *)((char *)v38 + v15);
          v54 = *v52;
          v38 = (float32x4_t *)((char *)v52 + v15);
          a11.n128_u64[0] = *(_QWORD *)v28;
          v28 += 2;
          a12.n128_u64[0] = *(_QWORD *)v30;
          v30 += 2;
          a13.i64[0] = *(_QWORD *)v32;
          v32 += 2;
          a14.i64[0] = *(_QWORD *)v34;
          v34 += 2;
          v39 = vmlaq_n_f32(v39, v53, a11.n128_f32[0]);
          v40 = vmlaq_n_f32(v40, v53, a12.n128_f32[0]);
          v41 = vmlaq_n_f32(v41, v53, a13.f32[0]);
          v42 = vmlaq_n_f32(v42, v53, a14.f32[0]);
          v48 = vmlaq_lane_f32(v48, v54, (float32x2_t)a11.n128_u64[0], 1);
          v49 = vmlaq_lane_f32(v49, v54, (float32x2_t)a12.n128_u64[0], 1);
          v50 = vmlaq_lane_f32(v50, v54, *(float32x2_t *)a13.f32, 1);
          v51 = vmlaq_lane_f32(v51, v54, *(float32x2_t *)a14.f32, 1);
          v55 = v26 <= 2;
          v26 -= 2;
        }
        while (!v55);
        v39 = vaddq_f32(v39, v48);
        v40 = vaddq_f32(v40, v49);
        v41 = vaddq_f32(v41, v50);
        v42 = vaddq_f32(v42, v51);
      }
      v14 = vmulq_n_f32(v39, a7);
      *v38 = v14;
      v56 = (float32x4_t *)((char *)v38 + v15);
      *v56 = vmulq_n_f32(v40, a7);
      v57 = (float32x4_t *)((char *)v56 + v15);
      *v57 = vmulq_n_f32(v41, a7);
      *(float32x4_t *)((char *)v57 + v15) = vmulq_n_f32(v42, a7);
    }
    v58 = a2 & 3;
    if (!i && v58 != 0)
    {
      v59 = (float32x4_t *)(a5 + 4 * v17);
      v60 = (float32x2_t *)(a3 + (v19 - 1) * v16);
      if (v58 != 1)
      {
        if (v58 != 2)
        {
          v61 = *v60;
          v63 = *v59;
          v62 = (float32x4_t *)((char *)v59 + v15);
          v65 = *v62;
          v64 = (float32x4_t *)((char *)v62 + v15);
          a12 = *(__n128 *)v64;
          v66 = v60[1].f32[0];
          v60 = (float32x2_t *)((char *)v60 - v16);
          *v64 = vmulq_n_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(v63, v61.f32[0]), vmulq_lane_f32(v65, v61, 1)), vmulq_n_f32(*v64, v66)), a7);
          v59 = (float32x4_t *)((char *)v64 - 2 * v15);
        }
        v67 = *v60;
        v69 = *v59;
        v68 = (float32x4_t *)((char *)v59 + v15);
        a11 = *(__n128 *)v68;
        v60 = (float32x2_t *)((char *)v60 - v16);
        *v68 = vmulq_n_f32(vaddq_f32(vmulq_n_f32(v69, v67.f32[0]), vmulq_lane_f32(*v68, v67, 1)), a7);
        v59 = (float32x4_t *)((char *)v68 - v15);
      }
      v14 = vmulq_n_f32(vmulq_n_f32(*v59, v60->f32[0]), a7);
      *v59 = v14;
    }
    v17 += 4;
    v55 = v18 <= 4;
    v18 -= 4;
  }
  while (!v55);
  v55 = v18 <= -3;
  result = v18 + 3;
  if (!v55)
  {
LABEL_21:
    if (result > 1)
    {
      v70 = a2;
      for (j = __OFSUB__(a2, 3); v70 > 3; j = __OFSUB__(v70, 3))
      {
        v70 -= 4;
        v72 = (unint64_t *)(a5 + v70 * v15 + 4 * v17);
        v73 = (float *)(a3 + v70 * v16 + 4 * v70);
        v74 = (float32x2_t *)&v73[(unint64_t)v16 / 4];
        v75 = (float32x4_t *)&v73[(unint64_t)v16 / 2];
        v76 = (float32x4_t *)&v73[(unint64_t)v16 / 4 + (unint64_t)v16 / 2];
        v77 = v70;
        v78 = *v73;
        v79 = (float *)(a3 + v70 * v16);
        v80 = *v74;
        v81 = (float *)v74 - v70;
        v82 = *v75;
        v83 = &v75->f32[-v70];
        v84 = *v76;
        v85 = &v76->f32[-v70];
        a11.n128_u64[0] = *v72;
        v86 = (unint64_t *)((char *)v72 + v15);
        a12.n128_u64[0] = *v86;
        v87 = (unint64_t *)((char *)v86 + v15);
        a13.i64[0] = *v87;
        v88 = (unint64_t *)((char *)v87 + v15);
        a14.i64[0] = *v88;
        v89 = (float32x2_t *)((char *)v88 + v15 - v70 * v15 + -4 * v15);
        v90 = vmul_n_f32((float32x2_t)a11.n128_u64[0], v78);
        v91 = vadd_f32(vmul_n_f32((float32x2_t)a11.n128_u64[0], v80.f32[0]), vmul_lane_f32((float32x2_t)a12.n128_u64[0], v80, 1));
        v92 = vadd_f32(vmla_laneq_f32(vmul_n_f32((float32x2_t)a11.n128_u64[0], v82.f32[0]), *(float32x2_t *)a13.f32, v82, 2), vmul_lane_f32((float32x2_t)a12.n128_u64[0], *(float32x2_t *)v82.f32, 1));
        v93 = vadd_f32(vmla_laneq_f32(vmul_n_f32((float32x2_t)a11.n128_u64[0], v84.f32[0]), *(float32x2_t *)a13.f32, v84, 2), vmla_laneq_f32(vmul_lane_f32((float32x2_t)a12.n128_u64[0], *(float32x2_t *)v84.f32, 1), *(float32x2_t *)a14.f32, v84, 3));
        if ((v70 & 1) != 0)
        {
          v94 = *v89;
          v89 = (float32x2_t *)((char *)v89 + v15);
          v95 = *v79++;
          v96 = *v81++;
          v97 = *v83++;
          v98 = *v85++;
          v90 = vmla_n_f32(v90, v94, v95);
          v91 = vmla_n_f32(v91, v94, v96);
          v92 = vmla_n_f32(v92, v94, v97);
          v93 = vmla_n_f32(v93, v94, v98);
          v77 = v70 - 1;
        }
        if (v77)
        {
          v99 = 0;
          v100 = 0;
          v101 = 0;
          v102 = 0;
          do
          {
            v104 = *v89;
            v103 = (float32x2_t *)((char *)v89 + v15);
            v105 = *v103;
            v89 = (float32x2_t *)((char *)v103 + v15);
            a11.n128_u64[0] = *(_QWORD *)v79;
            v79 += 2;
            a12.n128_u64[0] = *(_QWORD *)v81;
            v81 += 2;
            a13.i64[0] = *(_QWORD *)v83;
            v83 += 2;
            a14.i64[0] = *(_QWORD *)v85;
            v85 += 2;
            v90 = vmla_n_f32(v90, v104, a11.n128_f32[0]);
            v91 = vmla_n_f32(v91, v104, a12.n128_f32[0]);
            v92 = vmla_n_f32(v92, v104, a13.f32[0]);
            v93 = vmla_n_f32(v93, v104, a14.f32[0]);
            v99 = vmla_lane_f32(v99, v105, (float32x2_t)a11.n128_u64[0], 1);
            v100 = vmla_lane_f32(v100, v105, (float32x2_t)a12.n128_u64[0], 1);
            v101 = vmla_lane_f32(v101, v105, *(float32x2_t *)a13.f32, 1);
            v102 = vmla_lane_f32(v102, v105, *(float32x2_t *)a14.f32, 1);
            v55 = v77 <= 2;
            v77 -= 2;
          }
          while (!v55);
          v90 = vadd_f32(v90, v99);
          v91 = vadd_f32(v91, v100);
          v92 = vadd_f32(v92, v101);
          v93 = vadd_f32(v93, v102);
        }
        *(float32x2_t *)v14.f32 = vmul_n_f32(v90, a7);
        *v89 = *(float32x2_t *)v14.f32;
        v106 = (float32x2_t *)((char *)v89 + v15);
        *v106 = vmul_n_f32(v91, a7);
        v107 = (float32x2_t *)((char *)v106 + v15);
        *v107 = vmul_n_f32(v92, a7);
        *(float32x2_t *)((char *)v107 + v15) = vmul_n_f32(v93, a7);
      }
      v108 = a2 & 3;
      if (!j && v108 != 0)
      {
        v109 = (float32x2_t *)(a5 + 4 * v17);
        v110 = (float32x2_t *)(a3 + (v70 - 1) * v16);
        if (v108 != 1)
        {
          if (v108 != 2)
          {
            v111 = *v110;
            v113 = *v109;
            v112 = (float32x2_t *)((char *)v109 + v15);
            v115 = *v112;
            v114 = (float32x2_t *)((char *)v112 + v15);
            a12.n128_u64[0] = (unint64_t)*v114;
            v116 = v110[1].f32[0];
            v110 = (float32x2_t *)((char *)v110 - v16);
            *v114 = vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(v113, v111.f32[0]), vmul_lane_f32(v115, v111, 1)), vmul_n_f32(*v114, v116)), a7);
            v109 = &v114[v15 / 0xFFFFFFFFFFFFFFFCLL];
          }
          v117 = *v110;
          v119 = *v109;
          v118 = (float32x2_t *)((char *)v109 + v15);
          a11.n128_u64[0] = (unint64_t)*v118;
          v110 = (float32x2_t *)((char *)v110 - v16);
          *v118 = vmul_n_f32(vadd_f32(vmul_n_f32(v119, v117.f32[0]), vmul_lane_f32(*v118, v117, 1)), a7);
          v109 = (float32x2_t *)((char *)v118 - v15);
        }
        *(float32x2_t *)v14.f32 = vmul_n_f32(vmul_n_f32(*v109, v110->f32[0]), a7);
        *v109 = *(float32x2_t *)v14.f32;
      }
      v17 += 2;
      result -= 2;
    }
    if (result)
    {
      v120 = a2;
      for (k = __OFSUB__(a2, 3); v120 > 3; k = __OFSUB__(v120, 3))
      {
        v120 -= 4;
        v122 = (unsigned __int32 *)(a5 + v120 * v15 + 4 * v17);
        v123 = (float *)(a3 + v120 * v16 + 4 * v120);
        v124 = (float32x2_t *)&v123[(unint64_t)v16 / 4];
        v125 = (float32x4_t *)&v123[(unint64_t)v16 / 2];
        v126 = (float32x4_t *)&v123[(unint64_t)v16 / 4 + (unint64_t)v16 / 2];
        v127 = v120;
        v128 = *v123;
        v129 = (float *)(a3 + v120 * v16);
        v130 = *v124;
        v131 = (float *)v124 - v120;
        v132 = *v125;
        v133 = &v125->f32[-v120];
        v134 = *v126;
        v135 = &v126->f32[-v120];
        a11.n128_u32[0] = *v122;
        v136 = &v122[(unint64_t)v15 / 4];
        a12.n128_u32[0] = *v136;
        v137 = &v136[(unint64_t)v15 / 4];
        a13.i32[0] = *v137;
        v138 = &v137[(unint64_t)v15 / 4];
        a14.i32[0] = *v138;
        v139 = (float *)((char *)&v138[(unint64_t)v15 / 4] - v120 * v15 + -4 * v15);
        a11.n128_u64[0] = (unint64_t)vtrn1_s32((int32x2_t)a11.n128_u64[0], (int32x2_t)a12.n128_u64[0]);
        *(int32x2_t *)a13.f32 = vtrn1_s32(*(int32x2_t *)a13.f32, *(int32x2_t *)a14.f32);
        a11.n128_u64[1] = a13.i64[0];
        v132.i32[3] = 0;
        v14.f32[0] = v128 * a11.n128_f32[0];
        v140 = vmul_f32(v130, (float32x2_t)a11.n128_u64[0]);
        v141 = vmulq_f32(v132, (float32x4_t)a11);
        v142 = vmulq_f32(v134, (float32x4_t)a11);
        v143 = (float32x2_t)vpaddq_f32(v141, v141).u64[0];
        v144 = (float32x2_t)vpaddq_f32(v142, v142).u64[0];
        if ((v120 & 1) != 0)
        {
          v145 = *v139;
          v139 = (float *)((char *)v139 + v15);
          v146 = *v129++;
          v147 = *v131++;
          v148 = *v133++;
          v149 = *v135++;
          v14.f32[0] = vaddv_f32(*(float32x2_t *)v14.f32) + (float)(v145 * v146);
          v140.f32[0] = vaddv_f32(v140) + (float)(v145 * v147);
          v143.f32[0] = vaddv_f32(v143) + (float)(v145 * v148);
          v144.f32[0] = vaddv_f32(v144) + (float)(v145 * v149);
          v127 = v120 - 1;
        }
        if (v127)
        {
          do
          {
            v151.f32[0] = *v139;
            v150 = (__int32 *)&v139[(unint64_t)v15 / 4];
            v151.i32[1] = *v150;
            v139 = (float *)&v150[(unint64_t)v15 / 4];
            a11.n128_u64[0] = *(_QWORD *)v129;
            v129 += 2;
            a12.n128_u64[0] = *(_QWORD *)v131;
            v131 += 2;
            a13.i64[0] = *(_QWORD *)v133;
            v133 += 2;
            a14.i64[0] = *(_QWORD *)v135;
            v135 += 2;
            *(float32x2_t *)v14.f32 = vmla_f32(*(float32x2_t *)v14.f32, v151, (float32x2_t)a11.n128_u64[0]);
            v140 = vmla_f32(v140, v151, (float32x2_t)a12.n128_u64[0]);
            v143 = vmla_f32(v143, v151, *(float32x2_t *)a13.f32);
            v144 = vmla_f32(v144, v151, *(float32x2_t *)a14.f32);
            v55 = v127 <= 2;
            v127 -= 2;
          }
          while (!v55);
        }
        *v139 = vaddv_f32(*(float32x2_t *)v14.f32) * a7;
        v152 = &v139[(unint64_t)v15 / 4];
        *v152 = vaddv_f32(v140) * a7;
        v153 = &v152[(unint64_t)v15 / 4];
        *v153 = vaddv_f32(v143) * a7;
        v153[(unint64_t)v15 / 4] = vaddv_f32(v144) * a7;
      }
      v154 = a2 & 3;
      if (!k && v154 != 0)
      {
        v155 = (__int32 *)(a5 + 4 * v17);
        v156 = (float32x2_t *)(a3 + (v120 - 1) * v16);
        if (v154 != 1)
        {
          if (v154 != 2)
          {
            v157 = *v156;
            v159.i32[0] = *v155;
            v158 = &v155[(unint64_t)v15 / 4];
            v159.i32[1] = *v158;
            v160 = (float *)&v158[(unint64_t)v15 / 4];
            v161 = v156[1].f32[0];
            v156 = (float32x2_t *)((char *)v156 - v16);
            *v160 = (float)(vaddv_f32(vmul_f32(v159, v157)) + (float)(v161 * *v160)) * a7;
            v155 = (__int32 *)&v160[v15 / 0xFFFFFFFFFFFFFFFELL];
          }
          v162 = *v156;
          v164.i32[0] = *v155;
          v163 = &v155[(unint64_t)v15 / 4];
          v164.i32[1] = *v163;
          v156 = (float32x2_t *)((char *)v156 - v16);
          *(float *)v163 = vaddv_f32(vmul_f32(v164, v162)) * a7;
          v155 = &v163[v15 / 0xFFFFFFFFFFFFFFFCLL];
        }
        *(float *)v155 = (float)(*(float *)v155 * v156->f32[0]) * a7;
      }
    }
  }
  return result;
}

uint64_t sub_2231655D0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7, double a8, double a9, double a10, double a11, float32x4_t a12, float32x4_t a13, float32x4_t a14)
{
  float32x4_t v14;
  float32x4_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL i;
  float32x4_t *v22;
  uint64_t v23;
  float *v24;
  float32x2_t *v25;
  float32x4_t *v26;
  uint64_t v27;
  float32x2_t *v28;
  float v29;
  float *v30;
  float32x2_t v31;
  float *v32;
  float32x4_t v33;
  float *v34;
  float32x4_t *v35;
  float32x4_t v36;
  float32x4_t *v37;
  float32x4_t *v38;
  float32x4_t *v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t *v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x2_t v55;
  BOOL v56;
  float32x4_t *v57;
  float32x4_t *v58;
  uint64_t v59;
  float32x4_t *v60;
  float *v61;
  float32x2_t v62;
  float32x4_t *v63;
  float32x4_t v64;
  float32x4_t *v65;
  float32x4_t v66;
  float32x4_t *v67;
  float32x4_t v68;
  uint64_t v69;
  BOOL j;
  float32x2_t *v71;
  uint64_t v72;
  float *v73;
  float32x2_t *v74;
  float32x4_t *v75;
  uint64_t v76;
  float32x2_t *v77;
  float v78;
  float *v79;
  float32x2_t v80;
  float *v81;
  float32x4_t v82;
  float *v83;
  unint64_t *v84;
  float32x2_t v85;
  unint64_t *v86;
  unint64_t *v87;
  float32x2_t *v88;
  float32x2_t v89;
  float32x2_t v90;
  float32x2_t v91;
  float32x2_t v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float32x2_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float32x2_t v100;
  float32x2_t *v101;
  float32x2_t v102;
  float32x2_t v103;
  float32x2_t v104;
  float32x2_t *v105;
  float32x2_t *v106;
  uint64_t v107;
  float32x2_t *v108;
  float *v109;
  float32x2_t v110;
  float32x2_t *v111;
  float32x2_t v112;
  float32x2_t *v113;
  float32x2_t v114;
  float32x2_t *v115;
  float32x2_t v116;
  uint64_t v117;
  BOOL k;
  __int32 *v119;
  uint64_t v120;
  float *v121;
  float32x2_t *v122;
  float32x4_t *v123;
  uint64_t v124;
  float *v125;
  float v126;
  float *v127;
  float32x2_t v128;
  float *v129;
  float32x4_t v130;
  float *v131;
  unsigned __int32 *v132;
  unsigned __int32 *v133;
  unsigned __int32 *v134;
  float *v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x2_t v138;
  float32x2_t v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  __int32 *v145;
  float32x2_t v146;
  float32x2_t v147;
  float *v148;
  float *v149;
  uint64_t v150;
  __int32 *v151;
  float32x2_t *v152;
  float32x2_t v153;
  __int32 *v154;
  float32x2_t v155;
  float *v156;
  float *v157;
  float v158;

  v16 = 4 * a6;
  v17 = 4 * a4;
  v18 = 0;
  if (result <= 3)
    goto LABEL_21;
  v19 = result - 3;
  do
  {
    v20 = a2;
    for (i = __OFSUB__(a2, 3); v20 > 3; i = __OFSUB__(v20, 3))
    {
      v20 -= 4;
      v22 = (float32x4_t *)(a5 + v20 * v16 + 4 * v18);
      v23 = a3 + v20 * v17 + 4 * v20;
      v24 = (float *)(v23 + v17);
      v25 = (float32x2_t *)(v23 + 2 * v17);
      v26 = (float32x4_t *)(v23 + v17 + 2 * v17);
      v27 = v20;
      v28 = (float32x2_t *)(a3 + v20 * v17);
      v29 = *v24;
      v30 = &v24[-v20];
      v31 = *v25;
      v32 = (float *)v25 - v20;
      v33 = *v26;
      v34 = &v26->f32[-v20];
      v36 = *v22;
      v35 = (float32x4_t *)((char *)v22 + v16);
      a12 = *v35;
      v37 = (float32x4_t *)((char *)v35 + v16);
      a13 = *v37;
      v38 = (float32x4_t *)((char *)v37 + v16);
      a14 = *v38;
      v39 = (float32x4_t *)((char *)v38 + v16 - v20 * v16 + -4 * v16);
      v40 = vmlaq_n_f32(a12, v36, v29);
      v41 = vaddq_f32(vmlaq_n_f32(a13, v36, v31.f32[0]), vmulq_lane_f32(a12, v31, 1));
      v42 = vaddq_f32(vmlaq_laneq_f32(vmlaq_n_f32(a14, v36, v33.f32[0]), a13, v33, 2), vmulq_lane_f32(a12, *(float32x2_t *)v33.f32, 1));
      if ((v20 & 1) != 0)
      {
        v43 = *v39;
        v39 = (float32x4_t *)((char *)v39 + v16);
        v44 = v28->f32[0];
        v28 = (float32x2_t *)((char *)v28 + 4);
        v45 = *v30++;
        v46 = *v32++;
        v47 = *v34++;
        v36 = vmlaq_n_f32(v36, v43, v44);
        v40 = vmlaq_n_f32(v40, v43, v45);
        v41 = vmlaq_n_f32(v41, v43, v46);
        v42 = vmlaq_n_f32(v42, v43, v47);
        v27 = v20 - 1;
      }
      if (v27)
      {
        v48 = 0uLL;
        v49 = 0uLL;
        v50 = 0uLL;
        v51 = 0uLL;
        do
        {
          v53 = *v39;
          v52 = (float32x4_t *)((char *)v39 + v16);
          v54 = *v52;
          v39 = (float32x4_t *)((char *)v52 + v16);
          v55 = *v28++;
          a12.i64[0] = *(_QWORD *)v30;
          v30 += 2;
          a13.i64[0] = *(_QWORD *)v32;
          v32 += 2;
          a14.i64[0] = *(_QWORD *)v34;
          v34 += 2;
          v36 = vmlaq_n_f32(v36, v53, v55.f32[0]);
          v40 = vmlaq_n_f32(v40, v53, a12.f32[0]);
          v41 = vmlaq_n_f32(v41, v53, a13.f32[0]);
          v42 = vmlaq_n_f32(v42, v53, a14.f32[0]);
          v48 = vmlaq_lane_f32(v48, v54, v55, 1);
          v49 = vmlaq_lane_f32(v49, v54, *(float32x2_t *)a12.f32, 1);
          v50 = vmlaq_lane_f32(v50, v54, *(float32x2_t *)a13.f32, 1);
          v51 = vmlaq_lane_f32(v51, v54, *(float32x2_t *)a14.f32, 1);
          v56 = v27 <= 2;
          v27 -= 2;
        }
        while (!v56);
        v36 = vaddq_f32(v36, v48);
        v40 = vaddq_f32(v40, v49);
        v41 = vaddq_f32(v41, v50);
        v42 = vaddq_f32(v42, v51);
      }
      v14 = vmulq_n_f32(v36, a7);
      v15 = vmulq_n_f32(v40, a7);
      *v39 = v14;
      v57 = (float32x4_t *)((char *)v39 + v16);
      *v57 = v15;
      v58 = (float32x4_t *)((char *)v57 + v16);
      *v58 = vmulq_n_f32(v41, a7);
      *(float32x4_t *)((char *)v58 + v16) = vmulq_n_f32(v42, a7);
    }
    v59 = a2 & 3;
    if (!i && v59 != 0)
    {
      v60 = (float32x4_t *)(a5 + 4 * v18);
      v61 = (float *)(a3 + (v20 - 1) * v17);
      if (v59 != 1)
      {
        if (v59 != 2)
        {
          v62 = *(float32x2_t *)v61;
          v64 = *v60;
          v63 = (float32x4_t *)((char *)v60 + v16);
          v66 = *v63;
          v65 = (float32x4_t *)((char *)v63 + v16);
          v61 = (float *)((char *)v61 - v17);
          a12 = vmlaq_n_f32(*v65, v64, v62.f32[0]);
          *v65 = vmulq_n_f32(vaddq_f32(vmulq_lane_f32(v66, v62, 1), a12), a7);
          v60 = (float32x4_t *)((char *)v65 - 2 * v16);
        }
        v68 = *v60;
        v67 = (float32x4_t *)((char *)v60 + v16);
        *v67 = vmulq_n_f32(vaddq_f32(vmulq_n_f32(v68, *v61), *v67), a7);
        v60 = (float32x4_t *)((char *)v67 - v16);
      }
      v14 = vmulq_n_f32(*v60, a7);
      *v60 = v14;
    }
    v18 += 4;
    v56 = v19 <= 4;
    v19 -= 4;
  }
  while (!v56);
  v56 = v19 <= -3;
  result = v19 + 3;
  if (!v56)
  {
LABEL_21:
    if (result > 1)
    {
      v69 = a2;
      for (j = __OFSUB__(a2, 3); v69 > 3; j = __OFSUB__(v69, 3))
      {
        v69 -= 4;
        v71 = (float32x2_t *)(a5 + v69 * v16 + 4 * v18);
        v72 = a3 + v69 * v17 + 4 * v69;
        v73 = (float *)(v72 + v17);
        v74 = (float32x2_t *)(v72 + 2 * v17);
        v75 = (float32x4_t *)(v72 + v17 + 2 * v17);
        v76 = v69;
        v77 = (float32x2_t *)(a3 + v69 * v17);
        v78 = *v73;
        v79 = &v73[-v69];
        v80 = *v74;
        v81 = (float *)v74 - v69;
        v82 = *v75;
        v83 = &v75->f32[-v69];
        v85 = *v71;
        v84 = (unint64_t *)((char *)v71 + v16);
        a12.i64[0] = *v84;
        v86 = (unint64_t *)((char *)v84 + v16);
        a13.i64[0] = *v86;
        v87 = (unint64_t *)((char *)v86 + v16);
        a14.i64[0] = *v87;
        v88 = (float32x2_t *)((char *)v87 + v16 - v69 * v16 + -4 * v16);
        v89 = vmla_n_f32(*(float32x2_t *)a12.f32, v85, v78);
        v90 = vadd_f32(vmla_n_f32(*(float32x2_t *)a13.f32, v85, v80.f32[0]), vmul_lane_f32(*(float32x2_t *)a12.f32, v80, 1));
        v91 = vadd_f32(vmla_laneq_f32(vmla_n_f32(*(float32x2_t *)a14.f32, v85, v82.f32[0]), *(float32x2_t *)a13.f32, v82, 2), vmul_lane_f32(*(float32x2_t *)a12.f32, *(float32x2_t *)v82.f32, 1));
        if ((v69 & 1) != 0)
        {
          v92 = *v88;
          v88 = (float32x2_t *)((char *)v88 + v16);
          v93 = v77->f32[0];
          v77 = (float32x2_t *)((char *)v77 + 4);
          v94 = *v79++;
          v95 = *v81++;
          v96 = *v83++;
          v85 = vmla_n_f32(v85, v92, v93);
          v89 = vmla_n_f32(v89, v92, v94);
          v90 = vmla_n_f32(v90, v92, v95);
          v91 = vmla_n_f32(v91, v92, v96);
          v76 = v69 - 1;
        }
        if (v76)
        {
          v97 = 0;
          v98 = 0;
          v99 = 0;
          v100 = 0;
          do
          {
            v102 = *v88;
            v101 = (float32x2_t *)((char *)v88 + v16);
            v103 = *v101;
            v88 = (float32x2_t *)((char *)v101 + v16);
            v104 = *v77++;
            a12.i64[0] = *(_QWORD *)v79;
            v79 += 2;
            a13.i64[0] = *(_QWORD *)v81;
            v81 += 2;
            a14.i64[0] = *(_QWORD *)v83;
            v83 += 2;
            v85 = vmla_n_f32(v85, v102, v104.f32[0]);
            v89 = vmla_n_f32(v89, v102, a12.f32[0]);
            v90 = vmla_n_f32(v90, v102, a13.f32[0]);
            v91 = vmla_n_f32(v91, v102, a14.f32[0]);
            v97 = vmla_lane_f32(v97, v103, v104, 1);
            v98 = vmla_lane_f32(v98, v103, *(float32x2_t *)a12.f32, 1);
            v99 = vmla_lane_f32(v99, v103, *(float32x2_t *)a13.f32, 1);
            v100 = vmla_lane_f32(v100, v103, *(float32x2_t *)a14.f32, 1);
            v56 = v76 <= 2;
            v76 -= 2;
          }
          while (!v56);
          v85 = vadd_f32(v85, v97);
          v89 = vadd_f32(v89, v98);
          v90 = vadd_f32(v90, v99);
          v91 = vadd_f32(v91, v100);
        }
        *(float32x2_t *)v14.f32 = vmul_n_f32(v85, a7);
        *(float32x2_t *)v15.f32 = vmul_n_f32(v89, a7);
        *v88 = *(float32x2_t *)v14.f32;
        v105 = (float32x2_t *)((char *)v88 + v16);
        *v105 = *(float32x2_t *)v15.f32;
        v106 = (float32x2_t *)((char *)v105 + v16);
        *v106 = vmul_n_f32(v90, a7);
        *(float32x2_t *)((char *)v106 + v16) = vmul_n_f32(v91, a7);
      }
      v107 = a2 & 3;
      if (!j && v107 != 0)
      {
        v108 = (float32x2_t *)(a5 + 4 * v18);
        v109 = (float *)(a3 + (v69 - 1) * v17);
        if (v107 != 1)
        {
          if (v107 != 2)
          {
            v110 = *(float32x2_t *)v109;
            v112 = *v108;
            v111 = (float32x2_t *)((char *)v108 + v16);
            v114 = *v111;
            v113 = (float32x2_t *)((char *)v111 + v16);
            *(float32x2_t *)a12.f32 = *v113;
            v109 = (float *)((char *)v109 - v17);
            *(float32x2_t *)v15.f32 = vmul_lane_f32(v114, v110, 1);
            *v113 = vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(v112, v110.f32[0]), *(float32x2_t *)v15.f32), *v113), a7);
            v108 = &v113[v16 / 0xFFFFFFFFFFFFFFFCLL];
          }
          v116 = *v108;
          v115 = (float32x2_t *)((char *)v108 + v16);
          *v115 = vmul_n_f32(vadd_f32(vmul_n_f32(v116, *v109), *v115), a7);
          v108 = (float32x2_t *)((char *)v115 - v16);
        }
        *(float32x2_t *)v14.f32 = vmul_n_f32(*v108, a7);
        *v108 = *(float32x2_t *)v14.f32;
      }
      v18 += 2;
      result -= 2;
    }
    if (result)
    {
      v117 = a2;
      for (k = __OFSUB__(a2, 3); v117 > 3; k = __OFSUB__(v117, 3))
      {
        v117 -= 4;
        v119 = (__int32 *)(a5 + v117 * v16 + 4 * v18);
        v120 = a3 + v117 * v17 + 4 * v117;
        v121 = (float *)(v120 + v17);
        v122 = (float32x2_t *)(v120 + 2 * v17);
        v123 = (float32x4_t *)(v120 + v17 + 2 * v17);
        v124 = v117;
        v125 = (float *)(a3 + v117 * v17);
        v126 = *v121;
        v127 = &v121[-v117];
        v128 = *v122;
        v129 = (float *)v122 - v117;
        v130 = *v123;
        v131 = &v123->f32[-v117];
        v14.i32[0] = *v119;
        v132 = (unsigned __int32 *)&v119[(unint64_t)v16 / 4];
        a12.i32[0] = *v132;
        v133 = &v132[(unint64_t)v16 / 4];
        a13.i32[0] = *v133;
        v134 = &v133[(unint64_t)v16 / 4];
        a14.i32[0] = *v134;
        v135 = (float *)((char *)&v134[(unint64_t)v16 / 4] - v117 * v16 + -4 * v16);
        *(int32x2_t *)v136.f32 = vtrn1_s32(*(int32x2_t *)v14.f32, *(int32x2_t *)a12.f32);
        *(int32x2_t *)a13.f32 = vtrn1_s32(*(int32x2_t *)a13.f32, *(int32x2_t *)a14.f32);
        v136.i64[1] = a13.i64[0];
        v130.i32[3] = 0;
        v14.i32[1] = 0;
        v138 = vmul_f32(v128, *(float32x2_t *)v136.f32);
        v137 = vmulq_f32(v130, v136);
        v15.f32[0] = (float)(v126 * v136.f32[0]) + a12.f32[0];
        v139 = (float32x2_t)vpaddq_f32(v137, v137).u64[0];
        v138.f32[0] = vaddv_f32(v138) + a13.f32[0];
        v139.f32[0] = vaddv_f32(v139) + a14.f32[0];
        if ((v117 & 1) != 0)
        {
          v140 = *v135;
          v135 = (float *)((char *)v135 + v16);
          v141 = *v125++;
          v142 = *v127++;
          v143 = *v129++;
          v144 = *v131++;
          v14.f32[0] = v14.f32[0] + (float)(v140 * v141);
          v15.f32[0] = v15.f32[0] + (float)(v140 * v142);
          v138.f32[0] = v138.f32[0] + (float)(v140 * v143);
          v139.f32[0] = v139.f32[0] + (float)(v140 * v144);
          v124 = v117 - 1;
        }
        if (v124)
        {
          do
          {
            v146.f32[0] = *v135;
            v145 = (__int32 *)&v135[(unint64_t)v16 / 4];
            v146.i32[1] = *v145;
            v135 = (float *)&v145[(unint64_t)v16 / 4];
            v147 = *(float32x2_t *)v125;
            v125 += 2;
            a12.i64[0] = *(_QWORD *)v127;
            v127 += 2;
            a13.i64[0] = *(_QWORD *)v129;
            v129 += 2;
            a14.i64[0] = *(_QWORD *)v131;
            v131 += 2;
            *(float32x2_t *)v14.f32 = vmla_f32(*(float32x2_t *)v14.f32, v146, v147);
            *(float32x2_t *)v15.f32 = vmla_f32(*(float32x2_t *)v15.f32, v146, *(float32x2_t *)a12.f32);
            v138 = vmla_f32(v138, v146, *(float32x2_t *)a13.f32);
            v139 = vmla_f32(v139, v146, *(float32x2_t *)a14.f32);
            v56 = v124 <= 2;
            v124 -= 2;
          }
          while (!v56);
        }
        *v135 = vaddv_f32(*(float32x2_t *)v14.f32) * a7;
        v148 = &v135[(unint64_t)v16 / 4];
        *v148 = vaddv_f32(*(float32x2_t *)v15.f32) * a7;
        v149 = &v148[(unint64_t)v16 / 4];
        *v149 = vaddv_f32(v138) * a7;
        v149[(unint64_t)v16 / 4] = vaddv_f32(v139) * a7;
      }
      v150 = a2 & 3;
      if (!k && v150 != 0)
      {
        v151 = (__int32 *)(a5 + 4 * v18);
        v152 = (float32x2_t *)(a3 + (v117 - 1) * v17);
        if (v150 != 1)
        {
          if (v150 != 2)
          {
            v153 = *v152;
            v155.i32[0] = *v151;
            v154 = &v151[(unint64_t)v16 / 4];
            v155.i32[1] = *v154;
            v156 = (float *)&v154[(unint64_t)v16 / 4];
            v152 = (float32x2_t *)((char *)v152 - v17);
            *v156 = (float)(vaddv_f32(vmul_f32(v155, v153)) + *v156) * a7;
            v151 = (__int32 *)&v156[v16 / 0xFFFFFFFFFFFFFFFELL];
          }
          v158 = *(float *)v151;
          v157 = (float *)&v151[(unint64_t)v16 / 4];
          *v157 = (float)((float)(v158 * v152->f32[0]) + *v157) * a7;
          v151 = (__int32 *)&v157[v16 / 0xFFFFFFFFFFFFFFFCLL];
        }
        *(float *)v151 = *(float *)v151 * a7;
      }
    }
  }
  return result;
}

uint64_t sub_223165B60(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7, double a8, double a9, double a10, float32x4_t a11, float32x4_t a12, float32x4_t a13, float32x4_t a14)
{
  float32x4_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  float32x4_t *v22;
  float *v23;
  uint64_t v24;
  float32x2_t *v25;
  float v26;
  float32x4_t *v27;
  float32x2_t v28;
  float32x4_t *v29;
  float32x4_t v30;
  float32x4_t *v31;
  float32x4_t v32;
  float32x4_t *v33;
  float32x4_t *v34;
  float32x4_t *v35;
  float32x4_t *v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t *v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t *v49;
  BOOL v50;
  float32x4_t *v51;
  float32x4_t *v52;
  float32x4_t *v53;
  uint64_t v54;
  float32x4_t *v55;
  float *v56;
  float *v57;
  float v58;
  float *v59;
  float v60;
  float v61;
  float32x4_t *v62;
  float32x4_t v63;
  float32x4_t *v64;
  float32x4_t v65;
  float32x4_t *v66;
  float *v67;
  float v68;
  float v69;
  float32x4_t *v70;
  float32x4_t v71;
  float32x4_t *v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  unint64_t *v76;
  float *v77;
  uint64_t v78;
  float32x2_t *v79;
  float v80;
  float32x4_t *v81;
  float32x2_t v82;
  float32x4_t *v83;
  float32x4_t v84;
  float32x4_t *v85;
  float32x4_t v86;
  unint64_t *v87;
  unint64_t *v88;
  unint64_t *v89;
  float32x2_t *v90;
  float32x2_t v91;
  float32x2_t v92;
  float32x2_t v93;
  float32x2_t v94;
  float32x2_t v95;
  float32x2_t v96;
  float32x2_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float32x2_t *v100;
  float32x2_t v101;
  float32x2_t v102;
  float32x4_t *v103;
  float32x2_t *v104;
  float32x2_t *v105;
  float32x2_t *v106;
  uint64_t v107;
  float32x2_t *v108;
  float *v109;
  float *v110;
  float v111;
  float *v112;
  float v113;
  float v114;
  float32x2_t *v115;
  float32x2_t v116;
  unint64_t *v117;
  float32x2_t v118;
  float32x2_t *v119;
  float *v120;
  float v121;
  float v122;
  unint64_t *v123;
  float32x2_t v124;
  float32x2_t *v125;
  uint64_t v126;
  BOOL v127;
  uint64_t v128;
  unsigned __int32 *v129;
  float *v130;
  uint64_t v131;
  float32x2_t *v132;
  float v133;
  float32x4_t *v134;
  float32x2_t v135;
  float32x4_t *v136;
  float32x4_t v137;
  float32x4_t *v138;
  float32x4_t v139;
  unsigned __int32 *v140;
  unsigned __int32 *v141;
  unsigned __int32 *v142;
  float *v143;
  float32x4_t v144;
  float v145;
  float32x4_t v146;
  float *v147;
  float v148;
  float v149;
  float32x4_t *v150;
  _DWORD *v151;
  _DWORD *v152;
  _DWORD *v153;
  uint64_t v154;
  float *v155;
  float *v156;
  float *v157;
  float v158;
  float *v159;
  float v160;
  float v161;
  float *v162;
  float v163;
  float *v164;
  float v165;
  float v166;
  float *v167;
  float *v168;
  float v169;
  float v170;
  float *v171;
  float v172;
  float v173;
  float *v174;

  v15 = 4 * a6;
  v16 = 4 * a4;
  v17 = 0;
  if (result <= 3)
    goto LABEL_22;
  v18 = result - 3;
  do
  {
    v19 = 0;
    v20 = __OFSUB__(a2, 3);
    v21 = a2 - 3;
    if (a2 > 3)
    {
      do
      {
        v22 = (float32x4_t *)(a5 + v19 * v15 + 4 * v17);
        v23 = (float *)(a3 + v19 * v16 + 4 * v19);
        v24 = a2 - v19 - 4;
        v26 = *v23;
        v25 = (float32x2_t *)&v23[(unint64_t)v16 / 4];
        v28 = *v25;
        v27 = (float32x4_t *)((char *)v25 + v16);
        v30 = *v27;
        v29 = (float32x4_t *)((char *)v27 + v16);
        v32 = *v29;
        v31 = (float32x4_t *)((char *)v29 + v16);
        a11 = *v22;
        v33 = (float32x4_t *)((char *)v22 + v15);
        a12 = *v33;
        v34 = (float32x4_t *)((char *)v33 + v15);
        a13 = *v34;
        v35 = (float32x4_t *)((char *)v34 + v15);
        a14 = *v35;
        v36 = (float32x4_t *)((char *)v35 + v15);
        v37 = vmulq_laneq_f32(a14, v32, 3);
        v38 = vaddq_f32(vmlaq_lane_f32(vmulq_lane_f32(a14, *(float32x2_t *)v32.f32, 1), a12, v28, 1), vmulq_lane_f32(a13, *(float32x2_t *)v30.f32, 1));
        v39 = vaddq_f32(vmulq_laneq_f32(a14, v32, 2), vmulq_laneq_f32(a13, v30, 2));
        v40 = vaddq_f32(vmlaq_n_f32(vmulq_n_f32(a14, v32.f32[0]), a12, v28.f32[0]), vmlaq_n_f32(vmulq_n_f32(a13, v30.f32[0]), a11, v26));
        if ((v24 & 1) != 0)
        {
          v41 = *v36;
          v36 = (float32x4_t *)((char *)v36 + v15);
          a11 = *v31;
          v31 = (float32x4_t *)((char *)v31 + v16);
          v40 = vmlaq_n_f32(v40, v41, a11.f32[0]);
          v38 = vmlaq_lane_f32(v38, v41, *(float32x2_t *)a11.f32, 1);
          v39 = vmlaq_laneq_f32(v39, v41, a11, 2);
          v37 = vmlaq_laneq_f32(v37, v41, a11, 3);
          v24 = a2 - v19 - 5;
        }
        if (v24)
        {
          v42 = 0uLL;
          v43 = 0uLL;
          v44 = 0uLL;
          v45 = 0uLL;
          do
          {
            v47 = *v36;
            v46 = (float32x4_t *)((char *)v36 + v15);
            v48 = *v46;
            v36 = (float32x4_t *)((char *)v46 + v15);
            a11 = *v31;
            v49 = (float32x4_t *)((char *)v31 + v16);
            a12 = *v49;
            v31 = (float32x4_t *)((char *)v49 + v16);
            v40 = vmlaq_n_f32(v40, v47, a11.f32[0]);
            v38 = vmlaq_lane_f32(v38, v47, *(float32x2_t *)a11.f32, 1);
            v39 = vmlaq_laneq_f32(v39, v47, a11, 2);
            v37 = vmlaq_laneq_f32(v37, v47, a11, 3);
            v42 = vmlaq_n_f32(v42, v48, a12.f32[0]);
            v43 = vmlaq_lane_f32(v43, v48, *(float32x2_t *)a12.f32, 1);
            v44 = vmlaq_laneq_f32(v44, v48, a12, 2);
            v45 = vmlaq_laneq_f32(v45, v48, a12, 3);
            v50 = v24 <= 2;
            v24 -= 2;
          }
          while (!v50);
          v40 = vaddq_f32(v40, v42);
          v38 = vaddq_f32(v38, v43);
          v39 = vaddq_f32(v39, v44);
          v37 = vaddq_f32(v37, v45);
        }
        v14 = vmulq_n_f32(v40, a7);
        v51 = (float32x4_t *)((char *)v36 - (a2 - v19) * v15);
        *v51 = v14;
        v52 = (float32x4_t *)((char *)v51 + v15);
        *v52 = vmulq_n_f32(v38, a7);
        v53 = (float32x4_t *)((char *)v52 + v15);
        *v53 = vmulq_n_f32(v39, a7);
        *(float32x4_t *)((char *)v53 + v15) = vmulq_n_f32(v37, a7);
        v19 += 4;
        v20 = __OFSUB__(v21, 4);
        v50 = v21 <= 4;
        v21 -= 4;
      }
      while (!v50);
    }
    v54 = a2 & 3;
    if (!v20 && v54 != 0)
    {
      v55 = (float32x4_t *)(a5 + v19 * v15 + 4 * v17);
      v56 = (float *)(a3 + v19 * v16 + 4 * v19);
      if (v54 != 1)
      {
        if (v54 != 2)
        {
          v58 = *v56;
          v57 = &v56[(unint64_t)v16 / 4];
          v60 = *v57;
          v59 = &v57[(unint64_t)v16 / 4];
          v61 = *v59;
          v56 = &v59[v16 / 0xFFFFFFFFFFFFFFFCLL + 1];
          v63 = *v55;
          v62 = (float32x4_t *)((char *)v55 + v15);
          v65 = *v62;
          v64 = (float32x4_t *)((char *)v62 + v15);
          a12 = *v64;
          v66 = (float32x4_t *)((char *)v64 - 2 * v15);
          *v66 = vmulq_n_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(v63, v58), vmulq_n_f32(v65, v60)), vmulq_n_f32(a12, v61)), a7);
          v55 = (float32x4_t *)((char *)v66 + v15);
        }
        v68 = *v56;
        v67 = &v56[(unint64_t)v16 / 4];
        v69 = *v67;
        v56 = v67 + 1;
        v71 = *v55;
        v70 = (float32x4_t *)((char *)v55 + v15);
        a11 = *v70;
        v72 = (float32x4_t *)((char *)v70 - v15);
        *v72 = vmulq_n_f32(vaddq_f32(vmulq_n_f32(v71, v68), vmulq_n_f32(a11, v69)), a7);
        v55 = (float32x4_t *)((char *)v72 + v15);
      }
      v14 = vmulq_n_f32(vmulq_n_f32(*v55, *v56), a7);
      *v55 = v14;
    }
    v17 += 4;
    v50 = v18 <= 4;
    v18 -= 4;
  }
  while (!v50);
  v50 = v18 <= -3;
  result = v18 + 3;
  if (!v50)
  {
LABEL_22:
    if (result > 1)
    {
      v73 = 0;
      v74 = __OFSUB__(a2, 3);
      v75 = a2 - 3;
      if (a2 > 3)
      {
        do
        {
          v76 = (unint64_t *)(a5 + v73 * v15 + 4 * v17);
          v77 = (float *)(a3 + v73 * v16 + 4 * v73);
          v78 = a2 - v73 - 4;
          v80 = *v77;
          v79 = (float32x2_t *)&v77[(unint64_t)v16 / 4];
          v82 = *v79;
          v81 = (float32x4_t *)((char *)v79 + v16);
          v84 = *v81;
          v83 = (float32x4_t *)((char *)v81 + v16);
          v86 = *v83;
          v85 = (float32x4_t *)((char *)v83 + v16);
          a11.i64[0] = *v76;
          v87 = (unint64_t *)((char *)v76 + v15);
          a12.i64[0] = *v87;
          v88 = (unint64_t *)((char *)v87 + v15);
          a13.i64[0] = *v88;
          v89 = (unint64_t *)((char *)v88 + v15);
          a14.i64[0] = *v89;
          v90 = (float32x2_t *)((char *)v89 + v15);
          v91 = vmul_laneq_f32(*(float32x2_t *)a14.f32, v86, 3);
          v92 = vadd_f32(vmla_lane_f32(vmul_lane_f32(*(float32x2_t *)a14.f32, *(float32x2_t *)v86.f32, 1), *(float32x2_t *)a12.f32, v82, 1), vmul_lane_f32(*(float32x2_t *)a13.f32, *(float32x2_t *)v84.f32, 1));
          v93 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)a14.f32, v86, 2), vmul_laneq_f32(*(float32x2_t *)a13.f32, v84, 2));
          v94 = vadd_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)a14.f32, v86.f32[0]), *(float32x2_t *)a12.f32, v82.f32[0]), vmla_n_f32(vmul_n_f32(*(float32x2_t *)a13.f32, v84.f32[0]), *(float32x2_t *)a11.f32, v80));
          if ((v78 & 1) != 0)
          {
            v95 = *v90;
            v90 = (float32x2_t *)((char *)v90 + v15);
            a11 = *v85;
            v85 = (float32x4_t *)((char *)v85 + v16);
            v94 = vmla_n_f32(v94, v95, a11.f32[0]);
            v92 = vmla_lane_f32(v92, v95, *(float32x2_t *)a11.f32, 1);
            v93 = vmla_laneq_f32(v93, v95, a11, 2);
            v91 = vmla_laneq_f32(v91, v95, a11, 3);
            v78 = a2 - v73 - 5;
          }
          if (v78)
          {
            v96 = 0;
            v97 = 0;
            v98 = 0;
            v99 = 0;
            do
            {
              v101 = *v90;
              v100 = (float32x2_t *)((char *)v90 + v15);
              v102 = *v100;
              v90 = (float32x2_t *)((char *)v100 + v15);
              a11 = *v85;
              v103 = (float32x4_t *)((char *)v85 + v16);
              a12 = *v103;
              v85 = (float32x4_t *)((char *)v103 + v16);
              v94 = vmla_n_f32(v94, v101, a11.f32[0]);
              v92 = vmla_lane_f32(v92, v101, *(float32x2_t *)a11.f32, 1);
              v93 = vmla_laneq_f32(v93, v101, a11, 2);
              v91 = vmla_laneq_f32(v91, v101, a11, 3);
              v96 = vmla_n_f32(v96, v102, a12.f32[0]);
              v97 = vmla_lane_f32(v97, v102, *(float32x2_t *)a12.f32, 1);
              v98 = vmla_laneq_f32(v98, v102, a12, 2);
              v99 = vmla_laneq_f32(v99, v102, a12, 3);
              v50 = v78 <= 2;
              v78 -= 2;
            }
            while (!v50);
            v94 = vadd_f32(v94, v96);
            v92 = vadd_f32(v92, v97);
            v93 = vadd_f32(v93, v98);
            v91 = vadd_f32(v91, v99);
          }
          *(float32x2_t *)v14.f32 = vmul_n_f32(v94, a7);
          v104 = (float32x2_t *)((char *)v90 - (a2 - v73) * v15);
          *v104 = *(float32x2_t *)v14.f32;
          v105 = (float32x2_t *)((char *)v104 + v15);
          *v105 = vmul_n_f32(v92, a7);
          v106 = (float32x2_t *)((char *)v105 + v15);
          *v106 = vmul_n_f32(v93, a7);
          *(float32x2_t *)((char *)v106 + v15) = vmul_n_f32(v91, a7);
          v73 += 4;
          v74 = __OFSUB__(v75, 4);
          v50 = v75 <= 4;
          v75 -= 4;
        }
        while (!v50);
      }
      v107 = a2 & 3;
      if (!v74 && v107 != 0)
      {
        v108 = (float32x2_t *)(a5 + v73 * v15 + 4 * v17);
        v109 = (float *)(a3 + v73 * v16 + 4 * v73);
        if (v107 != 1)
        {
          if (v107 != 2)
          {
            v111 = *v109;
            v110 = &v109[(unint64_t)v16 / 4];
            v113 = *v110;
            v112 = &v110[(unint64_t)v16 / 4];
            v114 = *v112;
            v109 = &v112[v16 / 0xFFFFFFFFFFFFFFFCLL + 1];
            v116 = *v108;
            v115 = (float32x2_t *)((char *)v108 + v15);
            v118 = *v115;
            v117 = (unint64_t *)((char *)v115 + v15);
            a12.i64[0] = *v117;
            v119 = (float32x2_t *)&v117[v15 / 0xFFFFFFFFFFFFFFFCLL];
            *v119 = vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(v116, v111), vmul_n_f32(v118, v113)), vmul_n_f32(*(float32x2_t *)a12.f32, v114)), a7);
            v108 = (float32x2_t *)((char *)v119 + v15);
          }
          v121 = *v109;
          v120 = &v109[(unint64_t)v16 / 4];
          v122 = *v120;
          v109 = v120 + 1;
          v124 = *v108;
          v123 = (unint64_t *)((char *)v108 + v15);
          a11.i64[0] = *v123;
          v125 = (float32x2_t *)((char *)v123 - v15);
          *v125 = vmul_n_f32(vadd_f32(vmul_n_f32(v124, v121), vmul_n_f32(*(float32x2_t *)a11.f32, v122)), a7);
          v108 = (float32x2_t *)((char *)v125 + v15);
        }
        *(float32x2_t *)v14.f32 = vmul_n_f32(vmul_n_f32(*v108, *v109), a7);
        *v108 = *(float32x2_t *)v14.f32;
      }
      v17 += 2;
      result -= 2;
    }
    if (result)
    {
      v126 = 0;
      v127 = __OFSUB__(a2, 3);
      v128 = a2 - 3;
      if (a2 > 3)
      {
        do
        {
          v129 = (unsigned __int32 *)(a5 + v126 * v15 + 4 * v17);
          v130 = (float *)(a3 + v126 * v16 + 4 * v126);
          v131 = a2 - v126 - 4;
          v133 = *v130;
          v132 = (float32x2_t *)&v130[(unint64_t)v16 / 4];
          v135 = *v132;
          v134 = (float32x4_t *)((char *)v132 + v16);
          v137 = *v134;
          v136 = (float32x4_t *)((char *)v134 + v16);
          v139 = *v136;
          v138 = (float32x4_t *)((char *)v136 + v16);
          a11.i32[0] = *v129;
          v140 = &v129[(unint64_t)v15 / 4];
          a12.i32[0] = *v140;
          v141 = &v140[(unint64_t)v15 / 4];
          a13.i32[0] = *v141;
          v142 = &v141[(unint64_t)v15 / 4];
          a14.i32[0] = *v142;
          v143 = (float *)&v142[(unint64_t)v15 / 4];
          *(int32x2_t *)a11.f32 = vtrn1_s32(*(int32x2_t *)a11.f32, *(int32x2_t *)a12.f32);
          *(int32x2_t *)a13.f32 = vtrn1_s32(*(int32x2_t *)a13.f32, *(int32x2_t *)a14.f32);
          a11.i64[1] = a13.i64[0];
          v137.i32[3] = 0;
          v14.f32[0] = v133 * a11.f32[0];
          *(float32x2_t *)v14.f32 = vadd_f32(*(float32x2_t *)v14.f32, vmul_lane_f32(v135, *(float32x2_t *)a11.f32, 1));
          v144 = vaddq_f32(v14, vaddq_f32(vmulq_laneq_f32(v137, a11, 2), vmulq_laneq_f32(v139, a11, 3)));
          if ((v131 & 1) != 0)
          {
            v145 = *v143;
            v143 = (float *)((char *)v143 + v15);
            a11 = *v138;
            v138 = (float32x4_t *)((char *)v138 + v16);
            v144 = vmlaq_n_f32(v144, a11, v145);
            v131 = a2 - v126 - 5;
          }
          if (v131)
          {
            v146 = 0uLL;
            do
            {
              v148 = *v143;
              v147 = &v143[(unint64_t)v15 / 4];
              v149 = *v147;
              v143 = &v147[(unint64_t)v15 / 4];
              a11 = *v138;
              v150 = (float32x4_t *)((char *)v138 + v16);
              a12 = *v150;
              v138 = (float32x4_t *)((char *)v150 + v16);
              v144 = vmlaq_n_f32(v144, a11, v148);
              v146 = vmlaq_n_f32(v146, a12, v149);
              v50 = v131 <= 2;
              v131 -= 2;
            }
            while (!v50);
            v144 = vaddq_f32(v144, v146);
          }
          v14 = vmulq_n_f32(v144, a7);
          v151 = (_DWORD *)((char *)v143 - (a2 - v126) * v15);
          *v151 = v14.i32[0];
          v152 = &v151[(unint64_t)v15 / 4];
          *v152 = v14.i32[1];
          v153 = &v152[(unint64_t)v15 / 4];
          *v153 = v14.i32[2];
          v153[(unint64_t)v15 / 4] = v14.i32[3];
          v126 += 4;
          v127 = __OFSUB__(v128, 4);
          v50 = v128 <= 4;
          v128 -= 4;
        }
        while (!v50);
      }
      v154 = a2 & 3;
      if (!v127 && v154 != 0)
      {
        v155 = (float *)(a5 + v126 * v15 + 4 * v17);
        v156 = (float *)(a3 + v126 * v16 + 4 * v126);
        if (v154 != 1)
        {
          if (v154 != 2)
          {
            v158 = *v156;
            v157 = &v156[(unint64_t)v16 / 4];
            v160 = *v157;
            v159 = &v157[(unint64_t)v16 / 4];
            v161 = *v159;
            v156 = &v159[v16 / 0xFFFFFFFFFFFFFFFCLL + 1];
            v163 = *v155;
            v162 = &v155[(unint64_t)v15 / 4];
            v165 = *v162;
            v164 = &v162[(unint64_t)v15 / 4];
            v166 = *v164;
            v167 = &v164[v15 / 0xFFFFFFFFFFFFFFFELL];
            *v167 = (float)((float)((float)(v158 * v163) + (float)(v160 * v165)) + (float)(v161 * v166)) * a7;
            v155 = &v167[(unint64_t)v15 / 4];
          }
          v169 = *v156;
          v168 = &v156[(unint64_t)v16 / 4];
          v170 = *v168;
          v156 = v168 + 1;
          v172 = *v155;
          v171 = &v155[(unint64_t)v15 / 4];
          v173 = *v171;
          v174 = &v171[v15 / 0xFFFFFFFFFFFFFFFCLL];
          *v174 = (float)((float)(v169 * v172) + (float)(v170 * v173)) * a7;
          v155 = &v174[(unint64_t)v15 / 4];
        }
        *v155 = (float)(*v155 * *v156) * a7;
      }
    }
  }
  return result;
}

uint64_t sub_2231660A0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7, double a8, double a9, double a10, float32x4_t a11, float32x4_t a12, float32x4_t a13, int32x2_t a14)
{
  float32x4_t v14;
  float32x4_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  float32x4_t *v23;
  uint64_t v24;
  float *v25;
  float32x2_t *v26;
  float v27;
  float32x4_t *v28;
  float32x2_t v29;
  float32x4_t *v30;
  float32x4_t v31;
  float32x4_t *v32;
  float32x4_t *v33;
  float32x4_t *v34;
  float32x4_t *v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t *v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t *v48;
  BOOL v49;
  float32x4_t *v50;
  float32x4_t *v51;
  float32x4_t *v52;
  uint64_t v53;
  float32x4_t *v54;
  float *v55;
  float *v56;
  float v57;
  float v58;
  float32x4_t *v59;
  float32x4_t v60;
  float32x4_t *v61;
  float32x4_t v62;
  float32x4_t *v63;
  float32x4_t *v64;
  float32x4_t v65;
  float32x4_t *v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  unint64_t *v70;
  uint64_t v71;
  float *v72;
  float32x2_t *v73;
  float v74;
  float32x4_t *v75;
  float32x2_t v76;
  float32x4_t *v77;
  float32x4_t v78;
  unint64_t *v79;
  unint64_t *v80;
  float32x2_t *v81;
  float32x2_t *v82;
  float32x2_t v83;
  float32x2_t v84;
  float32x2_t v85;
  float32x2_t v86;
  float32x2_t v87;
  float32x2_t v88;
  float32x2_t v89;
  float32x2_t v90;
  float32x2_t v91;
  float32x2_t *v92;
  float32x2_t v93;
  float32x2_t v94;
  float32x4_t *v95;
  float32x2_t *v96;
  float32x2_t *v97;
  float32x2_t *v98;
  uint64_t v99;
  float32x2_t *v100;
  float *v101;
  float *v102;
  float v103;
  float v104;
  float32x2_t *v105;
  float32x2_t v106;
  unint64_t *v107;
  float32x2_t v108;
  float32x2_t *v109;
  unint64_t *v110;
  float32x2_t v111;
  float32x2_t *v112;
  uint64_t v113;
  BOOL v114;
  uint64_t v115;
  unsigned __int32 *v116;
  uint64_t v117;
  float *v118;
  float32x2_t *v119;
  float v120;
  float32x4_t *v121;
  float32x2_t v122;
  float32x4_t *v123;
  float32x4_t v124;
  unsigned __int32 *v125;
  unsigned __int32 *v126;
  __int32 *v127;
  float *v128;
  float32x4_t v129;
  float v130;
  float32x4_t v131;
  float *v132;
  float v133;
  float v134;
  float32x4_t *v135;
  _DWORD *v136;
  _DWORD *v137;
  _DWORD *v138;
  uint64_t v139;
  float *v140;
  float *v141;
  float *v142;
  float v143;
  float v144;
  float *v145;
  float v146;
  float *v147;
  float v148;
  float v149;
  float *v150;
  float *v151;
  float v152;
  float v153;
  float *v154;

  v16 = 4 * a6;
  v17 = 4 * a4;
  v18 = 0;
  if (result <= 3)
    goto LABEL_22;
  v19 = result - 3;
  do
  {
    v20 = 0;
    v21 = __OFSUB__(a2, 3);
    v22 = a2 - 3;
    if (a2 > 3)
    {
      do
      {
        v23 = (float32x4_t *)(a5 + v20 * v16 + 4 * v18);
        v24 = a2 - v20 - 4;
        v25 = (float *)(a3 + v20 * v17 + 4 * v20 + v17);
        v27 = *v25;
        v26 = (float32x2_t *)&v25[(unint64_t)v17 / 4];
        v29 = *v26;
        v28 = (float32x4_t *)((char *)v26 + v17);
        v31 = *v28;
        v30 = (float32x4_t *)((char *)v28 + v17);
        a11 = *v23;
        v32 = (float32x4_t *)((char *)v23 + v16);
        a12 = *v32;
        v33 = (float32x4_t *)((char *)v32 + v16);
        a13 = *v33;
        v34 = (float32x4_t *)((char *)v33 + v16);
        v36 = *v34;
        v35 = (float32x4_t *)((char *)v34 + v16);
        v37 = vmlaq_laneq_f32(a13, v36, v31, 2);
        v38 = vaddq_f32(vmlaq_lane_f32(a12, v36, *(float32x2_t *)v31.f32, 1), vmulq_lane_f32(a13, v29, 1));
        v39 = vaddq_f32(vmlaq_n_f32(vmlaq_n_f32(a11, v36, v31.f32[0]), a12, v27), vmulq_n_f32(a13, v29.f32[0]));
        if ((v24 & 1) != 0)
        {
          v40 = *v35;
          v35 = (float32x4_t *)((char *)v35 + v16);
          a11 = *v30;
          v30 = (float32x4_t *)((char *)v30 + v17);
          v39 = vmlaq_n_f32(v39, v40, a11.f32[0]);
          v38 = vmlaq_lane_f32(v38, v40, *(float32x2_t *)a11.f32, 1);
          v37 = vmlaq_laneq_f32(v37, v40, a11, 2);
          v36 = vmlaq_laneq_f32(v36, v40, a11, 3);
          v24 = a2 - v20 - 5;
        }
        if (v24)
        {
          v41 = 0uLL;
          v42 = 0uLL;
          v43 = 0uLL;
          v44 = 0uLL;
          do
          {
            v46 = *v35;
            v45 = (float32x4_t *)((char *)v35 + v16);
            v47 = *v45;
            v35 = (float32x4_t *)((char *)v45 + v16);
            a11 = *v30;
            v48 = (float32x4_t *)((char *)v30 + v17);
            a12 = *v48;
            v30 = (float32x4_t *)((char *)v48 + v17);
            v39 = vmlaq_n_f32(v39, v46, a11.f32[0]);
            v38 = vmlaq_lane_f32(v38, v46, *(float32x2_t *)a11.f32, 1);
            v37 = vmlaq_laneq_f32(v37, v46, a11, 2);
            v36 = vmlaq_laneq_f32(v36, v46, a11, 3);
            v41 = vmlaq_n_f32(v41, v47, a12.f32[0]);
            v42 = vmlaq_lane_f32(v42, v47, *(float32x2_t *)a12.f32, 1);
            v43 = vmlaq_laneq_f32(v43, v47, a12, 2);
            v44 = vmlaq_laneq_f32(v44, v47, a12, 3);
            v49 = v24 <= 2;
            v24 -= 2;
          }
          while (!v49);
          v39 = vaddq_f32(v39, v41);
          v38 = vaddq_f32(v38, v42);
          v37 = vaddq_f32(v37, v43);
          v36 = vaddq_f32(v36, v44);
        }
        v14 = vmulq_n_f32(v39, a7);
        v15 = vmulq_n_f32(v38, a7);
        v50 = (float32x4_t *)((char *)v35 - (a2 - v20) * v16);
        *v50 = v14;
        v51 = (float32x4_t *)((char *)v50 + v16);
        *v51 = v15;
        v52 = (float32x4_t *)((char *)v51 + v16);
        *v52 = vmulq_n_f32(v37, a7);
        *(float32x4_t *)((char *)v52 + v16) = vmulq_n_f32(v36, a7);
        v20 += 4;
        v21 = __OFSUB__(v22, 4);
        v49 = v22 <= 4;
        v22 -= 4;
      }
      while (!v49);
    }
    v53 = a2 & 3;
    if (!v21 && v53 != 0)
    {
      v54 = (float32x4_t *)(a5 + v20 * v16 + 4 * v18);
      v55 = (float *)(a3 + v20 * v17 + 4 * v20 + v17);
      if (v53 != 1)
      {
        if (v53 != 2)
        {
          v57 = *v55;
          v56 = &v55[(unint64_t)v17 / 4];
          v58 = *v56;
          v55 = v56 + 1;
          v60 = *v54;
          v59 = (float32x4_t *)((char *)v54 + v16);
          v62 = *v59;
          v61 = (float32x4_t *)((char *)v59 + v16);
          a12 = *v61;
          v63 = (float32x4_t *)((char *)v61 - 2 * v16);
          *v63 = vmulq_n_f32(vaddq_f32(vmlaq_n_f32(v60, v62, v57), vmulq_n_f32(a12, v58)), a7);
          v54 = (float32x4_t *)((char *)v63 + v16);
        }
        v65 = *v54;
        v64 = (float32x4_t *)((char *)v54 + v16);
        a11 = *v64;
        v66 = (float32x4_t *)((char *)v64 - v16);
        *v66 = vmulq_n_f32(vmlaq_n_f32(v65, a11, *v55), a7);
        v54 = (float32x4_t *)((char *)v66 + v16);
      }
      v14 = vmulq_n_f32(*v54, a7);
      *v54 = v14;
    }
    v18 += 4;
    v49 = v19 <= 4;
    v19 -= 4;
  }
  while (!v49);
  v49 = v19 <= -3;
  result = v19 + 3;
  if (!v49)
  {
LABEL_22:
    if (result > 1)
    {
      v67 = 0;
      v68 = __OFSUB__(a2, 3);
      v69 = a2 - 3;
      if (a2 > 3)
      {
        do
        {
          v70 = (unint64_t *)(a5 + v67 * v16 + 4 * v18);
          v71 = a2 - v67 - 4;
          v72 = (float *)(a3 + v67 * v17 + 4 * v67 + v17);
          v74 = *v72;
          v73 = (float32x2_t *)&v72[(unint64_t)v17 / 4];
          v76 = *v73;
          v75 = (float32x4_t *)((char *)v73 + v17);
          v78 = *v75;
          v77 = (float32x4_t *)((char *)v75 + v17);
          a11.i64[0] = *v70;
          v79 = (unint64_t *)((char *)v70 + v16);
          a12.i64[0] = *v79;
          v80 = (unint64_t *)((char *)v79 + v16);
          a13.i64[0] = *v80;
          v81 = (float32x2_t *)((char *)v80 + v16);
          v83 = *v81;
          v82 = (float32x2_t *)((char *)v81 + v16);
          v84 = vmla_laneq_f32(*(float32x2_t *)a13.f32, v83, v78, 2);
          v85 = vadd_f32(vmla_lane_f32(*(float32x2_t *)a12.f32, v83, *(float32x2_t *)v78.f32, 1), vmul_lane_f32(*(float32x2_t *)a13.f32, v76, 1));
          v86 = vadd_f32(vmla_n_f32(vmla_n_f32(*(float32x2_t *)a11.f32, v83, v78.f32[0]), *(float32x2_t *)a12.f32, v74), vmul_n_f32(*(float32x2_t *)a13.f32, v76.f32[0]));
          if ((v71 & 1) != 0)
          {
            v87 = *v82;
            v82 = (float32x2_t *)((char *)v82 + v16);
            a11 = *v77;
            v77 = (float32x4_t *)((char *)v77 + v17);
            v86 = vmla_n_f32(v86, v87, a11.f32[0]);
            v85 = vmla_lane_f32(v85, v87, *(float32x2_t *)a11.f32, 1);
            v84 = vmla_laneq_f32(v84, v87, a11, 2);
            v83 = vmla_laneq_f32(v83, v87, a11, 3);
            v71 = a2 - v67 - 5;
          }
          if (v71)
          {
            v88 = 0;
            v89 = 0;
            v90 = 0;
            v91 = 0;
            do
            {
              v93 = *v82;
              v92 = (float32x2_t *)((char *)v82 + v16);
              v94 = *v92;
              v82 = (float32x2_t *)((char *)v92 + v16);
              a11 = *v77;
              v95 = (float32x4_t *)((char *)v77 + v17);
              a12 = *v95;
              v77 = (float32x4_t *)((char *)v95 + v17);
              v86 = vmla_n_f32(v86, v93, a11.f32[0]);
              v85 = vmla_lane_f32(v85, v93, *(float32x2_t *)a11.f32, 1);
              v84 = vmla_laneq_f32(v84, v93, a11, 2);
              v83 = vmla_laneq_f32(v83, v93, a11, 3);
              v88 = vmla_n_f32(v88, v94, a12.f32[0]);
              v89 = vmla_lane_f32(v89, v94, *(float32x2_t *)a12.f32, 1);
              v90 = vmla_laneq_f32(v90, v94, a12, 2);
              v91 = vmla_laneq_f32(v91, v94, a12, 3);
              v49 = v71 <= 2;
              v71 -= 2;
            }
            while (!v49);
            v86 = vadd_f32(v86, v88);
            v85 = vadd_f32(v85, v89);
            v84 = vadd_f32(v84, v90);
            v83 = vadd_f32(v83, v91);
          }
          *(float32x2_t *)v15.f32 = vmul_n_f32(v85, a7);
          v96 = (float32x2_t *)((char *)v82 - (a2 - v67) * v16);
          *v96 = vmul_n_f32(v86, a7);
          v97 = (float32x2_t *)((char *)v96 + v16);
          *v97 = *(float32x2_t *)v15.f32;
          v98 = (float32x2_t *)((char *)v97 + v16);
          *v98 = vmul_n_f32(v84, a7);
          *(float32x2_t *)((char *)v98 + v16) = vmul_n_f32(v83, a7);
          v67 += 4;
          v68 = __OFSUB__(v69, 4);
          v49 = v69 <= 4;
          v69 -= 4;
        }
        while (!v49);
      }
      v99 = a2 & 3;
      if (!v68 && v99 != 0)
      {
        v100 = (float32x2_t *)(a5 + v67 * v16 + 4 * v18);
        v101 = (float *)(a3 + v67 * v17 + 4 * v67 + v17);
        if (v99 != 1)
        {
          if (v99 != 2)
          {
            v103 = *v101;
            v102 = &v101[(unint64_t)v17 / 4];
            v104 = *v102;
            v101 = v102 + 1;
            v106 = *v100;
            v105 = (float32x2_t *)((char *)v100 + v16);
            v108 = *v105;
            v107 = (unint64_t *)((char *)v105 + v16);
            a12.i64[0] = *v107;
            v109 = (float32x2_t *)&v107[v16 / 0xFFFFFFFFFFFFFFFCLL];
            *v109 = vmul_n_f32(vadd_f32(vmla_n_f32(v106, v108, v103), vmul_n_f32(*(float32x2_t *)a12.f32, v104)), a7);
            v100 = (float32x2_t *)((char *)v109 + v16);
          }
          v111 = *v100;
          v110 = (unint64_t *)((char *)v100 + v16);
          a11.i64[0] = *v110;
          v112 = (float32x2_t *)((char *)v110 - v16);
          *v112 = vmul_n_f32(vmla_n_f32(v111, *(float32x2_t *)a11.f32, *v101), a7);
          v100 = (float32x2_t *)((char *)v112 + v16);
        }
        *v100 = vmul_n_f32(*v100, a7);
      }
      v18 += 2;
      result -= 2;
    }
    if (result)
    {
      v113 = 0;
      v114 = __OFSUB__(a2, 3);
      v115 = a2 - 3;
      if (a2 > 3)
      {
        do
        {
          v116 = (unsigned __int32 *)(a5 + v113 * v16 + 4 * v18);
          v117 = a2 - v113 - 4;
          v118 = (float *)(a3 + v113 * v17 + 4 * v113 + v17);
          v120 = *v118;
          v119 = (float32x2_t *)&v118[(unint64_t)v17 / 4];
          v122 = *v119;
          v121 = (float32x4_t *)((char *)v119 + v17);
          v124 = *v121;
          v123 = (float32x4_t *)((char *)v121 + v17);
          a11.i32[0] = *v116;
          v125 = &v116[(unint64_t)v16 / 4];
          a12.i32[0] = *v125;
          v126 = &v125[(unint64_t)v16 / 4];
          a13.i32[0] = *v126;
          v127 = (__int32 *)&v126[(unint64_t)v16 / 4];
          a14.i32[0] = *v127;
          v128 = (float *)&v127[(unint64_t)v16 / 4];
          *(int32x2_t *)a11.f32 = vtrn1_s32(*(int32x2_t *)a11.f32, *(int32x2_t *)a12.f32);
          *(int32x2_t *)a13.f32 = vtrn1_s32(*(int32x2_t *)a13.f32, a14);
          a11.i64[1] = a13.i64[0];
          v124.i32[3] = 0;
          v15.f32[0] = v120 * a12.f32[0];
          *(float32x2_t *)v14.f32 = vadd_f32(vmul_laneq_f32(v122, a11, 2), *(float32x2_t *)v15.f32);
          v129 = vaddq_f32(v14, vaddq_f32(vmulq_laneq_f32(v124, a11, 3), a11));
          if ((v117 & 1) != 0)
          {
            v130 = *v128;
            v128 = (float *)((char *)v128 + v16);
            a11 = *v123;
            v123 = (float32x4_t *)((char *)v123 + v17);
            v129 = vmlaq_n_f32(v129, a11, v130);
            v117 = a2 - v113 - 5;
          }
          if (v117)
          {
            v131 = 0uLL;
            do
            {
              v133 = *v128;
              v132 = &v128[(unint64_t)v16 / 4];
              v134 = *v132;
              v128 = &v132[(unint64_t)v16 / 4];
              a11 = *v123;
              v135 = (float32x4_t *)((char *)v123 + v17);
              a12 = *v135;
              v123 = (float32x4_t *)((char *)v135 + v17);
              v129 = vmlaq_n_f32(v129, a11, v133);
              v131 = vmlaq_n_f32(v131, a12, v134);
              v49 = v117 <= 2;
              v117 -= 2;
            }
            while (!v49);
            v129 = vaddq_f32(v129, v131);
          }
          v14 = vmulq_n_f32(v129, a7);
          v136 = (_DWORD *)((char *)v128 - (a2 - v113) * v16);
          *v136 = v14.i32[0];
          v137 = &v136[(unint64_t)v16 / 4];
          *v137 = v14.i32[1];
          v138 = &v137[(unint64_t)v16 / 4];
          *v138 = v14.i32[2];
          v138[(unint64_t)v16 / 4] = v14.i32[3];
          v113 += 4;
          v114 = __OFSUB__(v115, 4);
          v49 = v115 <= 4;
          v115 -= 4;
        }
        while (!v49);
      }
      v139 = a2 & 3;
      if (!v114 && v139 != 0)
      {
        v140 = (float *)(a5 + v113 * v16 + 4 * v18);
        v141 = (float *)(a3 + v113 * v17 + 4 * v113 + v17);
        if (v139 != 1)
        {
          if (v139 != 2)
          {
            v143 = *v141;
            v142 = &v141[(unint64_t)v17 / 4];
            v144 = *v142;
            v141 = v142 + 1;
            v146 = *v140;
            v145 = &v140[(unint64_t)v16 / 4];
            v148 = *v145;
            v147 = &v145[(unint64_t)v16 / 4];
            v149 = *v147;
            v150 = &v147[v16 / 0xFFFFFFFFFFFFFFFELL];
            *v150 = (float)((float)(v146 + (float)(v143 * v148)) + (float)(v144 * v149)) * a7;
            v140 = &v150[(unint64_t)v16 / 4];
          }
          v152 = *v140;
          v151 = &v140[(unint64_t)v16 / 4];
          v153 = *v151;
          v154 = &v151[v16 / 0xFFFFFFFFFFFFFFFCLL];
          *v154 = (float)(v152 + (float)(*v141 * v153)) * a7;
          v140 = &v154[(unint64_t)v16 / 4];
        }
        *v140 = *v140 * a7;
      }
    }
  }
  return result;
}

void sub_223166574(_DWORD *a1, CBLAS_ORDER a2, CBLAS_TRANSPOSE a3, CBLAS_TRANSPOSE a4, int a5, int a6, int a7, const float *a8, float a9, float a10, int __lda, float *__B, int __ldb, float *__C, int __ldc)
{
  if (!a1)
  {
LABEL_5:
    cblas_sgemm(a2, a3, a4, a5, a6, a7, a9, a8, __lda, __B, __ldb, a10, __C, __ldc);
    return;
  }
  if (*a1 == 1)
  {
    if (a1[1])
    {
      sub_223159844(a2, a3, a4, a5, a6, a7, (int)a8, __lda, (uint64_t)__B, __ldb, SHIDWORD(__B), (int)__C, SHIDWORD(__C), __ldc);
      return;
    }
    goto LABEL_5;
  }
  printf("*** ERROR *** CONTEXT ID is incorrect");
}

void sub_223166614(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,int __N,uint64_t a23,int a24,uint64_t a25,__int128 a26,__int128 a27,__int128 a28,__int128 a29,__int128 a30,__int128 a31,__int128 a32,__int128 a33,char a34)
{
  int v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  float v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, float);
  void (*v50)(uint64_t, uint64_t, uint64_t, uint64_t, char *);
  unint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  float *(*v64)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t);
  float *(*v65)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float);
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _OWORD *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  const float *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 *v101;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(uint64_t, uint64_t, float);
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void (*v112)(uint64_t, uint64_t, uint64_t, uint64_t, char *);
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t vars0;
  uint64_t vars8;
  uint64_t v118;
  uint64_t v119;
  float *(*v120)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float);
  BOOL v121;
  uint64_t v122;
  uint64_t v123;
  float *(*v124)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t __Na;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;

  v37 = MEMORY[0x24BDAC7A8]();
  v131 = v38;
  v114 = v39;
  v106 = v40;
  v42 = v41;
  v44 = v43;
  v45 = v37;
  v46 = v35;
  STACK[0x101F8] = *MEMORY[0x24BDAC8D0];
  if (v34 == 111)
    v47 = v36;
  else
    v47 = 1;
  v105 = v47;
  vars0 = v36;
  if (v34 == 111)
    v48 = 1;
  else
    v48 = v36;
  v113 = v48;
  v49 = (void (*)(uint64_t, uint64_t, float))sub_22315DBCC;
  if (v34 == 111)
    v49 = (void (*)(uint64_t, uint64_t, float))sub_22315DD08;
  v104 = v49;
  v50 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *))sub_22315E08C;
  if (v34 == 111)
    v50 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *))sub_22315DEF8;
  v112 = v50;
  if (v35 < 1)
  {
    v128 = &a34;
    v51 = &STACK[0x10180];
  }
  else
  {
    v128 = (char *)malloc_type_malloc((v35 << 9) + 65632, 0x100004052888210uLL);
    v51 = (unint64_t *)(v128 + 0x10000);
  }
  v122 = (uint64_t)(v51 + 8);
  if (v42 >= 1)
  {
    v52 = 0;
    v53 = 16 * v131;
    v108 = 4 * v131;
    v54 = 4 * v131 + 4;
    v111 = v46;
    v103 = v42;
    while (1)
    {
      v107 = v52 + 128;
      v55 = v52 + 128 <= v42 ? 128 : v42 - v52;
      v115 = v106 + 4 * v52 * v105;
      v104(v55, v46, v45);
      if (v46 >= 1)
        break;
LABEL_96:
      v52 = v107;
      v42 = v103;
      if (v107 >= v103)
        goto LABEL_97;
    }
    v56 = v55;
    v57 = 0;
    v58 = v44 != 0.0;
    if (v44 == 1.0 || v52 != 0)
      v58 = 0;
    v121 = v58;
    v60 = v55 & 3;
    if (v55 <= 0)
      v60 = -(-v55 & 3);
    v109 = 4 - v60;
    v110 = v60;
    v61 = v114;
    v120 = (float *(*)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float))sub_223159E50;
    v124 = (float *(*)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t))sub_2231587E0;
    __Na = v55;
    while (1)
    {
      v130 = v57;
      v62 = v57 + 128;
      if (v57 + 128 <= v46)
        v63 = 128;
      else
        v63 = v46 - v57;
      v123 = v114 + 4 * v57;
      v64 = v124;
      if ((v63 & 7) != 0)
        v64 = sub_22315E0A0;
      v124 = v64;
      v65 = v120;
      if ((v63 & 7) != 0)
        v65 = sub_22315D1A0;
      v120 = v65;
      v112(v63, v56, v115 + 4 * v57 * v113, vars0, v128);
      v66 = v130;
      v67 = v63;
      v127 = v63;
      v118 = v62;
      v119 = v61;
      vars8 = v63 + v130;
      if (v63 + v130 >= 4)
      {
        v68 = 0;
        v69 = 0;
        v132 = v63 + v130 - 3;
        v70 = v61;
        v56 = __Na;
        while (2)
        {
          v71 = v69 - v66;
          v72 = v69 & 4;
          if ((v69 & 4) != 0)
            v73 = v69 - v66 - 4;
          else
            v73 = v69 - v66;
          v74 = v73 & ~(v71 >> 63);
          if (v74 > v67)
            goto LABEL_63;
          v75 = v123 + 4 * v69 * v131;
          v76 = (_OWORD *)(v122 + 4 * v69 * v56);
          if (v71 < 0)
          {
            v78 = 0;
            if (v121)
              goto LABEL_54;
          }
          else
          {
            v125 = 16 * (v68 & 1);
            v126 = v122 + 4 * v69 * v56;
            v77 = (char *)&a26 + v125;
            a32 = 0u;
            a33 = 0u;
            a30 = 0u;
            a31 = 0u;
            a28 = 0u;
            a29 = 0u;
            a26 = 0u;
            a27 = 0u;
            if (v67 - v73 >= 8)
              v78 = 8;
            else
              v78 = v67 - v73;
            v124((float32x4_t *)&v128[4 * v73 * v56], (uint64_t)v76, (float32x4_t *)&a26, 8, v78, v56);
            v75 += 4 * v73;
            if (v121)
            {
              v79 = 0;
              v76 = (_OWORD *)v126;
              v80 = v70 + v125 + 4 * v73;
              v56 = __Na;
              v67 = v127;
              do
              {
                if (v72 < v78)
                {
                  v81 = 0;
                  do
                  {
                    *(float *)(v80 + 4 * v81) = *(float *)&v77[4 * v81] + (float)(*(float *)(v80 + 4 * v81) * v44);
                    ++v81;
                  }
                  while (v72 + v81 < v78);
                }
                ++v72;
                ++v79;
                v77 += 36;
                v80 += v54;
              }
              while (v79 != 4);
              v53 = 16 * v131;
              v66 = v130;
              if (v78 + v74 >= v127)
                goto LABEL_63;
LABEL_54:
              v120((float32x4_t *)&v128[4 * (v78 + v74) * v56], (uint64_t)v76, (float32x4_t *)(v75 + 4 * v78), v131, v67 - (v78 + v74), v56, v44);
LABEL_62:
              v56 = __Na;
              v66 = v130;
              v67 = v127;
LABEL_63:
              v69 += 4;
              ++v68;
              v70 += v53;
              if (v69 >= v132)
                goto LABEL_66;
              continue;
            }
            v82 = 0;
            v76 = (_OWORD *)v126;
            v83 = v70 + v125 + 4 * v73;
            v56 = __Na;
            v67 = v127;
            do
            {
              if (v72 < v78)
              {
                v84 = 0;
                do
                {
                  *(float *)(v83 + 4 * v84) = *(float *)(v83 + 4 * v84) + *(float *)&v77[4 * v84];
                  ++v84;
                }
                while (v72 + v84 < v78);
              }
              ++v72;
              ++v82;
              v77 += 36;
              v83 += v54;
            }
            while (v82 != 4);
            v53 = 16 * v131;
            v66 = v130;
            if (v78 + v74 >= v127)
              goto LABEL_63;
          }
          break;
        }
        v124((float32x4_t *)&v128[4 * (v78 + v74) * v56], (uint64_t)v76, (float32x4_t *)(v75 + 4 * v78), v131, v67 - (v78 + v74), v56);
        goto LABEL_62;
      }
      v69 = 0;
      v56 = __Na;
LABEL_66:
      v85 = vars8 <= 0 ? -(-vars8 & 3) : vars8 & 3;
      if (v85)
      {
        v86 = v69 - v66;
        v87 = (v69 - v66) & ~((v69 - v66) >> 63);
        if (v67 > v87)
          break;
      }
LABEL_95:
      v61 = v119 + 512;
      v57 = v118;
      v46 = v111;
      if (v118 >= v111)
        goto LABEL_96;
    }
    v88 = v123 + 4 * v69 * v131;
    v89 = (const float *)(v122 + 4 * v69 * v56);
    if (v86 < 0)
    {
      v91 = 0;
      v97 = 0;
      v98 = 0;
      if (v121)
      {
LABEL_86:
        sub_223159114((float32x4_t *)&v128[4 * v97 * v56 + 4 * v91], v89, v88, v131, v67 - v97, v85, __Na, v44);
LABEL_94:
        v56 = __Na;
        goto LABEL_95;
      }
    }
    else
    {
      a30 = 0u;
      a31 = 0u;
      a28 = 0u;
      a29 = 0u;
      a26 = 0u;
      a27 = 0u;
      if (v67 - v87 >= 8)
        v90 = 8;
      else
        v90 = v67 - v87;
      if (v110)
        v91 = (v87 & 4) * v109;
      else
        v91 = 0;
      v92 = v88 + 4 * v87;
      sub_223159244((float32x4_t *)&v128[4 * v86 * v56 + 4 * v91], (const float *)(v122 + 4 * v69 * v56), (uint64_t)&a26, 8, v90, v85, v56);
      if (v121)
      {
        v56 = __Na;
        if (v85 >= 1)
        {
          v93 = 0;
          v94 = v119 + v108 * v69 + 4 * v87;
          v95 = &a26;
          do
          {
            v96 = 0;
            do
            {
              *(float *)(v94 + 4 * v96) = *((float *)v95 + v96) + (float)(*(float *)(v94 + 4 * v96) * v44);
              ++v96;
            }
            while (v93 + v96 < v85);
            ++v93;
            v95 = (__int128 *)((char *)v95 + 36);
            v94 += v54;
          }
          while (v93 != v85);
        }
        v88 = v92 + 4 * v90;
        v97 = v90 + v87;
        v53 = 16 * v131;
        v67 = v127;
        goto LABEL_86;
      }
      v56 = __Na;
      if (v85 >= 1)
      {
        v99 = 0;
        v100 = v119 + v108 * v69 + 4 * v87;
        v101 = &a26;
        do
        {
          v102 = 0;
          do
          {
            *(float *)(v100 + 4 * v102) = *(float *)(v100 + 4 * v102) + *((float *)v101 + v102);
            ++v102;
          }
          while (v99 + v102 < v85);
          ++v99;
          v101 = (__int128 *)((char *)v101 + 36);
          v100 += v54;
        }
        while (v99 != v85);
      }
      v88 = v92 + 4 * v90;
      v98 = v90 + v87;
      v53 = 16 * v131;
      v67 = v127;
    }
    sub_223159244((float32x4_t *)&v128[4 * v98 * v56 + 4 * v91], v89, v88, v131, v67 - v98, v85, __Na);
    goto LABEL_94;
  }
LABEL_97:
  if (v46 >= 1)
    free(v128);
}

float64x2_t *CV3DPlaneDetectionDepthCameraFrameCreateFromAD(void *a1, CFTypeRef *a2, float64_t a3, __n128 a4, __n128 a5, __n128 a6, double a7, double a8, double a9, double a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 a17, __int128 a18, __int128 a19, __int128 a20,double a21)
{
  id v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  __n128 v25;
  float64_t v26;
  float64x2_t *v27;
  float64x2_t *v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x2_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float64x2_t v48;
  _BYTE __p[32];
  float32x4_t v51;
  float32x4_t v52;
  std::__shared_weak_count *v53;
  char *v54;
  __int128 v55;
  _OWORD v56[4];
  _OWORD v57[3];
  const void *v58;
  std::__shared_weak_count *v59;
  std::error_condition v60;

  v57[0] = a4;
  v57[1] = a5;
  v57[2] = a6;
  v56[0] = a17;
  v56[1] = a18;
  v56[2] = a19;
  v56[3] = a20;
  v20 = a1;
  v21 = v20;
  if (v20)
  {
    sub_22322435C(v20, (uint64_t)__p);
    sub_223CC4FF0((unint64_t *)__p, (uint64_t)&v54);
    v22 = v53;
    if (v53)
    {
      p_shared_owners = (unint64_t *)&v53->__shared_owners_;
      do
        v24 = __ldaxr(p_shared_owners);
      while (__stlxr(v24 - 1, p_shared_owners));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    sub_223167284(__p);
    v25 = sub_224506A10((uint64_t)v57, (uint64_t)__p);
    v25.n128_u32[0] = v51.i32[0];
    v45 = (float32x2_t)v25.n128_u64[0];
    v46 = *(float32x4_t *)__p;
    v47 = *(float32x4_t *)&__p[16];
    sub_22330CCA4((uint64_t)&v54, (void **)__p, 0.5, a21);
    v48 = *(float64x2_t *)__p;
    v26 = *(double *)&__p[16];
    sub_224506A30((uint64_t)v56, __p);
    v41 = v52;
    v42 = v51;
    v43 = *(float32x4_t *)__p;
    v44 = *(float32x4_t *)&__p[16];
    v27 = (float64x2_t *)operator new(0x138uLL, MEMORY[0x24BEDB6B8]);
    v28 = v27;
    if (v27)
    {
      v29 = (int8x16_t)vcvt_hight_f64_f32(v47);
      v30 = (int8x16_t)vcvt_hight_f64_f32(v46);
      v31 = (int8x16_t)vcvtq_f64_f32(*(float32x2_t *)v46.f32);
      v27->f64[1] = a3;
      v31.i64[1] = vextq_s8(v31, v31, 8uLL).u64[0];
      v27[1] = v48;
      v32 = (int8x16_t)vcvtq_f64_f32(*(float32x2_t *)v47.f32);
      v27[2].f64[0] = v26;
      *(_QWORD *)&v27[2].f64[1] = LODWORD(a7) | ((unint64_t)HIDWORD(a7) << 32);
      v30.i64[1] = vextq_s8(v30, v30, 8uLL).u64[0];
      v27[3] = (float64x2_t)v31;
      v27[4] = (float64x2_t)v30;
      v32.i64[1] = vextq_s8(v32, v32, 8uLL).u64[0];
      *(_QWORD *)&v27[7].f64[0] = *(_OWORD *)&vcvtq_f64_f32(v45);
      v29.i64[1] = vextq_s8(v29, v29, 8uLL).u64[0];
      v27[5] = (float64x2_t)v32;
      v27[6] = (float64x2_t)v29;
      LOBYTE(v27[7].f64[1]) = 0;
      LOBYTE(v27[10].f64[1]) = 0;
      v27[11] = vcvtq_f64_f32(*(float32x2_t *)v43.f32);
      v27[12] = vcvt_hight_f64_f32(v43);
      v27[13] = vcvtq_f64_f32(*(float32x2_t *)v44.f32);
      v27[14] = vcvt_hight_f64_f32(v44);
      v27[15] = vcvtq_f64_f32(*(float32x2_t *)v42.f32);
      v27[16] = vcvt_hight_f64_f32(v42);
      v27[17] = vcvtq_f64_f32(*(float32x2_t *)v41.f32);
      v27[18] = vcvt_hight_f64_f32(v41);
      LODWORD(v27[19].f64[0]) = 1;
      *(_QWORD *)&v27->f64[0] = &unk_24EC2BDE0;
    }
    else if (*(_QWORD *)&v48.f64[0])
    {
      operator delete(*(void **)&v48.f64[0]);
    }
    v36 = v54;
    if (v54)
    {
      v37 = (char *)v55;
      v38 = v54;
      if ((char *)v55 != v54)
      {
        do
        {
          if (*((_QWORD *)v37 - 13))
          {
            v39 = (char *)*((_QWORD *)v37 - 15);
            if (v37 - 96 != v39)
              operator delete(v39);
          }
          v37 -= 120;
        }
        while (v37 != v36);
        v38 = v54;
      }
      *(_QWORD *)&v55 = v36;
      operator delete(v38);
    }
  }
  else
  {
    *(_QWORD *)__p = operator new(0x20uLL);
    *(_OWORD *)&__p[8] = xmmword_2245B8D00;
    strcpy(*(char **)__p, "Input point cloud is NULL");
    v54 = (char *)operator new(0x78uLL);
    v55 = xmmword_2245B8D10;
    strcpy(v54, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionFrame.mm");
    if (!a2)
      goto LABEL_16;
    *(_QWORD *)&v60.__val_ = 22;
    v60.__cat_ = std::generic_category();
    sub_2245321DC(&v60, (uint64_t)__p, (CFErrorRef *)&v58);
    sub_224532194(&v58, a2);
    v33 = v59;
    if (v59)
    {
      v34 = (unint64_t *)&v59->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (SHIBYTE(v55) < 0)
LABEL_16:
      operator delete(v54);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    v28 = 0;
  }

  return v28;
}

void sub_2231670AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  void *v32;
  uint64_t v33;

  sub_223167354(v33 - 96);
  if (*(char *)(v33 - 209) < 0)
  {
    operator delete(*(void **)(v33 - 232));
    if ((a32 & 0x80000000) == 0)
    {
LABEL_3:

      _Unwind_Resume(a1);
    }
  }
  else if ((a32 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_223167110(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_223167120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  uint64_t v24;

  if (a23)
  {
    operator delete(a23);
    sub_223167208((void **)(v24 - 232));

    _Unwind_Resume(a1);
  }
  sub_223167208((void **)(v24 - 232));

  _Unwind_Resume(a1);
}

void sub_223167178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  void *v27;

  sub_2231671A0(&a27);

  _Unwind_Resume(a1);
}

void sub_223167190(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *sub_2231671A0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)a1[35];
  if (!v2)
    return sub_223167284(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return sub_223167284(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return sub_223167284(a1);
}

void **sub_223167208(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((_QWORD *)v3 - 13))
        {
          v5 = (char *)*((_QWORD *)v3 - 15);
          if (v3 - 96 != v5)
            operator delete(v5);
        }
        v3 -= 120;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

_QWORD *sub_223167284(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  v2 = (void *)a1[31];
  if (v2)
  {
    a1[32] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[28];
  if (v3)
  {
    a1[29] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[25];
  if (v4)
  {
    a1[26] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[22];
  if (v5)
  {
    a1[23] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[19];
  if (v6)
  {
    a1[20] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[16];
  if (v7)
  {
    a1[17] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[13];
  if (v8)
  {
    a1[14] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[10];
  if (v9)
  {
    a1[11] = v9;
    operator delete(v9);
  }
  v10 = (void *)a1[7];
  if (v10)
  {
    a1[8] = v10;
    operator delete(v10);
  }
  v11 = (void *)a1[4];
  if (v11)
  {
    a1[5] = v11;
    operator delete(v11);
  }
  v12 = (void *)a1[1];
  if (v12)
  {
    a1[2] = v12;
    operator delete(v12);
  }
  return a1;
}

uint64_t sub_223167354(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

double CV3DReconTriangulationDataViewInit(uint64_t a1)
{
  double result;

  if (!a1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconGeometryUtil.mm", 73, (uint64_t)"data", 4, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0x9E81EC69EB806BDBLL;
  *(_QWORD *)(a1 + 87) = 0;
  *(_BYTE *)(a1 + 95) = 1;
  return result;
}

uint64_t CV3DReconTriangulationLocatePoint2D(_OWORD *a1, int a2, CFTypeRef *a3, double a4)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[6];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v4 = a1[3];
  v8[2] = a1[2];
  v8[3] = v4;
  v5 = a1[5];
  v8[4] = a1[4];
  v8[5] = v5;
  v6 = a1[1];
  v8[0] = *a1;
  v8[1] = v6;
  return sub_2231674B0((uint64_t)v8, a2, 0, a3, a4);
}

uint64_t sub_2231674B0(uint64_t a1, int a2, unsigned __int8 a3, CFTypeRef *a4, double a5)
{
  unint64_t v5;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BOOL4 v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BOOL4 v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unint64_t *v48;
  uint64_t result;
  char v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  unsigned __int8 v55;
  double v56;
  _QWORD v57[2];
  char v58;
  _BYTE v59[7];
  _QWORD v60[3];
  void *__p;
  __int128 v62;
  void *v63;
  __int128 v64;
  const void *v65;
  std::__shared_weak_count *v66;
  std::error_condition v67;

  v11 = *(_QWORD *)(a1 + 8);
  if (v11 && !*(_QWORD *)a1)
  {
    v63 = operator new(0x28uLL);
    v64 = xmmword_2245B8D20;
    strcpy((char *)v63, "Triangulation has null vertices array");
    __p = operator new(0x70uLL);
    v62 = xmmword_2245B8D30;
    strcpy((char *)__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconGeometryUtil.mm");
    if (!a4)
    {
LABEL_36:
      operator delete(__p);
      goto LABEL_37;
    }
    *(_QWORD *)&v67.__val_ = 22;
    v67.__cat_ = std::generic_category();
    sub_2245321DC(&v67, (uint64_t)&v63, (CFErrorRef *)&v65);
    sub_224532194(&v65, a4);
    v19 = v66;
    if (v66)
    {
      p_shared_owners = (unint64_t *)&v66->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
LABEL_33:
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  else
  {
    if (!*(_QWORD *)(a1 + 32) || *(_QWORD *)(a1 + 24))
    {
      v12 = *(_QWORD *)(a1 + 64) != 0x9E81EC69EB806BDBLL || *(_BYTE *)(a1 + 95) == 0;
      if (v12 || (v13 = *(_QWORD *)(a1 + 56)) == 0)
      {
        v13 = 1;
        *(_QWORD *)(a1 + 56) = 1;
      }
      v14 = *(_DWORD *)(a1 + 16);
      v15 = *(_QWORD *)a1;
      v16 = v14;
      v17 = v11;
      v18 = *(_QWORD *)a1;
      if (v14 * (_DWORD)v11 == -1)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_45;
        }
        v13 = *(_QWORD *)(a1 + 56);
        v18 = *(_QWORD *)a1;
        v17 = *(_QWORD *)(a1 + 8);
        v16 = *(_DWORD *)(a1 + 16);
        v55 = a3;
        if (v16 * v17 == -1)
        {
          v22 = *(_QWORD *)a1;
          v23 = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C);
          v18 = v22;
          if (v23)
            goto LABEL_45;
        }
      }
      else
      {
        v55 = a3;
      }
      v24 = *(unsigned int *)(a1 + 40);
      v25 = *(_QWORD *)(a1 + 24);
      v26 = *(_QWORD *)(a1 + 32);
      v54 = v15;
      if ((_DWORD)v24 * (_DWORD)v26 != -1)
        goto LABEL_23;
      v52 = *(_QWORD *)(a1 + 32);
      v27 = a2;
      v28 = v17;
      v29 = v14;
      v30 = v16;
      v31 = v13;
      v32 = v18;
      v33 = *(unsigned int *)(a1 + 40);
      v34 = *(_QWORD *)(a1 + 24);
      v35 = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C);
      v25 = v34;
      v24 = v33;
      v18 = v32;
      v13 = v31;
      v16 = v30;
      v14 = v29;
      v17 = v28;
      a2 = v27;
      v26 = v52;
      v15 = v54;
      if (!v35)
      {
LABEL_23:
        if (a2 == 255)
        {
          v47 = 0;
          v46 = 0;
          v45 = 0;
          goto LABEL_42;
        }
        v36 = a2;
        v37 = *(_QWORD *)(a1 + 48);
        if (!v37)
        {
          v47 = 0;
          v46 = 0;
          v45 = 0;
          goto LABEL_41;
        }
        v38 = *(_QWORD *)(a1 + 32);
        if ((_DWORD)v38 != -1)
          goto LABEL_27;
        v51 = v14;
        v53 = v17;
        v39 = v16;
        v40 = v13;
        v41 = v18;
        v42 = v24;
        v43 = v25;
        v44 = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C);
        v25 = v43;
        v24 = v42;
        v18 = v41;
        v13 = v40;
        v16 = v39;
        v14 = v51;
        v17 = v53;
        if (!v44)
        {
LABEL_27:
          v5 = v38 | ((unint64_t)((_DWORD)v38 != 0) << 32);
          v45 = v37 & 0xFFFFFFFFFFFFFF00;
          v46 = v37;
          v47 = 1;
LABEL_41:
          LOBYTE(a2) = v36;
          v15 = v54;
LABEL_42:
          v60[0] = v25;
          v60[1] = (v26 << 32) | 3;
          v60[2] = (v24 << 32) | 1;
          v57[0] = v45 | v46;
          v57[1] = v5;
          v58 = v47;
          *(_DWORD *)v59 = (_DWORD)v63;
          *(_DWORD *)&v59[3] = *(_DWORD *)((char *)&v63 + 3);
          v56 = a5;
          result = sub_223EBE1B8(v15, v11 | ((unint64_t)v14 << 32), v18 + 4 * v13, v17 | ((unint64_t)v16 << 32), (uint64_t)v60, (uint64_t)v57, a2, (float *)&v56, v55);
          if (!v50)
            return -1;
          return result;
        }
      }
LABEL_45:
      abort();
    }
    v63 = operator new(0x28uLL);
    v64 = xmmword_2245B8D40;
    strcpy((char *)v63, "Triangulation has null faces array");
    __p = operator new(0x70uLL);
    v62 = xmmword_2245B8D30;
    strcpy((char *)__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconGeometryUtil.mm");
    if (!a4)
      goto LABEL_36;
    *(_QWORD *)&v67.__val_ = 22;
    v67.__cat_ = std::generic_category();
    sub_2245321DC(&v67, (uint64_t)&v63, (CFErrorRef *)&v65);
    sub_224532194(&v65, a4);
    v19 = v66;
    if (v66)
    {
      v48 = (unint64_t *)&v66->__shared_owners_;
      do
        v21 = __ldaxr(v48);
      while (__stlxr(v21 - 1, v48));
      goto LABEL_33;
    }
  }
  if (SHIBYTE(v62) < 0)
    goto LABEL_36;
LABEL_37:
  if (SHIBYTE(v64) < 0)
    operator delete(v63);
  return -1;
}

void sub_2231679D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  sub_223167354(v33 - 136);
  if (a27 < 0)
  {
    operator delete(__p);
    if ((a33 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a33 & 0x80000000) == 0)
  {
LABEL_3:
    _Unwind_Resume(a1);
  }
  operator delete(a28);
  _Unwind_Resume(a1);
}

void sub_223167A28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
    JUMPOUT(0x223167A18);
  JUMPOUT(0x223167A08);
}

void sub_223167A38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
    JUMPOUT(0x223167A18);
  JUMPOUT(0x223167A08);
}

uint64_t CV3DReconTriangulationLocatePoint2DWithReverseWinding(_OWORD *a1, int a2, CFTypeRef *a3, double a4)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[6];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v4 = a1[3];
  v8[2] = a1[2];
  v8[3] = v4;
  v5 = a1[5];
  v8[4] = a1[4];
  v8[5] = v5;
  v6 = a1[1];
  v8[0] = *a1;
  v8[1] = v6;
  return sub_2231674B0((uint64_t)v8, a2, 1u, a3, a4);
}

void *CV3DReconJasperPointCloudCreateFromADPointCloud(void *a1, CFTypeRef *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *p_shared_owners;
  char *__p;
  void *v18;
  __int128 v19;
  const void *v20;
  std::__shared_weak_count *v21;
  std::error_condition v22;

  v3 = a1;
  v9 = v3;
  if (v3)
  {
    if (objc_msgSend_length(v3, v4, v5, v6, v7, v8))
    {
      v10 = operator new(0x28uLL, MEMORY[0x24BEDB6B8]);
      v11 = v10;
      if (v10)
        sub_223174C94((uint64_t)v10, v9);

      return v11;
    }
    v18 = operator new(0x20uLL);
    v19 = xmmword_2245B8D50;
    strcpy((char *)v18, "ADJasperPointCloud is empty");
    __p = (char *)operator new(0x78uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconJasperPointCloud.mm");
    if (a2)
    {
      *(_QWORD *)&v22.__val_ = 22;
      v22.__cat_ = std::generic_category();
      sub_2245321DC(&v22, (uint64_t)&v18, (CFErrorRef *)&v20);
      sub_224532194(&v20, a2);
      v13 = v21;
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        goto LABEL_15;
      }
    }
  }
  else
  {
    v18 = operator new(0x20uLL);
    v19 = xmmword_2245B8D70;
    strcpy((char *)v18, "ADJasperPointCloud is NULL");
    __p = (char *)operator new(0x78uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconJasperPointCloud.mm");
    if (a2)
    {
      *(_QWORD *)&v22.__val_ = 22;
      v22.__cat_ = std::generic_category();
      sub_2245321DC(&v22, (uint64_t)&v18, (CFErrorRef *)&v20);
      sub_224532194(&v20, a2);
      v13 = v21;
      if (v21)
      {
        v14 = (unint64_t *)&v21->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
LABEL_15:
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
  }
  operator delete(__p);
  if (SHIBYTE(v19) < 0)
    operator delete(v18);

  return 0;
}

void sub_223167D24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  void *v21;

  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if (a20 < 0)
    {
LABEL_5:
      operator delete(a15);

      _Unwind_Resume(a1);
    }
  }
  else if (a20 < 0)
  {
    goto LABEL_5;
  }

  _Unwind_Resume(a1);
}

void sub_223167DB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_223167DC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t CV3DReconMeshRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 120);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DReconMeshRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 120);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CV3DReconMeshGetGeometryVersion(uint64_t a1, CFTypeRef *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *__p;
  void *v8[2];
  char v9;
  const void *v10;
  std::__shared_weak_count *v11;
  std::error_condition v12;

  if (a1)
    return sub_223177258(a1, a2);
  v9 = 12;
  strcpy((char *)v8, "Mesh is NULL");
  __p = (char *)operator new(0x68uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMesh.mm");
  if (a2)
  {
    *(_QWORD *)&v12.__val_ = 22;
    v12.__cat_ = std::generic_category();
    sub_2245321DC(&v12, (uint64_t)v8, (CFErrorRef *)&v10);
    sub_224532194(&v10, a2);
    v4 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  operator delete(__p);
  if (v9 < 0)
    operator delete(v8[0]);
  return 0;
}

void sub_223167F6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

unint64_t CV3DReconMeshGetVerticesCount(uint64_t a1, CFTypeRef *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *__p;
  void *v8[2];
  char v9;
  const void *v10;
  std::__shared_weak_count *v11;
  std::error_condition v12;

  if (a1)
    return sub_2231774E0(a1, a2);
  v9 = 12;
  strcpy((char *)v8, "Mesh is NULL");
  __p = (char *)operator new(0x68uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMesh.mm");
  if (a2)
  {
    *(_QWORD *)&v12.__val_ = 22;
    v12.__cat_ = std::generic_category();
    sub_2245321DC(&v12, (uint64_t)v8, (CFErrorRef *)&v10);
    sub_224532194(&v10, a2);
    v4 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  operator delete(__p);
  if (v9 < 0)
    operator delete(v8[0]);
  return -1;
}

void sub_22316811C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconMeshGetTexCoordsCount(uint64_t a1, CFTypeRef *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *__p;
  void *v8[2];
  char v9;
  const void *v10;
  std::__shared_weak_count *v11;
  std::error_condition v12;

  if (a1)
    return sub_223177850(a1, a2);
  v9 = 12;
  strcpy((char *)v8, "Mesh is NULL");
  __p = (char *)operator new(0x68uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMesh.mm");
  if (a2)
  {
    *(_QWORD *)&v12.__val_ = 22;
    v12.__cat_ = std::generic_category();
    sub_2245321DC(&v12, (uint64_t)v8, (CFErrorRef *)&v10);
    sub_224532194(&v10, a2);
    v4 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  operator delete(__p);
  if (v9 < 0)
    operator delete(v8[0]);
  return -1;
}

void sub_2231682CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

unint64_t CV3DReconMeshGetFacesCount(uint64_t a1, CFTypeRef *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *__p;
  void *v8[2];
  char v9;
  const void *v10;
  std::__shared_weak_count *v11;
  std::error_condition v12;

  if (a1)
    return sub_223177A04(a1, a2);
  v9 = 12;
  strcpy((char *)v8, "Mesh is NULL");
  __p = (char *)operator new(0x68uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMesh.mm");
  if (a2)
  {
    *(_QWORD *)&v12.__val_ = 22;
    v12.__cat_ = std::generic_category();
    sub_2245321DC(&v12, (uint64_t)v8, (CFErrorRef *)&v10);
    sub_224532194(&v10, a2);
    v4 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  operator delete(__p);
  if (v9 < 0)
    operator delete(v8[0]);
  return -1;
}

void sub_22316847C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

unint64_t CV3DReconMeshGetTexFacesCount(uint64_t a1, CFTypeRef *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *__p;
  void *v8[2];
  char v9;
  const void *v10;
  std::__shared_weak_count *v11;
  std::error_condition v12;

  if (a1)
    return sub_223177BC4(a1, a2);
  v9 = 12;
  strcpy((char *)v8, "Mesh is NULL");
  __p = (char *)operator new(0x68uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMesh.mm");
  if (a2)
  {
    *(_QWORD *)&v12.__val_ = 22;
    v12.__cat_ = std::generic_category();
    sub_2245321DC(&v12, (uint64_t)v8, (CFErrorRef *)&v10);
    sub_224532194(&v10, a2);
    v4 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  operator delete(__p);
  if (v9 < 0)
    operator delete(v8[0]);
  return -1;
}

void sub_22316862C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconMeshGetVerticesRawPtr(uint64_t a1, CFTypeRef *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *__p;
  void *v8[2];
  char v9;
  const void *v10;
  std::__shared_weak_count *v11;
  std::error_condition v12;

  if (a1)
    return sub_223177D84(a1, a2);
  v9 = 12;
  strcpy((char *)v8, "Mesh is NULL");
  __p = (char *)operator new(0x68uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMesh.mm");
  if (a2)
  {
    *(_QWORD *)&v12.__val_ = 22;
    v12.__cat_ = std::generic_category();
    sub_2245321DC(&v12, (uint64_t)v8, (CFErrorRef *)&v10);
    sub_224532194(&v10, a2);
    v4 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  operator delete(__p);
  if (v9 < 0)
    operator delete(v8[0]);
  return 0;
}

void sub_2231687DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

id CV3DReconMeshGetVerticesAsMTLBufferForDevice(uint64_t a1, void *a2, CFTypeRef *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *__p;
  void *v15[2];
  char v16;
  const void *v17;
  std::__shared_weak_count *v18;
  std::error_condition v19;

  v8 = a2;
  if (a1)
  {
    v9 = (void *)sub_223177F38(a1, v8, a3, v5, v6, v7);
  }
  else
  {
    v16 = 12;
    strcpy((char *)v15, "Mesh is NULL");
    __p = (char *)operator new(0x68uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMesh.mm");
    if (a3)
    {
      *(_QWORD *)&v19.__val_ = 22;
      v19.__cat_ = std::generic_category();
      sub_2245321DC(&v19, (uint64_t)v15, (CFErrorRef *)&v17);
      sub_224532194(&v17, a3);
      v10 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
    operator delete(__p);
    if (v16 < 0)
      operator delete(v15[0]);
    v9 = 0;
  }

  return v9;
}

void sub_223168990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  void *v21;

  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:

      _Unwind_Resume(a1);
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);

  _Unwind_Resume(a1);
}

void sub_2231689F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t CV3DReconMeshGetFacesRawPtr(uint64_t a1, CFTypeRef *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *__p;
  void *v8[2];
  char v9;
  const void *v10;
  std::__shared_weak_count *v11;
  std::error_condition v12;

  if (a1)
    return sub_2231783D4(a1, a2);
  v9 = 12;
  strcpy((char *)v8, "Mesh is NULL");
  __p = (char *)operator new(0x68uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMesh.mm");
  if (a2)
  {
    *(_QWORD *)&v12.__val_ = 22;
    v12.__cat_ = std::generic_category();
    sub_2245321DC(&v12, (uint64_t)v8, (CFErrorRef *)&v10);
    sub_224532194(&v10, a2);
    v4 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  operator delete(__p);
  if (v9 < 0)
    operator delete(v8[0]);
  return 0;
}

void sub_223168B58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconMeshGetTexFacesRawPtr(uint64_t a1, CFTypeRef *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *__p;
  void *v8[2];
  char v9;
  const void *v10;
  std::__shared_weak_count *v11;
  std::error_condition v12;

  if (a1)
    return sub_223178588(a1, a2);
  v9 = 12;
  strcpy((char *)v8, "Mesh is NULL");
  __p = (char *)operator new(0x68uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMesh.mm");
  if (a2)
  {
    *(_QWORD *)&v12.__val_ = 22;
    v12.__cat_ = std::generic_category();
    sub_2245321DC(&v12, (uint64_t)v8, (CFErrorRef *)&v10);
    sub_224532194(&v10, a2);
    v4 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  operator delete(__p);
  if (v9 < 0)
    operator delete(v8[0]);
  return 0;
}

void sub_223168D08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

id CV3DReconMeshGetFacesAsMTLBufferForDevice(uint64_t a1, void *a2, CFTypeRef *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *__p;
  void *v15[2];
  char v16;
  const void *v17;
  std::__shared_weak_count *v18;
  std::error_condition v19;

  v8 = a2;
  if (a1)
  {
    v9 = (void *)sub_22317873C(a1, v8, a3, v5, v6, v7);
  }
  else
  {
    v16 = 12;
    strcpy((char *)v15, "Mesh is NULL");
    __p = (char *)operator new(0x68uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMesh.mm");
    if (a3)
    {
      *(_QWORD *)&v19.__val_ = 22;
      v19.__cat_ = std::generic_category();
      sub_2245321DC(&v19, (uint64_t)v15, (CFErrorRef *)&v17);
      sub_224532194(&v17, a3);
      v10 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
    operator delete(__p);
    if (v16 < 0)
      operator delete(v15[0]);
    v9 = 0;
  }

  return v9;
}

void sub_223168EBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  void *v21;

  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:

      _Unwind_Resume(a1);
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);

  _Unwind_Resume(a1);
}

void sub_223168F20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t CV3DReconMeshGetVertexNormalsRawPtr(uint64_t a1, CFTypeRef *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *__p;
  void *v8[2];
  char v9;
  const void *v10;
  std::__shared_weak_count *v11;
  std::error_condition v12;

  if (a1)
    return sub_223178CB8(a1, a2);
  v9 = 12;
  strcpy((char *)v8, "Mesh is NULL");
  __p = (char *)operator new(0x68uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMesh.mm");
  if (a2)
  {
    *(_QWORD *)&v12.__val_ = 22;
    v12.__cat_ = std::generic_category();
    sub_2245321DC(&v12, (uint64_t)v8, (CFErrorRef *)&v10);
    sub_224532194(&v10, a2);
    v4 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  operator delete(__p);
  if (v9 < 0)
    operator delete(v8[0]);
  return 0;
}

void sub_223169084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconMeshGetTexCoordsRawPtr(uint64_t a1, CFTypeRef *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *__p;
  void *v8[2];
  char v9;
  const void *v10;
  std::__shared_weak_count *v11;
  std::error_condition v12;

  if (a1)
    return sub_223178E6C(a1, a2);
  v9 = 12;
  strcpy((char *)v8, "Mesh is NULL");
  __p = (char *)operator new(0x68uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMesh.mm");
  if (a2)
  {
    *(_QWORD *)&v12.__val_ = 22;
    v12.__cat_ = std::generic_category();
    sub_2245321DC(&v12, (uint64_t)v8, (CFErrorRef *)&v10);
    sub_224532194(&v10, a2);
    v4 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  operator delete(__p);
  if (v9 < 0)
    operator delete(v8[0]);
  return 0;
}

void sub_223169234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

id CV3DReconMeshGetVertexNormalsAsMTLBufferForDevice(uint64_t a1, void *a2, CFTypeRef *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *__p;
  void *v15[2];
  char v16;
  const void *v17;
  std::__shared_weak_count *v18;
  std::error_condition v19;

  v8 = a2;
  if (a1)
  {
    v9 = (void *)sub_223179020(a1, v8, a3, v5, v6, v7);
  }
  else
  {
    v16 = 12;
    strcpy((char *)v15, "Mesh is NULL");
    __p = (char *)operator new(0x68uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMesh.mm");
    if (a3)
    {
      *(_QWORD *)&v19.__val_ = 22;
      v19.__cat_ = std::generic_category();
      sub_2245321DC(&v19, (uint64_t)v15, (CFErrorRef *)&v17);
      sub_224532194(&v17, a3);
      v10 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
    operator delete(__p);
    if (v16 < 0)
      operator delete(v15[0]);
    v9 = 0;
  }

  return v9;
}

void sub_2231693E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  void *v21;

  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:

      _Unwind_Resume(a1);
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);

  _Unwind_Resume(a1);
}

void sub_22316944C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t CV3DReconMeshGetFaceSemanticLabelsRawPtr(uint64_t a1, CFTypeRef *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *__p;
  void *v8[2];
  char v9;
  const void *v10;
  std::__shared_weak_count *v11;
  std::error_condition v12;

  if (a1)
    return sub_2231792B8(a1, a2);
  v9 = 12;
  strcpy((char *)v8, "Mesh is NULL");
  __p = (char *)operator new(0x68uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMesh.mm");
  if (a2)
  {
    *(_QWORD *)&v12.__val_ = 22;
    v12.__cat_ = std::generic_category();
    sub_2245321DC(&v12, (uint64_t)v8, (CFErrorRef *)&v10);
    sub_224532194(&v10, a2);
    v4 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  operator delete(__p);
  if (v9 < 0)
    operator delete(v8[0]);
  return 0;
}

void sub_2231695B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

__n128 CV3DReconMeshGetLocalToWorldTransform(uint64_t a1, CFTypeRef *a2)
{
  __n128 result;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *__p;
  void *v8[2];
  char v9;
  const void *v10;
  std::__shared_weak_count *v11;
  std::error_condition v12;

  if (a1)
  {
    result.n128_u64[0] = sub_2231776A0(a1, a2).n128_u64[0];
  }
  else
  {
    v9 = 12;
    strcpy((char *)v8, "Mesh is NULL");
    __p = (char *)operator new(0x68uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMesh.mm");
    if (a2)
    {
      *(_QWORD *)&v12.__val_ = 22;
      v12.__cat_ = std::generic_category();
      sub_2245321DC(&v12, (uint64_t)v8, (CFErrorRef *)&v10);
      sub_224532194(&v10, a2);
      v4 = v11;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
    }
    operator delete(__p);
    if (v9 < 0)
      operator delete(v8[0]);
    return *(__n128 *)MEMORY[0x24BDAEE00];
  }
  return result;
}

void sub_223169754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconMeshGetFaceMaterialLabelsRawPtr(uint64_t a1, CFTypeRef *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *__p;
  void *v8[2];
  char v9;
  const void *v10;
  std::__shared_weak_count *v11;
  std::error_condition v12;

  if (a1)
    return sub_223179AD8(a1, a2);
  v9 = 12;
  strcpy((char *)v8, "Mesh is NULL");
  __p = (char *)operator new(0x68uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMesh.mm");
  if (a2)
  {
    *(_QWORD *)&v12.__val_ = 22;
    v12.__cat_ = std::generic_category();
    sub_2245321DC(&v12, (uint64_t)v8, (CFErrorRef *)&v10);
    sub_224532194(&v10, a2);
    v4 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  operator delete(__p);
  if (v9 < 0)
    operator delete(v8[0]);
  return 0;
}

void sub_223169904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconMeshGetVertexColorRawPtr(uint64_t a1, CFTypeRef *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *__p;
  void *v8[2];
  char v9;
  const void *v10;
  std::__shared_weak_count *v11;
  std::error_condition v12;

  if (a1)
    return sub_22317946C(a1, a2);
  v9 = 12;
  strcpy((char *)v8, "Mesh is NULL");
  __p = (char *)operator new(0x68uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMesh.mm");
  if (a2)
  {
    *(_QWORD *)&v12.__val_ = 22;
    v12.__cat_ = std::generic_category();
    sub_2245321DC(&v12, (uint64_t)v8, (CFErrorRef *)&v10);
    sub_224532194(&v10, a2);
    v4 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  operator delete(__p);
  if (v9 < 0)
    operator delete(v8[0]);
  return 0;
}

void sub_223169AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconMeshGetFaceColorRawPtr(uint64_t a1, CFTypeRef *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *__p;
  void *v8[2];
  char v9;
  const void *v10;
  std::__shared_weak_count *v11;
  std::error_condition v12;

  if (a1)
    return sub_223179620(a1, a2);
  v9 = 12;
  strcpy((char *)v8, "Mesh is NULL");
  __p = (char *)operator new(0x68uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMesh.mm");
  if (a2)
  {
    *(_QWORD *)&v12.__val_ = 22;
    v12.__cat_ = std::generic_category();
    sub_2245321DC(&v12, (uint64_t)v8, (CFErrorRef *)&v10);
    sub_224532194(&v10, a2);
    v4 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  operator delete(__p);
  if (v9 < 0)
    operator delete(v8[0]);
  return 0;
}

void sub_223169C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconMeshGetBoundingBox(uint64_t a1, _OWORD *a2, _OWORD *a3, CFTypeRef *a4)
{
  uint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  const std::error_category *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  void *__p;
  __int128 v23;
  char *v24[4];
  const void *v25;
  std::__shared_weak_count *v26;
  std::error_condition v27;

  if (a1)
  {
    if (a2 && a3)
    {
      v7 = sub_2231797D4(a1, (uint64_t)&v20, (uint64_t)&v18, a4);
      if ((_DWORD)v7)
      {
        *(_QWORD *)&v8 = v20;
        DWORD2(v8) = v21;
        *a2 = v8;
        *(_QWORD *)&v8 = v18;
        DWORD2(v8) = v19;
        *a3 = v8;
      }
      else
      {
        HIBYTE(v24[2]) = 20;
        strcpy((char *)v24, "Mesh bbox is not set");
        __p = operator new(0x68uLL);
        v23 = xmmword_2245B8D80;
        strcpy((char *)__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMesh.mm");
        if (!a4)
          goto LABEL_29;
        v14 = std::generic_category();
        *(_QWORD *)&v27.__val_ = 1;
        v27.__cat_ = v14;
        sub_2245321DC(&v27, (uint64_t)v24, (CFErrorRef *)&v25);
        sub_224532194(&v25, a4);
        v15 = v26;
        if (v26)
        {
          p_shared_owners = (unint64_t *)&v26->__shared_owners_;
          do
            v17 = __ldaxr(p_shared_owners);
          while (__stlxr(v17 - 1, p_shared_owners));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        if (SHIBYTE(v23) < 0)
LABEL_29:
          operator delete(__p);
        if (SHIBYTE(v24[2]) < 0)
          operator delete(v24[0]);
      }
      return v7;
    }
    v24[0] = (char *)operator new(0x20uLL);
    *(_OWORD *)&v24[1] = xmmword_2245B8D70;
    strcpy(v24[0], "min or max pointer is NULL");
    __p = operator new(0x68uLL);
    v23 = xmmword_2245B8D80;
    strcpy((char *)__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMesh.mm");
    if (!a4)
      goto LABEL_17;
    *(_QWORD *)&v27.__val_ = 22;
    v27.__cat_ = std::generic_category();
    sub_2245321DC(&v27, (uint64_t)v24, (CFErrorRef *)&v25);
    sub_224532194(&v25, a4);
    v9 = v26;
    if (v26)
    {
      v12 = (unint64_t *)&v26->__shared_owners_;
      do
        v11 = __ldaxr(v12);
      while (__stlxr(v11 - 1, v12));
      goto LABEL_15;
    }
  }
  else
  {
    HIBYTE(v24[2]) = 12;
    strcpy((char *)v24, "Mesh is NULL");
    __p = operator new(0x68uLL);
    v23 = xmmword_2245B8D80;
    strcpy((char *)__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMesh.mm");
    if (!a4)
    {
LABEL_17:
      operator delete(__p);
      goto LABEL_18;
    }
    *(_QWORD *)&v27.__val_ = 22;
    v27.__cat_ = std::generic_category();
    sub_2245321DC(&v27, (uint64_t)v24, (CFErrorRef *)&v25);
    sub_224532194(&v25, a4);
    v9 = v26;
    if (v26)
    {
      v10 = (unint64_t *)&v26->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
LABEL_15:
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
        if ((SHIBYTE(v23) & 0x80000000) == 0)
          goto LABEL_18;
        goto LABEL_17;
      }
    }
  }
  if (SHIBYTE(v23) < 0)
    goto LABEL_17;
LABEL_18:
  if (SHIBYTE(v24[2]) < 0)
    operator delete(v24[0]);
  return 0;
}

void sub_22316A020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  sub_223167354(v25 - 80);
  if (a19 < 0)
  {
    operator delete(__p);
    if ((a25 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a25 & 0x80000000) == 0)
  {
LABEL_3:
    _Unwind_Resume(a1);
  }
  operator delete(a20);
  _Unwind_Resume(a1);
}

void sub_22316A08C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    JUMPOUT(0x22316A07CLL);
  JUMPOUT(0x22316A06CLL);
}

void sub_22316A09C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    JUMPOUT(0x22316A07CLL);
  JUMPOUT(0x22316A06CLL);
}

uint64_t CV3DReconMeshGetVertexConfidenceRawPtr(uint64_t a1, CFTypeRef *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *__p;
  void *v8[2];
  char v9;
  const void *v10;
  std::__shared_weak_count *v11;
  std::error_condition v12;

  if (a1)
    return sub_223179C8C(a1, a2);
  v9 = 12;
  strcpy((char *)v8, "Mesh is NULL");
  __p = (char *)operator new(0x68uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMesh.mm");
  if (a2)
  {
    *(_QWORD *)&v12.__val_ = 22;
    v12.__cat_ = std::generic_category();
    sub_2245321DC(&v12, (uint64_t)v8, (CFErrorRef *)&v10);
    sub_224532194(&v10, a2);
    v4 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  operator delete(__p);
  if (v9 < 0)
    operator delete(v8[0]);
  return 0;
}

void sub_22316A200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconMeshGetFaceConfidenceRawPtr(uint64_t a1, CFTypeRef *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *__p;
  void *v8[2];
  char v9;
  const void *v10;
  std::__shared_weak_count *v11;
  std::error_condition v12;

  if (a1)
    return sub_223179F80(a1, a2);
  v9 = 12;
  strcpy((char *)v8, "Mesh is NULL");
  __p = (char *)operator new(0x68uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMesh.mm");
  if (a2)
  {
    *(_QWORD *)&v12.__val_ = 22;
    v12.__cat_ = std::generic_category();
    sub_2245321DC(&v12, (uint64_t)v8, (CFErrorRef *)&v10);
    sub_224532194(&v10, a2);
    v4 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  operator delete(__p);
  if (v9 < 0)
    operator delete(v8[0]);
  return 0;
}

void sub_22316A3B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

id CV3DReconMeshGetVertexColorsAsMTLBufferForDevice(uint64_t a1, void *a2, CFTypeRef *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *__p;
  void *v15[2];
  char v16;
  const void *v17;
  std::__shared_weak_count *v18;
  std::error_condition v19;

  v8 = a2;
  if (a1)
  {
    v9 = (void *)sub_22317A708(a1, v8, a3, v5, v6, v7);
  }
  else
  {
    v16 = 12;
    strcpy((char *)v15, "Mesh is NULL");
    __p = (char *)operator new(0x68uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMesh.mm");
    if (a3)
    {
      *(_QWORD *)&v19.__val_ = 22;
      v19.__cat_ = std::generic_category();
      sub_2245321DC(&v19, (uint64_t)v15, (CFErrorRef *)&v17);
      sub_224532194(&v17, a3);
      v10 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
    operator delete(__p);
    if (v16 < 0)
      operator delete(v15[0]);
    v9 = 0;
  }

  return v9;
}

void sub_22316A564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  void *v21;

  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:

      _Unwind_Resume(a1);
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);

  _Unwind_Resume(a1);
}

void sub_22316A5C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id CV3DReconMeshGetFaceSemanticLabelsAsMTLBufferForDevice(uint64_t a1, void *a2, CFTypeRef *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *__p;
  void *v15[2];
  char v16;
  const void *v17;
  std::__shared_weak_count *v18;
  std::error_condition v19;

  v8 = a2;
  if (a1)
  {
    v9 = (void *)sub_22317A274(a1, v8, a3, v5, v6, v7);
  }
  else
  {
    v16 = 12;
    strcpy((char *)v15, "Mesh is NULL");
    __p = (char *)operator new(0x68uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMesh.mm");
    if (a3)
    {
      *(_QWORD *)&v19.__val_ = 22;
      v19.__cat_ = std::generic_category();
      sub_2245321DC(&v19, (uint64_t)v15, (CFErrorRef *)&v17);
      sub_224532194(&v17, a3);
      v10 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
    operator delete(__p);
    if (v16 < 0)
      operator delete(v15[0]);
    v9 = 0;
  }

  return v9;
}

void sub_22316A730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  void *v21;

  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:

      _Unwind_Resume(a1);
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);

  _Unwind_Resume(a1);
}

void sub_22316A794(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id CV3DReconMeshGetFaceMaterialLabelsAsMTLBufferForDevice(uint64_t a1, void *a2, CFTypeRef *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *__p;
  void *v15[2];
  char v16;
  const void *v17;
  std::__shared_weak_count *v18;
  std::error_condition v19;

  v8 = a2;
  if (a1)
  {
    v9 = (void *)sub_22317A9A0(a1, v8, a3, v5, v6, v7);
  }
  else
  {
    v16 = 12;
    strcpy((char *)v15, "Mesh is NULL");
    __p = (char *)operator new(0x68uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMesh.mm");
    if (a3)
    {
      *(_QWORD *)&v19.__val_ = 22;
      v19.__cat_ = std::generic_category();
      sub_2245321DC(&v19, (uint64_t)v15, (CFErrorRef *)&v17);
      sub_224532194(&v17, a3);
      v10 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
    operator delete(__p);
    if (v16 < 0)
      operator delete(v15[0]);
    v9 = 0;
  }

  return v9;
}

void sub_22316A8FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  void *v21;

  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:

      _Unwind_Resume(a1);
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);

  _Unwind_Resume(a1);
}

void sub_22316A960(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id CV3DReconMeshGetVertexConfidencesAsMTLBufferForDevice(uint64_t a1, void *a2, CFTypeRef *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *__p;
  void *v15[2];
  char v16;
  const void *v17;
  std::__shared_weak_count *v18;
  std::error_condition v19;

  v8 = a2;
  if (a1)
  {
    v9 = (void *)sub_22317AC38(a1, v8, a3, v5, v6, v7);
  }
  else
  {
    v16 = 12;
    strcpy((char *)v15, "Mesh is NULL");
    __p = (char *)operator new(0x68uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMesh.mm");
    if (a3)
    {
      *(_QWORD *)&v19.__val_ = 22;
      v19.__cat_ = std::generic_category();
      sub_2245321DC(&v19, (uint64_t)v15, (CFErrorRef *)&v17);
      sub_224532194(&v17, a3);
      v10 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
    operator delete(__p);
    if (v16 < 0)
      operator delete(v15[0]);
    v9 = 0;
  }

  return v9;
}

void sub_22316AAC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  void *v21;

  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:

      _Unwind_Resume(a1);
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);

  _Unwind_Resume(a1);
}

void sub_22316AB2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id CV3DReconMeshGetFaceConfidencesAsMTLBufferForDevice(uint64_t a1, void *a2, CFTypeRef *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *__p;
  void *v15[2];
  char v16;
  const void *v17;
  std::__shared_weak_count *v18;
  std::error_condition v19;

  v8 = a2;
  if (a1)
  {
    v9 = (void *)sub_22317B0CC(a1, v8, a3, v5, v6, v7);
  }
  else
  {
    v16 = 12;
    strcpy((char *)v15, "Mesh is NULL");
    __p = (char *)operator new(0x68uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMesh.mm");
    if (a3)
    {
      *(_QWORD *)&v19.__val_ = 22;
      v19.__cat_ = std::generic_category();
      sub_2245321DC(&v19, (uint64_t)v15, (CFErrorRef *)&v17);
      sub_224532194(&v17, a3);
      v10 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
    operator delete(__p);
    if (v16 < 0)
      operator delete(v15[0]);
    v9 = 0;
  }

  return v9;
}

void sub_22316AC94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  void *v21;

  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:

      _Unwind_Resume(a1);
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);

  _Unwind_Resume(a1);
}

void sub_22316ACF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t CV3DReconMeshSaveAsObj(uint64_t a1, char *__s, CFTypeRef *a3)
{
  size_t v6;
  size_t v7;
  _BYTE *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *p_shared_owners;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *__p;
  _BYTE __dst[24];
  const void *v19;
  std::__shared_weak_count *v20;
  std::error_condition v21;

  if (a1)
  {
    if (__s)
    {
      v6 = strlen(__s);
      if (v6 >= 0x7FFFFFFFFFFFFFF8)
        sub_22316DBC0();
      v7 = v6;
      if (v6 >= 0x17)
      {
        v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v6 | 7) != 0x17)
          v14 = v6 | 7;
        v15 = v14 + 1;
        v8 = operator new(v14 + 1);
        *(_QWORD *)&__dst[8] = v7;
        *(_QWORD *)&__dst[16] = v15 | 0x8000000000000000;
        *(_QWORD *)__dst = v8;
      }
      else
      {
        __dst[23] = v6;
        v8 = __dst;
        if (!v6)
        {
LABEL_25:
          v8[v7] = 0;
          v13 = sub_22317CB1C(a1, (uint64_t)__dst, a3);
          if ((__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
          return v13;
        }
      }
      memcpy(v8, __s, v7);
      goto LABEL_25;
    }
    *(_QWORD *)__dst = operator new(0x20uLL);
    *(_OWORD *)&__dst[8] = xmmword_2245B8D70;
    strcpy(*(char **)__dst, "Output path string is NULL");
    __p = (char *)operator new(0x68uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMesh.mm");
    if (a3)
    {
      *(_QWORD *)&v21.__val_ = 22;
      v21.__cat_ = std::generic_category();
      sub_2245321DC(&v21, (uint64_t)__dst, (CFErrorRef *)&v19);
      sub_224532194(&v19, a3);
      v9 = v20;
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        goto LABEL_16;
      }
    }
  }
  else
  {
    __dst[23] = 12;
    strcpy(__dst, "Mesh is NULL");
    __p = (char *)operator new(0x68uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMesh.mm");
    if (a3)
    {
      *(_QWORD *)&v21.__val_ = 22;
      v21.__cat_ = std::generic_category();
      sub_2245321DC(&v21, (uint64_t)__dst, (CFErrorRef *)&v19);
      sub_224532194(&v19, a3);
      v9 = v20;
      if (v20)
      {
        v10 = (unint64_t *)&v20->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
LABEL_16:
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
  }
  operator delete(__p);
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
  return 0;
}

void sub_22316AFC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if (a20 < 0)
    {
LABEL_5:
      operator delete(a15);
      _Unwind_Resume(a1);
    }
  }
  else if (a20 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

void CV3DReconMeshComputeNormals(uint64_t a1, CFTypeRef *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  char *__p;
  void *v7[2];
  char v8;
  const void *v9;
  std::__shared_weak_count *v10;
  std::error_condition v11;

  if (a1)
  {
    sub_223178B00(a1, a2);
  }
  else
  {
    v8 = 12;
    strcpy((char *)v7, "Mesh is NULL");
    __p = (char *)operator new(0x68uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMesh.mm");
    if (a2)
    {
      *(_QWORD *)&v11.__val_ = 22;
      v11.__cat_ = std::generic_category();
      sub_2245321DC(&v11, (uint64_t)v7, (CFErrorRef *)&v9);
      sub_224532194(&v9, a2);
      v3 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
    }
    operator delete(__p);
    if (v8 < 0)
      operator delete(v7[0]);
  }
}

void sub_22316B180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

_QWORD *CV3DReconMeshCreate()
{
  std::__shared_weak_count *v0;
  unint64_t *p_shared_owners;
  _QWORD *result;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;

  v0 = (std::__shared_weak_count *)operator new(0x198uLL);
  v0->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v0->__shared_owners_;
  v0->__shared_weak_owners_ = 0;
  v0->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F0A0;
  sub_224149A04((uint64_t)&v0[1], 0);
  result = operator new(0x80uLL, MEMORY[0x24BEDB6B8]);
  v3 = result;
  if (result)
  {
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    result[2] = v0;
    *((_BYTE *)result + 24) = 0;
    *((_BYTE *)result + 88) = 0;
    *((_BYTE *)result + 92) = 0;
    *((_BYTE *)result + 108) = 0;
    result[14] = 0;
    *((_DWORD *)result + 30) = 1;
    *result = &off_24EC1F598;
    result[1] = v0 + 1;
  }
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
    std::__shared_weak_count::__release_weak(v0);
    return v3;
  }
  return result;
}

void sub_22316B2CC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

char *CV3DReconMeshCopy(uint64_t a1, CFTypeRef *a2)
{
  std::__shared_weak_count *v2;
  char *v4;
  char *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v15;
  unint64_t *v16;
  unint64_t v17;
  char *__p;
  void *v19[2];
  char v20;
  const void *v21;
  std::__shared_weak_count *v22;
  std::error_condition v23;

  if (a1)
  {
    v4 = (char *)operator new(0x80uLL, MEMORY[0x24BEDB6B8]);
    v5 = v4;
    if (v4)
    {
      v2 = *(std::__shared_weak_count **)(a1 + 16);
      *((_QWORD *)v4 + 1) = *(_QWORD *)(a1 + 8);
      *((_QWORD *)v4 + 2) = v2;
      if (v2)
      {
        p_shared_owners = (unint64_t *)&v2->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      v4[24] = 0;
      v4[88] = 0;
      if (*(_BYTE *)(a1 + 88))
      {
        v8 = *(_OWORD *)(a1 + 40);
        *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
        *(_OWORD *)(v4 + 40) = v8;
        v9 = *(_OWORD *)(a1 + 72);
        *(_OWORD *)(v4 + 56) = *(_OWORD *)(a1 + 56);
        *(_OWORD *)(v4 + 72) = v9;
        v4[88] = 1;
      }
      *(_OWORD *)(v4 + 92) = *(_OWORD *)(a1 + 92);
      *(_OWORD *)(v4 + 104) = *(_OWORD *)(a1 + 104);
      *((_DWORD *)v4 + 30) = 1;
      *(_QWORD *)v4 = &off_24EC1F598;
    }
    v15 = operator new(0x198uLL);
    v15[1] = 0;
    v15[2] = 0;
    *v15 = &off_24EC1F0A0;
    *((_QWORD *)v5 + 1) = sub_224149A04((uint64_t)(v15 + 3), 0);
    *((_QWORD *)v5 + 2) = v15;
    if (v2)
    {
      v16 = (unint64_t *)&v2->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    sub_22316B5A4(*((_QWORD *)v5 + 1), *(_QWORD *)(a1 + 8));
    return v5;
  }
  else
  {
    v20 = 12;
    strcpy((char *)v19, "Mesh is NULL");
    __p = (char *)operator new(0x68uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMesh.mm");
    if (a2)
    {
      *(_QWORD *)&v23.__val_ = 22;
      v23.__cat_ = std::generic_category();
      sub_2245321DC(&v23, (uint64_t)v19, (CFErrorRef *)&v21);
      sub_224532194(&v21, a2);
      v11 = v22;
      if (v22)
      {
        v12 = (unint64_t *)&v22->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
    operator delete(__p);
    if (v20 < 0)
      operator delete(v19[0]);
    return 0;
  }
}

void sub_22316B530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

void sub_22316B58C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_22316B5A4(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  if (a1 == a2)
  {
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
    *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
    *(_DWORD *)(a1 + 312) = *(_DWORD *)(a2 + 312);
  }
  else
  {
    sub_22316DC58(a1, a2);
    sub_22316DE28(a1, *(uint64_t **)a2, *(uint64_t **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2));
    sub_22316DC58(a1 + 32, a2 + 32);
    sub_22316DE28(a1 + 32, *(uint64_t **)(a2 + 32), *(uint64_t **)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2));
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
    sub_22316DC58(a1 + 72, a2 + 72);
    sub_22316DE28(a1 + 72, *(uint64_t **)(a2 + 72), *(uint64_t **)(a2 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 2));
    *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
    sub_22316E154(a1 + 112, a2 + 112);
    sub_22316E2EC(a1 + 112, *(uint64_t **)(a2 + 112), *(uint64_t **)(a2 + 120), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 120) - *(_QWORD *)(a2 + 112)) >> 2));
    sub_22316E62C(a1 + 144, a2 + 144);
    sub_22316E7B4(a1 + 144, *(char **)(a2 + 144), *(char **)(a2 + 152), (uint64_t)(*(_QWORD *)(a2 + 152) - *(_QWORD *)(a2 + 144)) >> 3);
    sub_22316EB44(a1 + 176, a2 + 176);
    sub_22316ECCC((uint64_t *)(a1 + 176), *(_QWORD *)(a2 + 176), *(uint64_t **)(a2 + 184), (uint64_t)(*(_QWORD *)(a2 + 184) - *(_QWORD *)(a2 + 176)) >> 3);
    sub_22316E154(a1 + 208, a2 + 208);
    sub_22316E2EC(a1 + 208, *(uint64_t **)(a2 + 208), *(uint64_t **)(a2 + 216), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 216) - *(_QWORD *)(a2 + 208)) >> 2));
    sub_22316F0FC(a1 + 240, a2 + 240);
    sub_22316F27C((unint64_t *)(a1 + 240), *(char **)(a2 + 240), *(char **)(a2 + 248), *(_QWORD *)(a2 + 248) - *(_QWORD *)(a2 + 240));
    *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
    sub_22316F0FC(a1 + 280, a2 + 280);
    sub_22316F27C((unint64_t *)(a1 + 280), *(char **)(a2 + 280), *(char **)(a2 + 288), *(_QWORD *)(a2 + 288) - *(_QWORD *)(a2 + 280));
    *(_DWORD *)(a1 + 312) = *(_DWORD *)(a2 + 312);
    sub_22316F4C8(a1 + 320, a2 + 320);
    sub_22316F650((_QWORD *)(a1 + 320), *(char **)(a2 + 320), *(char **)(a2 + 328), (uint64_t)(*(_QWORD *)(a2 + 328) - *(_QWORD *)(a2 + 320)) >> 2);
  }
  *(_DWORD *)(a1 + 352) = *(_DWORD *)(a2 + 352);
  v4 = (_QWORD *)(a1 + 356);
  v5 = (uint64_t *)(a2 + 356);
  if (*(unsigned __int8 *)(a1 + 380) == *(unsigned __int8 *)(a2 + 380))
  {
    if (*(_BYTE *)(a1 + 380))
    {
      v6 = *v5;
      *(_DWORD *)(a1 + 364) = *(_DWORD *)(a2 + 364);
      *v4 = v6;
      v7 = *(_QWORD *)(a2 + 368);
      *(_DWORD *)(a1 + 376) = *(_DWORD *)(a2 + 376);
      *(_QWORD *)(a1 + 368) = v7;
    }
    return a1;
  }
  else
  {
    if (*(_BYTE *)(a1 + 380))
    {
      *(_BYTE *)(a1 + 380) = 0;
    }
    else
    {
      v9 = *v5;
      *(_DWORD *)(a1 + 364) = *(_DWORD *)(a2 + 364);
      *v4 = v9;
      v10 = *(_QWORD *)(a2 + 368);
      *(_DWORD *)(a1 + 376) = *(_DWORD *)(a2 + 376);
      *(_QWORD *)(a1 + 368) = v10;
      *(_BYTE *)(a1 + 380) = 1;
    }
    return a1;
  }
}

char *CV3DReconMeshCreateFrom2DPolygon(const void *a1, unint64_t a2, CFTypeRef *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  char *__p;
  const void *v16;
  std::__shared_weak_count *v17;
  std::error_condition v18;
  void *v19[3];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char v24;
  _OWORD v25[2];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (a1 || !a2)
  {
    sub_223177170(a1, a2, (uint64_t)v19);
    v8 = (char *)operator new(0x80uLL, MEMORY[0x24BEDB6B8]);
    v7 = v8;
    if (v8)
    {
      v9 = (char *)v19[2];
      *((void **)v8 + 1) = v19[1];
      *((_QWORD *)v8 + 2) = v9;
      if (v9)
      {
        v10 = (unint64_t *)(v9 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      v8[24] = 0;
      v8[88] = 0;
      if (v24)
      {
        v12 = v21;
        *(_OWORD *)(v8 + 24) = v20;
        *(_OWORD *)(v8 + 40) = v12;
        v13 = v23;
        *(_OWORD *)(v8 + 56) = v22;
        *(_OWORD *)(v8 + 72) = v13;
        v8[88] = 1;
      }
      *(_OWORD *)(v8 + 92) = v25[0];
      *(_OWORD *)(v8 + 104) = *(_OWORD *)((char *)v25 + 12);
      *((_DWORD *)v8 + 30) = 1;
      *(_QWORD *)v8 = &off_24EC1F598;
    }
    sub_223177188((uint64_t)v19);
  }
  else
  {
    HIBYTE(v19[2]) = 18;
    strcpy((char *)v19, "Input data is NULL");
    __p = (char *)operator new(0x68uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMesh.mm");
    if (a3)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_2245321DC(&v18, (uint64_t)v19, (CFErrorRef *)&v16);
      sub_224532194(&v16, a3);
      v4 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
    }
    operator delete(__p);
    if (SHIBYTE(v19[2]) < 0)
      operator delete(v19[0]);
    return 0;
  }
  return v7;
}

void sub_22316BA40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  sub_223167354((uint64_t)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(a1);
}

char *CV3DReconMeshCreateFrom2DPolygonWithGrid(const void *a1, unint64_t a2, CFTypeRef *a3, float a4)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  char *__p;
  const void *v17;
  std::__shared_weak_count *v18;
  std::error_condition v19;
  void *v20[3];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char v25;
  _OWORD v26[2];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  if (a1 || !a2)
  {
    sub_223176D98(a1, a2, (uint64_t)v20, LODWORD(a4));
    v9 = (char *)operator new(0x80uLL, MEMORY[0x24BEDB6B8]);
    v8 = v9;
    if (v9)
    {
      v10 = (char *)v20[2];
      *((void **)v9 + 1) = v20[1];
      *((_QWORD *)v9 + 2) = v10;
      if (v10)
      {
        v11 = (unint64_t *)(v10 + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      v9[24] = 0;
      v9[88] = 0;
      if (v25)
      {
        v13 = v22;
        *(_OWORD *)(v9 + 24) = v21;
        *(_OWORD *)(v9 + 40) = v13;
        v14 = v24;
        *(_OWORD *)(v9 + 56) = v23;
        *(_OWORD *)(v9 + 72) = v14;
        v9[88] = 1;
      }
      *(_OWORD *)(v9 + 92) = v26[0];
      *(_OWORD *)(v9 + 104) = *(_OWORD *)((char *)v26 + 12);
      *((_DWORD *)v9 + 30) = 1;
      *(_QWORD *)v9 = &off_24EC1F598;
    }
    sub_223177188((uint64_t)v20);
  }
  else
  {
    HIBYTE(v20[2]) = 18;
    strcpy((char *)v20, "Input data is NULL");
    __p = (char *)operator new(0x68uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMesh.mm");
    if (a3)
    {
      *(_QWORD *)&v19.__val_ = 22;
      v19.__cat_ = std::generic_category();
      sub_2245321DC(&v19, (uint64_t)v20, (CFErrorRef *)&v17);
      sub_224532194(&v17, a3);
      v5 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    operator delete(__p);
    if (SHIBYTE(v20[2]) < 0)
      operator delete(v20[0]);
    return 0;
  }
  return v8;
}

void sub_22316BC98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  sub_223167354((uint64_t)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(a1);
}

BOOL CV3DReconMeshSetGeometryVersion(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char *__p;
  void *v9[2];
  char v10;
  const void *v11;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return sub_22317B364(a1, a2, a3);
  v10 = 12;
  strcpy((char *)v9, "Mesh is NULL");
  __p = (char *)operator new(0x68uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMesh.mm");
  if (a3)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)v9, (CFErrorRef *)&v11);
    sub_224532194(&v11, a3);
    v5 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  operator delete(__p);
  if (v10 < 0)
    operator delete(v9[0]);
  return 0;
}

void sub_22316BE34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconMeshSetVertices(uint64_t a1, const void *a2, unint64_t a3, CFTypeRef *a4)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *__p;
  void *v10[2];
  char v11;
  const void *v12;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return sub_22317B514(a1, a2, a3, a4);
  v11 = 12;
  strcpy((char *)v10, "Mesh is NULL");
  __p = (char *)operator new(0x68uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMesh.mm");
  if (a4)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)v10, (CFErrorRef *)&v12);
    sub_224532194(&v12, a4);
    v6 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(__p);
  if (v11 < 0)
    operator delete(v10[0]);
  return 0;
}

void sub_22316BFE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconMeshSetFaces(uint64_t a1, const void *a2, unint64_t a3, CFTypeRef *a4)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *__p;
  void *v10[2];
  char v11;
  const void *v12;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return sub_22317B870(a1, a2, a3, a4);
  v11 = 12;
  strcpy((char *)v10, "Mesh is NULL");
  __p = (char *)operator new(0x68uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMesh.mm");
  if (a4)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)v10, (CFErrorRef *)&v12);
    sub_224532194(&v12, a4);
    v6 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(__p);
  if (v11 < 0)
    operator delete(v10[0]);
  return 0;
}

void sub_22316C194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconMeshSetSemanticFaceLabels(uint64_t a1, const void *a2, size_t a3, CFTypeRef *a4)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *__p;
  void *v10[2];
  char v11;
  const void *v12;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
  {
    LODWORD(v10[0]) = 2;
    return sub_22317BBD0(a1, a2, a3, v10, a4);
  }
  else
  {
    v11 = 12;
    strcpy((char *)v10, "Mesh is NULL");
    __p = (char *)operator new(0x68uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMesh.mm");
    if (a4)
    {
      *(_QWORD *)&v14.__val_ = 22;
      v14.__cat_ = std::generic_category();
      sub_2245321DC(&v14, (uint64_t)v10, (CFErrorRef *)&v12);
      sub_224532194(&v12, a4);
      v6 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    operator delete(__p);
    if (v11 < 0)
      operator delete(v10[0]);
    return 0;
  }
}

void sub_22316C34C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconMeshSetSemanticVertexLabels(uint64_t a1, const void *a2, size_t a3, CFTypeRef *a4)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *__p;
  void *v10[2];
  char v11;
  const void *v12;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
  {
    LODWORD(v10[0]) = 1;
    return sub_22317BBD0(a1, a2, a3, v10, a4);
  }
  else
  {
    v11 = 12;
    strcpy((char *)v10, "Mesh is NULL");
    __p = (char *)operator new(0x68uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMesh.mm");
    if (a4)
    {
      *(_QWORD *)&v14.__val_ = 22;
      v14.__cat_ = std::generic_category();
      sub_2245321DC(&v14, (uint64_t)v10, (CFErrorRef *)&v12);
      sub_224532194(&v12, a4);
      v6 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    operator delete(__p);
    if (v11 < 0)
      operator delete(v10[0]);
    return 0;
  }
}

void sub_22316C504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconMeshSetFaceColors(uint64_t a1, const void *a2, unint64_t a3, CFTypeRef *a4)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *__p;
  void *v10[2];
  char v11;
  const void *v12;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
  {
    LODWORD(v10[0]) = 2;
    return sub_22317BED8(a1, a2, a3, v10, a4);
  }
  else
  {
    v11 = 12;
    strcpy((char *)v10, "Mesh is NULL");
    __p = (char *)operator new(0x68uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMesh.mm");
    if (a4)
    {
      *(_QWORD *)&v14.__val_ = 22;
      v14.__cat_ = std::generic_category();
      sub_2245321DC(&v14, (uint64_t)v10, (CFErrorRef *)&v12);
      sub_224532194(&v12, a4);
      v6 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    operator delete(__p);
    if (v11 < 0)
      operator delete(v10[0]);
    return 0;
  }
}

void sub_22316C6BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconMeshSetVertexColors(uint64_t a1, const void *a2, unint64_t a3, CFTypeRef *a4)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *__p;
  void *v10[2];
  char v11;
  const void *v12;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
  {
    LODWORD(v10[0]) = 1;
    return sub_22317BED8(a1, a2, a3, v10, a4);
  }
  else
  {
    v11 = 12;
    strcpy((char *)v10, "Mesh is NULL");
    __p = (char *)operator new(0x68uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMesh.mm");
    if (a4)
    {
      *(_QWORD *)&v14.__val_ = 22;
      v14.__cat_ = std::generic_category();
      sub_2245321DC(&v14, (uint64_t)v10, (CFErrorRef *)&v12);
      sub_224532194(&v12, a4);
      v6 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    operator delete(__p);
    if (v11 < 0)
      operator delete(v10[0]);
    return 0;
  }
}

void sub_22316C874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconMeshSetFaceConfidences(uint64_t a1, const void *a2, unint64_t a3, CFTypeRef *a4)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *__p;
  void *v10[2];
  char v11;
  const void *v12;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
  {
    LODWORD(v10[0]) = 2;
    return sub_22317C21C(a1, a2, a3, v10, a4);
  }
  else
  {
    v11 = 12;
    strcpy((char *)v10, "Mesh is NULL");
    __p = (char *)operator new(0x68uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMesh.mm");
    if (a4)
    {
      *(_QWORD *)&v14.__val_ = 22;
      v14.__cat_ = std::generic_category();
      sub_2245321DC(&v14, (uint64_t)v10, (CFErrorRef *)&v12);
      sub_224532194(&v12, a4);
      v6 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    operator delete(__p);
    if (v11 < 0)
      operator delete(v10[0]);
    return 0;
  }
}

void sub_22316CA2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconMeshSetVertexConfidences(uint64_t a1, const void *a2, unint64_t a3, CFTypeRef *a4)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *__p;
  void *v10[2];
  char v11;
  const void *v12;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
  {
    LODWORD(v10[0]) = 1;
    return sub_22317C21C(a1, a2, a3, v10, a4);
  }
  else
  {
    v11 = 12;
    strcpy((char *)v10, "Mesh is NULL");
    __p = (char *)operator new(0x68uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMesh.mm");
    if (a4)
    {
      *(_QWORD *)&v14.__val_ = 22;
      v14.__cat_ = std::generic_category();
      sub_2245321DC(&v14, (uint64_t)v10, (CFErrorRef *)&v12);
      sub_224532194(&v12, a4);
      v6 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    operator delete(__p);
    if (v11 < 0)
      operator delete(v10[0]);
    return 0;
  }
}

void sub_22316CBE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

void *CV3DReconMeshPartitionByConnectedComponentsAsFaceBufferWithDevice(uint64_t a1, int a2, void *a3, CFTypeRef *a4)
{
  id v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  char *__p;
  void *v14[2];
  char v15;
  const void *v16;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  v7 = a3;
  if (a1)
  {
    v8 = sub_22317C524(a1, a2, v7, a4);
  }
  else
  {
    v15 = 12;
    strcpy((char *)v14, "Mesh is NULL");
    __p = (char *)operator new(0x68uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMesh.mm");
    if (a4)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_2245321DC(&v18, (uint64_t)v14, (CFErrorRef *)&v16);
      sub_224532194(&v16, a4);
      v9 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    operator delete(__p);
    if (v15 < 0)
      operator delete(v14[0]);
    v8 = 0;
  }

  return v8;
}

void sub_22316CDA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  void *v21;

  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:

      _Unwind_Resume(a1);
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);

  _Unwind_Resume(a1);
}

void sub_22316CE04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

CFTypeRef CV3DReconMeshPartitionByConnectedComponents(uint64_t a1, int a2, CFTypeRef *a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char *__p;
  void *v9[2];
  char v10;
  const void *v11;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return sub_22317C8AC(a1, a2, a3);
  v10 = 12;
  strcpy((char *)v9, "Mesh is NULL");
  __p = (char *)operator new(0x68uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMesh.mm");
  if (a3)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)v9, (CFErrorRef *)&v11);
    sub_224532194(&v11, a3);
    v5 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  operator delete(__p);
  if (v10 < 0)
    operator delete(v9[0]);
  return 0;
}

void sub_22316CF68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconMeshListRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 32);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DReconMeshListRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 32);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

unint64_t CV3DReconMeshListGetCount(uint64_t a1, CFTypeRef *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *__p;
  void *v8[4];
  const void *v9;
  std::__shared_weak_count *v10;
  std::error_condition v11;

  if (a1)
    return 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
  HIBYTE(v8[2]) = 17;
  strcpy((char *)v8, "Mesh list is NULL");
  __p = (char *)operator new(0x68uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMesh.mm");
  if (a2)
  {
    *(_QWORD *)&v11.__val_ = 22;
    v11.__cat_ = std::generic_category();
    sub_2245321DC(&v11, (uint64_t)v8, (CFErrorRef *)&v9);
    sub_224532194(&v9, a2);
    v4 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  operator delete(__p);
  if (SHIBYTE(v8[2]) < 0)
    operator delete(v8[0]);
  return -1;
}

void sub_22316D164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  sub_223167354(v21 - 48);
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(a1);
}

char *CV3DReconMeshListCopyMeshAtIndex(uint64_t a1, unint64_t a2, CFTypeRef *a3)
{
  char *v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  char *__p;
  const void *v17;
  std::__shared_weak_count *v18;
  std::error_condition v19;
  _BYTE v20[32];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char v24;
  _OWORD v25[2];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    sub_22317E2C4(a1, a2, a3, (uint64_t)v20);
    v4 = (char *)operator new(0x80uLL, MEMORY[0x24BEDB6B8]);
    v5 = v4;
    if (v4)
    {
      v6 = *(_OWORD *)v20;
      v4[24] = 0;
      *(_OWORD *)(v4 + 8) = v6;
      v4[88] = 0;
      if (v24)
      {
        v7 = v21;
        *(_OWORD *)(v4 + 24) = *(_OWORD *)&v20[16];
        *(_OWORD *)(v4 + 40) = v7;
        v8 = v23;
        *(_OWORD *)(v4 + 56) = v22;
        *(_OWORD *)(v4 + 72) = v8;
        v4[88] = 1;
      }
      *(_OWORD *)(v4 + 92) = v25[0];
      *(_OWORD *)(v4 + 104) = *(_OWORD *)((char *)v25 + 12);
      *((_DWORD *)v4 + 30) = 1;
      *(_QWORD *)v4 = &off_24EC1F598;
    }
    else
    {
      v13 = *(std::__shared_weak_count **)&v20[8];
      if (*(_QWORD *)&v20[8])
      {
        v14 = (unint64_t *)(*(_QWORD *)&v20[8] + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
  }
  else
  {
    v20[23] = 17;
    strcpy(v20, "Mesh list is NULL");
    __p = (char *)operator new(0x68uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMesh.mm");
    if (a3)
    {
      *(_QWORD *)&v19.__val_ = 22;
      v19.__cat_ = std::generic_category();
      sub_2245321DC(&v19, (uint64_t)v20, (CFErrorRef *)&v17);
      sub_224532194(&v17, a3);
      v9 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    operator delete(__p);
    if ((v20[23] & 0x80000000) != 0)
      operator delete(*(void **)v20);
    return 0;
  }
  return v5;
}

void sub_22316D3D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  sub_223167354((uint64_t)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t CV3DReconMeshListGetMeshUUIDAtIndex(uint64_t a1, unint64_t a2, CFTypeRef *a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char *__p;
  void *v9[4];
  const void *v10;
  std::__shared_weak_count *v11;
  std::error_condition v12;

  if (a1)
    return sub_22317E570(a1, a2, a3);
  HIBYTE(v9[2]) = 17;
  strcpy((char *)v9, "Mesh list is NULL");
  __p = (char *)operator new(0x68uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMesh.mm");
  if (a3)
  {
    *(_QWORD *)&v12.__val_ = 22;
    v12.__cat_ = std::generic_category();
    sub_2245321DC(&v12, (uint64_t)v9, (CFErrorRef *)&v10);
    sub_224532194(&v10, a3);
    v5 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  operator delete(__p);
  if (SHIBYTE(v9[2]) < 0)
    operator delete(v9[0]);
  return 0;
}

void sub_22316D56C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  sub_223167354(v21 - 48);
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(a1);
}

char *CV3DReconMeshListMerge(uint64_t a1, CFTypeRef *a2)
{
  char *result;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  char *__p;
  _OWORD v11[2];
  const void *v12;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
  {
    sub_22317E7B4(a1, (uint64_t *)v11);
    result = (char *)operator new(0x80uLL, MEMORY[0x24BEDB6B8]);
    if (result)
    {
      *(_OWORD *)(result + 8) = v11[0];
      result[24] = 0;
      result[88] = 0;
      result[92] = 0;
      result[108] = 0;
      *((_QWORD *)result + 14) = 0;
      *((_DWORD *)result + 30) = 1;
      *(_QWORD *)result = &off_24EC1F598;
    }
    else
    {
      v7 = (std::__shared_weak_count *)*((_QWORD *)&v11[0] + 1);
      if (*((_QWORD *)&v11[0] + 1))
      {
        v8 = (unint64_t *)(*((_QWORD *)&v11[0] + 1) + 8);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
          return 0;
        }
      }
    }
  }
  else
  {
    BYTE7(v11[1]) = 17;
    strcpy((char *)v11, "Mesh list is NULL");
    __p = (char *)operator new(0x68uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMesh.mm");
    if (a2)
    {
      *(_QWORD *)&v14.__val_ = 22;
      v14.__cat_ = std::generic_category();
      sub_2245321DC(&v14, (uint64_t)v11, (CFErrorRef *)&v12);
      sub_224532194(&v12, a2);
      v4 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
    }
    operator delete(__p);
    if (SBYTE7(v11[1]) < 0)
      operator delete(*(void **)&v11[0]);
    return 0;
  }
  return result;
}

void sub_22316D7B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  sub_223167354(v21 - 48);
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(a1);
}

_QWORD *CV3DReconMeshListCreate()
{
  _QWORD *result;

  result = operator new(0x28uLL, MEMORY[0x24BEDB6B8]);
  if (result)
  {
    result[2] = 0;
    result[3] = 0;
    *((_DWORD *)result + 8) = 1;
    *result = &unk_24EC1F620;
    result[1] = 0;
  }
  return result;
}

uint64_t CV3DReconMeshListAddMesh(uint64_t a1, uint64_t a2, const void *a3, CFTypeRef *a4)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  char *__p;
  void *v12[4];
  const void *v13;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (!a1)
  {
    HIBYTE(v12[2]) = 17;
    strcpy((char *)v12, "Mesh list is NULL");
    __p = (char *)operator new(0x68uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMesh.mm");
    if (!a4)
      goto LABEL_23;
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_2245321DC(&v15, (uint64_t)v12, (CFErrorRef *)&v13);
    sub_224532194(&v13, a4);
    v6 = v14;
    if (!v14)
      goto LABEL_23;
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
LABEL_19:
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    goto LABEL_23;
  }
  if (!a2)
  {
    HIBYTE(v12[2]) = 12;
    strcpy((char *)v12, "Mesh is NULL");
    __p = (char *)operator new(0x68uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMesh.mm");
    if (!a4)
      goto LABEL_23;
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_2245321DC(&v15, (uint64_t)v12, (CFErrorRef *)&v13);
    sub_224532194(&v13, a4);
    v6 = v14;
    if (!v14)
      goto LABEL_23;
    v9 = (unint64_t *)&v14->__shared_owners_;
    do
      v8 = __ldaxr(v9);
    while (__stlxr(v8 - 1, v9));
    goto LABEL_19;
  }
  if (a3)
    return sub_22317E830(a1, (_QWORD *)(a2 + 8), a3);
  HIBYTE(v12[2]) = 12;
  strcpy((char *)v12, "UUID is NULL");
  __p = (char *)operator new(0x68uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMesh.mm");
  if (a4)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_2245321DC(&v15, (uint64_t)v12, (CFErrorRef *)&v13);
    sub_224532194(&v13, a4);
    v6 = v14;
    if (v14)
    {
      v10 = (unint64_t *)&v14->__shared_owners_;
      do
        v8 = __ldaxr(v10);
      while (__stlxr(v8 - 1, v10));
      goto LABEL_19;
    }
  }
LABEL_23:
  operator delete(__p);
  if (SHIBYTE(v12[2]) < 0)
    operator delete(v12[0]);
  return 0;
}

void sub_22316DB34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  sub_223167354(v21 - 48);
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a21 & 0x80000000) == 0)
  {
LABEL_3:
    _Unwind_Resume(a1);
  }
  operator delete(a16);
  _Unwind_Resume(a1);
}

void sub_22316DBB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    JUMPOUT(0x22316DBA0);
  JUMPOUT(0x22316DB90);
}

void sub_22316DBC0()
{
  sub_22316DBD4("basic_string");
}

void sub_22316DBD4(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_22316DC24(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24EC1E388, MEMORY[0x24BEDAAF0]);
}

void sub_22316DC10(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_22316DC24(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

void sub_22316DC48(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

uint64_t sub_22316DC58(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  BOOL v10;
  _QWORD **v11;
  int v12;
  _QWORD **v13;
  int v14;
  _QWORD *v15;

  v2 = result;
  v3 = (_QWORD *)(result + 24);
  v4 = (_QWORD *)(a2 + 24);
  v5 = *(unsigned int *)(a2 + 28);
  v6 = *(_DWORD *)(result + 28);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    if ((_DWORD)v5 == -1)
      v10 = v6 == -1;
    else
      v10 = v8;
    if (v10)
      goto LABEL_21;
  }
  else
  {
    v13 = &v15;
    result = ((uint64_t (*)(_QWORD ***, uint64_t, _QWORD *))off_24EC1EF70[v5])(&v13, a2 + 24, v3);
    if (!(_DWORD)result)
      goto LABEL_21;
    v6 = *(_DWORD *)(v2 + 28);
  }
  v11 = *(_QWORD ***)v2;
  *(_QWORD *)(v2 + 8) = *(_QWORD *)v2;
  v12 = -1431655765 * ((*(_QWORD *)(v2 + 16) - (_QWORD)v11) >> 2);
  v13 = v11;
  v14 = v12;
  if (v6 == -1)
    sub_22316DD70();
  v15 = &v13;
  result = ((uint64_t (*)(_QWORD **, _QWORD *))off_24EC1EF80[v6])(&v15, v3);
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = 0;
LABEL_21:
  *v3 = *v4;
  return result;
}

uint64_t sub_22316DD60()
{
  return 0;
}

uint64_t sub_22316DD68()
{
  return 0;
}

void sub_22316DD70()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8D8] + 16;
  __cxa_throw(exception, MEMORY[0x24BEDB738], (void (*)(void *))std::exception::~exception);
}

void sub_22316DDA8(void ***a1)
{
  operator delete(**a1);
}

uint64_t sub_22316DDB4(_QWORD **a1)
{
  uint64_t result;

  result = MEMORY[0x2276857A4](*MEMORY[0x24BDAEC58], **a1, 12 * *((unsigned int *)*a1 + 2));
  if ((_DWORD)result)
  {
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Memory/include/Kit/Memory/VMAllocator.hpp", 81, (uint64_t)"", 0, (uint64_t)"Illegal or non-allocated address specified.", 43, (void (*)(void **))sub_22457406C);
    abort();
  }
  return result;
}

uint64_t sub_22316DE28(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD **v33;
  int v34;
  _QWORD *v35;

  v6 = a2;
  v8 = *(_QWORD *)(a1 + 16);
  result = *(_QWORD *)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - result) >> 2) >= a4)
  {
    v22 = *(_QWORD *)(a1 + 8);
    v20 = (uint64_t *)(a1 + 8);
    v21 = v22;
    v23 = 0xAAAAAAAAAAAAAAABLL * ((v22 - result) >> 2);
    if (v23 >= a4)
    {
      v30 = result;
      if (a2 != a3)
      {
        v31 = result;
        do
        {
          v32 = *v6;
          *(_DWORD *)(v31 + 8) = *((_DWORD *)v6 + 2);
          *(_QWORD *)v31 = v32;
          v31 += 12;
          v6 = (uint64_t *)((char *)v6 + 12);
          v30 += 12;
        }
        while (v6 != a3);
      }
      v19 = v30 - result;
    }
    else
    {
      v24 = (uint64_t *)((char *)a2 + 12 * v23);
      if (v21 != result)
      {
        v25 = 12 * v23;
        do
        {
          v26 = *v6;
          *(_DWORD *)(result + 8) = *((_DWORD *)v6 + 2);
          *(_QWORD *)result = v26;
          result += 12;
          v6 = (uint64_t *)((char *)v6 + 12);
          v25 -= 12;
        }
        while (v25);
        result = *v20;
      }
      v27 = result;
      if (v24 != a3)
      {
        v27 = result;
        v28 = result;
        do
        {
          v29 = *v24;
          *(_DWORD *)(v28 + 8) = *((_DWORD *)v24 + 2);
          *(_QWORD *)v28 = v29;
          v28 += 12;
          v24 = (uint64_t *)((char *)v24 + 12);
          v27 += 12;
        }
        while (v24 != a3);
      }
      v19 = v27 - result;
    }
  }
  else
  {
    if (result)
    {
      *(_QWORD *)(a1 + 8) = result;
      v33 = (_QWORD **)result;
      v34 = -1431655765 * ((v8 - result) >> 2);
      v10 = *(unsigned int *)(a1 + 28);
      if ((_DWORD)v10 == -1)
        sub_22316DD70();
      v35 = &v33;
      ((void (*)(_QWORD **, uint64_t))off_24EC1EF80[v10])(&v35, a1 + 24);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a4 > 0x1555555555555555)
      goto LABEL_31;
    v11 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2);
    v12 = 2 * v11;
    if (2 * v11 <= a4)
      v12 = a4;
    v13 = v11 >= 0xAAAAAAAAAAAAAAALL ? 0x1555555555555555 : v12;
    if (v13 > 0x1555555555555555)
LABEL_31:
      sub_22316E078();
    LODWORD(v35) = v13;
    v14 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v14 == -1)
      sub_22316DD70();
    v33 = &v35;
    result = ((uint64_t (*)(_QWORD ***, uint64_t))off_24EC1EF90[v14])(&v33, a1 + 24);
    *(_QWORD *)(a1 + 8) = result;
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 16) = result + 12 * v15;
    v16 = result;
    if (v6 != a3)
    {
      v16 = result;
      v17 = result;
      do
      {
        v18 = *v6;
        *(_DWORD *)(v17 + 8) = *((_DWORD *)v6 + 2);
        *(_QWORD *)v17 = v18;
        v17 += 12;
        v6 = (uint64_t *)((char *)v6 + 12);
        v16 += 12;
      }
      while (v6 != a3);
    }
    v19 = v16 - result;
    v20 = (uint64_t *)(a1 + 8);
  }
  *v20 = result + v19;
  return result;
}

void sub_22316E078()
{
  sub_22316DBD4("vector");
}

void *sub_22316E08C(unsigned int **a1)
{
  return operator new(12 * **a1);
}

vm_address_t sub_22316E0BC(unsigned int **a1)
{
  uint64_t v1;
  std::bad_alloc *exception;
  std::bad_alloc *v4;
  vm_address_t address;

  v1 = (((12 * **a1 + 4095) & 0x1FFFFFF000) * (unsigned __int128)0x1555555555555556uLL) >> 64;
  address = 0;
  if (vm_allocate(*MEMORY[0x24BDAEC58], &address, 12 * v1, 1))
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v4 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v4, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  return address;
}

uint64_t sub_22316E154(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  BOOL v10;
  _QWORD **v11;
  int v12;
  _QWORD **v13;
  int v14;
  _QWORD *v15;

  v2 = result;
  v3 = (_QWORD *)(result + 24);
  v4 = (_QWORD *)(a2 + 24);
  v5 = *(unsigned int *)(a2 + 28);
  v6 = *(_DWORD *)(result + 28);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    if ((_DWORD)v5 == -1)
      v10 = v6 == -1;
    else
      v10 = v8;
    if (v10)
      goto LABEL_21;
  }
  else
  {
    v13 = &v15;
    result = ((uint64_t (*)(_QWORD ***, uint64_t, _QWORD *))off_24EC1EFA0[v5])(&v13, a2 + 24, v3);
    if (!(_DWORD)result)
      goto LABEL_21;
    v6 = *(_DWORD *)(v2 + 28);
  }
  v11 = *(_QWORD ***)v2;
  *(_QWORD *)(v2 + 8) = *(_QWORD *)v2;
  v12 = -1431655765 * ((*(_QWORD *)(v2 + 16) - (_QWORD)v11) >> 2);
  v13 = v11;
  v14 = v12;
  if (v6 == -1)
    sub_22316DD70();
  v15 = &v13;
  result = ((uint64_t (*)(_QWORD **, _QWORD *))off_24EC1EFB0[v6])(&v15, v3);
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = 0;
LABEL_21:
  *v3 = *v4;
  return result;
}

uint64_t sub_22316E25C()
{
  return 0;
}

uint64_t sub_22316E264()
{
  return 0;
}

void sub_22316E26C(void ***a1)
{
  operator delete(**a1);
}

uint64_t sub_22316E278(_QWORD **a1)
{
  uint64_t result;

  result = MEMORY[0x2276857A4](*MEMORY[0x24BDAEC58], **a1, 12 * *((unsigned int *)*a1 + 2));
  if ((_DWORD)result)
  {
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Memory/include/Kit/Memory/VMAllocator.hpp", 81, (uint64_t)"", 0, (uint64_t)"Illegal or non-allocated address specified.", 43, (void (*)(void **))sub_22457406C);
    abort();
  }
  return result;
}

uint64_t sub_22316E2EC(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD **v33;
  int v34;
  _QWORD *v35;

  v6 = a2;
  v8 = *(_QWORD *)(a1 + 16);
  result = *(_QWORD *)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - result) >> 2) >= a4)
  {
    v22 = *(_QWORD *)(a1 + 8);
    v20 = (uint64_t *)(a1 + 8);
    v21 = v22;
    v23 = 0xAAAAAAAAAAAAAAABLL * ((v22 - result) >> 2);
    if (v23 >= a4)
    {
      v27 = result;
      if (a2 != a3)
      {
        v28 = result;
        do
        {
          if (v6 != (uint64_t *)v28)
          {
            v29 = *v6;
            *(_DWORD *)(v28 + 8) = *((_DWORD *)v6 + 2);
            *(_QWORD *)v28 = v29;
          }
          v6 = (uint64_t *)((char *)v6 + 12);
          v28 += 12;
          v27 += 12;
        }
        while (v6 != a3);
      }
      v19 = v27 - result;
    }
    else
    {
      v24 = (uint64_t *)((char *)a2 + 12 * v23);
      if (v21 != result)
      {
        v25 = 12 * v23;
        do
        {
          if (v6 != (uint64_t *)result)
          {
            v26 = *v6;
            *(_DWORD *)(result + 8) = *((_DWORD *)v6 + 2);
            *(_QWORD *)result = v26;
          }
          v6 = (uint64_t *)((char *)v6 + 12);
          result += 12;
          v25 -= 12;
        }
        while (v25);
        result = *v20;
      }
      v30 = result;
      if (v24 != a3)
      {
        v30 = result;
        v31 = result;
        do
        {
          v32 = *v24;
          *(_DWORD *)(v31 + 8) = *((_DWORD *)v24 + 2);
          *(_QWORD *)v31 = v32;
          v31 += 12;
          v24 = (uint64_t *)((char *)v24 + 12);
          v30 += 12;
        }
        while (v24 != a3);
      }
      v19 = v30 - result;
    }
  }
  else
  {
    if (result)
    {
      *(_QWORD *)(a1 + 8) = result;
      v33 = (_QWORD **)result;
      v34 = -1431655765 * ((v8 - result) >> 2);
      v10 = *(unsigned int *)(a1 + 28);
      if ((_DWORD)v10 == -1)
        sub_22316DD70();
      v35 = &v33;
      ((void (*)(_QWORD **, uint64_t))off_24EC1EFB0[v10])(&v35, a1 + 24);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a4 > 0x1555555555555555)
      goto LABEL_35;
    v11 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2);
    v12 = 2 * v11;
    if (2 * v11 <= a4)
      v12 = a4;
    v13 = v11 >= 0xAAAAAAAAAAAAAAALL ? 0x1555555555555555 : v12;
    if (v13 > 0x1555555555555555)
LABEL_35:
      sub_22316E078();
    LODWORD(v35) = v13;
    v14 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v14 == -1)
      sub_22316DD70();
    v33 = &v35;
    result = ((uint64_t (*)(_QWORD ***, uint64_t))off_24EC1EFC0[v14])(&v33, a1 + 24);
    *(_QWORD *)(a1 + 8) = result;
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 16) = result + 12 * v15;
    v16 = result;
    if (v6 != a3)
    {
      v16 = result;
      v17 = result;
      do
      {
        v18 = *v6;
        *(_DWORD *)(v17 + 8) = *((_DWORD *)v6 + 2);
        *(_QWORD *)v17 = v18;
        v17 += 12;
        v6 = (uint64_t *)((char *)v6 + 12);
        v16 += 12;
      }
      while (v6 != a3);
    }
    v19 = v16 - result;
    v20 = (uint64_t *)(a1 + 8);
  }
  *v20 = result + v19;
  return result;
}

void *sub_22316E564(unsigned int **a1)
{
  return operator new(12 * **a1);
}

vm_address_t sub_22316E594(unsigned int **a1)
{
  uint64_t v1;
  std::bad_alloc *exception;
  std::bad_alloc *v4;
  vm_address_t address;

  v1 = (((12 * **a1 + 4095) & 0x1FFFFFF000) * (unsigned __int128)0x1555555555555556uLL) >> 64;
  address = 0;
  if (vm_allocate(*MEMORY[0x24BDAEC58], &address, 12 * v1, 1))
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v4 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v4, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  return address;
}

uint64_t sub_22316E62C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  BOOL v10;
  _QWORD **v11;
  uint64_t v12;
  _QWORD **v13;
  int v14;
  _QWORD *v15;

  v2 = result;
  v3 = (_QWORD *)(result + 24);
  v4 = (_QWORD *)(a2 + 24);
  v5 = *(unsigned int *)(a2 + 28);
  v6 = *(_DWORD *)(result + 28);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    if ((_DWORD)v5 == -1)
      v10 = v6 == -1;
    else
      v10 = v8;
    if (v10)
      goto LABEL_21;
  }
  else
  {
    v13 = &v15;
    result = ((uint64_t (*)(_QWORD ***, uint64_t, _QWORD *))off_24EC1EFD0[v5])(&v13, a2 + 24, v3);
    if (!(_DWORD)result)
      goto LABEL_21;
    v6 = *(_DWORD *)(v2 + 28);
  }
  v11 = *(_QWORD ***)v2;
  *(_QWORD *)(v2 + 8) = *(_QWORD *)v2;
  v12 = (*(_QWORD *)(v2 + 16) - (_QWORD)v11) >> 3;
  v13 = v11;
  v14 = v12;
  if (v6 == -1)
    sub_22316DD70();
  v15 = &v13;
  result = ((uint64_t (*)(_QWORD **, _QWORD *))off_24EC1EFE0[v6])(&v15, v3);
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = 0;
LABEL_21:
  *v3 = *v4;
  return result;
}

uint64_t sub_22316E728()
{
  return 0;
}

uint64_t sub_22316E730()
{
  return 0;
}

void sub_22316E738(void ***a1)
{
  operator delete(**a1);
}

uint64_t sub_22316E744(_QWORD **a1)
{
  uint64_t result;

  result = MEMORY[0x2276857A4](*MEMORY[0x24BDAEC58], **a1, 8 * *((unsigned int *)*a1 + 2));
  if ((_DWORD)result)
  {
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Memory/include/Kit/Memory/VMAllocator.hpp", 81, (uint64_t)"", 0, (uint64_t)"Illegal or non-allocated address specified.", 43, (void (*)(void **))sub_22457406C);
    abort();
  }
  return result;
}

char *sub_22316E7B4(uint64_t a1, char *a2, char *a3, unint64_t a4)
{
  char *v6;
  uint64_t v8;
  char *result;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _OWORD *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  char *v25;
  char **v26;
  char *v27;
  int64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  int64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  char *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  int v49;
  char **v50;

  v6 = a2;
  v8 = *(_QWORD *)(a1 + 16);
  result = *(char **)a1;
  if (a4 > (v8 - (uint64_t)result) >> 3)
  {
    if (result)
    {
      *(_QWORD *)(a1 + 8) = result;
      v48 = result;
      v49 = (unint64_t)(v8 - (_QWORD)result) >> 3;
      v10 = *(unsigned int *)(a1 + 28);
      if ((_DWORD)v10 == -1)
        sub_22316DD70();
      v50 = &v48;
      ((void (*)(char ***, uint64_t))off_24EC1EFE0[v10])(&v50, a1 + 24);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a4 >> 61)
      goto LABEL_46;
    v11 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v11 = a4;
    v12 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
    v13 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v12)
      v13 = v11;
    if (v13 >> 61)
LABEL_46:
      sub_22316E078();
    LODWORD(v50) = v13;
    v14 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v14 == -1)
      sub_22316DD70();
    v48 = (char *)&v50;
    result = (char *)((uint64_t (*)(char **, uint64_t))off_24EC1EFF0[v14])(&v48, a1 + 24);
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = result;
    *(_QWORD *)(a1 + 16) = &result[8 * v15];
    v16 = result;
    if (v6 == a3)
      goto LABEL_41;
    v17 = a3 - v6 - 8;
    if (v17 < 0x18 || (unint64_t)(result - v6) < 0x20)
    {
      v20 = v6;
      v16 = result;
    }
    else
    {
      v18 = (v17 >> 3) + 1;
      v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
      v20 = &v6[v19];
      v16 = &result[v19];
      v21 = result + 16;
      v22 = (__int128 *)(v6 + 16);
      v23 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *v22;
        *(v21 - 1) = *(v22 - 1);
        *v21 = v24;
        v21 += 2;
        v22 += 2;
        v23 -= 4;
      }
      while (v23);
      if (v18 == (v18 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_41;
    }
    do
    {
      v46 = *(_QWORD *)v20;
      v20 += 8;
      *(_QWORD *)v16 = v46;
      v16 += 8;
    }
    while (v20 != a3);
LABEL_41:
    v35 = v16 - result;
    v26 = (char **)(a1 + 8);
    goto LABEL_45;
  }
  v27 = *(char **)(a1 + 8);
  v26 = (char **)(a1 + 8);
  v25 = v27;
  v28 = v27 - result;
  v29 = (v27 - result) >> 3;
  if (v29 < a4)
  {
    v30 = &a2[8 * v29];
    if (v25 != result)
    {
      v31 = 8 * v29;
      v32 = a2;
      do
      {
        if (v32 != result)
          *(_QWORD *)result = *(_QWORD *)v32;
        v32 += 8;
        result += 8;
        v31 -= 8;
      }
      while (v31);
      result = *v26;
    }
    v36 = result;
    if (v30 == a3)
      goto LABEL_44;
    v37 = &a2[v28];
    v38 = a3 - &a2[v28] - 8;
    if (v38 < 0x38)
    {
      v36 = result;
    }
    else
    {
      v39 = result - v37;
      v36 = result;
      if (v39 >= 0x20)
      {
        v40 = (v38 >> 3) + 1;
        v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
        v30 += v41;
        v36 = &result[v41];
        v42 = result + 16;
        v43 = &a2[8 * v29 + 16];
        v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v45 = *(_OWORD *)v43;
          *(v42 - 1) = *((_OWORD *)v43 - 1);
          *v42 = v45;
          v42 += 2;
          v43 += 32;
          v44 -= 4;
        }
        while (v44);
        if (v40 == (v40 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_44;
      }
    }
    do
    {
      v47 = *(_QWORD *)v30;
      v30 += 8;
      *(_QWORD *)v36 = v47;
      v36 += 8;
    }
    while (v30 != a3);
LABEL_44:
    v35 = v36 - result;
    goto LABEL_45;
  }
  v33 = result;
  if (a2 != a3)
  {
    v34 = result;
    do
    {
      if (v6 != v34)
        *(_QWORD *)v34 = *(_QWORD *)v6;
      v6 += 8;
      v34 += 8;
      v33 += 8;
    }
    while (v6 != a3);
  }
  v35 = v33 - result;
LABEL_45:
  *v26 = &result[v35];
  return result;
}

void *sub_22316EA9C(unsigned int **a1)
{
  return operator new(8 * **a1);
}

vm_address_t sub_22316EAC8(unsigned int **a1)
{
  uint64_t v1;
  std::bad_alloc *exception;
  std::bad_alloc *v4;
  vm_address_t address;

  v1 = (**a1 + 511) & 0x1FFFFFE00;
  address = 0;
  if (vm_allocate(*MEMORY[0x24BDAEC58], &address, 8 * v1, 1))
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v4 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v4, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  return address;
}

uint64_t sub_22316EB44(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  BOOL v10;
  _QWORD **v11;
  uint64_t v12;
  _QWORD **v13;
  int v14;
  _QWORD *v15;

  v2 = result;
  v3 = (_QWORD *)(result + 24);
  v4 = (_QWORD *)(a2 + 24);
  v5 = *(unsigned int *)(a2 + 28);
  v6 = *(_DWORD *)(result + 28);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    if ((_DWORD)v5 == -1)
      v10 = v6 == -1;
    else
      v10 = v8;
    if (v10)
      goto LABEL_21;
  }
  else
  {
    v13 = &v15;
    result = ((uint64_t (*)(_QWORD ***, uint64_t, _QWORD *))off_24EC1F000[v5])(&v13, a2 + 24, v3);
    if (!(_DWORD)result)
      goto LABEL_21;
    v6 = *(_DWORD *)(v2 + 28);
  }
  v11 = *(_QWORD ***)v2;
  *(_QWORD *)(v2 + 8) = *(_QWORD *)v2;
  v12 = (*(_QWORD *)(v2 + 16) - (_QWORD)v11) >> 3;
  v13 = v11;
  v14 = v12;
  if (v6 == -1)
    sub_22316DD70();
  v15 = &v13;
  result = ((uint64_t (*)(_QWORD **, _QWORD *))off_24EC1F010[v6])(&v15, v3);
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = 0;
LABEL_21:
  *v3 = *v4;
  return result;
}

uint64_t sub_22316EC40()
{
  return 0;
}

uint64_t sub_22316EC48()
{
  return 0;
}

void sub_22316EC50(void ***a1)
{
  operator delete(**a1);
}

uint64_t sub_22316EC5C(_QWORD **a1)
{
  uint64_t result;

  result = MEMORY[0x2276857A4](*MEMORY[0x24BDAEC58], **a1, 8 * *((unsigned int *)*a1 + 2));
  if ((_DWORD)result)
  {
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Memory/include/Kit/Memory/VMAllocator.hpp", 81, (uint64_t)"", 0, (uint64_t)"Illegal or non-allocated address specified.", 43, (void (*)(void **))sub_22457406C);
    abort();
  }
  return result;
}

uint64_t sub_22316ECCC(uint64_t *a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  _OWORD *v22;
  __int128 *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  __int128 *v35;
  _OWORD *v36;
  uint64_t v37;
  __int128 v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t *v43;
  __int128 *v44;
  _OWORD *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _OWORD *v58;
  __int128 *v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  _QWORD **v63;
  int v64;
  _QWORD *v65;

  v8 = a1[2];
  v9 = *a1;
  result = v9;
  if (a4 <= (v8 - v9) >> 3)
  {
    v28 = a1[1];
    v27 = a1 + 1;
    v26 = v28;
    v29 = v28 - v9;
    v30 = (v28 - v9) >> 3;
    if (v30 < a4)
    {
      v31 = (uint64_t *)(a2 + 8 * v30);
      if (v26 == v9)
        goto LABEL_44;
      if ((unint64_t)(v29 - 8) < 0x18)
      {
        v32 = (uint64_t *)a2;
      }
      else
      {
        v32 = (uint64_t *)a2;
        if ((unint64_t)(v9 - a2) >= 0x20)
        {
          v33 = ((unint64_t)(v29 - 8) >> 3) + 1;
          v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
          result = v9 + v34;
          v32 = (uint64_t *)(a2 + v34);
          v35 = (__int128 *)(a2 + 16);
          v36 = (_OWORD *)(v9 + 16);
          v37 = v33 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v38 = *v35;
            *(v36 - 1) = *(v35 - 1);
            *v36 = v38;
            v35 += 2;
            v36 += 2;
            v37 -= 4;
          }
          while (v37);
          if (v33 == (v33 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_43;
        }
      }
      do
      {
        v51 = *v32++;
        *(_QWORD *)result = v51;
        result += 8;
      }
      while (v32 != v31);
LABEL_43:
      result = *v27;
LABEL_44:
      v52 = (char *)result;
      if (v31 != a3)
      {
        v53 = v29 + a2;
        v54 = (unint64_t)a3 + -a2 - v29 - 8;
        if (v54 < 0x38)
        {
          v52 = (char *)result;
        }
        else
        {
          v55 = result - v53;
          v52 = (char *)result;
          if (v55 >= 0x20)
          {
            v56 = (v54 >> 3) + 1;
            v57 = 8 * (v56 & 0x3FFFFFFFFFFFFFFCLL);
            v31 = (uint64_t *)((char *)v31 + v57);
            v52 = (char *)(result + v57);
            v58 = (_OWORD *)(result + 16);
            v59 = (__int128 *)(a2 + 8 * v30 + 16);
            v60 = v56 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v61 = *v59;
              *(v58 - 1) = *(v59 - 1);
              *v58 = v61;
              v58 += 2;
              v59 += 2;
              v60 -= 4;
            }
            while (v60);
            if (v56 == (v56 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_53;
          }
        }
        do
        {
          v62 = *v31++;
          *(_QWORD *)v52 = v62;
          v52 += 8;
        }
        while (v31 != a3);
      }
LABEL_53:
      v49 = &v52[-result];
      goto LABEL_54;
    }
    if ((uint64_t *)a2 == a3)
    {
      v49 = 0;
      goto LABEL_54;
    }
    v39 = (unint64_t)a3 - a2 - 8;
    if (v39 < 0x18 || (unint64_t)(v9 - a2) < 0x20)
    {
      v42 = (_QWORD *)v9;
      v43 = (uint64_t *)a2;
    }
    else
    {
      v40 = (v39 >> 3) + 1;
      v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
      v42 = (_QWORD *)(v9 + v41);
      v43 = (uint64_t *)(a2 + v41);
      v44 = (__int128 *)(a2 + 16);
      v45 = (_OWORD *)(v9 + 16);
      v46 = v40 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v47 = *v44;
        *(v45 - 1) = *(v44 - 1);
        *v45 = v47;
        v44 += 2;
        v45 += 2;
        v46 -= 4;
      }
      while (v46);
      if (v40 == (v40 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_40;
    }
    do
    {
      v50 = *v43++;
      *v42++ = v50;
    }
    while (v43 != a3);
LABEL_40:
    v49 = (char *)v42 - v9;
    goto LABEL_54;
  }
  if (v9)
  {
    a1[1] = v9;
    v63 = (_QWORD **)v9;
    v64 = (unint64_t)(v8 - v9) >> 3;
    v11 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v11 == -1)
      sub_22316DD70();
    v65 = &v63;
    ((void (*)(_QWORD **, uint64_t *))off_24EC1F010[v11])(&v65, a1 + 3);
    v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  if (a4 >> 61)
    goto LABEL_55;
  v12 = v8 >> 2;
  if (v8 >> 2 <= a4)
    v12 = a4;
  v13 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
  v14 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v13)
    v14 = v12;
  if (v14 >> 61)
LABEL_55:
    sub_22316E078();
  LODWORD(v65) = v14;
  v15 = *((unsigned int *)a1 + 7);
  if ((_DWORD)v15 == -1)
    sub_22316DD70();
  v63 = &v65;
  result = ((uint64_t (*)(_QWORD ***, uint64_t *))off_24EC1F020[v15])(&v63, a1 + 3);
  *a1 = result;
  a1[1] = result;
  a1[2] = result + 8 * v16;
  v17 = (char *)result;
  if ((uint64_t *)a2 == a3)
    goto LABEL_36;
  v18 = (unint64_t)a3 - a2 - 8;
  if (v18 < 0x18 || (unint64_t)(result - a2) < 0x20)
  {
    v21 = (uint64_t *)a2;
    v17 = (char *)result;
  }
  else
  {
    v19 = (v18 >> 3) + 1;
    v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    v21 = (uint64_t *)(a2 + v20);
    v17 = (char *)(result + v20);
    v22 = (_OWORD *)(result + 16);
    v23 = (__int128 *)(a2 + 16);
    v24 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v25 = *v23;
      *(v22 - 1) = *(v23 - 1);
      *v22 = v25;
      v22 += 2;
      v23 += 2;
      v24 -= 4;
    }
    while (v24);
    if (v19 == (v19 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_36;
  }
  do
  {
    v48 = *v21++;
    *(_QWORD *)v17 = v48;
    v17 += 8;
  }
  while (v21 != a3);
LABEL_36:
  v49 = &v17[-result];
  v27 = a1 + 1;
LABEL_54:
  *v27 = (uint64_t)&v49[result];
  return result;
}

void *sub_22316F054(unsigned int **a1)
{
  return operator new(8 * **a1);
}

vm_address_t sub_22316F080(unsigned int **a1)
{
  uint64_t v1;
  std::bad_alloc *exception;
  std::bad_alloc *v4;
  vm_address_t address;

  v1 = (**a1 + 511) & 0x1FFFFFE00;
  address = 0;
  if (vm_allocate(*MEMORY[0x24BDAEC58], &address, 8 * v1, 1))
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v4 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v4, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  return address;
}

uint64_t sub_22316F0FC(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  BOOL v10;
  _QWORD **v11;
  int v12;
  _QWORD **v13;
  int v14;
  _QWORD *v15;

  v2 = result;
  v3 = (_QWORD *)(result + 24);
  v4 = (_QWORD *)(a2 + 24);
  v5 = *(unsigned int *)(a2 + 28);
  v6 = *(_DWORD *)(result + 28);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    if ((_DWORD)v5 == -1)
      v10 = v6 == -1;
    else
      v10 = v8;
    if (v10)
      goto LABEL_21;
  }
  else
  {
    v13 = &v15;
    result = ((uint64_t (*)(_QWORD ***, uint64_t, _QWORD *))off_24EC1F030[v5])(&v13, a2 + 24, v3);
    if (!(_DWORD)result)
      goto LABEL_21;
    v6 = *(_DWORD *)(v2 + 28);
  }
  v11 = *(_QWORD ***)v2;
  *(_QWORD *)(v2 + 8) = *(_QWORD *)v2;
  v12 = *(_DWORD *)(v2 + 16) - (_DWORD)v11;
  v13 = v11;
  v14 = v12;
  if (v6 == -1)
    sub_22316DD70();
  v15 = &v13;
  result = ((uint64_t (*)(_QWORD **, _QWORD *))off_24EC1F040[v6])(&v15, v3);
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = 0;
LABEL_21:
  *v3 = *v4;
  return result;
}

uint64_t sub_22316F1F4()
{
  return 0;
}

uint64_t sub_22316F1FC()
{
  return 0;
}

void sub_22316F204(void ***a1)
{
  operator delete(**a1);
}

uint64_t sub_22316F210(_QWORD **a1)
{
  uint64_t result;

  result = MEMORY[0x2276857A4](*MEMORY[0x24BDAEC58], **a1, *((unsigned int *)*a1 + 2));
  if ((_DWORD)result)
  {
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Memory/include/Kit/Memory/VMAllocator.hpp", 81, (uint64_t)"", 0, (uint64_t)"Illegal or non-allocated address specified.", 43, (void (*)(void **))sub_22457406C);
    abort();
  }
  return result;
}

unint64_t *sub_22316F27C(unint64_t *result, char *__src, char *a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  size_t v18;
  char *v19;
  _BYTE *v20;
  size_t v21;
  char *v22;
  size_t v23;
  _QWORD **v24;
  int v25;
  _QWORD *v26;

  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  v10 = v8 - *result;
  if (v10 >= a4)
  {
    v20 = (_BYTE *)result[1];
    v21 = v20 - v9;
    if (v20 - v9 >= a4)
    {
      v23 = a3 - __src;
      if (v23)
        result = (unint64_t *)memmove((void *)*result, __src, v23);
      v19 = &v9[v23];
    }
    else
    {
      v22 = &__src[v21];
      if (v20 != v9)
      {
        result = (unint64_t *)memmove((void *)*result, __src, v21);
        v9 = (char *)v7[1];
      }
      if (a3 != v22)
        result = (unint64_t *)memmove(v9, v22, a3 - v22);
      v19 = &v9[a3 - v22];
    }
  }
  else
  {
    if (v9)
    {
      result[1] = (unint64_t)v9;
      v24 = (_QWORD **)v9;
      v25 = v10;
      v11 = *((unsigned int *)result + 7);
      if ((_DWORD)v11 == -1)
        sub_22316DD70();
      v26 = &v24;
      ((void (*)(_QWORD **, unint64_t *))off_24EC1F040[v11])(&v26, result + 3);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      goto LABEL_25;
    v12 = 2 * v8;
    if (2 * v8 <= a4)
      v12 = a4;
    v13 = v8 >= 0x3FFFFFFFFFFFFFFFLL;
    v14 = 0x7FFFFFFFFFFFFFFFLL;
    if (!v13)
      v14 = v12;
    if (v14 < 0)
LABEL_25:
      sub_22316E078();
    LODWORD(v26) = v14;
    v15 = *((unsigned int *)v7 + 7);
    if ((_DWORD)v15 == -1)
      sub_22316DD70();
    v24 = &v26;
    result = (unint64_t *)((uint64_t (*)(_QWORD ***, _QWORD *))off_24EC1F050[v15])(&v24, v7 + 3);
    v16 = result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v17;
    v18 = a3 - __src;
    if (v18)
      result = (unint64_t *)memmove(result, __src, v18);
    v19 = (char *)v16 + v18;
  }
  v7[1] = v19;
  return result;
}

void *sub_22316F420(unsigned int **a1)
{
  return operator new(**a1);
}

vm_address_t sub_22316F44C(unsigned int **a1)
{
  vm_size_t v1;
  std::bad_alloc *exception;
  std::bad_alloc *v4;
  vm_address_t address;

  v1 = (**a1 + 4095) & 0x1FFFFF000;
  address = 0;
  if (vm_allocate(*MEMORY[0x24BDAEC58], &address, v1, 1))
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v4 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v4, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  return address;
}

uint64_t sub_22316F4C8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  BOOL v10;
  _QWORD **v11;
  uint64_t v12;
  _QWORD **v13;
  int v14;
  _QWORD *v15;

  v2 = result;
  v3 = (_QWORD *)(result + 24);
  v4 = (_QWORD *)(a2 + 24);
  v5 = *(unsigned int *)(a2 + 28);
  v6 = *(_DWORD *)(result + 28);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    if ((_DWORD)v5 == -1)
      v10 = v6 == -1;
    else
      v10 = v8;
    if (v10)
      goto LABEL_21;
  }
  else
  {
    v13 = &v15;
    result = ((uint64_t (*)(_QWORD ***, uint64_t, _QWORD *))off_24EC1F060[v5])(&v13, a2 + 24, v3);
    if (!(_DWORD)result)
      goto LABEL_21;
    v6 = *(_DWORD *)(v2 + 28);
  }
  v11 = *(_QWORD ***)v2;
  *(_QWORD *)(v2 + 8) = *(_QWORD *)v2;
  v12 = (*(_QWORD *)(v2 + 16) - (_QWORD)v11) >> 2;
  v13 = v11;
  v14 = v12;
  if (v6 == -1)
    sub_22316DD70();
  v15 = &v13;
  result = ((uint64_t (*)(_QWORD **, _QWORD *))off_24EC1F070[v6])(&v15, v3);
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = 0;
LABEL_21:
  *v3 = *v4;
  return result;
}

uint64_t sub_22316F5C4()
{
  return 0;
}

uint64_t sub_22316F5CC()
{
  return 0;
}

void sub_22316F5D4(void ***a1)
{
  operator delete(**a1);
}

uint64_t sub_22316F5E0(_QWORD **a1)
{
  uint64_t result;

  result = MEMORY[0x2276857A4](*MEMORY[0x24BDAEC58], **a1, 4 * *((unsigned int *)*a1 + 2));
  if ((_DWORD)result)
  {
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Memory/include/Kit/Memory/VMAllocator.hpp", 81, (uint64_t)"", 0, (uint64_t)"Illegal or non-allocated address specified.", 43, (void (*)(void **))sub_22457406C);
    abort();
  }
  return result;
}

_QWORD *sub_22316F650(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  char **v18;
  char *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  int v24;
  char **v25;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  v10 = v8 - *result;
  if (a4 > v10 >> 2)
  {
    if (v9)
    {
      result[1] = v9;
      v23 = v9;
      v24 = (unint64_t)v10 >> 2;
      v11 = *((unsigned int *)result + 7);
      if ((_DWORD)v11 == -1)
        sub_22316DD70();
      v25 = &v23;
      ((void (*)(char ***, _QWORD *))off_24EC1F070[v11])(&v25, result + 3);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      goto LABEL_24;
    v12 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v12 = a4;
    v13 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL;
    v14 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v13)
      v14 = v12;
    if (v14 >> 62)
LABEL_24:
      sub_22316E078();
    LODWORD(v25) = v14;
    v15 = *((unsigned int *)v7 + 7);
    if ((_DWORD)v15 == -1)
      sub_22316DD70();
    v23 = (char *)&v25;
    result = (_QWORD *)((uint64_t (*)(char **, _QWORD *))off_24EC1F080[v15])(&v23, v7 + 3);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + 4 * v16;
    v17 = a3 - v6;
    if (v17)
      result = memmove(result, v6, v17);
    v18 = (char **)(v7 + 1);
    goto LABEL_23;
  }
  v18 = (char **)(result + 1);
  v19 = (char *)result[1];
  v20 = (v19 - v9) >> 2;
  if (v20 >= a4)
  {
    v17 = a3 - __src;
    if (a3 == __src)
      goto LABEL_23;
    v22 = (char *)*result;
LABEL_22:
    result = memmove(v22, __src, v17);
    goto LABEL_23;
  }
  v21 = &__src[4 * v20];
  if (v19 != v9)
  {
    result = memmove((void *)*result, __src, v19 - v9);
    v9 = *v18;
  }
  v17 = a3 - v21;
  if (v17)
  {
    v22 = v9;
    __src = v21;
    goto LABEL_22;
  }
LABEL_23:
  *v18 = &v9[v17];
  return result;
}

void *sub_22316F800(unsigned int **a1)
{
  return operator new(4 * **a1);
}

vm_address_t sub_22316F82C(unsigned int **a1)
{
  uint64_t v1;
  std::bad_alloc *exception;
  std::bad_alloc *v4;
  vm_address_t address;

  v1 = (**a1 + 1023) & 0x1FFFFFC00;
  address = 0;
  if (vm_allocate(*MEMORY[0x24BDAEC58], &address, 4 * v1, 1))
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v4 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v4, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  return address;
}

void sub_22316F8A8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F0A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22316F8B8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F0A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t *sub_22316F8E8(uint64_t a1)
{
  return sub_22316F8F4((uint64_t *)(a1 + 24));
}

uint64_t *sub_22316F8F4(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v33;
  int v34;
  uint64_t *v35;

  v2 = a1[40];
  if (v2)
  {
    a1[41] = v2;
    v3 = (unint64_t)(a1[42] - v2) >> 2;
    v33 = v2;
    v34 = v3;
    v4 = *((unsigned int *)a1 + 87);
    if ((_DWORD)v4 == -1)
      sub_22316DD70();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24EC1F070[v4])(&v35, a1 + 43);
  }
  v5 = a1[35];
  if (v5)
  {
    a1[36] = v5;
    v6 = *((_DWORD *)a1 + 74) - v5;
    v33 = v5;
    v34 = v6;
    v7 = *((unsigned int *)a1 + 77);
    if ((_DWORD)v7 == -1)
      sub_22316DD70();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24EC1F040[v7])(&v35, a1 + 38);
  }
  v8 = a1[30];
  if (v8)
  {
    a1[31] = v8;
    v9 = *((_DWORD *)a1 + 64) - v8;
    v33 = v8;
    v34 = v9;
    v10 = *((unsigned int *)a1 + 67);
    if ((_DWORD)v10 == -1)
      sub_22316DD70();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24EC1F040[v10])(&v35, a1 + 33);
  }
  v11 = a1[26];
  if (v11)
  {
    a1[27] = v11;
    v12 = -1431655765 * ((unint64_t)(a1[28] - v11) >> 2);
    v33 = v11;
    v34 = v12;
    v13 = *((unsigned int *)a1 + 59);
    if ((_DWORD)v13 == -1)
      sub_22316DD70();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24EC1EFB0[v13])(&v35, a1 + 29);
  }
  v14 = a1[22];
  if (v14)
  {
    a1[23] = v14;
    v15 = (unint64_t)(a1[24] - v14) >> 3;
    v33 = v14;
    v34 = v15;
    v16 = *((unsigned int *)a1 + 51);
    if ((_DWORD)v16 == -1)
      sub_22316DD70();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24EC1F010[v16])(&v35, a1 + 25);
  }
  v17 = a1[18];
  if (v17)
  {
    a1[19] = v17;
    v18 = (unint64_t)(a1[20] - v17) >> 3;
    v33 = v17;
    v34 = v18;
    v19 = *((unsigned int *)a1 + 43);
    if ((_DWORD)v19 == -1)
      sub_22316DD70();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24EC1EFE0[v19])(&v35, a1 + 21);
  }
  v20 = a1[14];
  if (v20)
  {
    a1[15] = v20;
    v21 = -1431655765 * ((unint64_t)(a1[16] - v20) >> 2);
    v33 = v20;
    v34 = v21;
    v22 = *((unsigned int *)a1 + 35);
    if ((_DWORD)v22 == -1)
      sub_22316DD70();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24EC1EFB0[v22])(&v35, a1 + 17);
  }
  v23 = a1[9];
  if (v23)
  {
    a1[10] = v23;
    v24 = -1431655765 * ((unint64_t)(a1[11] - v23) >> 2);
    v33 = v23;
    v34 = v24;
    v25 = *((unsigned int *)a1 + 25);
    if ((_DWORD)v25 == -1)
      sub_22316DD70();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24EC1EF80[v25])(&v35, a1 + 12);
  }
  v26 = a1[4];
  if (v26)
  {
    a1[5] = v26;
    v27 = -1431655765 * ((unint64_t)(a1[6] - v26) >> 2);
    v33 = v26;
    v34 = v27;
    v28 = *((unsigned int *)a1 + 15);
    if ((_DWORD)v28 == -1)
      sub_22316DD70();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24EC1EF80[v28])(&v35, a1 + 7);
  }
  v29 = *a1;
  if (*a1)
  {
    a1[1] = v29;
    v30 = -1431655765 * ((unint64_t)(a1[2] - v29) >> 2);
    v33 = v29;
    v34 = v30;
    v31 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v31 == -1)
      sub_22316DD70();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24EC1EF80[v31])(&v35, a1 + 3);
  }
  return a1;
}

id CV3DReconPointCloudGetPointsAsMTLBufferForDevice(uint64_t a1, void *a2, CFTypeRef *a3)
{
  id v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *__p;
  void *v15[4];
  const void *v16;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  v5 = a2;
  if (a1 && (v8 = *(_QWORD *)(a1 + 8), v7 = (uint64_t *)(a1 + 8), (v6 = v8) != 0))
  {
    sub_22316FE80(v6, v5, v7, a3);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    HIBYTE(v15[2]) = 18;
    strcpy((char *)v15, "PointCloud is NULL");
    __p = (char *)operator new(0x70uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPointCloud.mm");
    if (a3)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_2245321DC(&v18, (uint64_t)v15, (CFErrorRef *)&v16);
      sub_224532194(&v16, a3);
      v10 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
    operator delete(__p);
    if (SHIBYTE(v15[2]) < 0)
      operator delete(v15[0]);
    v9 = 0;
  }

  return v9;
}

void sub_22316FE0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  void *v23;

  sub_223167354((uint64_t)&a23);
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:

      _Unwind_Resume(a1);
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);

  _Unwind_Resume(a1);
}

id sub_22316FE80(uint64_t a1, void *a2, uint64_t *a3, CFTypeRef *a4)
{
  id v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *p_shared_owners;
  void *v18;
  char *__p;
  char *v21[4];
  const void *v22;
  std::__shared_weak_count *v23;
  std::error_condition v24;

  v7 = a2;
  v9 = v7;
  if (v7)
  {
    v10 = *(const char **)a1;
    v11 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)a1 != v11)
    {
      v12 = v11 - (_QWORD)v10;
      if (*(_DWORD *)(a1 + 28) == 1)
        v13 = sub_223171238(0xAAAAAAAAAAAAAAABLL * (v12 >> 2), (uint64_t)v10, v7, a3);
      else
        v13 = objc_msgSend_newBufferWithBytes_length_options_(v7, v10, *(_QWORD *)a1, v12, 0, v8);
      v18 = (void *)v13;
      goto LABEL_21;
    }
    v21[0] = (char *)operator new(0x28uLL);
    *(_OWORD *)&v21[1] = xmmword_2245B8E00;
    strcpy(v21[0], "Cannot allocate MTLBuffer of size zero");
    __p = (char *)operator new(0x70uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPointCloud.mm");
    if (a4)
    {
      *(_QWORD *)&v24.__val_ = 22;
      v24.__cat_ = std::generic_category();
      sub_2245321DC(&v24, (uint64_t)v21, (CFErrorRef *)&v22);
      sub_224532194(&v22, a4);
      v14 = v23;
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        goto LABEL_14;
      }
    }
  }
  else
  {
    HIBYTE(v21[2]) = 17;
    strcpy((char *)v21, "MTLDevice is NULL");
    __p = (char *)operator new(0x70uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPointCloud.mm");
    if (a4)
    {
      *(_QWORD *)&v24.__val_ = 22;
      v24.__cat_ = std::generic_category();
      sub_2245321DC(&v24, (uint64_t)v21, (CFErrorRef *)&v22);
      sub_224532194(&v22, a4);
      v14 = v23;
      if (v23)
      {
        v15 = (unint64_t *)&v23->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
LABEL_14:
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }
  }
  operator delete(__p);
  if (SHIBYTE(v21[2]) < 0)
    operator delete(v21[0]);
  v18 = 0;
LABEL_21:

  return v18;
}

void sub_2231700E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  void *v23;

  sub_223167354((uint64_t)&a23);
  if (a15 < 0)
  {
    operator delete(__p);
    if (a21 < 0)
    {
LABEL_5:
      operator delete(a16);

      _Unwind_Resume(a1);
    }
  }
  else if (a21 < 0)
  {
    goto LABEL_5;
  }

  _Unwind_Resume(a1);
}

void sub_223170174(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id CV3DReconPointCloudGetPointsConfidenceAsMTLBufferForDevice(uint64_t a1, void *a2, CFTypeRef *a3)
{
  id v5;
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *v20;
  char *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *p_shared_owners;
  char *__p;
  char *__pa;
  char *v29[4];
  const void *v30;
  std::__shared_weak_count *v31;
  std::error_condition v32;

  v5 = a2;
  v6 = v5;
  if (a1)
  {
    v9 = *(_QWORD *)(a1 + 8);
    v7 = (uint64_t *)(a1 + 8);
    v8 = v9;
    if (v9)
    {
      v10 = v5;
      v12 = v10;
      if (v10)
      {
        v13 = *(const char **)(v8 + 64);
        v14 = *(const char **)(v8 + 72);
        if (v13 != v14)
        {
          v15 = v14 - v13;
          if (*(_DWORD *)(v8 + 92) == 1)
            v16 = sub_223171408(v15 >> 2, (uint64_t)v13, v10, v7);
          else
            v16 = objc_msgSend_newBufferWithBytes_length_options_(v10, v13, *(_QWORD *)(v8 + 64), v15, 0, v11);
          v20 = (void *)v16;
LABEL_33:

          goto LABEL_34;
        }
        v29[0] = (char *)operator new(0x28uLL);
        *(_OWORD *)&v29[1] = xmmword_2245B8E00;
        strcpy(v29[0], "Cannot allocate MTLBuffer of size zero");
        v21 = (char *)operator new(0x70uLL);
        __pa = v21;
        strcpy(v21, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPointCloud.mm");
        if (a3)
        {
          *(_QWORD *)&v32.__val_ = 22;
          v32.__cat_ = std::generic_category();
          sub_2245321DC(&v32, (uint64_t)v29, (CFErrorRef *)&v30);
          sub_224532194(&v30, a3);
          v22 = v31;
          if (v31)
          {
            p_shared_owners = (unint64_t *)&v31->__shared_owners_;
            do
              v24 = __ldaxr(p_shared_owners);
            while (__stlxr(v24 - 1, p_shared_owners));
            goto LABEL_25;
          }
          goto LABEL_27;
        }
      }
      else
      {
        HIBYTE(v29[2]) = 17;
        strcpy((char *)v29, "MTLDevice is NULL");
        v21 = (char *)operator new(0x70uLL);
        __pa = v21;
        strcpy(v21, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPointCloud.mm");
        if (a3)
        {
          *(_QWORD *)&v32.__val_ = 22;
          v32.__cat_ = std::generic_category();
          sub_2245321DC(&v32, (uint64_t)v29, (CFErrorRef *)&v30);
          sub_224532194(&v30, a3);
          v22 = v31;
          if (v31)
          {
            v23 = (unint64_t *)&v31->__shared_owners_;
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
LABEL_25:
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
LABEL_27:
          v21 = __pa;
        }
      }
      operator delete(v21);
      if (SHIBYTE(v29[2]) < 0)
        operator delete(v29[0]);
      v20 = 0;
      goto LABEL_33;
    }
  }
  HIBYTE(v29[2]) = 18;
  strcpy((char *)v29, "PointCloud is NULL");
  __p = (char *)operator new(0x70uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPointCloud.mm");
  if (a3)
  {
    *(_QWORD *)&v32.__val_ = 22;
    v32.__cat_ = std::generic_category();
    sub_2245321DC(&v32, (uint64_t)v29, (CFErrorRef *)&v30);
    sub_224532194(&v30, a3);
    v17 = v31;
    if (v31)
    {
      v18 = (unint64_t *)&v31->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  operator delete(__p);
  if (SHIBYTE(v29[2]) < 0)
    operator delete(v29[0]);
  v20 = 0;
LABEL_34:

  return v20;
}

void sub_2231704F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  void *v23;
  void *v24;

  sub_223167354((uint64_t)&a23);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
  {
    operator delete(a16);

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void sub_223170568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  void *v23;

  sub_223167354((uint64_t)&a23);
  if (a15 < 0)
  {
    operator delete(__p);
    if (a21 < 0)
    {
LABEL_5:
      operator delete(a16);

      _Unwind_Resume(a1);
    }
  }
  else if (a21 < 0)
  {
    goto LABEL_5;
  }

  _Unwind_Resume(a1);
}

id CV3DReconPointCloudGetColorAsMTLBufferForDevice(uint64_t a1, void *a2, CFTypeRef *a3)
{
  id v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *__p;
  void *v15[4];
  const void *v16;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  v5 = a2;
  if (a1 && (v8 = *(_QWORD *)(a1 + 8), v7 = (uint64_t *)(a1 + 8), (v6 = v8) != 0))
  {
    sub_22316FE80(v6 + 96, v5, v7, a3);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    HIBYTE(v15[2]) = 18;
    strcpy((char *)v15, "PointCloud is NULL");
    __p = (char *)operator new(0x70uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPointCloud.mm");
    if (a3)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_2245321DC(&v18, (uint64_t)v15, (CFErrorRef *)&v16);
      sub_224532194(&v16, a3);
      v10 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
    operator delete(__p);
    if (SHIBYTE(v15[2]) < 0)
      operator delete(v15[0]);
    v9 = 0;
  }

  return v9;
}

void sub_22317073C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  void *v23;

  sub_223167354((uint64_t)&a23);
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:

      _Unwind_Resume(a1);
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);

  _Unwind_Resume(a1);
}

id CV3DReconPointCloudGetNormalsAsMTLBufferForDevice(uint64_t a1, void *a2, CFTypeRef *a3)
{
  id v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *__p;
  void *v15[4];
  const void *v16;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  v5 = a2;
  if (a1 && (v8 = *(_QWORD *)(a1 + 8), v7 = (uint64_t *)(a1 + 8), (v6 = v8) != 0))
  {
    sub_22316FE80(v6 + 128, v5, v7, a3);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    HIBYTE(v15[2]) = 18;
    strcpy((char *)v15, "PointCloud is NULL");
    __p = (char *)operator new(0x70uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPointCloud.mm");
    if (a3)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_2245321DC(&v18, (uint64_t)v15, (CFErrorRef *)&v16);
      sub_224532194(&v16, a3);
      v10 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
    operator delete(__p);
    if (SHIBYTE(v15[2]) < 0)
      operator delete(v15[0]);
    v9 = 0;
  }

  return v9;
}

void sub_223170920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  void *v23;

  sub_223167354((uint64_t)&a23);
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:

      _Unwind_Resume(a1);
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);

  _Unwind_Resume(a1);
}

id CV3DReconPointCloudGetSemanticLabelAsMTLBufferForDevice(uint64_t a1, void *a2, CFTypeRef *a3)
{
  id v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *__p;
  void *v15[4];
  const void *v16;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  v5 = a2;
  if (a1 && (v8 = *(_QWORD *)(a1 + 8), v7 = (uint64_t *)(a1 + 8), (v6 = v8) != 0))
  {
    sub_223170B78(v6 + 160, v5, v7, a3);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    HIBYTE(v15[2]) = 18;
    strcpy((char *)v15, "PointCloud is NULL");
    __p = (char *)operator new(0x70uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPointCloud.mm");
    if (a3)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_2245321DC(&v18, (uint64_t)v15, (CFErrorRef *)&v16);
      sub_224532194(&v16, a3);
      v10 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
    operator delete(__p);
    if (SHIBYTE(v15[2]) < 0)
      operator delete(v15[0]);
    v9 = 0;
  }

  return v9;
}

void sub_223170B04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  void *v23;

  sub_223167354((uint64_t)&a23);
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:

      _Unwind_Resume(a1);
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);

  _Unwind_Resume(a1);
}

id sub_223170B78(uint64_t a1, void *a2, uint64_t *a3, CFTypeRef *a4)
{
  id v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *p_shared_owners;
  void *v17;
  char *__p;
  char *v20[4];
  const void *v21;
  std::__shared_weak_count *v22;
  std::error_condition v23;

  v7 = a2;
  v9 = v7;
  if (v7)
  {
    v10 = *(const char **)a1;
    v11 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)a1 != v11)
    {
      if (*(_DWORD *)(a1 + 28) == 1)
        v12 = sub_22317156C(v11 - (_QWORD)v10, (uint64_t)v10, v7, a3);
      else
        v12 = objc_msgSend_newBufferWithBytes_length_options_(v7, v10, *(_QWORD *)a1, v11 - (_QWORD)v10, 0, v8);
      v17 = (void *)v12;
      goto LABEL_21;
    }
    v20[0] = (char *)operator new(0x28uLL);
    *(_OWORD *)&v20[1] = xmmword_2245B8E00;
    strcpy(v20[0], "Cannot allocate MTLBuffer of size zero");
    __p = (char *)operator new(0x70uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPointCloud.mm");
    if (a4)
    {
      *(_QWORD *)&v23.__val_ = 22;
      v23.__cat_ = std::generic_category();
      sub_2245321DC(&v23, (uint64_t)v20, (CFErrorRef *)&v21);
      sub_224532194(&v21, a4);
      v13 = v22;
      if (v22)
      {
        p_shared_owners = (unint64_t *)&v22->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        goto LABEL_14;
      }
    }
  }
  else
  {
    HIBYTE(v20[2]) = 17;
    strcpy((char *)v20, "MTLDevice is NULL");
    __p = (char *)operator new(0x70uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPointCloud.mm");
    if (a4)
    {
      *(_QWORD *)&v23.__val_ = 22;
      v23.__cat_ = std::generic_category();
      sub_2245321DC(&v23, (uint64_t)v20, (CFErrorRef *)&v21);
      sub_224532194(&v21, a4);
      v13 = v22;
      if (v22)
      {
        v14 = (unint64_t *)&v22->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
LABEL_14:
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
  }
  operator delete(__p);
  if (SHIBYTE(v20[2]) < 0)
    operator delete(v20[0]);
  v17 = 0;
LABEL_21:

  return v17;
}

void sub_223170DD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  void *v23;

  sub_223167354((uint64_t)&a23);
  if (a15 < 0)
  {
    operator delete(__p);
    if (a21 < 0)
    {
LABEL_5:
      operator delete(a16);

      _Unwind_Resume(a1);
    }
  }
  else if (a21 < 0)
  {
    goto LABEL_5;
  }

  _Unwind_Resume(a1);
}

void sub_223170E60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id CV3DReconPointCloudGetMaterialLabelAsMTLBufferForDevice(uint64_t a1, void *a2, CFTypeRef *a3)
{
  id v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *__p;
  void *v15[4];
  const void *v16;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  v5 = a2;
  if (a1 && (v8 = *(_QWORD *)(a1 + 8), v7 = (uint64_t *)(a1 + 8), (v6 = v8) != 0))
  {
    sub_223170B78(v6 + 256, v5, v7, a3);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    HIBYTE(v15[2]) = 18;
    strcpy((char *)v15, "PointCloud is NULL");
    __p = (char *)operator new(0x70uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPointCloud.mm");
    if (a3)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_2245321DC(&v18, (uint64_t)v15, (CFErrorRef *)&v16);
      sub_224532194(&v16, a3);
      v10 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
    operator delete(__p);
    if (SHIBYTE(v15[2]) < 0)
      operator delete(v15[0]);
    v9 = 0;
  }

  return v9;
}

void sub_223170FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  void *v23;

  sub_223167354((uint64_t)&a23);
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:

      _Unwind_Resume(a1);
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);

  _Unwind_Resume(a1);
}

id CV3DReconPointCloudGetSceneTypeLabelAsMTLBufferForDevice(uint64_t a1, void *a2, CFTypeRef *a3)
{
  id v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *__p;
  void *v15[4];
  const void *v16;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  v5 = a2;
  if (a1 && (v8 = *(_QWORD *)(a1 + 8), v7 = (uint64_t *)(a1 + 8), (v6 = v8) != 0))
  {
    sub_223170B78(v6 + 352, v5, v7, a3);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    HIBYTE(v15[2]) = 18;
    strcpy((char *)v15, "PointCloud is NULL");
    __p = (char *)operator new(0x70uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPointCloud.mm");
    if (a3)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_2245321DC(&v18, (uint64_t)v15, (CFErrorRef *)&v16);
      sub_224532194(&v16, a3);
      v10 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
    operator delete(__p);
    if (SHIBYTE(v15[2]) < 0)
      operator delete(v15[0]);
    v9 = 0;
  }

  return v9;
}

void sub_2231711C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  void *v23;

  sub_223167354((uint64_t)&a23);
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:

      _Unwind_Resume(a1);
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);

  _Unwind_Resume(a1);
}

uint64_t sub_223171238(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  unint64_t v6;
  id v7;
  const char *v8;
  void *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD v19[5];
  _QWORD v20[7];
  std::__shared_weak_count *v21;

  v6 = (12 * a1 + 4095) & 0xFFFFFFFFFFFFF000;
  v7 = a3;
  v9 = v7;
  v20[0] = 0;
  v20[1] = v20;
  v20[2] = 0x4012000000;
  v20[3] = sub_22317139C;
  v20[4] = sub_2231713AC;
  v11 = *a4;
  v10 = (std::__shared_weak_count *)a4[1];
  v20[5] = "";
  v20[6] = v11;
  v21 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v19[0] = MEMORY[0x24BDAC760];
  v19[1] = 3221225472;
  v19[2] = nullsub_1;
  v19[3] = &unk_24EC1F0E8;
  v19[4] = v20;
  v14 = objc_msgSend_newBufferWithBytesNoCopy_length_options_deallocator_(v7, v8, a2, v6, 0, (uint64_t)v19);
  _Block_object_dispose(v20, 8);
  v15 = v21;
  if (v21)
  {
    v16 = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

  return v14;
}

void sub_223171378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  uint64_t v8;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  sub_223167354(v8);

  _Unwind_Resume(a1);
}

__n128 sub_22317139C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

void sub_2231713AC(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t sub_223171408(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  unint64_t v6;
  id v7;
  const char *v8;
  void *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD v19[5];
  _QWORD v20[7];
  std::__shared_weak_count *v21;

  v6 = (4 * a1 + 4095) & 0xFFFFFFFFFFFFF000;
  v7 = a3;
  v9 = v7;
  v20[0] = 0;
  v20[1] = v20;
  v20[2] = 0x4012000000;
  v20[3] = sub_22317139C;
  v20[4] = sub_2231713AC;
  v11 = *a4;
  v10 = (std::__shared_weak_count *)a4[1];
  v20[5] = "";
  v20[6] = v11;
  v21 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v19[0] = MEMORY[0x24BDAC760];
  v19[1] = 3221225472;
  v19[2] = nullsub_2;
  v19[3] = &unk_24EC1F0E8;
  v19[4] = v20;
  v14 = objc_msgSend_newBufferWithBytesNoCopy_length_options_deallocator_(v7, v8, a2, v6, 0, (uint64_t)v19);
  _Block_object_dispose(v20, 8);
  v15 = v21;
  if (v21)
  {
    v16 = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

  return v14;
}

void sub_223171544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  uint64_t v8;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  sub_223167354(v8);

  _Unwind_Resume(a1);
}

uint64_t sub_22317156C(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  unint64_t v6;
  id v7;
  const char *v8;
  void *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD v19[5];
  _QWORD v20[7];
  std::__shared_weak_count *v21;

  v6 = (a1 + 4095) & 0xFFFFFFFFFFFFF000;
  v7 = a3;
  v9 = v7;
  v20[0] = 0;
  v20[1] = v20;
  v20[2] = 0x4012000000;
  v20[3] = sub_22317139C;
  v20[4] = sub_2231713AC;
  v11 = *a4;
  v10 = (std::__shared_weak_count *)a4[1];
  v20[5] = "";
  v20[6] = v11;
  v21 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v19[0] = MEMORY[0x24BDAC760];
  v19[1] = 3221225472;
  v19[2] = nullsub_3;
  v19[3] = &unk_24EC1F0E8;
  v19[4] = v20;
  v14 = objc_msgSend_newBufferWithBytesNoCopy_length_options_deallocator_(v7, v8, a2, v6, 0, (uint64_t)v19);
  _Block_object_dispose(v20, 8);
  v15 = v21;
  if (v21)
  {
    v16 = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

  return v14;
}

void sub_2231716A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  uint64_t v8;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  sub_223167354(v8);

  _Unwind_Resume(a1);
}

_QWORD *CV3DReconRoomBoundaryResultCreate(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = operator new(0x90uLL, MEMORY[0x24BEDB6B8]);
  v3 = v2;
  if (a1)
  {
    if (v2)
    {
      sub_223173FE0((uint64_t)v2, a1);
LABEL_6:
      *v3 = &off_24EC29A40;
    }
  }
  else if (v2)
  {
    *((_OWORD *)v2 + 6) = 0u;
    *((_OWORD *)v2 + 7) = 0u;
    *((_OWORD *)v2 + 8) = 0u;
    *((_OWORD *)v2 + 4) = 0u;
    *((_OWORD *)v2 + 5) = 0u;
    *((_OWORD *)v2 + 2) = 0u;
    *((_OWORD *)v2 + 3) = 0u;
    *(_OWORD *)v2 = 0u;
    *((_OWORD *)v2 + 1) = 0u;
    *((_DWORD *)v2 + 14) = 1065353216;
    *((_DWORD *)v2 + 19) = 1065353216;
    *((_DWORD *)v2 + 24) = 1065353216;
    *((_DWORD *)v2 + 29) = 1065353216;
    *((_DWORD *)v2 + 35) = 1;
    goto LABEL_6;
  }
  return v3;
}

uint64_t sub_223171760(void *a1)
{
  uint64_t v1;

  MEMORY[0x227684CD0](v1, MEMORY[0x24BEDB6B8]);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  return 0;
}

uint64_t CV3DReconRoomBoundaryResultRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 140);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DReconRoomBoundaryResultRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 140);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CV3DReconRoomBoundaryResultCreateRoom(_QWORD *a1, CFTypeRef *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *__p;
  void *v8;
  __int128 v9;
  const void *v10;
  std::__shared_weak_count *v11;
  std::error_condition v12;

  if (a1)
    return sub_2232D347C(a1);
  v8 = operator new(0x20uLL);
  v9 = xmmword_2245B8D70;
  strcpy((char *)v8, "RoomBoundaryResult is NULL");
  __p = (char *)operator new(0x78uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconRoomBoundaryResult.mm");
  if (a2)
  {
    *(_QWORD *)&v12.__val_ = 22;
    v12.__cat_ = std::generic_category();
    sub_2245321DC(&v12, (uint64_t)&v8, (CFErrorRef *)&v10);
    sub_224532194(&v10, a2);
    v4 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  operator delete(__p);
  if (SHIBYTE(v9) < 0)
    operator delete(v8);
  return 0;
}

void sub_22317194C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconRoomBoundaryResultGetRoomCount(uint64_t a1, CFTypeRef *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *__p;
  void *v8;
  __int128 v9;
  const void *v10;
  std::__shared_weak_count *v11;
  std::error_condition v12;

  if (a1)
    return sub_2232D3460(a1);
  v8 = operator new(0x20uLL);
  v9 = xmmword_2245B8D70;
  strcpy((char *)v8, "RoomBoundaryResult is NULL");
  __p = (char *)operator new(0x78uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconRoomBoundaryResult.mm");
  if (a2)
  {
    *(_QWORD *)&v12.__val_ = 22;
    v12.__cat_ = std::generic_category();
    sub_2245321DC(&v12, (uint64_t)&v8, (CFErrorRef *)&v10);
    sub_224532194(&v10, a2);
    v4 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  operator delete(__p);
  if (SHIBYTE(v9) < 0)
    operator delete(v8);
  return 0;
}

void sub_223171B14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

float CV3DReconRoomBoundaryResultGetRoomKeyframeContribution(uint64_t a1, unsigned int a2, unsigned int a3, CFTypeRef *a4)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *__p;
  void *v10;
  __int128 v11;
  const void *v12;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return sub_2232D5868(a1, a2, a3, a4);
  v10 = operator new(0x20uLL);
  v11 = xmmword_2245B8D70;
  strcpy((char *)v10, "RoomBoundaryResult is NULL");
  __p = (char *)operator new(0x78uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconRoomBoundaryResult.mm");
  if (a4)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)&v10, (CFErrorRef *)&v12);
    sub_224532194(&v12, a4);
    v6 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(__p);
  if (SHIBYTE(v11) < 0)
    operator delete(v10);
  return 0.0;
}

void sub_223171CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconRoomBoundaryResultGetRoomKeyframeCount(uint64_t a1, unsigned int a2, CFTypeRef *a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char *__p;
  void *v9;
  __int128 v10;
  const void *v11;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
  {
    LODWORD(v9) = 0;
    if (sub_2232D3870(a1, a2, &v9, a3))
      return v9;
    else
      return 0;
  }
  else
  {
    v9 = operator new(0x20uLL);
    v10 = xmmword_2245B8D70;
    strcpy((char *)v9, "RoomBoundaryResult is NULL");
    __p = (char *)operator new(0x78uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconRoomBoundaryResult.mm");
    if (a3)
    {
      *(_QWORD *)&v13.__val_ = 22;
      v13.__cat_ = std::generic_category();
      sub_2245321DC(&v13, (uint64_t)&v9, (CFErrorRef *)&v11);
      sub_224532194(&v11, a3);
      v5 = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    operator delete(__p);
    if (SHIBYTE(v10) < 0)
      operator delete(v9);
    return 0;
  }
}

void sub_223171EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

CFTypeRef CV3DReconRoomBoundaryResultCopyRoomKeyframeId(uint64_t a1, unsigned int a2, unsigned int a3, CFTypeRef *a4)
{
  CFTypeRef v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  CFTypeRef cf;
  __int128 v17;
  const void *v18;
  std::__shared_weak_count *v19;
  std::error_condition v20;
  void *__p;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    sub_223227CCC(&__p);
    if (sub_2232D3CB0(a1, a2, a3, &__p, a4))
    {
      sub_224533434((std::__shared_weak_count_vtbl **)&cf, (CFUUIDBytes *)&__p);
      v8 = cf;
      if (cf)
        j__CFRetain(cf);
      v9 = (std::__shared_weak_count *)v17;
      if ((_QWORD)v17)
      {
        v10 = (unint64_t *)(v17 + 8);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    __p = operator new(0x20uLL);
    v22 = xmmword_2245B8D70;
    strcpy((char *)__p, "RoomBoundaryResult is NULL");
    cf = operator new(0x78uLL);
    v17 = xmmword_2245B8E20;
    strcpy((char *)cf, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconRoomBoundaryResult.mm");
    if (!a4)
      goto LABEL_17;
    *(_QWORD *)&v20.__val_ = 22;
    v20.__cat_ = std::generic_category();
    sub_2245321DC(&v20, (uint64_t)&__p, (CFErrorRef *)&v18);
    sub_224532194(&v18, a4);
    v12 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (SHIBYTE(v17) < 0)
LABEL_17:
      operator delete((void *)cf);
    if (SHIBYTE(v22) < 0)
      operator delete(__p);
    return 0;
  }
  return v8;
}

void sub_223172140(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223172154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  sub_223167354((uint64_t)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

CFTypeRef CV3DReconRoomBoundaryResultCopyRoomId(uint64_t a1, unsigned int a2, CFTypeRef *a3)
{
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  CFTypeRef cf;
  __int128 v15;
  const void *v16;
  std::__shared_weak_count *v17;
  std::error_condition v18;
  void *__p;
  __int128 v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    sub_223227CCC(&__p);
    if (sub_2232D3A50(a1, a2, &__p, a3))
    {
      sub_224533434((std::__shared_weak_count_vtbl **)&cf, (CFUUIDBytes *)&__p);
      v6 = cf;
      if (cf)
        j__CFRetain(cf);
      v7 = (std::__shared_weak_count *)v15;
      if ((_QWORD)v15)
      {
        v8 = (unint64_t *)(v15 + 8);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    __p = operator new(0x20uLL);
    v20 = xmmword_2245B8D70;
    strcpy((char *)__p, "RoomBoundaryResult is NULL");
    cf = operator new(0x78uLL);
    v15 = xmmword_2245B8E20;
    strcpy((char *)cf, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconRoomBoundaryResult.mm");
    if (!a3)
      goto LABEL_17;
    *(_QWORD *)&v18.__val_ = 22;
    v18.__cat_ = std::generic_category();
    sub_2245321DC(&v18, (uint64_t)&__p, (CFErrorRef *)&v16);
    sub_224532194(&v16, a3);
    v10 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    if (SHIBYTE(v15) < 0)
LABEL_17:
      operator delete((void *)cf);
    if (SHIBYTE(v20) < 0)
      operator delete(__p);
    return 0;
  }
  return v6;
}

void sub_2231723CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231723E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  sub_223167354((uint64_t)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

CFTypeRef CV3DReconRoomBoundaryResultCopyCurrentRoomId(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  CFTypeRef cf;
  __int128 v13;
  const void *v14;
  std::__shared_weak_count *v15;
  std::error_condition v16;
  char *v17;
  __int128 v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    sub_223227CCC(&v17);
    if (sub_2232D3C28(a1, &v17))
    {
      sub_224533434((std::__shared_weak_count_vtbl **)&cf, (CFUUIDBytes *)&v17);
      v4 = cf;
      if (cf)
        j__CFRetain(cf);
      v5 = (std::__shared_weak_count *)v13;
      if ((_QWORD)v13)
      {
        v6 = (unint64_t *)(v13 + 8);
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 - 1, v6));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v17 = (char *)operator new(0x20uLL);
    v18 = xmmword_2245B8D70;
    strcpy(v17, "RoomBoundaryResult is NULL");
    cf = operator new(0x78uLL);
    v13 = xmmword_2245B8E20;
    strcpy((char *)cf, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconRoomBoundaryResult.mm");
    if (!a2)
      goto LABEL_17;
    *(_QWORD *)&v16.__val_ = 22;
    v16.__cat_ = std::generic_category();
    sub_2245321DC(&v16, (uint64_t)&v17, (CFErrorRef *)&v14);
    sub_224532194(&v14, a2);
    v8 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (SHIBYTE(v13) < 0)
LABEL_17:
      operator delete((void *)cf);
    if (SHIBYTE(v18) < 0)
      operator delete(v17);
    return 0;
  }
  return v4;
}

void sub_223172648(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22317265C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  sub_223167354((uint64_t)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v16 - 25) < 0)
  {
    operator delete(*(void **)(v16 - 48));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t CV3DReconRoomBoundaryResultGetCurrentRoomIndex(uint64_t a1, _DWORD *a2, CFTypeRef *a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *p_shared_owners;
  char *__p;
  void *v10;
  __int128 v11;
  const void *v12;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
  {
    if (a2)
      return sub_2232D3C44(a1, a2);
    v10 = operator new(0x20uLL);
    v11 = xmmword_2245B8E30;
    strcpy((char *)v10, "index output pointer was null");
    __p = (char *)operator new(0x78uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconRoomBoundaryResult.mm");
    if (a3)
    {
      *(_QWORD *)&v14.__val_ = 22;
      v14.__cat_ = std::generic_category();
      sub_2245321DC(&v14, (uint64_t)&v10, (CFErrorRef *)&v12);
      sub_224532194(&v12, a3);
      v5 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        goto LABEL_13;
      }
    }
  }
  else
  {
    v10 = operator new(0x20uLL);
    v11 = xmmword_2245B8D70;
    strcpy((char *)v10, "RoomBoundaryResult is NULL");
    __p = (char *)operator new(0x78uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconRoomBoundaryResult.mm");
    if (a3)
    {
      *(_QWORD *)&v14.__val_ = 22;
      v14.__cat_ = std::generic_category();
      sub_2245321DC(&v14, (uint64_t)&v10, (CFErrorRef *)&v12);
      sub_224532194(&v12, a3);
      v5 = v13;
      if (v13)
      {
        v6 = (unint64_t *)&v13->__shared_owners_;
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 - 1, v6));
LABEL_13:
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
  }
  operator delete(__p);
  if (SHIBYTE(v11) < 0)
    operator delete(v10);
  return 0;
}

void sub_2231728FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if (a20 < 0)
    {
LABEL_5:
      operator delete(a15);
      _Unwind_Resume(a1);
    }
  }
  else if (a20 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

uint64_t CV3DReconRoomBoundaryResultGetRoomBoundaryLength(uint64_t a1, unsigned int a2, CFTypeRef *a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char *__p;
  void *v9;
  __int128 v10;
  const void *v11;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return sub_2232D3FF0(a1, a2, a3);
  v9 = operator new(0x20uLL);
  v10 = xmmword_2245B8D70;
  strcpy((char *)v9, "RoomBoundaryResult is NULL");
  __p = (char *)operator new(0x78uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconRoomBoundaryResult.mm");
  if (a3)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&v9, (CFErrorRef *)&v11);
    sub_224532194(&v11, a3);
    v5 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  operator delete(__p);
  if (SHIBYTE(v10) < 0)
    operator delete(v9);
  return 0;
}

void sub_223172ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

double CV3DReconRoomBoundaryResultGetRoomBoundaryCeilingPoint(float32x2_t *a1, unsigned int a2, unsigned int a3, CFTypeRef *a4, float32x4_t a5, double a6, double a7, double a8, float32x2_t a9, double a10, float32x2_t a11)
{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  char *__p;
  void *v17;
  __int128 v18;
  const void *v19;
  std::__shared_weak_count *v20;
  std::error_condition v21;

  if (a1)
    return sub_2232D41F0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  v17 = operator new(0x20uLL);
  v18 = xmmword_2245B8D70;
  strcpy((char *)v17, "RoomBoundaryResult is NULL");
  __p = (char *)operator new(0x78uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconRoomBoundaryResult.mm");
  if (a4)
  {
    *(_QWORD *)&v21.__val_ = 22;
    v21.__cat_ = std::generic_category();
    sub_2245321DC(&v21, (uint64_t)&v17, (CFErrorRef *)&v19);
    sub_224532194(&v19, a4);
    v13 = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  operator delete(__p);
  if (SHIBYTE(v18) < 0)
    operator delete(v17);
  return 0.0;
}

void sub_223172CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

double CV3DReconRoomBoundaryResultGetRoomBoundaryFloorPoint(float32x2_t *a1, unsigned int a2, unsigned int a3, CFTypeRef *a4, float32x4_t a5, double a6, double a7, double a8, float32x2_t a9, double a10, float32x2_t a11)
{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  char *__p;
  void *v17;
  __int128 v18;
  const void *v19;
  std::__shared_weak_count *v20;
  std::error_condition v21;

  if (a1)
    return sub_2232D46F0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  v17 = operator new(0x20uLL);
  v18 = xmmword_2245B8D70;
  strcpy((char *)v17, "RoomBoundaryResult is NULL");
  __p = (char *)operator new(0x78uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconRoomBoundaryResult.mm");
  if (a4)
  {
    *(_QWORD *)&v21.__val_ = 22;
    v21.__cat_ = std::generic_category();
    sub_2245321DC(&v21, (uint64_t)&v17, (CFErrorRef *)&v19);
    sub_224532194(&v19, a4);
    v13 = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  operator delete(__p);
  if (SHIBYTE(v18) < 0)
    operator delete(v17);
  return 0.0;
}

void sub_223172E6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

float CV3DReconRoomBoundaryResultGetRoomBoundaryEdgeCompleteness(uint64_t a1, unsigned int a2, unsigned int a3, CFTypeRef *a4)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *__p;
  void *v10;
  __int128 v11;
  const void *v12;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return sub_2232D4BEC(a1, a2, a3, a4);
  v10 = operator new(0x20uLL);
  v11 = xmmword_2245B8D70;
  strcpy((char *)v10, "RoomBoundaryResult is NULL");
  __p = (char *)operator new(0x78uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconRoomBoundaryResult.mm");
  if (a4)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)&v10, (CFErrorRef *)&v12);
    sub_224532194(&v12, a4);
    v6 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(__p);
  if (SHIBYTE(v11) < 0)
    operator delete(v10);
  return 0.0;
}

void sub_223173034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

char *CV3DReconRoomBoundaryResultGetRoomMeshCopy(uint64_t a1, unsigned int a2, CFTypeRef *a3)
{
  void *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  char *__p;
  const void *v20;
  std::__shared_weak_count *v21;
  std::error_condition v22;
  void *v23;
  _QWORD v24[9];
  char v25;
  _BYTE v26[28];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    sub_2232D5064(a1, a2, a3, (uint64_t)&v23);
    v4 = v23;
    if (v23)
    {
      v5 = (char *)operator new(0x80uLL, MEMORY[0x24BEDB6B8]);
      v6 = v5;
      if (v5)
      {
        v7 = v24[0];
        *((_QWORD *)v5 + 1) = v4;
        *((_QWORD *)v5 + 2) = v7;
        if (v7)
        {
          v8 = (unint64_t *)(v7 + 8);
          do
            v9 = __ldxr(v8);
          while (__stxr(v9 + 1, v8));
        }
        v5[24] = 0;
        v5[88] = 0;
        if (v25)
        {
          v10 = *(_OWORD *)&v24[3];
          *(_OWORD *)(v5 + 24) = *(_OWORD *)&v24[1];
          *(_OWORD *)(v5 + 40) = v10;
          v11 = *(_OWORD *)&v24[7];
          *(_OWORD *)(v5 + 56) = *(_OWORD *)&v24[5];
          *(_OWORD *)(v5 + 72) = v11;
          v5[88] = 1;
        }
        *(_OWORD *)(v5 + 92) = *(_OWORD *)v26;
        *(_OWORD *)(v5 + 104) = *(_OWORD *)&v26[12];
        *((_DWORD *)v5 + 30) = 1;
        *(_QWORD *)v5 = &off_24EC1F598;
      }
      v12 = (std::__shared_weak_count *)v24[0];
      if (!v24[0])
        return v6;
    }
    else
    {
      v6 = 0;
      v12 = (std::__shared_weak_count *)v24[0];
      if (!v24[0])
        return v6;
    }
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    return v6;
  }
  v23 = operator new(0x20uLL);
  *(_OWORD *)v24 = xmmword_2245B8D70;
  strcpy((char *)v23, "RoomBoundaryResult is NULL");
  __p = (char *)operator new(0x78uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconRoomBoundaryResult.mm");
  if (a3)
  {
    *(_QWORD *)&v22.__val_ = 22;
    v22.__cat_ = std::generic_category();
    sub_2245321DC(&v22, (uint64_t)&v23, (CFErrorRef *)&v20);
    sub_224532194(&v20, a3);
    v13 = v21;
    if (v21)
    {
      v14 = (unint64_t *)&v21->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  operator delete(__p);
  if (SHIBYTE(v24[1]) < 0)
    operator delete(v23);
  return 0;
}

void sub_2231732F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_223167354((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  if (a24 < 0)
  {
    operator delete(a19);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

float CV3DReconRoomBoundaryResultGetRoomCompleteness(uint64_t a1, unsigned int a2, CFTypeRef *a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char *__p;
  void *v9;
  __int128 v10;
  const void *v11;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return sub_2232D52D0(a1, a2, a3);
  v9 = operator new(0x20uLL);
  v10 = xmmword_2245B8D70;
  strcpy((char *)v9, "RoomBoundaryResult is NULL");
  __p = (char *)operator new(0x78uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconRoomBoundaryResult.mm");
  if (a3)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&v9, (CFErrorRef *)&v11);
    sub_224532194(&v11, a3);
    v5 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  operator delete(__p);
  if (SHIBYTE(v10) < 0)
    operator delete(v9);
  return 0.0;
}

void sub_2231734B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

float CV3DReconRoomBoundaryResultGetRoomStability(uint64_t a1, unsigned int a2, CFTypeRef *a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char *__p;
  void *v9;
  __int128 v10;
  const void *v11;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return sub_2232D54C0(a1, a2, a3);
  v9 = operator new(0x20uLL);
  v10 = xmmword_2245B8D70;
  strcpy((char *)v9, "RoomBoundaryResult is NULL");
  __p = (char *)operator new(0x78uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconRoomBoundaryResult.mm");
  if (a3)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&v9, (CFErrorRef *)&v11);
    sub_224532194(&v11, a3);
    v5 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  operator delete(__p);
  if (SHIBYTE(v10) < 0)
    operator delete(v9);
  return 0.0;
}

void sub_223173678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

float CV3DReconRoomBoundaryResultGetRoomChange(uint64_t a1, unsigned int a2, CFTypeRef *a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char *__p;
  void *v9;
  __int128 v10;
  const void *v11;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return sub_2232D5678(a1, a2, a3);
  v9 = operator new(0x20uLL);
  v10 = xmmword_2245B8D70;
  strcpy((char *)v9, "RoomBoundaryResult is NULL");
  __p = (char *)operator new(0x78uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconRoomBoundaryResult.mm");
  if (a3)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&v9, (CFErrorRef *)&v11);
    sub_224532194(&v11, a3);
    v5 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  operator delete(__p);
  if (SHIBYTE(v10) < 0)
    operator delete(v9);
  return 0.0;
}

void sub_223173840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconRoomBoundaryResultGetRoomSceneTypeIndoorOutdoorLabel(uint64_t a1, unsigned int a2, CFTypeRef *a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char *__p;
  void *v9;
  __int128 v10;
  const void *v11;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return sub_2232D5BA0(a1, a2, a3);
  v9 = operator new(0x20uLL);
  v10 = xmmword_2245B8D70;
  strcpy((char *)v9, "RoomBoundaryResult is NULL");
  __p = (char *)operator new(0x78uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconRoomBoundaryResult.mm");
  if (a3)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&v9, (CFErrorRef *)&v11);
    sub_224532194(&v11, a3);
    v5 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  operator delete(__p);
  if (SHIBYTE(v10) < 0)
    operator delete(v9);
  return 0;
}

void sub_223173A08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

BOOL CV3DReconRoomBoundaryResultSetRoomMesh(uint64_t a1, unsigned int a2, uint64_t a3, CFTypeRef *a4)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  _BOOL8 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  char *__p;
  void *v20;
  __int128 v21;
  const void *v22;
  std::__shared_weak_count *v23;
  std::error_condition v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char v31;
  _BYTE v32[28];
  _OWORD v33[7];
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    if (!a3)
    {
      memset(v33, 0, sizeof(v33));
      v10 = sub_2232D5D90(a1, a2, (uint64_t *)v33, a4);
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v33[0] + 1);
      if (!*((_QWORD *)&v33[0] + 1))
        return v10;
      v17 = (unint64_t *)(*((_QWORD *)&v33[0] + 1) + 8);
      do
        v13 = __ldaxr(v17);
      while (__stlxr(v13 - 1, v17));
      goto LABEL_24;
    }
    v5 = *(std::__shared_weak_count **)(a3 + 16);
    v25 = *(_QWORD *)(a3 + 8);
    v26 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    LOBYTE(v27) = 0;
    v31 = 0;
    if (*(_BYTE *)(a3 + 88))
    {
      v8 = *(_OWORD *)(a3 + 40);
      v27 = *(_OWORD *)(a3 + 24);
      v28 = v8;
      v9 = *(_OWORD *)(a3 + 72);
      v29 = *(_OWORD *)(a3 + 56);
      v30 = v9;
      v31 = 1;
    }
    *(_OWORD *)v32 = *(_OWORD *)(a3 + 92);
    *(_OWORD *)&v32[12] = *(_OWORD *)(a3 + 104);
    v10 = sub_2232D5D90(a1, a2, &v25, a4);
    v11 = v26;
    if (v26)
    {
      v12 = (unint64_t *)&v26->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
LABEL_24:
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else
  {
    v20 = operator new(0x20uLL);
    v21 = xmmword_2245B8D70;
    strcpy((char *)v20, "RoomBoundaryResult is NULL");
    __p = (char *)operator new(0x78uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconRoomBoundaryResult.mm");
    if (a4)
    {
      *(_QWORD *)&v24.__val_ = 22;
      v24.__cat_ = std::generic_category();
      sub_2245321DC(&v24, (uint64_t)&v20, (CFErrorRef *)&v22);
      sub_224532194(&v22, a4);
      v14 = v23;
      if (v23)
      {
        v15 = (unint64_t *)&v23->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }
    operator delete(__p);
    if (SHIBYTE(v21) < 0)
      operator delete(v20);
    return 0;
  }
  return v10;
}

void sub_223173CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  sub_223167354(v25 - 160);
  _Unwind_Resume(a1);
}

_QWORD *sub_223173D34(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;

  v2 = (_QWORD *)a1[4];
  if (v2)
  {
    v3 = (_QWORD *)a1[5];
    v4 = v2;
    if (v3 != v2)
    {
      do
        v3 = sub_223173E64(v3 - 45);
      while (v3 != v2);
      v4 = (void *)a1[4];
    }
    a1[5] = v2;
    operator delete(v4);
  }
  v5 = (_QWORD *)a1[1];
  if (v5)
  {
    v6 = (_QWORD *)a1[2];
    v7 = (void *)a1[1];
    if (v6 != v5)
    {
      do
        v6 = sub_223173E64(v6 - 45);
      while (v6 != v5);
      v7 = (void *)a1[1];
    }
    a1[2] = v5;
    operator delete(v7);
  }
  return a1;
}

void sub_223173DC4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;

  v2 = (_QWORD *)a1[4];
  if (v2)
  {
    v3 = (_QWORD *)a1[5];
    v4 = v2;
    if (v3 != v2)
    {
      do
        v3 = sub_223173E64(v3 - 45);
      while (v3 != v2);
      v4 = (void *)a1[4];
    }
    a1[5] = v2;
    operator delete(v4);
  }
  v5 = (_QWORD *)a1[1];
  if (v5)
  {
    v6 = (_QWORD *)a1[2];
    v7 = (void *)a1[1];
    if (v6 != v5)
    {
      do
        v6 = sub_223173E64(v6 - 45);
      while (v6 != v5);
      v7 = (void *)a1[1];
    }
    a1[2] = v5;
    operator delete(v7);
  }
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223173E64(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;
  void *v18;

  v2 = (std::__shared_weak_count *)a1[30];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[16];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[16];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[14];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)a1[12];
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)a1[12];
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  v14 = (std::__shared_weak_count *)a1[10];
  if (!v14)
    goto LABEL_25;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (v16)
  {
LABEL_25:
    v17 = (void *)a1[6];
    if (!v17)
      goto LABEL_27;
    goto LABEL_26;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  v17 = (void *)a1[6];
  if (v17)
  {
LABEL_26:
    a1[7] = v17;
    operator delete(v17);
  }
LABEL_27:
  v18 = (void *)a1[3];
  if (v18)
  {
    a1[4] = v18;
    operator delete(v18);
  }
  return a1;
}

uint64_t sub_223173FE0(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  sub_2231740C8(a1 + 8, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), 0x4FA4FA4FA4FA4FA5 * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3));
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  sub_2231740C8(a1 + 32, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), 0x4FA4FA4FA4FA4FA5 * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3));
  v4 = *(_OWORD *)(a2 + 56);
  v5 = *(_OWORD *)(a2 + 72);
  v6 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v6;
  *(_OWORD *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 56) = v4;
  v7 = *(_OWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = v7;
  *(_QWORD *)a1 = &off_24EC1F118;
  *(_DWORD *)(a1 + 140) = 1;
  return a1;
}

void sub_2231740A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD **v2;

  if (*v2)
    sub_2245742D8(v1, *v2, (void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

uint64_t sub_2231740C8(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;

  if (a4)
  {
    v5 = (_QWORD *)result;
    if (a4 >= 0xB60B60B60B60B7)
      sub_22316E078();
    result = (uint64_t)operator new(360 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = result + 360 * a4;
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = sub_223174250(v8 + v9, (__int128 *)(a2 + v9));
        v9 += 360;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_223174188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_2231741CC(&a9);
  _Unwind_Resume(a1);
}

void sub_22317419C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 360)
    sub_223173E64((_QWORD *)(v10 - 360 + v11));
  *(_QWORD *)(v9 + 8) = v10;
  sub_2231741CC(&a9);
  _Unwind_Resume(a1);
}

void ***sub_2231741CC(void ***result)
{
  void ***v1;
  void **v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = **result;
    if (v3)
    {
      v4 = v2[1];
      v5 = **v1;
      if (v4 != v3)
      {
        do
          v4 = sub_223173E64(v4 - 45);
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_223174250(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v4 = *a2;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)a1 = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v6 = (_BYTE *)*((_QWORD *)a2 + 3);
  v5 = (_BYTE *)*((_QWORD *)a2 + 4);
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0)
      sub_22316E078();
    v8 = (char *)operator new(v5 - v6);
    *(_QWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 32) = v8;
    v9 = &v8[16 * (v7 >> 4)];
    *(_QWORD *)(a1 + 40) = v9;
    memcpy(v8, v6, v7);
    *(_QWORD *)(a1 + 32) = v9;
  }
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v11 = (_BYTE *)*((_QWORD *)a2 + 6);
  v10 = (_BYTE *)*((_QWORD *)a2 + 7);
  v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0)
      sub_22316E078();
    v13 = (char *)operator new(v10 - v11);
    *(_QWORD *)(a1 + 48) = v13;
    *(_QWORD *)(a1 + 56) = v13;
    v14 = &v13[4 * (v12 >> 2)];
    *(_QWORD *)(a1 + 64) = v14;
    memcpy(v13, v11, v12);
    *(_QWORD *)(a1 + 56) = v14;
  }
  v15 = *((_QWORD *)a2 + 10);
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
  *(_QWORD *)(a1 + 80) = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = *((_QWORD *)a2 + 12);
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  *(_QWORD *)(a1 + 96) = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = *((_QWORD *)a2 + 14);
  *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
  *(_QWORD *)(a1 + 112) = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = *((_QWORD *)a2 + 16);
  *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
  *(_QWORD *)(a1 + 128) = v24;
  if (v24)
  {
    v25 = (unint64_t *)(v24 + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  *(_BYTE *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  if (*((_BYTE *)a2 + 200))
  {
    v27 = *(__int128 *)((char *)a2 + 136);
    v28 = *(__int128 *)((char *)a2 + 152);
    v29 = *(__int128 *)((char *)a2 + 184);
    *(_OWORD *)(a1 + 168) = *(__int128 *)((char *)a2 + 168);
    *(_OWORD *)(a1 + 184) = v29;
    *(_OWORD *)(a1 + 136) = v27;
    *(_OWORD *)(a1 + 152) = v28;
    *(_BYTE *)(a1 + 200) = 1;
  }
  v30 = *(__int128 *)((char *)a2 + 204);
  *(_OWORD *)(a1 + 216) = *(__int128 *)((char *)a2 + 216);
  *(_OWORD *)(a1 + 204) = v30;
  v31 = *((_QWORD *)a2 + 30);
  *(_QWORD *)(a1 + 232) = *((_QWORD *)a2 + 29);
  *(_QWORD *)(a1 + 240) = v31;
  if (v31)
  {
    v32 = (unint64_t *)(v31 + 8);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  *(_BYTE *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 312) = 0;
  if (*((_BYTE *)a2 + 312))
  {
    v34 = *(__int128 *)((char *)a2 + 248);
    v35 = *(__int128 *)((char *)a2 + 264);
    v36 = *(__int128 *)((char *)a2 + 296);
    *(_OWORD *)(a1 + 280) = *(__int128 *)((char *)a2 + 280);
    *(_OWORD *)(a1 + 296) = v36;
    *(_OWORD *)(a1 + 248) = v34;
    *(_OWORD *)(a1 + 264) = v35;
    *(_BYTE *)(a1 + 312) = 1;
  }
  v37 = *(__int128 *)((char *)a2 + 316);
  *(_OWORD *)(a1 + 328) = *(__int128 *)((char *)a2 + 328);
  *(_OWORD *)(a1 + 316) = v37;
  v38 = *((_QWORD *)a2 + 43);
  *(_DWORD *)(a1 + 352) = *((_DWORD *)a2 + 88);
  *(_QWORD *)(a1 + 344) = v38;
  return a1;
}

void sub_223174474(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 56) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

BOOL CV3DReconRoomBoundaryRoomMeshContainsPoint(uint64_t *a1, void **a2, int8x16_t a3)
{
  void **v3;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  double v8;
  uint64_t Point2DWithReverseWinding;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float *v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float *v23;
  float v24;
  uint64_t v25;
  float *v26;
  char *__p;
  void *v29;
  __int128 v30;
  const void *v31;
  std::__shared_weak_count *v32;
  std::error_condition v33;
  _OWORD v34[3];
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v3 = a2;
  v39 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    v29 = operator new(0x20uLL);
    v30 = xmmword_2245B8EA0;
    strcpy((char *)v29, "Triangulation data view is NULL");
    __p = (char *)operator new(0x78uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconRoomBoundaryUtil.mm");
    if (v3)
    {
      *(_QWORD *)&v33.__val_ = 22;
      v33.__cat_ = std::generic_category();
      sub_2245321DC(&v33, (uint64_t)&v29, (CFErrorRef *)&v31);
      sub_224532194(&v31, (CFTypeRef *)v3);
      v11 = v32;
      if (v32)
      {
        p_shared_owners = (unint64_t *)&v32->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
    operator delete(__p);
    if (SHIBYTE(v30) < 0)
      operator delete(v29);
    return 0;
  }
  if (!a1[1])
    return 0;
  v5 = *((_OWORD *)a1 + 1);
  v34[0] = *(_OWORD *)a1;
  v34[1] = v5;
  v34[2] = *((_OWORD *)a1 + 2);
  v6 = a1[6];
  v7 = *((_OWORD *)a1 + 5);
  v37 = *((_OWORD *)a1 + 4);
  v38 = v7;
  v8 = COERCE_DOUBLE(vzip1_s32(*(int32x2_t *)a3.i8, (int32x2_t)*(_OWORD *)&vextq_s8(a3, a3, 8uLL)));
  v29 = 0;
  if (!a2)
    v3 = &v29;
  v35 = v6;
  v36 = 2;
  Point2DWithReverseWinding = CV3DReconTriangulationLocatePoint2DWithReverseWinding(v34, 1, (CFTypeRef *)v3, v8);
  if (*v3)
    return 1;
  if (Point2DWithReverseWinding == -1)
    return 0;
  v14 = *a1;
  v15 = *((unsigned int *)a1 + 4);
  v16 = (v15 * *((_DWORD *)a1 + 2));
  if ((_DWORD)v16 == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v17 = (float *)(v14 + 4);
  if (!(_DWORD)v16 || (_DWORD)v15 == (_DWORD)v16)
  {
    v24 = *v17;
  }
  else
  {
    v18 = *v17;
    v19 = 4 * v16;
    v20 = 4 * v15;
    v21 = 4 * v15;
    v22 = *v17;
    v23 = (float *)(v14 + 4);
    do
    {
      if (*(float *)((char *)v17 + v21) < v22)
      {
        v23 = (float *)((char *)v17 + v21);
        v22 = *(float *)((char *)v17 + v21);
      }
      v21 += v20;
    }
    while (v19 != v21);
    v24 = *v23;
    v25 = 4 * v15;
    v26 = (float *)(v14 + 4);
    do
    {
      if (v18 < *(float *)((char *)v17 + v25))
      {
        v26 = (float *)((char *)v17 + v25);
        v18 = *(float *)((char *)v17 + v25);
      }
      v25 += v20;
    }
    while (v19 != v25);
    v17 = v26;
  }
  return *(float *)&a3.i32[1] < *v17 && v24 <= *(float *)&a3.i32[1];
}

void sub_2231747B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  sub_223167354((uint64_t)&a23);
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

id CV3DReconLoggingGetPrefixList(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x24BDAC8D0];
  objc_msgSend_stringWithUTF8String_(MEMORY[0x24BDD17C8], a2, (uint64_t)"cv3d.recon", a4, a5, a6);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v12[0] = v6;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x24BDBCE30], v7, (uint64_t)v12, 1, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_223174890(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_2231748A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(void **)(a1 + 8);
    if (v3 != v2)
    {
      do
      {
        if (*(_QWORD *)(v3 - 104))
        {
          v5 = *(void **)(v3 - 120);
          if ((void *)(v3 - 96) != v5)
            operator delete(v5);
        }
        v3 -= 120;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_223174924(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(void **)(a1 + 8);
    if (v3 != v2)
    {
      do
      {
        if (*(_QWORD *)(v3 - 104))
        {
          v5 = *(void **)(v3 - 120);
          if ((void *)(v3 - 96) != v5)
            operator delete(v5);
        }
        v3 -= 120;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v4);
  }
  JUMPOUT(0x227684CE8);
}

void sub_2231749B0(uint64_t a1, void *a2)
{
  id v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  float32x2_t v10;
  double v11;
  int v12;
  unint64_t v13;
  char *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD v18[4];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  float32x2_t v23;
  int v24;
  double v25;
  int v26;
  uint64_t v27;
  _OWORD *v28;
  __int128 v29;
  _OWORD v30[6];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  sub_223225168(v3, (uint64_t)v18);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  sub_223174EBC((char **)a1, 0x90uLL);
  v4 = v18[0];
  if (v18[0])
  {
    v5 = 0;
    do
    {
      v6 = *(unsigned __int8 *)(v19 + v5);
      v28 = v30;
      v29 = xmmword_2245B8EB0;
      v7 = 16 * v5;
      v8 = v5;
      do
      {
        sub_223CC4FC4((float32x2_t *)(v18[1] + v7), &v23);
        v25 = *(float *)(v20 + 4 * v8);
        v26 = *(_DWORD *)(v21 + 4 * v8);
        v9 = (uint64_t *)&v28[2 * v29];
        if ((_QWORD)v29 == *((_QWORD *)&v29 + 1))
        {
          sub_223175298((uint64_t)&v28, v9, 1, (uint64_t *)&v23, &v27);
        }
        else
        {
          v10 = v23;
          *((_DWORD *)v9 + 2) = v24;
          *v9 = (uint64_t)v10;
          v11 = v25;
          *((_DWORD *)v9 + 6) = v26;
          *((double *)v9 + 2) = v11;
          *(_QWORD *)&v29 = v29 + 1;
        }
        v5 = v8 + 1;
        if (v8 + 1 >= v4)
          break;
        v12 = *(unsigned __int8 *)(v19 + v8 + 1);
        v7 += 16;
        ++v8;
      }
      while (v12 == v6);
      if ((_QWORD)v29)
      {
        v13 = *(_QWORD *)(a1 + 8);
        if (v13 >= *(_QWORD *)(a1 + 16))
        {
          v14 = sub_223175438((void **)a1, (uint64_t)&v28);
        }
        else
        {
          *(_QWORD *)v13 = v13 + 24;
          *(_OWORD *)(v13 + 8) = xmmword_2245B8EB0;
          if (v30 == v28)
          {
            sub_223175068((_QWORD *)v13, (uint64_t *)v30, (uint64_t *)&v30[2 * v29]);
            *(_QWORD *)&v29 = 0;
          }
          else
          {
            *(_QWORD *)v13 = v28;
            *(_OWORD *)(v13 + 8) = v29;
            v28 = 0;
            v29 = 0uLL;
          }
          v14 = (char *)(v13 + 120);
        }
        *(_QWORD *)(a1 + 8) = v14;
      }
      if (*((_QWORD *)&v29 + 1) && v30 != v28)
        operator delete(v28);
    }
    while (v5 < v4);
  }
  v15 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  sub_223167284(v18);

}

void sub_223174C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  void **v5;
  va_list va;

  va_start(va, a4);
  sub_223167208(v5);
  sub_2231671A0((uint64_t *)va);

  _Unwind_Resume(a1);
}

uint64_t sub_223174C94(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  char *v7;
  void *v8;
  char *v9;
  void *v10;
  char *v11;
  void *__p;
  char *v14;
  uint64_t v15;

  v3 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 32) = 1;
  *(_QWORD *)a1 = &off_24EC1F170;
  v4 = (void *)MEMORY[0x22768533C]();
  sub_2231749B0((uint64_t)&__p, v3);
  v5 = __p;
  v6 = (uint64_t)v14;
  v14 = 0;
  v15 = 0;
  __p = 0;
  sub_22317567C((_QWORD *)(a1 + 8), (uint64_t)v5, v6, 0xEEEEEEEEEEEEEEEFLL * ((v6 - (uint64_t)v5) >> 3));
  if (!v5)
  {
    v7 = (char *)__p;
    if (!__p)
      goto LABEL_18;
    goto LABEL_10;
  }
  while ((void *)v6 != v5)
  {
    if (*(_QWORD *)(v6 - 104))
    {
      v8 = *(void **)(v6 - 120);
      if ((void *)(v6 - 96) != v8)
        operator delete(v8);
    }
    v6 -= 120;
  }
  operator delete(v5);
  v7 = (char *)__p;
  if (__p)
  {
LABEL_10:
    v9 = v14;
    v10 = v7;
    if (v14 != v7)
    {
      do
      {
        if (*((_QWORD *)v9 - 13))
        {
          v11 = (char *)*((_QWORD *)v9 - 15);
          if (v9 - 96 != v11)
            operator delete(v11);
        }
        v9 -= 120;
      }
      while (v9 != v7);
      v10 = __p;
    }
    v14 = v7;
    operator delete(v10);
  }
LABEL_18:
  objc_autoreleasePoolPop(v4);

  return a1;
}

_QWORD *sub_223174DE4(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void sub_223174E94()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

void sub_223174EBC(char **a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t **v11;
  char *v12;
  uint64_t *v13;
  char *v14;
  char *v15;

  v2 = *a1;
  if (0xEEEEEEEEEEEEEEEFLL * ((a1[2] - *a1) >> 3) < a2)
  {
    if (a2 >= 0x222222222222223)
      sub_22316E078();
    v4 = a1[1];
    v5 = 120 * a2;
    v6 = (char *)operator new(120 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *a1 = v8;
      a1[1] = v8;
      a1[2] = v7;
      if (v2)
LABEL_16:
        operator delete(v2);
    }
    else
    {
      v9 = 0;
      v10 = xmmword_2245B8EB0;
      do
      {
        while (1)
        {
          *(_QWORD *)&v8[v9 - 120] = &v8[v9 - 96];
          v11 = (uint64_t **)&v8[v9 - 120];
          v12 = &v4[v9];
          v13 = *(uint64_t **)&v4[v9 - 120];
          *(_OWORD *)&v8[v9 - 112] = v10;
          if (&v4[v9 - 96] == (char *)v13)
            break;
          *v11 = v13;
          *(_OWORD *)&v8[v9 - 112] = *((_OWORD *)v12 - 7);
          *(_QWORD *)&v4[v9 - 120] = 0;
          *(_QWORD *)&v4[v9 - 112] = 0;
          *(_QWORD *)&v4[v9 - 104] = 0;
          v9 -= 120;
          if (&v4[v9] == v2)
            goto LABEL_8;
        }
        sub_223175068(v11, v13, &v13[4 * *((_QWORD *)v12 - 14)]);
        *((_QWORD *)v12 - 14) = 0;
        v10 = xmmword_2245B8EB0;
        v9 -= 120;
      }
      while (&v4[v9] != v2);
LABEL_8:
      v14 = *a1;
      v2 = a1[1];
      *a1 = &v8[v9];
      a1[1] = v8;
      a1[2] = v7;
      if (v2 != v14)
      {
        do
        {
          if (*((_QWORD *)v2 - 13))
          {
            v15 = (char *)*((_QWORD *)v2 - 15);
            if (v2 - 96 != v15)
              operator delete(v15);
          }
          v2 -= 120;
        }
        while (v2 != v14);
        v2 = v14;
      }
      if (v2)
        goto LABEL_16;
    }
  }
}

void sub_223175068(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  size_t v6;
  unint64_t v7;
  _DWORD *v8;
  _QWORD *v9;
  _DWORD *i;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = a2;
  v6 = (char *)a3 - (char *)a2;
  v7 = ((char *)a3 - (char *)a2) >> 5;
  if (v7 <= a1[2])
  {
    v13 = (_QWORD *)*a1;
    v14 = a1[1];
    v15 = v14 - v7;
    if (v14 >= v7)
    {
      if (a3 != a2)
      {
        v23 = ((char *)a3 - (char *)a2) >> 5;
        do
        {
          v24 = *v4;
          *((_DWORD *)v13 + 2) = *((_DWORD *)v4 + 2);
          *v13 = v24;
          v25 = v4[2];
          *((_DWORD *)v13 + 6) = *((_DWORD *)v4 + 6);
          v13[2] = v25;
          v13 += 4;
          v4 += 4;
          --v23;
        }
        while (v23);
      }
    }
    else
    {
      if (v14)
      {
        v16 = a2;
        v4 = &a2[4 * v14];
        v17 = a1[1];
        do
        {
          v18 = *v16;
          *((_DWORD *)v13 + 2) = *((_DWORD *)v16 + 2);
          *v13 = v18;
          v19 = v16[2];
          *((_DWORD *)v13 + 6) = *((_DWORD *)v16 + 6);
          v13[2] = v19;
          v13 += 4;
          v16 += 4;
          --v17;
        }
        while (v17);
      }
      if (v7 != v14)
      {
        do
        {
          v20 = *v4;
          *((_DWORD *)v13 + 2) = *((_DWORD *)v4 + 2);
          *v13 = v20;
          v21 = v4[2];
          *((_DWORD *)v13 + 6) = *((_DWORD *)v4 + 6);
          v13[2] = v21;
          v13 += 4;
          v4 += 4;
        }
        while (!__CFADD__(v15++, 1));
      }
    }
    a1[1] = v7;
  }
  else
  {
    if (v6 >= 0x7FFFFFFFFFFFFFE1)
      sub_22317521C((uint64_t)"get_next_capacity, allocator's max size reached");
    v8 = operator new(v6);
    v9 = (_QWORD *)*a1;
    if (*a1)
    {
      a1[1] = 0;
      if (a1 + 3 != v9)
        operator delete(v9);
    }
    a1[1] = 0;
    a1[2] = v7;
    *a1 = v8;
    for (i = v8; v4 != a3; v4 += 4)
    {
      v11 = *v4;
      i[2] = *((_DWORD *)v4 + 2);
      *(_QWORD *)i = v11;
      v12 = v4[2];
      i[6] = *((_DWORD *)v4 + 6);
      *((_QWORD *)i + 2) = v12;
      i += 8;
    }
    a1[1] = ((char *)i - (char *)v8) >> 5;
  }
}

void sub_22317521C(uint64_t a1)
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  *exception = &unk_24EC1F210;
  exception[1] = a1;
  __cxa_throw(exception, (struct type_info *)&unk_24EC1F1E8, (void (*)(void *))std::exception::~exception);
}

void sub_22317525C(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x227684CE8);
}

const char *sub_223175280(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8))
    return *(const char **)(a1 + 8);
  else
    return "unknown boost::container exception";
}

void sub_223175298(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, _QWORD *a5@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = 0x3FFFFFFFFFFFFFFLL;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  if (0x3FFFFFFFFFFFFFFLL - v8 < a3 - v8 + v7)
    goto LABEL_23;
  v10 = v8 >> 61;
  v11 = 8 * v8;
  if (v10 > 4)
    v12 = -1;
  else
    v12 = v11;
  v13 = v11 / 5;
  if (v10)
    v13 = v12;
  v14 = v7 + a3;
  if (v13 < 0x3FFFFFFFFFFFFFFLL)
    v6 = v13;
  v15 = v14 <= v6 ? v6 : v14;
  if (v15 >> 58)
LABEL_23:
    sub_22317521C((uint64_t)"get_next_capacity, allocator's max size reached");
  v19 = *(char **)a1;
  v20 = (char *)operator new(32 * v15);
  v21 = v20;
  v22 = *(char **)a1;
  v23 = *(_QWORD *)a1 + 32 * *(_QWORD *)(a1 + 8);
  v24 = v20;
  if (*(uint64_t **)a1 != a2)
  {
    v25 = *(char **)a1;
    v24 = v20;
    do
    {
      v26 = *(_QWORD *)v25;
      *((_DWORD *)v24 + 2) = *((_DWORD *)v25 + 2);
      *(_QWORD *)v24 = v26;
      v27 = *((_QWORD *)v25 + 2);
      *((_DWORD *)v24 + 6) = *((_DWORD *)v25 + 6);
      *((_QWORD *)v24 + 2) = v27;
      v24 += 32;
      v25 += 32;
    }
    while (v25 != (char *)a2);
  }
  v28 = *a4;
  *((_DWORD *)v24 + 2) = *((_DWORD *)a4 + 2);
  *(_QWORD *)v24 = v28;
  v29 = a4[2];
  *((_DWORD *)v24 + 6) = *((_DWORD *)a4 + 6);
  *((_QWORD *)v24 + 2) = v29;
  if ((uint64_t *)v23 != a2)
  {
    v30 = &v24[32 * a3];
    v31 = a2;
    do
    {
      v32 = *v31;
      *((_DWORD *)v30 + 2) = *((_DWORD *)v31 + 2);
      *(_QWORD *)v30 = v32;
      v33 = v31[2];
      *((_DWORD *)v30 + 6) = *((_DWORD *)v31 + 6);
      *((_QWORD *)v30 + 2) = v33;
      v31 += 4;
      v30 += 32;
    }
    while (v31 != (uint64_t *)v23);
  }
  if (v22 && a1 + 24 != *(_QWORD *)a1)
    operator delete(*(void **)a1);
  v34 = *(_QWORD *)(a1 + 8) + a3;
  *(_QWORD *)a1 = v21;
  *(_QWORD *)(a1 + 8) = v34;
  *(_QWORD *)(a1 + 16) = v15;
  *a5 = &v21[(char *)a2 - v19];
}

char *sub_223175438(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  __int128 v9;
  uint64_t *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t **v16;
  char *v17;
  uint64_t *v18;
  char *v19;
  char *v20;

  v3 = 0xEEEEEEEEEEEEEEEFLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x222222222222222)
    sub_22316E078();
  if (0xDDDDDDDDDDDDDDDELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0xDDDDDDDDDDDDDDDELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xEEEEEEEEEEEEEEEFLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x111111111111111)
    v6 = 0x222222222222222;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x222222222222222)
      sub_223174E94();
    v7 = (char *)operator new(120 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[120 * v3];
  *(_QWORD *)v8 = v8 + 24;
  v9 = xmmword_2245B8EB0;
  *(_OWORD *)(v8 + 8) = xmmword_2245B8EB0;
  v10 = *(uint64_t **)a2;
  if (a2 + 24 == *(_QWORD *)a2)
  {
    sub_223175068(v8, v10, &v10[4 * *(_QWORD *)(a2 + 8)]);
    *(_QWORD *)(a2 + 8) = 0;
    v9 = xmmword_2245B8EB0;
    v11 = &v7[120 * v6];
    v12 = v8 + 120;
    v14 = (char *)*a1;
    v13 = (char *)a1[1];
    if (v13 != *a1)
      goto LABEL_13;
LABEL_28:
    *a1 = v8;
    a1[1] = v12;
    a1[2] = v11;
    if (!v13)
      return v12;
    goto LABEL_25;
  }
  *(_QWORD *)v8 = v10;
  *(_OWORD *)(v8 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v11 = &v7[120 * v6];
  v12 = v8 + 120;
  v14 = (char *)*a1;
  v13 = (char *)a1[1];
  if (v13 == *a1)
    goto LABEL_28;
LABEL_13:
  v15 = 0;
  do
  {
    while (1)
    {
      *(_QWORD *)&v8[v15 - 120] = &v8[v15 - 96];
      v16 = (uint64_t **)&v8[v15 - 120];
      v17 = &v13[v15];
      v18 = *(uint64_t **)&v13[v15 - 120];
      *(_OWORD *)&v8[v15 - 112] = v9;
      if (&v13[v15 - 96] == (char *)v18)
        break;
      *v16 = v18;
      *(_OWORD *)&v8[v15 - 112] = *((_OWORD *)v17 - 7);
      *(_QWORD *)&v13[v15 - 120] = 0;
      *(_QWORD *)&v13[v15 - 112] = 0;
      *(_QWORD *)&v13[v15 - 104] = 0;
      v15 -= 120;
      if (&v13[v15] == v14)
        goto LABEL_17;
    }
    sub_223175068(v16, v18, &v18[4 * *((_QWORD *)v17 - 14)]);
    *((_QWORD *)v17 - 14) = 0;
    v9 = xmmword_2245B8EB0;
    v15 -= 120;
  }
  while (&v13[v15] != v14);
LABEL_17:
  v19 = (char *)*a1;
  v13 = (char *)a1[1];
  *a1 = &v8[v15];
  a1[1] = v12;
  a1[2] = v11;
  if (v13 != v19)
  {
    do
    {
      if (*((_QWORD *)v13 - 13))
      {
        v20 = (char *)*((_QWORD *)v13 - 15);
        if (v13 - 96 != v20)
          operator delete(v20);
      }
      v13 -= 120;
    }
    while (v13 != v19);
    v13 = v19;
  }
  if (v13)
LABEL_25:
    operator delete(v13);
  return v12;
}

void sub_22317567C(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;

  v6 = a2;
  v8 = a1[2];
  v9 = (_QWORD *)*a1;
  if (0xEEEEEEEEEEEEEEEFLL * ((v8 - *a1) >> 3) >= a4)
  {
    v13 = (_QWORD *)a1[1];
    if (0xEEEEEEEEEEEEEEEFLL * (v13 - v9) >= a4)
    {
      if (a2 == a3)
      {
        v16 = (_QWORD *)*a1;
      }
      else
      {
        v16 = (_QWORD *)*a1;
        do
        {
          if ((_QWORD *)v6 != v9)
            sub_223175B88(v9, *(uint64_t **)v6, (uint64_t *)(*(_QWORD *)v6 + 32 * *(_QWORD *)(v6 + 8)));
          v6 += 120;
          v9 += 15;
          v16 += 15;
        }
        while (v6 != a3);
        v13 = (_QWORD *)a1[1];
      }
      while (v13 != v16)
      {
        if (*(v13 - 13))
        {
          v22 = (_QWORD *)*(v13 - 15);
          if (v13 - 12 != v22)
            operator delete(v22);
        }
        v13 -= 15;
      }
      a1[1] = v16;
    }
    else
    {
      v14 = a2 + 8 * (v13 - v9);
      if (v13 != v9)
      {
        v15 = 8 * (v13 - v9);
        do
        {
          if ((_QWORD *)v6 != v9)
            sub_223175B88(v9, *(uint64_t **)v6, (uint64_t *)(*(_QWORD *)v6 + 32 * *(_QWORD *)(v6 + 8)));
          v6 += 120;
          v9 += 15;
          v15 -= 120;
        }
        while (v15);
      }
      sub_2231758E4((uint64_t)a1, v14, a3);
    }
  }
  else
  {
    if (v9)
    {
      v10 = (_QWORD *)a1[1];
      v11 = (_QWORD *)*a1;
      if (v10 != v9)
      {
        do
        {
          if (*(v10 - 13))
          {
            v12 = (_QWORD *)*(v10 - 15);
            if (v10 - 12 != v12)
              operator delete(v12);
          }
          v10 -= 15;
        }
        while (v10 != v9);
        v11 = (_QWORD *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x222222222222222)
      goto LABEL_40;
    v17 = 0xEEEEEEEEEEEEEEEFLL * (v8 >> 3);
    v18 = 2 * v17;
    if (2 * v17 <= a4)
      v18 = a4;
    v19 = v17 >= 0x111111111111111 ? 0x222222222222222 : v18;
    if (v19 > 0x222222222222222)
LABEL_40:
      sub_22316E078();
    v20 = 120 * v19;
    v21 = (char *)operator new(120 * v19);
    *a1 = v21;
    a1[1] = v21;
    a1[2] = &v21[v20];
    sub_2231758E4((uint64_t)a1, v6, a3);
  }
}

void sub_2231758E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;

  v4 = *(_QWORD *)(a1 + 8);
  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      v8 = v4 + v7;
      v9 = a2 + v7;
      *(_QWORD *)v8 = v4 + v7 + 24;
      *(_OWORD *)(v8 + 8) = xmmword_2245B8EB0;
      v10 = *(_QWORD *)(a2 + v7 + 8);
      v12 = *(uint64_t **)(a2 + v7);
      v11 = &v12[4 * v10];
      sub_2231759CC((_QWORD *)(v4 + v7), &v12, &v11);
      v7 += 120;
    }
    while (v9 + 120 != a3);
    v4 += v7;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_223175998(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v7;

  if (*(_QWORD *)(v3 + 16))
  {
    v7 = *(void **)(v2 + v4);
    if (v5 != v7)
      operator delete(v7);
  }
  sub_224574330(v2 + v4, v2);
  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2231759CC(_QWORD *a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t *v4;
  int64_t v5;
  unint64_t v6;
  _DWORD *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t *v12;
  _DWORD *i;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = *a2;
  v5 = (char *)*a3 - (char *)*a2;
  v6 = v5 >> 5;
  if ((unint64_t)(v5 >> 5) <= a1[2])
  {
    v16 = (_QWORD *)*a1;
    v17 = a1[1];
    v18 = v17 - v6;
    if (v17 >= v6)
    {
      if (*a3 != v4)
      {
        v25 = v5 >> 5;
        do
        {
          v26 = *v4;
          *((_DWORD *)v16 + 2) = *((_DWORD *)v4 + 2);
          *v16 = v26;
          v27 = v4[2];
          *((_DWORD *)v16 + 6) = *((_DWORD *)v4 + 6);
          v16[2] = v27;
          v16 += 4;
          v4 += 4;
          --v25;
        }
        while (v25);
      }
    }
    else
    {
      if (v17)
      {
        v19 = a1[1];
        do
        {
          v20 = *v4;
          *((_DWORD *)v16 + 2) = *((_DWORD *)v4 + 2);
          *v16 = v20;
          v21 = v4[2];
          *((_DWORD *)v16 + 6) = *((_DWORD *)v4 + 6);
          v16[2] = v21;
          v4 += 4;
          v16 += 4;
          --v19;
        }
        while (v19);
      }
      if (v6 != v17)
      {
        do
        {
          v22 = *v4;
          *((_DWORD *)v16 + 2) = *((_DWORD *)v4 + 2);
          *v16 = v22;
          v23 = v4[2];
          *((_DWORD *)v16 + 6) = *((_DWORD *)v4 + 6);
          v16[2] = v23;
          v16 += 4;
          v4 += 4;
        }
        while (!__CFADD__(v18++, 1));
      }
    }
    a1[1] = v6;
  }
  else
  {
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFE1)
      sub_22317521C((uint64_t)"get_next_capacity, allocator's max size reached");
    v9 = operator new(v5);
    v10 = (_QWORD *)*a1;
    if (*a1)
    {
      a1[1] = 0;
      if (a1 + 3 != v10)
        operator delete(v10);
    }
    a1[1] = 0;
    a1[2] = v6;
    *a1 = v9;
    v11 = *a2;
    v12 = *a3;
    for (i = v9; v11 != v12; v11 += 4)
    {
      v14 = *v11;
      i[2] = *((_DWORD *)v11 + 2);
      *(_QWORD *)i = v14;
      v15 = v11[2];
      i[6] = *((_DWORD *)v11 + 6);
      *((_QWORD *)i + 2) = v15;
      i += 8;
    }
    a1[1] = ((char *)i - (char *)v9) >> 5;
  }
}

void sub_223175B88(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  size_t v6;
  unint64_t v7;
  _DWORD *v8;
  _QWORD *v9;
  _DWORD *i;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = a2;
  v6 = (char *)a3 - (char *)a2;
  v7 = ((char *)a3 - (char *)a2) >> 5;
  if (v7 <= a1[2])
  {
    v11 = (_QWORD *)*a1;
    v12 = a1[1];
    v13 = v12 - v7;
    if (v12 >= v7)
    {
      if (a3 != a2)
      {
        v20 = ((char *)a3 - (char *)a2) >> 5;
        do
        {
          v21 = *v4;
          *((_DWORD *)v11 + 2) = *((_DWORD *)v4 + 2);
          *v11 = v21;
          v22 = v4[2];
          *((_DWORD *)v11 + 6) = *((_DWORD *)v4 + 6);
          v11[2] = v22;
          v11 += 4;
          v4 += 4;
          --v20;
        }
        while (v20);
      }
    }
    else
    {
      if (v12)
      {
        v14 = a1[1];
        do
        {
          v15 = *v4;
          *((_DWORD *)v11 + 2) = *((_DWORD *)v4 + 2);
          *v11 = v15;
          v16 = v4[2];
          *((_DWORD *)v11 + 6) = *((_DWORD *)v4 + 6);
          v11[2] = v16;
          v4 += 4;
          v11 += 4;
          --v14;
        }
        while (v14);
      }
      if (v7 != v12)
      {
        do
        {
          v17 = *v4;
          *((_DWORD *)v11 + 2) = *((_DWORD *)v4 + 2);
          *v11 = v17;
          v18 = v4[2];
          *((_DWORD *)v11 + 6) = *((_DWORD *)v4 + 6);
          v11[2] = v18;
          v11 += 4;
          v4 += 4;
        }
        while (!__CFADD__(v13++, 1));
      }
    }
    a1[1] = v7;
  }
  else
  {
    if (v6 >= 0x7FFFFFFFFFFFFFE1)
      sub_22317521C((uint64_t)"get_next_capacity, allocator's max size reached");
    v8 = operator new(v6);
    v9 = (_QWORD *)*a1;
    if (*a1)
    {
      a1[1] = 0;
      if (a1 + 3 != v9)
        operator delete(v9);
    }
    a1[1] = 0;
    a1[2] = v7;
    *a1 = v8;
    for (i = v8; v4 != a3; v4 += 4)
    {
      *(_QWORD *)i = *v4;
      i[2] = *((_DWORD *)v4 + 2);
      *((_QWORD *)i + 2) = v4[2];
      i[6] = *((_DWORD *)v4 + 6);
      i += 8;
    }
    a1[1] = ((char *)i - (char *)v8) >> 5;
  }
}

uint64_t sub_223175D34(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_223175D9C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223175E04(uint64_t a1)
{
  sub_223167354(a1 + 8);
  return nullsub_30(a1);
}

uint64_t sub_223175E2C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(void **)(a1 + 8);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 224);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 248;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_223175EC4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(void **)(a1 + 8);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 224);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 248;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v4);
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223175F6C(uint64_t a1, unint64_t a2, CFTypeRef *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *__p;
  char cf[20];
  char v15;
  const void *v16;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  v3 = *(_QWORD *)(a1 + 8);
  if (0xEF7BDEF7BDEF7BDFLL * ((*(_QWORD *)(a1 + 16) - v3) >> 3) <= a2)
  {
    v15 = 19;
    strcpy(cf, "Index out of bounds");
    __p = (char *)operator new(0x68uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Keyframing.mm");
    if (a3)
    {
      *(_QWORD *)&v18.__val_ = 33;
      v18.__cat_ = std::generic_category();
      sub_2245321DC(&v18, (uint64_t)cf, (CFErrorRef *)&v16);
      sub_224532194(&v16, a3);
      v10 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
    operator delete(__p);
    if (v15 < 0)
      operator delete(*(void **)cf);
    return 0;
  }
  else
  {
    sub_224533434((std::__shared_weak_count_vtbl **)cf, (CFUUIDBytes *)(v3 + 248 * a2));
    v4 = *(_QWORD *)cf;
    if (*(_QWORD *)cf)
      j__CFRetain(*(CFTypeRef *)cf);
    v5 = *(std::__shared_weak_count **)&cf[8];
    if (!*(_QWORD *)&cf[8])
      return v4;
    v6 = (unint64_t *)(*(_QWORD *)&cf[8] + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      return v4;
    }
    else
    {
      return v4;
    }
  }
}

void sub_223176158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  sub_223167354(v21 - 48);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

void sub_2231761B0(uint64_t a1@<X0>, unint64_t a2@<X1>, CFTypeRef *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  char *__p;
  void *v27[4];
  const void *v28;
  std::__shared_weak_count *v29;
  std::error_condition v30;

  v5 = *(_QWORD *)(a1 + 8);
  if (0xEF7BDEF7BDEF7BDFLL * ((*(_QWORD *)(a1 + 16) - v5) >> 3) <= a2)
  {
    HIBYTE(v27[2]) = 19;
    strcpy((char *)v27, "Index out of bounds");
    __p = (char *)operator new(0x68uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Keyframing.mm");
    if (a3)
    {
      *(_QWORD *)&v30.__val_ = 33;
      v30.__cat_ = std::generic_category();
      sub_2245321DC(&v30, (uint64_t)v27, (CFErrorRef *)&v28);
      sub_224532194(&v28, a3);
      v23 = v29;
      if (v29)
      {
        p_shared_owners = (unint64_t *)&v29->__shared_owners_;
        do
          v25 = __ldaxr(p_shared_owners);
        while (__stlxr(v25 - 1, p_shared_owners));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
    }
    operator delete(__p);
    if (SHIBYTE(v27[2]) < 0)
      operator delete(v27[0]);
    *a4 = 0;
    a4[1] = 0;
  }
  else
  {
    v7 = v5 + 248 * a2;
    v8 = (char *)operator new(0x110uLL);
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = 0;
    *(_QWORD *)v8 = &off_24EC1F548;
    *(_OWORD *)(v8 + 24) = *(_OWORD *)v7;
    *((_QWORD *)v8 + 5) = *(_QWORD *)(v7 + 16);
    v9 = *(_QWORD *)(v7 + 24);
    *((_QWORD *)v8 + 6) = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v12 = v5 + 248 * a2;
    v13 = *(_OWORD *)(v12 + 32);
    v14 = *(_OWORD *)(v12 + 48);
    v15 = *(_OWORD *)(v12 + 64);
    *(_OWORD *)(v8 + 104) = *(_OWORD *)(v12 + 80);
    *(_OWORD *)(v8 + 88) = v15;
    *(_OWORD *)(v8 + 72) = v14;
    *(_OWORD *)(v8 + 56) = v13;
    *(_OWORD *)(v8 + 120) = *(_OWORD *)(v12 + 96);
    v16 = *(_OWORD *)(v12 + 112);
    v17 = *(_OWORD *)(v12 + 128);
    v18 = *(_OWORD *)(v12 + 144);
    *(_OWORD *)(v8 + 184) = *(_OWORD *)(v12 + 160);
    *(_OWORD *)(v8 + 168) = v18;
    *(_OWORD *)(v8 + 152) = v17;
    *(_OWORD *)(v8 + 136) = v16;
    v19 = *(_OWORD *)(v12 + 176);
    v20 = *(_OWORD *)(v12 + 192);
    v21 = *(_OWORD *)(v12 + 208);
    *(_OWORD *)(v8 + 248) = *(_OWORD *)(v12 + 224);
    *(_OWORD *)(v8 + 232) = v21;
    *(_OWORD *)(v8 + 216) = v20;
    *(_OWORD *)(v8 + 200) = v19;
    *((_WORD *)v8 + 132) = *(_WORD *)(v12 + 240);
    *a4 = v8 + 24;
    a4[1] = v8;
  }
}

void sub_2231763F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  sub_223167354((uint64_t)&a23);
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(a1);
}

double sub_22317644C(uint64_t a1, unint64_t a2, CFTypeRef *a3)
{
  uint64_t v3;
  double result;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *__p;
  void *v10[4];
  const void *v11;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  v3 = *(_QWORD *)(a1 + 8);
  if (0xEF7BDEF7BDEF7BDFLL * ((*(_QWORD *)(a1 + 16) - v3) >> 3) <= a2)
  {
    HIBYTE(v10[2]) = 19;
    strcpy((char *)v10, "Index out of bounds");
    __p = (char *)operator new(0x68uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Keyframing.mm");
    if (a3)
    {
      *(_QWORD *)&v13.__val_ = 33;
      v13.__cat_ = std::generic_category();
      sub_2245321DC(&v13, (uint64_t)v10, (CFErrorRef *)&v11);
      sub_224532194(&v11, a3);
      v6 = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    operator delete(__p);
    if (SHIBYTE(v10[2]) < 0)
      operator delete(v10[0]);
    return 0.0;
  }
  else
  {
    *(_QWORD *)&result = sub_224506A04(v3 + 248 * a2 + 32).n128_u64[0];
  }
  return result;
}

void sub_2231765C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  sub_223167354(v21 - 48);
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(a1);
}

uint64_t sub_223176620(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_223176688(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231766F0@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  sub_22317692C(a1, &v14);
  v3 = v14;
  v15 = v14;
  if (v14)
  {
    v4 = (std::__shared_weak_count *)operator new();
    v5 = v14;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F4F8;
    v4->__shared_owners_ = 0;
    v4->__shared_weak_owners_ = 0;
    v4[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  }
  else
  {
    v4 = 0;
  }
  v14 = 0;
  v15 = 0;
  v17 = v3;
  v18 = v4;
  v16 = 0;
  sub_22449B91C(a2, &v17, 0);
  v6 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    v13 = sub_22426BF74(result);
    return MEMORY[0x227684CE8](v13, 0x10A3C40A1F8E8FFLL);
  }
  return result;
}

void sub_22317680C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223176A20((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223176820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14)
    sub_224574380(a14);
  sub_223167354((uint64_t)&a11);
  sub_223176A20(&a10);
  _Unwind_Resume(a1);
}

void sub_223176848(uint64_t a1)
{
  sub_223167354(a1 + 8);
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223176884()
{
  return 1;
}

uint64_t sub_22317688C(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_223176894@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 2, a1 + 64, 2, a1 + 72, 1);
}

uint64_t sub_2231768B0(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t sub_22317692C@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[8];
  int v7;
  _DWORD v8[8];
  __int128 v9;
  uint64_t (**v10)();

  v10 = &off_24EC1F4A0;
  sub_224297128(a1, (uint64_t)v6);
  v3 = operator new();
  *(_QWORD *)v3 = off_24EC6F230;
  v4 = v8[6];
  *(_DWORD *)(v3 + 8) = v7;
  *(_BYTE *)(v3 + 16) = 0;
  *(_DWORD *)(v3 + 40) = -1;
  if ((_DWORD)v4 != -1)
  {
    ((void (*)(uint64_t (***)(), uint64_t, _DWORD *))off_24EC1F4C8[v4])(&v10, v3 + 16, v8);
    *(_DWORD *)(v3 + 40) = v4;
  }
  *(_OWORD *)(v3 + 48) = v9;
  *(_QWORD *)v3 = off_24EC711E0;
  *a2 = v3;
  return sub_22426BF74((uint64_t)v6);
}

void sub_223176A0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22426BF74((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_223176A20(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_22426BF74(v2);
    MEMORY[0x227684CE8](v3, 0x10A3C40A1F8E8FFLL);
  }
  return a1;
}

void sub_223176A68()
{
  JUMPOUT(0x227684CE8);
}

__n128 sub_223176A7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24EC715B8;
  result = *(__n128 *)(a3 + 8);
  *(__n128 *)(a2 + 8) = result;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return result;
}

__n128 sub_223176A9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;

  result = *(__n128 *)(a3 + 8);
  *(__n128 *)(a2 + 8) = result;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a2 = &off_24EC71528;
  return result;
}

__n128 sub_223176ABC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;

  result = *(__n128 *)(a3 + 8);
  *(__n128 *)(a2 + 8) = result;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a2 = &off_24EC71548;
  return result;
}

__n128 sub_223176ADC(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  return result;
}

void sub_223176AF0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223176B14(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_22426BF74(result);
    JUMPOUT(0x227684CE8);
  }
  return result;
}

uint64_t sub_223176B48(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE1EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE1EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE1EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE1EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_223176BB8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F548;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223176BC8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F548;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223176BF8(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

_DWORD *sub_223176C54@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  _DWORD *result;
  _DWORD *v7;
  _DWORD *v8;
  int v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  int v14;

  result = (_DWORD *)sub_224149A04((uint64_t)a3, 0);
  v7 = (_DWORD *)a1[1];
  if ((_DWORD *)*a1 != v7)
  {
    result = (_DWORD *)a3[1];
    v8 = (_DWORD *)(*a1 + 4);
    do
    {
      v14 = 0;
      if ((unint64_t)result < a3[2])
      {
        *result = *(v8 - 1);
        v9 = v14;
        result[1] = *v8;
        result[2] = v9;
        result += 3;
      }
      else
      {
        result = sub_22317E95C((uint64_t)a3, v8 - 1, v8, &v14);
      }
      a3[1] = result;
      v10 = v8 + 1;
      v8 += 2;
    }
    while (v10 != v7);
  }
  v11 = (_DWORD *)a2[1];
  if ((_DWORD *)*a2 != v11)
  {
    result = (_DWORD *)a3[15];
    v12 = (_DWORD *)(*a2 + 4);
    do
    {
      if ((unint64_t)result < a3[16])
      {
        *result = *(v12 - 1);
        result[1] = *v12;
        result[2] = v12[1];
        result += 3;
      }
      else
      {
        result = sub_22317EAFC((uint64_t)(a3 + 14), v12 - 1, v12, v12 + 1);
      }
      a3[15] = result;
      v13 = v12 + 2;
      v12 += 3;
    }
    while (v13 != v11);
  }
  return result;
}

void sub_223176D70(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_223176D84(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_223176D98(const void *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>, unsigned int a4@<S0>)
{
  sub_223176DB4(a3, a1, a2, a4 | 0x100000000);
}

void sub_223176DB4(uint64_t a1, const void *a2, unint64_t a3, uint64_t a4)
{
  size_t v8;
  char *v9;
  double v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  void *__p[3];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;

  if (!a3)
  {
    v11 = operator new(0x198uLL);
    v11[1] = 0;
    v11[2] = 0;
    *v11 = &off_24EC1F0A0;
    *(_QWORD *)(a1 + 8) = sub_224149A04((uint64_t)(v11 + 3), 0);
    *(_QWORD *)(a1 + 16) = v11;
    *(_BYTE *)(a1 + 24) = 0;
    *(_BYTE *)(a1 + 88) = 0;
    *(_BYTE *)(a1 + 92) = 0;
    *(_BYTE *)(a1 + 108) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_DWORD *)(a1 + 120) = 1;
    *(_QWORD *)a1 = &off_24EC1F598;
    return;
  }
  if (!a2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm", 154, (uint64_t)"data", 4, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm", 125, (uint64_t)"data", 4, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v15 = 0;
    v16 = 0;
    v17 = 0;
    if (a3 >> 61)
      sub_22316E078();
    v12 = (char *)operator new(8 * a3);
    memcpy(v12, 0, 8 * a3);
    v18 = v12;
    v19 = &v12[8 * a3];
    v20 = v19;
    if ((a4 & 0xFF00000000) != 0)
      goto LABEL_5;
LABEL_11:
    sub_223EBA564((uint64_t *)&v18, (char **)__p);
    sub_223176C54(&v18, __p, &v15);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    goto LABEL_13;
  }
  v15 = 0;
  v16 = 0;
  v17 = 0;
  if (a3 >> 61)
    sub_22316E078();
  v8 = 8 * a3;
  v9 = (char *)operator new(8 * a3);
  memcpy(v9, a2, v8);
  v18 = v9;
  v19 = &v9[v8];
  v20 = &v9[8 * a3];
  if ((a4 & 0xFF00000000) == 0)
    goto LABEL_11;
LABEL_5:
  LODWORD(v10) = a4;
  sub_223EBAF5C((unsigned __int8 *)&v18, (uint64_t)&v15, v10);
LABEL_13:
  v13 = operator new(0x198uLL);
  v13[1] = 0;
  v13[2] = 0;
  *v13 = &off_24EC1F0A0;
  *(_QWORD *)(a1 + 8) = sub_22317FD80((uint64_t)(v13 + 3), (uint64_t)&v15);
  *(_QWORD *)(a1 + 16) = v13;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 92) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = 1;
  *(_QWORD *)a1 = &off_24EC1F598;
  sub_22316F8F4(&v15);
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
}

void sub_223177018(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  CFTypeRef *v21;

  if (__p)
  {
    a10 = (uint64_t)__p;
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  sub_223174DE4(&a15, "Failed to triangulate polygon.");
  sub_223174DE4(&__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
  sub_223177404(v21, 0x16u, (uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  *(_QWORD *)(v20 + 120) = 0;
  *(_OWORD *)(v20 + 104) = 0u;
  *(_OWORD *)(v20 + 88) = 0u;
  *(_OWORD *)(v20 + 72) = 0u;
  *(_OWORD *)(v20 + 56) = 0u;
  *(_OWORD *)(v20 + 40) = 0u;
  *(_OWORD *)(v20 + 24) = 0u;
  *(_OWORD *)(v20 + 8) = 0u;
  *(_DWORD *)(v20 + 120) = 1;
  *(_QWORD *)v20 = &off_24EC1F598;
  __cxa_end_catch();
  JUMPOUT(0x223176FCCLL);
}

void sub_223177100(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  v21 = *(_QWORD *)(v20 - 104);
  if (v21)
  {
    *(_QWORD *)(v20 - 96) = v21;
    JUMPOUT(0x223177164);
  }
  JUMPOUT(0x223177168);
}

void sub_223177170(const void *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_223176DB4(a3, a1, a2, 0);
}

uint64_t sub_223177188(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2231771F0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223177258(uint64_t a1, CFTypeRef *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *__p;
  void *v8[2];
  char v9;
  const void *v10;
  std::__shared_weak_count *v11;
  std::error_condition v12;

  if (*(_QWORD *)(a1 + 8))
    return *(_QWORD *)(a1 + 112);
  v9 = 12;
  strcpy((char *)v8, "Invalid mesh");
  __p = (char *)operator new(0x60uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
  if (a2)
  {
    *(_QWORD *)&v12.__val_ = 22;
    v12.__cat_ = std::generic_category();
    sub_2245321DC(&v12, (uint64_t)v8, (CFErrorRef *)&v10);
    sub_224532194(&v10, a2);
    v4 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  operator delete(__p);
  if (v9 < 0)
    operator delete(v8[0]);
  return 0;
}

void sub_2231773A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

void sub_223177404(CFTypeRef *a1, unsigned int a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  const void *v8;
  std::__shared_weak_count *v9;
  std::error_condition v10;

  if (a1)
  {
    *(_QWORD *)&v10.__val_ = a2;
    v10.__cat_ = std::generic_category();
    sub_2245321DC(&v10, a3, (CFErrorRef *)&v8);
    sub_224532194(&v8, a1);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_2231774CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unint64_t sub_2231774E0(uint64_t a1, CFTypeRef *a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char *__p;
  void *v9[2];
  char v10;
  const void *v11;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
    return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2[1] - *v2) >> 2);
  v10 = 12;
  strcpy((char *)v9, "Invalid mesh");
  __p = (char *)operator new(0x60uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)v9, (CFErrorRef *)&v11);
    sub_224532194(&v11, a2);
    v5 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  operator delete(__p);
  if (v10 < 0)
    operator delete(v9[0]);
  return -1;
}

void sub_223177644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

__n128 sub_2231776A0(uint64_t a1, CFTypeRef *a2)
{
  __n128 result;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *__p;
  void *v8[2];
  char v9;
  const void *v10;
  std::__shared_weak_count *v11;
  std::error_condition v12;

  if (*(_QWORD *)(a1 + 8))
  {
    if (*(_BYTE *)(a1 + 88))
    {
      result.n128_u64[0] = sub_224506A04(a1 + 24).n128_u64[0];
      return result;
    }
  }
  else
  {
    v9 = 12;
    strcpy((char *)v8, "Invalid mesh");
    __p = (char *)operator new(0x60uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
    if (a2)
    {
      *(_QWORD *)&v12.__val_ = 22;
      v12.__cat_ = std::generic_category();
      sub_2245321DC(&v12, (uint64_t)v8, (CFErrorRef *)&v10);
      sub_224532194(&v10, a2);
      v4 = v11;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
    }
    operator delete(__p);
    if (v9 < 0)
      operator delete(v8[0]);
  }
  return *(__n128 *)MEMORY[0x24BDAEE00];
}

void sub_2231777F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_223177850(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char *__p;
  void *v9[2];
  char v10;
  const void *v11;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    return (uint64_t)(*(_QWORD *)(v2 + 184) - *(_QWORD *)(v2 + 176)) >> 3;
  v10 = 12;
  strcpy((char *)v9, "Invalid mesh");
  __p = (char *)operator new(0x60uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)v9, (CFErrorRef *)&v11);
    sub_224532194(&v11, a2);
    v5 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  operator delete(__p);
  if (v10 < 0)
    operator delete(v9[0]);
  return -1;
}

void sub_2231779A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

unint64_t sub_223177A04(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char *__p;
  void *v9[2];
  char v10;
  const void *v11;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v2 + 120) - *(_QWORD *)(v2 + 112)) >> 2);
  v10 = 12;
  strcpy((char *)v9, "Invalid mesh");
  __p = (char *)operator new(0x60uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)v9, (CFErrorRef *)&v11);
    sub_224532194(&v11, a2);
    v5 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  operator delete(__p);
  if (v10 < 0)
    operator delete(v9[0]);
  return -1;
}

void sub_223177B68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

unint64_t sub_223177BC4(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char *__p;
  void *v9[2];
  char v10;
  const void *v11;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v2 + 216) - *(_QWORD *)(v2 + 208)) >> 2);
  v10 = 12;
  strcpy((char *)v9, "Invalid mesh");
  __p = (char *)operator new(0x60uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)v9, (CFErrorRef *)&v11);
    sub_224532194(&v11, a2);
    v5 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  operator delete(__p);
  if (v10 < 0)
    operator delete(v9[0]);
  return -1;
}

void sub_223177D28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_223177D84(uint64_t a1, CFTypeRef *a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char *__p;
  void *v9[2];
  char v10;
  const void *v11;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    if (*v2 == v2[1])
      return 0;
    else
      return *v2;
  }
  else
  {
    v10 = 12;
    strcpy((char *)v9, "Invalid mesh");
    __p = (char *)operator new(0x60uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
    if (a2)
    {
      *(_QWORD *)&v13.__val_ = 22;
      v13.__cat_ = std::generic_category();
      sub_2245321DC(&v13, (uint64_t)v9, (CFErrorRef *)&v11);
      sub_224532194(&v11, a2);
      v5 = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    operator delete(__p);
    if (v10 < 0)
      operator delete(v9[0]);
    return 0;
  }
}

void sub_223177EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_223177F38(uint64_t a1, void *a2, CFTypeRef *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t *v8;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *p_shared_owners;
  char *__p;
  void *v15[4];
  const void *v16;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  v8 = (uint64_t *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    if (a2)
      return sub_2231781CC(v7, a2, v8, a3, a5, a6);
    HIBYTE(v15[2]) = 17;
    strcpy((char *)v15, "MTLDevice is NULL");
    __p = (char *)operator new(0x60uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
    if (a3)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_2245321DC(&v18, (uint64_t)v15, (CFErrorRef *)&v16);
      sub_224532194(&v16, a3);
      v10 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        goto LABEL_13;
      }
    }
  }
  else
  {
    HIBYTE(v15[2]) = 12;
    strcpy((char *)v15, "Invalid mesh");
    __p = (char *)operator new(0x60uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
    if (a3)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_2245321DC(&v18, (uint64_t)v15, (CFErrorRef *)&v16);
      sub_224532194(&v16, a3);
      v10 = v17;
      if (v17)
      {
        v11 = (unint64_t *)&v17->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
LABEL_13:
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
  }
  operator delete(__p);
  if (SHIBYTE(v15[2]) < 0)
    operator delete(v15[0]);
  return 0;
}

void sub_223178158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  sub_223167354(v21 - 48);
  if (a15 < 0)
  {
    operator delete(__p);
    if (a21 < 0)
    {
LABEL_5:
      operator delete(a16);
      _Unwind_Resume(a1);
    }
  }
  else if (a21 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2231781CC(uint64_t a1, void *a2, uint64_t *a3, CFTypeRef *a4, uint64_t a5, uint64_t a6)
{
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  char *__p;
  void *v17;
  __int128 v18;
  const void *v19;
  std::__shared_weak_count *v20;
  std::error_condition v21;

  v8 = *(const char **)a1;
  v9 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 == v9)
  {
    v17 = operator new(0x28uLL);
    v18 = xmmword_2245B8E00;
    strcpy((char *)v17, "Cannot allocate MTLBuffer of size zero");
    __p = (char *)operator new(0x60uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
    if (a4)
    {
      *(_QWORD *)&v21.__val_ = 22;
      v21.__cat_ = std::generic_category();
      sub_2245321DC(&v21, (uint64_t)&v17, (CFErrorRef *)&v19);
      sub_224532194(&v19, a4);
      v13 = v20;
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    operator delete(__p);
    if (SHIBYTE(v18) < 0)
      operator delete(v17);
    return 0;
  }
  else
  {
    v10 = v9 - (_QWORD)v8;
    if (*(_DWORD *)(a1 + 28) == 1)
      return sub_22317FF7C(0xAAAAAAAAAAAAAAABLL * (v10 >> 2), (uint64_t)v8, a2, a3);
    else
      return objc_msgSend_newBufferWithBytes_length_options_(a2, v8, (uint64_t)v8, v10, 0, a6);
  }
}

void sub_223178378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_2231783D4(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char *__p;
  void *v9[2];
  char v10;
  const void *v11;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 112) == *(_QWORD *)(v2 + 120))
      return 0;
    else
      return *(_QWORD *)(v2 + 112);
  }
  else
  {
    v10 = 12;
    strcpy((char *)v9, "Invalid mesh");
    __p = (char *)operator new(0x60uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
    if (a2)
    {
      *(_QWORD *)&v13.__val_ = 22;
      v13.__cat_ = std::generic_category();
      sub_2245321DC(&v13, (uint64_t)v9, (CFErrorRef *)&v11);
      sub_224532194(&v11, a2);
      v5 = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    operator delete(__p);
    if (v10 < 0)
      operator delete(v9[0]);
    return 0;
  }
}

void sub_22317852C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_223178588(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char *__p;
  void *v9[2];
  char v10;
  const void *v11;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 208) == *(_QWORD *)(v2 + 216))
      return 0;
    else
      return *(_QWORD *)(v2 + 208);
  }
  else
  {
    v10 = 12;
    strcpy((char *)v9, "Invalid mesh");
    __p = (char *)operator new(0x60uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
    if (a2)
    {
      *(_QWORD *)&v13.__val_ = 22;
      v13.__cat_ = std::generic_category();
      sub_2245321DC(&v13, (uint64_t)v9, (CFErrorRef *)&v11);
      sub_224532194(&v11, a2);
      v5 = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    operator delete(__p);
    if (v10 < 0)
      operator delete(v9[0]);
    return 0;
  }
}

void sub_2231786E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_22317873C(uint64_t a1, void *a2, CFTypeRef *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  const char *v9;
  const char *v10;
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  char *v17;
  unint64_t *v18;
  char *__p;
  char *v20[4];
  const void *v21;
  std::__shared_weak_count *v22;
  std::error_condition v23;

  v7 = *(_QWORD *)(a1 + 8);
  if (!v7)
  {
    HIBYTE(v20[2]) = 12;
    strcpy((char *)v20, "Invalid mesh");
    __p = (char *)operator new(0x60uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
    if (!a3)
      goto LABEL_25;
    *(_QWORD *)&v23.__val_ = 22;
    v23.__cat_ = std::generic_category();
    sub_2245321DC(&v23, (uint64_t)v20, (CFErrorRef *)&v21);
    sub_224532194(&v21, a3);
    v13 = v22;
    if (!v22)
      goto LABEL_25;
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    goto LABEL_20;
  }
  if (!a2)
  {
    HIBYTE(v20[2]) = 17;
    strcpy((char *)v20, "MTLDevice is NULL");
    __p = (char *)operator new(0x60uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
    if (!a3)
      goto LABEL_25;
    *(_QWORD *)&v23.__val_ = 22;
    v23.__cat_ = std::generic_category();
    sub_2245321DC(&v23, (uint64_t)v20, (CFErrorRef *)&v21);
    sub_224532194(&v21, a3);
    v13 = v22;
    if (!v22)
      goto LABEL_25;
    v16 = (unint64_t *)&v22->__shared_owners_;
    do
      v15 = __ldaxr(v16);
    while (__stlxr(v15 - 1, v16));
LABEL_20:
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    goto LABEL_25;
  }
  v9 = *(const char **)(v7 + 112);
  v10 = *(const char **)(v7 + 120);
  if (v9 != v10)
  {
    v11 = v10 - v9;
    if (*(_DWORD *)(v7 + 140) == 1)
      return sub_22318014C(0xAAAAAAAAAAAAAAABLL * (v11 >> 2), (uint64_t)v9, a2, (uint64_t *)(a1 + 8));
    else
      return objc_msgSend_newBufferWithBytes_length_options_(a2, v9, (uint64_t)v9, v11, 0, a6);
  }
  v20[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v20[1] = xmmword_2245B8E00;
  strcpy(v20[0], "Cannot allocate MTLBuffer of size zero");
  v17 = (char *)operator new(0x60uLL);
  __p = v17;
  strcpy(v17, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
  if (a3)
  {
    *(_QWORD *)&v23.__val_ = 22;
    v23.__cat_ = std::generic_category();
    sub_2245321DC(&v23, (uint64_t)v20, (CFErrorRef *)&v21);
    sub_224532194(&v21, a3);
    v13 = v22;
    if (v22)
    {
      v18 = (unint64_t *)&v22->__shared_owners_;
      do
        v15 = __ldaxr(v18);
      while (__stlxr(v15 - 1, v18));
      goto LABEL_20;
    }
LABEL_25:
    v17 = __p;
  }
  operator delete(v17);
  if (SHIBYTE(v20[2]) < 0)
    operator delete(v20[0]);
  return 0;
}

void sub_223178A74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  sub_223167354(v21 - 48);
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a21 & 0x80000000) == 0)
  {
LABEL_3:
    _Unwind_Resume(a1);
  }
  operator delete(a16);
  _Unwind_Resume(a1);
}

void sub_223178AF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    JUMPOUT(0x223178AE0);
  JUMPOUT(0x223178AD0);
}

void sub_223178B00(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char *__p;
  void *v9[2];
  char v10;
  const void *v11;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    sub_223CD8718((_QWORD *)v3, (unsigned int **)(v3 + 112), (int32x2_t **)(v3 + 72));
    *(_DWORD *)(*(_QWORD *)(a1 + 8) + 104) = 1;
  }
  else
  {
    v10 = 12;
    strcpy((char *)v9, "Invalid mesh");
    __p = (char *)operator new(0x60uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
    if (a2)
    {
      *(_QWORD *)&v13.__val_ = 22;
      v13.__cat_ = std::generic_category();
      sub_2245321DC(&v13, (uint64_t)v9, (CFErrorRef *)&v11);
      sub_224532194(&v11, a2);
      v5 = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    operator delete(__p);
    if (v10 < 0)
      operator delete(v9[0]);
  }
}

void sub_223178C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_223178CB8(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char *__p;
  void *v9[2];
  char v10;
  const void *v11;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 72) == *(_QWORD *)(v2 + 80))
      return 0;
    else
      return *(_QWORD *)(v2 + 72);
  }
  else
  {
    v10 = 12;
    strcpy((char *)v9, "Invalid mesh");
    __p = (char *)operator new(0x60uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
    if (a2)
    {
      *(_QWORD *)&v13.__val_ = 22;
      v13.__cat_ = std::generic_category();
      sub_2245321DC(&v13, (uint64_t)v9, (CFErrorRef *)&v11);
      sub_224532194(&v11, a2);
      v5 = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    operator delete(__p);
    if (v10 < 0)
      operator delete(v9[0]);
    return 0;
  }
}

void sub_223178E10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_223178E6C(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char *__p;
  void *v9[2];
  char v10;
  const void *v11;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 176) == *(_QWORD *)(v2 + 184))
      return 0;
    else
      return *(_QWORD *)(v2 + 176);
  }
  else
  {
    v10 = 12;
    strcpy((char *)v9, "Invalid mesh");
    __p = (char *)operator new(0x60uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
    if (a2)
    {
      *(_QWORD *)&v13.__val_ = 22;
      v13.__cat_ = std::generic_category();
      sub_2245321DC(&v13, (uint64_t)v9, (CFErrorRef *)&v11);
      sub_224532194(&v11, a2);
      v5 = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    operator delete(__p);
    if (v10 < 0)
      operator delete(v9[0]);
    return 0;
  }
}

void sub_223178FC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_223179020(uint64_t a1, void *a2, CFTypeRef *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *p_shared_owners;
  char *__p;
  void *v14[4];
  const void *v15;
  std::__shared_weak_count *v16;
  std::error_condition v17;

  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    if (a2)
      return sub_2231781CC(v7 + 72, a2, (uint64_t *)(a1 + 8), a3, a5, a6);
    HIBYTE(v14[2]) = 17;
    strcpy((char *)v14, "MTLDevice is NULL");
    __p = (char *)operator new(0x60uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
    if (a3)
    {
      *(_QWORD *)&v17.__val_ = 22;
      v17.__cat_ = std::generic_category();
      sub_2245321DC(&v17, (uint64_t)v14, (CFErrorRef *)&v15);
      sub_224532194(&v15, a3);
      v9 = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        goto LABEL_13;
      }
    }
  }
  else
  {
    HIBYTE(v14[2]) = 12;
    strcpy((char *)v14, "Invalid mesh");
    __p = (char *)operator new(0x60uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
    if (a3)
    {
      *(_QWORD *)&v17.__val_ = 22;
      v17.__cat_ = std::generic_category();
      sub_2245321DC(&v17, (uint64_t)v14, (CFErrorRef *)&v15);
      sub_224532194(&v15, a3);
      v9 = v16;
      if (v16)
      {
        v10 = (unint64_t *)&v16->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
LABEL_13:
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
  }
  operator delete(__p);
  if (SHIBYTE(v14[2]) < 0)
    operator delete(v14[0]);
  return 0;
}

void sub_223179244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  sub_223167354(v21 - 48);
  if (a15 < 0)
  {
    operator delete(__p);
    if (a21 < 0)
    {
LABEL_5:
      operator delete(a16);
      _Unwind_Resume(a1);
    }
  }
  else if (a21 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2231792B8(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char *__p;
  void *v9[2];
  char v10;
  const void *v11;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 240) == *(_QWORD *)(v2 + 248))
      return 0;
    else
      return *(_QWORD *)(v2 + 240);
  }
  else
  {
    v10 = 12;
    strcpy((char *)v9, "Invalid mesh");
    __p = (char *)operator new(0x60uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
    if (a2)
    {
      *(_QWORD *)&v13.__val_ = 22;
      v13.__cat_ = std::generic_category();
      sub_2245321DC(&v13, (uint64_t)v9, (CFErrorRef *)&v11);
      sub_224532194(&v11, a2);
      v5 = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    operator delete(__p);
    if (v10 < 0)
      operator delete(v9[0]);
    return 0;
  }
}

void sub_223179410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_22317946C(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char *__p;
  void *v9[2];
  char v10;
  const void *v11;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 32) == *(_QWORD *)(v2 + 40))
      return 0;
    else
      return *(_QWORD *)(v2 + 32);
  }
  else
  {
    v10 = 12;
    strcpy((char *)v9, "Invalid mesh");
    __p = (char *)operator new(0x60uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
    if (a2)
    {
      *(_QWORD *)&v13.__val_ = 22;
      v13.__cat_ = std::generic_category();
      sub_2245321DC(&v13, (uint64_t)v9, (CFErrorRef *)&v11);
      sub_224532194(&v11, a2);
      v5 = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    operator delete(__p);
    if (v10 < 0)
      operator delete(v9[0]);
    return 0;
  }
}

void sub_2231795C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_223179620(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char *__p;
  void *v9[2];
  char v10;
  const void *v11;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 32) == *(_QWORD *)(v2 + 40))
      return 0;
    else
      return *(_QWORD *)(v2 + 32);
  }
  else
  {
    v10 = 12;
    strcpy((char *)v9, "Invalid mesh");
    __p = (char *)operator new(0x60uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
    if (a2)
    {
      *(_QWORD *)&v13.__val_ = 22;
      v13.__cat_ = std::generic_category();
      sub_2245321DC(&v13, (uint64_t)v9, (CFErrorRef *)&v11);
      sub_224532194(&v11, a2);
      v5 = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    operator delete(__p);
    if (v10 < 0)
      operator delete(v9[0]);
    return 0;
  }
}

void sub_223179778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_2231797D4(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  char *__p;
  char *__pa;
  void *v18[4];
  const void *v19;
  std::__shared_weak_count *v20;
  std::error_condition v21;

  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    if (*(_BYTE *)(v5 + 380))
    {
      v6 = *(_QWORD *)(v5 + 356);
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(v5 + 364);
      *(_QWORD *)a2 = v6;
      v7 = *(_QWORD *)(a1 + 8);
      v8 = *(_QWORD *)(v7 + 368);
      *(_DWORD *)(a3 + 8) = *(_DWORD *)(v7 + 376);
      *(_QWORD *)a3 = v8;
      return 1;
    }
    HIBYTE(v18[2]) = 20;
    strcpy((char *)v18, "Mesh bbox is not set");
    __pa = (char *)operator new(0x60uLL);
    strcpy(__pa, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
    if (a4)
    {
      *(_QWORD *)&v21.__val_ = 1;
      v21.__cat_ = std::generic_category();
      sub_2245321DC(&v21, (uint64_t)v18, (CFErrorRef *)&v19);
      sub_224532194(&v19, a4);
      v13 = v20;
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    operator delete(__pa);
    if ((SHIBYTE(v18[2]) & 0x80000000) == 0)
      return 0;
  }
  else
  {
    HIBYTE(v18[2]) = 12;
    strcpy((char *)v18, "Invalid mesh");
    __p = (char *)operator new(0x60uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
    if (a4)
    {
      *(_QWORD *)&v21.__val_ = 22;
      v21.__cat_ = std::generic_category();
      sub_2245321DC(&v21, (uint64_t)v18, (CFErrorRef *)&v19);
      sub_224532194(&v19, a4);
      v10 = v20;
      if (v20)
      {
        v11 = (unint64_t *)&v20->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
    operator delete(__p);
    if ((SHIBYTE(v18[2]) & 0x80000000) == 0)
      return 0;
  }
  operator delete(v18[0]);
  return 0;
}

void sub_223179A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  sub_223167354(v21 - 48);
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a21 & 0x80000000) == 0)
  {
LABEL_3:
    _Unwind_Resume(a1);
  }
  operator delete(a16);
  _Unwind_Resume(a1);
}

void sub_223179AC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    JUMPOUT(0x223179AB8);
  JUMPOUT(0x223179AA8);
}

uint64_t sub_223179AD8(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char *__p;
  void *v9[2];
  char v10;
  const void *v11;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 280) == *(_QWORD *)(v2 + 288))
      return 0;
    else
      return *(_QWORD *)(v2 + 280);
  }
  else
  {
    v10 = 12;
    strcpy((char *)v9, "Invalid mesh");
    __p = (char *)operator new(0x60uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
    if (a2)
    {
      *(_QWORD *)&v13.__val_ = 22;
      v13.__cat_ = std::generic_category();
      sub_2245321DC(&v13, (uint64_t)v9, (CFErrorRef *)&v11);
      sub_224532194(&v11, a2);
      v5 = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    operator delete(__p);
    if (v10 < 0)
      operator delete(v9[0]);
    return 0;
  }
}

void sub_223179C30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_223179C8C(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  char *__p;
  char *__pa;
  _BYTE v13[24];
  const void *v14;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
  {
    v13[23] = 12;
    strcpy(v13, "Invalid mesh");
    __p = (char *)operator new(0x60uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
    if (a2)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_2245321DC(&v16, (uint64_t)v13, (CFErrorRef *)&v14);
      sub_224532194(&v14, a2);
      v5 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    operator delete(__p);
    if ((v13[23] & 0x80000000) == 0)
      return 0;
    goto LABEL_23;
  }
  if (*(_DWORD *)(v3 + 352) != 1)
  {
    *(_QWORD *)v13 = operator new(0x28uLL);
    *(_OWORD *)&v13[8] = xmmword_2245B8E00;
    strcpy(*(char **)v13, "Requested confidence type is not valid");
    __pa = (char *)operator new(0x60uLL);
    strcpy(__pa, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
    if (a2)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_2245321DC(&v16, (uint64_t)v13, (CFErrorRef *)&v14);
      sub_224532194(&v14, a2);
      v8 = v15;
      if (v15)
      {
        v9 = (unint64_t *)&v15->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    operator delete(__pa);
    if ((v13[23] & 0x80000000) == 0)
      return 0;
LABEL_23:
    operator delete(*(void **)v13);
    return 0;
  }
  if (*(_QWORD *)(v3 + 320) == *(_QWORD *)(v3 + 328))
    return 0;
  else
    return *(_QWORD *)(v3 + 320);
}

void sub_223179F0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a20 & 0x80000000) == 0)
  {
LABEL_3:
    _Unwind_Resume(a1);
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

void sub_223179F60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    JUMPOUT(0x223179F50);
  JUMPOUT(0x223179F40);
}

void sub_223179F70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    JUMPOUT(0x223179F50);
  JUMPOUT(0x223179F40);
}

uint64_t sub_223179F80(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  char *__p;
  char *__pa;
  _BYTE v13[24];
  const void *v14;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
  {
    v13[23] = 12;
    strcpy(v13, "Invalid mesh");
    __p = (char *)operator new(0x60uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
    if (a2)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_2245321DC(&v16, (uint64_t)v13, (CFErrorRef *)&v14);
      sub_224532194(&v14, a2);
      v5 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    operator delete(__p);
    if ((v13[23] & 0x80000000) == 0)
      return 0;
    goto LABEL_23;
  }
  if (*(_DWORD *)(v3 + 352) != 2)
  {
    *(_QWORD *)v13 = operator new(0x28uLL);
    *(_OWORD *)&v13[8] = xmmword_2245B8E00;
    strcpy(*(char **)v13, "Requested confidence type is not valid");
    __pa = (char *)operator new(0x60uLL);
    strcpy(__pa, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
    if (a2)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_2245321DC(&v16, (uint64_t)v13, (CFErrorRef *)&v14);
      sub_224532194(&v14, a2);
      v8 = v15;
      if (v15)
      {
        v9 = (unint64_t *)&v15->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    operator delete(__pa);
    if ((v13[23] & 0x80000000) == 0)
      return 0;
LABEL_23:
    operator delete(*(void **)v13);
    return 0;
  }
  if (*(_QWORD *)(v3 + 320) == *(_QWORD *)(v3 + 328))
    return 0;
  else
    return *(_QWORD *)(v3 + 320);
}

void sub_22317A200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a20 & 0x80000000) == 0)
  {
LABEL_3:
    _Unwind_Resume(a1);
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

void sub_22317A254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    JUMPOUT(0x22317A244);
  JUMPOUT(0x22317A234);
}

void sub_22317A264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    JUMPOUT(0x22317A244);
  JUMPOUT(0x22317A234);
}

uint64_t sub_22317A274(uint64_t a1, void *a2, CFTypeRef *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *p_shared_owners;
  char *__p;
  void *v14[4];
  const void *v15;
  std::__shared_weak_count *v16;
  std::error_condition v17;

  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    if (a2)
      return sub_22317A50C(v7 + 240, a2, (uint64_t *)(a1 + 8), a3, a5, a6);
    HIBYTE(v14[2]) = 17;
    strcpy((char *)v14, "MTLDevice is NULL");
    __p = (char *)operator new(0x60uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
    if (a3)
    {
      *(_QWORD *)&v17.__val_ = 22;
      v17.__cat_ = std::generic_category();
      sub_2245321DC(&v17, (uint64_t)v14, (CFErrorRef *)&v15);
      sub_224532194(&v15, a3);
      v9 = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        goto LABEL_13;
      }
    }
  }
  else
  {
    HIBYTE(v14[2]) = 12;
    strcpy((char *)v14, "Invalid mesh");
    __p = (char *)operator new(0x60uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
    if (a3)
    {
      *(_QWORD *)&v17.__val_ = 22;
      v17.__cat_ = std::generic_category();
      sub_2245321DC(&v17, (uint64_t)v14, (CFErrorRef *)&v15);
      sub_224532194(&v15, a3);
      v9 = v16;
      if (v16)
      {
        v10 = (unint64_t *)&v16->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
LABEL_13:
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
  }
  operator delete(__p);
  if (SHIBYTE(v14[2]) < 0)
    operator delete(v14[0]);
  return 0;
}

void sub_22317A498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  sub_223167354(v21 - 48);
  if (a15 < 0)
  {
    operator delete(__p);
    if (a21 < 0)
    {
LABEL_5:
      operator delete(a16);
      _Unwind_Resume(a1);
    }
  }
  else if (a21 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_22317A50C(uint64_t a1, void *a2, uint64_t *a3, CFTypeRef *a4, uint64_t a5, uint64_t a6)
{
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  char *__p;
  void *v17;
  __int128 v18;
  const void *v19;
  std::__shared_weak_count *v20;
  std::error_condition v21;

  v9 = *(const char **)a1;
  v10 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 == v10)
  {
    v17 = operator new(0x28uLL);
    v18 = xmmword_2245B8E00;
    strcpy((char *)v17, "Cannot allocate MTLBuffer of size zero");
    __p = (char *)operator new(0x60uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
    if (a4)
    {
      *(_QWORD *)&v21.__val_ = 22;
      v21.__cat_ = std::generic_category();
      sub_2245321DC(&v21, (uint64_t)&v17, (CFErrorRef *)&v19);
      sub_224532194(&v19, a4);
      v13 = v20;
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    operator delete(__p);
    if (SHIBYTE(v18) < 0)
      operator delete(v17);
    return 0;
  }
  else
  {
    v11 = v10 - (_QWORD)v9;
    if (*(_DWORD *)(a1 + 28) == 1)
      return sub_2231802B4(v11, (uint64_t)v9, a2, a3);
    else
      return objc_msgSend_newBufferWithBytes_length_options_(a2, v9, (uint64_t)v9, v11, 0, a6);
  }
}

void sub_22317A6AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_22317A708(uint64_t a1, void *a2, CFTypeRef *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *p_shared_owners;
  char *__p;
  void *v14[4];
  const void *v15;
  std::__shared_weak_count *v16;
  std::error_condition v17;

  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    if (a2)
      return sub_2231781CC(v7 + 32, a2, (uint64_t *)(a1 + 8), a3, a5, a6);
    HIBYTE(v14[2]) = 17;
    strcpy((char *)v14, "MTLDevice is NULL");
    __p = (char *)operator new(0x60uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
    if (a3)
    {
      *(_QWORD *)&v17.__val_ = 22;
      v17.__cat_ = std::generic_category();
      sub_2245321DC(&v17, (uint64_t)v14, (CFErrorRef *)&v15);
      sub_224532194(&v15, a3);
      v9 = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        goto LABEL_13;
      }
    }
  }
  else
  {
    HIBYTE(v14[2]) = 12;
    strcpy((char *)v14, "Invalid mesh");
    __p = (char *)operator new(0x60uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
    if (a3)
    {
      *(_QWORD *)&v17.__val_ = 22;
      v17.__cat_ = std::generic_category();
      sub_2245321DC(&v17, (uint64_t)v14, (CFErrorRef *)&v15);
      sub_224532194(&v15, a3);
      v9 = v16;
      if (v16)
      {
        v10 = (unint64_t *)&v16->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
LABEL_13:
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
  }
  operator delete(__p);
  if (SHIBYTE(v14[2]) < 0)
    operator delete(v14[0]);
  return 0;
}

void sub_22317A92C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  sub_223167354(v21 - 48);
  if (a15 < 0)
  {
    operator delete(__p);
    if (a21 < 0)
    {
LABEL_5:
      operator delete(a16);
      _Unwind_Resume(a1);
    }
  }
  else if (a21 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_22317A9A0(uint64_t a1, void *a2, CFTypeRef *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *p_shared_owners;
  char *__p;
  void *v14[4];
  const void *v15;
  std::__shared_weak_count *v16;
  std::error_condition v17;

  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    if (a2)
      return sub_22317A50C(v7 + 280, a2, (uint64_t *)(a1 + 8), a3, a5, a6);
    HIBYTE(v14[2]) = 17;
    strcpy((char *)v14, "MTLDevice is NULL");
    __p = (char *)operator new(0x60uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
    if (a3)
    {
      *(_QWORD *)&v17.__val_ = 22;
      v17.__cat_ = std::generic_category();
      sub_2245321DC(&v17, (uint64_t)v14, (CFErrorRef *)&v15);
      sub_224532194(&v15, a3);
      v9 = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        goto LABEL_13;
      }
    }
  }
  else
  {
    HIBYTE(v14[2]) = 12;
    strcpy((char *)v14, "Invalid mesh");
    __p = (char *)operator new(0x60uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
    if (a3)
    {
      *(_QWORD *)&v17.__val_ = 22;
      v17.__cat_ = std::generic_category();
      sub_2245321DC(&v17, (uint64_t)v14, (CFErrorRef *)&v15);
      sub_224532194(&v15, a3);
      v9 = v16;
      if (v16)
      {
        v10 = (unint64_t *)&v16->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
LABEL_13:
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
  }
  operator delete(__p);
  if (SHIBYTE(v14[2]) < 0)
    operator delete(v14[0]);
  return 0;
}

void sub_22317ABC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  sub_223167354(v21 - 48);
  if (a15 < 0)
  {
    operator delete(__p);
    if (a21 < 0)
    {
LABEL_5:
      operator delete(a16);
      _Unwind_Resume(a1);
    }
  }
  else if (a21 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_22317AC38(uint64_t a1, void *a2, CFTypeRef *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *p_shared_owners;
  char *__p;
  void *v14[4];
  const void *v15;
  std::__shared_weak_count *v16;
  std::error_condition v17;

  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    if (a2)
      return sub_22317AED0(v7 + 320, a2, (uint64_t *)(a1 + 8), a3, a5, a6);
    HIBYTE(v14[2]) = 17;
    strcpy((char *)v14, "MTLDevice is NULL");
    __p = (char *)operator new(0x60uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
    if (a3)
    {
      *(_QWORD *)&v17.__val_ = 22;
      v17.__cat_ = std::generic_category();
      sub_2245321DC(&v17, (uint64_t)v14, (CFErrorRef *)&v15);
      sub_224532194(&v15, a3);
      v9 = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        goto LABEL_13;
      }
    }
  }
  else
  {
    HIBYTE(v14[2]) = 12;
    strcpy((char *)v14, "Invalid mesh");
    __p = (char *)operator new(0x60uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
    if (a3)
    {
      *(_QWORD *)&v17.__val_ = 22;
      v17.__cat_ = std::generic_category();
      sub_2245321DC(&v17, (uint64_t)v14, (CFErrorRef *)&v15);
      sub_224532194(&v15, a3);
      v9 = v16;
      if (v16)
      {
        v10 = (unint64_t *)&v16->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
LABEL_13:
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
  }
  operator delete(__p);
  if (SHIBYTE(v14[2]) < 0)
    operator delete(v14[0]);
  return 0;
}

void sub_22317AE5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  sub_223167354(v21 - 48);
  if (a15 < 0)
  {
    operator delete(__p);
    if (a21 < 0)
    {
LABEL_5:
      operator delete(a16);
      _Unwind_Resume(a1);
    }
  }
  else if (a21 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_22317AED0(uint64_t a1, void *a2, uint64_t *a3, CFTypeRef *a4, uint64_t a5, uint64_t a6)
{
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  char *__p;
  void *v17;
  __int128 v18;
  const void *v19;
  std::__shared_weak_count *v20;
  std::error_condition v21;

  v8 = *(const char **)a1;
  v9 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 == v9)
  {
    v17 = operator new(0x28uLL);
    v18 = xmmword_2245B8E00;
    strcpy((char *)v17, "Cannot allocate MTLBuffer of size zero");
    __p = (char *)operator new(0x60uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
    if (a4)
    {
      *(_QWORD *)&v21.__val_ = 22;
      v21.__cat_ = std::generic_category();
      sub_2245321DC(&v21, (uint64_t)&v17, (CFErrorRef *)&v19);
      sub_224532194(&v19, a4);
      v13 = v20;
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    operator delete(__p);
    if (SHIBYTE(v18) < 0)
      operator delete(v17);
    return 0;
  }
  else
  {
    v10 = v9 - (_QWORD)v8;
    if (*(_DWORD *)(a1 + 28) == 1)
      return sub_223180414(v10 >> 2, (uint64_t)v8, a2, a3);
    else
      return objc_msgSend_newBufferWithBytes_length_options_(a2, v8, (uint64_t)v8, v10, 0, a6);
  }
}

void sub_22317B070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_22317B0CC(uint64_t a1, void *a2, CFTypeRef *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *p_shared_owners;
  char *__p;
  void *v14[4];
  const void *v15;
  std::__shared_weak_count *v16;
  std::error_condition v17;

  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    if (a2)
      return sub_22317AED0(v7 + 320, a2, (uint64_t *)(a1 + 8), a3, a5, a6);
    HIBYTE(v14[2]) = 17;
    strcpy((char *)v14, "MTLDevice is NULL");
    __p = (char *)operator new(0x60uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
    if (a3)
    {
      *(_QWORD *)&v17.__val_ = 22;
      v17.__cat_ = std::generic_category();
      sub_2245321DC(&v17, (uint64_t)v14, (CFErrorRef *)&v15);
      sub_224532194(&v15, a3);
      v9 = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        goto LABEL_13;
      }
    }
  }
  else
  {
    HIBYTE(v14[2]) = 12;
    strcpy((char *)v14, "Invalid mesh");
    __p = (char *)operator new(0x60uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
    if (a3)
    {
      *(_QWORD *)&v17.__val_ = 22;
      v17.__cat_ = std::generic_category();
      sub_2245321DC(&v17, (uint64_t)v14, (CFErrorRef *)&v15);
      sub_224532194(&v15, a3);
      v9 = v16;
      if (v16)
      {
        v10 = (unint64_t *)&v16->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
LABEL_13:
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
  }
  operator delete(__p);
  if (SHIBYTE(v14[2]) < 0)
    operator delete(v14[0]);
  return 0;
}

void sub_22317B2F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  sub_223167354(v21 - 48);
  if (a15 < 0)
  {
    operator delete(__p);
    if (a21 < 0)
    {
LABEL_5:
      operator delete(a16);
      _Unwind_Resume(a1);
    }
  }
  else if (a21 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

BOOL sub_22317B364(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *__p;
  void *v10[2];
  char v11;
  const void *v12;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    *(_QWORD *)(a1 + 112) = a2;
    return v3 != 0;
  }
  v11 = 12;
  strcpy((char *)v10, "Invalid mesh");
  __p = (char *)operator new(0x60uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
  if (a3)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)v10, (CFErrorRef *)&v12);
    sub_224532194(&v12, a3);
    v6 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(__p);
  if ((v11 & 0x80000000) == 0)
    return v3 != 0;
  operator delete(v10[0]);
  return 0;
}

void sub_22317B4B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_22317B514(uint64_t a1, const void *a2, unint64_t a3, CFTypeRef *a4)
{
  char **v6;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  char *__p;
  char *__pa;
  _BYTE v20[24];
  const void *v21;
  std::__shared_weak_count *v22;
  std::error_condition v23;

  v6 = *(char ***)(a1 + 8);
  if (v6)
  {
    if (!a2 && a3)
    {
      *(_QWORD *)v20 = operator new(0x20uLL);
      *(_OWORD *)&v20[8] = xmmword_2245B9420;
      strcpy(*(char **)v20, "Invalid vertices pointer");
      __p = (char *)operator new(0x60uLL);
      strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
      if (a4)
      {
        *(_QWORD *)&v23.__val_ = 22;
        v23.__cat_ = std::generic_category();
        sub_2245321DC(&v23, (uint64_t)v20, (CFErrorRef *)&v21);
        sub_224532194(&v21, a4);
        v9 = v22;
        if (v22)
        {
          p_shared_owners = (unint64_t *)&v22->__shared_owners_;
          do
            v11 = __ldaxr(p_shared_owners);
          while (__stlxr(v11 - 1, p_shared_owners));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
      }
      operator delete(__p);
      if ((v20[23] & 0x80000000) != 0)
        operator delete(*(void **)v20);
      return 0;
    }
    v16 = *v6;
    v17 = 0xAAAAAAAAAAAAAAABLL * ((v6[1] - *v6) >> 2);
    if (a3 <= v17)
    {
      if (a3 < v17)
        v6[1] = &v16[12 * a3];
      if (!a3)
        return 1;
    }
    else
    {
      sub_22317EF30((uint64_t)v6, a3 - v17);
      v16 = **(char ***)(a1 + 8);
    }
    memcpy(v16, a2, 12 * a3);
    return 1;
  }
  v20[23] = 12;
  strcpy(v20, "Invalid mesh");
  __pa = (char *)operator new(0x60uLL);
  strcpy(__pa, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
  if (a4)
  {
    *(_QWORD *)&v23.__val_ = 22;
    v23.__cat_ = std::generic_category();
    sub_2245321DC(&v23, (uint64_t)v20, (CFErrorRef *)&v21);
    sub_224532194(&v21, a4);
    v13 = v22;
    if (v22)
    {
      v14 = (unint64_t *)&v22->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  operator delete(__pa);
  if ((v20[23] & 0x80000000) != 0)
    operator delete(*(void **)v20);
  return 0;
}

void sub_22317B7FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_22317B870(uint64_t a1, const void *a2, unint64_t a3, CFTypeRef *a4)
{
  uint64_t v5;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  char *__p;
  char *__pa;
  _BYTE v20[24];
  const void *v21;
  std::__shared_weak_count *v22;
  std::error_condition v23;

  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    if (!a2 && a3)
    {
      *(_QWORD *)v20 = operator new(0x19uLL);
      *(_OWORD *)&v20[8] = xmmword_2245B9430;
      strcpy(*(char **)v20, "Invalid indices pointer");
      __p = (char *)operator new(0x60uLL);
      strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
      if (a4)
      {
        *(_QWORD *)&v23.__val_ = 22;
        v23.__cat_ = std::generic_category();
        sub_2245321DC(&v23, (uint64_t)v20, (CFErrorRef *)&v21);
        sub_224532194(&v21, a4);
        v9 = v22;
        if (v22)
        {
          p_shared_owners = (unint64_t *)&v22->__shared_owners_;
          do
            v11 = __ldaxr(p_shared_owners);
          while (__stlxr(v11 - 1, p_shared_owners));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
      }
      operator delete(__p);
      if ((v20[23] & 0x80000000) != 0)
        operator delete(*(void **)v20);
      return 0;
    }
    v16 = *(char **)(v5 + 112);
    v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v5 + 120) - (_QWORD)v16) >> 2);
    if (a3 <= v17)
    {
      if (a3 < v17)
        *(_QWORD *)(v5 + 120) = &v16[12 * a3];
      if (!a3)
        return 1;
    }
    else
    {
      sub_22317F10C(v5 + 112, a3 - v17);
      v16 = *(char **)(*(_QWORD *)(a1 + 8) + 112);
    }
    memcpy(v16, a2, 12 * a3);
    return 1;
  }
  v20[23] = 12;
  strcpy(v20, "Invalid mesh");
  __pa = (char *)operator new(0x60uLL);
  strcpy(__pa, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
  if (a4)
  {
    *(_QWORD *)&v23.__val_ = 22;
    v23.__cat_ = std::generic_category();
    sub_2245321DC(&v23, (uint64_t)v20, (CFErrorRef *)&v21);
    sub_224532194(&v21, a4);
    v13 = v22;
    if (v22)
    {
      v14 = (unint64_t *)&v22->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  operator delete(__pa);
  if ((v20[23] & 0x80000000) != 0)
    operator delete(*(void **)v20);
  return 0;
}

void sub_22317BB5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_22317BBD0(uint64_t a1, const void *a2, size_t a3, _DWORD *a4, CFTypeRef *a5)
{
  uint64_t v6;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  char *v16;
  size_t v17;
  char *__p;
  _BYTE v19[24];
  const void *v20;
  std::__shared_weak_count *v21;
  std::error_condition v22;

  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    if (!a2 && a3)
    {
      *(_QWORD *)v19 = operator new(0x20uLL);
      *(_OWORD *)&v19[8] = xmmword_2245B8D00;
      strcpy(*(char **)v19, "Invalid semantics pointer");
      __p = (char *)operator new(0x60uLL);
      strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
      if (a5)
      {
        *(_QWORD *)&v22.__val_ = 22;
        v22.__cat_ = std::generic_category();
        sub_2245321DC(&v22, (uint64_t)v19, (CFErrorRef *)&v20);
        sub_224532194(&v20, a5);
        v11 = v21;
        if (v21)
        {
          p_shared_owners = (unint64_t *)&v21->__shared_owners_;
          do
            v13 = __ldaxr(p_shared_owners);
          while (__stlxr(v13 - 1, p_shared_owners));
          goto LABEL_13;
        }
      }
      goto LABEL_15;
    }
    v16 = *(char **)(v6 + 240);
    v17 = *(_QWORD *)(v6 + 248) - (_QWORD)v16;
    if (a3 <= v17)
    {
      if (a3 < v17)
        *(_QWORD *)(v6 + 248) = &v16[a3];
      if (!a3)
        return 1;
    }
    else
    {
      sub_22317F2E8(v6 + 240, a3 - v17);
      v16 = *(char **)(*(_QWORD *)(a1 + 8) + 240);
    }
    memcpy(v16, a2, a3);
    *(_DWORD *)(*(_QWORD *)(a1 + 8) + 272) = *a4;
    return 1;
  }
  v19[23] = 12;
  strcpy(v19, "Invalid mesh");
  __p = (char *)operator new(0x60uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
  if (a5)
  {
    *(_QWORD *)&v22.__val_ = 22;
    v22.__cat_ = std::generic_category();
    sub_2245321DC(&v22, (uint64_t)v19, (CFErrorRef *)&v20);
    sub_224532194(&v20, a5);
    v11 = v21;
    if (v21)
    {
      v14 = (unint64_t *)&v21->__shared_owners_;
      do
        v13 = __ldaxr(v14);
      while (__stlxr(v13 - 1, v14));
LABEL_13:
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
LABEL_15:
  operator delete(__p);
  if ((v19[23] & 0x80000000) != 0)
    operator delete(*(void **)v19);
  return 0;
}

void sub_22317BE64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a20 & 0x80000000) == 0)
  {
LABEL_3:
    _Unwind_Resume(a1);
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

void sub_22317BEB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    JUMPOUT(0x22317BEA8);
  JUMPOUT(0x22317BE98);
}

void sub_22317BEC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    JUMPOUT(0x22317BEA8);
  JUMPOUT(0x22317BE98);
}

uint64_t sub_22317BED8(uint64_t a1, const void *a2, unint64_t a3, _DWORD *a4, CFTypeRef *a5)
{
  uint64_t v6;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  uint64_t v16;
  unint64_t v17;
  char *__p;
  void *v19[4];
  const void *v20;
  std::__shared_weak_count *v21;
  std::error_condition v22;

  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    if (!a2 && a3)
    {
      strcpy((char *)v19, "Invalid colors pointer");
      HIBYTE(v19[2]) = 22;
      __p = (char *)operator new(0x60uLL);
      strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
      if (a5)
      {
        *(_QWORD *)&v22.__val_ = 22;
        v22.__cat_ = std::generic_category();
        sub_2245321DC(&v22, (uint64_t)v19, (CFErrorRef *)&v20);
        sub_224532194(&v20, a5);
        v11 = v21;
        if (v21)
        {
          p_shared_owners = (unint64_t *)&v21->__shared_owners_;
          do
            v13 = __ldaxr(p_shared_owners);
          while (__stlxr(v13 - 1, p_shared_owners));
          goto LABEL_13;
        }
      }
      goto LABEL_15;
    }
    v16 = *(_QWORD *)(v6 + 32);
    v17 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v6 + 40) - v16) >> 2);
    if (a3 <= v17)
    {
      if (a3 < v17)
        *(_QWORD *)(v6 + 40) = v16 + 12 * a3;
      if (!a3)
        return 1;
    }
    else
    {
      sub_22317EF30(v6 + 32, a3 - v17);
    }
    if (!a2
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    memmove(*(void **)(*(_QWORD *)(a1 + 8) + 32), a2, 12 * a3);
    *(_DWORD *)(*(_QWORD *)(a1 + 8) + 64) = *a4;
    return 1;
  }
  HIBYTE(v19[2]) = 12;
  strcpy((char *)v19, "Invalid mesh");
  __p = (char *)operator new(0x60uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
  if (a5)
  {
    *(_QWORD *)&v22.__val_ = 22;
    v22.__cat_ = std::generic_category();
    sub_2245321DC(&v22, (uint64_t)v19, (CFErrorRef *)&v20);
    sub_224532194(&v20, a5);
    v11 = v21;
    if (v21)
    {
      v14 = (unint64_t *)&v21->__shared_owners_;
      do
        v13 = __ldaxr(v14);
      while (__stlxr(v13 - 1, v14));
LABEL_13:
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
LABEL_15:
  operator delete(__p);
  if (SHIBYTE(v19[2]) < 0)
    operator delete(v19[0]);
  return 0;
}

void sub_22317C1A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  sub_223167354((uint64_t)&a23);
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a21 & 0x80000000) == 0)
  {
LABEL_3:
    _Unwind_Resume(a1);
  }
  operator delete(a16);
  _Unwind_Resume(a1);
}

void sub_22317C1FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    JUMPOUT(0x22317C1ECLL);
  JUMPOUT(0x22317C1DCLL);
}

void sub_22317C20C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    JUMPOUT(0x22317C1ECLL);
  JUMPOUT(0x22317C1DCLL);
}

uint64_t sub_22317C21C(uint64_t a1, const void *a2, unint64_t a3, _DWORD *a4, CFTypeRef *a5)
{
  uint64_t v6;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  char *v16;
  unint64_t v17;
  char *__p;
  _BYTE v19[24];
  const void *v20;
  std::__shared_weak_count *v21;
  std::error_condition v22;

  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    if (!a2 && a3)
    {
      *(_QWORD *)v19 = operator new(0x20uLL);
      *(_OWORD *)&v19[8] = xmmword_2245B8D50;
      strcpy(*(char **)v19, "Invalid confidences pointer");
      __p = (char *)operator new(0x60uLL);
      strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
      if (a5)
      {
        *(_QWORD *)&v22.__val_ = 22;
        v22.__cat_ = std::generic_category();
        sub_2245321DC(&v22, (uint64_t)v19, (CFErrorRef *)&v20);
        sub_224532194(&v20, a5);
        v11 = v21;
        if (v21)
        {
          p_shared_owners = (unint64_t *)&v21->__shared_owners_;
          do
            v13 = __ldaxr(p_shared_owners);
          while (__stlxr(v13 - 1, p_shared_owners));
          goto LABEL_13;
        }
      }
      goto LABEL_15;
    }
    v16 = *(char **)(v6 + 320);
    v17 = (uint64_t)(*(_QWORD *)(v6 + 328) - (_QWORD)v16) >> 2;
    if (a3 <= v17)
    {
      if (a3 < v17)
        *(_QWORD *)(v6 + 328) = &v16[4 * a3];
      if (!a3)
        return 1;
    }
    else
    {
      sub_22317F4CC(v6 + 320, a3 - v17);
      v16 = *(char **)(*(_QWORD *)(a1 + 8) + 320);
    }
    memmove(v16, a2, 4 * a3);
    *(_DWORD *)(*(_QWORD *)(a1 + 8) + 352) = *a4;
    return 1;
  }
  v19[23] = 12;
  strcpy(v19, "Invalid mesh");
  __p = (char *)operator new(0x60uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
  if (a5)
  {
    *(_QWORD *)&v22.__val_ = 22;
    v22.__cat_ = std::generic_category();
    sub_2245321DC(&v22, (uint64_t)v19, (CFErrorRef *)&v20);
    sub_224532194(&v20, a5);
    v11 = v21;
    if (v21)
    {
      v14 = (unint64_t *)&v21->__shared_owners_;
      do
        v13 = __ldaxr(v14);
      while (__stlxr(v13 - 1, v14));
LABEL_13:
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
LABEL_15:
  operator delete(__p);
  if ((v19[23] & 0x80000000) != 0)
    operator delete(*(void **)v19);
  return 0;
}

void sub_22317C4B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a20 & 0x80000000) == 0)
  {
LABEL_3:
    _Unwind_Resume(a1);
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

void sub_22317C504(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    JUMPOUT(0x22317C4F4);
  JUMPOUT(0x22317C4E4);
}

void sub_22317C514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    JUMPOUT(0x22317C4F4);
  JUMPOUT(0x22317C4E4);
}

void *sub_22317C524(uint64_t a1, int a2, void *a3, CFTypeRef *a4)
{
  uint64_t v4;
  __int16 v6;
  id v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  unsigned int **v13;
  unsigned int **i;
  id v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  _QWORD *v37;
  void *v38;
  char *v39;
  void *v40;
  void *v41;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  char *__p;
  void *v48[2];
  char v49;
  const void *v50;
  std::__shared_weak_count *v51;
  std::error_condition v52;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    if (a2 == 255)
      v6 = 0;
    else
      v6 = a2;
    sub_223CE5ABC(*(_QWORD *)(a1 + 8), v6 | ((a2 != 255) << 8), 1, (uint64_t)v48);
    v7 = a3;
    objc_msgSend_arrayWithCapacity_(MEMORY[0x24BDBCEB8], v8, 0xAAAAAAAAAAAAAAABLL * (((char *)v48[1] - (char *)v48[0]) >> 3), v9, v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = (unsigned int **)v48[0];
    for (i = (unsigned int **)v48[1]; v13 != i; v13 += 3)
    {
      v15 = v7;
      v19 = objc_retainAutorelease((id)objc_msgSend_newBufferWithLength_options_(v15, v16, 4 * ((((char *)v13[1] - (char *)*v13) >> 1) + v13[1] - *v13), 0, v17, v18));
      v25 = objc_msgSend_contents(v19, v20, v21, v22, v23, v24);
      v26 = *v13;
      v27 = v13[1];
      if (*v13 != v27)
      {
        v28 = *(_QWORD *)(v4 + 112);
        do
        {
          v29 = *v26++;
          v30 = v28 + 12 * v29;
          v31 = *(_DWORD *)(v30 + 8);
          *(_QWORD *)v25 = *(_QWORD *)v30;
          *(_DWORD *)(v25 + 8) = v31;
          v25 += 12;
        }
        while (v26 != v27);
      }

      objc_msgSend_addObject_(v12, v32, (uint64_t)v19, v33, v34, v35);
    }

    v36 = (char *)v48[0];
    if (v48[0])
    {
      v37 = v48[1];
      v38 = v48[0];
      if (v48[1] != v48[0])
      {
        v39 = (char *)v48[1];
        do
        {
          v41 = (void *)*((_QWORD *)v39 - 3);
          v39 -= 24;
          v40 = v41;
          if (v41)
          {
            *(v37 - 2) = v40;
            operator delete(v40);
          }
          v37 = v39;
        }
        while (v39 != v36);
        v38 = v48[0];
      }
      v48[1] = v36;
      operator delete(v38);
    }
  }
  else
  {
    v49 = 12;
    strcpy((char *)v48, "Invalid mesh");
    __p = (char *)operator new(0x60uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
    if (a4)
    {
      *(_QWORD *)&v52.__val_ = 22;
      v52.__cat_ = std::generic_category();
      sub_2245321DC(&v52, (uint64_t)v48, (CFErrorRef *)&v50);
      sub_224532194(&v50, a4);
      v43 = v51;
      if (v51)
      {
        p_shared_owners = (unint64_t *)&v51->__shared_owners_;
        do
          v45 = __ldaxr(p_shared_owners);
        while (__stlxr(v45 - 1, p_shared_owners));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
    }
    operator delete(__p);
    if (v49 < 0)
      operator delete(v48[0]);
    return 0;
  }
  return v12;
}

void sub_22317C7B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void **sub_22317C838(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  void *v6;
  void *v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = (char *)a1[1];
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 3);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *((_QWORD *)v3 - 2) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

CFTypeRef sub_22317C8AC(uint64_t a1, int a2, CFTypeRef *a3)
{
  uint64_t v3;
  __int16 v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  char *v9;
  _QWORD *v10;
  void *v11;
  char *v12;
  void *v13;
  void *v14;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  CFTypeRef cf;
  __int128 v21;
  void *__p[2];
  char v23;
  const void *v24;
  std::__shared_weak_count *v25;
  std::error_condition v26;

  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
  {
    v23 = 12;
    strcpy((char *)__p, "Invalid mesh");
    cf = operator new(0x60uLL);
    v21 = xmmword_2245B9410;
    strcpy((char *)cf, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
    if (!a3)
      goto LABEL_25;
    *(_QWORD *)&v26.__val_ = 22;
    v26.__cat_ = std::generic_category();
    sub_2245321DC(&v26, (uint64_t)__p, (CFErrorRef *)&v24);
    sub_224532194(&v24, a3);
    v16 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    if (SHIBYTE(v21) < 0)
LABEL_25:
      operator delete((void *)cf);
    if (v23 < 0)
      operator delete(__p[0]);
    return 0;
  }
  if (a2 == 255)
    v4 = 0;
  else
    v4 = a2;
  sub_223CE5ABC(v3, v4 | ((a2 != 255) << 8), 1, (uint64_t)__p);
  sub_22317F6D4((uint64_t **)__p, (CFMutableArrayRef *)&cf);
  v5 = cf;
  if (cf)
    j__CFRetain(cf);
  v6 = (std::__shared_weak_count *)v21;
  if ((_QWORD)v21)
  {
    v7 = (unint64_t *)(v21 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (char *)__p[0];
  if (!__p[0])
    return v5;
  v10 = __p[1];
  v11 = __p[0];
  if (__p[1] != __p[0])
  {
    v12 = (char *)__p[1];
    do
    {
      v14 = (void *)*((_QWORD *)v12 - 3);
      v12 -= 24;
      v13 = v14;
      if (v14)
      {
        *(v10 - 2) = v13;
        operator delete(v13);
      }
      v10 = v12;
    }
    while (v12 != v9);
    v11 = __p[0];
  }
  __p[1] = v9;
  operator delete(v11);
  return v5;
}

void sub_22317CAB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_22317CB1C(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t *v4;
  char *v5;
  std::string *v7;
  uint64_t (***v8)();
  int v9;
  size_t v10;
  size_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *i;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v21;
  size_t v22;
  void **p_dst;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  size_t v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void **v33;
  int v34;
  size_t v35;
  unint64_t v36;
  void *p_p;
  uint64_t v38;
  uint64_t v39;
  const void *v40;
  uint64_t v41;
  std::string *v42;
  BOOL v43;
  BOOL v44;
  int v45;
  size_t v46;
  unint64_t v47;
  _BYTE *v48;
  int v49;
  size_t v50;
  unint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  const void *v56;
  char *v57;
  const std::error_category *v58;
  std::__shared_weak_count *cat;
  unint64_t *v60;
  unint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  const void *v65;
  int v66;
  std::string *v67;
  uint64_t (***v68)();
  std::string *v69;
  int v70;
  int v71;
  size_t v72;
  unint64_t v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  _BYTE *v78;
  void *v79;
  const std::error_category *v80;
  std::__shared_weak_count *v81;
  unint64_t *p_shared_owners;
  unint64_t v83;
  int v84;
  size_t v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  void **v90;
  int v91;
  size_t v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  const void *v97;
  uint64_t v98;
  std::string *v99;
  BOOL v100;
  BOOL v101;
  int v102;
  size_t v103;
  unint64_t v104;
  _BYTE *v105;
  int v106;
  size_t v107;
  unint64_t v108;
  _BYTE *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  const void *v113;
  char *v114;
  const std::error_category *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  const void *v122;
  int v123;
  std::string *v124;
  uint64_t (***v125)();
  std::string *v126;
  int v127;
  int v128;
  size_t v129;
  unint64_t v130;
  _BYTE *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  _BYTE *v135;
  void *v136;
  const std::error_category *v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  void *v141;
  size_t v142;
  int64_t v143;
  void **__dst;
  size_t v145;
  int64_t v146;
  void *v147;
  __int128 v148;
  _BYTE v149[80];
  uint64_t v150;
  void *__p;
  __int128 v152;
  uint64_t v153[2];
  char v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  const void *v159;
  std::__shared_weak_count *v160;
  std::error_condition v161[2];

  v4 = *(uint64_t **)(a1 + 8);
  if (!v4)
  {
    v154 = 12;
    strcpy((char *)v153, "Invalid mesh");
    __p = operator new(0x60uLL);
    v152 = xmmword_2245B9410;
    strcpy((char *)__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
    if (!a3)
      goto LABEL_29;
    *(_QWORD *)&v149[64] = 22;
    *(_QWORD *)&v149[72] = std::generic_category();
    sub_2245321DC((const std::error_condition *)&v149[64], (uint64_t)v153, (CFErrorRef *)&v149[32]);
    sub_224532194((const void **)&v149[32], a3);
    v16 = *(std::__shared_weak_count **)&v149[40];
    if (*(_QWORD *)&v149[40])
    {
      v17 = (unint64_t *)(*(_QWORD *)&v149[40] + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    if (SHIBYTE(v152) < 0)
LABEL_29:
      operator delete(__p);
    if (v154 < 0)
      operator delete((void *)v153[0]);
    return 0;
  }
  v5 = (char *)a2;
  if (*(char *)(a2 + 23) >= 0)
    v7 = (std::string *)a2;
  else
    v7 = *(std::string **)a2;
  v8 = sub_2242B39B4();
  v9 = sub_22414BFC0(v7, v4, (uint64_t)v8);
  if (!sub_22317DC10(v9, a3))
    return 0;
  v10 = v5[23];
  v11 = *((_QWORD *)v5 + 1);
  if ((v10 & 0x80u) != 0)
  {
    v5 = *(char **)v5;
    v10 = v11;
  }
  v12 = &v5[v10];
  if (!v10)
  {
    v14 = v5;
    goto LABEL_35;
  }
  v13 = v5;
  v14 = &v5[v10];
  while (2)
  {
    for (i = v13 + 3; ; ++i)
    {
      v13 = i - 2;
      if (*(i - 3) != 46)
      {
        if (v13 == v12)
          goto LABEL_35;
        continue;
      }
      if (v13 == v12)
        goto LABEL_35;
      if (*v13 == 111)
      {
        if (i - 1 == v12)
          goto LABEL_35;
        if (*(i - 1) == 98)
          break;
      }
    }
    if (i != v12)
    {
      if (*i == 106)
        v14 = i - 3;
      continue;
    }
    break;
  }
LABEL_35:
  if (v14 == v12)
    v21 = -1;
  else
    v21 = v14 - v5;
  if (v10 >= v21)
    v22 = v21;
  else
    v22 = v10;
  if (v22 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v22 >= 0x17)
  {
    v24 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17)
      v24 = v22 | 7;
    v25 = v24 + 1;
    p_dst = (void **)operator new(v24 + 1);
    v145 = v22;
    v146 = v25 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_48;
  }
  HIBYTE(v146) = v22;
  p_dst = (void **)&__dst;
  if (v22)
LABEL_48:
    memmove(p_dst, v5, v22);
  *((_BYTE *)p_dst + v22) = 0;
  v26 = *(_QWORD **)(a1 + 8);
  if (v26[30] == v26[31])
    goto LABEL_163;
  v27 = SHIBYTE(v146);
  if (v146 >= 0)
    v28 = HIBYTE(v146);
  else
    v28 = v145;
  v29 = v28 + 10;
  if (v28 + 10 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v29 >= 0x17)
  {
    v31 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17)
      v31 = v29 | 7;
    v32 = v31 + 1;
    v30 = operator new(v31 + 1);
    v142 = v28 + 10;
    v143 = v32 | 0x8000000000000000;
    v141 = v30;
  }
  else
  {
    v142 = 0;
    v143 = 0;
    v141 = 0;
    v30 = &v141;
    HIBYTE(v143) = v28 + 10;
    if (!v28)
      goto LABEL_64;
  }
  if (v27 >= 0)
    v33 = (void **)&__dst;
  else
    v33 = __dst;
  memmove(v30, v33, v28);
LABEL_64:
  strcpy((char *)v30 + v28, ".semantics");
  sub_223180698((uint64_t)v153, (uint64_t)v26);
  v34 = SHIBYTE(v143);
  if (v143 >= 0)
    v35 = HIBYTE(v143);
  else
    v35 = v142;
  v36 = v35 + 4;
  if (v35 + 4 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v36 >= 0x17)
  {
    v38 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17)
      v38 = v36 | 7;
    v39 = v38 + 1;
    p_p = operator new(v38 + 1);
    *(_QWORD *)&v152 = v35 + 4;
    *((_QWORD *)&v152 + 1) = v39 | 0x8000000000000000;
    __p = p_p;
  }
  else
  {
    v152 = 0uLL;
    __p = 0;
    p_p = &__p;
    HIBYTE(v152) = v35 + 4;
    if (!v35)
      goto LABEL_78;
  }
  if (v34 >= 0)
    v40 = &v141;
  else
    v40 = v141;
  memmove(p_p, v40, v35);
LABEL_78:
  strcpy((char *)p_p + v35, ".txt");
  v41 = HIBYTE(v152);
  if (v152 >= 0)
    v42 = (std::string *)&__p;
  else
    v42 = (std::string *)__p;
  *(_OWORD *)&v149[64] = 0uLL;
  v150 = 0;
  if (v152 < 0)
    v41 = v152;
  sub_2231816F0((std::string *)&v149[64], v42, (std::string *)((char *)v42 + v41));
  v43 = sub_223180578((uint64_t)&v149[64], v156 - v155, v155);
  v44 = v43;
  if (SHIBYTE(v150) < 0)
  {
    operator delete(*(void **)&v149[64]);
    if (!v44)
      goto LABEL_93;
LABEL_85:
    sub_223CD4718((uint64_t)v153, 1);
    v45 = SHIBYTE(v143);
    if (v143 >= 0)
      v46 = HIBYTE(v143);
    else
      v46 = v142;
    v47 = v46 + 4;
    if (v46 + 4 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v47 >= 0x17)
    {
      v63 = (v47 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v47 | 7) != 0x17)
        v63 = v47 | 7;
      v64 = v63 + 1;
      v48 = operator new(v63 + 1);
      *(_QWORD *)&v149[40] = v46 + 4;
      *(_QWORD *)&v149[48] = v64 | 0x8000000000000000;
      *(_QWORD *)&v149[32] = v48;
    }
    else
    {
      memset(&v149[32], 0, 24);
      v48 = &v149[32];
      v149[55] = v46 + 4;
      if (!v46)
        goto LABEL_125;
    }
    if (v45 >= 0)
      v65 = &v141;
    else
      v65 = v141;
    memmove(v48, v65, v46);
LABEL_125:
    strcpy(&v48[v46], ".obj");
    v66 = v149[55];
    v67 = *(std::string **)&v149[32];
    v68 = sub_2242B39B4();
    if (v66 >= 0)
      v69 = (std::string *)&v149[32];
    else
      v69 = v67;
    v70 = sub_22414BFC0(v69, v153, (uint64_t)v68);
    v62 = sub_22317DC10(v70, a3);
    v71 = v149[55];
    if ((v62 & 1) != 0)
    {
LABEL_154:
      if ((v71 & 0x80) != 0)
        operator delete(*(void **)&v149[32]);
      goto LABEL_156;
    }
    if (v149[55] >= 0)
      v72 = v149[55];
    else
      v72 = *(_QWORD *)&v149[40];
    v73 = v72 + 36;
    if (v72 + 36 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v73 > 0x16)
    {
      v75 = (v73 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v73 | 7) != 0x17)
        v75 = v73 | 7;
      v76 = v75 + 1;
      v77 = (char *)operator new(v75 + 1);
      *(_QWORD *)&v149[8] = v72 + 36;
      *(_QWORD *)&v149[16] = v76 | 0x8000000000000000;
      *(_QWORD *)v149 = v77;
      qmemcpy(v77, "Error creating attribute mesh file: ", 36);
      v74 = v77 + 36;
      if (!v72)
      {
LABEL_142:
        v74[v72] = 0;
        v79 = operator new(0x60uLL);
        v147 = v79;
        v148 = xmmword_2245B9410;
        strcpy((char *)v79, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
        if (a3)
        {
          v80 = std::generic_category();
          *(_QWORD *)&v161[0].__val_ = 22;
          v161[0].__cat_ = v80;
          sub_2245321DC(v161, (uint64_t)v149, (CFErrorRef *)&v159);
          sub_224532194(&v159, a3);
          v81 = v160;
          if (v160)
          {
            p_shared_owners = (unint64_t *)&v160->__shared_owners_;
            do
              v83 = __ldaxr(p_shared_owners);
            while (__stlxr(v83 - 1, p_shared_owners));
            if (!v83)
            {
              ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
              std::__shared_weak_count::__release_weak(v81);
            }
          }
          if ((SHIBYTE(v148) & 0x80000000) == 0)
            goto LABEL_151;
          v79 = v147;
        }
        operator delete(v79);
LABEL_151:
        if ((v149[23] & 0x80000000) != 0)
          operator delete(*(void **)v149);
        LOBYTE(v71) = v149[55];
        goto LABEL_154;
      }
    }
    else
    {
      qmemcpy(v149, "Error creating attribute mesh file: ", 36);
      v74 = &v149[36];
    }
    if (v71 >= 0)
      v78 = &v149[32];
    else
      v78 = *(_BYTE **)&v149[32];
    memmove(v74, v78, v72);
    goto LABEL_142;
  }
  if (v43)
    goto LABEL_85;
LABEL_93:
  v49 = SHIBYTE(v152);
  if (v152 >= 0)
    v50 = HIBYTE(v152);
  else
    v50 = v152;
  v51 = v50 + 38;
  if (v50 + 38 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v51 <= 0x16)
  {
    qmemcpy(&v149[32], "Error creating attribute labels file: ", 38);
    v52 = &v149[70];
    goto LABEL_102;
  }
  v53 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v51 | 7) != 0x17)
    v53 = v51 | 7;
  v54 = v53 + 1;
  v55 = (char *)operator new(v53 + 1);
  *(_QWORD *)&v149[40] = v50 + 38;
  *(_QWORD *)&v149[48] = v54 | 0x8000000000000000;
  *(_QWORD *)&v149[32] = v55;
  qmemcpy(v55, "Error creating attribute labels file: ", 38);
  v52 = v55 + 38;
  if (v50)
  {
LABEL_102:
    if (v49 >= 0)
      v56 = &__p;
    else
      v56 = __p;
    memmove(v52, v56, v50);
  }
  v52[v50] = 0;
  v57 = (char *)operator new(0x60uLL);
  *(_QWORD *)v149 = v57;
  *(_OWORD *)&v149[8] = xmmword_2245B9410;
  strcpy(v57, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
  if (a3)
  {
    v58 = std::generic_category();
    v147 = (void *)22;
    *(_QWORD *)&v148 = v58;
    sub_2245321DC((const std::error_condition *)&v147, (uint64_t)&v149[32], (CFErrorRef *)v161);
    sub_224532194((const void **)v161, a3);
    cat = (std::__shared_weak_count *)v161[0].__cat_;
    if (v161[0].__cat_)
    {
      v60 = (unint64_t *)&v161[0].__cat_[1];
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))cat->__on_zero_shared)(cat);
        std::__shared_weak_count::__release_weak(cat);
      }
    }
    if ((v149[23] & 0x80000000) != 0)
    {
      v57 = *(char **)v149;
      goto LABEL_114;
    }
  }
  else
  {
LABEL_114:
    operator delete(v57);
  }
  if ((v149[55] & 0x80000000) != 0)
    operator delete(*(void **)&v149[32]);
  v62 = 0;
LABEL_156:
  if (SHIBYTE(v152) < 0)
  {
    operator delete(__p);
    sub_22316F8F4(v153);
    if (SHIBYTE(v143) < 0)
      goto LABEL_161;
LABEL_158:
    if (!v62)
      goto LABEL_277;
LABEL_162:
    v26 = *(_QWORD **)(a1 + 8);
LABEL_163:
    if (v26[35] == v26[36])
      goto LABEL_273;
    v84 = SHIBYTE(v146);
    if (v146 >= 0)
      v85 = HIBYTE(v146);
    else
      v85 = v145;
    v86 = v85 + 9;
    if (v85 + 9 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v86 >= 0x17)
    {
      v88 = (v86 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v86 | 7) != 0x17)
        v88 = v86 | 7;
      v89 = v88 + 1;
      v87 = operator new(v88 + 1);
      v142 = v85 + 9;
      v143 = v89 | 0x8000000000000000;
      v141 = v87;
    }
    else
    {
      v142 = 0;
      v143 = 0;
      v141 = 0;
      v87 = &v141;
      HIBYTE(v143) = v85 + 9;
      if (!v85)
        goto LABEL_178;
    }
    if (v84 >= 0)
      v90 = (void **)&__dst;
    else
      v90 = __dst;
    memmove(v87, v90, v85);
LABEL_178:
    strcpy((char *)v87 + v85, ".material");
    sub_223180698((uint64_t)v153, (uint64_t)v26);
    v91 = SHIBYTE(v143);
    if (v143 >= 0)
      v92 = HIBYTE(v143);
    else
      v92 = v142;
    v93 = v92 + 4;
    if (v92 + 4 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v93 >= 0x17)
    {
      v95 = (v93 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v93 | 7) != 0x17)
        v95 = v93 | 7;
      v96 = v95 + 1;
      v94 = operator new(v95 + 1);
      *(_QWORD *)&v152 = v92 + 4;
      *((_QWORD *)&v152 + 1) = v96 | 0x8000000000000000;
      __p = v94;
    }
    else
    {
      v152 = 0uLL;
      __p = 0;
      v94 = &__p;
      HIBYTE(v152) = v92 + 4;
      if (!v92)
        goto LABEL_192;
    }
    if (v91 >= 0)
      v97 = &v141;
    else
      v97 = v141;
    memmove(v94, v97, v92);
LABEL_192:
    strcpy((char *)v94 + v92, ".txt");
    v98 = HIBYTE(v152);
    if (v152 >= 0)
      v99 = (std::string *)&__p;
    else
      v99 = (std::string *)__p;
    *(_OWORD *)&v149[64] = 0uLL;
    v150 = 0;
    if (v152 < 0)
      v98 = v152;
    sub_2231816F0((std::string *)&v149[64], v99, (std::string *)((char *)v99 + v98));
    v100 = sub_223180578((uint64_t)&v149[64], v158 - v157, v157);
    v101 = v100;
    if (SHIBYTE(v150) < 0)
    {
      operator delete(*(void **)&v149[64]);
      if (v101)
      {
LABEL_199:
        sub_223CD4718((uint64_t)v153, 16);
        v102 = SHIBYTE(v143);
        if (v143 >= 0)
          v103 = HIBYTE(v143);
        else
          v103 = v142;
        v104 = v103 + 4;
        if (v103 + 4 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v104 >= 0x17)
        {
          v120 = (v104 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v104 | 7) != 0x17)
            v120 = v104 | 7;
          v121 = v120 + 1;
          v105 = operator new(v120 + 1);
          *(_QWORD *)&v149[40] = v103 + 4;
          *(_QWORD *)&v149[48] = v121 | 0x8000000000000000;
          *(_QWORD *)&v149[32] = v105;
        }
        else
        {
          memset(&v149[32], 0, 24);
          v105 = &v149[32];
          v149[55] = v103 + 4;
          if (!v103)
            goto LABEL_239;
        }
        if (v102 >= 0)
          v122 = &v141;
        else
          v122 = v141;
        memmove(v105, v122, v103);
LABEL_239:
        strcpy(&v105[v103], ".obj");
        v123 = v149[55];
        v124 = *(std::string **)&v149[32];
        v125 = sub_2242B39B4();
        if (v123 >= 0)
          v126 = (std::string *)&v149[32];
        else
          v126 = v124;
        v127 = sub_22414BFC0(v126, v153, (uint64_t)v125);
        v119 = sub_22317DC10(v127, a3);
        v128 = v149[55];
        if ((v119 & 1) != 0)
        {
LABEL_268:
          if ((v128 & 0x80) != 0)
            operator delete(*(void **)&v149[32]);
          goto LABEL_270;
        }
        if (v149[55] >= 0)
          v129 = v149[55];
        else
          v129 = *(_QWORD *)&v149[40];
        v130 = v129 + 36;
        if (v129 + 36 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v130 > 0x16)
        {
          v132 = (v130 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v130 | 7) != 0x17)
            v132 = v130 | 7;
          v133 = v132 + 1;
          v134 = (char *)operator new(v132 + 1);
          *(_QWORD *)&v149[8] = v129 + 36;
          *(_QWORD *)&v149[16] = v133 | 0x8000000000000000;
          *(_QWORD *)v149 = v134;
          qmemcpy(v134, "Error creating attribute mesh file: ", 36);
          v131 = v134 + 36;
          if (!v129)
          {
LABEL_256:
            v131[v129] = 0;
            v136 = operator new(0x60uLL);
            v147 = v136;
            v148 = xmmword_2245B9410;
            strcpy((char *)v136, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
            if (a3)
            {
              v137 = std::generic_category();
              *(_QWORD *)&v161[0].__val_ = 22;
              v161[0].__cat_ = v137;
              sub_2245321DC(v161, (uint64_t)v149, (CFErrorRef *)&v159);
              sub_224532194(&v159, a3);
              v138 = v160;
              if (v160)
              {
                v139 = (unint64_t *)&v160->__shared_owners_;
                do
                  v140 = __ldaxr(v139);
                while (__stlxr(v140 - 1, v139));
                if (!v140)
                {
                  ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                  std::__shared_weak_count::__release_weak(v138);
                }
              }
              if ((SHIBYTE(v148) & 0x80000000) == 0)
                goto LABEL_265;
              v136 = v147;
            }
            operator delete(v136);
LABEL_265:
            if ((v149[23] & 0x80000000) != 0)
              operator delete(*(void **)v149);
            LOBYTE(v128) = v149[55];
            goto LABEL_268;
          }
        }
        else
        {
          qmemcpy(v149, "Error creating attribute mesh file: ", 36);
          v131 = &v149[36];
        }
        if (v128 >= 0)
          v135 = &v149[32];
        else
          v135 = *(_BYTE **)&v149[32];
        memmove(v131, v135, v129);
        goto LABEL_256;
      }
    }
    else if (v100)
    {
      goto LABEL_199;
    }
    v106 = SHIBYTE(v152);
    if (v152 >= 0)
      v107 = HIBYTE(v152);
    else
      v107 = v152;
    v108 = v107 + 38;
    if (v107 + 38 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v108 > 0x16)
    {
      v110 = (v108 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v108 | 7) != 0x17)
        v110 = v108 | 7;
      v111 = v110 + 1;
      v112 = (char *)operator new(v110 + 1);
      *(_QWORD *)&v149[40] = v107 + 38;
      *(_QWORD *)&v149[48] = v111 | 0x8000000000000000;
      *(_QWORD *)&v149[32] = v112;
      qmemcpy(v112, "Error creating attribute labels file: ", 38);
      v109 = v112 + 38;
      if (!v107)
      {
LABEL_220:
        v109[v107] = 0;
        v114 = (char *)operator new(0x60uLL);
        *(_QWORD *)v149 = v114;
        *(_OWORD *)&v149[8] = xmmword_2245B9410;
        strcpy(v114, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
        if (a3)
        {
          v115 = std::generic_category();
          v147 = (void *)22;
          *(_QWORD *)&v148 = v115;
          sub_2245321DC((const std::error_condition *)&v147, (uint64_t)&v149[32], (CFErrorRef *)v161);
          sub_224532194((const void **)v161, a3);
          v116 = (std::__shared_weak_count *)v161[0].__cat_;
          if (v161[0].__cat_)
          {
            v117 = (unint64_t *)&v161[0].__cat_[1];
            do
              v118 = __ldaxr(v117);
            while (__stlxr(v118 - 1, v117));
            if (!v118)
            {
              ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
              std::__shared_weak_count::__release_weak(v116);
            }
          }
          if ((v149[23] & 0x80000000) == 0)
            goto LABEL_229;
          v114 = *(char **)v149;
        }
        operator delete(v114);
LABEL_229:
        if ((v149[55] & 0x80000000) != 0)
          operator delete(*(void **)&v149[32]);
        v119 = 0;
LABEL_270:
        if (SHIBYTE(v152) < 0)
        {
          operator delete(__p);
          sub_22316F8F4(v153);
          if ((SHIBYTE(v143) & 0x80000000) == 0)
          {
LABEL_272:
            if ((v119 & 1) == 0)
              goto LABEL_277;
            goto LABEL_273;
          }
        }
        else
        {
          sub_22316F8F4(v153);
          if ((SHIBYTE(v143) & 0x80000000) == 0)
            goto LABEL_272;
        }
        operator delete(v141);
        if ((v119 & 1) == 0)
          goto LABEL_277;
LABEL_273:
        v19 = 1;
        if (SHIBYTE(v146) < 0)
          goto LABEL_278;
        return v19;
      }
    }
    else
    {
      qmemcpy(&v149[32], "Error creating attribute labels file: ", 38);
      v109 = &v149[70];
    }
    if (v106 >= 0)
      v113 = &__p;
    else
      v113 = __p;
    memmove(v109, v113, v107);
    goto LABEL_220;
  }
  sub_22316F8F4(v153);
  if ((SHIBYTE(v143) & 0x80000000) == 0)
    goto LABEL_158;
LABEL_161:
  operator delete(v141);
  if (v62)
    goto LABEL_162;
LABEL_277:
  v19 = 0;
  if (SHIBYTE(v146) < 0)
LABEL_278:
    operator delete(__dst);
  return v19;
}

void sub_22317DA8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  uint64_t v59;

  sub_223167354(v59 - 128);
  if (a27 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (a40 < 0)
    operator delete(a35);
  if (a53 < 0)
    operator delete(a48);
  sub_22316F8F4(&a54);
  if (a15 < 0)
    operator delete(a10);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

void sub_22317DBE4()
{
  JUMPOUT(0x22317DBB4);
}

void sub_22317DBEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if ((a18 & 0x80000000) == 0)
    JUMPOUT(0x22317DBDCLL);
  JUMPOUT(0x22317DBD4);
}

uint64_t sub_22317DC10(int a1, CFTypeRef *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t *v10;
  char *__p;
  void *v12;
  __int128 v13;
  const void *v14;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  switch(a1)
  {
    case 1:
      v12 = operator new(0x20uLL);
      v13 = xmmword_2245B8D70;
      strcpy((char *)v12, "Failed to open output file");
      __p = (char *)operator new(0x60uLL);
      strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
      if (!a2)
        goto LABEL_31;
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_2245321DC(&v16, (uint64_t)&v12, (CFErrorRef *)&v14);
      sub_224532194(&v14, a2);
      v3 = v15;
      if (!v15)
        goto LABEL_31;
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      break;
    case 2:
      v12 = operator new(0x20uLL);
      v13 = xmmword_2245B8D70;
      strcpy((char *)v12, "Mesh structure is invalid.");
      __p = (char *)operator new(0x60uLL);
      strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
      if (!a2)
        goto LABEL_31;
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_2245321DC(&v16, (uint64_t)&v12, (CFErrorRef *)&v14);
      sub_224532194(&v14, a2);
      v3 = v15;
      if (!v15)
        goto LABEL_31;
      v7 = (unint64_t *)&v15->__shared_owners_;
      do
        v5 = __ldaxr(v7);
      while (__stlxr(v5 - 1, v7));
      break;
    case 3:
      v12 = operator new(0x20uLL);
      v13 = xmmword_2245B8D50;
      strcpy((char *)v12, "Mesh format is unsupported.");
      __p = (char *)operator new(0x60uLL);
      strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
      if (!a2)
        goto LABEL_31;
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_2245321DC(&v16, (uint64_t)&v12, (CFErrorRef *)&v14);
      sub_224532194(&v14, a2);
      v3 = v15;
      if (!v15)
        goto LABEL_31;
      v8 = (unint64_t *)&v15->__shared_owners_;
      do
        v5 = __ldaxr(v8);
      while (__stlxr(v5 - 1, v8));
      break;
    case 4:
      v12 = operator new(0x28uLL);
      v13 = xmmword_2245B9440;
      strcpy((char *)v12, "An error was found when reading stream.");
      __p = (char *)operator new(0x60uLL);
      strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
      if (!a2)
        goto LABEL_31;
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_2245321DC(&v16, (uint64_t)&v12, (CFErrorRef *)&v14);
      sub_224532194(&v14, a2);
      v3 = v15;
      if (!v15)
        goto LABEL_31;
      v9 = (unint64_t *)&v15->__shared_owners_;
      do
        v5 = __ldaxr(v9);
      while (__stlxr(v5 - 1, v9));
      break;
    case 5:
      v12 = operator new(0x30uLL);
      v13 = xmmword_2245B9450;
      strcpy((char *)v12, "An error was found when writing to stream.");
      __p = (char *)operator new(0x60uLL);
      strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
      if (!a2)
        goto LABEL_31;
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_2245321DC(&v16, (uint64_t)&v12, (CFErrorRef *)&v14);
      sub_224532194(&v14, a2);
      v3 = v15;
      if (!v15)
        goto LABEL_31;
      v10 = (unint64_t *)&v15->__shared_owners_;
      do
        v5 = __ldaxr(v10);
      while (__stlxr(v5 - 1, v10));
      break;
    default:
      return 1;
  }
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_31:
  operator delete(__p);
  if (SHIBYTE(v13) < 0)
    operator delete(v12);
  return 0;
}

void sub_22317E0C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_223167354((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a20 & 0x80000000) == 0)
  {
LABEL_3:
    _Unwind_Resume(a1);
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

void sub_22317E134(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    JUMPOUT(0x22317E124);
  JUMPOUT(0x22317E114);
}

void sub_22317E144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    JUMPOUT(0x22317E124);
  JUMPOUT(0x22317E114);
}

void sub_22317E154(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    JUMPOUT(0x22317E124);
  JUMPOUT(0x22317E114);
}

void sub_22317E164(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    JUMPOUT(0x22317E124);
  JUMPOUT(0x22317E114);
}

void sub_22317E174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    JUMPOUT(0x22317E124);
  JUMPOUT(0x22317E114);
}

uint64_t sub_22317E184(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(void **)(a1 + 8);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 96);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 120;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_22317E21C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(void **)(a1 + 8);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 96);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 120;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v4);
  }
  JUMPOUT(0x227684CE8);
}

__n128 sub_22317E2C4@<Q0>(uint64_t a1@<X0>, unint64_t a2@<X1>, CFTypeRef *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  _OWORD *v13;
  char v14;
  __int128 v15;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  __n128 result;
  __n128 *v21;
  __int128 v22;
  char *__p;
  void *v24[4];
  const void *v25;
  std::__shared_weak_count *v26;
  std::error_condition v27;
  __int128 v28;
  __int128 v29;
  _OWORD v30[2];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 8);
  if (0xEEEEEEEEEEEEEEEFLL * ((*(_QWORD *)(a1 + 16) - v5) >> 3) <= a2)
  {
    HIBYTE(v24[2]) = 19;
    strcpy((char *)v24, "Index out of bounds");
    __p = (char *)operator new(0x60uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
    if (a3)
    {
      *(_QWORD *)&v27.__val_ = 33;
      v27.__cat_ = std::generic_category();
      sub_2245321DC(&v27, (uint64_t)v24, (CFErrorRef *)&v25);
      sub_224532194(&v25, a3);
      v17 = v26;
      if (v26)
      {
        p_shared_owners = (unint64_t *)&v26->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
    }
    operator delete(__p);
    if (SHIBYTE(v24[2]) < 0)
      operator delete(v24[0]);
    *(_BYTE *)(a4 + 80) = 0;
    *(_BYTE *)(a4 + 84) = 0;
    *(_BYTE *)(a4 + 100) = 0;
    *(_QWORD *)(a4 + 104) = 0;
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_BYTE *)(a4 + 16) = 0;
  }
  else
  {
    v6 = v5 + 120 * a2;
    v8 = *(_QWORD *)(v6 + 16);
    v7 = *(_QWORD *)(v6 + 24);
    if (v7)
    {
      v9 = (unint64_t *)(v7 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v5 + 120 * a2;
    v12 = *(unsigned __int8 *)(v11 + 96);
    if (*(_BYTE *)(v11 + 96))
    {
      v13 = (_OWORD *)(v11 + 32);
      v14 = *(_BYTE *)(v11 + 32);
      v15 = *(_OWORD *)((char *)v13 + 17);
      v28 = *(_OWORD *)((char *)v13 + 1);
      v29 = v15;
      v30[0] = *(_OWORD *)((char *)v13 + 33);
      *(_OWORD *)((char *)v30 + 15) = v13[3];
    }
    else
    {
      v14 = 0;
    }
    *(_QWORD *)a4 = v8;
    *(_QWORD *)(a4 + 8) = v7;
    v21 = (__n128 *)(v5 + 120 * a2 + 100);
    *(_BYTE *)(a4 + 16) = 0;
    *(_BYTE *)(a4 + 80) = 0;
    if (v12)
    {
      *(_BYTE *)(a4 + 16) = v14;
      v22 = v29;
      *(_OWORD *)(a4 + 17) = v28;
      *(_OWORD *)(a4 + 33) = v22;
      *(_OWORD *)(a4 + 49) = v30[0];
      *(_OWORD *)(a4 + 64) = *(_OWORD *)((char *)v30 + 15);
      *(_BYTE *)(a4 + 80) = 1;
    }
    result = *v21;
    *(__n128 *)(a4 + 84) = *v21;
    *(_BYTE *)(a4 + 100) = v21[1].n128_u8[0];
    *(_QWORD *)(a4 + 104) = 0;
  }
  return result;
}

void sub_22317E514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  sub_223167354((uint64_t)&a23);
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(a1);
}

uint64_t sub_22317E570(uint64_t a1, unint64_t a2, CFTypeRef *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *__p;
  char cf[20];
  char v15;
  const void *v16;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  v3 = *(_QWORD *)(a1 + 8);
  if (0xEEEEEEEEEEEEEEEFLL * ((*(_QWORD *)(a1 + 16) - v3) >> 3) <= a2)
  {
    v15 = 19;
    strcpy(cf, "Index out of bounds");
    __p = (char *)operator new(0x60uLL);
    strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/Mesh.mm");
    if (a3)
    {
      *(_QWORD *)&v18.__val_ = 33;
      v18.__cat_ = std::generic_category();
      sub_2245321DC(&v18, (uint64_t)cf, (CFErrorRef *)&v16);
      sub_224532194(&v16, a3);
      v10 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
    operator delete(__p);
    if (v15 < 0)
      operator delete(*(void **)cf);
    return 0;
  }
  else
  {
    sub_224533434((std::__shared_weak_count_vtbl **)cf, (CFUUIDBytes *)(v3 + 120 * a2));
    v4 = *(_QWORD *)cf;
    if (*(_QWORD *)cf)
      j__CFRetain(*(CFTypeRef *)cf);
    v5 = *(std::__shared_weak_count **)&cf[8];
    if (!*(_QWORD *)&cf[8])
      return v4;
    v6 = (unint64_t *)(*(_QWORD *)&cf[8] + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      return v4;
    }
    else
    {
      return v4;
    }
  }
}

void sub_22317E75C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  sub_223167354(v21 - 48);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

uint64_t *sub_22317E7B4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v5[48];

  sub_223CE8648((float32x2_t **)(a1 + 8), (uint64_t)v5);
  v3 = operator new(0x198uLL);
  v3[1] = 0;
  v3[2] = 0;
  *v3 = &off_24EC1F0A0;
  *a2 = sub_22317FD80((uint64_t)(v3 + 3), (uint64_t)v5);
  a2[1] = (uint64_t)v3;
  return sub_22316F8F4(v5);
}

void sub_22317E81C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22316F8F4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_22317E830(uint64_t a1, _QWORD *a2, CFTypeRef cf)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  char *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  CFUUIDRef v15;
  std::__shared_weak_count *v16;
  __int128 v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  sub_224533430((int)&v15, cf);
  *(_QWORD *)&v17 = sub_22453346C(&v15);
  *((_QWORD *)&v17 + 1) = v5;
  v6 = *(_QWORD *)(a1 + 16);
  if (v6 >= *(_QWORD *)(a1 + 24))
  {
    v10 = sub_22317FB5C((char **)(a1 + 8), &v17, a2);
  }
  else
  {
    *(_OWORD *)v6 = v17;
    *(_QWORD *)(v6 + 16) = *a2;
    v7 = a2[1];
    *(_QWORD *)(v6 + 24) = v7;
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    *(_BYTE *)(v6 + 32) = 0;
    *(_BYTE *)(v6 + 96) = 0;
    *(_BYTE *)(v6 + 100) = 0;
    v10 = (char *)(v6 + 120);
    *(_BYTE *)(v6 + 116) = 0;
  }
  *(_QWORD *)(a1 + 16) = v10;
  v11 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return 1;
}

void sub_22317E948(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_22317E95C(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v5;
  _QWORD **v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD **v23;
  int v24;
  _QWORD *v25;

  v5 = 0x1555555555555555;
  v6 = *(_QWORD ***)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *(_QWORD *)a1) >> 2);
  v9 = v8 + 1;
  if (v8 + 1 > 0x1555555555555555)
    sub_22316E078();
  if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v6) >> 2) > v9)
    v9 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v6) >> 2);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v6) >> 2) < 0xAAAAAAAAAAAAAAALL)
    v5 = v9;
  if (v5)
  {
    LODWORD(v25) = v5;
    v13 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v13 == -1)
      sub_22316DD70();
    v23 = &v25;
    v14 = ((uint64_t (*)(_QWORD ***, uint64_t))off_24EC1F680[v13])(&v23, a1 + 24);
    v6 = *(_QWORD ***)a1;
    v7 = *(_QWORD *)(a1 + 8);
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  v16 = (_DWORD *)(v14 + 12 * v8);
  *v16 = *a2;
  v16[1] = *a3;
  v16[2] = *a4;
  v17 = v16 + 3;
  if ((_QWORD **)v7 != v6)
  {
    do
    {
      v18 = *(_QWORD *)(v7 - 12);
      v7 -= 12;
      v19 = *(_DWORD *)(v7 + 8);
      *(_QWORD *)(v16 - 3) = v18;
      v16 -= 3;
      v16[2] = v19;
    }
    while ((_QWORD **)v7 != v6);
    v6 = *(_QWORD ***)a1;
  }
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + 8) = v17;
  v20 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14 + 12 * v15;
  if (v6)
  {
    v23 = v6;
    v24 = -1431655765 * ((unint64_t)(v20 - (_QWORD)v6) >> 2);
    v21 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v21 == -1)
      sub_22316DD70();
    v25 = &v23;
    ((void (*)(_QWORD **, uint64_t))off_24EC1F690[v21])(&v25, a1 + 24);
  }
  return v17;
}

_DWORD *sub_22317EAFC(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v5;
  _QWORD **v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD **v23;
  int v24;
  _QWORD *v25;

  v5 = 0x1555555555555555;
  v6 = *(_QWORD ***)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *(_QWORD *)a1) >> 2);
  v9 = v8 + 1;
  if (v8 + 1 > 0x1555555555555555)
    sub_22316E078();
  if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v6) >> 2) > v9)
    v9 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v6) >> 2);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v6) >> 2) < 0xAAAAAAAAAAAAAAALL)
    v5 = v9;
  if (v5)
  {
    LODWORD(v25) = v5;
    v13 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v13 == -1)
      sub_22316DD70();
    v23 = &v25;
    v14 = ((uint64_t (*)(_QWORD ***, uint64_t))off_24EC1F6A0[v13])(&v23, a1 + 24);
    v6 = *(_QWORD ***)a1;
    v7 = *(_QWORD *)(a1 + 8);
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  v16 = (_DWORD *)(v14 + 12 * v8);
  *v16 = *a2;
  v16[1] = *a3;
  v16[2] = *a4;
  v17 = v16 + 3;
  if ((_QWORD **)v7 != v6)
  {
    do
    {
      v18 = *(_QWORD *)(v7 - 12);
      v7 -= 12;
      v19 = *(_DWORD *)(v7 + 8);
      *(_QWORD *)(v16 - 3) = v18;
      v16 -= 3;
      v16[2] = v19;
    }
    while ((_QWORD **)v7 != v6);
    v6 = *(_QWORD ***)a1;
  }
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + 8) = v17;
  v20 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14 + 12 * v15;
  if (v6)
  {
    v23 = v6;
    v24 = -1431655765 * ((unint64_t)(v20 - (_QWORD)v6) >> 2);
    v21 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v21 == -1)
      sub_22316DD70();
    v25 = &v23;
    ((void (*)(_QWORD **, uint64_t))off_24EC1F6B0[v21])(&v25, a1 + 24);
  }
  return v17;
}

uint64_t *sub_22317EC9C(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t *v8;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    v3 = *((_DWORD *)a1 + 4) - v2;
    v6 = v2;
    v7 = v3;
    v4 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v4 == -1)
      sub_22316DD70();
    v8 = &v6;
    ((void (*)(uint64_t **, uint64_t *))off_24EC1F6D0[v4])(&v8, a1 + 3);
  }
  return a1;
}

uint64_t *sub_22317ED18(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t *v8;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    v3 = -1431655765 * ((unint64_t)(a1[2] - v2) >> 2);
    v6 = v2;
    v7 = v3;
    v4 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v4 == -1)
      sub_22316DD70();
    v8 = &v6;
    ((void (*)(uint64_t **, uint64_t *))off_24EC1F6B0[v4])(&v8, a1 + 3);
  }
  return a1;
}

uint64_t *sub_22317EDA4(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t *v8;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    v3 = (unint64_t)(a1[2] - v2) >> 3;
    v6 = v2;
    v7 = v3;
    v4 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v4 == -1)
      sub_22316DD70();
    v8 = &v6;
    ((void (*)(uint64_t **, uint64_t *))off_24EC1F6E0[v4])(&v8, a1 + 3);
  }
  return a1;
}

uint64_t *sub_22317EE24(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t *v8;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    v3 = (unint64_t)(a1[2] - v2) >> 3;
    v6 = v2;
    v7 = v3;
    v4 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v4 == -1)
      sub_22316DD70();
    v8 = &v6;
    ((void (*)(uint64_t **, uint64_t *))off_24EC1F6F0[v4])(&v8, a1 + 3);
  }
  return a1;
}

uint64_t *sub_22317EEA4(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t *v8;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    v3 = -1431655765 * ((unint64_t)(a1[2] - v2) >> 2);
    v6 = v2;
    v7 = v3;
    v4 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v4 == -1)
      sub_22316DD70();
    v8 = &v6;
    ((void (*)(uint64_t **, uint64_t *))off_24EC1F690[v4])(&v8, a1 + 3);
  }
  return a1;
}

uint64_t sub_22317EF30(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD **v19;
  int v20;
  _QWORD *v21;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  v5 = *(_QWORD *)(result + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 2) >= a2)
  {
    *(_QWORD *)(result + 8) = v4 + 12 * (12 * a2 / 0xC);
  }
  else
  {
    v6 = *(_QWORD ***)result;
    v7 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *(_QWORD *)result) >> 2);
    v8 = v7 + a2;
    if (v7 + a2 > 0x1555555555555555)
      sub_22316E078();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (uint64_t)v6) >> 2);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0xAAAAAAAAAAAAAAALL)
      v10 = 0x1555555555555555;
    else
      v10 = v8;
    if (v10)
    {
      LODWORD(v21) = v10;
      v11 = *(unsigned int *)(result + 28);
      if ((_DWORD)v11 == -1)
        sub_22316DD70();
      v19 = &v21;
      result = ((uint64_t (*)(_QWORD ***, uint64_t))off_24EC1F680[v11])(&v19, result + 24);
      v6 = *(_QWORD ***)v3;
      v4 = *(_QWORD *)(v3 + 8);
    }
    else
    {
      result = 0;
      v12 = 0;
    }
    v13 = result + 12 * v7;
    v14 = v13 + 12 * (12 * a2 / 0xC);
    if ((_QWORD **)v4 != v6)
    {
      do
      {
        v15 = *(_QWORD *)(v4 - 12);
        v4 -= 12;
        v16 = *(_DWORD *)(v4 + 8);
        *(_QWORD *)(v13 - 12) = v15;
        v13 -= 12;
        *(_DWORD *)(v13 + 8) = v16;
      }
      while ((_QWORD **)v4 != v6);
      v6 = *(_QWORD ***)v3;
    }
    *(_QWORD *)v3 = v13;
    *(_QWORD *)(v3 + 8) = v14;
    v17 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = result + 12 * v12;
    if (v6)
    {
      v19 = v6;
      v20 = -1431655765 * ((unint64_t)(v17 - (_QWORD)v6) >> 2);
      v18 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v18 == -1)
        sub_22316DD70();
      v21 = &v19;
      return ((uint64_t (*)(_QWORD **, uint64_t))off_24EC1F690[v18])(&v21, v3 + 24);
    }
  }
  return result;
}

uint64_t sub_22317F10C(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD **v19;
  int v20;
  _QWORD *v21;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  v5 = *(_QWORD *)(result + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 2) >= a2)
  {
    *(_QWORD *)(result + 8) = v4 + 12 * (12 * a2 / 0xC);
  }
  else
  {
    v6 = *(_QWORD ***)result;
    v7 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *(_QWORD *)result) >> 2);
    v8 = v7 + a2;
    if (v7 + a2 > 0x1555555555555555)
      sub_22316E078();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (uint64_t)v6) >> 2);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0xAAAAAAAAAAAAAAALL)
      v10 = 0x1555555555555555;
    else
      v10 = v8;
    if (v10)
    {
      LODWORD(v21) = v10;
      v11 = *(unsigned int *)(result + 28);
      if ((_DWORD)v11 == -1)
        sub_22316DD70();
      v19 = &v21;
      result = ((uint64_t (*)(_QWORD ***, uint64_t))off_24EC1F6A0[v11])(&v19, result + 24);
      v6 = *(_QWORD ***)v3;
      v4 = *(_QWORD *)(v3 + 8);
    }
    else
    {
      result = 0;
      v12 = 0;
    }
    v13 = result + 12 * v7;
    v14 = v13 + 12 * (12 * a2 / 0xC);
    if ((_QWORD **)v4 != v6)
    {
      do
      {
        v15 = *(_QWORD *)(v4 - 12);
        v4 -= 12;
        v16 = *(_DWORD *)(v4 + 8);
        *(_QWORD *)(v13 - 12) = v15;
        v13 -= 12;
        *(_DWORD *)(v13 + 8) = v16;
      }
      while ((_QWORD **)v4 != v6);
      v6 = *(_QWORD ***)v3;
    }
    *(_QWORD *)v3 = v13;
    *(_QWORD *)(v3 + 8) = v14;
    v17 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = result + 12 * v12;
    if (v6)
    {
      v19 = v6;
      v20 = -1431655765 * ((unint64_t)(v17 - (_QWORD)v6) >> 2);
      v18 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v18 == -1)
        sub_22316DD70();
      v21 = &v19;
      return ((uint64_t (*)(_QWORD **, uint64_t))off_24EC1F6B0[v18])(&v21, v3 + 24);
    }
  }
  return result;
}

void sub_22317F2E8(uint64_t a1, size_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD **v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD **v17;
  _QWORD **v18;
  unint64_t v19;
  _QWORD **v20;
  _OWORD *v21;
  __int128 *v22;
  unint64_t v23;
  __int128 v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD **v28;
  int v29;
  _QWORD *v30;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero(*(void **)(a1 + 8), a2);
      v5 += a2;
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_QWORD ***)a1;
    v7 = v5 - *(_QWORD *)a1;
    v8 = v7 + a2;
    if ((uint64_t)(v7 + a2) < 0)
      sub_22316E078();
    v9 = v4 - (_QWORD)v6;
    if (2 * v9 > v8)
      v8 = 2 * v9;
    v10 = v9 >= 0x3FFFFFFFFFFFFFFFLL;
    v11 = 0x7FFFFFFFFFFFFFFFLL;
    if (!v10)
      v11 = v8;
    if (v11)
    {
      LODWORD(v30) = v11;
      v12 = *(unsigned int *)(a1 + 28);
      if ((_DWORD)v12 == -1)
        sub_22316DD70();
      v28 = &v30;
      v14 = ((uint64_t (*)(_QWORD ***, uint64_t))off_24EC1F700[v12])(&v28, a1 + 24);
    }
    else
    {
      v14 = 0;
      v13 = 0;
    }
    v15 = v14 + v7;
    v16 = v14 + v13;
    bzero((void *)(v14 + v7), a2);
    v17 = *(_QWORD ***)a1;
    v18 = *(_QWORD ***)(a1 + 8);
    v19 = (unint64_t)v18 - *(_QWORD *)a1;
    if (v18 != *(_QWORD ***)a1)
    {
      if (v19 < 0x20)
        goto LABEL_31;
      if ((_QWORD **)((char *)v18 + (_QWORD)((char *)v6 - v14 - v5)) < (_QWORD **)0x20)
        goto LABEL_31;
      v20 = (_QWORD **)((char *)v18 - (v19 & 0xFFFFFFFFFFFFFFE0));
      v15 -= v19 & 0xFFFFFFFFFFFFFFE0;
      v21 = (_OWORD *)(v7 + v14 - 16);
      v22 = (__int128 *)(v18 - 2);
      v23 = v19 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v24 = *v22;
        *(v21 - 1) = *(v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 2;
        v23 -= 32;
      }
      while (v23);
      v18 = v20;
      if (v19 != (v19 & 0xFFFFFFFFFFFFFFE0))
      {
LABEL_31:
        do
        {
          v25 = *((_BYTE *)v18 - 1);
          v18 = (_QWORD **)((char *)v18 - 1);
          *(_BYTE *)--v15 = v25;
        }
        while (v18 != v17);
      }
      v18 = *(_QWORD ***)a1;
    }
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v14 + v7 + a2;
    v26 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v16;
    if (v18)
    {
      v28 = v18;
      v29 = v26 - (_DWORD)v18;
      v27 = *(unsigned int *)(a1 + 28);
      if ((_DWORD)v27 == -1)
        sub_22316DD70();
      v30 = &v28;
      ((void (*)(_QWORD **, uint64_t))off_24EC1F6D0[v27])(&v30, a1 + 24);
    }
  }
}

void sub_22317F4CC(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 *v25;
  uint64_t v26;
  __int128 v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  int v32;
  char **v33;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (a2 > (v4 - (uint64_t)v5) >> 2)
  {
    v6 = *(char **)a1;
    v7 = (uint64_t)&v5[-*(_QWORD *)a1];
    v8 = v7 >> 2;
    v9 = (v7 >> 2) + a2;
    if (v9 >> 62)
      sub_22316E078();
    v10 = v4 - (_QWORD)v6;
    if (v10 >> 1 > v9)
      v9 = v10 >> 1;
    v11 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    v12 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v9;
    if (v12)
    {
      LODWORD(v33) = v12;
      v13 = *(unsigned int *)(a1 + 28);
      if ((_DWORD)v13 == -1)
        sub_22316DD70();
      v31 = (char *)&v33;
      v15 = ((uint64_t (*)(char **, uint64_t))off_24EC1F710[v13])(&v31, a1 + 24);
      v6 = *(char **)a1;
      v5 = *(char **)(a1 + 8);
    }
    else
    {
      v15 = 0;
      v14 = 0;
    }
    v16 = (char *)(v15 + 4 * v8);
    v17 = 4 * a2;
    v18 = v15 + 4 * v14;
    bzero(v16, v17);
    v19 = &v16[v17];
    if (v5 == v6)
      goto LABEL_23;
    v20 = v5 - v6 - 4;
    if (v20 >= 0x2C)
    {
      if ((unint64_t)&v5[-v15 - v7] >= 0x20)
      {
        v22 = (v20 >> 2) + 1;
        v23 = 4 * (v22 & 0x7FFFFFFFFFFFFFF8);
        v21 = &v5[-v23];
        v16 -= v23;
        v24 = (_OWORD *)(v15 + 4 * v8 - 16);
        v25 = (__int128 *)(v5 - 16);
        v26 = v22 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v27 = *v25;
          *(v24 - 1) = *(v25 - 1);
          *v24 = v27;
          v24 -= 2;
          v25 -= 2;
          v26 -= 8;
        }
        while (v26);
        if (v22 == (v22 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_23:
          *(_QWORD *)a1 = v16;
          *(_QWORD *)(a1 + 8) = v19;
          v29 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v18;
          if (v6)
          {
            v31 = v6;
            v32 = (unint64_t)(v29 - (_QWORD)v6) >> 2;
            v30 = *(unsigned int *)(a1 + 28);
            if ((_DWORD)v30 == -1)
              sub_22316DD70();
            v33 = &v31;
            ((void (*)(char ***, uint64_t))off_24EC1F6C0[v30])(&v33, a1 + 24);
          }
          return;
        }
      }
      else
      {
        v21 = v5;
      }
    }
    else
    {
      v21 = v5;
    }
    do
    {
      v28 = *((_DWORD *)v21 - 1);
      v21 -= 4;
      *((_DWORD *)v16 - 1) = v28;
      v16 -= 4;
    }
    while (v21 != v6);
    goto LABEL_23;
  }
  if (a2)
  {
    bzero(*(void **)(a1 + 8), 4 * a2);
    v5 += 4 * a2;
  }
  *(_QWORD *)(a1 + 8) = v5;
}

void sub_22317F6D4(uint64_t **a1@<X0>, CFMutableArrayRef *a2@<X8>)
{
  std::__shared_weak_count *v4;
  CFMutableArrayRef v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  std::__shared_weak_count *v11;
  void *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  void *value;
  std::__shared_weak_count *v23;
  CFMutableArrayRef theArray[2];

  sub_2245281EC((std::__shared_weak_count_vtbl **)theArray);
  v5 = theArray[0];
  v4 = (std::__shared_weak_count *)theArray[1];
  if (!theArray[1])
    goto LABEL_6;
  v6 = (unint64_t *)((char *)theArray[1] + 8);
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  do
    v8 = __ldaxr(v6);
  while (__stlxr(v8 - 1, v6));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v5)
      goto LABEL_25;
  }
  else
  {
LABEL_6:
    if (!v5)
      goto LABEL_25;
  }
  v9 = *a1;
  v10 = a1[1];
  if (*a1 != v10)
  {
    do
    {
      sub_22317F918(v9, (CFMutableArrayRef *)&value);
      v12 = value;
      v11 = v23;
      if (!v23)
        goto LABEL_13;
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
        if (v12)
        {
LABEL_14:
          j__CFArrayAppendValue(theArray[0], value);
          v16 = v23;
          if (v23)
            goto LABEL_18;
          goto LABEL_22;
        }
      }
      else
      {
LABEL_13:
        if (v12)
          goto LABEL_14;
      }
      *a2 = 0;
      a2[1] = 0;
      v16 = v23;
      if (v23)
      {
LABEL_18:
        v17 = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
LABEL_22:
      if (!v12)
        goto LABEL_26;
      v9 += 3;
    }
    while (v9 != v10);
  }
  *(_OWORD *)a2 = *(_OWORD *)theArray;
  a2 = theArray;
LABEL_25:
  *a2 = 0;
  a2[1] = 0;
LABEL_26:
  v19 = (std::__shared_weak_count *)theArray[1];
  if (theArray[1])
  {
    v20 = (unint64_t *)((char *)theArray[1] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_22317F894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  if (a12)
  {
    v15 = (unint64_t *)&a12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_22317F918(uint64_t *a1@<X0>, CFMutableArrayRef *a2@<X8>)
{
  std::__shared_weak_count *v4;
  CFMutableArrayRef v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  void *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  void *value;
  std::__shared_weak_count *v23;
  CFMutableArrayRef theArray[2];

  sub_2245281EC((std::__shared_weak_count_vtbl **)theArray);
  v5 = theArray[0];
  v4 = (std::__shared_weak_count *)theArray[1];
  if (!theArray[1])
    goto LABEL_6;
  v6 = (unint64_t *)((char *)theArray[1] + 8);
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  do
    v8 = __ldaxr(v6);
  while (__stlxr(v8 - 1, v6));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v5)
      goto LABEL_25;
  }
  else
  {
LABEL_6:
    if (!v5)
      goto LABEL_25;
  }
  v9 = *a1;
  v10 = a1[1];
  if (*a1 != v10)
  {
    do
    {
      sub_224527470(&value, v9);
      v12 = value;
      v11 = v23;
      if (!v23)
        goto LABEL_13;
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
        if (v12)
        {
LABEL_14:
          j__CFArrayAppendValue(theArray[0], value);
          v16 = v23;
          if (v23)
            goto LABEL_18;
          goto LABEL_22;
        }
      }
      else
      {
LABEL_13:
        if (v12)
          goto LABEL_14;
      }
      *a2 = 0;
      a2[1] = 0;
      v16 = v23;
      if (v23)
      {
LABEL_18:
        v17 = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
LABEL_22:
      if (!v12)
        goto LABEL_26;
      v9 += 4;
    }
    while (v9 != v10);
  }
  *(_OWORD *)a2 = *(_OWORD *)theArray;
  a2 = theArray;
LABEL_25:
  *a2 = 0;
  a2[1] = 0;
LABEL_26:
  v19 = (std::__shared_weak_count *)theArray[1];
  if (theArray[1])
  {
    v20 = (unint64_t *)((char *)theArray[1] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_22317FAD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  if (a12)
  {
    v15 = (unint64_t *)&a12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

char *sub_22317FB5C(char **a1, _OWORD *a2, _QWORD *a3)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  char *v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  char *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;

  v4 = *a1;
  v5 = a1[1];
  v6 = 0xEEEEEEEEEEEEEEEFLL * ((v5 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0x222222222222222)
    sub_22316E078();
  if (0xDDDDDDDDDDDDDDDELL * ((a1[2] - v4) >> 3) > v7)
    v7 = 0xDDDDDDDDDDDDDDDELL * ((a1[2] - v4) >> 3);
  if (0xEEEEEEEEEEEEEEEFLL * ((a1[2] - v4) >> 3) >= 0x111111111111111)
    v10 = 0x222222222222222;
  else
    v10 = v7;
  if (v10)
  {
    if (v10 > 0x222222222222222)
      sub_223174E94();
    v11 = (char *)operator new(120 * v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = &v11[120 * v6];
  *(_OWORD *)v12 = *a2;
  v13 = a3[1];
  *((_QWORD *)v12 + 2) = *a3;
  *((_QWORD *)v12 + 3) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    v4 = *a1;
    v5 = a1[1];
  }
  v16 = &v11[120 * v6];
  v16[32] = 0;
  v16[96] = 0;
  v17 = &v11[120 * v10];
  v16[100] = 0;
  v16[116] = 0;
  v18 = v12 + 120;
  if (v5 == v4)
  {
    *a1 = v12;
    a1[1] = v18;
    a1[2] = v17;
    if (!v4)
      return v18;
    goto LABEL_30;
  }
  v19 = 0;
  do
  {
    v21 = &v12[v19];
    v22 = &v5[v19];
    *(_OWORD *)(v21 - 120) = *(_OWORD *)&v5[v19 - 120];
    *(_OWORD *)(v21 - 104) = *(_OWORD *)&v5[v19 - 104];
    *((_QWORD *)v22 - 13) = 0;
    *((_QWORD *)v22 - 12) = 0;
    v12[v19 - 88] = 0;
    *(v21 - 24) = 0;
    if (v5[v19 - 24])
    {
      v23 = *(_OWORD *)(v22 - 88);
      v24 = *(_OWORD *)(v22 - 72);
      v25 = *(_OWORD *)(v22 - 40);
      *(_OWORD *)&v12[v19 - 56] = *(_OWORD *)(v22 - 56);
      *(_OWORD *)&v12[v19 - 40] = v25;
      *(_OWORD *)&v12[v19 - 88] = v23;
      *(_OWORD *)&v12[v19 - 72] = v24;
      *(v21 - 24) = 1;
    }
    v20 = *(_OWORD *)(v22 - 20);
    *(v21 - 4) = *(v22 - 4);
    *(_OWORD *)(v21 - 20) = v20;
    v19 -= 120;
  }
  while (&v5[v19] != v4);
  v26 = *a1;
  v4 = a1[1];
  *a1 = &v12[v19];
  a1[1] = v18;
  a1[2] = v17;
  if (v4 != v26)
  {
    do
    {
      v27 = (std::__shared_weak_count *)*((_QWORD *)v4 - 12);
      if (v27)
      {
        p_shared_owners = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldaxr(p_shared_owners);
        while (__stlxr(v29 - 1, p_shared_owners));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v4 -= 120;
    }
    while (v4 != v26);
    v4 = v26;
  }
  if (v4)
LABEL_30:
    operator delete(v4);
  return v18;
}

uint64_t sub_22317FD80(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(result + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_DWORD *)(result + 64) = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(result + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(result + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_DWORD *)(result + 104) = *(_DWORD *)(a2 + 104);
  *(_QWORD *)(result + 120) = 0;
  *(_QWORD *)(result + 128) = 0;
  *(_QWORD *)(result + 112) = 0;
  *(_QWORD *)(result + 136) = *(_QWORD *)(a2 + 136);
  *(_OWORD *)(result + 112) = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(result + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(result + 144) = 0;
  *(_QWORD *)(result + 152) = 0;
  *(_QWORD *)(result + 160) = 0;
  *(_QWORD *)(result + 168) = *(_QWORD *)(a2 + 168);
  *(_OWORD *)(result + 144) = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(result + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(result + 176) = 0;
  *(_QWORD *)(result + 184) = 0;
  *(_QWORD *)(result + 192) = 0;
  *(_QWORD *)(result + 200) = *(_QWORD *)(a2 + 200);
  *(_OWORD *)(result + 176) = *(_OWORD *)(a2 + 176);
  *(_QWORD *)(result + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(result + 208) = 0;
  *(_QWORD *)(result + 216) = 0;
  *(_QWORD *)(result + 224) = 0;
  *(_QWORD *)(result + 232) = *(_QWORD *)(a2 + 232);
  *(_OWORD *)(result + 208) = *(_OWORD *)(a2 + 208);
  *(_QWORD *)(result + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a2 + 208) = 0;
  *(_QWORD *)(a2 + 216) = 0;
  *(_QWORD *)(a2 + 224) = 0;
  *(_QWORD *)(result + 240) = 0;
  *(_QWORD *)(result + 248) = 0;
  *(_QWORD *)(result + 256) = 0;
  *(_QWORD *)(result + 264) = *(_QWORD *)(a2 + 264);
  *(_OWORD *)(result + 240) = *(_OWORD *)(a2 + 240);
  *(_QWORD *)(result + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a2 + 248) = 0;
  *(_QWORD *)(a2 + 256) = 0;
  *(_QWORD *)(a2 + 240) = 0;
  *(_DWORD *)(result + 272) = *(_DWORD *)(a2 + 272);
  *(_QWORD *)(result + 288) = 0;
  *(_QWORD *)(result + 296) = 0;
  *(_QWORD *)(result + 280) = 0;
  *(_QWORD *)(result + 304) = *(_QWORD *)(a2 + 304);
  v2 = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(result + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(result + 288) = v2;
  *(_QWORD *)(result + 296) = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a2 + 288) = 0;
  *(_QWORD *)(a2 + 296) = 0;
  *(_QWORD *)(a2 + 280) = 0;
  *(_DWORD *)(result + 312) = *(_DWORD *)(a2 + 312);
  *(_QWORD *)(result + 328) = 0;
  *(_QWORD *)(result + 336) = 0;
  *(_QWORD *)(result + 320) = 0;
  *(_QWORD *)(result + 344) = *(_QWORD *)(a2 + 344);
  *(_OWORD *)(result + 320) = *(_OWORD *)(a2 + 320);
  *(_QWORD *)(result + 336) = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a2 + 328) = 0;
  *(_QWORD *)(a2 + 336) = 0;
  *(_QWORD *)(a2 + 320) = 0;
  *(_DWORD *)(result + 352) = *(_DWORD *)(a2 + 352);
  *(_BYTE *)(result + 356) = 0;
  *(_BYTE *)(result + 380) = 0;
  if (*(_BYTE *)(a2 + 380))
  {
    v3 = *(_QWORD *)(a2 + 356);
    *(_DWORD *)(result + 364) = *(_DWORD *)(a2 + 364);
    *(_QWORD *)(result + 356) = v3;
    v4 = *(_QWORD *)(a2 + 368);
    *(_DWORD *)(result + 376) = *(_DWORD *)(a2 + 376);
    *(_QWORD *)(result + 368) = v4;
    *(_BYTE *)(result + 380) = 1;
  }
  return result;
}

uint64_t sub_22317FF7C(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  unint64_t v6;
  id v7;
  const char *v8;
  void *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD v19[5];
  _QWORD v20[7];
  std::__shared_weak_count *v21;

  v6 = (12 * a1 + 4095) & 0xFFFFFFFFFFFFF000;
  v7 = a3;
  v9 = v7;
  v20[0] = 0;
  v20[1] = v20;
  v20[2] = 0x4012000000;
  v20[3] = sub_2231800E0;
  v20[4] = sub_2231800F0;
  v11 = *a4;
  v10 = (std::__shared_weak_count *)a4[1];
  v20[5] = "";
  v20[6] = v11;
  v21 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v19[0] = MEMORY[0x24BDAC760];
  v19[1] = 3221225472;
  v19[2] = nullsub_5;
  v19[3] = &unk_24EC1F0E8;
  v19[4] = v20;
  v14 = objc_msgSend_newBufferWithBytesNoCopy_length_options_deallocator_(v7, v8, a2, v6, 0, (uint64_t)v19);
  _Block_object_dispose(v20, 8);
  v15 = v21;
  if (v21)
  {
    v16 = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

  return v14;
}

void sub_2231800BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  uint64_t v8;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  sub_223167354(v8);

  _Unwind_Resume(a1);
}

__n128 sub_2231800E0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

void sub_2231800F0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t sub_22318014C(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  unint64_t v6;
  id v7;
  const char *v8;
  void *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD v19[5];
  _QWORD v20[7];
  std::__shared_weak_count *v21;

  v6 = (12 * a1 + 4095) & 0xFFFFFFFFFFFFF000;
  v7 = a3;
  v9 = v7;
  v20[0] = 0;
  v20[1] = v20;
  v20[2] = 0x4012000000;
  v20[3] = sub_2231800E0;
  v20[4] = sub_2231800F0;
  v11 = *a4;
  v10 = (std::__shared_weak_count *)a4[1];
  v20[5] = "";
  v20[6] = v11;
  v21 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v19[0] = MEMORY[0x24BDAC760];
  v19[1] = 3221225472;
  v19[2] = nullsub_6;
  v19[3] = &unk_24EC1F0E8;
  v19[4] = v20;
  v14 = objc_msgSend_newBufferWithBytesNoCopy_length_options_deallocator_(v7, v8, a2, v6, 0, (uint64_t)v19);
  _Block_object_dispose(v20, 8);
  v15 = v21;
  if (v21)
  {
    v16 = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

  return v14;
}

void sub_22318028C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  uint64_t v8;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  sub_223167354(v8);

  _Unwind_Resume(a1);
}

uint64_t sub_2231802B4(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  unint64_t v6;
  id v7;
  const char *v8;
  void *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD v19[5];
  _QWORD v20[7];
  std::__shared_weak_count *v21;

  v6 = (a1 + 4095) & 0xFFFFFFFFFFFFF000;
  v7 = a3;
  v9 = v7;
  v20[0] = 0;
  v20[1] = v20;
  v20[2] = 0x4012000000;
  v20[3] = sub_2231800E0;
  v20[4] = sub_2231800F0;
  v11 = *a4;
  v10 = (std::__shared_weak_count *)a4[1];
  v20[5] = "";
  v20[6] = v11;
  v21 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v19[0] = MEMORY[0x24BDAC760];
  v19[1] = 3221225472;
  v19[2] = nullsub_7;
  v19[3] = &unk_24EC1F0E8;
  v19[4] = v20;
  v14 = objc_msgSend_newBufferWithBytesNoCopy_length_options_deallocator_(v7, v8, a2, v6, 0, (uint64_t)v19);
  _Block_object_dispose(v20, 8);
  v15 = v21;
  if (v21)
  {
    v16 = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

  return v14;
}

void sub_2231803EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  uint64_t v8;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  sub_223167354(v8);

  _Unwind_Resume(a1);
}

uint64_t sub_223180414(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  unint64_t v6;
  id v7;
  const char *v8;
  void *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD v19[5];
  _QWORD v20[7];
  std::__shared_weak_count *v21;

  v6 = (4 * a1 + 4095) & 0xFFFFFFFFFFFFF000;
  v7 = a3;
  v9 = v7;
  v20[0] = 0;
  v20[1] = v20;
  v20[2] = 0x4012000000;
  v20[3] = sub_2231800E0;
  v20[4] = sub_2231800F0;
  v11 = *a4;
  v10 = (std::__shared_weak_count *)a4[1];
  v20[5] = "";
  v20[6] = v11;
  v21 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v19[0] = MEMORY[0x24BDAC760];
  v19[1] = 3221225472;
  v19[2] = nullsub_8;
  v19[3] = &unk_24EC1F0E8;
  v19[4] = v20;
  v14 = objc_msgSend_newBufferWithBytesNoCopy_length_options_deallocator_(v7, v8, a2, v6, 0, (uint64_t)v19);
  _Block_object_dispose(v20, 8);
  v15 = v21;
  if (v21)
  {
    v16 = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

  return v14;
}

void sub_223180550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  uint64_t v8;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  sub_223167354(v8);

  _Unwind_Resume(a1);
}

BOOL sub_223180578(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[20];

  v11[19] = *MEMORY[0x24BDAC8D0];
  sub_2231812D4(&v8);
  v5 = v10;
  if (v10)
    v6 = a2 == 0;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      std::ostream::operator<<();
      sub_2231813E8(&v8, (uint64_t)"\n", 1);
      ++a3;
      --a2;
    }
    while (a2);
  }
  v8 = *MEMORY[0x24BEDB7E8];
  *(uint64_t *)((char *)&v8 + *(_QWORD *)(v8 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 24);
  MEMORY[0x2276844FC](&v9);
  std::ostream::~ostream();
  MEMORY[0x227684BE0](v11);
  return v5 != 0;
}

void sub_223180684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22318127C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223180698(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_223180888((uint64_t *)a1, (uint64_t **)a2);
  sub_223180888(v4 + 4, (uint64_t **)(a2 + 32));
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  sub_223180888((uint64_t *)(a1 + 72), (uint64_t **)(a2 + 72));
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  sub_223180A38((uint64_t *)(a1 + 112), (uint64_t **)(a2 + 112));
  sub_223180BE8((uint64_t *)(a1 + 144), a2 + 144);
  sub_223180DC0((uint64_t *)(a1 + 176), a2 + 176);
  sub_223180A38((uint64_t *)(a1 + 208), (uint64_t **)(a2 + 208));
  sub_223180F98((_QWORD *)(a1 + 240), a2 + 240);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  sub_223180F98((_QWORD *)(a1 + 280), a2 + 280);
  *(_DWORD *)(a1 + 312) = *(_DWORD *)(a2 + 312);
  sub_223181104((_QWORD *)(a1 + 320), a2 + 320);
  *(_DWORD *)(a1 + 352) = *(_DWORD *)(a2 + 352);
  *(_BYTE *)(a1 + 356) = 0;
  *(_BYTE *)(a1 + 380) = 0;
  if (*(_BYTE *)(a2 + 380))
  {
    v5 = *(_QWORD *)(a2 + 356);
    *(_DWORD *)(a1 + 364) = *(_DWORD *)(a2 + 364);
    *(_QWORD *)(a1 + 356) = v5;
    v6 = *(_QWORD *)(a2 + 368);
    *(_DWORD *)(a1 + 376) = *(_DWORD *)(a2 + 376);
    *(_QWORD *)(a1 + 368) = v6;
    *(_BYTE *)(a1 + 380) = 1;
  }
  return a1;
}

void sub_2231807D4(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;

  sub_22317EC9C(v9);
  sub_22317EC9C(v8);
  sub_22317ED18(v7);
  sub_22317EDA4(v6);
  sub_22317EE24(v5);
  sub_22317ED18(v4);
  sub_22317EEA4(v3);
  sub_22317EEA4(v2);
  sub_22317EEA4(v1);
  _Unwind_Resume(a1);
}

void sub_223180848()
{
  JUMPOUT(0x223180820);
}

void sub_223180850()
{
  JUMPOUT(0x223180828);
}

void sub_223180858(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t *v2;

  sub_22317EEA4(v2);
  sub_22317EEA4(v1);
  _Unwind_Resume(a1);
}

void sub_223180874(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22317EEA4(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_223180888(uint64_t *a1, uint64_t **a2)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  int *v15;
  char *v16;
  char v17;

  *a1 = 0;
  a1[1] = 0;
  v2 = *((unsigned int *)a2 + 7);
  if ((_DWORD)v2 == -1)
    sub_22316DD70();
  v16 = &v17;
  v5 = ((uint64_t (*)(char **, uint64_t **))off_24EC1F720[v2])(&v16, a2 + 3);
  a1[3] = v5;
  a1[2] = 0;
  v7 = *a2;
  v6 = a2[1];
  if (v6 != v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v6 - (char *)v7) >> 2) >= 0x1555555555555556)
      sub_22316E078();
    v14 = -1431655765 * (((char *)v6 - (char *)v7) >> 2);
    if (HIDWORD(v5) == 0xFFFFFFFF)
      sub_22316DD70();
    v15 = &v14;
    v8 = ((uint64_t (*)(int **, uint64_t *))off_24EC1F680[HIDWORD(v5)])(&v15, a1 + 3);
    v9 = 0;
    *a1 = v8;
    a1[1] = v8;
    a1[2] = v8 + 12 * v10;
    v11 = v8;
    do
    {
      v12 = *v7;
      *(_DWORD *)(v11 + 8) = *((_DWORD *)v7 + 2);
      *(_QWORD *)v11 = v12;
      v11 += 12;
      v7 = (uint64_t *)((char *)v7 + 12);
      v9 += 12;
    }
    while (v7 != v6);
    a1[1] = v8 + v9;
  }
  return a1;
}

void sub_2231809B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t *a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v17 = *(_QWORD *)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v17;
    v18 = -1431655765 * ((unint64_t)(*(_QWORD *)(v14 + 16) - v17) >> 2);
    a12 = v17;
    a13 = v18;
    v19 = *(unsigned int *)(v14 + 28);
    if ((_DWORD)v19 == -1)
      sub_22316DD70();
    a14 = &a12;
    ((void (*)(uint64_t **, uint64_t))off_24EC1F690[v19])(&a14, v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223180A28()
{
  return 0;
}

uint64_t sub_223180A30()
{
  return 0x100000000;
}

uint64_t *sub_223180A38(uint64_t *a1, uint64_t **a2)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  int *v15;
  char *v16;
  char v17;

  *a1 = 0;
  a1[1] = 0;
  v2 = *((unsigned int *)a2 + 7);
  if ((_DWORD)v2 == -1)
    sub_22316DD70();
  v16 = &v17;
  v5 = ((uint64_t (*)(char **, uint64_t **))off_24EC1F730[v2])(&v16, a2 + 3);
  a1[3] = v5;
  a1[2] = 0;
  v7 = *a2;
  v6 = a2[1];
  if (v6 != v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v6 - (char *)v7) >> 2) >= 0x1555555555555556)
      sub_22316E078();
    v14 = -1431655765 * (((char *)v6 - (char *)v7) >> 2);
    if (HIDWORD(v5) == 0xFFFFFFFF)
      sub_22316DD70();
    v15 = &v14;
    v8 = ((uint64_t (*)(int **, uint64_t *))off_24EC1F6A0[HIDWORD(v5)])(&v15, a1 + 3);
    v9 = 0;
    *a1 = v8;
    a1[1] = v8;
    a1[2] = v8 + 12 * v10;
    v11 = v8;
    do
    {
      v12 = *v7;
      *(_DWORD *)(v11 + 8) = *((_DWORD *)v7 + 2);
      *(_QWORD *)v11 = v12;
      v11 += 12;
      v7 = (uint64_t *)((char *)v7 + 12);
      v9 += 12;
    }
    while (v7 != v6);
    a1[1] = v8 + v9;
  }
  return a1;
}

void sub_223180B64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t *a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v17 = *(_QWORD *)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v17;
    v18 = -1431655765 * ((unint64_t)(*(_QWORD *)(v14 + 16) - v17) >> 2);
    a12 = v17;
    a13 = v18;
    v19 = *(unsigned int *)(v14 + 28);
    if ((_DWORD)v19 == -1)
      sub_22316DD70();
    a14 = &a12;
    ((void (*)(uint64_t **, uint64_t))off_24EC1F6B0[v19])(&a14, v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223180BD8()
{
  return 0;
}

uint64_t sub_223180BE0()
{
  return 0x100000000;
}

uint64_t *sub_223180BE8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  char *v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _OWORD *v15;
  __int128 *v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  int v21;
  int *v22;
  char *v23;
  char v24;

  *a1 = 0;
  a1[1] = 0;
  v2 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v2 == -1)
    sub_22316DD70();
  v23 = &v24;
  v5 = ((uint64_t (*)(char **, uint64_t))off_24EC1F740[v2])(&v23, a2 + 24);
  a1[3] = v5;
  a1[2] = 0;
  v7 = *(char **)a2;
  v6 = *(char **)(a2 + 8);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if ((v8 & 0x8000000000000000) != 0)
      sub_22316E078();
    v21 = v8 >> 3;
    if (HIDWORD(v5) == 0xFFFFFFFF)
      sub_22316DD70();
    v22 = &v21;
    v9 = ((uint64_t (*)(int **, uint64_t *))off_24EC1F750[HIDWORD(v5)])(&v22, a1 + 3);
    *a1 = v9;
    a1[1] = v9;
    a1[2] = v9 + 8 * v10;
    if (v8 - 8 < 0x18)
      goto LABEL_10;
    if ((unint64_t)(v9 - (_QWORD)v7) < 0x20)
      goto LABEL_10;
    v11 = ((v8 - 8) >> 3) + 1;
    v12 = 8 * (v11 & 0x3FFFFFFFFFFFFFFCLL);
    v13 = &v7[v12];
    v14 = (_QWORD *)(v9 + v12);
    v15 = (_OWORD *)(v9 + 16);
    v16 = (__int128 *)(v7 + 16);
    v17 = v11 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v18 = *v16;
      *(v15 - 1) = *(v16 - 1);
      *v15 = v18;
      v15 += 2;
      v16 += 2;
      v17 -= 4;
    }
    while (v17);
    v7 = v13;
    v9 = (uint64_t)v14;
    if (v11 != (v11 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_10:
      v14 = (_QWORD *)v9;
      do
      {
        v19 = *(_QWORD *)v7;
        v7 += 8;
        *v14++ = v19;
      }
      while (v7 != v6);
    }
    a1[1] = (uint64_t)v14;
  }
  return a1;
}

void sub_223180D48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t *a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v17 = *(_QWORD *)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v17;
    v18 = (unint64_t)(*(_QWORD *)(v14 + 16) - v17) >> 3;
    a12 = v17;
    a13 = v18;
    v19 = *(unsigned int *)(v14 + 28);
    if ((_DWORD)v19 == -1)
      sub_22316DD70();
    a14 = &a12;
    ((void (*)(uint64_t **, uint64_t))off_24EC1F6F0[v19])(&a14, v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223180DB0()
{
  return 0;
}

uint64_t sub_223180DB8()
{
  return 0x100000000;
}

uint64_t *sub_223180DC0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  char *v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _OWORD *v15;
  __int128 *v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  int v21;
  int *v22;
  char *v23;
  char v24;

  *a1 = 0;
  a1[1] = 0;
  v2 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v2 == -1)
    sub_22316DD70();
  v23 = &v24;
  v5 = ((uint64_t (*)(char **, uint64_t))off_24EC1F760[v2])(&v23, a2 + 24);
  a1[3] = v5;
  a1[2] = 0;
  v7 = *(char **)a2;
  v6 = *(char **)(a2 + 8);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if ((v8 & 0x8000000000000000) != 0)
      sub_22316E078();
    v21 = v8 >> 3;
    if (HIDWORD(v5) == 0xFFFFFFFF)
      sub_22316DD70();
    v22 = &v21;
    v9 = ((uint64_t (*)(int **, uint64_t *))off_24EC1F770[HIDWORD(v5)])(&v22, a1 + 3);
    *a1 = v9;
    a1[1] = v9;
    a1[2] = v9 + 8 * v10;
    if (v8 - 8 < 0x18)
      goto LABEL_10;
    if ((unint64_t)(v9 - (_QWORD)v7) < 0x20)
      goto LABEL_10;
    v11 = ((v8 - 8) >> 3) + 1;
    v12 = 8 * (v11 & 0x3FFFFFFFFFFFFFFCLL);
    v13 = &v7[v12];
    v14 = (_QWORD *)(v9 + v12);
    v15 = (_OWORD *)(v9 + 16);
    v16 = (__int128 *)(v7 + 16);
    v17 = v11 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v18 = *v16;
      *(v15 - 1) = *(v16 - 1);
      *v15 = v18;
      v15 += 2;
      v16 += 2;
      v17 -= 4;
    }
    while (v17);
    v7 = v13;
    v9 = (uint64_t)v14;
    if (v11 != (v11 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_10:
      v14 = (_QWORD *)v9;
      do
      {
        v19 = *(_QWORD *)v7;
        v7 += 8;
        *v14++ = v19;
      }
      while (v7 != v6);
    }
    a1[1] = (uint64_t)v14;
  }
  return a1;
}

void sub_223180F20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t *a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v17 = *(_QWORD *)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v17;
    v18 = (unint64_t)(*(_QWORD *)(v14 + 16) - v17) >> 3;
    a12 = v17;
    a13 = v18;
    v19 = *(unsigned int *)(v14 + 28);
    if ((_DWORD)v19 == -1)
      sub_22316DD70();
    a14 = &a12;
    ((void (*)(uint64_t **, uint64_t))off_24EC1F6E0[v19])(&a14, v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223180F88()
{
  return 0;
}

uint64_t sub_223180F90()
{
  return 0x100000000;
}

_QWORD *sub_223180F98(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  const void *v6;
  size_t v7;
  char *v8;
  uint64_t v9;
  int v11;
  int *v12;
  char *v13;
  char v14;

  *a1 = 0;
  a1[1] = 0;
  v2 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v2 == -1)
    sub_22316DD70();
  v13 = &v14;
  v5 = ((uint64_t (*)(char **, uint64_t))off_24EC1F780[v2])(&v13, a2 + 24);
  a1[3] = v5;
  a1[2] = 0;
  v6 = *(const void **)a2;
  v7 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v7)
  {
    if ((v7 & 0x8000000000000000) != 0)
      sub_22316E078();
    v11 = v7;
    if (HIDWORD(v5) == 0xFFFFFFFF)
      sub_22316DD70();
    v12 = &v11;
    v8 = (char *)((uint64_t (*)(int **, _QWORD *))off_24EC1F700[HIDWORD(v5)])(&v12, a1 + 3);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[v9];
    memmove(v8, v6, v7);
    a1[1] = &v8[v7];
  }
  return a1;
}

void sub_223181090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t *a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v17 = *(_QWORD *)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v17;
    v18 = *(_DWORD *)(v14 + 16) - v17;
    a12 = v17;
    a13 = v18;
    v19 = *(unsigned int *)(v14 + 28);
    if ((_DWORD)v19 == -1)
      sub_22316DD70();
    a14 = &a12;
    ((void (*)(uint64_t **, uint64_t))off_24EC1F6D0[v19])(&a14, v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2231810F4()
{
  return 0;
}

uint64_t sub_2231810FC()
{
  return 0x100000000;
}

_QWORD *sub_223181104(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  const void *v6;
  int64_t v7;
  char *v8;
  uint64_t v9;
  int v11;
  int *v12;
  char *v13;
  char v14;

  *a1 = 0;
  a1[1] = 0;
  v2 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v2 == -1)
    sub_22316DD70();
  v13 = &v14;
  v5 = ((uint64_t (*)(char **, uint64_t))off_24EC1F790[v2])(&v13, a2 + 24);
  a1[3] = v5;
  a1[2] = 0;
  v6 = *(const void **)a2;
  v7 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v7)
  {
    if (v7 < 0)
      sub_22316E078();
    v11 = (unint64_t)v7 >> 2;
    if (HIDWORD(v5) == 0xFFFFFFFF)
      sub_22316DD70();
    v12 = &v11;
    v8 = (char *)((uint64_t (*)(int **, _QWORD *))off_24EC1F710[HIDWORD(v5)])(&v12, a1 + 3);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[4 * v9];
    memmove(v8, v6, v7);
    a1[1] = &v8[4 * (v7 >> 2)];
  }
  return a1;
}

void sub_223181204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t *a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v17 = *(_QWORD *)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v17;
    v18 = (unint64_t)(*(_QWORD *)(v14 + 16) - v17) >> 2;
    a12 = v17;
    a13 = v18;
    v19 = *(unsigned int *)(v14 + 28);
    if ((_DWORD)v19 == -1)
      sub_22316DD70();
    a14 = &a12;
    ((void (*)(uint64_t **, uint64_t))off_24EC1F6C0[v19])(&a14, v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22318126C()
{
  return 0;
}

uint64_t sub_223181274()
{
  return 0x100000000;
}

_QWORD *sub_22318127C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB7E8];
  v3 = *MEMORY[0x24BEDB7E8];
  *a1 = *MEMORY[0x24BEDB7E8];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x2276844FC](a1 + 1);
  std::ostream::~ostream();
  MEMORY[0x227684BE0](a1 + 52);
  return a1;
}

_QWORD *sub_2231812D4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x24BEDB840];
  v3 = MEMORY[0x24BEDB840] + 64;
  a1[52] = MEMORY[0x24BEDB840] + 64;
  v4 = a1 + 1;
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 1);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[52] = v3;
  MEMORY[0x2276844F0](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_2231813A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x227684BE0](v1 + 416);
  _Unwind_Resume(a1);
}

_QWORD *sub_2231813E8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x227684604](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!sub_22318154C(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x227684610](v13);
  return a1;
}

void sub_2231814F0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x227684610](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x2231814D0);
}

void sub_223181538(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_22318154C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  size_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__b[2];
  int64_t v22;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if ((uint64_t)v12 >= 1)
    {
      if (v12 >= 0x7FFFFFFFFFFFFFF8)
        sub_22316DBC0();
      if (v12 >= 0x17)
      {
        v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v14 = v12 | 7;
        v15 = v14 + 1;
        v13 = (void **)operator new(v14 + 1);
        __b[1] = (void *)v12;
        v22 = v15 | 0x8000000000000000;
        __b[0] = v13;
      }
      else
      {
        HIBYTE(v22) = v12;
        v13 = __b;
      }
      memset(v13, __c, v12);
      *((_BYTE *)v13 + v12) = 0;
      if (v22 >= 0)
        v16 = __b;
      else
        v16 = (void **)__b[0];
      v17 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(_QWORD *)v6 + 96))(v6, v16, v12);
      v18 = v17;
      if (SHIBYTE(v22) < 0)
      {
        operator delete(__b[0]);
        if (v18 != v12)
          return 0;
      }
      else if (v17 != v12)
      {
        return 0;
      }
    }
    v19 = a4 - a3;
    if (v19 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v19) == v19)
    {
      *(_QWORD *)(a5 + 24) = 0;
      return v6;
    }
    return 0;
  }
  return v6;
}

void sub_2231816D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_2231816F0(std::string *this, std::string *__src, std::string *a3)
{
  int v6;
  size_t v7;
  std::string::size_type size;
  unint64_t v9;
  unint64_t v10;
  std::string *v11;
  unint64_t v12;
  void **p_dst;
  size_t v14;
  std::string *v15;
  void *v16;
  std::string *v17;
  std::string::value_type *v18;
  std::string *v19;
  uint64_t v20;
  uint64_t v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  unint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  std::string::size_type *v27;
  unint64_t v28;
  __int128 v29;
  std::string::value_type v30;
  std::string::size_type v31;
  void **__dst;
  size_t v34;
  int64_t v35;

  v6 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  v7 = (char *)a3 - (char *)__src;
  if (v6 < 0)
  {
    if (a3 == __src)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v12 = this->__r_.__value_.__r.__words[2];
    v9 = (v12 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v11 = (std::string *)this->__r_.__value_.__r.__words[0];
    v10 = HIBYTE(v12);
    if (this->__r_.__value_.__r.__words[0] > (unint64_t)__src)
      goto LABEL_12;
  }
  else
  {
    if (a3 == __src)
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 22;
    LOBYTE(v10) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    v11 = this;
    if (this > __src)
    {
LABEL_12:
      if (v9 - size >= v7)
      {
        v17 = this;
        if ((v10 & 0x80) == 0)
          goto LABEL_23;
        goto LABEL_22;
      }
      v14 = 0x7FFFFFFFFFFFFFF7;
      if (0x7FFFFFFFFFFFFFF7 - v9 < v7 + size - v9)
        sub_22316DBC0();
      v15 = this;
      if (v6 < 0)
      {
        v15 = (std::string *)this->__r_.__value_.__r.__words[0];
        if (v9 > 0x3FFFFFFFFFFFFFF2)
        {
LABEL_16:
          v16 = operator new(0x7FFFFFFFFFFFFFF7uLL);
          if (!size)
          {
LABEL_18:
            if (v9 != 22)
              operator delete(v15);
            this->__r_.__value_.__l.__size_ = size;
            this->__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
            this->__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
LABEL_22:
            v17 = (std::string *)this->__r_.__value_.__r.__words[0];
LABEL_23:
            v18 = (char *)v17 + size;
            if (a3 != __src)
            {
              if (v7 >= 0x20)
              {
                if ((unint64_t)((char *)v17 + size - (char *)__src) >= 0x20)
                {
                  v19 = (std::string *)((char *)__src + (v7 & 0xFFFFFFFFFFFFFFE0));
                  v18 += v7 & 0xFFFFFFFFFFFFFFE0;
                  v26 = (_OWORD *)((char *)&v17->__r_.__value_.__r.__words[2] + size);
                  v27 = &__src->__r_.__value_.__r.__words[2];
                  v28 = v7 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    v29 = *(_OWORD *)v27;
                    *(v26 - 1) = *((_OWORD *)v27 - 1);
                    *v26 = v29;
                    v26 += 2;
                    v27 += 4;
                    v28 -= 32;
                  }
                  while (v28);
                  if (v7 == (v7 & 0xFFFFFFFFFFFFFFE0))
                    goto LABEL_54;
                }
                else
                {
                  v19 = __src;
                }
              }
              else
              {
                v19 = __src;
              }
              do
              {
                v30 = v19->__r_.__value_.__s.__data_[0];
                v19 = (std::string *)((char *)v19 + 1);
                *v18++ = v30;
              }
              while (v19 != a3);
            }
LABEL_54:
            *v18 = 0;
            v31 = v7 + size;
            if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
              this->__r_.__value_.__l.__size_ = v31;
            else
              *((_BYTE *)&this->__r_.__value_.__s + 23) = v31 & 0x7F;
            return this;
          }
LABEL_17:
          memmove(v16, v15, size);
          goto LABEL_18;
        }
      }
      else if (v9 > 0x3FFFFFFFFFFFFFF2)
      {
        goto LABEL_16;
      }
      v24 = 2 * v9;
      if (v7 + size > 2 * v9)
        v24 = v7 + size;
      v25 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v24 | 7) != 0x17)
        v25 = v24 | 7;
      if (v24 >= 0x17)
        v14 = v25 + 1;
      else
        v14 = 23;
      v16 = operator new(v14);
      if (!size)
        goto LABEL_18;
      goto LABEL_17;
    }
  }
  if ((std::string *)((char *)&v11->__r_.__value_.__l.__data_ + size + 1) <= __src)
    goto LABEL_12;
  if (v7 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v7 > 0x16)
  {
    v20 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v20 = v7 | 7;
    v21 = v20 + 1;
    p_dst = (void **)operator new(v20 + 1);
    v34 = v7;
    v35 = v21 | 0x8000000000000000;
    __dst = p_dst;
    if (a3 == __src)
      goto LABEL_30;
    goto LABEL_29;
  }
  HIBYTE(v35) = (_BYTE)a3 - (_BYTE)__src;
  p_dst = (void **)&__dst;
  if (a3 != __src)
  {
LABEL_29:
    memcpy(p_dst, __src, v7);
    p_dst = (void **)((char *)p_dst + v7);
  }
LABEL_30:
  *(_BYTE *)p_dst = 0;
  if (v35 >= 0)
    v22 = (const std::string::value_type *)&__dst;
  else
    v22 = (const std::string::value_type *)__dst;
  if (v35 >= 0)
    v23 = HIBYTE(v35);
  else
    v23 = v34;
  std::string::append(this, v22, v23);
  if (SHIBYTE(v35) < 0)
    operator delete(__dst);
  return this;
}

void sub_2231819DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2231819F8(uint64_t a1, const void *a2, uint64_t a3, std::string *a4, uint64_t a5, char a6, int a7, char a8, _QWORD *a9, _QWORD *a10)
{
  uint64_t *v18;
  std::mutex *v19;
  std::condition_variable *v20;
  int v21;
  unint64_t v22;
  size_t v23;
  const char *v24;
  float v25;
  unsigned __int8 v26;
  const char *v27;
  size_t v28;
  NSObject *v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  void **v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  float v37;
  os_log_type_t v38;
  NSObject *v39;
  NSObject *v40;
  size_t v41;
  std::__shared_weak_count_vtbl *v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  char v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t (**v67)();
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  const char *v80;
  void *v81;
  const char *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  float v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  std::__thread_struct *v92;
  _QWORD *v93;
  int v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  NSObject *v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  int v110;
  unint64_t v111;
  uint64_t *v112;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  std::unique_lock<std::mutex> __lk;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v122;
  const char *v123;
  int v124;
  const char *v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  uint64_t v128;
  uint64_t (**v129)();
  __int128 v130;
  std::__shared_weak_count_vtbl *v131;
  _QWORD v132[2];
  std::__shared_weak_count *v133;
  std::__shared_weak_count *v134;
  std::__shared_weak_count *v135;
  uint64_t v136;
  char v137;
  _BYTE v138[24];
  __int128 v139;
  void *v140[2];
  unint64_t v141;
  char v142;
  uint64_t v143;

  v143 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)a1 = 2;
  *(_BYTE *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = 2;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(a1 + 16) = _D0;
  *(_DWORD *)(a1 + 24) = 1065353216;
  *(_BYTE *)(a1 + 28) = 1;
  *(_WORD *)(a1 + 32) = 256;
  *(_BYTE *)(a1 + 34) = 1;
  *(_OWORD *)(a1 + 40) = xmmword_2245B95E0;
  *(_QWORD *)(a1 + 56) = 0x548960000;
  *(_BYTE *)(a1 + 64) = 1;
  *(_DWORD *)(a1 + 68) = 1077936128;
  *(_BYTE *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 76) = xmmword_2245B95F0;
  *(_BYTE *)(a1 + 92) = 1;
  *(_WORD *)(a1 + 96) = 1;
  *(_DWORD *)(a1 + 100) = 1045220557;
  *(_QWORD *)(a1 + 104) = 0x4000000000000000;
  *(_BYTE *)(a1 + 112) = 1;
  *(_WORD *)(a1 + 120) = 256;
  *(_BYTE *)(a1 + 122) = 1;
  *(_QWORD *)(a1 + 124) = 0x5000002EELL;
  *(_WORD *)(a1 + 132) = 1;
  *(_BYTE *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 140) = 0;
  *(_DWORD *)(a1 + 144) = 10;
  *(_BYTE *)(a1 + 152) = 2;
  *(_QWORD *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 176) = 1;
  *(_QWORD *)(a1 + 180) = 0x23E05A8ACLL;
  *(_DWORD *)(a1 + 188) = 1028443341;
  *(_BYTE *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 200) = 0x43E800000;
  *(_BYTE *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 212) = 0;
  *(_DWORD *)(a1 + 216) = 1056964608;
  *(_WORD *)(a1 + 220) = 256;
  *(_OWORD *)(a1 + 224) = xmmword_2245B9600;
  *(_DWORD *)(a1 + 240) = 4;
  *(_BYTE *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 252) = 0x2003E75C28FLL;
  *(_BYTE *)(a1 + 260) = 1;
  *(_QWORD *)(a1 + 264) = 0x240A00000;
  *(_DWORD *)(a1 + 272) = 1;
  *(_QWORD *)(a1 + 280) = 0x3FE8000000000000;
  *(_QWORD *)(a1 + 288) = 0x1300000007;
  *(_BYTE *)(a1 + 296) = 24;
  *(_QWORD *)(a1 + 300) = 0x40A0000040000000;
  *(_BYTE *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_DWORD *)(a1 + 352) = 1065353216;
  v18 = (uint64_t *)(a1 + 368);
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 416) = 30;
  *(_BYTE *)(a1 + 424) = 0;
  *(_BYTE *)(a1 + 432) = 0;
  v19 = (std::mutex *)(a1 + 448);
  *(_QWORD *)(a1 + 448) = 850045863;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_QWORD *)(a1 + 520) = 1018212795;
  v20 = (std::condition_variable *)(a1 + 576);
  *(_OWORD *)(a1 + 553) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_QWORD *)(a1 + 576) = 1018212795;
  v119 = (_QWORD *)(a1 + 632);
  *(_QWORD *)(a1 + 656) = 0;
  v117 = (_QWORD *)(a1 + 512);
  v118 = (_QWORD *)(a1 + 664);
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 610) = 0u;
  *(_DWORD *)(a1 + 864) = 0;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  memcpy((void *)a1, a2, 0x138uLL);
  *(_BYTE *)(a1 + 312) = a8;
  v112 = v18;
  sub_223182B14(&v128);
  if (**(int **)(v128 + 56) > 3)
    goto LABEL_105;
  v21 = *(unsigned __int8 *)(v128 + 72);
  v22 = sub_22455F97C(&v128);
  if (!v21 && !v22)
    goto LABEL_105;
  v111 = v22;
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)&v128;
  *(std::chrono::steady_clock::time_point *)&__lk.__owns_ = std::chrono::steady_clock::now();
  rep = std::chrono::system_clock::now().__d_.__rep_;
  v122 = 3;
  v123 = "unknown file";
  v124 = 50;
  v126 = 0;
  v127 = 0;
  v125 = "unknown function";
  if (*(char *)(v128 + 39) < 0)
  {
    v24 = *(const char **)(v128 + 16);
    v23 = *(_QWORD *)(v128 + 24);
  }
  else
  {
    v23 = *(unsigned __int8 *)(v128 + 39);
    v24 = (const char *)(__lk.__m_->__m_.__sig + 16);
  }
  v106 = __lk.__m_->__m_.__sig + 16;
  v107 = v128;
  v25 = *(float *)(a1 + 56);
  v108 = a7;
  v109 = *(unsigned __int8 *)(a1 + 312);
  v26 = atomic_load((unsigned __int8 *)&qword_255788F58);
  if ((v26 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)v138);
    sub_223199C58("com.apple.cv3d", (unint64_t)v138, &xmmword_255788F40);
    if ((_BYTE)v139 && (v138[23] & 0x80000000) != 0)
      operator delete(*(void **)v138);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
  if (byte_255788F57 >= 0)
    v27 = (const char *)&xmmword_255788F40;
  else
    v27 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v28 = byte_255788F57;
  else
    v28 = *((_QWORD *)&xmmword_255788F40 + 1);
  v29 = os_log_create(v27, v24);
  *(_QWORD *)v138 = v29;

  v110 = v21;
  v30 = &v138[8];
  if (v28 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v28 >= 0x17)
  {
    v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17)
      v31 = v28 | 7;
    v32 = v31 + 1;
    v30 = operator new(v31 + 1);
    *(_QWORD *)&v138[16] = v28;
    *(_QWORD *)&v139 = v32 | 0x8000000000000000;
    *(_QWORD *)&v138[8] = v30;
    goto LABEL_21;
  }
  BYTE7(v139) = v28;
  if (v28)
LABEL_21:
    memmove(v30, v27, v28);
  v30[v28] = 0;
  BYTE8(v139) = 1;
  v33 = v140;
  if (v23 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v23 >= 0x17)
  {
    v34 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17)
      v34 = v23 | 7;
    v35 = v34 + 1;
    v33 = (void **)operator new(v34 + 1);
    v140[1] = (void *)v23;
    v141 = v35 | 0x8000000000000000;
    v140[0] = v33;
  }
  else
  {
    HIBYTE(v141) = v23;
    if (!v23)
      goto LABEL_30;
  }
  memmove(v33, v24, v23);
LABEL_30:
  *((_BYTE *)v33 + v23) = 0;
  v142 = 1;
  v36 = objc_retainAutorelease(*(id *)v138);
  if (v142 && SHIBYTE(v141) < 0)
    operator delete(v140[0]);
  if (BYTE8(v139) && SBYTE7(v139) < 0)
    operator delete(*(void **)&v138[8]);

  v37 = v25 * 0.00097656;
  v38 = sub_22455F7B4(3u);
  v39 = v36;
  v40 = v39;
  if (v111 && *(_QWORD *)(v111 + 8))
  {
    v41 = _os_log_pack_size();
    v105 = v40;
    v42 = (std::__shared_weak_count_vtbl *)operator new(v41, (std::align_val_t)8uLL);
    v43 = (std::__shared_weak_count *)operator new();
    v43->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v43->__shared_owners_;
    v43->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v43->__shared_weak_owners_ = 0;
    v43[1].__vftable = v42;
    v132[0] = v42;
    v132[1] = v42;
    v134 = 0;
    v135 = 0;
    v133 = v43;
    v45 = 4 * (v109 == 0);
    v137 = v45;
    if (!v109)
    {
      LODWORD(v136) = 544108398;
      v45 = v137;
    }
    *(_BYTE *)((unint64_t)&v136 | (4 * (v109 == 0))) = 0;
    v129 = off_24EC20918;
    *(_QWORD *)&v130 = v136;
    HIBYTE(v131) = v45;
    v46 = (std::__shared_weak_count *)operator new(0x38uLL);
    v46->__shared_owners_ = 0;
    v47 = (unint64_t *)&v46->__shared_owners_;
    v46->__shared_weak_owners_ = 0;
    v46->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC208C8;
    v46[1].__vftable = (std::__shared_weak_count_vtbl *)off_24EC20918;
    *(_OWORD *)&v46[1].__shared_owners_ = v130;
    v46[2].__vftable = v131;
    v130 = 0uLL;
    v131 = 0;
    v134 = v46 + 1;
    v135 = v46;
    nullsub_30(&v129);
    *(_QWORD *)v138 = v42;
    *(_QWORD *)&v138[8] = v42;
    *(_QWORD *)&v138[16] = v43;
    do
      v48 = __ldxr(p_shared_owners);
    while (__stxr(v48 + 1, p_shared_owners));
    *(_QWORD *)&v139 = v46 + 1;
    *((_QWORD *)&v139 + 1) = v46;
    do
      v49 = __ldxr(v47);
    while (__stxr(v49 + 1, v47));
    v140[0] = &v46[1];
    do
      v50 = __ldaxr(v47);
    while (__stlxr(v50 - 1, v47));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
    v51 = v133;
    v21 = v110;
    if (v133)
    {
      v52 = (unint64_t *)&v133->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    v54 = *(_QWORD *)v138;
    if (*((char *)v140[0] + 31) >= 0)
      v55 = (char *)v140[0] + 8;
    else
      v55 = (char *)*((_QWORD *)v140[0] + 1);
    v56 = _os_log_pack_fill();
    *(_DWORD *)v56 = 134218242;
    *(double *)(v56 + 4) = v37;
    *(_WORD *)(v56 + 12) = 2080;
    *(_QWORD *)(v56 + 14) = v55;
    v57 = operator new();
    v58 = *(unsigned __int8 *)(v107 + 39);
    v59 = v106;
    if ((v58 & 0x80u) != 0)
    {
      v59 = *(_QWORD *)(v107 + 16);
      v58 = *(_QWORD *)(v107 + 24);
    }
    *(_QWORD *)v57 = v54;
    *(_OWORD *)(v57 + 8) = *(_OWORD *)&v138[8];
    *(_QWORD *)&v138[8] = 0;
    *(_QWORD *)&v138[16] = 0;
    *(_OWORD *)(v57 + 24) = v139;
    v139 = 0uLL;
    *(_QWORD *)(v57 + 40) = v59;
    *(_QWORD *)(v57 + 48) = v58;
    *(_BYTE *)(v57 + 56) = v38;
    v129 = 0;
    v132[0] = v57;
    (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v111 + 8) + 40))(*(_QWORD *)(v111 + 8), v132);
    v60 = v132[0];
    v132[0] = 0;
    if (v60)
    {
      v61 = *(std::__shared_weak_count **)(v60 + 32);
      if (v61)
      {
        v62 = (unint64_t *)&v61->__shared_owners_;
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      v64 = *(std::__shared_weak_count **)(v60 + 16);
      if (v64)
      {
        v65 = (unint64_t *)&v64->__shared_owners_;
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      MEMORY[0x227684CE8](v60, 0x10F0C40B62ED6C6);
      v67 = v129;
      v129 = 0;
      if (v67)
      {
        v68 = (std::__shared_weak_count *)v67[4];
        if (v68)
        {
          v69 = (unint64_t *)&v68->__shared_owners_;
          do
            v70 = __ldaxr(v69);
          while (__stlxr(v70 - 1, v69));
          if (!v70)
          {
            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
            std::__shared_weak_count::__release_weak(v68);
          }
        }
        v71 = (std::__shared_weak_count *)v67[2];
        if (v71)
        {
          v72 = (unint64_t *)&v71->__shared_owners_;
          do
            v73 = __ldaxr(v72);
          while (__stlxr(v73 - 1, v72));
          if (!v73)
          {
            ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
            std::__shared_weak_count::__release_weak(v71);
          }
        }
        MEMORY[0x227684CE8](v67, 0x10F0C40B62ED6C6);
      }
    }
    v74 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
    if (*((_QWORD *)&v139 + 1))
    {
      v75 = (unint64_t *)(*((_QWORD *)&v139 + 1) + 8);
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
    }
    v77 = *(std::__shared_weak_count **)&v138[16];
    if (*(_QWORD *)&v138[16])
    {
      v78 = (unint64_t *)(*(_QWORD *)&v138[16] + 8);
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
    v40 = v105;
  }
  else
  {
    os_log_type_enabled(v39, v38);
    v80 = "";
    if (!v109)
      v80 = "non ";
    *(_DWORD *)v138 = 134218242;
    *(double *)&v138[4] = v37;
    *(_WORD *)&v138[12] = 2080;
    *(_QWORD *)&v138[14] = v80;
    v81 = (void *)_os_log_send_and_compose_impl();
    if (v81)
      free(v81);
  }

  a7 = v108;
  if (v21)
  {
    if (*(_BYTE *)(a1 + 312))
      v82 = "";
    else
      v82 = "non ";
    sub_22322C138((uint64_t)&__lk, "Allocating %.1f MB for keyframe memory with %sdeterministic processing", (float)(*(float *)(a1 + 56) * 0.00097656), v82);
    sub_223182C08((uint64_t)&__lk);
  }
  sub_223182C08((uint64_t)&__lk);
  v83 = v127;
  v18 = v112;
  if (!v127)
    goto LABEL_105;
  v84 = (unint64_t *)&v127->__shared_owners_;
  do
    v85 = __ldaxr(v84);
  while (__stlxr(v85 - 1, v84));
  if (v85)
  {
LABEL_105:
    v86 = *(float *)(a1 + 56);
    if (v86 > 0.0)
      goto LABEL_107;
    goto LABEL_106;
  }
  ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
  std::__shared_weak_count::__release_weak(v83);
  v86 = *(float *)(a1 + 56);
  if (v86 > 0.0)
    goto LABEL_107;
LABEL_106:
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/include/Reconstruction/Keyframing/Pool/BaseKeyframePool.h", 117, (uint64_t)"max_memory_size_kb > 0.f", 24, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
LABEL_107:
  *(float *)(a1 + 364) = v86;
  v87 = operator new();
  sub_223197E34(v87, a3, a4);
  *(_QWORD *)v138 = 0;
  v88 = *v18;
  *v18 = v87;
  if (v88)
  {
    sub_223198070((uint64_t)v18, v88);
    v89 = *(_QWORD *)v138;
    *(_QWORD *)v138 = 0;
    if (v89)
      sub_223198070((uint64_t)v138, v89);
  }
  v90 = (_QWORD *)operator new();
  *v90 = 0x3F0000003F000000;
  v91 = *(_QWORD *)(a1 + 376);
  *(_QWORD *)(a1 + 376) = v90;
  if (v91)
    MEMORY[0x227684CE8](v91, 0x1000C4000313F17);
  sub_223182E1C(a1, a5, a6, a7, *(float *)(a1 + 16), *(float *)(a1 + 20));
  v92 = (std::__thread_struct *)operator new();
  std::__thread_struct::__thread_struct(v92);
  v93 = (_QWORD *)operator new();
  *v93 = v92;
  v93[1] = a1;
  v94 = pthread_create((pthread_t *)v138, 0, (void *(__cdecl *)(void *))sub_2231A914C, v93);
  if (v94)
  {
    std::__throw_system_error(v94, "thread constructor failed");
    __break(1u);
    return;
  }
  if (*v117)
    std::terminate();
  *v117 = *(_QWORD *)v138;
  *(_QWORD *)v138 = 0;
  std::thread::~thread((std::thread *)v138);
  __lk.__m_ = v19;
  __lk.__owns_ = 1;
  std::mutex::lock(v19);
  v95 = atomic_load((unsigned __int8 *)(a1 + 625));
  if ((v95 & 1) == 0)
  {
    do
    {
      std::condition_variable::wait(v20, &__lk);
      v96 = atomic_load((unsigned __int8 *)(a1 + 625));
    }
    while ((v96 & 1) == 0);
  }
  v97 = a9[3];
  if (!v97)
    goto LABEL_119;
  if ((_QWORD *)v97 != a9)
  {
    v97 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v97 + 16))(v97);
LABEL_119:
    *(_QWORD *)&v139 = v97;
    goto LABEL_121;
  }
  *(_QWORD *)&v139 = v138;
  (*(void (**)(_QWORD *, _BYTE *))(*a9 + 24))(a9, v138);
LABEL_121:
  sub_2231A924C(v138, v119);
  v99 = (_QWORD *)v139;
  if ((_BYTE *)v139 == v138)
  {
    v100 = 4;
    v99 = v138;
  }
  else
  {
    if (!(_QWORD)v139)
      goto LABEL_126;
    v100 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v99 + 8 * v100))(v99, v98);
LABEL_126:
  v101 = a10[3];
  if (!v101)
  {
LABEL_129:
    *(_QWORD *)&v139 = v101;
    goto LABEL_131;
  }
  if ((_QWORD *)v101 != a10)
  {
    v101 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v101 + 16))(v101);
    goto LABEL_129;
  }
  *(_QWORD *)&v139 = v138;
  (*(void (**)(_QWORD *, _BYTE *))(*a10 + 24))(a10, v138);
LABEL_131:
  sub_2231A93EC(v138, v118);
  v103 = (_QWORD *)v139;
  if ((_BYTE *)v139 == v138)
  {
    v104 = 4;
    v103 = v138;
  }
  else
  {
    if (!(_QWORD)v139)
      goto LABEL_136;
    v104 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v103 + 8 * v104))(v103, v102);
LABEL_136:
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
}

void sub_22318283C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::condition_variable *a22,uint64_t *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::thread *a28,_QWORD *a29,_QWORD *a30,std::mutex *a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  _QWORD *v41;
  std::mutex *v42;
  std::condition_variable *v43;
  uint64_t v44;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  if (*(_BYTE *)(v44 - 168))
  {
    if (*(char *)(v44 - 169) < 0)
      operator delete(*(void **)(v44 - 192));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a31);
  v46 = v41 + 86;
  sub_223183E70((uint64_t)(v41 + 99));
  sub_223183F28((uint64_t)(v41 + 87));
  if ((_QWORD *)v41[86] == a29)
  {
    v47 = 4;
  }
  else
  {
    if (!*v46)
      goto LABEL_9;
    v47 = 5;
    a29 = (_QWORD *)*v46;
  }
  (*(void (**)(void))(*a29 + 8 * v47))();
LABEL_9:
  v48 = (_QWORD *)v41[82];
  if (v48 == a30)
  {
    v49 = 4;
  }
  else
  {
    if (!v48)
      goto LABEL_14;
    v49 = 5;
    a30 = (_QWORD *)v41[82];
  }
  (*(void (**)(void))(*a30 + 8 * v49))();
LABEL_14:
  std::condition_variable::~condition_variable(v43);
  std::condition_variable::~condition_variable(a22);
  std::thread::~thread(a28);
  std::mutex::~mutex(v42);
  v50 = v41[47];
  v41[47] = 0;
  if (v50)
  {
    MEMORY[0x227684CE8](v50, 0x1000C4000313F17);
    v51 = *a23;
    *a23 = 0;
    if (!v51)
    {
LABEL_16:
      sub_223183FF0(a19);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v51 = *a23;
    *a23 = 0;
    if (!v51)
      goto LABEL_16;
  }
  sub_223198070((uint64_t)a23, v51);
  sub_223183FF0(a19);
  _Unwind_Resume(a1);
}

void sub_223182B14(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CA688);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CA688))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon.kf");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CA680);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CA688);
  }
  *a1 = qword_2540CA680;
}

void sub_223182BB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CA688);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CA688);
  _Unwind_Resume(a1);
}

void sub_223182C08(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  _QWORD *v4;
  __int128 v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  _QWORD *v23;
  __int128 v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;

  v1 = *(uint64_t **)a1;
  if (*(_QWORD *)a1)
  {
    v3 = *(_QWORD *)(a1 + 56);
    if (v3)
    {
      v4 = (_QWORD *)(*v1 + 16);
      if (*(char *)(*v1 + 39) < 0)
        v4 = (_QWORD *)*v4;
      v5 = *(_OWORD *)(a1 + 8);
      v6 = *(_DWORD *)(a1 + 24);
      v7 = *(_QWORD *)(a1 + 32);
      v8 = *(_DWORD *)(a1 + 40);
      v9 = *(_QWORD *)(a1 + 48);
      v10 = *(std::__shared_weak_count **)(a1 + 64);
      v22 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      v23 = v4;
      v24 = v5;
      v25 = v6;
      v26 = v7;
      v27 = v8;
      v28 = v9;
      v29 = v3;
      v30 = v10;
      if (v10)
      {
        v13 = (unint64_t *)&v10->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      if (v6 >= **(_DWORD **)(*v1 + 56))
      {
        sub_22323003C(*v1, (uint64_t)&v23);
        v10 = v30;
      }
      if (v10)
      {
        v15 = (unint64_t *)&v10->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      if (v22)
      {
        v17 = (unint64_t *)&v22->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      v19 = *(std::__shared_weak_count **)(a1 + 64);
      *(_QWORD *)(a1 + 56) = 0;
      *(_QWORD *)(a1 + 64) = 0;
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
    }
  }
}

void sub_223182D90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_223197DCC((uint64_t)va1);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223182DAC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  sub_223182C08(a1);
  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_223182E1C(uint64_t a1, uint64_t a2, char a3, int a4, float a5, float a6)
{
  int v6;
  float v11;
  float v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  size_t v17;
  const char *v18;
  unsigned __int8 v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  const char *v25;
  size_t v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  const char *v29;
  size_t v30;
  _BYTE *v31;
  int v32;
  const char *v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  void *p_p;
  uint64_t v39;
  uint64_t v40;
  id v41;
  os_log_type_t v42;
  NSObject *v43;
  NSObject *v44;
  size_t v45;
  std::__shared_weak_count_vtbl *v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  void *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unsigned __int8 v81;
  const char *v82;
  size_t v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  os_log_type_t v91;
  NSObject *v92;
  NSObject *v93;
  size_t v94;
  std::__shared_weak_count_vtbl *v95;
  std::__shared_weak_count *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  void *v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v134;
  int v135;
  const char *v136;
  int v137;
  const char *v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _BYTE v144[24];
  __int128 v145;
  void *__p;
  size_t v147;
  unint64_t v148;
  char v149;
  uint64_t v150;

  v6 = a4;
  v150 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    sub_223182B14(&v141);
    v11 = (float)a2 * a5;
    v12 = (float)HIDWORD(a2) * a5;
    if (**(int **)(v141 + 56) > 3
      || ((v13 = *(unsigned __int8 *)(v141 + 72), v14 = sub_22455F97C(&v141), v15 = v14, !v13)
        ? (v16 = v14 == 0)
        : (v16 = 0),
          v16))
    {
LABEL_99:
      *(_QWORD *)(a1 + 424) = v11 | ((unint64_t)v12 << 32);
      *(_BYTE *)(a1 + 432) = 1;
      *(float *)(a1 + 436) = a5;
      *(float *)(a1 + 440) = a6;
      *(_DWORD *)(a1 + 444) = v6;
      return;
    }
    v132 = &v141;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v134 = std::chrono::system_clock::now().__d_.__rep_;
    v135 = 3;
    v136 = "unknown file";
    v137 = 91;
    v139 = 0;
    v140 = 0;
    v138 = "unknown function";
    v130 = v141;
    if (*(char *)(v141 + 39) < 0)
    {
      v18 = *(const char **)(v141 + 16);
      v17 = *(_QWORD *)(v141 + 24);
      v129 = v141 + 16;
      v28 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v28 & 1) != 0)
        goto LABEL_19;
    }
    else
    {
      v17 = *(unsigned __int8 *)(v141 + 39);
      v18 = (const char *)(v141 + 16);
      v129 = v141 + 16;
      v19 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v19 & 1) != 0)
        goto LABEL_19;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)v144);
      sub_223199C58("com.apple.cv3d", (unint64_t)v144, &xmmword_255788F40);
      if ((_BYTE)v145 && (v144[23] & 0x80000000) != 0)
        operator delete(*(void **)v144);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
LABEL_19:
    if (byte_255788F57 >= 0)
      v29 = (const char *)&xmmword_255788F40;
    else
      v29 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v30 = byte_255788F57;
    else
      v30 = *((_QWORD *)&xmmword_255788F40 + 1);
    *(_QWORD *)v144 = os_log_create(v29, v18);
    v31 = &v144[8];
    if (v30 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v30 >= 0x17)
    {
      v32 = v6;
      v33 = v18;
      v34 = v15;
      v35 = v13;
      v36 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v30 | 7) != 0x17)
        v36 = v30 | 7;
      v37 = v36 + 1;
      v31 = operator new(v36 + 1);
      *(_QWORD *)&v144[16] = v30;
      *(_QWORD *)&v145 = v37 | 0x8000000000000000;
      *(_QWORD *)&v144[8] = v31;
      v13 = v35;
      v15 = v34;
      v18 = v33;
      v6 = v32;
    }
    else
    {
      BYTE7(v145) = v30;
      if (!v30)
      {
LABEL_33:
        v31[v30] = 0;
        BYTE8(v145) = 1;
        p_p = &__p;
        if (v17 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v17 >= 0x17)
        {
          v39 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v17 | 7) != 0x17)
            v39 = v17 | 7;
          v40 = v39 + 1;
          p_p = operator new(v39 + 1);
          v147 = v17;
          v148 = v40 | 0x8000000000000000;
          __p = p_p;
        }
        else
        {
          HIBYTE(v148) = v17;
          if (!v17)
          {
LABEL_41:
            *((_BYTE *)p_p + v17) = 0;
            v149 = 1;
            v41 = objc_retainAutorelease(*(id *)v144);
            if (v149 && SHIBYTE(v148) < 0)
              operator delete(__p);
            if (BYTE8(v145) && SBYTE7(v145) < 0)
              operator delete(*(void **)&v144[8]);

            v42 = sub_22455F7B4(3u);
            v43 = v41;
            v44 = v43;
            if (v15 && *(_QWORD *)(v15 + 8))
            {
              v45 = _os_log_pack_size();
              v46 = (std::__shared_weak_count_vtbl *)operator new(v45, (std::align_val_t)8uLL);
              v47 = (std::__shared_weak_count *)operator new();
              v48 = v47;
              v47->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v47->__shared_owners_;
              v47->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v47->__shared_weak_owners_ = 0;
              v47[1].__vftable = v46;
              *(_QWORD *)v144 = v46;
              *(_QWORD *)&v144[8] = v46;
              *(_QWORD *)&v144[16] = v47;
              do
                v50 = __ldxr(p_shared_owners);
              while (__stxr(v50 + 1, p_shared_owners));
              v145 = 0uLL;
              __p = 0;
              do
                v51 = __ldaxr(p_shared_owners);
              while (__stlxr(v51 - 1, p_shared_owners));
              if (!v51)
              {
                ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                std::__shared_weak_count::__release_weak(v48);
              }
              v52 = *(_QWORD *)v144;
              v53 = _os_log_pack_fill();
              *(_DWORD *)v53 = 134218240;
              *(double *)(v53 + 4) = v11;
              *(_WORD *)(v53 + 12) = 2048;
              *(double *)(v53 + 14) = v12;
              v54 = operator new();
              v55 = *(unsigned __int8 *)(v130 + 39);
              v56 = v129;
              if ((v55 & 0x80u) != 0)
              {
                v56 = *(_QWORD *)(v130 + 16);
                v55 = *(_QWORD *)(v130 + 24);
              }
              *(_QWORD *)v54 = v52;
              *(_OWORD *)(v54 + 8) = *(_OWORD *)&v144[8];
              *(_QWORD *)&v144[8] = 0;
              *(_QWORD *)&v144[16] = 0;
              *(_OWORD *)(v54 + 24) = v145;
              v145 = 0uLL;
              *(_QWORD *)(v54 + 40) = v56;
              *(_QWORD *)(v54 + 48) = v55;
              *(_BYTE *)(v54 + 56) = v42;
              v142 = 0;
              v143 = v54;
              (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v15 + 8) + 40))(*(_QWORD *)(v15 + 8), &v143);
              v57 = v143;
              v143 = 0;
              if (v57)
              {
                v58 = *(std::__shared_weak_count **)(v57 + 32);
                if (v58)
                {
                  v59 = (unint64_t *)&v58->__shared_owners_;
                  do
                    v60 = __ldaxr(v59);
                  while (__stlxr(v60 - 1, v59));
                  if (!v60)
                  {
                    ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                    std::__shared_weak_count::__release_weak(v58);
                  }
                }
                v61 = *(std::__shared_weak_count **)(v57 + 16);
                if (v61)
                {
                  v62 = (unint64_t *)&v61->__shared_owners_;
                  do
                    v63 = __ldaxr(v62);
                  while (__stlxr(v63 - 1, v62));
                  if (!v63)
                  {
                    ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                    std::__shared_weak_count::__release_weak(v61);
                  }
                }
                MEMORY[0x227684CE8](v57, 0x10F0C40B62ED6C6);
                v64 = v142;
                v142 = 0;
                if (v64)
                {
                  v65 = *(std::__shared_weak_count **)(v64 + 32);
                  if (v65)
                  {
                    v66 = (unint64_t *)&v65->__shared_owners_;
                    do
                      v67 = __ldaxr(v66);
                    while (__stlxr(v67 - 1, v66));
                    if (!v67)
                    {
                      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                      std::__shared_weak_count::__release_weak(v65);
                    }
                  }
                  v68 = *(std::__shared_weak_count **)(v64 + 16);
                  if (v68)
                  {
                    v69 = (unint64_t *)&v68->__shared_owners_;
                    do
                      v70 = __ldaxr(v69);
                    while (__stlxr(v70 - 1, v69));
                    if (!v70)
                    {
                      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                      std::__shared_weak_count::__release_weak(v68);
                    }
                  }
                  MEMORY[0x227684CE8](v64, 0x10F0C40B62ED6C6);
                }
              }
              v71 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
              if (*((_QWORD *)&v145 + 1))
              {
                v72 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
                do
                  v73 = __ldaxr(v72);
                while (__stlxr(v73 - 1, v72));
                if (!v73)
                {
                  ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                  std::__shared_weak_count::__release_weak(v71);
                }
              }
              v74 = *(std::__shared_weak_count **)&v144[16];
              if (*(_QWORD *)&v144[16])
              {
                v75 = (unint64_t *)(*(_QWORD *)&v144[16] + 8);
                do
                  v76 = __ldaxr(v75);
                while (__stlxr(v76 - 1, v75));
                if (!v76)
                {
                  ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                  std::__shared_weak_count::__release_weak(v74);
                }
              }
            }
            else
            {
              os_log_type_enabled(v43, v42);
              *(_DWORD *)v144 = 134218240;
              *(double *)&v144[4] = v11;
              *(_WORD *)&v144[12] = 2048;
              *(double *)&v144[14] = v12;
              v77 = (void *)_os_log_send_and_compose_impl();
              if (v77)
                free(v77);
            }

            if (v13)
            {
              sub_22322C138((uint64_t)&v132, "Setting keyframe surface converter target dimension: %f x %f", v11, v12);
              sub_223182C08((uint64_t)&v132);
            }
            sub_223182C08((uint64_t)&v132);
            v78 = v140;
            if (v140)
            {
              v79 = (unint64_t *)&v140->__shared_owners_;
              do
                v80 = __ldaxr(v79);
              while (__stlxr(v80 - 1, v79));
              if (!v80)
              {
                ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                std::__shared_weak_count::__release_weak(v78);
              }
            }
            goto LABEL_99;
          }
        }
        memmove(p_p, v18, v17);
        goto LABEL_41;
      }
    }
    memmove(v31, v29, v30);
    goto LABEL_33;
  }
  *(_BYTE *)(a1 + 424) = 0;
  *(_BYTE *)(a1 + 432) = 0;
  *(float *)(a1 + 436) = a5;
  *(float *)(a1 + 440) = a6;
  *(_DWORD *)(a1 + 444) = a4;
  sub_223182B14(&v141);
  if (**(int **)(v141 + 56) <= 3)
  {
    v20 = *(unsigned __int8 *)(v141 + 72);
    v21 = sub_22455F97C(&v141);
    v22 = v21;
    if (v20 || v21 != 0)
    {
      v132 = &v141;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v134 = std::chrono::system_clock::now().__d_.__rep_;
      v135 = 3;
      v136 = "unknown file";
      v137 = 96;
      v139 = 0;
      v140 = 0;
      v138 = "unknown function";
      v24 = v141;
      v25 = (const char *)(v141 + 16);
      v131 = v141 + 16;
      if (*(char *)(v141 + 39) < 0)
      {
        v25 = *(const char **)(v141 + 16);
        v26 = *(_QWORD *)(v141 + 24);
        v81 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v81 & 1) != 0)
          goto LABEL_102;
      }
      else
      {
        v26 = *(unsigned __int8 *)(v141 + 39);
        v27 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v27 & 1) != 0)
          goto LABEL_102;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)v144);
        sub_223199C58("com.apple.cv3d", (unint64_t)v144, &xmmword_255788F40);
        if ((_BYTE)v145 && (v144[23] & 0x80000000) != 0)
          operator delete(*(void **)v144);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_102:
      if (byte_255788F57 >= 0)
        v82 = (const char *)&xmmword_255788F40;
      else
        v82 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v83 = byte_255788F57;
      else
        v83 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)v144 = os_log_create(v82, v25);
      v84 = &v144[8];
      if (v83 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v83 >= 0x17)
      {
        v85 = (v83 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v83 | 7) != 0x17)
          v85 = v83 | 7;
        v86 = v85 + 1;
        v84 = operator new(v85 + 1);
        *(_QWORD *)&v144[16] = v83;
        *(_QWORD *)&v145 = v86 | 0x8000000000000000;
        *(_QWORD *)&v144[8] = v84;
      }
      else
      {
        BYTE7(v145) = v83;
        if (!v83)
        {
LABEL_116:
          v84[v83] = 0;
          BYTE8(v145) = 1;
          v87 = &__p;
          if (v26 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v26 >= 0x17)
          {
            v88 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v26 | 7) != 0x17)
              v88 = v26 | 7;
            v89 = v88 + 1;
            v87 = operator new(v88 + 1);
            v147 = v26;
            v148 = v89 | 0x8000000000000000;
            __p = v87;
          }
          else
          {
            HIBYTE(v148) = v26;
            if (!v26)
            {
LABEL_124:
              *((_BYTE *)v87 + v26) = 0;
              v149 = 1;
              v90 = objc_retainAutorelease(*(id *)v144);
              if (v149 && SHIBYTE(v148) < 0)
                operator delete(__p);
              if (BYTE8(v145) && SBYTE7(v145) < 0)
                operator delete(*(void **)&v144[8]);

              v91 = sub_22455F7B4(3u);
              v92 = v90;
              v93 = v92;
              if (v22 && *(_QWORD *)(v22 + 8))
              {
                v94 = _os_log_pack_size();
                v95 = (std::__shared_weak_count_vtbl *)operator new(v94, (std::align_val_t)8uLL);
                v96 = (std::__shared_weak_count *)operator new();
                v97 = v96;
                v96->__shared_owners_ = 0;
                v98 = (unint64_t *)&v96->__shared_owners_;
                v96->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v96->__shared_weak_owners_ = 0;
                v96[1].__vftable = v95;
                *(_QWORD *)v144 = v95;
                *(_QWORD *)&v144[8] = v95;
                *(_QWORD *)&v144[16] = v96;
                do
                  v99 = __ldxr(v98);
                while (__stxr(v99 + 1, v98));
                v145 = 0uLL;
                __p = 0;
                do
                  v100 = __ldaxr(v98);
                while (__stlxr(v100 - 1, v98));
                if (!v100)
                {
                  ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                  std::__shared_weak_count::__release_weak(v97);
                }
                v101 = *(_QWORD *)v144;
                *(_WORD *)_os_log_pack_fill() = 0;
                v102 = operator new();
                v103 = *(unsigned __int8 *)(v24 + 39);
                v104 = v131;
                if ((v103 & 0x80u) != 0)
                {
                  v104 = *(_QWORD *)(v24 + 16);
                  v103 = *(_QWORD *)(v24 + 24);
                }
                *(_QWORD *)v102 = v101;
                *(_OWORD *)(v102 + 8) = *(_OWORD *)&v144[8];
                *(_QWORD *)&v144[8] = 0;
                *(_QWORD *)&v144[16] = 0;
                *(_OWORD *)(v102 + 24) = v145;
                v145 = 0uLL;
                *(_QWORD *)(v102 + 40) = v104;
                *(_QWORD *)(v102 + 48) = v103;
                *(_BYTE *)(v102 + 56) = v91;
                v142 = 0;
                v143 = v102;
                (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v22 + 8) + 40))(*(_QWORD *)(v22 + 8), &v143);
                v105 = v143;
                v143 = 0;
                if (v105)
                {
                  v106 = *(std::__shared_weak_count **)(v105 + 32);
                  if (v106)
                  {
                    v107 = (unint64_t *)&v106->__shared_owners_;
                    do
                      v108 = __ldaxr(v107);
                    while (__stlxr(v108 - 1, v107));
                    if (!v108)
                    {
                      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                      std::__shared_weak_count::__release_weak(v106);
                    }
                  }
                  v109 = *(std::__shared_weak_count **)(v105 + 16);
                  if (v109)
                  {
                    v110 = (unint64_t *)&v109->__shared_owners_;
                    do
                      v111 = __ldaxr(v110);
                    while (__stlxr(v111 - 1, v110));
                    if (!v111)
                    {
                      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
                      std::__shared_weak_count::__release_weak(v109);
                    }
                  }
                  MEMORY[0x227684CE8](v105, 0x10F0C40B62ED6C6);
                  v112 = v142;
                  v142 = 0;
                  if (v112)
                  {
                    v113 = *(std::__shared_weak_count **)(v112 + 32);
                    if (v113)
                    {
                      v114 = (unint64_t *)&v113->__shared_owners_;
                      do
                        v115 = __ldaxr(v114);
                      while (__stlxr(v115 - 1, v114));
                      if (!v115)
                      {
                        ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                        std::__shared_weak_count::__release_weak(v113);
                      }
                    }
                    v116 = *(std::__shared_weak_count **)(v112 + 16);
                    if (v116)
                    {
                      v117 = (unint64_t *)&v116->__shared_owners_;
                      do
                        v118 = __ldaxr(v117);
                      while (__stlxr(v118 - 1, v117));
                      if (!v118)
                      {
                        ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                        std::__shared_weak_count::__release_weak(v116);
                      }
                    }
                    MEMORY[0x227684CE8](v112, 0x10F0C40B62ED6C6);
                  }
                }
                v119 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
                if (*((_QWORD *)&v145 + 1))
                {
                  v120 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
                  do
                    v121 = __ldaxr(v120);
                  while (__stlxr(v121 - 1, v120));
                  if (!v121)
                  {
                    ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                    std::__shared_weak_count::__release_weak(v119);
                  }
                }
                v122 = *(std::__shared_weak_count **)&v144[16];
                if (*(_QWORD *)&v144[16])
                {
                  v123 = (unint64_t *)(*(_QWORD *)&v144[16] + 8);
                  do
                    v124 = __ldaxr(v123);
                  while (__stlxr(v124 - 1, v123));
                  if (!v124)
                  {
                    ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                    std::__shared_weak_count::__release_weak(v122);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v92, v91);
                *(_WORD *)v144 = 0;
                v125 = (void *)_os_log_send_and_compose_impl();
                if (v125)
                  free(v125);
              }

              if (v20)
              {
                sub_22322C138((uint64_t)&v132, "Keyframe surface converter target dimension is not set");
                sub_223182C08((uint64_t)&v132);
              }
              sub_223182C08((uint64_t)&v132);
              v126 = v140;
              if (v140)
              {
                v127 = (unint64_t *)&v140->__shared_owners_;
                do
                  v128 = __ldaxr(v127);
                while (__stlxr(v128 - 1, v127));
                if (!v128)
                {
                  ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
                  std::__shared_weak_count::__release_weak(v126);
                }
              }
              return;
            }
          }
          memmove(v87, v25, v26);
          goto LABEL_124;
        }
      }
      memmove(v84, v82, v83);
      goto LABEL_116;
    }
  }
}

void sub_223183CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  if (a31)
  {
    if (a30 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_223183D04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32)
{
  void *v32;

  sub_22319A054(&a24);
  sub_22319A054(&a23);
  sub_223199DE8((uint64_t)&a25);

  sub_223182DAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_223183E60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_223183E70(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(a1 + 24);
    if (v4 != v3)
    {
      do
      {
        v6 = *(std::__shared_weak_count **)(v4 - 8);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 32;
      }
      while (v4 != v3);
      v5 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v5);
  }
  v9 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v9;
    operator delete(v9);
  }
  return a1;
}

uint64_t sub_223183F28(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  void *v10;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 56);
    v5 = *(void **)(a1 + 48);
    if (v4 != v3)
    {
      do
      {
        v6 = *(std::__shared_weak_count **)(v4 - 8);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 32;
      }
      while (v4 != v3);
      v5 = *(void **)(a1 + 48);
    }
    *(_QWORD *)(a1 + 56) = v3;
    operator delete(v5);
  }
  v9 = *(void **)(a1 + 24);
  if (v9)
  {
    *(_QWORD *)(a1 + 32) = v9;
    operator delete(v9);
  }
  v10 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v10;
    operator delete(v10);
  }
  return a1;
}

uint64_t sub_223183FF0(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(_QWORD **)(a1 + 16);
  while (v2)
  {
    v5 = v2;
    v2 = (_QWORD *)*v2;
    v6 = (std::__shared_weak_count *)v5[5];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    operator delete(v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void sub_223184080(uint64_t a1, const void *a2, uint64_t a3, std::string *a4, uint64_t a5, char a6, int a7, char a8, _QWORD *a9, _QWORD *a10)
{
  sub_2231819F8(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_223184090(uint64_t a1)
{
  std::condition_variable *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  void *v18;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  _QWORD *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;

  atomic_store(1u, (unsigned __int8 *)(a1 + 568));
  v2 = (std::condition_variable *)(a1 + 520);
  std::condition_variable::notify_one((std::condition_variable *)(a1 + 520));
  if (*(_QWORD *)(a1 + 512))
    std::thread::join((std::thread *)(a1 + 512));
  v3 = *(void **)(a1 + 840);
  if (v3)
  {
    *(_QWORD *)(a1 + 848) = v3;
    operator delete(v3);
  }
  v4 = *(_QWORD *)(a1 + 816);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 824);
    v6 = *(void **)(a1 + 816);
    if (v5 != v4)
    {
      do
      {
        v7 = *(std::__shared_weak_count **)(v5 - 8);
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        v5 -= 32;
      }
      while (v5 != v4);
      v6 = *(void **)(a1 + 816);
    }
    *(_QWORD *)(a1 + 824) = v4;
    operator delete(v6);
  }
  v10 = *(void **)(a1 + 792);
  if (v10)
  {
    *(_QWORD *)(a1 + 800) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(a1 + 768);
  if (v11)
  {
    *(_QWORD *)(a1 + 776) = v11;
    operator delete(v11);
  }
  v12 = *(_QWORD *)(a1 + 744);
  if (v12)
  {
    v13 = *(_QWORD *)(a1 + 752);
    v14 = *(void **)(a1 + 744);
    if (v13 != v12)
    {
      do
      {
        v15 = *(std::__shared_weak_count **)(v13 - 8);
        if (v15)
        {
          v16 = (unint64_t *)&v15->__shared_owners_;
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        v13 -= 32;
      }
      while (v13 != v12);
      v14 = *(void **)(a1 + 744);
    }
    *(_QWORD *)(a1 + 752) = v12;
    operator delete(v14);
  }
  v18 = *(void **)(a1 + 720);
  if (v18)
  {
    *(_QWORD *)(a1 + 728) = v18;
    operator delete(v18);
  }
  v19 = *(void **)(a1 + 696);
  if (v19)
  {
    *(_QWORD *)(a1 + 704) = v19;
    operator delete(v19);
  }
  v20 = *(_QWORD **)(a1 + 688);
  if (v20 == (_QWORD *)(a1 + 664))
  {
    v21 = 4;
    v20 = (_QWORD *)(a1 + 664);
  }
  else
  {
    if (!v20)
      goto LABEL_40;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_40:
  v22 = *(_QWORD **)(a1 + 656);
  if (v22 == (_QWORD *)(a1 + 632))
  {
    v23 = 4;
    v22 = (_QWORD *)(a1 + 632);
  }
  else
  {
    if (!v22)
      goto LABEL_45;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_45:
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 576));
  std::condition_variable::~condition_variable(v2);
  std::thread::~thread((std::thread *)(a1 + 512));
  std::mutex::~mutex((std::mutex *)(a1 + 448));
  v24 = *(_QWORD *)(a1 + 376);
  *(_QWORD *)(a1 + 376) = 0;
  if (v24)
    MEMORY[0x227684CE8](v24, 0x1000C4000313F17);
  v25 = *(_QWORD *)(a1 + 368);
  *(_QWORD *)(a1 + 368) = 0;
  if (v25)
    sub_223198070(a1 + 368, v25);
  v26 = *(_QWORD **)(a1 + 336);
  while (v26)
  {
    v29 = v26;
    v26 = (_QWORD *)*v26;
    v30 = (std::__shared_weak_count *)v29[5];
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    operator delete(v29);
  }
  v27 = *(void **)(a1 + 320);
  *(_QWORD *)(a1 + 320) = 0;
  if (v27)
    operator delete(v27);
  return a1;
}

void sub_223184340(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  sub_223184348(*(_QWORD *)(a1 + 368), a2, a3);
}

void sub_223184348(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 *i;
  std::string::size_type size;
  std::string *v8;
  uint64_t v9;
  unint64_t v10;
  std::string::size_type v11;
  std::string *v12;
  uint64_t v13;
  std::string v14;
  void *__dst[2];
  char v16;
  char v17;
  void *v18;
  char v19;
  void *v20;
  char v21;
  char v22;
  char v23;
  void *__p[2];
  __int128 v25;
  uint64_t v26;
  char v27;
  void *v28[2];
  uint64_t v29;
  uint64_t v30;
  void *v31[2];
  uint64_t v32;
  char v33;
  char v34;
  std::string v35;
  _QWORD v36[4];
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  for (i = *(unsigned __int8 **)(a1 + 8); i; i = *(unsigned __int8 **)i)
  {
    if ((sub_22319835C(a2, i + 25) & 0x80) == 0)
    {
      if ((sub_22319835C(i + 25, a2) & 0x80) == 0)
        goto LABEL_47;
      i += 8;
    }
  }
  sub_22319B660(a1, a2, &v35);
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v25 = 0;
  size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v35;
  else
    v8 = (std::string *)v35.__r_.__value_.__r.__words[0];
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v35.__r_.__value_.__l.__size_;
  sub_2231816F0((std::string *)__p, v8, (std::string *)((char *)v8 + size));
  v9 = sub_2242B1880((uint64_t)__p, *(_QWORD *)(a1 + 48));
  v10 = v9;
  if (SBYTE7(v25) < 0)
  {
    operator delete(__p[0]);
    if (v10 != -1)
    {
LABEL_9:
      sub_2231A9984((uint64_t **)a1, a2, a2);
      __p[0] = a2;
      *((float *)sub_2231A9C40((uint64_t **)(a1 + 24), a2, (uint64_t)&unk_2245BA939, (_OWORD **)__p) + 11) = (float)v10 * 0.00097656;
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_10;
LABEL_46:
      if (v10 == -1)
        return;
      goto LABEL_47;
    }
  }
  else if (v9 != -1)
  {
    goto LABEL_9;
  }
  v36[0] = "Error registering file: ";
  v36[1] = 24;
  v11 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  v12 = &v35;
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    v11 = v35.__r_.__value_.__l.__size_;
    v12 = (std::string *)v35.__r_.__value_.__r.__words[0];
  }
  v36[2] = v12;
  v36[3] = v11;
  sub_2231A9820((uint64_t)v36, (uint64_t)&v37, 0, 0, &v14);
  sub_22456A884(__dst, (__int128 *)&v14);
  v23 = 1;
  sub_2231A958C(5u, (__int128 *)__dst, (uint64_t)__p);
  *(_OWORD *)a3 = *(_OWORD *)__p;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (!v34)
  {
    *(_BYTE *)(a3 + 120) = 0;
    goto LABEL_35;
  }
  *(_BYTE *)(a3 + 40) = 0;
  if (v27)
  {
    *(_OWORD *)(a3 + 16) = v25;
    *(_QWORD *)(a3 + 32) = v26;
    v26 = 0;
    v25 = 0uLL;
    *(_BYTE *)(a3 + 40) = 1;
  }
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 104) = 0;
  if (!v33)
  {
    *(_BYTE *)(a3 + 112) = 1;
    *(_BYTE *)(a3 + 120) = 0;
    if (!v27)
      goto LABEL_35;
    goto LABEL_33;
  }
  v13 = v30;
  *(_QWORD *)(a3 + 64) = v29;
  *(_OWORD *)(a3 + 48) = *(_OWORD *)v28;
  v28[0] = 0;
  v28[1] = 0;
  *(_QWORD *)(a3 + 72) = v13;
  *(_OWORD *)(a3 + 80) = *(_OWORD *)v31;
  *(_QWORD *)(a3 + 96) = v32;
  v31[1] = 0;
  v32 = 0;
  v29 = 0;
  v31[0] = 0;
  *(_BYTE *)(a3 + 104) = 1;
  *(_BYTE *)(a3 + 112) = 1;
  *(_BYTE *)(a3 + 120) = 0;
  if (SHIBYTE(v32) < 0)
  {
    operator delete(v31[0]);
    if ((SHIBYTE(v29) & 0x80000000) == 0)
    {
LABEL_26:
      if (!v27)
        goto LABEL_35;
      goto LABEL_33;
    }
  }
  else if ((SHIBYTE(v29) & 0x80000000) == 0)
  {
    goto LABEL_26;
  }
  operator delete(v28[0]);
  if (!v27)
    goto LABEL_35;
LABEL_33:
  if (SHIBYTE(v26) < 0)
    operator delete((void *)v25);
LABEL_35:
  if (v23)
  {
    if (v22)
    {
      if (v21 < 0)
        operator delete(v20);
      if (v19 < 0)
        operator delete(v18);
    }
    if (v17)
    {
      if (v16 < 0)
        operator delete(__dst[0]);
    }
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_46;
  }
  else if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_46;
  }
LABEL_10:
  operator delete(v35.__r_.__value_.__l.__data_);
  if (v10 == -1)
    return;
LABEL_47:
  *(_BYTE *)(a3 + 120) = 1;
}

void sub_2231846BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  sub_22319FD28((uint64_t)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v34 - 89) < 0)
    operator delete(*(void **)(v34 - 112));
  _Unwind_Resume(a1);
}

_QWORD *sub_223184724(uint64_t a1, unsigned __int8 **a2, unsigned __int8 **a3, unsigned int a4)
{
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  void *v14;
  void *v15;
  int v16;
  __n128 *v19;
  void **v20;
  size_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void **v26;
  void *v27;
  void *v28;
  int v29;
  __n128 *v32;
  void **v33;
  size_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  unsigned __int8 **v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  __int128 v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  float v64;
  unsigned __int8 *v65;
  unsigned __int8 *v66;
  char v67;
  unint64_t v68;
  _QWORD *v69;
  float v70;
  float *v71;
  unsigned int v72;
  unsigned int v73;
  BOOL v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  _QWORD *v78;
  BOOL v79;
  float *v80;
  char *v81;
  char *v82;
  _QWORD *v83;
  void *v85;
  int64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  float v93;
  char *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  std::string::size_type size;
  std::string *v99;
  std::string::size_type v100;
  std::string::size_type v101;
  int v102;
  __n128 *v105;
  std::string *v106;
  size_t v107;
  uint64_t v108;
  _BYTE *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  std::string::size_type v113;
  std::string *v114;
  std::string::size_type v115;
  std::string::size_type v116;
  int v117;
  __n128 *v120;
  std::string *v121;
  size_t v122;
  uint64_t v123;
  _BYTE *v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  std::string::size_type v128;
  std::string *v129;
  std::string::size_type v130;
  std::string::size_type v131;
  int v132;
  __n128 *v135;
  std::string *v136;
  size_t v137;
  float v138;
  char *v139;
  float v140;
  _QWORD *v142;
  float *v143;
  unsigned int v144;
  unsigned int v145;
  BOOL v146;
  unsigned int v147;
  unsigned int v148;
  unsigned int v149;
  uint64_t v150;
  _BYTE *v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  std::string::size_type v155;
  std::string *v156;
  std::string::size_type v157;
  std::string::size_type v158;
  int v159;
  __n128 *v162;
  std::string *v163;
  size_t v164;
  unsigned __int8 *v165;
  unsigned __int8 *v166;
  void *v167;
  std::string::size_type v168;
  _QWORD *v169;
  _QWORD *v171;
  std::string::size_type v173;
  uint64_t v174;
  unint64_t v175;
  int64_t v176;
  unint64_t v177;
  char *v178;
  char *v179;
  uint64_t v180;
  _QWORD *v181;
  float v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  _QWORD *v187;
  unsigned __int8 *v188;
  unsigned __int8 *v189;
  unsigned __int8 *v190;
  void *v191;
  std::string::size_type v192;
  _QWORD *v193;
  _QWORD *v195;
  std::string::size_type v197;
  uint64_t v198;
  unint64_t v199;
  int64_t v200;
  unint64_t v201;
  char *v202;
  char *v203;
  uint64_t v204;
  std::string::size_type v205;
  std::string::size_type v206;
  _QWORD *v207;
  float v208;
  uint64_t v209;
  uint64_t v210;
  _QWORD *v211;
  uint64_t v212;
  _QWORD *v213;
  unsigned __int8 *v214;
  char *v215;
  float v216;
  _QWORD *v218;
  float *v219;
  unsigned int v220;
  unsigned int v221;
  BOOL v222;
  unsigned int v223;
  unsigned int v224;
  unsigned int v225;
  uint64_t v226;
  _BYTE *v227;
  uint64_t *v228;
  uint64_t v229;
  uint64_t v230;
  std::string::size_type v231;
  std::string *v232;
  std::string::size_type v233;
  std::string::size_type v234;
  int v235;
  __n128 *v238;
  std::string *v239;
  size_t v240;
  uint64_t v241;
  _BYTE *v242;
  uint64_t *v243;
  uint64_t v244;
  uint64_t v245;
  std::string::size_type v246;
  std::string *v247;
  std::string::size_type v248;
  std::string::size_type v249;
  int v250;
  __n128 *v253;
  std::string *v254;
  size_t v255;
  uint64_t v256;
  _BYTE *v257;
  uint64_t *v258;
  uint64_t v259;
  uint64_t v260;
  std::string::size_type v261;
  std::string *v262;
  std::string::size_type v263;
  std::string::size_type v264;
  int v265;
  __n128 *v268;
  std::string *v269;
  size_t v270;
  _QWORD *result;
  uint64_t v272;
  unsigned __int8 **v273;
  unsigned __int8 **v274;
  void *__p[2];
  __int128 v276;
  int v277;
  std::string v278;
  _QWORD v279[2];
  char v280;
  __int128 v281;
  _BYTE v282[25];
  __int128 v283;
  std::string v284;
  std::string v285;
  char v286;
  char v287[16];
  _BYTE v288[24];
  _BYTE *v289;
  float v290[4];
  __int128 v291;
  _BYTE v292[24];
  uint64_t v293;

  v293 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  v279[1] = 0;
  v279[0] = std::chrono::steady_clock::now().__d_.__rep_;
  v280 = 1;
  v8 = operator new(0x20uLL);
  *v8 = &off_24EC20950;
  v8[1] = v279;
  v8[2] = a1;
  v289 = v8;
  *(_QWORD *)&v291 = "cv3d.recon.";
  *((_QWORD *)&v291 + 1) = 11;
  *(_QWORD *)v292 = "Stats.Keyframing.PriorityList";
  *(_QWORD *)&v292[8] = 29;
  sub_2231A9820((uint64_t)&v291, (uint64_t)&v292[16], 0, 0, (std::string *)__p);
  sub_224569D7C();
  if (sub_224569C6C())
  {
    v9 = sub_2241471F8();
    v10 = sub_2241486EC((uint64_t)v9);
    if (!sub_2241053B4(v10))
    {
      v11 = sub_2241472E0();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11))
      {
        v291 = 0u;
        *(_OWORD *)v292 = 0u;
        *(_DWORD *)&v292[16] = 728325608;
        kdebug_trace();
        *(_QWORD *)v282 = (a2[1] - *a2) >> 4;
        sub_223187394((double *)&qword_255788F20, v11, (uint64_t *)v282, "priority_list");
        kdebug_trace();
      }
    }
  }
  v291 = 0u;
  *(_OWORD *)v292 = 0u;
  *(_DWORD *)&v292[16] = 728325624;
  kdebug_trace();
  v12 = BYTE7(v276);
  if (SBYTE7(v276) < 0)
    v12 = (unint64_t)__p[1];
  if (v12 >= 0x11)
  {
    v13 = __p;
    if (SBYTE7(v276) < 0)
      v13 = (void **)__p[0];
    v14 = *v13;
    v15 = v13[1];
    v16 = *((unsigned __int8 *)v13 + 16);
    if (v14 == (void *)0x6365722E64337663 && v15 == (void *)0x73746174532E6E6FLL && v16 == 46)
    {
      v19 = sub_223187510();
      if ((SBYTE7(v276) & 0x80u) == 0)
        v20 = __p;
      else
        v20 = (void **)__p[0];
      if ((SBYTE7(v276) & 0x80u) == 0)
        v21 = BYTE7(v276);
      else
        v21 = (size_t)__p[1];
      *(_QWORD *)v282 = (a2[1] - *a2) >> 4;
      sub_22318760C((uint64_t *)v19, v20, v21, (uint64_t *)v282, (uint64_t)"priority_list", 13);
    }
  }
  kdebug_trace();
  if (SBYTE7(v276) < 0)
    operator delete(__p[0]);
  *(_QWORD *)&v291 = "cv3d.recon.";
  *((_QWORD *)&v291 + 1) = 11;
  *(_QWORD *)v292 = "Stats.Keyframing.PriorityList";
  *(_QWORD *)&v292[8] = 29;
  sub_2231A9820((uint64_t)&v291, (uint64_t)&v292[16], 0, 0, (std::string *)__p);
  sub_224569D7C();
  if (sub_224569C6C())
  {
    v22 = sub_2241471F8();
    v23 = sub_2241486EC((uint64_t)v22);
    if (!sub_2241053B4(v23))
    {
      v24 = sub_2241472E0();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24))
      {
        v291 = 0u;
        *(_OWORD *)v292 = 0u;
        *(_DWORD *)&v292[16] = 728325608;
        kdebug_trace();
        *(_QWORD *)v282 = (a3[1] - *a3) >> 4;
        sub_223187734((double *)&qword_255788F20, v24, (uint64_t *)v282, "invalid_list");
        kdebug_trace();
      }
    }
  }
  v291 = 0u;
  *(_OWORD *)v292 = 0u;
  *(_DWORD *)&v292[16] = 728325624;
  kdebug_trace();
  v25 = BYTE7(v276);
  if (SBYTE7(v276) < 0)
    v25 = (unint64_t)__p[1];
  if (v25 >= 0x11)
  {
    v26 = __p;
    if (SBYTE7(v276) < 0)
      v26 = (void **)__p[0];
    v27 = *v26;
    v28 = v26[1];
    v29 = *((unsigned __int8 *)v26 + 16);
    if (v27 == (void *)0x6365722E64337663 && v28 == (void *)0x73746174532E6E6FLL && v29 == 46)
    {
      v32 = sub_223187510();
      if ((SBYTE7(v276) & 0x80u) == 0)
        v33 = __p;
      else
        v33 = (void **)__p[0];
      if ((SBYTE7(v276) & 0x80u) == 0)
        v34 = BYTE7(v276);
      else
        v34 = (size_t)__p[1];
      *(_QWORD *)v282 = (a3[1] - *a3) >> 4;
      sub_22318760C((uint64_t *)v32, v33, v34, (uint64_t *)v282, (uint64_t)"invalid_list", 12);
    }
  }
  kdebug_trace();
  if (SBYTE7(v276) < 0)
    operator delete(__p[0]);
  sub_224569D7C();
  if (sub_224569C6C())
  {
    v35 = sub_2241471F8();
    v36 = sub_2241486EC((uint64_t)v35);
    if (!sub_2241053B4(v36))
    {
      *(_QWORD *)&v291 = "cv3d.recon.";
      *((_QWORD *)&v291 + 1) = 11;
      *(_QWORD *)v292 = "Stats.Keyframing.PriorityList";
      *(_QWORD *)&v292[8] = 29;
      sub_2231A9820((uint64_t)&v291, (uint64_t)&v292[16], 0, 0, &v278);
      v37 = sub_2241472E0();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v37 + 24))(v37))
      {
        *(_OWORD *)__p = 0u;
        v276 = 0u;
        v277 = 728325616;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v37 + 24))(v37))
        {
          sub_2245054E8((uint64_t)&v291, (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0), 2);
          v281 = v291;
          v38 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v37 + 24))(v37))
          {
            sub_22452C3CC(&v283);
            v282[23] = 13;
            strcpy(v282, "priority_list");
            *(_DWORD *)&v292[8] = 0;
            sub_2231AEF2C((uint64_t)v287, (uint64_t)&v291, a2);
            if (*(_DWORD *)&v292[8] == -1)
              sub_22316DD70();
            *(_QWORD *)v287 = &v286;
            ((void (*)(std::string *__return_ptr, char *, __int128 *))off_24EC1F9D0[*(unsigned int *)&v292[8]])(&v285, v287, &v291);
            if (*(_DWORD *)&v292[8] != -1)
              ((void (*)(char *, __int128 *))off_24EC1F9B8[*(unsigned int *)&v292[8]])(v287, &v291);
            sub_224527BAC((uint64_t)v282, (CFStringRef *)&v291);
            v39 = a2;
            sub_2231AEDB8((uint64_t)&v283, (const void *)v291, (uint64_t)&v285);
            v40 = (std::__shared_weak_count *)*((_QWORD *)&v291 + 1);
            if (*((_QWORD *)&v291 + 1))
            {
              v41 = (unint64_t *)(*((_QWORD *)&v291 + 1) + 8);
              do
                v42 = __ldaxr(v41);
              while (__stlxr(v42 - 1, v41));
              if (!v42)
              {
                ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                std::__shared_weak_count::__release_weak(v40);
              }
            }
            if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v285.__r_.__value_.__l.__data_);
            if ((v282[23] & 0x80000000) != 0)
              operator delete(*(void **)v282);
            v282[23] = 12;
            strcpy(v282, "invalid_list");
            *(_DWORD *)&v292[8] = 0;
            sub_2231AEF2C((uint64_t)v287, (uint64_t)&v291, a3);
            if (*(_DWORD *)&v292[8] == -1)
              sub_22316DD70();
            *(_QWORD *)v287 = &v286;
            ((void (*)(std::string *__return_ptr, char *, __int128 *))off_24EC1F9D0[*(unsigned int *)&v292[8]])(&v285, v287, &v291);
            if (*(_DWORD *)&v292[8] != -1)
              ((void (*)(char *, __int128 *))off_24EC1F9B8[*(unsigned int *)&v292[8]])(v287, &v291);
            sub_224527BAC((uint64_t)v282, (CFStringRef *)&v291);
            sub_2231AEDB8((uint64_t)&v283, (const void *)v291, (uint64_t)&v285);
            v43 = (std::__shared_weak_count *)*((_QWORD *)&v291 + 1);
            if (*((_QWORD *)&v291 + 1))
            {
              v44 = (unint64_t *)(*((_QWORD *)&v291 + 1) + 8);
              do
                v45 = __ldaxr(v44);
              while (__stlxr(v45 - 1, v44));
              if (!v45)
              {
                ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                std::__shared_weak_count::__release_weak(v43);
              }
            }
            if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v285.__r_.__value_.__l.__data_);
            if ((v282[23] & 0x80000000) != 0)
              operator delete(*(void **)v282);
            *(_QWORD *)v282 = 1952672100;
            *(_QWORD *)&v282[8] = *(_QWORD *)v290;
            *(_QWORD *)&v282[15] = *(_QWORD *)((char *)&v290[1] + 3);
            *(_WORD *)&v282[23] = 260;
            memset(v290, 0, 15);
            sub_2231AD9F0((uint64_t)&v283, (__int128 *)v282, &v281, &v284);
            if (v282[24] && (v282[23] & 0x80000000) != 0)
              operator delete(*(void **)v282);
            v46 = (std::__shared_weak_count *)*((_QWORD *)&v283 + 1);
            if (*((_QWORD *)&v283 + 1))
            {
              v47 = (unint64_t *)(*((_QWORD *)&v283 + 1) + 8);
              do
                v48 = __ldaxr(v47);
              while (__stlxr(v48 - 1, v47));
              if (!v48)
              {
                ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                std::__shared_weak_count::__release_weak(v46);
              }
            }
            v49 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 56))(v37);
            v50 = *v49;
            v51 = (std::__shared_weak_count *)v49[1];
            if (v51)
            {
              p_shared_owners = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldxr(p_shared_owners);
              while (__stxr(v53 + 1, p_shared_owners));
            }
            v54 = *(_OWORD *)&v284.__r_.__value_.__r.__words[1];
            v285.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC6A3B8;
            *(_OWORD *)&v285.__r_.__value_.__r.__words[1] = *(_OWORD *)&v284.__r_.__value_.__r.__words[1];
            *(_OWORD *)&v284.__r_.__value_.__r.__words[1] = 0uLL;
            *(_QWORD *)&v291 = v50;
            *((_QWORD *)&v291 + 1) = v51;
            if (v51)
            {
              v55 = (unint64_t *)&v51->__shared_owners_;
              do
                v56 = __ldxr(v55);
              while (__stxr(v56 + 1, v55));
            }
            *(_QWORD *)v292 = &off_24EC6A3B8;
            *(_OWORD *)&v292[8] = v54;
            if (*((_QWORD *)&v54 + 1))
            {
              v57 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
              do
                v58 = __ldxr(v57);
              while (__stxr(v58 + 1, v57));
            }
            (*(void (**)(uint64_t *, __int128 *))(*v38 + 16))(v38, &v291);
            sub_2241231D8((uint64_t)v292);
            v59 = (std::__shared_weak_count *)*((_QWORD *)&v291 + 1);
            a2 = v39;
            if (*((_QWORD *)&v291 + 1))
            {
              v60 = (unint64_t *)(*((_QWORD *)&v291 + 1) + 8);
              do
                v61 = __ldaxr(v60);
              while (__stlxr(v61 - 1, v60));
              if (!v61)
              {
                ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                std::__shared_weak_count::__release_weak(v59);
              }
            }
            sub_2241231D8((uint64_t)&v285);
            if (v51)
            {
              v62 = (unint64_t *)&v51->__shared_owners_;
              do
                v63 = __ldaxr(v62);
              while (__stlxr(v63 - 1, v62));
              if (!v63)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            sub_2241231D8((uint64_t)&v284);
          }
        }
        kdebug_trace();
      }
      if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v278.__r_.__value_.__l.__data_);
    }
  }
  sub_22318787C(a1);
  LODWORD(v281) = 0;
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v276 = 0;
  v64 = *(float *)(a1 + 364);
  if (v64 <= 0.0
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeMemory.mm", 129, (uint64_t)"memory_size > 0", 15, (uint64_t)"Shared memory not allocated", 27, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v290[0] = 0.0;
  v274 = a2;
  v65 = *a2;
  v66 = a2[1];
  if (v65 == v66)
  {
    v93 = 0.0;
    goto LABEL_201;
  }
  v273 = a3;
  v67 = 1;
  v68 = a4;
LABEL_119:
  if (v68 > ((char *)__p[1] - (char *)__p[0]) >> 4)
  {
    v69 = sub_2231A8330((_QWORD *)(a1 + 320), v65);
    if (v69)
    {
      v70 = sub_2231D3830((_QWORD *)v69[4]);
      goto LABEL_162;
    }
    v71 = *(float **)(*(_QWORD *)(a1 + 368) + 32);
    if (!v71)
LABEL_618:
      sub_223198218("map::at:  key not found");
    v72 = *v65;
    while (1)
    {
      v73 = *((unsigned __int8 *)v71 + 28);
      v74 = v72 >= v73;
      if (v72 != v73)
        break;
      v75 = v65[1];
      v73 = *((unsigned __int8 *)v71 + 29);
      v74 = v75 >= v73;
      if (v75 == v73
        && (v75 = v65[2], v73 = *((unsigned __int8 *)v71 + 30), v74 = v75 >= v73, v75 == v73)
        && (v75 = v65[3], v73 = *((unsigned __int8 *)v71 + 31), v74 = v75 >= v73, v75 == v73))
      {
        v76 = v65[4];
        v77 = *((unsigned __int8 *)v71 + 32);
        if (v76 != v77)
          goto LABEL_141;
        v76 = v65[5];
        v77 = *((unsigned __int8 *)v71 + 33);
        if (v76 != v77)
          goto LABEL_141;
        v76 = v65[6];
        v77 = *((unsigned __int8 *)v71 + 34);
        if (v76 != v77)
          goto LABEL_141;
        v76 = v65[7];
        v77 = *((unsigned __int8 *)v71 + 35);
        if (v76 != v77)
          goto LABEL_141;
        v76 = v65[8];
        v77 = *((unsigned __int8 *)v71 + 36);
        if (v76 != v77)
          goto LABEL_141;
        v76 = v65[9];
        v77 = *((unsigned __int8 *)v71 + 37);
        if (v76 != v77)
          goto LABEL_141;
        v76 = v65[10];
        v77 = *((unsigned __int8 *)v71 + 38);
        if (v76 != v77)
          goto LABEL_141;
        v76 = v65[11];
        v77 = *((unsigned __int8 *)v71 + 39);
        if (v76 != v77)
          goto LABEL_141;
        v76 = v65[12];
        v77 = *((unsigned __int8 *)v71 + 40);
        if (v76 != v77
          || (v76 = v65[13], v77 = *((unsigned __int8 *)v71 + 41), v76 != v77)
          || (v76 = v65[14], v77 = *((unsigned __int8 *)v71 + 42), v76 != v77)
          || (v76 = v65[15], v77 = *((unsigned __int8 *)v71 + 43), v76 != v77))
        {
LABEL_141:
          if (v76 < v77)
            goto LABEL_124;
        }
        v73 = *((unsigned __int8 *)v71 + 32);
        v75 = v65[4];
        if (v73 == v75)
        {
          v73 = *((unsigned __int8 *)v71 + 33);
          v75 = v65[5];
          if (v73 == v75)
          {
            v73 = *((unsigned __int8 *)v71 + 34);
            v75 = v65[6];
            if (v73 == v75)
            {
              v73 = *((unsigned __int8 *)v71 + 35);
              v75 = v65[7];
              if (v73 == v75)
              {
                v73 = *((unsigned __int8 *)v71 + 36);
                v75 = v65[8];
                if (v73 == v75)
                {
                  v73 = *((unsigned __int8 *)v71 + 37);
                  v75 = v65[9];
                  if (v73 == v75)
                  {
                    v73 = *((unsigned __int8 *)v71 + 38);
                    v75 = v65[10];
                    if (v73 == v75)
                    {
                      v73 = *((unsigned __int8 *)v71 + 39);
                      v75 = v65[11];
                      if (v73 == v75)
                      {
                        v73 = *((unsigned __int8 *)v71 + 40);
                        v75 = v65[12];
                        if (v73 == v75)
                        {
                          v73 = *((unsigned __int8 *)v71 + 41);
                          v75 = v65[13];
                          if (v73 == v75)
                          {
                            v73 = *((unsigned __int8 *)v71 + 42);
                            v75 = v65[14];
                            if (v73 == v75)
                            {
                              v73 = *((unsigned __int8 *)v71 + 43);
                              v75 = v65[15];
                              if (v73 == v75)
                              {
LABEL_161:
                                v70 = v71[11];
LABEL_162:
                                v78 = sub_2231A88F8((_QWORD *)(a1 + 320), v65);
                                if (v67)
                                  v79 = v78 == 0;
                                else
                                  v79 = 1;
                                v67 = !v79;
                                if (!v79)
                                {
                                  v80 = v290;
                                  goto LABEL_170;
                                }
                                if (v78)
                                  goto LABEL_118;
                                v81 = (char *)__p[0];
                                v82 = (char *)__p[1];
                                v83 = __p[0];
                                if (__p[0] != __p[1])
                                {
                                  v83 = __p[0];
                                  while (*v83 != *(_QWORD *)v65 || v83[1] != *((_QWORD *)v65 + 1))
                                  {
                                    v83 += 2;
                                    if (v83 == __p[1])
                                    {
                                      v83 = __p[1];
                                      break;
                                    }
                                  }
                                }
                                if (v83 != __p[1])
                                  goto LABEL_118;
                                if (__p[1] >= (void *)v276)
                                {
                                  v86 = ((char *)__p[1] - (char *)__p[0]) >> 4;
                                  v87 = v86 + 1;
                                  if ((unint64_t)(v86 + 1) >> 60)
                                    sub_22316E078();
                                  v88 = v276 - (unint64_t)__p[0];
                                  if ((uint64_t)(v276 - (unint64_t)__p[0]) >> 3 > v87)
                                    v87 = v88 >> 3;
                                  if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF0)
                                    v89 = 0xFFFFFFFFFFFFFFFLL;
                                  else
                                    v89 = v87;
                                  if (v89)
                                  {
                                    if (v89 >> 60)
                                      sub_223174E94();
                                    v90 = (char *)operator new(16 * v89);
                                    v91 = &v90[16 * v86];
                                    *(_OWORD *)v91 = *(_OWORD *)v65;
                                    v92 = v91;
                                    if (v81 == v82)
                                      goto LABEL_196;
                                    do
                                    {
LABEL_193:
                                      *((_OWORD *)v92 - 1) = *((_OWORD *)v82 - 1);
                                      v92 -= 16;
                                      v82 -= 16;
                                    }
                                    while (v82 != v81);
                                    v81 = (char *)__p[0];
                                    v85 = v91 + 16;
                                    __p[0] = v92;
                                    __p[1] = v91 + 16;
                                    *(_QWORD *)&v276 = &v90[16 * v89];
                                    if (!v81)
                                      goto LABEL_198;
                                  }
                                  else
                                  {
                                    v90 = 0;
                                    v91 = (char *)(16 * v86);
                                    *(_OWORD *)(16 * v86) = *(_OWORD *)v65;
                                    v92 = (char *)(16 * v86);
                                    if (v81 != v82)
                                      goto LABEL_193;
LABEL_196:
                                    v85 = v91 + 16;
                                    __p[0] = v92;
                                    __p[1] = v91 + 16;
                                    *(_QWORD *)&v276 = &v90[16 * v89];
                                    if (!v81)
                                      goto LABEL_198;
                                  }
                                  operator delete(v81);
                                  goto LABEL_198;
                                }
                                *(_OWORD *)__p[1] = *(_OWORD *)v65;
                                v85 = v82 + 16;
LABEL_198:
                                __p[1] = v85;
                                v80 = (float *)&v281;
LABEL_170:
                                *v80 = (float)(v70 / v64) + *v80;
LABEL_118:
                                v65 += 16;
                                if (v65 == v66)
                                  goto LABEL_199;
                                goto LABEL_119;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
LABEL_158:
        if (v73 >= v75)
          goto LABEL_161;
        v71 = (float *)*((_QWORD *)v71 + 1);
        if (!v71)
          goto LABEL_618;
      }
      else
      {
LABEL_156:
        if (v74)
          goto LABEL_158;
LABEL_124:
        v71 = *(float **)v71;
        if (!v71)
          goto LABEL_618;
      }
    }
    v75 = *v65;
    goto LABEL_156;
  }
LABEL_199:
  v93 = v290[0];
  a3 = v273;
LABEL_201:
  *(float *)&v281 = *(float *)&v281 + (float)(*(float *)(a1 + 360) / *(float *)(a1 + 364));
  v287[0] = v93 >= 0.8;
  v94 = (char *)operator new(0x20uLL);
  *(_QWORD *)v282 = v94;
  *(_OWORD *)&v282[8] = xmmword_2245B8D50;
  strcpy(v94, "Stats.Keyframing.MemoryList");
  *(_QWORD *)&v291 = "cv3d.recon.";
  *((_QWORD *)&v291 + 1) = 11;
  *(_QWORD *)v292 = v94;
  *(_QWORD *)&v292[8] = 27;
  sub_2231A9820((uint64_t)&v291, (uint64_t)&v292[16], 0, 0, &v285);
  sub_224569D7C();
  if (sub_224569C6C())
  {
    v95 = sub_2241471F8();
    v96 = sub_2241486EC((uint64_t)v95);
    if (!sub_2241053B4(v96))
    {
      v97 = sub_2241472E0();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v97 + 24))(v97))
      {
        v291 = 0u;
        *(_OWORD *)v292 = 0u;
        *(_DWORD *)&v292[16] = 728325608;
        kdebug_trace();
        sub_2231893F0((double *)&qword_255788F20, v97, v287, "enough_in_memory");
        kdebug_trace();
      }
    }
  }
  v291 = 0u;
  *(_OWORD *)v292 = 0u;
  *(_DWORD *)&v292[16] = 728325624;
  kdebug_trace();
  size = HIBYTE(v285.__r_.__value_.__r.__words[2]);
  if ((v285.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v285.__r_.__value_.__l.__size_;
  if (size >= 0x11)
  {
    v99 = &v285;
    if ((v285.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v99 = (std::string *)v285.__r_.__value_.__r.__words[0];
    v100 = v99->__r_.__value_.__r.__words[0];
    v101 = v99->__r_.__value_.__l.__size_;
    v102 = v99->__r_.__value_.__s.__data_[16];
    if (v100 == 0x6365722E64337663 && v101 == 0x73746174532E6E6FLL && v102 == 46)
    {
      v105 = sub_223187510();
      if ((v285.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v106 = &v285;
      else
        v106 = (std::string *)v285.__r_.__value_.__r.__words[0];
      if ((v285.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v107 = HIBYTE(v285.__r_.__value_.__r.__words[2]);
      else
        v107 = v285.__r_.__value_.__l.__size_;
      sub_223189538((uint64_t *)v105, v106, v107, v287, (uint64_t)"enough_in_memory", 16);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v285.__r_.__value_.__l.__data_);
  *(_QWORD *)&v291 = "cv3d.recon.";
  *((_QWORD *)&v291 + 1) = 11;
  v108 = v282[23];
  v109 = v282;
  if (v282[23] < 0)
  {
    v109 = *(_BYTE **)v282;
    v108 = *(_QWORD *)&v282[8];
  }
  *(_QWORD *)v292 = v109;
  *(_QWORD *)&v292[8] = v108;
  sub_2231A9820((uint64_t)&v291, (uint64_t)&v292[16], 0, 0, &v285);
  sub_224569D7C();
  if (sub_224569C6C())
  {
    v110 = sub_2241471F8();
    v111 = sub_2241486EC((uint64_t)v110);
    if (!sub_2241053B4(v111))
    {
      v112 = sub_2241472E0();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v112 + 24))(v112))
      {
        v291 = 0u;
        *(_OWORD *)v292 = 0u;
        *(_DWORD *)&v292[16] = 728325608;
        kdebug_trace();
        sub_223189660((double *)&qword_255788F20, v112, v290, "load_factor_consecutive_in_memory");
        kdebug_trace();
      }
    }
  }
  v291 = 0u;
  *(_OWORD *)v292 = 0u;
  *(_DWORD *)&v292[16] = 728325624;
  kdebug_trace();
  v113 = HIBYTE(v285.__r_.__value_.__r.__words[2]);
  if ((v285.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v113 = v285.__r_.__value_.__l.__size_;
  if (v113 >= 0x11)
  {
    v114 = &v285;
    if ((v285.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v114 = (std::string *)v285.__r_.__value_.__r.__words[0];
    v115 = v114->__r_.__value_.__r.__words[0];
    v116 = v114->__r_.__value_.__l.__size_;
    v117 = v114->__r_.__value_.__s.__data_[16];
    if (v115 == 0x6365722E64337663 && v116 == 0x73746174532E6E6FLL && v117 == 46)
    {
      v120 = sub_223187510();
      if ((v285.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v121 = &v285;
      else
        v121 = (std::string *)v285.__r_.__value_.__r.__words[0];
      if ((v285.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v122 = HIBYTE(v285.__r_.__value_.__r.__words[2]);
      else
        v122 = v285.__r_.__value_.__l.__size_;
      sub_2231897A8((uint64_t *)v120, v121, v122, v290, (uint64_t)"load_factor_consecutive_in_memory", 33);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v285.__r_.__value_.__l.__data_);
  *(_QWORD *)&v291 = "cv3d.recon.";
  *((_QWORD *)&v291 + 1) = 11;
  v123 = v282[23];
  v124 = v282;
  if (v282[23] < 0)
  {
    v124 = *(_BYTE **)v282;
    v123 = *(_QWORD *)&v282[8];
  }
  *(_QWORD *)v292 = v124;
  *(_QWORD *)&v292[8] = v123;
  sub_2231A9820((uint64_t)&v291, (uint64_t)&v292[16], 0, 0, &v285);
  sub_224569D7C();
  if (sub_224569C6C())
  {
    v125 = sub_2241471F8();
    v126 = sub_2241486EC((uint64_t)v125);
    if (!sub_2241053B4(v126))
    {
      v127 = sub_2241472E0();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v127 + 24))(v127))
      {
        v291 = 0u;
        *(_OWORD *)v292 = 0u;
        *(_DWORD *)&v292[16] = 728325608;
        kdebug_trace();
        sub_2231898D0((double *)&qword_255788F20, v127, (float *)&v281, "load_factor_start");
        kdebug_trace();
      }
    }
  }
  v291 = 0u;
  *(_OWORD *)v292 = 0u;
  *(_DWORD *)&v292[16] = 728325624;
  kdebug_trace();
  v128 = HIBYTE(v285.__r_.__value_.__r.__words[2]);
  if ((v285.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v128 = v285.__r_.__value_.__l.__size_;
  if (v128 >= 0x11)
  {
    v129 = &v285;
    if ((v285.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v129 = (std::string *)v285.__r_.__value_.__r.__words[0];
    v130 = v129->__r_.__value_.__r.__words[0];
    v131 = v129->__r_.__value_.__l.__size_;
    v132 = v129->__r_.__value_.__s.__data_[16];
    if (v130 == 0x6365722E64337663 && v131 == 0x73746174532E6E6FLL && v132 == 46)
    {
      v135 = sub_223187510();
      if ((v285.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v136 = &v285;
      else
        v136 = (std::string *)v285.__r_.__value_.__r.__words[0];
      if ((v285.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v137 = HIBYTE(v285.__r_.__value_.__r.__words[2]);
      else
        v137 = v285.__r_.__value_.__l.__size_;
      sub_2231897A8((uint64_t *)v135, v136, v137, (float *)&v281, (uint64_t)"load_factor_start", 17);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v285.__r_.__value_.__l.__data_);
    v138 = *(float *)&v281;
    if (!v287[0])
      goto LABEL_336;
  }
  else
  {
    v138 = *(float *)&v281;
    if (!v287[0])
      goto LABEL_336;
  }
  if (v138 > 1.0)
  {
    v139 = (char *)__p[1];
    if (__p[0] != __p[1])
    {
LABEL_293:
      v142 = sub_2231A8330((_QWORD *)(a1 + 320), (_QWORD *)v139 - 2);
      if (v142)
      {
        v140 = sub_2231D3830((_QWORD *)v142[4]);
        goto LABEL_289;
      }
      v143 = *(float **)(*(_QWORD *)(a1 + 368) + 32);
      if (!v143)
LABEL_617:
        sub_223198218("map::at:  key not found");
      v144 = *(v139 - 16);
      while (1)
      {
        while (1)
        {
          v145 = *((unsigned __int8 *)v143 + 28);
          v146 = v144 >= v145;
          if (v144 == v145)
            break;
          v147 = *(v139 - 16);
LABEL_330:
          if (v146)
            goto LABEL_332;
LABEL_296:
          v143 = *(float **)v143;
          if (!v143)
            goto LABEL_617;
        }
        v147 = *(v139 - 15);
        v145 = *((unsigned __int8 *)v143 + 29);
        v146 = v147 >= v145;
        if (v147 != v145)
          goto LABEL_330;
        v148 = *(v139 - 14);
        v149 = *((unsigned __int8 *)v143 + 30);
        if (v148 != v149)
          goto LABEL_313;
        v148 = *(v139 - 13);
        v149 = *((unsigned __int8 *)v143 + 31);
        if (v148 != v149)
          goto LABEL_313;
        v148 = *(v139 - 12);
        v149 = *((unsigned __int8 *)v143 + 32);
        if (v148 != v149)
          goto LABEL_313;
        v148 = *(v139 - 11);
        v149 = *((unsigned __int8 *)v143 + 33);
        if (v148 != v149)
          goto LABEL_313;
        v148 = *(v139 - 10);
        v149 = *((unsigned __int8 *)v143 + 34);
        if (v148 != v149)
          goto LABEL_313;
        v148 = *(v139 - 9);
        v149 = *((unsigned __int8 *)v143 + 35);
        if (v148 != v149)
          goto LABEL_313;
        v148 = *(v139 - 8);
        v149 = *((unsigned __int8 *)v143 + 36);
        if (v148 != v149)
          goto LABEL_313;
        v148 = *(v139 - 7);
        v149 = *((unsigned __int8 *)v143 + 37);
        if (v148 != v149)
          goto LABEL_313;
        v148 = *(v139 - 6);
        v149 = *((unsigned __int8 *)v143 + 38);
        if (v148 != v149)
          goto LABEL_313;
        v148 = *(v139 - 5);
        v149 = *((unsigned __int8 *)v143 + 39);
        if (v148 != v149)
          goto LABEL_313;
        v148 = *(v139 - 4);
        v149 = *((unsigned __int8 *)v143 + 40);
        if (v148 != v149
          || (v148 = *(v139 - 3), v149 = *((unsigned __int8 *)v143 + 41), v148 != v149)
          || (v148 = *(v139 - 2), v149 = *((unsigned __int8 *)v143 + 42), v148 != v149)
          || (v148 = *(v139 - 1), v149 = *((unsigned __int8 *)v143 + 43), v148 != v149))
        {
LABEL_313:
          if (v148 < v149)
            goto LABEL_296;
        }
        v145 = *((unsigned __int8 *)v143 + 30);
        v147 = *(v139 - 14);
        if (v145 == v147)
        {
          v145 = *((unsigned __int8 *)v143 + 31);
          v147 = *(v139 - 13);
          if (v145 == v147)
          {
            v145 = *((unsigned __int8 *)v143 + 32);
            v147 = *(v139 - 12);
            if (v145 == v147)
            {
              v145 = *((unsigned __int8 *)v143 + 33);
              v147 = *(v139 - 11);
              if (v145 == v147)
              {
                v145 = *((unsigned __int8 *)v143 + 34);
                v147 = *(v139 - 10);
                if (v145 == v147)
                {
                  v145 = *((unsigned __int8 *)v143 + 35);
                  v147 = *(v139 - 9);
                  if (v145 == v147)
                  {
                    v145 = *((unsigned __int8 *)v143 + 36);
                    v147 = *(v139 - 8);
                    if (v145 == v147)
                    {
                      v145 = *((unsigned __int8 *)v143 + 37);
                      v147 = *(v139 - 7);
                      if (v145 == v147)
                      {
                        v145 = *((unsigned __int8 *)v143 + 38);
                        v147 = *(v139 - 6);
                        if (v145 == v147)
                        {
                          v145 = *((unsigned __int8 *)v143 + 39);
                          v147 = *(v139 - 5);
                          if (v145 == v147)
                          {
                            v145 = *((unsigned __int8 *)v143 + 40);
                            v147 = *(v139 - 4);
                            if (v145 == v147)
                            {
                              v145 = *((unsigned __int8 *)v143 + 41);
                              v147 = *(v139 - 3);
                              if (v145 == v147)
                              {
                                v145 = *((unsigned __int8 *)v143 + 42);
                                v147 = *(v139 - 2);
                                if (v145 == v147)
                                {
                                  v145 = *((unsigned __int8 *)v143 + 43);
                                  v147 = *(v139 - 1);
                                  if (v145 == v147)
                                  {
LABEL_335:
                                    v140 = v143[11];
LABEL_289:
                                    v138 = *(float *)&v281 - (float)(v140 / v64);
                                    *(float *)&v281 = v138;
                                    v139 = (char *)__p[1] - 16;
                                    __p[1] = (char *)__p[1] - 16;
                                    if (v138 <= 1.0 || __p[0] == v139)
                                      break;
                                    goto LABEL_293;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
LABEL_332:
        if (v145 >= v147)
          goto LABEL_335;
        v143 = (float *)*((_QWORD *)v143 + 1);
        if (!v143)
          goto LABEL_617;
      }
    }
  }
LABEL_336:
  memset(&v285, 0, sizeof(v285));
  if (v138 <= 1.0)
    goto LABEL_518;
  *(_QWORD *)&v291 = "cv3d.recon.";
  *((_QWORD *)&v291 + 1) = 11;
  v150 = v282[23];
  v151 = v282;
  if (v282[23] < 0)
  {
    v151 = *(_BYTE **)v282;
    v150 = *(_QWORD *)&v282[8];
  }
  *(_QWORD *)v292 = v151;
  *(_QWORD *)&v292[8] = v150;
  sub_2231A9820((uint64_t)&v291, (uint64_t)&v292[16], 0, 0, &v284);
  sub_224569D7C();
  if (sub_224569C6C())
  {
    v152 = sub_2241471F8();
    v153 = sub_2241486EC((uint64_t)v152);
    if (!sub_2241053B4(v153))
    {
      v154 = sub_2241472E0();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v154 + 24))(v154))
      {
        v291 = 0u;
        *(_OWORD *)v292 = 0u;
        *(_DWORD *)&v292[16] = 728325608;
        kdebug_trace();
        sub_223189A18((double *)&qword_255788F20, v154, (float *)&v281, "load_factor_exceeds");
        kdebug_trace();
      }
    }
  }
  v291 = 0u;
  *(_OWORD *)v292 = 0u;
  *(_DWORD *)&v292[16] = 728325624;
  kdebug_trace();
  v155 = HIBYTE(v284.__r_.__value_.__r.__words[2]);
  if ((v284.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v155 = v284.__r_.__value_.__l.__size_;
  if (v155 >= 0x11)
  {
    v156 = &v284;
    if ((v284.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v156 = (std::string *)v284.__r_.__value_.__r.__words[0];
    v157 = v156->__r_.__value_.__r.__words[0];
    v158 = v156->__r_.__value_.__l.__size_;
    v159 = v156->__r_.__value_.__s.__data_[16];
    if (v157 == 0x6365722E64337663 && v158 == 0x73746174532E6E6FLL && v159 == 46)
    {
      v162 = sub_223187510();
      if ((v284.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v163 = &v284;
      else
        v163 = (std::string *)v284.__r_.__value_.__r.__words[0];
      if ((v284.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v164 = HIBYTE(v284.__r_.__value_.__r.__words[2]);
      else
        v164 = v284.__r_.__value_.__l.__size_;
      sub_2231897A8((uint64_t *)v162, v163, v164, (float *)&v281, (uint64_t)"load_factor_exceeds", 19);
    }
  }
  kdebug_trace();
  if ((SHIBYTE(v284.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v165 = *a3;
    v166 = a3[1];
    if (*a3 == v166)
      goto LABEL_417;
    while (1)
    {
LABEL_370:
      v168 = v285.__r_.__value_.__l.__size_;
      v167 = (void *)v285.__r_.__value_.__r.__words[0];
      if (v285.__r_.__value_.__r.__words[0] != v285.__r_.__value_.__l.__size_)
      {
        v169 = (_QWORD *)v285.__r_.__value_.__r.__words[0];
        while (*v169 != *(_QWORD *)v165 || v169[1] != *((_QWORD *)v165 + 1))
        {
          v169 += 2;
          if (v169 == (_QWORD *)v285.__r_.__value_.__l.__size_)
          {
            v169 = (_QWORD *)v285.__r_.__value_.__l.__size_;
            break;
          }
        }
        v171 = (_QWORD *)v285.__r_.__value_.__r.__words[0];
        if (v169 != (_QWORD *)v285.__r_.__value_.__l.__size_)
          goto LABEL_369;
        while (*v171 != *(_QWORD *)v165 || v171[1] != *((_QWORD *)v165 + 1))
        {
          v171 += 2;
          if (v171 == (_QWORD *)v285.__r_.__value_.__l.__size_)
          {
            v171 = (_QWORD *)v285.__r_.__value_.__l.__size_;
            break;
          }
        }
        if (v171 != (_QWORD *)v285.__r_.__value_.__l.__size_)
          goto LABEL_369;
      }
      if (v285.__r_.__value_.__l.__size_ < v285.__r_.__value_.__r.__words[2])
      {
        *(_OWORD *)v285.__r_.__value_.__l.__size_ = *(_OWORD *)v165;
        v173 = v168 + 16;
        goto LABEL_404;
      }
      v174 = (uint64_t)(v285.__r_.__value_.__l.__size_ - v285.__r_.__value_.__r.__words[0]) >> 4;
      v175 = v174 + 1;
      if ((unint64_t)(v174 + 1) >> 60)
LABEL_620:
        sub_22316E078();
      v176 = v285.__r_.__value_.__r.__words[2] - v285.__r_.__value_.__r.__words[0];
      if ((uint64_t)(v285.__r_.__value_.__r.__words[2] - v285.__r_.__value_.__r.__words[0]) >> 3 > v175)
        v175 = v176 >> 3;
      if ((unint64_t)v176 >= 0x7FFFFFFFFFFFFFF0)
        v177 = 0xFFFFFFFFFFFFFFFLL;
      else
        v177 = v175;
      if (v177)
      {
        if (v177 >> 60)
LABEL_622:
          sub_223174E94();
        v178 = (char *)operator new(16 * v177);
        v179 = &v178[16 * v174];
        *(_OWORD *)v179 = *(_OWORD *)v165;
        v180 = (uint64_t)v179;
        if (v167 == (void *)v168)
        {
LABEL_402:
          v173 = (std::string::size_type)(v179 + 16);
          v285.__r_.__value_.__r.__words[0] = v180;
          v285.__r_.__value_.__l.__size_ = (std::string::size_type)(v179 + 16);
          v285.__r_.__value_.__r.__words[2] = (std::string::size_type)&v178[16 * v177];
          if (!v167)
            goto LABEL_404;
LABEL_403:
          operator delete(v167);
          goto LABEL_404;
        }
      }
      else
      {
        v178 = 0;
        v179 = (char *)(16 * v174);
        *(_OWORD *)(16 * v174) = *(_OWORD *)v165;
        v180 = 16 * v174;
        if (v167 == (void *)v168)
          goto LABEL_402;
      }
      do
      {
        *(_OWORD *)(v180 - 16) = *(_OWORD *)(v168 - 16);
        v180 -= 16;
        v168 -= 16;
      }
      while ((void *)v168 != v167);
      v167 = (void *)v285.__r_.__value_.__r.__words[0];
      v173 = (std::string::size_type)(v179 + 16);
      v285.__r_.__value_.__r.__words[0] = v180;
      v285.__r_.__value_.__l.__size_ = (std::string::size_type)(v179 + 16);
      v285.__r_.__value_.__r.__words[2] = (std::string::size_type)&v178[16 * v177];
      if (v167)
        goto LABEL_403;
LABEL_404:
      v285.__r_.__value_.__l.__size_ = v173;
      v181 = sub_2231A8330((_QWORD *)(a1 + 320), v165);
      if (v181)
      {
        v182 = sub_2231D3830((_QWORD *)v181[4]);
        v138 = *(float *)&v281 - (float)(v182 / v64);
        *(float *)&v281 = v138;
        if (v138 <= 1.0)
          goto LABEL_518;
      }
      else
      {
        v183 = *(_QWORD *)(a1 + 368);
        v186 = *(_QWORD *)(v183 + 32);
        v185 = (_QWORD *)(v183 + 32);
        v184 = v186;
        if (!v186)
          goto LABEL_619;
        while (1)
        {
          while (1)
          {
            v187 = (_QWORD *)v184;
            v188 = (unsigned __int8 *)(v184 + 28);
            if (((char)sub_22319835C(v165, (unsigned __int8 *)(v184 + 28)) & 0x80000000) == 0)
              break;
            v184 = *v187;
            v185 = v187;
            if (!*v187)
              goto LABEL_619;
          }
          if (((char)sub_22319835C(v188, v165) & 0x80000000) == 0)
            break;
          v184 = v187[1];
          v185 = v187 + 1;
          if (!v184)
            goto LABEL_619;
        }
        if (!*v185)
LABEL_619:
          sub_223198218("map::at:  key not found");
        v138 = *(float *)&v281 - (float)(*(float *)(*v185 + 44) / v64);
        *(float *)&v281 = v138;
        if (v138 <= 1.0)
          goto LABEL_518;
      }
LABEL_369:
      v165 += 16;
      if (v165 == v166)
        goto LABEL_417;
    }
  }
  operator delete(v284.__r_.__value_.__l.__data_);
  v165 = *a3;
  v166 = a3[1];
  if (*a3 != v166)
    goto LABEL_370;
LABEL_417:
  v190 = *v274;
  v189 = v274[1];
  if (v189 != *v274)
  {
    do
    {
      v189 -= 16;
      if (!sub_2231A88F8((_QWORD *)(a1 + 320), v189))
        continue;
      v192 = v285.__r_.__value_.__l.__size_;
      v191 = (void *)v285.__r_.__value_.__r.__words[0];
      if (v285.__r_.__value_.__r.__words[0] != v285.__r_.__value_.__l.__size_)
      {
        v193 = (_QWORD *)v285.__r_.__value_.__r.__words[0];
        while (*v193 != *(_QWORD *)v189 || v193[1] != *((_QWORD *)v189 + 1))
        {
          v193 += 2;
          if (v193 == (_QWORD *)v285.__r_.__value_.__l.__size_)
          {
            v193 = (_QWORD *)v285.__r_.__value_.__l.__size_;
            break;
          }
        }
        v195 = (_QWORD *)v285.__r_.__value_.__r.__words[0];
        if (v193 != (_QWORD *)v285.__r_.__value_.__l.__size_)
          continue;
        while (*v195 != *(_QWORD *)v189 || v195[1] != *((_QWORD *)v189 + 1))
        {
          v195 += 2;
          if (v195 == (_QWORD *)v285.__r_.__value_.__l.__size_)
          {
            v195 = (_QWORD *)v285.__r_.__value_.__l.__size_;
            break;
          }
        }
        if (v195 != (_QWORD *)v285.__r_.__value_.__l.__size_)
          continue;
      }
      if (v285.__r_.__value_.__l.__size_ < v285.__r_.__value_.__r.__words[2])
      {
        *(_OWORD *)v285.__r_.__value_.__l.__size_ = *(_OWORD *)v189;
        v197 = v192 + 16;
        goto LABEL_456;
      }
      v198 = (uint64_t)(v285.__r_.__value_.__l.__size_ - v285.__r_.__value_.__r.__words[0]) >> 4;
      v199 = v198 + 1;
      if ((unint64_t)(v198 + 1) >> 60)
        goto LABEL_620;
      v200 = v285.__r_.__value_.__r.__words[2] - v285.__r_.__value_.__r.__words[0];
      if ((uint64_t)(v285.__r_.__value_.__r.__words[2] - v285.__r_.__value_.__r.__words[0]) >> 3 > v199)
        v199 = v200 >> 3;
      if ((unint64_t)v200 >= 0x7FFFFFFFFFFFFFF0)
        v201 = 0xFFFFFFFFFFFFFFFLL;
      else
        v201 = v199;
      if (v201)
      {
        if (v201 >> 60)
          goto LABEL_622;
        v202 = (char *)operator new(16 * v201);
        v203 = &v202[16 * v198];
        *(_OWORD *)v203 = *(_OWORD *)v189;
        v204 = (uint64_t)v203;
        if (v191 == (void *)v192)
        {
LABEL_454:
          v206 = (std::string::size_type)&v202[16 * v201];
          v197 = (std::string::size_type)(v203 + 16);
          v285.__r_.__value_.__r.__words[0] = v204;
          v285.__r_.__value_.__l.__size_ = (std::string::size_type)(v203 + 16);
          v285.__r_.__value_.__r.__words[2] = v206;
          if (!v191)
            goto LABEL_456;
LABEL_455:
          operator delete(v191);
          goto LABEL_456;
        }
      }
      else
      {
        v202 = 0;
        v203 = (char *)(16 * v198);
        *(_OWORD *)(16 * v198) = *(_OWORD *)v189;
        v204 = 16 * v198;
        if (v191 == (void *)v192)
          goto LABEL_454;
      }
      do
      {
        *(_OWORD *)(v204 - 16) = *(_OWORD *)(v192 - 16);
        v204 -= 16;
        v192 -= 16;
      }
      while ((void *)v192 != v191);
      v191 = (void *)v285.__r_.__value_.__r.__words[0];
      v205 = (std::string::size_type)&v202[16 * v201];
      v197 = (std::string::size_type)(v203 + 16);
      v285.__r_.__value_.__r.__words[0] = v204;
      v285.__r_.__value_.__l.__size_ = (std::string::size_type)(v203 + 16);
      v285.__r_.__value_.__r.__words[2] = v205;
      if (v191)
        goto LABEL_455;
LABEL_456:
      v285.__r_.__value_.__l.__size_ = v197;
      v207 = sub_2231A8330((_QWORD *)(a1 + 320), v189);
      if (v207)
      {
        v208 = sub_2231D3830((_QWORD *)v207[4]);
        v138 = *(float *)&v281 - (float)(v208 / v64);
        *(float *)&v281 = v138;
        if (v138 <= 1.0)
          goto LABEL_518;
      }
      else
      {
        v209 = *(_QWORD *)(a1 + 368);
        v212 = *(_QWORD *)(v209 + 32);
        v211 = (_QWORD *)(v209 + 32);
        v210 = v212;
        if (!v212)
          goto LABEL_619;
        while (1)
        {
          while (1)
          {
            v213 = (_QWORD *)v210;
            v214 = (unsigned __int8 *)(v210 + 28);
            if (((char)sub_22319835C(v189, (unsigned __int8 *)(v210 + 28)) & 0x80000000) == 0)
              break;
            v210 = *v213;
            v211 = v213;
            if (!*v213)
              goto LABEL_619;
          }
          if (((char)sub_22319835C(v214, v189) & 0x80000000) == 0)
            break;
          v210 = v213[1];
          v211 = v213 + 1;
          if (!v210)
            goto LABEL_619;
        }
        if (!*v211)
          goto LABEL_619;
        v138 = *(float *)&v281 - (float)(*(float *)(*v211 + 44) / v64);
        *(float *)&v281 = v138;
        if (v138 <= 1.0)
          goto LABEL_518;
      }
    }
    while (v189 != v190);
  }
  v138 = *(float *)&v281;
  if (*(float *)&v281 > 1.0)
  {
    v215 = (char *)__p[1];
    if (__p[0] != __p[1])
    {
LABEL_477:
      v218 = sub_2231A8330((_QWORD *)(a1 + 320), (_QWORD *)v215 - 2);
      if (v218)
      {
        v216 = sub_2231D3830((_QWORD *)v218[4]);
        goto LABEL_473;
      }
      v219 = *(float **)(*(_QWORD *)(a1 + 368) + 32);
      if (!v219)
        goto LABEL_619;
      v220 = *(v215 - 16);
      while (1)
      {
        v221 = *((unsigned __int8 *)v219 + 28);
        v222 = v220 >= v221;
        if (v220 != v221)
          break;
        v223 = *(v215 - 15);
        v221 = *((unsigned __int8 *)v219 + 29);
        v222 = v223 >= v221;
        if (v223 == v221
          && (v223 = *(v215 - 14),
              v221 = *((unsigned __int8 *)v219 + 30),
              v222 = v223 >= v221,
              v223 == v221)
          && (v223 = *(v215 - 13),
              v221 = *((unsigned __int8 *)v219 + 31),
              v222 = v223 >= v221,
              v223 == v221))
        {
          v224 = *(v215 - 12);
          v225 = *((unsigned __int8 *)v219 + 32);
          if (v224 != v225)
            goto LABEL_497;
          v224 = *(v215 - 11);
          v225 = *((unsigned __int8 *)v219 + 33);
          if (v224 != v225)
            goto LABEL_497;
          v224 = *(v215 - 10);
          v225 = *((unsigned __int8 *)v219 + 34);
          if (v224 != v225)
            goto LABEL_497;
          v224 = *(v215 - 9);
          v225 = *((unsigned __int8 *)v219 + 35);
          if (v224 != v225)
            goto LABEL_497;
          v224 = *(v215 - 8);
          v225 = *((unsigned __int8 *)v219 + 36);
          if (v224 != v225)
            goto LABEL_497;
          v224 = *(v215 - 7);
          v225 = *((unsigned __int8 *)v219 + 37);
          if (v224 != v225)
            goto LABEL_497;
          v224 = *(v215 - 6);
          v225 = *((unsigned __int8 *)v219 + 38);
          if (v224 != v225)
            goto LABEL_497;
          v224 = *(v215 - 5);
          v225 = *((unsigned __int8 *)v219 + 39);
          if (v224 != v225)
            goto LABEL_497;
          v224 = *(v215 - 4);
          v225 = *((unsigned __int8 *)v219 + 40);
          if (v224 != v225
            || (v224 = *(v215 - 3), v225 = *((unsigned __int8 *)v219 + 41), v224 != v225)
            || (v224 = *(v215 - 2), v225 = *((unsigned __int8 *)v219 + 42), v224 != v225)
            || (v224 = *(v215 - 1), v225 = *((unsigned __int8 *)v219 + 43), v224 != v225))
          {
LABEL_497:
            if (v224 < v225)
              goto LABEL_480;
          }
          v221 = *((unsigned __int8 *)v219 + 32);
          v223 = *(v215 - 12);
          if (v221 == v223)
          {
            v221 = *((unsigned __int8 *)v219 + 33);
            v223 = *(v215 - 11);
            if (v221 == v223)
            {
              v221 = *((unsigned __int8 *)v219 + 34);
              v223 = *(v215 - 10);
              if (v221 == v223)
              {
                v221 = *((unsigned __int8 *)v219 + 35);
                v223 = *(v215 - 9);
                if (v221 == v223)
                {
                  v221 = *((unsigned __int8 *)v219 + 36);
                  v223 = *(v215 - 8);
                  if (v221 == v223)
                  {
                    v221 = *((unsigned __int8 *)v219 + 37);
                    v223 = *(v215 - 7);
                    if (v221 == v223)
                    {
                      v221 = *((unsigned __int8 *)v219 + 38);
                      v223 = *(v215 - 6);
                      if (v221 == v223)
                      {
                        v221 = *((unsigned __int8 *)v219 + 39);
                        v223 = *(v215 - 5);
                        if (v221 == v223)
                        {
                          v221 = *((unsigned __int8 *)v219 + 40);
                          v223 = *(v215 - 4);
                          if (v221 == v223)
                          {
                            v221 = *((unsigned __int8 *)v219 + 41);
                            v223 = *(v215 - 3);
                            if (v221 == v223)
                            {
                              v221 = *((unsigned __int8 *)v219 + 42);
                              v223 = *(v215 - 2);
                              if (v221 == v223)
                              {
                                v221 = *((unsigned __int8 *)v219 + 43);
                                v223 = *(v215 - 1);
                                if (v221 == v223)
                                {
LABEL_517:
                                  v216 = v219[11];
LABEL_473:
                                  v138 = *(float *)&v281 - (float)(v216 / v64);
                                  *(float *)&v281 = v138;
                                  v215 = (char *)__p[1] - 16;
                                  __p[1] = (char *)__p[1] - 16;
                                  if (v138 <= 1.0 || __p[0] == v215)
                                    goto LABEL_518;
                                  goto LABEL_477;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_514:
          if (v221 >= v223)
            goto LABEL_517;
          v219 = (float *)*((_QWORD *)v219 + 1);
          if (!v219)
            goto LABEL_619;
        }
        else
        {
LABEL_512:
          if (v222)
            goto LABEL_514;
LABEL_480:
          v219 = *(float **)v219;
          if (!v219)
            goto LABEL_619;
        }
      }
      v223 = *(v215 - 16);
      goto LABEL_512;
    }
  }
LABEL_518:
  if (v138 > 1.0
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeMemory.mm", 229, (uint64_t)"load_factor <= kMaxLoad", 23, (uint64_t)"Too many keyframes in memory", 28, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  *(_QWORD *)&v291 = "cv3d.recon.";
  *((_QWORD *)&v291 + 1) = 11;
  v226 = v282[23];
  v227 = v282;
  if (v282[23] < 0)
  {
    v227 = *(_BYTE **)v282;
    v226 = *(_QWORD *)&v282[8];
  }
  *(_QWORD *)v292 = v227;
  *(_QWORD *)&v292[8] = v226;
  sub_2231A9820((uint64_t)&v291, (uint64_t)&v292[16], 0, 0, &v284);
  sub_224569D7C();
  if (sub_224569C6C())
  {
    v228 = sub_2241471F8();
    v229 = sub_2241486EC((uint64_t)v228);
    if (!sub_2241053B4(v229))
    {
      v230 = sub_2241472E0();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v230 + 24))(v230))
      {
        v291 = 0u;
        *(_OWORD *)v292 = 0u;
        *(_DWORD *)&v292[16] = 728325608;
        kdebug_trace();
        sub_223189B60((double *)&qword_255788F20, v230, (float *)&v281, "load_factor_end");
        kdebug_trace();
      }
    }
  }
  v291 = 0u;
  *(_OWORD *)v292 = 0u;
  *(_DWORD *)&v292[16] = 728325624;
  kdebug_trace();
  v231 = HIBYTE(v284.__r_.__value_.__r.__words[2]);
  if ((v284.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v231 = v284.__r_.__value_.__l.__size_;
  if (v231 >= 0x11)
  {
    v232 = &v284;
    if ((v284.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v232 = (std::string *)v284.__r_.__value_.__r.__words[0];
    v233 = v232->__r_.__value_.__r.__words[0];
    v234 = v232->__r_.__value_.__l.__size_;
    v235 = v232->__r_.__value_.__s.__data_[16];
    if (v233 == 0x6365722E64337663 && v234 == 0x73746174532E6E6FLL && v235 == 46)
    {
      v238 = sub_223187510();
      if ((v284.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v239 = &v284;
      else
        v239 = (std::string *)v284.__r_.__value_.__r.__words[0];
      if ((v284.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v240 = HIBYTE(v284.__r_.__value_.__r.__words[2]);
      else
        v240 = v284.__r_.__value_.__l.__size_;
      sub_2231897A8((uint64_t *)v238, v239, v240, (float *)&v281, (uint64_t)"load_factor_end", 15);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v284.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v284.__r_.__value_.__l.__data_);
  *(_QWORD *)&v291 = "cv3d.recon.";
  *((_QWORD *)&v291 + 1) = 11;
  v241 = v282[23];
  v242 = v282;
  if (v282[23] < 0)
  {
    v242 = *(_BYTE **)v282;
    v241 = *(_QWORD *)&v282[8];
  }
  *(_QWORD *)v292 = v242;
  *(_QWORD *)&v292[8] = v241;
  sub_2231A9820((uint64_t)&v291, (uint64_t)&v292[16], 0, 0, &v284);
  sub_224569D7C();
  if (sub_224569C6C())
  {
    v243 = sub_2241471F8();
    v244 = sub_2241486EC((uint64_t)v243);
    if (!sub_2241053B4(v244))
    {
      v245 = sub_2241472E0();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v245 + 24))(v245))
      {
        v291 = 0u;
        *(_OWORD *)v292 = 0u;
        *(_DWORD *)&v292[16] = 728325608;
        kdebug_trace();
        v278.__r_.__value_.__r.__words[0] = (uint64_t)(v285.__r_.__value_.__l.__size_ - v285.__r_.__value_.__r.__words[0]) >> 4;
        sub_223189CA8((double *)&qword_255788F20, v245, (uint64_t *)&v278, "to_save");
        kdebug_trace();
      }
    }
  }
  v291 = 0u;
  *(_OWORD *)v292 = 0u;
  *(_DWORD *)&v292[16] = 728325624;
  kdebug_trace();
  v246 = HIBYTE(v284.__r_.__value_.__r.__words[2]);
  if ((v284.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v246 = v284.__r_.__value_.__l.__size_;
  if (v246 >= 0x11)
  {
    v247 = &v284;
    if ((v284.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v247 = (std::string *)v284.__r_.__value_.__r.__words[0];
    v248 = v247->__r_.__value_.__r.__words[0];
    v249 = v247->__r_.__value_.__l.__size_;
    v250 = v247->__r_.__value_.__s.__data_[16];
    if (v248 == 0x6365722E64337663 && v249 == 0x73746174532E6E6FLL && v250 == 46)
    {
      v253 = sub_223187510();
      if ((v284.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v254 = &v284;
      else
        v254 = (std::string *)v284.__r_.__value_.__r.__words[0];
      if ((v284.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v255 = HIBYTE(v284.__r_.__value_.__r.__words[2]);
      else
        v255 = v284.__r_.__value_.__l.__size_;
      v278.__r_.__value_.__r.__words[0] = (uint64_t)(v285.__r_.__value_.__l.__size_ - v285.__r_.__value_.__r.__words[0]) >> 4;
      sub_22318760C((uint64_t *)v253, v254, v255, (uint64_t *)&v278, (uint64_t)"to_save", 7);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v284.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v284.__r_.__value_.__l.__data_);
  *(_QWORD *)&v291 = "cv3d.recon.";
  *((_QWORD *)&v291 + 1) = 11;
  v256 = v282[23];
  v257 = v282;
  if (v282[23] < 0)
  {
    v257 = *(_BYTE **)v282;
    v256 = *(_QWORD *)&v282[8];
  }
  *(_QWORD *)v292 = v257;
  *(_QWORD *)&v292[8] = v256;
  sub_2231A9820((uint64_t)&v291, (uint64_t)&v292[16], 0, 0, &v284);
  sub_224569D7C();
  if (sub_224569C6C())
  {
    v258 = sub_2241471F8();
    v259 = sub_2241486EC((uint64_t)v258);
    if (!sub_2241053B4(v259))
    {
      v260 = sub_2241472E0();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v260 + 24))(v260))
      {
        v291 = 0u;
        *(_OWORD *)v292 = 0u;
        *(_DWORD *)&v292[16] = 728325608;
        kdebug_trace();
        v278.__r_.__value_.__r.__words[0] = ((char *)__p[1] - (char *)__p[0]) >> 4;
        sub_223189CA8((double *)&qword_255788F20, v260, (uint64_t *)&v278, "to_load");
        kdebug_trace();
      }
    }
  }
  v291 = 0u;
  *(_OWORD *)v292 = 0u;
  *(_DWORD *)&v292[16] = 728325624;
  kdebug_trace();
  v261 = HIBYTE(v284.__r_.__value_.__r.__words[2]);
  if ((v284.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v261 = v284.__r_.__value_.__l.__size_;
  if (v261 >= 0x11)
  {
    v262 = &v284;
    if ((v284.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v262 = (std::string *)v284.__r_.__value_.__r.__words[0];
    v263 = v262->__r_.__value_.__r.__words[0];
    v264 = v262->__r_.__value_.__l.__size_;
    v265 = v262->__r_.__value_.__s.__data_[16];
    if (v263 == 0x6365722E64337663 && v264 == 0x73746174532E6E6FLL && v265 == 46)
    {
      v268 = sub_223187510();
      if ((v284.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v269 = &v284;
      else
        v269 = (std::string *)v284.__r_.__value_.__r.__words[0];
      if ((v284.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v270 = HIBYTE(v284.__r_.__value_.__r.__words[2]);
      else
        v270 = v284.__r_.__value_.__l.__size_;
      v278.__r_.__value_.__r.__words[0] = ((char *)__p[1] - (char *)__p[0]) >> 4;
      sub_22318760C((uint64_t *)v268, v269, v270, (uint64_t *)&v278, (uint64_t)"to_load", 7);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v284.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v284.__r_.__value_.__l.__data_);
  *(_QWORD *)&v291 = &v285;
  BYTE8(v291) = 1;
  v284.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  v284.__r_.__value_.__s.__data_[8] = 1;
  v278.__r_.__value_.__s.__data_[0] = 0;
  v278.__r_.__value_.__s.__data_[8] = 0;
  LOBYTE(v283) = 0;
  BYTE8(v283) = 0;
  sub_223189DF0(a1, (uint64_t)&v291, (uint64_t)&v284, (uint64_t)&v278, (uint64_t)&v283);
  kdebug_trace();
  if (v285.__r_.__value_.__r.__words[0])
  {
    v285.__r_.__value_.__l.__size_ = v285.__r_.__value_.__r.__words[0];
    operator delete(v285.__r_.__value_.__l.__data_);
  }
  if ((v282[23] & 0x80000000) != 0)
    operator delete(*(void **)v282);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (!v289)
    sub_223198474();
  (*(void (**)(_BYTE *))(*(_QWORD *)v289 + 48))(v289);
  result = v289;
  if (v289 == v288)
  {
    v272 = 4;
    result = v288;
  }
  else
  {
    if (!v289)
      return result;
    v272 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v272))();
}

void sub_223186F40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_223187394(double *a1, uint64_t a2, uint64_t *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;
  __int128 v17;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        sub_2245054E8((uint64_t)&v17, (uint64_t)(*a1 * 1000000000.0), 2);
        v14 = v17;
        v13 = sub_2241471F8();
        sub_2231AD778((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_2231874C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2231874DC(uint64_t a1)
{
  kdebug_trace();
  return a1;
}

__n128 *sub_223187510()
{
  unsigned __int8 v0;
  unint64_t *v2;
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 v6;

  v0 = atomic_load((unsigned __int8 *)&qword_255788F38);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255788F38))
    return &off_255788F28;
  v2 = (unint64_t *)sub_223FD6598();
  v3 = v2[1];
  v6.n128_u64[0] = *v2;
  v6.n128_u64[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  sub_223FF1D00(&off_255788F28, &v6);
  sub_22319828C((uint64_t)&v6);
  __cxa_atexit((void (*)(void *))sub_2231982F4, &off_255788F28, &dword_22314D000);
  __cxa_guard_release(&qword_255788F38);
  return &off_255788F28;
}

void sub_2231875D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319828C((uint64_t)&a9);
  __cxa_guard_abort(&qword_255788F38);
  _Unwind_Resume(a1);
}

void sub_2231875F4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255788F38);
  _Unwind_Resume(a1);
}

void sub_22318760C(uint64_t *a1, void *a2, size_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  std::string *p_p;
  size_t size;
  std::string __p;
  _QWORD v11[6];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (a6)
  {
    v7 = *a1;
    v11[0] = a2;
    v11[1] = a3;
    v11[2] = ".";
    v11[3] = 1;
    v11[4] = a5;
    v11[5] = a6;
    sub_2231A9820((uint64_t)v11, (uint64_t)&v12, 0, 0, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    sub_223FD4A28(v7, p_p, size, a4);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    sub_223FD4A28(*a1, a2, a3, a4);
  }
}

void sub_22318770C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_223187734(double *a1, uint64_t a2, uint64_t *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;
  __int128 v17;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        sub_2245054E8((uint64_t)&v17, (uint64_t)(*a1 * 1000000000.0), 2);
        v14 = v17;
        v13 = sub_2241471F8();
        sub_2231AD778((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_223187860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22318787C(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t **v4;
  int v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t **v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  const char *v25;
  size_t v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  const char *v29;
  size_t v30;
  NSObject *v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  os_log_type_t v39;
  NSObject *v40;
  NSObject *v41;
  size_t v42;
  std::__shared_weak_count_vtbl *v43;
  std::__shared_weak_count *v44;
  size_t v45;
  size_t v46;
  void **v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  char *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  const char *v70;
  void *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t (**v78)();
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  const char *v99;
  size_t v100;
  unsigned __int8 v101;
  unsigned __int8 v102;
  const char *v103;
  size_t v104;
  NSObject *v105;
  _BYTE *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  id v112;
  os_log_type_t v113;
  NSObject *v114;
  NSObject *v115;
  size_t v116;
  std::__shared_weak_count_vtbl *v117;
  std::__shared_weak_count *v118;
  size_t v119;
  size_t v120;
  void **v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  char *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  const char *v144;
  void *v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  uint64_t (**v152)();
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  _QWORD *v168;
  void **v169;
  void *v170;
  void **v171;
  char *v172;
  char *v173;
  void *v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  void *v178;
  std::mutex *v179;
  const char *v180;
  const char *v181;
  uint64_t v182;
  uint64_t v183;
  unsigned __int8 *v184;
  uint64_t *v185;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v187;
  int v188;
  const char *v189;
  int v190;
  const char *v191;
  uint64_t v192;
  std::__shared_weak_count *v193;
  uint64_t v194;
  uint64_t (**v195)();
  void *__p[3];
  void *v197[2];
  std::__shared_weak_count *v198;
  char *v199;
  std::__shared_weak_count *v200;
  void **v201;
  __int128 v202;
  char __s[37];
  _BYTE v204[24];
  __int128 v205;
  char *v206;
  size_t v207;
  unint64_t v208;
  char v209;
  uint64_t v210;

  v210 = *MEMORY[0x24BDAC8D0];
  v179 = (std::mutex *)(a1 + 448);
  std::mutex::lock((std::mutex *)(a1 + 448));
  kdebug_trace();
  v2 = *(_QWORD *)(a1 + 792);
  for (i = *(_QWORD *)(a1 + 800); v2 != i; v2 += 20)
  {
    ++*(_DWORD *)(a1 + 384);
    if (sub_2231A88F8((_QWORD *)(a1 + 320), (_QWORD *)v2))
    {
      if (!sub_223192878(a1 + 320, (_QWORD *)v2)
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeMemory.mm", 553, (uint64_t)"res", 3, (uint64_t)"Failed to remove keyframe from shared memory", 44, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v4 = *(uint64_t ***)(a1 + 368);
      v5 = *(_DWORD *)(v2 + 16);
      sub_2231A9984(v4, (unsigned __int8 *)v2, (_OWORD *)v2);
      *(_QWORD *)v204 = v2;
      *((_DWORD *)sub_2231A9C40(v4 + 3, (unsigned __int8 *)v2, (uint64_t)&unk_2245BA939, (_OWORD **)v204) + 11) = v5;
    }
  }
  v6 = *(unsigned __int8 **)(a1 + 816);
  v7 = *(unsigned __int8 **)(a1 + 824);
  if (v6 == v7)
    goto LABEL_60;
  if (!*(_QWORD *)(*(_QWORD *)(a1 + 368) + 8))
  {
    *(_DWORD *)(a1 + 388) += ((unint64_t)(v7 - v6 + 0x1FFFFFFFE0) >> 5) + 1;
    goto LABEL_60;
  }
  while (2)
  {
    ++*(_DWORD *)(a1 + 388);
    v8 = *(_QWORD *)(a1 + 368);
    v9 = *(uint64_t ***)(v8 + 8);
    if (!v9)
      goto LABEL_12;
    v10 = *v6;
    while (1)
    {
      v11 = *((unsigned __int8 *)v9 + 25);
      v12 = v10 >= v11;
      if (v10 != v11)
      {
        v13 = *v6;
LABEL_51:
        if (!v12)
          goto LABEL_17;
        goto LABEL_15;
      }
      v13 = v6[1];
      v11 = *((unsigned __int8 *)v9 + 26);
      v12 = v13 >= v11;
      if (v13 != v11)
        goto LABEL_51;
      v14 = v6[2];
      v15 = *((unsigned __int8 *)v9 + 27);
      if (v14 != v15)
        goto LABEL_34;
      v14 = v6[3];
      v15 = *((unsigned __int8 *)v9 + 28);
      if (v14 != v15)
        goto LABEL_34;
      v14 = v6[4];
      v15 = *((unsigned __int8 *)v9 + 29);
      if (v14 != v15)
        goto LABEL_34;
      v14 = v6[5];
      v15 = *((unsigned __int8 *)v9 + 30);
      if (v14 != v15)
        goto LABEL_34;
      v14 = v6[6];
      v15 = *((unsigned __int8 *)v9 + 31);
      if (v14 != v15)
        goto LABEL_34;
      v14 = v6[7];
      v15 = *((unsigned __int8 *)v9 + 32);
      if (v14 != v15)
        goto LABEL_34;
      v14 = v6[8];
      v15 = *((unsigned __int8 *)v9 + 33);
      if (v14 != v15)
        goto LABEL_34;
      v14 = v6[9];
      v15 = *((unsigned __int8 *)v9 + 34);
      if (v14 != v15)
        goto LABEL_34;
      v14 = v6[10];
      v15 = *((unsigned __int8 *)v9 + 35);
      if (v14 != v15)
        goto LABEL_34;
      v14 = v6[11];
      v15 = *((unsigned __int8 *)v9 + 36);
      if (v14 != v15)
        goto LABEL_34;
      v14 = v6[12];
      v15 = *((unsigned __int8 *)v9 + 37);
      if (v14 != v15
        || (v14 = v6[13], v15 = *((unsigned __int8 *)v9 + 38), v14 != v15)
        || (v14 = v6[14], v15 = *((unsigned __int8 *)v9 + 39), v14 != v15)
        || (v14 = v6[15], v15 = *((unsigned __int8 *)v9 + 40), v14 != v15))
      {
LABEL_34:
        if (v14 < v15)
          goto LABEL_17;
      }
      v11 = *((unsigned __int8 *)v9 + 27);
      v13 = v6[2];
      if (v11 == v13)
      {
        v11 = *((unsigned __int8 *)v9 + 28);
        v13 = v6[3];
        if (v11 == v13)
        {
          v11 = *((unsigned __int8 *)v9 + 29);
          v13 = v6[4];
          if (v11 == v13)
          {
            v11 = *((unsigned __int8 *)v9 + 30);
            v13 = v6[5];
            if (v11 == v13)
            {
              v11 = *((unsigned __int8 *)v9 + 31);
              v13 = v6[6];
              if (v11 == v13)
              {
                v11 = *((unsigned __int8 *)v9 + 32);
                v13 = v6[7];
                if (v11 == v13)
                {
                  v11 = *((unsigned __int8 *)v9 + 33);
                  v13 = v6[8];
                  if (v11 == v13)
                  {
                    v11 = *((unsigned __int8 *)v9 + 34);
                    v13 = v6[9];
                    if (v11 == v13)
                    {
                      v11 = *((unsigned __int8 *)v9 + 35);
                      v13 = v6[10];
                      if (v11 == v13)
                      {
                        v11 = *((unsigned __int8 *)v9 + 36);
                        v13 = v6[11];
                        if (v11 == v13)
                        {
                          v11 = *((unsigned __int8 *)v9 + 37);
                          v13 = v6[12];
                          if (v11 == v13)
                          {
                            v11 = *((unsigned __int8 *)v9 + 38);
                            v13 = v6[13];
                            if (v11 == v13)
                            {
                              v11 = *((unsigned __int8 *)v9 + 39);
                              v13 = v6[14];
                              if (v11 == v13)
                              {
                                v11 = *((unsigned __int8 *)v9 + 40);
                                v13 = v6[15];
                                if (v11 == v13)
                                  break;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_15:
      if (v11 >= v13)
        break;
      ++v9;
LABEL_17:
      v9 = (uint64_t **)*v9;
      if (!v9)
        goto LABEL_12;
    }
    v16 = sub_2231AFD68(*(unsigned __int8 ***)(a1 + 368), v6);
    v17 = sub_2231B0224((unsigned __int8 **)(v8 + 24), v6);
    if ((v16 != 0) != (v17 != 0)
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/include_private/Reconstruction/Keyframing/KeyframeDiskPool.hpp", 120, (uint64_t)"!(d_erased ^ f_erased)", 22, (uint64_t)"data or footprint is missing", 28, (void (*)(void **))sub_22457406C)|| (!v16 || !v17)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeMemory.mm", 561, (uint64_t)"res", 3, (uint64_t)"Failed to remove keyframe from disk", 35, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_2231929A8(a1 + 320, (uint64_t *)v6 + 2, v6);
LABEL_12:
    v6 += 32;
    if (v6 != v7)
      continue;
    break;
  }
LABEL_60:
  v18 = *(unsigned __int8 **)(a1 + 840);
  v19 = *(unsigned __int8 **)(a1 + 848);
  if (v18 != v19)
  {
    v184 = *(unsigned __int8 **)(a1 + 848);
    while (2)
    {
      sub_223182B14(&v194);
      if (**(int **)(v194 + 56) > 2)
        goto LABEL_181;
      v20 = *(unsigned __int8 *)(v194 + 72);
      v21 = sub_22455F97C(&v194);
      v22 = v21;
      if (!v20 && v21 == 0)
        goto LABEL_181;
      v185 = &v194;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v187 = std::chrono::system_clock::now().__d_.__rep_;
      v188 = 2;
      v189 = "unknown file";
      v190 = 567;
      v191 = "unknown function";
      v192 = 0;
      v193 = 0;
      sub_2245664AC(v18, __s);
      v24 = *v185;
      v25 = (const char *)(*v185 + 16);
      v180 = v25;
      v182 = *v185;
      if (*(char *)(*v185 + 39) < 0)
      {
        v25 = *(const char **)(v24 + 16);
        v26 = *(_QWORD *)(v24 + 24);
        v28 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v28 & 1) == 0)
        {
LABEL_301:
          if (__cxa_guard_acquire(&qword_255788F58))
          {
            sub_224568628((uint64_t)v197);
            sub_223199C58("com.apple.cv3d", (unint64_t)v197, &xmmword_255788F40);
            if ((_BYTE)v199 && SHIBYTE(v198) < 0)
              operator delete(v197[0]);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
            __cxa_guard_release(&qword_255788F58);
          }
        }
      }
      else
      {
        v26 = *(unsigned __int8 *)(*v185 + 39);
        v27 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v27 & 1) == 0)
          goto LABEL_301;
      }
      if (byte_255788F57 >= 0)
        v29 = (const char *)&xmmword_255788F40;
      else
        v29 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v30 = byte_255788F57;
      else
        v30 = *((_QWORD *)&xmmword_255788F40 + 1);
      v31 = os_log_create(v29, v25);
      *(_QWORD *)v204 = v31;

      if (v30 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v30 >= 0x17)
      {
        v33 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v30 | 7) != 0x17)
          v33 = v30 | 7;
        v34 = v33 + 1;
        v32 = operator new(v33 + 1);
        *(_QWORD *)&v204[16] = v30;
        *(_QWORD *)&v205 = v34 | 0x8000000000000000;
        *(_QWORD *)&v204[8] = v32;
      }
      else
      {
        BYTE7(v205) = v30;
        v32 = &v204[8];
        if (!v30)
        {
LABEL_87:
          v32[v30] = 0;
          BYTE8(v205) = 1;
          if (v26 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v26 >= 0x17)
          {
            v36 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v26 | 7) != 0x17)
              v36 = v26 | 7;
            v37 = v36 + 1;
            v35 = (char *)operator new(v36 + 1);
            v207 = v26;
            v208 = v37 | 0x8000000000000000;
            v206 = v35;
          }
          else
          {
            HIBYTE(v208) = v26;
            v35 = (char *)&v206;
            if (!v26)
              goto LABEL_95;
          }
          memmove(v35, v25, v26);
LABEL_95:
          v35[v26] = 0;
          v209 = 1;
          v38 = objc_retainAutorelease(*(id *)v204);
          if (v209 && SHIBYTE(v208) < 0)
            operator delete(v206);
          if (BYTE8(v205) && SBYTE7(v205) < 0)
            operator delete(*(void **)&v204[8]);

          v39 = sub_22455F7B4(2u);
          v40 = v38;
          v41 = v40;
          if (v22 && *(_QWORD *)(v22 + 8))
          {
            v42 = _os_log_pack_size();
            v43 = (std::__shared_weak_count_vtbl *)operator new(v42, (std::align_val_t)8uLL);
            v44 = (std::__shared_weak_count *)operator new();
            v44->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v44->__shared_owners_ = 0;
            v44->__shared_weak_owners_ = 0;
            v44[1].__vftable = v43;
            v197[0] = v43;
            v197[1] = v43;
            v198 = v44;
            v199 = 0;
            v200 = 0;
            v45 = strlen(__s);
            if (v45 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v46 = v45;
            if (v45 >= 0x17)
            {
              v49 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v45 | 7) != 0x17)
                v49 = v45 | 7;
              v50 = v49 + 1;
              v47 = (void **)operator new(v49 + 1);
              *(_QWORD *)&v202 = v46;
              *((_QWORD *)&v202 + 1) = v50 | 0x8000000000000000;
              v201 = v47;
            }
            else
            {
              HIBYTE(v202) = v45;
              v47 = (void **)&v201;
              if (!v45)
                goto LABEL_113;
            }
            memcpy(v47, __s, v46);
LABEL_113:
            *((_BYTE *)v47 + v46) = 0;
            __p[1] = (void *)v202;
            *(void **)((char *)&__p[1] + 7) = *(void **)((char *)&v202 + 7);
            v195 = off_24EC1FA48;
            __p[0] = v201;
            HIBYTE(__p[2]) = HIBYTE(v202);
            v51 = operator new(0x38uLL);
            v51[1] = 0;
            v51[2] = 0;
            *v51 = &off_24EC1F9F8;
            v51[3] = off_24EC1FA48;
            *((_OWORD *)v51 + 2) = *(_OWORD *)__p;
            v51[6] = __p[2];
            memset(__p, 0, sizeof(__p));
            v52 = v200;
            v199 = (char *)(v51 + 3);
            v200 = (std::__shared_weak_count *)v51;
            if (!v52)
              goto LABEL_117;
            p_shared_owners = (unint64_t *)&v52->__shared_owners_;
            do
              v54 = __ldaxr(p_shared_owners);
            while (__stlxr(v54 - 1, p_shared_owners));
            if (!v54)
            {
              ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
              std::__shared_weak_count::__release_weak(v52);
              if (SHIBYTE(__p[2]) < 0)
LABEL_118:
                operator delete(__p[0]);
            }
            else
            {
LABEL_117:
              if (SHIBYTE(__p[2]) < 0)
                goto LABEL_118;
            }
            nullsub_30(&v195);
            *(_OWORD *)v204 = *(_OWORD *)v197;
            v55 = v199;
            *(_QWORD *)&v204[16] = v198;
            if (v198)
            {
              v56 = (unint64_t *)&v198->__shared_owners_;
              do
                v57 = __ldxr(v56);
              while (__stxr(v57 + 1, v56));
            }
            v58 = v200;
            *(_QWORD *)&v205 = v55;
            *((_QWORD *)&v205 + 1) = v200;
            if (v200)
            {
              v59 = (unint64_t *)&v200->__shared_owners_;
              do
                v60 = __ldxr(v59);
              while (__stxr(v60 + 1, v59));
              v206 = v55;
              do
                v61 = __ldaxr(v59);
              while (__stlxr(v61 - 1, v59));
              if (!v61)
              {
                ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                std::__shared_weak_count::__release_weak(v58);
              }
            }
            else
            {
              v206 = v55;
            }
            v62 = v198;
            if (v198)
            {
              v63 = (unint64_t *)&v198->__shared_owners_;
              do
                v64 = __ldaxr(v63);
              while (__stlxr(v64 - 1, v63));
              if (!v64)
              {
                ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                std::__shared_weak_count::__release_weak(v62);
              }
            }
            v65 = *(_QWORD *)v204;
            if (v206[31] >= 0)
              v66 = v206 + 8;
            else
              v66 = (char *)*((_QWORD *)v206 + 1);
            v67 = _os_log_pack_fill();
            *(_DWORD *)v67 = 136315138;
            *(_QWORD *)(v67 + 4) = v66;
            v68 = (char *)operator new();
            v69 = *(unsigned __int8 *)(v182 + 39);
            v70 = v180;
            if ((v69 & 0x80u) != 0)
            {
              v70 = *(const char **)(v182 + 16);
              v69 = *(_QWORD *)(v182 + 24);
            }
            *(_QWORD *)v68 = v65;
            *(_OWORD *)(v68 + 8) = *(_OWORD *)&v204[8];
            *(_QWORD *)&v204[8] = 0;
            *(_QWORD *)&v204[16] = 0;
            *(_OWORD *)(v68 + 24) = v205;
            v205 = 0uLL;
            *((_QWORD *)v68 + 5) = v70;
            *((_QWORD *)v68 + 6) = v69;
            v68[56] = v39;
            v195 = 0;
            v197[0] = v68;
            (*(void (**)(_QWORD, void **))(**(_QWORD **)(v22 + 8) + 40))(*(_QWORD *)(v22 + 8), v197);
            v71 = v197[0];
            v197[0] = 0;
            if (v71)
            {
              v72 = (std::__shared_weak_count *)*((_QWORD *)v71 + 4);
              if (v72)
              {
                v73 = (unint64_t *)&v72->__shared_owners_;
                do
                  v74 = __ldaxr(v73);
                while (__stlxr(v74 - 1, v73));
                if (!v74)
                {
                  ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                  std::__shared_weak_count::__release_weak(v72);
                }
              }
              v75 = (std::__shared_weak_count *)*((_QWORD *)v71 + 2);
              if (v75)
              {
                v76 = (unint64_t *)&v75->__shared_owners_;
                do
                  v77 = __ldaxr(v76);
                while (__stlxr(v77 - 1, v76));
                if (!v77)
                {
                  ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                  std::__shared_weak_count::__release_weak(v75);
                }
              }
              MEMORY[0x227684CE8](v71, 0x10F0C40B62ED6C6);
              v78 = v195;
              v195 = 0;
              if (v78)
              {
                v79 = (std::__shared_weak_count *)v78[4];
                if (v79)
                {
                  v80 = (unint64_t *)&v79->__shared_owners_;
                  do
                    v81 = __ldaxr(v80);
                  while (__stlxr(v81 - 1, v80));
                  if (!v81)
                  {
                    ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                    std::__shared_weak_count::__release_weak(v79);
                  }
                }
                v82 = (std::__shared_weak_count *)v78[2];
                if (v82)
                {
                  v83 = (unint64_t *)&v82->__shared_owners_;
                  do
                    v84 = __ldaxr(v83);
                  while (__stlxr(v84 - 1, v83));
                  if (!v84)
                  {
                    ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                    std::__shared_weak_count::__release_weak(v82);
                  }
                }
                MEMORY[0x227684CE8](v78, 0x10F0C40B62ED6C6);
              }
            }
            v85 = (std::__shared_weak_count *)*((_QWORD *)&v205 + 1);
            if (*((_QWORD *)&v205 + 1))
            {
              v86 = (unint64_t *)(*((_QWORD *)&v205 + 1) + 8);
              do
                v87 = __ldaxr(v86);
              while (__stlxr(v87 - 1, v86));
              if (!v87)
              {
                ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                std::__shared_weak_count::__release_weak(v85);
              }
            }
            v88 = *(std::__shared_weak_count **)&v204[16];
            if (*(_QWORD *)&v204[16])
            {
              v89 = (unint64_t *)(*(_QWORD *)&v204[16] + 8);
              do
                v90 = __ldaxr(v89);
              while (__stlxr(v90 - 1, v89));
              if (!v90)
              {
                ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                std::__shared_weak_count::__release_weak(v88);
              }
            }
          }
          else
          {
            os_log_type_enabled(v40, v39);
            *(_DWORD *)v204 = 136315138;
            *(_QWORD *)&v204[4] = __s;
            v48 = (void *)_os_log_send_and_compose_impl();
            if (v48)
              free(v48);
          }

          if (v20)
          {
            sub_2245664AC(v18, v204);
            sub_22322C138((uint64_t)&v185, "Update save_time for persisted keyframe with key %s", v204);
            sub_223182C08((uint64_t)&v185);
          }
          sub_223182C08((uint64_t)&v185);
          v91 = v193;
          if (v193)
          {
            v92 = (unint64_t *)&v193->__shared_owners_;
            do
              v93 = __ldaxr(v92);
            while (__stlxr(v93 - 1, v92));
            if (!v93)
            {
              ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
              std::__shared_weak_count::__release_weak(v91);
            }
          }
          v19 = v184;
LABEL_181:
          ++*(_DWORD *)(a1 + 392);
          v94 = *(_QWORD *)(a1 + 656);
          if (!v94)
            sub_223198474();
          if (((*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v94 + 48))(v94, v18) & 1) != 0)
            goto LABEL_63;
          sub_223192614(&v194);
          if (**(int **)(v194 + 56) > 4)
            goto LABEL_63;
          v95 = *(unsigned __int8 *)(v194 + 72);
          v96 = sub_22455F97C(&v194);
          v97 = v96;
          if (!v95 && !v96)
            goto LABEL_63;
          v185 = &v194;
          rep = std::chrono::steady_clock::now().__d_.__rep_;
          v187 = std::chrono::system_clock::now().__d_.__rep_;
          v188 = 4;
          v189 = "unknown file";
          v190 = 572;
          v191 = "unknown function";
          v192 = 0;
          v193 = 0;
          sub_2245664AC(v18, __s);
          v98 = *v185;
          v99 = (const char *)(*v185 + 16);
          v181 = v99;
          v183 = *v185;
          if (*(char *)(*v185 + 39) < 0)
          {
            v99 = *(const char **)(v98 + 16);
            v100 = *(_QWORD *)(v98 + 24);
            v102 = atomic_load((unsigned __int8 *)&qword_255788F58);
            if ((v102 & 1) != 0)
              goto LABEL_190;
          }
          else
          {
            v100 = *(unsigned __int8 *)(*v185 + 39);
            v101 = atomic_load((unsigned __int8 *)&qword_255788F58);
            if ((v101 & 1) != 0)
              goto LABEL_190;
          }
          if (__cxa_guard_acquire(&qword_255788F58))
          {
            sub_224568628((uint64_t)v197);
            sub_223199C58("com.apple.cv3d", (unint64_t)v197, &xmmword_255788F40);
            if ((_BYTE)v199 && SHIBYTE(v198) < 0)
              operator delete(v197[0]);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
            __cxa_guard_release(&qword_255788F58);
          }
LABEL_190:
          if (byte_255788F57 >= 0)
            v103 = (const char *)&xmmword_255788F40;
          else
            v103 = (const char *)xmmword_255788F40;
          if (byte_255788F57 >= 0)
            v104 = byte_255788F57;
          else
            v104 = *((_QWORD *)&xmmword_255788F40 + 1);
          v105 = os_log_create(v103, v99);
          *(_QWORD *)v204 = v105;

          if (v104 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v104 >= 0x17)
          {
            v107 = (v104 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v104 | 7) != 0x17)
              v107 = v104 | 7;
            v108 = v107 + 1;
            v106 = operator new(v107 + 1);
            *(_QWORD *)&v204[16] = v104;
            *(_QWORD *)&v205 = v108 | 0x8000000000000000;
            *(_QWORD *)&v204[8] = v106;
LABEL_203:
            memmove(v106, v103, v104);
            goto LABEL_204;
          }
          BYTE7(v205) = v104;
          v106 = &v204[8];
          if (v104)
            goto LABEL_203;
LABEL_204:
          v106[v104] = 0;
          BYTE8(v205) = 1;
          if (v100 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v100 >= 0x17)
          {
            v110 = (v100 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v100 | 7) != 0x17)
              v110 = v100 | 7;
            v111 = v110 + 1;
            v109 = (char *)operator new(v110 + 1);
            v207 = v100;
            v208 = v111 | 0x8000000000000000;
            v206 = v109;
          }
          else
          {
            HIBYTE(v208) = v100;
            v109 = (char *)&v206;
            if (!v100)
              goto LABEL_212;
          }
          memmove(v109, v99, v100);
LABEL_212:
          v109[v100] = 0;
          v209 = 1;
          v112 = objc_retainAutorelease(*(id *)v204);
          if (v209 && SHIBYTE(v208) < 0)
            operator delete(v206);
          if (BYTE8(v205) && SBYTE7(v205) < 0)
            operator delete(*(void **)&v204[8]);

          v113 = sub_22455F7B4(4u);
          v114 = v112;
          v115 = v114;
          if (!v97 || !*(_QWORD *)(v97 + 8))
          {
            os_log_type_enabled(v114, v113);
            *(_DWORD *)v204 = 136315138;
            *(_QWORD *)&v204[4] = __s;
            v122 = (void *)_os_log_send_and_compose_impl();
            if (v122)
              free(v122);
            goto LABEL_292;
          }
          v116 = _os_log_pack_size();
          v117 = (std::__shared_weak_count_vtbl *)operator new(v116, (std::align_val_t)8uLL);
          v118 = (std::__shared_weak_count *)operator new();
          v118->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v118->__shared_owners_ = 0;
          v118->__shared_weak_owners_ = 0;
          v118[1].__vftable = v117;
          v197[0] = v117;
          v197[1] = v117;
          v198 = v118;
          v199 = 0;
          v200 = 0;
          v119 = strlen(__s);
          if (v119 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          v120 = v119;
          if (v119 >= 0x17)
          {
            v123 = (v119 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v119 | 7) != 0x17)
              v123 = v119 | 7;
            v124 = v123 + 1;
            v121 = (void **)operator new(v123 + 1);
            *(_QWORD *)&v202 = v120;
            *((_QWORD *)&v202 + 1) = v124 | 0x8000000000000000;
            v201 = v121;
          }
          else
          {
            HIBYTE(v202) = v119;
            v121 = (void **)&v201;
            if (!v119)
              goto LABEL_230;
          }
          memcpy(v121, __s, v120);
LABEL_230:
          *((_BYTE *)v121 + v120) = 0;
          __p[1] = (void *)v202;
          *(void **)((char *)&__p[1] + 7) = *(void **)((char *)&v202 + 7);
          v195 = off_24EC1FA48;
          __p[0] = v201;
          HIBYTE(__p[2]) = HIBYTE(v202);
          v125 = operator new(0x38uLL);
          v125[1] = 0;
          v125[2] = 0;
          *v125 = &off_24EC1F9F8;
          v125[3] = off_24EC1FA48;
          *((_OWORD *)v125 + 2) = *(_OWORD *)__p;
          v125[6] = __p[2];
          memset(__p, 0, sizeof(__p));
          v126 = v200;
          v199 = (char *)(v125 + 3);
          v200 = (std::__shared_weak_count *)v125;
          if (v126)
          {
            v127 = (unint64_t *)&v126->__shared_owners_;
            do
              v128 = __ldaxr(v127);
            while (__stlxr(v128 - 1, v127));
            if (!v128)
            {
              ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
              std::__shared_weak_count::__release_weak(v126);
              if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
                goto LABEL_236;
LABEL_235:
              operator delete(__p[0]);
              goto LABEL_236;
            }
          }
          if (SHIBYTE(__p[2]) < 0)
            goto LABEL_235;
LABEL_236:
          nullsub_30(&v195);
          *(_OWORD *)v204 = *(_OWORD *)v197;
          v129 = v199;
          *(_QWORD *)&v204[16] = v198;
          if (v198)
          {
            v130 = (unint64_t *)&v198->__shared_owners_;
            do
              v131 = __ldxr(v130);
            while (__stxr(v131 + 1, v130));
          }
          v132 = v200;
          *(_QWORD *)&v205 = v129;
          *((_QWORD *)&v205 + 1) = v200;
          if (v200)
          {
            v133 = (unint64_t *)&v200->__shared_owners_;
            do
              v134 = __ldxr(v133);
            while (__stxr(v134 + 1, v133));
            v206 = v129;
            do
              v135 = __ldaxr(v133);
            while (__stlxr(v135 - 1, v133));
            if (!v135)
            {
              ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
              std::__shared_weak_count::__release_weak(v132);
            }
          }
          else
          {
            v206 = v129;
          }
          v136 = v198;
          if (v198)
          {
            v137 = (unint64_t *)&v198->__shared_owners_;
            do
              v138 = __ldaxr(v137);
            while (__stlxr(v138 - 1, v137));
            if (!v138)
            {
              ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
              std::__shared_weak_count::__release_weak(v136);
            }
          }
          v139 = *(_QWORD *)v204;
          if (v206[31] >= 0)
            v140 = v206 + 8;
          else
            v140 = (char *)*((_QWORD *)v206 + 1);
          v141 = _os_log_pack_fill();
          *(_DWORD *)v141 = 136315138;
          *(_QWORD *)(v141 + 4) = v140;
          v142 = (char *)operator new();
          v143 = *(unsigned __int8 *)(v183 + 39);
          v144 = v181;
          if ((v143 & 0x80u) != 0)
          {
            v144 = *(const char **)(v183 + 16);
            v143 = *(_QWORD *)(v183 + 24);
          }
          *(_QWORD *)v142 = v139;
          *(_OWORD *)(v142 + 8) = *(_OWORD *)&v204[8];
          *(_QWORD *)&v204[8] = 0;
          *(_QWORD *)&v204[16] = 0;
          *(_OWORD *)(v142 + 24) = v205;
          v205 = 0uLL;
          *((_QWORD *)v142 + 5) = v144;
          *((_QWORD *)v142 + 6) = v143;
          v142[56] = v113;
          v195 = 0;
          v197[0] = v142;
          (*(void (**)(_QWORD, void **))(**(_QWORD **)(v97 + 8) + 40))(*(_QWORD *)(v97 + 8), v197);
          v145 = v197[0];
          v197[0] = 0;
          if (v145)
          {
            v146 = (std::__shared_weak_count *)*((_QWORD *)v145 + 4);
            if (v146)
            {
              v147 = (unint64_t *)&v146->__shared_owners_;
              do
                v148 = __ldaxr(v147);
              while (__stlxr(v148 - 1, v147));
              if (!v148)
              {
                ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
                std::__shared_weak_count::__release_weak(v146);
              }
            }
            v149 = (std::__shared_weak_count *)*((_QWORD *)v145 + 2);
            if (v149)
            {
              v150 = (unint64_t *)&v149->__shared_owners_;
              do
                v151 = __ldaxr(v150);
              while (__stlxr(v151 - 1, v150));
              if (!v151)
              {
                ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
                std::__shared_weak_count::__release_weak(v149);
              }
            }
            MEMORY[0x227684CE8](v145, 0x10F0C40B62ED6C6);
            v152 = v195;
            v195 = 0;
            if (v152)
            {
              v153 = (std::__shared_weak_count *)v152[4];
              if (v153)
              {
                v154 = (unint64_t *)&v153->__shared_owners_;
                do
                  v155 = __ldaxr(v154);
                while (__stlxr(v155 - 1, v154));
                if (!v155)
                {
                  ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                  std::__shared_weak_count::__release_weak(v153);
                }
              }
              v156 = (std::__shared_weak_count *)v152[2];
              if (v156)
              {
                v157 = (unint64_t *)&v156->__shared_owners_;
                do
                  v158 = __ldaxr(v157);
                while (__stlxr(v158 - 1, v157));
                if (!v158)
                {
                  ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
                  std::__shared_weak_count::__release_weak(v156);
                }
              }
              MEMORY[0x227684CE8](v152, 0x10F0C40B62ED6C6);
            }
          }
          v159 = (std::__shared_weak_count *)*((_QWORD *)&v205 + 1);
          if (*((_QWORD *)&v205 + 1))
          {
            v160 = (unint64_t *)(*((_QWORD *)&v205 + 1) + 8);
            do
              v161 = __ldaxr(v160);
            while (__stlxr(v161 - 1, v160));
            if (!v161)
            {
              ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
              std::__shared_weak_count::__release_weak(v159);
            }
          }
          v162 = *(std::__shared_weak_count **)&v204[16];
          if (*(_QWORD *)&v204[16])
          {
            v163 = (unint64_t *)(*(_QWORD *)&v204[16] + 8);
            do
              v164 = __ldaxr(v163);
            while (__stlxr(v164 - 1, v163));
            if (!v164)
            {
              ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
              std::__shared_weak_count::__release_weak(v162);
            }
          }
LABEL_292:

          if (v95)
          {
            sub_2245664AC(v18, v204);
            sub_22322C138((uint64_t)&v185, "Failed to update metadata for keyframe: %s", v204);
            sub_223182C08((uint64_t)&v185);
          }
          sub_223182C08((uint64_t)&v185);
          v165 = v193;
          if (v193)
          {
            v166 = (unint64_t *)&v193->__shared_owners_;
            do
              v167 = __ldaxr(v166);
            while (__stlxr(v167 - 1, v166));
            if (!v167)
            {
              ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
              std::__shared_weak_count::__release_weak(v165);
            }
          }
          v19 = v184;
LABEL_63:
          v18 += 16;
          if (v18 == v19)
            goto LABEL_311;
          continue;
        }
      }
      break;
    }
    memmove(v32, v29, v30);
    goto LABEL_87;
  }
LABEL_311:
  v168 = (_QWORD *)(a1 + 792);
  v169 = (void **)(a1 + 816);
  *(_DWORD *)(a1 + 396) += *(_DWORD *)(a1 + 864);
  v170 = *(void **)(a1 + 792);
  if (v170)
  {
    *(_QWORD *)(a1 + 800) = v170;
    operator delete(v170);
    *v168 = 0;
    *(_QWORD *)(a1 + 800) = 0;
    *(_QWORD *)(a1 + 808) = 0;
  }
  v171 = (void **)(a1 + 840);
  *v168 = 0;
  *(_QWORD *)(a1 + 800) = 0;
  *(_QWORD *)(a1 + 808) = 0;
  v172 = (char *)*v169;
  if (*v169)
  {
    v173 = *(char **)(a1 + 824);
    v174 = *v169;
    if (v173 != v172)
    {
      do
      {
        v175 = (std::__shared_weak_count *)*((_QWORD *)v173 - 1);
        if (v175)
        {
          v176 = (unint64_t *)&v175->__shared_owners_;
          do
            v177 = __ldaxr(v176);
          while (__stlxr(v177 - 1, v176));
          if (!v177)
          {
            ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
            std::__shared_weak_count::__release_weak(v175);
          }
        }
        v173 -= 32;
      }
      while (v173 != v172);
      v174 = *v169;
    }
    *(_QWORD *)(a1 + 824) = v172;
    operator delete(v174);
    *v169 = 0;
    *(_QWORD *)(a1 + 824) = 0;
    *(_QWORD *)(a1 + 832) = 0;
  }
  *v169 = 0;
  *(_QWORD *)(a1 + 824) = 0;
  *(_QWORD *)(a1 + 832) = 0;
  v178 = *v171;
  if (*v171)
  {
    *(_QWORD *)(a1 + 848) = v178;
    operator delete(v178);
    *v171 = 0;
    *(_QWORD *)(a1 + 848) = 0;
    *(_QWORD *)(a1 + 856) = 0;
  }
  *v171 = 0;
  *(_QWORD *)(a1 + 848) = 0;
  *(_DWORD *)(a1 + 864) = 0;
  *(_QWORD *)(a1 + 856) = 0;
  kdebug_trace();
  std::mutex::unlock(v179);
}

void sub_2231890CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,char a47)
{
  if (a47)
  {
    if (a46 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a27);
  std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

void sub_22318911C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  void *v41;

  sub_223199DE8((uint64_t)&a41);

  sub_223182DAC((uint64_t)&a27);
  std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

void sub_223189330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11)
{
  std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

void sub_223189344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11)
{
  std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

void sub_223189358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11)
{
  std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

void sub_22318936C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11)
{
  std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

void sub_223189380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11)
{
  std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

void sub_223189394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11)
{
  std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

void sub_2231893A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11)
{
  std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

void sub_2231893BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11)
{
  std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

void sub_2231893D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11)
{
  std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

void sub_2231893F0(double *a1, uint64_t a2, char *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;
  __int128 v17;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        sub_2245054E8((uint64_t)&v17, (uint64_t)(*a1 * 1000000000.0), 2);
        v14 = v17;
        v13 = sub_2241471F8();
        sub_2231AF6C8((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_22318951C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223189538(uint64_t *a1, void *a2, size_t a3, char *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  std::string *p_p;
  size_t size;
  std::string __p;
  _QWORD v11[6];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (a6)
  {
    v7 = *a1;
    v11[0] = a2;
    v11[1] = a3;
    v11[2] = ".";
    v11[3] = 1;
    v11[4] = a5;
    v11[5] = a6;
    sub_2231A9820((uint64_t)v11, (uint64_t)&v12, 0, 0, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    sub_223FD4288(v7, p_p, size, a4);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    sub_223FD4288(*a1, a2, a3, a4);
  }
}

void sub_223189638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_223189660(double *a1, uint64_t a2, float *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;
  __int128 v17;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        sub_2245054E8((uint64_t)&v17, (uint64_t)(*a1 * 1000000000.0), 2);
        v14 = v17;
        v13 = sub_2241471F8();
        sub_2231AF940((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_22318978C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2231897A8(uint64_t *a1, void *a2, size_t a3, float *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  std::string *p_p;
  size_t size;
  std::string __p;
  _QWORD v11[6];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (a6)
  {
    v7 = *a1;
    v11[0] = a2;
    v11[1] = a3;
    v11[2] = ".";
    v11[3] = 1;
    v11[4] = a5;
    v11[5] = a6;
    sub_2231A9820((uint64_t)v11, (uint64_t)&v12, 0, 0, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    sub_223FD4BB8(v7, p_p, size, a4);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    sub_223FD4BB8(*a1, a2, a3, a4);
  }
}

void sub_2231898A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2231898D0(double *a1, uint64_t a2, float *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;
  __int128 v17;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        sub_2245054E8((uint64_t)&v17, (uint64_t)(*a1 * 1000000000.0), 2);
        v14 = v17;
        v13 = sub_2241471F8();
        sub_2231AF940((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_2231899FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223189A18(double *a1, uint64_t a2, float *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;
  __int128 v17;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        sub_2245054E8((uint64_t)&v17, (uint64_t)(*a1 * 1000000000.0), 2);
        v14 = v17;
        v13 = sub_2241471F8();
        sub_2231AF940((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_223189B44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223189B60(double *a1, uint64_t a2, float *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;
  __int128 v17;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        sub_2245054E8((uint64_t)&v17, (uint64_t)(*a1 * 1000000000.0), 2);
        v14 = v17;
        v13 = sub_2241471F8();
        sub_2231AF940((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_223189C8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223189CA8(double *a1, uint64_t a2, uint64_t *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;
  __int128 v17;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        sub_2245054E8((uint64_t)&v17, (uint64_t)(*a1 * 1000000000.0), 2);
        v14 = v17;
        v13 = sub_2241471F8();
        sub_2231AD778((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_223189DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223189DF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::mutex *v10;
  _QWORD **v11;
  _QWORD *v12;
  _QWORD *v13;
  char **v14;
  char *v15;
  char *v16;
  BOOL v17;
  _BOOL4 v18;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _OWORD *v26;
  _OWORD *v27;
  _QWORD *v28;
  unint64_t v30;
  _OWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unsigned __int8 v39;
  unsigned __int8 v40;
  std::unique_lock<std::mutex> v41;

  v10 = (std::mutex *)(a1 + 448);
  std::mutex::lock((std::mutex *)(a1 + 448));
  if (*(_BYTE *)(a2 + 8) && a1 + 696 != *(_QWORD *)a2)
    sub_2231984D0((_QWORD *)(a1 + 696), **(char ***)a2, *(char **)(*(_QWORD *)a2 + 8), (uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 4);
  if (*(_BYTE *)(a3 + 8) && a1 + 720 != *(_QWORD *)a3)
    sub_2231984D0((_QWORD *)(a1 + 720), **(char ***)a3, *(char **)(*(_QWORD *)a3 + 8), (uint64_t)(*(_QWORD *)(*(_QWORD *)a3 + 8) - **(_QWORD **)a3) >> 4);
  if (*(_BYTE *)(a4 + 8))
  {
    v11 = *(_QWORD ***)a4;
    v12 = **(_QWORD ***)a4;
    v13 = v11[1];
    if (v12 != v13)
    {
      v14 = (char **)(a1 + 744);
      v15 = *(char **)(a1 + 752);
      do
      {
        while (1)
        {
          v16 = v15;
          if (*v14 != v15)
          {
            v16 = *v14;
            while (1)
            {
              v17 = *(_QWORD *)v16 == *v12 && *((_QWORD *)v16 + 1) == v12[1];
              v18 = !v17;
              if (!v18 && *((_QWORD *)v16 + 2) == v12[2])
                break;
              v16 += 32;
              if (v16 == v15)
              {
                v16 = v15;
                break;
              }
            }
          }
          if (v16 == v15)
            break;
          v12 += 4;
          if (v12 == v13)
            goto LABEL_33;
        }
        if ((unint64_t)v15 >= *(_QWORD *)(a1 + 760))
        {
          v15 = sub_223198614((char **)(a1 + 744), (uint64_t)v12);
        }
        else
        {
          *(_OWORD *)v15 = *(_OWORD *)v12;
          *((_QWORD *)v15 + 2) = v12[2];
          v20 = v12[3];
          *((_QWORD *)v15 + 3) = v20;
          if (v20)
          {
            v21 = (unint64_t *)(v20 + 8);
            do
              v22 = __ldxr(v21);
            while (__stxr(v22 + 1, v21));
          }
          v15 += 32;
        }
        *(_QWORD *)(a1 + 752) = v15;
        v12 += 4;
      }
      while (v12 != v13);
    }
  }
LABEL_33:
  if (*(_BYTE *)(a5 + 8))
  {
    v23 = **(_QWORD ***)a5;
    v24 = *(_QWORD **)(*(_QWORD *)a5 + 8);
    if (v23 != v24)
    {
      v25 = (_QWORD *)(a1 + 768);
      v26 = *(_OWORD **)(a1 + 776);
      do
      {
        while (1)
        {
          v27 = (_OWORD *)*v25;
          v28 = v26;
          if ((_OWORD *)*v25 != v26)
          {
            v28 = (_QWORD *)*v25;
            while (*v28 != *v23 || v28[1] != v23[1])
            {
              v28 += 2;
              if (v28 == (_QWORD *)v26)
              {
                v28 = v26;
                break;
              }
            }
          }
          if (v28 == (_QWORD *)v26)
            break;
          v23 += 2;
          if (v23 == v24)
            goto LABEL_65;
        }
        v30 = *(_QWORD *)(a1 + 784);
        if ((unint64_t)v26 >= v30)
        {
          v32 = v26 - v27;
          v33 = v32 + 1;
          if ((unint64_t)(v32 + 1) >> 60)
            sub_22316E078();
          v34 = v30 - (_QWORD)v27;
          if (v34 >> 3 > v33)
            v33 = v34 >> 3;
          if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
            v35 = 0xFFFFFFFFFFFFFFFLL;
          else
            v35 = v33;
          if (v35)
          {
            if (v35 >> 60)
              sub_223174E94();
            v36 = (char *)operator new(16 * v35);
            v37 = &v36[16 * v32];
            *(_OWORD *)v37 = *(_OWORD *)v23;
            v38 = (uint64_t)v37;
            if (v27 != v26)
            {
              do
              {
LABEL_62:
                *(_OWORD *)(v38 - 16) = *(v26 - 1);
                v38 -= 16;
                --v26;
              }
              while (v26 != v27);
              v26 = (_OWORD *)*v25;
              *(_QWORD *)(a1 + 768) = v38;
              v31 = v37 + 16;
              *(_QWORD *)(a1 + 776) = v37 + 16;
              *(_QWORD *)(a1 + 784) = &v36[16 * v35];
              if (!v26)
                goto LABEL_59;
LABEL_58:
              operator delete(v26);
              goto LABEL_59;
            }
          }
          else
          {
            v36 = 0;
            v37 = (char *)(16 * v32);
            *(_OWORD *)(16 * v32) = *(_OWORD *)v23;
            v38 = 16 * v32;
            if (v27 != v26)
              goto LABEL_62;
          }
          *(_QWORD *)(a1 + 768) = v38;
          v31 = v37 + 16;
          *(_QWORD *)(a1 + 776) = v37 + 16;
          *(_QWORD *)(a1 + 784) = &v36[16 * v35];
          if (v26)
            goto LABEL_58;
        }
        else
        {
          *v26 = *(_OWORD *)v23;
          v31 = v26 + 1;
        }
LABEL_59:
        *(_QWORD *)(a1 + 776) = v31;
        v26 = v31;
        v23 += 2;
      }
      while (v23 != v24);
    }
  }
LABEL_65:
  std::mutex::unlock(v10);
  atomic_store(1u, (unsigned __int8 *)(a1 + 624));
  std::condition_variable::notify_one((std::condition_variable *)(a1 + 520));
  if (*(_BYTE *)(a1 + 312))
  {
    v41.__m_ = v10;
    v41.__owns_ = 1;
    std::mutex::lock(v10);
    v39 = atomic_load((unsigned __int8 *)(a1 + 624));
    if ((v39 & 1) != 0)
    {
      do
      {
        std::condition_variable::wait((std::condition_variable *)(a1 + 576), &v41);
        v40 = atomic_load((unsigned __int8 *)(a1 + 624));
      }
      while ((v40 & 1) != 0);
    }
    if (v41.__owns_)
      std::mutex::unlock(v41.__m_);
    sub_22318787C(a1);
  }
}

void sub_22318A18C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_22318A1A0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_22318A1B4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_22318A1C8(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = a1[3];
  if (!v2)
    sub_223198474();
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  v3 = (_QWORD *)a1[3];
  if (v3 == a1)
  {
    v4 = 4;
    v3 = a1;
    goto LABEL_6;
  }
  if (v3)
  {
    v4 = 5;
LABEL_6:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_22318A234(uint64_t a1)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  std::unique_lock<std::mutex> v4;

  v4.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 448);
  v4.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 448));
  v2 = atomic_load((unsigned __int8 *)(a1 + 624));
  if ((v2 & 1) != 0)
  {
    do
    {
      std::condition_variable::wait((std::condition_variable *)(a1 + 576), &v4);
      v3 = atomic_load((unsigned __int8 *)(a1 + 624));
    }
    while ((v3 & 1) != 0);
  }
  if (v4.__owns_)
    std::mutex::unlock(v4.__m_);
  sub_22318787C(a1);
}

void sub_22318A2AC(_QWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  char *v7;
  char *v8;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  char *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  char *v18;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  char *v30;
  _QWORD *v31;
  _QWORD *v32;
  char *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  char *v45;
  char *v46;
  void *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  char *v53;
  char *v54;
  char *v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  _BYTE *v66;
  _BYTE *v67;
  int64_t v68;
  void *__p;
  char *v70;
  unint64_t v71;

  v7 = (char *)a1[87];
  v8 = (char *)a1[88];
  if (v7 != v8)
  {
    v11 = *(_QWORD **)a2;
    v10 = *(_QWORD **)(a2 + 8);
    if ((_QWORD *)((char *)v10 - *(_QWORD *)a2) == (_QWORD *)(v8 - v7))
    {
      if (v11 == v10)
        goto LABEL_15;
      v12 = (_QWORD *)a1[87];
      while (*v11 == *v12 && v11[1] == v12[1])
      {
        v11 += 2;
        v12 += 2;
        if (v11 == v10)
          goto LABEL_15;
      }
    }
    if (a1 + 87 != (_QWORD *)a2)
      sub_2231984D0((_QWORD *)a2, v7, v8, (v8 - v7) >> 4);
    *a4 = 0;
    a1[100] = a1[99];
  }
LABEL_15:
  v14 = (char *)a1[90];
  v15 = (char *)a1[91];
  if (v14 != v15)
  {
    v17 = *(char **)(a2 + 24);
    v18 = *(char **)(a2 + 32);
    v16 = (_QWORD *)(a2 + 24);
    if (v18 - v17 != v15 - v14)
      goto LABEL_27;
    if (v17 != v18)
    {
      v19 = (_QWORD *)a1[90];
      while (*(_QWORD *)v17 == *v19 && *((_QWORD *)v17 + 1) == v19[1])
      {
        v17 += 16;
        v19 += 2;
        if (v17 == v18)
          goto LABEL_25;
      }
LABEL_27:
      if (v16 != a1 + 90)
        sub_2231984D0(v16, v14, v15, (v15 - v14) >> 4);
      *a3 = 0;
      v23 = a1[103];
      v24 = a1[102];
      while (v23 != v24)
      {
        v25 = *(std::__shared_weak_count **)(v23 - 8);
        if (v25)
        {
          p_shared_owners = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldaxr(p_shared_owners);
          while (__stlxr(v27 - 1, p_shared_owners));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        v23 -= 32;
      }
      a1[103] = v24;
      v21 = a1[93];
      v22 = a1[94];
      __p = 0;
      v70 = 0;
      v71 = 0;
      if (v21 == v22)
        goto LABEL_38;
      goto LABEL_42;
    }
  }
LABEL_25:
  v21 = a1[93];
  v22 = a1[94];
  __p = 0;
  v70 = 0;
  v71 = 0;
  if (v21 == v22)
  {
LABEL_38:
    v28 = 0;
    v29 = 0;
    goto LABEL_62;
  }
  do
  {
LABEL_42:
    v31 = *(_QWORD **)(a2 + 48);
    v32 = *(_QWORD **)(a2 + 56);
    if (v31 == v32)
    {
LABEL_48:
      v34 = v70;
      if ((unint64_t)v70 >= v71)
      {
        v30 = sub_223198614((char **)&__p, v21);
      }
      else
      {
        *(_OWORD *)v70 = *(_OWORD *)v21;
        *((_QWORD *)v34 + 2) = *(_QWORD *)(v21 + 16);
        v35 = *(_QWORD *)(v21 + 24);
        *((_QWORD *)v34 + 3) = v35;
        if (v35)
        {
          v36 = (unint64_t *)(v35 + 8);
          do
            v37 = __ldxr(v36);
          while (__stxr(v37 + 1, v36));
        }
        v30 = v34 + 32;
      }
      v70 = v30;
    }
    else
    {
      while (*(_QWORD *)v21 != *v31 || *(_QWORD *)(v21 + 8) != v31[1])
      {
        v31 += 4;
        if (v31 == v32)
          goto LABEL_48;
      }
      v39 = *(_QWORD *)(v21 + 16);
      v38 = *(_QWORD *)(v21 + 24);
      if (v38)
      {
        v40 = (unint64_t *)(v38 + 8);
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
      }
      v42 = (std::__shared_weak_count *)v31[3];
      v31[2] = v39;
      v31[3] = v38;
      if (v42)
      {
        v43 = (unint64_t *)&v42->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
    }
    v21 += 32;
  }
  while (v21 != v22);
  v29 = __p;
  v28 = (uint64_t)v70;
LABEL_62:
  sub_22319878C((char **)(a2 + 48), *(_QWORD *)(a2 + 56), (uint64_t)v29, v28, (v28 - (uint64_t)v29) >> 5);
  v45 = (char *)__p;
  if (__p)
  {
    v46 = v70;
    v47 = __p;
    if (v70 != __p)
    {
      do
      {
        v48 = (std::__shared_weak_count *)*((_QWORD *)v46 - 1);
        if (v48)
        {
          v49 = (unint64_t *)&v48->__shared_owners_;
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        v46 -= 32;
      }
      while (v46 != v45);
      v47 = __p;
    }
    v70 = v45;
    operator delete(v47);
  }
  if (*(_QWORD *)(a2 + 72) != *(_QWORD *)(a2 + 80))
  {
    v51 = (_QWORD *)a1[96];
    v52 = (_QWORD *)a1[97];
    __p = 0;
    v70 = 0;
    v71 = 0;
    if (v51 != v52)
    {
      v53 = 0;
      v54 = 0;
      v55 = 0;
      while (1)
      {
        v56 = *(_QWORD **)(a2 + 72);
        v57 = *(_QWORD **)(a2 + 80);
        if (v56 != v57)
        {
          while (*v56 != *v51 || v56[1] != v51[1])
          {
            v56 += 2;
            if (v56 == v57)
            {
              v56 = *(_QWORD **)(a2 + 80);
              break;
            }
          }
        }
        if (v56 != v57)
          goto LABEL_77;
        if (v55 >= v54)
          break;
        *(_OWORD *)v55 = *(_OWORD *)v51;
        v55 += 16;
LABEL_77:
        v51 += 2;
        if (v51 == v52)
          goto LABEL_109;
      }
      v59 = (v55 - v53) >> 4;
      v60 = v59 + 1;
      if ((unint64_t)(v59 + 1) >> 60)
      {
        v70 = v55;
        v71 = (unint64_t)v54;
        __p = v53;
        sub_22316E078();
      }
      if ((v54 - v53) >> 3 > v60)
        v60 = (v54 - v53) >> 3;
      if ((unint64_t)(v54 - v53) >= 0x7FFFFFFFFFFFFFF0)
        v61 = 0xFFFFFFFFFFFFFFFLL;
      else
        v61 = v60;
      if (v61)
      {
        if (v61 >> 60)
        {
          v71 = (unint64_t)v54;
          __p = v53;
          sub_223174E94();
        }
        v62 = (char *)operator new(16 * v61);
        v63 = &v62[16 * v59];
        *(_OWORD *)v63 = *(_OWORD *)v51;
        if (v55 != v53)
        {
LABEL_96:
          v64 = v63;
          do
          {
            v65 = v64 - 16;
            *((_OWORD *)v64 - 1) = *((_OWORD *)v55 - 1);
            v55 -= 16;
            v64 -= 16;
          }
          while (v55 != v53);
          v54 = &v62[16 * v61];
          v55 = v63 + 16;
          if (!v53)
            goto LABEL_100;
LABEL_99:
          operator delete(v53);
LABEL_100:
          v53 = v65;
          goto LABEL_77;
        }
      }
      else
      {
        v62 = 0;
        v63 = (char *)(16 * v59);
        *(_OWORD *)(16 * v59) = *(_OWORD *)v51;
        if (v55 != v53)
          goto LABEL_96;
      }
      v65 = v63;
      v54 = &v62[16 * v61];
      v55 = v63 + 16;
      if (!v53)
        goto LABEL_100;
      goto LABEL_99;
    }
    v55 = 0;
    v53 = 0;
LABEL_109:
    if (v53 == v55)
      goto LABEL_111;
    goto LABEL_110;
  }
  v66 = (_BYTE *)a1[96];
  v67 = (_BYTE *)a1[97];
  v68 = v67 - v66;
  if (v67 == v66)
    return;
  if (v68 < 0)
    sub_22316E078();
  v53 = (char *)operator new(v67 - v66);
  v55 = &v53[16 * (v68 >> 4)];
  memcpy(v53, v66, v68);
  if (v53 != v55)
LABEL_110:
    sub_223198B3C(a2 + 72, *(_QWORD *)(a2 + 80), v53, v55, (v55 - v53) >> 4);
LABEL_111:
  if (v53)
    operator delete(v53);
}

void sub_22318A814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_22318A894(uint64_t a1)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  const char *v7;
  size_t v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  const char *v11;
  size_t v12;
  NSObject *v13;
  id *v14;
  uint64_t v15;
  uint64_t v16;
  id *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  os_log_type_t v21;
  NSObject *v22;
  NSObject *v23;
  size_t v24;
  std::__shared_weak_count_vtbl *v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  unint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  std::condition_variable *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  void *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::mutex *v52;
  unsigned __int8 v53;
  unsigned __int8 v54;
  unsigned __int8 v55;
  unsigned __int8 v56;
  unsigned __int8 v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  unint64_t v78;
  uint64_t v79;
  const char *v80;
  size_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  _BYTE *v85;
  uint64_t v86;
  unsigned __int8 v87;
  const char *v88;
  size_t v89;
  const char *v90;
  NSObject *v91;
  id *v92;
  uint64_t v93;
  uint64_t v94;
  _BYTE *v95;
  uint64_t v96;
  uint64_t v97;
  id *v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  os_log_type_t v104;
  NSObject *v105;
  NSObject *v106;
  size_t v107;
  std::__shared_weak_count_vtbl *v108;
  std::__shared_weak_count *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t v113;
  id v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  const char *v118;
  int v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  void *v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  _QWORD *v144;
  unsigned __int8 *v145;
  int v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  const char *v150;
  size_t v151;
  uint64_t v152;
  unsigned __int8 *v153;
  int v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  const char *v158;
  size_t v159;
  _BYTE *v160;
  unsigned __int8 v161;
  const char *v162;
  size_t v163;
  NSObject *v164;
  id *v165;
  uint64_t v166;
  uint64_t v167;
  id *v168;
  uint64_t v169;
  uint64_t v170;
  id v171;
  uint64_t v172;
  os_log_type_t v173;
  NSObject *v174;
  NSObject *v175;
  size_t v176;
  std::__shared_weak_count_vtbl *v177;
  std::__shared_weak_count *v178;
  size_t v179;
  void *v180;
  void *v181;
  void *v182;
  int v183;
  uint64_t v184;
  unsigned __int8 v185;
  const char *v186;
  size_t v187;
  NSObject *v188;
  id *v189;
  uint64_t v190;
  uint64_t v191;
  id *v192;
  uint64_t v193;
  uint64_t v194;
  id v195;
  unint64_t v196;
  uint64_t v197;
  os_log_type_t v198;
  NSObject *v199;
  NSObject *v200;
  size_t v201;
  std::__shared_weak_count_vtbl *v202;
  std::__shared_weak_count *v203;
  size_t v204;
  void *v205;
  void *v206;
  void *v207;
  char *v208;
  char *v209;
  void *v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  _QWORD *v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  void *v220;
  unint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  _QWORD *v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  void *v233;
  unint64_t *v234;
  unint64_t v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  unint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  id v243;
  char *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  const char *v248;
  uint64_t v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  uint64_t v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  unsigned int v272;
  int v273;
  unint64_t v274;
  unint64_t v275;
  uint64_t v276;
  const char *v277;
  size_t v278;
  unsigned __int8 v279;
  unsigned __int8 v280;
  const char *v281;
  size_t v282;
  NSObject *v283;
  _BYTE *v284;
  uint64_t v285;
  uint64_t v286;
  _BYTE *v287;
  uint64_t v288;
  uint64_t v289;
  id v290;
  os_log_type_t v291;
  NSObject *v292;
  NSObject *v293;
  size_t v294;
  void *v295;
  _QWORD *v296;
  size_t v297;
  std::string::size_type v298;
  std::string *v299;
  void *v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  id v304;
  char *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  const char *v309;
  uint64_t v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  uint64_t v317;
  std::__shared_weak_count *v318;
  unint64_t *v319;
  unint64_t v320;
  std::__shared_weak_count *v321;
  unint64_t *v322;
  unint64_t v323;
  std::__shared_weak_count *v324;
  unint64_t *v325;
  unint64_t v326;
  std::__shared_weak_count *v327;
  unint64_t *v328;
  unint64_t v329;
  std::__shared_weak_count *v330;
  unint64_t *v331;
  unint64_t v332;
  unsigned __int8 v333;
  int v334;
  unint64_t v335;
  unint64_t v336;
  uint64_t v337;
  const char *v338;
  uint64_t v339;
  size_t v340;
  unsigned __int8 v341;
  uint64_t v342;
  uint64_t v343;
  _QWORD *v344;
  std::__shared_weak_count *v345;
  unint64_t *v346;
  unint64_t v347;
  uint64_t v348;
  unint64_t *v349;
  unint64_t v350;
  std::__shared_weak_count *v351;
  unint64_t *v352;
  unint64_t v353;
  unint64_t v354;
  std::__shared_weak_count *v355;
  unint64_t *v356;
  unint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  const char *v363;
  uint64_t v364;
  std::__shared_weak_count *v365;
  unint64_t *v366;
  unint64_t v367;
  std::__shared_weak_count *v368;
  unint64_t *v369;
  unint64_t v370;
  uint64_t v371;
  std::__shared_weak_count *v372;
  unint64_t *v373;
  unint64_t v374;
  std::__shared_weak_count *v375;
  unint64_t *v376;
  unint64_t v377;
  std::__shared_weak_count *v378;
  unint64_t *v379;
  unint64_t v380;
  std::__shared_weak_count *v381;
  unint64_t *v382;
  unint64_t v383;
  std::__shared_weak_count *v384;
  unint64_t *v385;
  unint64_t v386;
  _OWORD *v387;
  unint64_t v388;
  _OWORD *v389;
  _OWORD *v390;
  uint64_t v391;
  unint64_t v392;
  uint64_t v393;
  unint64_t v394;
  char *v395;
  char *v396;
  char *v397;
  unint64_t v398;
  char *v399;
  unsigned __int8 *v400;
  int v401;
  unint64_t v402;
  unint64_t v403;
  uint64_t v404;
  const char *v405;
  size_t v406;
  unsigned __int8 v407;
  const char *v408;
  size_t v409;
  NSObject *v410;
  id *v411;
  uint64_t v412;
  uint64_t v413;
  id *v414;
  uint64_t v415;
  uint64_t v416;
  id v417;
  void *v418;
  uint64_t v419;
  os_log_type_t v420;
  NSObject *v421;
  NSObject *v422;
  size_t v423;
  std::__shared_weak_count_vtbl *v424;
  std::__shared_weak_count *v425;
  size_t v426;
  void *v427;
  uint64_t v428;
  void *v429;
  void *v430;
  uint64_t v431;
  uint64_t v432;
  _QWORD *v433;
  std::__shared_weak_count *v434;
  uint64_t v435;
  unint64_t *v436;
  unint64_t v437;
  void *v438;
  unint64_t *v439;
  unint64_t v440;
  std::__shared_weak_count *v441;
  unint64_t *v442;
  unint64_t v443;
  unint64_t v444;
  std::__shared_weak_count *v445;
  unint64_t *v446;
  unint64_t v447;
  id v448;
  char *v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  const char *v453;
  uint64_t v454;
  std::__shared_weak_count *v455;
  unint64_t *v456;
  unint64_t v457;
  std::__shared_weak_count *v458;
  unint64_t *v459;
  unint64_t v460;
  uint64_t v461;
  std::__shared_weak_count *v462;
  unint64_t *v463;
  unint64_t v464;
  std::__shared_weak_count *v465;
  unint64_t *v466;
  unint64_t v467;
  std::__shared_weak_count *v468;
  unint64_t *v469;
  unint64_t v470;
  std::__shared_weak_count *v471;
  unint64_t *v472;
  unint64_t v473;
  std::__shared_weak_count *v474;
  unint64_t *v475;
  unint64_t v476;
  _QWORD *v477;
  unsigned __int8 *v478;
  std::__shared_weak_count *v479;
  uint64_t v480;
  unint64_t *v481;
  unint64_t v482;
  float v483;
  unsigned int v484;
  int v485;
  unint64_t v486;
  unint64_t v487;
  unint64_t *v488;
  unint64_t v489;
  _DWORD *v490;
  unint64_t v491;
  _DWORD *v492;
  _DWORD *v493;
  unint64_t v494;
  unint64_t v495;
  unint64_t v496;
  unint64_t v497;
  char *v498;
  char *v499;
  char *v500;
  __int128 v501;
  unint64_t v502;
  char *v503;
  uint64_t v504;
  const char *v505;
  size_t v506;
  unsigned __int8 v507;
  unsigned __int8 v508;
  const char *v509;
  size_t v510;
  NSObject *v511;
  _BYTE *v512;
  uint64_t v513;
  uint64_t v514;
  _BYTE *v515;
  uint64_t v516;
  uint64_t v517;
  id v518;
  os_log_type_t v519;
  NSObject *v520;
  NSObject *v521;
  size_t v522;
  void *v523;
  _QWORD *v524;
  size_t v525;
  std::string::size_type v526;
  std::string *v527;
  void *v528;
  unsigned __int8 v529;
  const char *v530;
  size_t v531;
  NSObject *v532;
  id *v533;
  uint64_t v534;
  uint64_t v535;
  id *v536;
  uint64_t v537;
  uint64_t v538;
  id v539;
  os_log_type_t v540;
  NSObject *v541;
  NSObject *v542;
  size_t v543;
  std::__shared_weak_count_vtbl *v544;
  std::__shared_weak_count *v545;
  size_t v546;
  void *v547;
  void *v548;
  void *v549;
  uint64_t v550;
  uint64_t v551;
  _QWORD *v552;
  std::__shared_weak_count *v553;
  unint64_t *v554;
  unint64_t v555;
  uint64_t v556;
  unint64_t *v557;
  unint64_t v558;
  std::__shared_weak_count *v559;
  unint64_t *v560;
  unint64_t v561;
  unint64_t v562;
  uint64_t v563;
  uint64_t v564;
  _QWORD *v565;
  std::__shared_weak_count *v566;
  unint64_t *v567;
  unint64_t v568;
  void *v569;
  unint64_t *v570;
  unint64_t v571;
  std::__shared_weak_count *v572;
  unint64_t *v573;
  unint64_t v574;
  unint64_t v575;
  std::__shared_weak_count *v576;
  unint64_t *v577;
  unint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  const char *v584;
  uint64_t v585;
  std::__shared_weak_count *v586;
  unint64_t *v587;
  unint64_t v588;
  std::__shared_weak_count *v589;
  unint64_t *v590;
  unint64_t v591;
  uint64_t v592;
  std::__shared_weak_count *v593;
  unint64_t *v594;
  unint64_t v595;
  std::__shared_weak_count *v596;
  unint64_t *v597;
  unint64_t v598;
  std::__shared_weak_count *v599;
  unint64_t *v600;
  unint64_t v601;
  std::__shared_weak_count *v602;
  unint64_t *v603;
  unint64_t v604;
  std::__shared_weak_count *v605;
  unint64_t *v606;
  unint64_t v607;
  std::__shared_weak_count *v608;
  unint64_t *v609;
  unint64_t v610;
  id v611;
  char *v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  const char *v616;
  uint64_t v617;
  std::__shared_weak_count *v618;
  unint64_t *v619;
  unint64_t v620;
  std::__shared_weak_count *v621;
  unint64_t *v622;
  unint64_t v623;
  uint64_t v624;
  std::__shared_weak_count *v625;
  unint64_t *v626;
  unint64_t v627;
  std::__shared_weak_count *v628;
  unint64_t *v629;
  unint64_t v630;
  std::__shared_weak_count *v631;
  unint64_t *v632;
  unint64_t v633;
  std::__shared_weak_count *v634;
  unint64_t *v635;
  unint64_t v636;
  std::__shared_weak_count *v637;
  unint64_t *v638;
  unint64_t v639;
  unsigned __int8 *v640;
  int v641;
  unint64_t v642;
  unint64_t v643;
  uint64_t v644;
  const char *v645;
  size_t v646;
  unsigned __int8 v647;
  const char *v648;
  size_t v649;
  NSObject *v650;
  id *v651;
  uint64_t v652;
  uint64_t v653;
  id *v654;
  uint64_t v655;
  uint64_t v656;
  id v657;
  void *v658;
  uint64_t v659;
  os_log_type_t v660;
  NSObject *v661;
  NSObject *v662;
  size_t v663;
  std::__shared_weak_count_vtbl *v664;
  std::__shared_weak_count *v665;
  size_t v666;
  void *v667;
  uint64_t v668;
  void *v669;
  void *v670;
  uint64_t v671;
  uint64_t v672;
  _QWORD *v673;
  std::__shared_weak_count *v674;
  uint64_t v675;
  unint64_t *v676;
  unint64_t v677;
  void *v678;
  unint64_t *v679;
  unint64_t v680;
  std::__shared_weak_count *v681;
  unint64_t *v682;
  unint64_t v683;
  unint64_t v684;
  std::__shared_weak_count *v685;
  unint64_t *v686;
  unint64_t v687;
  id v688;
  char *v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  const char *v693;
  uint64_t v694;
  std::__shared_weak_count *v695;
  unint64_t *v696;
  unint64_t v697;
  std::__shared_weak_count *v698;
  unint64_t *v699;
  unint64_t v700;
  uint64_t v701;
  std::__shared_weak_count *v702;
  unint64_t *v703;
  unint64_t v704;
  std::__shared_weak_count *v705;
  unint64_t *v706;
  unint64_t v707;
  std::__shared_weak_count *v708;
  unint64_t *v709;
  unint64_t v710;
  std::__shared_weak_count *v711;
  unint64_t *v712;
  unint64_t v713;
  std::__shared_weak_count *v714;
  unint64_t *v715;
  unint64_t v716;
  unsigned __int8 *v717;
  unsigned int v718;
  unsigned int v719;
  id v720;
  id v721;
  unint64_t *v722;
  unint64_t v723;
  unint64_t v724;
  unsigned __int8 v725;
  int v726;
  unint64_t v727;
  unint64_t v728;
  std::string *v729;
  uint64_t v730;
  size_t v731;
  const char *v732;
  unsigned __int8 v733;
  _OWORD *v734;
  std::__shared_weak_count *v735;
  unint64_t *v736;
  unint64_t v737;
  unsigned __int8 v738;
  const char *v739;
  size_t v740;
  NSObject *v741;
  _BYTE *v742;
  uint64_t v743;
  uint64_t v744;
  _BYTE *v745;
  uint64_t v746;
  uint64_t v747;
  id v748;
  NSObject *v749;
  NSObject *v750;
  size_t v751;
  void *v752;
  _QWORD *v753;
  unint64_t *v754;
  int v755;
  std::__shared_weak_count *v756;
  unint64_t *v757;
  unint64_t v758;
  unint64_t v759;
  unint64_t v760;
  std::__shared_weak_count *v761;
  unint64_t *v762;
  unint64_t v763;
  uint64_t v764;
  uint64_t shared_owners;
  char *v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  std::__shared_weak_count *v772;
  unint64_t *v773;
  unint64_t v774;
  std::__shared_weak_count *v775;
  unint64_t *v776;
  unint64_t v777;
  uint64_t v778;
  std::__shared_weak_count *v779;
  unint64_t *v780;
  unint64_t v781;
  std::__shared_weak_count *v782;
  unint64_t *v783;
  unint64_t v784;
  std::__shared_weak_count *v785;
  unint64_t *v786;
  unint64_t v787;
  std::__shared_weak_count *v788;
  unint64_t *v789;
  unint64_t v790;
  void *v791;
  const char *v792;
  std::__shared_weak_count *v793;
  unint64_t *v794;
  unint64_t v795;
  uint64_t v796;
  std::__shared_weak_count *v797;
  unint64_t *v798;
  unint64_t v799;
  int v800;
  unint64_t v801;
  unint64_t v802;
  uint64_t v803;
  uint64_t v804;
  size_t v805;
  const char *v806;
  unsigned __int8 v807;
  unsigned __int8 v808;
  const char *v809;
  size_t v810;
  NSObject *v811;
  id *v812;
  uint64_t v813;
  uint64_t v814;
  id *v815;
  uint64_t v816;
  uint64_t v817;
  id v818;
  os_log_type_t v819;
  NSObject *v820;
  NSObject *v821;
  size_t v822;
  std::__shared_weak_count_vtbl *v823;
  std::__shared_weak_count *v824;
  std::__shared_weak_count *v825;
  unint64_t *v826;
  unint64_t v827;
  unint64_t v828;
  id v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  std::__shared_weak_count *v834;
  unint64_t *v835;
  unint64_t v836;
  std::__shared_weak_count *v837;
  unint64_t *v838;
  unint64_t v839;
  uint64_t v840;
  std::__shared_weak_count *v841;
  unint64_t *v842;
  unint64_t v843;
  std::__shared_weak_count *v844;
  unint64_t *v845;
  unint64_t v846;
  std::__shared_weak_count *v847;
  unint64_t *v848;
  unint64_t v849;
  std::__shared_weak_count *v850;
  unint64_t *v851;
  unint64_t v852;
  void *v853;
  std::__shared_weak_count *v854;
  unint64_t *v855;
  unint64_t v856;
  char *v857;
  char *v858;
  void *v859;
  std::__shared_weak_count *v860;
  unint64_t *v861;
  unint64_t v862;
  _QWORD *exception;
  _QWORD *v864;
  void **v865;
  uint64_t v866;
  _QWORD *v867;
  const char *v868;
  _QWORD *v869;
  int v870;
  uint64_t v871;
  _BYTE *v872;
  void *v873;
  const char *v874;
  const char *v875;
  const char *v876;
  _BYTE *v877;
  uint64_t v878;
  const char *v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  int v884;
  _BYTE *v885;
  int v886;
  uint64_t v887;
  _BYTE *v888;
  NSObject *v889;
  _BYTE *v890;
  uint64_t v891;
  const char *v892;
  const char *v893;
  _BYTE *v894;
  NSObject *v895;
  const char *v896;
  void *v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  std::condition_variable *v903;
  os_log_type_t type[8];
  unsigned __int8 *typea;
  unsigned __int8 *typeb;
  unsigned __int8 *typec;
  unsigned __int8 *typed;
  os_log_type_t typee[8];
  os_log_type_t typef[8];
  os_log_type_t typeg[8];
  os_log_type_t typeh;
  void *context;
  _QWORD *v914;
  std::mutex *v915;
  unint64_t v916;
  unsigned __int8 v917;
  unint64_t v918;
  std::condition_variable *v919;
  std::condition_variable *v920;
  std::unique_lock<std::mutex> __lk;
  unint64_t v922;
  unint64_t v923;
  void *v924[2];
  void *v925[2];
  __int128 v926;
  void *v927[2];
  __int128 v928;
  __int128 v929;
  uint64_t v930;
  std::__shared_weak_count *v931;
  std::string v932;
  int **v933;
  __int128 v934;
  std::__shared_weak_count *rep;
  char *v936;
  const char *v937;
  int v938;
  const char *v939;
  uint64_t v940;
  std::__shared_weak_count *v941;
  id v942[6];
  __int128 v943;
  __int128 v944;
  __int128 v945;
  char v946;
  char v947;
  char v948;
  char v949;
  char v950[8];
  void *v951[3];
  _BYTE v952[24];
  _BYTE v953[24];
  const char *v954;
  unint64_t v955;
  std::__shared_weak_count *v956;
  _BYTE __src[40];
  std::__shared_weak_count *v958;
  char __s[8];
  _BYTE v960[24];
  std::__shared_weak_count *v961;
  uint64_t v962;

  v962 = *MEMORY[0x24BDAC8D0];
  pthread_setname_np("Keyframing Disk IO");
  sub_223192614(__src);
  v866 = a1;
  if (**(int **)(*(_QWORD *)__src + 56) <= 3)
  {
    v2 = *(unsigned __int8 *)(*(_QWORD *)__src + 72);
    v3 = sub_22455F97C((uint64_t *)__src);
    v4 = v3;
    if (v2 || v3 != 0)
    {
      v924[0] = __src;
      v924[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
      v925[0] = (void *)std::chrono::system_clock::now().__d_.__rep_;
      LODWORD(v925[1]) = 3;
      *(_QWORD *)&v926 = "unknown file";
      DWORD2(v926) = 370;
      *(_QWORD *)&v928 = 0;
      v927[0] = "unknown function";
      v927[1] = 0;
      v6 = *(_QWORD *)__src;
      v7 = (const char *)(*(_QWORD *)__src + 16);
      v919 = (std::condition_variable *)(*(_QWORD *)__src + 16);
      if (*(char *)(*(_QWORD *)__src + 39) < 0)
      {
        v7 = *(const char **)(*(_QWORD *)__src + 16);
        v8 = *(_QWORD *)(*(_QWORD *)__src + 24);
        v10 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v10 & 1) != 0)
          goto LABEL_10;
      }
      else
      {
        v8 = *(unsigned __int8 *)(*(_QWORD *)__src + 39);
        v9 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v9 & 1) != 0)
          goto LABEL_10;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)v942);
        sub_223199C58("com.apple.cv3d", (unint64_t)v942, &xmmword_255788F40);
        if (LOBYTE(v942[3]) && SHIBYTE(v942[2]) < 0)
          operator delete(v942[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_10:
      if (byte_255788F57 >= 0)
        v11 = (const char *)&xmmword_255788F40;
      else
        v11 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v12 = byte_255788F57;
      else
        v12 = *((_QWORD *)&xmmword_255788F40 + 1);
      v13 = os_log_create(v11, v7);
      v942[0] = v13;

      v14 = &v942[1];
      if (v12 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v12 >= 0x17)
      {
        v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v15 = v12 | 7;
        v16 = v15 + 1;
        v14 = (id *)operator new(v15 + 1);
        v942[3] = (id)(v16 | 0x8000000000000000);
        v942[1] = v14;
        v942[2] = (id)v12;
      }
      else
      {
        HIBYTE(v942[3]) = v12;
        if (!v12)
        {
LABEL_24:
          *((_BYTE *)v14 + v12) = 0;
          LOBYTE(v942[4]) = 1;
          v17 = &v942[5];
          if (v8 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v8 >= 0x17)
          {
            v18 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v8 | 7) != 0x17)
              v18 = v8 | 7;
            v19 = v18 + 1;
            v17 = (id *)operator new(v18 + 1);
            *((_QWORD *)&v943 + 1) = v19 | 0x8000000000000000;
            v942[5] = v17;
            *(_QWORD *)&v943 = v8;
          }
          else
          {
            HIBYTE(v943) = v8;
            if (!v8)
            {
LABEL_32:
              *((_BYTE *)v17 + v8) = 0;
              LOBYTE(v944) = 1;
              v20 = objc_retainAutorelease(v942[0]);
              if ((_BYTE)v944 && SHIBYTE(v943) < 0)
                operator delete(v942[5]);
              if (LOBYTE(v942[4]) && SHIBYTE(v942[3]) < 0)
                operator delete(v942[1]);

              v21 = sub_22455F7B4(3u);
              v22 = v20;
              v23 = v22;
              if (v4 && *(_QWORD *)(v4 + 8))
              {
                v24 = _os_log_pack_size();
                v25 = (std::__shared_weak_count_vtbl *)operator new(v24, (std::align_val_t)8uLL);
                v26 = (std::__shared_weak_count *)operator new();
                v27 = v26;
                v26->__shared_owners_ = 0;
                p_shared_owners = (unint64_t *)&v26->__shared_owners_;
                v26->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v26->__shared_weak_owners_ = 0;
                v26[1].__vftable = v25;
                v942[0] = v25;
                v942[1] = v25;
                v942[2] = v26;
                do
                  v29 = __ldxr(p_shared_owners);
                while (__stxr(v29 + 1, p_shared_owners));
                memset(&v942[3], 0, 24);
                do
                  v30 = __ldaxr(p_shared_owners);
                while (__stlxr(v30 - 1, p_shared_owners));
                if (!v30)
                {
                  ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
                  std::__shared_weak_count::__release_weak(v27);
                }
                v31 = v942[0];
                *(_WORD *)_os_log_pack_fill() = 0;
                v32 = operator new();
                v33 = *(unsigned __int8 *)(v6 + 39);
                v34 = v919;
                if ((v33 & 0x80u) != 0)
                {
                  v34 = *(std::condition_variable **)(v6 + 16);
                  v33 = *(_QWORD *)(v6 + 24);
                }
                *(_QWORD *)v32 = v31;
                *(_OWORD *)(v32 + 8) = *(_OWORD *)&v942[1];
                v942[1] = 0;
                v942[2] = 0;
                *(_OWORD *)(v32 + 24) = *(_OWORD *)&v942[3];
                v942[3] = 0;
                v942[4] = 0;
                *(_QWORD *)(v32 + 40) = v34;
                *(_QWORD *)(v32 + 48) = v33;
                *(_BYTE *)(v32 + 56) = v21;
                *(_QWORD *)&v934 = 0;
                *(_QWORD *)v952 = v32;
                (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v4 + 8) + 40))(*(_QWORD *)(v4 + 8), v952);
                v35 = *(_QWORD *)v952;
                *(_QWORD *)v952 = 0;
                if (v35)
                {
                  v36 = *(std::__shared_weak_count **)(v35 + 32);
                  if (v36)
                  {
                    v37 = (unint64_t *)&v36->__shared_owners_;
                    do
                      v38 = __ldaxr(v37);
                    while (__stlxr(v38 - 1, v37));
                    if (!v38)
                    {
                      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
                      std::__shared_weak_count::__release_weak(v36);
                    }
                  }
                  v39 = *(std::__shared_weak_count **)(v35 + 16);
                  if (v39)
                  {
                    v40 = (unint64_t *)&v39->__shared_owners_;
                    do
                      v41 = __ldaxr(v40);
                    while (__stlxr(v41 - 1, v40));
                    if (!v41)
                    {
                      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                      std::__shared_weak_count::__release_weak(v39);
                    }
                  }
                  MEMORY[0x227684CE8](v35, 0x10F0C40B62ED6C6);
                  *(_QWORD *)&v934 = 0;
                }
                v42 = (std::__shared_weak_count *)v942[4];
                if (v942[4])
                {
                  v43 = (unint64_t *)((char *)v942[4] + 8);
                  do
                    v44 = __ldaxr(v43);
                  while (__stlxr(v44 - 1, v43));
                  if (!v44)
                  {
                    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                    std::__shared_weak_count::__release_weak(v42);
                  }
                }
                v45 = (std::__shared_weak_count *)v942[2];
                if (v942[2])
                {
                  v46 = (unint64_t *)((char *)v942[2] + 8);
                  do
                    v47 = __ldaxr(v46);
                  while (__stlxr(v47 - 1, v46));
                  if (!v47)
                  {
                    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                    std::__shared_weak_count::__release_weak(v45);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v22, v21);
                LOWORD(v942[0]) = 0;
                v48 = (void *)_os_log_send_and_compose_impl();
                if (v48)
                  free(v48);
              }

              if (v2)
              {
                sub_22322C138((uint64_t)v924, "KFM:Keyframing Disk IO loop started");
                sub_223182C08((uint64_t)v924);
              }
              sub_223182C08((uint64_t)v924);
              v49 = (std::__shared_weak_count *)v928;
              if ((_QWORD)v928)
              {
                v50 = (unint64_t *)(v928 + 8);
                do
                  v51 = __ldaxr(v50);
                while (__stlxr(v51 - 1, v50));
                if (!v51)
                {
                  ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                  std::__shared_weak_count::__release_weak(v49);
                }
              }
              goto LABEL_79;
            }
          }
          memmove(v17, v7, v8);
          goto LABEL_32;
        }
      }
      memmove(v14, v11, v12);
      goto LABEL_24;
    }
  }
LABEL_79:
  v916 = 0;
  v928 = 0u;
  v929 = 0u;
  v52 = (std::mutex *)(a1 + 448);
  v903 = (std::condition_variable *)(a1 + 576);
  v918 = 0;
  v920 = (std::condition_variable *)(a1 + 520);
  v926 = 0u;
  *(_OWORD *)v927 = 0u;
  v902 = a1 + 696;
  v901 = a1 + 720;
  *(_OWORD *)v924 = 0u;
  *(_OWORD *)v925 = 0u;
  v899 = a1 + 768;
  v900 = a1 + 744;
  v923 = 0;
  v922 = 0;
  v869 = (_QWORD *)(a1 + 840);
  v867 = (_QWORD *)(a1 + 792);
  v914 = (_QWORD *)(a1 + 320);
  v915 = (std::mutex *)(a1 + 448);
  v865 = (void **)(a1 + 816);
  while (2)
  {
    __lk.__m_ = v52;
    __lk.__owns_ = 1;
    std::mutex::lock(v52);
    v53 = atomic_load((unsigned __int8 *)(a1 + 625));
    if ((v53 & 1) == 0)
    {
      atomic_store(1u, (unsigned __int8 *)(a1 + 625));
      std::condition_variable::notify_one(v903);
    }
    v54 = atomic_load((unsigned __int8 *)(a1 + 624));
    if ((v54 & 1) == 0)
    {
      do
      {
        v55 = atomic_load((unsigned __int8 *)(a1 + 568));
        if ((v55 & 1) != 0)
          break;
        std::condition_variable::wait(v920, &__lk);
        v56 = atomic_load((unsigned __int8 *)(a1 + 624));
      }
      while ((v56 & 1) == 0);
    }
    v57 = atomic_load((unsigned __int8 *)(a1 + 568));
    v917 = v57;
    if ((v57 & 1) != 0)
      goto LABEL_1141;
    v942[0] = v924;
    v942[1] = &v925[1];
    v942[2] = v927;
    v942[3] = (char *)&v928 + 8;
    *(_QWORD *)v952 = v902;
    *(_QWORD *)&v952[8] = v901;
    *(_QWORD *)&v952[16] = v900;
    *(_QWORD *)v953 = v899;
    if (sub_223198D6C((uint64_t)&v934, (char ***)v942, (_QWORD **)v952))
    {
      v59 = *(_QWORD **)v942[3];
      v58 = (_QWORD *)*((_QWORD *)v942[3] + 1);
      v60 = **(_QWORD ***)v953;
      if ((_QWORD *)((char *)v58 - *(_QWORD *)v942[3]) == (_QWORD *)(*(_QWORD *)(*(_QWORD *)v953 + 8)
                                                                    - **(_QWORD **)v953))
      {
        if (v59 == v58)
          goto LABEL_98;
        while (*v59 == *v60 && v59[1] == v60[1])
        {
          v59 += 2;
          v60 += 2;
          if (v59 == v58)
            goto LABEL_98;
        }
      }
    }
    sub_22318A2AC((_QWORD *)a1, (uint64_t)v924, &v923, &v922);
LABEL_98:
    v62 = (char *)v927[1];
    v63 = (char *)v927[0];
    if (v918 == ((char *)v927[1] - (char *)v927[0]) >> 5)
    {
      v64 = *(_QWORD *)(a1 + 752);
      v65 = *(_QWORD *)(a1 + 744);
      if (v64 != v65)
      {
        do
        {
          v66 = *(std::__shared_weak_count **)(v64 - 8);
          if (v66)
          {
            v67 = (unint64_t *)&v66->__shared_owners_;
            do
              v68 = __ldaxr(v67);
            while (__stlxr(v68 - 1, v67));
            if (!v68)
            {
              ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
              std::__shared_weak_count::__release_weak(v66);
            }
          }
          v64 -= 32;
        }
        while (v64 != v65);
        v62 = (char *)v927[1];
        v63 = (char *)v927[0];
      }
      *(_QWORD *)(a1 + 752) = v65;
      while (v62 != v63)
      {
        v69 = (std::__shared_weak_count *)*((_QWORD *)v62 - 1);
        if (v69)
        {
          v70 = (unint64_t *)&v69->__shared_owners_;
          do
            v71 = __ldaxr(v70);
          while (__stlxr(v71 - 1, v70));
          if (!v71)
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v69);
          }
        }
        v62 -= 32;
      }
      v918 = 0;
      v927[1] = v63;
    }
    else
    {
      v63 = (char *)v927[1];
    }
    v52 = v915;
    if (v923 == (uint64_t)(v926 - (unint64_t)v925[1]) >> 4
      && v922 == ((char *)v924[1] - (char *)v924[0]) >> 4
      && v918 == (v63 - (char *)v927[0]) >> 5
      && v916 == (uint64_t)(v929 - *((_QWORD *)&v928 + 1)) >> 4)
    {
      v944 = 0u;
      v945 = 0u;
      v943 = 0u;
      memset(v942, 0, sizeof(v942));
      sub_223192708(v902, (uint64_t)v942);
      if (*((_QWORD *)&v944 + 1))
      {
        *(_QWORD *)&v945 = *((_QWORD *)&v944 + 1);
        operator delete(*((void **)&v944 + 1));
      }
      v72 = v943;
      if ((_QWORD)v943)
      {
        v73 = *((_QWORD *)&v943 + 1);
        v74 = (void *)v943;
        if (*((_QWORD *)&v943 + 1) != (_QWORD)v943)
        {
          do
          {
            v82 = *(std::__shared_weak_count **)(v73 - 8);
            if (v82)
            {
              v83 = (unint64_t *)&v82->__shared_owners_;
              do
                v84 = __ldaxr(v83);
              while (__stlxr(v84 - 1, v83));
              if (!v84)
              {
                ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                std::__shared_weak_count::__release_weak(v82);
              }
            }
            v73 -= 32;
          }
          while (v73 != v72);
          v74 = (void *)v943;
        }
        *((_QWORD *)&v943 + 1) = v72;
        operator delete(v74);
      }
      if (v942[3])
      {
        v942[4] = v942[3];
        operator delete(v942[3]);
      }
      if (v942[0])
      {
        v942[1] = v942[0];
        operator delete(v942[0]);
      }
      if (v924[0])
      {
        v924[1] = v924[0];
        operator delete(v924[0]);
      }
      v924[1] = 0;
      v924[0] = 0;
      v925[0] = 0;
      if (v925[1])
      {
        *(void **)&v926 = v925[1];
        operator delete(v925[1]);
      }
      v925[1] = 0;
      v926 = 0uLL;
      v208 = (char *)v927[0];
      if (v927[0])
      {
        v209 = (char *)v927[1];
        v210 = v927[0];
        if (v927[1] != v927[0])
        {
          do
          {
            v211 = (std::__shared_weak_count *)*((_QWORD *)v209 - 1);
            if (v211)
            {
              v212 = (unint64_t *)&v211->__shared_owners_;
              do
                v213 = __ldaxr(v212);
              while (__stlxr(v213 - 1, v212));
              if (!v213)
              {
                ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
                std::__shared_weak_count::__release_weak(v211);
              }
            }
            v209 -= 32;
          }
          while (v209 != v208);
          v210 = v927[0];
        }
        v927[1] = v208;
        operator delete(v210);
      }
      v927[0] = 0;
      v927[1] = 0;
      *(_QWORD *)&v928 = 0;
      if (*((_QWORD *)&v928 + 1))
      {
        *(_QWORD *)&v929 = *((_QWORD *)&v928 + 1);
        operator delete(*((void **)&v928 + 1));
      }
      *((_QWORD *)&v928 + 1) = 0;
      v929 = 0uLL;
      v923 = 0;
      v922 = 0;
      atomic_store(0, (unsigned __int8 *)(a1 + 624));
      std::condition_variable::notify_one(v903);
      v918 = 0;
      v916 = 0;
      v52 = v915;
      goto LABEL_1141;
    }
    if (!__lk.__owns_)
    {
      std::__throw_system_error(1, "unique_lock::unlock: not locked");
      __break(1u);
      return;
    }
    std::mutex::unlock(__lk.__m_);
    __lk.__owns_ = 0;
    context = (void *)MEMORY[0x22768533C](v75, v76);
    kdebug_trace();
    sub_223192614(__s);
    if (**(int **)(*(_QWORD *)__s + 56) > 3)
      goto LABEL_220;
    v77 = *(unsigned __int8 *)(*(_QWORD *)__s + 72);
    v78 = sub_22455F97C((uint64_t *)__s);
    if (!v77 && !v78)
      goto LABEL_220;
    *(_QWORD *)type = v78;
    *(_QWORD *)v952 = __s;
    *(std::chrono::steady_clock::time_point *)&v952[8] = std::chrono::steady_clock::now();
    *(std::chrono::system_clock::time_point *)&v952[16] = std::chrono::system_clock::now();
    *(_DWORD *)v953 = 3;
    *(_QWORD *)&v953[8] = "unknown file";
    *(_DWORD *)&v953[16] = 430;
    v954 = "unknown function";
    v955 = 0;
    v956 = 0;
    v79 = **(_QWORD **)v952;
    v80 = (const char *)(**(_QWORD **)v952 + 16);
    v868 = v80;
    if (*(char *)(**(_QWORD **)v952 + 39) < 0)
    {
      v80 = *(const char **)(v79 + 16);
      v81 = *(_QWORD *)(v79 + 24);
    }
    else
    {
      v81 = *(unsigned __int8 *)(**(_QWORD **)v952 + 39);
    }
    v85 = v924[1];
    v86 = v926;
    v873 = v925[1];
    v877 = v924[0];
    v882 = v929;
    v888 = v927[1];
    v871 = *((_QWORD *)&v928 + 1);
    v872 = v927[0];
    v87 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v87 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)&v934);
      sub_223199C58("com.apple.cv3d", (unint64_t)&v934, &xmmword_255788F40);
      if ((_BYTE)v936 && SHIBYTE(rep) < 0)
        operator delete((void *)v934);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
      a1 = v866;
    }
    if (byte_255788F57 >= 0)
      v88 = (const char *)&xmmword_255788F40;
    else
      v88 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v89 = byte_255788F57;
    else
      v89 = *((_QWORD *)&xmmword_255788F40 + 1);
    v90 = v80;
    v91 = os_log_create(v88, v80);
    v942[0] = v91;

    if (v89 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v89 >= 0x17)
    {
      v93 = v79;
      v94 = v86;
      v95 = v85;
      v96 = (v89 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v89 | 7) != 0x17)
        v96 = v89 | 7;
      v97 = v96 + 1;
      v92 = (id *)operator new(v96 + 1);
      v942[3] = (id)(v97 | 0x8000000000000000);
      v942[1] = v92;
      v942[2] = (id)v89;
      v85 = v95;
      v86 = v94;
      v79 = v93;
      a1 = v866;
      goto LABEL_154;
    }
    HIBYTE(v942[3]) = v89;
    v92 = &v942[1];
    if (v89)
LABEL_154:
      memmove(v92, v88, v89);
    *((_BYTE *)v92 + v89) = 0;
    LOBYTE(v942[4]) = 1;
    if (v81 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v81 >= 0x17)
    {
      v99 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v81 | 7) != 0x17)
        v99 = v81 | 7;
      v100 = v99 + 1;
      v98 = (id *)operator new(v99 + 1);
      *((_QWORD *)&v943 + 1) = v100 | 0x8000000000000000;
      v942[5] = v98;
      *(_QWORD *)&v943 = v81;
    }
    else
    {
      HIBYTE(v943) = v81;
      v98 = &v942[5];
      if (!v81)
        goto LABEL_163;
    }
    memmove(v98, v90, v81);
LABEL_163:
    *((_BYTE *)v98 + v81) = 0;
    LOBYTE(v944) = 1;
    v101 = objc_retainAutorelease(v942[0]);
    if ((_BYTE)v944 && SHIBYTE(v943) < 0)
      operator delete(v942[5]);
    if (LOBYTE(v942[4]) && SHIBYTE(v942[3]) < 0)
      operator delete(v942[1]);

    v870 = v77;
    v102 = (v86 - (uint64_t)v873) >> 4;
    v103 = (v888 - v872) >> 5;
    v104 = sub_22455F7B4(3u);
    v105 = v101;
    v106 = v105;
    if (*(_QWORD *)type && *(_QWORD *)(*(_QWORD *)type + 8))
    {
      v889 = v105;
      v107 = _os_log_pack_size();
      v108 = (std::__shared_weak_count_vtbl *)operator new(v107, (std::align_val_t)8uLL);
      v109 = (std::__shared_weak_count *)operator new();
      v110 = v109;
      v109->__shared_owners_ = 0;
      v111 = (unint64_t *)&v109->__shared_owners_;
      v109->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
      v109->__shared_weak_owners_ = 0;
      v109[1].__vftable = v108;
      v942[0] = v108;
      v942[1] = v108;
      v942[2] = v109;
      do
        v112 = __ldxr(v111);
      while (__stxr(v112 + 1, v111));
      memset(&v942[3], 0, 24);
      v106 = v889;
      do
        v113 = __ldaxr(v111);
      while (__stlxr(v113 - 1, v111));
      if (!v113)
      {
        ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
        std::__shared_weak_count::__release_weak(v110);
      }
      v114 = v942[0];
      v115 = _os_log_pack_fill();
      *(_DWORD *)v115 = 134218752;
      *(_QWORD *)(v115 + 4) = (v85 - v877) >> 4;
      *(_WORD *)(v115 + 12) = 2048;
      *(_QWORD *)(v115 + 14) = v102;
      *(_WORD *)(v115 + 22) = 2048;
      *(_QWORD *)(v115 + 24) = v103;
      *(_WORD *)(v115 + 32) = 2048;
      *(_QWORD *)(v115 + 34) = (v882 - v871) >> 4;
      v116 = operator new();
      v117 = *(unsigned __int8 *)(v79 + 39);
      v118 = v868;
      if ((v117 & 0x80u) != 0)
      {
        v118 = *(const char **)(v79 + 16);
        v117 = *(_QWORD *)(v79 + 24);
      }
      *(_QWORD *)v116 = v114;
      *(_OWORD *)(v116 + 8) = *(_OWORD *)&v942[1];
      v942[1] = 0;
      v942[2] = 0;
      *(_OWORD *)(v116 + 24) = *(_OWORD *)&v942[3];
      v942[3] = 0;
      v942[4] = 0;
      *(_QWORD *)(v116 + 40) = v118;
      *(_QWORD *)(v116 + 48) = v117;
      *(_BYTE *)(v116 + 56) = v104;
      *(_QWORD *)__src = 0;
      *(_QWORD *)&v934 = v116;
      (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(*(_QWORD *)type + 8) + 40))(*(_QWORD *)(*(_QWORD *)type + 8), &v934);
      v52 = v915;
      v119 = v870;
      v120 = v934;
      *(_QWORD *)&v934 = 0;
      if (v120)
      {
        v121 = *(std::__shared_weak_count **)(v120 + 32);
        if (v121)
        {
          v122 = (unint64_t *)&v121->__shared_owners_;
          do
            v123 = __ldaxr(v122);
          while (__stlxr(v123 - 1, v122));
          if (!v123)
          {
            ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
            std::__shared_weak_count::__release_weak(v121);
          }
        }
        v124 = *(std::__shared_weak_count **)(v120 + 16);
        if (v124)
        {
          v125 = (unint64_t *)&v124->__shared_owners_;
          do
            v126 = __ldaxr(v125);
          while (__stlxr(v126 - 1, v125));
          if (!v126)
          {
            ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
            std::__shared_weak_count::__release_weak(v124);
          }
        }
        MEMORY[0x227684CE8](v120, 0x10F0C40B62ED6C6);
        v127 = *(_QWORD *)__src;
        *(_QWORD *)__src = 0;
        if (v127)
        {
          v128 = *(std::__shared_weak_count **)(v127 + 32);
          if (v128)
          {
            v129 = (unint64_t *)&v128->__shared_owners_;
            do
              v130 = __ldaxr(v129);
            while (__stlxr(v130 - 1, v129));
            if (!v130)
            {
              ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
              std::__shared_weak_count::__release_weak(v128);
            }
          }
          v131 = *(std::__shared_weak_count **)(v127 + 16);
          if (v131)
          {
            v132 = (unint64_t *)&v131->__shared_owners_;
            do
              v133 = __ldaxr(v132);
            while (__stlxr(v133 - 1, v132));
            if (!v133)
            {
              ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
              std::__shared_weak_count::__release_weak(v131);
            }
          }
          MEMORY[0x227684CE8](v127, 0x10F0C40B62ED6C6);
        }
      }
      v134 = (std::__shared_weak_count *)v942[4];
      if (v942[4])
      {
        v135 = (unint64_t *)((char *)v942[4] + 8);
        do
          v136 = __ldaxr(v135);
        while (__stlxr(v136 - 1, v135));
        if (!v136)
        {
          ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
          std::__shared_weak_count::__release_weak(v134);
        }
      }
      v137 = (std::__shared_weak_count *)v942[2];
      if (v942[2])
      {
        v138 = (unint64_t *)((char *)v942[2] + 8);
        do
          v139 = __ldaxr(v138);
        while (__stlxr(v139 - 1, v138));
        if (!v139)
        {
          ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
          std::__shared_weak_count::__release_weak(v137);
        }
      }
    }
    else
    {
      os_log_type_enabled(v105, v104);
      LODWORD(v942[0]) = 134218752;
      *(id *)((char *)v942 + 4) = (id)((v85 - v877) >> 4);
      WORD2(v942[1]) = 2048;
      *(id *)((char *)&v942[1] + 6) = (id)v102;
      HIWORD(v942[2]) = 2048;
      v942[3] = (id)((v888 - v872) >> 5);
      LOWORD(v942[4]) = 2048;
      *(id *)((char *)&v942[4] + 2) = (id)((v882 - v871) >> 4);
      v140 = (void *)_os_log_send_and_compose_impl();
      v52 = v915;
      v119 = v870;
      if (v140)
        free(v140);
    }

    if (v119)
    {
      sub_22322C138((uint64_t)v952, "KFM:RL NS:%lu, NL:%lu, NSS:%lu, NP:%lu", ((char *)v924[1] - (char *)v924[0]) >> 4, (uint64_t)(v926 - (unint64_t)v925[1]) >> 4, ((char *)v927[1] - (char *)v927[0]) >> 5, (uint64_t)(v929 - *((_QWORD *)&v928 + 1)) >> 4);
      sub_223182C08((uint64_t)v952);
    }
    sub_223182C08((uint64_t)v952);
    v141 = v956;
    if (v956)
    {
      v142 = (unint64_t *)&v956->__shared_owners_;
      do
        v143 = __ldaxr(v142);
      while (__stlxr(v143 - 1, v142));
      if (!v143)
      {
        ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
        std::__shared_weak_count::__release_weak(v141);
        v144 = v927[0];
        if (v918 < ((char *)v927[1] - (char *)v927[0]) >> 5)
          goto LABEL_221;
LABEL_227:
        v152 = *((_QWORD *)&v928 + 1);
        if (v916 >= (uint64_t)(v929 - *((_QWORD *)&v928 + 1)) >> 4)
          goto LABEL_630;
LABEL_228:
        sub_223182B14(&v932);
        v153 = (unsigned __int8 *)(v152 + 16 * v916);
        if (**(int **)(v932.__r_.__value_.__r.__words[0] + 56) > 3)
          goto LABEL_524;
        v154 = *(unsigned __int8 *)(v932.__r_.__value_.__r.__words[0] + 72);
        v155 = sub_22455F97C((uint64_t *)&v932);
        v156 = v155;
        if (!v154 && !v155)
          goto LABEL_524;
        *(_QWORD *)v952 = &v932;
        *(std::chrono::steady_clock::time_point *)&v952[8] = std::chrono::steady_clock::now();
        *(std::chrono::system_clock::time_point *)&v952[16] = std::chrono::system_clock::now();
        *(_DWORD *)v953 = 3;
        *(_QWORD *)&v953[8] = "unknown file";
        *(_DWORD *)&v953[16] = 510;
        v954 = "unknown function";
        v955 = 0;
        v956 = 0;
        sub_2245664AC(v153, __s);
        typeb = (unsigned __int8 *)(v152 + 16 * v916);
        v157 = **(_QWORD **)v952;
        v158 = (const char *)(**(_QWORD **)v952 + 16);
        v879 = v158;
        v883 = **(_QWORD **)v952;
        if (*(char *)(**(_QWORD **)v952 + 39) < 0)
        {
          v158 = *(const char **)(v157 + 16);
          v159 = *(_QWORD *)(v157 + 24);
        }
        else
        {
          v159 = *(unsigned __int8 *)(**(_QWORD **)v952 + 39);
        }
        v891 = v929;
        v184 = *((_QWORD *)&v928 + 1);
        v185 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v185 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)&v934);
          sub_223199C58("com.apple.cv3d", (unint64_t)&v934, &xmmword_255788F40);
          if ((_BYTE)v936 && SHIBYTE(rep) < 0)
            operator delete((void *)v934);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
          v52 = v915;
          a1 = v866;
        }
        if (byte_255788F57 >= 0)
          v186 = (const char *)&xmmword_255788F40;
        else
          v186 = (const char *)xmmword_255788F40;
        if (byte_255788F57 >= 0)
          v187 = byte_255788F57;
        else
          v187 = *((_QWORD *)&xmmword_255788F40 + 1);
        v188 = os_log_create(v186, v158);
        v942[0] = v188;

        if (v187 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v187 >= 0x17)
        {
          v190 = (v187 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v187 | 7) != 0x17)
            v190 = v187 | 7;
          v191 = v190 + 1;
          v189 = (id *)operator new(v190 + 1);
          v942[3] = (id)(v191 | 0x8000000000000000);
          v942[1] = v189;
          v942[2] = (id)v187;
          v52 = v915;
        }
        else
        {
          HIBYTE(v942[3]) = v187;
          v189 = &v942[1];
          if (!v187)
          {
LABEL_287:
            *((_BYTE *)v189 + v187) = 0;
            LOBYTE(v942[4]) = 1;
            if (v159 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v159 >= 0x17)
            {
              v193 = (v159 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v159 | 7) != 0x17)
                v193 = v159 | 7;
              v194 = v193 + 1;
              v192 = (id *)operator new(v193 + 1);
              *((_QWORD *)&v943 + 1) = v194 | 0x8000000000000000;
              v942[5] = v192;
              *(_QWORD *)&v943 = v159;
              v52 = v915;
            }
            else
            {
              HIBYTE(v943) = v159;
              v192 = &v942[5];
              if (!v159)
                goto LABEL_295;
            }
            memmove(v192, v158, v159);
LABEL_295:
            *((_BYTE *)v192 + v159) = 0;
            LOBYTE(v944) = 1;
            v195 = objc_retainAutorelease(v942[0]);
            if ((_BYTE)v944 && SHIBYTE(v943) < 0)
              operator delete(v942[5]);
            if (LOBYTE(v942[4]) && SHIBYTE(v942[3]) < 0)
              operator delete(v942[1]);

            v196 = v916 + 1;
            v197 = (v891 - v184) >> 4;
            v198 = sub_22455F7B4(3u);
            v199 = v195;
            v200 = v199;
            if (!v156 || !*(_QWORD *)(v156 + 8))
            {
              os_log_type_enabled(v199, v198);
              LODWORD(v942[0]) = 136315650;
              *(id *)((char *)v942 + 4) = __s;
              WORD2(v942[1]) = 2048;
              *(id *)((char *)&v942[1] + 6) = (id)(v916 + 1);
              HIWORD(v942[2]) = 2048;
              v942[3] = (id)v197;
              v207 = (void *)_os_log_send_and_compose_impl();
              if (v207)
                free(v207);
              goto LABEL_516;
            }
            v201 = _os_log_pack_size();
            v202 = (std::__shared_weak_count_vtbl *)operator new(v201, (std::align_val_t)8uLL);
            v203 = (std::__shared_weak_count *)operator new();
            v203->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v203->__shared_owners_ = 0;
            v203->__shared_weak_owners_ = 0;
            v203[1].__vftable = v202;
            *(_QWORD *)&v934 = v202;
            *((_QWORD *)&v934 + 1) = v202;
            rep = v203;
            v936 = 0;
            v937 = 0;
            v204 = strlen(__s);
            if (v204 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v205 = (void *)v204;
            if (v204 >= 0x17)
            {
              v227 = (v204 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v204 | 7) != 0x17)
                v227 = v204 | 7;
              v228 = v227 + 1;
              v206 = operator new(v227 + 1);
              v951[1] = (void *)(v228 | 0x8000000000000000);
              *(_QWORD *)v950 = v206;
              v951[0] = v205;
            }
            else
            {
              HIBYTE(v951[1]) = v204;
              v206 = v950;
              if (!v204)
                goto LABEL_357;
            }
            memcpy(v206, __s, (size_t)v205);
LABEL_357:
            *((_BYTE *)v205 + (_QWORD)v206) = 0;
            *(void **)&__src[16] = v951[0];
            *(void **)&__src[23] = *(void **)((char *)v951 + 7);
            *(_QWORD *)__src = off_24EC1F890;
            *(_QWORD *)&__src[8] = *(_QWORD *)v950;
            __src[31] = HIBYTE(v951[1]);
            v229 = operator new(0x40uLL);
            v229[1] = 0;
            v229[2] = 0;
            *v229 = &off_24EC1F840;
            v229[3] = off_24EC1F890;
            *((_OWORD *)v229 + 2) = *(_OWORD *)&__src[8];
            v229[6] = *(_QWORD *)&__src[24];
            memset(&__src[8], 0, 24);
            v230 = (std::__shared_weak_count *)v937;
            v936 = (char *)(v229 + 3);
            v937 = (const char *)v229;
            v196 = v916 + 1;
            if (!v230)
              goto LABEL_361;
            v231 = (unint64_t *)&v230->__shared_owners_;
            do
              v232 = __ldaxr(v231);
            while (__stlxr(v232 - 1, v231));
            if (!v232)
            {
              ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
              std::__shared_weak_count::__release_weak(v230);
              if ((__src[31] & 0x80000000) == 0)
                goto LABEL_363;
            }
            else
            {
LABEL_361:
              if ((__src[31] & 0x80000000) == 0)
              {
LABEL_363:
                nullsub_30(__src);
                *(_OWORD *)v942 = v934;
                v233 = v936;
                v942[2] = rep;
                if (rep)
                {
                  v234 = (unint64_t *)&rep->__shared_owners_;
                  do
                    v235 = __ldxr(v234);
                  while (__stxr(v235 + 1, v234));
                }
                v236 = (std::__shared_weak_count *)v937;
                v942[3] = v233;
                v942[4] = (id)v937;
                if (v937)
                {
                  v237 = (unint64_t *)(v937 + 8);
                  do
                    v238 = __ldxr(v237);
                  while (__stxr(v238 + 1, v237));
                  v942[5] = v233;
                  do
                    v239 = __ldaxr(v237);
                  while (__stlxr(v239 - 1, v237));
                  if (!v239)
                  {
                    ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
                    std::__shared_weak_count::__release_weak(v236);
                  }
                }
                else
                {
                  v942[5] = v233;
                }
                v301 = rep;
                if (rep)
                {
                  v302 = (unint64_t *)&rep->__shared_owners_;
                  do
                    v303 = __ldaxr(v302);
                  while (__stlxr(v303 - 1, v302));
                  if (!v303)
                  {
                    ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
                    std::__shared_weak_count::__release_weak(v301);
                  }
                }
                v304 = v942[0];
                if (*((char *)v942[5] + 31) >= 0)
                  v305 = (char *)v942[5] + 8;
                else
                  v305 = (char *)*((_QWORD *)v942[5] + 1);
                v306 = _os_log_pack_fill();
                *(_DWORD *)v306 = 136315650;
                *(_QWORD *)(v306 + 4) = v305;
                *(_WORD *)(v306 + 12) = 2048;
                *(_QWORD *)(v306 + 14) = v196;
                *(_WORD *)(v306 + 22) = 2048;
                *(_QWORD *)(v306 + 24) = v197;
                v307 = operator new();
                v308 = *(unsigned __int8 *)(v883 + 39);
                v309 = v879;
                if ((v308 & 0x80u) != 0)
                {
                  v309 = *(const char **)(v883 + 16);
                  v308 = *(_QWORD *)(v883 + 24);
                }
                *(_QWORD *)v307 = v304;
                *(_OWORD *)(v307 + 8) = *(_OWORD *)&v942[1];
                v942[1] = 0;
                v942[2] = 0;
                *(_OWORD *)(v307 + 24) = *(_OWORD *)&v942[3];
                v942[3] = 0;
                v942[4] = 0;
                *(_QWORD *)(v307 + 40) = v309;
                *(_QWORD *)(v307 + 48) = v308;
                *(_BYTE *)(v307 + 56) = v198;
                *(_QWORD *)__src = 0;
                *(_QWORD *)&v934 = v307;
                (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v156 + 8) + 40))(*(_QWORD *)(v156 + 8), &v934);
                v52 = v915;
                v310 = v934;
                *(_QWORD *)&v934 = 0;
                if (v310)
                {
                  v311 = *(std::__shared_weak_count **)(v310 + 32);
                  if (v311)
                  {
                    v312 = (unint64_t *)&v311->__shared_owners_;
                    do
                      v313 = __ldaxr(v312);
                    while (__stlxr(v313 - 1, v312));
                    if (!v313)
                    {
                      ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
                      std::__shared_weak_count::__release_weak(v311);
                    }
                  }
                  v314 = *(std::__shared_weak_count **)(v310 + 16);
                  if (v314)
                  {
                    v315 = (unint64_t *)&v314->__shared_owners_;
                    do
                      v316 = __ldaxr(v315);
                    while (__stlxr(v316 - 1, v315));
                    if (!v316)
                    {
                      ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
                      std::__shared_weak_count::__release_weak(v314);
                    }
                  }
                  MEMORY[0x227684CE8](v310, 0x10F0C40B62ED6C6);
                  v317 = *(_QWORD *)__src;
                  *(_QWORD *)__src = 0;
                  if (v317)
                  {
                    v318 = *(std::__shared_weak_count **)(v317 + 32);
                    if (v318)
                    {
                      v319 = (unint64_t *)&v318->__shared_owners_;
                      do
                        v320 = __ldaxr(v319);
                      while (__stlxr(v320 - 1, v319));
                      if (!v320)
                      {
                        ((void (*)(std::__shared_weak_count *))v318->__on_zero_shared)(v318);
                        std::__shared_weak_count::__release_weak(v318);
                      }
                    }
                    v321 = *(std::__shared_weak_count **)(v317 + 16);
                    if (v321)
                    {
                      v322 = (unint64_t *)&v321->__shared_owners_;
                      do
                        v323 = __ldaxr(v322);
                      while (__stlxr(v323 - 1, v322));
                      if (!v323)
                      {
                        ((void (*)(std::__shared_weak_count *))v321->__on_zero_shared)(v321);
                        std::__shared_weak_count::__release_weak(v321);
                      }
                    }
                    MEMORY[0x227684CE8](v317, 0x10F0C40B62ED6C6);
                  }
                }
                v324 = (std::__shared_weak_count *)v942[4];
                if (v942[4])
                {
                  v325 = (unint64_t *)((char *)v942[4] + 8);
                  do
                    v326 = __ldaxr(v325);
                  while (__stlxr(v326 - 1, v325));
                  if (!v326)
                  {
                    ((void (*)(std::__shared_weak_count *))v324->__on_zero_shared)(v324);
                    std::__shared_weak_count::__release_weak(v324);
                  }
                }
                v327 = (std::__shared_weak_count *)v942[2];
                if (v942[2])
                {
                  v328 = (unint64_t *)((char *)v942[2] + 8);
                  do
                    v329 = __ldaxr(v328);
                  while (__stlxr(v329 - 1, v328));
                  if (!v329)
                  {
                    ((void (*)(std::__shared_weak_count *))v327->__on_zero_shared)(v327);
                    std::__shared_weak_count::__release_weak(v327);
                  }
                }
LABEL_516:

                if (v154)
                {
                  sub_2245664AC(typeb, v942);
                  sub_22322C138((uint64_t)v952, "Pruning keyframe %s (%zu/%zu)", (const char *)v942, v196, (uint64_t)(v929 - *((_QWORD *)&v928 + 1)) >> 4);
                  sub_223182C08((uint64_t)v952);
                }
                sub_223182C08((uint64_t)v952);
                v330 = v956;
                if (v956)
                {
                  v331 = (unint64_t *)&v956->__shared_owners_;
                  do
                    v332 = __ldaxr(v331);
                  while (__stlxr(v332 - 1, v331));
                  if (!v332)
                  {
                    ((void (*)(std::__shared_weak_count *))v330->__on_zero_shared)(v330);
                    std::__shared_weak_count::__release_weak(v330);
                  }
                }
                v153 = typeb;
LABEL_524:
                std::mutex::lock(v52);
                if (sub_2231A88F8(v914, v153))
                {
                  if (!sub_223192878((uint64_t)v914, v153)
                    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeMemory.mm", 515, (uint64_t)"res", 3, (uint64_t)"Failed to remove keyframe from shared memory", 44, (void (*)(void **))sub_22457406C))
                  {
                    abort();
                  }
                  goto LABEL_1021;
                }
                if ((sub_2231A81F8(*(_QWORD *)(a1 + 368), v153) & 1) != 0)
                  goto LABEL_1021;
                v333 = atomic_load((unsigned __int8 *)&qword_2557892F0);
                if ((v333 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
                {
                  __cxa_atexit((void (*)(void *))sub_2231A8A28, &unk_255789280, &dword_22314D000);
                  __cxa_guard_release(&qword_2557892F0);
                }
                sub_223195728((uint64_t)&unk_255789280, "cv3d.recon.kf_pers", 0x12uLL, "Keyframe could not be pruned from disk: %s", 0x2AuLL);
                sub_223192614(&v932);
                if (**(int **)(v932.__r_.__value_.__r.__words[0] + 56) > 5
                  || (v334 = *(unsigned __int8 *)(v932.__r_.__value_.__r.__words[0] + 72),
                      v335 = sub_22455F97C((uint64_t *)&v932),
                      v336 = v335,
                      !v334)
                  && !v335)
                {
LABEL_1021:
                  std::mutex::unlock(v52);
                  ++v916;
                  v398 = v922;
                  v399 = (char *)v924[0];
                  if (v922 < ((char *)v924[1] - (char *)v924[0]) >> 4)
                    goto LABEL_631;
                  goto LABEL_1022;
                }
                *(_QWORD *)v952 = &v932;
                *(std::chrono::steady_clock::time_point *)&v952[8] = std::chrono::steady_clock::now();
                *(std::chrono::system_clock::time_point *)&v952[16] = std::chrono::system_clock::now();
                *(_DWORD *)v953 = 5;
                *(_QWORD *)&v953[8] = "unknown file";
                *(_DWORD *)&v953[16] = 519;
                v954 = "unknown function";
                v955 = 0;
                v956 = 0;
                sub_2245664AC(v153, __src);
                typec = v153;
                v337 = **(_QWORD **)v952;
                v338 = (const char *)(**(_QWORD **)v952 + 16);
                v893 = v338;
                if (*(char *)(**(_QWORD **)v952 + 39) < 0)
                {
                  v338 = *(const char **)(v337 + 16);
                  v340 = *(_QWORD *)(v337 + 24);
                  v339 = **(_QWORD **)v952;
                  v529 = atomic_load((unsigned __int8 *)&qword_255788F58);
                  if ((v529 & 1) != 0)
                    goto LABEL_837;
                }
                else
                {
                  v339 = **(_QWORD **)v952;
                  v340 = *(unsigned __int8 *)(**(_QWORD **)v952 + 39);
                  v341 = atomic_load((unsigned __int8 *)&qword_255788F58);
                  if ((v341 & 1) != 0)
                    goto LABEL_837;
                }
                if (__cxa_guard_acquire(&qword_255788F58))
                {
                  sub_224568628((uint64_t)&v934);
                  sub_223199C58("com.apple.cv3d", (unint64_t)&v934, &xmmword_255788F40);
                  if ((_BYTE)v936 && SHIBYTE(rep) < 0)
                    operator delete((void *)v934);
                  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
                  __cxa_guard_release(&qword_255788F58);
                  v52 = v915;
                  a1 = v866;
                }
LABEL_837:
                if (byte_255788F57 >= 0)
                  v530 = (const char *)&xmmword_255788F40;
                else
                  v530 = (const char *)xmmword_255788F40;
                if (byte_255788F57 >= 0)
                  v531 = byte_255788F57;
                else
                  v531 = *((_QWORD *)&xmmword_255788F40 + 1);
                v532 = os_log_create(v530, v338);
                v942[0] = v532;

                if (v531 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                if (v531 >= 0x17)
                {
                  v534 = (v531 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v531 | 7) != 0x17)
                    v534 = v531 | 7;
                  v535 = v534 + 1;
                  v533 = (id *)operator new(v534 + 1);
                  v942[3] = (id)(v535 | 0x8000000000000000);
                  v942[1] = v533;
                  v942[2] = (id)v531;
                  v52 = v915;
                }
                else
                {
                  HIBYTE(v942[3]) = v531;
                  v533 = &v942[1];
                  if (!v531)
                  {
LABEL_851:
                    *((_BYTE *)v533 + v531) = 0;
                    LOBYTE(v942[4]) = 1;
                    if (v340 > 0x7FFFFFFFFFFFFFF7)
                      sub_22316DBC0();
                    if (v340 >= 0x17)
                    {
                      v537 = (v340 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v340 | 7) != 0x17)
                        v537 = v340 | 7;
                      v538 = v537 + 1;
                      v536 = (id *)operator new(v537 + 1);
                      *((_QWORD *)&v943 + 1) = v538 | 0x8000000000000000;
                      v942[5] = v536;
                      *(_QWORD *)&v943 = v340;
                      v52 = v915;
                    }
                    else
                    {
                      HIBYTE(v943) = v340;
                      v536 = &v942[5];
                      if (!v340)
                        goto LABEL_859;
                    }
                    memmove(v536, v338, v340);
LABEL_859:
                    *((_BYTE *)v536 + v340) = 0;
                    LOBYTE(v944) = 1;
                    v539 = objc_retainAutorelease(v942[0]);
                    if ((_BYTE)v944 && SHIBYTE(v943) < 0)
                      operator delete(v942[5]);
                    if (LOBYTE(v942[4]) && SHIBYTE(v942[3]) < 0)
                      operator delete(v942[1]);

                    v540 = sub_22455F7B4(5u);
                    v541 = v539;
                    v542 = v541;
                    if (!v336 || !*(_QWORD *)(v336 + 8))
                    {
                      os_log_type_enabled(v541, v540);
                      LODWORD(v942[0]) = 136315138;
                      *(id *)((char *)v942 + 4) = __src;
                      v549 = (void *)_os_log_send_and_compose_impl();
                      if (v549)
                        free(v549);
                      goto LABEL_1014;
                    }
                    v543 = _os_log_pack_size();
                    v544 = (std::__shared_weak_count_vtbl *)operator new(v543, (std::align_val_t)8uLL);
                    v545 = (std::__shared_weak_count *)operator new();
                    v545->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                    v545->__shared_owners_ = 0;
                    v545->__shared_weak_owners_ = 0;
                    v545[1].__vftable = v544;
                    *(_QWORD *)&v934 = v544;
                    *((_QWORD *)&v934 + 1) = v544;
                    rep = v545;
                    v936 = 0;
                    v937 = 0;
                    v546 = strlen(__src);
                    if (v546 > 0x7FFFFFFFFFFFFFF7)
                      sub_22316DBC0();
                    v547 = (void *)v546;
                    if (v546 >= 0x17)
                    {
                      v563 = (v546 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v546 | 7) != 0x17)
                        v563 = v546 | 7;
                      v564 = v563 + 1;
                      v548 = operator new(v563 + 1);
                      v951[1] = (void *)(v564 | 0x8000000000000000);
                      *(_QWORD *)v950 = v548;
                      v951[0] = v547;
                    }
                    else
                    {
                      HIBYTE(v951[1]) = v546;
                      v548 = v950;
                      if (!v546)
                      {
LABEL_900:
                        *((_BYTE *)v547 + (_QWORD)v548) = 0;
                        *(void **)&v960[8] = v951[0];
                        *(void **)&v960[15] = *(void **)((char *)v951 + 7);
                        *(_QWORD *)__s = off_24EC1FA48;
                        *(_QWORD *)v960 = *(_QWORD *)v950;
                        v960[23] = HIBYTE(v951[1]);
                        v565 = operator new(0x38uLL);
                        v565[1] = 0;
                        v565[2] = 0;
                        *v565 = &off_24EC1F9F8;
                        v565[3] = off_24EC1FA48;
                        *((_OWORD *)v565 + 2) = *(_OWORD *)v960;
                        v565[6] = *(_QWORD *)&v960[16];
                        memset(v960, 0, sizeof(v960));
                        v566 = (std::__shared_weak_count *)v937;
                        v936 = (char *)(v565 + 3);
                        v937 = (const char *)v565;
                        if (v566)
                        {
                          v567 = (unint64_t *)&v566->__shared_owners_;
                          do
                            v568 = __ldaxr(v567);
                          while (__stlxr(v568 - 1, v567));
                          if (!v568)
                          {
                            ((void (*)(std::__shared_weak_count *))v566->__on_zero_shared)(v566);
                            std::__shared_weak_count::__release_weak(v566);
                          }
                        }
                        if ((v960[23] & 0x80000000) != 0)
                          operator delete(*(void **)v960);
                        nullsub_30(__s);
                        *(_OWORD *)v942 = v934;
                        v569 = v936;
                        v942[2] = rep;
                        if (rep)
                        {
                          v570 = (unint64_t *)&rep->__shared_owners_;
                          do
                            v571 = __ldxr(v570);
                          while (__stxr(v571 + 1, v570));
                        }
                        v572 = (std::__shared_weak_count *)v937;
                        v942[3] = v569;
                        v942[4] = (id)v937;
                        if (v937)
                        {
                          v573 = (unint64_t *)(v937 + 8);
                          do
                            v574 = __ldxr(v573);
                          while (__stxr(v574 + 1, v573));
                          v942[5] = v569;
                          do
                            v575 = __ldaxr(v573);
                          while (__stlxr(v575 - 1, v573));
                          if (!v575)
                          {
                            ((void (*)(std::__shared_weak_count *))v572->__on_zero_shared)(v572);
                            std::__shared_weak_count::__release_weak(v572);
                          }
                        }
                        else
                        {
                          v942[5] = v569;
                        }
                        v608 = rep;
                        if (rep)
                        {
                          v609 = (unint64_t *)&rep->__shared_owners_;
                          do
                            v610 = __ldaxr(v609);
                          while (__stlxr(v610 - 1, v609));
                          if (!v610)
                          {
                            ((void (*)(std::__shared_weak_count *))v608->__on_zero_shared)(v608);
                            std::__shared_weak_count::__release_weak(v608);
                          }
                        }
                        v611 = v942[0];
                        if (*((char *)v942[5] + 31) >= 0)
                          v612 = (char *)v942[5] + 8;
                        else
                          v612 = (char *)*((_QWORD *)v942[5] + 1);
                        v613 = _os_log_pack_fill();
                        *(_DWORD *)v613 = 136315138;
                        *(_QWORD *)(v613 + 4) = v612;
                        v614 = operator new();
                        v615 = *(unsigned __int8 *)(v339 + 39);
                        v616 = v893;
                        if ((v615 & 0x80u) != 0)
                        {
                          v616 = *(const char **)(v339 + 16);
                          v615 = *(_QWORD *)(v339 + 24);
                        }
                        *(_QWORD *)v614 = v611;
                        *(_OWORD *)(v614 + 8) = *(_OWORD *)&v942[1];
                        v942[1] = 0;
                        v942[2] = 0;
                        *(_OWORD *)(v614 + 24) = *(_OWORD *)&v942[3];
                        v942[3] = 0;
                        v942[4] = 0;
                        *(_QWORD *)(v614 + 40) = v616;
                        *(_QWORD *)(v614 + 48) = v615;
                        *(_BYTE *)(v614 + 56) = v540;
                        *(_QWORD *)__s = 0;
                        *(_QWORD *)&v934 = v614;
                        v52 = v915;
                        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v336 + 8) + 40))(*(_QWORD *)(v336 + 8), &v934);
                        v617 = v934;
                        *(_QWORD *)&v934 = 0;
                        if (v617)
                        {
                          v618 = *(std::__shared_weak_count **)(v617 + 32);
                          if (v618)
                          {
                            v619 = (unint64_t *)&v618->__shared_owners_;
                            do
                              v620 = __ldaxr(v619);
                            while (__stlxr(v620 - 1, v619));
                            if (!v620)
                            {
                              ((void (*)(std::__shared_weak_count *))v618->__on_zero_shared)(v618);
                              std::__shared_weak_count::__release_weak(v618);
                            }
                          }
                          v621 = *(std::__shared_weak_count **)(v617 + 16);
                          if (v621)
                          {
                            v622 = (unint64_t *)&v621->__shared_owners_;
                            do
                              v623 = __ldaxr(v622);
                            while (__stlxr(v623 - 1, v622));
                            if (!v623)
                            {
                              ((void (*)(std::__shared_weak_count *))v621->__on_zero_shared)(v621);
                              std::__shared_weak_count::__release_weak(v621);
                            }
                          }
                          MEMORY[0x227684CE8](v617, 0x10F0C40B62ED6C6);
                          v624 = *(_QWORD *)__s;
                          *(_QWORD *)__s = 0;
                          if (v624)
                          {
                            v625 = *(std::__shared_weak_count **)(v624 + 32);
                            if (v625)
                            {
                              v626 = (unint64_t *)&v625->__shared_owners_;
                              do
                                v627 = __ldaxr(v626);
                              while (__stlxr(v627 - 1, v626));
                              if (!v627)
                              {
                                ((void (*)(std::__shared_weak_count *))v625->__on_zero_shared)(v625);
                                std::__shared_weak_count::__release_weak(v625);
                              }
                            }
                            v628 = *(std::__shared_weak_count **)(v624 + 16);
                            if (v628)
                            {
                              v629 = (unint64_t *)&v628->__shared_owners_;
                              do
                                v630 = __ldaxr(v629);
                              while (__stlxr(v630 - 1, v629));
                              if (!v630)
                              {
                                ((void (*)(std::__shared_weak_count *))v628->__on_zero_shared)(v628);
                                std::__shared_weak_count::__release_weak(v628);
                              }
                            }
                            MEMORY[0x227684CE8](v624, 0x10F0C40B62ED6C6);
                          }
                        }
                        v631 = (std::__shared_weak_count *)v942[4];
                        if (v942[4])
                        {
                          v632 = (unint64_t *)((char *)v942[4] + 8);
                          do
                            v633 = __ldaxr(v632);
                          while (__stlxr(v633 - 1, v632));
                          if (!v633)
                          {
                            ((void (*)(std::__shared_weak_count *))v631->__on_zero_shared)(v631);
                            std::__shared_weak_count::__release_weak(v631);
                          }
                        }
                        v634 = (std::__shared_weak_count *)v942[2];
                        if (v942[2])
                        {
                          v635 = (unint64_t *)((char *)v942[2] + 8);
                          do
                            v636 = __ldaxr(v635);
                          while (__stlxr(v636 - 1, v635));
                          if (!v636)
                          {
                            ((void (*)(std::__shared_weak_count *))v634->__on_zero_shared)(v634);
                            std::__shared_weak_count::__release_weak(v634);
                          }
                        }
LABEL_1014:

                        if (v334)
                        {
                          sub_2245664AC(typec, v942);
                          sub_22322C138((uint64_t)v952, "Keyframe could not be pruned from disk: %s", (const char *)v942);
                          sub_223182C08((uint64_t)v952);
                        }
                        sub_223182C08((uint64_t)v952);
                        v637 = v956;
                        if (v956)
                        {
                          v638 = (unint64_t *)&v956->__shared_owners_;
                          do
                            v639 = __ldaxr(v638);
                          while (__stlxr(v639 - 1, v638));
                          if (!v639)
                          {
                            ((void (*)(std::__shared_weak_count *))v637->__on_zero_shared)(v637);
                            std::__shared_weak_count::__release_weak(v637);
                          }
                        }
                        goto LABEL_1021;
                      }
                    }
                    memcpy(v548, __src, (size_t)v547);
                    goto LABEL_900;
                  }
                }
                memmove(v533, v530, v531);
                goto LABEL_851;
              }
            }
            operator delete(*(void **)&__src[8]);
            goto LABEL_363;
          }
        }
        memmove(v189, v186, v187);
        goto LABEL_287;
      }
    }
LABEL_220:
    v144 = v927[0];
    if (v918 >= ((char *)v927[1] - (char *)v927[0]) >> 5)
      goto LABEL_227;
LABEL_221:
    sub_223182B14(&v932);
    v145 = (unsigned __int8 *)&v144[4 * v918];
    typea = v145;
    if (**(int **)(v932.__r_.__value_.__r.__words[0] + 56) > 3)
      goto LABEL_425;
    v146 = *(unsigned __int8 *)(v932.__r_.__value_.__r.__words[0] + 72);
    v147 = sub_22455F97C((uint64_t *)&v932);
    v148 = v147;
    if (!v146 && !v147)
      goto LABEL_425;
    *(_QWORD *)v952 = &v932;
    *(std::chrono::steady_clock::time_point *)&v952[8] = std::chrono::steady_clock::now();
    *(std::chrono::system_clock::time_point *)&v952[16] = std::chrono::system_clock::now();
    *(_DWORD *)v953 = 3;
    *(_QWORD *)&v953[8] = "unknown file";
    *(_DWORD *)&v953[16] = 496;
    v954 = "unknown function";
    v955 = 0;
    v956 = 0;
    sub_2245664AC(v145, __s);
    v149 = **(_QWORD **)v952;
    v150 = (const char *)(**(_QWORD **)v952 + 16);
    v874 = v150;
    v878 = **(_QWORD **)v952;
    if (*(char *)(**(_QWORD **)v952 + 39) < 0)
    {
      v150 = *(const char **)(v149 + 16);
      v151 = *(_QWORD *)(v149 + 24);
    }
    else
    {
      v151 = *(unsigned __int8 *)(**(_QWORD **)v952 + 39);
    }
    v884 = v146;
    v890 = v927[1];
    v160 = v927[0];
    v161 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v161 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)&v934);
      sub_223199C58("com.apple.cv3d", (unint64_t)&v934, &xmmword_255788F40);
      if ((_BYTE)v936 && SHIBYTE(rep) < 0)
        operator delete((void *)v934);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
      v52 = v915;
      a1 = v866;
    }
    if (byte_255788F57 >= 0)
      v162 = (const char *)&xmmword_255788F40;
    else
      v162 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v163 = byte_255788F57;
    else
      v163 = *((_QWORD *)&xmmword_255788F40 + 1);
    v164 = os_log_create(v162, v150);
    v942[0] = v164;

    if (v163 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v163 >= 0x17)
    {
      v166 = (v163 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v163 | 7) != 0x17)
        v166 = v163 | 7;
      v167 = v166 + 1;
      v165 = (id *)operator new(v166 + 1);
      v942[3] = (id)(v167 | 0x8000000000000000);
      v942[1] = v165;
      v942[2] = (id)v163;
      v52 = v915;
      goto LABEL_248;
    }
    HIBYTE(v942[3]) = v163;
    v165 = &v942[1];
    if (v163)
LABEL_248:
      memmove(v165, v162, v163);
    *((_BYTE *)v165 + v163) = 0;
    LOBYTE(v942[4]) = 1;
    if (v151 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v151 >= 0x17)
    {
      v169 = (v151 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v151 | 7) != 0x17)
        v169 = v151 | 7;
      v170 = v169 + 1;
      v168 = (id *)operator new(v169 + 1);
      *((_QWORD *)&v943 + 1) = v170 | 0x8000000000000000;
      v942[5] = v168;
      *(_QWORD *)&v943 = v151;
      v52 = v915;
    }
    else
    {
      HIBYTE(v943) = v151;
      v168 = &v942[5];
      if (!v151)
        goto LABEL_257;
    }
    memmove(v168, v150, v151);
LABEL_257:
    *((_BYTE *)v168 + v151) = 0;
    LOBYTE(v944) = 1;
    v171 = objc_retainAutorelease(v942[0]);
    if ((_BYTE)v944 && SHIBYTE(v943) < 0)
      operator delete(v942[5]);
    if (LOBYTE(v942[4]) && SHIBYTE(v942[3]) < 0)
      operator delete(v942[1]);

    v172 = (v890 - v160) >> 5;
    v173 = sub_22455F7B4(3u);
    v174 = v171;
    v175 = v174;
    if (!v148 || !*(_QWORD *)(v148 + 8))
    {
      os_log_type_enabled(v174, v173);
      LODWORD(v942[0]) = 136315650;
      *(id *)((char *)v942 + 4) = __s;
      WORD2(v942[1]) = 2048;
      *(id *)((char *)&v942[1] + 6) = (id)v918;
      HIWORD(v942[2]) = 2048;
      v942[3] = (id)v172;
      v182 = (void *)_os_log_send_and_compose_impl();
      v183 = v884;
      if (v182)
        free(v182);
      goto LABEL_417;
    }
    v176 = _os_log_pack_size();
    v177 = (std::__shared_weak_count_vtbl *)operator new(v176, (std::align_val_t)8uLL);
    v178 = (std::__shared_weak_count *)operator new();
    v178->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v178->__shared_owners_ = 0;
    v178->__shared_weak_owners_ = 0;
    v178[1].__vftable = v177;
    *(_QWORD *)&v934 = v177;
    *((_QWORD *)&v934 + 1) = v177;
    rep = v178;
    v936 = 0;
    v937 = 0;
    v179 = strlen(__s);
    if (v179 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    v180 = (void *)v179;
    if (v179 >= 0x17)
    {
      v214 = (v179 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v179 | 7) != 0x17)
        v214 = v179 | 7;
      v215 = v214 + 1;
      v181 = operator new(v214 + 1);
      v951[1] = (void *)(v215 | 0x8000000000000000);
      *(_QWORD *)v950 = v181;
      v951[0] = v180;
    }
    else
    {
      HIBYTE(v951[1]) = v179;
      v181 = v950;
      if (!v179)
        goto LABEL_337;
    }
    memcpy(v181, __s, (size_t)v180);
LABEL_337:
    *((_BYTE *)v180 + (_QWORD)v181) = 0;
    *(void **)&__src[16] = v951[0];
    *(void **)&__src[23] = *(void **)((char *)v951 + 7);
    *(_QWORD *)__src = off_24EC1F890;
    *(_QWORD *)&__src[8] = *(_QWORD *)v950;
    __src[31] = HIBYTE(v951[1]);
    v216 = operator new(0x40uLL);
    v216[1] = 0;
    v216[2] = 0;
    *v216 = &off_24EC1F840;
    v216[3] = off_24EC1F890;
    *((_OWORD *)v216 + 2) = *(_OWORD *)&__src[8];
    v216[6] = *(_QWORD *)&__src[24];
    memset(&__src[8], 0, 24);
    v217 = (std::__shared_weak_count *)v937;
    v936 = (char *)(v216 + 3);
    v937 = (const char *)v216;
    if (v217)
    {
      v218 = (unint64_t *)&v217->__shared_owners_;
      do
        v219 = __ldaxr(v218);
      while (__stlxr(v219 - 1, v218));
      if (!v219)
      {
        ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
        std::__shared_weak_count::__release_weak(v217);
        if ((__src[31] & 0x80000000) == 0)
          goto LABEL_343;
        goto LABEL_342;
      }
    }
    if ((__src[31] & 0x80000000) != 0)
LABEL_342:
      operator delete(*(void **)&__src[8]);
LABEL_343:
    nullsub_30(__src);
    *(_OWORD *)v942 = v934;
    v220 = v936;
    v942[2] = rep;
    if (rep)
    {
      v221 = (unint64_t *)&rep->__shared_owners_;
      do
        v222 = __ldxr(v221);
      while (__stxr(v222 + 1, v221));
    }
    v223 = (std::__shared_weak_count *)v937;
    v942[3] = v220;
    v942[4] = (id)v937;
    if (v937)
    {
      v224 = (unint64_t *)(v937 + 8);
      do
        v225 = __ldxr(v224);
      while (__stxr(v225 + 1, v224));
      v942[5] = v220;
      do
        v226 = __ldaxr(v224);
      while (__stlxr(v226 - 1, v224));
      if (!v226)
      {
        ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
        std::__shared_weak_count::__release_weak(v223);
      }
    }
    else
    {
      v942[5] = v220;
    }
    v240 = rep;
    if (rep)
    {
      v241 = (unint64_t *)&rep->__shared_owners_;
      do
        v242 = __ldaxr(v241);
      while (__stlxr(v242 - 1, v241));
      if (!v242)
      {
        ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
        std::__shared_weak_count::__release_weak(v240);
      }
    }
    v243 = v942[0];
    if (*((char *)v942[5] + 31) >= 0)
      v244 = (char *)v942[5] + 8;
    else
      v244 = (char *)*((_QWORD *)v942[5] + 1);
    v245 = _os_log_pack_fill();
    *(_DWORD *)v245 = 136315650;
    *(_QWORD *)(v245 + 4) = v244;
    *(_WORD *)(v245 + 12) = 2048;
    *(_QWORD *)(v245 + 14) = v918;
    *(_WORD *)(v245 + 22) = 2048;
    *(_QWORD *)(v245 + 24) = v172;
    v246 = operator new();
    v247 = *(unsigned __int8 *)(v878 + 39);
    v248 = v874;
    if ((v247 & 0x80u) != 0)
    {
      v248 = *(const char **)(v878 + 16);
      v247 = *(_QWORD *)(v878 + 24);
    }
    *(_QWORD *)v246 = v243;
    *(_OWORD *)(v246 + 8) = *(_OWORD *)&v942[1];
    v942[1] = 0;
    v942[2] = 0;
    *(_OWORD *)(v246 + 24) = *(_OWORD *)&v942[3];
    v942[3] = 0;
    v942[4] = 0;
    *(_QWORD *)(v246 + 40) = v248;
    *(_QWORD *)(v246 + 48) = v247;
    *(_BYTE *)(v246 + 56) = v173;
    *(_QWORD *)__src = 0;
    *(_QWORD *)&v934 = v246;
    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v148 + 8) + 40))(*(_QWORD *)(v148 + 8), &v934);
    v52 = v915;
    v249 = v934;
    *(_QWORD *)&v934 = 0;
    if (v249)
    {
      v250 = *(std::__shared_weak_count **)(v249 + 32);
      if (v250)
      {
        v251 = (unint64_t *)&v250->__shared_owners_;
        do
          v252 = __ldaxr(v251);
        while (__stlxr(v252 - 1, v251));
        if (!v252)
        {
          ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
          std::__shared_weak_count::__release_weak(v250);
        }
      }
      v253 = *(std::__shared_weak_count **)(v249 + 16);
      if (v253)
      {
        v254 = (unint64_t *)&v253->__shared_owners_;
        do
          v255 = __ldaxr(v254);
        while (__stlxr(v255 - 1, v254));
        if (!v255)
        {
          ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
          std::__shared_weak_count::__release_weak(v253);
        }
      }
      MEMORY[0x227684CE8](v249, 0x10F0C40B62ED6C6);
      v256 = *(_QWORD *)__src;
      *(_QWORD *)__src = 0;
      if (v256)
      {
        v257 = *(std::__shared_weak_count **)(v256 + 32);
        if (v257)
        {
          v258 = (unint64_t *)&v257->__shared_owners_;
          do
            v259 = __ldaxr(v258);
          while (__stlxr(v259 - 1, v258));
          if (!v259)
          {
            ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
            std::__shared_weak_count::__release_weak(v257);
          }
        }
        v260 = *(std::__shared_weak_count **)(v256 + 16);
        if (v260)
        {
          v261 = (unint64_t *)&v260->__shared_owners_;
          do
            v262 = __ldaxr(v261);
          while (__stlxr(v262 - 1, v261));
          if (!v262)
          {
            ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
            std::__shared_weak_count::__release_weak(v260);
          }
        }
        MEMORY[0x227684CE8](v256, 0x10F0C40B62ED6C6);
      }
    }
    v263 = (std::__shared_weak_count *)v942[4];
    v183 = v884;
    if (v942[4])
    {
      v264 = (unint64_t *)((char *)v942[4] + 8);
      do
        v265 = __ldaxr(v264);
      while (__stlxr(v265 - 1, v264));
      if (!v265)
      {
        ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
        std::__shared_weak_count::__release_weak(v263);
      }
    }
    v266 = (std::__shared_weak_count *)v942[2];
    if (v942[2])
    {
      v267 = (unint64_t *)((char *)v942[2] + 8);
      do
        v268 = __ldaxr(v267);
      while (__stlxr(v268 - 1, v267));
      if (!v268)
      {
        ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
        std::__shared_weak_count::__release_weak(v266);
      }
    }
LABEL_417:

    if (v183)
    {
      sub_2245664AC(typea, v942);
      sub_22322C138((uint64_t)v952, "Saving keyframe %s for snapshot (%zu/%zu)", (const char *)v942, v918, ((char *)v927[1] - (char *)v927[0]) >> 5);
      sub_223182C08((uint64_t)v952);
    }
    sub_223182C08((uint64_t)v952);
    v269 = v956;
    if (v956)
    {
      v270 = (unint64_t *)&v956->__shared_owners_;
      do
        v271 = __ldaxr(v270);
      while (__stlxr(v271 - 1, v270));
      if (!v271)
      {
        ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
        std::__shared_weak_count::__release_weak(v269);
      }
    }
    v145 = (unsigned __int8 *)&v144[4 * v918];
LABEL_425:
    if (*(_BYTE *)(a1 + 64))
      v272 = *(_DWORD *)(a1 + 444);
    else
      v272 = *(_DWORD *)(a1 + 444) & 0xFFFFFFFB;
    sub_22319A110((uint64_t)v942, v144[4 * v918 + 2], v272);
    if ((sub_223198E74(*(_QWORD *)(a1 + 368), v145, (uint64_t)v942) & 1) != 0)
      goto LABEL_611;
    sub_223192614(&v930);
    if (**(int **)(v930 + 56) > 4)
      goto LABEL_611;
    v273 = *(unsigned __int8 *)(v930 + 72);
    v274 = sub_22455F97C(&v930);
    v275 = v274;
    if (!v273 && !v274)
      goto LABEL_611;
    *(_QWORD *)&v934 = &v930;
    *((std::chrono::steady_clock::time_point *)&v934 + 1) = std::chrono::steady_clock::now();
    rep = (std::__shared_weak_count *)std::chrono::system_clock::now().__d_.__rep_;
    LODWORD(v936) = 4;
    v937 = "unknown file";
    v938 = 502;
    v939 = "unknown function";
    v940 = 0;
    v941 = 0;
    sub_2245664AC(v145, __s);
    v276 = *(_QWORD *)v934;
    v277 = (const char *)(*(_QWORD *)v934 + 16);
    v892 = v277;
    if (*(char *)(*(_QWORD *)v934 + 39) < 0)
    {
      v277 = *(const char **)(v276 + 16);
      v278 = *(_QWORD *)(v276 + 24);
      v280 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v280 & 1) != 0)
        goto LABEL_436;
    }
    else
    {
      v278 = *(unsigned __int8 *)(*(_QWORD *)v934 + 39);
      v279 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v279 & 1) != 0)
        goto LABEL_436;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)__src);
      sub_223199C58("com.apple.cv3d", (unint64_t)__src, &xmmword_255788F40);
      if (__src[24] && (__src[23] & 0x80000000) != 0)
        operator delete(*(void **)__src);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
      v52 = v915;
      a1 = v866;
    }
LABEL_436:
    if (byte_255788F57 >= 0)
      v281 = (const char *)&xmmword_255788F40;
    else
      v281 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v282 = byte_255788F57;
    else
      v282 = *((_QWORD *)&xmmword_255788F40 + 1);
    v283 = os_log_create(v281, v277);
    *(_QWORD *)v952 = v283;

    if (v282 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v282 >= 0x17)
    {
      v285 = (v282 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v282 | 7) != 0x17)
        v285 = v282 | 7;
      v286 = v285 + 1;
      v284 = operator new(v285 + 1);
      *(_QWORD *)v953 = v286 | 0x8000000000000000;
      *(_QWORD *)&v952[8] = v284;
      *(_QWORD *)&v952[16] = v282;
      v52 = v915;
      goto LABEL_449;
    }
    v953[7] = v282;
    v284 = &v952[8];
    if (v282)
LABEL_449:
      memmove(v284, v281, v282);
    v284[v282] = 0;
    v953[8] = 1;
    if (v278 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v278 >= 0x17)
    {
      v288 = (v278 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v278 | 7) != 0x17)
        v288 = v278 | 7;
      v289 = v288 + 1;
      v287 = operator new(v288 + 1);
      v955 = v289 | 0x8000000000000000;
      *(_QWORD *)&v953[16] = v287;
      v954 = (const char *)v278;
      v52 = v915;
    }
    else
    {
      HIBYTE(v955) = v278;
      v287 = &v953[16];
      if (!v278)
        goto LABEL_458;
    }
    memmove(v287, v277, v278);
LABEL_458:
    v287[v278] = 0;
    LOBYTE(v956) = 1;
    v290 = objc_retainAutorelease(*(id *)v952);
    if ((_BYTE)v956 && SHIBYTE(v955) < 0)
      operator delete(*(void **)&v953[16]);
    if (v953[8] && (v953[7] & 0x80000000) != 0)
      operator delete(*(void **)&v952[8]);

    v291 = sub_22455F7B4(4u);
    v292 = v290;
    v293 = v292;
    if (!v275 || !*(_QWORD *)(v275 + 8))
    {
      os_log_type_enabled(v292, v291);
      *(_DWORD *)v952 = 136315138;
      *(_QWORD *)&v952[4] = __s;
      v300 = (void *)_os_log_send_and_compose_impl();
      if (v300)
        free(v300);
      goto LABEL_604;
    }
    v294 = _os_log_pack_size();
    v295 = operator new(v294, (std::align_val_t)8uLL);
    v296 = (_QWORD *)operator new();
    *v296 = &off_24EC1F7F0;
    v296[1] = 0;
    v296[2] = 0;
    v296[3] = v295;
    *(_QWORD *)__src = v295;
    *(_QWORD *)&__src[8] = v295;
    *(_QWORD *)&__src[16] = v296;
    *(_QWORD *)&__src[24] = 0;
    *(_QWORD *)&__src[32] = 0;
    v297 = strlen(__s);
    if (v297 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    v298 = v297;
    if (v297 >= 0x17)
    {
      v342 = (v297 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v297 | 7) != 0x17)
        v342 = v297 | 7;
      v343 = v342 + 1;
      v299 = (std::string *)operator new(v342 + 1);
      v932.__r_.__value_.__r.__words[2] = v343 | 0x8000000000000000;
      v932.__r_.__value_.__r.__words[0] = (std::string::size_type)v299;
      v932.__r_.__value_.__l.__size_ = v298;
    }
    else
    {
      *((_BYTE *)&v932.__r_.__value_.__s + 23) = v297;
      v299 = &v932;
      if (!v297)
        goto LABEL_540;
    }
    memcpy(v299, __s, v298);
LABEL_540:
    v299->__r_.__value_.__s.__data_[v298] = 0;
    v951[1] = (void *)v932.__r_.__value_.__l.__size_;
    *(void **)((char *)&v951[1] + 7) = *(void **)((char *)&v932.__r_.__value_.__r.__words[1] + 7);
    *(_QWORD *)v950 = off_24EC1FA48;
    v951[0] = v932.__r_.__value_.__l.__data_;
    HIBYTE(v951[2]) = *((_BYTE *)&v932.__r_.__value_.__s + 23);
    v344 = operator new(0x38uLL);
    v344[1] = 0;
    v344[2] = 0;
    *v344 = &off_24EC1F9F8;
    v344[3] = off_24EC1FA48;
    *((_OWORD *)v344 + 2) = *(_OWORD *)v951;
    v344[6] = v951[2];
    memset(v951, 0, sizeof(v951));
    v345 = *(std::__shared_weak_count **)&__src[32];
    *(_QWORD *)&__src[24] = v344 + 3;
    *(_QWORD *)&__src[32] = v344;
    if (v345)
    {
      v346 = (unint64_t *)&v345->__shared_owners_;
      do
        v347 = __ldaxr(v346);
      while (__stlxr(v347 - 1, v346));
      if (!v347)
      {
        ((void (*)(std::__shared_weak_count *))v345->__on_zero_shared)(v345);
        std::__shared_weak_count::__release_weak(v345);
        if ((SHIBYTE(v951[2]) & 0x80000000) == 0)
          goto LABEL_546;
        goto LABEL_545;
      }
    }
    if (SHIBYTE(v951[2]) < 0)
LABEL_545:
      operator delete(v951[0]);
LABEL_546:
    nullsub_30(v950);
    *(_OWORD *)v952 = *(_OWORD *)__src;
    v348 = *(_QWORD *)&__src[24];
    *(_QWORD *)&v952[16] = *(_QWORD *)&__src[16];
    if (*(_QWORD *)&__src[16])
    {
      v349 = (unint64_t *)(*(_QWORD *)&__src[16] + 8);
      do
        v350 = __ldxr(v349);
      while (__stxr(v350 + 1, v349));
    }
    v351 = *(std::__shared_weak_count **)&__src[32];
    *(_QWORD *)v953 = v348;
    *(_QWORD *)&v953[8] = *(_QWORD *)&__src[32];
    if (*(_QWORD *)&__src[32])
    {
      v352 = (unint64_t *)(*(_QWORD *)&__src[32] + 8);
      do
        v353 = __ldxr(v352);
      while (__stxr(v353 + 1, v352));
      *(_QWORD *)&v953[16] = v348;
      do
        v354 = __ldaxr(v352);
      while (__stlxr(v354 - 1, v352));
      if (!v354)
      {
        ((void (*)(std::__shared_weak_count *))v351->__on_zero_shared)(v351);
        std::__shared_weak_count::__release_weak(v351);
      }
    }
    else
    {
      *(_QWORD *)&v953[16] = v348;
    }
    v355 = *(std::__shared_weak_count **)&__src[16];
    if (*(_QWORD *)&__src[16])
    {
      v356 = (unint64_t *)(*(_QWORD *)&__src[16] + 8);
      do
        v357 = __ldaxr(v356);
      while (__stlxr(v357 - 1, v356));
      if (!v357)
      {
        ((void (*)(std::__shared_weak_count *))v355->__on_zero_shared)(v355);
        std::__shared_weak_count::__release_weak(v355);
      }
    }
    v358 = *(_QWORD *)v952;
    if (*(char *)(*(_QWORD *)&v953[16] + 31) >= 0)
      v359 = *(_QWORD *)&v953[16] + 8;
    else
      v359 = *(_QWORD *)(*(_QWORD *)&v953[16] + 8);
    v360 = _os_log_pack_fill();
    *(_DWORD *)v360 = 136315138;
    *(_QWORD *)(v360 + 4) = v359;
    v361 = operator new();
    v362 = *(unsigned __int8 *)(v276 + 39);
    v363 = v892;
    if ((v362 & 0x80u) != 0)
    {
      v363 = *(const char **)(v276 + 16);
      v362 = *(_QWORD *)(v276 + 24);
    }
    *(_QWORD *)v361 = v358;
    *(_OWORD *)(v361 + 8) = *(_OWORD *)&v952[8];
    *(_QWORD *)&v952[8] = 0;
    *(_QWORD *)&v952[16] = 0;
    *(_OWORD *)(v361 + 24) = *(_OWORD *)v953;
    *(_QWORD *)v953 = 0;
    *(_QWORD *)&v953[8] = 0;
    *(_QWORD *)(v361 + 40) = v363;
    *(_QWORD *)(v361 + 48) = v362;
    *(_BYTE *)(v361 + 56) = v291;
    *(_QWORD *)v950 = 0;
    *(_QWORD *)__src = v361;
    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v275 + 8) + 40))(*(_QWORD *)(v275 + 8), __src);
    v52 = v915;
    v364 = *(_QWORD *)__src;
    *(_QWORD *)__src = 0;
    if (v364)
    {
      v365 = *(std::__shared_weak_count **)(v364 + 32);
      if (v365)
      {
        v366 = (unint64_t *)&v365->__shared_owners_;
        do
          v367 = __ldaxr(v366);
        while (__stlxr(v367 - 1, v366));
        if (!v367)
        {
          ((void (*)(std::__shared_weak_count *))v365->__on_zero_shared)(v365);
          std::__shared_weak_count::__release_weak(v365);
        }
      }
      v368 = *(std::__shared_weak_count **)(v364 + 16);
      if (v368)
      {
        v369 = (unint64_t *)&v368->__shared_owners_;
        do
          v370 = __ldaxr(v369);
        while (__stlxr(v370 - 1, v369));
        if (!v370)
        {
          ((void (*)(std::__shared_weak_count *))v368->__on_zero_shared)(v368);
          std::__shared_weak_count::__release_weak(v368);
        }
      }
      MEMORY[0x227684CE8](v364, 0x10F0C40B62ED6C6);
      v371 = *(_QWORD *)v950;
      *(_QWORD *)v950 = 0;
      if (v371)
      {
        v372 = *(std::__shared_weak_count **)(v371 + 32);
        if (v372)
        {
          v373 = (unint64_t *)&v372->__shared_owners_;
          do
            v374 = __ldaxr(v373);
          while (__stlxr(v374 - 1, v373));
          if (!v374)
          {
            ((void (*)(std::__shared_weak_count *))v372->__on_zero_shared)(v372);
            std::__shared_weak_count::__release_weak(v372);
          }
        }
        v375 = *(std::__shared_weak_count **)(v371 + 16);
        if (v375)
        {
          v376 = (unint64_t *)&v375->__shared_owners_;
          do
            v377 = __ldaxr(v376);
          while (__stlxr(v377 - 1, v376));
          if (!v377)
          {
            ((void (*)(std::__shared_weak_count *))v375->__on_zero_shared)(v375);
            std::__shared_weak_count::__release_weak(v375);
          }
        }
        MEMORY[0x227684CE8](v371, 0x10F0C40B62ED6C6);
      }
    }
    v378 = *(std::__shared_weak_count **)&v953[8];
    if (*(_QWORD *)&v953[8])
    {
      v379 = (unint64_t *)(*(_QWORD *)&v953[8] + 8);
      do
        v380 = __ldaxr(v379);
      while (__stlxr(v380 - 1, v379));
      if (!v380)
      {
        ((void (*)(std::__shared_weak_count *))v378->__on_zero_shared)(v378);
        std::__shared_weak_count::__release_weak(v378);
      }
    }
    v381 = *(std::__shared_weak_count **)&v952[16];
    if (*(_QWORD *)&v952[16])
    {
      v382 = (unint64_t *)(*(_QWORD *)&v952[16] + 8);
      do
        v383 = __ldaxr(v382);
      while (__stlxr(v383 - 1, v382));
      if (!v383)
      {
        ((void (*)(std::__shared_weak_count *))v381->__on_zero_shared)(v381);
        std::__shared_weak_count::__release_weak(v381);
      }
    }
LABEL_604:

    if (v273)
    {
      sub_2245664AC(typea, v952);
      sub_22322C138((uint64_t)&v934, "Failed to save keyframe to disk: %s", v952);
      sub_223182C08((uint64_t)&v934);
    }
    sub_223182C08((uint64_t)&v934);
    v384 = v941;
    if (v941)
    {
      v385 = (unint64_t *)&v941->__shared_owners_;
      do
        v386 = __ldaxr(v385);
      while (__stlxr(v386 - 1, v385));
      if (!v386)
      {
        ((void (*)(std::__shared_weak_count *))v384->__on_zero_shared)(v384);
        std::__shared_weak_count::__release_weak(v384);
      }
    }
LABEL_611:
    std::mutex::lock(v52);
    v387 = *(_OWORD **)(a1 + 848);
    v388 = *(_QWORD *)(a1 + 856);
    if ((unint64_t)v387 >= v388)
    {
      v390 = (_OWORD *)*v869;
      v391 = ((uint64_t)v387 - *v869) >> 4;
      v392 = v391 + 1;
      if ((unint64_t)(v391 + 1) >> 60)
        sub_22316E078();
      v393 = v388 - (_QWORD)v390;
      if (v393 >> 3 > v392)
        v392 = v393 >> 3;
      if ((unint64_t)v393 >= 0x7FFFFFFFFFFFFFF0)
        v394 = 0xFFFFFFFFFFFFFFFLL;
      else
        v394 = v392;
      if (v394)
      {
        if (v394 >> 60)
          sub_223174E94();
        v395 = (char *)operator new(16 * v394);
      }
      else
      {
        v395 = 0;
      }
      v396 = &v395[16 * v391];
      *(_OWORD *)v396 = *(_OWORD *)typea;
      v397 = v396;
      if (v387 != v390)
      {
        do
        {
          *((_OWORD *)v397 - 1) = *(v387 - 1);
          v397 -= 16;
          --v387;
        }
        while (v387 != v390);
        v387 = (_OWORD *)*v869;
      }
      *(_QWORD *)(a1 + 840) = v397;
      v389 = v396 + 16;
      *(_QWORD *)(a1 + 848) = v396 + 16;
      *(_QWORD *)(a1 + 856) = &v395[16 * v394];
      if (v387)
        operator delete(v387);
      v52 = v915;
    }
    else
    {
      *v387 = *(_OWORD *)typea;
      v389 = v387 + 1;
    }
    *(_QWORD *)(a1 + 848) = v389;
    std::mutex::unlock(v52);
    sub_2231A8050((uint64_t)v942);
    ++v918;
    v152 = *((_QWORD *)&v928 + 1);
    if (v916 < (uint64_t)(v929 - *((_QWORD *)&v928 + 1)) >> 4)
      goto LABEL_228;
LABEL_630:
    v398 = v922;
    v399 = (char *)v924[0];
    if (v922 < ((char *)v924[1] - (char *)v924[0]) >> 4)
    {
LABEL_631:
      sub_223182B14(&v932);
      v400 = (unsigned __int8 *)&v399[16 * v398];
      if (**(int **)(v932.__r_.__value_.__r.__words[0] + 56) > 3)
        goto LABEL_746;
      v401 = *(unsigned __int8 *)(v932.__r_.__value_.__r.__words[0] + 72);
      v402 = sub_22455F97C((uint64_t *)&v932);
      v403 = v402;
      if (!v401 && !v402)
        goto LABEL_746;
      *(_QWORD *)v952 = &v932;
      *(std::chrono::steady_clock::time_point *)&v952[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&v952[16] = std::chrono::system_clock::now();
      *(_DWORD *)v953 = 3;
      *(_QWORD *)&v953[8] = "unknown file";
      *(_DWORD *)&v953[16] = 455;
      v954 = "unknown function";
      v955 = 0;
      v956 = 0;
      sub_2245664AC(v400, __s);
      typed = v400;
      v404 = **(_QWORD **)v952;
      v405 = (const char *)(**(_QWORD **)v952 + 16);
      v875 = v405;
      v880 = **(_QWORD **)v952;
      if (*(char *)(**(_QWORD **)v952 + 39) < 0)
      {
        v405 = *(const char **)(v404 + 16);
        v406 = *(_QWORD *)(v404 + 24);
      }
      else
      {
        v406 = *(unsigned __int8 *)(**(_QWORD **)v952 + 39);
      }
      v885 = v924[0];
      v894 = v924[1];
      v407 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v407 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)&v934);
        sub_223199C58("com.apple.cv3d", (unint64_t)&v934, &xmmword_255788F40);
        if ((_BYTE)v936 && SHIBYTE(rep) < 0)
          operator delete((void *)v934);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
        v52 = v915;
        a1 = v866;
      }
      if (byte_255788F57 >= 0)
        v408 = (const char *)&xmmword_255788F40;
      else
        v408 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v409 = byte_255788F57;
      else
        v409 = *((_QWORD *)&xmmword_255788F40 + 1);
      v410 = os_log_create(v408, v405);
      v942[0] = v410;

      if (v409 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v409 >= 0x17)
      {
        v412 = (v409 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v409 | 7) != 0x17)
          v412 = v409 | 7;
        v413 = v412 + 1;
        v411 = (id *)operator new(v412 + 1);
        v942[3] = (id)(v413 | 0x8000000000000000);
        v942[1] = v411;
        v942[2] = (id)v409;
        v52 = v915;
      }
      else
      {
        HIBYTE(v942[3]) = v409;
        v411 = &v942[1];
        if (!v409)
        {
LABEL_652:
          *((_BYTE *)v411 + v409) = 0;
          LOBYTE(v942[4]) = 1;
          if (v406 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v406 >= 0x17)
          {
            v415 = (v406 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v406 | 7) != 0x17)
              v415 = v406 | 7;
            v416 = v415 + 1;
            v414 = (id *)operator new(v415 + 1);
            *((_QWORD *)&v943 + 1) = v416 | 0x8000000000000000;
            v942[5] = v414;
            *(_QWORD *)&v943 = v406;
            v52 = v915;
          }
          else
          {
            HIBYTE(v943) = v406;
            v414 = &v942[5];
            if (!v406)
              goto LABEL_660;
          }
          memmove(v414, v405, v406);
LABEL_660:
          *((_BYTE *)v414 + v406) = 0;
          LOBYTE(v944) = 1;
          v417 = objc_retainAutorelease(v942[0]);
          if ((_BYTE)v944 && SHIBYTE(v943) < 0)
            operator delete(v942[5]);
          if (LOBYTE(v942[4]) && SHIBYTE(v942[3]) < 0)
            operator delete(v942[1]);

          v418 = (void *)(v398 + 1);
          v419 = (v894 - v885) >> 4;
          v420 = sub_22455F7B4(3u);
          v421 = v417;
          v422 = v421;
          if (!v403 || !*(_QWORD *)(v403 + 8))
          {
            os_log_type_enabled(v421, v420);
            LODWORD(v942[0]) = 136315650;
            *(id *)((char *)v942 + 4) = __s;
            WORD2(v942[1]) = 2048;
            *(id *)((char *)&v942[1] + 6) = v418;
            HIWORD(v942[2]) = 2048;
            v942[3] = (id)((v894 - v885) >> 4);
            v430 = (void *)_os_log_send_and_compose_impl();
            if (v430)
              free(v430);
            goto LABEL_738;
          }
          v423 = _os_log_pack_size();
          v895 = v422;
          v424 = (std::__shared_weak_count_vtbl *)operator new(v423, (std::align_val_t)8uLL);
          v425 = (std::__shared_weak_count *)operator new();
          v425->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v425->__shared_owners_ = 0;
          v425->__shared_weak_owners_ = 0;
          v425[1].__vftable = v424;
          *(_QWORD *)&v934 = v424;
          *((_QWORD *)&v934 + 1) = v424;
          rep = v425;
          v936 = 0;
          v937 = 0;
          v426 = strlen(__s);
          if (v426 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          v427 = (void *)v426;
          v428 = v419;
          if (v426 >= 0x17)
          {
            v431 = (v426 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v426 | 7) != 0x17)
              v431 = v426 | 7;
            v432 = v431 + 1;
            v429 = operator new(v431 + 1);
            v951[1] = (void *)(v432 | 0x8000000000000000);
            *(_QWORD *)v950 = v429;
            v951[0] = v427;
          }
          else
          {
            HIBYTE(v951[1]) = v426;
            v429 = v950;
            if (!v426)
              goto LABEL_678;
          }
          memcpy(v429, __s, (size_t)v427);
LABEL_678:
          *((_BYTE *)v427 + (_QWORD)v429) = 0;
          *(void **)&__src[16] = v951[0];
          *(void **)&__src[23] = *(void **)((char *)v951 + 7);
          *(_QWORD *)__src = off_24EC1F890;
          *(_QWORD *)&__src[8] = *(_QWORD *)v950;
          __src[31] = HIBYTE(v951[1]);
          v433 = operator new(0x40uLL);
          v433[1] = 0;
          v433[2] = 0;
          *v433 = &off_24EC1F840;
          v433[3] = off_24EC1F890;
          *((_OWORD *)v433 + 2) = *(_OWORD *)&__src[8];
          v433[6] = *(_QWORD *)&__src[24];
          memset(&__src[8], 0, 24);
          v434 = (std::__shared_weak_count *)v937;
          v936 = (char *)(v433 + 3);
          v937 = (const char *)v433;
          v435 = v428;
          v422 = v895;
          if (!v434)
            goto LABEL_682;
          v436 = (unint64_t *)&v434->__shared_owners_;
          do
            v437 = __ldaxr(v436);
          while (__stlxr(v437 - 1, v436));
          if (!v437)
          {
            ((void (*)(std::__shared_weak_count *))v434->__on_zero_shared)(v434);
            std::__shared_weak_count::__release_weak(v434);
            if ((__src[31] & 0x80000000) == 0)
              goto LABEL_684;
          }
          else
          {
LABEL_682:
            if ((__src[31] & 0x80000000) == 0)
            {
LABEL_684:
              nullsub_30(__src);
              *(_OWORD *)v942 = v934;
              v438 = v936;
              v942[2] = rep;
              if (rep)
              {
                v439 = (unint64_t *)&rep->__shared_owners_;
                do
                  v440 = __ldxr(v439);
                while (__stxr(v440 + 1, v439));
              }
              v441 = (std::__shared_weak_count *)v937;
              v942[3] = v438;
              v942[4] = (id)v937;
              if (v937)
              {
                v442 = (unint64_t *)(v937 + 8);
                do
                  v443 = __ldxr(v442);
                while (__stxr(v443 + 1, v442));
                v942[5] = v438;
                do
                  v444 = __ldaxr(v442);
                while (__stlxr(v444 - 1, v442));
                if (!v444)
                {
                  ((void (*)(std::__shared_weak_count *))v441->__on_zero_shared)(v441);
                  std::__shared_weak_count::__release_weak(v441);
                }
              }
              else
              {
                v942[5] = v438;
              }
              v445 = rep;
              if (rep)
              {
                v446 = (unint64_t *)&rep->__shared_owners_;
                do
                  v447 = __ldaxr(v446);
                while (__stlxr(v447 - 1, v446));
                if (!v447)
                {
                  ((void (*)(std::__shared_weak_count *))v445->__on_zero_shared)(v445);
                  std::__shared_weak_count::__release_weak(v445);
                }
              }
              v448 = v942[0];
              if (*((char *)v942[5] + 31) >= 0)
                v449 = (char *)v942[5] + 8;
              else
                v449 = (char *)*((_QWORD *)v942[5] + 1);
              v450 = _os_log_pack_fill();
              *(_DWORD *)v450 = 136315650;
              *(_QWORD *)(v450 + 4) = v449;
              *(_WORD *)(v450 + 12) = 2048;
              *(_QWORD *)(v450 + 14) = v418;
              *(_WORD *)(v450 + 22) = 2048;
              *(_QWORD *)(v450 + 24) = v435;
              v451 = operator new();
              v452 = *(unsigned __int8 *)(v880 + 39);
              v453 = v875;
              if ((v452 & 0x80u) != 0)
              {
                v453 = *(const char **)(v880 + 16);
                v452 = *(_QWORD *)(v880 + 24);
              }
              *(_QWORD *)v451 = v448;
              *(_OWORD *)(v451 + 8) = *(_OWORD *)&v942[1];
              v942[1] = 0;
              v942[2] = 0;
              *(_OWORD *)(v451 + 24) = *(_OWORD *)&v942[3];
              v942[3] = 0;
              v942[4] = 0;
              *(_QWORD *)(v451 + 40) = v453;
              *(_QWORD *)(v451 + 48) = v452;
              *(_BYTE *)(v451 + 56) = v420;
              *(_QWORD *)__src = 0;
              *(_QWORD *)&v934 = v451;
              (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v403 + 8) + 40))(*(_QWORD *)(v403 + 8), &v934);
              v52 = v915;
              v454 = v934;
              *(_QWORD *)&v934 = 0;
              if (v454)
              {
                v455 = *(std::__shared_weak_count **)(v454 + 32);
                if (v455)
                {
                  v456 = (unint64_t *)&v455->__shared_owners_;
                  do
                    v457 = __ldaxr(v456);
                  while (__stlxr(v457 - 1, v456));
                  if (!v457)
                  {
                    ((void (*)(std::__shared_weak_count *))v455->__on_zero_shared)(v455);
                    std::__shared_weak_count::__release_weak(v455);
                  }
                }
                v458 = *(std::__shared_weak_count **)(v454 + 16);
                if (v458)
                {
                  v459 = (unint64_t *)&v458->__shared_owners_;
                  do
                    v460 = __ldaxr(v459);
                  while (__stlxr(v460 - 1, v459));
                  if (!v460)
                  {
                    ((void (*)(std::__shared_weak_count *))v458->__on_zero_shared)(v458);
                    std::__shared_weak_count::__release_weak(v458);
                  }
                }
                MEMORY[0x227684CE8](v454, 0x10F0C40B62ED6C6);
                v461 = *(_QWORD *)__src;
                *(_QWORD *)__src = 0;
                if (v461)
                {
                  v462 = *(std::__shared_weak_count **)(v461 + 32);
                  if (v462)
                  {
                    v463 = (unint64_t *)&v462->__shared_owners_;
                    do
                      v464 = __ldaxr(v463);
                    while (__stlxr(v464 - 1, v463));
                    if (!v464)
                    {
                      ((void (*)(std::__shared_weak_count *))v462->__on_zero_shared)(v462);
                      std::__shared_weak_count::__release_weak(v462);
                    }
                  }
                  v465 = *(std::__shared_weak_count **)(v461 + 16);
                  if (v465)
                  {
                    v466 = (unint64_t *)&v465->__shared_owners_;
                    do
                      v467 = __ldaxr(v466);
                    while (__stlxr(v467 - 1, v466));
                    if (!v467)
                    {
                      ((void (*)(std::__shared_weak_count *))v465->__on_zero_shared)(v465);
                      std::__shared_weak_count::__release_weak(v465);
                    }
                  }
                  MEMORY[0x227684CE8](v461, 0x10F0C40B62ED6C6);
                }
              }
              v468 = (std::__shared_weak_count *)v942[4];
              if (v942[4])
              {
                v469 = (unint64_t *)((char *)v942[4] + 8);
                do
                  v470 = __ldaxr(v469);
                while (__stlxr(v470 - 1, v469));
                if (!v470)
                {
                  ((void (*)(std::__shared_weak_count *))v468->__on_zero_shared)(v468);
                  std::__shared_weak_count::__release_weak(v468);
                }
              }
              v471 = (std::__shared_weak_count *)v942[2];
              if (v942[2])
              {
                v472 = (unint64_t *)((char *)v942[2] + 8);
                do
                  v473 = __ldaxr(v472);
                while (__stlxr(v473 - 1, v472));
                if (!v473)
                {
                  ((void (*)(std::__shared_weak_count *))v471->__on_zero_shared)(v471);
                  std::__shared_weak_count::__release_weak(v471);
                }
              }
LABEL_738:

              if (v401)
              {
                sub_2245664AC(typed, v942);
                sub_22322C138((uint64_t)v952, "Moving keyframe %s from shared to disk (%zu/%zu)", (const char *)v942, v922 + 1, ((char *)v924[1] - (char *)v924[0]) >> 4);
                sub_223182C08((uint64_t)v952);
              }
              sub_223182C08((uint64_t)v952);
              v474 = v956;
              if (v956)
              {
                v475 = (unint64_t *)&v956->__shared_owners_;
                do
                  v476 = __ldaxr(v475);
                while (__stlxr(v476 - 1, v475));
                if (!v476)
                {
                  ((void (*)(std::__shared_weak_count *))v474->__on_zero_shared)(v474);
                  std::__shared_weak_count::__release_weak(v474);
                }
              }
              v400 = typed;
LABEL_746:
              v931 = 0;
              v930 = 0;
              std::mutex::lock(v52);
              if (!sub_2231A88F8(v914, v400))
              {
LABEL_791:
                std::mutex::unlock(v52);
                goto LABEL_792;
              }
              if (!sub_2231A88F8(v914, v400)
                && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/include/Reconstruction/Keyframing/Pool/BaseKeyframePool.hpp", 92, (uint64_t)"Contains(key)", 13, (uint64_t)"Invalid key", 11, (void (*)(void **))sub_22457406C))
              {
                abort();
              }
              v477 = sub_2231A8330(v914, v400);
              if (!v477)
                sub_223198218("unordered_map::at: key not found");
              v478 = v400;
              v480 = v477[4];
              v479 = (std::__shared_weak_count *)v477[5];
              if (v479)
              {
                v481 = (unint64_t *)&v479->__shared_owners_;
                do
                  v482 = __ldxr(v481);
                while (__stxr(v482 + 1, v481));
              }
              v930 = v480;
              v931 = v479;
              std::mutex::unlock(v52);
              if (!v480)
              {
                v483 = 0.0;
                if (!v479)
                  goto LABEL_769;
                goto LABEL_766;
              }
              v483 = sub_2231D3830((_QWORD *)v480);
              if (*(_BYTE *)(a1 + 64))
                v484 = *(_DWORD *)(a1 + 444);
              else
                v484 = *(_DWORD *)(a1 + 444) & 0xFFFFFFFB;
              sub_22319A110((uint64_t)v942, v480, v484);
              if ((sub_223198E74(*(_QWORD *)(a1 + 368), v478, (uint64_t)v942) & 1) != 0)
              {
                v480 = 0x100000000;
                sub_2231A8050((uint64_t)v942);
                if (!v479)
                  goto LABEL_769;
                goto LABEL_766;
              }
              sub_223192614(&v933);
              if (*v933[7] > 4
                || (v485 = *((unsigned __int8 *)v933 + 72), v486 = sub_22455F97C((uint64_t *)&v933), v487 = v486, !v485)
                && !v486)
              {
                v480 = 0;
                v483 = 0.0;
                sub_2231A8050((uint64_t)v942);
                if (!v479)
                  goto LABEL_769;
LABEL_766:
                v488 = (unint64_t *)&v479->__shared_owners_;
                do
                  v489 = __ldaxr(v488);
                while (__stlxr(v489 - 1, v488));
                if (!v489)
                {
                  ((void (*)(std::__shared_weak_count *))v479->__on_zero_shared)(v479);
                  std::__shared_weak_count::__release_weak(v479);
                  if ((v480 & 0x100000000) == 0)
                  {
LABEL_792:
                    ++v922;
                    v502 = v923;
                    v503 = (char *)v925[1];
                    if (v923 >= (uint64_t)(v926 - (unint64_t)v925[1]) >> 4)
                      goto LABEL_1140;
                    goto LABEL_1023;
                  }
                  goto LABEL_770;
                }
LABEL_769:
                if ((v480 & 0x100000000) == 0)
                  goto LABEL_792;
LABEL_770:
                std::mutex::lock(v52);
                v490 = *(_DWORD **)(a1 + 800);
                v491 = *(_QWORD *)(a1 + 808);
                if ((unint64_t)v490 >= v491)
                {
                  v493 = (_DWORD *)*v867;
                  v494 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v490 - *v867) >> 2);
                  v495 = v494 + 1;
                  if (v494 + 1 > 0xCCCCCCCCCCCCCCCLL)
                    sub_22316E078();
                  v496 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v491 - (_QWORD)v493) >> 2);
                  if (2 * v496 > v495)
                    v495 = 2 * v496;
                  if (v496 >= 0x666666666666666)
                    v497 = 0xCCCCCCCCCCCCCCCLL;
                  else
                    v497 = v495;
                  if (v497)
                  {
                    if (v497 > 0xCCCCCCCCCCCCCCCLL)
                      sub_223174E94();
                    v498 = (char *)operator new(20 * v497);
                  }
                  else
                  {
                    v498 = 0;
                  }
                  v499 = &v498[20 * v494];
                  *(_OWORD *)v499 = *(_OWORD *)v478;
                  *((float *)v499 + 4) = v483;
                  v500 = v499;
                  if (v490 != v493)
                  {
                    do
                    {
                      v501 = *(_OWORD *)(v490 - 5);
                      *((_DWORD *)v500 - 1) = *(v490 - 1);
                      *(_OWORD *)(v500 - 20) = v501;
                      v500 -= 20;
                      v490 -= 5;
                    }
                    while (v490 != v493);
                    v490 = (_DWORD *)*v867;
                  }
                  *(_QWORD *)(a1 + 792) = v500;
                  v492 = v499 + 20;
                  *(_QWORD *)(a1 + 800) = v499 + 20;
                  *(_QWORD *)(a1 + 808) = &v498[20 * v497];
                  if (v490)
                    operator delete(v490);
                  v52 = v915;
                }
                else
                {
                  *(_OWORD *)v490 = *(_OWORD *)v478;
                  *((float *)v490 + 4) = v483;
                  v492 = v490 + 5;
                }
                *(_QWORD *)(a1 + 800) = v492;
                goto LABEL_791;
              }
              *(_QWORD *)&v934 = &v933;
              *((std::chrono::steady_clock::time_point *)&v934 + 1) = std::chrono::steady_clock::now();
              rep = (std::__shared_weak_count *)std::chrono::system_clock::now().__d_.__rep_;
              LODWORD(v936) = 4;
              v937 = "unknown file";
              v938 = 447;
              v939 = "unknown function";
              v940 = 0;
              v941 = 0;
              sub_2245664AC(v478, __s);
              v504 = *(_QWORD *)v934;
              v505 = (const char *)(*(_QWORD *)v934 + 16);
              *(_QWORD *)typee = *(_QWORD *)v934;
              v896 = v505;
              if (*(char *)(*(_QWORD *)v934 + 39) < 0)
              {
                v505 = *(const char **)(v504 + 16);
                v506 = *(_QWORD *)(v504 + 24);
                v508 = atomic_load((unsigned __int8 *)&qword_255788F58);
                if ((v508 & 1) != 0)
                  goto LABEL_800;
              }
              else
              {
                v506 = *(unsigned __int8 *)(*(_QWORD *)v934 + 39);
                v507 = atomic_load((unsigned __int8 *)&qword_255788F58);
                if ((v507 & 1) != 0)
                  goto LABEL_800;
              }
              if (__cxa_guard_acquire(&qword_255788F58))
              {
                sub_224568628((uint64_t)__src);
                sub_223199C58("com.apple.cv3d", (unint64_t)__src, &xmmword_255788F40);
                if (__src[24] && (__src[23] & 0x80000000) != 0)
                  operator delete(*(void **)__src);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
                __cxa_guard_release(&qword_255788F58);
                v52 = v915;
                a1 = v866;
              }
LABEL_800:
              if (byte_255788F57 >= 0)
                v509 = (const char *)&xmmword_255788F40;
              else
                v509 = (const char *)xmmword_255788F40;
              if (byte_255788F57 >= 0)
                v510 = byte_255788F57;
              else
                v510 = *((_QWORD *)&xmmword_255788F40 + 1);
              v511 = os_log_create(v509, v505);
              *(_QWORD *)v952 = v511;

              if (v510 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              if (v510 >= 0x17)
              {
                v513 = (v510 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v510 | 7) != 0x17)
                  v513 = v510 | 7;
                v514 = v513 + 1;
                v512 = operator new(v513 + 1);
                *(_QWORD *)v953 = v514 | 0x8000000000000000;
                *(_QWORD *)&v952[8] = v512;
                *(_QWORD *)&v952[16] = v510;
                v52 = v915;
              }
              else
              {
                v953[7] = v510;
                v512 = &v952[8];
                if (!v510)
                {
LABEL_814:
                  v512[v510] = 0;
                  v953[8] = 1;
                  if (v506 > 0x7FFFFFFFFFFFFFF7)
                    sub_22316DBC0();
                  if (v506 >= 0x17)
                  {
                    v516 = (v506 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v506 | 7) != 0x17)
                      v516 = v506 | 7;
                    v517 = v516 + 1;
                    v515 = operator new(v516 + 1);
                    v955 = v517 | 0x8000000000000000;
                    *(_QWORD *)&v953[16] = v515;
                    v954 = (const char *)v506;
                    v52 = v915;
                  }
                  else
                  {
                    HIBYTE(v955) = v506;
                    v515 = &v953[16];
                    if (!v506)
                      goto LABEL_822;
                  }
                  memmove(v515, v505, v506);
LABEL_822:
                  v515[v506] = 0;
                  LOBYTE(v956) = 1;
                  v518 = objc_retainAutorelease(*(id *)v952);
                  if ((_BYTE)v956 && SHIBYTE(v955) < 0)
                    operator delete(*(void **)&v953[16]);
                  if (v953[8] && (v953[7] & 0x80000000) != 0)
                    operator delete(*(void **)&v952[8]);

                  v519 = sub_22455F7B4(4u);
                  v520 = v518;
                  v521 = v520;
                  if (!v487 || !*(_QWORD *)(v487 + 8))
                  {
                    os_log_type_enabled(v520, v519);
                    *(_DWORD *)v952 = 136315138;
                    *(_QWORD *)&v952[4] = __s;
                    v528 = (void *)_os_log_send_and_compose_impl();
                    if (v528)
                      free(v528);
LABEL_961:

                    if (v485)
                    {
                      sub_2245664AC(v478, v952);
                      sub_22322C138((uint64_t)&v934, "Failed to save keyframe to disk: %s", v952);
                      sub_223182C08((uint64_t)&v934);
                    }
                    sub_223182C08((uint64_t)&v934);
                    v605 = v941;
                    if (v941)
                    {
                      v606 = (unint64_t *)&v941->__shared_owners_;
                      do
                        v607 = __ldaxr(v606);
                      while (__stlxr(v607 - 1, v606));
                      if (!v607)
                      {
                        ((void (*)(std::__shared_weak_count *))v605->__on_zero_shared)(v605);
                        std::__shared_weak_count::__release_weak(v605);
                      }
                    }
                    v479 = v931;
                    v480 = 0;
                    v483 = 0.0;
                    sub_2231A8050((uint64_t)v942);
                    if (!v479)
                      goto LABEL_769;
                    goto LABEL_766;
                  }
                  v522 = _os_log_pack_size();
                  v523 = operator new(v522, (std::align_val_t)8uLL);
                  v524 = (_QWORD *)operator new();
                  *v524 = &off_24EC1F7F0;
                  v524[1] = 0;
                  v524[2] = 0;
                  v524[3] = v523;
                  *(_QWORD *)__src = v523;
                  *(_QWORD *)&__src[8] = v523;
                  *(_QWORD *)&__src[16] = v524;
                  *(_QWORD *)&__src[24] = 0;
                  *(_QWORD *)&__src[32] = 0;
                  v525 = strlen(__s);
                  if (v525 > 0x7FFFFFFFFFFFFFF7)
                    sub_22316DBC0();
                  v526 = v525;
                  if (v525 >= 0x17)
                  {
                    v550 = (v525 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v525 | 7) != 0x17)
                      v550 = v525 | 7;
                    v551 = v550 + 1;
                    v527 = (std::string *)operator new(v550 + 1);
                    v932.__r_.__value_.__r.__words[2] = v551 | 0x8000000000000000;
                    v932.__r_.__value_.__r.__words[0] = (std::string::size_type)v527;
                    v932.__r_.__value_.__l.__size_ = v526;
                  }
                  else
                  {
                    *((_BYTE *)&v932.__r_.__value_.__s + 23) = v525;
                    v527 = &v932;
                    if (!v525)
                    {
LABEL_879:
                      v527->__r_.__value_.__s.__data_[v526] = 0;
                      v951[1] = (void *)v932.__r_.__value_.__l.__size_;
                      *(void **)((char *)&v951[1] + 7) = *(void **)((char *)&v932.__r_.__value_.__r.__words[1] + 7);
                      *(_QWORD *)v950 = off_24EC1FA48;
                      v951[0] = v932.__r_.__value_.__l.__data_;
                      HIBYTE(v951[2]) = *((_BYTE *)&v932.__r_.__value_.__s + 23);
                      v552 = operator new(0x38uLL);
                      v552[1] = 0;
                      v552[2] = 0;
                      *v552 = &off_24EC1F9F8;
                      v552[3] = off_24EC1FA48;
                      *((_OWORD *)v552 + 2) = *(_OWORD *)v951;
                      v552[6] = v951[2];
                      memset(v951, 0, sizeof(v951));
                      v553 = *(std::__shared_weak_count **)&__src[32];
                      *(_QWORD *)&__src[24] = v552 + 3;
                      *(_QWORD *)&__src[32] = v552;
                      if (v553)
                      {
                        v554 = (unint64_t *)&v553->__shared_owners_;
                        do
                          v555 = __ldaxr(v554);
                        while (__stlxr(v555 - 1, v554));
                        if (!v555)
                        {
                          ((void (*)(std::__shared_weak_count *))v553->__on_zero_shared)(v553);
                          std::__shared_weak_count::__release_weak(v553);
                        }
                      }
                      if (SHIBYTE(v951[2]) < 0)
                        operator delete(v951[0]);
                      nullsub_30(v950);
                      *(_OWORD *)v952 = *(_OWORD *)__src;
                      v556 = *(_QWORD *)&__src[24];
                      *(_QWORD *)&v952[16] = *(_QWORD *)&__src[16];
                      if (*(_QWORD *)&__src[16])
                      {
                        v557 = (unint64_t *)(*(_QWORD *)&__src[16] + 8);
                        do
                          v558 = __ldxr(v557);
                        while (__stxr(v558 + 1, v557));
                      }
                      v559 = *(std::__shared_weak_count **)&__src[32];
                      *(_QWORD *)v953 = v556;
                      *(_QWORD *)&v953[8] = *(_QWORD *)&__src[32];
                      if (*(_QWORD *)&__src[32])
                      {
                        v560 = (unint64_t *)(*(_QWORD *)&__src[32] + 8);
                        do
                          v561 = __ldxr(v560);
                        while (__stxr(v561 + 1, v560));
                        *(_QWORD *)&v953[16] = v556;
                        do
                          v562 = __ldaxr(v560);
                        while (__stlxr(v562 - 1, v560));
                        if (!v562)
                        {
                          ((void (*)(std::__shared_weak_count *))v559->__on_zero_shared)(v559);
                          std::__shared_weak_count::__release_weak(v559);
                        }
                      }
                      else
                      {
                        *(_QWORD *)&v953[16] = v556;
                      }
                      v576 = *(std::__shared_weak_count **)&__src[16];
                      if (*(_QWORD *)&__src[16])
                      {
                        v577 = (unint64_t *)(*(_QWORD *)&__src[16] + 8);
                        do
                          v578 = __ldaxr(v577);
                        while (__stlxr(v578 - 1, v577));
                        if (!v578)
                        {
                          ((void (*)(std::__shared_weak_count *))v576->__on_zero_shared)(v576);
                          std::__shared_weak_count::__release_weak(v576);
                        }
                      }
                      v579 = *(_QWORD *)v952;
                      if (*(char *)(*(_QWORD *)&v953[16] + 31) >= 0)
                        v580 = *(_QWORD *)&v953[16] + 8;
                      else
                        v580 = *(_QWORD *)(*(_QWORD *)&v953[16] + 8);
                      v581 = _os_log_pack_fill();
                      *(_DWORD *)v581 = 136315138;
                      *(_QWORD *)(v581 + 4) = v580;
                      v582 = operator new();
                      v583 = *(unsigned __int8 *)(*(_QWORD *)typee + 39);
                      v584 = v896;
                      if ((v583 & 0x80u) != 0)
                      {
                        v584 = *(const char **)(*(_QWORD *)typee + 16);
                        v583 = *(_QWORD *)(*(_QWORD *)typee + 24);
                      }
                      *(_QWORD *)v582 = v579;
                      *(_OWORD *)(v582 + 8) = *(_OWORD *)&v952[8];
                      *(_QWORD *)&v952[8] = 0;
                      *(_QWORD *)&v952[16] = 0;
                      *(_OWORD *)(v582 + 24) = *(_OWORD *)v953;
                      *(_QWORD *)v953 = 0;
                      *(_QWORD *)&v953[8] = 0;
                      *(_QWORD *)(v582 + 40) = v584;
                      *(_QWORD *)(v582 + 48) = v583;
                      *(_BYTE *)(v582 + 56) = v519;
                      *(_QWORD *)v950 = 0;
                      *(_QWORD *)__src = v582;
                      (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v487 + 8) + 40))(*(_QWORD *)(v487 + 8), __src);
                      v52 = v915;
                      v585 = *(_QWORD *)__src;
                      *(_QWORD *)__src = 0;
                      if (v585)
                      {
                        v586 = *(std::__shared_weak_count **)(v585 + 32);
                        if (v586)
                        {
                          v587 = (unint64_t *)&v586->__shared_owners_;
                          do
                            v588 = __ldaxr(v587);
                          while (__stlxr(v588 - 1, v587));
                          if (!v588)
                          {
                            ((void (*)(std::__shared_weak_count *))v586->__on_zero_shared)(v586);
                            std::__shared_weak_count::__release_weak(v586);
                          }
                        }
                        v589 = *(std::__shared_weak_count **)(v585 + 16);
                        if (v589)
                        {
                          v590 = (unint64_t *)&v589->__shared_owners_;
                          do
                            v591 = __ldaxr(v590);
                          while (__stlxr(v591 - 1, v590));
                          if (!v591)
                          {
                            ((void (*)(std::__shared_weak_count *))v589->__on_zero_shared)(v589);
                            std::__shared_weak_count::__release_weak(v589);
                          }
                        }
                        MEMORY[0x227684CE8](v585, 0x10F0C40B62ED6C6);
                        v592 = *(_QWORD *)v950;
                        *(_QWORD *)v950 = 0;
                        if (v592)
                        {
                          v593 = *(std::__shared_weak_count **)(v592 + 32);
                          if (v593)
                          {
                            v594 = (unint64_t *)&v593->__shared_owners_;
                            do
                              v595 = __ldaxr(v594);
                            while (__stlxr(v595 - 1, v594));
                            if (!v595)
                            {
                              ((void (*)(std::__shared_weak_count *))v593->__on_zero_shared)(v593);
                              std::__shared_weak_count::__release_weak(v593);
                            }
                          }
                          v596 = *(std::__shared_weak_count **)(v592 + 16);
                          if (v596)
                          {
                            v597 = (unint64_t *)&v596->__shared_owners_;
                            do
                              v598 = __ldaxr(v597);
                            while (__stlxr(v598 - 1, v597));
                            if (!v598)
                            {
                              ((void (*)(std::__shared_weak_count *))v596->__on_zero_shared)(v596);
                              std::__shared_weak_count::__release_weak(v596);
                            }
                          }
                          MEMORY[0x227684CE8](v592, 0x10F0C40B62ED6C6);
                        }
                      }
                      v599 = *(std::__shared_weak_count **)&v953[8];
                      if (*(_QWORD *)&v953[8])
                      {
                        v600 = (unint64_t *)(*(_QWORD *)&v953[8] + 8);
                        do
                          v601 = __ldaxr(v600);
                        while (__stlxr(v601 - 1, v600));
                        if (!v601)
                        {
                          ((void (*)(std::__shared_weak_count *))v599->__on_zero_shared)(v599);
                          std::__shared_weak_count::__release_weak(v599);
                        }
                      }
                      v602 = *(std::__shared_weak_count **)&v952[16];
                      if (*(_QWORD *)&v952[16])
                      {
                        v603 = (unint64_t *)(*(_QWORD *)&v952[16] + 8);
                        do
                          v604 = __ldaxr(v603);
                        while (__stlxr(v604 - 1, v603));
                        if (!v604)
                        {
                          ((void (*)(std::__shared_weak_count *))v602->__on_zero_shared)(v602);
                          std::__shared_weak_count::__release_weak(v602);
                        }
                      }
                      goto LABEL_961;
                    }
                  }
                  memcpy(v527, __s, v526);
                  goto LABEL_879;
                }
              }
              memmove(v512, v509, v510);
              goto LABEL_814;
            }
          }
          operator delete(*(void **)&__src[8]);
          goto LABEL_684;
        }
      }
      memmove(v411, v408, v409);
      goto LABEL_652;
    }
LABEL_1022:
    v502 = v923;
    v503 = (char *)v925[1];
    if (v923 >= (uint64_t)(v926 - (unint64_t)v925[1]) >> 4)
      goto LABEL_1140;
LABEL_1023:
    sub_223182B14(&v932);
    v640 = (unsigned __int8 *)&v503[16 * v502];
    if (**(int **)(v932.__r_.__value_.__r.__words[0] + 56) > 3)
      goto LABEL_1137;
    v641 = *(unsigned __int8 *)(v932.__r_.__value_.__r.__words[0] + 72);
    v642 = sub_22455F97C((uint64_t *)&v932);
    v643 = v642;
    if (!v641 && !v642)
      goto LABEL_1137;
    *(_QWORD *)v952 = &v932;
    *(std::chrono::steady_clock::time_point *)&v952[8] = std::chrono::steady_clock::now();
    *(std::chrono::system_clock::time_point *)&v952[16] = std::chrono::system_clock::now();
    *(_DWORD *)v953 = 3;
    *(_QWORD *)&v953[8] = "unknown file";
    *(_DWORD *)&v953[16] = 466;
    v954 = "unknown function";
    v955 = 0;
    v956 = 0;
    sub_2245664AC(v640, __s);
    v886 = v641;
    v644 = **(_QWORD **)v952;
    v645 = (const char *)(**(_QWORD **)v952 + 16);
    v876 = v645;
    v881 = **(_QWORD **)v952;
    if (*(char *)(**(_QWORD **)v952 + 39) < 0)
    {
      v645 = *(const char **)(v644 + 16);
      v646 = *(_QWORD *)(v644 + 24);
    }
    else
    {
      v646 = *(unsigned __int8 *)(**(_QWORD **)v952 + 39);
    }
    *(_QWORD *)typef = v926;
    v897 = v925[1];
    v647 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v647 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)&v934);
      sub_223199C58("com.apple.cv3d", (unint64_t)&v934, &xmmword_255788F40);
      if ((_BYTE)v936 && SHIBYTE(rep) < 0)
        operator delete((void *)v934);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
      v52 = v915;
      a1 = v866;
    }
    if (byte_255788F57 >= 0)
      v648 = (const char *)&xmmword_255788F40;
    else
      v648 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v649 = byte_255788F57;
    else
      v649 = *((_QWORD *)&xmmword_255788F40 + 1);
    v650 = os_log_create(v648, v645);
    v942[0] = v650;

    if (v649 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v649 >= 0x17)
    {
      v652 = (v649 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v649 | 7) != 0x17)
        v652 = v649 | 7;
      v653 = v652 + 1;
      v651 = (id *)operator new(v652 + 1);
      v942[3] = (id)(v653 | 0x8000000000000000);
      v942[1] = v651;
      v942[2] = (id)v649;
      v52 = v915;
      goto LABEL_1043;
    }
    HIBYTE(v942[3]) = v649;
    v651 = &v942[1];
    if (v649)
LABEL_1043:
      memmove(v651, v648, v649);
    *((_BYTE *)v651 + v649) = 0;
    LOBYTE(v942[4]) = 1;
    if (v646 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v646 >= 0x17)
    {
      v655 = (v646 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v646 | 7) != 0x17)
        v655 = v646 | 7;
      v656 = v655 + 1;
      v654 = (id *)operator new(v655 + 1);
      *((_QWORD *)&v943 + 1) = v656 | 0x8000000000000000;
      v942[5] = v654;
      *(_QWORD *)&v943 = v646;
      v52 = v915;
    }
    else
    {
      HIBYTE(v943) = v646;
      v654 = &v942[5];
      if (!v646)
        goto LABEL_1052;
    }
    memmove(v654, v645, v646);
LABEL_1052:
    *((_BYTE *)v654 + v646) = 0;
    LOBYTE(v944) = 1;
    v657 = objc_retainAutorelease(v942[0]);
    if ((_BYTE)v944 && SHIBYTE(v943) < 0)
      operator delete(v942[5]);
    if (LOBYTE(v942[4]) && SHIBYTE(v942[3]) < 0)
      operator delete(v942[1]);

    v658 = (void *)(v502 + 1);
    v659 = (uint64_t)(*(_QWORD *)typef - (_QWORD)v897) >> 4;
    v660 = sub_22455F7B4(3u);
    v661 = v657;
    v662 = v661;
    if (!v643 || !*(_QWORD *)(v643 + 8))
    {
      os_log_type_enabled(v661, v660);
      LODWORD(v942[0]) = 136315650;
      *(id *)((char *)v942 + 4) = __s;
      WORD2(v942[1]) = 2048;
      *(id *)((char *)&v942[1] + 6) = v658;
      HIWORD(v942[2]) = 2048;
      v942[3] = (id)((uint64_t)(*(_QWORD *)typef - (_QWORD)v897) >> 4);
      v670 = (void *)_os_log_send_and_compose_impl();
      if (v670)
        free(v670);
      goto LABEL_1130;
    }
    v663 = _os_log_pack_size();
    *(_QWORD *)typeg = v662;
    v664 = (std::__shared_weak_count_vtbl *)operator new(v663, (std::align_val_t)8uLL);
    v665 = (std::__shared_weak_count *)operator new();
    v665->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v665->__shared_owners_ = 0;
    v665->__shared_weak_owners_ = 0;
    v665[1].__vftable = v664;
    *(_QWORD *)&v934 = v664;
    *((_QWORD *)&v934 + 1) = v664;
    rep = v665;
    v936 = 0;
    v937 = 0;
    v666 = strlen(__s);
    if (v666 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    v667 = (void *)v666;
    v668 = v659;
    if (v666 >= 0x17)
    {
      v671 = (v666 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v666 | 7) != 0x17)
        v671 = v666 | 7;
      v672 = v671 + 1;
      v669 = operator new(v671 + 1);
      v951[1] = (void *)(v672 | 0x8000000000000000);
      *(_QWORD *)v950 = v669;
      v951[0] = v667;
    }
    else
    {
      HIBYTE(v951[1]) = v666;
      v669 = v950;
      if (!v666)
        goto LABEL_1070;
    }
    memcpy(v669, __s, (size_t)v667);
LABEL_1070:
    *((_BYTE *)v667 + (_QWORD)v669) = 0;
    *(void **)&__src[16] = v951[0];
    *(void **)&__src[23] = *(void **)((char *)v951 + 7);
    *(_QWORD *)__src = off_24EC1F890;
    *(_QWORD *)&__src[8] = *(_QWORD *)v950;
    __src[31] = HIBYTE(v951[1]);
    v673 = operator new(0x40uLL);
    v673[1] = 0;
    v673[2] = 0;
    *v673 = &off_24EC1F840;
    v673[3] = off_24EC1F890;
    *((_OWORD *)v673 + 2) = *(_OWORD *)&__src[8];
    v673[6] = *(_QWORD *)&__src[24];
    memset(&__src[8], 0, 24);
    v674 = (std::__shared_weak_count *)v937;
    v936 = (char *)(v673 + 3);
    v937 = (const char *)v673;
    v675 = v668;
    v662 = *(NSObject **)typeg;
    if (v674)
    {
      v676 = (unint64_t *)&v674->__shared_owners_;
      do
        v677 = __ldaxr(v676);
      while (__stlxr(v677 - 1, v676));
      if (!v677)
      {
        ((void (*)(std::__shared_weak_count *))v674->__on_zero_shared)(v674);
        std::__shared_weak_count::__release_weak(v674);
        if ((__src[31] & 0x80000000) == 0)
          goto LABEL_1076;
        goto LABEL_1075;
      }
    }
    if ((__src[31] & 0x80000000) != 0)
LABEL_1075:
      operator delete(*(void **)&__src[8]);
LABEL_1076:
    nullsub_30(__src);
    *(_OWORD *)v942 = v934;
    v678 = v936;
    v942[2] = rep;
    if (rep)
    {
      v679 = (unint64_t *)&rep->__shared_owners_;
      do
        v680 = __ldxr(v679);
      while (__stxr(v680 + 1, v679));
    }
    v681 = (std::__shared_weak_count *)v937;
    v942[3] = v678;
    v942[4] = (id)v937;
    if (v937)
    {
      v682 = (unint64_t *)(v937 + 8);
      do
        v683 = __ldxr(v682);
      while (__stxr(v683 + 1, v682));
      v942[5] = v678;
      do
        v684 = __ldaxr(v682);
      while (__stlxr(v684 - 1, v682));
      if (!v684)
      {
        ((void (*)(std::__shared_weak_count *))v681->__on_zero_shared)(v681);
        std::__shared_weak_count::__release_weak(v681);
      }
    }
    else
    {
      v942[5] = v678;
    }
    v685 = rep;
    if (rep)
    {
      v686 = (unint64_t *)&rep->__shared_owners_;
      do
        v687 = __ldaxr(v686);
      while (__stlxr(v687 - 1, v686));
      if (!v687)
      {
        ((void (*)(std::__shared_weak_count *))v685->__on_zero_shared)(v685);
        std::__shared_weak_count::__release_weak(v685);
      }
    }
    v688 = v942[0];
    if (*((char *)v942[5] + 31) >= 0)
      v689 = (char *)v942[5] + 8;
    else
      v689 = (char *)*((_QWORD *)v942[5] + 1);
    v690 = _os_log_pack_fill();
    *(_DWORD *)v690 = 136315650;
    *(_QWORD *)(v690 + 4) = v689;
    *(_WORD *)(v690 + 12) = 2048;
    *(_QWORD *)(v690 + 14) = v658;
    *(_WORD *)(v690 + 22) = 2048;
    *(_QWORD *)(v690 + 24) = v675;
    v691 = operator new();
    v692 = *(unsigned __int8 *)(v881 + 39);
    v693 = v876;
    if ((v692 & 0x80u) != 0)
    {
      v693 = *(const char **)(v881 + 16);
      v692 = *(_QWORD *)(v881 + 24);
    }
    *(_QWORD *)v691 = v688;
    *(_OWORD *)(v691 + 8) = *(_OWORD *)&v942[1];
    v942[1] = 0;
    v942[2] = 0;
    *(_OWORD *)(v691 + 24) = *(_OWORD *)&v942[3];
    v942[3] = 0;
    v942[4] = 0;
    *(_QWORD *)(v691 + 40) = v693;
    *(_QWORD *)(v691 + 48) = v692;
    *(_BYTE *)(v691 + 56) = v660;
    *(_QWORD *)__src = 0;
    *(_QWORD *)&v934 = v691;
    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v643 + 8) + 40))(*(_QWORD *)(v643 + 8), &v934);
    v52 = v915;
    v694 = v934;
    *(_QWORD *)&v934 = 0;
    if (v694)
    {
      v695 = *(std::__shared_weak_count **)(v694 + 32);
      if (v695)
      {
        v696 = (unint64_t *)&v695->__shared_owners_;
        do
          v697 = __ldaxr(v696);
        while (__stlxr(v697 - 1, v696));
        if (!v697)
        {
          ((void (*)(std::__shared_weak_count *))v695->__on_zero_shared)(v695);
          std::__shared_weak_count::__release_weak(v695);
        }
      }
      v698 = *(std::__shared_weak_count **)(v694 + 16);
      if (v698)
      {
        v699 = (unint64_t *)&v698->__shared_owners_;
        do
          v700 = __ldaxr(v699);
        while (__stlxr(v700 - 1, v699));
        if (!v700)
        {
          ((void (*)(std::__shared_weak_count *))v698->__on_zero_shared)(v698);
          std::__shared_weak_count::__release_weak(v698);
        }
      }
      MEMORY[0x227684CE8](v694, 0x10F0C40B62ED6C6);
      v701 = *(_QWORD *)__src;
      *(_QWORD *)__src = 0;
      if (v701)
      {
        v702 = *(std::__shared_weak_count **)(v701 + 32);
        if (v702)
        {
          v703 = (unint64_t *)&v702->__shared_owners_;
          do
            v704 = __ldaxr(v703);
          while (__stlxr(v704 - 1, v703));
          if (!v704)
          {
            ((void (*)(std::__shared_weak_count *))v702->__on_zero_shared)(v702);
            std::__shared_weak_count::__release_weak(v702);
          }
        }
        v705 = *(std::__shared_weak_count **)(v701 + 16);
        if (v705)
        {
          v706 = (unint64_t *)&v705->__shared_owners_;
          do
            v707 = __ldaxr(v706);
          while (__stlxr(v707 - 1, v706));
          if (!v707)
          {
            ((void (*)(std::__shared_weak_count *))v705->__on_zero_shared)(v705);
            std::__shared_weak_count::__release_weak(v705);
          }
        }
        MEMORY[0x227684CE8](v701, 0x10F0C40B62ED6C6);
      }
    }
    v708 = (std::__shared_weak_count *)v942[4];
    if (v942[4])
    {
      v709 = (unint64_t *)((char *)v942[4] + 8);
      do
        v710 = __ldaxr(v709);
      while (__stlxr(v710 - 1, v709));
      if (!v710)
      {
        ((void (*)(std::__shared_weak_count *))v708->__on_zero_shared)(v708);
        std::__shared_weak_count::__release_weak(v708);
      }
    }
    v711 = (std::__shared_weak_count *)v942[2];
    if (v942[2])
    {
      v712 = (unint64_t *)((char *)v942[2] + 8);
      do
        v713 = __ldaxr(v712);
      while (__stlxr(v713 - 1, v712));
      if (!v713)
      {
        ((void (*)(std::__shared_weak_count *))v711->__on_zero_shared)(v711);
        std::__shared_weak_count::__release_weak(v711);
      }
    }
LABEL_1130:

    if (v886)
    {
      sub_2245664AC(v640, v942);
      sub_22322C138((uint64_t)v952, "Moving keyframe %s from disk to shared (%zu/%zu)", (const char *)v942, v923 + 1, (uint64_t)(v926 - (unint64_t)v925[1]) >> 4);
      sub_223182C08((uint64_t)v952);
    }
    sub_223182C08((uint64_t)v952);
    v714 = v956;
    if (v956)
    {
      v715 = (unint64_t *)&v956->__shared_owners_;
      do
        v716 = __ldaxr(v715);
      while (__stlxr(v716 - 1, v715));
      if (!v716)
      {
        ((void (*)(std::__shared_weak_count *))v714->__on_zero_shared)(v714);
        std::__shared_weak_count::__release_weak(v714);
      }
    }
LABEL_1137:
    std::mutex::lock(v52);
    v717 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 368) + 8);
    if (!v717)
    {
LABEL_1138:
      std::mutex::unlock(v52);
      goto LABEL_1139;
    }
    while (1)
    {
      v718 = v717[25];
      v719 = *v640;
      if (v719 != v718)
        goto LABEL_1160;
      v719 = v640[1];
      v718 = v717[26];
      if (v719 != v718)
        goto LABEL_1160;
      v719 = v640[2];
      v718 = v717[27];
      if (v719 != v718)
        goto LABEL_1160;
      v719 = v640[3];
      v718 = v717[28];
      if (v719 != v718)
        goto LABEL_1160;
      v719 = v640[4];
      v718 = v717[29];
      if (v719 != v718)
        goto LABEL_1160;
      v719 = v640[5];
      v718 = v717[30];
      if (v719 != v718)
        goto LABEL_1160;
      v719 = v640[6];
      v718 = v717[31];
      if (v719 != v718)
        goto LABEL_1160;
      v719 = v640[7];
      v718 = v717[32];
      if (v719 != v718)
        goto LABEL_1160;
      v719 = v640[8];
      v718 = v717[33];
      if (v719 != v718)
        goto LABEL_1160;
      v719 = v640[9];
      v718 = v717[34];
      if (v719 != v718)
        goto LABEL_1160;
      v719 = v640[10];
      v718 = v717[35];
      if (v719 != v718)
        goto LABEL_1160;
      v719 = v640[11];
      v718 = v717[36];
      if (v719 != v718)
        goto LABEL_1160;
      v719 = v640[12];
      v718 = v717[37];
      if (v719 != v718
        || (v719 = v640[13], v718 = v717[38], v719 != v718)
        || (v719 = v640[14], v718 = v717[39], v719 != v718)
        || (v719 = v640[15], v718 = v717[40], v719 != v718))
      {
LABEL_1160:
        if (v719 < v718)
          goto LABEL_1143;
      }
      if (((char)sub_22319835C(v717 + 25, v640) & 0x80000000) == 0)
        break;
      v717 += 8;
LABEL_1143:
      v717 = *(unsigned __int8 **)v717;
      if (!v717)
        goto LABEL_1138;
    }
    std::mutex::unlock(v52);
    sub_2231953D0(a1, v640, (uint64_t)v942);
    if (v949)
    {
      std::mutex::lock(v52);
      *(_OWORD *)v952 = *(_OWORD *)v640;
      v720 = v942[0];
      v721 = v942[1];
      *(id *)&v952[16] = v942[0];
      *(id *)v953 = v942[1];
      if (v942[1])
      {
        v722 = (unint64_t *)((char *)v942[1] + 8);
        do
          v723 = __ldxr(v722);
        while (__stxr(v723 + 1, v722));
      }
      v724 = *(_QWORD *)(a1 + 824);
      if (v724 >= *(_QWORD *)(a1 + 832))
      {
        v734 = sub_2231A8460(v865, (uint64_t)v952);
        v735 = *(std::__shared_weak_count **)v953;
        *(_QWORD *)(a1 + 824) = v734;
        if (v735)
        {
          v736 = (unint64_t *)&v735->__shared_owners_;
          do
            v737 = __ldaxr(v736);
          while (__stlxr(v737 - 1, v736));
          if (!v737)
          {
            ((void (*)(std::__shared_weak_count *))v735->__on_zero_shared)(v735);
            std::__shared_weak_count::__release_weak(v735);
          }
        }
      }
      else
      {
        *(_OWORD *)v724 = *(_OWORD *)v952;
        *(_QWORD *)(v724 + 16) = v720;
        *(_QWORD *)(v724 + 24) = v721;
        *(_QWORD *)(a1 + 824) = v724 + 32;
      }
      goto LABEL_1293;
    }
    v725 = atomic_load((unsigned __int8 *)&qword_2557892F0);
    if ((v725 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
    {
      __cxa_atexit((void (*)(void *))sub_2231A8A28, &unk_255789280, &dword_22314D000);
      __cxa_guard_release(&qword_2557892F0);
    }
    sub_223195728((uint64_t)&unk_255789280, "cv3d.recon.kf_pers", 0x12uLL, "Error loading keyframe: %s with error: %s", 0x29uLL);
    sub_223192614(&v930);
    if (**(int **)(v930 + 56) > 5)
      goto LABEL_1289;
    v726 = *(unsigned __int8 *)(v930 + 72);
    v727 = sub_22455F97C(&v930);
    v728 = v727;
    if (!v726 && !v727)
      goto LABEL_1289;
    *(_QWORD *)&v934 = &v930;
    *((std::chrono::steady_clock::time_point *)&v934 + 1) = std::chrono::steady_clock::now();
    rep = (std::__shared_weak_count *)std::chrono::system_clock::now().__d_.__rep_;
    LODWORD(v936) = 5;
    v937 = "unknown file";
    v938 = 481;
    v939 = "unknown function";
    v940 = 0;
    v941 = 0;
    sub_2245664AC(v640, v950);
    if (v949)
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = &off_24EC1FCC0;
      __cxa_throw(exception, (struct type_info *)&unk_24EC1FC98, (void (*)(void *))std::exception::~exception);
    }
    sub_22456A158((uint64_t)v942, &v932);
    v729 = &v932;
    if ((v932.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v729 = (std::string *)v932.__r_.__value_.__r.__words[0];
    v933 = (int **)v729;
    v730 = *(_QWORD *)v934;
    v898 = *(_QWORD *)v934;
    if (*(char *)(*(_QWORD *)v934 + 39) < 0)
    {
      v732 = *(const char **)(v730 + 16);
      v731 = *(_QWORD *)(v730 + 24);
      v887 = *(_QWORD *)v934 + 16;
      v738 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v738 & 1) == 0)
      {
LABEL_1353:
        if (__cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)__src);
          sub_223199C58("com.apple.cv3d", (unint64_t)__src, &xmmword_255788F40);
          if (__src[24] && (__src[23] & 0x80000000) != 0)
            operator delete(*(void **)__src);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
          v52 = v915;
          a1 = v866;
        }
      }
    }
    else
    {
      v731 = *(unsigned __int8 *)(*(_QWORD *)v934 + 39);
      v732 = (const char *)(*(_QWORD *)v934 + 16);
      v887 = (uint64_t)v732;
      v733 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v733 & 1) == 0)
        goto LABEL_1353;
    }
    if (byte_255788F57 >= 0)
      v739 = (const char *)&xmmword_255788F40;
    else
      v739 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v740 = byte_255788F57;
    else
      v740 = *((_QWORD *)&xmmword_255788F40 + 1);
    v741 = os_log_create(v739, v732);
    *(_QWORD *)v952 = v741;

    if (v740 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v740 >= 0x17)
    {
      v743 = (v740 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v740 | 7) != 0x17)
        v743 = v740 | 7;
      v744 = v743 + 1;
      v742 = operator new(v743 + 1);
      *(_QWORD *)v953 = v744 | 0x8000000000000000;
      *(_QWORD *)&v952[8] = v742;
      *(_QWORD *)&v952[16] = v740;
      v52 = v915;
      goto LABEL_1200;
    }
    v953[7] = v740;
    v742 = &v952[8];
    if (v740)
LABEL_1200:
      memmove(v742, v739, v740);
    v742[v740] = 0;
    v953[8] = 1;
    if (v731 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v731 >= 0x17)
    {
      v746 = (v731 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v731 | 7) != 0x17)
        v746 = v731 | 7;
      v747 = v746 + 1;
      v745 = operator new(v746 + 1);
      v955 = v747 | 0x8000000000000000;
      *(_QWORD *)&v953[16] = v745;
      v954 = (const char *)v731;
      v52 = v915;
    }
    else
    {
      HIBYTE(v955) = v731;
      v745 = &v953[16];
      if (!v731)
        goto LABEL_1209;
    }
    memmove(v745, v732, v731);
LABEL_1209:
    v745[v731] = 0;
    LOBYTE(v956) = 1;
    v748 = objc_retainAutorelease(*(id *)v952);
    if ((_BYTE)v956 && SHIBYTE(v955) < 0)
      operator delete(*(void **)&v953[16]);
    if (v953[8] && (v953[7] & 0x80000000) != 0)
      operator delete(*(void **)&v952[8]);

    typeh = sub_22455F7B4(5u);
    v749 = v748;
    v750 = v749;
    if (v728 && *(_QWORD *)(v728 + 8))
    {
      v751 = _os_log_pack_size();
      v752 = operator new(v751, (std::align_val_t)8uLL);
      v753 = (_QWORD *)operator new();
      v753[1] = 0;
      v754 = v753 + 1;
      *v753 = &off_24EC1F7F0;
      v753[2] = 0;
      v753[3] = v752;
      *(_QWORD *)__s = v752;
      *(_QWORD *)v960 = v752;
      *(_QWORD *)&v960[8] = v753;
      *(_QWORD *)&v960[16] = 0;
      v961 = 0;
      sub_2231A85B4((uint64_t)v952, v950, (const char **)&v933);
      v755 = v726;
      v756 = (std::__shared_weak_count *)operator new(0x50uLL);
      v756->__shared_owners_ = 0;
      v757 = (unint64_t *)&v756->__shared_owners_;
      v756->__shared_weak_owners_ = 0;
      v756->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC20730;
      v756[1].__vftable = (std::__shared_weak_count_vtbl *)off_24EC20780;
      *(_OWORD *)&v756[1].__shared_owners_ = *(_OWORD *)&v952[8];
      v756[2].__vftable = *(std::__shared_weak_count_vtbl **)v953;
      *(_QWORD *)&v952[8] = 0;
      *(_QWORD *)&v952[16] = 0;
      *(_QWORD *)v953 = 0;
      *(_OWORD *)&v756[2].__shared_owners_ = *(_OWORD *)&v953[8];
      v756[3].__vftable = (std::__shared_weak_count_vtbl *)v954;
      *(_QWORD *)&v953[16] = 0;
      v954 = 0;
      *(_QWORD *)&v953[8] = 0;
      *(_QWORD *)&v960[16] = v756 + 1;
      v961 = v756;
      nullsub_30(v952);
      *(_QWORD *)__src = v752;
      *(_QWORD *)&__src[8] = v752;
      *(_QWORD *)&__src[16] = v753;
      do
        v758 = __ldxr(v754);
      while (__stxr(v758 + 1, v754));
      *(_QWORD *)&__src[24] = v756 + 1;
      *(_QWORD *)&__src[32] = v756;
      do
        v759 = __ldxr(v757);
      while (__stxr(v759 + 1, v757));
      v958 = v756 + 1;
      do
        v760 = __ldaxr(v757);
      while (__stlxr(v760 - 1, v757));
      if (!v760)
      {
        ((void (*)(std::__shared_weak_count *))v756->__on_zero_shared)(v756);
        std::__shared_weak_count::__release_weak(v756);
      }
      v761 = *(std::__shared_weak_count **)&v960[8];
      v726 = v755;
      if (*(_QWORD *)&v960[8])
      {
        v762 = (unint64_t *)(*(_QWORD *)&v960[8] + 8);
        do
          v763 = __ldaxr(v762);
        while (__stlxr(v763 - 1, v762));
        if (!v763)
        {
          ((void (*)(std::__shared_weak_count *))v761->__on_zero_shared)(v761);
          std::__shared_weak_count::__release_weak(v761);
        }
      }
      v764 = *(_QWORD *)__src;
      if (SHIBYTE(v958[1].__vftable) >= 0)
        shared_owners = (uint64_t)&v958->__shared_owners_;
      else
        shared_owners = v958->__shared_owners_;
      if (SHIBYTE(v958[2].__vftable) >= 0)
        v766 = (char *)&v958[1].__shared_owners_;
      else
        v766 = (char *)v958[1].__shared_owners_;
      v767 = _os_log_pack_fill();
      *(_DWORD *)v767 = 136315394;
      *(_QWORD *)(v767 + 4) = shared_owners;
      *(_WORD *)(v767 + 12) = 2080;
      *(_QWORD *)(v767 + 14) = v766;
      v768 = operator new();
      v769 = *(unsigned __int8 *)(v898 + 39);
      v770 = v887;
      if ((v769 & 0x80u) != 0)
      {
        v770 = *(_QWORD *)(v898 + 16);
        v769 = *(_QWORD *)(v898 + 24);
      }
      *(_QWORD *)v768 = v764;
      *(_OWORD *)(v768 + 8) = *(_OWORD *)&__src[8];
      *(_QWORD *)&__src[8] = 0;
      *(_QWORD *)&__src[16] = 0;
      *(_OWORD *)(v768 + 24) = *(_OWORD *)&__src[24];
      *(_QWORD *)&__src[24] = 0;
      *(_QWORD *)&__src[32] = 0;
      *(_QWORD *)(v768 + 40) = v770;
      *(_QWORD *)(v768 + 48) = v769;
      *(_BYTE *)(v768 + 56) = typeh;
      *(_QWORD *)__s = 0;
      *(_QWORD *)v952 = v768;
      (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v728 + 8) + 40))(*(_QWORD *)(v728 + 8), v952);
      v52 = v915;
      v771 = *(_QWORD *)v952;
      *(_QWORD *)v952 = 0;
      if (v771)
      {
        v772 = *(std::__shared_weak_count **)(v771 + 32);
        if (v772)
        {
          v773 = (unint64_t *)&v772->__shared_owners_;
          do
            v774 = __ldaxr(v773);
          while (__stlxr(v774 - 1, v773));
          if (!v774)
          {
            ((void (*)(std::__shared_weak_count *))v772->__on_zero_shared)(v772);
            std::__shared_weak_count::__release_weak(v772);
          }
        }
        v775 = *(std::__shared_weak_count **)(v771 + 16);
        if (v775)
        {
          v776 = (unint64_t *)&v775->__shared_owners_;
          do
            v777 = __ldaxr(v776);
          while (__stlxr(v777 - 1, v776));
          if (!v777)
          {
            ((void (*)(std::__shared_weak_count *))v775->__on_zero_shared)(v775);
            std::__shared_weak_count::__release_weak(v775);
          }
        }
        MEMORY[0x227684CE8](v771, 0x10F0C40B62ED6C6);
        v778 = *(_QWORD *)__s;
        *(_QWORD *)__s = 0;
        if (v778)
        {
          v779 = *(std::__shared_weak_count **)(v778 + 32);
          if (v779)
          {
            v780 = (unint64_t *)&v779->__shared_owners_;
            do
              v781 = __ldaxr(v780);
            while (__stlxr(v781 - 1, v780));
            if (!v781)
            {
              ((void (*)(std::__shared_weak_count *))v779->__on_zero_shared)(v779);
              std::__shared_weak_count::__release_weak(v779);
            }
          }
          v782 = *(std::__shared_weak_count **)(v778 + 16);
          if (v782)
          {
            v783 = (unint64_t *)&v782->__shared_owners_;
            do
              v784 = __ldaxr(v783);
            while (__stlxr(v784 - 1, v783));
            if (!v784)
            {
              ((void (*)(std::__shared_weak_count *))v782->__on_zero_shared)(v782);
              std::__shared_weak_count::__release_weak(v782);
            }
          }
          MEMORY[0x227684CE8](v778, 0x10F0C40B62ED6C6);
        }
      }
      v785 = *(std::__shared_weak_count **)&__src[32];
      if (*(_QWORD *)&__src[32])
      {
        v786 = (unint64_t *)(*(_QWORD *)&__src[32] + 8);
        do
          v787 = __ldaxr(v786);
        while (__stlxr(v787 - 1, v786));
        if (!v787)
        {
          ((void (*)(std::__shared_weak_count *))v785->__on_zero_shared)(v785);
          std::__shared_weak_count::__release_weak(v785);
        }
      }
      v788 = *(std::__shared_weak_count **)&__src[16];
      if (*(_QWORD *)&__src[16])
      {
        v789 = (unint64_t *)(*(_QWORD *)&__src[16] + 8);
        do
          v790 = __ldaxr(v789);
        while (__stlxr(v790 - 1, v789));
        if (!v790)
        {
          ((void (*)(std::__shared_weak_count *))v788->__on_zero_shared)(v788);
          std::__shared_weak_count::__release_weak(v788);
        }
      }
    }
    else
    {
      os_log_type_enabled(v749, typeh);
      *(_DWORD *)v952 = 136315394;
      *(_QWORD *)&v952[4] = v950;
      *(_WORD *)&v952[12] = 2080;
      *(_QWORD *)&v952[14] = v933;
      v791 = (void *)_os_log_send_and_compose_impl();
      if (v791)
        free(v791);
    }

    if (SHIBYTE(v932.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v932.__r_.__value_.__l.__data_);
      if (!v726)
        goto LABEL_1284;
    }
    else if (!v726)
    {
      goto LABEL_1284;
    }
    sub_2245664AC(v640, v952);
    if (v949)
    {
      v864 = __cxa_allocate_exception(8uLL);
      *v864 = &off_24EC1FCC0;
      __cxa_throw(v864, (struct type_info *)&unk_24EC1FC98, (void (*)(void *))std::exception::~exception);
    }
    sub_22456A158((uint64_t)v942, (std::string *)__src);
    if (__src[23] >= 0)
      v792 = __src;
    else
      v792 = *(const char **)__src;
    sub_22322C138((uint64_t)&v934, "Error loading keyframe: %s with error: %s", v952, v792);
    if ((__src[23] & 0x80000000) != 0)
      operator delete(*(void **)__src);
    sub_223182C08((uint64_t)&v934);
LABEL_1284:
    sub_223182C08((uint64_t)&v934);
    v793 = v941;
    if (v941)
    {
      v794 = (unint64_t *)&v941->__shared_owners_;
      do
        v795 = __ldaxr(v794);
      while (__stlxr(v795 - 1, v794));
      if (!v795)
      {
        ((void (*)(std::__shared_weak_count *))v793->__on_zero_shared)(v793);
        std::__shared_weak_count::__release_weak(v793);
      }
    }
LABEL_1289:
    v796 = *(_QWORD *)(a1 + 688);
    if (!v796)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeMemory.mm", 486, (uint64_t)"invalidate_keyframe_cb_", 23, (uint64_t)"Invalidate keyframe callback required", 37, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v796 = *(_QWORD *)(a1 + 688);
      if (!v796)
        sub_223198474();
    }
    (*(void (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v796 + 48))(v796, v640);
    std::mutex::lock(v52);
    ++*(_DWORD *)(a1 + 864);
LABEL_1293:
    std::mutex::unlock(v52);
    if (v949)
    {
      v797 = (std::__shared_weak_count *)v942[1];
      if (v942[1])
      {
        v798 = (unint64_t *)((char *)v942[1] + 8);
        do
          v799 = __ldaxr(v798);
        while (__stlxr(v799 - 1, v798));
        if (!v799)
        {
          ((void (*)(std::__shared_weak_count *))v797->__on_zero_shared)(v797);
          std::__shared_weak_count::__release_weak(v797);
        }
      }
      goto LABEL_1139;
    }
    if (!v948)
      goto LABEL_1139;
    if (v947)
    {
      if (v946 < 0)
      {
        operator delete((void *)v945);
        if ((SBYTE7(v944) & 0x80000000) == 0)
          goto LABEL_1303;
      }
      else if ((SBYTE7(v944) & 0x80000000) == 0)
      {
        goto LABEL_1303;
      }
      operator delete((void *)v943);
      if (!LOBYTE(v942[5]))
        goto LABEL_1139;
    }
    else
    {
LABEL_1303:
      if (!LOBYTE(v942[5]))
        goto LABEL_1139;
    }
    if (SHIBYTE(v942[4]) < 0)
      operator delete(v942[2]);
LABEL_1139:
    ++v923;
LABEL_1140:
    kdebug_trace();
    objc_autoreleasePoolPop(context);
LABEL_1141:
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
    if ((v917 & 1) == 0)
      continue;
    break;
  }
  sub_223182B14(__s);
  if (**(int **)(*(_QWORD *)__s + 56) > 3)
    goto LABEL_1448;
  v800 = *(unsigned __int8 *)(*(_QWORD *)__s + 72);
  v801 = sub_22455F97C((uint64_t *)__s);
  v802 = v801;
  if (!v800 && !v801)
    goto LABEL_1448;
  *(_QWORD *)v952 = __s;
  *(std::chrono::steady_clock::time_point *)&v952[8] = std::chrono::steady_clock::now();
  *(std::chrono::system_clock::time_point *)&v952[16] = std::chrono::system_clock::now();
  *(_DWORD *)v953 = 3;
  *(_QWORD *)&v953[8] = "unknown file";
  *(_DWORD *)&v953[16] = 541;
  v956 = 0;
  v954 = "unknown function";
  v955 = 0;
  v803 = **(_QWORD **)v952;
  v804 = **(_QWORD **)v952 + 16;
  if (*(char *)(**(_QWORD **)v952 + 39) < 0)
  {
    v806 = *(const char **)(v803 + 16);
    v805 = *(_QWORD *)(v803 + 24);
    v808 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v808 & 1) == 0)
    {
LABEL_1501:
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)v942);
        sub_223199C58("com.apple.cv3d", (unint64_t)v942, &xmmword_255788F40);
        if (LOBYTE(v942[3]) && SHIBYTE(v942[2]) < 0)
          operator delete(v942[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
    }
  }
  else
  {
    v805 = *(unsigned __int8 *)(**(_QWORD **)v952 + 39);
    v806 = (const char *)(**(_QWORD **)v952 + 16);
    v807 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v807 & 1) == 0)
      goto LABEL_1501;
  }
  if (byte_255788F57 >= 0)
    v809 = (const char *)&xmmword_255788F40;
  else
    v809 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v810 = byte_255788F57;
  else
    v810 = *((_QWORD *)&xmmword_255788F40 + 1);
  v811 = os_log_create(v809, v806);
  v942[0] = v811;

  v812 = &v942[1];
  if (v810 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v810 >= 0x17)
  {
    v813 = (v810 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v810 | 7) != 0x17)
      v813 = v810 | 7;
    v814 = v813 + 1;
    v812 = (id *)operator new(v813 + 1);
    v942[3] = (id)(v814 | 0x8000000000000000);
    v942[1] = v812;
    v942[2] = (id)v810;
    goto LABEL_1378;
  }
  HIBYTE(v942[3]) = v810;
  if (v810)
LABEL_1378:
    memmove(v812, v809, v810);
  *((_BYTE *)v812 + v810) = 0;
  LOBYTE(v942[4]) = 1;
  v815 = &v942[5];
  if (v805 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v805 >= 0x17)
  {
    v816 = (v805 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v805 | 7) != 0x17)
      v816 = v805 | 7;
    v817 = v816 + 1;
    v815 = (id *)operator new(v816 + 1);
    *((_QWORD *)&v943 + 1) = v817 | 0x8000000000000000;
    v942[5] = v815;
    *(_QWORD *)&v943 = v805;
  }
  else
  {
    HIBYTE(v943) = v805;
    if (!v805)
      goto LABEL_1387;
  }
  memmove(v815, v806, v805);
LABEL_1387:
  *((_BYTE *)v815 + v805) = 0;
  LOBYTE(v944) = 1;
  v818 = objc_retainAutorelease(v942[0]);
  if ((_BYTE)v944 && SHIBYTE(v943) < 0)
    operator delete(v942[5]);
  if (LOBYTE(v942[4]) && SHIBYTE(v942[3]) < 0)
    operator delete(v942[1]);

  v819 = sub_22455F7B4(3u);
  v820 = v818;
  v821 = v820;
  if (v802 && *(_QWORD *)(v802 + 8))
  {
    v822 = _os_log_pack_size();
    v823 = (std::__shared_weak_count_vtbl *)operator new(v822, (std::align_val_t)8uLL);
    v824 = (std::__shared_weak_count *)operator new();
    v825 = v824;
    v824->__shared_owners_ = 0;
    v826 = (unint64_t *)&v824->__shared_owners_;
    v824->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v824->__shared_weak_owners_ = 0;
    v824[1].__vftable = v823;
    v942[0] = v823;
    v942[1] = v823;
    v942[2] = v824;
    do
      v827 = __ldxr(v826);
    while (__stxr(v827 + 1, v826));
    memset(&v942[3], 0, 24);
    do
      v828 = __ldaxr(v826);
    while (__stlxr(v828 - 1, v826));
    if (!v828)
    {
      ((void (*)(std::__shared_weak_count *))v824->__on_zero_shared)(v824);
      std::__shared_weak_count::__release_weak(v825);
    }
    v829 = v942[0];
    *(_WORD *)_os_log_pack_fill() = 0;
    v830 = operator new();
    v831 = *(unsigned __int8 *)(v803 + 39);
    if ((v831 & 0x80u) == 0)
      v832 = v804;
    else
      v832 = *(_QWORD *)(v803 + 16);
    if ((v831 & 0x80u) != 0)
      v831 = *(_QWORD *)(v803 + 24);
    *(_QWORD *)v830 = v829;
    *(_OWORD *)(v830 + 8) = *(_OWORD *)&v942[1];
    v942[1] = 0;
    v942[2] = 0;
    *(_OWORD *)(v830 + 24) = *(_OWORD *)&v942[3];
    v942[3] = 0;
    v942[4] = 0;
    *(_QWORD *)(v830 + 40) = v832;
    *(_QWORD *)(v830 + 48) = v831;
    *(_BYTE *)(v830 + 56) = v819;
    *(_QWORD *)__src = 0;
    *(_QWORD *)&v934 = v830;
    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v802 + 8) + 40))(*(_QWORD *)(v802 + 8), &v934);
    v833 = v934;
    *(_QWORD *)&v934 = 0;
    if (v833)
    {
      v834 = *(std::__shared_weak_count **)(v833 + 32);
      if (v834)
      {
        v835 = (unint64_t *)&v834->__shared_owners_;
        do
          v836 = __ldaxr(v835);
        while (__stlxr(v836 - 1, v835));
        if (!v836)
        {
          ((void (*)(std::__shared_weak_count *))v834->__on_zero_shared)(v834);
          std::__shared_weak_count::__release_weak(v834);
        }
      }
      v837 = *(std::__shared_weak_count **)(v833 + 16);
      if (v837)
      {
        v838 = (unint64_t *)&v837->__shared_owners_;
        do
          v839 = __ldaxr(v838);
        while (__stlxr(v839 - 1, v838));
        if (!v839)
        {
          ((void (*)(std::__shared_weak_count *))v837->__on_zero_shared)(v837);
          std::__shared_weak_count::__release_weak(v837);
        }
      }
      MEMORY[0x227684CE8](v833, 0x10F0C40B62ED6C6);
      v840 = *(_QWORD *)__src;
      *(_QWORD *)__src = 0;
      if (v840)
      {
        v841 = *(std::__shared_weak_count **)(v840 + 32);
        if (v841)
        {
          v842 = (unint64_t *)&v841->__shared_owners_;
          do
            v843 = __ldaxr(v842);
          while (__stlxr(v843 - 1, v842));
          if (!v843)
          {
            ((void (*)(std::__shared_weak_count *))v841->__on_zero_shared)(v841);
            std::__shared_weak_count::__release_weak(v841);
          }
        }
        v844 = *(std::__shared_weak_count **)(v840 + 16);
        if (v844)
        {
          v845 = (unint64_t *)&v844->__shared_owners_;
          do
            v846 = __ldaxr(v845);
          while (__stlxr(v846 - 1, v845));
          if (!v846)
          {
            ((void (*)(std::__shared_weak_count *))v844->__on_zero_shared)(v844);
            std::__shared_weak_count::__release_weak(v844);
          }
        }
        MEMORY[0x227684CE8](v840, 0x10F0C40B62ED6C6);
      }
    }
    v847 = (std::__shared_weak_count *)v942[4];
    if (v942[4])
    {
      v848 = (unint64_t *)((char *)v942[4] + 8);
      do
        v849 = __ldaxr(v848);
      while (__stlxr(v849 - 1, v848));
      if (!v849)
      {
        ((void (*)(std::__shared_weak_count *))v847->__on_zero_shared)(v847);
        std::__shared_weak_count::__release_weak(v847);
      }
    }
    v850 = (std::__shared_weak_count *)v942[2];
    if (v942[2])
    {
      v851 = (unint64_t *)((char *)v942[2] + 8);
      do
        v852 = __ldaxr(v851);
      while (__stlxr(v852 - 1, v851));
      if (!v852)
      {
        ((void (*)(std::__shared_weak_count *))v850->__on_zero_shared)(v850);
        std::__shared_weak_count::__release_weak(v850);
      }
    }
  }
  else
  {
    os_log_type_enabled(v820, v819);
    LOWORD(v942[0]) = 0;
    v853 = (void *)_os_log_send_and_compose_impl();
    if (v853)
      free(v853);
  }

  if (v800)
  {
    sub_22322C138((uint64_t)v952, "Keyframing Disk IO loop terminated");
    sub_223182C08((uint64_t)v952);
  }
  sub_223182C08((uint64_t)v952);
  v854 = v956;
  if (v956)
  {
    v855 = (unint64_t *)&v956->__shared_owners_;
    do
      v856 = __ldaxr(v855);
    while (__stlxr(v856 - 1, v855));
    if (!v856)
    {
      ((void (*)(std::__shared_weak_count *))v854->__on_zero_shared)(v854);
      std::__shared_weak_count::__release_weak(v854);
    }
  }
LABEL_1448:
  if (*((_QWORD *)&v928 + 1))
  {
    *(_QWORD *)&v929 = *((_QWORD *)&v928 + 1);
    operator delete(*((void **)&v928 + 1));
  }
  v857 = (char *)v927[0];
  if (v927[0])
  {
    v858 = (char *)v927[1];
    v859 = v927[0];
    if (v927[1] != v927[0])
    {
      do
      {
        v860 = (std::__shared_weak_count *)*((_QWORD *)v858 - 1);
        if (v860)
        {
          v861 = (unint64_t *)&v860->__shared_owners_;
          do
            v862 = __ldaxr(v861);
          while (__stlxr(v862 - 1, v861));
          if (!v862)
          {
            ((void (*)(std::__shared_weak_count *))v860->__on_zero_shared)(v860);
            std::__shared_weak_count::__release_weak(v860);
          }
        }
        v858 -= 32;
      }
      while (v858 != v857);
      v859 = v927[0];
    }
    v927[1] = v857;
    operator delete(v859);
  }
  if (v925[1])
  {
    *(void **)&v926 = v925[1];
    operator delete(v925[1]);
  }
  if (v924[0])
  {
    v924[1] = v924[0];
    operator delete(v924[0]);
  }
}

void sub_223191928(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x348]))
  {
    if (SLOBYTE(STACK[0x347]) < 0)
      operator delete((void *)STACK[0x330]);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&STACK[0x8B0]);
  sub_223183F28((uint64_t)&STACK[0x250]);
  _Unwind_Resume(a1);
}

void sub_223191970(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x348]))
  {
    if (SLOBYTE(STACK[0x347]) < 0)
      operator delete((void *)STACK[0x330]);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&STACK[0x250]);
  _Unwind_Resume(a1);
}

void sub_2231919B0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&STACK[0x8B0]);
  sub_2231874DC((uint64_t)&STACK[0x208]);
  if (LOBYTE(STACK[0x238]))
    std::mutex::unlock((std::mutex *)STACK[0x230]);
  sub_223183F28((uint64_t)&STACK[0x250]);
  _Unwind_Resume(a1);
}

void sub_223192614(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CA698);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CA698))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3dapi.recon3d");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CA690);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CA698);
  }
  *a1 = qword_2540CA690;
}

void sub_2231926B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CA698);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CA698);
  _Unwind_Resume(a1);
}

uint64_t sub_223192708(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *v13;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v5 = *(void **)(a1 + 24);
  if (v5)
  {
    *(_QWORD *)(a1 + 32) = v5;
    operator delete(v5);
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v6 = (void **)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 48);
  if (v7)
  {
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(void **)(a1 + 48);
    if (v8 != v7)
    {
      do
      {
        v10 = *(std::__shared_weak_count **)(v8 - 8);
        if (v10)
        {
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldaxr(p_shared_owners);
          while (__stlxr(v12 - 1, p_shared_owners));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
        v8 -= 32;
      }
      while (v8 != v7);
      v9 = *v6;
    }
    *(_QWORD *)(a1 + 56) = v7;
    operator delete(v9);
    *v6 = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  v13 = *(void **)(a1 + 72);
  if (v13)
  {
    *(_QWORD *)(a1 + 80) = v13;
    operator delete(v13);
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  return a1;
}

BOOL sub_223192878(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  char v13;

  v4 = sub_2231A88F8((_QWORD *)a1, a2);
  if (v4)
  {
    if (!sub_2231A88F8((_QWORD *)a1, a2)
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/include/Reconstruction/Keyframing/Pool/BaseKeyframePool.hpp", 92, (uint64_t)"Contains(key)", 13, (uint64_t)"Invalid key", 11, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v5 = sub_2231A8330((_QWORD *)a1, a2);
    if (!v5)
      sub_223198218("unordered_map::at: key not found");
    *(float *)(a1 + 40) = *(float *)(a1 + 40) - sub_2231D3830((_QWORD *)v5[4]);
    v6 = sub_2231A8330((_QWORD *)a1, a2);
    if (v6)
    {
      sub_2231AFBB8((_QWORD *)a1, v6, (uint64_t)&__p);
      v7 = __p;
      __p = 0;
      if (v7)
      {
        if (v13)
        {
          v8 = (std::__shared_weak_count *)v7[5];
          if (v8)
          {
            p_shared_owners = (unint64_t *)&v8->__shared_owners_;
            do
              v10 = __ldaxr(p_shared_owners);
            while (__stlxr(v10 - 1, p_shared_owners));
            if (!v10)
            {
              ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
              std::__shared_weak_count::__release_weak(v8);
            }
          }
        }
        operator delete(v7);
      }
    }
  }
  return v4 != 0;
}

void sub_2231929A8(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t *v18;
  size_t v19;
  const char *v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  const char *v23;
  size_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  os_log_type_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  _QWORD v41[3];
  int v42;
  const char *v43;
  int v44;
  const char *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  id v49;
  void *v50;
  size_t v51;
  unint64_t v52;
  char v53;
  void *__p[2];
  unint64_t v55;
  char v56;

  if (sub_2231A88F8((_QWORD *)a1, a3)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/include/Reconstruction/Keyframing/Pool/BaseKeyframePool.hpp", 48, (uint64_t)"!Contains(key)", 14, (uint64_t)"Key already in the Pool", 23, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v49 = a3;
  v6 = sub_2231B031C(a1, a3, (uint64_t)&unk_2245BA939, (_OWORD **)&v49);
  v8 = (_QWORD *)*a2;
  v7 = a2[1];
  if (v7)
  {
    v9 = (unint64_t *)(v7 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = (std::__shared_weak_count *)v6[5];
  v6[4] = v8;
  v6[5] = v7;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  *(float *)(a1 + 40) = sub_2231D3830((_QWORD *)*a2) + *(float *)(a1 + 40);
  sub_223182B14(&v48);
  if (**(int **)(v48 + 56) <= 3)
  {
    v14 = *(unsigned __int8 *)(v48 + 72);
    v15 = sub_22455F97C(&v48);
    if (v14 || v15 != 0)
    {
      v17 = v15;
      v41[0] = &v48;
      v41[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v41[2] = std::chrono::system_clock::now().__d_.__rep_;
      v42 = 3;
      v43 = "unknown file";
      v44 = 57;
      v46 = 0;
      v47 = 0;
      v45 = "unknown function";
      v40 = *(_QWORD *)(a1 + 24);
      v18 = (uint64_t *)(v48 + 16);
      if (*(char *)(v48 + 39) < 0)
      {
        v20 = *(const char **)(v48 + 16);
        v19 = *(_QWORD *)(v48 + 24);
        v22 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v22 & 1) != 0)
          goto LABEL_20;
      }
      else
      {
        v19 = *(unsigned __int8 *)(v48 + 39);
        v20 = (const char *)(*(_QWORD *)v41[0] + 16);
        v21 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v21 & 1) != 0)
          goto LABEL_20;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)&v49);
        sub_223199C58("com.apple.cv3d", (unint64_t)&v49, &xmmword_255788F40);
        if ((_BYTE)v52 && SHIBYTE(v51) < 0)
          operator delete(v49);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_20:
      if (byte_255788F57 >= 0)
        v23 = (const char *)&xmmword_255788F40;
      else
        v23 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v24 = byte_255788F57;
      else
        v24 = *((_QWORD *)&xmmword_255788F40 + 1);
      v49 = os_log_create(v23, v20);
      v25 = &v50;
      if (v24 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v24 >= 0x17)
      {
        v39 = v14;
        v26 = v20;
        v27 = v17;
        v28 = v18;
        v29 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v24 | 7) != 0x17)
          v29 = v24 | 7;
        v30 = v29 + 1;
        v25 = operator new(v29 + 1);
        v51 = v24;
        v52 = v30 | 0x8000000000000000;
        v50 = v25;
        v18 = v28;
        v17 = v27;
        v20 = v26;
        v14 = v39;
      }
      else
      {
        HIBYTE(v52) = v24;
        if (!v24)
        {
LABEL_34:
          *((_BYTE *)v25 + v24) = 0;
          v53 = 1;
          v31 = __p;
          if (v19 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v19 >= 0x17)
          {
            v32 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v19 | 7) != 0x17)
              v32 = v19 | 7;
            v33 = v32 + 1;
            v31 = operator new(v32 + 1);
            __p[1] = (void *)v19;
            v55 = v33 | 0x8000000000000000;
            __p[0] = v31;
          }
          else
          {
            HIBYTE(v55) = v19;
            if (!v19)
            {
LABEL_42:
              *((_BYTE *)v31 + v19) = 0;
              v56 = 1;
              v34 = objc_retainAutorelease(v49);
              if (v56 && SHIBYTE(v55) < 0)
                operator delete(__p[0]);
              if (v53 && SHIBYTE(v52) < 0)
                operator delete(v50);

              v35 = sub_22455F7B4(3u);
              sub_2231B0814((uint64_t)&v49, v17, v18, v34, v35, v14 != 0, &v40, (float *)(a1 + 40), (float *)(a1 + 44));

              if (v14)
              {
                sub_22322C138((uint64_t)v41, "Memory used for %zu keyframes: %.1f/%.1f KB", *(_QWORD *)(a1 + 24), *(float *)(a1 + 40), *(float *)(a1 + 44));
                sub_223182C08((uint64_t)v41);
              }
              sub_223182C08((uint64_t)v41);
              v36 = v47;
              if (v47)
              {
                v37 = (unint64_t *)&v47->__shared_owners_;
                do
                  v38 = __ldaxr(v37);
                while (__stlxr(v38 - 1, v37));
                if (!v38)
                {
                  ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
                  std::__shared_weak_count::__release_weak(v36);
                }
              }
              return;
            }
          }
          memmove(v31, v20, v19);
          goto LABEL_42;
        }
      }
      memmove(v25, v23, v24);
      goto LABEL_34;
    }
  }
}

void sub_223192E64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  if (a31)
  {
    if (a30 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_223192EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);

  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223192EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223192ED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32)
{
  if (a32)
  {
    if (a31 < 0)
    {
      operator delete(__p);

      sub_223182DAC((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }

  sub_223182DAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_223192F24(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 v11;
  char *v12;
  size_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  size_t v18;
  const char *v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v24;
  _QWORD *v25;
  std::string::size_type v26;
  std::string *v27;
  unsigned __int8 v28;
  const char *v29;
  size_t v30;
  NSObject *v31;
  id *v32;
  const char *v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  void *p_p;
  uint64_t v40;
  uint64_t v41;
  id v42;
  os_log_type_t v43;
  NSObject *v44;
  NSObject *v45;
  size_t v46;
  std::__shared_weak_count_vtbl *v47;
  std::__shared_weak_count *v48;
  size_t v49;
  size_t v50;
  void **p_dst;
  void *v52;
  unint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  std::__shared_weak_count *v59;
  unint64_t *p_shared_owners;
  unint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  void **v68;
  uint64_t *v69;
  unint64_t v70;
  id v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t (**v84)();
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  std::string *v103;
  uint64_t v104;
  const char *v105;
  size_t v106;
  unsigned __int8 v107;
  const char *v108;
  size_t v109;
  NSObject *v110;
  std::string::size_type *p_size;
  uint64_t v112;
  uint64_t v113;
  std::string::value_type *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  os_log_type_t v118;
  NSObject *v119;
  NSObject *v120;
  size_t v121;
  void *v122;
  _QWORD *v123;
  size_t v124;
  size_t v125;
  void **v126;
  void *v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::string::size_type v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::string::size_type v145;
  std::string::size_type v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  const char *v150;
  std::string::size_type v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  uint64_t (**v158)();
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *size;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::string *v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  void *v175;
  char *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  unsigned __int8 v182;
  int v183;
  unint64_t v184;
  unint64_t v185;
  std::string *v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  size_t v190;
  const char *v191;
  unsigned __int8 v192;
  const char *v193;
  size_t v194;
  NSObject *v195;
  std::string::size_type *v196;
  const char *v197;
  unint64_t v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  std::string::value_type *v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  os_log_type_t v206;
  NSObject *v207;
  NSObject *v208;
  size_t v209;
  uint64_t (**v210)();
  unint64_t *v211;
  unint64_t *v212;
  std::__shared_weak_count *v213;
  std::__shared_weak_count_vtbl *v214;
  unint64_t *v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  std::string::size_type v222;
  uint64_t shared_owners;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  std::string::size_type v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  uint64_t (**v236)();
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  void *v249;
  uint64_t v250;
  std::string *p_s;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  _QWORD *exception;
  const char *v256;
  int v257;
  uint64_t v258;
  NSObject *v259;
  int v260;
  _QWORD *v261;
  uint64_t v262;
  char *v263;
  char *v264;
  char *v265;
  std::string *v266;
  __int128 v267;
  std::__shared_weak_count *rep;
  __int128 v269;
  int v270;
  const char *v271;
  uint64_t v272;
  std::__shared_weak_count *v273;
  std::string v274;
  uint64_t v275;
  uint64_t (**v276)();
  void *v277[3];
  std::__shared_weak_count *v278;
  void **__dst;
  __int128 v280;
  id v281[3];
  __int128 v282;
  void *__p;
  void *v284;
  unint64_t v285;
  _BYTE v286[8];
  unint64_t v287;
  void *v288;
  void *v289;
  char v290;
  char v291;
  char v292;
  unint64_t v293;
  int v294;
  uint64_t v295;
  std::string v296[2];
  const char *v297;
  unint64_t v298;
  std::__shared_weak_count *v299;
  std::string __s;
  __int128 v301;
  std::__shared_weak_count *v302;
  uint64_t v303;

  v303 = *MEMORY[0x24BDAC8D0];
  v6 = sub_2231A88F8((_QWORD *)(a1 + 320), a2);
  if (v6)
  {
    v7 = v6[5];
    *a3 = v6[4];
    a3[1] = v7;
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    return;
  }
  v10 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 368) + 8);
  if (!v10)
  {
LABEL_7:
    v11 = atomic_load((unsigned __int8 *)&qword_2557892F0);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
    {
      __cxa_atexit((void (*)(void *))sub_2231A8A28, &stru_255789280, &dword_22314D000);
      __cxa_guard_release(&qword_2557892F0);
    }
    sub_223182B14(v281);
    if (*((char *)v281[0] + 39) < 0)
    {
      v12 = (char *)*((_QWORD *)v281[0] + 2);
      v13 = *((_QWORD *)v281[0] + 3);
    }
    else
    {
      v12 = (char *)v281[0] + 16;
      v13 = *((unsigned __int8 *)v281[0] + 39);
    }
    sub_223195728((uint64_t)&stru_255789280, v12, v13, "Keyframe %s does not exist", 0x1AuLL);
    sub_223192614(&v274);
    if (**(int **)(v274.__r_.__value_.__r.__words[0] + 56) > 5)
      goto LABEL_141;
    v14 = *(unsigned __int8 *)(v274.__r_.__value_.__r.__words[0] + 72);
    v15 = sub_22455F97C((uint64_t *)&v274);
    v16 = v15;
    if (!v14 && !v15)
      goto LABEL_141;
    v296[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v274;
    v296[0].__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v296[0].__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
    LODWORD(v296[1].__r_.__value_.__l.__data_) = 5;
    v296[1].__r_.__value_.__l.__size_ = (std::string::size_type)"unknown file";
    LODWORD(v296[1].__r_.__value_.__r.__words[2]) = 600;
    v298 = 0;
    v299 = 0;
    v297 = "unknown function";
    sub_2245664AC(a2, &__s);
    v17 = *(_QWORD *)v296[0].__r_.__value_.__l.__data_;
    if (*(char *)(*(_QWORD *)v296[0].__r_.__value_.__l.__data_ + 39) < 0)
    {
      v19 = *(const char **)(v17 + 16);
      v18 = *(_QWORD *)(v17 + 24);
    }
    else
    {
      v18 = *(unsigned __int8 *)(*(_QWORD *)v296[0].__r_.__value_.__l.__data_ + 39);
      v19 = (const char *)(v17 + 16);
    }
    v263 = (char *)(v17 + 16);
    v28 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v28 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)v281);
      sub_223199C58("com.apple.cv3d", (unint64_t)v281, &xmmword_255788F40);
      if ((_BYTE)v282 && SHIBYTE(v281[2]) < 0)
        operator delete(v281[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
    if (byte_255788F57 >= 0)
      v29 = (const char *)&xmmword_255788F40;
    else
      v29 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v30 = byte_255788F57;
    else
      v30 = *((_QWORD *)&xmmword_255788F40 + 1);
    v31 = os_log_create(v29, v19);
    v281[0] = v31;

    v32 = &v281[1];
    if (v30 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v30 >= 0x17)
    {
      v261 = a3;
      v33 = v19;
      v34 = v16;
      v35 = v17;
      v36 = v14;
      v37 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v30 | 7) != 0x17)
        v37 = v30 | 7;
      v38 = v37 + 1;
      v32 = (id *)operator new(v37 + 1);
      v281[2] = (id)v30;
      *(_QWORD *)&v282 = v38 | 0x8000000000000000;
      v281[1] = v32;
      v14 = v36;
      v17 = v35;
      v16 = v34;
      v19 = v33;
      a3 = v261;
    }
    else
    {
      BYTE7(v282) = v30;
      if (!v30)
      {
LABEL_44:
        *((_BYTE *)v32 + v30) = 0;
        BYTE8(v282) = 1;
        p_p = &__p;
        if (v18 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v18 >= 0x17)
        {
          v40 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v18 | 7) != 0x17)
            v40 = v18 | 7;
          v41 = v40 + 1;
          p_p = operator new(v40 + 1);
          v284 = (void *)v18;
          v285 = v41 | 0x8000000000000000;
          __p = p_p;
        }
        else
        {
          HIBYTE(v285) = v18;
          if (!v18)
            goto LABEL_52;
        }
        memmove(p_p, v19, v18);
LABEL_52:
        *((_BYTE *)p_p + v18) = 0;
        v286[0] = 1;
        v42 = objc_retainAutorelease(v281[0]);
        if (v286[0] && SHIBYTE(v285) < 0)
          operator delete(__p);
        if (BYTE8(v282) && SBYTE7(v282) < 0)
          operator delete(v281[1]);

        v43 = sub_22455F7B4(5u);
        v44 = v42;
        v45 = v44;
        if (!v16 || !*(_QWORD *)(v16 + 8))
        {
          os_log_type_enabled(v44, v43);
          LODWORD(v281[0]) = 136315138;
          *(id *)((char *)v281 + 4) = &__s;
          v52 = (void *)_os_log_send_and_compose_impl();
          if (v52)
            free(v52);
          goto LABEL_134;
        }
        v46 = _os_log_pack_size();
        v47 = (std::__shared_weak_count_vtbl *)operator new(v46, (std::align_val_t)8uLL);
        v48 = (std::__shared_weak_count *)operator new();
        v48->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
        v48->__shared_owners_ = 0;
        v48->__shared_weak_owners_ = 0;
        v48[1].__vftable = v47;
        *(_QWORD *)&v267 = v47;
        *((_QWORD *)&v267 + 1) = v47;
        v269 = 0uLL;
        rep = v48;
        v49 = strlen((const char *)&__s);
        if (v49 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        v50 = v49;
        if (v49 >= 0x17)
        {
          v53 = v16;
          v54 = v17;
          v55 = v14;
          v56 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v49 | 7) != 0x17)
            v56 = v49 | 7;
          v57 = v56 + 1;
          p_dst = (void **)operator new(v56 + 1);
          *(_QWORD *)&v280 = v50;
          *((_QWORD *)&v280 + 1) = v57 | 0x8000000000000000;
          __dst = p_dst;
          v14 = v55;
          v17 = v54;
          v16 = v53;
        }
        else
        {
          HIBYTE(v280) = v49;
          p_dst = (void **)&__dst;
          if (!v49)
          {
LABEL_70:
            *((_BYTE *)p_dst + v50) = 0;
            v277[0] = __dst;
            v277[1] = (void *)v280;
            *(void **)((char *)&v277[1] + 7) = *(void **)((char *)&v280 + 7);
            v276 = off_24EC1FA48;
            HIBYTE(v277[2]) = HIBYTE(v280);
            v58 = operator new(0x38uLL);
            v58[1] = 0;
            v58[2] = 0;
            *v58 = &off_24EC1F9F8;
            v58[3] = off_24EC1FA48;
            *((_OWORD *)v58 + 2) = *(_OWORD *)v277;
            v58[6] = v277[2];
            memset(v277, 0, sizeof(v277));
            v59 = (std::__shared_weak_count *)*((_QWORD *)&v269 + 1);
            *(_QWORD *)&v269 = v58 + 3;
            *((_QWORD *)&v269 + 1) = v58;
            if (v59)
            {
              p_shared_owners = (unint64_t *)&v59->__shared_owners_;
              do
                v61 = __ldaxr(p_shared_owners);
              while (__stlxr(v61 - 1, p_shared_owners));
              if (!v61)
              {
                ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                std::__shared_weak_count::__release_weak(v59);
              }
            }
            if (SHIBYTE(v277[2]) < 0)
              operator delete(v277[0]);
            nullsub_30(&v276);
            *(_OWORD *)v281 = v267;
            v281[2] = rep;
            if (rep)
            {
              v62 = &rep->__shared_owners_;
              do
                v63 = __ldxr((unint64_t *)v62);
              while (__stxr(v63 + 1, (unint64_t *)v62));
            }
            v282 = v269;
            if (*((_QWORD *)&v269 + 1))
            {
              v64 = (unint64_t *)(*((_QWORD *)&v269 + 1) + 8);
              do
                v65 = __ldxr(v64);
              while (__stxr(v65 + 1, v64));
              __p = (void *)v269;
              do
                v66 = __ldaxr(v64);
              while (__stlxr(v66 - 1, v64));
              if (!v66)
              {
                (*(void (**)(_QWORD))(**((_QWORD **)&v269 + 1) + 16))(*((_QWORD *)&v269 + 1));
                std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v269 + 1));
              }
            }
            else
            {
              __p = (void *)v269;
            }
            if (rep)
            {
              v69 = &rep->__shared_owners_;
              do
                v70 = __ldaxr((unint64_t *)v69);
              while (__stlxr(v70 - 1, (unint64_t *)v69));
              if (!v70)
              {
                ((void (*)(std::__shared_weak_count *))rep->__on_zero_shared)(rep);
                std::__shared_weak_count::__release_weak(rep);
              }
            }
            v71 = v281[0];
            if (*((char *)__p + 31) >= 0)
              v72 = (char *)__p + 8;
            else
              v72 = (char *)*((_QWORD *)__p + 1);
            v73 = _os_log_pack_fill();
            *(_DWORD *)v73 = 136315138;
            *(_QWORD *)(v73 + 4) = v72;
            v74 = operator new();
            v75 = *(unsigned __int8 *)(v17 + 39);
            v76 = v263;
            if ((v75 & 0x80u) != 0)
            {
              v76 = *(char **)(v17 + 16);
              v75 = *(_QWORD *)(v17 + 24);
            }
            *(_QWORD *)v74 = v71;
            *(_OWORD *)(v74 + 8) = *(_OWORD *)&v281[1];
            v281[1] = 0;
            v281[2] = 0;
            *(_OWORD *)(v74 + 24) = v282;
            v282 = 0uLL;
            *(_QWORD *)(v74 + 40) = v76;
            *(_QWORD *)(v74 + 48) = v75;
            *(_BYTE *)(v74 + 56) = v43;
            v276 = 0;
            *(_QWORD *)&v267 = v74;
            (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v16 + 8) + 40))(*(_QWORD *)(v16 + 8), &v267);
            v77 = v267;
            *(_QWORD *)&v267 = 0;
            if (v77)
            {
              v78 = *(std::__shared_weak_count **)(v77 + 32);
              if (v78)
              {
                v79 = (unint64_t *)&v78->__shared_owners_;
                do
                  v80 = __ldaxr(v79);
                while (__stlxr(v80 - 1, v79));
                if (!v80)
                {
                  ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                  std::__shared_weak_count::__release_weak(v78);
                }
              }
              v81 = *(std::__shared_weak_count **)(v77 + 16);
              if (v81)
              {
                v82 = (unint64_t *)&v81->__shared_owners_;
                do
                  v83 = __ldaxr(v82);
                while (__stlxr(v83 - 1, v82));
                if (!v83)
                {
                  ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                  std::__shared_weak_count::__release_weak(v81);
                }
              }
              MEMORY[0x227684CE8](v77, 0x10F0C40B62ED6C6);
              v84 = v276;
              v276 = 0;
              if (v84)
              {
                v85 = (std::__shared_weak_count *)v84[4];
                if (v85)
                {
                  v86 = (unint64_t *)&v85->__shared_owners_;
                  do
                    v87 = __ldaxr(v86);
                  while (__stlxr(v87 - 1, v86));
                  if (!v87)
                  {
                    ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                    std::__shared_weak_count::__release_weak(v85);
                  }
                }
                v88 = (std::__shared_weak_count *)v84[2];
                if (v88)
                {
                  v89 = (unint64_t *)&v88->__shared_owners_;
                  do
                    v90 = __ldaxr(v89);
                  while (__stlxr(v90 - 1, v89));
                  if (!v90)
                  {
                    ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                    std::__shared_weak_count::__release_weak(v88);
                  }
                }
                MEMORY[0x227684CE8](v84, 0x10F0C40B62ED6C6);
              }
            }
            v91 = (std::__shared_weak_count *)*((_QWORD *)&v282 + 1);
            if (*((_QWORD *)&v282 + 1))
            {
              v92 = (unint64_t *)(*((_QWORD *)&v282 + 1) + 8);
              do
                v93 = __ldaxr(v92);
              while (__stlxr(v93 - 1, v92));
              if (!v93)
              {
                ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                std::__shared_weak_count::__release_weak(v91);
              }
            }
            v94 = (std::__shared_weak_count *)v281[2];
            if (v281[2])
            {
              v95 = (unint64_t *)((char *)v281[2] + 8);
              do
                v96 = __ldaxr(v95);
              while (__stlxr(v96 - 1, v95));
              if (!v96)
              {
                ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                std::__shared_weak_count::__release_weak(v94);
              }
            }
LABEL_134:

            if (v14)
            {
              sub_2245664AC(a2, v281);
              sub_22322C138((uint64_t)v296, "Keyframe %s does not exist", (const char *)v281);
              sub_223182C08((uint64_t)v296);
            }
            sub_223182C08((uint64_t)v296);
            v97 = v299;
            if (v299)
            {
              v98 = (unint64_t *)&v299->__shared_owners_;
              do
                v99 = __ldaxr(v98);
              while (__stlxr(v99 - 1, v98));
              if (!v99)
              {
                ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
                std::__shared_weak_count::__release_weak(v97);
              }
            }
LABEL_141:
            *a3 = 0;
            a3[1] = 0;
            return;
          }
        }
        memcpy(p_dst, &__s, v50);
        goto LABEL_70;
      }
    }
    memmove(v32, v29, v30);
    goto LABEL_44;
  }
  while ((sub_22319835C(a2, v10 + 25) & 0x80) != 0)
  {
LABEL_10:
    v10 = *(unsigned __int8 **)v10;
    if (!v10)
      goto LABEL_7;
  }
  if ((sub_22319835C(v10 + 25, a2) & 0x80) != 0)
  {
    v10 += 8;
    goto LABEL_10;
  }
  sub_223182B14(&v275);
  if (**(int **)(v275 + 56) > 3)
    goto LABEL_273;
  v20 = *(unsigned __int8 *)(v275 + 72);
  v21 = sub_22455F97C(&v275);
  v22 = v21;
  if (!v20 && v21 == 0)
    goto LABEL_273;
  sub_223195210((uint64_t)v281);
  v24 = sub_2231813E8(&v281[2], (uint64_t)"Loading keyframe ", 17);
  sub_2245664AC(a2, v296);
  v25 = sub_2231813E8(v24, (uint64_t)v296, 36);
  sub_2231813E8(v25, (uint64_t)" from disk", 10);
  v260 = v20;
  if ((v294 & 0x10) != 0)
  {
    v67 = v293;
    if (v293 < v287)
    {
      v293 = v287;
      v67 = v287;
    }
    v68 = (void **)v286;
  }
  else
  {
    if ((v294 & 8) == 0)
    {
      v26 = 0;
      *((_BYTE *)&v274.__r_.__value_.__s + 23) = 0;
      v27 = &v274;
      goto LABEL_152;
    }
    v68 = &__p;
    v67 = v285;
  }
  v100 = *v68;
  v26 = v67 - (_QWORD)*v68;
  if (v26 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v26 >= 0x17)
  {
    v101 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17)
      v101 = v26 | 7;
    v102 = v101 + 1;
    v27 = (std::string *)operator new(v101 + 1);
    v274.__r_.__value_.__l.__size_ = v26;
    v274.__r_.__value_.__r.__words[2] = v102 | 0x8000000000000000;
    v274.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
    goto LABEL_151;
  }
  *((_BYTE *)&v274.__r_.__value_.__s + 23) = v67 - *(_BYTE *)v68;
  v27 = &v274;
  if (v26)
LABEL_151:
    memmove(v27, v100, v26);
LABEL_152:
  v27->__r_.__value_.__s.__data_[v26] = 0;
  *(_QWORD *)&v267 = &v275;
  *((std::chrono::steady_clock::time_point *)&v267 + 1) = std::chrono::steady_clock::now();
  rep = (std::__shared_weak_count *)std::chrono::system_clock::now().__d_.__rep_;
  LODWORD(v269) = 3;
  *((_QWORD *)&v269 + 1) = "unknown file";
  v270 = 589;
  v272 = 0;
  v273 = 0;
  v271 = "unknown function";
  v103 = &v274;
  if ((v274.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v103 = (std::string *)v274.__r_.__value_.__r.__words[0];
  v264 = (char *)v103;
  v104 = *(_QWORD *)v267;
  v105 = (const char *)(*(_QWORD *)v267 + 16);
  v256 = v105;
  v258 = *(_QWORD *)v267;
  if (*(char *)(*(_QWORD *)v267 + 39) < 0)
  {
    v105 = *(const char **)(v104 + 16);
    v106 = *(_QWORD *)(v104 + 24);
  }
  else
  {
    v106 = *(unsigned __int8 *)(*(_QWORD *)v267 + 39);
  }
  v107 = atomic_load((unsigned __int8 *)&qword_255788F58);
  if ((v107 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)v296);
    sub_223199C58("com.apple.cv3d", (unint64_t)v296, &xmmword_255788F40);
    if (v296[1].__r_.__value_.__s.__data_[0] && SHIBYTE(v296[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v296[0].__r_.__value_.__l.__data_);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
  if (byte_255788F57 >= 0)
    v108 = (const char *)&xmmword_255788F40;
  else
    v108 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v109 = byte_255788F57;
  else
    v109 = *((_QWORD *)&xmmword_255788F40 + 1);
  v110 = os_log_create(v108, v105);
  v296[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v110;

  p_size = &v296[0].__r_.__value_.__l.__size_;
  if (v109 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v109 >= 0x17)
  {
    v112 = (v109 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v109 | 7) != 0x17)
      v112 = v109 | 7;
    v113 = v112 + 1;
    p_size = (std::string::size_type *)operator new(v112 + 1);
    v296[0].__r_.__value_.__r.__words[2] = v109;
    v296[1].__r_.__value_.__r.__words[0] = v113 | 0x8000000000000000;
    v296[0].__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
    goto LABEL_171;
  }
  v296[1].__r_.__value_.__s.__data_[7] = v109;
  if (v109)
LABEL_171:
    memmove(p_size, v108, v109);
  *((_BYTE *)p_size + v109) = 0;
  v296[1].__r_.__value_.__s.__data_[8] = 1;
  v114 = &v296[1].__r_.__value_.__s.__data_[16];
  if (v106 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v106 >= 0x17)
  {
    v115 = (v106 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v106 | 7) != 0x17)
      v115 = v106 | 7;
    v116 = v115 + 1;
    v114 = (std::string::value_type *)operator new(v115 + 1);
    v297 = (const char *)v106;
    v298 = v116 | 0x8000000000000000;
    v296[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v114;
  }
  else
  {
    HIBYTE(v298) = v106;
    if (!v106)
      goto LABEL_180;
  }
  memmove(v114, v105, v106);
LABEL_180:
  v114[v106] = 0;
  LOBYTE(v299) = 1;
  v117 = objc_retainAutorelease(v296[0].__r_.__value_.__l.__data_);
  if ((_BYTE)v299 && SHIBYTE(v298) < 0)
    operator delete((void *)v296[1].__r_.__value_.__r.__words[2]);
  if (v296[1].__r_.__value_.__s.__data_[8] && v296[1].__r_.__value_.__s.__data_[7] < 0)
    operator delete((void *)v296[0].__r_.__value_.__l.__size_);

  v118 = sub_22455F7B4(3u);
  v119 = v117;
  v120 = v119;
  if (v22 && *(_QWORD *)(v22 + 8))
  {
    v121 = _os_log_pack_size();
    v122 = operator new(v121, (std::align_val_t)8uLL);
    v123 = (_QWORD *)operator new();
    *v123 = &off_24EC1F7F0;
    v123[1] = 0;
    v123[2] = 0;
    v123[3] = v122;
    __s.__r_.__value_.__r.__words[0] = (std::string::size_type)v122;
    __s.__r_.__value_.__l.__size_ = (std::string::size_type)v122;
    v301 = 0uLL;
    __s.__r_.__value_.__r.__words[2] = (std::string::size_type)v123;
    v124 = strlen(v264);
    if (v124 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    v125 = v124;
    if (v124 >= 0x17)
    {
      v129 = (v124 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v124 | 7) != 0x17)
        v129 = v124 | 7;
      v130 = v129 + 1;
      v126 = (void **)operator new(v129 + 1);
      *(_QWORD *)&v280 = v125;
      *((_QWORD *)&v280 + 1) = v130 | 0x8000000000000000;
      __dst = v126;
    }
    else
    {
      HIBYTE(v280) = v124;
      v126 = (void **)&__dst;
      if (!v124)
        goto LABEL_198;
    }
    memcpy(v126, v264, v125);
LABEL_198:
    *((_BYTE *)v126 + v125) = 0;
    v277[0] = __dst;
    v277[1] = (void *)v280;
    *(void **)((char *)&v277[1] + 7) = *(void **)((char *)&v280 + 7);
    v276 = off_24EC1FA48;
    HIBYTE(v277[2]) = HIBYTE(v280);
    v131 = operator new(0x38uLL);
    v131[1] = 0;
    v131[2] = 0;
    *v131 = &off_24EC1F9F8;
    v131[3] = off_24EC1FA48;
    *((_OWORD *)v131 + 2) = *(_OWORD *)v277;
    v131[6] = v277[2];
    memset(v277, 0, sizeof(v277));
    v132 = (std::__shared_weak_count *)*((_QWORD *)&v301 + 1);
    *(_QWORD *)&v301 = v131 + 3;
    *((_QWORD *)&v301 + 1) = v131;
    if (v132)
    {
      v133 = (unint64_t *)&v132->__shared_owners_;
      do
        v134 = __ldaxr(v133);
      while (__stlxr(v134 - 1, v133));
      if (!v134)
      {
        ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
        std::__shared_weak_count::__release_weak(v132);
      }
    }
    if (SHIBYTE(v277[2]) < 0)
      operator delete(v277[0]);
    nullsub_30(&v276);
    v296[0] = __s;
    v135 = v301;
    if (__s.__r_.__value_.__r.__words[2])
    {
      v136 = (unint64_t *)(__s.__r_.__value_.__r.__words[2] + 8);
      do
        v137 = __ldxr(v136);
      while (__stxr(v137 + 1, v136));
    }
    v138 = (std::__shared_weak_count *)*((_QWORD *)&v301 + 1);
    v296[1].__r_.__value_.__r.__words[0] = v135;
    v296[1].__r_.__value_.__l.__size_ = *((_QWORD *)&v301 + 1);
    if (*((_QWORD *)&v301 + 1))
    {
      v139 = (unint64_t *)(*((_QWORD *)&v301 + 1) + 8);
      do
        v140 = __ldxr(v139);
      while (__stxr(v140 + 1, v139));
      v296[1].__r_.__value_.__r.__words[2] = v135;
      do
        v141 = __ldaxr(v139);
      while (__stlxr(v141 - 1, v139));
      if (!v141)
      {
        ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
        std::__shared_weak_count::__release_weak(v138);
      }
    }
    else
    {
      v296[1].__r_.__value_.__r.__words[2] = v135;
    }
    v142 = (std::__shared_weak_count *)__s.__r_.__value_.__r.__words[2];
    if (__s.__r_.__value_.__r.__words[2])
    {
      v143 = (unint64_t *)(__s.__r_.__value_.__r.__words[2] + 8);
      do
        v144 = __ldaxr(v143);
      while (__stlxr(v144 - 1, v143));
      if (!v144)
      {
        ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
        std::__shared_weak_count::__release_weak(v142);
      }
    }
    v145 = v296[0].__r_.__value_.__r.__words[0];
    if (*(char *)(v296[1].__r_.__value_.__r.__words[2] + 31) >= 0)
      v146 = v296[1].__r_.__value_.__r.__words[2] + 8;
    else
      v146 = *(_QWORD *)(v296[1].__r_.__value_.__r.__words[2] + 8);
    v147 = _os_log_pack_fill();
    *(_DWORD *)v147 = 136315138;
    *(_QWORD *)(v147 + 4) = v146;
    v148 = operator new();
    v149 = *(unsigned __int8 *)(v258 + 39);
    v150 = v256;
    if ((v149 & 0x80u) != 0)
    {
      v150 = *(const char **)(v258 + 16);
      v149 = *(_QWORD *)(v258 + 24);
    }
    *(_QWORD *)v148 = v145;
    *(_OWORD *)(v148 + 8) = *(_OWORD *)&v296[0].__r_.__value_.__r.__words[1];
    *(_OWORD *)&v296[0].__r_.__value_.__r.__words[1] = 0uLL;
    *(_OWORD *)(v148 + 24) = *(_OWORD *)&v296[1].__r_.__value_.__l.__data_;
    *(_OWORD *)&v296[1].__r_.__value_.__l.__data_ = 0uLL;
    *(_QWORD *)(v148 + 40) = v150;
    *(_QWORD *)(v148 + 48) = v149;
    *(_BYTE *)(v148 + 56) = v118;
    v276 = 0;
    __s.__r_.__value_.__r.__words[0] = v148;
    (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v22 + 8) + 40))(*(_QWORD *)(v22 + 8), &__s);
    v151 = __s.__r_.__value_.__r.__words[0];
    __s.__r_.__value_.__r.__words[0] = 0;
    v128 = v260;
    if (v151)
    {
      v152 = *(std::__shared_weak_count **)(v151 + 32);
      if (v152)
      {
        v153 = (unint64_t *)&v152->__shared_owners_;
        do
          v154 = __ldaxr(v153);
        while (__stlxr(v154 - 1, v153));
        if (!v154)
        {
          ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
          std::__shared_weak_count::__release_weak(v152);
        }
      }
      v155 = *(std::__shared_weak_count **)(v151 + 16);
      if (v155)
      {
        v156 = (unint64_t *)&v155->__shared_owners_;
        do
          v157 = __ldaxr(v156);
        while (__stlxr(v157 - 1, v156));
        if (!v157)
        {
          ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
          std::__shared_weak_count::__release_weak(v155);
        }
      }
      MEMORY[0x227684CE8](v151, 0x10F0C40B62ED6C6);
      v158 = v276;
      v276 = 0;
      if (v158)
      {
        v159 = (std::__shared_weak_count *)v158[4];
        if (v159)
        {
          v160 = (unint64_t *)&v159->__shared_owners_;
          do
            v161 = __ldaxr(v160);
          while (__stlxr(v161 - 1, v160));
          if (!v161)
          {
            ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
            std::__shared_weak_count::__release_weak(v159);
          }
        }
        v162 = (std::__shared_weak_count *)v158[2];
        if (v162)
        {
          v163 = (unint64_t *)&v162->__shared_owners_;
          do
            v164 = __ldaxr(v163);
          while (__stlxr(v164 - 1, v163));
          if (!v164)
          {
            ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
            std::__shared_weak_count::__release_weak(v162);
          }
        }
        MEMORY[0x227684CE8](v158, 0x10F0C40B62ED6C6);
      }
    }
    size = (std::__shared_weak_count *)v296[1].__r_.__value_.__l.__size_;
    if (v296[1].__r_.__value_.__l.__size_)
    {
      v166 = (unint64_t *)(v296[1].__r_.__value_.__l.__size_ + 8);
      do
        v167 = __ldaxr(v166);
      while (__stlxr(v167 - 1, v166));
      if (!v167)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v168 = (std::__shared_weak_count *)v296[0].__r_.__value_.__r.__words[2];
    if (v296[0].__r_.__value_.__r.__words[2])
    {
      v169 = (unint64_t *)(v296[0].__r_.__value_.__r.__words[2] + 8);
      do
        v170 = __ldaxr(v169);
      while (__stlxr(v170 - 1, v169));
      if (!v170)
      {
        ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
        std::__shared_weak_count::__release_weak(v168);
      }
    }
  }
  else
  {
    os_log_type_enabled(v119, v118);
    LODWORD(v296[0].__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v296[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v264;
    v127 = (void *)_os_log_send_and_compose_impl();
    v128 = v260;
    if (v127)
      free(v127);
  }

  if (v128)
  {
    v171 = &v274;
    if ((v274.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v171 = (std::string *)v274.__r_.__value_.__r.__words[0];
    sub_22322C138((uint64_t)&v267, "%s", (const char *)v171);
    sub_223182C08((uint64_t)&v267);
  }
  sub_223182C08((uint64_t)&v267);
  v172 = v273;
  if (v273)
  {
    v173 = (unint64_t *)&v273->__shared_owners_;
    do
      v174 = __ldaxr(v173);
    while (__stlxr(v174 - 1, v173));
    if (!v174)
    {
      ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
      std::__shared_weak_count::__release_weak(v172);
    }
  }
  if (SHIBYTE(v274.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v274.__r_.__value_.__l.__data_);
  v281[0] = *(id *)MEMORY[0x24BEDB7F0];
  v175 = *(void **)(MEMORY[0x24BEDB7F0] + 72);
  *(id *)((char *)v281 + *((_QWORD *)v281[0] - 3)) = *(id *)(MEMORY[0x24BEDB7F0] + 64);
  v281[2] = v175;
  *(_QWORD *)&v282 = MEMORY[0x24BEDB848] + 16;
  if (v292 < 0)
    operator delete(v289);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x227684BE0](&v295);
LABEL_273:
  sub_2231953D0(a1, a2, (uint64_t)v281);
  if (!(_BYTE)v294)
  {
    v182 = atomic_load((unsigned __int8 *)&qword_2557892F0);
    if ((v182 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
    {
      __cxa_atexit((void (*)(void *))sub_2231A8A28, &stru_255789280, &dword_22314D000);
      __cxa_guard_release(&qword_2557892F0);
    }
    sub_223195728((uint64_t)&stru_255789280, "cv3d.recon.kf_pers", 0x12uLL, "Error loading keyframe: %s with error: %s", 0x29uLL);
    sub_223192614(&v275);
    if (**(int **)(v275 + 56) > 5
      || (v183 = *(unsigned __int8 *)(v275 + 72), v184 = sub_22455F97C(&v275), v185 = v184, !v183) && !v184)
    {
LABEL_395:
      *a3 = 0;
      a3[1] = 0;
      if ((_BYTE)v294)
        goto LABEL_278;
      goto LABEL_396;
    }
    *(_QWORD *)&v267 = &v275;
    *((std::chrono::steady_clock::time_point *)&v267 + 1) = std::chrono::steady_clock::now();
    rep = (std::__shared_weak_count *)std::chrono::system_clock::now().__d_.__rep_;
    LODWORD(v269) = 5;
    *((_QWORD *)&v269 + 1) = "unknown file";
    v270 = 595;
    v272 = 0;
    v273 = 0;
    v271 = "unknown function";
    sub_2245664AC(a2, &__dst);
    if ((_BYTE)v294)
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = &off_24EC1FCC0;
      __cxa_throw(exception, (struct type_info *)&unk_24EC1FC98, (void (*)(void *))std::exception::~exception);
    }
    sub_22456A158((uint64_t)v281, &v274);
    if ((v274.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v186 = &v274;
    else
      v186 = (std::string *)v274.__r_.__value_.__r.__words[0];
    v187 = *(_QWORD *)v267;
    v188 = *(_QWORD *)v267 + 16;
    v189 = *(char *)(*(_QWORD *)v267 + 39);
    v265 = *(char **)v267;
    v266 = v186;
    if (v189 < 0)
    {
      v191 = *(const char **)(v187 + 16);
      v190 = *(_QWORD *)(v187 + 24);
    }
    else
    {
      v190 = v189;
      v191 = (const char *)v188;
    }
    v262 = v188;
    v192 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v192 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)v296);
      sub_223199C58("com.apple.cv3d", (unint64_t)v296, &xmmword_255788F40);
      if (v296[1].__r_.__value_.__s.__data_[0] && SHIBYTE(v296[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v296[0].__r_.__value_.__l.__data_);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
    if (byte_255788F57 >= 0)
      v193 = (const char *)&xmmword_255788F40;
    else
      v193 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v194 = byte_255788F57;
    else
      v194 = *((_QWORD *)&xmmword_255788F40 + 1);
    v195 = os_log_create(v193, v191);
    v296[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v195;

    v196 = &v296[0].__r_.__value_.__l.__size_;
    if (v194 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v194 >= 0x17)
    {
      v197 = v191;
      v198 = v185;
      v199 = v183;
      v200 = (v194 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v194 | 7) != 0x17)
        v200 = v194 | 7;
      v201 = v200 + 1;
      v196 = (std::string::size_type *)operator new(v200 + 1);
      v296[0].__r_.__value_.__r.__words[2] = v194;
      v296[1].__r_.__value_.__r.__words[0] = v201 | 0x8000000000000000;
      v296[0].__r_.__value_.__l.__size_ = (std::string::size_type)v196;
      v183 = v199;
      v185 = v198;
      v191 = v197;
    }
    else
    {
      v296[1].__r_.__value_.__s.__data_[7] = v194;
      if (!v194)
      {
LABEL_309:
        *((_BYTE *)v196 + v194) = 0;
        v296[1].__r_.__value_.__s.__data_[8] = 1;
        v202 = &v296[1].__r_.__value_.__s.__data_[16];
        if (v190 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v190 >= 0x17)
        {
          v203 = (v190 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v190 | 7) != 0x17)
            v203 = v190 | 7;
          v204 = v203 + 1;
          v202 = (std::string::value_type *)operator new(v203 + 1);
          v297 = (const char *)v190;
          v298 = v204 | 0x8000000000000000;
          v296[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v202;
        }
        else
        {
          HIBYTE(v298) = v190;
          if (!v190)
          {
LABEL_317:
            v202[v190] = 0;
            LOBYTE(v299) = 1;
            v205 = objc_retainAutorelease(v296[0].__r_.__value_.__l.__data_);
            if ((_BYTE)v299 && SHIBYTE(v298) < 0)
              operator delete((void *)v296[1].__r_.__value_.__r.__words[2]);
            if (v296[1].__r_.__value_.__s.__data_[8] && v296[1].__r_.__value_.__s.__data_[7] < 0)
              operator delete((void *)v296[0].__r_.__value_.__l.__size_);

            v206 = sub_22455F7B4(5u);
            v207 = v205;
            v208 = v207;
            if (v185 && *(_QWORD *)(v185 + 8))
            {
              v259 = v207;
              v209 = _os_log_pack_size();
              v210 = (uint64_t (**)())operator new(v209, (std::align_val_t)8uLL);
              v257 = v183;
              v211 = (unint64_t *)operator new();
              v211[1] = 0;
              v212 = v211 + 1;
              *v211 = (unint64_t)&off_24EC1F7F0;
              v211[2] = 0;
              v211[3] = (unint64_t)v210;
              v276 = v210;
              v277[0] = v210;
              v277[2] = 0;
              v278 = 0;
              v277[1] = v211;
              sub_2231A85B4((uint64_t)v296, (char *)&__dst, (const char **)&v266);
              v213 = (std::__shared_weak_count *)operator new(0x50uLL);
              v213->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC20730;
              v213[1].__vftable = (std::__shared_weak_count_vtbl *)off_24EC20780;
              v214 = (std::__shared_weak_count_vtbl *)v297;
              v213[2].__vftable = (std::__shared_weak_count_vtbl *)v296[1].__r_.__value_.__l.__data_;
              v213->__shared_owners_ = 0;
              v215 = (unint64_t *)&v213->__shared_owners_;
              v213->__shared_weak_owners_ = 0;
              *(_OWORD *)&v213[1].__shared_owners_ = *(_OWORD *)&v296[0].__r_.__value_.__r.__words[1];
              *(_OWORD *)&v296[0].__r_.__value_.__r.__words[1] = 0uLL;
              *(_OWORD *)&v213[2].__shared_owners_ = *(_OWORD *)&v296[1].__r_.__value_.__r.__words[1];
              v213[3].__vftable = v214;
              memset(&v296[1], 0, sizeof(std::string));
              v297 = 0;
              v277[2] = &v213[1];
              v278 = v213;
              nullsub_30(v296);
              __s.__r_.__value_.__r.__words[0] = (std::string::size_type)v210;
              __s.__r_.__value_.__l.__size_ = (std::string::size_type)v210;
              __s.__r_.__value_.__r.__words[2] = (std::string::size_type)v211;
              do
                v216 = __ldxr(v212);
              while (__stxr(v216 + 1, v212));
              *(_QWORD *)&v301 = v213 + 1;
              *((_QWORD *)&v301 + 1) = v213;
              do
                v217 = __ldxr(v215);
              while (__stxr(v217 + 1, v215));
              v302 = v213 + 1;
              do
                v218 = __ldaxr(v215);
              while (__stlxr(v218 - 1, v215));
              if (!v218)
              {
                ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
                std::__shared_weak_count::__release_weak(v213);
              }
              v219 = (std::__shared_weak_count *)v277[1];
              if (v277[1])
              {
                v220 = (unint64_t *)((char *)v277[1] + 8);
                do
                  v221 = __ldaxr(v220);
                while (__stlxr(v221 - 1, v220));
                if (!v221)
                {
                  ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
                  std::__shared_weak_count::__release_weak(v219);
                }
              }
              v222 = __s.__r_.__value_.__r.__words[0];
              if (SHIBYTE(v302[1].__vftable) >= 0)
                shared_owners = (uint64_t)&v302->__shared_owners_;
              else
                shared_owners = v302->__shared_owners_;
              if (SHIBYTE(v302[2].__vftable) >= 0)
                v224 = (char *)&v302[1].__shared_owners_;
              else
                v224 = (char *)v302[1].__shared_owners_;
              v225 = _os_log_pack_fill();
              *(_DWORD *)v225 = 136315394;
              *(_QWORD *)(v225 + 4) = shared_owners;
              *(_WORD *)(v225 + 12) = 2080;
              *(_QWORD *)(v225 + 14) = v224;
              v226 = operator new();
              v227 = v265[39];
              v228 = v262;
              if ((v227 & 0x80u) != 0)
              {
                v228 = *((_QWORD *)v265 + 2);
                v227 = *((_QWORD *)v265 + 3);
              }
              *(_QWORD *)v226 = v222;
              *(_OWORD *)(v226 + 8) = *(_OWORD *)&__s.__r_.__value_.__r.__words[1];
              *(_OWORD *)&__s.__r_.__value_.__r.__words[1] = 0uLL;
              *(_OWORD *)(v226 + 24) = v301;
              v301 = 0uLL;
              *(_QWORD *)(v226 + 40) = v228;
              *(_QWORD *)(v226 + 48) = v227;
              *(_BYTE *)(v226 + 56) = v206;
              v276 = 0;
              v296[0].__r_.__value_.__r.__words[0] = v226;
              (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v185 + 8) + 40))(*(_QWORD *)(v185 + 8), v296);
              v229 = v296[0].__r_.__value_.__r.__words[0];
              v296[0].__r_.__value_.__r.__words[0] = 0;
              v183 = v257;
              v208 = v259;
              if (v229)
              {
                v230 = *(std::__shared_weak_count **)(v229 + 32);
                if (v230)
                {
                  v231 = (unint64_t *)&v230->__shared_owners_;
                  do
                    v232 = __ldaxr(v231);
                  while (__stlxr(v232 - 1, v231));
                  if (!v232)
                  {
                    ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
                    std::__shared_weak_count::__release_weak(v230);
                  }
                }
                v233 = *(std::__shared_weak_count **)(v229 + 16);
                if (v233)
                {
                  v234 = (unint64_t *)&v233->__shared_owners_;
                  do
                    v235 = __ldaxr(v234);
                  while (__stlxr(v235 - 1, v234));
                  if (!v235)
                  {
                    ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
                    std::__shared_weak_count::__release_weak(v233);
                  }
                }
                MEMORY[0x227684CE8](v229, 0x10F0C40B62ED6C6);
                v236 = v276;
                v276 = 0;
                if (v236)
                {
                  v237 = (std::__shared_weak_count *)v236[4];
                  if (v237)
                  {
                    v238 = (unint64_t *)&v237->__shared_owners_;
                    do
                      v239 = __ldaxr(v238);
                    while (__stlxr(v239 - 1, v238));
                    if (!v239)
                    {
                      ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
                      std::__shared_weak_count::__release_weak(v237);
                    }
                  }
                  v240 = (std::__shared_weak_count *)v236[2];
                  if (v240)
                  {
                    v241 = (unint64_t *)&v240->__shared_owners_;
                    do
                      v242 = __ldaxr(v241);
                    while (__stlxr(v242 - 1, v241));
                    if (!v242)
                    {
                      ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
                      std::__shared_weak_count::__release_weak(v240);
                    }
                  }
                  MEMORY[0x227684CE8](v236, 0x10F0C40B62ED6C6);
                }
              }
              v243 = (std::__shared_weak_count *)*((_QWORD *)&v301 + 1);
              if (*((_QWORD *)&v301 + 1))
              {
                v244 = (unint64_t *)(*((_QWORD *)&v301 + 1) + 8);
                do
                  v245 = __ldaxr(v244);
                while (__stlxr(v245 - 1, v244));
                if (!v245)
                {
                  ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
                  std::__shared_weak_count::__release_weak(v243);
                }
              }
              v246 = (std::__shared_weak_count *)__s.__r_.__value_.__r.__words[2];
              if (__s.__r_.__value_.__r.__words[2])
              {
                v247 = (unint64_t *)(__s.__r_.__value_.__r.__words[2] + 8);
                do
                  v248 = __ldaxr(v247);
                while (__stlxr(v248 - 1, v247));
                if (!v248)
                {
                  ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
                  std::__shared_weak_count::__release_weak(v246);
                }
              }
            }
            else
            {
              os_log_type_enabled(v207, v206);
              LODWORD(v296[0].__r_.__value_.__l.__data_) = 136315394;
              *(std::string::size_type *)((char *)v296[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)&__dst;
              WORD2(v296[0].__r_.__value_.__r.__words[1]) = 2080;
              *(std::string::size_type *)((char *)&v296[0].__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v266;
              v249 = (void *)_os_log_send_and_compose_impl();
              if (v249)
                free(v249);
            }

            if (SHIBYTE(v274.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v274.__r_.__value_.__l.__data_);
            if (v183)
            {
              sub_2245664AC(a2, v296);
              v250 = sub_22319593C((uint64_t)v281);
              sub_22456A158(v250, &__s);
              if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                p_s = &__s;
              else
                p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
              sub_22322C138((uint64_t)&v267, "Error loading keyframe: %s with error: %s", (const char *)v296, (const char *)p_s);
              if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__s.__r_.__value_.__l.__data_);
              sub_223182C08((uint64_t)&v267);
            }
            sub_223182C08((uint64_t)&v267);
            v252 = v273;
            if (v273)
            {
              v253 = (unint64_t *)&v273->__shared_owners_;
              do
                v254 = __ldaxr(v253);
              while (__stlxr(v254 - 1, v253));
              if (!v254)
              {
                ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
                std::__shared_weak_count::__release_weak(v252);
              }
            }
            goto LABEL_395;
          }
        }
        memmove(v202, v191, v190);
        goto LABEL_317;
      }
    }
    memmove(v196, v193, v194);
    goto LABEL_309;
  }
  v176 = (char *)v281[1];
  *a3 = v281[0];
  a3[1] = v176;
  if (v176)
  {
    v177 = (unint64_t *)(v176 + 8);
    do
      v178 = __ldxr(v177);
    while (__stxr(v178 + 1, v177));
  }
  if ((_BYTE)v294)
  {
LABEL_278:
    v179 = (std::__shared_weak_count *)v281[1];
    if (v281[1])
    {
      v180 = (unint64_t *)((char *)v281[1] + 8);
      do
        v181 = __ldaxr(v180);
      while (__stlxr(v181 - 1, v180));
      if (!v181)
      {
        ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
        std::__shared_weak_count::__release_weak(v179);
      }
    }
    return;
  }
LABEL_396:
  if ((_BYTE)v293)
  {
    if (v291)
    {
      if (v290 < 0)
        operator delete(v288);
      if ((v286[7] & 0x80000000) != 0)
        operator delete(v284);
    }
    if ((_BYTE)__p && SHIBYTE(v282) < 0)
      operator delete(v281[2]);
  }
}

void sub_223194E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,char a52)
{
  uint64_t v52;

  if (*(_BYTE *)(v52 - 216) && *(char *)(v52 - 217) < 0)
    operator delete(*(void **)(v52 - 240));
  __cxa_guard_abort(&qword_255788F58);
  if (a34 < 0)
    operator delete(__p);
  sub_223182DAC((uint64_t)&a19);
  sub_2231A8D08((uint64_t)&a46);
  _Unwind_Resume(a1);
}

void sub_22319503C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  sub_2231A8D08((uint64_t)&a43);
  _Unwind_Resume(a1);
}

void sub_223195058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  sub_223195348((uint64_t)&a43);
  _Unwind_Resume(a1);
}

void sub_22319506C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  void *v43;
  uint64_t v44;

  sub_22319A054(&a19);
  sub_22319A054(&a33);
  sub_223199DE8((uint64_t)&a43);

  sub_223182DAC(v44 - 240);
  _Unwind_Resume(a1);
}

void sub_22319509C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_22319CC30((uint64_t)&a33);
  sub_223199DE8((uint64_t)&a19);
  JUMPOUT(0x223195170);
}

void sub_2231950B0()
{
  void *v0;
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10D0C40B950D02ALL);

  JUMPOUT(0x2231951F0);
}

void sub_2231950D4()
{
  void *v0;

  JUMPOUT(0x2231951F0);
}

void sub_2231950E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  sub_223182DAC(&a19);
  if (a34 < 0)
  {
    operator delete(a29);
    sub_223195348(&a46);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x2231951B4);
}

void sub_2231950E8()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 - 208) && *(char *)(v0 - 209) < 0)
    operator delete(*(void **)(v0 - 232));

  JUMPOUT(0x223195114);
}

void sub_22319513C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  sub_2231A8D08((uint64_t)&a43);
  _Unwind_Resume(a1);
}

void sub_223195150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  sub_2231A8D08((uint64_t)&a43);
  _Unwind_Resume(a1);
}

void sub_223195188(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_22319519C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223182DAC(v1 - 240);
  _Unwind_Resume(a1);
}

void sub_2231951C4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,char a50)
{
  if (a50 && a49 < 0)
    operator delete(__p);

  JUMPOUT(0x2231951F0);
}

uint64_t sub_223195210(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x24BEDB858];
  v3 = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_223195314(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x227684BE0](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223195348(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x24BEDB7F0];
  v3 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x227684BE0](a1 + 128);
  return a1;
}

void sub_2231953D0(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  BOOL v8;
  int v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  void *v23;
  char v24;
  char v25;
  void *v26[2];
  uint64_t v27;
  uint64_t v28;
  void *__p[2];
  uint64_t v30;
  char v31;
  char v32;
  __int128 v33;
  __int128 v34;
  char v35;
  char v36;
  void *v37;
  char v38;
  void *v39;
  char v40;
  char v41;
  char v42;
  char v43;

  sub_22319694C(*(_QWORD *)(a1 + 368), a2, (uint64_t)&v33);
  if (v43)
  {
    v5 = v33;
    v21 = v33;
    if (*((_QWORD *)&v33 + 1))
    {
      v6 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    if ((*(_BYTE *)(a1 + 444) & 4) != 0 && !*(_BYTE *)(a1 + 64))
    {
      sub_2231CD8A8(v5, (uint64_t)&v22);
      if (LODWORD(v26[1]))
        v8 = HIDWORD(v26[1]) == 0;
      else
        v8 = 1;
      v9 = v8;
      v10 = (std::__shared_weak_count *)v23;
      if (v23)
      {
        v11 = (unint64_t *)((char *)v23 + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      nullsub_30(&v22);
      if (v9)
        sub_2231D62A8((_QWORD *)v21);
    }
    sub_223195A2C(a1, (uint64_t *)&v21, 0, (uint64_t)&v22);
    *(_OWORD *)a3 = v22;
    *(_BYTE *)(a3 + 120) = 1;
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
    if (*((_QWORD *)&v21 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    goto LABEL_40;
  }
  v22 = v33;
  v16 = sub_22319FFBC(&v23, &v34);
  *(_OWORD *)a3 = v22;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (!v32)
  {
    *(_BYTE *)(a3 + 120) = 0;
    goto LABEL_40;
  }
  *(_BYTE *)(a3 + 40) = 0;
  if (v25)
  {
    *(_OWORD *)(a3 + 16) = *(_OWORD *)v16;
    *(_QWORD *)(a3 + 32) = *((_QWORD *)v16 + 2);
    *((_QWORD *)v16 + 1) = 0;
    *((_QWORD *)v16 + 2) = 0;
    *(_QWORD *)v16 = 0;
    *(_BYTE *)(a3 + 40) = 1;
  }
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 104) = 0;
  if (!v31)
  {
    *(_BYTE *)(a3 + 112) = 1;
    *(_BYTE *)(a3 + 120) = 0;
    if (!v25)
      goto LABEL_40;
    goto LABEL_38;
  }
  v17 = v28;
  *(_QWORD *)(a3 + 64) = v27;
  *(_OWORD *)(a3 + 48) = *(_OWORD *)v26;
  v26[0] = 0;
  v26[1] = 0;
  *(_QWORD *)(a3 + 72) = v17;
  *(_OWORD *)(a3 + 80) = *(_OWORD *)__p;
  *(_QWORD *)(a3 + 96) = v30;
  __p[1] = 0;
  v30 = 0;
  v27 = 0;
  __p[0] = 0;
  *(_BYTE *)(a3 + 104) = 1;
  *(_BYTE *)(a3 + 112) = 1;
  *(_BYTE *)(a3 + 120) = 0;
  if (SHIBYTE(v30) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v27) & 0x80000000) == 0)
    {
LABEL_31:
      if (!v25)
        goto LABEL_40;
      goto LABEL_38;
    }
  }
  else if ((SHIBYTE(v27) & 0x80000000) == 0)
  {
    goto LABEL_31;
  }
  operator delete(v26[0]);
  if (!v25)
    goto LABEL_40;
LABEL_38:
  if (v24 < 0)
    operator delete(v23);
LABEL_40:
  if (v43)
  {
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
    if (*((_QWORD *)&v33 + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  else if (v42)
  {
    if (v41)
    {
      if (v40 < 0)
        operator delete(v39);
      if (v38 < 0)
        operator delete(v37);
    }
    if (v36 && v35 < 0)
      operator delete((void *)v34);
  }
}

void sub_2231956F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_223167354((uint64_t)&a9);
  sub_2231A8D08((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_223195728(uint64_t a1, const void *a2, size_t a3, void *a4, size_t a5)
{
  _QWORD *v8;
  _BYTE *v9;
  char *v10;
  size_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  size_t v18;
  void *__src;
  size_t __len;
  _QWORD v21[2];

  v21[0] = a2;
  v21[1] = a3;
  __src = a4;
  __len = a5;
  std::mutex::lock((std::mutex *)a1);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 3) <= 9)
  {
    v8 = *(_QWORD **)(a1 + 96);
    if ((unint64_t)v8 >= *(_QWORD *)(a1 + 104))
    {
      *(_QWORD *)(a1 + 96) = sub_2231A8AE0((void **)(a1 + 88), (uint64_t)v21);
      v10 = *(char **)(a1 + 72);
      if ((unint64_t)v10 >= *(_QWORD *)(a1 + 80))
      {
LABEL_17:
        v16 = sub_2231A8AE0((void **)(a1 + 64), (uint64_t)&__src);
LABEL_23:
        *(_QWORD *)(a1 + 72) = v16;
        goto LABEL_24;
      }
LABEL_8:
      v11 = __len;
      if (__len > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      v12 = __src;
      if (__len >= 0x17)
      {
        v17 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((__len | 7) != 0x17)
          v17 = __len | 7;
        v18 = v17 + 1;
        v13 = operator new(v17 + 1);
        *((_QWORD *)v10 + 1) = __len;
        *((_QWORD *)v10 + 2) = v18 | 0x8000000000000000;
        *(_QWORD *)v10 = v13;
      }
      else
      {
        v10[23] = __len;
        v13 = v10;
        if (!v11)
          goto LABEL_22;
      }
      memmove(v13, v12, v11);
LABEL_22:
      *((_BYTE *)v13 + v11) = 0;
      v16 = v10 + 24;
      *(_QWORD *)(a1 + 72) = v10 + 24;
      goto LABEL_23;
    }
    if (a3 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (a3 >= 0x17)
    {
      v14 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a3 | 7) != 0x17)
        v14 = a3 | 7;
      v15 = v14 + 1;
      v9 = operator new(v14 + 1);
      v8[1] = a3;
      v8[2] = v15 | 0x8000000000000000;
      *v8 = v9;
    }
    else
    {
      *((_BYTE *)v8 + 23) = a3;
      v9 = v8;
      if (!a3)
      {
LABEL_16:
        v9[a3] = 0;
        *(_QWORD *)(a1 + 96) = v8 + 3;
        *(_QWORD *)(a1 + 96) = v8 + 3;
        v10 = *(char **)(a1 + 72);
        if ((unint64_t)v10 >= *(_QWORD *)(a1 + 80))
          goto LABEL_17;
        goto LABEL_8;
      }
    }
    memmove(v9, a2, a3);
    goto LABEL_16;
  }
LABEL_24:
  std::mutex::unlock((std::mutex *)a1);
}

void sub_2231958F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 72) = v2;
  std::mutex::unlock((std::mutex *)v1);
  _Unwind_Resume(a1);
}

void sub_223195910(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 96) = v2;
  std::mutex::unlock((std::mutex *)v1);
  _Unwind_Resume(a1);
}

void sub_223195928(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_22319593C(uint64_t result)
{
  _QWORD *exception;

  if (*(_BYTE *)(result + 120))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24EC1FCC0;
    __cxa_throw(exception, (struct type_info *)&unk_24EC1FC98, (void (*)(void *))std::exception::~exception);
  }
  return result;
}

_QWORD *sub_22319597C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = sub_2231A88F8((_QWORD *)(a1 + 320), a2);
  if (result)
  {
    v5 = result[5];
    *a3 = result[4];
    a3[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

void sub_2231959D4(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X8>)
{
  sub_223195A2C(a1, a2, 1u, (uint64_t)a4);
  sub_2231929A8(a1 + 320, a4, a3);
}

void sub_223195A18(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223195A2C@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  _BOOL4 v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;
  unint64_t v17;
  size_t v18;
  const char *v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  __int128 *v22;
  size_t v23;
  _BYTE *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  os_log_type_t v33;
  size_t v34;
  std::__shared_weak_count_vtbl *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  unint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  uint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  unint64_t v64;
  NSObject *v65;
  void *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *oslog;
  int v75;
  unint64_t v76;
  id v77;
  _BYTE __p[40];
  __int128 v79;
  __int128 v80;
  int v81;
  uint64_t v82;
  _QWORD v83[3];
  int v84;
  const char *v85;
  int v86;
  const char *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  uint64_t v90;
  uint64_t (**v91)();
  uint64_t (**v92)(_QWORD);
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  int v97;
  uint64_t v98;
  _BOOL8 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105[3];

  v6 = result;
  if (*(_BYTE *)(result + 432))
  {
    result = sub_2231D0224(*a2);
    if (*(_DWORD *)(v6 + 424) != *(_DWORD *)(result + 88))
    {
      v8 = 1;
      goto LABEL_12;
    }
    v8 = *(_DWORD *)(v6 + 428) != *(_DWORD *)(result + 92);
    if (*(_DWORD *)(v6 + 428) != *(_DWORD *)(result + 92))
    {
LABEL_12:
      v99 = v8;
      v100 = a3;
      v101 = 0;
      v102 = 0;
      v103 = 728307988;
      kdebug_trace();
      v12 = sub_2231D0224(*a2);
      v13 = *(_OWORD *)(v12 + 32);
      v93 = *(_OWORD *)(v12 + 16);
      v94 = v13;
      v14 = *(_OWORD *)(v12 + 48);
      v15 = *(_OWORD *)(v12 + 64);
      v97 = *(_DWORD *)(v12 + 80);
      v95 = v14;
      v96 = v15;
      v98 = *(_QWORD *)(v12 + 88);
      v91 = &off_24EC207B8;
      v92 = &off_24EC20868;
      if (!v8)
        goto LABEL_102;
      sub_223182B14(&v90);
      if (**(int **)(v90 + 56) > 2 || (v16 = *(unsigned __int8 *)(v90 + 72), v17 = sub_22455F97C(&v90), !v16) && !v17)
      {
LABEL_101:
        v70 = sub_2231D0224(*a2);
        sub_2238C81DC(v70, *(uint32x2_t *)(v6 + 424), (uint64_t)&v77, *(float *)(v6 + 440));
        v93 = *(_OWORD *)&__p[8];
        v94 = *(_OWORD *)&__p[24];
        v95 = v79;
        v96 = v80;
        v97 = v81;
        v98 = v82;
        v77 = &off_24EC20828;
        nullsub_30(__p);
        nullsub_30(&v77);
LABEL_102:
        *(_QWORD *)__p = 0;
        *(_QWORD *)&__p[8] = 0;
        sub_2238BC864(*(float32x2_t **)(v6 + 376), (float32x2_t *)*a2, (uint64_t)&v91, v8, *(unsigned int *)(v6 + 444), (uint64_t **)a4);
        if (*(_BYTE *)(v6 + 432))
        {
          v71 = sub_2231D0224(*(_QWORD *)a4);
          if ((*(_DWORD *)(v71 + 88) != *(_DWORD *)(v6 + 424) || *(_DWORD *)(v71 + 92) != *(_DWORD *)(v6 + 428))
            && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeMemory.mm", 698, (uint64_t)"(!surface_conversion_params_.target_dimension || (scaled_kf->Camera().ImageSize() == *surface_conversion_params_.target_dimension))", 131, (uint64_t)"Keyframe was not scaled to match expected size", 46, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
        }
        v91 = &off_24EC20828;
        nullsub_30(&v92);
        nullsub_30(&v91);
        return kdebug_trace();
      }
      v76 = v17;
      v83[0] = &v90;
      v83[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v83[2] = std::chrono::system_clock::now().__d_.__rep_;
      v84 = 2;
      v85 = "unknown file";
      v86 = 682;
      v88 = 0;
      v89 = 0;
      v87 = "unknown function";
      v73 = v90;
      if (*(char *)(v90 + 39) < 0)
      {
        v19 = *(const char **)(v90 + 16);
        v18 = *(_QWORD *)(v90 + 24);
        v72 = v90 + 16;
        v75 = v16;
        v21 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v21 & 1) != 0)
          goto LABEL_20;
      }
      else
      {
        v18 = *(unsigned __int8 *)(v90 + 39);
        v19 = (const char *)(v90 + 16);
        v72 = v90 + 16;
        v75 = v16;
        v20 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v20 & 1) != 0)
          goto LABEL_20;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)&v77);
        sub_223199C58("com.apple.cv3d", (unint64_t)&v77, &xmmword_255788F40);
        if (__p[16] && (__p[15] & 0x80000000) != 0)
          operator delete(v77);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_20:
      if (byte_255788F57 >= 0)
        v22 = &xmmword_255788F40;
      else
        v22 = (__int128 *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v23 = byte_255788F57;
      else
        v23 = *((_QWORD *)&xmmword_255788F40 + 1);
      v77 = os_log_create((const char *)v22, v19);
      v24 = __p;
      if (v23 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v23 >= 0x17)
      {
        v25 = v19;
        v26 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v23 | 7) != 0x17)
          v26 = v23 | 7;
        v27 = v26 + 1;
        v24 = operator new(v26 + 1);
        *(_QWORD *)&__p[8] = v23;
        *(_QWORD *)&__p[16] = v27 | 0x8000000000000000;
        *(_QWORD *)__p = v24;
        v19 = v25;
      }
      else
      {
        __p[23] = v23;
        if (!v23)
        {
LABEL_34:
          v24[v23] = 0;
          __p[24] = 1;
          v28 = &__p[32];
          if (v18 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v18 >= 0x17)
          {
            v29 = v19;
            v30 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v18 | 7) != 0x17)
              v30 = v18 | 7;
            v31 = v30 + 1;
            v28 = operator new(v30 + 1);
            *(_QWORD *)&v79 = v18;
            *((_QWORD *)&v79 + 1) = v31 | 0x8000000000000000;
            *(_QWORD *)&__p[32] = v28;
            v19 = v29;
          }
          else
          {
            HIBYTE(v79) = v18;
            if (!v18)
            {
LABEL_42:
              v28[v18] = 0;
              LOBYTE(v80) = 1;
              v32 = objc_retainAutorelease(v77);
              if ((_BYTE)v80 && SHIBYTE(v79) < 0)
                operator delete(*(void **)&__p[32]);
              if (__p[24] && (__p[23] & 0x80000000) != 0)
                operator delete(*(void **)__p);

              v33 = sub_22455F7B4(2u);
              oslog = v32;
              if (v76 && *(_QWORD *)(v76 + 8))
              {
                v34 = _os_log_pack_size();
                v35 = (std::__shared_weak_count_vtbl *)operator new(v34, (std::align_val_t)8uLL);
                v36 = (std::__shared_weak_count *)operator new();
                v37 = v36;
                v36->__shared_owners_ = 0;
                p_shared_owners = (unint64_t *)&v36->__shared_owners_;
                v36->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v36->__shared_weak_owners_ = 0;
                v36[1].__vftable = v35;
                v77 = v35;
                *(_QWORD *)__p = v35;
                *(_QWORD *)&__p[8] = v36;
                do
                  v39 = __ldxr(p_shared_owners);
                while (__stxr(v39 + 1, p_shared_owners));
                memset(&__p[16], 0, 24);
                do
                  v40 = __ldaxr(p_shared_owners);
                while (__stlxr(v40 - 1, p_shared_owners));
                if (!v40)
                {
                  ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
                  std::__shared_weak_count::__release_weak(v37);
                }
                v41 = v77;
                *(_WORD *)_os_log_pack_fill() = 0;
                v42 = operator new();
                v43 = *(unsigned __int8 *)(v73 + 39);
                v44 = v72;
                if ((v43 & 0x80u) != 0)
                {
                  v44 = *(_QWORD *)(v73 + 16);
                  v43 = *(_QWORD *)(v73 + 24);
                }
                *(_QWORD *)v42 = v41;
                *(_OWORD *)(v42 + 8) = *(_OWORD *)__p;
                *(_QWORD *)__p = 0;
                *(_QWORD *)&__p[8] = 0;
                *(_OWORD *)(v42 + 24) = *(_OWORD *)&__p[16];
                *(_OWORD *)&__p[16] = 0uLL;
                *(_QWORD *)(v42 + 40) = v44;
                *(_QWORD *)(v42 + 48) = v43;
                *(_BYTE *)(v42 + 56) = v33;
                v104 = 0;
                v105[0] = v42;
                (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v76 + 8) + 40))(*(_QWORD *)(v76 + 8), v105);
                v45 = v105[0];
                v105[0] = 0;
                if (v45)
                {
                  v46 = *(std::__shared_weak_count **)(v45 + 32);
                  if (v46)
                  {
                    v47 = &v46->__shared_owners_;
                    do
                      v48 = __ldaxr((unint64_t *)v47);
                    while (__stlxr(v48 - 1, (unint64_t *)v47));
                    if (!v48)
                    {
                      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                      std::__shared_weak_count::__release_weak(v46);
                    }
                  }
                  v49 = *(std::__shared_weak_count **)(v45 + 16);
                  if (v49)
                  {
                    v50 = &v49->__shared_owners_;
                    do
                      v51 = __ldaxr((unint64_t *)v50);
                    while (__stlxr(v51 - 1, (unint64_t *)v50));
                    if (!v51)
                    {
                      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                      std::__shared_weak_count::__release_weak(v49);
                    }
                  }
                  MEMORY[0x227684CE8](v45, 0x10F0C40B62ED6C6);
                  v52 = v104;
                  v104 = 0;
                  if (v52)
                  {
                    v53 = *(std::__shared_weak_count **)(v52 + 32);
                    if (v53)
                    {
                      v54 = &v53->__shared_owners_;
                      do
                        v55 = __ldaxr((unint64_t *)v54);
                      while (__stlxr(v55 - 1, (unint64_t *)v54));
                      if (!v55)
                      {
                        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                        std::__shared_weak_count::__release_weak(v53);
                      }
                    }
                    v56 = *(std::__shared_weak_count **)(v52 + 16);
                    if (v56)
                    {
                      v57 = &v56->__shared_owners_;
                      do
                        v58 = __ldaxr((unint64_t *)v57);
                      while (__stlxr(v58 - 1, (unint64_t *)v57));
                      if (!v58)
                      {
                        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                        std::__shared_weak_count::__release_weak(v56);
                      }
                    }
                    MEMORY[0x227684CE8](v52, 0x10F0C40B62ED6C6);
                  }
                }
                v59 = *(std::__shared_weak_count **)&__p[24];
                if (*(_QWORD *)&__p[24])
                {
                  v60 = *(_QWORD *)&__p[24] + 8;
                  do
                    v61 = __ldaxr((unint64_t *)v60);
                  while (__stlxr(v61 - 1, (unint64_t *)v60));
                  if (!v61)
                  {
                    ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                    std::__shared_weak_count::__release_weak(v59);
                  }
                }
                v62 = *(std::__shared_weak_count **)&__p[8];
                if (*(_QWORD *)&__p[8])
                {
                  v63 = *(_QWORD *)&__p[8] + 8;
                  do
                    v64 = __ldaxr((unint64_t *)v63);
                  while (__stlxr(v64 - 1, (unint64_t *)v63));
                  if (!v64)
                  {
                    ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                    std::__shared_weak_count::__release_weak(v62);
                  }
                }
                v65 = oslog;
              }
              else
              {
                v65 = oslog;
                os_log_type_enabled(oslog, v33);
                LOWORD(v77) = 0;
                v66 = (void *)_os_log_send_and_compose_impl();
                if (v66)
                  free(v66);
              }

              if (v75)
              {
                sub_22322C138((uint64_t)v83, "Keyframe camera needs to be scaled");
                sub_223182C08((uint64_t)v83);
              }
              sub_223182C08((uint64_t)v83);
              v67 = v89;
              if (v89)
              {
                v68 = (unint64_t *)&v89->__shared_owners_;
                do
                  v69 = __ldaxr(v68);
                while (__stlxr(v69 - 1, v68));
                if (!v69)
                {
                  ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                  std::__shared_weak_count::__release_weak(v67);
                }
              }
              goto LABEL_101;
            }
          }
          memmove(v28, v19, v18);
          goto LABEL_42;
        }
      }
      memmove(v24, v22, v23);
      goto LABEL_34;
    }
  }
  else
  {
    v8 = 0;
  }
  if ((a3 & 1) != 0)
    goto LABEL_12;
  v9 = a2[1];
  *(_QWORD *)a4 = *a2;
  *(_QWORD *)(a4 + 8) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_223196370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, void *a18, int a19, __int16 a20,char a21,char a22,char a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t (**a46)())
{
  uint64_t v46;

  if (a23)
  {
    if (a22 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a36);
  a46 = &off_24EC20828;
  nullsub_30(a15);
  nullsub_30(&a46);
  sub_2231874DC(v46 - 152);
  _Unwind_Resume(a1);
}

float sub_2231964C4(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  return sub_2231964CC(a1 + 320, a2, a3);
}

float sub_2231964CC(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  float result;
  _OWORD *v16;

  if (!sub_2231A88F8((_QWORD *)a1, a3)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/include/Reconstruction/Keyframing/Pool/BaseKeyframePool.hpp", 62, (uint64_t)"Contains(key)", 13, (uint64_t)"Key must exist", 14, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v16 = a3;
  v6 = sub_2231B031C(a1, a3, (uint64_t)&unk_2245BA939, &v16);
  *(float *)(a1 + 40) = *(float *)(a1 + 40) - sub_2231D3830((_QWORD *)v6[4]);
  v16 = a3;
  v7 = sub_2231B031C(a1, a3, (uint64_t)&unk_2245BA939, &v16);
  v9 = (_QWORD *)*a2;
  v8 = a2[1];
  if (v8)
  {
    v10 = (unint64_t *)(v8 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = (std::__shared_weak_count *)v7[5];
  v7[4] = v9;
  v7[5] = v8;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  result = sub_2231D3830((_QWORD *)*a2) + *(float *)(a1 + 40);
  *(float *)(a1 + 40) = result;
  return result;
}

void sub_223196604(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _OWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_2231967A4((char **)a3, (uint64_t)(a2[1] - *a2) >> 4);
  v6 = (_QWORD *)*a2;
  v7 = (_QWORD *)a2[1];
  if ((_QWORD *)*a2 != v7)
  {
    v8 = (_QWORD *)(a1 + 320);
    do
    {
      v9 = sub_2231A8330(v8, v6);
      if (v9)
      {
        v10 = v9[4];
        v11 = v9[5];
        *(_QWORD *)&v19 = v10;
        *((_QWORD *)&v19 + 1) = v11;
        if (v11)
        {
          v12 = (unint64_t *)(v11 + 8);
          do
            v13 = __ldxr(v12);
          while (__stxr(v13 + 1, v12));
        }
        v20 = *(_OWORD *)v6;
        v14 = *(_QWORD *)(a3 + 8);
        if (v14 < *(_QWORD *)(a3 + 16))
        {
          *(_QWORD *)v14 = v10;
          *(_QWORD *)(v14 + 8) = *((_QWORD *)&v19 + 1);
          v19 = 0uLL;
          *(_OWORD *)(v14 + 16) = v20;
          *(_QWORD *)(a3 + 8) = v14 + 32;
        }
        else
        {
          v15 = sub_2231A8DE4((void **)a3, &v19);
          v16 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
          *(_QWORD *)(a3 + 8) = v15;
          if (v16)
          {
            p_shared_owners = (unint64_t *)&v16->__shared_owners_;
            do
              v18 = __ldaxr(p_shared_owners);
            while (__stlxr(v18 - 1, p_shared_owners));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
        }
      }
      v6 += 2;
    }
    while (v6 != v7);
  }
}

void sub_223196760(_Unwind_Exception *a1)
{
  void **v1;

  sub_2231968B4(v1);
  _Unwind_Resume(a1);
}

void sub_223196774(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  va_list va;

  va_start(va, a2);
  sub_223167354((uint64_t)va);
  sub_2231968B4(v2);
  _Unwind_Resume(a1);
}

void sub_223196790(_Unwind_Exception *a1)
{
  void **v1;

  sub_2231968B4(v1);
  _Unwind_Resume(a1);
}

void sub_2231967A4(char **a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  v2 = *a1;
  if (a2 > (a1[2] - *a1) >> 5)
  {
    if (a2 >> 59)
      sub_22316E078();
    v4 = a1[1];
    v5 = 32 * a2;
    v6 = (char *)operator new(32 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *a1 = v8;
      a1[1] = v8;
      a1[2] = v7;
      if (v2)
LABEL_16:
        operator delete(v2);
    }
    else
    {
      v9 = &v6[v4 - v2];
      do
      {
        v10 = *((_OWORD *)v4 - 2);
        v4 -= 32;
        *((_OWORD *)v9 - 2) = v10;
        v9 -= 32;
        *(_QWORD *)v4 = 0;
        *((_QWORD *)v4 + 1) = 0;
        *((_OWORD *)v9 + 1) = *((_OWORD *)v4 + 1);
      }
      while (v4 != v2);
      v11 = *a1;
      v2 = a1[1];
      *a1 = v9;
      a1[1] = v8;
      a1[2] = v7;
      if (v2 != v11)
      {
        do
        {
          v12 = (std::__shared_weak_count *)*((_QWORD *)v2 - 3);
          if (v12)
          {
            p_shared_owners = (unint64_t *)&v12->__shared_owners_;
            do
              v14 = __ldaxr(p_shared_owners);
            while (__stlxr(v14 - 1, p_shared_owners));
            if (!v14)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
          v2 -= 32;
        }
        while (v2 != v11);
        v2 = v11;
      }
      if (v2)
        goto LABEL_16;
    }
  }
}

void **sub_2231968B4(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 3);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_22319694C@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  void **v7;
  size_t v8;
  size_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  void *v16[2];
  __int128 v17;
  uint64_t v18;
  char v19;
  void *v20[2];
  uint64_t v21;
  uint64_t v22;
  void *v23[2];
  uint64_t v24;
  char v25;
  char v26;
  std::string __p;
  int v28;
  void *v29[2];
  char v30;
  void *__dst[2];
  char v32;
  char v33;
  void *v34;
  char v35;
  void *v36;
  char v37;
  char v38;
  char v39;
  uint64_t v40[7];
  int v41;
  char v42;
  char *v43;
  void *v44[2];
  void **v45;
  std::string *p_p;
  std::string *v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  DWORD2(v17) = 0;
  sub_22456E6D0(v40);
  v6 = (_QWORD *)sub_22456E810(v40);
  sub_2245664AC(a2, v44);
  sub_2231813E8(v6, (uint64_t)v44, 36);
  sub_22456E81C(v40, &__p);
  sub_22456E764(v40);
  v44[0] = v16;
  v44[1] = &__p;
  v45 = v16;
  p_p = &__p;
  v47 = &__p;
  v40[0] = (uint64_t)v44;
  ((void (*)(uint64_t *, void **))sub_22319B9BC)(v40, v16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (DWORD2(v17) == -1)
    sub_22316DD70();
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
  ((void (*)(void **__return_ptr, std::string *, void **))off_24EC1F9D0[DWORD2(v17)])(v44, &__p, v16);
  if (DWORD2(v17) != -1)
    ((void (*)(std::string *, void **))off_24EC1F9B8[DWORD2(v17)])(&__p, v16);
  if (SHIBYTE(v45) >= 0)
    v7 = v44;
  else
    v7 = (void **)v44[0];
  v16[0] = 0;
  v8 = strnlen((const char *)v7, 8uLL);
  memcpy(v16, v7, v8);
  v40[3] = (uint64_t)v16[0];
  memset(&v40[4], 0, 24);
  v41 = 728307996;
  v16[0] = 0;
  v9 = strnlen((const char *)v7, 8uLL);
  memcpy(v16, v7, v9);
  kdebug_trace();
  if (SHIBYTE(v45) < 0)
    operator delete(v44[0]);
  sub_2231B0DB0((uint64_t)v44);
  sub_22319B660(a1, a2, &__p);
  *(_OWORD *)v16 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_QWORD *)&v17 = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  memset(&__p, 0, sizeof(__p));
  sub_2242B18CC((uint64_t)v16, 4u, *(_QWORD *)(a1 + 48));
  if (SBYTE7(v17) < 0)
  {
    operator delete(v16[0]);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_13;
LABEL_27:
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_13;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_27;
LABEL_13:
  if (sub_2242BB4E8((uint64_t)v40))
  {
    v10 = (_QWORD *)sub_2242BB4C8((uint64_t)v40);
    if (!*(_DWORD *)((char *)v10 + *(_QWORD *)(*v10 - 24) + 32))
    {
      v12 = sub_2242BB4D8((uint64_t)v40);
      v16[0] = (void *)1;
      sub_224555660(&__p, (uint64_t *)v16, v12, 0x2800uLL);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC20B48;
      __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_24EC20C90;
      LODWORD(v43) = 11;
      sub_224554030((uint64_t)&__p, &v43);
      sub_2231B14A8(&__p, (uint64_t)v44, v43);
      v29[1] = 0;
      v29[0] = 0;
      sub_223C9AAA4((uint64_t)v44, (uint64_t)v16);
      v13 = operator new(0x240uLL);
      v13[1] = 0;
      v13[2] = 0;
      *v13 = &off_24EC20F48;
      sub_2231D1070((uint64_t)(v13 + 3), (uint64_t)v16);
      v29[0] = v13 + 3;
      v29[1] = v13;
      sub_2231CE350(v16);
      sub_2231A9984((uint64_t **)a1, a2, a2);
      v14 = sub_2231D3830(v13 + 3);
      v16[0] = a2;
      *((float *)sub_2231A9C40((uint64_t **)(a1 + 24), a2, (uint64_t)&unk_2245BA939, (_OWORD **)v16) + 11) = v14;
      *(_QWORD *)a3 = v13 + 3;
      *(_QWORD *)(a3 + 8) = v13;
      *(_BYTE *)(a3 + 120) = 1;
      sub_2245557DC(&__p);
      goto LABEL_45;
    }
  }
  v28 = 0;
  sub_2231B0F48(&__p, "Invalid load stream for key: ");
  sub_22319B83C((uint64_t)&v43, (uint64_t)&__p, a2);
  if (v28 == -1)
    sub_22316DD70();
  v43 = &v42;
  ((void (*)(void **__return_ptr, char **, std::string *))off_24EC1F9D0[v28])(v29, &v43, &__p);
  if (v28 != -1)
    ((void (*)(char **, std::string *))off_24EC1F9B8[v28])(&v43, &__p);
  sub_22456A884(__dst, (__int128 *)v29);
  v39 = 1;
  sub_2231A958C(5u, (__int128 *)__dst, (uint64_t)v16);
  *(_OWORD *)a3 = *(_OWORD *)v16;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (!v26)
  {
    *(_BYTE *)(a3 + 120) = 0;
    goto LABEL_36;
  }
  *(_BYTE *)(a3 + 40) = 0;
  if (v19)
  {
    *(_OWORD *)(a3 + 16) = v17;
    *(_QWORD *)(a3 + 32) = v18;
    v18 = 0;
    v17 = 0uLL;
    *(_BYTE *)(a3 + 40) = 1;
  }
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 104) = 0;
  if (!v25)
  {
    *(_BYTE *)(a3 + 112) = 1;
    *(_BYTE *)(a3 + 120) = 0;
    if (!v19)
      goto LABEL_36;
    goto LABEL_34;
  }
  v11 = v22;
  *(_QWORD *)(a3 + 64) = v21;
  *(_OWORD *)(a3 + 48) = *(_OWORD *)v20;
  v20[0] = 0;
  v20[1] = 0;
  *(_QWORD *)(a3 + 72) = v11;
  *(_OWORD *)(a3 + 80) = *(_OWORD *)v23;
  *(_QWORD *)(a3 + 96) = v24;
  v23[1] = 0;
  v24 = 0;
  v21 = 0;
  v23[0] = 0;
  *(_BYTE *)(a3 + 104) = 1;
  *(_BYTE *)(a3 + 112) = 1;
  *(_BYTE *)(a3 + 120) = 0;
  if (SHIBYTE(v24) < 0)
  {
    operator delete(v23[0]);
    if ((SHIBYTE(v21) & 0x80000000) == 0)
    {
LABEL_24:
      if (!v19)
        goto LABEL_36;
      goto LABEL_34;
    }
  }
  else if ((SHIBYTE(v21) & 0x80000000) == 0)
  {
    goto LABEL_24;
  }
  operator delete(v20[0]);
  if (!v19)
    goto LABEL_36;
LABEL_34:
  if (SHIBYTE(v18) < 0)
    operator delete((void *)v17);
LABEL_36:
  if (!v39)
    goto LABEL_43;
  if (!v38)
    goto LABEL_40;
  if (v37 < 0)
  {
    operator delete(v36);
    if ((v35 & 0x80000000) == 0)
    {
LABEL_40:
      if (v33)
        goto LABEL_41;
      goto LABEL_43;
    }
  }
  else if ((v35 & 0x80000000) == 0)
  {
    goto LABEL_40;
  }
  operator delete(v34);
  if (v33)
  {
LABEL_41:
    if (v32 < 0)
      operator delete(__dst[0]);
  }
LABEL_43:
  if (v30 < 0)
    operator delete(v29[0]);
LABEL_45:
  sub_2242BB3F8((uint64_t)v40);
  sub_2231A8050((uint64_t)v44);
  return kdebug_trace();
}

void sub_223196F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_2231CE350(&a9);
  sub_223167354((uint64_t)&STACK[0x2C8]);
  sub_2245557DC(&STACK[0x290]);
  sub_2242BB3F8((uint64_t)&STACK[0x348]);
  sub_2231A8050((uint64_t)&STACK[0x398]);
  sub_2231874DC((uint64_t)&STACK[0x360]);
  _Unwind_Resume(a1);
}

void sub_22319714C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (SLOBYTE(STACK[0x2A7]) < 0)
  {
    operator delete((void *)STACK[0x290]);
    sub_22319B964((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_22319718C(uint64_t result, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)result = *(_OWORD *)a2;
  *(_BYTE *)(result + 16) = 0;
  *(_BYTE *)(result + 112) = 0;
  if (*(_BYTE *)(a2 + 112))
  {
    *(_BYTE *)(result + 40) = 0;
    if (*(_BYTE *)(a2 + 40))
    {
      v2 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)(result + 16) = v2;
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_BYTE *)(result + 40) = 1;
    }
    *(_BYTE *)(result + 48) = 0;
    *(_BYTE *)(result + 104) = 0;
    if (*(_BYTE *)(a2 + 104))
    {
      v3 = *(_OWORD *)(a2 + 48);
      *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 64);
      *(_OWORD *)(result + 48) = v3;
      *(_QWORD *)(a2 + 56) = 0;
      *(_QWORD *)(a2 + 64) = 0;
      *(_QWORD *)(a2 + 48) = 0;
      *(_QWORD *)(result + 72) = *(_QWORD *)(a2 + 72);
      v4 = *(_OWORD *)(a2 + 80);
      *(_QWORD *)(result + 96) = *(_QWORD *)(a2 + 96);
      *(_OWORD *)(result + 80) = v4;
      *(_QWORD *)(a2 + 88) = 0;
      *(_QWORD *)(a2 + 96) = 0;
      *(_QWORD *)(a2 + 80) = 0;
      *(_BYTE *)(result + 104) = 1;
    }
    *(_BYTE *)(result + 112) = 1;
  }
  *(_BYTE *)(result + 120) = 0;
  return result;
}

uint64_t sub_22319723C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 112))
    return a1;
  if (*(_BYTE *)(a1 + 104))
  {
    if ((*(char *)(a1 + 103) & 0x80000000) == 0)
    {
      if ((*(char *)(a1 + 71) & 0x80000000) == 0)
        goto LABEL_5;
LABEL_9:
      operator delete(*(void **)(a1 + 48));
      if (!*(_BYTE *)(a1 + 40))
        return a1;
      goto LABEL_6;
    }
    operator delete(*(void **)(a1 + 80));
    if (*(char *)(a1 + 71) < 0)
      goto LABEL_9;
  }
LABEL_5:
  if (!*(_BYTE *)(a1 + 40))
    return a1;
LABEL_6:
  if ((*(char *)(a1 + 39) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_2231972C8(uint64_t a1)
{
  return a1 + 88;
}

uint64_t sub_2231972D0(_QWORD *a1)
{
  *a1 = &off_24EC20828;
  nullsub_30(a1 + 1);
  return nullsub_30(a1);
}

uint64_t sub_223197300(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

float64x2_t sub_223197368@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  float64x2_t result;

  v2 = *(_QWORD *)(a1 + 344);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 368) + 16);
  *(double *)a2 = *(double *)(a1 + 400) / 1000.0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 384);
  *(_QWORD *)(a2 + 24) = v3 + v2;
  *(_QWORD *)(a2 + 32) = v2;
  *(_QWORD *)(a2 + 40) = v3;
  result = vcvtq_f64_f32(vmul_f32(*(float32x2_t *)(a1 + 360), (float32x2_t)vdup_n_s32(0x3A800000u)));
  *(float64x2_t *)(a2 + 48) = result;
  return result;
}

void sub_2231973BC(uint64_t a1, _OWORD *a2)
{
  _OWORD *v4;
  void *__p;
  void *v6;
  _OWORD *v7;
  void **p_p;
  char v9;
  _BYTE v10[16];
  _BYTE v11[16];
  _BYTE v12[16];

  v12[0] = 0;
  v12[8] = 0;
  v11[0] = 0;
  v11[8] = 0;
  v10[0] = 0;
  v10[8] = 0;
  v4 = operator new(0x10uLL);
  v6 = v4 + 1;
  v7 = v4 + 1;
  *v4 = *a2;
  __p = v4;
  p_p = &__p;
  v9 = 1;
  sub_223189DF0(a1, (uint64_t)v12, (uint64_t)v11, (uint64_t)v10, (uint64_t)&p_p);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_223197450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22319746C(uint64_t a1, _QWORD *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::string::size_type size;
  std::string *p_p;
  std::string::size_type v9;
  std::string::size_type v10;
  int v11;
  __n128 *v14;
  std::string *v15;
  size_t v16;
  _BYTE v17[16];
  uint64_t v18;
  char v19;
  std::string __p;
  __int128 v21;
  __int128 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v21 = "cv3d.recon.";
  *((_QWORD *)&v21 + 1) = 11;
  *(_QWORD *)&v22 = "Stats.Keyframing.MemoryList";
  *((_QWORD *)&v22 + 1) = 27;
  sub_2231A9820((uint64_t)&v21, (uint64_t)&v23, 0, 0, &__p);
  sub_224569D7C();
  if (sub_224569C6C())
  {
    v4 = sub_2241471F8();
    v5 = sub_2241486EC((uint64_t)v4);
    if (!sub_2241053B4(v5))
    {
      v6 = sub_2241472E0();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6))
      {
        v21 = 0u;
        v22 = 0u;
        v23 = 728325608;
        kdebug_trace();
        v18 = (uint64_t)(a2[1] - *a2) >> 5;
        sub_223197768((double *)&qword_255788F20, v6, &v18, "to_snapshot");
        kdebug_trace();
      }
    }
  }
  v21 = 0u;
  v22 = 0u;
  v23 = 728325624;
  kdebug_trace();
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size >= 0x11)
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v9 = p_p->__r_.__value_.__r.__words[0];
    v10 = p_p->__r_.__value_.__l.__size_;
    v11 = p_p->__r_.__value_.__s.__data_[16];
    if (v9 == 0x6365722E64337663 && v10 == 0x73746174532E6E6FLL && v11 == 46)
    {
      v14 = sub_223187510();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v15 = &__p;
      else
        v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v16 = __p.__r_.__value_.__l.__size_;
      v18 = (uint64_t)(a2[1] - *a2) >> 5;
      sub_22318760C((uint64_t *)v14, v15, v16, &v18, (uint64_t)"to_snapshot", 11);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LOBYTE(v21) = 0;
  BYTE8(v21) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  __p.__r_.__value_.__s.__data_[8] = 0;
  v18 = (uint64_t)a2;
  v19 = 1;
  v17[0] = 0;
  v17[8] = 0;
  sub_223189DF0(a1, (uint64_t)&v21, (uint64_t)&__p, (uint64_t)&v18, (uint64_t)v17);
}

void sub_223197710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_223197768(double *a1, uint64_t a2, uint64_t *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;
  __int128 v17;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        sub_2245054E8((uint64_t)&v17, (uint64_t)(*a1 * 1000000000.0), 2);
        v14 = v17;
        v13 = sub_2241471F8();
        sub_2231AD778((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_223197894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2231978B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v6;
  unsigned __int8 v7;
  uint64_t v8;
  std::unique_lock<std::mutex> v9;
  void *v10[2];
  uint64_t v11;
  char v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  std::unique_lock<std::mutex> __lk;
  __int128 v22;
  uint64_t v23;
  char v24;
  void *v25[2];
  uint64_t v26;
  uint64_t v27;
  void *v28[2];
  uint64_t v29;
  char v30;
  char v31;
  char v32;

  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 448);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 448));
  v6 = atomic_load((unsigned __int8 *)(a1 + 624));
  if ((v6 & 1) != 0)
  {
    do
    {
      std::condition_variable::wait((std::condition_variable *)(a1 + 576), &__lk);
      v7 = atomic_load((unsigned __int8 *)(a1 + 624));
    }
    while ((v7 & 1) != 0);
  }
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
  sub_22318787C(a1);
  sub_223197B58(*(_QWORD *)(a1 + 368), a2, (uint64_t)&__lk);
  if (!*(_QWORD *)(a3 + 24)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/KeyframeMemory.mm", 752, (uint64_t)"user_cb", 7, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  LOBYTE(v9.__m_) = 0;
  v20 = v32;
  if (!v32)
  {
    v9 = __lk;
    LOBYTE(v10[0]) = 0;
    v19 = 0;
    if (v31)
    {
      v12 = 0;
      if (v24)
      {
        *(_OWORD *)v10 = v22;
        v11 = v23;
        v23 = 0;
        v22 = 0uLL;
        v12 = 1;
      }
      LOBYTE(v13) = 0;
      v18 = 0;
      if (v30)
      {
        v14 = v26;
        v13 = *(_OWORD *)v25;
        v25[0] = 0;
        v25[1] = 0;
        v15 = v27;
        *(_OWORD *)__p = *(_OWORD *)v28;
        v17 = v29;
        v26 = 0;
        v28[0] = 0;
        v28[1] = 0;
        v29 = 0;
        v18 = 1;
      }
      v19 = 1;
    }
  }
  v8 = *(_QWORD *)(a3 + 24);
  if (!v8)
    sub_223198474();
  (*(void (**)(uint64_t, std::unique_lock<std::mutex> *))(*(_QWORD *)v8 + 48))(v8, &v9);
  if (!v20 && v19)
  {
    if (v18)
    {
      if (SHIBYTE(v17) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v14) < 0)
        operator delete((void *)v13);
    }
    if (v12 && SHIBYTE(v11) < 0)
      operator delete(v10[0]);
  }
  if (!v32 && v31)
  {
    if (v30)
    {
      if (SHIBYTE(v29) < 0)
        operator delete(v28[0]);
      if (SHIBYTE(v26) < 0)
        operator delete(v25[0]);
    }
    if (v24)
    {
      if (SHIBYTE(v23) < 0)
        operator delete((void *)v22);
    }
  }
}

void sub_223197B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_223197D38((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223197B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  sub_223197D38((uint64_t)&a9);
  sub_223197D38((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_223197B58(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  std::string *v7;
  uint64_t v8;
  std::string v9;

  memset(&v9, 0, sizeof(v9));
  v6 = *(char *)(a1 + 79);
  if (v6 >= 0)
    v7 = (std::string *)(a1 + 56);
  else
    v7 = *(std::string **)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 64);
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a1 + 79);
  sub_2231816F0(&v9, v7, (std::string *)((char *)v7 + v8));
  sub_223FE17D4((uint64_t)&v9, a2, *(_QWORD ***)(a1 + 48));
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  *(_BYTE *)(a3 + 120) = 1;
}

void sub_223197BE8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char __dst,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  uint64_t v53;
  __int128 *v54;
  uint64_t v55;
  __int128 *v57;
  __int128 v58;
  uint64_t v59;
  __int128 *v60;
  __int128 v61;
  char v62;
  __int128 v63[6];
  char v64;

  if (*(char *)(v55 - 129) < 0)
    operator delete(*(void **)(v55 - 152));
  __cxa_begin_catch(a1);
  if (*((char *)v54 + 23) < 0)
  {
    sub_223197FA4(&v58, *(void **)v54, *((_QWORD *)v54 + 1));
  }
  else
  {
    v58 = *v54;
    v59 = *((_QWORD *)v54 + 2);
  }
  v57 = &v58;
  if (v59 < 0)
    v57 = (__int128 *)v58;
  v60 = v57;
  sub_2231BA780("Error cloning disk pool to: ", (const char *)&v60);
  sub_22456A884(v63, &v61);
  v64 = 1;
  sub_2231A958C(5u, v63, v55 - 152);
  sub_22319718C(v53, v55 - 152);
  sub_22319723C(v55 - 152);
  sub_22319FD28((uint64_t)v63);
  if (v62 < 0)
    operator delete((void *)v61);
  if (SHIBYTE(v59) < 0)
    operator delete((void *)v58);
  __cxa_end_catch();
}

void sub_223197CD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_223197D38(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 120) || !*(_BYTE *)(a1 + 112))
    return a1;
  if (*(_BYTE *)(a1 + 104))
  {
    if ((*(char *)(a1 + 103) & 0x80000000) == 0)
    {
      if ((*(char *)(a1 + 71) & 0x80000000) == 0)
        goto LABEL_7;
LABEL_11:
      operator delete(*(void **)(a1 + 48));
      if (!*(_BYTE *)(a1 + 40))
        return a1;
      goto LABEL_8;
    }
    operator delete(*(void **)(a1 + 80));
    if (*(char *)(a1 + 71) < 0)
      goto LABEL_11;
  }
LABEL_7:
  if (!*(_BYTE *)(a1 + 40))
    return a1;
LABEL_8:
  if ((*(char *)(a1 + 39) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_223197DCC(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 64);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_223197E34(uint64_t a1, uint64_t a2, std::string *a3)
{
  __int128 v5;
  std::string::size_type size;
  std::string *v7;
  char v8;
  char v9;
  std::string __p;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 24) = a1 + 32;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = a2;
  if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4((_BYTE *)(a1 + 56), a3->__r_.__value_.__l.__data_, a3->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&a3->__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 72) = *((_QWORD *)&a3->__r_.__value_.__l + 2);
    *(_OWORD *)(a1 + 56) = v5;
  }
  memset(&__p, 0, sizeof(__p));
  size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v7 = a3;
  else
    v7 = (std::string *)a3->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = a3->__r_.__value_.__l.__size_;
  sub_2231816F0(&__p, v7, (std::string *)((char *)v7 + size));
  v8 = sub_2242B1868((uint64_t)&__p, *(_QWORD *)(a1 + 48));
  v9 = v8;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((v9 & 1) != 0)
      return a1;
  }
  else if ((v8 & 1) != 0)
  {
    return a1;
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/include_private/Reconstruction/Keyframing/KeyframeDiskPool.hpp", 36, (uint64_t)"fs::exists(base_path, fs_)", 26, (uint64_t)"Base folder must exist", 22, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  return a1;
}

void sub_223197F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;

  sub_223198030(v16, *(_QWORD **)(v15 + 32));
  sub_223198030(v15, *(_QWORD **)(v15 + 8));
  _Unwind_Resume(a1);
}

void *sub_223197FA4(_BYTE *__dst, void *__src, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v6 = a3 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *v5 = v8;
    v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

void sub_223198030(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_223198030(a1, *a2);
    sub_223198030(a1, a2[1]);
    operator delete(a2);
  }
}

void sub_223198070(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;

  if (a2)
  {
    v3 = (_QWORD *)(a2 + 8);
    sub_223198030(a2, *(_QWORD **)(a2 + 8));
    *(_QWORD *)a2 = v3;
    *(_QWORD *)(a2 + 16) = 0;
    *v3 = 0;
    sub_223198030(a2 + 24, *(_QWORD **)(a2 + 32));
    v4 = 0;
    *(_QWORD *)(a2 + 24) = a2 + 32;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    if (*(char *)(a2 + 79) < 0)
    {
      operator delete(*(void **)(a2 + 56));
      v4 = *(_QWORD **)(a2 + 32);
    }
    sub_223198030(a2 + 24, v4);
    sub_223198030(a2, *(_QWORD **)(a2 + 8));
    JUMPOUT(0x227684CE8);
  }
}

uint64_t sub_223198118(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 24);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void **sub_223198180(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_223198218(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_223198268(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
}

void sub_223198254(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_223198268(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  return result;
}

uint64_t sub_22319828C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_2231982F4(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_22319835C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2;
  unsigned int v3;

  v2 = *a1;
  v3 = *a2;
  if (v2 == v3)
  {
    v2 = a1[1];
    v3 = a2[1];
    if (v2 == v3)
    {
      v2 = a1[2];
      v3 = a2[2];
      if (v2 == v3)
      {
        v2 = a1[3];
        v3 = a2[3];
        if (v2 == v3)
        {
          v2 = a1[4];
          v3 = a2[4];
          if (v2 == v3)
          {
            v2 = a1[5];
            v3 = a2[5];
            if (v2 == v3)
            {
              v2 = a1[6];
              v3 = a2[6];
              if (v2 == v3)
              {
                v2 = a1[7];
                v3 = a2[7];
                if (v2 == v3)
                {
                  v2 = a1[8];
                  v3 = a2[8];
                  if (v2 == v3)
                  {
                    v2 = a1[9];
                    v3 = a2[9];
                    if (v2 == v3)
                    {
                      v2 = a1[10];
                      v3 = a2[10];
                      if (v2 == v3)
                      {
                        v2 = a1[11];
                        v3 = a2[11];
                        if (v2 == v3)
                        {
                          v2 = a1[12];
                          v3 = a2[12];
                          if (v2 == v3)
                          {
                            v2 = a1[13];
                            v3 = a2[13];
                            if (v2 == v3)
                            {
                              v2 = a1[14];
                              v3 = a2[14];
                              if (v2 == v3)
                              {
                                v2 = a1[15];
                                v3 = a2[15];
                                if (v2 == v3)
                                  return 0;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (v2 < v3)
    return 0xFFFFFFFFLL;
  return 1;
}

void sub_223198474()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = &unk_24EC1F7C8;
  __cxa_throw(exception, (struct type_info *)&unk_24EC1F7A0, (void (*)(void *))std::exception::~exception);
}

void sub_2231984AC(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2231984D0(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 60)
      goto LABEL_22;
    v10 = v8 >> 3;
    if (v8 >> 3 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    v12 = 0xFFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 60)
LABEL_22:
      sub_22316E078();
    v13 = 2 * v12;
    result = operator new(16 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 4;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[16 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

char *sub_223198614(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    sub_22316E078();
  v7 = a1[2] - v3;
  if (v7 >> 4 > v6)
    v6 = v7 >> 4;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFE0)
    v6 = 0x7FFFFFFFFFFFFFFLL;
  if (v6 >> 59)
    sub_223174E94();
  v9 = 32 * v6;
  v10 = (char *)operator new(32 * v6);
  v11 = &v10[32 * v5];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  v12 = *(_QWORD *)(a2 + 24);
  *((_QWORD *)v11 + 2) = *(_QWORD *)(a2 + 16);
  *((_QWORD *)v11 + 3) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v3 = *a1;
    v4 = a1[1];
  }
  v15 = &v10[v9];
  v16 = v11 + 32;
  if (v4 == v3)
  {
    *a1 = v11;
    a1[1] = v16;
    a1[2] = v15;
    if (!v3)
      return v16;
    goto LABEL_23;
  }
  do
  {
    *((_OWORD *)v11 - 2) = *((_OWORD *)v4 - 2);
    *((_OWORD *)v11 - 1) = *((_OWORD *)v4 - 1);
    v11 -= 32;
    *((_QWORD *)v4 - 2) = 0;
    *((_QWORD *)v4 - 1) = 0;
    v4 -= 32;
  }
  while (v4 != v3);
  v17 = *a1;
  v3 = a1[1];
  *a1 = v11;
  a1[1] = v16;
  a1[2] = v15;
  if (v3 != v17)
  {
    do
    {
      v18 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v3 -= 32;
    }
    while (v3 != v17);
    v3 = v17;
  }
  if (v3)
LABEL_23:
    operator delete(v3);
  return v16;
}

unint64_t sub_22319878C(char **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  unint64_t v44;
  unint64_t v45;
  __int128 v46;
  std::__shared_weak_count *v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;

  v5 = *a1;
  v6 = a2 - (_QWORD)*a1;
  v7 = (unint64_t)&(*a1)[v6 & 0xFFFFFFFFFFFFFFE0];
  if (a5 < 1)
    return v7;
  v9 = a3;
  v11 = (unint64_t)a1[1];
  v12 = a1[2];
  if (a5 <= (uint64_t)&v12[-v11] >> 5)
  {
    v17 = (uint64_t)(v11 - v7) >> 5;
    if (v17 >= a5)
    {
      v18 = a3 + 32 * a5;
      v20 = a1[1];
    }
    else
    {
      v18 = a3 + 32 * v17;
      if (v18 == a4)
      {
        v20 = a1[1];
      }
      else
      {
        v19 = a3 + 32 * v17;
        v20 = a1[1];
        do
        {
          *(_OWORD *)v20 = *(_OWORD *)v19;
          v21 = *(_QWORD *)(v19 + 24);
          *((_QWORD *)v20 + 2) = *(_QWORD *)(v19 + 16);
          *((_QWORD *)v20 + 3) = v21;
          if (v21)
          {
            v22 = (unint64_t *)(v21 + 8);
            do
              v23 = __ldxr(v22);
            while (__stxr(v23 + 1, v22));
          }
          v19 += 32;
          v20 += 32;
        }
        while (v19 != a4);
      }
      a1[1] = v20;
      if ((uint64_t)(v11 - v7) < 1)
        return v7;
    }
    v42 = (unint64_t)&v20[-32 * a5];
    v43 = v20;
    if (v42 < v11)
    {
      v44 = (unint64_t)&v20[-32 * a5];
      v43 = v20;
      do
      {
        *(_OWORD *)v43 = *(_OWORD *)v44;
        *((_OWORD *)v43 + 1) = *(_OWORD *)(v44 + 16);
        *(_QWORD *)(v44 + 16) = 0;
        *(_QWORD *)(v44 + 24) = 0;
        v43 += 32;
        v44 += 32;
      }
      while (v44 < v11);
    }
    a1[1] = v43;
    if (v20 != (char *)(v7 + 32 * a5))
    {
      do
      {
        *((_OWORD *)v20 - 2) = *(_OWORD *)(v42 - 32);
        v46 = *(_OWORD *)(v42 - 16);
        *(_QWORD *)(v42 - 16) = 0;
        *(_QWORD *)(v42 - 8) = 0;
        v47 = (std::__shared_weak_count *)*((_QWORD *)v20 - 1);
        *((_OWORD *)v20 - 1) = v46;
        if (v47)
        {
          p_shared_owners = (unint64_t *)&v47->__shared_owners_;
          do
            v49 = __ldaxr(p_shared_owners);
          while (__stlxr(v49 - 1, p_shared_owners));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
        v42 -= 32;
        v20 -= 32;
      }
      while (v42 != v7);
    }
    if (v18 != v9)
    {
      v45 = v7;
      do
      {
        *(_OWORD *)v45 = *(_OWORD *)v9;
        v51 = *(_QWORD *)(v9 + 16);
        v50 = *(_QWORD *)(v9 + 24);
        if (v50)
        {
          v52 = (unint64_t *)(v50 + 8);
          do
            v53 = __ldxr(v52);
          while (__stxr(v53 + 1, v52));
        }
        v54 = *(std::__shared_weak_count **)(v45 + 24);
        *(_QWORD *)(v45 + 16) = v51;
        *(_QWORD *)(v45 + 24) = v50;
        if (v54)
        {
          v55 = (unint64_t *)&v54->__shared_owners_;
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v9 += 32;
        v45 += 32;
      }
      while (v9 != v18);
    }
    return v7;
  }
  v13 = a5 + ((uint64_t)(v11 - (_QWORD)v5) >> 5);
  if (v13 >> 59)
    sub_22316E078();
  v14 = v12 - v5;
  if (v14 >> 4 > v13)
    v13 = v14 >> 4;
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFE0)
    v15 = 0x7FFFFFFFFFFFFFFLL;
  else
    v15 = v13;
  if (v15)
  {
    if (v15 >> 59)
      sub_223174E94();
    v16 = (char *)operator new(32 * v15);
  }
  else
  {
    v16 = 0;
  }
  v24 = v6 >> 5;
  v25 = &v16[32 * (v6 >> 5)];
  v26 = &v16[32 * v15];
  v27 = &v25[32 * a5];
  v28 = v25;
  do
  {
    *(_OWORD *)v28 = *(_OWORD *)v9;
    v29 = *(_QWORD *)(v9 + 24);
    *((_QWORD *)v28 + 2) = *(_QWORD *)(v9 + 16);
    *((_QWORD *)v28 + 3) = v29;
    if (v29)
    {
      v30 = (unint64_t *)(v29 + 8);
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    v28 += 32;
    v9 += 32;
  }
  while (v28 != v27);
  v32 = *a1;
  v33 = v25;
  if (*a1 != (char *)v7)
  {
    v34 = 32 * v24;
    do
    {
      v35 = &v16[v34];
      v36 = &v5[v34];
      *((_OWORD *)v35 - 2) = *(_OWORD *)&v5[v34 - 32];
      *((_OWORD *)v35 - 1) = *(_OWORD *)&v5[v34 - 16];
      *((_QWORD *)v36 - 2) = 0;
      *((_QWORD *)v36 - 1) = 0;
      v16 -= 32;
      v5 -= 32;
    }
    while (&v5[v34] != v32);
    v33 = &v16[32 * v24];
  }
  v37 = a1[1];
  if (v37 != (char *)v7)
  {
    do
    {
      *(_OWORD *)v27 = *(_OWORD *)v7;
      *((_OWORD *)v27 + 1) = *(_OWORD *)(v7 + 16);
      *(_QWORD *)(v7 + 16) = 0;
      *(_QWORD *)(v7 + 24) = 0;
      v27 += 32;
      v7 += 32;
    }
    while ((char *)v7 != v37);
    v7 = (unint64_t)a1[1];
  }
  v38 = *a1;
  *a1 = v33;
  a1[1] = v27;
  a1[2] = v26;
  while ((char *)v7 != v38)
  {
    v39 = *(std::__shared_weak_count **)(v7 - 8);
    if (v39)
    {
      v40 = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    v7 -= 32;
  }
  if (v38)
    operator delete(v38);
  return (unint64_t)v25;
}

char *sub_223198B3C(uint64_t a1, uint64_t a2, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  uint64_t v6;
  char *v7;
  char *v9;
  uint64_t v11;
  __int128 *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  char *v21;
  char *v22;
  __int128 *v23;
  char *v24;
  __int128 v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  char *v31;
  char *v32;
  char *v33;
  _BYTE *v34;
  char *v35;
  size_t v36;
  char *v37;

  v5 = *(char **)a1;
  v6 = a2 - *(_QWORD *)a1;
  v7 = (char *)(*(_QWORD *)a1 + (v6 & 0xFFFFFFFFFFFFFFF0));
  if (a5 < 1)
    return v7;
  v9 = __src;
  v12 = *(__int128 **)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  if (a5 > (v11 - (uint64_t)v12) >> 4)
  {
    v13 = a5 + (((char *)v12 - v5) >> 4);
    if (v13 >> 60)
      sub_22316E078();
    v14 = v11 - (_QWORD)v5;
    v15 = v14 >> 3;
    if (v14 >> 3 <= v13)
      v15 = v13;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v16 = 0xFFFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    if (v16)
    {
      if (v16 >> 60)
        sub_223174E94();
      v17 = (char *)operator new(16 * v16);
    }
    else
    {
      v17 = 0;
    }
    v26 = &v17[16 * (v6 >> 4)];
    v27 = 16 * a5;
    v28 = &v26[16 * a5];
    v29 = v26;
    do
    {
      v30 = *(_OWORD *)v9;
      v9 += 16;
      *(_OWORD *)v29 = v30;
      v29 += 16;
      v27 -= 16;
    }
    while (v27);
    v31 = *(char **)a1;
    if (*(char **)a1 == v7)
    {
      v33 = v26;
      v35 = &v17[16 * v16];
      v36 = (char *)v12 - v7;
      if (v12 == (__int128 *)v7)
        goto LABEL_33;
    }
    else
    {
      v32 = v7;
      v33 = v26;
      do
      {
        *((_OWORD *)v33 - 1) = *((_OWORD *)v32 - 1);
        v33 -= 16;
        v32 -= 16;
      }
      while (v32 != v31);
      v34 = *(_BYTE **)(a1 + 8);
      v35 = &v17[16 * v16];
      v36 = v34 - v7;
      if (v34 == v7)
        goto LABEL_33;
    }
    memmove(v28, v7, v36);
LABEL_33:
    v37 = *(char **)a1;
    *(_QWORD *)a1 = v33;
    *(_QWORD *)(a1 + 8) = &v28[v36];
    *(_QWORD *)(a1 + 16) = v35;
    if (v37)
      operator delete(v37);
    return v26;
  }
  v18 = ((char *)v12 - v7) >> 4;
  if (v18 >= a5)
  {
    v19 = &__src[16 * a5];
    v21 = *(char **)(a1 + 8);
    v22 = &v7[16 * a5];
    v23 = &v12[-a5];
    v24 = v21;
    if (v23 >= v12)
    {
LABEL_21:
      *(_QWORD *)(a1 + 8) = v24;
      if (v21 != v22)
        memmove(&v21[-16 * ((v21 - v22) >> 4)], v7, v21 - v22);
      if (v19 != v9)
        memmove(v7, v9, v19 - v9);
      return v7;
    }
LABEL_19:
    v24 = v21;
    do
    {
      v25 = *v23++;
      *(_OWORD *)v24 = v25;
      v24 += 16;
    }
    while (v23 < v12);
    goto LABEL_21;
  }
  v19 = &__src[16 * v18];
  v20 = a4 - v19;
  if (a4 != v19)
    memmove(*(void **)(a1 + 8), &__src[16 * v18], a4 - v19);
  v21 = (char *)v12 + v20;
  *(_QWORD *)(a1 + 8) = (char *)v12 + v20;
  if ((char *)v12 - v7 >= 1)
  {
    v22 = &v7[16 * a5];
    v23 = (__int128 *)&v21[-16 * a5];
    v24 = (char *)v12 + v20;
    if (v23 >= v12)
      goto LABEL_21;
    goto LABEL_19;
  }
  return v7;
}

BOOL sub_223198D6C(uint64_t a1, char ***a2, _QWORD **a3)
{
  char *v3;
  char *v4;
  _QWORD *v5;
  char *v7;
  char *v8;
  _QWORD *v9;
  char *v11;
  char *v12;
  _QWORD *v13;
  _BOOL8 result;

  v4 = **a2;
  v3 = (*a2)[1];
  v5 = (_QWORD *)**a3;
  if (v3 - v4 != (*a3)[1] - (_QWORD)v5)
    return 0;
  if (v4 != v3)
  {
    while (*(_QWORD *)v4 == *v5 && *((_QWORD *)v4 + 1) == v5[1])
    {
      v4 += 16;
      v5 += 2;
      if (v4 == v3)
        goto LABEL_9;
    }
    return 0;
  }
LABEL_9:
  v8 = *a2[1];
  v7 = a2[1][1];
  v9 = (_QWORD *)*a3[1];
  if (v7 - v8 != a3[1][1] - (_QWORD)v9)
    return 0;
  if (v8 != v7)
  {
    while (*(_QWORD *)v8 == *v9 && *((_QWORD *)v8 + 1) == v9[1])
    {
      v8 += 16;
      v9 += 2;
      if (v8 == v7)
        goto LABEL_17;
    }
    return 0;
  }
LABEL_17:
  v12 = *a2[2];
  v11 = a2[2][1];
  v13 = (_QWORD *)*a3[2];
  if (v11 - v12 != a3[2][1] - (_QWORD)v13)
    return 0;
  if (v12 == v11)
    return 1;
  do
  {
    result = *(_QWORD *)v12 == *v13 && *((_QWORD *)v12 + 1) == v13[1] && *((_QWORD *)v12 + 2) == v13[2];
    v12 += 32;
    v13 += 4;
  }
  while (result && v12 != v11);
  return result;
}

uint64_t sub_223198E74(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  _QWORD *v6;
  std::string *v7;
  size_t v8;
  size_t v9;
  int v10;
  size_t size;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  std::string *v16;
  size_t v17;
  std::string *v18;
  uint64_t v19;
  unsigned int data;
  size_t v21;
  std::string *v22;
  std::string::size_type v23;
  std::string *v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t *v31;
  size_t v32;
  const char *v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  const char *v36;
  size_t v37;
  std::string::size_type *p_size;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  os_log_type_t v45;
  const char *v46;
  std::__shared_weak_count *v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  void *__p[2];
  void *v52;
  std::string __dst;
  int v54;
  const char *v55;
  int v56;
  const char *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  _BYTE v60[24];
  void *v61;
  size_t v62;
  int64_t v63;
  std::string v64;
  std::string::size_type v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  const char *v70;
  std::string v71;
  unint64_t v72;
  void **v73;
  void *v74[2];
  unint64_t v75;
  char v76;
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  v54 = 0;
  sub_22456E6D0((uint64_t *)&v64);
  v6 = (_QWORD *)sub_22456E810(&v64);
  sub_2245664AC(a2, &v71);
  sub_2231813E8(v6, (uint64_t)&v71, 36);
  sub_22456E81C(&v64, __p);
  sub_22456E764((uint64_t *)&v64);
  v71.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
  v71.__r_.__value_.__l.__size_ = (std::string::size_type)__p;
  v71.__r_.__value_.__r.__words[2] = (std::string::size_type)&__dst;
  v72 = (unint64_t)__p;
  v73 = __p;
  if (v54 == -1)
    sub_22316DD70();
  v64.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71;
  ((void (*)(std::string *, std::string *))off_24EC1F9A0[v54])(&v64, &__dst);
  if (SHIBYTE(v52) < 0)
    operator delete(__p[0]);
  if (v54 == -1)
    sub_22316DD70();
  __p[0] = &v64;
  ((void (*)(std::string *__return_ptr, void **, std::string *))off_24EC1F9D0[v54])(&v71, __p, &__dst);
  if (v54 != -1)
    ((void (*)(void **, std::string *))off_24EC1F9B8[v54])(__p, &__dst);
  if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v71;
  else
    v7 = (std::string *)v71.__r_.__value_.__r.__words[0];
  __dst.__r_.__value_.__r.__words[0] = 0;
  v8 = strnlen((const char *)v7, 8uLL);
  memcpy(&__dst, v7, v8);
  v65 = __dst.__r_.__value_.__r.__words[0];
  v66 = 0;
  v67 = 0;
  v68 = 0;
  v69 = 728308004;
  __dst.__r_.__value_.__r.__words[0] = 0;
  v9 = strnlen((const char *)v7, 8uLL);
  memcpy(&__dst, v7, v9);
  kdebug_trace();
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v71.__r_.__value_.__l.__data_);
  sub_22319B660(a1, a2, &v64);
  v10 = SHIBYTE(v64.__r_.__value_.__r.__words[2]);
  if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v64.__r_.__value_.__r.__words[2]);
  else
    size = v64.__r_.__value_.__l.__size_;
  v12 = size + 4;
  if (size + 4 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v12 >= 0x17)
  {
    v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v14 = v12 | 7;
    v15 = v14 + 1;
    v13 = operator new(v14 + 1);
    v62 = size + 4;
    v63 = v15 | 0x8000000000000000;
    v61 = v13;
  }
  else
  {
    v62 = 0;
    v63 = 0;
    v61 = 0;
    v13 = &v61;
    HIBYTE(v63) = size + 4;
    if (!size)
      goto LABEL_26;
  }
  if (v10 >= 0)
    v16 = &v64;
  else
    v16 = (std::string *)v64.__r_.__value_.__r.__words[0];
  memmove(v13, v16, size);
LABEL_26:
  strcpy((char *)v13 + size, ".tmp");
  v17 = HIBYTE(v63);
  if (v63 >= 0)
    v18 = (std::string *)&v61;
  else
    v18 = (std::string *)v61;
  memset(&v71, 0, sizeof(v71));
  if (v63 < 0)
    v17 = v62;
  sub_2231816F0(&v71, v18, (std::string *)((char *)v18 + v17));
  sub_2242B18EC((uint64_t)&v71, 4u, *(_QWORD *)(a1 + 48));
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v71.__r_.__value_.__l.__data_);
  if (!sub_2242BB4E8((uint64_t)v60))
  {
    sub_223192614(__p);
    if (**((int **)__p[0] + 7) > 3)
      goto LABEL_96;
    v26 = *((unsigned __int8 *)__p[0] + 72);
    v27 = sub_22455F97C((uint64_t *)__p);
    v28 = v27;
    if (!v26 && !v27)
      goto LABEL_96;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    __dst.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
    __dst.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
    v54 = 3;
    v55 = "unknown file";
    v56 = 176;
    v58 = 0;
    v59 = 0;
    v57 = "unknown function";
    v29 = (const char *)&v61;
    if (v63 < 0)
      v29 = (const char *)v61;
    v70 = v29;
    v30 = *(_QWORD *)__dst.__r_.__value_.__l.__data_;
    v31 = (uint64_t *)(*(_QWORD *)__dst.__r_.__value_.__l.__data_ + 16);
    if (*(char *)(*(_QWORD *)__dst.__r_.__value_.__l.__data_ + 39) < 0)
    {
      v33 = *(const char **)(v30 + 16);
      v32 = *(_QWORD *)(v30 + 24);
      v35 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v35 & 1) != 0)
        goto LABEL_59;
    }
    else
    {
      v32 = *(unsigned __int8 *)(*(_QWORD *)__dst.__r_.__value_.__l.__data_ + 39);
      v33 = (const char *)(*(_QWORD *)__dst.__r_.__value_.__l.__data_ + 16);
      v34 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v34 & 1) != 0)
        goto LABEL_59;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)&v71);
      sub_223199C58("com.apple.cv3d", (unint64_t)&v71, &xmmword_255788F40);
      if ((_BYTE)v72 && SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v71.__r_.__value_.__l.__data_);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
LABEL_59:
    if (byte_255788F57 >= 0)
      v36 = (const char *)&xmmword_255788F40;
    else
      v36 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v37 = byte_255788F57;
    else
      v37 = *((_QWORD *)&xmmword_255788F40 + 1);
    v71.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v36, v33);
    p_size = &v71.__r_.__value_.__l.__size_;
    if (v37 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v37 >= 0x17)
    {
      v39 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v37 | 7) != 0x17)
        v39 = v37 | 7;
      v40 = v39 + 1;
      p_size = (std::string::size_type *)operator new(v39 + 1);
      v71.__r_.__value_.__r.__words[2] = v37;
      v72 = v40 | 0x8000000000000000;
      v71.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
    }
    else
    {
      HIBYTE(v72) = v37;
      if (!v37)
      {
LABEL_73:
        *((_BYTE *)p_size + v37) = 0;
        LOBYTE(v73) = 1;
        v41 = v74;
        if (v32 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v32 >= 0x17)
        {
          v42 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v32 | 7) != 0x17)
            v42 = v32 | 7;
          v43 = v42 + 1;
          v41 = operator new(v42 + 1);
          v74[1] = (void *)v32;
          v75 = v43 | 0x8000000000000000;
          v74[0] = v41;
        }
        else
        {
          HIBYTE(v75) = v32;
          if (!v32)
          {
LABEL_81:
            *((_BYTE *)v41 + v32) = 0;
            v76 = 1;
            v44 = objc_retainAutorelease(v71.__r_.__value_.__l.__data_);
            if (v76 && SHIBYTE(v75) < 0)
              operator delete(v74[0]);
            if ((_BYTE)v73 && SHIBYTE(v72) < 0)
              operator delete((void *)v71.__r_.__value_.__l.__size_);

            v45 = sub_22455F7B4(3u);
            sub_22319C5FC((uint64_t)&v71, v28, v31, v44, v45, v26 != 0, &v70);

            if (v26)
            {
              v46 = (const char *)&v61;
              if (v63 < 0)
                v46 = (const char *)v61;
              sub_22322C138((uint64_t)&__dst, "Invalid KDPool save stream: %s", v46);
              sub_223182C08((uint64_t)&__dst);
            }
            sub_223182C08((uint64_t)&__dst);
            v47 = v59;
            if (v59)
            {
              p_shared_owners = (unint64_t *)&v59->__shared_owners_;
              do
                v49 = __ldaxr(p_shared_owners);
              while (__stlxr(v49 - 1, p_shared_owners));
              if (!v49)
              {
                ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                std::__shared_weak_count::__release_weak(v47);
              }
            }
LABEL_96:
            v25 = 0;
            sub_2242BB4F8((uint64_t)v60);
            if ((SHIBYTE(v63) & 0x80000000) == 0)
              goto LABEL_98;
            goto LABEL_97;
          }
        }
        memmove(v41, v33, v32);
        goto LABEL_81;
      }
    }
    memmove(p_size, v36, v37);
    goto LABEL_73;
  }
  v19 = sub_2242BB4D8((uint64_t)v60);
  v71.__r_.__value_.__r.__words[0] = 1;
  sub_224554F44(__p, (uint64_t *)&v71, v19);
  __p[0] = &off_24EC1FA80;
  v52 = &unk_24EC1FBD0;
  LODWORD(v71.__r_.__value_.__l.__data_) = 11;
  sub_22455306C((uint64_t)__p, (unsigned int *)&v71);
  data = v71.__r_.__value_.__l.__data_;
  sub_22319E288((uint64_t)&v71, a3);
  sub_22319D04C(__p, (uint64_t)&v71, data);
  sub_2231A8050((uint64_t)&v71);
  memset(&v71, 0, sizeof(v71));
  v21 = HIBYTE(v63);
  if (v63 >= 0)
    v22 = (std::string *)&v61;
  else
    v22 = (std::string *)v61;
  if (v63 < 0)
    v21 = v62;
  sub_2231816F0(&v71, v22, (std::string *)((char *)v22 + v21));
  memset(&__dst, 0, sizeof(__dst));
  v23 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
  if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v24 = &v64;
  else
    v24 = (std::string *)v64.__r_.__value_.__r.__words[0];
  if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v23 = v64.__r_.__value_.__l.__size_;
  sub_2231816F0(&__dst, v24, (std::string *)((char *)v24 + v23));
  sub_2242B18B0((uint64_t)&v71, (uint64_t)&__dst, *(_QWORD *)(a1 + 48));
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_46;
  }
  else if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_46;
  }
  operator delete(v71.__r_.__value_.__l.__data_);
LABEL_46:
  v25 = 1;
  sub_224554FC4(__p);
  sub_2242BB4F8((uint64_t)v60);
  if ((SHIBYTE(v63) & 0x80000000) == 0)
    goto LABEL_98;
LABEL_97:
  operator delete(v61);
LABEL_98:
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
  kdebug_trace();
  return v25;
}

void sub_223199690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char *category,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,void *a54,int a55,__int16 a56,char a57,char a58,char a59)
{
  if (a59)
  {
    if (a58 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a20);
  sub_2242BB4F8((uint64_t)&a29);
  if (a37 < 0)
  {
    operator delete(a32);
    if ((a43 & 0x80000000) == 0)
    {
LABEL_6:
      sub_2231874DC((uint64_t)&a44);
      _Unwind_Resume(a1);
    }
  }
  else if ((a43 & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(a38);
  sub_2231874DC((uint64_t)&a44);
  _Unwind_Resume(a1);
}

void sub_223199B9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  if (a21 < 0)
  {
    operator delete(__p);
    sub_22319B964((uint64_t)&a23);
    _Unwind_Resume(a1);
  }
  sub_22319B964((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t sub_223199BDC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64) && *(char *)(a1 + 63) < 0)
  {
    operator delete(*(void **)(a1 + 40));
    if (!*(_BYTE *)(a1 + 32))
      goto LABEL_5;
  }
  else if (!*(_BYTE *)(a1 + 32))
  {
LABEL_5:

    return a1;
  }
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    goto LABEL_5;
  operator delete(*(void **)(a1 + 8));

  return a1;
}

unint64_t sub_223199C58@<X0>(char *__s@<X1>, unint64_t result@<X0>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = a3;
  if (*(_BYTE *)(result + 24))
  {
    *(_OWORD *)a3 = *(_OWORD *)result;
    a3[2] = *(_QWORD *)(result + 16);
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = 0;
    return result;
  }
  result = strlen(__s);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v3[1] = v5;
    v3[2] = v7 | 0x8000000000000000;
    *v3 = v8;
    v3 = v8;
  }
  else
  {
    *((_BYTE *)v3 + 23) = result;
    if (!result)
    {
      *(_BYTE *)v3 = 0;
      return result;
    }
  }
  result = (unint64_t)memcpy(v3, __s, v5);
  *((_BYTE *)v3 + v5) = 0;
  return result;
}

_QWORD *sub_223199D38(_QWORD *__dst, uint64_t a2)
{
  size_t v3;
  const void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v4 = *(const void **)a2;
  if (v3 >= 0x17)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    v5 = operator new(v6 + 1);
    __dst[1] = v3;
    __dst[2] = v7 | 0x8000000000000000;
    *__dst = v5;
  }
  else
  {
    *((_BYTE *)__dst + 23) = v3;
    v5 = __dst;
    if (!v3)
      goto LABEL_9;
  }
  memmove(v5, v4, v3);
LABEL_9:
  *((_BYTE *)v5 + v3) = 0;
  *((_BYTE *)__dst + 24) = 1;
  return __dst;
}

uint64_t sub_223199DE8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(std::__shared_weak_count **)(a1 + 16);
      if (v5)
        goto LABEL_6;
      return a1;
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    return a1;
LABEL_6:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t sub_223199E94(uint64_t a1)
{
  uint64_t v1;

  v1 = a1;
  if (*(char *)(a1 + 31) < 0)
  {
    operator delete(*(void **)(a1 + 8));
    a1 = v1;
  }
  return nullsub_30(a1);
}

void sub_223199ED8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223199EFC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x227684CE8);
  return result;
}

uint64_t sub_223199F1C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIvE27__shared_ptr_default_deleteIv13os_log_pack_sEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIvE27__shared_ptr_default_deleteIv13os_log_pack_sEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIvE27__shared_ptr_default_deleteIv13os_log_pack_sEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIvE27__shared_ptr_default_deleteIv13os_log_pack_sEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_223199F8C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F840;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223199F9C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F840;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223199FCC(uint64_t a1)
{
  if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    return nullsub_30(a1 + 24);
  operator delete(*(void **)(a1 + 32));
  return nullsub_30(a1 + 24);
}

void sub_22319A010(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t *sub_22319A054(uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 32);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v6 = *(std::__shared_weak_count **)(v2 + 16);
    if (v6)
    {
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    MEMORY[0x227684CE8](v2, 0x10F0C40B62ED6C6);
  }
  return a1;
}

uint64_t sub_22319A110(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  unsigned int v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  __int128 v37;
  _BYTE v39[28];
  uint64_t v40;
  int v41;
  _BYTE v42[16];
  std::__shared_weak_count *v43;
  _DWORD v44[8];
  _QWORD v45[2];

  v6 = a1 + 8;
  v7 = sub_2231D041C(a2);
  sub_2245054DC((uint64_t)v39, v7);
  sub_22415BBE0(v6, (uint64_t)v39);
  v8 = a1 + 24;
  v9 = sub_2231D0224(a2);
  sub_224158A68((_QWORD *)(a1 + 24), v9);
  v10 = (_DWORD *)sub_2231CC494(a2);
  *(_DWORD *)(a1 + 64) = *v10;
  *(_DWORD *)(a1 + 68) = v10[1];
  *(_DWORD *)(a1 + 72) = v10[2];
  *(_DWORD *)(a1 + 76) = v10[3];
  v11 = sub_2231D0424(a2);
  sub_223C8EBA4(a1 + 80, v11);
  v12 = (int *)sub_2231D04FC(a2);
  sub_22319A7C0(a1 + 104, v12);
  sub_22416BC94(a1 + 136);
  sub_22416BC94(a1 + 240);
  sub_22416BC94(a1 + 344);
  sub_22416BC94(a1 + 448);
  sub_22416BC94(a1 + 552);
  sub_22416BC94(a1 + 656);
  v13 = sub_2231D0504(a2);
  *(_BYTE *)(a1 + 760) = 0;
  *(_BYTE *)(a1 + 1288) = 0;
  if (*(_BYTE *)(v13 + 80))
  {
    sub_223C9AAA0(a1 + 760);
    *(_BYTE *)(a1 + 1288) = 1;
  }
  *(_BYTE *)(a1 + 1296) = 0;
  *(_BYTE *)(a1 + 1300) = 0;
  v14 = sub_2231D051C(a2);
  sub_224518968(a1 + 1304, v14);
  v15 = 0;
  *(_BYTE *)(a1 + 1320) = 0;
  *(_BYTE *)(a1 + 1356) = 0;
  do
  {
    if (((a3 >> v15) & 1) == 0)
      goto LABEL_5;
    sub_22319AC90(a2, v15, (uint64_t)v42);
    if (v44[0])
      v21 = v44[1] == 0;
    else
      v21 = 1;
    if (v21)
      v22 = 1;
    else
      v22 = word_2245B97D0[v15];
    v23 = v8 & 0xFFFFFFFF00000000 | v22;
    v8 = v23 | 0x10000;
    sub_22416C2FC((uint64_t)v39, (uint64_t)v42, v23 | 0x10000, v16, v17, v18, v19, v20);
    v24 = a1 + 136 + 104 * v15;
    *(_OWORD *)v24 = *(_OWORD *)v39;
    *(_OWORD *)(v24 + 12) = *(_OWORD *)&v39[12];
    v25 = v24 + 32;
    v28 = *(_DWORD *)(v24 + 96);
    v27 = (_DWORD *)(v24 + 96);
    v26 = v28;
    if (v28 != -1)
    {
      if (v41 == -1)
      {
        ((void (*)(_QWORD *, uint64_t))off_24EC1F928[v26])(v45, v25);
        *v27 = -1;
      }
      else
      {
LABEL_17:
        v45[0] = v25;
        ((void (*)(_QWORD *))off_24EC1F938[v41])(v45);
      }
      if (v41 != -1)
        ((void (*)(_QWORD *, uint64_t *))off_24EC1F928[v41])(v45, &v40);
      goto LABEL_20;
    }
    if (v41 != -1)
      goto LABEL_17;
LABEL_20:
    nullsub_30(v44);
    v29 = v43;
    if (v43)
    {
      p_shared_owners = (unint64_t *)&v43->__shared_owners_;
      do
        v31 = __ldaxr(p_shared_owners);
      while (__stlxr(v31 - 1, p_shared_owners));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    nullsub_30(v42);
LABEL_5:
    ++v15;
  }
  while (v15 != 6);
  if (!a3 || (a3 & 4) != 0)
  {
    v32 = sub_2231D050C(a2);
    v33 = *(_DWORD *)v32;
    *(_BYTE *)(a1 + 1300) = *(_BYTE *)(v32 + 4);
    *(_DWORD *)(a1 + 1296) = v33;
    v34 = sub_2231D0514(a2);
    if (*(_BYTE *)(v34 + 36))
    {
      v35 = *(unsigned __int8 *)(a1 + 1356);
      v36 = *(_DWORD *)(v34 + 32);
      v37 = *(_OWORD *)(v34 + 16);
      *(_OWORD *)(a1 + 1320) = *(_OWORD *)v34;
      *(_OWORD *)(a1 + 1336) = v37;
      *(_DWORD *)(a1 + 1352) = v36;
      if (!v35)
        *(_BYTE *)(a1 + 1356) = 1;
    }
  }
  return a1;
}

void sub_22319A464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9, uint64_t a10, void **a11, uint64_t a12)
{
  uint64_t v12;
  unsigned int *v13;
  void *v15;

  sub_223167354(a10);
  if (*(_BYTE *)(v12 + 1288))
    sub_22319AB9C(a9);
  sub_22319A650(v13);
  v15 = *(void **)(v12 + 112);
  if (v15)
  {
    *(_QWORD *)(v12 + 120) = v15;
    operator delete(v15);
  }
  sub_22319A750(a11);
  sub_22365B530(a12);
  _Unwind_Resume(a1);
}

uint64_t sub_22319A588(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 96);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24EC1F928[v2])(&v4, a1 + 32);
  *(_DWORD *)(a1 + 96) = -1;
  return a1;
}

uint64_t sub_22319A5E0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  nullsub_30(a1 + 24);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

unsigned int *sub_22319A650(unsigned int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v2 = a1[154];
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, unsigned int *))off_24EC1F928[v2])(&v9, a1 + 138);
  a1[154] = -1;
  v3 = a1[128];
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, unsigned int *))off_24EC1F928[v3])(&v9, a1 + 112);
  a1[128] = -1;
  v4 = a1[102];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, unsigned int *))off_24EC1F928[v4])(&v9, a1 + 86);
  a1[102] = -1;
  v5 = a1[76];
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, unsigned int *))off_24EC1F928[v5])(&v9, a1 + 60);
  a1[76] = -1;
  v6 = a1[50];
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, unsigned int *))off_24EC1F928[v6])(&v9, a1 + 34);
  a1[50] = -1;
  v7 = a1[24];
  if ((_DWORD)v7 != -1)
    ((void (*)(char *, unsigned int *))off_24EC1F928[v7])(&v9, a1 + 8);
  a1[24] = -1;
  return a1;
}

void **sub_22319A750(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 3);
        if (v5)
        {
          *((_QWORD *)v3 - 2) = v5;
          operator delete(v5);
        }
        v3 -= 40;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_22319A7C0(uint64_t a1, int *a2)
{
  _QWORD *v3;
  int v4;
  int v5;
  unint64_t v6;
  int v7;
  int v8;
  int v9;
  int i;
  uint64_t v11;
  char v12;
  int v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  int v19;
  __int128 v20;
  _BYTE v21[15];

  *(_QWORD *)(a1 + 8) = 0;
  v3 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v4 = *a2;
  v5 = a2[1];
  *(_DWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 4) = v5;
  v6 = (v5 * v4);
  if ((_DWORD)v6)
    sub_22319A960((void **)(a1 + 8), v6);
  v19 = *a2;
  if (*a2)
  {
    v7 = a2[1];
    if (v7)
    {
      v8 = 0;
      v9 = 0;
LABEL_6:
      for (i = 0; i != v7; ++i)
      {
        v11 = *((_QWORD *)a2 + 5) + 180 * (a2[2] * v9 + a2[3] * i);
        v12 = *(_BYTE *)(v11 + 132);
        v13 = *(_DWORD *)(v11 + 160);
        v14 = *(_BYTE *)(v11 + 164);
        *(_QWORD *)&v21[3] = *(_QWORD *)(v11 + 168);
        *(_DWORD *)&v21[11] = *(_DWORD *)(v11 + 176);
        v15 = *v3 + 180 * (v8 + i);
        v20 = *(_OWORD *)(v11 + 136);
        v16 = *(_QWORD *)(v11 + 152);
        memmove((void *)v15, (const void *)v11, 0x84uLL);
        *(_BYTE *)(v15 + 132) = v12;
        *(_OWORD *)(v15 + 136) = v20;
        *(_QWORD *)(v15 + 152) = v16;
        *(_DWORD *)(v15 + 160) = v13;
        *(_BYTE *)(v15 + 164) = v14;
        *(_QWORD *)(v15 + 165) = *(_QWORD *)v21;
        *(_QWORD *)(v15 + 172) = *(_QWORD *)&v21[7];
      }
      v8 += i;
      while (++v9 != v19)
      {
        v7 = a2[1];
        if (v7)
          goto LABEL_6;
      }
    }
  }
  return a1;
}

void sub_22319A940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  void **v9;
  void *v11;

  v11 = *v9;
  if (*v9)
  {
    *(_QWORD *)(a9 + 16) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_22319A960(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  v5 = (char *)a1[1];
  v4 = a1[2];
  if (0x4FA4FA4FA4FA4FA5 * ((v4 - v5) >> 2) >= a2)
  {
    if (a2)
    {
      v11 = &v5[180 * a2];
      do
      {
        *((_QWORD *)v5 + 20) = 0;
        *((_OWORD *)v5 + 8) = 0uLL;
        *((_OWORD *)v5 + 9) = 0uLL;
        *((_OWORD *)v5 + 6) = 0uLL;
        *((_OWORD *)v5 + 7) = 0uLL;
        *((_OWORD *)v5 + 4) = 0uLL;
        *((_OWORD *)v5 + 5) = 0uLL;
        *((_OWORD *)v5 + 2) = 0uLL;
        *((_OWORD *)v5 + 3) = 0uLL;
        *(_OWORD *)v5 = 0uLL;
        *((_OWORD *)v5 + 1) = 0uLL;
        *((_QWORD *)v5 + 21) = 1065353216;
        *((_DWORD *)v5 + 44) = 0;
        v5 += 180;
      }
      while (v5 != v11);
      v5 = v11;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = 0x4FA4FA4FA4FA4FA5 * ((v5 - (_BYTE *)*a1) >> 2);
    v7 = v6 + a2;
    if (v6 + a2 > 0x16C16C16C16C16CLL)
      sub_22316E078();
    v8 = 0x4FA4FA4FA4FA4FA5 * ((v4 - (_BYTE *)*a1) >> 2);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0xB60B60B60B60B6)
      v9 = 0x16C16C16C16C16CLL;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0x16C16C16C16C16CLL)
        sub_223174E94();
      v10 = (char *)operator new(180 * v9);
    }
    else
    {
      v10 = 0;
    }
    v12 = &v10[180 * v6];
    v13 = &v12[180 * a2];
    v14 = v12;
    do
    {
      *((_QWORD *)v14 + 20) = 0;
      *((_OWORD *)v14 + 8) = 0uLL;
      *((_OWORD *)v14 + 9) = 0uLL;
      *((_OWORD *)v14 + 6) = 0uLL;
      *((_OWORD *)v14 + 7) = 0uLL;
      *((_OWORD *)v14 + 4) = 0uLL;
      *((_OWORD *)v14 + 5) = 0uLL;
      *((_OWORD *)v14 + 2) = 0uLL;
      *((_OWORD *)v14 + 3) = 0uLL;
      *(_OWORD *)v14 = 0uLL;
      *((_OWORD *)v14 + 1) = 0uLL;
      *((_QWORD *)v14 + 21) = 1065353216;
      *((_DWORD *)v14 + 44) = 0;
      v14 += 180;
    }
    while (v14 != v13);
    v15 = (char *)*a1;
    if (v5 != *a1)
    {
      do
      {
        v16 = *(_OWORD *)(v5 - 180);
        v17 = *(_OWORD *)(v5 - 164);
        v18 = *(_OWORD *)(v5 - 148);
        *(_OWORD *)(v12 - 132) = *(_OWORD *)(v5 - 132);
        *(_OWORD *)(v12 - 148) = v18;
        *(_OWORD *)(v12 - 164) = v17;
        *(_OWORD *)(v12 - 180) = v16;
        v19 = *(_OWORD *)(v5 - 116);
        v20 = *(_OWORD *)(v5 - 100);
        v21 = *(_OWORD *)(v5 - 84);
        *(_OWORD *)(v12 - 68) = *(_OWORD *)(v5 - 68);
        *(_OWORD *)(v12 - 84) = v21;
        *(_OWORD *)(v12 - 100) = v20;
        *(_OWORD *)(v12 - 116) = v19;
        v22 = *(_OWORD *)(v5 - 52);
        v23 = *(_OWORD *)(v5 - 36);
        v24 = *(_OWORD *)(v5 - 20);
        *((_DWORD *)v12 - 1) = *((_DWORD *)v5 - 1);
        *(_OWORD *)(v12 - 20) = v24;
        *(_OWORD *)(v12 - 36) = v23;
        *(_OWORD *)(v12 - 52) = v22;
        v12 -= 180;
        v5 -= 180;
      }
      while (v5 != v15);
      v5 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v13;
    a1[2] = &v10[180 * v9];
    if (v5)
      operator delete(v5);
  }
}

unsigned int *sub_22319AB9C(unsigned int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;

  v2 = a1[130];
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, unsigned int *))off_24EC1F928[v2])(&v8, a1 + 114);
  a1[130] = -1;
  v3 = a1[104];
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, unsigned int *))off_24EC1F928[v3])(&v9, a1 + 88);
  a1[104] = -1;
  v4 = a1[78];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, unsigned int *))off_24EC1F928[v4])(&v10, a1 + 62);
  a1[78] = -1;
  v5 = a1[52];
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, unsigned int *))off_24EC1F928[v5])(&v11, a1 + 36);
  a1[52] = -1;
  v6 = a1[26];
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, unsigned int *))off_24EC1F928[v6])(&v12, a1 + 10);
  a1[26] = -1;
  return a1;
}

void sub_22319AC90(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  __int16 v14;
  unint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;

  v6 = atomic_load((unsigned __int8 *)&qword_255788F98);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_255788F98))
  {
    sub_22319AE28(&qword_255788F60);
    __cxa_atexit((void (*)(void *))sub_22319A5E0, &qword_255788F60, &dword_22314D000);
    __cxa_guard_release(&qword_255788F98);
  }
  v7 = *(_QWORD *)(a1 + 16 * a2 + 368);
  *(_QWORD *)a3 = &off_24EC1F8C8;
  if (v7)
  {
    sub_22319B128(v7, a3 + 8);
  }
  else
  {
    v8 = qword_255788F68;
    v9 = (std::__shared_weak_count *)unk_255788F70;
    if (unk_255788F70)
    {
      v10 = (unint64_t *)(unk_255788F70 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
      v12 = qword_255788F88;
      v13 = dword_255788F90;
      v14 = word_255788F94;
      do
        v15 = __ldxr(v10);
      while (__stxr(v15 + 1, v10));
    }
    else
    {
      v12 = qword_255788F88;
      v13 = dword_255788F90;
      v14 = word_255788F94;
    }
    *(_QWORD *)(a3 + 8) = v8;
    *(_QWORD *)(a3 + 16) = v9;
    *(_QWORD *)(a3 + 24) = qword_255788F78;
    *(_DWORD *)(a3 + 32) = dword_255788F80;
    *(_QWORD *)(a3 + 40) = v12;
    *(_DWORD *)(a3 + 48) = v13;
    *(_WORD *)(a3 + 52) = v14;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_22319ADFC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255788F98);
  _Unwind_Resume(a1);
}

void sub_22319AE14(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_30(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_22319AE28(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  *a1 = &off_24EC1F8C8;
  v8 = 0;
  v9 = 0;
  v7 = 0;
  v6 = 0;
  sub_22319B010((uint64_t)(a1 + 1), &v8, (uint64_t)&v6, 0, 1);
  nullsub_30(&v6);
  v2 = v9;
  if (!v9)
    return a1;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22319AED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  nullsub_30(&a9);
  sub_223167354((uint64_t)&a11);
  nullsub_30(v11);
  _Unwind_Resume(a1);
}

void sub_22319AEF4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  nullsub_30(a1 + 24);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22319AF68(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_22319AF70(uint64_t a1)
{
  return a1 + 24;
}

uint64_t sub_22319AF78@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 24);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 32);
  return result;
}

uint64_t sub_22319AF8C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_22319B010(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  int v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  __int16 v16;

  v5 = result;
  v6 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  *(_QWORD *)result = v6;
  *(_QWORD *)(result + 8) = v7;
  v10 = *(_DWORD *)(a3 + 8);
  *(_QWORD *)(result + 16) = *(_QWORD *)a3;
  *(_DWORD *)(result + 24) = v10;
  *(_QWORD *)(result + 32) = a4;
  *(_DWORD *)(result + 40) = a5;
  if (v6)
  {
    if (v7)
    {
      v11 = (unint64_t *)&v7->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      do
        v13 = __ldaxr(v11);
      while (__stlxr(v13 - 1, v11));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 104))(v6);
    v15 = v14;
    if ((v14 & 0xFFFFFF) <= 0x10000)
      v15 = 0;
    v16 = v14 & 0xFF00;
    if ((v14 & 0xFF0000) == 0)
      v16 = 0;
    *(_WORD *)(v5 + 44) = v16 & 0xFF00 | v15;
    return v5;
  }
  else
  {
    *(_WORD *)(result + 44) = 0;
  }
  return result;
}

void sub_22319B108(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  nullsub_30(v2);
  if (*(_QWORD *)(v1 + 8))
    sub_224574454();
  _Unwind_Resume(a1);
}

void sub_22319B128(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  v20 = v4;
  v21 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v18 = v4;
    v19 = v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  else
  {
    v18 = v4;
    v19 = 0;
  }
  v9 = *(_QWORD *)(a1 + 48);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_DWORD *)(a1 + 40);
  sub_22319B010(a2, &v18, (uint64_t)&v16, v9, *(_DWORD *)(a1 + 56));
  nullsub_30(&v16);
  v10 = v19;
  if (v19)
  {
    v11 = (unint64_t *)&v19->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v21;
  if (v21)
  {
    v14 = (unint64_t *)&v21->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_22319B238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  nullsub_30(&a9);
  sub_223167354((uint64_t)&a11);
  sub_223167354((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_22319B25C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 40);
  return result;
}

uint64_t sub_22319B270(uint64_t a1)
{
  return *(unsigned int *)(a1 + 56);
}

uint64_t sub_22319B278(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  nullsub_30(a2 + 24);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v3)
    return nullsub_30(a2);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return nullsub_30(a2);
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return nullsub_30(a2);
}

uint64_t sub_22319B2E8(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  nullsub_30(a2 + 32);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v3)
    return nullsub_30(a2);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return nullsub_30(a2);
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return nullsub_30(a2);
}

uint64_t sub_22319B358(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  nullsub_30(a1 + 32);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

__n128 sub_22319B3C8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __n128 result;
  char v12;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 64);
  if ((_DWORD)v5 == -1)
    goto LABEL_10;
  if ((_DWORD)v5)
  {
    ((void (*)(char *, uint64_t))off_24EC1F928[v5])(&v12, v4);
LABEL_10:
    *(_DWORD *)(v4 + 64) = -1;
    *(_QWORD *)v4 = &off_24EC1F8C8;
    *(_OWORD *)(v4 + 8) = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    result = *(__n128 *)(a3 + 24);
    *(_OWORD *)(v4 + 38) = *(_OWORD *)(a3 + 38);
    *(__n128 *)(v4 + 24) = result;
    *(_DWORD *)(v4 + 64) = 0;
    return result;
  }
  v7 = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v8 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v7;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  result = *(__n128 *)(a3 + 24);
  *(_OWORD *)(a2 + 38) = *(_OWORD *)(a3 + 38);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 sub_22319B4C4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __n128 result;
  __int128 v12;
  __int128 v13;
  char v14;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 64);
  if ((_DWORD)v5 == -1)
    goto LABEL_10;
  if ((_DWORD)v5 != 1)
  {
    ((void (*)(char *, uint64_t))off_24EC1F928[v5])(&v14, v4);
LABEL_10:
    *(_DWORD *)(v4 + 64) = -1;
    *(_QWORD *)v4 = &off_24EC1F958;
    *(_OWORD *)(v4 + 8) = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    result = *(__n128 *)(a3 + 24);
    v13 = *(_OWORD *)(a3 + 40);
    *(_QWORD *)(v4 + 54) = *(_QWORD *)(a3 + 54);
    *(_OWORD *)(v4 + 40) = v13;
    *(__n128 *)(v4 + 24) = result;
    *(_DWORD *)(v4 + 64) = 1;
    return result;
  }
  v7 = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v8 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v7;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  result = *(__n128 *)(a3 + 24);
  v12 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 54) = *(_QWORD *)(a3 + 54);
  *(_OWORD *)(a2 + 40) = v12;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void sub_22319B5D8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  nullsub_30(a1 + 32);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22319B64C(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_22319B654(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void sub_22319B660(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5;
  std::string *v6;
  std::string *v7;
  int v8;
  std::string *v9;
  uint64_t v10;
  std::__fs::filesystem::path v11;
  std::__fs::filesystem::path __p;
  std::string v13;
  std::string __dst;

  memset(&v13, 0, sizeof(v13));
  v7 = *(std::string **)(a1 + 56);
  v5 = a1 + 56;
  v6 = v7;
  v8 = *(char *)(v5 + 23);
  if (v8 >= 0)
    v9 = (std::string *)v5;
  else
    v9 = v6;
  v10 = *(_QWORD *)(v5 + 8);
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(v5 + 23);
  sub_2231816F0(&v13, v9, (std::string *)((char *)v9 + v10));
  sub_224566698(a2, (uint64_t)&v11);
  __p = v11;
  memset(&v11, 0, sizeof(v11));
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    sub_223197FA4(&__dst, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
  else
    __dst = v13;
  sub_22319C30C((uint64_t)&__dst, &__p);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(a3, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_18;
    }
    else if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      goto LABEL_18;
    }
LABEL_14:
    if (SHIBYTE(v11.__pn_.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_19;
    goto LABEL_15;
  }
  *a3 = __dst;
  if ((SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_14;
LABEL_18:
  operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_19:
    operator delete(v11.__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_20;
    return;
  }
LABEL_15:
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
LABEL_20:
    operator delete(v13.__r_.__value_.__l.__data_);
}

void sub_22319B7A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (*(char *)(v27 - 25) < 0)
  {
    operator delete(*(void **)(v27 - 48));
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a15 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a27 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  operator delete(a10);
  if ((a27 & 0x80000000) == 0)
LABEL_6:
    _Unwind_Resume(exception_object);
LABEL_5:
  operator delete(__p);
  goto LABEL_6;
}

void sub_22319B824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if ((a21 & 0x80000000) == 0)
    JUMPOUT(0x22319B7E8);
  JUMPOUT(0x22319B7E0);
}

void sub_22319B83C(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  _QWORD *v5;
  uint64_t v6;
  void *__p[2];
  char v8;
  _QWORD *v9;
  _QWORD v10[6];

  v10[5] = *MEMORY[0x24BDAC8D0];
  sub_22456E6D0((uint64_t *)&v9);
  v5 = (_QWORD *)sub_22456E810(&v9);
  sub_2245664AC(a3, v10);
  sub_2231813E8(v5, (uint64_t)v10, 36);
  sub_22456E81C(&v9, __p);
  sub_22456E764((uint64_t *)&v9);
  v10[0] = a2;
  v10[1] = __p;
  v10[2] = a2;
  v10[3] = __p;
  v10[4] = __p;
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    sub_22316DD70();
  v9 = v10;
  ((void (*)(_QWORD **, uint64_t))off_24EC1F9A0[v6])(&v9, a2);
  if (v8 < 0)
    operator delete(__p[0]);
}

void sub_22319B934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22319B950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_22456E764((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_22319B964(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24EC1F9B8[v2])(&v4, a1);
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

__n128 sub_22319B9BC(__n128 ***a1)
{
  __n128 *v1;
  __n128 *v2;
  uint64_t v3;
  __n128 result;
  char v5;

  v1 = **a1;
  v2 = (*a1)[1];
  v3 = v1[1].n128_u32[2];
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, __n128 *))off_24EC1F9B8[v3])(&v5, v1);
  v1[1].n128_u32[2] = -1;
  result = *v2;
  v1[1].n128_u64[0] = v2[1].n128_u64[0];
  *v1 = result;
  v2->n128_u64[1] = 0;
  v2[1].n128_u64[0] = 0;
  v2->n128_u64[0] = 0;
  v1[1].n128_u32[2] = 1;
  return result;
}

void sub_22319BA34(uint64_t a1, uint64_t a2)
{
  sub_22319BBB8((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

char *sub_22319BA40(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  __int128 v5;
  char *result;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_22319BED8((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
  }
  else
  {
    v5 = *(_OWORD *)v3;
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(v3 + 16);
    *(_OWORD *)v4 = v5;
    *(_QWORD *)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)v3 = 0;
    result = (char *)(v4 + 24);
    *(_QWORD *)(a2 + 8) = v4 + 24;
  }
  return result;
}

void sub_22319BAAC(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void sub_22319BAC0(uint64_t a1, void **a2)
{
  void **v2;
  void **v4;
  void *v5;
  void *v6;

  v2 = (void **)*a2;
  if (*a2)
  {
    v4 = (void **)a2[1];
    v5 = *a2;
    if (v4 == v2)
    {
      a2[1] = v2;
      operator delete(v5);
    }
    else
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
          operator delete(*(v4 - 3));
        v4 -= 3;
      }
      while (v4 != v2);
      v6 = *a2;
      a2[1] = v2;
      operator delete(v6);
    }
  }
}

void **sub_22319BB48(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 3;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_22319BBB8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  void *v9;
  _BYTE v10[15];
  char v11;
  void *__p[2];
  uint64_t v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v14 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v14[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = v3;
  *(_QWORD *)v10 = v14[0];
  *(_QWORD *)&v10[7] = *(_QWORD *)((char *)v14 + 7);
  v11 = v4;
  memset(v14, 0, 15);
  v5 = a1[1];
  v6 = *(_QWORD *)(v5 + 16);
  *(_OWORD *)__p = *(_OWORD *)v5;
  v13 = v6;
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  v7 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v7 != -1)
    ((void (*)(char *, uint64_t))off_24EC1F9B8[v7])(&v8, v2);
  *(_DWORD *)(v2 + 24) = -1;
  sub_22319BD1C((_QWORD *)v2, (uint64_t)&v9, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    if ((v11 & 0x80000000) == 0)
      return;
LABEL_7:
    operator delete(v9);
    return;
  }
  operator delete(__p[0]);
  if (v11 < 0)
    goto LABEL_7;
}

void sub_22319BCE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_22319BD1C(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __int128 v8;
  char *v9;
  __int128 *v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >= 0xAAAAAAAAAAAAAABLL)
      sub_22316E078();
    v5 = 24 * a3;
    v6 = (char *)operator new(24 * a3);
    v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    do
    {
      v9 = &v6[v7];
      v10 = (__int128 *)(a2 + v7);
      if (*(char *)(a2 + v7 + 23) < 0)
      {
        sub_223197FA4(v9, *(void **)v10, *((_QWORD *)v10 + 1));
      }
      else
      {
        v8 = *v10;
        *((_QWORD *)v9 + 2) = *((_QWORD *)v10 + 2);
        *(_OWORD *)v9 = v8;
      }
      v7 += 24;
    }
    while (v5 != v7);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_22319BDF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_22319BE44(&a9);
  _Unwind_Resume(a1);
}

void sub_22319BE08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 24)
  {
    if (*(char *)(v10 + v11 - 1) < 0)
      operator delete(*(void **)(v10 + v11 - 24));
  }
  *(_QWORD *)(v9 + 8) = v10;
  sub_22319BE44(&a9);
  _Unwind_Resume(a1);
}

void ***sub_22319BE44(void ***result)
{
  void ***v1;
  void **v2;
  void **v3;
  void **v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void **)**result;
    if (v3)
    {
      v4 = (void **)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0)
            operator delete(*(v4 - 3));
          v4 -= 3;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

char *sub_22319BED8(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  char *v14;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v9 = &v7[24 * v6];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v10 = v8 + 24;
  v11 = (char *)*a1;
  v12 = (char *)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (!v12)
      return v10;
    goto LABEL_20;
  }
  do
  {
    v13 = *(_OWORD *)(v12 - 24);
    *((_QWORD *)v8 - 1) = *((_QWORD *)v12 - 1);
    *(_OWORD *)(v8 - 24) = v13;
    v8 -= 24;
    *((_QWORD *)v12 - 2) = 0;
    *((_QWORD *)v12 - 1) = 0;
    *((_QWORD *)v12 - 3) = 0;
    v12 -= 24;
  }
  while (v12 != v11);
  v14 = (char *)*a1;
  v12 = (char *)a1[1];
  *a1 = v8;
  a1[1] = v10;
  a1[2] = v9;
  if (v12 != v14)
  {
    do
    {
      if (*(v12 - 1) < 0)
        operator delete(*((void **)v12 - 3));
      v12 -= 24;
    }
    while (v12 != v14);
    v12 = v14;
  }
  if (v12)
LABEL_20:
    operator delete(v12);
  return v10;
}

uint64_t sub_22319C040(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v5;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_22319C0A4(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

__n128 sub_22319C0B0@<Q0>(__n128 *a1@<X1>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  return result;
}

void sub_22319C0CC(uint64_t *a1@<X1>, std::string *a2@<X8>, int64x2_t a3@<Q3>, int8x16_t a4@<Q5>)
{
  sub_22319C0DC(*a1, a1[1], 0, 0, a2, a3, a4);
}

void sub_22319C0DC(uint64_t a1@<X0>, uint64_t a2@<X1>, const std::string::value_type *a3@<X2>, std::string::size_type a4@<X3>, std::string *a5@<X8>, int64x2_t a6@<Q3>, int8x16_t a7@<Q5>)
{
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned __int8 *v21;
  int64x2_t v22;
  int8x16_t v23;
  int64x2_t v24;
  const double *v25;
  const double *v26;
  unsigned __int128 v27;
  unsigned __int128 v28;
  int32x2_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int32x2_t v32;
  int8x16_t v33;
  int8x16_t v34;
  uint64_t v35;
  int v36;
  const std::string::value_type *v37;
  std::string::size_type v38;
  uint64_t i;
  int v40;
  const std::string::value_type *v41;
  std::string::size_type v42;

  v12 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  if (v12 <= 1)
    v13 = 1;
  else
    v13 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  v14 = (v13 - 1) * a4;
  v15 = a2 - a1;
  if (a2 == a1)
  {
    v16 = 0;
  }
  else
  {
    if ((unint64_t)(v15 - 24) >= 0x60)
    {
      v18 = (v15 - 24) / 0x18uLL + 1;
      v19 = v18 & 3;
      if ((v18 & 3) == 0)
        v19 = 4;
      v20 = v18 - v19;
      v17 = a1 + 24 * v20;
      v21 = (unsigned __int8 *)(a1 + 47);
      v22 = 0uLL;
      v23.i64[0] = 255;
      v23.i64[1] = 255;
      v24 = 0uLL;
      do
      {
        a6.i8[0] = *(v21 - 24);
        a6.i8[4] = *v21;
        a7.i8[0] = v21[24];
        a7.i8[4] = v21[48];
        v25 = (const double *)(v21 - 39);
        v26 = (const double *)(v21 + 9);
        v27 = (unsigned __int128)vld3q_f64(v25);
        v28 = (unsigned __int128)vld3q_f64(v26);
        v29 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a6.i8, 0x18uLL), 0x18uLL));
        v30.i64[0] = v29.i32[0];
        v30.i64[1] = v29.i32[1];
        v31 = v30;
        v32 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a7.i8, 0x18uLL), 0x18uLL));
        v30.i64[0] = v32.i32[0];
        v30.i64[1] = v32.i32[1];
        v33 = v30;
        v30.i64[0] = a6.u32[0];
        v30.i64[1] = a6.u32[1];
        v34 = vbicq_s8(v30, v31);
        v30.i64[0] = a7.u32[0];
        v30.i64[1] = a7.u32[1];
        a6 = (int64x2_t)vorrq_s8(vandq_s8((int8x16_t)v27, v31), vandq_s8(v34, v23));
        a7 = vandq_s8((int8x16_t)v28, v33);
        v22 = vaddq_s64(a6, v22);
        v24 = vaddq_s64((int64x2_t)vorrq_s8(a7, vandq_s8(vbicq_s8(v30, v33), v23)), v24);
        v21 += 96;
        v20 -= 4;
      }
      while (v20);
      v16 = vaddvq_s64(vaddq_s64(v24, v22));
    }
    else
    {
      v16 = 0;
      v17 = a1;
    }
    do
    {
      v35 = *(unsigned __int8 *)(v17 + 23);
      if ((v35 & 0x80u) != 0)
        v35 = *(_QWORD *)(v17 + 8);
      v16 += v35;
      v17 += 24;
    }
    while (v17 != a2);
  }
  a5->__r_.__value_.__r.__words[0] = 0;
  a5->__r_.__value_.__l.__size_ = 0;
  a5->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a5, v16 + v14);
  if (v15 >= 1)
  {
    v36 = *(char *)(a1 + 23);
    v37 = v36 >= 0 ? (const std::string::value_type *)a1 : *(const std::string::value_type **)a1;
    v38 = v36 >= 0 ? *(unsigned __int8 *)(a1 + 23) : *(_QWORD *)(a1 + 8);
    std::string::append(a5, v37, v38);
    if ((unint64_t)v12 >= 2)
    {
      for (i = a1 + 24; i != a2; i += 24)
      {
        std::string::append(a5, a3, a4);
        v40 = *(char *)(i + 23);
        if (v40 >= 0)
          v41 = (const std::string::value_type *)i;
        else
          v41 = *(const std::string::value_type **)i;
        if (v40 >= 0)
          v42 = *(unsigned __int8 *)(i + 23);
        else
          v42 = *(_QWORD *)(i + 8);
        std::string::append(a5, v41, v42);
      }
    }
  }
}

void sub_22319C2E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_22319C30C(uint64_t a1, std::__fs::filesystem::path *this)
{
  char v4;
  __int128 v5;
  int v7;
  std::__fs::filesystem::path *v8;
  std::string::size_type v9;
  std::__fs::filesystem::path *v10;
  size_t size;

  if (std::__fs::filesystem::path::__root_directory(this).__size_)
  {
    if ((std::__fs::filesystem::path *)a1 == this)
      return a1;
    v4 = HIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
    if (*(char *)(a1 + 23) < 0)
    {
      if (v4 >= 0)
        v10 = this;
      else
        v10 = (std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
      if (v4 >= 0)
        size = HIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
      else
        size = this->__pn_.__r_.__value_.__l.__size_;
      sub_22319C4B8((void **)a1, v10, size);
      return a1;
    }
    else
    {
      if ((*((_BYTE *)&this->__pn_.__r_.__value_.__s + 23) & 0x80) == 0)
      {
        v5 = *(_OWORD *)&this->__pn_.__r_.__value_.__l.__data_;
        *(_QWORD *)(a1 + 16) = *((_QWORD *)&this->__pn_.__r_.__value_.__l + 2);
        *(_OWORD *)a1 = v5;
        return a1;
      }
      sub_22319C3F4((_QWORD *)a1, this->__pn_.__r_.__value_.__l.__data_, this->__pn_.__r_.__value_.__l.__size_);
      return a1;
    }
  }
  else
  {
    if (std::__fs::filesystem::path::__filename((const std::__fs::filesystem::path *)a1).__size_)
      std::string::push_back((std::string *)a1, 47);
    v7 = SHIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
    if (v7 >= 0)
      v8 = this;
    else
      v8 = (std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
    if (v7 >= 0)
      v9 = HIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
    else
      v9 = this->__pn_.__r_.__value_.__l.__size_;
    std::string::append((std::string *)a1, (const std::string::value_type *)v8, v9);
    return a1;
  }
}

_QWORD *sub_22319C3F4(_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len > 0x16)
  {
    if (__len - 0x7FFFFFFFFFFFFFF7 <= 0x800000000000001ELL)
      sub_22316DBC0();
    v7 = 44;
    if (__len > 0x2C)
      v7 = __len;
    v8 = (v7 | 7) + 1;
    v6 = operator new(v8);
    memcpy(v6, __src, __len);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (__len)
    {
      memmove(__dst, __src, __len);
      v6 = __dst;
    }
  }
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

void **sub_22319C4B8(void **a1, void *__src, size_t __len)
{
  unint64_t v6;
  uint64_t v7;
  void *v8;
  size_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v13;
  uint64_t v14;

  v6 = (unint64_t)a1[2];
  v7 = v6 & 0x7FFFFFFFFFFFFFFFLL;
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) > __len)
  {
    v8 = *a1;
    a1[1] = (void *)__len;
    if (__len)
      memmove(v8, __src, __len);
    goto LABEL_12;
  }
  v9 = 0x7FFFFFFFFFFFFFF7;
  if (0x7FFFFFFFFFFFFFF7 - v7 < __len - v7 + 1)
    sub_22316DBC0();
  v10 = v7 - 1;
  v11 = a1;
  if ((v6 & 0x8000000000000000) == 0)
  {
    if (v10 > 0x3FFFFFFFFFFFFFF2)
      goto LABEL_7;
LABEL_14:
    v13 = 2 * v10;
    if (__len > 2 * v10)
      v13 = __len;
    v14 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v14 = v13 | 7;
    if (v13 >= 0x17)
      v9 = v14 + 1;
    else
      v9 = 23;
    v8 = operator new(v9);
    if (!__len)
      goto LABEL_9;
    goto LABEL_8;
  }
  v11 = *a1;
  if (v10 <= 0x3FFFFFFFFFFFFFF2)
    goto LABEL_14;
LABEL_7:
  v8 = operator new(0x7FFFFFFFFFFFFFF7uLL);
  if (__len)
LABEL_8:
    memcpy(v8, __src, __len);
LABEL_9:
  if (v10 != 22)
    operator delete(v11);
  a1[1] = (void *)__len;
  a1[2] = (void *)(v9 | 0x8000000000000000);
  *a1 = v8;
LABEL_12:
  *((_BYTE *)v8 + __len) = 0;
  return a1;
}

uint64_t sub_22319C5FC(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, os_log_type_t a5, uint64_t a6, const char **a7)
{
  NSObject *v11;
  NSObject *v12;
  size_t v13;
  std::__shared_weak_count_vtbl *v14;
  std::__shared_weak_count *v15;
  const char *v16;
  size_t v17;
  size_t v18;
  _QWORD *p_dst;
  const char *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  char *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  _QWORD v65[4];
  __int128 v66;
  std::__shared_weak_count *v67;
  char *v68;
  std::__shared_weak_count *v69;
  _QWORD *__dst;
  __int128 v71;
  _BYTE v72[24];
  __int128 v73;
  char *v74;
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  v11 = a4;
  v12 = v11;
  if (a2 && *(_QWORD *)(a2 + 8))
  {
    v13 = _os_log_pack_size();
    v14 = (std::__shared_weak_count_vtbl *)operator new(v13, (std::align_val_t)8uLL);
    v15 = (std::__shared_weak_count *)operator new();
    v15->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v15->__shared_owners_ = 0;
    v15->__shared_weak_owners_ = 0;
    v15[1].__vftable = v14;
    *(_QWORD *)&v66 = v14;
    *((_QWORD *)&v66 + 1) = v14;
    v68 = 0;
    v69 = 0;
    v67 = v15;
    v16 = *a7;
    v17 = strlen(*a7);
    if (v17 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v18 = v17;
    if (v17 >= 0x17)
    {
      v22 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v17 | 7) != 0x17)
        v22 = v17 | 7;
      v23 = v22 + 1;
      p_dst = operator new(v22 + 1);
      *(_QWORD *)&v71 = v18;
      *((_QWORD *)&v71 + 1) = v23 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v71) = v17;
      p_dst = &__dst;
      if (!v17)
        goto LABEL_13;
    }
    memcpy(p_dst, v16, v18);
LABEL_13:
    *((_BYTE *)p_dst + v18) = 0;
    v65[1] = __dst;
    v65[2] = v71;
    *(_QWORD *)((char *)&v65[2] + 7) = *(_QWORD *)((char *)&v71 + 7);
    v65[0] = off_24EC1FA48;
    HIBYTE(v65[3]) = HIBYTE(v71);
    v24 = operator new(0x38uLL);
    v24[1] = 0;
    v24[2] = 0;
    *v24 = &off_24EC1F9F8;
    v24[3] = off_24EC1FA48;
    *((_OWORD *)v24 + 2) = *(_OWORD *)&v65[1];
    v24[6] = v65[3];
    memset(&v65[1], 0, 24);
    v25 = v69;
    v68 = (char *)(v24 + 3);
    v69 = (std::__shared_weak_count *)v24;
    if (!v25)
      goto LABEL_17;
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
      if ((SHIBYTE(v65[3]) & 0x80000000) == 0)
        goto LABEL_19;
    }
    else
    {
LABEL_17:
      if ((SHIBYTE(v65[3]) & 0x80000000) == 0)
      {
LABEL_19:
        nullsub_30(v65);
        *(_OWORD *)v72 = v66;
        v28 = v68;
        *(_QWORD *)&v72[16] = v67;
        if (v67)
        {
          v29 = (unint64_t *)&v67->__shared_owners_;
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
        }
        v31 = v69;
        *(_QWORD *)&v73 = v28;
        *((_QWORD *)&v73 + 1) = v69;
        if (v69)
        {
          v32 = (unint64_t *)&v69->__shared_owners_;
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
          v74 = v28;
          do
            v34 = __ldaxr(v32);
          while (__stlxr(v34 - 1, v32));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        else
        {
          v74 = v28;
        }
        v35 = v67;
        if (v67)
        {
          v36 = (unint64_t *)&v67->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        v38 = *(_QWORD *)v72;
        if (v74[31] >= 0)
          v39 = v74 + 8;
        else
          v39 = (char *)*((_QWORD *)v74 + 1);
        v40 = _os_log_pack_fill();
        *(_DWORD *)v40 = 136315138;
        *(_QWORD *)(v40 + 4) = v39;
        v41 = operator new();
        v42 = *((unsigned __int8 *)a3 + 23);
        if ((v42 & 0x80u) == 0)
          v43 = a3;
        else
          v43 = (uint64_t *)*a3;
        if ((v42 & 0x80u) != 0)
          v42 = a3[1];
        *(_QWORD *)v41 = v38;
        *(_OWORD *)(v41 + 8) = *(_OWORD *)&v72[8];
        *(_QWORD *)&v72[8] = 0;
        *(_QWORD *)&v72[16] = 0;
        *(_OWORD *)(v41 + 24) = v73;
        v73 = 0uLL;
        *(_QWORD *)(v41 + 40) = v43;
        *(_QWORD *)(v41 + 48) = v42;
        *(_BYTE *)(v41 + 56) = a5;
        v65[0] = 0;
        *(_QWORD *)&v66 = v41;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), &v66);
        v44 = v66;
        *(_QWORD *)&v66 = 0;
        if (v44)
        {
          v45 = *(std::__shared_weak_count **)(v44 + 32);
          if (v45)
          {
            v46 = (unint64_t *)&v45->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v45);
            }
          }
          v48 = *(std::__shared_weak_count **)(v44 + 16);
          if (v48)
          {
            v49 = (unint64_t *)&v48->__shared_owners_;
            do
              v50 = __ldaxr(v49);
            while (__stlxr(v50 - 1, v49));
            if (!v50)
            {
              ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
              std::__shared_weak_count::__release_weak(v48);
            }
          }
          MEMORY[0x227684CE8](v44, 0x10F0C40B62ED6C6);
          v51 = v65[0];
          v65[0] = 0;
          if (v51)
          {
            v52 = *(std::__shared_weak_count **)(v51 + 32);
            if (v52)
            {
              v53 = (unint64_t *)&v52->__shared_owners_;
              do
                v54 = __ldaxr(v53);
              while (__stlxr(v54 - 1, v53));
              if (!v54)
              {
                ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                std::__shared_weak_count::__release_weak(v52);
              }
            }
            v55 = *(std::__shared_weak_count **)(v51 + 16);
            if (v55)
            {
              v56 = (unint64_t *)&v55->__shared_owners_;
              do
                v57 = __ldaxr(v56);
              while (__stlxr(v57 - 1, v56));
              if (!v57)
              {
                ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                std::__shared_weak_count::__release_weak(v55);
              }
            }
            MEMORY[0x227684CE8](v51, 0x10F0C40B62ED6C6);
          }
        }
        v58 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
        if (*((_QWORD *)&v73 + 1))
        {
          v59 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 - 1, v59));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
        v61 = *(std::__shared_weak_count **)&v72[16];
        if (*(_QWORD *)&v72[16])
        {
          v62 = (unint64_t *)(*(_QWORD *)&v72[16] + 8);
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        goto LABEL_76;
      }
    }
    operator delete((void *)v65[1]);
    goto LABEL_19;
  }
  os_log_type_enabled(v11, a5);
  v20 = *a7;
  *(_DWORD *)v72 = 136315138;
  *(_QWORD *)&v72[4] = v20;
  v21 = (void *)_os_log_send_and_compose_impl();
  if (v21)
    free(v21);
LABEL_76:

  return 0;
}

void sub_22319CBB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va1);
  sub_22319A054((uint64_t *)va);
  sub_223199DE8((uint64_t)va2);

  _Unwind_Resume(a1);
}

uint64_t sub_22319CC30(uint64_t a1)
{
  uint64_t v1;

  v1 = a1;
  if (*(char *)(a1 + 31) < 0)
  {
    operator delete(*(void **)(a1 + 8));
    a1 = v1;
  }
  return nullsub_30(a1);
}

void sub_22319CC70(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F9F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22319CC80(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F9F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22319CCB0(uint64_t a1)
{
  if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    return nullsub_30(a1 + 24);
  operator delete(*(void **)(a1 + 32));
  return nullsub_30(a1 + 24);
}

void sub_22319CCF4(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22319CD38(_QWORD *a1)
{
  sub_224554FC4(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22319CD5C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 304))(a1);
}

uint64_t sub_22319CDA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4[2];

  v4[0] = a2;
  v4[1] = a3;
  return sub_224553A04(a1, v4);
}

uint64_t sub_22319CDCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4[2];

  v4[0] = a2;
  v4[1] = a3;
  return sub_22455334C(a1, v4);
}

uint64_t sub_22319CDF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[2];

  v4[0] = a2;
  v4[1] = a3;
  return sub_2245534D0(a1, v4);
}

uint64_t sub_22319CE14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[2];

  v4[0] = a2;
  v4[1] = a3;
  return sub_224553654(a1, v4);
}

uint64_t sub_22319CE38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[2];

  v4[0] = a2;
  v4[1] = a3;
  return sub_224553770(a1, v4);
}

uint64_t sub_22319CE5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[2];

  v4[0] = a2;
  v4[1] = a3;
  return sub_224553770(a1, v4);
}

uint64_t sub_22319CE80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4[2];

  v4[0] = a2;
  v4[1] = a3;
  return sub_224553410(a1, v4);
}

uint64_t sub_22319CEA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4[2];

  v4[0] = a2;
  v4[1] = a3;
  return sub_22455334C(a1, v4);
}

uint64_t sub_22319CEC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[2];

  v4[0] = a2;
  v4[1] = a3;
  return sub_22455355C(a1, v4);
}

uint64_t sub_22319CEEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[2];

  v4[0] = a2;
  v4[1] = a3;
  return sub_2245536E0(a1, v4);
}

uint64_t sub_22319CF10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[2];

  v4[0] = a2;
  v4[1] = a3;
  return sub_2245537FC(a1, v4);
}

uint64_t sub_22319CF34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[2];

  v4[0] = a2;
  v4[1] = a3;
  return sub_2245537FC(a1, v4);
}

uint64_t sub_22319CF58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[2];

  v4[0] = a2;
  v4[1] = a3;
  return sub_224553888(a1, v4);
}

uint64_t sub_22319CF7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[2];

  v4[0] = a2;
  v4[1] = a3;
  return sub_224553930(a1, v4);
}

uint64_t sub_22319CFA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[2];

  v4[0] = a2;
  v4[1] = a3;
  return sub_224553AD4(a1, v4);
}

uint64_t **sub_22319CFC4(uint64_t a1, __int128 *a2)
{
  __int128 v3;

  v3 = *a2;
  return sub_224555608(a1, &v3);
}

uint64_t **sub_22319CFEC(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD v4[2];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  return sub_224555608(a1, v4);
}

_QWORD *sub_22319D01C(uint64_t a1)
{
  return sub_224554FC4((_QWORD *)(a1 - 16));
}

void sub_22319D024(uint64_t a1)
{
  sub_224554FC4((_QWORD *)(a1 - 16));
  JUMPOUT(0x227684CE8);
}

void sub_22319D04C(const void *a1, uint64_t a2, unsigned int a3)
{
  unint64_t *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _WORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t (**v98)();
  uint64_t v99;
  std::__shared_weak_count *v100;
  uint64_t (**v101)();
  uint64_t v102;
  std::__shared_weak_count *v103;
  _BYTE v104[32];
  _BYTE v105[32];
  _DWORD v106[6];
  unsigned int v107;
  int v108;
  int v109;
  int v110;
  _BYTE v111[28];
  _BYTE v112[64];
  int v113;
  unint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int v119;
  uint64_t (**v120)();
  uint64_t v121;
  std::__shared_weak_count *v122;
  _DWORD v123[6];
  uint64_t (**v124)();
  uint64_t v125;
  std::__shared_weak_count *v126;
  _BYTE v127[32];
  _DWORD v128[6];
  uint64_t (**v129)();
  _WORD v130[12];
  _QWORD v131[5];
  int v132;
  int v133;
  unsigned int v134;
  uint64_t (**v135)();
  _WORD v136[12];
  _QWORD v137[5];
  int v138;
  int v139;
  int v140;
  _QWORD v141[2];

  v6 = (unint64_t *)(a2 + 8);
  LODWORD(v114) = 2;
  sub_22455306C((uint64_t)a1, (unsigned int *)&v114);
  sub_224555270((uint64_t)a1);
  sub_2245530C4((uint64_t)a1, v6);
  LOBYTE(v114) = *(_BYTE *)(a2 + 16);
  sub_224552E88((uint64_t)a1, (char *)&v114);
  sub_2245554E0((uint64_t)a1);
  LODWORD(v114) = 2;
  sub_22455306C((uint64_t)a1, (unsigned int *)&v114);
  sub_224555270((uint64_t)a1);
  v114 = 2;
  v115 = a2 + 24;
  sub_224553888((uint64_t)a1, &v114);
  v114 = 2;
  v115 = a2 + 32;
  sub_224553888((uint64_t)a1, &v114);
  v114 = 2;
  v115 = a2 + 40;
  sub_2245536E0((uint64_t)a1, &v114);
  sub_2245554E0((uint64_t)a1);
  LODWORD(v114) = 1;
  sub_22455306C((uint64_t)a1, (unsigned int *)&v114);
  sub_22455306C((uint64_t)a1, (unsigned int *)(a2 + 64));
  sub_22455315C((uint64_t)a1, (unsigned int *)(a2 + 68));
  sub_22455315C((uint64_t)a1, (unsigned int *)(a2 + 72));
  sub_22455315C((uint64_t)a1, (unsigned int *)(a2 + 76));
  if (a3 > 9)
  {
    LODWORD(v114) = 2;
    sub_22455306C((uint64_t)a1, (unsigned int *)&v114);
    sub_224555270((uint64_t)a1);
    sub_22319F5F8(a1, a2 + 136);
    sub_2245554E0((uint64_t)a1);
    LODWORD(v114) = 2;
    sub_22455306C((uint64_t)a1, (unsigned int *)&v114);
    sub_224555270((uint64_t)a1);
    sub_22319F5F8(a1, a2 + 240);
    sub_2245554E0((uint64_t)a1);
    goto LABEL_60;
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/include/Reconstruction/Frame/KeyframeBundleSample.h", 236, (uint64_t)"io::is_input_archive_v<Archive>", 31, (uint64_t)"Not expecting to output old versions", 36, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_22416BC94((uint64_t)&v114);
  *(_DWORD *)v111 = 2;
  sub_22455306C((uint64_t)a1, (unsigned int *)v111);
  sub_224555270((uint64_t)a1);
  sub_22319F5F8(a1, (uint64_t)&v114);
  sub_2245554E0((uint64_t)a1);
  sub_22416C304((uint64_t)&v114, (uint64_t)v111);
  *(_QWORD *)v105 = &off_24EC1FD28;
  sub_2231A0534((uint64_t)v111, (uint64_t)&v105[8]);
  nullsub_30(&v111[24]);
  v7 = *(std::__shared_weak_count **)&v111[16];
  if (*(_QWORD *)&v111[16])
  {
    v8 = (unint64_t *)(*(_QWORD *)&v111[16] + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  nullsub_30(v111);
  v135 = &off_24EC1FE80;
  sub_2231A2D70(&v107, v136);
  v129 = &off_24EC1FE80;
  sub_2231A2D70(&v107, v130);
  v10 = v108;
  if (v108 && v107)
  {
    v11 = 0;
    do
    {
      v12 = v107;
      if (v107)
      {
        v13 = 0;
        v14 = 0;
        v15 = 0;
        v16 = v106[4];
        v17 = *(_QWORD *)&v105[24] + 2 * (v109 * v11);
        v18 = v138;
        v19 = v137[0] + 2 * (v139 * v11);
        v20 = v132;
        v21 = v131[0] + 2 * (v133 * v11);
        do
        {
          v22 = (_WORD *)(v17 + 2 * v15);
          *(_WORD *)(v19 + 2 * v13) = *v22;
          *(_WORD *)(v21 + 2 * v14) = v22[1];
          v15 += v16;
          v14 += v20;
          v13 += v18;
          --v12;
        }
        while (v12);
      }
      ++v11;
    }
    while (v11 != v10);
  }
  v120 = &off_24EC200A8;
  sub_2231A3AA0((uint64_t)&v135, &v121);
  v124 = &off_24EC1F8C8;
  sub_2231A3E2C((uint64_t)&v120, (uint64_t)&v125);
  sub_22416C2FC((uint64_t)v111, (uint64_t)&v124, 0x10001u, v23, v24, v25, v26, v27);
  *(_OWORD *)(a2 + 136) = *(_OWORD *)v111;
  *(_OWORD *)(a2 + 148) = *(_OWORD *)&v111[12];
  v28 = *(unsigned int *)(a2 + 232);
  if ((_DWORD)v28 == -1)
  {
    if (v113 == -1)
      goto LABEL_24;
  }
  else if (v113 == -1)
  {
    ((void (*)(uint64_t (***)(), uint64_t))off_24EC1F928[v28])(&v98, a2 + 168);
    *(_DWORD *)(a2 + 232) = -1;
    goto LABEL_22;
  }
  v98 = (uint64_t (**)())(a2 + 168);
  ((void (*)(uint64_t (***)()))off_24EC1F938[v113])(&v98);
LABEL_22:
  if (v113 != -1)
    ((void (*)(uint64_t (***)(), _BYTE *))off_24EC1F928[v113])(&v98, v112);
LABEL_24:
  v113 = -1;
  nullsub_30(v127);
  v29 = v126;
  if (v126)
  {
    p_shared_owners = (unint64_t *)&v126->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  nullsub_30(&v124);
  v32 = v122;
  if (v122)
  {
    v33 = (unint64_t *)&v122->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  nullsub_30(&v120);
  v120 = &off_24EC200A8;
  sub_2231A3AA0((uint64_t)&v129, &v121);
  v124 = &off_24EC1F8C8;
  sub_2231A3E2C((uint64_t)&v120, (uint64_t)&v125);
  if (a3 >= 5)
    v40 = 65542;
  else
    v40 = 65537;
  sub_22416C2FC((uint64_t)v111, (uint64_t)&v124, v40, v35, v36, v37, v38, v39);
  *(_OWORD *)(a2 + 240) = *(_OWORD *)v111;
  *(_OWORD *)(a2 + 252) = *(_OWORD *)&v111[12];
  v41 = *(unsigned int *)(a2 + 336);
  if ((_DWORD)v41 == -1)
  {
    if (v113 == -1)
      goto LABEL_44;
  }
  else if (v113 == -1)
  {
    ((void (*)(uint64_t (***)(), uint64_t))off_24EC1F928[v41])(&v98, a2 + 272);
    *(_DWORD *)(a2 + 336) = -1;
    goto LABEL_42;
  }
  v98 = (uint64_t (**)())(a2 + 272);
  ((void (*)(uint64_t (***)()))off_24EC1F938[v113])(&v98);
LABEL_42:
  if (v113 != -1)
    ((void (*)(uint64_t (***)(), _BYTE *))off_24EC1F928[v113])(&v98, v112);
LABEL_44:
  v113 = -1;
  nullsub_30(v127);
  v42 = v126;
  if (v126)
  {
    v43 = (unint64_t *)&v126->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  nullsub_30(&v124);
  v45 = v122;
  if (v122)
  {
    v46 = (unint64_t *)&v122->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  nullsub_30(&v120);
  sub_223167354((uint64_t)v130);
  nullsub_30(&v129);
  sub_223167354((uint64_t)v136);
  nullsub_30(&v135);
  v48 = *(std::__shared_weak_count **)&v105[16];
  if (!*(_QWORD *)&v105[16])
    goto LABEL_58;
  v49 = (unint64_t *)(*(_QWORD *)&v105[16] + 8);
  do
    v50 = __ldaxr(v49);
  while (__stlxr(v50 - 1, v49));
  if (v50)
  {
LABEL_58:
    nullsub_30(v105);
    v51 = v119;
    if (v119 == -1)
      goto LABEL_60;
    goto LABEL_59;
  }
  ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
  std::__shared_weak_count::__release_weak(v48);
  nullsub_30(v105);
  v51 = v119;
  if (v119 != -1)
LABEL_59:
    ((void (*)(_BYTE *, uint64_t *))off_24EC1F928[v51])(v111, &v118);
LABEL_60:
  LODWORD(v114) = 2;
  sub_22455306C((uint64_t)a1, (unsigned int *)&v114);
  sub_224555270((uint64_t)a1);
  sub_22319F5F8(a1, a2 + 344);
  sub_2245554E0((uint64_t)a1);
  if (a3 >= 0xB)
  {
    LODWORD(v114) = 2;
    sub_22455306C((uint64_t)a1, (unsigned int *)&v114);
    sub_224555270((uint64_t)a1);
    sub_22319F5F8(a1, a2 + 448);
    sub_2245554E0((uint64_t)a1);
    LODWORD(v114) = 2;
    sub_22455306C((uint64_t)a1, (unsigned int *)&v114);
    sub_224555270((uint64_t)a1);
    sub_22319F5F8(a1, a2 + 552);
    sub_2245554E0((uint64_t)a1);
    goto LABEL_118;
  }
  sub_22416BC94((uint64_t)&v135);
  sub_22416BC94((uint64_t)&v129);
  LODWORD(v114) = 2;
  sub_22455306C((uint64_t)a1, (unsigned int *)&v114);
  sub_224555270((uint64_t)a1);
  sub_22319F5F8(a1, (uint64_t)&v135);
  sub_2245554E0((uint64_t)a1);
  LODWORD(v114) = 2;
  sub_22455306C((uint64_t)a1, (unsigned int *)&v114);
  sub_224555270((uint64_t)a1);
  sub_22319F5F8(a1, (uint64_t)&v129);
  sub_2245554E0((uint64_t)a1);
  sub_22416C304((uint64_t)&v135, (uint64_t)&v114);
  v124 = &off_24EC201A0;
  sub_2231A40A4((uint64_t)&v114, (uint64_t)&v125);
  nullsub_30(&v117);
  v52 = v116;
  if (v116)
  {
    v53 = (unint64_t *)&v116->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  nullsub_30(&v114);
  sub_22416C304((uint64_t)&v129, (uint64_t)&v114);
  v120 = &off_24EC201A0;
  sub_2231A40A4((uint64_t)&v114, (uint64_t)&v121);
  nullsub_30(&v117);
  v55 = v116;
  if (v116)
  {
    v56 = (unint64_t *)&v116->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  nullsub_30(&v114);
  v114 = (unint64_t)&off_24EC20298;
  sub_2231A47D4(v128, &v115);
  *(_QWORD *)v111 = &off_24EC20298;
  sub_2231A47D4(v123, &v111[8]);
  sub_22319F058((uint64_t)&v124, (uint64_t)&v114, (uint64_t)v105, v58, v59, v60);
  sub_22319F2AC((uint64_t)&v120, (uint64_t)v111, (uint64_t)v105, v61, v62, v63);
  v98 = &off_24EC204C0;
  sub_2231A5634((uint64_t)&v114, &v99);
  v101 = &off_24EC1F8C8;
  sub_2231A59C0((uint64_t)&v98, (uint64_t)&v102);
  sub_22416C2FC((uint64_t)v105, (uint64_t)&v101, 0x10001u, v64, v65, v66, v67, v68);
  *(_OWORD *)(a2 + 448) = *(_OWORD *)v105;
  *(_OWORD *)(a2 + 460) = *(_OWORD *)&v105[12];
  v69 = *(unsigned int *)(a2 + 544);
  if ((_DWORD)v69 == -1)
  {
    if (v110 == -1)
      goto LABEL_79;
  }
  else if (v110 == -1)
  {
    ((void (*)(_QWORD *, uint64_t))off_24EC1F928[v69])(v141, a2 + 480);
    *(_DWORD *)(a2 + 544) = -1;
    goto LABEL_77;
  }
  v141[0] = a2 + 480;
  ((void (*)(_QWORD *))off_24EC1F938[v110])(v141);
LABEL_77:
  if (v110 != -1)
    ((void (*)(_QWORD *, _DWORD *))off_24EC1F928[v110])(v141, v106);
LABEL_79:
  v110 = -1;
  nullsub_30(v104);
  v70 = v103;
  if (v103)
  {
    v71 = (unint64_t *)&v103->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  nullsub_30(&v101);
  v73 = v100;
  if (v100)
  {
    v74 = (unint64_t *)&v100->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  nullsub_30(&v98);
  v98 = &off_24EC204C0;
  sub_2231A5634((uint64_t)v111, &v99);
  v101 = &off_24EC1F8C8;
  sub_2231A59C0((uint64_t)&v98, (uint64_t)&v102);
  sub_22416C2FC((uint64_t)v105, (uint64_t)&v101, 0x10001u, v76, v77, v78, v79, v80);
  *(_OWORD *)(a2 + 552) = *(_OWORD *)v105;
  *(_OWORD *)(a2 + 564) = *(_OWORD *)&v105[12];
  v81 = *(unsigned int *)(a2 + 648);
  if ((_DWORD)v81 == -1)
  {
    if (v110 == -1)
      goto LABEL_96;
  }
  else if (v110 == -1)
  {
    ((void (*)(_QWORD *, uint64_t))off_24EC1F928[v81])(v141, a2 + 584);
    *(_DWORD *)(a2 + 648) = -1;
    goto LABEL_94;
  }
  v141[0] = a2 + 584;
  ((void (*)(_QWORD *))off_24EC1F938[v110])(v141);
LABEL_94:
  if (v110 != -1)
    ((void (*)(_QWORD *, _DWORD *))off_24EC1F928[v110])(v141, v106);
LABEL_96:
  v110 = -1;
  nullsub_30(v104);
  v82 = v103;
  if (v103)
  {
    v83 = (unint64_t *)&v103->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  nullsub_30(&v101);
  v85 = v100;
  if (v100)
  {
    v86 = (unint64_t *)&v100->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  nullsub_30(&v98);
  sub_223167354((uint64_t)&v111[8]);
  nullsub_30(v111);
  sub_223167354((uint64_t)&v115);
  nullsub_30(&v114);
  v88 = v122;
  if (!v122)
    goto LABEL_110;
  v89 = (unint64_t *)&v122->__shared_owners_;
  do
    v90 = __ldaxr(v89);
  while (__stlxr(v90 - 1, v89));
  if (!v90)
  {
    ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
    std::__shared_weak_count::__release_weak(v88);
    nullsub_30(&v120);
    v91 = v126;
    if (!v126)
      goto LABEL_114;
  }
  else
  {
LABEL_110:
    nullsub_30(&v120);
    v91 = v126;
    if (!v126)
      goto LABEL_114;
  }
  v92 = (unint64_t *)&v91->__shared_owners_;
  do
    v93 = __ldaxr(v92);
  while (__stlxr(v93 - 1, v92));
  if (v93)
  {
LABEL_114:
    nullsub_30(&v124);
    v94 = v134;
    if (v134 == -1)
      goto LABEL_116;
    goto LABEL_115;
  }
  ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
  std::__shared_weak_count::__release_weak(v91);
  nullsub_30(&v124);
  v94 = v134;
  if (v134 != -1)
LABEL_115:
    ((void (*)(unint64_t *, _QWORD *))off_24EC1F928[v94])(&v114, v131);
LABEL_116:
  if (v140 != -1)
    ((void (*)(unint64_t *, _QWORD *))off_24EC1F928[v140])(&v114, v137);
LABEL_118:
  LODWORD(v114) = 2;
  sub_22455306C((uint64_t)a1, (unsigned int *)&v114);
  v114 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 3);
  sub_224553110((uint64_t)a1, &v114);
  v95 = *(_QWORD *)(a2 + 80);
  v96 = *(_QWORD *)(a2 + 88) - v95;
  if (v96)
  {
    v97 = 40 * (v96 / 40);
    do
    {
      *(_DWORD *)v111 = 3;
      sub_22455306C((uint64_t)a1, (unsigned int *)v111);
      sub_2231A5B1C((uint64_t)a1, v95, *(unsigned int *)v111);
      v95 += 40;
      v97 -= 40;
    }
    while (v97);
  }
  sub_2231A5CBC((uint64_t)&v114, (uint64_t)a1, a2 + 104);
  if (a3 - 2 <= 5)
  {
    LODWORD(v114) = 1;
    sub_22455306C((uint64_t)a1, (unsigned int *)&v114);
    v114 = 0;
    sub_224553110((uint64_t)a1, &v114);
  }
  if (a3 >= 3)
  {
    LODWORD(v114) = 2;
    sub_22455306C((uint64_t)a1, (unsigned int *)&v114);
    sub_224555270((uint64_t)a1);
    sub_22319F5F8(a1, a2 + 656);
    sub_2245554E0((uint64_t)a1);
    if (a3 != 3)
    {
      if (*(_BYTE *)(a2 + 1288))
      {
        LOBYTE(v114) = 1;
        sub_224552E88((uint64_t)a1, (char *)&v114);
        LODWORD(v114) = 3;
        sub_22455306C((uint64_t)a1, (unsigned int *)&v114);
        sub_2231A5E88(a1, a2 + 760, v114);
        if (a3 < 6)
          return;
      }
      else
      {
        LOBYTE(v114) = 0;
        sub_224552E88((uint64_t)a1, (char *)&v114);
        if (a3 < 6)
          return;
      }
      if (*(_BYTE *)(a2 + 1300))
      {
        LOBYTE(v114) = 1;
        sub_224552E88((uint64_t)a1, (char *)&v114);
        sub_22455315C((uint64_t)a1, (unsigned int *)(a2 + 1296));
        if (a3 < 7)
          return;
      }
      else
      {
        LOBYTE(v114) = 0;
        sub_224552E88((uint64_t)a1, (char *)&v114);
        if (a3 < 7)
          return;
      }
      LODWORD(v114) = 2;
      sub_22455306C((uint64_t)a1, (unsigned int *)&v114);
      sub_224555270((uint64_t)a1);
      sub_2231A5FE4((uint64_t)a1);
      sub_2245554E0((uint64_t)a1);
      if (a3 >= 9)
      {
        if (*(_BYTE *)(a2 + 1356))
        {
          LOBYTE(v114) = 1;
          sub_224552E88((uint64_t)a1, (char *)&v114);
          v114 = 9;
          v115 = a2 + 1320;
          sub_224553888((uint64_t)a1, &v114);
        }
        else
        {
          LOBYTE(v114) = 0;
          sub_224552E88((uint64_t)a1, (char *)&v114);
        }
      }
    }
  }
}

void sub_22319E064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  sub_22319A588((uint64_t)&a26);
  sub_22319A5E0((uint64_t)&a19);
  sub_22319F500((uint64_t)&a9);
  sub_223167354(v57);
  nullsub_30(&a39);
  sub_223167354(v56);
  nullsub_30(&a56);
  sub_22319F590((uint64_t)&STACK[0x200]);
  sub_22319F590((uint64_t)&STACK[0x250]);
  sub_22319A588((uint64_t)&STACK[0x2A0]);
  sub_22319A588(v58 - 200);
  _Unwind_Resume(a1);
}

void sub_22319E124()
{
  JUMPOUT(0x22319E0E4);
}

void sub_22319E12C()
{
  JUMPOUT(0x22319E0F4);
}

void sub_22319E134(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  nullsub_30(&STACK[0x200]);
  sub_22319A5E0((uint64_t)&a56);
  JUMPOUT(0x22319E104);
}

void sub_22319E14C()
{
  JUMPOUT(0x22319E104);
}

void sub_22319E154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  uint64_t v56;

  nullsub_30(&STACK[0x250]);
  sub_22319A5E0((uint64_t)&a56);
  sub_22319A588((uint64_t)&STACK[0x2A0]);
  sub_22319A588(v56 - 200);
  _Unwind_Resume(a1);
}

void sub_22319E184(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22319A588(v1 - 200);
  _Unwind_Resume(a1);
}

void sub_22319E198()
{
  JUMPOUT(0x22319E1A8);
}

void sub_22319E210()
{
  JUMPOUT(0x22319E1E0);
}

void sub_22319E218()
{
  JUMPOUT(0x22319E1F0);
}

void sub_22319E220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  nullsub_30(&a26);
  sub_22319A5E0((uint64_t)&a39);
  sub_22319A588((uint64_t)&a56);
  _Unwind_Resume(a1);
}

void sub_22319E244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  sub_22319A588((uint64_t)&a56);
  _Unwind_Resume(a1);
}

void sub_22319E258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  sub_22319A588((uint64_t)&a56);
  _Unwind_Resume(a1);
}

void sub_22319E26C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22319A588((uint64_t)&STACK[0x2A0]);
  sub_22319A588(v1 - 200);
  _Unwind_Resume(a1);
}

uint64_t sub_22319E288(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;
  __int128 v10;
  __int128 v11;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_224158B04((_QWORD *)(a1 + 24), (float32x2_t *)(a2 + 24));
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  sub_22319E444((_QWORD *)(a1 + 80), (uint64_t **)(a2 + 80));
  v4 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 104) = v4;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  v6 = *(_BYTE **)(a2 + 112);
  v5 = *(_BYTE **)(a2 + 120);
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if ((unint64_t)(0x4FA4FA4FA4FA4FA5 * (v7 >> 2)) >= 0x16C16C16C16C16DLL)
      sub_22316E078();
    v8 = (char *)operator new(v7);
    *(_QWORD *)(a1 + 112) = v8;
    *(_QWORD *)(a1 + 120) = v8;
    v9 = &v8[4 * (v7 >> 2)];
    *(_QWORD *)(a1 + 128) = v9;
    memcpy(v8, v6, v7);
    *(_QWORD *)(a1 + 120) = v9;
  }
  sub_22319E678(a1 + 136, (__int128 *)(a2 + 136));
  *(_BYTE *)(a1 + 760) = 0;
  *(_BYTE *)(a1 + 1288) = 0;
  if (*(_BYTE *)(a2 + 1288))
  {
    sub_22319EA10(a1 + 760, a2 + 760);
    *(_BYTE *)(a1 + 1288) = 1;
  }
  *(_QWORD *)(a1 + 1296) = *(_QWORD *)(a2 + 1296);
  sub_22319ED0C((_QWORD *)(a1 + 1304), a2 + 1304);
  v10 = *(_OWORD *)(a2 + 1320);
  v11 = *(_OWORD *)(a2 + 1336);
  *(_QWORD *)(a1 + 1352) = *(_QWORD *)(a2 + 1352);
  *(_OWORD *)(a1 + 1320) = v10;
  *(_OWORD *)(a1 + 1336) = v11;
  return a1;
}

void sub_22319E3DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v4;
  unsigned int *v5;
  unsigned int *v6;
  void *v8;

  if (*(_BYTE *)(v2 + 1288))
    sub_22319AB9C(v6);
  sub_22319A650(v5);
  v8 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v2 + 120) = v8;
    operator delete(v8);
  }
  sub_22319A750(v3);
  sub_22365B530(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_22319E444(_QWORD *a1, uint64_t **a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  int64_t v6;
  unint64_t v7;
  char *v8;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = (char *)v5 - (char *)*a2;
  if (v5 != *a2)
  {
    v7 = 0xCCCCCCCCCCCCCCCDLL * (v6 >> 3);
    if (v7 >= 0x666666666666667)
      sub_22316E078();
    v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[40 * v7];
    a1[1] = sub_22319E518(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_22319E4EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  if (*(_QWORD *)v1)
    sub_224574488((void **)(v1 + 8), *(char **)v1, (void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_22319E518(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v6;
  char *v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v8 = *v6;
      *(_DWORD *)(a4 + 8) = *((_DWORD *)v6 + 2);
      *(_QWORD *)a4 = v8;
      *(_QWORD *)(a4 + 24) = 0;
      *(_QWORD *)(a4 + 32) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      v10 = (_BYTE *)v6[2];
      v9 = (_BYTE *)v6[3];
      v11 = v9 - v10;
      if (v9 != v10)
      {
        if (v11 < 0)
          sub_22316E078();
        v12 = (char *)operator new(v9 - v10);
        *(_QWORD *)(a4 + 16) = v12;
        *(_QWORD *)(a4 + 24) = v12;
        v7 = &v12[32 * (v11 >> 5)];
        *(_QWORD *)(a4 + 32) = v7;
        memcpy(v12, v10, v11 - 4);
        *(_QWORD *)(a4 + 24) = v7;
      }
      a4 += 40;
      v6 += 5;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_22319E5F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)(v9 + 16);
  if (v11)
  {
    *(_QWORD *)(v9 + 24) = v11;
    operator delete(v11);
  }
  sub_22319E618((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_22319E618(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      v5 = *(void **)(v3 - 24);
      if (v5)
      {
        *(_QWORD *)(v3 - 16) = v5;
        operator delete(v5);
      }
      v3 -= 40;
    }
  }
  return a1;
}

uint64_t sub_22319E678(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  _DWORD *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _BYTE v20[2];

  v4 = *a2;
  *(_OWORD *)(a1 + 12) = *(__int128 *)((char *)a2 + 12);
  *(_OWORD *)a1 = v4;
  *(_BYTE *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 96) = -1;
  v5 = (_DWORD *)(a1 + 96);
  v6 = *((unsigned int *)a2 + 24);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(_BYTE *, uint64_t, __int128 *))off_24EC1FC38[v6])(v20, a1 + 32, a2 + 2);
    *v5 = v6;
  }
  v7 = *(__int128 *)((char *)a2 + 104);
  v8 = *(__int128 *)((char *)a2 + 116);
  *(_DWORD *)(a1 + 200) = -1;
  *(_OWORD *)(a1 + 116) = v8;
  *(_OWORD *)(a1 + 104) = v7;
  *(_BYTE *)(a1 + 136) = 0;
  v9 = *((unsigned int *)a2 + 50);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(_BYTE *, uint64_t, char *))off_24EC1FC38[v9])(v20, a1 + 136, (char *)a2 + 136);
    *(_DWORD *)(a1 + 200) = v9;
  }
  v10 = a2[13];
  v11 = *(__int128 *)((char *)a2 + 220);
  *(_BYTE *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 220) = v11;
  *(_OWORD *)(a1 + 208) = v10;
  *(_DWORD *)(a1 + 304) = -1;
  v12 = *((unsigned int *)a2 + 76);
  if ((_DWORD)v12 != -1)
  {
    ((void (*)(_BYTE *, uint64_t, __int128 *))off_24EC1FC38[v12])(v20, a1 + 240, a2 + 15);
    *(_DWORD *)(a1 + 304) = v12;
  }
  v13 = *(__int128 *)((char *)a2 + 312);
  *(_OWORD *)(a1 + 324) = *(__int128 *)((char *)a2 + 324);
  *(_OWORD *)(a1 + 312) = v13;
  *(_BYTE *)(a1 + 344) = 0;
  *(_DWORD *)(a1 + 408) = -1;
  v14 = *((unsigned int *)a2 + 102);
  if ((_DWORD)v14 != -1)
  {
    ((void (*)(_BYTE *, uint64_t, char *))off_24EC1FC38[v14])(v20, a1 + 344, (char *)a2 + 344);
    *(_DWORD *)(a1 + 408) = v14;
  }
  v15 = a2[26];
  *(_OWORD *)(a1 + 428) = *(__int128 *)((char *)a2 + 428);
  *(_OWORD *)(a1 + 416) = v15;
  *(_BYTE *)(a1 + 448) = 0;
  *(_DWORD *)(a1 + 512) = -1;
  v16 = *((unsigned int *)a2 + 128);
  if ((_DWORD)v16 != -1)
  {
    ((void (*)(_BYTE *, uint64_t, __int128 *))off_24EC1FC38[v16])(v20, a1 + 448, a2 + 28);
    *(_DWORD *)(a1 + 512) = v16;
  }
  v17 = *(__int128 *)((char *)a2 + 520);
  *(_OWORD *)(a1 + 532) = *(__int128 *)((char *)a2 + 532);
  *(_OWORD *)(a1 + 520) = v17;
  *(_BYTE *)(a1 + 552) = 0;
  *(_DWORD *)(a1 + 616) = -1;
  v18 = *((unsigned int *)a2 + 154);
  if ((_DWORD)v18 != -1)
  {
    ((void (*)(_BYTE *, uint64_t, char *))off_24EC1FC38[v18])(v20, a1 + 552, (char *)a2 + 552);
    *(_DWORD *)(a1 + 616) = v18;
  }
  return a1;
}

void sub_22319E8AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  char v17;
  uint64_t v19;

  v19 = *v16;
  if ((_DWORD)v19 != -1)
    ((void (*)(char *, uint64_t))off_24EC1F928[v19])(&a13, v15);
  *v16 = -1;
  if ((v17 & 1) == 0)
  {
    do
    {
      v14 -= 104;
      sub_22319A588(v14);
    }
    while (v14 != v13);
  }
  _Unwind_Resume(exception_object);
}

void sub_22319E900(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  int v8;
  __int16 v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  *(_QWORD *)a2 = &off_24EC1F8C8;
  v3 = *(_QWORD *)(a3 + 8);
  v4 = *(std::__shared_weak_count **)(a3 + 16);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = *(_QWORD *)(a3 + 40);
    v8 = *(_DWORD *)(a3 + 48);
    v9 = *(_WORD *)(a3 + 52);
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v7 = *(_QWORD *)(a3 + 40);
    v8 = *(_DWORD *)(a3 + 48);
    v9 = *(_WORD *)(a3 + 52);
  }
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v4;
  v11 = *(_QWORD *)(a3 + 24);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
  *(_QWORD *)(a2 + 24) = v11;
  *(_QWORD *)(a2 + 40) = v7;
  *(_DWORD *)(a2 + 48) = v8;
  *(_WORD *)(a2 + 52) = v9;
  if (v4)
  {
    v12 = (unint64_t *)&v4->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

__n128 sub_22319E9C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;
  __int128 v8;

  v4 = *(_QWORD *)(a3 + 8);
  v3 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a2 = &off_24EC1F958;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a3 + 24);
  v8 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 54) = *(_QWORD *)(a3 + 54);
  *(_OWORD *)(a2 + 40) = v8;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t sub_22319EA10(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  _BYTE v18[2];
  _BYTE v19[2];
  _BYTE v20[2];
  _BYTE v21[2];
  _BYTE v22[2];

  v4 = *(_OWORD *)(a2 + 8);
  v5 = *(_OWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 20) = v5;
  *(_OWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 104) = -1;
  v6 = *(unsigned int *)(a2 + 104);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(_BYTE *, uint64_t, uint64_t))off_24EC1FC38[v6])(v18, a1 + 40, a2 + 40);
    *(_DWORD *)(a1 + 104) = v6;
  }
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 124);
  *(_BYTE *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 124) = v8;
  *(_OWORD *)(a1 + 112) = v7;
  *(_DWORD *)(a1 + 208) = -1;
  v9 = *(unsigned int *)(a2 + 208);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(_BYTE *, uint64_t, uint64_t))off_24EC1FC38[v9])(v19, a1 + 144, a2 + 144);
    *(_DWORD *)(a1 + 208) = v9;
  }
  v10 = *(_OWORD *)(a2 + 216);
  v11 = *(_OWORD *)(a2 + 228);
  *(_BYTE *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 228) = v11;
  *(_OWORD *)(a1 + 216) = v10;
  *(_DWORD *)(a1 + 312) = -1;
  v12 = *(unsigned int *)(a2 + 312);
  if ((_DWORD)v12 != -1)
  {
    ((void (*)(_BYTE *, uint64_t, uint64_t))off_24EC1FC38[v12])(v20, a1 + 248, a2 + 248);
    *(_DWORD *)(a1 + 312) = v12;
  }
  v13 = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 332) = *(_OWORD *)(a2 + 332);
  *(_OWORD *)(a1 + 320) = v13;
  *(_BYTE *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 416) = -1;
  v14 = *(unsigned int *)(a2 + 416);
  if ((_DWORD)v14 != -1)
  {
    ((void (*)(_BYTE *, uint64_t, uint64_t))off_24EC1FC38[v14])(v21, a1 + 352, a2 + 352);
    *(_DWORD *)(a1 + 416) = v14;
  }
  v15 = *(_OWORD *)(a2 + 424);
  *(_OWORD *)(a1 + 436) = *(_OWORD *)(a2 + 436);
  *(_OWORD *)(a1 + 424) = v15;
  *(_BYTE *)(a1 + 456) = 0;
  *(_DWORD *)(a1 + 520) = -1;
  v16 = *(unsigned int *)(a2 + 520);
  if ((_DWORD)v16 != -1)
  {
    ((void (*)(_BYTE *, uint64_t, uint64_t))off_24EC1FC38[v16])(v22, a1 + 456, a2 + 456);
    *(_DWORD *)(a1 + 520) = v16;
  }
  return a1;
}

void sub_22319EBC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v20 = *(unsigned int *)(v14 + 520);
  if ((_DWORD)v20 != -1)
    ((void (*)(char *, uint64_t))off_24EC1F928[v20])(&a13, v18);
  *(_DWORD *)(v14 + 520) = -1;
  sub_22319A588(v17);
  sub_22319A588(v16 - 32);
  sub_22319A588(v15 - 32);
  sub_22319A588(v13 - 32);
  _Unwind_Resume(a1);
}

void sub_22319EC8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v12 + 208);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))off_24EC1F928[v15])(&a11, v13);
  *(_DWORD *)(v12 + 208) = -1;
  sub_22319A588(v11 - 32);
  _Unwind_Resume(a1);
}

void sub_22319ECD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v13 + 104);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))off_24EC1F928[v15])(&a12, v12);
  *(_DWORD *)(v13 + 104) = -1;
  _Unwind_Resume(exception_object);
}

_QWORD *sub_22319ED0C(_QWORD *a1, uint64_t a2)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v4 = *(const void **)a2;
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v17 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_22319EE1C(&v18, v4);
  v8 = v19;
  *a1 = v18;
  a1[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = v19;
    if (v19)
    {
      v12 = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (!v17)
    return a1;
  v14 = (unint64_t *)&v17->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_22319EE08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_22319EE1C(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    j__CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24EC1FC58;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_22319EE7C(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    j__CFRelease(v1);
  __cxa_rethrow();
}

void sub_22319EE94(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_22319EEAC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22319EED0(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    j__CFRelease(v1);
}

uint64_t sub_22319EEF0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPK14__CFDictionaryEC1ES5_EUlS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPK14__CFDictionaryEC1ES5_EUlS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPK14__CFDictionaryEC1ES5_EUlS5_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPK14__CFDictionaryEC1ES5_EUlS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_22319EF60(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

uint64_t sub_22319EFC8(uint64_t a1)
{
  sub_223167354(a1 + 8);
  return nullsub_30(a1);
}

uint64_t sub_22319EFF0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

uint64_t sub_22319F058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;

  v9 = *(_QWORD *)(a1 + 8);
  if (!v9)
    goto LABEL_18;
  v10 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v10)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (v13)
  {
    v9 = *(_QWORD *)(a1 + 8);
    v14 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v14)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    v9 = *(_QWORD *)(a1 + 8);
    v14 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v14)
      goto LABEL_14;
  }
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
    goto LABEL_18;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if (*(_BYTE *)(a1 + 73))
  {
LABEL_15:
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v9 + 96))(&v26, v9, 0);
    v19 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_23;
    goto LABEL_19;
  }
LABEL_18:
  v26 = 0;
  v19 = *(_QWORD *)(a2 + 8);
  v18 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v18)
    goto LABEL_23;
LABEL_19:
  v20 = (unint64_t *)&v18->__shared_owners_;
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
  do
    v22 = __ldaxr(v20);
  while (__stlxr(v22 - 1, v20));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (!v19)
      goto LABEL_28;
    goto LABEL_24;
  }
LABEL_23:
  if (!v19)
    goto LABEL_28;
LABEL_24:
  if (*(_BYTE *)(a2 + 129))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 96))(&v25, *(_QWORD *)(a2 + 8), 1);
    if (!*(_DWORD *)(a1 + 32))
      goto LABEL_32;
    goto LABEL_29;
  }
LABEL_28:
  v25 = 0;
  if (!*(_DWORD *)(a1 + 32))
    goto LABEL_32;
LABEL_29:
  if (*(_DWORD *)(a1 + 36) && *(_DWORD *)(a1 + 40))
    sub_2231A52FC(a3, a1, a2, a4, a5, a6);
LABEL_32:
  v23 = v25;
  v25 = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  result = v26;
  v26 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_22319F248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22319F2AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;

  v9 = *(_QWORD *)(a1 + 8);
  if (!v9)
    goto LABEL_18;
  v10 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v10)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (v13)
  {
    v9 = *(_QWORD *)(a1 + 8);
    v14 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v14)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    v9 = *(_QWORD *)(a1 + 8);
    v14 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v14)
      goto LABEL_14;
  }
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
    goto LABEL_18;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if (*(_BYTE *)(a1 + 73))
  {
LABEL_15:
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v9 + 96))(&v26, v9, 0);
    v19 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_23;
    goto LABEL_19;
  }
LABEL_18:
  v26 = 0;
  v19 = *(_QWORD *)(a2 + 8);
  v18 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v18)
    goto LABEL_23;
LABEL_19:
  v20 = (unint64_t *)&v18->__shared_owners_;
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
  do
    v22 = __ldaxr(v20);
  while (__stlxr(v22 - 1, v20));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (!v19)
      goto LABEL_28;
    goto LABEL_24;
  }
LABEL_23:
  if (!v19)
    goto LABEL_28;
LABEL_24:
  if (*(_BYTE *)(a2 + 129))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 96))(&v25, *(_QWORD *)(a2 + 8), 1);
    if (!*(_DWORD *)(a1 + 32))
      goto LABEL_32;
    goto LABEL_29;
  }
LABEL_28:
  v25 = 0;
  if (!*(_DWORD *)(a1 + 32))
    goto LABEL_32;
LABEL_29:
  if (*(_DWORD *)(a1 + 36) && *(_DWORD *)(a1 + 40))
    sub_2231A52FC(a3, a1, a2, a4, a5, a6);
LABEL_32:
  v23 = v25;
  v25 = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  result = v26;
  v26 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_22319F49C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22319F500(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

uint64_t sub_22319F568(uint64_t a1)
{
  sub_223167354(a1 + 8);
  return nullsub_30(a1);
}

uint64_t sub_22319F590(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

uint64_t sub_22319F5F8(const void *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v8[2];
  std::__shared_weak_count *v9;
  uint64_t v10;

  LOWORD(v8[0]) = *(_WORD *)a2;
  sub_224552F5C((uint64_t)a1, v8);
  LODWORD(v8[0]) = 2;
  sub_22455306C((uint64_t)a1, (unsigned int *)v8);
  sub_224555270((uint64_t)a1);
  v8[0] = *(_QWORD *)(a2 + 8);
  sub_224553110((uint64_t)a1, v8);
  v8[0] = 2;
  v8[1] = a2 + 16;
  sub_2245536E0((uint64_t)a1, v8);
  sub_2245554E0((uint64_t)a1);
  if (*(_WORD *)a2 != 1)
    return sub_22319F744((uint64_t)a1, (unsigned __int16 *)a2);
  sub_22416C304(a2, (uint64_t)v8);
  sub_22416E5E0(a1, (uint64_t)v8);
  nullsub_30(&v10);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return nullsub_30(v8);
}

void sub_22319F71C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  nullsub_30(v12 + 24);
  if (a12)
    sub_2245743F4();
  nullsub_30(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_22319F744(uint64_t a1, unsigned __int16 *a2)
{
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10[8];
  __int128 v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  std::ios_base v15;
  uint64_t v16;
  int v17;
  _DWORD v18[4];
  std::__shared_weak_count *v19;
  uint64_t v20;

  v4 = sub_22416E0BC(*a2);
  sub_22416C304((uint64_t)a2, (uint64_t)v18);
  v9 = a1;
  std::streambuf::basic_streambuf();
  v10[0] = MEMORY[0x24BEDB848] + 16;
  v11 = 0u;
  v12 = 0u;
  v13 = 24;
  v14 = MEMORY[0x24BEDB828] + 24;
  v15.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB828] + 64);
  std::ios_base::init(&v15, v10);
  v16 = 0;
  v17 = -1;
  sub_22319F8C4(v18, (char *)&v14, v4);
  sub_2231A0234((uint64_t)&v9);
  nullsub_30(&v20);
  v5 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return nullsub_30(v18);
}

void sub_22319F85C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_2231A0234((uint64_t)va);
  sub_22319A5E0(v2 - 104);
  _Unwind_Resume(a1);
}

void sub_22319F8C4(_DWORD *a1, char *a2, int a3)
{
  _BYTE v3[16];
  void *v4;
  char v5;
  char v6;
  void *v7;
  char v8;
  void *__p;
  char v10;
  char v11;
  char v12;
  char v13;

  sub_22319F968(a1, a2, a3, (uint64_t)v3);
  sub_22319FC44((uint64_t)v3);
  if (!v13 && v12)
  {
    if (v11)
    {
      if (v10 < 0)
        operator delete(__p);
      if (v8 < 0)
        operator delete(v7);
    }
    if (v6)
    {
      if (v5 < 0)
        operator delete(v4);
    }
  }
}

void sub_22319F954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223197D38((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22319F968(_DWORD *a1@<X0>, char *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _BYTE *v6;
  uint64_t v7;
  _QWORD *exception;
  void *v9;
  char v10;
  __int128 v11;
  __int128 v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  void *v17;
  char v18;
  char v19;
  char v20;
  __int128 v21;
  void *v22;
  char v23;
  char v24;
  void *v25[2];
  uint64_t v26;
  uint64_t v27;
  void *__p[2];
  uint64_t v29;
  char v30;
  char v31;
  __int128 v32;
  void *v33;
  char v34;
  char v35;
  void *v36;
  char v37;
  void *v38;
  char v39;
  char v40;
  char v41;
  char v42;

  sub_224160FB8(a1, a2, a3, (uint64_t)&v32);
  if (v42)
  {
    *(_BYTE *)(a4 + 120) = 1;
    return;
  }
  sub_224160DA0(a3, (uint64_t)"save", 4);
  if (v42)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24EC1FCC0;
    __cxa_throw(exception, (struct type_info *)&unk_24EC1FC98, (void (*)(void *))std::exception::~exception);
  }
  sub_22456BA60(&v9, &v32, (uint64_t)&v11);
  v21 = v11;
  v6 = sub_22319FFBC(&v22, &v12);
  *(_OWORD *)a4 = v21;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (!v31)
  {
    *(_BYTE *)(a4 + 120) = 0;
    goto LABEL_20;
  }
  *(_BYTE *)(a4 + 40) = 0;
  if (v24)
  {
    *(_OWORD *)(a4 + 16) = *(_OWORD *)v6;
    *(_QWORD *)(a4 + 32) = *((_QWORD *)v6 + 2);
    *((_QWORD *)v6 + 1) = 0;
    *((_QWORD *)v6 + 2) = 0;
    *(_QWORD *)v6 = 0;
    *(_BYTE *)(a4 + 40) = 1;
  }
  *(_BYTE *)(a4 + 48) = 0;
  *(_BYTE *)(a4 + 104) = 0;
  if (!v30)
  {
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (!v24)
      goto LABEL_20;
    goto LABEL_18;
  }
  v7 = v27;
  *(_QWORD *)(a4 + 64) = v26;
  *(_OWORD *)(a4 + 48) = *(_OWORD *)v25;
  v25[0] = 0;
  v25[1] = 0;
  *(_QWORD *)(a4 + 72) = v7;
  *(_OWORD *)(a4 + 80) = *(_OWORD *)__p;
  *(_QWORD *)(a4 + 96) = v29;
  __p[1] = 0;
  v29 = 0;
  v26 = 0;
  __p[0] = 0;
  *(_BYTE *)(a4 + 104) = 1;
  *(_BYTE *)(a4 + 112) = 1;
  *(_BYTE *)(a4 + 120) = 0;
  if (SHIBYTE(v29) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v26) & 0x80000000) == 0)
    {
LABEL_11:
      if (!v24)
        goto LABEL_20;
      goto LABEL_18;
    }
  }
  else if ((SHIBYTE(v26) & 0x80000000) == 0)
  {
    goto LABEL_11;
  }
  operator delete(v25[0]);
  if (!v24)
    goto LABEL_20;
LABEL_18:
  if (v23 < 0)
    operator delete(v22);
LABEL_20:
  if (v20)
  {
    if (v19)
    {
      if (v18 < 0)
        operator delete(v17);
      if (v16 < 0)
        operator delete(v15);
    }
    if (v14 && v13 < 0)
      operator delete((void *)v12);
  }
  if (v10 < 0)
  {
    operator delete(v9);
    if (v42)
      return;
  }
  else if (v42)
  {
    return;
  }
  if (v41)
  {
    if (v40)
    {
      if (v39 < 0)
        operator delete(v38);
      if (v37 < 0)
        operator delete(v36);
    }
    if (v35)
    {
      if (v34 < 0)
        operator delete(v33);
    }
  }
}

void sub_22319FBFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  sub_22319723C((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  sub_223197D38(v15 - 160);
  _Unwind_Resume(a1);
}

uint64_t sub_22319FC44(uint64_t a1)
{
  std::runtime_error *exception;
  uint64_t v4;
  std::string v5;

  if (!*(_BYTE *)(a1 + 120))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v4 = sub_22319593C(a1);
    sub_22456A158(v4, &v5);
    std::runtime_error::runtime_error(exception, &v5);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  return sub_22319FE14(a1);
}

void sub_22319FCC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void sub_22319FD04(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22319FD28(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 96))
    return a1;
  if (*(_BYTE *)(a1 + 88))
  {
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
    {
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
        goto LABEL_5;
LABEL_9:
      operator delete(*(void **)(a1 + 32));
      if (!*(_BYTE *)(a1 + 24))
        return a1;
      goto LABEL_6;
    }
    operator delete(*(void **)(a1 + 64));
    if (*(char *)(a1 + 55) < 0)
      goto LABEL_9;
  }
LABEL_5:
  if (!*(_BYTE *)(a1 + 24))
    return a1;
LABEL_6:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_22319FDB4(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 56))
    return a1;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_22319FE14(uint64_t result)
{
  __int128 *v1;
  void *exception;
  __int128 v3;
  _BYTE v4[112];

  v1 = (__int128 *)result;
  if (!*(_BYTE *)(result + 120))
  {
    exception = __cxa_allocate_exception(0x80uLL);
    v3 = *v1;
    sub_22319FFBC(v4, v1 + 1);
    sub_22319FED4((uint64_t)exception, &v3);
    __cxa_throw(exception, (struct type_info *)&unk_24EC1FCD8, (void (*)(void *))sub_22319FF24);
  }
  return result;
}

void sub_22319FE90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319723C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22319FEA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_22319723C((uint64_t)&a9);
  __cxa_free_exception(v9);
  _Unwind_Resume(a1);
}

void sub_22319FEC0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_22319FED4(uint64_t a1, _OWORD *a2)
{
  *(_QWORD *)a1 = off_24EC1FD00;
  *(_OWORD *)(a1 + 8) = *a2;
  sub_22319FFBC((_BYTE *)(a1 + 24), a2 + 1);
  return a1;
}

void sub_22319FF10(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void sub_22319FF24(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)off_24EC1FD00;
  if (!LOBYTE(this[15].__vftable))
    goto LABEL_7;
  if (!LOBYTE(this[14].__vftable))
    goto LABEL_5;
  if (SHIBYTE(this[13].__vftable) < 0)
  {
    operator delete(this[11].__vftable);
    if (SHIBYTE(this[9].__vftable) < 0)
      goto LABEL_10;
LABEL_5:
    if (!LOBYTE(this[6].__vftable))
      goto LABEL_7;
    goto LABEL_6;
  }
  if ((SHIBYTE(this[9].__vftable) & 0x80000000) == 0)
    goto LABEL_5;
LABEL_10:
  operator delete(this[7].__vftable);
  if (!LOBYTE(this[6].__vftable))
    goto LABEL_7;
LABEL_6:
  if (SHIBYTE(this[5].__vftable) < 0)
  {
    operator delete(this[3].__vftable);
    std::exception::~exception(this);
    return;
  }
LABEL_7:
  std::exception::~exception(this);
}

_BYTE *sub_22319FFBC(_BYTE *__dst, __int128 *a2)
{
  __int128 v4;

  *__dst = 0;
  __dst[96] = 0;
  if (*((_BYTE *)a2 + 96))
  {
    *__dst = 0;
    __dst[24] = 0;
    if (*((_BYTE *)a2 + 24))
    {
      if (*((char *)a2 + 23) < 0)
      {
        sub_223197FA4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
      }
      else
      {
        v4 = *a2;
        *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
        *(_OWORD *)__dst = v4;
      }
      __dst[24] = 1;
    }
    sub_2231A0074(__dst + 32, a2 + 2);
    __dst[96] = 1;
  }
  return __dst;
}

void sub_2231A0044(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  sub_22319FD28(v1);
  _Unwind_Resume(a1);
}

char *sub_2231A0074(char *__dst, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  __int128 v6;

  *__dst = 0;
  __dst[56] = 0;
  if (*((_BYTE *)a2 + 56))
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_223197FA4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v4 = *a2;
      *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)__dst = v4;
    }
    *((_QWORD *)__dst + 3) = *((_QWORD *)a2 + 3);
    v5 = __dst + 32;
    if (*((char *)a2 + 55) < 0)
    {
      sub_223197FA4(v5, *((void **)a2 + 4), *((_QWORD *)a2 + 5));
    }
    else
    {
      v6 = a2[2];
      *((_QWORD *)__dst + 6) = *((_QWORD *)a2 + 6);
      *(_OWORD *)v5 = v6;
    }
    __dst[56] = 1;
  }
  return __dst;
}

void sub_2231A010C(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
  {
    operator delete(*(void **)v1);
    sub_22319FDB4(v1);
    _Unwind_Resume(a1);
  }
  sub_22319FDB4(v1);
  _Unwind_Resume(a1);
}

void sub_2231A0144(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)off_24EC1FD00;
  if (!LOBYTE(this[15].__vftable))
    goto LABEL_10;
  if (!LOBYTE(this[14].__vftable))
    goto LABEL_5;
  if (SHIBYTE(this[13].__vftable) < 0)
  {
    operator delete(this[11].__vftable);
    if ((SHIBYTE(this[9].__vftable) & 0x80000000) == 0)
    {
LABEL_5:
      if (!LOBYTE(this[6].__vftable))
        goto LABEL_10;
      goto LABEL_6;
    }
  }
  else if ((SHIBYTE(this[9].__vftable) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(this[7].__vftable);
  if (!LOBYTE(this[6].__vftable))
    goto LABEL_10;
LABEL_6:
  if (SHIBYTE(this[5].__vftable) < 0)
    operator delete(this[3].__vftable);
LABEL_10:
  std::exception::~exception(this);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231A01E4(uint64_t a1)
{
  *(_QWORD *)a1 = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  return std::streambuf::~streambuf();
}

uint64_t sub_2231A0234(uint64_t a1)
{
  int v2;
  size_t v3;
  void **p_dst;
  unint64_t v5;
  unint64_t v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v15;
  void **__dst;
  size_t v17;
  int64_t v18;
  _QWORD v19[2];

  v2 = *(_DWORD *)(a1 + 104);
  if ((v2 & 0x10) != 0)
  {
    v5 = *(_QWORD *)(a1 + 96);
    v6 = *(_QWORD *)(a1 + 56);
    if (v5 < v6)
    {
      *(_QWORD *)(a1 + 96) = v6;
      v5 = v6;
    }
    v7 = *(const void **)(a1 + 48);
    v3 = v5 - (_QWORD)v7;
    if (v5 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_28;
  }
  else
  {
    if ((v2 & 8) == 0)
    {
      v3 = 0;
      HIBYTE(v18) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_14;
    }
    v7 = *(const void **)(a1 + 24);
    v3 = *(_QWORD *)(a1 + 40) - (_QWORD)v7;
    if (v3 >= 0x7FFFFFFFFFFFFFF8)
LABEL_28:
      sub_22316DBC0();
  }
  if (v3 >= 0x17)
  {
    v8 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v8 = v3 | 7;
    v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    v17 = v3;
    v18 = v9 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_13;
  }
  HIBYTE(v18) = v3;
  p_dst = (void **)&__dst;
  if (v3)
LABEL_13:
    memmove(p_dst, v7, v3);
LABEL_14:
  *((_BYTE *)p_dst + v3) = 0;
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v10 = v17;
  v15 = v10;
  sub_224553110(*(_QWORD *)a1, &v15);
  if (SHIBYTE(v18) < 0)
  {
    v12 = v15;
    v11 = __dst;
    if (!__dst && v15)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v11 = 0;
    }
  }
  else
  {
    v11 = (void **)&__dst;
    v12 = v15;
  }
  v13 = *(_QWORD *)a1;
  v19[0] = v12;
  v19[1] = v11;
  sub_224555608(v13, v19);
  if (SHIBYTE(v18) < 0)
    operator delete(__dst);
  std::ostream::~ostream();
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  return a1;
}

void sub_2231A0418(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231A0484()
{
  return 7;
}

uint64_t sub_2231A048C(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2231A0494@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 3, a1 + 32, 3, a1 + 44, 2);
}

uint64_t sub_2231A04B0(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_2231A0534(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  int v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __int16 v23;
  std::__shared_weak_count *size;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::logic_error *exception;
  std::string v30;
  _BYTE v31[12];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 48) != 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2231A0838(a1);
    std::logic_error::logic_error(exception, &v30);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v30.__r_.__value_.__r.__words[0] = v4;
      v30.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(unint64_t *)(a1 + 8);
    }
  }
  else
  {
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_DWORD *)(a1 + 24);
  v14 = v11 == 0;
  v12 = v11 != 0;
  v13 = v14;
  if (!*(_DWORD *)(a1 + 28))
    v13 = 1;
  v14 = v13 == 0;
  if (v13)
    v15 = 0;
  else
    v15 = ((unint64_t)*(unsigned int *)(a1 + 32) << 31) & 0x7FFFFFFF00000000;
  v16 = v15 | (2 * v12);
  v17 = *(_QWORD *)(a1 + 24);
  if (!v14)
    v17 = 0;
  *(_DWORD *)v31 = 2;
  *(_QWORD *)&v31[4] = v17;
  v18 = v17;
  v19 = *(_QWORD *)v31;
  v20 = HIDWORD(v17);
  *(_DWORD *)v31 = 1;
  *(_QWORD *)&v31[4] = v16;
  v21 = *(_QWORD *)v31;
  v22 = HIDWORD(v15);
  if (HIDWORD(v17) * HIDWORD(v15) == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v23 = *(_WORD *)(a1 + 52);
  size = (std::__shared_weak_count *)v30.__r_.__value_.__l.__size_;
  if (v30.__r_.__value_.__l.__size_)
  {
    v25 = (unint64_t *)(v30.__r_.__value_.__l.__size_ + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  *(_QWORD *)a2 = v30.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a2 + 8) = size;
  *(_QWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 24) = v19;
  *(_DWORD *)(a2 + 32) = v20;
  *(_QWORD *)(a2 + 36) = v21;
  *(_DWORD *)(a2 + 44) = v22;
  *(_QWORD *)(a2 + 48) = v18;
  *(_QWORD *)(a2 + 56) = v16;
  *(_WORD *)(a2 + 64) = v23;
  if (size)
  {
    v27 = (unint64_t *)&size->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_2231A07EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_2231A0838(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2231A240C();
  v3 = sub_2231A29BC();
  v5 = *(_DWORD *)(a1 + 48);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

uint64_t sub_2231A08B0(char *__s, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int *a6)
{
  uint64_t result;
  _DWORD v12[6];
  int v13;
  _QWORD **v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v13 = 0;
  sub_2231A0C08(v12, __s);
  v14 = (_QWORD **)v12;
  v15 = a2;
  v16 = v12;
  v17 = a2;
  v18 = a2;
  if (v13 == -1)
    sub_22316DD70();
  v19 = &v14;
  ((void (*)(_QWORD **, _DWORD *))off_24EC1FE28[v13])(&v19, v12);
  v14 = (_QWORD **)v12;
  v15 = a3;
  v16 = v12;
  v17 = a3;
  v18 = a3;
  if (v13 == -1)
    sub_22316DD70();
  v19 = &v14;
  ((void (*)(_QWORD **, _DWORD *))off_24EC1FE40[v13])(&v19, v12);
  v14 = (_QWORD **)v12;
  v15 = a4;
  v16 = v12;
  v17 = a4;
  v18 = a4;
  if (v13 == -1)
    sub_22316DD70();
  v19 = &v14;
  ((void (*)(_QWORD **, _DWORD *))off_24EC1FE28[v13])(&v19, v12);
  v14 = (_QWORD **)v12;
  v15 = a5;
  v16 = v12;
  v17 = a5;
  v18 = a5;
  if (v13 == -1)
    sub_22316DD70();
  v19 = &v14;
  ((void (*)(_QWORD **, _DWORD *))off_24EC1FE58[v13])(&v19, v12);
  sub_2231A0B14((uint64_t)&v14, (uint64_t)v12, a6);
  if (v13 == -1)
    sub_22316DD70();
  v14 = &v19;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24EC1F9D0[v13])(&v14, v12);
  if (v13 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24EC1F9B8[v13])(&v14, v12);
  return result;
}

void sub_2231A0A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2231A0A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2231A0AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2231A0AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2231A0AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2231A0AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2231A0B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2231A0B14(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  _QWORD *v5;
  uint64_t v6;
  void *__p[2];
  char v8;
  uint64_t v9[5];
  uint64_t *v10;

  sub_22456E6D0(v9);
  v5 = (_QWORD *)sub_22456E810(v9);
  sub_22446FB94(v5, a3);
  sub_22456E81C(v9, __p);
  sub_22456E764(v9);
  v9[0] = a2;
  v9[1] = (uint64_t)__p;
  v9[2] = a2;
  v9[3] = (uint64_t)__p;
  v9[4] = (uint64_t)__p;
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    sub_22316DD70();
  v10 = v9;
  ((void (*)(uint64_t **, uint64_t))off_24EC1F9A0[v6])(&v10, a2);
  if (v8 < 0)
    operator delete(__p[0]);
}

void sub_2231A0BD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_2231A0C08(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24EC1F9B8[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

_DWORD *sub_2231A0CF8(_DWORD ***a1)
{
  return sub_2231A0D14(**a1, (char *)(*a1)[1]);
}

void sub_2231A0D04(uint64_t a1, uint64_t a2)
{
  sub_2231A0E04((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_2231A0D14(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24EC1F9B8[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_2231A0E04(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24EC1F9B8[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_22319BD1C((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_2231A0FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_2231A0FFC(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_2231A10F4((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_2231A10EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_2231A10F4(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  char *v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (char *)*a1;
      v14 = (char *)a1[1];
      if (v14 == *a1)
        goto LABEL_23;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
LABEL_23:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_28;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v11 - 1) = *((_QWORD *)v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *((_QWORD *)v14 - 2) = 0;
    *((_QWORD *)v14 - 1) = 0;
    *((_QWORD *)v14 - 3) = 0;
    v14 -= 24;
  }
  while (v14 != v13);
  v19 = (char *)*a1;
  v14 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  if (v14 != v19)
  {
    do
    {
      if (*(v14 - 1) < 0)
        operator delete(*((void **)v14 - 3));
      v14 -= 24;
    }
    while (v14 != v19);
    v14 = v19;
  }
LABEL_28:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_2231A130C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319C040((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_2231A1320(uint64_t **result)
{
  uint64_t v1;
  __int128 *v2;
  uint64_t v3;
  __int128 v4;
  char v5;

  v1 = **result;
  v2 = (__int128 *)(*result)[1];
  v3 = *(unsigned int *)(v1 + 24);
  if ((_DWORD)v3 != -1)
    result = (uint64_t **)((uint64_t (*)(char *, uint64_t))off_24EC1F9B8[v3])(&v5, v1);
  *(_DWORD *)(v1 + 24) = -1;
  if (*((char *)v2 + 23) < 0)
  {
    result = (uint64_t **)sub_223197FA4((_BYTE *)v1, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v4 = *v2;
    *(_QWORD *)(v1 + 16) = *((_QWORD *)v2 + 2);
    *(_OWORD *)v1 = v4;
  }
  *(_DWORD *)(v1 + 24) = 1;
  return result;
}

void sub_2231A13BC(uint64_t a1, uint64_t a2)
{
  sub_2231A1464((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

char *sub_2231A13C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  __int128 v5;
  char *result;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_2231A15E8((char **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
  }
  else
  {
    if (*(char *)(v3 + 23) < 0)
    {
      sub_223197FA4(*(_BYTE **)(a2 + 8), *(void **)v3, *(_QWORD *)(v3 + 8));
    }
    else
    {
      v5 = *(_OWORD *)v3;
      *(_QWORD *)(v4 + 16) = *(_QWORD *)(v3 + 16);
      *(_OWORD *)v4 = v5;
    }
    result = (char *)(v4 + 24);
    *(_QWORD *)(a2 + 8) = v4 + 24;
    *(_QWORD *)(a2 + 8) = v4 + 24;
  }
  return result;
}

void sub_2231A145C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2231A1464(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  __int128 *v5;
  __int128 v6;
  uint64_t v7;
  char v8;
  void *v9;
  _BYTE v10[15];
  char v11;
  __int128 __p;
  uint64_t v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v14 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v14[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = v3;
  *(_QWORD *)v10 = v14[0];
  *(_QWORD *)&v10[7] = *(_QWORD *)((char *)v14 + 7);
  v11 = v4;
  memset(v14, 0, 15);
  v5 = (__int128 *)a1[1];
  if (*((char *)v5 + 23) < 0)
  {
    sub_223197FA4(&__p, *(void **)v5, *((_QWORD *)v5 + 1));
  }
  else
  {
    v6 = *v5;
    v13 = *((_QWORD *)v5 + 2);
    __p = v6;
  }
  v7 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v7 != -1)
    ((void (*)(char *, uint64_t))off_24EC1F9B8[v7])(&v8, v2);
  *(_DWORD *)(v2 + 24) = -1;
  sub_22319BD1C((_QWORD *)v2, (uint64_t)&v9, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    if ((v11 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v9);
    return;
  }
  operator delete((void *)__p);
  if (v11 < 0)
    goto LABEL_10;
}

void sub_2231A15A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_2231A15E8(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;
  char *v13;
  void **v14;
  char *v16;
  char *v17;
  char *v18;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v5];
  v16 = v10;
  v17 = v10;
  v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_223197FA4(v10, *(void **)a2, *(_QWORD *)(a2 + 8));
    v3 = *a1;
    v4 = a1[1];
    v10 = v16;
    v11 = v17 + 24;
    if (v4 == *a1)
    {
LABEL_17:
      v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)a2;
    *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 16);
    v11 = v10 + 24;
    if (v4 == v3)
      goto LABEL_17;
  }
  do
  {
    v12 = *(_OWORD *)(v4 - 24);
    *((_QWORD *)v10 - 1) = *((_QWORD *)v4 - 1);
    *(_OWORD *)(v10 - 24) = v12;
    v10 -= 24;
    *((_QWORD *)v4 - 2) = 0;
    *((_QWORD *)v4 - 1) = 0;
    *((_QWORD *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  v13 = *a1;
  v3 = a1[1];
LABEL_18:
  *a1 = v10;
  a1[1] = v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0)
        operator delete(*v14);
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    v3 = v13;
  }
  if (v3)
    operator delete(v3);
  return v11;
}

void sub_2231A17A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319C040((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_2231A17BC(_DWORD ***a1)
{
  return sub_2231A17D8(**a1, (char *)(*a1)[1]);
}

void sub_2231A17C8(uint64_t a1, uint64_t a2)
{
  sub_2231A18C8((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_2231A17D8(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24EC1F9B8[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_2231A18C8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24EC1F9B8[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_22319BD1C((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_2231A1A7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_2231A1AC0(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_2231A1BB8((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_2231A1BB0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_2231A1BB8(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  char *v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (char *)*a1;
      v14 = (char *)a1[1];
      if (v14 == *a1)
        goto LABEL_23;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
LABEL_23:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_28;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v11 - 1) = *((_QWORD *)v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *((_QWORD *)v14 - 2) = 0;
    *((_QWORD *)v14 - 1) = 0;
    *((_QWORD *)v14 - 3) = 0;
    v14 -= 24;
  }
  while (v14 != v13);
  v19 = (char *)*a1;
  v14 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  if (v14 != v19)
  {
    do
    {
      if (*(v14 - 1) < 0)
        operator delete(*((void **)v14 - 3));
      v14 -= 24;
    }
    while (v14 != v19);
    v14 = v19;
  }
LABEL_28:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_2231A1DD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319C040((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_2231A1DE4(_DWORD ***a1)
{
  return sub_2231A1E00(**a1, (char *)(*a1)[1]);
}

void sub_2231A1DF0(uint64_t a1, uint64_t a2)
{
  sub_2231A1EF0((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_2231A1E00(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24EC1F9B8[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_2231A1EF0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24EC1F9B8[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_22319BD1C((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_2231A20A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_2231A20E8(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_2231A21E0((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_2231A21D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_2231A21E0(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  char *v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (char *)*a1;
      v14 = (char *)a1[1];
      if (v14 == *a1)
        goto LABEL_23;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
LABEL_23:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_28;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v11 - 1) = *((_QWORD *)v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *((_QWORD *)v14 - 2) = 0;
    *((_QWORD *)v14 - 1) = 0;
    *((_QWORD *)v14 - 3) = 0;
    v14 -= 24;
  }
  while (v14 != v13);
  v19 = (char *)*a1;
  v14 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  if (v14 != v19)
  {
    do
    {
      if (*(v14 - 1) < 0)
        operator delete(*((void **)v14 - 3));
      v14 -= 24;
    }
    while (v14 != v19);
    v14 = v19;
  }
LABEL_28:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_2231A23F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319C040((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *sub_2231A240C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_255788FB8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255788FB8))
  {
    sub_223174DE4(v7, "ConstImageView");
    v2 = sub_2231A26C8();
    sub_2231A2610((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_2231A2610((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_255788FA0, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255788FA0, &dword_22314D000);
          __cxa_guard_release(&qword_255788FB8);
          return &stru_255788FA0;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_255788FA0;
}

void sub_2231A255C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_255788FB8);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_255788FB8);
  _Unwind_Resume(a1);
}

void sub_2231A2610(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2231A26AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_2231A26C8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_255788FD8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255788FD8))
    return &stru_255788FC0;
  sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Two16f]", __p);
  sub_22457326C((uint64_t)__p, &stru_255788FC0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255788FC0, &dword_22314D000);
  __cxa_guard_release(&qword_255788FD8);
  return &stru_255788FC0;
}

void sub_2231A2780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_255788FD8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_255788FD8);
  _Unwind_Resume(a1);
}

__int128 *sub_2231A27C0()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_255788FF8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255788FF8))
    return &xmmword_255788FE0;
  v2 = (char *)sub_2231A289C();
  if (v2[23] < 0)
  {
    sub_223197FA4(&xmmword_255788FE0, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_255788FF0 = *((_QWORD *)v2 + 2);
    xmmword_255788FE0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788FE0, &dword_22314D000);
  __cxa_guard_release(&qword_255788FF8);
  return &xmmword_255788FE0;
}

void sub_2231A2884(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255788FF8);
  _Unwind_Resume(a1);
}

void *sub_2231A289C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_255789018);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255789018))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::DynamicBuffer]", qword_255789000);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255789000, &dword_22314D000);
    __cxa_guard_release(&qword_255789018);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_255789038);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_255789038))
    return &unk_255789020;
  sub_224573040((uint64_t)qword_255789000, (uint64_t)&unk_255789020);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_255789020, &dword_22314D000);
  __cxa_guard_release(&qword_255789038);
  return &unk_255789020;
}

void sub_2231A298C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255789038);
  _Unwind_Resume(a1);
}

void sub_2231A29A4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255789018);
  _Unwind_Resume(a1);
}

std::string *sub_2231A29BC()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_255789058);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255789058))
  {
    sub_223174DE4(v7, "ConstImageView");
    v2 = sub_2231A2C78();
    sub_2231A2BC0((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_2231A2BC0((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_255789040, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789040, &dword_22314D000);
          __cxa_guard_release(&qword_255789058);
          return &stru_255789040;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_255789040;
}

void sub_2231A2B0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_255789058);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_255789058);
  _Unwind_Resume(a1);
}

void sub_2231A2BC0(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2231A2C5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_2231A2C78()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_255789078);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255789078))
    return &stru_255789060;
  sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Dynamic]", __p);
  sub_22457326C((uint64_t)__p, &stru_255789060);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789060, &dword_22314D000);
  __cxa_guard_release(&qword_255789078);
  return &stru_255789060;
}

void sub_2231A2D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_255789078);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_255789078);
  _Unwind_Resume(a1);
}

uint64_t sub_2231A2D70@<X0>(_DWORD *a1@<X0>, _WORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  __int16 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  sub_2231A2FBC(a1, &v13);
  v14 = v13;
  if (v13)
  {
    v3 = (std::__shared_weak_count *)operator new();
    v4 = v13;
    v3->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC20058;
    v3->__shared_owners_ = 0;
    v3->__shared_weak_owners_ = 0;
    v3[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  }
  else
  {
    v3 = 0;
  }
  v15 = v3;
  v13 = 0;
  sub_22449BBB4((uint64_t)a2, &v14, 0);
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 104))(*(_QWORD *)a2);
  v6 = v5;
  if ((v5 & 0xFFFFFF) <= 0x10000)
    v6 = 0;
  v7 = v5 & 0xFF00;
  if ((v5 & 0xFF0000) == 0)
    v7 = 0;
  a2[36] = v7 & 0xFF00 | v6;
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  result = v13;
  v13 = 0;
  if (result)
  {
    v12 = sub_224485244(result);
    return MEMORY[0x227684CE8](v12, 0x1091C406A8758A4);
  }
  return result;
}

void sub_2231A2E84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2231A30A4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2231A2E98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  sub_223167354(v2);
  sub_223167354((uint64_t)va1);
  sub_2231A30A4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2231A2EBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va1);
  sub_2231A30A4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2231A2ED8(uint64_t a1)
{
  sub_223167354(a1 + 8);
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231A2F14()
{
  return 3;
}

uint64_t sub_2231A2F1C(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_2231A2F24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 2, a1 + 64, 2, a1 + 72, 2);
}

uint64_t sub_2231A2F40(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t sub_2231A2FBC@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  _BYTE v5[8];
  _OWORD v6[2];
  _QWORD v7[6];

  v7[5] = &off_24EC1FF78;
  sub_224498D18(a1, (uint64_t)v5);
  v3 = operator new();
  *(_QWORD *)v3 = &off_24EC1FFC0;
  *(_OWORD *)(v3 + 8) = v6[0];
  *(_OWORD *)(v3 + 20) = *(_OWORD *)((char *)v6 + 12);
  sub_2244E32B8((__n128 *)(v3 + 40), (__n128 *)v7);
  *(_OWORD *)(v3 + 64) = *(_OWORD *)&v7[3];
  *a2 = v3;
  return sub_224485244((uint64_t)v5);
}

void sub_2231A3060(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  v4 = nullsub_30(v2);
  MEMORY[0x227684CE8](v4, 0x1091C406A8758A4);
  sub_224485244((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231A3090(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_224485244((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2231A30A4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_224485244(v2);
    MEMORY[0x227684CE8](v3, 0x1091C406A8758A4);
  }
  return a1;
}

void sub_2231A30EC()
{
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231A3100()
{
  return 3;
}

void sub_2231A3110(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_2231A3118()
{
  return 0;
}

__int128 *sub_2231A3120()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_255789098);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255789098))
  {
    v2 = sub_2231A31F8();
    if (*((char *)v2 + 23) < 0)
    {
      sub_223197FA4(&xmmword_255789080, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_255789090 = *((_QWORD *)v2 + 2);
      xmmword_255789080 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255789080, &dword_22314D000);
    __cxa_guard_release(&qword_255789098);
  }
  if (byte_255789097 >= 0)
    return &xmmword_255789080;
  else
    return (__int128 *)xmmword_255789080;
}

void sub_2231A31E0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255789098);
  _Unwind_Resume(a1);
}

__int128 *sub_2231A31F8()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2557890B8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2557890B8))
    return &xmmword_2557890A0;
  v2 = sub_2231A32D4();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&xmmword_2557890A0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_2557890B0 = v2->__r_.__value_.__r.__words[2];
    xmmword_2557890A0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557890A0, &dword_22314D000);
  __cxa_guard_release(&qword_2557890B8);
  return &xmmword_2557890A0;
}

void sub_2231A32BC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2557890B8);
  _Unwind_Resume(a1);
}

std::string *sub_2231A32D4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2557890D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2557890D8))
    return &stru_2557890C0;
  sub_2231A34EC((uint64_t)__p);
  sub_2231A33C4((char *)__p, &stru_2557890C0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_2557890C0, &dword_22314D000);
  __cxa_guard_release(&qword_2557890D8);
  return &stru_2557890C0;
}

void sub_2231A3384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2557890D8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2557890D8);
  _Unwind_Resume(a1);
}

void sub_2231A33C4(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2231A36D0();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_22319BD1C(&__p, (uint64_t)__dst, 1uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_2231A34C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_22319BB48(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2231A34EC(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_255789118);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_255789118))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Gray16f>]", qword_255789100);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255789100, &dword_22314D000);
    __cxa_guard_release(&qword_255789118);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_255789138);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_255789138))
  {
    v5 = sub_2231A38CC(qword_255789100, "<", 0);
    sub_2231A37C8(qword_255789100, 0, v5, qword_255789120);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255789120, &dword_22314D000);
    __cxa_guard_release(&qword_255789138);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_255789158);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_255789158))
  {
    sub_224573040((uint64_t)qword_255789120, (uint64_t)&xmmword_255789140);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255789140, &dword_22314D000);
    __cxa_guard_release(&qword_255789158);
  }
  if (byte_255789157 < 0)
  {
    sub_223197FA4((_BYTE *)a1, (void *)xmmword_255789140, *((unint64_t *)&xmmword_255789140 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_255789140;
    *(_QWORD *)(a1 + 16) = unk_255789150;
  }
}

void sub_2231A3688(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255789158);
  _Unwind_Resume(a1);
}

void sub_2231A36A0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255789138);
  _Unwind_Resume(a1);
}

void sub_2231A36B8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255789118);
  _Unwind_Resume(a1);
}

std::string *sub_2231A36D0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2557890F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2557890F8))
    return &stru_2557890E0;
  sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Gray16f]", __p);
  sub_22457326C((uint64_t)__p, &stru_2557890E0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_2557890E0, &dword_22314D000);
  __cxa_guard_release(&qword_2557890F8);
  return &stru_2557890E0;
}

void sub_2231A3788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2557890F8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2557890F8);
  _Unwind_Resume(a1);
}

_QWORD *sub_2231A37C8@<X0>(_QWORD *result@<X0>, unint64_t a2@<X1>, size_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  unint64_t v7;
  size_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  size_t v14;

  v5 = result;
  if ((*((char *)result + 23) & 0x80000000) == 0)
  {
    v7 = *((unsigned __int8 *)result + 23);
    if (v7 >= a2)
    {
      v8 = v7 - a2;
      if (v8 >= a3)
        v9 = a3;
      else
        v9 = v8;
      if (v9 < 0x7FFFFFFFFFFFFFF8)
        goto LABEL_7;
LABEL_19:
      sub_22316DBC0();
    }
LABEL_20:
    sub_2231A39C0();
  }
  v13 = result[1];
  if (v13 < a2)
    goto LABEL_20;
  v5 = (_QWORD *)*result;
  v14 = v13 - a2;
  if (v14 >= a3)
    v9 = a3;
  else
    v9 = v14;
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_19;
LABEL_7:
  if (v9 >= 0x17)
  {
    v10 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v10 = v9 | 7;
    v11 = v10 + 1;
    v12 = operator new(v10 + 1);
    a4[1] = v9;
    a4[2] = v11 | 0x8000000000000000;
    *a4 = v12;
    a4 = v12;
  }
  else
  {
    *((_BYTE *)a4 + 23) = v9;
    if (!v9)
    {
      *(_BYTE *)a4 = 0;
      return result;
    }
  }
  result = memmove(a4, (char *)v5 + a2, v9);
  *((_BYTE *)a4 + v9) = 0;
  return result;
}

unint64_t sub_2231A38CC(uint64_t *a1, char *__s, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  int64_t v9;
  void *v10;
  char *v11;
  int64_t v12;
  char *v13;
  int v14;
  uint64_t v15;
  char *v16;

  v5 = (uint64_t)a1;
  if (*((char *)a1 + 23) < 0)
  {
    v5 = *a1;
    v6 = a1[1];
    v7 = strlen(__s);
    if (v6 < a3)
      return -1;
  }
  else
  {
    v6 = *((unsigned __int8 *)a1 + 23);
    v7 = strlen(__s);
    if (v6 < a3)
      return -1;
  }
  v9 = v7;
  if (v7)
  {
    v10 = (void *)(v5 + a3);
    v11 = (char *)(v5 + v6);
    v12 = v6 - a3;
    if ((uint64_t)(v6 - a3) >= v9)
    {
      v14 = *__s;
      do
      {
        v15 = v12 - v9;
        if (v15 == -1)
          break;
        v16 = (char *)memchr(v10, v14, v15 + 1);
        if (!v16)
          break;
        v13 = v16;
        if (!memcmp(v16, __s, v9))
          goto LABEL_9;
        v10 = v13 + 1;
        v12 = v11 - (v13 + 1);
      }
      while (v12 >= v9);
    }
    v13 = v11;
LABEL_9:
    if (v13 == v11)
      return -1;
    else
      return (unint64_t)&v13[-v5];
  }
  return a3;
}

void sub_2231A39C0()
{
  sub_223198218("basic_string");
}

void sub_2231A39D8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231A39FC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_224485244(result);
    JUMPOUT(0x227684CE8);
  }
  return result;
}

uint64_t sub_2231A3A30(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE3EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE3EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE3EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE3EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_2231A3AA0(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v17 = v4;
    v18 = v5;
    v15 = v4;
    v16 = v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  else
  {
    v17 = *(_QWORD *)(a1 + 8);
    v18 = 0;
    v15 = v4;
    v16 = 0;
  }
  sub_2231A3CC8(a2, &v15);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v18;
  if (v18)
  {
    v13 = (unint64_t *)&v18->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_2231A3B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_223167354((uint64_t)&a9);
  sub_223167354((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_2231A3BAC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231A3C18()
{
  return 3;
}

uint64_t sub_2231A3C20(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_2231A3C28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 2, a1 + 32, 2, a1 + 40, 2);
}

uint64_t sub_2231A3C44(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t *sub_2231A3CC8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int16 v17;
  uint64_t v19;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 72))(&v19, v3, 3);
  v9 = *(_QWORD *)(v19 + 16);
  *((_OWORD *)a1 + 1) = *(_OWORD *)v19;
  a1[4] = v9;
  v19 = 0;
  MEMORY[0x227684CE8]();
  v10 = *a1;
  v11 = (std::__shared_weak_count *)a1[1];
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 104))(v10);
  v16 = v15;
  if ((v15 & 0xFFFFFF) <= 0x10000)
    v16 = 0;
  v17 = v15 & 0xFF00;
  if ((v15 & 0xFF0000) == 0)
    v17 = 0;
  *((_WORD *)a1 + 20) = v17 & 0xFF00 | v16;
  return a1;
}

void sub_2231A3E18(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_2231A3E2C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  __int16 v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  v20 = v5;
  v21 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_2244E0B74((uint64_t)&v18, 2, a1 + 32, 2, a1 + 40, 2);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_WORD *)(a1 + 48);
  if (v4)
  {
    v10 = (unint64_t *)&v4->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    do
      v12 = __ldxr(v10);
    while (__stxr(v12 + 1, v10));
  }
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v18;
  *(_DWORD *)(a2 + 24) = v19;
  *(_QWORD *)(a2 + 32) = v8;
  *(_DWORD *)(a2 + 40) = 3;
  *(_WORD *)(a2 + 44) = v9;
  if (v4)
  {
    v13 = (unint64_t *)&v4->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  nullsub_30(&v18);
  v15 = v21;
  if (v21)
  {
    v16 = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_2231A3F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231A3F88(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231A3FF4()
{
  return 30;
}

uint64_t sub_2231A3FFC(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2231A4004@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 3, a1 + 32, 3, a1 + 44, 2);
}

uint64_t sub_2231A4020(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_2231A40A4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  int v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __int16 v23;
  std::__shared_weak_count *size;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::logic_error *exception;
  std::string v30;
  _BYTE v31[12];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 48) != 30)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2231A43A8(a1);
    std::logic_error::logic_error(exception, &v30);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v30.__r_.__value_.__r.__words[0] = v4;
      v30.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(unint64_t *)(a1 + 8);
    }
  }
  else
  {
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_DWORD *)(a1 + 24);
  v14 = v11 == 0;
  v12 = v11 != 0;
  v13 = v14;
  if (!*(_DWORD *)(a1 + 28))
    v13 = 1;
  v14 = v13 == 0;
  if (v13)
    v15 = 0;
  else
    v15 = ((unint64_t)*(unsigned int *)(a1 + 32) << 31) & 0x7FFFFFFF00000000;
  v16 = v15 | (4 * v12);
  v17 = *(_QWORD *)(a1 + 24);
  if (!v14)
    v17 = 0;
  *(_DWORD *)v31 = 4;
  *(_QWORD *)&v31[4] = v17;
  v18 = v17;
  v19 = *(_QWORD *)v31;
  v20 = HIDWORD(v17);
  *(_DWORD *)v31 = 1;
  *(_QWORD *)&v31[4] = v16;
  v21 = *(_QWORD *)v31;
  v22 = HIDWORD(v15);
  if (HIDWORD(v17) * HIDWORD(v15) == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v23 = *(_WORD *)(a1 + 52);
  size = (std::__shared_weak_count *)v30.__r_.__value_.__l.__size_;
  if (v30.__r_.__value_.__l.__size_)
  {
    v25 = (unint64_t *)(v30.__r_.__value_.__l.__size_ + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  *(_QWORD *)a2 = v30.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a2 + 8) = size;
  *(_QWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 24) = v19;
  *(_DWORD *)(a2 + 32) = v20;
  *(_QWORD *)(a2 + 36) = v21;
  *(_DWORD *)(a2 + 44) = v22;
  *(_QWORD *)(a2 + 48) = v18;
  *(_QWORD *)(a2 + 56) = v16;
  *(_WORD *)(a2 + 64) = v23;
  if (size)
  {
    v27 = (unint64_t *)&size->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_2231A435C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_2231A43A8(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2231A4420();
  v3 = sub_2231A29BC();
  v5 = *(_DWORD *)(a1 + 48);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_2231A4420()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_255789178);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255789178))
  {
    sub_223174DE4(v7, "ConstImageView");
    v2 = sub_2231A46DC();
    sub_2231A4624((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_2231A4624((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_255789160, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789160, &dword_22314D000);
          __cxa_guard_release(&qword_255789178);
          return &stru_255789160;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_255789160;
}

void sub_2231A4570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_255789178);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_255789178);
  _Unwind_Resume(a1);
}

void sub_2231A4624(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2231A46C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_2231A46DC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_255789198);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255789198))
    return &stru_255789180;
  sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Rgba16u]", __p);
  sub_22457326C((uint64_t)__p, &stru_255789180);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789180, &dword_22314D000);
  __cxa_guard_release(&qword_255789198);
  return &stru_255789180;
}

void sub_2231A4794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_255789198);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_255789198);
  _Unwind_Resume(a1);
}

uint64_t sub_2231A47D4@<X0>(_DWORD *a1@<X0>, _WORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  __int16 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  sub_2231A4A20(a1, &v13);
  v14 = v13;
  if (v13)
  {
    v3 = (std::__shared_weak_count *)operator new();
    v4 = v13;
    v3->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC20470;
    v3->__shared_owners_ = 0;
    v3->__shared_weak_owners_ = 0;
    v3[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  }
  else
  {
    v3 = 0;
  }
  v15 = v3;
  v13 = 0;
  sub_22449C314((uint64_t)a2, &v14, 0);
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 104))(*(_QWORD *)a2);
  v6 = v5;
  if ((v5 & 0xFFFFFF) <= 0x10000)
    v6 = 0;
  v7 = v5 & 0xFF00;
  if ((v5 & 0xFF0000) == 0)
    v7 = 0;
  a2[60] = v7 & 0xFF00 | v6;
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  result = v13;
  v13 = 0;
  if (result)
  {
    v12 = sub_224497414(result);
    return MEMORY[0x227684CE8](v12, 0x1091C40A44A61E0);
  }
  return result;
}

void sub_2231A48E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2231A4B20((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2231A48FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  sub_223167354(v2);
  sub_223167354((uint64_t)va1);
  sub_2231A4B20((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2231A4920(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va1);
  sub_2231A4B20((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2231A493C(uint64_t a1)
{
  sub_223167354(a1 + 8);
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231A4978()
{
  return 38;
}

uint64_t sub_2231A4980(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_2231A4988@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 3, a1 + 88, 3, a1 + 100, 2);
}

uint64_t sub_2231A49A4(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t sub_2231A4A20@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  _BYTE v5[8];
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v10[7];

  v10[6] = &off_24EC20390;
  sub_22449B554(a1, (uint64_t)v5);
  v3 = operator new();
  *(_QWORD *)v3 = &off_24EC203D8;
  *(_OWORD *)(v3 + 8) = v6;
  *(_OWORD *)(v3 + 24) = v7;
  *(_OWORD *)(v3 + 40) = v8;
  *(_QWORD *)(v3 + 56) = v9;
  sub_2244E32B8((__n128 *)(v3 + 64), (__n128 *)v10);
  *(_OWORD *)(v3 + 88) = *(_OWORD *)&v10[3];
  *(_QWORD *)(v3 + 104) = v10[5];
  *a2 = v3;
  return sub_224497414((uint64_t)v5);
}

void sub_2231A4ADC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  v4 = nullsub_30(v2);
  MEMORY[0x227684CE8](v4, 0x1091C40A44A61E0);
  sub_224497414((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231A4B0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_224497414((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2231A4B20(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_224497414(v2);
    MEMORY[0x227684CE8](v3, 0x1091C40A44A61E0);
  }
  return a1;
}

void sub_2231A4B68()
{
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231A4B7C()
{
  return 38;
}

__int128 *sub_2231A4B88()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2557891B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2557891B8))
  {
    v2 = sub_2231A4C60();
    if (*((char *)v2 + 23) < 0)
    {
      sub_223197FA4(&xmmword_2557891A0, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_2557891B0 = *((_QWORD *)v2 + 2);
      xmmword_2557891A0 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557891A0, &dword_22314D000);
    __cxa_guard_release(&qword_2557891B8);
  }
  if (byte_2557891B7 >= 0)
    return &xmmword_2557891A0;
  else
    return (__int128 *)xmmword_2557891A0;
}

void sub_2231A4C48(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2557891B8);
  _Unwind_Resume(a1);
}

__int128 *sub_2231A4C60()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2557891D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2557891D8))
    return &xmmword_2557891C0;
  v2 = sub_2231A4D3C();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&xmmword_2557891C0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_2557891D0 = v2->__r_.__value_.__r.__words[2];
    xmmword_2557891C0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557891C0, &dword_22314D000);
  __cxa_guard_release(&qword_2557891D8);
  return &xmmword_2557891C0;
}

void sub_2231A4D24(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2557891D8);
  _Unwind_Resume(a1);
}

std::string *sub_2231A4D3C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2557891F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2557891F8))
    return &stru_2557891E0;
  sub_2231A4F54((uint64_t)__p);
  sub_2231A4E2C((char *)__p, &stru_2557891E0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_2557891E0, &dword_22314D000);
  __cxa_guard_release(&qword_2557891F8);
  return &stru_2557891E0;
}

void sub_2231A4DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2557891F8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2557891F8);
  _Unwind_Resume(a1);
}

void sub_2231A4E2C(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2231A5138();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_22319BD1C(&__p, (uint64_t)__dst, 1uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_2231A4F28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_22319BB48(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2231A4F54(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_255789238);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_255789238))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Argb16u>]", qword_255789220);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255789220, &dword_22314D000);
    __cxa_guard_release(&qword_255789238);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_255789258);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_255789258))
  {
    v5 = sub_2231A38CC(qword_255789220, "<", 0);
    sub_2231A37C8(qword_255789220, 0, v5, qword_255789240);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255789240, &dword_22314D000);
    __cxa_guard_release(&qword_255789258);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_255789278);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_255789278))
  {
    sub_224573040((uint64_t)qword_255789240, (uint64_t)&xmmword_255789260);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255789260, &dword_22314D000);
    __cxa_guard_release(&qword_255789278);
  }
  if (byte_255789277 < 0)
  {
    sub_223197FA4((_BYTE *)a1, (void *)xmmword_255789260, *((unint64_t *)&xmmword_255789260 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_255789260;
    *(_QWORD *)(a1 + 16) = unk_255789270;
  }
}

void sub_2231A50F0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255789278);
  _Unwind_Resume(a1);
}

void sub_2231A5108(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255789258);
  _Unwind_Resume(a1);
}

void sub_2231A5120(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255789238);
  _Unwind_Resume(a1);
}

std::string *sub_2231A5138()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_255789218);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255789218))
    return &stru_255789200;
  sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Argb16u]", __p);
  sub_22457326C((uint64_t)__p, &stru_255789200);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789200, &dword_22314D000);
  __cxa_guard_release(&qword_255789218);
  return &stru_255789200;
}

void sub_2231A51F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_255789218);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_255789218);
  _Unwind_Resume(a1);
}

void sub_2231A5234(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231A5258(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_224497414(result);
    JUMPOUT(0x227684CE8);
  }
  return result;
}

uint64_t sub_2231A528C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE38EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE38EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE38EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE38EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_2231A52FC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  int v7;
  int v8;
  BOOL v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  _OWORD v30[2];

  v7 = *(_DWORD *)(a2 + 32);
  v6 = *(_DWORD *)(a2 + 36);
  v8 = *(_DWORD *)(a2 + 40);
  if (v7)
    v9 = v6 == 0;
  else
    v9 = 1;
  if (!v9 && v8 != 0)
  {
    v13 = result;
    v24 = v7 - 1;
    v14 = *(unsigned int *)(a2 + 48);
    v15 = *(unsigned int *)(a3 + 104);
    v25 = *(unsigned int *)(a2 + 44) | ((unint64_t)*(unsigned int *)(a3 + 100) << 32);
    v23 = 0;
    v26 = v6 - 1;
    v27 = v14 | (v15 << 32);
    v28 = v8 - 1;
    v29 = *(unsigned int *)(a2 + 52) | ((unint64_t)*(unsigned int *)(a3 + 108) << 32);
    v16 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v16)
    {
      v17 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v17 + 88))(v17, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v16 = *(_QWORD *)(a2 + 24);
    }
    v22 = *(_QWORD *)(a3 + 32);
    if (*(_BYTE *)(a3 + 128))
    {
      if (v22)
      {
        (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(a3 + 8) + 88))(*(_QWORD *)(a3 + 8), 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
        v22 = *(_QWORD *)(a3 + 32);
      }
    }
    memset(v30, 0, sizeof(v30));
    return sub_2231A5458((uint64_t)&v23, (uint64_t **)v30, v13, v16, v22, a6);
  }
  return result;
}

uint64_t sub_2231A5458(uint64_t result, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t *v7;
  _DWORD *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;

  v6 = (uint64_t *)a5;
  v7 = (uint64_t *)a4;
  v9 = (_DWORD *)result;
  if (*(_DWORD *)(result + 32))
  {
    v10 = 0;
    do
    {
      *a2 = v7;
      a2[2] = v6;
      if (v9[5])
      {
        v11 = 0;
        v12 = v7;
        v13 = v6;
        do
        {
          *a2 = v12;
          a2[2] = v13;
          v14 = *v12;
          if (!v13)
          {
            result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
            if ((_DWORD)result)
LABEL_18:
              abort();
          }
          *v13 = v14;
          v12 = (uint64_t *)((char *)v12 + 2 * v9[6]);
          v13 = (uint64_t *)((char *)v13 + 2 * v9[7]);
          ++v11;
        }
        while (v11 < v9[5]);
        *a2 = v12;
        a2[2] = v13;
      }
      else
      {
        *a2 = v7;
        a2[2] = v6;
        v12 = v7;
        v13 = v6;
        if (!v6)
          sub_2245744E0(result, (uint64_t)a2, a3, a4, a5, a6);
      }
      *v13 = *v12;
      v7 = (uint64_t *)((char *)v7 + 2 * v9[9]);
      v6 = (uint64_t *)((char *)v6 + 2 * v9[10]);
      ++v10;
    }
    while (v10 < v9[8]);
  }
  *a2 = v7;
  a2[2] = v6;
  if (v9[5])
  {
    v15 = 0;
    do
    {
      *a2 = v7;
      a2[2] = v6;
      v16 = *v7;
      if (!v6)
      {
        result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
        if ((_DWORD)result)
          goto LABEL_18;
      }
      *v6 = v16;
      v7 = (uint64_t *)((char *)v7 + 2 * v9[6]);
      v6 = (uint64_t *)((char *)v6 + 2 * v9[7]);
      ++v15;
    }
    while (v15 < v9[5]);
    *a2 = v7;
    a2[2] = v6;
  }
  else
  {
    *a2 = v7;
    a2[2] = v6;
    if (!v6)
      sub_2245744E0(result, (uint64_t)a2, a3, a4, a5, a6);
  }
  *v6 = *v7;
  return result;
}

void sub_2231A5634(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v17 = v4;
    v18 = v5;
    v15 = v4;
    v16 = v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  else
  {
    v17 = *(_QWORD *)(a1 + 8);
    v18 = 0;
    v15 = v4;
    v16 = 0;
  }
  sub_2231A585C(a2, &v15);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v18;
  if (v18)
  {
    v13 = (unint64_t *)&v18->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_2231A5724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_223167354((uint64_t)&a9);
  sub_223167354((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_2231A5740(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231A57AC()
{
  return 38;
}

uint64_t sub_2231A57B4(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2231A57BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2244E0B74(a2, 3, a1 + 32, 3, a1 + 44, 2);
}

uint64_t sub_2231A57D8(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t *sub_2231A585C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  _OWORD *v20;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 72))(&v20, v3, 38);
  v10 = v20[1];
  v9 = v20[2];
  *((_OWORD *)a1 + 1) = *v20;
  *((_OWORD *)a1 + 2) = v10;
  *((_OWORD *)a1 + 3) = v9;
  v20 = 0;
  MEMORY[0x227684CE8]();
  v11 = *a1;
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a1 + 32) = v18 & 0xFF00 | v17;
  return a1;
}

void sub_2231A59AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_2231A59C0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  __int16 v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  v20 = v5;
  v21 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_2244E0B74((uint64_t)&v18, 3, a1 + 32, 3, a1 + 44, 2);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_WORD *)(a1 + 72);
  if (v4)
  {
    v10 = (unint64_t *)&v4->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    do
      v12 = __ldxr(v10);
    while (__stxr(v12 + 1, v10));
  }
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v18;
  *(_DWORD *)(a2 + 24) = v19;
  *(_QWORD *)(a2 + 32) = v8;
  *(_DWORD *)(a2 + 40) = 38;
  *(_WORD *)(a2 + 44) = v9;
  if (v4)
  {
    v13 = (unint64_t *)&v4->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  nullsub_30(&v18);
  v15 = v21;
  if (v21)
  {
    v16 = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_2231A5B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2231A5B1C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v8 = 3;
  v9 = a2;
  sub_224553888(a1, &v8);
  if (a3 > 2)
    return (uint64_t)sub_2231A5C04(a1, (uint64_t *)(a2 + 16));
  v8 = 0;
  result = (uint64_t)sub_224553110(a1, (unint64_t *)&v8);
  if (a3 == 2)
  {
    v7 = 0;
    sub_224553110(a1, &v7);
    v8 = 0;
    v9 = 0;
    result = sub_224553410(a1, &v8);
    if (*(_QWORD *)(a2 + 24) != *(_QWORD *)(a2 + 16))
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/include/Reconstruction/Frame/JasperCloudsIO.h", 79, (uint64_t)"flags.size() == data.echos.size()", 33, (uint64_t)"Size mismatch", 13, (void (*)(void **))sub_22457406C);
      if ((_DWORD)result)
        abort();
    }
  }
  return result;
}

_BYTE *sub_2231A5C04(uint64_t a1, uint64_t *a2)
{
  _BYTE *result;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];

  v7 = (a2[1] - *a2) >> 5;
  result = sub_224553110(a1, (unint64_t *)&v7);
  v6 = *a2;
  for (i = a2[1]; v6 != i; v6 += 32)
  {
    LODWORD(v8[0]) = 1;
    sub_22455306C(a1, (unsigned int *)v8);
    v8[0] = 3;
    v8[1] = v6;
    sub_224553888(a1, v8);
    sub_2245531C8(a1, (unint64_t *)(v6 + 16));
    LODWORD(v8[0]) = 1;
    sub_22455306C(a1, (unsigned int *)v8);
    result = sub_224553020(a1, (unsigned int *)(v6 + 24));
  }
  return result;
}

void *sub_2231A5CBC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  void *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9[2];
  unsigned int v10;

  LODWORD(v9[0]) = 1;
  sub_22455306C(a2, (unsigned int *)v9);
  v9[0] = 2;
  v9[1] = a3;
  sub_2245536E0(a2, v9);
  v9[0] = 0x4FA4FA4FA4FA4FA5 * ((uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 2);
  result = sub_224553110(a2, v9);
  v6 = *(_QWORD *)(a3 + 8);
  v7 = *(_QWORD *)(a3 + 16) - v6;
  if (v7)
  {
    v8 = 180 * (v7 / 180);
    do
    {
      v10 = 2;
      sub_22455306C(a2, &v10);
      result = sub_2231A5DA0(a2, v6, v10);
      v6 += 180;
      v8 -= 180;
    }
    while (v8);
  }
  return result;
}

uint64_t **sub_2231A5DA0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t **result;
  uint64_t v7;
  uint64_t v8;

  v7 = 33;
  v8 = a2;
  sub_224553888(a1, &v7);
  sub_224552E88(a1, (char *)(a2 + 132));
  sub_22455315C(a1, (unsigned int *)(a2 + 136));
  LODWORD(v7) = 1;
  sub_22455306C(a1, (unsigned int *)&v7);
  sub_22455315C(a1, (unsigned int *)(a2 + 140));
  sub_22455315C(a1, (unsigned int *)(a2 + 144));
  sub_22455315C(a1, (unsigned int *)(a2 + 148));
  sub_22455315C(a1, (unsigned int *)(a2 + 152));
  sub_22455315C(a1, (unsigned int *)(a2 + 156));
  result = sub_22455315C(a1, (unsigned int *)(a2 + 160));
  if (a3 >= 2)
  {
    sub_224552E88(a1, (char *)(a2 + 164));
    v7 = 3;
    v8 = a2 + 168;
    return (uint64_t **)sub_224553888(a1, &v7);
  }
  return result;
}

void sub_2231A5E88(const void *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;

  v6 = a2 + 8;
  v7 = 2;
  sub_22455306C((uint64_t)a1, &v7);
  sub_224555270((uint64_t)a1);
  sub_22319F5F8(a1, v6);
  sub_2245554E0((uint64_t)a1);
  v7 = 2;
  sub_22455306C((uint64_t)a1, &v7);
  sub_224555270((uint64_t)a1);
  sub_22319F5F8(a1, a2 + 112);
  sub_2245554E0((uint64_t)a1);
  if (a3 >= 3)
  {
    v7 = 2;
    sub_22455306C((uint64_t)a1, &v7);
    sub_224555270((uint64_t)a1);
    sub_22319F5F8(a1, a2 + 216);
    sub_2245554E0((uint64_t)a1);
  }
  v7 = 2;
  sub_22455306C((uint64_t)a1, &v7);
  sub_224555270((uint64_t)a1);
  sub_22319F5F8(a1, a2 + 320);
  sub_2245554E0((uint64_t)a1);
  v7 = 2;
  sub_22455306C((uint64_t)a1, &v7);
  sub_224555270((uint64_t)a1);
  sub_22319F5F8(a1, a2 + 424);
  sub_2245554E0((uint64_t)a1);
}

void sub_2231A5FE4(uint64_t a1)
{
  void **v2;
  char *v3;
  unint64_t v4;
  char *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void **i;
  char *v11;
  uint64_t v12;
  __int128 v13;
  char *v14;
  __int128 v15;
  _OWORD v16[2];
  __int128 v17;
  unint64_t v18;

  v17 = 0u;
  memset(v16, 0, sizeof(v16));
  sub_224519078(&v12);
  v2 = (void **)v12;
  *(_QWORD *)&v16[0] = v12;
  *(_OWORD *)((char *)v16 + 8) = v13;
  v3 = v14;
  *((_QWORD *)&v16[1] + 1) = v14;
  v11 = (char *)v15;
  v17 = v15;
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v13 - v12) >> 3);
  v18 = v4;
  sub_224553110(a1, &v18);
  v12 = v4;
  *(_QWORD *)&v13 = v2;
  sub_224553AD4(a1, &v12);
  v5 = v11;
  v12 = (v11 - v3) / 24;
  sub_224553110(a1, (unint64_t *)&v12);
  if (v11 == v3)
  {
    if (v3)
LABEL_16:
      operator delete(v3);
  }
  else
  {
    v6 = 0;
    do
    {
      LODWORD(v18) = 2;
      sub_22455306C(a1, (unsigned int *)&v18);
      sub_224555270(a1);
      sub_2231A6388(a1, (uint64_t)&v3[v6]);
      sub_2245554E0(a1);
      v6 += 24;
    }
    while (24 * ((v11 - v3) / 24) != v6);
    if (v3)
    {
      if (v11 != v3)
      {
        do
        {
          v7 = (std::__shared_weak_count *)*((_QWORD *)v5 - 1);
          if (v7)
          {
            p_shared_owners = (unint64_t *)&v7->__shared_owners_;
            do
              v9 = __ldaxr(p_shared_owners);
            while (__stlxr(v9 - 1, p_shared_owners));
            if (!v9)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
          v5 -= 24;
        }
        while (v5 != v3);
        v3 = (char *)*((_QWORD *)&v16[1] + 1);
        v2 = *(void ***)&v16[0];
      }
      goto LABEL_16;
    }
  }
  if (v2)
  {
    for (i = (void **)*((_QWORD *)&v16[0] + 1); i != v2; i -= 3)
    {
      if (*((char *)i - 1) < 0)
        operator delete(*(i - 3));
    }
    operator delete(v2);
  }
}

void sub_2231A61C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_2231A6210((void **)va);
  _Unwind_Resume(a1);
}

void sub_2231A61D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_2231A6210((void **)va);
  _Unwind_Resume(a1);
}

void sub_2231A61E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_2231A6210((void **)va);
  _Unwind_Resume(a1);
}

void sub_2231A61FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_2231A6210((void **)va);
  _Unwind_Resume(a1);
}

void **sub_2231A6210(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void **v8;
  void **v9;
  void *v10;

  v2 = (char *)a1[3];
  if (v2)
  {
    v3 = (char *)a1[4];
    v4 = a1[3];
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  v8 = (void **)*a1;
  if (*a1)
  {
    v9 = (void **)a1[1];
    v10 = *a1;
    if (v9 != v8)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = *a1;
    }
    a1[1] = v8;
    operator delete(v10);
  }
  return a1;
}

void **sub_2231A62F0(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_2231A6388(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CFTypeID TypeID;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  CFTypeID v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *size;
  unint64_t *v20;
  unint64_t v21;
  const __CFArray *v22;
  CFTypeID v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count_vtbl *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  CFIndex Count;
  CFIndex i;
  const void *ValueAtIndex;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::string::size_type v44;
  char *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::string::size_type v52;
  int64_t v53;
  uint64_t v54;
  std::string::size_type v55;
  void *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t data_low;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  std::__shared_weak_count_vtbl *v70;
  std::__shared_weak_count *v71;
  std::__shared_weak_count_vtbl *v72;
  std::__shared_weak_count *v73;
  __int128 theArray;
  unint64_t v75;
  void *v76[2];
  std::string __p;
  std::string::size_type v78;
  std::__shared_weak_count_vtbl *v79;
  std::__shared_weak_count *v80;

  LOWORD(__p.__r_.__value_.__l.__data_) = *(_WORD *)a2;
  v4 = sub_224552F5C(a1, &__p);
  switch(*(_WORD *)a2)
  {
    case 0:
      v79 = *(std::__shared_weak_count_vtbl **)(a2 + 8);
      if (v79 && (TypeID = j__CFNumberGetTypeID(), sub_22452859C((CFTypeRef *)&v79, TypeID)))
      {
        sub_2231A6D40(&v79, *(CFTypeRef *)(a2 + 8));
        v72 = v79;
        v73 = v80;
        if (v80)
        {
          p_shared_owners = (unint64_t *)&v80->__shared_owners_;
          do
            v12 = __ldxr(p_shared_owners);
          while (__stxr(v12 + 1, p_shared_owners));
          v13 = v80;
          if (v80)
          {
            v14 = (unint64_t *)&v80->__shared_owners_;
            do
              v15 = __ldaxr(v14);
            while (__stlxr(v15 - 1, v14));
            if (!v15)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
        }
      }
      else
      {
        v72 = 0;
        v73 = 0;
      }
      sub_2231A6E84(&theArray, (uint64_t)&v72);
      sub_2245322E8((CFNumberRef *)&theArray);
      sub_22454B130((uint64_t)&__p, (char *)&v75);
      if (v76[0])
      {
        v76[1] = v76[0];
        operator delete(v76[0]);
      }
      v30 = (std::__shared_weak_count *)*((_QWORD *)&theArray + 1);
      if (*((_QWORD *)&theArray + 1))
      {
        v31 = (unint64_t *)(*((_QWORD *)&theArray + 1) + 8);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      v33 = v73;
      if (v73)
      {
        v34 = (unint64_t *)&v73->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      LODWORD(v75) = 2;
      sub_22455306C(a1, (unsigned int *)&v75);
      sub_224555270(a1);
      LOBYTE(v75) = __p.__r_.__value_.__s.__data_[0];
      sub_224552E88(a1, (char *)&v75);
      sub_2231A6F94(__p.__r_.__value_.__s.__data_[0], (uint64_t)&__p, a1);
      sub_2245554E0(a1);
      if (__p.__r_.__value_.__r.__words[2])
      {
        v78 = __p.__r_.__value_.__r.__words[2];
        operator delete((void *)__p.__r_.__value_.__r.__words[2]);
      }
      return;
    case 1:
      sub_224527CB8(*(_QWORD *)(a2 + 8), &__p);
      sub_2245532F8(a1, (const void **)&__p.__r_.__value_.__l.__data_);
      if ((_BYTE)v78 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      return;
    case 2:
      LOWORD(__p.__r_.__value_.__l.__data_) = sub_224527A4C(*(const __CFBoolean **)(a2 + 8));
      sub_22455326C(a1, &__p);
      return;
    case 3:
      __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(a2 + 8);
      if (__p.__r_.__value_.__r.__words[0]
        && (v16 = j__CFArrayGetTypeID(), sub_22452859C((CFTypeRef *)&__p.__r_.__value_.__l.__data_, v16)))
      {
        sub_2231A7194(&__p, *(CFTypeRef *)(a2 + 8));
        theArray = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v17 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
          size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v20 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v21 = __ldaxr(v20);
            while (__stlxr(v21 - 1, v20));
            if (!v21)
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
          }
        }
        v22 = (const __CFArray *)theArray;
      }
      else
      {
        v22 = 0;
        theArray = 0uLL;
      }
      memset(&__p, 0, sizeof(__p));
      Count = j__CFArrayGetCount(v22);
      sub_2231A6C10(&__p.__r_.__value_.__l.__data_, Count);
      if (Count)
      {
        for (i = 0; i != Count; ++i)
        {
          ValueAtIndex = j__CFArrayGetValueAtIndex((CFArrayRef)theArray, i);
          sub_2231A74D8(&v79, ValueAtIndex);
          v70 = v79;
          v71 = v80;
          if (v80)
          {
            v39 = (unint64_t *)&v80->__shared_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            v41 = v80;
            if (v80)
            {
              v42 = (unint64_t *)&v80->__shared_owners_;
              do
                v43 = __ldaxr(v42);
              while (__stlxr(v43 - 1, v42));
              if (!v43)
              {
                ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                std::__shared_weak_count::__release_weak(v41);
              }
            }
          }
          sub_224517DF0(&v75, &v70);
          v44 = __p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
          {
            v45 = sub_2231A7364(&__p.__r_.__value_.__l.__data_, (uint64_t)&v75);
            v46 = (std::__shared_weak_count *)v76[1];
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)v45;
            if (v76[1])
            {
              v47 = (unint64_t *)((char *)v76[1] + 8);
              do
                v48 = __ldaxr(v47);
              while (__stlxr(v48 - 1, v47));
              if (!v48)
              {
                ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                std::__shared_weak_count::__release_weak(v46);
              }
            }
          }
          else
          {
            *(_WORD *)__p.__r_.__value_.__l.__size_ = v75;
            *(_OWORD *)(v44 + 8) = *(_OWORD *)v76;
            v76[0] = 0;
            v76[1] = 0;
            __p.__r_.__value_.__l.__size_ = v44 + 24;
          }
          v49 = v71;
          if (v71)
          {
            v50 = (unint64_t *)&v71->__shared_owners_;
            do
              v51 = __ldaxr(v50);
            while (__stlxr(v51 - 1, v50));
            if (!v51)
            {
              ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
              std::__shared_weak_count::__release_weak(v49);
            }
          }
        }
      }
      v75 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3);
      sub_224553110(a1, &v75);
      v52 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
      {
        v53 = 24 * ((int64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) / 24);
        do
        {
          LODWORD(v79) = 2;
          sub_22455306C(a1, (unsigned int *)&v79);
          v54 = v79;
          sub_224555270(a1);
          sub_2231A6388(a1, v52, v54);
          sub_2245554E0(a1);
          v52 += 24;
          v53 -= 24;
        }
        while (v53);
        v52 = __p.__r_.__value_.__r.__words[0];
      }
      if (v52)
      {
        v55 = __p.__r_.__value_.__l.__size_;
        v56 = (void *)v52;
        if (__p.__r_.__value_.__l.__size_ != v52)
        {
          do
          {
            v57 = *(std::__shared_weak_count **)(v55 - 8);
            if (v57)
            {
              v58 = (unint64_t *)&v57->__shared_owners_;
              do
                v59 = __ldaxr(v58);
              while (__stlxr(v59 - 1, v58));
              if (!v59)
              {
                ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                std::__shared_weak_count::__release_weak(v57);
              }
            }
            v55 -= 24;
          }
          while (v55 != v52);
          v56 = (void *)__p.__r_.__value_.__r.__words[0];
        }
        __p.__r_.__value_.__l.__size_ = v52;
        operator delete(v56);
      }
      v66 = (std::__shared_weak_count *)*((_QWORD *)&theArray + 1);
      if (!*((_QWORD *)&theArray + 1))
        return;
      v69 = (unint64_t *)(*((_QWORD *)&theArray + 1) + 8);
      do
        v68 = __ldaxr(v69);
      while (__stlxr(v68 - 1, v69));
      break;
    case 4:
      __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(a2 + 8);
      if (__p.__r_.__value_.__r.__words[0]
        && (v23 = j__CFDictionaryGetTypeID(), sub_22452859C((CFTypeRef *)&__p.__r_.__value_.__l.__data_, v23)))
      {
        sub_22319EE1C(&__p, *(CFTypeRef *)(a2 + 8));
        theArray = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v24 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
          v26 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v27 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v28 = __ldaxr(v27);
            while (__stlxr(v28 - 1, v27));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
              std::__shared_weak_count::__release_weak(v26);
            }
          }
        }
        v29 = (std::__shared_weak_count_vtbl *)theArray;
      }
      else
      {
        v29 = 0;
        theArray = 0uLL;
      }
      sub_224528A88(&v79, v29, 1);
      sub_224518968(&v75, &v79);
      v60 = v80;
      if (v80)
      {
        v61 = (unint64_t *)&v80->__shared_owners_;
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      if (*((_QWORD *)&theArray + 1))
      {
        v63 = (unint64_t *)(*((_QWORD *)&theArray + 1) + 8);
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&theArray + 1) + 16))(*((_QWORD *)&theArray + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&theArray + 1));
        }
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 2;
      sub_22455306C(a1, (unsigned int *)&__p);
      data_low = LODWORD(__p.__r_.__value_.__l.__data_);
      sub_224555270(a1);
      sub_2231A5FE4(a1, &v75, data_low);
      sub_2245554E0(a1);
      v66 = (std::__shared_weak_count *)v76[0];
      if (!v76[0])
        return;
      v67 = (unint64_t *)((char *)v76[0] + 8);
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      break;
    default:
      sub_224574510((uint64_t)v4, v5, v6, v7, v8, v9);
  }
  if (!v68)
  {
    ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
    std::__shared_weak_count::__release_weak(v66);
  }
}

void sub_2231A6AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  sub_223167354(v6 - 64);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231A6AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231A6B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
    sub_223167354((uint64_t)&a14);
    sub_223167354((uint64_t)&a12);
    _Unwind_Resume(a1);
  }
  sub_223167354((uint64_t)&a14);
  sub_223167354((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_2231A6B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231A6B64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26)
{
  if ((_BYTE)a26)
  {
    if (a25 < 0)
    {
      operator delete(__p);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_2231A6C10(char **a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int16 v10;
  char *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  v2 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_22316E078();
    v4 = a1[1];
    v5 = 24 * a2;
    v6 = (char *)operator new(24 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *a1 = v8;
      a1[1] = v8;
      a1[2] = v7;
      if (v2)
LABEL_16:
        operator delete(v2);
    }
    else
    {
      v9 = &v6[v4 - v2];
      do
      {
        v10 = *((_WORD *)v4 - 12);
        v4 -= 24;
        *((_WORD *)v9 - 12) = v10;
        v9 -= 24;
        *(_OWORD *)(v9 + 8) = *(_OWORD *)(v4 + 8);
        *((_QWORD *)v4 + 1) = 0;
        *((_QWORD *)v4 + 2) = 0;
      }
      while (v4 != v2);
      v11 = *a1;
      v2 = a1[1];
      *a1 = v9;
      a1[1] = v8;
      a1[2] = v7;
      if (v2 != v11)
      {
        do
        {
          v12 = (std::__shared_weak_count *)*((_QWORD *)v2 - 1);
          if (v12)
          {
            p_shared_owners = (unint64_t *)&v12->__shared_owners_;
            do
              v14 = __ldaxr(p_shared_owners);
            while (__stlxr(v14 - 1, p_shared_owners));
            if (!v14)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
          v2 -= 24;
        }
        while (v2 != v11);
        v2 = v11;
      }
      if (v2)
        goto LABEL_16;
    }
  }
}

_QWORD *sub_2231A6D40(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    j__CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24EC205B8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_2231A6DA0(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    j__CFRelease(v1);
  __cxa_rethrow();
}

void sub_2231A6DB8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2231A6DD0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2231A6DF4(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    j__CFRelease(v1);
}

uint64_t sub_2231A6E14(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPK10__CFNumberEC1ES5_EUlS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPK10__CFNumberEC1ES5_EUlS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPK10__CFNumberEC1ES5_EUlS5_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPK10__CFNumberEC1ES5_EUlS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_QWORD *sub_2231A6E84(_QWORD *a1, uint64_t a2)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v4 = *(const void **)a2;
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v17 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_2231A6D40(&v18, v4);
  v8 = v19;
  *a1 = v18;
  a1[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = v19;
    if (v19)
    {
      v12 = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (!v17)
    return a1;
  v14 = (unint64_t *)&v17->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_2231A6F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *sub_2231A6F94(int a1, uint64_t a2, uint64_t a3)
{
  void *result;
  unint64_t v5;

  switch(a1)
  {
    case 0:
      LOBYTE(v5) = *(_BYTE *)sub_22454C038(a2 + 8);
      result = sub_224552E88(a3, (char *)&v5);
      break;
    case 1:
      LOWORD(v5) = *(_WORD *)sub_22454C290(a2 + 8);
      result = sub_224552F5C(a3, &v5);
      break;
    case 2:
      LODWORD(v5) = *(_DWORD *)sub_22454C378(a2 + 8);
      result = sub_22455306C(a3, (unsigned int *)&v5);
      break;
    case 3:
      v5 = *(_QWORD *)sub_22454C460(a2 + 8);
      result = sub_224553110(a3, &v5);
      break;
    case 5:
      LOBYTE(v5) = *(_BYTE *)sub_22454C548(a2 + 8);
      result = sub_224552DFC(a3, (char *)&v5);
      break;
    case 6:
      LOWORD(v5) = *(_WORD *)sub_22454C630(a2 + 8);
      result = sub_224552F10(a3, (__int16 *)&v5);
      break;
    case 7:
      LODWORD(v5) = *(_DWORD *)sub_22454C718(a2 + 8);
      result = sub_224553020(a3, (unsigned int *)&v5);
      break;
    case 8:
      v5 = *(_QWORD *)sub_22454C800(a2 + 8);
      result = sub_2245530C4(a3, &v5);
      break;
    case 11:
      LODWORD(v5) = *(_DWORD *)sub_22454C8E8(a2 + 8);
      result = sub_22455315C(a3, (unsigned int *)&v5);
      break;
    case 12:
      v5 = *(_QWORD *)sub_22454C9D0(a2 + 8);
      result = sub_2245531C8(a3, &v5);
      break;
    default:
      sub_22454B274(a1);
  }
  return result;
}

_QWORD *sub_2231A7194(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    j__CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24EC20608;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_2231A71F4(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    j__CFRelease(v1);
  __cxa_rethrow();
}

void sub_2231A720C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2231A7224(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2231A7248(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    j__CFRelease(v1);
}

uint64_t sub_2231A7268(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPK9__CFArrayEC1ES5_EUlS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPK9__CFArrayEC1ES5_EUlS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPK9__CFArrayEC1ES5_EUlS5_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPK9__CFArrayEC1ES5_EUlS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_2231A72D8(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_2231A7364(char **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int16 v14;
  char *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v5 = 0xAAAAAAAAAAAAAAALL;
  else
    v5 = v4;
  if (v5 > 0xAAAAAAAAAAAAAAALL)
    sub_223174E94();
  v7 = 24 * v5;
  v8 = (char *)operator new(24 * v5);
  v9 = &v8[24 * v3];
  v10 = &v8[v7];
  *(_WORD *)v9 = *(_WORD *)a2;
  *(_OWORD *)(v9 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v11 = v9 + 24;
  v12 = *a1;
  v13 = a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    if (!v13)
      return v11;
    goto LABEL_20;
  }
  do
  {
    v14 = *((_WORD *)v13 - 12);
    v13 -= 24;
    *((_WORD *)v9 - 12) = v14;
    v9 -= 24;
    *(_OWORD *)(v9 + 8) = *(_OWORD *)(v13 + 8);
    *((_QWORD *)v13 + 1) = 0;
    *((_QWORD *)v13 + 2) = 0;
  }
  while (v13 != v12);
  v15 = *a1;
  v13 = a1[1];
  *a1 = v9;
  a1[1] = v11;
  a1[2] = v10;
  if (v13 != v15)
  {
    do
    {
      v16 = (std::__shared_weak_count *)*((_QWORD *)v13 - 1);
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v13 -= 24;
    }
    while (v13 != v15);
    v13 = v15;
  }
  if (v13)
LABEL_20:
    operator delete(v13);
  return v11;
}

_QWORD *sub_2231A74D8(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    j__CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24EC20658;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_2231A7538(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    j__CFRelease(v1);
  __cxa_rethrow();
}

void sub_2231A7550(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2231A7568(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2231A758C(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    j__CFRelease(v1);
}

uint64_t sub_2231A75AC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPKvEC1ES4_EUlS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPKvEC1ES4_EUlS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPKvEC1ES4_EUlS4_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPKvEC1ES4_EUlS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_2231A761C(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, os_log_type_t a5, uint64_t a6, const char **a7, const char **a8, const char **a9)
{
  NSObject *v14;
  NSObject *v15;
  size_t v16;
  void *v17;
  _QWORD *v18;
  const char *v19;
  size_t v20;
  size_t v21;
  _QWORD *p_dst;
  const char *v23;
  const char *v24;
  const char *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  size_t v30;
  size_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  size_t v36;
  size_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  __int128 v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *p_shared_owners;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  NSObject *v65;
  os_log_type_t v66;
  uint64_t v67;
  void *v68;
  __int128 v69;
  __int128 v70;
  _QWORD *v71;
  __int128 v72;
  _BYTE v73[24];
  _QWORD *__dst;
  __int128 v75;
  _OWORD v76[5];
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  v14 = a4;
  v15 = v14;
  if (a2 && *(_QWORD *)(a2 + 8))
  {
    v66 = a5;
    v16 = _os_log_pack_size();
    v17 = operator new(v16, (std::align_val_t)8uLL);
    v18 = (_QWORD *)operator new();
    *v18 = &off_24EC1F7F0;
    v18[1] = 0;
    v18[2] = 0;
    v18[3] = v17;
    v68 = v17;
    *(_QWORD *)&v69 = v17;
    *((_QWORD *)&v69 + 1) = v18;
    v19 = *a7;
    v20 = strlen(*a7);
    if (v20 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    v21 = v20;
    if (v20 >= 0x17)
    {
      v65 = v15;
      v27 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17)
        v27 = v20 | 7;
      v28 = v27 + 1;
      p_dst = operator new(v27 + 1);
      *(_QWORD *)&v75 = v21;
      *((_QWORD *)&v75 + 1) = v28 | 0x8000000000000000;
      __dst = p_dst;
      v15 = v65;
    }
    else
    {
      HIBYTE(v75) = v20;
      p_dst = &__dst;
      if (!v20)
      {
LABEL_13:
        *((_BYTE *)p_dst + v21) = 0;
        v29 = *a8;
        v30 = strlen(*a8);
        if (v30 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        v31 = v30;
        if (v30 >= 0x17)
        {
          v33 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v30 | 7) != 0x17)
            v33 = v30 | 7;
          v34 = v33 + 1;
          v32 = operator new(v33 + 1);
          *(_QWORD *)&v73[8] = v31;
          *(_QWORD *)&v73[16] = v34 | 0x8000000000000000;
          *(_QWORD *)v73 = v32;
        }
        else
        {
          v73[23] = v30;
          v32 = v73;
          if (!v30)
          {
LABEL_21:
            v32[v31] = 0;
            v35 = *a9;
            v36 = strlen(*a9);
            if (v36 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v37 = v36;
            if (v36 >= 0x17)
            {
              v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v36 | 7) != 0x17)
                v39 = v36 | 7;
              v40 = v39 + 1;
              v38 = operator new(v39 + 1);
              *(_QWORD *)&v72 = v37;
              *((_QWORD *)&v72 + 1) = v40 | 0x8000000000000000;
              v71 = v38;
            }
            else
            {
              HIBYTE(v72) = v36;
              v38 = &v71;
              if (!v36)
              {
LABEL_29:
                *((_BYTE *)v38 + v37) = 0;
                *((_QWORD *)&v76[0] + 1) = __dst;
                *(_QWORD *)&v76[1] = v75;
                *(_QWORD *)((char *)&v76[1] + 7) = *(_QWORD *)((char *)&v75 + 7);
                v76[2] = *(_OWORD *)v73;
                *(_QWORD *)((char *)&v76[2] + 15) = *(_QWORD *)&v73[15];
                *(_QWORD *)((char *)&v76[4] + 7) = *(_QWORD *)((char *)&v72 + 7);
                *(_QWORD *)&v76[0] = off_24EC206F8;
                HIBYTE(v76[1]) = HIBYTE(v75);
                BYTE7(v76[3]) = v73[23];
                *((_QWORD *)&v76[3] + 1) = v71;
                *(_QWORD *)&v76[4] = v72;
                HIBYTE(v76[4]) = HIBYTE(v72);
                v41 = (char *)operator new(0x68uLL);
                *((_QWORD *)v41 + 1) = 0;
                *((_QWORD *)v41 + 2) = 0;
                *(_QWORD *)v41 = &off_24EC206A8;
                *((_QWORD *)v41 + 3) = off_24EC206F8;
                *((_OWORD *)v41 + 2) = *(_OWORD *)((char *)v76 + 8);
                *((_QWORD *)v41 + 6) = *((_QWORD *)&v76[1] + 1);
                memset((char *)v76 + 8, 0, 24);
                *(_OWORD *)(v41 + 56) = v76[2];
                *((_QWORD *)v41 + 9) = *(_QWORD *)&v76[3];
                memset(&v76[2], 0, 24);
                v42 = *(_OWORD *)((char *)&v76[3] + 8);
                *((_QWORD *)v41 + 12) = *((_QWORD *)&v76[4] + 1);
                *((_OWORD *)v41 + 5) = v42;
                memset((char *)&v76[3] + 8, 0, 24);
                *(_QWORD *)&v70 = v41 + 24;
                *((_QWORD *)&v70 + 1) = v41;
                if (SBYTE7(v76[3]) < 0)
                {
                  operator delete(*(void **)&v76[2]);
                  if ((SHIBYTE(v76[1]) & 0x80000000) == 0)
                    goto LABEL_31;
                }
                else if ((SHIBYTE(v76[1]) & 0x80000000) == 0)
                {
LABEL_31:
                  nullsub_30(v76);
                  if (*((_QWORD *)&v69 + 1))
                  {
                    v43 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
                    do
                      v44 = __ldxr(v43);
                    while (__stxr(v44 + 1, v43));
                  }
                  if (*((_QWORD *)&v70 + 1))
                  {
                    v45 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
                    do
                      v46 = __ldxr(v45);
                    while (__stxr(v46 + 1, v45));
                    v67 = v70;
                    do
                      v47 = __ldaxr(v45);
                    while (__stlxr(v47 - 1, v45));
                    if (!v47)
                    {
                      (*(void (**)(_QWORD))(**((_QWORD **)&v70 + 1) + 16))(*((_QWORD *)&v70 + 1));
                      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v70 + 1));
                    }
                  }
                  else
                  {
                    v67 = v70;
                  }
                  if (*((_QWORD *)&v69 + 1))
                  {
                    v48 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
                    do
                      v49 = __ldaxr(v48);
                    while (__stlxr(v49 - 1, v48));
                    if (!v49)
                    {
                      (*(void (**)(_QWORD))(**((_QWORD **)&v69 + 1) + 16))(*((_QWORD *)&v69 + 1));
                      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v69 + 1));
                    }
                  }
                  if (*(char *)(v67 + 31) >= 0)
                    v50 = v67 + 8;
                  else
                    v50 = *(_QWORD *)(v67 + 8);
                  if (*(char *)(v67 + 55) >= 0)
                    v51 = v67 + 32;
                  else
                    v51 = *(_QWORD *)(v67 + 32);
                  if (*(char *)(v67 + 79) >= 0)
                    v52 = v67 + 56;
                  else
                    v52 = *(_QWORD *)(v67 + 56);
                  v53 = _os_log_pack_fill();
                  *(_DWORD *)v53 = 136315650;
                  *(_QWORD *)(v53 + 4) = v50;
                  *(_WORD *)(v53 + 12) = 2080;
                  *(_QWORD *)(v53 + 14) = v51;
                  *(_WORD *)(v53 + 22) = 2080;
                  *(_QWORD *)(v53 + 24) = v52;
                  v54 = operator new();
                  v55 = *((unsigned __int8 *)a3 + 23);
                  if ((v55 & 0x80u) == 0)
                    v56 = a3;
                  else
                    v56 = (uint64_t *)*a3;
                  if ((v55 & 0x80u) != 0)
                    v55 = a3[1];
                  *(_QWORD *)v54 = v68;
                  *(_OWORD *)(v54 + 8) = v69;
                  *(_OWORD *)(v54 + 24) = v70;
                  *(_QWORD *)(v54 + 40) = v56;
                  *(_QWORD *)(v54 + 48) = v55;
                  *(_BYTE *)(v54 + 56) = v66;
                  *(_QWORD *)&v76[0] = v54;
                  (*(void (**)(_QWORD, _OWORD *))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), v76);
                  v57 = *(_QWORD *)&v76[0];
                  *(_QWORD *)&v76[0] = 0;
                  if (v57)
                  {
                    v58 = *(std::__shared_weak_count **)(v57 + 32);
                    if (v58)
                    {
                      p_shared_owners = (unint64_t *)&v58->__shared_owners_;
                      do
                        v60 = __ldaxr(p_shared_owners);
                      while (__stlxr(v60 - 1, p_shared_owners));
                      if (!v60)
                      {
                        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                        std::__shared_weak_count::__release_weak(v58);
                      }
                    }
                    v61 = *(std::__shared_weak_count **)(v57 + 16);
                    if (v61)
                    {
                      v62 = (unint64_t *)&v61->__shared_owners_;
                      do
                        v63 = __ldaxr(v62);
                      while (__stlxr(v63 - 1, v62));
                      if (!v63)
                      {
                        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                        std::__shared_weak_count::__release_weak(v61);
                      }
                    }
                    MEMORY[0x227684CE8](v57, 0x10F0C40B62ED6C6);
                  }
                  goto LABEL_73;
                }
                operator delete(*((void **)&v76[0] + 1));
                goto LABEL_31;
              }
            }
            memcpy(v38, v35, v37);
            goto LABEL_29;
          }
        }
        memcpy(v32, v29, v31);
        goto LABEL_21;
      }
    }
    memcpy(p_dst, v19, v21);
    goto LABEL_13;
  }
  os_log_type_enabled(v14, a5);
  v23 = *a7;
  v24 = *a8;
  v25 = *a9;
  LODWORD(v76[0]) = 136315650;
  *(_QWORD *)((char *)v76 + 4) = v23;
  WORD6(v76[0]) = 2080;
  *(_QWORD *)((char *)v76 + 14) = v24;
  WORD3(v76[1]) = 2080;
  *((_QWORD *)&v76[1] + 1) = v25;
  v26 = (void *)_os_log_send_and_compose_impl();
  if (v26)
    free(v26);
LABEL_73:

  return 0;
}

void sub_2231A7DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  void *v40;
  uint64_t v41;

  sub_22319A054((uint64_t *)(v41 - 192));
  sub_22319A054(&a21);
  sub_223199DE8((uint64_t)&a15);

  _Unwind_Resume(a1);
}

uint64_t sub_2231A7EB4(uint64_t a1)
{
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_7:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return nullsub_30(a1);
LABEL_8:
    operator delete(*(void **)(a1 + 8));
    return nullsub_30(a1);
  }
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_7;
LABEL_3:
  if (*(char *)(a1 + 31) < 0)
    goto LABEL_8;
  return nullsub_30(a1);
}

void sub_2231A7F24(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC206A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2231A7F34(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC206A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231A7F64(uint64_t a1)
{
  if ((*(char *)(a1 + 103) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 79) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_7:
    operator delete(*(void **)(a1 + 56));
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      return nullsub_30(a1 + 24);
LABEL_8:
    operator delete(*(void **)(a1 + 32));
    return nullsub_30(a1 + 24);
  }
  operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0)
    goto LABEL_7;
LABEL_3:
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_8;
  return nullsub_30(a1 + 24);
}

void sub_2231A7FD8(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0)
  {
    operator delete(*(void **)(a1 + 56));
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      {
LABEL_4:
        nullsub_30(a1);
        JUMPOUT(0x227684CE8);
      }
LABEL_7:
      operator delete(*(void **)(a1 + 8));
      goto LABEL_4;
    }
  }
  else if ((*(char *)(a1 + 55) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 32));
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    goto LABEL_4;
  goto LABEL_7;
}

uint64_t sub_2231A8050(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  char v17;

  v2 = *(std::__shared_weak_count **)(a1 + 1312);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  if (*(_BYTE *)(a1 + 1288))
    sub_22319AB9C((unsigned int *)(a1 + 760));
  v5 = *(unsigned int *)(a1 + 752);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, uint64_t))off_24EC1F928[v5])(&v17, a1 + 688);
  *(_DWORD *)(a1 + 752) = -1;
  v6 = *(unsigned int *)(a1 + 648);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, uint64_t))off_24EC1F928[v6])(&v17, a1 + 584);
  *(_DWORD *)(a1 + 648) = -1;
  v7 = *(unsigned int *)(a1 + 544);
  if ((_DWORD)v7 != -1)
    ((void (*)(char *, uint64_t))off_24EC1F928[v7])(&v17, a1 + 480);
  *(_DWORD *)(a1 + 544) = -1;
  v8 = *(unsigned int *)(a1 + 440);
  if ((_DWORD)v8 != -1)
    ((void (*)(char *, uint64_t))off_24EC1F928[v8])(&v17, a1 + 376);
  *(_DWORD *)(a1 + 440) = -1;
  v9 = *(unsigned int *)(a1 + 336);
  if ((_DWORD)v9 != -1)
    ((void (*)(char *, uint64_t))off_24EC1F928[v9])(&v17, a1 + 272);
  *(_DWORD *)(a1 + 336) = -1;
  v10 = *(unsigned int *)(a1 + 232);
  if ((_DWORD)v10 != -1)
    ((void (*)(char *, uint64_t))off_24EC1F928[v10])(&v17, a1 + 168);
  *(_DWORD *)(a1 + 232) = -1;
  v11 = *(void **)(a1 + 112);
  if (v11)
  {
    *(_QWORD *)(a1 + 120) = v11;
    operator delete(v11);
  }
  v12 = *(_QWORD *)(a1 + 80);
  if (v12)
  {
    v13 = *(_QWORD *)(a1 + 88);
    v14 = *(void **)(a1 + 80);
    if (v13 != v12)
    {
      do
      {
        v15 = *(void **)(v13 - 24);
        if (v15)
        {
          *(_QWORD *)(v13 - 16) = v15;
          operator delete(v15);
        }
        v13 -= 40;
      }
      while (v13 != v12);
      v14 = *(void **)(a1 + 80);
    }
    *(_QWORD *)(a1 + 88) = v12;
    operator delete(v14);
  }
  sub_22365B530(a1 + 24);
  return a1;
}

uint64_t sub_2231A81F8(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::string v8;
  std::string __p;

  v4 = sub_2231AFD68((unsigned __int8 **)a1, a2);
  v5 = sub_2231B0224((unsigned __int8 **)(a1 + 24), a2);
  if ((v4 != 0) != (v5 != 0)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/include_private/Reconstruction/Keyframing/KeyframeDiskPool.hpp", 120, (uint64_t)"!(d_erased ^ f_erased)", 22, (uint64_t)"data or footprint is missing", 28, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v6 = 0;
  if (v4 && v5)
  {
    sub_22319B660(a1, a2, &v8);
    __p = v8;
    memset(&v8, 0, sizeof(v8));
    v6 = sub_2242B1898((uint64_t)&__p, *(_QWORD *)(a1 + 48));
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v8.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return v6;
    }
    else if ((SHIBYTE(v8.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      return v6;
    }
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  return v6;
}

void sub_2231A830C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  sub_224574544((uint64_t)&a10);
  _Unwind_Resume(a1);
}

_QWORD *sub_2231A8330(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  unint64_t v12;
  uint64_t v14;

  v4 = sub_224566368(a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v7 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return v8;
  v8 = (_QWORD *)*v8;
  if (!v8)
    return v8;
  if (v6.u32[0] >= 2uLL)
  {
    while (1)
    {
      v12 = v8[1];
      if (v12 == v4)
      {
        if (v8[2] == *a2 && v8[3] == a2[1])
          return v8;
      }
      else
      {
        if (v12 >= *(_QWORD *)&v5)
          v12 %= *(_QWORD *)&v5;
        if (v12 != v7)
          return 0;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        return v8;
    }
  }
  v10 = *(_QWORD *)&v5 - 1;
  while (1)
  {
    v14 = v8[1];
    if (v14 != v4)
      break;
    if (v8[2] == *a2 && v8[3] == a2[1])
      return v8;
LABEL_26:
    v8 = (_QWORD *)*v8;
    if (!v8)
      return v8;
  }
  if ((v14 & v10) == v7)
    goto LABEL_26;
  return 0;
}

_OWORD *sub_2231A8460(void **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  _OWORD *v14;
  char *v15;
  char *v16;
  char *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  v3 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59)
    sub_22316E078();
  v5 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  if (v5 >> 4 > v4)
    v4 = v5 >> 4;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFE0;
  v7 = 0x7FFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v4;
  if (v7 >> 59)
    sub_223174E94();
  v9 = 32 * v7;
  v10 = (char *)operator new(32 * v7);
  v11 = &v10[32 * v3];
  v12 = &v10[v9];
  v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v13;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v14 = v11 + 32;
  v15 = (char *)*a1;
  v16 = (char *)a1[1];
  if (v16 == *a1)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v12;
    if (!v16)
      return v14;
    goto LABEL_19;
  }
  do
  {
    *((_OWORD *)v11 - 2) = *((_OWORD *)v16 - 2);
    *((_OWORD *)v11 - 1) = *((_OWORD *)v16 - 1);
    v11 -= 32;
    *((_QWORD *)v16 - 2) = 0;
    *((_QWORD *)v16 - 1) = 0;
    v16 -= 32;
  }
  while (v16 != v15);
  v17 = (char *)*a1;
  v16 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v14;
  a1[2] = v12;
  if (v16 != v17)
  {
    do
    {
      v18 = (std::__shared_weak_count *)*((_QWORD *)v16 - 1);
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v16 -= 32;
    }
    while (v16 != v17);
    v16 = v17;
  }
  if (v16)
LABEL_19:
    operator delete(v16);
  return v14;
}

unint64_t sub_2231A85B4(uint64_t a1, char *__s, const char **a3)
{
  size_t v6;
  size_t v7;
  _QWORD *p_dst;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t result;
  size_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char v18;
  _QWORD *v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  __int128 v23;
  _QWORD *__dst;
  __int128 v25;
  _QWORD v26[2];
  _QWORD v27[3];

  v27[2] = *MEMORY[0x24BDAC8D0];
  v6 = strlen(__s);
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    p_dst = operator new(v9 + 1);
    *(_QWORD *)&v25 = v7;
    *((_QWORD *)&v25 + 1) = v10 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v25) = v6;
  p_dst = &__dst;
  if (v6)
LABEL_8:
    memcpy(p_dst, __s, v7);
  *((_BYTE *)p_dst + v7) = 0;
  v11 = *a3;
  result = strlen(*a3);
  if (result > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v13 = result;
  if (result >= 0x17)
  {
    v15 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v15 = result | 7;
    v16 = v15 + 1;
    v14 = operator new(v15 + 1);
    *(_QWORD *)&v23 = v13;
    *((_QWORD *)&v23 + 1) = v16 | 0x8000000000000000;
    v22 = v14;
  }
  else
  {
    HIBYTE(v23) = result;
    v14 = &v22;
    if (!result)
      goto LABEL_17;
  }
  result = (unint64_t)memcpy(v14, v11, v13);
LABEL_17:
  *((_BYTE *)v14 + v13) = 0;
  v17 = __dst;
  v27[0] = v25;
  *(_QWORD *)((char *)v27 + 7) = *(_QWORD *)((char *)&v25 + 7);
  v18 = HIBYTE(v25);
  v19 = v22;
  v26[0] = v23;
  *(_QWORD *)((char *)v26 + 7) = *(_QWORD *)((char *)&v23 + 7);
  v20 = HIBYTE(v23);
  *(_QWORD *)a1 = off_24EC20780;
  *(_QWORD *)(a1 + 8) = v17;
  *(_QWORD *)(a1 + 23) = *(_QWORD *)((char *)v27 + 7);
  *(_QWORD *)(a1 + 16) = v27[0];
  *(_BYTE *)(a1 + 31) = v18;
  v21 = v26[0];
  *(_QWORD *)(a1 + 47) = *(_QWORD *)((char *)v26 + 7);
  *(_QWORD *)(a1 + 32) = v19;
  *(_QWORD *)(a1 + 40) = v21;
  *(_BYTE *)(a1 + 55) = v20;
  return result;
}

void sub_2231A8788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2231A87A4(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return nullsub_30(a1);
LABEL_6:
    operator delete(*(void **)(a1 + 8));
    return nullsub_30(a1);
  }
  if (*(char *)(a1 + 31) < 0)
    goto LABEL_6;
  return nullsub_30(a1);
}

void sub_2231A87FC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC20730;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2231A880C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC20730;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231A883C(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0)
  {
    operator delete(*(void **)(a1 + 56));
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      return nullsub_30(a1 + 24);
LABEL_6:
    operator delete(*(void **)(a1 + 32));
    return nullsub_30(a1 + 24);
  }
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_6;
  return nullsub_30(a1 + 24);
}

void sub_2231A8898(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
LABEL_3:
    nullsub_30(a1);
    JUMPOUT(0x227684CE8);
  }
  operator delete(*(void **)(a1 + 8));
  goto LABEL_3;
}

_QWORD *sub_2231A88F8(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  unint64_t v12;
  uint64_t v14;

  v4 = sub_224566368(a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v7 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return v8;
  v8 = (_QWORD *)*v8;
  if (!v8)
    return v8;
  if (v6.u32[0] >= 2uLL)
  {
    while (1)
    {
      v12 = v8[1];
      if (v4 == v12)
      {
        if (v8[2] == *a2 && v8[3] == a2[1])
          return v8;
      }
      else
      {
        if (v12 >= *(_QWORD *)&v5)
          v12 %= *(_QWORD *)&v5;
        if (v12 != v7)
          return 0;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        return v8;
    }
  }
  v10 = *(_QWORD *)&v5 - 1;
  while (1)
  {
    v14 = v8[1];
    if (v4 != v14)
      break;
    if (v8[2] == *a2 && v8[3] == a2[1])
      return v8;
LABEL_26:
    v8 = (_QWORD *)*v8;
    if (!v8)
      return v8;
  }
  if ((v14 & v10) == v7)
    goto LABEL_26;
  return 0;
}

void sub_2231A8A28(std::mutex *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t sig;
  uint64_t v6;
  void *v7;

  v2 = *(_QWORD *)&this[1].__m_.__opaque[16];
  if (v2)
  {
    v3 = *(_QWORD *)&this[1].__m_.__opaque[24];
    v4 = *(void **)&this[1].__m_.__opaque[16];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = *(void **)&this[1].__m_.__opaque[16];
    }
    *(_QWORD *)&this[1].__m_.__opaque[24] = v2;
    operator delete(v4);
  }
  sig = this[1].__m_.__sig;
  if (sig)
  {
    v6 = *(_QWORD *)this[1].__m_.__opaque;
    v7 = (void *)this[1].__m_.__sig;
    if (v6 != sig)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0)
          operator delete(*(void **)(v6 - 24));
        v6 -= 24;
      }
      while (v6 != sig);
      v7 = (void *)this[1].__m_.__sig;
    }
    *(_QWORD *)this[1].__m_.__opaque = sig;
    operator delete(v7);
  }
  std::mutex::~mutex(this);
}

char *sub_2231A8AE0(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  const void *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  char *v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = *(_QWORD *)(a2 + 8);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v10 = *(const void **)a2;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v9;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (char *)*a1;
      v14 = (char *)a1[1];
      if (v14 == *a1)
        goto LABEL_23;
      goto LABEL_20;
    }
  }
  memmove(v8, v10, v9);
  v8[v9] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
LABEL_23:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_28;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v11 - 1) = *((_QWORD *)v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *((_QWORD *)v14 - 2) = 0;
    *((_QWORD *)v14 - 1) = 0;
    *((_QWORD *)v14 - 3) = 0;
    v14 -= 24;
  }
  while (v14 != v13);
  v19 = (char *)*a1;
  v14 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  if (v14 != v19)
  {
    do
    {
      if (*(v14 - 1) < 0)
        operator delete(*((void **)v14 - 3));
      v14 -= 24;
    }
    while (v14 != v19);
    v14 = v19;
  }
LABEL_28:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_2231A8CF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319C040((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2231A8D08(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (!*(_BYTE *)(a1 + 120))
  {
    if (!*(_BYTE *)(a1 + 112))
      return a1;
    if (!*(_BYTE *)(a1 + 104))
      goto LABEL_11;
    if (*(char *)(a1 + 103) < 0)
    {
      operator delete(*(void **)(a1 + 80));
      if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      {
LABEL_11:
        if (!*(_BYTE *)(a1 + 40))
          return a1;
        goto LABEL_12;
      }
    }
    else if ((*(char *)(a1 + 71) & 0x80000000) == 0)
    {
      goto LABEL_11;
    }
    operator delete(*(void **)(a1 + 48));
    if (!*(_BYTE *)(a1 + 40))
      return a1;
LABEL_12:
    if (*(char *)(a1 + 39) < 0)
    {
      operator delete(*(void **)(a1 + 16));
      return a1;
    }
    return a1;
  }
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

_OWORD *sub_2231A8DE4(void **a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  _OWORD *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  v3 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59)
    sub_22316E078();
  v6 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  if (v6 >> 4 > v4)
    v4 = v6 >> 4;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0)
    v7 = 0x7FFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  if (v7)
  {
    if (v7 >> 59)
      sub_223174E94();
    v8 = (char *)operator new(32 * v7);
  }
  else
  {
    v8 = 0;
  }
  v9 = &v8[32 * v3];
  v10 = &v8[32 * v7];
  v11 = *a2;
  v12 = a2[1];
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  *(_OWORD *)v9 = v11;
  *((_OWORD *)v9 + 1) = v12;
  v13 = v9 + 32;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
    if (!v15)
      return v13;
    goto LABEL_23;
  }
  do
  {
    v16 = *((_OWORD *)v15 - 2);
    v15 -= 32;
    *((_OWORD *)v9 - 2) = v16;
    v9 -= 32;
    *(_QWORD *)v15 = 0;
    *((_QWORD *)v15 + 1) = 0;
    *((_OWORD *)v9 + 1) = *((_OWORD *)v15 + 1);
  }
  while (v15 != v14);
  v17 = (char *)*a1;
  v15 = (char *)a1[1];
  *a1 = v9;
  a1[1] = v13;
  a1[2] = v10;
  if (v15 != v17)
  {
    do
    {
      v18 = (std::__shared_weak_count *)*((_QWORD *)v15 - 3);
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v15 -= 32;
    }
    while (v15 != v17);
    v15 = v17;
  }
  if (v15)
LABEL_23:
    operator delete(v15);
  return v13;
}

void sub_2231A8F34(_QWORD *a1)
{
  *a1 = &off_24EC20828;
  nullsub_30(a1 + 1);
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231A8F78()
{
  return 1;
}

uint64_t sub_2231A8F80()
{
  return 1;
}

uint64_t sub_2231A8F88()
{
  return 11;
}

uint64_t sub_2231A8F90(_QWORD *a1)
{
  *a1 = &off_24EC20828;
  nullsub_30(a1 + 1);
  return nullsub_30(a1);
}

void sub_2231A8FC0(_QWORD *a1)
{
  *a1 = &off_24EC20828;
  nullsub_30(a1 + 1);
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231A9004()
{
  return 0;
}

void sub_2231A9010(uint64_t a1)
{
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231A9034()
{
  return 1;
}

uint64_t sub_2231A903C()
{
  return 11;
}

uint64_t sub_2231A9044(uint64_t a1)
{
  uint64_t v1;

  v1 = a1;
  if (*(char *)(a1 + 31) < 0)
  {
    operator delete(*(void **)(a1 + 8));
    a1 = v1;
  }
  return nullsub_30(a1);
}

void sub_2231A9084(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC208C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2231A9094(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC208C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231A90C4(uint64_t a1)
{
  if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    return nullsub_30(a1 + 24);
  operator delete(*(void **)(a1 + 32));
  return nullsub_30(a1 + 24);
}

void sub_2231A9108(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231A914C(uint64_t a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  const void *v4;
  uint64_t v5;

  v2 = std::__thread_local_data();
  v3 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  sub_22318A894(*(_QWORD *)(a1 + 8));
  v4 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
  {
    v5 = MEMORY[0x22768473C]();
    MEMORY[0x227684CE8](v5, 0x20C4093837F09);
  }
  MEMORY[0x227684CE8](a1, 0x20C40A4A59CD2);
  return 0;
}

void sub_2231A91D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2231A91E4((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_2231A91E4(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
    {
      v4 = MEMORY[0x22768473C]();
      MEMORY[0x227684CE8](v4, 0x20C4093837F09);
    }
    MEMORY[0x227684CE8](v2, 0x20C40A4A59CD2);
  }
  return a1;
}

_QWORD *sub_2231A924C(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_2231A93E0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_22316DC48(a1);
}

_QWORD *sub_2231A93EC(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_2231A9580(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_22316DC48(a1);
}

void sub_2231A958C(unsigned int a1@<W0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6[2];
  char v7;
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  char v13;
  char v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 __p;
  uint64_t v23;
  char v24;
  char v25;

  sub_22319FFBC(v6, a2);
  sub_2231A974C((uint64_t)&v15, a1, (__int128 *)v6);
  *(_OWORD *)a3 = v15;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (!v25)
    goto LABEL_15;
  *(_BYTE *)(a3 + 40) = 0;
  if (v18)
  {
    *(_OWORD *)(a3 + 16) = v16;
    *(_QWORD *)(a3 + 32) = v17;
    v17 = 0;
    v16 = 0uLL;
    *(_BYTE *)(a3 + 40) = 1;
  }
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 104) = 0;
  if (!v24)
  {
    *(_BYTE *)(a3 + 112) = 1;
    if (!v18)
      goto LABEL_15;
    goto LABEL_13;
  }
  v5 = v21;
  *(_QWORD *)(a3 + 64) = v20;
  *(_OWORD *)(a3 + 48) = v19;
  v19 = 0uLL;
  *(_QWORD *)(a3 + 72) = v5;
  *(_OWORD *)(a3 + 80) = __p;
  *(_QWORD *)(a3 + 96) = v23;
  v23 = 0;
  v20 = 0;
  __p = 0uLL;
  *(_BYTE *)(a3 + 104) = 1;
  *(_BYTE *)(a3 + 112) = 1;
  if (SHIBYTE(v23) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v20) & 0x80000000) == 0)
    {
LABEL_7:
      if (!v18)
        goto LABEL_15;
      goto LABEL_13;
    }
  }
  else if ((SHIBYTE(v20) & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete((void *)v19);
  if (!v18)
    goto LABEL_15;
LABEL_13:
  if (SHIBYTE(v17) < 0)
    operator delete((void *)v16);
LABEL_15:
  if (!v14)
    return;
  if (!v13)
    goto LABEL_19;
  if (v12 < 0)
  {
    operator delete(v11);
    if (v10 < 0)
      goto LABEL_24;
LABEL_19:
    if (!v8)
      return;
    goto LABEL_20;
  }
  if ((v10 & 0x80000000) == 0)
    goto LABEL_19;
LABEL_24:
  operator delete(v9);
  if (!v8)
    return;
LABEL_20:
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_2231A9738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319FD28((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2231A974C(uint64_t a1, unsigned int a2, __int128 *a3)
{
  const std::error_category *v6;
  void *__p[2];
  char v9;
  char v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  char v15;
  char v16;

  v6 = std::generic_category();
  sub_22319FFBC(__p, a3);
  sub_22456AE50(a1, a2, (uint64_t)v6, (__int128 *)__p);
  if (!v16)
    return a1;
  if (!v15)
    goto LABEL_5;
  if (v14 < 0)
  {
    operator delete(v13);
    if ((v12 & 0x80000000) == 0)
    {
LABEL_5:
      if (!v10)
        return a1;
      goto LABEL_6;
    }
  }
  else if ((v12 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(v11);
  if (!v10)
    return a1;
LABEL_6:
  if (v9 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_2231A980C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319FD28((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231A9820(uint64_t a1@<X0>, uint64_t a2@<X1>, const std::string::value_type *a3@<X2>, std::string::size_type a4@<X3>, std::string *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  const double *v18;
  int64x2_t v19;
  int64x2_t v20;
  const double *v21;
  unsigned __int128 v22;
  unsigned __int128 v23;
  uint64_t i;
  const std::string::value_type *v25;
  std::string::size_type v26;

  v10 = (a2 - a1) >> 4;
  if (v10 <= 1)
    v10 = 1;
  v11 = (v10 - 1) * a4;
  v12 = a2 - a1;
  if (a2 == a1)
  {
    v13 = 0;
  }
  else
  {
    if ((unint64_t)(v12 - 16) >= 0x40)
    {
      v15 = ((unint64_t)(v12 - 16) >> 4) + 1;
      v16 = v15 & 3;
      if ((v15 & 3) == 0)
        v16 = 4;
      v17 = v15 - v16;
      v14 = a1 + 16 * v17;
      v18 = (const double *)(a1 + 40);
      v19 = 0uLL;
      v20 = 0uLL;
      do
      {
        v21 = v18 - 4;
        v22 = (unsigned __int128)vld2q_f64(v21);
        v23 = (unsigned __int128)vld2q_f64(v18);
        v19 = vaddq_s64((int64x2_t)v22, v19);
        v20 = vaddq_s64((int64x2_t)v23, v20);
        v18 += 8;
        v17 -= 4;
      }
      while (v17);
      v13 = vaddvq_s64(vaddq_s64(v20, v19));
    }
    else
    {
      v13 = 0;
      v14 = a1;
    }
    do
    {
      v13 += *(_QWORD *)(v14 + 8);
      v14 += 16;
    }
    while (v14 != a2);
  }
  a5->__r_.__value_.__r.__words[0] = 0;
  a5->__r_.__value_.__l.__size_ = 0;
  a5->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a5, v13 + v11);
  if (v12 >= 1)
  {
    std::string::append(a5, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    if ((unint64_t)v12 >= 0x20)
    {
      for (i = a1 + 16; i != a2; i += 16)
      {
        std::string::append(a5, a3, a4);
        v25 = *(const std::string::value_type **)i;
        v26 = *(_QWORD *)(i + 8);
        std::string::append(a5, v25, v26);
      }
    }
  }
}

void sub_2231A9960(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2231A9984(uint64_t **a1, unsigned __int8 *a2, _OWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v8;
  unsigned __int8 *v9;
  char *v11;
  uint64_t *v12;
  uint64_t *v13;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = (unsigned __int8 *)v5 + 25;
        if ((sub_22319835C(a2, (unsigned __int8 *)v5 + 25) & 0x80) == 0)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_11;
      }
      if ((sub_22319835C(v9, a2) & 0x80) == 0)
        break;
      v6 = v8 + 1;
      v5 = v8[1];
      if (!v5)
        goto LABEL_11;
    }
    if (*v6)
      return *v6;
  }
  else
  {
    v8 = a1 + 1;
  }
LABEL_11:
  v11 = (char *)operator new(0x30uLL);
  *(_OWORD *)(v11 + 25) = *a3;
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = v8;
  *v6 = (uint64_t *)v11;
  v12 = (uint64_t *)**a1;
  v13 = (uint64_t *)v11;
  if (v12)
  {
    *a1 = v12;
    v13 = *v6;
  }
  sub_2231A9A8C(a1[1], v13);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t *)v11;
}

uint64_t *sub_2231A9A8C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 == result)
    return result;
  while (1)
  {
    v2 = a2[2];
    if (*(_BYTE *)(v2 + 24))
      return result;
    v3 = *(uint64_t **)(v2 + 16);
    v4 = *v3;
    if (*v3 != v2)
      break;
    v7 = v3[1];
    if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
    {
      if (*(uint64_t **)v2 == a2)
      {
        *(_BYTE *)(v2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v11 = *(_QWORD *)(v2 + 8);
        *v3 = v11;
        if (v11)
          goto LABEL_15;
      }
      else
      {
        v9 = *(uint64_t **)(v2 + 8);
        v10 = *v9;
        *(_QWORD *)(v2 + 8) = *v9;
        if (v10)
        {
          *(_QWORD *)(v10 + 16) = v2;
          v3 = *(uint64_t **)(v2 + 16);
        }
        v9[2] = (uint64_t)v3;
        *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = v9;
        *v9 = v2;
        *(_QWORD *)(v2 + 16) = v9;
        v3 = (uint64_t *)v9[2];
        v2 = *v3;
        *((_BYTE *)v9 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v11 = *(_QWORD *)(v2 + 8);
        *v3 = v11;
        if (v11)
LABEL_15:
          *(_QWORD *)(v11 + 16) = v3;
      }
      *(_QWORD *)(v2 + 16) = v3[2];
      *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
      *(_QWORD *)(v2 + 8) = v3;
      v3[2] = v2;
      return result;
    }
LABEL_3:
    *(_BYTE *)(v2 + 24) = 1;
    a2 = v3;
    *((_BYTE *)v3 + 24) = v3 == result;
    *v5 = 1;
    if (v3 == result)
      return result;
  }
  if (v4)
  {
    v6 = *(unsigned __int8 *)(v4 + 24);
    v5 = (_BYTE *)(v4 + 24);
    if (!v6)
      goto LABEL_3;
  }
  if (*(uint64_t **)v2 == a2)
  {
    v12 = a2[1];
    *(_QWORD *)v2 = v12;
    if (v12)
    {
      *(_QWORD *)(v12 + 16) = v2;
      v3 = *(uint64_t **)(v2 + 16);
    }
    a2[2] = (uint64_t)v3;
    *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = a2;
    a2[1] = v2;
    *(_QWORD *)(v2 + 16) = a2;
    v3 = (uint64_t *)a2[2];
  }
  else
  {
    a2 = (uint64_t *)a2[2];
  }
  *((_BYTE *)a2 + 24) = 1;
  *((_BYTE *)v3 + 24) = 0;
  v13 = (uint64_t *)v3[1];
  v14 = *v13;
  v3[1] = *v13;
  if (v14)
    *(_QWORD *)(v14 + 16) = v3;
  v13[2] = v3[2];
  *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v13;
  *v13 = (uint64_t)v3;
  v3[2] = (uint64_t)v13;
  return result;
}

uint64_t *sub_2231A9C40(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v9;
  unsigned __int8 *v10;
  char *v12;
  uint64_t *v13;
  uint64_t *v14;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = (unsigned __int8 *)v6 + 28;
        if ((sub_22319835C(a2, (unsigned __int8 *)v6 + 28) & 0x80) == 0)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_11;
      }
      if ((sub_22319835C(v10, a2) & 0x80) == 0)
        break;
      v7 = v9 + 1;
      v6 = v9[1];
      if (!v6)
        goto LABEL_11;
    }
    if (*v7)
      return *v7;
  }
  else
  {
    v9 = a1 + 1;
  }
LABEL_11:
  v12 = (char *)operator new(0x30uLL);
  *(_OWORD *)(v12 + 28) = **a4;
  *((_DWORD *)v12 + 11) = 0;
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 2) = v9;
  *v7 = (uint64_t *)v12;
  v13 = (uint64_t *)**a1;
  v14 = (uint64_t *)v12;
  if (v13)
  {
    *a1 = v13;
    v14 = *v7;
  }
  sub_2231A9A8C(a1[1], v14);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t *)v12;
}

void sub_2231A9D54()
{
  JUMPOUT(0x227684CE8);
}

__n128 sub_2231A9D68(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24EC20950;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_2231A9DA8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24EC20950;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_2231A9DD0(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v7;
  std::string::size_type size;
  std::string *p_p;
  std::string::size_type v10;
  std::string::size_type v11;
  int v12;
  __n128 *v15;
  std::string *v16;
  size_t v17;
  uint64_t v18;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v19;
  uint64_t v20;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  _QWORD *v26;
  std::string __p;
  uint64_t v28[4];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 16);
  v28[0] = (uint64_t)"cv3d.recon.";
  v28[1] = 11;
  v28[2] = (uint64_t)"Stats.Keyframing.KeyframeMemory_time";
  v28[3] = 36;
  sub_2231A9820((uint64_t)v28, (uint64_t)&v29, 0, 0, &__p);
  sub_224569D7C();
  if (sub_224569C6C())
  {
    v3 = sub_2241471F8();
    v4 = sub_2241486EC((uint64_t)v3);
    if (!sub_2241053B4(v4))
    {
      v5 = sub_2241472E0();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5))
      {
        kdebug_trace();
        v6 = *(_QWORD *)(a1 + 8);
        if (*(_BYTE *)(v6 + 16))
        {
          v7 = std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)v6 + *(_QWORD *)(v6 + 8);
          *(_QWORD *)(v6 + 8) = v7;
          *(_BYTE *)(v6 + 16) = 0;
        }
        else
        {
          v7 = *(_QWORD *)(v6 + 8);
        }
        *(double *)v28 = (double)v7 / 1000000.0;
        sub_2231AA22C((double *)&qword_255788F20, v5, (double *)v28, "ProcessPriorityLists (ms)");
        kdebug_trace();
      }
    }
  }
  kdebug_trace();
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size >= 0x11)
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v10 = p_p->__r_.__value_.__r.__words[0];
    v11 = p_p->__r_.__value_.__l.__size_;
    v12 = p_p->__r_.__value_.__s.__data_[16];
    if (v10 == 0x6365722E64337663 && v11 == 0x73746174532E6E6FLL && v12 == 46)
    {
      v15 = sub_223187510();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v16 = &__p;
      else
        v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v17 = __p.__r_.__value_.__l.__size_;
      v18 = *(_QWORD *)(a1 + 8);
      if (*(_BYTE *)(v18 + 16))
      {
        v19 = std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)v18 + *(_QWORD *)(v18 + 8);
        *(_QWORD *)(v18 + 8) = v19;
        *(_BYTE *)(v18 + 16) = 0;
      }
      else
      {
        v19 = *(_QWORD *)(v18 + 8);
      }
      *(double *)v28 = (double)v19 / 1000000.0;
      sub_2231AA374((uint64_t *)v15, v16, v17, v28, (uint64_t)"ProcessPriorityLists (ms)", 25);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    v20 = *(_QWORD *)(a1 + 8);
    if (*(_BYTE *)(v20 + 16))
      goto LABEL_33;
  }
  else
  {
    v20 = *(_QWORD *)(a1 + 8);
    if (*(_BYTE *)(v20 + 16))
    {
LABEL_33:
      v21 = std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)v20 + *(_QWORD *)(v20 + 8);
      goto LABEL_36;
    }
  }
  v21 = *(_QWORD *)(v20 + 8);
LABEL_36:
  v22 = (double)v21 / 1000000.0;
  v23 = *(_QWORD *)(v2 + 408);
  v24 = *(_QWORD *)(v2 + 416);
  v25 = *(double *)(v2 + 400) * (double)v23;
  *(_QWORD *)(v2 + 408) = v23 + 1;
  *(double *)(v2 + 400) = (v22 + v25) / (double)(v23 + 1);
  if (v24 >= 1)
  {
    if (v24 <= v23)
      v26 = (_QWORD *)(v2 + 416);
    else
      v26 = (_QWORD *)(v2 + 408);
    *(_QWORD *)(v2 + 408) = *v26;
  }
}

void sub_2231AA120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2231AA1B4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_5recon2kf14KeyframeMemory20ProcessPriorityListsER"
                     "KNS3_6vectorINS0_6random4UUIDENS3_9allocatorISA_EEEESF_jE3$_4JEEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_5recon2kf14KeyframeMemory20ProcessPrio"
                                "rityListsERKNS3_6vectorINS0_6random4UUIDENS3_9allocatorISA_EEEESF_jE3$_4JEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_5recon2kf14KeyframeMemory20ProcessPriorityListsERKNS3_6vectorINS0_6random4UUIDENS3_9allocatorISA_EEEESF_jE3$_4JEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_5recon2kf14KeyframeMemory20ProcessPriorityListsERKNS3_6vectorINS0_6random4UUIDENS3_9allocatorISA_EEEESF_jE3$_4JEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2231AA220()
{
  return &unk_24EC20AA8;
}

void sub_2231AA22C(double *a1, uint64_t a2, double *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;
  __int128 v17;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        sub_2245054E8((uint64_t)&v17, (uint64_t)(*a1 * 1000000000.0), 2);
        v14 = v17;
        v13 = sub_2241471F8();
        sub_2231AA49C((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_2231AA358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2231AA374(uint64_t *a1, void *a2, size_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  std::string *p_p;
  size_t size;
  std::string __p;
  _QWORD v11[6];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (a6)
  {
    v7 = *a1;
    v11[0] = a2;
    v11[1] = a3;
    v11[2] = ".";
    v11[3] = 1;
    v11[4] = a5;
    v11[5] = a6;
    sub_2231A9820((uint64_t)v11, (uint64_t)&v12, 0, 0, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    sub_223FD4D4C(v7, p_p, size, a4);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    sub_223FD4D4C(*a1, a2, a3, a4);
  }
}

void sub_2231AA474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2231AA49C(uint64_t a1, uint64_t a2, double *a3, uint64_t a4, __int128 *a5)
{
  uint64_t *v10;
  void *__p[2];
  uint64_t v13;
  char v14;
  _QWORD v15[3];

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v10 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    *(_OWORD *)__p = *(_OWORD *)a4;
    v13 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    v14 = 1;
    sub_2231AA710(a3, (__int128 *)__p, a5, v15);
    sub_2231AA5A4(a1, v10, (uint64_t)v15);
    sub_2241231D8((uint64_t)v15);
    if (v14)
    {
      if (SHIBYTE(v13) < 0)
        operator delete(__p[0]);
    }
  }
  return a1;
}

void sub_2231AA570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17)
{
  sub_2241231D8((uint64_t)&a17);
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2231AA5A4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD v21[4];
  std::__shared_weak_count *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  _QWORD v25[3];

  v4 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  v21[3] = *a2;
  v22 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v8 = *(_QWORD *)(a3 + 8);
  v7 = *(_QWORD *)(a3 + 16);
  v21[0] = &off_24EC6A3B8;
  v21[1] = v8;
  v21[2] = v7;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v23 = v4;
  v24 = v3;
  if (v3)
  {
    v9 = (unint64_t *)&v3->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v25[0] = &off_24EC6A3B8;
  v25[1] = v8;
  v25[2] = v7;
  if (v7)
  {
    v11 = (unint64_t *)(v7 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 16))(a1, &v23);
  sub_2241231D8((uint64_t)v25);
  v14 = v24;
  if (v24)
  {
    v15 = (unint64_t *)&v24->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  sub_2241231D8((uint64_t)v21);
  v17 = v22;
  if (!v22)
    return v13;
  v18 = (unint64_t *)&v22->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
    return v13;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return v13;
}

void sub_2231AA6EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  sub_2231AA880((uint64_t)&a14);
  sub_2241231D8((uint64_t)&a9);
  sub_223167354((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_2231AA710@<X0>(double *a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t (**v10)();
  char v11[8];
  void *__p;
  void *v13;
  _QWORD v14[2];
  __int128 v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  __int128 v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v10 = &off_24EC77E40;
  v14[0] = sub_224504D68();
  v14[1] = v8;
  LOBYTE(v15) = 0;
  v17 = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v15 = *a2;
    v16 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v17 = 1;
  }
  v18 = 0;
  v19 = 0;
  v20 = *a3;
  v21 = 1;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  sub_22454BFEC((uint64_t)v11, 12, *a1);
  sub_2231AA8F0(v11, (uint64_t)v14, a4);
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
  sub_2231AD66C((uint64_t)v14);
  return nullsub_661(&v10);
}

void sub_2231AA838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_2231AD66C((uint64_t)&a15);
  nullsub_661(&a9);
  _Unwind_Resume(a1);
}

void sub_2231AA86C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_661(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2231AA880(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  sub_2241231D8(a1 + 16);
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

uint64_t sub_2231AA8F0@<X0>(char *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  __int128 v9;
  uint64_t v10;

  v5 = *a1;
  v9 = *(_OWORD *)(a1 + 8);
  v6 = *((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 2) = 0;
  *((_QWORD *)a1 + 3) = 0;
  *((_QWORD *)a1 + 1) = 0;
  v7 = operator new();
  sub_224122F48((_QWORD *)v7);
  *(_QWORD *)v7 = &off_24EC20A50;
  *(_BYTE *)(v7 + 8) = v5;
  *(_OWORD *)(v7 + 16) = v9;
  *(_QWORD *)(v7 + 32) = v6;
  sub_2231AB0FC(v7 + 48, a2);
  *(_QWORD *)v7 = &off_24EC209D0;
  v10 = v7;
  sub_224123150(a3, &v10);
  result = v10;
  v10 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_2231AA9BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11)
{
  if (a11)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2231AAA4C(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24EC20A50;
  sub_2231AD66C((uint64_t)(a1 + 6));
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return nullsub_30(a1);
}

void sub_2231AAA8C(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24EC20A50;
  sub_2231AD66C((uint64_t)(a1 + 6));
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231AAAE0(uint64_t a1)
{
  return a1 + 48;
}

uint64_t sub_2231AAAE8(unsigned __int8 *a1, unsigned __int8 *lpsrc)
{
  uint64_t result;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24EC6A3F8, (const struct __class_type_info *)&unk_24EC20A10, 0);
  if (result)
    return a1 == lpsrc || sub_22454D670(a1 + 8, (_BYTE *)(result + 8));
  return result;
}

void sub_2231AAB4C(uint64_t a1)
{
  __int128 *v2;
  void *__p;
  char v4;

  v2 = (__int128 *)sub_2231ACBE8();
  sub_2231AAC00(a1);
  sub_2231AC984(v2, (uint64_t)"{", (uint64_t)&__p, (uint64_t)",", a1 + 48, (uint64_t)"}");
  if (v4 < 0)
    operator delete(__p);
}

void sub_2231AABE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2231AAC00(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  void *v8;
  uint64_t v9;

  v2 = atomic_load((unsigned __int8 *)&qword_2557894B0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2557894B0))
  {
    v4 = sub_2231AC58C();
    v5 = *((_QWORD *)v4 + 1);
    if (*((char *)v4 + 23) >= 0)
    {
      v6 = *((unsigned __int8 *)v4 + 23);
    }
    else
    {
      v4 = *(__int128 **)v4;
      v6 = v5;
    }
    sub_2231AD150((char *)v4, v6, "::", 2, 0, (uint64_t)&v8);
    if (*(char *)(v9 - 1) < 0)
    {
      sub_223197FA4(&xmmword_255789498, *(void **)(v9 - 24), *(_QWORD *)(v9 - 16));
    }
    else
    {
      v7 = *(_OWORD *)(v9 - 24);
      qword_2557894A8 = *(_QWORD *)(v9 - 8);
      xmmword_255789498 = v7;
    }
    sub_22319BB48(&v8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255789498, &dword_22314D000);
    __cxa_guard_release(&qword_2557894B0);
  }
  return sub_2231ACFA8(&xmmword_255789498, (uint64_t)"{", (unsigned __int8 *)(a1 + 8), (uint64_t)"}");
}

void sub_2231AAD10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_22319BB48(&a9);
  __cxa_guard_abort(&qword_2557894B0);
  _Unwind_Resume(a1);
}

void sub_2231AAD30(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2557894B0);
  _Unwind_Resume(a1);
}

uint64_t sub_2231AAD48@<X0>(_DWORD *a1@<X8>)
{
  const char *v2;
  unint64_t v3;
  size_t v4;
  const char *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[16];

  sub_224139774((uint64_t)v10, 0);
  v2 = sub_2241397A0();
  v4 = v3;
  if (v3 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v5 = v2;
  if (v3 >= 0x17)
  {
    v7 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v7 = v3 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    *((_QWORD *)a1 + 1) = v4;
    *((_QWORD *)a1 + 2) = v8 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v3;
    v6 = a1;
    if (!v3)
      goto LABEL_9;
  }
  memmove(v6, v5, v4);
LABEL_9:
  *((_BYTE *)v6 + v4) = 0;
  a1[6] = 8;
  return nullsub_591(v10);
}

void sub_2231AAE1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_591(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2231AAE30@<X0>(uint64_t (***a1)()@<X0>, _QWORD *a2@<X8>)
{
  _BYTE v5[16];

  sub_224139774((uint64_t)v5, 0);
  sub_22413ADAC(a1, 8, a2);
  return nullsub_591(v5);
}

void sub_2231AAE80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_591(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2231AAE94(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24EC20A50;
  sub_2231AD66C((uint64_t)(a1 + 6));
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return nullsub_30(a1);
}

void sub_2231AAED4(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24EC20A50;
  sub_2231AD66C((uint64_t)(a1 + 6));
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231AAF28(uint64_t a1)
{
  __int128 *v2;

  v2 = sub_2231AC028();
  return sub_2231AB5EC(v2, (uint64_t)"{", (unsigned __int8 *)(a1 + 8), (uint64_t)",", a1 + 48, (uint64_t)"}");
}

uint64_t sub_2231AAF80(uint64_t a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  char v4;
  _QWORD v5[2];

  v3 = 0;
  sub_2231AB818((uint64_t)v5, (uint64_t)v2, (unsigned __int8 *)(a1 + 8));
  if (v3 == -1)
    sub_22316DD70();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC1F9D0[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC1F9B8[v3])(v5, v2);
  return result;
}

void sub_2231AB018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24EC1F9B8[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void *sub_2231AB050@<X0>(_DWORD *a1@<X8>)
{
  void *result;
  unint64_t v3;
  const void *v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  result = (void *)sub_224123BDC();
  if (v3 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v4 = result;
  v5 = v3;
  if (v3 >= 0x17)
  {
    v7 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v7 = v3 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    *((_QWORD *)a1 + 1) = v5;
    *((_QWORD *)a1 + 2) = v8 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v3;
    v6 = a1;
    if (!v3)
      goto LABEL_9;
  }
  result = memmove(v6, v4, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  a1[6] = 0;
  return result;
}

uint64_t sub_2231AB0FC(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  unsigned __int128 *v9;
  unsigned __int128 v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  if (*(_BYTE *)(a2 + 40))
  {
    if (*(char *)(a2 + 39) < 0)
    {
      sub_223197FA4((_BYTE *)(a1 + 16), *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
    }
    else
    {
      v4 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 16) = v4;
    }
    *(_BYTE *)(a1 + 40) = 1;
  }
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  if (*(_BYTE *)(a2 + 72))
  {
    if (*(char *)(a2 + 71) < 0)
    {
      sub_223197FA4((_BYTE *)(a1 + 48), *(void **)(a2 + 48), *(_QWORD *)(a2 + 56));
    }
    else
    {
      v5 = *(_OWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 48) = v5;
    }
    *(_BYTE *)(a1 + 72) = 1;
  }
  v6 = *(_OWORD *)(a2 + 80);
  v7 = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = v7;
  *(_OWORD *)(a1 + 80) = v6;
  *(_BYTE *)(a1 + 160) = 0;
  if (*(_BYTE *)(a2 + 160))
  {
    if (*(char *)(a2 + 135) < 0)
    {
      sub_223197FA4((_BYTE *)(a1 + 112), *(void **)(a2 + 112), *(_QWORD *)(a2 + 120));
    }
    else
    {
      v8 = *(_OWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 112) = v8;
    }
    v9 = (unsigned __int128 *)(a2 + 144);
    do
      v10 = __ldaxp(v9);
    while (__stlxp(v10, v9));
    *(_OWORD *)(a1 + 144) = v10;
    *(_BYTE *)(a1 + 160) = 1;
  }
  sub_2231AB2A8(a1 + 176, a2 + 176);
  return a1;
}

void sub_2231AB240(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v2;
  void **v3;
  void **v4;

  if (v2[160] && v2[135] < 0)
    operator delete(*v4);
  if (v2[72] && v2[71] < 0)
    operator delete(*v3);
  if (v2[40])
  {
    if (v2[39] < 0)
      operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2231AB2A8(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    sub_2231AB328((_QWORD *)a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 5));
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_2231AB30C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
    sub_224574564((void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2231AB328(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  _QWORD *v8;
  unint64_t v9;

  if (a4)
  {
    v5 = result;
    if (a4 >= 0x2AAAAAAAAAAAAABLL)
      sub_22316E078();
    result = operator new(96 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[12 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = sub_2231AB4E0(&v8[v9 / 8], (__int128 *)(a2 + v9));
        v9 += 96;
      }
      while (a2 + v9 != a3);
      v8 = (_QWORD *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_2231AB3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_2231AB420(&a9);
  _Unwind_Resume(a1);
}

void sub_2231AB3F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (v11)
    sub_2245745EC(v10 + v11, v10);
  *(_QWORD *)(v9 + 8) = v10;
  sub_2231AB420(&a9);
  _Unwind_Resume(a1);
}

void ***sub_2231AB420(void ***result)
{
  void ***v1;
  void **v2;
  void **v3;
  void **v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void **)**result;
    if (v3)
    {
      v4 = (void **)v2[1];
      v5 = **result;
      if (v4 == v3)
      {
LABEL_15:
        v2[1] = v3;
        operator delete(v5);
        return v1;
      }
      while (1)
      {
        if (*((_BYTE *)v4 - 16) && *((char *)v4 - 41) < 0)
        {
          operator delete(*(v4 - 8));
          if (*((_BYTE *)v4 - 72))
          {
LABEL_10:
            if (*((char *)v4 - 73) < 0)
              operator delete(*(v4 - 12));
          }
        }
        else if (*((_BYTE *)v4 - 72))
        {
          goto LABEL_10;
        }
        v4 -= 12;
        if (v4 == v3)
        {
          v5 = **v1;
          goto LABEL_15;
        }
      }
    }
  }
  return result;
}

_BYTE *sub_2231AB4E0(_BYTE *__dst, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  unsigned __int128 *v6;
  unsigned __int128 v7;

  *__dst = 0;
  __dst[24] = 0;
  if (*((_BYTE *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_223197FA4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v4 = *a2;
      *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)__dst = v4;
    }
    __dst[24] = 1;
  }
  __dst[32] = 0;
  __dst[80] = 0;
  if (*((_BYTE *)a2 + 80))
  {
    if (*((char *)a2 + 55) < 0)
    {
      sub_223197FA4(__dst + 32, *((void **)a2 + 4), *((_QWORD *)a2 + 5));
    }
    else
    {
      v5 = a2[2];
      *((_QWORD *)__dst + 6) = *((_QWORD *)a2 + 6);
      *((_OWORD *)__dst + 2) = v5;
    }
    v6 = (unsigned __int128 *)(a2 + 4);
    do
      v7 = __ldaxp(v6);
    while (__stlxp(v7, v6));
    *((_OWORD *)__dst + 4) = v7;
    __dst[80] = 1;
  }
  return __dst;
}

void sub_2231AB5A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(_BYTE *)(v1 + 80) && *(char *)(v1 + 55) < 0)
    operator delete(*v2);
  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2231AB5EC(__int128 *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  char v12;
  char v13;
  __int128 __dst;
  uint64_t v15;
  int v16;
  __int128 *p_dst;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 **p_p_dst;

  v16 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_223197FA4(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v15 = *((_QWORD *)a1 + 2);
  }
  v16 = 1;
  p_dst = &__dst;
  v18 = a2;
  v19 = &__dst;
  v20 = a2;
  v21 = a2;
  sub_2231ABB0C((uint64_t *)&v19, (uint64_t)&__dst);
  sub_2231AB818((uint64_t)&v13, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v18 = a4;
  v19 = &__dst;
  v20 = a4;
  v21 = a4;
  if (v16 == -1)
    sub_22316DD70();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24EC20A90[v16])(&p_p_dst, &__dst);
  sub_2231AB90C((uint64_t)&v12, (uint64_t)&__dst, a5);
  p_dst = &__dst;
  v18 = a6;
  v19 = &__dst;
  v20 = a6;
  v21 = a6;
  if (v16 == -1)
    sub_22316DD70();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24EC20A90[v16])(&p_p_dst, &__dst);
  if (v16 == -1)
    sub_22316DD70();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24EC1F9D0[v16])(&p_dst, &__dst);
  if (v16 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24EC1F9B8[v16])(&p_dst, &__dst);
  return result;
}

void sub_2231AB788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231AB7A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231AB7B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231AB7C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231AB7DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231AB7F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231AB804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231AB818(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  _QWORD *v5;
  uint64_t v6;
  void *__p[2];
  char v8;
  uint64_t v9[5];
  uint64_t *v10;

  sub_22456E6D0(v9);
  v5 = (_QWORD *)sub_22456E810(v9);
  sub_22454D68C(v5, a3);
  sub_22456E81C(v9, __p);
  sub_22456E764(v9);
  v9[0] = a2;
  v9[1] = (uint64_t)__p;
  v9[2] = a2;
  v9[3] = (uint64_t)__p;
  v9[4] = (uint64_t)__p;
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    sub_22316DD70();
  v10 = v9;
  ((void (*)(uint64_t **, uint64_t))off_24EC1F9A0[v6])(&v10, a2);
  if (v8 < 0)
    operator delete(__p[0]);
}

void sub_2231AB8DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2231AB90C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  void *__p[2];
  char v8;
  uint64_t v9[5];
  uint64_t *v10;

  sub_22456E6D0(v9);
  v5 = (_QWORD *)sub_22456E810(v9);
  sub_224122DB0(v5, a3);
  sub_22456E81C(v9, __p);
  sub_22456E764(v9);
  v9[0] = a2;
  v9[1] = (uint64_t)__p;
  v9[2] = a2;
  v9[3] = (uint64_t)__p;
  v9[4] = (uint64_t)__p;
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    sub_22316DD70();
  v10 = v9;
  ((void (*)(uint64_t **, uint64_t))off_24EC1F9A0[v6])(&v10, a2);
  if (v8 < 0)
    operator delete(__p[0]);
}

void sub_2231AB9D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_2231ABA00(_DWORD ***a1)
{
  return sub_2231ABA1C(**a1, (char *)(*a1)[1]);
}

void sub_2231ABA0C(uint64_t a1, uint64_t a2)
{
  sub_2231ABB0C((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_2231ABA1C(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24EC1F9B8[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_2231ABB0C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24EC1F9B8[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_22319BD1C((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_2231ABCC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_2231ABD04(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_2231ABDFC((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_2231ABDF4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_2231ABDFC(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  char *v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (char *)*a1;
      v14 = (char *)a1[1];
      if (v14 == *a1)
        goto LABEL_23;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
LABEL_23:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_28;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v11 - 1) = *((_QWORD *)v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *((_QWORD *)v14 - 2) = 0;
    *((_QWORD *)v14 - 1) = 0;
    *((_QWORD *)v14 - 3) = 0;
    v14 -= 24;
  }
  while (v14 != v13);
  v19 = (char *)*a1;
  v14 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  if (v14 != v19)
  {
    do
    {
      if (*(v14 - 1) < 0)
        operator delete(*((void **)v14 - 3));
      v14 -= 24;
    }
    while (v14 != v19);
    v14 = v19;
  }
LABEL_28:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_2231AC014(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319C040((uint64_t)va);
  _Unwind_Resume(a1);
}

__int128 *sub_2231AC028()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_255789310);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255789310))
    return &xmmword_2557892F8;
  v2 = sub_2231AC104();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&xmmword_2557892F8, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_255789308 = v2->__r_.__value_.__r.__words[2];
    xmmword_2557892F8 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557892F8, &dword_22314D000);
  __cxa_guard_release(&qword_255789310);
  return &xmmword_2557892F8;
}

void sub_2231AC0EC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255789310);
  _Unwind_Resume(a1);
}

std::string *sub_2231AC104()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_255789330);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255789330))
    return &stru_255789318;
  sub_2231AC3A8((uint64_t)__p);
  sub_2231AC1F4((char *)__p, &stru_255789318);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789318, &dword_22314D000);
  __cxa_guard_release(&qword_255789330);
  return &stru_255789318;
}

void sub_2231AC1B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_255789330);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_255789330);
  _Unwind_Resume(a1);
}

void sub_2231AC1F4(char *a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *__dst[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2231AC58C();
  if (*((char *)v4 + 23) < 0)
  {
    sub_223197FA4(__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v16 = *((_QWORD *)v4 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = sub_2231AC788();
  if (*((char *)v6 + 23) < 0)
  {
    sub_223197FA4(&v17, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v18 = *((_QWORD *)v6 + 2);
    v17 = v7;
  }
  sub_22319BD1C(&__p, (uint64_t)__dst, 2uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_19;
}

void sub_2231AC358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_22319BB48((void **)&a9);
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_2231AC3A8(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_255789410);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_255789410))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::kit::Number>]", qword_2557893F8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2557893F8, &dword_22314D000);
    __cxa_guard_release(&qword_255789410);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_255789430);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_255789430))
  {
    v5 = sub_2231A38CC(qword_2557893F8, "<", 0);
    sub_2231A37C8(qword_2557893F8, 0, v5, qword_255789418);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255789418, &dword_22314D000);
    __cxa_guard_release(&qword_255789430);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_255789450);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_255789450))
  {
    sub_224573040((uint64_t)qword_255789418, (uint64_t)&xmmword_255789438);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255789438, &dword_22314D000);
    __cxa_guard_release(&qword_255789450);
  }
  if (byte_25578944F < 0)
  {
    sub_223197FA4((_BYTE *)a1, (void *)xmmword_255789438, *((unint64_t *)&xmmword_255789438 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_255789438;
    *(_QWORD *)(a1 + 16) = unk_255789448;
  }
}

void sub_2231AC544(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255789450);
  _Unwind_Resume(a1);
}

void sub_2231AC55C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255789430);
  _Unwind_Resume(a1);
}

void sub_2231AC574(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255789410);
  _Unwind_Resume(a1);
}

__int128 *sub_2231AC58C()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_255789350);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255789350))
    return &xmmword_255789338;
  v2 = (char *)sub_2231AC668();
  if (v2[23] < 0)
  {
    sub_223197FA4(&xmmword_255789338, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_255789348 = *((_QWORD *)v2 + 2);
    xmmword_255789338 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255789338, &dword_22314D000);
  __cxa_guard_release(&qword_255789350);
  return &xmmword_255789338;
}

void sub_2231AC650(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255789350);
  _Unwind_Resume(a1);
}

void *sub_2231AC668()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_255789370);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255789370))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::Number]", qword_255789358);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255789358, &dword_22314D000);
    __cxa_guard_release(&qword_255789370);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_255789390);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_255789390))
    return &unk_255789378;
  sub_224573040((uint64_t)qword_255789358, (uint64_t)&unk_255789378);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_255789378, &dword_22314D000);
  __cxa_guard_release(&qword_255789390);
  return &unk_255789378;
}

void sub_2231AC758(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255789390);
  _Unwind_Resume(a1);
}

void sub_2231AC770(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255789370);
  _Unwind_Resume(a1);
}

__int128 *sub_2231AC788()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2557893B0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2557893B0))
    return &xmmword_255789398;
  v2 = (char *)sub_2231AC864();
  if (v2[23] < 0)
  {
    sub_223197FA4(&xmmword_255789398, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_2557893A8 = *((_QWORD *)v2 + 2);
    xmmword_255789398 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255789398, &dword_22314D000);
  __cxa_guard_release(&qword_2557893B0);
  return &xmmword_255789398;
}

void sub_2231AC84C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2557893B0);
  _Unwind_Resume(a1);
}

void *sub_2231AC864()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2557893D0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2557893D0))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::UnknownPackage]", qword_2557893B8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2557893B8, &dword_22314D000);
    __cxa_guard_release(&qword_2557893D0);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2557893F0);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_2557893F0))
    return &unk_2557893D8;
  sub_224573040((uint64_t)qword_2557893B8, (uint64_t)&unk_2557893D8);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_2557893D8, &dword_22314D000);
  __cxa_guard_release(&qword_2557893F0);
  return &unk_2557893D8;
}

void sub_2231AC954(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2557893F0);
  _Unwind_Resume(a1);
}

void sub_2231AC96C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2557893D0);
  _Unwind_Resume(a1);
}

uint64_t sub_2231AC984(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  char v12;
  __int128 __dst;
  uint64_t v14;
  int v15;
  __int128 *p_dst;
  uint64_t v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 **p_p_dst;

  v15 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_223197FA4(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v14 = *((_QWORD *)a1 + 2);
  }
  v15 = 1;
  p_dst = &__dst;
  v17 = a2;
  v18 = &__dst;
  v19 = a2;
  v20 = a2;
  sub_2231ABB0C((uint64_t *)&v18, (uint64_t)&__dst);
  p_dst = &__dst;
  v17 = a3;
  v18 = &__dst;
  v19 = a3;
  v20 = a3;
  if (v15 == -1)
    sub_22316DD70();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24EC1FE28[v15])(&p_p_dst, &__dst);
  p_dst = &__dst;
  v17 = a4;
  v18 = &__dst;
  v19 = a4;
  v20 = a4;
  if (v15 == -1)
    sub_22316DD70();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24EC20A90[v15])(&p_p_dst, &__dst);
  sub_2231AB90C((uint64_t)&v12, (uint64_t)&__dst, a5);
  p_dst = &__dst;
  v17 = a6;
  v18 = &__dst;
  v19 = a6;
  v20 = a6;
  if (v15 == -1)
    sub_22316DD70();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24EC20A90[v15])(&p_p_dst, &__dst);
  if (v15 == -1)
    sub_22316DD70();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24EC1F9D0[v15])(&p_dst, &__dst);
  if (v15 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24EC1F9B8[v15])(&p_dst, &__dst);
  return result;
}

void sub_2231ACB58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231ACB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231ACB84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231ACB98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231ACBAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231ACBC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231ACBD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *sub_2231ACBE8()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void *v8[3];
  void *v9[2];
  char v10;
  void *__dst[2];
  uint64_t v12;
  void *v13[2];
  uint64_t v14;
  __int128 v15;
  std::string::size_type v16;
  void *__p[2];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_255789470);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255789470))
  {
    sub_223174DE4(v9, "viz::PackageData");
    v2 = sub_2231AC58C();
    if (*((char *)v2 + 23) < 0)
    {
      sub_223197FA4(__dst, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      v12 = *((_QWORD *)v2 + 2);
      *(_OWORD *)__dst = v3;
    }
    v14 = 0xC00000000000000;
    *(_OWORD *)v13 = *(_OWORD *)"viz::Package";
    v4 = sub_2231ACEB0();
    if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_223197FA4(&v15, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
    }
    else
    {
      v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      v16 = v4->__r_.__value_.__r.__words[2];
      v15 = v5;
    }
    v18 = 0x400000000000000;
    *(_OWORD *)__p = *(_OWORD *)"void";
    sub_22319BD1C(v8, (uint64_t)__dst, 4uLL);
    sub_2245730F4((char *)v9, (uint64_t *)v8, &stru_255789458, v6, v7);
    sub_22319BB48(v8);
    if (SHIBYTE(v18) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v16) & 0x80000000) == 0)
      {
LABEL_12:
        if ((SHIBYTE(v14) & 0x80000000) == 0)
          goto LABEL_13;
        goto LABEL_18;
      }
    }
    else if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete((void *)v15);
    if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
LABEL_13:
      if ((SHIBYTE(v12) & 0x80000000) == 0)
        goto LABEL_14;
      goto LABEL_19;
    }
LABEL_18:
    operator delete(v13[0]);
    if ((SHIBYTE(v12) & 0x80000000) == 0)
    {
LABEL_14:
      if ((v10 & 0x80000000) == 0)
      {
LABEL_15:
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789458, &dword_22314D000);
        __cxa_guard_release(&qword_255789470);
        return &stru_255789458;
      }
LABEL_20:
      operator delete(v9[0]);
      goto LABEL_15;
    }
LABEL_19:
    operator delete(__dst[0]);
    if ((v10 & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_20;
  }
  return &stru_255789458;
}

void sub_2231ACDCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  sub_22319BB48(&a10);
  if (a43 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a31 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a32);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a25 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a26);
  if ((a25 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a18 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a20);
  if ((a18 & 0x80000000) == 0)
  {
LABEL_6:
    __cxa_guard_abort(&qword_255789470);
    _Unwind_Resume(a1);
  }
LABEL_11:
  operator delete(a13);
  __cxa_guard_abort(&qword_255789470);
  _Unwind_Resume(a1);
}

std::string *sub_2231ACEB0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_255789490);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255789490))
    return &stru_255789478;
  sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = 8U]", __p);
  sub_22457326C((uint64_t)__p, &stru_255789478);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789478, &dword_22314D000);
  __cxa_guard_release(&qword_255789490);
  return &stru_255789478;
}

void sub_2231ACF68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_255789490);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_255789490);
  _Unwind_Resume(a1);
}

uint64_t sub_2231ACFA8(__int128 *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t result;
  char v8;
  __int128 __dst;
  uint64_t v10;
  int v11;
  __int128 *p_dst;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 **p_p_dst;

  v11 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_223197FA4(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v10 = *((_QWORD *)a1 + 2);
  }
  v11 = 1;
  p_dst = &__dst;
  v13 = a2;
  v14 = &__dst;
  v15 = a2;
  v16 = a2;
  sub_2231ABB0C((uint64_t *)&v14, (uint64_t)&__dst);
  sub_2231AB818((uint64_t)&v8, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v13 = a4;
  v14 = &__dst;
  v15 = a4;
  v16 = a4;
  if (v11 == -1)
    sub_22316DD70();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24EC20A90[v11])(&p_p_dst, &__dst);
  if (v11 == -1)
    sub_22316DD70();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24EC1F9D0[v11])(&p_dst, &__dst);
  if (v11 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24EC1F9B8[v11])(&p_dst, &__dst);
  return result;
}

void sub_2231AD0E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231AD100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231AD114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231AD128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231AD13C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231AD150(char *a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _OWORD *v23;
  __int128 *v24;
  unint64_t v25;
  __int128 v26;
  char v27;
  char *v28;
  void *__p[2];
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v10 = a1;
    v11 = 0;
    *(_QWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = 0;
    *(_QWORD *)(a6 + 16) = 0;
    v28 = a1;
    __p[0] = a1;
    v12 = &a1[a2];
    while (1)
    {
      v15 = v12;
      if (v10 != v12)
      {
        if (a4)
        {
          v15 = v10;
LABEL_10:
          v16 = a4;
          v17 = a3;
          while (*v17 != *v15)
          {
            ++v17;
            if (!--v16)
            {
              if (++v15 != v12)
                goto LABEL_10;
              goto LABEL_14;
            }
          }
        }
        else
        {
LABEL_14:
          v15 = v12;
        }
      }
      v28 = v15;
      if (a5 != 1 && v15 == v10)
        goto LABEL_6;
      if ((unint64_t)v11 >= *(_QWORD *)(a6 + 16))
      {
        v11 = sub_2231AD3EC((void **)a6, (uint64_t *)__p, &v28);
        goto LABEL_5;
      }
      v18 = v15 - v10;
      if ((unint64_t)(v15 - v10) >= 0x7FFFFFFFFFFFFFF8)
        sub_22316DBC0();
      if (v18 > 0x16)
      {
        v20 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v18 | 7) != 0x17)
          v20 = v18 | 7;
        v21 = v20 + 1;
        v19 = (char *)operator new(v20 + 1);
        *((_QWORD *)v11 + 1) = v18;
        *((_QWORD *)v11 + 2) = v21 | 0x8000000000000000;
        *(_QWORD *)v11 = v19;
        if (v15 == v10)
        {
LABEL_3:
          v13 = v19;
          goto LABEL_4;
        }
      }
      else
      {
        v11[23] = v18;
        v19 = v11;
        if (v15 == v10)
          goto LABEL_3;
      }
      if (v18 < 0x20 || (unint64_t)(v19 - v10) < 0x20)
      {
        v22 = v10;
        v13 = v19;
      }
      else
      {
        v22 = &v10[v18 & 0xFFFFFFFFFFFFFFE0];
        v13 = &v19[v18 & 0xFFFFFFFFFFFFFFE0];
        v23 = v19 + 16;
        v24 = (__int128 *)(v10 + 16);
        v25 = v18 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v26 = *v24;
          *(v23 - 1) = *(v24 - 1);
          *v23 = v26;
          v23 += 2;
          v24 += 2;
          v25 -= 32;
        }
        while (v25);
        if (v18 == (v18 & 0xFFFFFFFFFFFFFFE0))
          goto LABEL_4;
      }
      do
      {
        v27 = *v22++;
        *v13++ = v27;
      }
      while (v22 != v15);
LABEL_4:
      *v13 = 0;
      v11 += 24;
      *(_QWORD *)(a6 + 8) = v11;
LABEL_5:
      *(_QWORD *)(a6 + 8) = v11;
      v10 = v28;
LABEL_6:
      __p[0] = v10 + 1;
      if (v10++ == v12)
        return;
    }
  }
  if (a5)
  {
    v30 = 0;
    LOBYTE(__p[0]) = 0;
    sub_22319BD1C((_QWORD *)a6, (uint64_t)__p, 1uLL);
    if (v30 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_QWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = 0;
    *(_QWORD *)(a6 + 16) = 0;
  }
}

void sub_2231AD3AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_2231AD3EC(void **a1, uint64_t *a2, char **a3)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  _OWORD *v16;
  __int128 *v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char v23;
  char *v24;
  void *v25;
  char *v26;
  char *v27;
  __int128 v28;
  char *v29;
  char *v31;
  char *v32;
  char *v33;

  v4 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v5)
    v5 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v4];
  v31 = v10;
  v32 = v10;
  v33 = &v9[24 * v8];
  v11 = *a2;
  v12 = *a3;
  v13 = (unint64_t)&(*a3)[-v11];
  if (v13 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  if (v13 <= 0x16)
  {
    v10[23] = v13;
    if ((char *)v11 != v12)
      goto LABEL_14;
LABEL_23:
    v15 = v10;
    goto LABEL_26;
  }
  v20 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v13 | 7) != 0x17)
    v20 = v13 | 7;
  v21 = v20 + 1;
  v22 = (char *)operator new(v20 + 1);
  *((_QWORD *)v10 + 1) = v13;
  *((_QWORD *)v10 + 2) = v21 | 0x8000000000000000;
  *(_QWORD *)v10 = v22;
  v10 = v22;
  if ((char *)v11 == v12)
    goto LABEL_23;
LABEL_14:
  if (v13 < 0x20 || (unint64_t)&v10[-v11] < 0x20)
  {
    v14 = (char *)v11;
    v15 = v10;
    do
    {
LABEL_25:
      v23 = *v14++;
      *v15++ = v23;
    }
    while (v14 != v12);
    goto LABEL_26;
  }
  v14 = (char *)(v11 + (v13 & 0xFFFFFFFFFFFFFFE0));
  v15 = &v10[v13 & 0xFFFFFFFFFFFFFFE0];
  v16 = v10 + 16;
  v17 = (__int128 *)(v11 + 16);
  v18 = v13 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v19 = *v17;
    *(v16 - 1) = *(v17 - 1);
    *v16 = v19;
    v16 += 2;
    v17 += 2;
    v18 -= 32;
  }
  while (v18);
  if (v13 != (v13 & 0x7FFFFFFFFFFFFFE0))
    goto LABEL_25;
LABEL_26:
  *v15 = 0;
  v24 = v31;
  v25 = v32 + 24;
  v26 = (char *)*a1;
  v27 = (char *)a1[1];
  if (v27 == *a1)
  {
    *a1 = v31;
    a1[1] = v25;
    a1[2] = v33;
  }
  else
  {
    do
    {
      v28 = *(_OWORD *)(v27 - 24);
      *((_QWORD *)v24 - 1) = *((_QWORD *)v27 - 1);
      *(_OWORD *)(v24 - 24) = v28;
      v24 -= 24;
      *((_QWORD *)v27 - 2) = 0;
      *((_QWORD *)v27 - 1) = 0;
      *((_QWORD *)v27 - 3) = 0;
      v27 -= 24;
    }
    while (v27 != v26);
    v29 = (char *)*a1;
    v27 = (char *)a1[1];
    *a1 = v24;
    a1[1] = v25;
    a1[2] = v33;
    if (v27 != v29)
    {
      do
      {
        if (*(v27 - 1) < 0)
          operator delete(*((void **)v27 - 3));
        v27 -= 24;
      }
      while (v27 != v29);
      v27 = v29;
    }
  }
  if (v27)
    operator delete(v27);
  return v32 + 24;
}

void sub_2231AD658(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319C040((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2231AD66C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  if (*(_BYTE *)(a1 + 200))
  {
    v2 = *(_QWORD *)(a1 + 176);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 184);
      v4 = *(void **)(a1 + 176);
      if (v3 == v2)
      {
LABEL_14:
        *(_QWORD *)(a1 + 184) = v2;
        operator delete(v4);
        goto LABEL_15;
      }
      while (1)
      {
        if (*(_BYTE *)(v3 - 16) && *(char *)(v3 - 41) < 0)
        {
          operator delete(*(void **)(v3 - 64));
          if (*(_BYTE *)(v3 - 72))
          {
LABEL_9:
            if (*(char *)(v3 - 73) < 0)
              operator delete(*(void **)(v3 - 96));
          }
        }
        else if (*(_BYTE *)(v3 - 72))
        {
          goto LABEL_9;
        }
        v3 -= 96;
        if (v3 == v2)
        {
          v4 = *(void **)(a1 + 176);
          goto LABEL_14;
        }
      }
    }
  }
LABEL_15:
  if (*(_BYTE *)(a1 + 160) && *(char *)(a1 + 135) < 0)
  {
    operator delete(*(void **)(a1 + 112));
    if (!*(_BYTE *)(a1 + 72))
      goto LABEL_21;
  }
  else if (!*(_BYTE *)(a1 + 72))
  {
    goto LABEL_21;
  }
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
LABEL_21:
  if (!*(_BYTE *)(a1 + 40) || (*(char *)(a1 + 39) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_2231AD778(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, __int128 *a5)
{
  uint64_t *v10;
  void *__p[2];
  uint64_t v13;
  char v14;
  _QWORD v15[3];

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v10 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    *(_OWORD *)__p = *(_OWORD *)a4;
    v13 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    v14 = 1;
    sub_2231AD880(a3, (__int128 *)__p, a5, v15);
    sub_2231AA5A4(a1, v10, (uint64_t)v15);
    sub_2241231D8((uint64_t)v15);
    if (v14)
    {
      if (SHIBYTE(v13) < 0)
        operator delete(__p[0]);
    }
  }
  return a1;
}

void sub_2231AD84C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17)
{
  sub_2241231D8((uint64_t)&a17);
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2231AD880@<X0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t (**v10)();
  char v11[8];
  void *__p;
  void *v13;
  _QWORD v14[2];
  __int128 v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  __int128 v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v10 = &off_24EC77E40;
  v14[0] = sub_224504D68();
  v14[1] = v8;
  LOBYTE(v15) = 0;
  v17 = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v15 = *a2;
    v16 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v17 = 1;
  }
  v18 = 0;
  v19 = 0;
  v20 = *a3;
  v21 = 1;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  sub_22454BF5C((uint64_t)v11, 3, *a1);
  sub_2231AA8F0(v11, (uint64_t)v14, a4);
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
  sub_2231AD66C((uint64_t)v14);
  return nullsub_661(&v10);
}

void sub_2231AD9A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_2231AD66C((uint64_t)&a15);
  nullsub_661(&a9);
  _Unwind_Resume(a1);
}

void sub_2231AD9DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_661(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2231AD9F0@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t (**v10)();
  _QWORD v11[2];
  __int128 v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  __int128 v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v10 = &off_24EC77E40;
  v11[0] = sub_224504D68();
  v11[1] = v8;
  LOBYTE(v12) = 0;
  v14 = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v12 = *a2;
    v13 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v14 = 1;
  }
  v15 = 0;
  v16 = 0;
  v17 = *a3;
  v18 = 1;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  sub_2231ADB28(a1, (uint64_t)v11, a4);
  sub_2231AD66C((uint64_t)v11);
  return nullsub_661(&v10);
}

void sub_2231ADAF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_2231AD66C((uint64_t)&a11);
  nullsub_661(&a9);
  _Unwind_Resume(a1);
}

void sub_2231ADB14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_661(&a9);
  _Unwind_Resume(a1);
}

void sub_2231ADB28(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  _QWORD v15[32];

  v15[31] = *MEMORY[0x24BDAC8D0];
  sub_2231AEC20(&v11, a1);
  sub_2244E4600(&v13, (uint64_t)&v11, 1);
  sub_224016C04((uint64_t)v15, (uint64_t)&v13, a2);
  sub_2231ADC74((uint64_t)v15, a3);
  sub_224017008(v15);
  v5 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v12;
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_2231ADC30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13)
{
  sub_224017008(&a13);
  sub_223167354((uint64_t)&a11);
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2231ADC5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2231ADC74@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  unsigned __int128 *v5;
  unsigned __int128 v6;
  uint64_t result;
  uint64_t v8;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24EC20AE0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 48) = 0;
  *(_BYTE *)(v4 + 72) = 0;
  if (*(_BYTE *)(a1 + 72))
  {
    *(_OWORD *)(v4 + 48) = *(_OWORD *)(a1 + 48);
    *(_QWORD *)(v4 + 64) = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_BYTE *)(v4 + 72) = 1;
  }
  *(_BYTE *)(v4 + 80) = 0;
  *(_BYTE *)(v4 + 104) = 0;
  if (*(_BYTE *)(a1 + 104))
  {
    *(_OWORD *)(v4 + 80) = *(_OWORD *)(a1 + 80);
    *(_QWORD *)(v4 + 96) = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_BYTE *)(v4 + 104) = 1;
  }
  *(_BYTE *)(v4 + 144) = 0;
  *(_OWORD *)(v4 + 112) = *(_OWORD *)(a1 + 112);
  *(_QWORD *)(v4 + 128) = *(_QWORD *)(a1 + 128);
  *(_BYTE *)(v4 + 192) = 0;
  if (*(_BYTE *)(a1 + 192))
  {
    *(_OWORD *)(v4 + 144) = *(_OWORD *)(a1 + 144);
    *(_QWORD *)(v4 + 160) = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    v5 = (unsigned __int128 *)(a1 + 176);
    do
      v6 = __ldaxp(v5);
    while (__stlxp(v6, v5));
    *(_OWORD *)(v4 + 176) = v6;
    *(_BYTE *)(v4 + 192) = 1;
  }
  *(_BYTE *)(v4 + 208) = 0;
  *(_BYTE *)(v4 + 232) = 0;
  if (*(_BYTE *)(a1 + 232))
  {
    *(_OWORD *)(v4 + 208) = *(_OWORD *)(a1 + 208);
    *(_QWORD *)(v4 + 224) = *(_QWORD *)(a1 + 224);
    *(_QWORD *)(a1 + 216) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 208) = 0;
    *(_BYTE *)(v4 + 232) = 1;
  }
  *(_QWORD *)v4 = &off_24EC66920;
  v8 = v4;
  sub_224123150(a2, &v8);
  result = v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_2231ADDFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, uint64_t a10)
{
  uint64_t v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  sub_2231ADE28(&a9);
  _Unwind_Resume(a1);
}

_QWORD **sub_2231ADE28(_QWORD **a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_224017008(v2);
    MEMORY[0x227684CE8](v3, 0x10B3C40E92279A6);
  }
  return a1;
}

uint64_t sub_2231ADE6C(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_2231ADE74(uint64_t *a1, uint64_t *lpsrc)
{
  uint64_t result;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24EC6A3F8, (const struct __class_type_info *)&unk_24EC20AB8, 0);
  if (result)
  {
    if (a1 == lpsrc)
      return 1;
    else
      return sub_2244E4604(a1 + 1, (uint64_t *)(result + 8));
  }
  return result;
}

uint64_t sub_2231ADED8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24EC20AE0;
  sub_2231AD66C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

void sub_2231ADF50(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24EC20AE0;
  sub_2231AD66C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231ADFCC(uint64_t a1)
{
  __int128 *v2;

  v2 = sub_2231AE4C0();
  return sub_2231AE1A0(v2, (uint64_t)"{", (uint64_t *)(a1 + 8), (uint64_t)",", a1 + 32, (uint64_t)"}");
}

uint64_t sub_2231AE024(uint64_t a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  char v4;
  _QWORD v5[2];

  v3 = 0;
  sub_2231AE3CC((uint64_t)v5, (uint64_t)v2, (uint64_t *)(a1 + 8));
  if (v3 == -1)
    sub_22316DD70();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC1F9D0[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC1F9B8[v3])(v5, v2);
  return result;
}

void sub_2231AE0BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24EC1F9B8[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void *sub_2231AE0F4@<X0>(_DWORD *a1@<X8>)
{
  void *result;
  unint64_t v3;
  const void *v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  result = (void *)sub_224123BDC();
  if (v3 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v4 = result;
  v5 = v3;
  if (v3 >= 0x17)
  {
    v7 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v7 = v3 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    *((_QWORD *)a1 + 1) = v5;
    *((_QWORD *)a1 + 2) = v8 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v3;
    v6 = a1;
    if (!v3)
      goto LABEL_9;
  }
  result = memmove(v6, v4, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  a1[6] = 0;
  return result;
}

uint64_t sub_2231AE1A0(__int128 *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  char v12;
  char v13;
  __int128 __dst;
  uint64_t v15;
  int v16;
  __int128 *p_dst;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 **p_p_dst;

  v16 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_223197FA4(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v15 = *((_QWORD *)a1 + 2);
  }
  v16 = 1;
  p_dst = &__dst;
  v18 = a2;
  v19 = &__dst;
  v20 = a2;
  v21 = a2;
  sub_2231ABB0C((uint64_t *)&v19, (uint64_t)&__dst);
  sub_2231AE3CC((uint64_t)&v13, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v18 = a4;
  v19 = &__dst;
  v20 = a4;
  v21 = a4;
  if (v16 == -1)
    sub_22316DD70();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24EC20A90[v16])(&p_p_dst, &__dst);
  sub_2231AB90C((uint64_t)&v12, (uint64_t)&__dst, a5);
  p_dst = &__dst;
  v18 = a6;
  v19 = &__dst;
  v20 = a6;
  v21 = a6;
  if (v16 == -1)
    sub_22316DD70();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24EC20A90[v16])(&p_p_dst, &__dst);
  if (v16 == -1)
    sub_22316DD70();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24EC1F9D0[v16])(&p_dst, &__dst);
  if (v16 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24EC1F9B8[v16])(&p_dst, &__dst);
  return result;
}

void sub_2231AE33C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231AE354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231AE368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231AE37C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231AE390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231AE3A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231AE3B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231AE3CC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t v6;
  void *__p[2];
  char v8;
  uint64_t v9[5];
  uint64_t *v10;

  sub_22456E6D0(v9);
  v5 = (uint64_t *)sub_22456E810(v9);
  sub_2244E4610(v5, a3);
  sub_22456E81C(v9, __p);
  sub_22456E764(v9);
  v9[0] = a2;
  v9[1] = (uint64_t)__p;
  v9[2] = a2;
  v9[3] = (uint64_t)__p;
  v9[4] = (uint64_t)__p;
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    sub_22316DD70();
  v10 = v9;
  ((void (*)(uint64_t **, uint64_t))off_24EC1F9A0[v6])(&v10, a2);
  if (v8 < 0)
    operator delete(__p[0]);
}

void sub_2231AE490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

__int128 *sub_2231AE4C0()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2557894D0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2557894D0))
    return &xmmword_2557894B8;
  v2 = sub_2231AE59C();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&xmmword_2557894B8, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_2557894C8 = v2->__r_.__value_.__r.__words[2];
    xmmword_2557894B8 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557894B8, &dword_22314D000);
  __cxa_guard_release(&qword_2557894D0);
  return &xmmword_2557894B8;
}

void sub_2231AE584(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2557894D0);
  _Unwind_Resume(a1);
}

std::string *sub_2231AE59C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2557894F0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2557894F0))
    return &stru_2557894D8;
  sub_2231AE840((uint64_t)__p);
  sub_2231AE68C((char *)__p, &stru_2557894D8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_2557894D8, &dword_22314D000);
  __cxa_guard_release(&qword_2557894F0);
  return &stru_2557894D8;
}

void sub_2231AE64C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2557894F0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2557894F0);
  _Unwind_Resume(a1);
}

void sub_2231AE68C(char *a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *__dst[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2231AEA24();
  if (*((char *)v4 + 23) < 0)
  {
    sub_223197FA4(__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v16 = *((_QWORD *)v4 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = sub_2231AC788();
  if (*((char *)v6 + 23) < 0)
  {
    sub_223197FA4(&v17, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v18 = *((_QWORD *)v6 + 2);
    v17 = v7;
  }
  sub_22319BD1C(&__p, (uint64_t)__dst, 2uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_19;
}

void sub_2231AE7F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_22319BB48((void **)&a9);
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_2231AE840(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_255789570);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_255789570))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::kit::dict::Dictionary>]", qword_255789558);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255789558, &dword_22314D000);
    __cxa_guard_release(&qword_255789570);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_255789590);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_255789590))
  {
    v5 = sub_2231A38CC(qword_255789558, "<", 0);
    sub_2231A37C8(qword_255789558, 0, v5, qword_255789578);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255789578, &dword_22314D000);
    __cxa_guard_release(&qword_255789590);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2557895B0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2557895B0))
  {
    sub_224573040((uint64_t)qword_255789578, (uint64_t)&xmmword_255789598);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255789598, &dword_22314D000);
    __cxa_guard_release(&qword_2557895B0);
  }
  if (byte_2557895AF < 0)
  {
    sub_223197FA4((_BYTE *)a1, (void *)xmmword_255789598, *((unint64_t *)&xmmword_255789598 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_255789598;
    *(_QWORD *)(a1 + 16) = unk_2557895A8;
  }
}

void sub_2231AE9DC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2557895B0);
  _Unwind_Resume(a1);
}

void sub_2231AE9F4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255789590);
  _Unwind_Resume(a1);
}

void sub_2231AEA0C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255789570);
  _Unwind_Resume(a1);
}

__int128 *sub_2231AEA24()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_255789510);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255789510))
    return &xmmword_2557894F8;
  v2 = (char *)sub_2231AEB00();
  if (v2[23] < 0)
  {
    sub_223197FA4(&xmmword_2557894F8, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_255789508 = *((_QWORD *)v2 + 2);
    xmmword_2557894F8 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557894F8, &dword_22314D000);
  __cxa_guard_release(&qword_255789510);
  return &xmmword_2557894F8;
}

void sub_2231AEAE8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255789510);
  _Unwind_Resume(a1);
}

void *sub_2231AEB00()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_255789530);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255789530))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::dict::Dictionary]", qword_255789518);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255789518, &dword_22314D000);
    __cxa_guard_release(&qword_255789530);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_255789550);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_255789550))
    return &unk_255789538;
  sub_224573040((uint64_t)qword_255789518, (uint64_t)&unk_255789538);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_255789538, &dword_22314D000);
  __cxa_guard_release(&qword_255789550);
  return &unk_255789538;
}

void sub_2231AEBF0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255789550);
  _Unwind_Resume(a1);
}

void sub_2231AEC08(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255789530);
  _Unwind_Resume(a1);
}

_QWORD *sub_2231AEC20(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  CFTypeRef v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v3 = *(std::__shared_weak_count **)(a2 + 8);
  v16 = *(CFTypeRef *)a2;
  v17 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  sub_2231AED2C(&v18, &v16);
  v6 = v19;
  *a1 = v18;
  a1[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    v9 = v19;
    if (v19)
    {
      v10 = (unint64_t *)&v19->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  v12 = v17;
  if (!v17)
    return a1;
  v13 = (unint64_t *)&v17->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  return a1;
}

void sub_2231AED18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_2231AED2C(_QWORD *a1, CFTypeRef *a2)
{
  CFTypeRef v3;
  _QWORD *v4;

  v3 = *a2;
  if (*a2)
    j__CFRetain(*a2);
  *a1 = v3;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24EC1FC58;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = v3;
  a1[1] = v4;
  return a1;
}

void sub_2231AED8C(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    j__CFRelease(v1);
  __cxa_rethrow();
}

void sub_2231AEDA4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

BOOL sub_2231AEDB8(uint64_t a1, const void *a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  const __CFDictionary *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  _BOOL8 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *value;
  std::__shared_weak_count *v22;

  v7 = *(const __CFDictionary **)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      return 0;
  }
  else
  {
LABEL_6:
    if (!v7)
      return 0;
  }
  if (sub_22452C444(*(const __CFDictionary **)a1, a2))
    return 0;
  sub_224527BAC(a3, (CFStringRef *)&value);
  v12 = value;
  v11 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v16 = v12 != 0;
      if (!v12)
        goto LABEL_15;
      goto LABEL_14;
    }
  }
  v16 = v12 != 0;
  if (v12)
LABEL_14:
    j__CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, a2, value);
LABEL_15:
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return v16;
}

void sub_2231AEF18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2231AEF2C(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v4;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  const char *v17;
  uint64_t *v18;

  if (a3[1] - *a3 <= 15)
  {
    v13 = a2;
    v14 = "{}";
    v15 = a2;
    v16 = "{}";
    v17 = "{}";
    v4 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v4 != -1)
    {
      v18 = &v13;
      return ((uint64_t (*)(uint64_t **, uint64_t))off_24EC20B20[v4])(&v18, a2);
    }
LABEL_11:
    sub_22316DD70();
  }
  v13 = a2;
  v14 = "{";
  v15 = a2;
  v16 = "{";
  v17 = "{";
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    goto LABEL_11;
  v18 = &v13;
  ((void (*)(uint64_t **, uint64_t))off_24EC20A90[v6])(&v18, a2);
  v8 = *a3;
  sub_22319B83C((uint64_t)&v13, a2, *a3);
  v9 = a3[1];
  for (i = v8 + 16; i != v9; i += 16)
  {
    v13 = a2;
    v14 = ",";
    v15 = a2;
    v16 = ",";
    v17 = ",";
    v11 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v11 == -1)
      goto LABEL_11;
    v18 = &v13;
    ((void (*)(uint64_t **, uint64_t))off_24EC20A90[v11])(&v18, a2);
    sub_22319B83C((uint64_t)&v13, a2, i);
  }
  v13 = a2;
  v14 = "}";
  v15 = a2;
  v16 = "}";
  v17 = "}";
  v12 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v12 == -1)
    goto LABEL_11;
  v18 = &v13;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24EC20A90[v12])(&v18, a2);
}

_DWORD *sub_2231AF0A0(_DWORD ***a1)
{
  return sub_2231AF0BC(**a1, (char *)(*a1)[1]);
}

void sub_2231AF0AC(uint64_t a1, uint64_t a2)
{
  sub_2231AF1AC((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_2231AF0BC(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24EC1F9B8[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_2231AF1AC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24EC1F9B8[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_22319BD1C((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_2231AF360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_2231AF3A4(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_2231AF49C((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_2231AF494(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_2231AF49C(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  char *v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (char *)*a1;
      v14 = (char *)a1[1];
      if (v14 == *a1)
        goto LABEL_23;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
LABEL_23:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_28;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v11 - 1) = *((_QWORD *)v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *((_QWORD *)v14 - 2) = 0;
    *((_QWORD *)v14 - 1) = 0;
    *((_QWORD *)v14 - 3) = 0;
    v14 -= 24;
  }
  while (v14 != v13);
  v19 = (char *)*a1;
  v14 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  if (v14 != v19)
  {
    do
    {
      if (*(v14 - 1) < 0)
        operator delete(*((void **)v14 - 3));
      v14 -= 24;
    }
    while (v14 != v19);
    v14 = v19;
  }
LABEL_28:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_2231AF6B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319C040((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2231AF6C8(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, __int128 *a5)
{
  uint64_t *v10;
  void *__p[2];
  uint64_t v13;
  char v14;
  _QWORD v15[3];

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v10 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    *(_OWORD *)__p = *(_OWORD *)a4;
    v13 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    v14 = 1;
    sub_2231AF7D0(a3, (__int128 *)__p, a5, v15);
    sub_2231AA5A4(a1, v10, (uint64_t)v15);
    sub_2241231D8((uint64_t)v15);
    if (v14)
    {
      if (SHIBYTE(v13) < 0)
        operator delete(__p[0]);
    }
  }
  return a1;
}

void sub_2231AF79C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17)
{
  sub_2241231D8((uint64_t)&a17);
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2231AF7D0@<X0>(char *a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t (**v10)();
  char v11[8];
  void *__p;
  void *v13;
  _QWORD v14[2];
  __int128 v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  __int128 v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v10 = &off_24EC77E40;
  v14[0] = sub_224504D68();
  v14[1] = v8;
  LOBYTE(v15) = 0;
  v17 = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v15 = *a2;
    v16 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v17 = 1;
  }
  v18 = 0;
  v19 = 0;
  v20 = *a3;
  v21 = 1;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  sub_22454BE90((uint64_t)v11, 0, *a1);
  sub_2231AA8F0(v11, (uint64_t)v14, a4);
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
  sub_2231AD66C((uint64_t)v14);
  return nullsub_661(&v10);
}

void sub_2231AF8F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_2231AD66C((uint64_t)&a15);
  nullsub_661(&a9);
  _Unwind_Resume(a1);
}

void sub_2231AF92C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_661(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2231AF940(uint64_t a1, uint64_t a2, float *a3, uint64_t a4, __int128 *a5)
{
  uint64_t *v10;
  void *__p[2];
  uint64_t v13;
  char v14;
  _QWORD v15[3];

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v10 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    *(_OWORD *)__p = *(_OWORD *)a4;
    v13 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    v14 = 1;
    sub_2231AFA48(a3, (__int128 *)__p, a5, v15);
    sub_2231AA5A4(a1, v10, (uint64_t)v15);
    sub_2241231D8((uint64_t)v15);
    if (v14)
    {
      if (SHIBYTE(v13) < 0)
        operator delete(__p[0]);
    }
  }
  return a1;
}

void sub_2231AFA14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17)
{
  sub_2241231D8((uint64_t)&a17);
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2231AFA48@<X0>(float *a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t (**v10)();
  char v11[8];
  void *__p;
  void *v13;
  _QWORD v14[2];
  __int128 v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  __int128 v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v10 = &off_24EC77E40;
  v14[0] = sub_224504D68();
  v14[1] = v8;
  LOBYTE(v15) = 0;
  v17 = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v15 = *a2;
    v16 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v17 = 1;
  }
  v18 = 0;
  v19 = 0;
  v20 = *a3;
  v21 = 1;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  sub_22454BFA0((uint64_t)v11, 11, *a1);
  sub_2231AA8F0(v11, (uint64_t)v14, a4);
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
  sub_2231AD66C((uint64_t)v14);
  return nullsub_661(&v10);
}

void sub_2231AFB70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_2231AD66C((uint64_t)&a15);
  nullsub_661(&a9);
  _Unwind_Resume(a1);
}

void sub_2231AFBA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_661(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_2231AFBB8@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t sub_2231AFCEC(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (std::__shared_weak_count *)v2[5];
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_2231AFD68(unsigned __int8 **a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v6;
  char v7;
  uint64_t *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v12;
  BOOL v13;
  uint64_t *v14;

  v2 = (unsigned __int8 *)(a1 + 1);
  v3 = a1[1];
  if (!v3)
    return 0;
  v6 = (unsigned __int8 *)(a1 + 1);
  do
  {
    v7 = sub_22319835C(v3 + 25, a2);
    if (v7 >= 0)
      v8 = (uint64_t *)v3;
    else
      v8 = (uint64_t *)(v3 + 8);
    if (v7 >= 0)
      v6 = v3;
    v3 = (unsigned __int8 *)*v8;
  }
  while (*v8);
  if (v6 == v2 || (sub_22319835C(a2, v6 + 25) & 0x80) != 0)
    return 0;
  v9 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
  if (v9)
  {
    do
    {
      v10 = v9;
      v9 = *(unsigned __int8 **)v9;
    }
    while (v9);
  }
  else
  {
    v12 = v6;
    do
    {
      v10 = (unsigned __int8 *)*((_QWORD *)v12 + 2);
      v13 = *(_QWORD *)v10 == (_QWORD)v12;
      v12 = v10;
    }
    while (!v13);
  }
  if (*a1 == v6)
    *a1 = v10;
  v14 = (uint64_t *)a1[1];
  --a1[2];
  sub_2231AFE60(v14, (uint64_t *)v6);
  operator delete(v6);
  return 1;
}

uint64_t *sub_2231AFE60(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;
  uint64_t **v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_10;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (!v2)
  {
    v5 = 1;
    v6 = (uint64_t **)v3[2];
    v7 = *v6;
    if (*v6 == v3)
      goto LABEL_6;
LABEL_11:
    v6[1] = (uint64_t *)v2;
    v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2)
      goto LABEL_16;
    goto LABEL_12;
  }
LABEL_10:
  v5 = 0;
  *(_QWORD *)(v2 + 16) = v3[2];
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 != v3)
    goto LABEL_11;
LABEL_6:
  *v6 = (uint64_t *)v2;
  if (v3 != result)
  {
    v7 = v6[1];
    v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2)
      goto LABEL_16;
LABEL_12:
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
    goto LABEL_16;
  }
  v7 = 0;
  result = (uint64_t *)v2;
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
    goto LABEL_12;
LABEL_16:
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v14 = (uint64_t **)v7[2];
    if (*v14 == v7)
      break;
    if (*((_BYTE *)v7 + 24))
    {
      v15 = (_QWORD *)*v7;
      if (!*v7)
        goto LABEL_38;
    }
    else
    {
      *((_BYTE *)v7 + 24) = 1;
      *((_BYTE *)v14 + 24) = 0;
      v17 = v14[1];
      v18 = (uint64_t *)*v17;
      v14[1] = (uint64_t *)*v17;
      if (v18)
        v18[2] = (uint64_t)v14;
      v17[2] = (uint64_t)v14[2];
      v14[2][*v14[2] != (_QWORD)v14] = (uint64_t)v17;
      *v17 = (uint64_t)v14;
      v14[2] = v17;
      if (result == (uint64_t *)*v7)
        result = v7;
      v7 = *(uint64_t **)(*v7 + 8);
      v15 = (_QWORD *)*v7;
      if (!*v7)
        goto LABEL_38;
    }
    if (!*((_BYTE *)v15 + 24))
    {
      v19 = (uint64_t *)v7[1];
      if (!v19)
        goto LABEL_64;
LABEL_63:
      if (*((_BYTE *)v19 + 24))
      {
LABEL_64:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v23 = v15[1];
        *v7 = v23;
        if (v23)
          *(_QWORD *)(v23 + 16) = v7;
        v15[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        v19 = v7;
      }
      else
      {
        v15 = v7;
      }
      v27 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v27 + 24);
      *(_BYTE *)(v27 + 24) = 1;
      *((_BYTE *)v19 + 24) = 1;
      v28 = *(uint64_t **)(v27 + 8);
      v29 = *v28;
      *(_QWORD *)(v27 + 8) = *v28;
      if (v29)
        *(_QWORD *)(v29 + 16) = v27;
      v28[2] = *(_QWORD *)(v27 + 16);
      *(_QWORD *)(*(_QWORD *)(v27 + 16) + 8 * (**(_QWORD **)(v27 + 16) != v27)) = v28;
      *v28 = v27;
      *(_QWORD *)(v27 + 16) = v28;
      return result;
    }
LABEL_38:
    v19 = (uint64_t *)v7[1];
    if (v19 && !*((_BYTE *)v19 + 24))
      goto LABEL_63;
    *((_BYTE *)v7 + 24) = 0;
    v12 = (uint64_t *)v7[2];
    if (v12 == result)
    {
      v12 = result;
LABEL_61:
      *((_BYTE *)v12 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v12 + 24))
      goto LABEL_61;
LABEL_24:
    v7 = *(uint64_t **)(v12[2] + 8 * (*(_QWORD *)v12[2] == (_QWORD)v12));
  }
  if (*((_BYTE *)v7 + 24))
  {
    v16 = (_QWORD *)*v7;
    if (!*v7)
      goto LABEL_49;
LABEL_48:
    if (!*((_BYTE *)v16 + 24))
      goto LABEL_67;
  }
  else
  {
    *((_BYTE *)v7 + 24) = 1;
    *((_BYTE *)v14 + 24) = 0;
    v20 = (uint64_t *)v7[1];
    *v14 = v20;
    if (v20)
      v20[2] = (uint64_t)v14;
    v7[2] = (uint64_t)v14[2];
    v14[2][*v14[2] != (_QWORD)v14] = (uint64_t)v7;
    v7[1] = (uint64_t)v14;
    v14[2] = v7;
    if (result == (uint64_t *)v14)
      result = v7;
    v7 = *v14;
    v16 = (_QWORD *)**v14;
    if (v16)
      goto LABEL_48;
  }
LABEL_49:
  v21 = (uint64_t *)v7[1];
  if (!v21 || *((_BYTE *)v21 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    v12 = (uint64_t *)v7[2];
    if (*((_BYTE *)v12 + 24))
      v13 = v12 == result;
    else
      v13 = 1;
    if (v13)
      goto LABEL_61;
    goto LABEL_24;
  }
  if (v16 && !*((_BYTE *)v16 + 24))
  {
LABEL_67:
    v21 = v7;
  }
  else
  {
    *((_BYTE *)v21 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v22 = *v21;
    v7[1] = *v21;
    if (v22)
      *(_QWORD *)(v22 + 16) = v7;
    v21[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v21;
    *v21 = (uint64_t)v7;
    v7[2] = (uint64_t)v21;
    v16 = v7;
  }
  v24 = (uint64_t *)v21[2];
  *((_BYTE *)v21 + 24) = *((_BYTE *)v24 + 24);
  *((_BYTE *)v24 + 24) = 1;
  *((_BYTE *)v16 + 24) = 1;
  v25 = *v24;
  v26 = *(_QWORD *)(*v24 + 8);
  *v24 = v26;
  if (v26)
    *(_QWORD *)(v26 + 16) = v24;
  *(_QWORD *)(v25 + 16) = v24[2];
  *(_QWORD *)(v24[2] + 8 * (*(_QWORD *)v24[2] != (_QWORD)v24)) = v25;
  *(_QWORD *)(v25 + 8) = v24;
  v24[2] = v25;
  return result;
}

uint64_t sub_2231B0224(unsigned __int8 **a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v6;
  char v7;
  uint64_t *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v12;
  BOOL v13;
  uint64_t *v14;

  v2 = (unsigned __int8 *)(a1 + 1);
  v3 = a1[1];
  if (!v3)
    return 0;
  v6 = (unsigned __int8 *)(a1 + 1);
  do
  {
    v7 = sub_22319835C(v3 + 28, a2);
    if (v7 >= 0)
      v8 = (uint64_t *)v3;
    else
      v8 = (uint64_t *)(v3 + 8);
    if (v7 >= 0)
      v6 = v3;
    v3 = (unsigned __int8 *)*v8;
  }
  while (*v8);
  if (v6 == v2 || (sub_22319835C(a2, v6 + 28) & 0x80) != 0)
    return 0;
  v9 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
  if (v9)
  {
    do
    {
      v10 = v9;
      v9 = *(unsigned __int8 **)v9;
    }
    while (v9);
  }
  else
  {
    v12 = v6;
    do
    {
      v10 = (unsigned __int8 *)*((_QWORD *)v12 + 2);
      v13 = *(_QWORD *)v10 == (_QWORD)v12;
      v12 = v10;
    }
    while (!v13);
  }
  if (*a1 == v6)
    *a1 = v10;
  v14 = (uint64_t *)a1[1];
  --a1[2];
  sub_2231AFE60(v14, (uint64_t *)v6);
  operator delete(v6);
  return 1;
}

_QWORD *sub_2231B031C(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD **v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v16;
  _QWORD *v18;
  float v19;
  float v20;
  uint64_t v21;
  _QWORD *v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t prime;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;

  v8 = sub_224566368(a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v10)
        v4 = v8 % v10;
    }
    else
    {
      v4 = (v10 - 1) & v8;
    }
    v12 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v13[1];
            if (v16 == v8)
            {
              if (v13[2] == *a2 && v13[3] == a2[1])
                return v13;
            }
            else if ((v16 & (v10 - 1)) != v4)
            {
              goto LABEL_31;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_31;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v8)
          {
            if (v13[2] == *a2 && v13[3] == a2[1])
              return v13;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v4)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_31:
  v18 = (_QWORD *)(a1 + 16);
  v13 = operator new(0x30uLL);
  *v13 = 0;
  v13[1] = v9;
  *((_OWORD *)v13 + 1) = **a4;
  v13[4] = 0;
  v13[5] = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (v10 && (float)(v20 * (float)v10) >= v19)
  {
    v21 = *(_QWORD *)a1;
    v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v22)
    {
LABEL_34:
      *v13 = *v22;
LABEL_69:
      *v22 = v13;
      goto LABEL_70;
    }
  }
  else
  {
    v23 = 1;
    if (v10 >= 3)
      v23 = (v10 & (v10 - 1)) != 0;
    v24 = v23 | (2 * v10);
    v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25)
      prime = v25;
    else
      prime = v24;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v10)
      goto LABEL_45;
    if (prime < v10)
    {
      v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        v27 = std::__next_prime(v27);
      }
      else
      {
        v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2)
          v27 = v29;
      }
      if (prime <= v27)
        prime = v27;
      if (prime < v10)
LABEL_45:
        sub_2231B0668(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    v30 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        v4 = v9 % v10;
        v21 = *(_QWORD *)a1;
        v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 % v10));
        if (v22)
          goto LABEL_34;
      }
      else
      {
        v4 = v9;
        v21 = *(_QWORD *)a1;
        v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
        if (v22)
          goto LABEL_34;
      }
    }
    else
    {
      v4 = v30 & v9;
      v21 = *(_QWORD *)a1;
      v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v30 & v9));
      if (v22)
        goto LABEL_34;
    }
  }
  *v13 = *v18;
  *v18 = v13;
  *(_QWORD *)(v21 + 8 * v4) = v18;
  if (*v13)
  {
    v31 = *(_QWORD *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v31 >= v10)
        v31 %= v10;
    }
    else
    {
      v31 &= v10 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_69;
  }
LABEL_70:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_2231B0654(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2231AFCEC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231B0668(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;

  if (!a2)
  {
    v15 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v15)
      operator delete(v15);
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  if (a2 >> 61)
    sub_223174E94();
  v4 = operator new(8 * a2);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v6 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
  while (a2 != v6);
  v8 = a1 + 16;
  v7 = *(_QWORD **)(a1 + 16);
  if (v7)
  {
    v9 = v7[1];
    v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      v11 = v9 & v10;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = v8;
      while (1)
      {
        v12 = (_QWORD *)*v7;
        if (!*v7)
          break;
        v13 = v12[1] & v10;
        if (v13 == v11)
        {
          v7 = (_QWORD *)*v7;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
        {
          *v7 = *v12;
          v14 = 8 * v13;
          *v12 = **(_QWORD **)(*(_QWORD *)a1 + v14);
          **(_QWORD **)(*(_QWORD *)a1 + v14) = v12;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
          v7 = v12;
          v11 = v13;
        }
      }
      return;
    }
    if (v9 >= a2)
      v9 %= a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = v8;
    v16 = (_QWORD *)*v7;
    if (*v7)
    {
      while (1)
      {
        v18 = v16[1];
        if (v18 >= a2)
          v18 %= a2;
        if (v18 == v9)
          goto LABEL_25;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v18))
        {
          *v7 = *v16;
          v17 = 8 * v18;
          *v16 = **(_QWORD **)(*(_QWORD *)a1 + v17);
          **(_QWORD **)(*(_QWORD *)a1 + v17) = v16;
          v16 = v7;
LABEL_25:
          v7 = v16;
          v16 = (_QWORD *)*v16;
          if (!v16)
            return;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v7;
          v7 = v16;
          v16 = (_QWORD *)*v16;
          v9 = v18;
          if (!v16)
            return;
        }
      }
    }
  }
}

uint64_t sub_2231B0814(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, os_log_type_t a5, uint64_t a6, uint64_t *a7, float *a8, float *a9)
{
  NSObject *v14;
  NSObject *v15;
  size_t v16;
  std::__shared_weak_count_vtbl *v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  double v45;
  double v46;
  void *v47;
  NSObject *v49;
  uint64_t v50;
  _BYTE v51[24];
  __int128 v52;
  uint64_t v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v14 = a4;
  v15 = v14;
  if (a2 && *(_QWORD *)(a2 + 8))
  {
    v49 = v14;
    v16 = _os_log_pack_size();
    v17 = (std::__shared_weak_count_vtbl *)operator new(v16, (std::align_val_t)8uLL);
    v18 = (std::__shared_weak_count *)operator new();
    v19 = v18;
    v18->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    v18->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v18->__shared_weak_owners_ = 0;
    v18[1].__vftable = v17;
    *(_QWORD *)v51 = v17;
    *(_QWORD *)&v51[8] = v17;
    *(_QWORD *)&v51[16] = v18;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
    v52 = 0uLL;
    v53 = 0;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v19);
    }
    v23 = *(_QWORD *)v51;
    v24 = _os_log_pack_fill();
    v25 = *a7;
    v26 = *a8;
    v27 = *a9;
    *(_DWORD *)v24 = 134218496;
    *(_QWORD *)(v24 + 4) = v25;
    *(_WORD *)(v24 + 12) = 2048;
    *(double *)(v24 + 14) = v26;
    *(_WORD *)(v24 + 22) = 2048;
    *(double *)(v24 + 24) = v27;
    v28 = operator new();
    v29 = *((unsigned __int8 *)a3 + 23);
    if ((v29 & 0x80u) == 0)
      v30 = a3;
    else
      v30 = (uint64_t *)*a3;
    if ((v29 & 0x80u) != 0)
      v29 = a3[1];
    *(_QWORD *)v28 = v23;
    *(_OWORD *)(v28 + 8) = *(_OWORD *)&v51[8];
    *(_OWORD *)&v51[8] = 0uLL;
    *(_OWORD *)(v28 + 24) = v52;
    v52 = 0uLL;
    *(_QWORD *)(v28 + 40) = v30;
    *(_QWORD *)(v28 + 48) = v29;
    *(_BYTE *)(v28 + 56) = a5;
    v50 = v28;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), &v50);
    v31 = v50;
    v50 = 0;
    v15 = v49;
    if (v31)
    {
      v32 = *(std::__shared_weak_count **)(v31 + 32);
      if (v32)
      {
        v33 = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      v35 = *(std::__shared_weak_count **)(v31 + 16);
      if (v35)
      {
        v36 = (unint64_t *)&v35->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      MEMORY[0x227684CE8](v31, 0x10F0C40B62ED6C6);
    }
    v38 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
    if (*((_QWORD *)&v52 + 1))
    {
      v39 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v41 = *(std::__shared_weak_count **)&v51[16];
    if (*(_QWORD *)&v51[16])
    {
      v42 = (unint64_t *)(*(_QWORD *)&v51[16] + 8);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
  }
  else
  {
    os_log_type_enabled(v14, a5);
    v44 = *a7;
    v45 = *a8;
    v46 = *a9;
    *(_DWORD *)v51 = 134218496;
    *(_QWORD *)&v51[4] = v44;
    *(_WORD *)&v51[12] = 2048;
    *(double *)&v51[14] = v45;
    *(_WORD *)&v51[22] = 2048;
    *(double *)&v52 = v46;
    v47 = (void *)_os_log_send_and_compose_impl();
    if (v47)
      free(v47);
  }

  return 0;
}

void sub_2231B0C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va1);
  sub_22319A054((uint64_t *)va);
  sub_223199DE8((uint64_t)va2);

  _Unwind_Resume(a1);
}

uint64_t sub_2231B0CC8(char *__s, unsigned __int8 *a2)
{
  uint64_t result;
  _DWORD v4[6];
  int v5;
  char v6;
  char *v7;

  v5 = 0;
  sub_2231A0C08(v4, __s);
  sub_22319B83C((uint64_t)&v7, (uint64_t)v4, a2);
  if (v5 == -1)
    sub_22316DD70();
  v7 = &v6;
  result = ((uint64_t (*)(char **, _DWORD *))off_24EC1F9D0[v5])(&v7, v4);
  if (v5 != -1)
    return ((uint64_t (*)(char **, _DWORD *))off_24EC1F9B8[v5])(&v7, v4);
  return result;
}

void sub_2231B0D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2231B0D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2231B0D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2231B0DB0(uint64_t a1)
{
  _QWORD v3[2];

  v3[0] = 0;
  v3[1] = 0;
  sub_22415BBE0(a1 + 8, (uint64_t)v3);
  sub_2241589E8((_QWORD *)(a1 + 24));
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(int32x2_t *)(a1 + 68) = vdup_n_s32(0xC77FE000);
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 76) = -947920896;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  sub_22416BC94(a1 + 136);
  sub_22416BC94(a1 + 240);
  sub_22416BC94(a1 + 344);
  sub_22416BC94(a1 + 448);
  sub_22416BC94(a1 + 552);
  sub_22416BC94(a1 + 656);
  *(_BYTE *)(a1 + 760) = 0;
  *(_BYTE *)(a1 + 1288) = 0;
  *(_BYTE *)(a1 + 1296) = 0;
  *(_BYTE *)(a1 + 1300) = 0;
  sub_2245187B0((_OWORD *)(a1 + 1304));
  *(_BYTE *)(a1 + 1320) = 0;
  *(_BYTE *)(a1 + 1356) = 0;
  return a1;
}

void sub_2231B0EB0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  unsigned int *v4;
  unsigned int *v5;
  void **v6;
  void *v8;

  if (*(_BYTE *)(v1 + 1288))
    sub_22319AB9C(v5);
  sub_22319A650(v4);
  v8 = *v6;
  if (*v6)
  {
    *(_QWORD *)(v1 + 120) = v8;
    operator delete(v8);
  }
  sub_22319A750(v3);
  sub_22365B530(v2);
  _Unwind_Resume(a1);
}

void sub_2231B0EFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  while (1)
  {
    v11 = *(unsigned int *)(v10 - 8);
    if ((_DWORD)v11 != -1)
      ((void (*)(uint64_t *, uint64_t))off_24EC1F928[v11])(&a9, v10 - 72);
    *(_DWORD *)(v10 - 8) = -1;
    v10 -= 104;
    if (v10 == v9)
      JUMPOUT(0x2231B0ED4);
  }
}

_DWORD *sub_2231B0F48(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24EC1F9B8[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_2231B1038(_QWORD *a1)
{
  sub_2245557DC(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231B105C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 16))(a1 + 16);
}

uint64_t sub_2231B1068(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
}

void sub_2231B10B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_224554CD4(a1, v3);
}

void sub_2231B10D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_224554904(a1, v3);
}

void sub_2231B10F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_2245549DC(a1, v3);
}

void sub_2231B111C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_224554A74(a1, v3);
}

void sub_2231B1140(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_224554B0C(a1, v3);
}

void sub_2231B1164(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_224554BA4(a1, v3);
}

void sub_2231B1188(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_224554994(a1, v3);
}

void sub_2231B11AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_22455494C(a1, v3);
}

void sub_2231B11D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_224554A28(a1, v3);
}

void sub_2231B11F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_224554AC0(a1, v3);
}

void sub_2231B1218(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_224554B58(a1, v3);
}

void sub_2231B123C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_224554BF0(a1, v3);
}

void sub_2231B1260(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_224554C3C(a1, v3);
}

void sub_2231B1284(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_224554C88(a1, v3);
}

void sub_2231B12A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_224554D1C(a1, v3);
}

_QWORD *sub_2231B12D8(uint64_t a1)
{
  return sub_2245557DC((_QWORD *)(a1 - 16));
}

void sub_2231B12E0(uint64_t a1)
{
  sub_2245557DC((_QWORD *)(a1 - 16));
  JUMPOUT(0x227684CE8);
}

void sub_2231B1308(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  uint64_t v16;

  v16 = 0;
  sub_2245543E0((uint64_t)(a1 - 2), &v16);
  v2 = (*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
  v3 = v2;
  v4 = v16;
  v6 = (uint64_t *)a1[2];
  v5 = a1[3];
  if ((unint64_t)v6 < v5)
  {
    *v6 = v2;
    v6[1] = v4;
    v7 = (uint64_t)(v6 + 2);
    goto LABEL_18;
  }
  v8 = (uint64_t *)a1[1];
  v9 = ((char *)v6 - (char *)v8) >> 4;
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 60)
    sub_22316E078();
  v11 = v5 - (_QWORD)v8;
  if (v11 >> 3 > v10)
    v10 = v11 >> 3;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
    v12 = 0xFFFFFFFFFFFFFFFLL;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 >> 60)
      sub_223174E94();
    v13 = (char *)operator new(16 * v12);
    v14 = (uint64_t *)&v13[16 * v9];
    v15 = &v13[16 * v12];
    *v14 = v3;
    v14[1] = v4;
    v7 = (uint64_t)(v14 + 2);
    if (v6 == v8)
      goto LABEL_16;
    goto LABEL_14;
  }
  v14 = (uint64_t *)(16 * v9);
  v15 = 0;
  *v14 = v2;
  v14[1] = v4;
  v7 = 16 * v9 + 16;
  if (v6 != v8)
  {
    do
    {
LABEL_14:
      *((_OWORD *)v14 - 1) = *((_OWORD *)v6 - 1);
      v14 -= 2;
      v6 -= 2;
    }
    while (v6 != v8);
    v6 = (uint64_t *)a1[1];
  }
LABEL_16:
  a1[1] = v14;
  a1[2] = v7;
  a1[3] = v15;
  if (v6)
    operator delete(v6);
LABEL_18:
  a1[2] = v7;
}

uint64_t sub_2231B1450(_QWORD *a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = a1[2];
  result = (*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
  v4 = *(_QWORD *)(v2 - 16) - result + *(_QWORD *)(v2 - 8);
  if (v4)
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 40))(a1, v4);
  a1[2] -= 16;
  return result;
}

void sub_2231B14A8(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  _WORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t (**v112)();
  uint64_t v113;
  std::__shared_weak_count *v114;
  uint64_t (**v115)();
  uint64_t v116;
  std::__shared_weak_count *v117;
  _BYTE v118[32];
  _BYTE v119[32];
  _DWORD v120[6];
  unsigned int v121;
  int v122;
  int v123;
  int v124;
  _BYTE v125[28];
  _BYTE v126[64];
  int v127;
  void *__p;
  void *v129;
  std::__shared_weak_count *v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  uint64_t (**v134)();
  uint64_t v135;
  std::__shared_weak_count *v136;
  _DWORD v137[6];
  uint64_t (**v138)();
  uint64_t v139;
  std::__shared_weak_count *v140;
  _BYTE v141[32];
  _DWORD v142[6];
  uint64_t (**v143)();
  _WORD v144[12];
  _QWORD v145[5];
  int v146;
  int v147;
  unsigned int v148;
  uint64_t (**v149)();
  _WORD v150[12];
  _QWORD v151[5];
  int v152;
  int v153;
  int v154;
  _QWORD v155[2];

  sub_2231B2E50((uint64_t)&__p, (uint64_t)a1, a2 + 8);
  LODWORD(__p) = 2;
  sub_224554030((uint64_t)a1, &__p);
  sub_2231B2FE4((uint64_t)&__p, (uint64_t)a1, a2 + 24, __p);
  LODWORD(__p) = 1;
  sub_224554030((uint64_t)a1, &__p);
  sub_224554030((uint64_t)a1, (_DWORD *)(a2 + 64));
  sub_2245544C4((uint64_t)a1, (float *)(a2 + 68));
  sub_2245544C4((uint64_t)a1, (float *)(a2 + 72));
  sub_2245544C4((uint64_t)a1, (float *)(a2 + 76));
  if (a3 > 9)
  {
    LODWORD(__p) = 2;
    sub_224554030((uint64_t)a1, &__p);
    if (__p <= 1)
    {
      sub_2231B31EC(a1, a2 + 136, __p);
    }
    else
    {
      sub_2231B1308(a1 + 2);
      sub_2231B31EC(a1, a2 + 136, 2u);
      v8 = a1[4];
      v9 = *(_QWORD *)(v8 - 16) - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2) + *(_QWORD *)(v8 - 8);
      if (v9)
        (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v9);
      a1[4] -= 16;
    }
    LODWORD(__p) = 2;
    sub_224554030((uint64_t)a1, &__p);
    if (__p <= 1)
    {
      sub_2231B31EC(a1, a2 + 240, __p);
    }
    else
    {
      sub_2231B1308(a1 + 2);
      sub_2231B31EC(a1, a2 + 240, 2u);
      v10 = a1[4];
      v11 = *(_QWORD *)(v10 - 16) - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2) + *(_QWORD *)(v10 - 8);
      if (v11)
        (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v11);
      a1[4] -= 16;
    }
    goto LABEL_75;
  }
  sub_22416BC94((uint64_t)&__p);
  *(_DWORD *)v125 = 2;
  sub_224554030((uint64_t)a1, v125);
  if (*(_DWORD *)v125 <= 1u)
  {
    sub_2231B31EC(a1, (uint64_t)&__p, *(unsigned int *)v125);
  }
  else
  {
    sub_2231B1308(a1 + 2);
    sub_2231B31EC(a1, (uint64_t)&__p, 2u);
    v6 = a1[4];
    v7 = *(_QWORD *)(v6 - 16) - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2) + *(_QWORD *)(v6 - 8);
    if (v7)
      (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v7);
    a1[4] -= 16;
  }
  if (a3 <= 8)
    sub_223C9D200((uint64_t)&__p, a3);
  sub_22416C304((uint64_t)&__p, (uint64_t)v125);
  *(_QWORD *)v119 = &off_24EC1FD28;
  sub_2231A0534((uint64_t)v125, (uint64_t)&v119[8]);
  nullsub_30(&v125[24]);
  v12 = *(std::__shared_weak_count **)&v125[16];
  if (*(_QWORD *)&v125[16])
  {
    v13 = (unint64_t *)(*(_QWORD *)&v125[16] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  nullsub_30(v125);
  v149 = &off_24EC1FE80;
  sub_2231A2D70(&v121, v150);
  v143 = &off_24EC1FE80;
  sub_2231A2D70(&v121, v144);
  v15 = v122;
  if (v122 && v121)
  {
    v16 = 0;
    do
    {
      v17 = v121;
      if (v121)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        v21 = v120[4];
        v22 = *(_QWORD *)&v119[24] + 2 * (v123 * v16);
        v23 = v152;
        v24 = v151[0] + 2 * (v153 * v16);
        v25 = v146;
        v26 = v145[0] + 2 * (v147 * v16);
        do
        {
          v27 = (_WORD *)(v22 + 2 * v20);
          *(_WORD *)(v24 + 2 * v18) = *v27;
          *(_WORD *)(v26 + 2 * v19) = v27[1];
          v20 += v21;
          v19 += v25;
          v18 += v23;
          --v17;
        }
        while (v17);
      }
      ++v16;
    }
    while (v16 != v15);
  }
  v134 = &off_24EC200A8;
  sub_2231A3AA0((uint64_t)&v149, &v135);
  v138 = &off_24EC1F8C8;
  sub_2231A3E2C((uint64_t)&v134, (uint64_t)&v139);
  sub_22416C2FC((uint64_t)v125, (uint64_t)&v138, 0x10001u, v28, v29, v30, v31, v32);
  *(_OWORD *)(a2 + 136) = *(_OWORD *)v125;
  *(_OWORD *)(a2 + 148) = *(_OWORD *)&v125[12];
  v33 = *(unsigned int *)(a2 + 232);
  if ((_DWORD)v33 == -1)
  {
    if (v127 == -1)
      goto LABEL_39;
  }
  else if (v127 == -1)
  {
    ((void (*)(uint64_t (***)(), uint64_t))off_24EC1F928[v33])(&v112, a2 + 168);
    *(_DWORD *)(a2 + 232) = -1;
    goto LABEL_37;
  }
  v112 = (uint64_t (**)())(a2 + 168);
  ((void (*)(uint64_t (***)()))off_24EC1F938[v127])(&v112);
LABEL_37:
  if (v127 != -1)
    ((void (*)(uint64_t (***)(), _BYTE *))off_24EC1F928[v127])(&v112, v126);
LABEL_39:
  v127 = -1;
  nullsub_30(v141);
  v34 = v140;
  if (v140)
  {
    p_shared_owners = (unint64_t *)&v140->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  nullsub_30(&v138);
  v37 = v136;
  if (v136)
  {
    v38 = (unint64_t *)&v136->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  nullsub_30(&v134);
  v134 = &off_24EC200A8;
  sub_2231A3AA0((uint64_t)&v143, &v135);
  v138 = &off_24EC1F8C8;
  sub_2231A3E2C((uint64_t)&v134, (uint64_t)&v139);
  if (a3 >= 5)
    v45 = 65542;
  else
    v45 = 65537;
  sub_22416C2FC((uint64_t)v125, (uint64_t)&v138, v45, v40, v41, v42, v43, v44);
  *(_OWORD *)(a2 + 240) = *(_OWORD *)v125;
  *(_OWORD *)(a2 + 252) = *(_OWORD *)&v125[12];
  v46 = *(unsigned int *)(a2 + 336);
  if ((_DWORD)v46 != -1)
  {
    if (v127 == -1)
    {
      ((void (*)(uint64_t (***)(), uint64_t))off_24EC1F928[v46])(&v112, a2 + 272);
      *(_DWORD *)(a2 + 336) = -1;
      goto LABEL_57;
    }
LABEL_56:
    v112 = (uint64_t (**)())(a2 + 272);
    ((void (*)(uint64_t (***)()))off_24EC1F938[v127])(&v112);
LABEL_57:
    if (v127 != -1)
      ((void (*)(uint64_t (***)(), _BYTE *))off_24EC1F928[v127])(&v112, v126);
    goto LABEL_59;
  }
  if (v127 != -1)
    goto LABEL_56;
LABEL_59:
  v127 = -1;
  nullsub_30(v141);
  v47 = v140;
  if (v140)
  {
    v48 = (unint64_t *)&v140->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  nullsub_30(&v138);
  v50 = v136;
  if (v136)
  {
    v51 = (unint64_t *)&v136->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  nullsub_30(&v134);
  sub_223167354((uint64_t)v144);
  nullsub_30(&v143);
  sub_223167354((uint64_t)v150);
  nullsub_30(&v149);
  v53 = *(std::__shared_weak_count **)&v119[16];
  if (!*(_QWORD *)&v119[16])
    goto LABEL_73;
  v54 = (unint64_t *)(*(_QWORD *)&v119[16] + 8);
  do
    v55 = __ldaxr(v54);
  while (__stlxr(v55 - 1, v54));
  if (v55)
  {
LABEL_73:
    nullsub_30(v119);
    v56 = v133;
    if (v133 == -1)
      goto LABEL_75;
    goto LABEL_74;
  }
  ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
  std::__shared_weak_count::__release_weak(v53);
  nullsub_30(v119);
  v56 = v133;
  if (v133 != -1)
LABEL_74:
    ((void (*)(_BYTE *, uint64_t *))off_24EC1F928[v56])(v125, &v132);
LABEL_75:
  LODWORD(__p) = 2;
  sub_224554030((uint64_t)a1, &__p);
  if (__p <= 1)
  {
    sub_2231B31EC(a1, a2 + 344, __p);
    if (a3 < 0xB)
      goto LABEL_79;
  }
  else
  {
    sub_2231B1308(a1 + 2);
    sub_2231B31EC(a1, a2 + 344, 2u);
    v57 = a1[4];
    v58 = *(_QWORD *)(v57 - 16) - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2) + *(_QWORD *)(v57 - 8);
    if (v58)
      (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v58);
    a1[4] -= 16;
    if (a3 < 0xB)
    {
LABEL_79:
      sub_22416BC94((uint64_t)&v149);
      sub_22416BC94((uint64_t)&v143);
      LODWORD(__p) = 2;
      sub_224554030((uint64_t)a1, &__p);
      if (__p <= 1)
      {
        sub_2231B31EC(a1, (uint64_t)&v149, __p);
      }
      else
      {
        sub_2231B1308(a1 + 2);
        sub_2231B31EC(a1, (uint64_t)&v149, 2u);
        v59 = a1[4];
        v60 = *(_QWORD *)(v59 - 16)
            - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2)
            + *(_QWORD *)(v59 - 8);
        if (v60)
          (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v60);
        a1[4] -= 16;
      }
      LODWORD(__p) = 2;
      sub_224554030((uint64_t)a1, &__p);
      if (__p <= 1)
      {
        sub_2231B31EC(a1, (uint64_t)&v143, __p);
      }
      else
      {
        sub_2231B1308(a1 + 2);
        sub_2231B31EC(a1, (uint64_t)&v143, 2u);
        v65 = a1[4];
        v66 = *(_QWORD *)(v65 - 16)
            - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2)
            + *(_QWORD *)(v65 - 8);
        if (v66)
          (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v66);
        a1[4] -= 16;
      }
      sub_22416C304((uint64_t)&v149, (uint64_t)&__p);
      v138 = &off_24EC201A0;
      sub_2231A40A4((uint64_t)&__p, (uint64_t)&v139);
      nullsub_30(&v131);
      v67 = v130;
      if (v130)
      {
        v68 = (unint64_t *)&v130->__shared_owners_;
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      nullsub_30(&__p);
      sub_22416C304((uint64_t)&v143, (uint64_t)&__p);
      v134 = &off_24EC201A0;
      sub_2231A40A4((uint64_t)&__p, (uint64_t)&v135);
      nullsub_30(&v131);
      v70 = v130;
      if (v130)
      {
        v71 = (unint64_t *)&v130->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      nullsub_30(&__p);
      __p = &off_24EC20298;
      sub_2231A47D4(v142, &v129);
      *(_QWORD *)v125 = &off_24EC20298;
      sub_2231A47D4(v137, &v125[8]);
      sub_2231B28D4((uint64_t)&v138, (uint64_t)&__p, (uint64_t)v119, v73, v74, v75);
      sub_2231B2B28((uint64_t)&v134, (uint64_t)v125, (uint64_t)v119, v76, v77, v78);
      v112 = &off_24EC204C0;
      sub_2231A5634((uint64_t)&__p, &v113);
      v115 = &off_24EC1F8C8;
      sub_2231A59C0((uint64_t)&v112, (uint64_t)&v116);
      sub_22416C2FC((uint64_t)v119, (uint64_t)&v115, 0x10001u, v79, v80, v81, v82, v83);
      *(_OWORD *)(a2 + 448) = *(_OWORD *)v119;
      *(_OWORD *)(a2 + 460) = *(_OWORD *)&v119[12];
      v84 = *(unsigned int *)(a2 + 544);
      if ((_DWORD)v84 == -1)
      {
        if (v124 == -1)
          goto LABEL_117;
      }
      else if (v124 == -1)
      {
        ((void (*)(_QWORD *, uint64_t))off_24EC1F928[v84])(v155, a2 + 480);
        *(_DWORD *)(a2 + 544) = -1;
        goto LABEL_115;
      }
      v155[0] = a2 + 480;
      ((void (*)(_QWORD *))off_24EC1F938[v124])(v155);
LABEL_115:
      if (v124 != -1)
        ((void (*)(_QWORD *, _DWORD *))off_24EC1F928[v124])(v155, v120);
LABEL_117:
      v124 = -1;
      nullsub_30(v118);
      v85 = v117;
      if (v117)
      {
        v86 = (unint64_t *)&v117->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
      nullsub_30(&v115);
      v88 = v114;
      if (v114)
      {
        v89 = (unint64_t *)&v114->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      nullsub_30(&v112);
      v112 = &off_24EC204C0;
      sub_2231A5634((uint64_t)v125, &v113);
      v115 = &off_24EC1F8C8;
      sub_2231A59C0((uint64_t)&v112, (uint64_t)&v116);
      sub_22416C2FC((uint64_t)v119, (uint64_t)&v115, 0x10001u, v91, v92, v93, v94, v95);
      *(_OWORD *)(a2 + 552) = *(_OWORD *)v119;
      *(_OWORD *)(a2 + 564) = *(_OWORD *)&v119[12];
      v96 = *(unsigned int *)(a2 + 648);
      if ((_DWORD)v96 == -1)
      {
        if (v124 == -1)
          goto LABEL_134;
      }
      else if (v124 == -1)
      {
        ((void (*)(_QWORD *, uint64_t))off_24EC1F928[v96])(v155, a2 + 584);
        *(_DWORD *)(a2 + 648) = -1;
        goto LABEL_132;
      }
      v155[0] = a2 + 584;
      ((void (*)(_QWORD *))off_24EC1F938[v124])(v155);
LABEL_132:
      if (v124 != -1)
        ((void (*)(_QWORD *, _DWORD *))off_24EC1F928[v124])(v155, v120);
LABEL_134:
      v124 = -1;
      nullsub_30(v118);
      v97 = v117;
      if (v117)
      {
        v98 = (unint64_t *)&v117->__shared_owners_;
        do
          v99 = __ldaxr(v98);
        while (__stlxr(v99 - 1, v98));
        if (!v99)
        {
          ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
          std::__shared_weak_count::__release_weak(v97);
        }
      }
      nullsub_30(&v115);
      v100 = v114;
      if (v114)
      {
        v101 = (unint64_t *)&v114->__shared_owners_;
        do
          v102 = __ldaxr(v101);
        while (__stlxr(v102 - 1, v101));
        if (!v102)
        {
          ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
          std::__shared_weak_count::__release_weak(v100);
        }
      }
      nullsub_30(&v112);
      sub_223167354((uint64_t)&v125[8]);
      nullsub_30(v125);
      sub_223167354((uint64_t)&v129);
      nullsub_30(&__p);
      v103 = v136;
      if (!v136)
        goto LABEL_148;
      v104 = (unint64_t *)&v136->__shared_owners_;
      do
        v105 = __ldaxr(v104);
      while (__stlxr(v105 - 1, v104));
      if (!v105)
      {
        ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
        std::__shared_weak_count::__release_weak(v103);
        nullsub_30(&v134);
        v106 = v140;
        if (!v140)
          goto LABEL_152;
      }
      else
      {
LABEL_148:
        nullsub_30(&v134);
        v106 = v140;
        if (!v140)
          goto LABEL_152;
      }
      v107 = (unint64_t *)&v106->__shared_owners_;
      do
        v108 = __ldaxr(v107);
      while (__stlxr(v108 - 1, v107));
      if (!v108)
      {
        ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
        std::__shared_weak_count::__release_weak(v106);
        nullsub_30(&v138);
        v109 = v148;
        if (v148 == -1)
        {
LABEL_154:
          if (v154 != -1)
            ((void (*)(void **, _QWORD *))off_24EC1F928[v154])(&__p, v151);
          goto LABEL_156;
        }
LABEL_153:
        ((void (*)(void **, _QWORD *))off_24EC1F928[v109])(&__p, v145);
        goto LABEL_154;
      }
LABEL_152:
      nullsub_30(&v138);
      v109 = v148;
      if (v148 == -1)
        goto LABEL_154;
      goto LABEL_153;
    }
  }
  LODWORD(__p) = 2;
  sub_224554030((uint64_t)a1, &__p);
  if (__p <= 1)
  {
    sub_2231B31EC(a1, a2 + 448, __p);
  }
  else
  {
    sub_2231B1308(a1 + 2);
    sub_2231B31EC(a1, a2 + 448, 2u);
    v61 = a1[4];
    v62 = *(_QWORD *)(v61 - 16) - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2) + *(_QWORD *)(v61 - 8);
    if (v62)
      (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v62);
    a1[4] -= 16;
  }
  LODWORD(__p) = 2;
  sub_224554030((uint64_t)a1, &__p);
  if (__p <= 1)
  {
    sub_2231B31EC(a1, a2 + 552, __p);
  }
  else
  {
    sub_2231B1308(a1 + 2);
    sub_2231B31EC(a1, a2 + 552, 2u);
    v63 = a1[4];
    v64 = *(_QWORD *)(v63 - 16) - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2) + *(_QWORD *)(v63 - 8);
    if (v64)
      (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v64);
    a1[4] -= 16;
  }
LABEL_156:
  LODWORD(__p) = 2;
  sub_224554030((uint64_t)a1, &__p);
  sub_2231B5960((uint64_t)a1, (uint64_t *)(a2 + 80));
  LODWORD(__p) = 1;
  sub_224554030((uint64_t)a1, &__p);
  __p = (void *)2;
  v129 = (void *)(a2 + 104);
  sub_224554AC0((uint64_t)a1, &__p);
  sub_2231B6664((uint64_t)a1, (void **)(a2 + 112));
  if (a3 - 2 <= 5)
  {
    __p = 0;
    v129 = 0;
    v130 = 0;
    *(_DWORD *)v125 = 1;
    sub_224554030((uint64_t)a1, v125);
    sub_2231B6844((uint64_t)a1, (char **)&__p);
    if (__p)
    {
      v129 = __p;
      operator delete(__p);
    }
  }
  if (a3 >= 3)
  {
    LODWORD(__p) = 2;
    sub_224554030((uint64_t)a1, &__p);
    if (__p <= 1)
    {
      sub_2231B31EC(a1, a2 + 656, __p);
      if (a3 < 4)
        return;
    }
    else
    {
      sub_2231B1308(a1 + 2);
      sub_2231B31EC(a1, a2 + 656, 2u);
      v110 = a1[4];
      v111 = *(_QWORD *)(v110 - 16)
           - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2)
           + *(_QWORD *)(v110 - 8);
      if (v111)
        (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v111);
      a1[4] -= 16;
      if (a3 < 4)
        return;
    }
    v125[0] = 0;
    sub_224553CE8((uint64_t)a1, v125);
    if (v125[0])
    {
      if (!*(_BYTE *)(a2 + 1288))
      {
        bzero((void *)(a2 + 760), 0x210uLL);
        sub_2231B6AB4(a2 + 760);
        *(_BYTE *)(a2 + 1288) = 1;
      }
      LODWORD(__p) = 3;
      sub_224554030((uint64_t)a1, &__p);
      sub_2231B6B6C(a1, a2 + 760, __p);
    }
    else if (*(_BYTE *)(a2 + 1288))
    {
      sub_22319AB9C((unsigned int *)(a2 + 760));
      *(_BYTE *)(a2 + 1288) = 0;
    }
    if (a3 >= 6)
    {
      LOBYTE(__p) = 0;
      sub_224553CE8((uint64_t)a1, &__p);
      if ((_BYTE)__p)
      {
        if (!*(_BYTE *)(a2 + 1300))
        {
          *(_DWORD *)(a2 + 1296) = 0;
          *(_BYTE *)(a2 + 1300) = 1;
        }
        sub_2245544C4((uint64_t)a1, (float *)(a2 + 1296));
      }
      else if (*(_BYTE *)(a2 + 1300))
      {
        *(_BYTE *)(a2 + 1300) = 0;
      }
      if (a3 >= 7)
      {
        sub_2231B2D7C((uint64_t)a1, a2 + 1304);
        if (a3 >= 9)
        {
          v125[0] = 0;
          sub_224553CE8((uint64_t)a1, v125);
          if (v125[0])
          {
            if (!*(_BYTE *)(a2 + 1356))
            {
              *(_DWORD *)(a2 + 1352) = 0;
              *(_OWORD *)(a2 + 1320) = 0u;
              *(_OWORD *)(a2 + 1336) = 0u;
              *(_BYTE *)(a2 + 1356) = 1;
            }
            __p = (void *)9;
            v129 = (void *)(a2 + 1320);
            sub_224554C3C((uint64_t)a1, &__p);
          }
          else if (*(_BYTE *)(a2 + 1356))
          {
            *(_BYTE *)(a2 + 1356) = 0;
          }
        }
      }
    }
  }
}

void sub_2231B26F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p)
{
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  sub_22319A588((uint64_t)&a26);
  sub_22319A5E0((uint64_t)&a19);
  sub_22319F500((uint64_t)&a9);
  sub_223167354(v57);
  nullsub_30(&a39);
  sub_223167354(v56);
  nullsub_30(&__p);
  sub_22319F590((uint64_t)&STACK[0x200]);
  sub_22319F590((uint64_t)&STACK[0x250]);
  sub_22319A588((uint64_t)&STACK[0x2A0]);
  sub_22319A588(v58 - 200);
  _Unwind_Resume(a1);
}

uint64_t sub_2231B28D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;

  v9 = *(_QWORD *)(a1 + 8);
  if (!v9)
    goto LABEL_18;
  v10 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v10)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (v13)
  {
    v9 = *(_QWORD *)(a1 + 8);
    v14 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v14)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    v9 = *(_QWORD *)(a1 + 8);
    v14 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v14)
      goto LABEL_14;
  }
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
    goto LABEL_18;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if (*(_BYTE *)(a1 + 73))
  {
LABEL_15:
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v9 + 96))(&v26, v9, 0);
    v19 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_23;
    goto LABEL_19;
  }
LABEL_18:
  v26 = 0;
  v19 = *(_QWORD *)(a2 + 8);
  v18 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v18)
    goto LABEL_23;
LABEL_19:
  v20 = (unint64_t *)&v18->__shared_owners_;
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
  do
    v22 = __ldaxr(v20);
  while (__stlxr(v22 - 1, v20));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (!v19)
      goto LABEL_28;
    goto LABEL_24;
  }
LABEL_23:
  if (!v19)
    goto LABEL_28;
LABEL_24:
  if (*(_BYTE *)(a2 + 129))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 96))(&v25, *(_QWORD *)(a2 + 8), 1);
    if (!*(_DWORD *)(a1 + 32))
      goto LABEL_32;
    goto LABEL_29;
  }
LABEL_28:
  v25 = 0;
  if (!*(_DWORD *)(a1 + 32))
    goto LABEL_32;
LABEL_29:
  if (*(_DWORD *)(a1 + 36) && *(_DWORD *)(a1 + 40))
    sub_2231A52FC(a3, a1, a2, a4, a5, a6);
LABEL_32:
  v23 = v25;
  v25 = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  result = v26;
  v26 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_2231B2AC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2231B2B28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;

  v9 = *(_QWORD *)(a1 + 8);
  if (!v9)
    goto LABEL_18;
  v10 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v10)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (v13)
  {
    v9 = *(_QWORD *)(a1 + 8);
    v14 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v14)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    v9 = *(_QWORD *)(a1 + 8);
    v14 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v14)
      goto LABEL_14;
  }
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
    goto LABEL_18;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if (*(_BYTE *)(a1 + 73))
  {
LABEL_15:
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v9 + 96))(&v26, v9, 0);
    v19 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_23;
    goto LABEL_19;
  }
LABEL_18:
  v26 = 0;
  v19 = *(_QWORD *)(a2 + 8);
  v18 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v18)
    goto LABEL_23;
LABEL_19:
  v20 = (unint64_t *)&v18->__shared_owners_;
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
  do
    v22 = __ldaxr(v20);
  while (__stlxr(v22 - 1, v20));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (!v19)
      goto LABEL_28;
    goto LABEL_24;
  }
LABEL_23:
  if (!v19)
    goto LABEL_28;
LABEL_24:
  if (*(_BYTE *)(a2 + 129))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 96))(&v25, *(_QWORD *)(a2 + 8), 1);
    if (!*(_DWORD *)(a1 + 32))
      goto LABEL_32;
    goto LABEL_29;
  }
LABEL_28:
  v25 = 0;
  if (!*(_DWORD *)(a1 + 32))
    goto LABEL_32;
LABEL_29:
  if (*(_DWORD *)(a1 + 36) && *(_DWORD *)(a1 + 40))
    sub_2231A52FC(a3, a1, a2, a4, a5, a6);
LABEL_32:
  v23 = v25;
  v25 = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  result = v26;
  v26 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_2231B2D18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2231B2D7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  char v8;

  v7 = 2;
  sub_224554030(a1, &v7);
  if (v7 <= 1)
  {
    sub_2231B6E98((uint64_t)&v8, a1, a2);
    return a1;
  }
  else
  {
    sub_2231B1308((_QWORD *)(a1 + 16));
    sub_2231B6FE0(a1, a2);
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(v4 - 16)
       - (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 32))(a1 + 16)
       + *(_QWORD *)(v4 - 8);
    if (v5)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 16) + 40))(a1 + 16, v5);
    *(_QWORD *)(a1 + 32) -= 16;
    return a1;
  }
}

void sub_2231B2E50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  char v8;

  v7 = 2;
  sub_224554030(a2, &v7);
  if (v7 <= 1)
  {
    sub_2231B2F30(a2, a3, v7);
  }
  else
  {
    sub_2231B1308((_QWORD *)(a2 + 16));
    sub_2245542F0(a2, (_QWORD *)a3);
    v8 = 0;
    sub_224553CE8(a2, &v8);
    *(_BYTE *)(a3 + 8) = v8;
    v5 = *(_QWORD *)(a2 + 32);
    v6 = *(_QWORD *)(v5 - 16)
       - (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a2 + 16) + 32))(a2 + 16)
       + *(_QWORD *)(v5 - 8);
    if (v6)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 + 16) + 40))(a2 + 16, v6);
    *(_QWORD *)(a2 + 32) -= 16;
  }
}

void sub_2231B2F30(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  if (a3 < 2)
  {
    v5 = 0;
    v6 = 0;
    sub_22415BBE0((uint64_t)&v7, (uint64_t)&v5);
    sub_2245542F0(a1, &v7);
    LOBYTE(v5) = 0;
    sub_224553CE8(a1, &v5);
    v8 = v5;
    sub_22415BBE0((uint64_t)&v5, (uint64_t)&v7);
    *(_QWORD *)a2 = v5;
    *(_BYTE *)(a2 + 8) = v6;
  }
  else
  {
    sub_2245542F0(a1, (_QWORD *)a2);
    LOBYTE(v7) = 0;
    sub_224553CE8(a1, &v7);
    *(_BYTE *)(a2 + 8) = v7;
  }
}

uint64_t sub_2231B2FE4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a4 < 2)
    return sub_2231B30C8((uint64_t)&v10, a2, a3);
  v6 = a2 + 16;
  sub_2231B1308((_QWORD *)(a2 + 16));
  v10 = 2;
  v11 = a3;
  sub_224554C3C(a2, &v10);
  v10 = 2;
  v11 = a3 + 8;
  sub_224554C3C(a2, &v10);
  v10 = 2;
  v11 = a3 + 16;
  sub_224554AC0(a2, &v10);
  v7 = *(_QWORD *)(a2 + 32);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a2 + 16) + 32))(a2 + 16);
  v9 = *(_QWORD *)(v7 - 16) - result + *(_QWORD *)(v7 - 8);
  if (v9)
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 40))(a2 + 16, v9);
  *(_QWORD *)(a2 + 32) -= 16;
  return result;
}

uint64_t sub_2231B30C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  float32x2_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_224158894(&v14);
  *(_QWORD *)&v11 = 2;
  *((_QWORD *)&v11 + 1) = &v14;
  sub_224554C3C(a2, &v11);
  *(_QWORD *)&v11 = 2;
  *((_QWORD *)&v11 + 1) = &v15;
  sub_224554C3C(a2, &v11);
  *(_QWORD *)&v11 = 2;
  *((_QWORD *)&v11 + 1) = &v16;
  sub_224554AC0(a2, &v11);
  v5 = sub_224158914(&v14);
  sub_224158A68(&v11, v5);
  *(_OWORD *)a3 = v11;
  *(_QWORD *)(a3 + 16) = v12;
  v6 = v13;
  v13 = 0uLL;
  v7 = *(std::__shared_weak_count **)(a3 + 32);
  *(_OWORD *)(a3 + 24) = v6;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  sub_22365B530((uint64_t)&v11);
  return sub_22365B530((uint64_t)&v14);
}

void sub_2231B31C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_22365B530((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231B31D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_22365B530((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231B31EC(const void *a1, uint64_t a2, unsigned int a3)
{
  char v5;
  __int16 v6;
  char v7;

  if (a3 < 2)
  {
    sub_2231B32CC((uint64_t)&v5, a1, a2);
  }
  else
  {
    v6 = 0;
    sub_224553E8C((uint64_t)a1, &v6);
    *(_WORD *)a2 = v6;
    sub_2231B3690((uint64_t)&v7, (uint64_t)a1, (_OWORD *)(a2 + 8));
    if (*(_WORD *)a2 == 1)
    {
      sub_22416C718(a2);
      if (*(_DWORD *)(a2 + 96) != 1)
        sub_22316DD70();
      sub_22416E278(a1, a2 + 32);
    }
    else
    {
      sub_2231B34B8((uint64_t)a1, (unsigned __int16 *)a2);
    }
  }
}

_QWORD *sub_2231B32CC(uint64_t a1, const void *a2, uint64_t a3)
{
  __int16 v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[28];
  _BYTE v10[64];
  int v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _BYTE v16[64];
  unsigned int v17;
  __int128 v18;
  _BYTE v19[2];

  sub_22416B598((uint64_t)&v12);
  sub_2231B5648(a2, (uint64_t)&v12);
  v5 = v12;
  result = sub_22416B3FC(&v18, v13, v14);
  *(_WORD *)v9 = v5;
  *(_OWORD *)&v9[8] = v18;
  v7 = v17;
  *(_DWORD *)&v9[24] = v15;
  v10[0] = 0;
  v11 = -1;
  if (v17 == -1)
  {
    *(_OWORD *)a3 = *(_OWORD *)v9;
    *(_OWORD *)(a3 + 12) = *(_OWORD *)&v9[12];
    v8 = *(unsigned int *)(a3 + 96);
    if ((_DWORD)v8 != -1)
    {
      result = (_QWORD *)((uint64_t (*)(_QWORD *, uint64_t))off_24EC1F928[v8])(result, a3 + 32);
      *(_DWORD *)(a3 + 96) = -1;
    }
  }
  else
  {
    ((void (*)(_BYTE *, _BYTE *, _BYTE *))off_24EC20F28[v17])(v19, v10, v16);
    v11 = v7;
    *(_OWORD *)a3 = *(_OWORD *)v9;
    *(_OWORD *)(a3 + 12) = *(_OWORD *)&v9[12];
    *(_QWORD *)&v18 = a3 + 32;
    result = (_QWORD *)((uint64_t (*)(__int128 *))off_24EC1F938[v7])(&v18);
  }
  if (v11 != -1)
    result = (_QWORD *)((uint64_t (*)(__int128 *, _BYTE *))off_24EC1F928[v11])(&v18, v10);
  if (v17 != -1)
    return (_QWORD *)((uint64_t (*)(_BYTE *, _BYTE *))off_24EC1F928[v17])(v9, v16);
  return result;
}

void sub_2231B3444(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  sub_22319A588((uint64_t)va);
  sub_2231B55F0((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2231B3460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, ...)
{
  uint64_t v15;
  uint64_t v16;
  va_list va;

  va_start(va, a15);
  if (a15 != -1)
    ((void (*)(uint64_t, uint64_t))off_24EC1F928[a15])(v16 - 33, v15);
  sub_2231B55F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2231B34B8(uint64_t a1, unsigned __int16 *a2)
{
  int v4;
  uint64_t v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD v14[10];
  char v15;
  _QWORD v16[21];
  _BYTE v17[8];
  __int128 v18;
  __int128 v19;
  _BYTE v20[22];
  char v21;

  v4 = sub_22416E0BC(*a2);
  sub_2231B5284((uint64_t)v14, a1);
  sub_2231B3838(v16, v4, (uint64_t)v17);
  v5 = *((unsigned int *)a2 + 24);
  if ((_DWORD)v5 == -1)
  {
LABEL_11:
    *((_QWORD *)a2 + 4) = &off_24EC1F958;
    *(_OWORD *)(a2 + 20) = v18;
    v18 = 0uLL;
    *(_OWORD *)(a2 + 28) = v19;
    *(_OWORD *)(a2 + 36) = *(_OWORD *)v20;
    *(_QWORD *)(a2 + 43) = *(_QWORD *)&v20[14];
    *((_DWORD *)a2 + 24) = 1;
    nullsub_30((char *)&v19 + 8);
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
    if (!*((_QWORD *)&v18 + 1))
      goto LABEL_16;
    goto LABEL_12;
  }
  if ((_DWORD)v5 != 1)
  {
    ((void (*)(char *, unsigned __int16 *))off_24EC1F928[v5])(&v21, a2 + 16);
    goto LABEL_11;
  }
  v6 = v18;
  v18 = 0uLL;
  v7 = (std::__shared_weak_count *)*((_QWORD *)a2 + 6);
  *(_OWORD *)(a2 + 20) = v6;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_OWORD *)(a2 + 28) = v19;
  *(_OWORD *)(a2 + 36) = *(_OWORD *)v20;
  *(_QWORD *)(a2 + 43) = *(_QWORD *)&v20[14];
  nullsub_30((char *)&v19 + 8);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
LABEL_12:
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
LABEL_16:
  nullsub_30(v17);
  std::istream::~istream();
  v14[0] = MEMORY[0x24BEDB848] + 16;
  if (v15 < 0)
    operator delete((void *)v14[8]);
  return std::streambuf::~streambuf();
}

void sub_2231B367C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2231B394C((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_2231B3690(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  double result;
  _QWORD v8[2];

  LODWORD(v8[0]) = 2;
  sub_224554030(a2, v8);
  if (LODWORD(v8[0]) <= 1)
    return sub_2231B3778(a2, a3, v8[0]);
  sub_2231B1308((_QWORD *)(a2 + 16));
  v8[0] = 0;
  sub_2245543E0(a2, v8);
  *(_QWORD *)a3 = v8[0];
  v8[0] = 2;
  v8[1] = (char *)a3 + 8;
  sub_224554AC0(a2, v8);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(v5 - 16)
     - (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a2 + 16) + 32))(a2 + 16)
     + *(_QWORD *)(v5 - 8);
  if (v6)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 + 16) + 40))(a2 + 16, v6);
  *(_QWORD *)(a2 + 32) -= 16;
  return result;
}

double sub_2231B3778(uint64_t a1, _OWORD *a2, unsigned int a3)
{
  double result;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  if (a3 < 2)
  {
    v7 = 0;
    *(_QWORD *)&v8 = 0;
    sub_2245543E0(a1, &v8);
    v6 = v8;
    *(_QWORD *)&v8 = 2;
    *((_QWORD *)&v8 + 1) = &v7;
    sub_224554AC0(a1, &v8);
    sub_22416B3FC(&v8, v6, v7);
    result = *(double *)&v8;
    *a2 = v8;
  }
  else
  {
    *(_QWORD *)&v8 = 0;
    sub_2245543E0(a1, &v8);
    *(_QWORD *)a2 = v8;
    *(_QWORD *)&v8 = 2;
    *((_QWORD *)&v8 + 1) = (char *)a2 + 8;
    sub_224554AC0(a1, &v8);
  }
  return result;
}

uint64_t sub_2231B3838@<X0>(_QWORD *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::runtime_error *exception;
  uint64_t v10;
  std::string v11;
  _BYTE v12[8];
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  _OWORD v16[5];
  char v17;

  sub_2231B39A4(a1, a2, (uint64_t)v12);
  if (!v17)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v10 = sub_22319593C((uint64_t)v12);
    sub_22456A158(v10, &v11);
    std::runtime_error::runtime_error(exception, &v11);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v5 = v13;
  v4 = v14;
  *(_QWORD *)a3 = &off_24EC1F958;
  *(_QWORD *)(a3 + 8) = v5;
  *(_QWORD *)(a3 + 16) = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_OWORD *)(a3 + 24) = v15;
  *(_OWORD *)(a3 + 40) = v16[0];
  *(_QWORD *)(a3 + 54) = *(_QWORD *)((char *)v16 + 14);
  return sub_2231B51A8((uint64_t)v12);
}

void sub_2231B390C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;
  int v17;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      sub_2231B51A8((uint64_t)&a16);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

uint64_t sub_2231B394C(uint64_t a1)
{
  std::istream::~istream();
  *(_QWORD *)a1 = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  return std::streambuf::~streambuf();
}

uint64_t sub_2231B39A4@<X0>(_QWORD *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  _BYTE *v10;
  uint64_t v11;
  __int128 v12;
  void *v13;
  char v14;
  char v15;
  void *v16[2];
  uint64_t v17;
  uint64_t v18;
  void *__p[2];
  uint64_t v20;
  char v21;
  char v22;
  __int128 v23;
  __int128 v24;
  char v25;
  char v26;
  void *v27;
  char v28;
  void *v29;
  char v30;
  char v31;
  char v32;
  char v33;
  uint64_t (**v34)();
  __int128 v35;
  __int128 v36;
  _BYTE v37[22];

  v34 = &off_24EC1F958;
  sub_2231B3FDC((uint64_t)&v35);
  sub_2231B3C5C((uint64_t)&v34, a1, a2, (uint64_t)&v23);
  if (v33)
  {
    *(_QWORD *)a3 = &off_24EC1F958;
    *(_OWORD *)(a3 + 8) = v35;
    v35 = 0uLL;
    *(_OWORD *)(a3 + 24) = v36;
    *(_OWORD *)(a3 + 40) = *(_OWORD *)v37;
    *(_QWORD *)(a3 + 54) = *(_QWORD *)&v37[14];
    *(_BYTE *)(a3 + 120) = 1;
    goto LABEL_3;
  }
  v12 = v23;
  v10 = sub_22319FFBC(&v13, &v24);
  *(_OWORD *)a3 = v12;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (v22)
  {
    *(_BYTE *)(a3 + 40) = 0;
    if (v15)
    {
      *(_OWORD *)(a3 + 16) = *(_OWORD *)v10;
      *(_QWORD *)(a3 + 32) = *((_QWORD *)v10 + 2);
      *((_QWORD *)v10 + 1) = 0;
      *((_QWORD *)v10 + 2) = 0;
      *(_QWORD *)v10 = 0;
      *(_BYTE *)(a3 + 40) = 1;
    }
    *(_BYTE *)(a3 + 48) = 0;
    *(_BYTE *)(a3 + 104) = 0;
    if (!v21)
    {
      *(_BYTE *)(a3 + 112) = 1;
      *(_BYTE *)(a3 + 120) = 0;
      if (!v15)
        goto LABEL_24;
      goto LABEL_22;
    }
    v11 = v18;
    *(_QWORD *)(a3 + 64) = v17;
    *(_OWORD *)(a3 + 48) = *(_OWORD *)v16;
    v16[0] = 0;
    v16[1] = 0;
    *(_QWORD *)(a3 + 72) = v11;
    *(_OWORD *)(a3 + 80) = *(_OWORD *)__p;
    *(_QWORD *)(a3 + 96) = v20;
    __p[1] = 0;
    v20 = 0;
    v17 = 0;
    __p[0] = 0;
    *(_BYTE *)(a3 + 104) = 1;
    *(_BYTE *)(a3 + 112) = 1;
    *(_BYTE *)(a3 + 120) = 0;
    if (SHIBYTE(v20) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v17) & 0x80000000) == 0)
      {
LABEL_15:
        if (!v15)
          goto LABEL_24;
LABEL_22:
        if (v14 < 0)
          operator delete(v13);
        goto LABEL_24;
      }
    }
    else if ((SHIBYTE(v17) & 0x80000000) == 0)
    {
      goto LABEL_15;
    }
    operator delete(v16[0]);
    if (v15)
      goto LABEL_22;
  }
  else
  {
    *(_BYTE *)(a3 + 120) = 0;
  }
LABEL_24:
  if (!v33 && v32)
  {
    if (v31)
    {
      if (v30 < 0)
        operator delete(v29);
      if (v28 < 0)
        operator delete(v27);
    }
    if (v26 && v25 < 0)
      operator delete((void *)v24);
  }
LABEL_3:
  nullsub_30((char *)&v36 + 8);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
  if (*((_QWORD *)&v35 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return nullsub_30(&v34);
}

void sub_2231B3C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  sub_223197D38((uint64_t)va);
  sub_22319B358(v17 - 128);
  _Unwind_Resume(a1);
}

void sub_2231B3C34(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22319B358(v1 - 128);
  _Unwind_Resume(a1);
}

void sub_2231B3C48(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_30(v1 - 128);
  _Unwind_Resume(a1);
}

void sub_2231B3C5C(uint64_t a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _QWORD *exception;
  void *v11;
  char v12;
  __int128 v13;
  __int128 v14;
  char v15;
  char v16;
  void *v17;
  char v18;
  void *v19;
  char v20;
  char v21;
  char v22;
  __int128 v23;
  void *v24;
  char v25;
  char v26;
  void *v27[2];
  uint64_t v28;
  uint64_t v29;
  void *__p[2];
  uint64_t v31;
  char v32;
  char v33;
  __int128 v34;
  void *v35;
  char v36;
  char v37;
  void *v38;
  char v39;
  void *v40;
  char v41;
  char v42;
  char v43;
  char v44;
  _QWORD v45[3];
  _QWORD *v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v45[0] = &off_24EC20E38;
  v45[1] = a1;
  v46 = v45;
  sub_2241604E4(v45, 0, a2, a3, (uint64_t)&v34);
  v6 = v46;
  if (v46 == v45)
  {
    v7 = 4;
    v6 = v45;
  }
  else
  {
    if (!v46)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  if (v44)
  {
    *(_BYTE *)(a4 + 120) = 1;
    return;
  }
  sub_224160DA0(a3, (uint64_t)"load", 4);
  if (v44)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24EC1FCC0;
    __cxa_throw(exception, (struct type_info *)&unk_24EC1FC98, (void (*)(void *))std::exception::~exception);
  }
  sub_22456BA60(&v11, &v34, (uint64_t)&v13);
  v23 = v13;
  v8 = sub_22319FFBC(&v24, &v14);
  *(_OWORD *)a4 = v23;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (!v33)
  {
    *(_BYTE *)(a4 + 120) = 0;
    goto LABEL_24;
  }
  *(_BYTE *)(a4 + 40) = 0;
  if (v26)
  {
    *(_OWORD *)(a4 + 16) = *(_OWORD *)v8;
    *(_QWORD *)(a4 + 32) = *((_QWORD *)v8 + 2);
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = 0;
    *(_QWORD *)v8 = 0;
    *(_BYTE *)(a4 + 40) = 1;
  }
  *(_BYTE *)(a4 + 48) = 0;
  *(_BYTE *)(a4 + 104) = 0;
  if (!v32)
  {
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (!v26)
      goto LABEL_24;
    goto LABEL_22;
  }
  v9 = v29;
  *(_QWORD *)(a4 + 64) = v28;
  *(_OWORD *)(a4 + 48) = *(_OWORD *)v27;
  v27[0] = 0;
  v27[1] = 0;
  *(_QWORD *)(a4 + 72) = v9;
  *(_OWORD *)(a4 + 80) = *(_OWORD *)__p;
  *(_QWORD *)(a4 + 96) = v31;
  __p[1] = 0;
  v31 = 0;
  v28 = 0;
  __p[0] = 0;
  *(_BYTE *)(a4 + 104) = 1;
  *(_BYTE *)(a4 + 112) = 1;
  *(_BYTE *)(a4 + 120) = 0;
  if (SHIBYTE(v31) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v28) & 0x80000000) == 0)
    {
LABEL_15:
      if (!v26)
        goto LABEL_24;
      goto LABEL_22;
    }
  }
  else if ((SHIBYTE(v28) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(v27[0]);
  if (!v26)
    goto LABEL_24;
LABEL_22:
  if (v25 < 0)
    operator delete(v24);
LABEL_24:
  if (v22)
  {
    if (v21)
    {
      if (v20 < 0)
        operator delete(v19);
      if (v18 < 0)
        operator delete(v17);
    }
    if (v16 && v15 < 0)
      operator delete((void *)v14);
  }
  if (v12 < 0)
  {
    operator delete(v11);
    if (v44)
      return;
  }
  else if (v44)
  {
    return;
  }
  if (v43)
  {
    if (v42)
    {
      if (v41 < 0)
        operator delete(v40);
      if (v39 < 0)
        operator delete(v38);
    }
    if (v37)
    {
      if (v36 < 0)
        operator delete(v35);
    }
  }
}

void sub_2231B3F5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  sub_22319723C((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  sub_223197D38(v15 - 200);
  _Unwind_Resume(a1);
}

void sub_2231B3FA4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 - 48);
  if (v4 == v1)
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 72);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_2231B3FDC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 v5;
  __int16 v6;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  sub_2231B40F4(&v8);
  v2 = v8;
  if (v8)
  {
    v3 = (_QWORD *)operator new();
    *v3 = &off_24EC20DE8;
    v3[1] = 0;
    v3[2] = 0;
    v3[3] = v2;
  }
  else
  {
    v3 = 0;
  }
  v9 = 0;
  v8 = 0;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  v10 = 0;
  v11 = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 48) = 1;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 104))(v2);
  v5 = v4;
  if ((v4 & 0xFFFFFF) <= 0x10000)
    v5 = 0;
  v6 = v4 & 0xFF00;
  if ((v4 & 0xFF0000) == 0)
    v6 = 0;
  *(_WORD *)(a1 + 52) = v6 & 0xFF00 | v5;
  return nullsub_30(&v8);
}

void sub_2231B40A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_2231B40C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  nullsub_30(v11 + 24);
  if (*(_QWORD *)(v11 + 8))
    sub_2245743F4();
  nullsub_30(&a9);
  sub_223167354((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_2231B40F4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  _BYTE v4[8];
  _OWORD v5[2];
  _QWORD v6[6];

  v6[5] = &off_24EC20D08;
  sub_2244988EC((uint64_t)v4);
  v2 = operator new();
  *(_QWORD *)v2 = &off_24EC20D50;
  *(_OWORD *)(v2 + 8) = v5[0];
  *(_OWORD *)(v2 + 20) = *(_OWORD *)((char *)v5 + 12);
  sub_2244E32B8((__n128 *)(v2 + 40), (__n128 *)v6);
  *(_OWORD *)(v2 + 64) = *(_OWORD *)&v6[3];
  *a1 = v2;
  return sub_2244845F4((uint64_t)v4);
}

void sub_2231B4194(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  v4 = nullsub_30(v2);
  MEMORY[0x227684CE8](v4, 0x1091C406A8758A4);
  sub_2244845F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231B41C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2244845F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231B41DC()
{
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231B41F0()
{
  return 1;
}

__int128 *sub_2231B41FC()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2557895D0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2557895D0))
  {
    v2 = sub_2231B42D4();
    if (*((char *)v2 + 23) < 0)
    {
      sub_223197FA4(&xmmword_2557895B8, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_2557895C8 = *((_QWORD *)v2 + 2);
      xmmword_2557895B8 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557895B8, &dword_22314D000);
    __cxa_guard_release(&qword_2557895D0);
  }
  if (byte_2557895CF >= 0)
    return &xmmword_2557895B8;
  else
    return (__int128 *)xmmword_2557895B8;
}

void sub_2231B42BC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2557895D0);
  _Unwind_Resume(a1);
}

__int128 *sub_2231B42D4()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2557895F0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2557895F0))
    return &xmmword_2557895D8;
  v2 = sub_2231B43B0();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&xmmword_2557895D8, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_2557895E8 = v2->__r_.__value_.__r.__words[2];
    xmmword_2557895D8 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2557895D8, &dword_22314D000);
  __cxa_guard_release(&qword_2557895F0);
  return &xmmword_2557895D8;
}

void sub_2231B4398(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2557895F0);
  _Unwind_Resume(a1);
}

std::string *sub_2231B43B0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_255789610);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255789610))
    return &stru_2557895F8;
  sub_2231B45C8((uint64_t)__p);
  sub_2231B44A0((char *)__p, &stru_2557895F8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_2557895F8, &dword_22314D000);
  __cxa_guard_release(&qword_255789610);
  return &stru_2557895F8;
}

void sub_2231B4460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_255789610);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_255789610);
  _Unwind_Resume(a1);
}

void sub_2231B44A0(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2231B47AC();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_22319BD1C(&__p, (uint64_t)__dst, 1uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_2231B459C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_22319BB48(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2231B45C8(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_255789650);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_255789650))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Gray8u>]", qword_255789638);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255789638, &dword_22314D000);
    __cxa_guard_release(&qword_255789650);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_255789670);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_255789670))
  {
    v5 = sub_2231A38CC(qword_255789638, "<", 0);
    sub_2231A37C8(qword_255789638, 0, v5, qword_255789658);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255789658, &dword_22314D000);
    __cxa_guard_release(&qword_255789670);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_255789690);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_255789690))
  {
    sub_224573040((uint64_t)qword_255789658, (uint64_t)&xmmword_255789678);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255789678, &dword_22314D000);
    __cxa_guard_release(&qword_255789690);
  }
  if (byte_25578968F < 0)
  {
    sub_223197FA4((_BYTE *)a1, (void *)xmmword_255789678, *((unint64_t *)&xmmword_255789678 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_255789678;
    *(_QWORD *)(a1 + 16) = unk_255789688;
  }
}

void sub_2231B4764(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255789690);
  _Unwind_Resume(a1);
}

void sub_2231B477C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255789670);
  _Unwind_Resume(a1);
}

void sub_2231B4794(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255789650);
  _Unwind_Resume(a1);
}

std::string *sub_2231B47AC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_255789630);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255789630))
    return &stru_255789618;
  sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Gray8u]", __p);
  sub_22457326C((uint64_t)__p, &stru_255789618);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255789618, &dword_22314D000);
  __cxa_guard_release(&qword_255789630);
  return &stru_255789618;
}

void sub_2231B4864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_255789630);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_255789630);
  _Unwind_Resume(a1);
}

void sub_2231B48A8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231B48CC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_2231B48E4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img12IImageBufferEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img12IImageBufferEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img12IImageBufferEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img12IImageBufferEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_2231B4958()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2231B496C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC20E38;
  result[1] = v3;
  return result;
}

uint64_t sub_2231B49A0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC20E38;
  a2[1] = v2;
  return result;
}

uint64_t sub_2231B49BC@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  return sub_2231B4A40((uint64_t *)(a1 + 8), a2, *a3, a4);
}

uint64_t sub_2231B49C8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3kit5imgio6detail12ProvideImageINS0_3img5ImageILNS4_6FormatE0ENS4_13DynamicBufferEEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3kit5imgio6detail12ProvideImageINS0_3img5ImageILNS4_6FormatE0ENS4_13DynamicBufferEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3kit5imgio6detail12ProvideImageINS0_3img5ImageILNS4_6FormatE0ENS4_13DynamicBufferEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit5imgio6detail12ProvideImageINS0_3img5ImageILNS4_6FormatE0ENS4_13DynamicBufferEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2231B4A34()
{
  return &unk_24EC20F18;
}

uint64_t sub_2231B4A40@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  uint64_t (**v25)();
  __int128 v26;
  _BYTE v27[38];

  if (!a3
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/ImageIO/include/Kit/ImageIO/ImageIO.h", 387, (uint64_t)"format != img::Format::Dynamic", 30, (uint64_t)"loader must specify the format to load as", 41, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v8 = *a1;
  if (*(_DWORD *)(*a1 + 32) == *a2 && *(_DWORD *)(v8 + 56) == a3 && *(_DWORD *)(v8 + 36) == a2[1])
  {
    v25 = &off_24EC20EB8;
    sub_2231B4D38(v8, (uint64_t)&v26);
    *(_QWORD *)a4 = &off_24EC20EB8;
    *(_OWORD *)(a4 + 8) = v26;
    v26 = 0uLL;
    *(_OWORD *)(a4 + 24) = *(_OWORD *)v27;
    *(_OWORD *)(a4 + 38) = *(_OWORD *)&v27[14];
    *(_BYTE *)(a4 + 120) = 1;
    nullsub_30(v27);
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
    if (!*((_QWORD *)&v26 + 1))
      return nullsub_30(&v25);
    v23 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v22 = __ldaxr(v23);
    while (__stlxr(v22 - 1, v23));
    goto LABEL_25;
  }
  sub_2231B50A0(v8, a3);
  v10 = *a1;
  v11 = v26;
  v26 = 0uLL;
  v12 = *(std::__shared_weak_count **)(v10 + 16);
  *(_OWORD *)(v10 + 8) = v11;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = *(_OWORD *)v27;
  v16 = *(_OWORD *)&v27[16];
  *(_QWORD *)(v10 + 54) = *(_QWORD *)&v27[30];
  *(_OWORD *)(v10 + 40) = v16;
  *(_OWORD *)(v10 + 24) = v15;
  nullsub_30(&v27[8]);
  if (*((_QWORD *)&v26 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v26 + 1) + 16))(*((_QWORD *)&v26 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v26 + 1));
    }
  }
  nullsub_30(&v25);
  v19 = *a1;
  v25 = &off_24EC20EB8;
  sub_2231B4D38(v19, (uint64_t)&v26);
  *(_QWORD *)a4 = &off_24EC20EB8;
  *(_OWORD *)(a4 + 8) = v26;
  v26 = 0uLL;
  *(_OWORD *)(a4 + 24) = *(_OWORD *)v27;
  *(_OWORD *)(a4 + 38) = *(_OWORD *)&v27[14];
  *(_BYTE *)(a4 + 120) = 1;
  nullsub_30(v27);
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
  if (*((_QWORD *)&v26 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
LABEL_25:
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  return nullsub_30(&v25);
}

void sub_2231B4CA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nullsub_30(va);
  _Unwind_Resume(a1);
}

void sub_2231B4CB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nullsub_30(va);
  _Unwind_Resume(a1);
}

uint64_t sub_2231B4CC8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  nullsub_30(a1 + 24);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_30(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_30(a1);
}

void sub_2231B4D38(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  v20 = v4;
  v21 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v18 = v4;
    v19 = v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  else
  {
    v18 = v4;
    v19 = 0;
  }
  v9 = *(_QWORD *)(a1 + 48);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_DWORD *)(a1 + 40);
  sub_2231B4F88(a2, &v18, (uint64_t)&v16, v9, *(_DWORD *)(a1 + 56));
  nullsub_30(&v16);
  v10 = v19;
  if (v19)
  {
    v11 = (unint64_t *)&v19->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v21;
  if (v21)
  {
    v14 = (unint64_t *)&v21->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_2231B4E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  nullsub_30(&a9);
  sub_223167354((uint64_t)&a11);
  sub_223167354((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_2231B4E6C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  nullsub_30(a1 + 24);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_30(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2231B4EE0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_2231B4EE8(uint64_t a1)
{
  return a1 + 24;
}

uint64_t sub_2231B4EF0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 24);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 32);
  return result;
}

uint64_t sub_2231B4F04(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_2231B4F88(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  int v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  __int16 v16;

  v5 = result;
  v6 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  *(_QWORD *)result = v6;
  *(_QWORD *)(result + 8) = v7;
  v10 = *(_DWORD *)(a3 + 8);
  *(_QWORD *)(result + 16) = *(_QWORD *)a3;
  *(_DWORD *)(result + 24) = v10;
  *(_QWORD *)(result + 32) = a4;
  *(_DWORD *)(result + 40) = a5;
  if (v6)
  {
    if (v7)
    {
      v11 = (unint64_t *)&v7->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      do
        v13 = __ldaxr(v11);
      while (__stlxr(v13 - 1, v11));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 104))(v6);
    v15 = v14;
    if ((v14 & 0xFFFFFF) <= 0x10000)
      v15 = 0;
    v16 = v14 & 0xFF00;
    if ((v14 & 0xFF0000) == 0)
      v16 = 0;
    *(_WORD *)(v5 + 44) = v16 & 0xFF00 | v15;
    return v5;
  }
  else
  {
    *(_WORD *)(result + 44) = 0;
  }
  return result;
}

void sub_2231B5080(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  nullsub_30(v2);
  if (*(_QWORD *)(v1 + 8))
    sub_224574454();
  _Unwind_Resume(a1);
}

void sub_2231B50A0(uint64_t a1, int a2)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  if (a2)
  {
    v3 = *(_QWORD *)(a1 + 8);
    v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
    v15 = v3;
    v16 = v2;
    sub_22446FC78((uint64_t)&v15, a2);
    v6 = v16;
    if (!v16)
      return;
    v7 = (unint64_t *)&v16->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (v8)
      return;
LABEL_17:
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    return;
  }
  v10 = *(_QWORD *)(a1 + 8);
  v9 = *(std::__shared_weak_count **)(a1 + 16);
  if (v9)
  {
    v11 = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v17 = v10;
  v18 = v9;
  sub_22446FC78((uint64_t)&v17, *(_DWORD *)(a1 + 56));
  v6 = v18;
  if (v18)
  {
    v13 = (unint64_t *)&v18->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
      goto LABEL_17;
  }
}

void sub_2231B5180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231B5194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2231B51A8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*(_BYTE *)(a1 + 120))
  {
    nullsub_30(a1 + 32);
    v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    nullsub_30(a1);
    return a1;
  }
  if (!*(_BYTE *)(a1 + 112))
    return a1;
  if (!*(_BYTE *)(a1 + 104))
    goto LABEL_13;
  if (*(char *)(a1 + 103) < 0)
  {
    operator delete(*(void **)(a1 + 80));
    if (*(char *)(a1 + 71) < 0)
      goto LABEL_17;
LABEL_13:
    if (*(_BYTE *)(a1 + 40))
      goto LABEL_14;
    return a1;
  }
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
    goto LABEL_13;
LABEL_17:
  operator delete(*(void **)(a1 + 48));
  if (!*(_BYTE *)(a1 + 40))
    return a1;
LABEL_14:
  if ((*(char *)(a1 + 39) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_2231B5284(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void **v5;
  uint64_t v6;
  std::string *v7;
  std::string::size_type v8;
  _QWORD v10[2];
  std::string v11;
  std::string::size_type __n;

  v4 = std::streambuf::basic_streambuf();
  *(_QWORD *)v4 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(v4 + 64) = 0u;
  v5 = (void **)(v4 + 64);
  v6 = MEMORY[0x24BEDB820];
  *(_OWORD *)(v4 + 80) = 0u;
  *(_QWORD *)(v4 + 104) = v6 + 24;
  *(_DWORD *)(v4 + 96) = 24;
  *(_QWORD *)(v4 + 120) = v6 + 64;
  *(_QWORD *)(v4 + 112) = 0;
  std::ios_base::init((std::ios_base *)(v4 + 120), (void *)a1);
  *(_QWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = -1;
  __n = 0;
  sub_2245543E0(a2, &__n);
  memset(&v11, 0, sizeof(v11));
  if (!__n)
  {
    *((_BYTE *)&v11.__r_.__value_.__s + 23) = 0;
    v11.__r_.__value_.__s.__data_[0] = 0;
    goto LABEL_3;
  }
  std::string::append(&v11, __n, 0);
  if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_3:
    v7 = &v11;
    v8 = __n;
    goto LABEL_9;
  }
  v7 = (std::string *)v11.__r_.__value_.__r.__words[0];
  v8 = __n;
  if (!v11.__r_.__value_.__r.__words[0] && __n)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v7 = 0;
  }
LABEL_9:
  v10[0] = v8;
  v10[1] = v7;
  sub_224555B74(a2, (uint64_t)v10);
  if (*(char *)(a1 + 87) < 0)
    operator delete(*v5);
  *(std::string *)v5 = v11;
  *((_BYTE *)&v11.__r_.__value_.__s + 23) = 0;
  v11.__r_.__value_.__s.__data_[0] = 0;
  sub_2231B5488(a1);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_2231B541C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  if (a16 < 0)
    operator delete(__p);
  std::istream::~istream();
  sub_2231A01E4(v16);
  _Unwind_Resume(a1);
}

std::string *sub_2231B5488(uint64_t a1)
{
  std::string *result;
  unint64_t v3;
  std::string *v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  int v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;

  *(_QWORD *)(a1 + 88) = 0;
  result = (std::string *)(a1 + 64);
  v3 = *(unsigned __int8 *)(a1 + 87);
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
    v4 = result;
    v5 = *(unsigned __int8 *)(a1 + 87);
    v6 = *(_DWORD *)(a1 + 96);
    if ((v6 & 8) == 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v4 = *(std::string **)(a1 + 64);
  v5 = *(_QWORD *)(a1 + 72);
  v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
LABEL_3:
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = (char *)v4 + v5;
  }
LABEL_4:
  if ((v6 & 0x10) == 0)
    return result;
  *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
  if ((v3 & 0x80) == 0)
  {
    v7 = 22;
    if (v3 > 0x15)
    {
      *(_BYTE *)(a1 + 87) = 22;
      goto LABEL_15;
    }
LABEL_11:
    result = std::string::append(result, v7 - v3, 0);
    v8 = *(char *)(a1 + 87);
    if (v8 < 0)
      goto LABEL_16;
    goto LABEL_12;
  }
  v3 = *(_QWORD *)(a1 + 72);
  v7 = (*(_QWORD *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v3 < v7)
    goto LABEL_11;
  result = *(std::string **)(a1 + 64);
  *(_QWORD *)(a1 + 72) = v7;
LABEL_15:
  result->__r_.__value_.__s.__data_[v7] = 0;
  v8 = *(char *)(a1 + 87);
  if (v8 < 0)
  {
LABEL_16:
    v9 = (char *)v4 + *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 40) = v4;
    *(_QWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a1 + 56) = v9;
    if ((*(_BYTE *)(a1 + 96) & 3) == 0)
      return result;
    goto LABEL_17;
  }
LABEL_12:
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 56) = (char *)v4 + v8;
  if ((*(_BYTE *)(a1 + 96) & 3) == 0)
    return result;
LABEL_17:
  if (v5 >> 31)
  {
    v10 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
    v11 = 0x7FFFFFFF * ((v10 + ((v5 - 0x80000000 - v10) >> 1)) >> 30);
    v4 = (std::string *)((char *)v4 + v11 + 0x7FFFFFFF);
    v5 = v5 - v11 - 0x7FFFFFFF;
    *(_QWORD *)(a1 + 48) = v4;
  }
  if (v5)
    *(_QWORD *)(a1 + 48) = (char *)v4 + v5;
  return result;
}

uint64_t sub_2231B55F0(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 96);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24EC1F928[v2])(&v4, a1 + 32);
  *(_DWORD *)(a1 + 96) = -1;
  return a1;
}

void sub_2231B5648(const void *a1, uint64_t a2)
{
  _QWORD v4[2];

  LOWORD(v4[0]) = 0;
  sub_224553E8C((uint64_t)a1, v4);
  *(_WORD *)a2 = v4[0];
  LODWORD(v4[0]) = 1;
  sub_224554030((uint64_t)a1, v4);
  v4[0] = 0;
  sub_2245543E0((uint64_t)a1, v4);
  *(_QWORD *)(a2 + 8) = v4[0];
  v4[0] = 2;
  v4[1] = a2 + 16;
  sub_224554AC0((uint64_t)a1, v4);
  if (*(_WORD *)a2 == 1)
  {
    sub_22416B8E4(a2);
    if (*(_DWORD *)(a2 + 96) != 1)
      sub_22316DD70();
    sub_22416E278(a1, a2 + 32);
  }
  else
  {
    sub_2231B5728((uint64_t)a1, (unsigned __int16 *)a2);
  }
}

uint64_t sub_2231B5728(uint64_t a1, unsigned __int16 *a2)
{
  int v4;
  uint64_t v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD v14[10];
  char v15;
  _QWORD v16[21];
  _BYTE v17[8];
  __int128 v18;
  __int128 v19;
  _BYTE v20[22];
  char v21;

  v4 = sub_22416E0BC(*a2);
  sub_2231B5284((uint64_t)v14, a1);
  sub_2231B3838(v16, v4, (uint64_t)v17);
  v5 = *((unsigned int *)a2 + 24);
  if ((_DWORD)v5 == -1)
  {
LABEL_11:
    *((_QWORD *)a2 + 4) = &off_24EC1F958;
    *(_OWORD *)(a2 + 20) = v18;
    v18 = 0uLL;
    *(_OWORD *)(a2 + 28) = v19;
    *(_OWORD *)(a2 + 36) = *(_OWORD *)v20;
    *(_QWORD *)(a2 + 43) = *(_QWORD *)&v20[14];
    *((_DWORD *)a2 + 24) = 1;
    nullsub_30((char *)&v19 + 8);
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
    if (!*((_QWORD *)&v18 + 1))
      goto LABEL_16;
    goto LABEL_12;
  }
  if ((_DWORD)v5 != 1)
  {
    ((void (*)(char *, unsigned __int16 *))off_24EC1F928[v5])(&v21, a2 + 16);
    goto LABEL_11;
  }
  v6 = v18;
  v18 = 0uLL;
  v7 = (std::__shared_weak_count *)*((_QWORD *)a2 + 6);
  *(_OWORD *)(a2 + 20) = v6;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_OWORD *)(a2 + 28) = v19;
  *(_OWORD *)(a2 + 36) = *(_OWORD *)v20;
  *(_QWORD *)(a2 + 43) = *(_QWORD *)&v20[14];
  nullsub_30((char *)&v19 + 8);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
LABEL_12:
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
LABEL_16:
  nullsub_30(v17);
  std::istream::~istream();
  v14[0] = MEMORY[0x24BEDB848] + 16;
  if (v15 < 0)
    operator delete((void *)v14[8]);
  return std::streambuf::~streambuf();
}

void sub_2231B58EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2231B394C((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_2231B5900(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24EC1F8C8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  result = *(__n128 *)(a3 + 24);
  *(_OWORD *)(a2 + 38) = *(_OWORD *)(a3 + 38);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 sub_2231B592C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  *(_QWORD *)a2 = &off_24EC1F958;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  result = *(__n128 *)(a3 + 24);
  v4 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 54) = *(_QWORD *)(a3 + 54);
  *(_OWORD *)(a2 + 40) = v4;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void sub_2231B5960(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;

  v13 = 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3);
  sub_2245543E0(a1, &v13);
  v4 = a2[1];
  v5 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - *a2) >> 3);
  if (v13 > v5)
  {
    sub_2231B5A88((uint64_t)a2, v13 - v5);
    v8 = a2;
    v6 = *a2;
    v7 = v8[1];
    v9 = v7 - v6;
    if (v7 == v6)
      return;
    goto LABEL_13;
  }
  if (v13 >= v5)
  {
    v6 = *a2;
    v9 = v4 - v6;
    if (v4 == v6)
      return;
    goto LABEL_13;
  }
  v10 = *a2 + 40 * v13;
  while (v4 != v10)
  {
    v11 = *(void **)(v4 - 24);
    if (v11)
    {
      *(_QWORD *)(v4 - 16) = v11;
      operator delete(v11);
    }
    v4 -= 40;
  }
  a2[1] = v10;
  v6 = *a2;
  v9 = v10 - v6;
  if (v10 != v6)
  {
LABEL_13:
    v12 = 40 * (v9 / 40);
    do
    {
      v14 = 3;
      sub_224554030(a1, &v14);
      sub_2231B5C9C(a1, v6, v14);
      v6 += 40;
      v12 -= 40;
    }
    while (v12);
  }
}

void sub_2231B5A88(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  void *v22;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - (uint64_t)v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 40 * ((40 * a2 - 40) / 0x28) + 40;
      bzero(*(void **)(a1 + 8), v12);
      v5 += v12;
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(char **)a1;
    v7 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v5[-*(_QWORD *)a1] >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0x666666666666666)
      sub_22316E078();
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - (uint64_t)v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x333333333333333)
      v10 = 0x666666666666666;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x666666666666666)
        sub_223174E94();
      v11 = (char *)operator new(40 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[40 * v7];
    v14 = &v11[40 * v10];
    v15 = 40 * ((40 * a2 - 40) / 0x28) + 40;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 == v6)
    {
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v5)
LABEL_25:
        operator delete(v5);
    }
    else
    {
      v17 = 0;
      do
      {
        v18 = &v13[v17];
        v19 = &v5[v17];
        v20 = *(_QWORD *)&v5[v17 - 40];
        *((_DWORD *)v18 - 8) = *(_DWORD *)&v5[v17 - 32];
        *((_QWORD *)v18 - 5) = v20;
        *((_QWORD *)v18 - 2) = 0;
        *((_QWORD *)v18 - 1) = 0;
        *(_OWORD *)(v18 - 24) = *(_OWORD *)&v5[v17 - 24];
        *((_QWORD *)v18 - 1) = *(_QWORD *)&v5[v17 - 8];
        *((_QWORD *)v19 - 3) = 0;
        *((_QWORD *)v19 - 2) = 0;
        *((_QWORD *)v19 - 1) = 0;
        v17 -= 40;
      }
      while (&v5[v17] != v6);
      v21 = *(char **)a1;
      v5 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = &v13[v17];
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v5 != v21)
      {
        do
        {
          v22 = (void *)*((_QWORD *)v5 - 3);
          if (v22)
          {
            *((_QWORD *)v5 - 2) = v22;
            operator delete(v22);
          }
          v5 -= 40;
        }
        while (v5 != v21);
        v5 = v21;
      }
      if (v5)
        goto LABEL_25;
    }
  }
}

void sub_2231B5C9C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  __int128 v6;
  __int128 v7;
  char *v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  void **v13;
  _BYTE *v14;
  unint64_t v15;
  _BYTE *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  __int128 v37;
  __int128 v38;
  void *__p;
  unsigned __int8 *v40;
  uint64_t v41;
  void *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;

  v42 = (void *)3;
  v43 = (char *)a2;
  sub_224554C3C(a1, &v42);
  if (a3 > 2)
  {
    sub_2231B6444(a1, (char **)(a2 + 16));
  }
  else
  {
    v36 = a3;
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v45 = 0;
    sub_2245543E0(a1, &v45);
    v8 = (char *)v42;
    v9 = v43;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v43 - (_BYTE *)v42) >> 2);
    if (v45 <= v10)
    {
      if (v45 < v10)
      {
        v9 = (char *)v42 + 12 * v45;
        v43 = v9;
      }
    }
    else
    {
      sub_2231B60AC((uint64_t)&v42, v45 - v10);
      v8 = (char *)v42;
      v9 = v43;
    }
    if (v9 == v8)
    {
      v12 = v9;
    }
    else
    {
      v11 = 12 * ((v9 - v8) / 12);
      do
      {
        __p = (void *)3;
        v40 = (unsigned __int8 *)v8;
        sub_224554C3C(a1, &__p);
        v8 += 12;
        v11 -= 12;
      }
      while (v11);
      v9 = (char *)v42;
      v12 = v43;
    }
    v13 = (void **)(a2 + 16);
    v14 = *(_BYTE **)(a2 + 16);
    v15 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v9) >> 2);
    if (v15 > (uint64_t)(*(_QWORD *)(a2 + 32) - (_QWORD)v14) >> 5)
    {
      if (v15 >> 59)
        sub_22316E078();
      v16 = *(_BYTE **)(a2 + 24);
      v17 = (char *)operator new(0x5555555555555560 * ((v12 - v9) >> 2));
      v18 = &v17[v16 - v14];
      v19 = v18;
      if (v16 != v14)
      {
        v20 = &v17[v16 - v14];
        do
        {
          v6 = *((_OWORD *)v16 - 2);
          v7 = *(_OWORD *)(v16 - 20);
          v19 = v20 - 32;
          *(_OWORD *)(v20 - 20) = v7;
          *((_OWORD *)v20 - 2) = v6;
          v16 -= 32;
          v20 -= 32;
        }
        while (v16 != v14);
      }
      *(_QWORD *)(a2 + 16) = v19;
      *(_QWORD *)(a2 + 24) = v18;
      *(_QWORD *)(a2 + 32) = &v17[0x5555555555555560 * ((v12 - v9) >> 2)];
      if (v14)
      {
        operator delete(v14);
        v9 = (char *)v42;
        v12 = v43;
      }
    }
    if (v9 != v12)
    {
      v21 = *(char **)(a2 + 24);
      do
      {
        LODWORD(v6) = *((_DWORD *)v9 + 2);
        *(_QWORD *)&v7 = *(_QWORD *)v9;
        v23 = *(_QWORD *)(a2 + 32);
        if ((unint64_t)v21 < v23)
        {
          *(_QWORD *)v21 = v7;
          *((_DWORD *)v21 + 2) = v6;
          *((_QWORD *)v21 + 2) = 0x3FF0000000000000;
          v22 = v21 + 32;
          *((_DWORD *)v21 + 6) = 0;
        }
        else
        {
          v24 = (char *)*v13;
          v25 = (v21 - (_BYTE *)*v13) >> 5;
          v26 = v25 + 1;
          if ((unint64_t)(v25 + 1) >> 59)
            sub_22316E078();
          v27 = v23 - (_QWORD)v24;
          if (v27 >> 4 > v26)
            v26 = v27 >> 4;
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFE0)
            v28 = 0x7FFFFFFFFFFFFFFLL;
          else
            v28 = v26;
          if (v28)
          {
            DWORD2(v7) = *((_DWORD *)v9 + 2);
            v37 = v7;
            v38 = v6;
            if (v28 >> 59)
              sub_223174E94();
            v29 = (char *)operator new(32 * v28);
            v7 = v37;
            v6 = v38;
          }
          else
          {
            v29 = 0;
          }
          v30 = &v29[32 * v25];
          *(_QWORD *)v30 = v7;
          *((_DWORD *)v30 + 2) = v6;
          *((_QWORD *)v30 + 2) = 0x3FF0000000000000;
          *((_DWORD *)v30 + 6) = 0;
          v31 = v30;
          if (v21 != v24)
          {
            do
            {
              v6 = *((_OWORD *)v21 - 2);
              v7 = *(_OWORD *)(v21 - 20);
              *(_OWORD *)(v31 - 20) = v7;
              *((_OWORD *)v31 - 2) = v6;
              v31 -= 32;
              v21 -= 32;
            }
            while (v21 != v24);
            v21 = (char *)*v13;
          }
          v22 = v30 + 32;
          *(_QWORD *)(a2 + 16) = v31;
          *(_QWORD *)(a2 + 24) = v30 + 32;
          *(_QWORD *)(a2 + 32) = &v29[32 * v28];
          if (v21)
            operator delete(v21);
        }
        *(_QWORD *)(a2 + 24) = v22;
        v9 += 12;
        v21 = v22;
      }
      while (v9 != v12);
    }
    if (v36 == 2)
    {
      __p = 0;
      v40 = 0;
      v41 = 0;
      sub_2231B623C(a1, (uint64_t)&__p);
      v33 = (unsigned __int8 *)__p;
      v32 = v40;
      if (v40 - (_BYTE *)__p != (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 5)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/include/Reconstruction/Frame/JasperCloudsIO.h", 79, (uint64_t)"flags.size() == data.echos.size()", 33, (uint64_t)"Size mismatch", 13, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v33 = (unsigned __int8 *)__p;
        v32 = v40;
      }
      if (v33 != v32)
      {
        v34 = 24;
        do
        {
          v35 = *v33++;
          *(_DWORD *)((char *)*v13 + v34) = v35;
          v34 += 32;
        }
        while (v33 != v32);
        v32 = (unsigned __int8 *)__p;
      }
      if (v32)
      {
        v40 = v32;
        operator delete(v32);
      }
    }
    if (v42)
    {
      v43 = (char *)v42;
      operator delete(v42);
    }
  }
}

void sub_2231B6054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  void *v21;

  if (__p)
  {
    operator delete(__p);
    v21 = a19;
    if (!a19)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v21 = a19;
    if (!a19)
      goto LABEL_3;
  }
  operator delete(v21);
  _Unwind_Resume(exception_object);
}

void sub_2231B60AC(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  int v18;

  v5 = *(_DWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 2) >= a2)
  {
    if (a2)
    {
      v12 = 12 * ((12 * a2 - 12) / 0xC) + 12;
      bzero(*(void **)(a1 + 8), v12);
      v5 = (_DWORD *)((char *)v5 + v12);
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_DWORD **)a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(_QWORD *)a1) >> 2);
    v8 = v7 + a2;
    if (v7 + a2 > 0x1555555555555555)
      sub_22316E078();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 2);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0xAAAAAAAAAAAAAAALL)
      v10 = 0x1555555555555555;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x1555555555555555)
        sub_223174E94();
      v11 = (char *)operator new(12 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[12 * v7];
    v14 = &v11[12 * v10];
    v15 = 12 * ((12 * a2 - 12) / 0xC) + 12;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        v17 = *(_QWORD *)(v5 - 3);
        v5 -= 3;
        v18 = v5[2];
        *(_QWORD *)(v13 - 12) = v17;
        v13 -= 12;
        *((_DWORD *)v13 + 2) = v18;
      }
      while (v5 != v6);
      v5 = *(_DWORD **)a1;
    }
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v16;
    *(_QWORD *)(a1 + 16) = v14;
    if (v5)
      operator delete(v5);
  }
}

void sub_2231B623C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  size_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  char *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  __int128 v21;
  char *v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  uint64_t v31[2];

  v30 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  sub_2245543E0(a1, &v30);
  v4 = v30;
  v5 = *(char **)a2;
  v6 = *(char **)(a2 + 8);
  v7 = v6;
  v8 = (unint64_t)&v6[-*(_QWORD *)a2];
  v9 = v30 - v8;
  if (v30 <= v8)
  {
    v15 = *(char **)(a2 + 8);
    if (v30 >= v8)
      goto LABEL_32;
    v15 = &v5[v30];
LABEL_17:
    *(_QWORD *)(a2 + 8) = v15;
    goto LABEL_32;
  }
  v10 = *(_QWORD *)(a2 + 16);
  if (v10 - (uint64_t)v6 >= v9)
  {
    v15 = &v6[v9];
    bzero(*(void **)(a2 + 8), v30 - v8);
    goto LABEL_17;
  }
  if ((v30 & 0x8000000000000000) != 0)
    sub_22316E078();
  v11 = v10 - (_QWORD)v5;
  v12 = 2 * v11;
  if (2 * v11 <= v30)
    v12 = v30;
  if (v11 >= 0x3FFFFFFFFFFFFFFFLL)
    v13 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v13 = v12;
  v14 = (char *)operator new(v13);
  v29 = &v14[v13];
  v15 = &v14[v4];
  v16 = &v14[v8];
  bzero(&v14[v8], v9);
  if (v6 == v5)
    goto LABEL_30;
  if (v8 >= 8 && (unint64_t)(v5 - v14) >= 0x20)
  {
    if (v8 < 0x20)
    {
      v17 = 0;
      goto LABEL_22;
    }
    v17 = v8 & 0xFFFFFFFFFFFFFFE0;
    v18 = v6 - 16;
    v19 = &v14[v6 - 16 - v5];
    v20 = v8 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v21 = *(_OWORD *)v18;
      *((_OWORD *)v19 - 1) = *((_OWORD *)v18 - 1);
      *(_OWORD *)v19 = v21;
      v19 -= 32;
      v18 -= 32;
      v20 -= 32;
    }
    while (v20);
    if (v8 == v17)
      goto LABEL_29;
    if ((v8 & 0x18) != 0)
    {
LABEL_22:
      v7 = &v6[-(v8 & 0xFFFFFFFFFFFFFFF8)];
      v16 -= v8 & 0xFFFFFFFFFFFFFFF8;
      v22 = &v6[-v17 - 8];
      v23 = (char *)(v22 - v5);
      v24 = v17 - (v8 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v25 = *(_QWORD *)v22;
        v22 -= 8;
        *(_QWORD *)&v23[(_QWORD)v14] = v25;
        v23 -= 8;
        v24 += 8;
      }
      while (v24);
      if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_29;
      goto LABEL_27;
    }
    v16 -= v17;
    v7 = &v6[-v17];
  }
LABEL_27:
  v26 = v16 - 1;
  do
  {
    v27 = *--v7;
    *v26-- = v27;
  }
  while (v7 != v5);
LABEL_29:
  v7 = v5;
  v16 = v14;
LABEL_30:
  *(_QWORD *)a2 = v16;
  *(_QWORD *)(a2 + 8) = v15;
  *(_QWORD *)(a2 + 16) = v29;
  if (v7)
  {
    operator delete(v7);
    v15 = *(char **)(a2 + 8);
  }
LABEL_32:
  v28 = *(_QWORD *)a2;
  v31[0] = (uint64_t)&v15[-*(_QWORD *)a2];
  v31[1] = v28;
  sub_224554994(a1, v31);
}

void sub_2231B6444(uint64_t a1, char **a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  _QWORD v9[2];

  v8 = (a2[1] - *a2) >> 5;
  sub_2245543E0(a1, &v8);
  v5 = *a2;
  v4 = a2[1];
  v6 = (v4 - *a2) >> 5;
  if (v8 <= v6)
  {
    if (v8 < v6)
    {
      v4 = &v5[32 * v8];
      a2[1] = v4;
    }
  }
  else
  {
    sub_2231B6534(a2, v8 - v6);
    v5 = *a2;
    v4 = a2[1];
  }
  if (v4 != v5)
  {
    v7 = v4;
    do
    {
      LODWORD(v9[0]) = 1;
      sub_224554030(a1, v9);
      v9[0] = 3;
      v9[1] = v5;
      sub_224554C3C(a1, v9);
      sub_2245545FC(a1, (double *)v5 + 2);
      LODWORD(v9[0]) = 1;
      sub_224554030(a1, v9);
      sub_224553F78(a1, (_DWORD *)v5 + 6);
      v5 += 32;
    }
    while (v5 != v7);
  }
}

void sub_2231B6534(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;
  __int128 v17;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 5)
  {
    if (a2)
    {
      v12 = 32 * a2;
      bzero(a1[1], 32 * a2);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = (v5 - *a1) >> 5;
    v8 = v7 + a2;
    if ((v7 + a2) >> 59)
      sub_22316E078();
    v9 = v4 - v6;
    if (v9 >> 4 > v8)
      v8 = v9 >> 4;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0)
      v10 = 0x7FFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 59)
        sub_223174E94();
      v11 = (char *)operator new(32 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[32 * v7];
    v14 = 32 * a2;
    v15 = &v11[32 * v10];
    bzero(v13, v14);
    v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        v17 = *((_OWORD *)v5 - 2);
        *(_OWORD *)(v13 - 20) = *(_OWORD *)(v5 - 20);
        *((_OWORD *)v13 - 2) = v17;
        v13 -= 32;
        v5 -= 32;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v15;
    if (v5)
      operator delete(v5);
  }
}

void sub_2231B6664(uint64_t a1, void **a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;

  v9 = 0x4FA4FA4FA4FA4FA5 * (((_BYTE *)a2[1] - (_BYTE *)*a2) >> 2);
  sub_2245543E0(a1, &v9);
  v5 = (char *)*a2;
  v4 = (char *)a2[1];
  v6 = 0x4FA4FA4FA4FA4FA5 * ((v4 - (_BYTE *)*a2) >> 2);
  if (v9 <= v6)
  {
    if (v9 < v6)
    {
      v4 = &v5[180 * v9];
      a2[1] = v4;
    }
  }
  else
  {
    sub_22319A960(a2, v9 - v6);
    v5 = (char *)*a2;
    v4 = (char *)a2[1];
  }
  if (v4 != v5)
  {
    v7 = (unsigned __int128)((v4 - v5) * (__int128)0x2D82D82D82D82D83) >> 64;
    v8 = 180 * ((v7 >> 5) + ((unint64_t)v7 >> 63));
    do
    {
      v10 = 2;
      sub_224554030(a1, &v10);
      sub_2231B675C(a1, (uint64_t)v5, v10);
      v5 += 180;
      v8 -= 180;
    }
    while (v8);
  }
}

void sub_2231B675C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = 33;
  v7 = a2;
  sub_224554C3C(a1, &v6);
  sub_224553CE8(a1, (_BYTE *)(a2 + 132));
  sub_2245544C4(a1, (float *)(a2 + 136));
  LODWORD(v6) = 1;
  sub_224554030(a1, &v6);
  sub_2245544C4(a1, (float *)(a2 + 140));
  sub_2245544C4(a1, (float *)(a2 + 144));
  sub_2245544C4(a1, (float *)(a2 + 148));
  sub_2245544C4(a1, (float *)(a2 + 152));
  sub_2245544C4(a1, (float *)(a2 + 156));
  sub_2245544C4(a1, (float *)(a2 + 160));
  if (a3 >= 2)
  {
    sub_224553CE8(a1, (_BYTE *)(a2 + 164));
    v6 = 3;
    v7 = a2 + 168;
    sub_224554C3C(a1, &v6);
  }
}

void sub_2231B6844(uint64_t a1, char **a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;

  v8 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  sub_2245543E0(a1, &v8);
  v5 = *a2;
  v4 = a2[1];
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3);
  if (v8 <= v6)
  {
    if (v8 < v6)
    {
      v4 = &v5[24 * v8];
      a2[1] = v4;
    }
  }
  else
  {
    sub_2231B6918(a2, v8 - v6);
    v5 = *a2;
    v4 = a2[1];
  }
  if (v4 != v5)
  {
    v7 = v4;
    do
    {
      v9 = 3;
      v10 = v5;
      sub_224554A74(a1, &v9);
      v9 = 3;
      v10 = v5 + 12;
      sub_224554C3C(a1, &v9);
      v5 += 24;
    }
    while (v5 != v7);
  }
}

void sub_2231B6918(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  __int128 v17;

  v5 = a1[1];
  v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_22316E078();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        sub_223174E94();
      v11 = (char *)operator new(24 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[24 * v7];
    v14 = &v11[24 * v10];
    v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        v17 = *(_OWORD *)(v5 - 24);
        *((_QWORD *)v13 - 1) = *((_QWORD *)v5 - 1);
        *(_OWORD *)(v13 - 24) = v17;
        v13 -= 24;
        v5 -= 24;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
      operator delete(v5);
  }
}

uint64_t sub_2231B6AB4(uint64_t a1)
{
  sub_22416BC94(a1 + 8);
  sub_22416BC94(a1 + 112);
  sub_22416BC94(a1 + 216);
  sub_22416BC94(a1 + 320);
  sub_22416BC94(a1 + 424);
  return a1;
}

void sub_2231B6B1C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_22319A588(v4);
  sub_22319A588(v3);
  sub_22319A588(v2);
  sub_22319A588(v1);
  _Unwind_Resume(a1);
}

void sub_2231B6B58(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22319A588(v1);
  _Unwind_Resume(a1);
}

void sub_2231B6B6C(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;

  v6 = a2 + 8;
  v17 = 2;
  sub_224554030((uint64_t)a1, &v17);
  if (v17 <= 1)
  {
    sub_2231B31EC(a1, v6, v17);
  }
  else
  {
    sub_2231B1308(a1 + 2);
    sub_2231B31EC(a1, v6, 2u);
    v7 = a1[4];
    v8 = *(_QWORD *)(v7 - 16) - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2) + *(_QWORD *)(v7 - 8);
    if (v8)
      (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v8);
    a1[4] -= 16;
  }
  v17 = 2;
  sub_224554030((uint64_t)a1, &v17);
  if (v17 <= 1)
  {
    sub_2231B31EC(a1, a2 + 112, v17);
    if (a3 < 3)
      goto LABEL_17;
    goto LABEL_12;
  }
  sub_2231B1308(a1 + 2);
  sub_2231B31EC(a1, a2 + 112, 2u);
  v9 = a1[4];
  v10 = *(_QWORD *)(v9 - 16) - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2) + *(_QWORD *)(v9 - 8);
  if (v10)
    (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v10);
  a1[4] -= 16;
  if (a3 >= 3)
  {
LABEL_12:
    v17 = 2;
    sub_224554030((uint64_t)a1, &v17);
    if (v17 <= 1)
    {
      sub_2231B31EC(a1, a2 + 216, v17);
    }
    else
    {
      sub_2231B1308(a1 + 2);
      sub_2231B31EC(a1, a2 + 216, 2u);
      v11 = a1[4];
      v12 = *(_QWORD *)(v11 - 16) - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2) + *(_QWORD *)(v11 - 8);
      if (v12)
        (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v12);
      a1[4] -= 16;
    }
  }
LABEL_17:
  v17 = 2;
  sub_224554030((uint64_t)a1, &v17);
  if (v17 <= 1)
  {
    sub_2231B31EC(a1, a2 + 320, v17);
  }
  else
  {
    sub_2231B1308(a1 + 2);
    sub_2231B31EC(a1, a2 + 320, 2u);
    v13 = a1[4];
    v14 = *(_QWORD *)(v13 - 16) - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2) + *(_QWORD *)(v13 - 8);
    if (v14)
      (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v14);
    a1[4] -= 16;
  }
  v17 = 2;
  sub_224554030((uint64_t)a1, &v17);
  if (v17 <= 1)
  {
    sub_2231B31EC(a1, a2 + 424, v17);
  }
  else
  {
    sub_2231B1308(a1 + 2);
    sub_2231B31EC(a1, a2 + 424, 2u);
    v15 = a1[4];
    v16 = *(_QWORD *)(v15 - 16) - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2) + *(_QWORD *)(v15 - 8);
    if (v16)
      (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v16);
    a1[4] -= 16;
  }
}

void sub_2231B6E98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;

  sub_224517DF4(&v16);
  sub_2231BA428(a2, (uint64_t)&v16);
  sub_224518968(&v15, &v16);
  v5 = v15;
  v15 = 0uLL;
  v6 = *(std::__shared_weak_count **)(a3 + 8);
  *(_OWORD *)a3 = v5;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_2231B6FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231B6FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231B6FE0(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  int64_t v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void **v29;
  void **v30;
  void *v31;
  __int128 v32;
  void *v33[2];
  void *__p[2];
  __int128 v35;
  unsigned int v36;

  *(_OWORD *)__p = 0u;
  v35 = 0u;
  *(_OWORD *)v33 = 0u;
  sub_2231B7368(a1, (uint64_t)v33);
  *(_QWORD *)&v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (unint64_t)__p[1]) >> 3);
  sub_2245543E0(a1, &v32);
  v4 = (char *)v35;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (unint64_t)__p[1]) >> 3);
  v6 = v32 - v5;
  if ((unint64_t)v32 <= v5)
  {
    if ((unint64_t)v32 >= v5)
    {
      v7 = (char *)__p[1];
      v8 = v35 - (unint64_t)__p[1];
      if ((void *)v35 == __p[1])
        goto LABEL_22;
    }
    else
    {
      v9 = (char *)__p[1] + 24 * v32;
      while (v4 != v9)
      {
        v10 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
        if (v10)
        {
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldaxr(p_shared_owners);
          while (__stlxr(v12 - 1, p_shared_owners));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v10->__on_zero_shared)(v10, v6);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
        v4 -= 24;
      }
      *(_QWORD *)&v35 = v9;
      v7 = (char *)__p[1];
      v8 = v9 - (char *)__p[1];
      if (v9 == __p[1])
        goto LABEL_22;
    }
  }
  else
  {
    sub_2231B7814((uint64_t *)&__p[1], v6);
    v7 = (char *)__p[1];
    v8 = v35 - (unint64_t)__p[1];
    if ((void *)v35 == __p[1])
      goto LABEL_22;
  }
  v13 = 24 * (v8 / 24);
  do
  {
    while (1)
    {
      v36 = 2;
      sub_224554030(a1, &v36);
      if (v36 > 1)
        break;
      sub_2231B7A44((uint64_t)&v36, a1, (uint64_t)v7);
      v7 += 24;
      v13 -= 24;
      if (!v13)
        goto LABEL_22;
    }
    sub_2231B1308((_QWORD *)(a1 + 16));
    sub_2231B7C08(a1, (uint64_t)v7);
    v14 = *(_QWORD *)(a1 + 32);
    v15 = *(_QWORD *)(v14 - 16)
        - (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 32))(a1 + 16)
        + *(_QWORD *)(v14 - 8);
    if (v15)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 16) + 40))(a1 + 16, v15);
    *(_QWORD *)(a1 + 32) -= 16;
    v7 += 24;
    v13 -= 24;
  }
  while (v13);
LABEL_22:
  sub_22451907C((uint64_t *)v33, (void ***)&v32);
  v16 = v32;
  v32 = 0uLL;
  v17 = *(std::__shared_weak_count **)(a2 + 8);
  *(_OWORD *)a2 = v16;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
  if (*((_QWORD *)&v32 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = (char *)__p[1];
  if (__p[1])
  {
    v24 = (char *)v35;
    v25 = __p[1];
    if ((void *)v35 != __p[1])
    {
      do
      {
        v26 = (std::__shared_weak_count *)*((_QWORD *)v24 - 1);
        if (v26)
        {
          v27 = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        v24 -= 24;
      }
      while (v24 != v23);
      v25 = __p[1];
    }
    *(_QWORD *)&v35 = v23;
    operator delete(v25);
  }
  v29 = (void **)v33[0];
  if (v33[0])
  {
    v30 = (void **)v33[1];
    v31 = v33[0];
    if (v33[1] != v33[0])
    {
      do
      {
        if (*((char *)v30 - 1) < 0)
          operator delete(*(v30 - 3));
        v30 -= 3;
      }
      while (v30 != v29);
      v31 = v33[0];
    }
    v33[1] = v29;
    operator delete(v31);
  }
}

void sub_2231B7318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2231A6210((void **)va);
  _Unwind_Resume(a1);
}

void sub_2231B732C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2231A6210((void **)va);
  _Unwind_Resume(a1);
}

void sub_2231B7340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2231A6210((void **)va);
  _Unwind_Resume(a1);
}

void sub_2231B7354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2231A6210((void **)va);
  _Unwind_Resume(a1);
}

void sub_2231B7368(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  _QWORD v9[2];

  v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  sub_2245543E0(a1, &v8);
  v4 = *(_QWORD *)(a2 + 8);
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *(_QWORD *)a2) >> 3);
  if (v8 <= v5)
  {
    if (v8 >= v5)
    {
      v6 = *(_QWORD *)(a2 + 8);
    }
    else
    {
      v6 = *(_QWORD *)a2 + 24 * v8;
      while (v4 != v6)
      {
        if (*(char *)(v4 - 1) < 0)
          operator delete(*(void **)(v4 - 24));
        v4 -= 24;
      }
      *(_QWORD *)(a2 + 8) = v6;
    }
  }
  else
  {
    sub_2231B744C((char **)a2, v8 - v5);
    v6 = *(_QWORD *)(a2 + 8);
  }
  v7 = *(char **)a2;
  v9[0] = 0xAAAAAAAAAAAAAAABLL * ((v6 - *(_QWORD *)a2) >> 3);
  v9[1] = v7;
  sub_224554D1C(a1, v9);
}

void sub_2231B744C(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  __int128 v17;
  char *v18;

  v5 = a1[1];
  v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_22316E078();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        sub_223174E94();
      v11 = (char *)operator new(24 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[24 * v7];
    v14 = &v11[24 * v10];
    v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 == v6)
    {
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v14;
      if (v5)
LABEL_24:
        operator delete(v5);
    }
    else
    {
      do
      {
        v17 = *(_OWORD *)(v5 - 24);
        *((_QWORD *)v13 - 1) = *((_QWORD *)v5 - 1);
        *(_OWORD *)(v13 - 24) = v17;
        v13 -= 24;
        *((_QWORD *)v5 - 2) = 0;
        *((_QWORD *)v5 - 1) = 0;
        *((_QWORD *)v5 - 3) = 0;
        v5 -= 24;
      }
      while (v5 != v6);
      v18 = *a1;
      v5 = a1[1];
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v14;
      if (v5 != v18)
      {
        do
        {
          if (*(v5 - 1) < 0)
            operator delete(*((void **)v5 - 3));
          v5 -= 24;
        }
        while (v5 != v18);
        v5 = v18;
      }
      if (v5)
        goto LABEL_24;
    }
  }
}

void sub_2231B7640(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  char v20;

  v18 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  sub_2245543E0(a1, &v18);
  v4 = a2[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3);
  v6 = v18 - v5;
  if (v18 <= v5)
  {
    if (v18 >= v5)
    {
      v7 = *a2;
      v10 = v4 - v7;
      if (v4 == v7)
        return;
    }
    else
    {
      v11 = *a2 + 24 * v18;
      while (v4 != v11)
      {
        v12 = *(std::__shared_weak_count **)(v4 - 8);
        if (v12)
        {
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v12->__on_zero_shared)(v12, v6);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v4 -= 24;
      }
      a2[1] = v11;
      v7 = *a2;
      v10 = v11 - v7;
      if (v11 == v7)
        return;
    }
  }
  else
  {
    sub_2231B7814(a2, v6);
    v9 = a2;
    v7 = *a2;
    v8 = v9[1];
    v10 = v8 - v7;
    if (v8 == v7)
      return;
  }
  v15 = 24 * (v10 / 24);
  do
  {
    while (1)
    {
      v19 = 2;
      sub_224554030(a1, &v19);
      if (v19 > 1)
        break;
      sub_2231B7A44((uint64_t)&v20, a1, v7);
      v7 += 24;
      v15 -= 24;
      if (!v15)
        return;
    }
    sub_2231B1308((_QWORD *)(a1 + 16));
    sub_2231B7C08(a1, v7, 2);
    v16 = *(_QWORD *)(a1 + 32);
    v17 = *(_QWORD *)(v16 - 16)
        - (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 32))(a1 + 16)
        + *(_QWORD *)(v16 - 8);
    if (v17)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 16) + 40))(a1 + 16, v17);
    *(_QWORD *)(a1 + 32) -= 16;
    v7 += 24;
    v15 -= 24;
  }
  while (v15);
}

void sub_2231B7814(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;

  v4 = a1[2];
  v5 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      v11 = v5 + 24 * a2;
      v12 = 24 * a2;
      do
      {
        sub_224517920(v5);
        v5 += 24;
        v12 -= 24;
      }
      while (v12);
      v5 = v11;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    v7 = v6 + a2;
    if (v6 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_22316E078();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x555555555555555)
      v9 = 0xAAAAAAAAAAAAAAALL;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL)
        sub_223174E94();
      v10 = (char *)operator new(24 * v9);
    }
    else
    {
      v10 = 0;
    }
    v13 = (uint64_t)&v10[24 * v6];
    v24 = v13;
    v26 = &v10[24 * v9];
    v14 = 24 * a2;
    v15 = v13 + 24 * a2;
    do
    {
      sub_224517920(v13);
      v13 += 24;
      v14 -= 24;
    }
    while (v14);
    v17 = *a1;
    v16 = a1[1];
    v18 = v24;
    if (v16 == *a1)
    {
      v20 = a1[1];
    }
    else
    {
      do
      {
        v19 = *(_WORD *)(v16 - 24);
        v16 -= 24;
        *(_WORD *)(v18 - 24) = v19;
        v18 -= 24;
        *(_OWORD *)(v18 + 8) = *(_OWORD *)(v16 + 8);
        *(_QWORD *)(v16 + 8) = 0;
        *(_QWORD *)(v16 + 16) = 0;
      }
      while (v16 != v17);
      v20 = *a1;
      v16 = a1[1];
    }
    *a1 = v18;
    a1[1] = v15;
    a1[2] = (uint64_t)v26;
    if (v16 == v20)
    {
      if (!v16)
        return;
LABEL_34:
      operator delete((void *)v16);
      return;
    }
    do
    {
      v25 = v16 - 24;
      v21 = *(std::__shared_weak_count **)(v16 - 8);
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      v16 = v25;
    }
    while (v25 != v20);
    v16 = v20;
    if (v20)
      goto LABEL_34;
  }
}

void sub_2231B7A24(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2231B7A2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2231A72D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231B7A44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  __int16 v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  sub_224517920((uint64_t)&v20);
  sub_2231B97AC(a2, (uint64_t)&v20);
  v5 = v20;
  sub_2231B9338(&v23, (uint64_t)&v21);
  sub_2231B9338(&v19, (uint64_t)&v23);
  v6 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  *(_WORD *)a3 = v5;
  v9 = v19;
  v19 = 0uLL;
  v10 = *(std::__shared_weak_count **)(a3 + 16);
  *(_OWORD *)(a3 + 8) = v9;
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v22;
  if (v22)
  {
    v17 = (unint64_t *)&v22->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_2231B7BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va1);
  sub_223197300((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231B7BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_223197300((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231B7BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_223197300((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231B7C08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  __int128 v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  __int128 v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  char *v52;
  char *v53;
  void *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  char *v71;
  char *v72;
  void *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  CFMutableArrayRef v77;
  std::__shared_weak_count *v78;
  void *v79[2];
  void *v80;
  void *v81[2];
  uint64_t v82;
  void *v83[2];
  void *__p;
  void *v85;

  LOWORD(v83[0]) = 0;
  sub_224553E8C(a1, v83);
  v10 = LOWORD(v83[0]);
  *(_WORD *)a2 = v83[0];
  switch(v10)
  {
    case 0:
      LOBYTE(v83[0]) = 7;
      sub_22454CAB8((uint64_t)&v83[1]);
      LODWORD(v81[0]) = 2;
      sub_224554030(a1, v81);
      sub_2231B8A34((uint64_t)v81, a1, (unsigned __int8 *)v83, v81[0]);
      v11 = sub_22454B26C((uint64_t)v83);
      sub_224532914(v79, v11);
      sub_2231B844C(v81, (uint64_t)v79);
      v12 = *(_OWORD *)v81;
      v81[0] = 0;
      v81[1] = 0;
      v13 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v12;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v16 = (std::__shared_weak_count *)v81[1];
      if (v81[1])
      {
        v17 = (unint64_t *)((char *)v81[1] + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v19 = (std::__shared_weak_count *)v79[1];
      if (v79[1])
      {
        v20 = (unint64_t *)((char *)v79[1] + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      if (__p)
      {
        v85 = __p;
        operator delete(__p);
      }
      return;
    case 1:
      v83[0] = 0;
      v83[1] = 0;
      __p = 0;
      sub_224554814(a1, v83);
      sub_224527BAC((uint64_t)v83, (CFStringRef *)v79);
      sub_2231B855C(v81, (uint64_t)v79);
      v22 = *(_OWORD *)v81;
      v81[0] = 0;
      v81[1] = 0;
      v23 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v22;
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v26 = (std::__shared_weak_count *)v81[1];
      if (v81[1])
      {
        v27 = (unint64_t *)((char *)v81[1] + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v29 = (std::__shared_weak_count *)v79[1];
      if (v79[1])
      {
        v30 = (unint64_t *)((char *)v79[1] + 8);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      if (SHIBYTE(__p) < 0)
        operator delete(v83[0]);
      return;
    case 2:
      LOBYTE(v79[0]) = 0;
      sub_224554730(a1, v79);
      sub_22452795C(v79, (std::__shared_weak_count_vtbl **)v81);
      sub_2231B866C(v83, (uint64_t)v81);
      v32 = *(_OWORD *)v83;
      v83[0] = 0;
      v83[1] = 0;
      v33 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v32;
      if (v33)
      {
        v34 = (unint64_t *)&v33->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v36 = (std::__shared_weak_count *)v83[1];
      if (v83[1])
      {
        v37 = (unint64_t *)((char *)v83[1] + 8);
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      v39 = (std::__shared_weak_count *)v81[1];
      if (!v81[1])
        return;
      v40 = (unint64_t *)((char *)v81[1] + 8);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      break;
    case 3:
      v81[0] = 0;
      v81[1] = 0;
      v82 = 0;
      sub_2231B7640(a1, (uint64_t *)v81);
      v83[1] = 0;
      __p = 0;
      v83[0] = 0;
      sub_2231B90C8((uint64_t)v83, 0xAAAAAAAAAAAAAAABLL * (((char *)v81[1] - (char *)v81[0]) >> 3));
      sub_2231B91D0((uint64_t)v81[0], (uint64_t)v81[1], (uint64_t)v83);
      *(_OWORD *)v79 = *(_OWORD *)v83;
      v80 = __p;
      sub_2231B9590((uint64_t *)v79, &v77);
      sub_2231B877C(v83, (uint64_t)&v77);
      v42 = *(_OWORD *)v83;
      v83[0] = 0;
      v83[1] = 0;
      v43 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v42;
      if (v43)
      {
        v44 = (unint64_t *)&v43->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      v46 = (std::__shared_weak_count *)v83[1];
      if (v83[1])
      {
        v47 = (unint64_t *)((char *)v83[1] + 8);
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      v49 = v78;
      if (v78)
      {
        v50 = (unint64_t *)&v78->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      v52 = (char *)v79[0];
      if (v79[0])
      {
        v53 = (char *)v79[1];
        v54 = v79[0];
        if (v79[1] != v79[0])
        {
          do
          {
            v55 = (std::__shared_weak_count *)*((_QWORD *)v53 - 1);
            if (v55)
            {
              v56 = (unint64_t *)&v55->__shared_owners_;
              do
                v57 = __ldaxr(v56);
              while (__stlxr(v57 - 1, v56));
              if (!v57)
              {
                ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                std::__shared_weak_count::__release_weak(v55);
              }
            }
            v53 -= 16;
          }
          while (v53 != v52);
          v54 = v79[0];
        }
        v79[1] = v52;
        operator delete(v54);
      }
      v71 = (char *)v81[0];
      if (v81[0])
      {
        v72 = (char *)v81[1];
        v73 = v81[0];
        if (v81[1] != v81[0])
        {
          do
          {
            v74 = (std::__shared_weak_count *)*((_QWORD *)v72 - 1);
            if (v74)
            {
              v75 = (unint64_t *)&v74->__shared_owners_;
              do
                v76 = __ldaxr(v75);
              while (__stlxr(v76 - 1, v75));
              if (!v76)
              {
                ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                std::__shared_weak_count::__release_weak(v74);
              }
            }
            v72 -= 24;
          }
          while (v72 != v71);
          v73 = v81[0];
        }
        v81[1] = v71;
        operator delete(v73);
      }
      return;
    case 4:
      sub_2245187B0(v83);
      LODWORD(v81[0]) = 2;
      sub_224554030(a1, v81);
      if (LODWORD(v81[0]) <= 1)
      {
        sub_2231B6E98((uint64_t)v81, a1, (uint64_t)v83);
      }
      else
      {
        sub_2231B1308((_QWORD *)(a1 + 16));
        sub_2231B6FE0(a1, v83, 2);
        v58 = *(_QWORD *)(a1 + 32);
        v59 = *(_QWORD *)(v58 - 16)
            - (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 32))(a1 + 16)
            + *(_QWORD *)(v58 - 8);
        if (v59)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 16) + 40))(a1 + 16, v59);
        *(_QWORD *)(a1 + 32) -= 16;
      }
      sub_2245182D8((uint64_t)v83, v79);
      sub_2231B8924(v81, (uint64_t)v79);
      v60 = *(_OWORD *)v81;
      v81[0] = 0;
      v81[1] = 0;
      v61 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v60;
      if (v61)
      {
        v62 = (unint64_t *)&v61->__shared_owners_;
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      v64 = (std::__shared_weak_count *)v81[1];
      if (v81[1])
      {
        v65 = (unint64_t *)((char *)v81[1] + 8);
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      v67 = (std::__shared_weak_count *)v79[1];
      if (v79[1])
      {
        v68 = (unint64_t *)((char *)v79[1] + 8);
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      v39 = (std::__shared_weak_count *)v83[1];
      if (!v83[1])
        return;
      v70 = (unint64_t *)((char *)v83[1] + 8);
      do
        v41 = __ldaxr(v70);
      while (__stlxr(v41 - 1, v70));
      break;
    default:
      sub_224574644(v4, v5, v6, v7, v8, v9);
  }
  if (!v41)
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
  }
}

void sub_2231B8334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2231B8350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231B8364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  sub_223167354((uint64_t)&a9);
  sub_2231B888C(&a11);
  sub_2231A62F0(&a15);
  _Unwind_Resume(a1);
}

void sub_2231B8390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, void *);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_2231B888C((void **)va1);
  sub_2231A62F0((void **)va);
  _Unwind_Resume(a1);
}

void sub_2231B83B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_2231A62F0((void **)va);
  _Unwind_Resume(a1);
}

void sub_2231B83C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2231B83D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25)
{
  sub_223167354((uint64_t)&a11);
  if (a24 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_2231B844C(_QWORD *a1, uint64_t a2)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v4 = *(const void **)a2;
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v17 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_2231A74D8(&v18, v4);
  v8 = v19;
  *a1 = v18;
  a1[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = v19;
    if (v19)
    {
      v12 = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (!v17)
    return a1;
  v14 = (unint64_t *)&v17->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_2231B8548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_2231B855C(_QWORD *a1, uint64_t a2)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v4 = *(const void **)a2;
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v17 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_2231A74D8(&v18, v4);
  v8 = v19;
  *a1 = v18;
  a1[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = v19;
    if (v19)
    {
      v12 = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (!v17)
    return a1;
  v14 = (unint64_t *)&v17->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_2231B8658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_2231B866C(_QWORD *a1, uint64_t a2)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v4 = *(const void **)a2;
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v17 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_2231A74D8(&v18, v4);
  v8 = v19;
  *a1 = v18;
  a1[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = v19;
    if (v19)
    {
      v12 = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (!v17)
    return a1;
  v14 = (unint64_t *)&v17->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_2231B8768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_2231B877C(_QWORD *a1, uint64_t a2)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v4 = *(const void **)a2;
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v17 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_2231A74D8(&v18, v4);
  v8 = v19;
  *a1 = v18;
  a1[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = v19;
    if (v19)
    {
      v12 = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (!v17)
    return a1;
  v14 = (unint64_t *)&v17->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_2231B8878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void **sub_2231B888C(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

_QWORD *sub_2231B8924(_QWORD *a1, uint64_t a2)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v4 = *(const void **)a2;
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v17 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_2231A74D8(&v18, v4);
  v8 = v19;
  *a1 = v18;
  a1[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = v19;
    if (v19)
    {
      v12 = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (!v17)
    return a1;
  v14 = (unint64_t *)&v17->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_2231B8A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2231B8A34(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unsigned int a4)
{
  uint64_t v6;
  int v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unsigned __int8 v12;

  if (a4 < 2)
  {
    sub_2231B8B00((uint64_t)&v11, a2, (uint64_t)a3);
  }
  else
  {
    v6 = a2 + 16;
    sub_2231B1308((_QWORD *)(a2 + 16));
    v12 = 0;
    sub_224553CE8(a2, &v12);
    v7 = v12;
    *a3 = v12;
    v8 = sub_2231B8BD8(v7, a2, (uint64_t)a3);
    v9 = *(_QWORD *)(a2 + 32);
    v10 = *(_QWORD *)(v9 - 16)
        - (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)(a2 + 16) + 32))(a2 + 16, v8)
        + *(_QWORD *)(v9 - 8);
    if (v10)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 40))(a2 + 16, v10);
    *(_QWORD *)(a2 + 32) -= 16;
  }
}

void sub_2231B8B00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  _BYTE v6[16];
  __int128 v7;
  uint64_t v8;
  char v9[8];
  uint64_t v10;
  void *__p;
  void *v12;

  v9[0] = 7;
  sub_22454CAB8((uint64_t)&v10);
  v6[0] = 0;
  sub_224553CE8(a2, v6);
  v9[0] = v6[0];
  sub_2231B8E50(v6[0], a2, (uint64_t)v9);
  sub_22454B1CC((uint64_t)v6, (uint64_t)v9);
  *(_BYTE *)a3 = v6[0];
  *(_BYTE *)(a3 + 8) = v6[8];
  v5 = *(void **)(a3 + 16);
  if (v5)
  {
    *(_QWORD *)(a3 + 24) = v5;
    operator delete(v5);
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
  }
  *(_OWORD *)(a3 + 16) = v7;
  *(_QWORD *)(a3 + 32) = v8;
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

