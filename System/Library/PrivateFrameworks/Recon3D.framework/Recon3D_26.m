void sub_223B7F6DC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_223B7F6F0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5FC38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223B7F700(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5FC38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223B7F730(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  v3 = a1[6];
  if (v3)
  {
    v4 = a1[7];
    v5 = (void *)a1[6];
    if (v4 != v3)
    {
      v6 = a1[7];
      do
      {
        v8 = *(void **)(v6 - 24);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *(_QWORD *)(v4 - 16) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = (void *)a1[6];
    }
    a1[7] = v3;
    operator delete(v5);
  }
  v9 = (void *)a1[3];
  if (v9)
  {
    a1[4] = v9;
    operator delete(v9);
  }
}

void sub_223B7F7D0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24EC5FC88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223B7F7E4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24EC5FC88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223B7F818(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void sub_223B7F834(uint64_t a1)
{
  char *v2;
  int v3;
  size_t v4;
  unint64_t v5;
  __int128 *p_dst;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int128 __p;
  char v15;
  __int128 __dst;
  unint64_t v17;

  v2 = (char *)operator new();
  v3 = *(char *)(a1 + 111);
  if (v3 >= 0)
    v4 = *(unsigned __int8 *)(a1 + 111);
  else
    v4 = *(_QWORD *)(a1 + 96);
  v5 = v4 + 45;
  if (v4 + 45 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  if (v5 <= 0x16)
  {
    v17 = 0;
    __dst = 0uLL;
    p_dst = &__dst;
    HIBYTE(v17) = v4 + 45;
LABEL_10:
    if (v3 >= 0)
      v9 = (const void *)(a1 + 88);
    else
      v9 = *(const void **)(a1 + 88);
    memmove(p_dst, v9, v4);
    goto LABEL_14;
  }
  v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17)
    v7 = v5 | 7;
  v8 = v7 + 1;
  p_dst = (__int128 *)operator new(v7 + 1);
  *((_QWORD *)&__dst + 1) = v4 + 45;
  v17 = v8 | 0x8000000000000000;
  *(_QWORD *)&__dst = p_dst;
  if (v4)
    goto LABEL_10;
LABEL_14:
  strcpy((char *)p_dst + v4, ".IOFilter.IOFilterKeyframes.KeyframeLogWeight");
  v15 = 0;
  LOBYTE(__p) = 0;
  sub_223B84904(v2, &__dst, &__p);
  v10 = (_QWORD *)operator new();
  *v10 = &off_24EC5FD38;
  v10[1] = 0;
  v10[2] = 0;
  v10[3] = v2;
  v11 = *(std::__shared_weak_count **)(a1 + 120);
  *(_QWORD *)(a1 + 112) = v2;
  *(_QWORD *)(a1 + 120) = v10;
  if (!v11)
    goto LABEL_18;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if ((v15 & 0x80000000) == 0)
    {
LABEL_19:
      if ((SHIBYTE(v17) & 0x80000000) == 0)
        return;
LABEL_23:
      operator delete((void *)__dst);
      return;
    }
  }
  else
  {
LABEL_18:
    if ((v15 & 0x80000000) == 0)
      goto LABEL_19;
  }
  operator delete((void *)__p);
  if (SHIBYTE(v17) < 0)
    goto LABEL_23;
}

void sub_223B7FA0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void **v17;
  void **v19;

  v19 = sub_223B84DA4(v17);
  MEMORY[0x227684CE8](v19, 0x10B2C405F636F13);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223B7FA44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (a17 < 0)
    operator delete(__p);
  MEMORY[0x227684CE8](v17, 0x10B2C405F636F13);
  _Unwind_Resume(a1);
}

uint64_t sub_223B7FA80(uint64_t a1, uint64_t a2, int32x4_t _Q0, int32x4_t a4, __n128 a5, double a6, double a7, double a8, float32x2_t a9)
{
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  char *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  char *v18;
  int v19;
  size_t v20;
  unint64_t v21;
  __int128 *p_dst;
  uint64_t v23;
  uint64_t v24;
  const void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  float32x2_t *v32;
  float32x4_t v38;
  float32x2_t v39;
  float32x4_t v40;
  int8x16_t v41;
  uint64_t v42;
  float32x4_t v43;
  char *v44;
  float v45;
  float v46;
  float32x2_t v47;
  float32x2_t v48;
  __int128 v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int32x4_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x2_t v56;
  float v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unsigned int v61;
  int8x8_t v63;
  float v64;
  float v65;
  float32x2_t v66;
  unsigned int v67;
  float32x2_t v68;
  unsigned int v69;
  float32x2_t v70;
  float32x2_t v71;
  unsigned __int32 v72;
  float32x2_t v73;
  __int32 v74;
  char *v75;
  std::__shared_weak_count *v76;
  __int128 __dst;
  unint64_t v78;
  int v79;
  int8x8_t v80;
  _OWORD v81[3];
  float32x2_t v82;
  unsigned __int32 v83;
  int v84;
  __int128 v85;
  __int128 __p;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  int v98;

  v14 = *(char **)(a1 + 112);
  v15 = *(std::__shared_weak_count **)(a1 + 120);
  v75 = v14;
  v76 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  if (!v14)
  {
    v18 = (char *)operator new();
    v19 = *(char *)(a1 + 111);
    if (v19 >= 0)
      v20 = *(unsigned __int8 *)(a1 + 111);
    else
      v20 = *(_QWORD *)(a1 + 96);
    v21 = v20 + 45;
    if (v20 + 45 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    if (v21 > 0x16)
    {
      v23 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v21 | 7) != 0x17)
        v23 = v21 | 7;
      v24 = v23 + 1;
      p_dst = (__int128 *)operator new(v23 + 1);
      *((_QWORD *)&__dst + 1) = v20 + 45;
      v78 = v24 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
      if (!v20)
      {
LABEL_18:
        strcpy((char *)p_dst + v20, ".IOFilter.IOFilterKeyframes.KeyframeLogWeight");
        BYTE7(v87) = 0;
        LOBYTE(__p) = 0;
        sub_223B84904(v18, &__dst, &__p);
        v26 = (std::__shared_weak_count *)operator new();
        v26->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5FD38;
        v26->__shared_owners_ = 0;
        v26->__shared_weak_owners_ = 0;
        v26[1].__vftable = (std::__shared_weak_count_vtbl *)v18;
        v75 = v18;
        v76 = v26;
        if (!v15)
          goto LABEL_22;
        v27 = (unint64_t *)&v15->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
          if ((SBYTE7(v87) & 0x80000000) == 0)
          {
LABEL_23:
            if ((SHIBYTE(v78) & 0x80000000) == 0)
              goto LABEL_24;
LABEL_49:
            operator delete((void *)__dst);
            goto LABEL_24;
          }
        }
        else
        {
LABEL_22:
          if ((SBYTE7(v87) & 0x80000000) == 0)
            goto LABEL_23;
        }
        operator delete((void *)__p);
        if ((SHIBYTE(v78) & 0x80000000) == 0)
          goto LABEL_24;
        goto LABEL_49;
      }
    }
    else
    {
      v78 = 0;
      __dst = 0uLL;
      p_dst = &__dst;
      HIBYTE(v78) = v20 + 45;
    }
    if (v19 >= 0)
      v25 = (const void *)(a1 + 88);
    else
      v25 = *(const void **)(a1 + 88);
    memmove(p_dst, v25, v20);
    goto LABEL_18;
  }
LABEL_24:
  _Q0.i32[0] = 1.0;
  v29 = *(int *)(a2 + 104);
  v30 = 0.0;
  v69 = 0;
  v67 = 0;
  a5.n128_u32[0] = 0;
  a4.i32[0] = 0;
  v9.i32[0] = 0;
  v10.i32[0] = 1.0;
  v11.i32[0] = 0;
  v65 = 1.0;
  if (v29 <= 4)
  {
    v31 = 4 * v29;
    v69 = *(_DWORD *)((char *)&unk_224667040 + v31);
    v67 = *(_DWORD *)((char *)&unk_224667054 + v31);
    a5.n128_u32[0] = *(_DWORD *)((char *)&unk_224667068 + v31);
    _Q0.i32[0] = *(_DWORD *)((char *)&unk_22466707C + v31);
    a4.i32[0] = *(_DWORD *)((char *)&unk_224667090 + v31);
    v9.i32[0] = *(_DWORD *)((char *)&unk_224667004 + v31);
    v10.i32[0] = *(_DWORD *)((char *)&unk_224667018 + v31);
    v11.i32[0] = *(_DWORD *)((char *)&unk_22466702C + v31);
    v65 = *(float *)((char *)&unk_2246670A4 + v31);
  }
  v32 = *(float32x2_t **)(a1 + 32);
  if (v32)
  {
    v70 = (float32x2_t)__PAIR64__(_Q0.u32[0], v69);
    v66 = (float32x2_t)__PAIR64__(a5.n128_u32[0], LODWORD(v65));
    v68 = (float32x2_t)__PAIR64__(a4.u32[0], v67);
    __asm
    {
      FMOV            V14.2S, #5.0
      FMOV            V0.2S, #1.0
    }
    v63 = *(int8x8_t *)_Q0.i8;
    _Q0.i32[1] = 1097110089;
    do
    {
      _Q0.i32[0] = v32[11].i32[0];
      *(float32x2_t *)a4.i8 = v32[10];
      v38 = (float32x4_t)a4;
      v38.i32[2] = _Q0.i32[0];
      v39 = vmla_f32(vmla_lane_f32(vmul_f32(v9, *(float32x2_t *)a4.i8), v11, *(float32x2_t *)a4.i8, 1), *(float32x2_t *)_Q0.i8, v10);
      v73 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v66, *(float *)a4.i32), v70, *(float32x2_t *)a4.i8, 1), v68, *(float *)_Q0.i32);
      v74 = v39.i32[0];
      a4.i32[0] = v32[5].i32[0];
      v39.i32[0] = v32[7].i32[0];
      a9.i32[0] = v32[9].i32[0];
      *(float32x2_t *)v40.f32 = vmla_f32(vmla_f32(vmul_f32(v32[4], 0), 0, v32[6]), _D14, v32[8]);
      *(float32x2_t *)&v40.u32[2] = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)a4.i8, 0), 0, v39), _D14, a9);
      v41 = (int8x16_t)vaddq_f32(v38, v40);
      v71 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v66, *(float *)v41.i32), v70, *(float32x2_t *)v41.i8, 1), v68, (float32x4_t)v41, 2);
      v72 = vmla_f32(vmla_lane_f32(vmul_f32(v9, *(float32x2_t *)v41.i8), v11, *(float32x2_t *)v41.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL), v10).u32[0];
      v42 = sub_223EB2BC0(a2, (uint64_t)&v73, &v71);
      _Q0.i32[0] = v42;
      if ((v42 & 0xFF00000000) == 0)
        *(float *)_Q0.i32 = 1.0;
      if (*(float *)_Q0.i32 > 0.0)
      {
        *(float *)a4.i32 = 1.0 - v32[12].f32[0];
        v43.i32[0] = 0;
        a5.n128_u32[0] = 953267991;
        if (*(float *)a4.i32 >= 0.0001)
        {
          v44 = v75;
          v45 = (float)((float)(1.0 - (float)((float)(*(float *)_Q0.i32 * 0.99) * *(float *)a4.i32)) * 0.5)
              + (float)((float)((float)(*(float *)_Q0.i32 * 0.99) * *(float *)a4.i32)
                      * (float)(v32[12].f32[1] / *(float *)a4.i32));
          v46 = logf(v45);
          *(float *)_Q0.i32 = logf(1.0 - v45);
          v43.f32[0] = v46 - *(float *)_Q0.i32;
          if (v44[48])
          {
            a4.i32[0] = 0;
            *(float *)&a4.i32[1] = v46 - *(float *)_Q0.i32;
            v79 = 0;
            v80 = vand_s8(v63, (int8x8_t)vcgt_f32(*(float32x2_t *)a4.i8, (float32x2_t)v43.u32[0]));
            *(float32x2_t *)_Q0.i8 = v32[4];
            _Q0.i32[2] = v32[5].i32[0];
            *(float32x2_t *)a4.i8 = v32[6];
            a4.i32[2] = v32[7].i32[0];
            v48 = v32[8];
            v64 = v43.f32[0];
            *(float32x2_t *)v43.f32 = v32[10];
            v43.i32[2] = v32[11].i32[0];
            *(_QWORD *)&v49 = vzip1q_s32(_Q0, a4).u64[0];
            v50 = (int8x16_t)vnegq_f32(v43);
            *((_QWORD *)&v49 + 1) = v48.u32[0];
            v47.i32[0] = v32[9].i32[0];
            v51 = (int8x16_t)vtrn2q_s32(_Q0, a4);
            v51.i32[2] = v48.i32[1];
            v52 = (int8x16_t)vzip2q_s32(_Q0, a4);
            v53 = (int32x4_t)v52;
            v53.i32[2] = v47.i32[0];
            v54 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)&v49, *(float *)v50.i32), *(float32x2_t *)v51.i8, *(float32x2_t *)v43.f32, 1), *(float32x2_t *)v52.i8, v43, 2);
            v55 = vmls_lane_f32(vmul_f32(v48, *(float32x2_t *)v50.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v48, 1), *(float32x2_t *)v43.f32, 1);
            v56 = (float32x2_t)vextq_s8(v50, v50, 8uLL).u64[0];
            v50.i32[3] = 0;
            v50.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v51, 0).i32[3];
            *(uint64_t *)((char *)v50.i64 + 4) = vextq_s8(v51, v52, 4uLL).u64[0];
            v53.i64[1] = vdupq_laneq_s32(v53, 2).u32[0];
            v81[1] = v50;
            v81[2] = v53;
            v81[0] = v49;
            v82 = v54;
            v83 = vmla_f32(v55, v56, v47).u32[0];
            v84 = 1065353216;
            v85 = xmmword_224651370;
            sub_223207E58(&v93, (int *)&v85);
            v57 = powf(fabsf(v64 / 4.5951), 0.33333);
            v87 = v94;
            v88 = v95;
            v89 = v96;
            v90 = v97;
            v91 = v98;
            v92 = 0xA0000000ALL;
            *((_QWORD *)&__p + 1) = &off_24EC20868;
            *(_QWORD *)&__p = &off_24EC207B8;
            sub_224002D14((uint64_t)&__p, (int32x2_t *)v81, (uint64_t *)&v79, (uint64_t)&__dst, v57);
            sub_22414E9E0((uint64_t)(v44 + 56), (uint64_t)&__dst);
            sub_22316F8F4((uint64_t *)&__dst);
            v43.f32[0] = v64;
          }
        }
        v30 = v30 + v43.f32[0];
      }
      v32 = (float32x2_t *)*v32;
    }
    while (v32);
  }
  v58 = v76;
  if (v76)
  {
    v59 = (unint64_t *)&v76->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *, int32x4_t, int32x4_t, __n128))v58->__on_zero_shared)(v58, _Q0, a4, a5);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  if (v30 > 0.0)
    v61 = 1;
  else
    v61 = 2;
  if (v30 == 0.0)
    return 0;
  else
    return v61;
}

void sub_223B800B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  void **v32;
  void **v34;

  v34 = sub_223B84DA4(v32);
  MEMORY[0x227684CE8](v34, 0x10B2C405F636F13);
  if (a32 < 0)
  {
    operator delete(__p);
    sub_223167354((uint64_t)&a25);
    _Unwind_Resume(a1);
  }
  sub_223167354((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_223B80174(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v5;
  int32x4_t v6;
  int32x4_t v7;
  float32x2_t v8;
  float32x4_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  void **v13;
  float32x4_t *v14;
  unint64_t v16;
  uint64_t v18;
  float32x4_t v19;
  float v20;
  uint64_t v21;
  float32x4_t **v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t prime;
  void *v27;
  void *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  size_t v32;
  size_t v33;
  size_t v34;
  _QWORD *i;
  size_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  size_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  unint64_t v48;
  float32x4_t v49;
  int8x16_t v50;
  int8x16_t v51;
  float32x4_t v52;
  int8x16_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  uint64_t v62;
  uint64_t *v63;
  int v64;
  unsigned __int8 v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  size_t v70;
  const char *v71;
  unsigned __int8 v72;
  const char *v73;
  size_t v74;
  void *v75;
  unint64_t v76;
  const char *v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  size_t v86;
  std::__shared_weak_count_vtbl *v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count *v89;
  unint64_t *p_shared_owners;
  unint64_t v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  void *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123[3];
  int v124;
  const char *v125;
  int v126;
  const char *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  uint64_t v130;
  void *object;
  void *v132[2];
  __int128 v133;
  void *__p[2];
  unint64_t v135;
  char v136;
  uint64_t v137;
  uint64_t v138;

  v5 = sub_22456636C((unsigned __int8 *)a2);
  v10 = v5;
  v11 = *(_QWORD *)(a1 + 24);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v2 = v5;
      if (v5 >= v11)
        v2 = v5 % v11;
    }
    else
    {
      v2 = (v11 - 1) & v5;
    }
    v13 = *(void ***)(*(_QWORD *)(a1 + 16) + 8 * v2);
    if (v13)
    {
      v14 = (float32x4_t *)*v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v18 = v14->i64[1];
            if (v18 == v5)
            {
              if (v14[1].i64[0] == *(_QWORD *)a2 && v14[1].i64[1] == *(_QWORD *)(a2 + 8))
                goto LABEL_99;
            }
            else if ((v18 & (v11 - 1)) != v2)
            {
              goto LABEL_28;
            }
            v14 = (float32x4_t *)v14->i64[0];
            if (!v14)
              goto LABEL_28;
          }
        }
        do
        {
          v16 = v14->u64[1];
          if (v16 == v5)
          {
            if (v14[1].i64[0] == *(_QWORD *)a2 && v14[1].i64[1] == *(_QWORD *)(a2 + 8))
              goto LABEL_99;
          }
          else
          {
            if (v16 >= v11)
              v16 %= v11;
            if (v16 != v2)
              break;
          }
          v14 = (float32x4_t *)v14->i64[0];
        }
        while (v14);
      }
    }
  }
LABEL_28:
  v14 = (float32x4_t *)operator new(0x70uLL);
  v14->i64[0] = 0;
  v14->i64[1] = v10;
  v19 = *(float32x4_t *)a2;
  v14[6].i64[0] = 0;
  v14[6].i32[2] = 0;
  v7.i32[3] = unk_224666FE0;
  v14[1] = v19;
  v14[2] = (float32x4_t)xmmword_224666FC4;
  v6.i32[3] = unk_224667000;
  v14[3] = *(float32x4_t *)algn_224666FD4;
  v14[4] = (float32x4_t)xmmword_224666FE4;
  v14[5] = (float32x4_t)unk_224666FF4;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 40) + 1);
  v6.i32[0] = *(_DWORD *)(a1 + 48);
  if (!v11 || (float)(*(float *)v6.i32 * (float)v11) < v20)
  {
    v23 = 1;
    if (v11 >= 3)
      v23 = (v11 & (v11 - 1)) != 0;
    v24 = v23 | (2 * v11);
    v25 = vcvtps_u32_f32(v20 / *(float *)v6.i32);
    if (v24 <= v25)
      prime = v25;
    else
      prime = v24;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v11 = *(_QWORD *)(a1 + 24);
    }
    if (prime > v11)
    {
LABEL_42:
      if (prime >> 61)
        sub_223174E94();
      v27 = operator new(8 * prime);
      v28 = *(void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v27;
      if (v28)
        operator delete(v28);
      v29 = 0;
      *(_QWORD *)(a1 + 24) = prime;
      do
        *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v29++) = 0;
      while (prime != v29);
      v31 = a1 + 32;
      v30 = *(_QWORD **)(a1 + 32);
      if (!v30)
        goto LABEL_74;
      v32 = v30[1];
      v33 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v34 = v32 & v33;
        *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v34) = v31;
        for (i = (_QWORD *)*v30; *v30; i = (_QWORD *)*v30)
        {
          v36 = i[1] & v33;
          if (v36 == v34)
          {
            v30 = i;
          }
          else
          {
            v37 = *(_QWORD *)(a1 + 16);
            if (*(_QWORD *)(v37 + 8 * v36))
            {
              *v30 = *i;
              v38 = 8 * v36;
              *i = **(_QWORD **)(*(_QWORD *)(a1 + 16) + v38);
              **(_QWORD **)(*(_QWORD *)(a1 + 16) + v38) = i;
            }
            else
            {
              *(_QWORD *)(v37 + 8 * v36) = v30;
              v30 = i;
              v34 = v36;
            }
          }
        }
        goto LABEL_74;
      }
      if (v32 >= prime)
        v32 %= prime;
      *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v32) = v31;
      v42 = (_QWORD *)*v30;
      if (!*v30)
      {
LABEL_74:
        v11 = prime;
        v46 = prime - 1;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_75;
        goto LABEL_90;
      }
      while (1)
      {
        v44 = v42[1];
        if (v44 >= prime)
          v44 %= prime;
        if (v44 == v32)
          goto LABEL_68;
        v45 = *(_QWORD *)(a1 + 16);
        if (*(_QWORD *)(v45 + 8 * v44))
        {
          *v30 = *v42;
          v43 = 8 * v44;
          *v42 = **(_QWORD **)(*(_QWORD *)(a1 + 16) + v43);
          **(_QWORD **)(*(_QWORD *)(a1 + 16) + v43) = v42;
          v42 = v30;
LABEL_68:
          v30 = v42;
          v42 = (_QWORD *)*v42;
          if (!v42)
            goto LABEL_74;
        }
        else
        {
          *(_QWORD *)(v45 + 8 * v44) = v30;
          v30 = v42;
          v42 = (_QWORD *)*v42;
          v32 = v44;
          if (!v42)
            goto LABEL_74;
        }
      }
    }
    if (prime < v11)
    {
      v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 40) / *(float *)(a1 + 48));
      if (v11 < 3 || (v40 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        v39 = std::__next_prime(v39);
      }
      else
      {
        v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2)
          v39 = v41;
      }
      if (prime <= v39)
        prime = v39;
      if (prime < v11)
      {
        if (!prime)
        {
          v47 = *(void **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = 0;
          if (v47)
            operator delete(v47);
          v11 = 0;
          *(_QWORD *)(a1 + 24) = 0;
          v46 = -1;
          goto LABEL_90;
        }
        goto LABEL_42;
      }
      v11 = *(_QWORD *)(a1 + 24);
    }
    v46 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
LABEL_75:
      if (v10 >= v11)
      {
        v2 = v10 % v11;
        v21 = *(_QWORD *)(a1 + 16);
        v22 = *(float32x4_t ***)(v21 + 8 * (v10 % v11));
        if (v22)
          goto LABEL_31;
      }
      else
      {
        v2 = v10;
        v21 = *(_QWORD *)(a1 + 16);
        v22 = *(float32x4_t ***)(v21 + 8 * v10);
        if (v22)
          goto LABEL_31;
      }
      goto LABEL_91;
    }
LABEL_90:
    v2 = v46 & v10;
    v21 = *(_QWORD *)(a1 + 16);
    v22 = *(float32x4_t ***)(v21 + 8 * (v46 & v10));
    if (v22)
      goto LABEL_31;
    goto LABEL_91;
  }
  v21 = *(_QWORD *)(a1 + 16);
  v22 = *(float32x4_t ***)(v21 + 8 * v2);
  if (v22)
  {
LABEL_31:
    v14->i64[0] = (uint64_t)*v22;
LABEL_97:
    *v22 = v14;
    goto LABEL_98;
  }
LABEL_91:
  v14->i64[0] = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v14;
  *(_QWORD *)(v21 + 8 * v2) = a1 + 32;
  if (v14->i64[0])
  {
    v48 = *(_QWORD *)(v14->i64[0] + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v48 >= v11)
        v48 %= v11;
    }
    else
    {
      v48 &= v11 - 1;
    }
    v22 = (float32x4_t **)(*(_QWORD *)(a1 + 16) + 8 * v48);
    goto LABEL_97;
  }
LABEL_98:
  ++*(_QWORD *)(a1 + 40);
LABEL_99:
  v6.i64[0] = *(_QWORD *)(a2 + 176);
  v6.i32[2] = *(_DWORD *)(a2 + 184);
  v7.i64[0] = *(_QWORD *)(a2 + 192);
  v7.i32[2] = *(_DWORD *)(a2 + 200);
  v8.i32[0] = *(_DWORD *)(a2 + 216);
  v9.i64[0] = *(_QWORD *)(a2 + 224);
  v9.i32[2] = *(_DWORD *)(a2 + 232);
  v49.i64[0] = vzip1q_s32(v6, v7).u64[0];
  v50 = (int8x16_t)vnegq_f32(v9);
  v51 = (int8x16_t)vtrn2q_s32(v6, v7);
  v51.i32[2] = HIDWORD(*(_QWORD *)(a2 + 208));
  v52 = (float32x4_t)vzip2q_s32(v6, v7);
  *(float32x2_t *)v53.i8 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v49.f32, *(float *)v50.i32), *(float32x2_t *)v51.i8, *(float32x2_t *)v9.f32, 1), *(float32x2_t *)v52.f32, v9, 2);
  v52.i32[2] = v8.i32[0];
  v53.u64[1] = (unint64_t)vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)(a2 + 208), *(float32x2_t *)v50.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)(a2 + 208), 1), *(float32x2_t *)v9.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v50, v50, 8uLL), v8);
  v49.i64[1] = *(_QWORD *)(a2 + 208);
  v54.i32[3] = 0;
  v54.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v51, 0).i32[3];
  *(uint64_t *)((char *)v54.i64 + 4) = vextq_s8(v51, v53, 4uLL).u64[0];
  v52.i64[1] = vdupq_laneq_s32((int32x4_t)v52, 2).u32[0];
  v53.i32[3] = 1.0;
  v55 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v49, COERCE_FLOAT(*(_OWORD *)(a2 + 112))), v54, *(float32x2_t *)(a2 + 112), 1), v52, *(float32x4_t *)(a2 + 112), 2), (float32x4_t)v53, *(float32x4_t *)(a2 + 112), 3);
  v56 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v49, COERCE_FLOAT(*(_OWORD *)(a2 + 128))), v54, *(float32x2_t *)(a2 + 128), 1), v52, *(float32x4_t *)(a2 + 128), 2), (float32x4_t)v53, *(float32x4_t *)(a2 + 128), 3);
  v57 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v49, COERCE_FLOAT(*(_OWORD *)(a2 + 144))), v54, *(float32x2_t *)(a2 + 144), 1), v52, *(float32x4_t *)(a2 + 144), 2), (float32x4_t)v53, *(float32x4_t *)(a2 + 144), 3);
  v58 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v49, COERCE_FLOAT(*(_OWORD *)(a2 + 160))), v54, *(float32x2_t *)(a2 + 160), 1), v52, *(float32x4_t *)(a2 + 160), 2), (float32x4_t)v53, *(float32x4_t *)(a2 + 160), 3);
  v59 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v55, COERCE_FLOAT(*(_OWORD *)(a2 + 48))), v56, *(float32x2_t *)(a2 + 48), 1), v57, *(float32x4_t *)(a2 + 48), 2), v58, *(float32x4_t *)(a2 + 48), 3);
  v60 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v55, COERCE_FLOAT(*(_OWORD *)(a2 + 64))), v56, *(float32x2_t *)(a2 + 64), 1), v57, *(float32x4_t *)(a2 + 64), 2), v58, *(float32x4_t *)(a2 + 64), 3);
  v61 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v55, COERCE_FLOAT(*(_OWORD *)(a2 + 80))), v56, *(float32x2_t *)(a2 + 80), 1), v57, *(float32x4_t *)(a2 + 80), 2), v58, *(float32x4_t *)(a2 + 80), 3);
  v14[2] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v55, COERCE_FLOAT(*(_OWORD *)(a2 + 32))), v56, *(float32x2_t *)(a2 + 32), 1), v57, *(float32x4_t *)(a2 + 32), 2), v58, *(float32x4_t *)(a2 + 32), 3);
  v14[3] = v59;
  v14[4] = v60;
  v14[5] = v61;
  v62 = sub_2231D04FC(*(_QWORD *)(a2 + 16));
  v63 = &qword_224666E9C;
  if (*(_DWORD *)v62)
  {
    v64 = *(_DWORD *)(v62 + 4);
    if (v64)
    {
      if (*(_DWORD *)v62 == 1 && v64 == 1)
      {
        v63 = (uint64_t *)(*(_QWORD *)(v62 + 40) + 168);
        goto LABEL_194;
      }
      v65 = atomic_load((unsigned __int8 *)&qword_2540CCE18);
      if ((v65 & 1) == 0 && __cxa_guard_acquire(&qword_2540CCE18))
      {
        sub_22455F53C(v123);
        sub_223174DE4(&object, "cv3d.recon");
        sub_2232300E0(v123, (uint64_t)&object, &qword_2540CCE10);
        if (SHIBYTE(v132[1]) < 0)
          operator delete(object);
        __cxa_guard_release(&qword_2540CCE18);
      }
      v130 = qword_2540CCE10;
      if (**(int **)(qword_2540CCE10 + 56) > 5
        || (v66 = *(unsigned __int8 *)(qword_2540CCE10 + 72),
            v67 = sub_22322F254(qword_2540CCE10, "OSLogSurrogateAppender", 1, 0),
            v68 = v67,
            !v66)
        && !v67)
      {
LABEL_193:
        v63 = &qword_224666E9C;
        goto LABEL_194;
      }
      v123[0] = &v130;
      v123[1] = (uint64_t *)std::chrono::steady_clock::now().__d_.__rep_;
      v123[2] = (uint64_t *)std::chrono::system_clock::now().__d_.__rep_;
      v124 = 5;
      v125 = "unknown file";
      v126 = 223;
      v128 = 0;
      v129 = 0;
      v127 = "unknown function";
      v69 = *v123[0];
      if (*(char *)(*v123[0] + 39) < 0)
      {
        v71 = *(const char **)(v69 + 16);
        v70 = *(_QWORD *)(v69 + 24);
      }
      else
      {
        v70 = *(unsigned __int8 *)(*v123[0] + 39);
        v71 = (const char *)(*v123[0] + 16);
      }
      v122 = *v123[0] + 16;
      v72 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v72 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)&object);
        sub_223199C58("com.apple.cv3d", (unint64_t)&object, byte_255788F40);
        if ((_BYTE)v133 && SHIBYTE(v132[1]) < 0)
          operator delete(object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
      if (byte_255788F40[23] >= 0)
        v73 = byte_255788F40;
      else
        v73 = *(const char **)byte_255788F40;
      if (byte_255788F40[23] >= 0)
        v74 = byte_255788F40[23];
      else
        v74 = *(_QWORD *)&byte_255788F40[8];
      object = os_log_create(v73, v71);
      v75 = v132;
      if (v74 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v74 >= 0x17)
      {
        v76 = v68;
        v77 = v71;
        v78 = v69;
        v79 = v66;
        v80 = (v74 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v74 | 7) != 0x17)
          v80 = v74 | 7;
        v81 = v80 + 1;
        v75 = operator new(v80 + 1);
        v132[1] = (void *)v74;
        *(_QWORD *)&v133 = v81 | 0x8000000000000000;
        v132[0] = v75;
        v66 = v79;
        v69 = v78;
        v71 = v77;
        v68 = v76;
      }
      else
      {
        BYTE7(v133) = v74;
        if (!v74)
        {
LABEL_126:
          *((_BYTE *)v75 + v74) = 0;
          BYTE8(v133) = 1;
          v82 = __p;
          if (v70 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v70 >= 0x17)
          {
            v83 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v70 | 7) != 0x17)
              v83 = v70 | 7;
            v84 = v83 + 1;
            v82 = operator new(v83 + 1);
            __p[1] = (void *)v70;
            v135 = v84 | 0x8000000000000000;
            __p[0] = v82;
          }
          else
          {
            HIBYTE(v135) = v70;
            if (!v70)
              goto LABEL_134;
          }
          memmove(v82, v71, v70);
LABEL_134:
          *((_BYTE *)v82 + v70) = 0;
          v136 = 1;
          v85 = object;
          if (SHIBYTE(v135) < 0)
            operator delete(__p[0]);
          if (BYTE8(v133) && SBYTE7(v133) < 0)
            operator delete(v132[0]);
          if (object)
            os_release(object);
          if (v68 && *(_QWORD *)(v68 + 24))
          {
            v86 = _os_log_pack_size();
            v87 = (std::__shared_weak_count_vtbl *)operator new(v86, (std::align_val_t)8uLL);
            v88 = (std::__shared_weak_count *)operator new();
            v89 = v88;
            v88->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v88->__shared_owners_;
            v88->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v88->__shared_weak_owners_ = 0;
            v88[1].__vftable = v87;
            object = v87;
            v132[0] = v87;
            v132[1] = v88;
            do
              v91 = __ldxr(p_shared_owners);
            while (__stxr(v91 + 1, p_shared_owners));
            v133 = 0uLL;
            __p[0] = 0;
            do
              v92 = __ldaxr(p_shared_owners);
            while (__stlxr(v92 - 1, p_shared_owners));
            if (!v92)
            {
              ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
              std::__shared_weak_count::__release_weak(v89);
            }
            v93 = object;
            *(_WORD *)_os_log_pack_fill() = 0;
            v94 = operator new();
            v95 = *(unsigned __int8 *)(v69 + 39);
            v96 = v122;
            if ((v95 & 0x80u) != 0)
            {
              v96 = *(_QWORD *)(v69 + 16);
              v95 = *(_QWORD *)(v69 + 24);
            }
            *(_QWORD *)v94 = v93;
            *(_OWORD *)(v94 + 8) = *(_OWORD *)v132;
            v132[0] = 0;
            v132[1] = 0;
            *(_OWORD *)(v94 + 24) = v133;
            v133 = 0uLL;
            *(_QWORD *)(v94 + 40) = v96;
            *(_QWORD *)(v94 + 48) = v95;
            *(_BYTE *)(v94 + 56) = 16;
            v137 = 0;
            v138 = v94;
            (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v68 + 24) + 40))(*(_QWORD *)(v68 + 24), &v138);
            v97 = v138;
            v138 = 0;
            if (v97)
            {
              v98 = *(std::__shared_weak_count **)(v97 + 32);
              if (v98)
              {
                v99 = (unint64_t *)&v98->__shared_owners_;
                do
                  v100 = __ldaxr(v99);
                while (__stlxr(v100 - 1, v99));
                if (!v100)
                {
                  ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                  std::__shared_weak_count::__release_weak(v98);
                }
              }
              v101 = *(std::__shared_weak_count **)(v97 + 16);
              if (v101)
              {
                v102 = (unint64_t *)&v101->__shared_owners_;
                do
                  v103 = __ldaxr(v102);
                while (__stlxr(v103 - 1, v102));
                if (!v103)
                {
                  ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                  std::__shared_weak_count::__release_weak(v101);
                }
              }
              MEMORY[0x227684CE8](v97, 0x10F0C40B62ED6C6);
              v104 = v137;
              v137 = 0;
              if (v104)
              {
                v105 = *(std::__shared_weak_count **)(v104 + 32);
                if (v105)
                {
                  v106 = (unint64_t *)&v105->__shared_owners_;
                  do
                    v107 = __ldaxr(v106);
                  while (__stlxr(v107 - 1, v106));
                  if (!v107)
                  {
                    ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                    std::__shared_weak_count::__release_weak(v105);
                  }
                }
                v108 = *(std::__shared_weak_count **)(v104 + 16);
                if (v108)
                {
                  v109 = (unint64_t *)&v108->__shared_owners_;
                  do
                    v110 = __ldaxr(v109);
                  while (__stlxr(v110 - 1, v109));
                  if (!v110)
                  {
                    ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                    std::__shared_weak_count::__release_weak(v108);
                  }
                }
                MEMORY[0x227684CE8](v104, 0x10F0C40B62ED6C6);
              }
            }
            v111 = (std::__shared_weak_count *)*((_QWORD *)&v133 + 1);
            if (*((_QWORD *)&v133 + 1))
            {
              v112 = (unint64_t *)(*((_QWORD *)&v133 + 1) + 8);
              do
                v113 = __ldaxr(v112);
              while (__stlxr(v113 - 1, v112));
              if (!v113)
              {
                ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                std::__shared_weak_count::__release_weak(v111);
              }
            }
            v114 = (std::__shared_weak_count *)v132[1];
            if (v132[1])
            {
              v115 = (unint64_t *)((char *)v132[1] + 8);
              do
                v116 = __ldaxr(v115);
              while (__stlxr(v116 - 1, v115));
              if (!v116)
              {
                ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                std::__shared_weak_count::__release_weak(v114);
              }
            }
          }
          else
          {
            os_log_type_enabled(v85, OS_LOG_TYPE_ERROR);
            LOWORD(object) = 0;
            v117 = (void *)_os_log_send_and_compose_impl();
            if (v117)
              free(v117);
          }
          if (v66)
          {
            sub_22322C138((uint64_t)v123, "Unexpected keyframe scene type size");
            sub_223182C08((uint64_t)v123);
          }
          sub_223182C08((uint64_t)v123);
          v118 = v129;
          if (v129)
          {
            v119 = (unint64_t *)&v129->__shared_owners_;
            do
              v120 = __ldaxr(v119);
            while (__stlxr(v120 - 1, v119));
            if (!v120)
            {
              ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
              std::__shared_weak_count::__release_weak(v118);
            }
          }
          goto LABEL_193;
        }
      }
      memmove(v75, v73, v74);
      goto LABEL_126;
    }
  }
LABEL_194:
  v121 = *v63;
  v14[6].i32[2] = *((_DWORD *)v63 + 2);
  v14[6].i64[0] = v121;
}

void sub_223B80EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a29)
  {
    if (a28 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_223B80EF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CCE18);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CCE18);
  _Unwind_Resume(a1);
}

void sub_223B80F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  sub_22319A054((uint64_t *)(v5 - 96));
  sub_22319A054((uint64_t *)(v5 - 104));
  sub_223199DE8((uint64_t)va1);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223B80F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  sub_223199DE8((uint64_t)va1);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223B80F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  MEMORY[0x227684CE8](v5, 0x10D0C40B950D02ALL);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223B80FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223B80FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223B80FEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *object,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  if (a30 && a29 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_223182DAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_223B81034(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_223B81048(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  void *__p;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v5 = (_QWORD *)(a1 + 16);
    do
    {
      if ((*(_BYTE *)(v2 + 240) & 0x30) != 0)
      {
        v6 = sub_22342DA5C(v5, v2);
        if (v6)
        {
          sub_2231AFBB8(v5, v6, (uint64_t)&__p);
          v7 = __p;
          __p = 0;
          if (v7)
            operator delete(v7);
        }
      }
      else
      {
        sub_223B80174(a1, v2);
      }
      v2 += 248;
    }
    while (v2 != v3);
  }
}

void sub_223B810E0(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;

  v5 = a1 + 56;
  if ((uint64_t *)(a1 + 56) == a2)
    goto LABEL_16;
  v7 = *a2;
  v6 = a2[1];
  v8 = 0x8E38E38E38E38E39 * ((v6 - *a2) >> 4);
  v9 = *(_QWORD *)(a1 + 72);
  v10 = *(_QWORD *)(a1 + 56);
  if (0x8E38E38E38E38E39 * ((v9 - v10) >> 4) < v8)
  {
    if (v10)
    {
      sub_2238891A0((uint64_t *)(a1 + 56));
      operator delete(*(void **)v5);
      v9 = 0;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
      *(_QWORD *)(v5 + 16) = 0;
    }
    if (v8 > 0x1C71C71C71C71C7)
      goto LABEL_32;
    v11 = 0x8E38E38E38E38E39 * (v9 >> 4);
    v12 = 2 * v11;
    if (2 * v11 <= v8)
      v12 = v8;
    v13 = v11 >= 0xE38E38E38E38E3 ? 0x1C71C71C71C71C7 : v12;
    if (v13 > 0x1C71C71C71C71C7)
LABEL_32:
      sub_22316E078();
    v14 = 144 * v13;
    v15 = (char *)operator new(144 * v13);
    *(_QWORD *)(a1 + 56) = v15;
    *(_QWORD *)(a1 + 64) = v15;
    *(_QWORD *)(a1 + 72) = &v15[v14];
    v16 = sub_223B84BC4(v7, v6, (uint64_t)v15);
    goto LABEL_15;
  }
  if (0x8E38E38E38E38E39 * ((*(_QWORD *)(a1 + 64) - v10) >> 4) < v8)
  {
    v17 = v7 + 16 * ((*(_QWORD *)(a1 + 64) - v10) >> 4);
    sub_223B84CBC(*a2, v17, v10);
    v16 = sub_223B84BC4(v17, v6, *(_QWORD *)(a1 + 64));
LABEL_15:
    *(_QWORD *)(a1 + 64) = v16;
LABEL_16:
    *(_DWORD *)(a1 + 80) = a3;
    return;
  }
  v18 = sub_223B84CBC(*a2, a2[1], v10);
  v19 = *(_QWORD *)(a1 + 64);
  if (v19 != v18)
  {
    do
    {
      v20 = *(void **)(v19 - 96);
      if (v20)
      {
        *(_QWORD *)(v19 - 88) = v20;
        operator delete(v20);
      }
      v21 = *(_QWORD *)(v19 - 120);
      if (v21)
      {
        v22 = *(_QWORD *)(v19 - 112);
        v23 = *(void **)(v19 - 120);
        if (v22 != v21)
        {
          v24 = *(_QWORD *)(v19 - 112);
          do
          {
            v26 = *(void **)(v24 - 24);
            v24 -= 24;
            v25 = v26;
            if (v26)
            {
              *(_QWORD *)(v22 - 16) = v25;
              operator delete(v25);
            }
            v22 = v24;
          }
          while (v24 != v21);
          v23 = *(void **)(v19 - 120);
        }
        *(_QWORD *)(v19 - 112) = v21;
        operator delete(v23);
      }
      v27 = v19 - 144;
      v28 = *(void **)(v19 - 144);
      if (v28)
      {
        *(_QWORD *)(v19 - 136) = v28;
        operator delete(v28);
      }
      v19 -= 144;
    }
    while (v27 != v18);
  }
  *(_QWORD *)(a1 + 64) = v18;
  *(_DWORD *)(a1 + 80) = a3;
}

void sub_223B81310(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 64) = v2;
  _Unwind_Resume(a1);
}

void sub_223B81318(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 64) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_223B81320(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4, double a5, double a6, float32x2_t a7, float32x2_t a8, float32x2_t a9, double a10, double a11)
{
  uint64_t v12;
  uint64_t v13;
  float32x2_t v14;
  float32x2_t v15;
  __int32 v16;
  float v17;
  float32x2_t v18;
  float32x2_t v19;
  uint64_t result;
  float32x2_t v21;
  unsigned __int32 v22;
  _QWORD v23[2];

  v23[0] = a3;
  v23[1] = a4;
  v12 = *(int *)(a1 + 80);
  if (v12 > 4)
  {
    v17 = 1.0;
    v14.i32[0] = 0;
    v15.i32[0] = 0;
    v16 = 0;
    LODWORD(a11) = 0;
    a8.i32[0] = 0;
    a7.i32[0] = 1.0;
    a9.i32[0] = 0;
    v18.i32[0] = 1.0;
  }
  else
  {
    v13 = 4 * v12;
    v14.i32[0] = *(_DWORD *)((char *)&unk_224667040 + v13);
    v15.i32[0] = *(_DWORD *)((char *)&unk_224667054 + v13);
    v16 = *(_DWORD *)((char *)&unk_224667068 + v13);
    v17 = *(float *)((char *)&unk_22466707C + v13);
    LODWORD(a11) = *(_DWORD *)((char *)&unk_224667090 + v13);
    a8.i32[0] = *(_DWORD *)((char *)&unk_224667004 + v13);
    a7.i32[0] = *(_DWORD *)((char *)&unk_224667018 + v13);
    a9.i32[0] = *(_DWORD *)((char *)&unk_22466702C + v13);
    v18.i32[0] = *(_DWORD *)((char *)&unk_2246670A4 + v13);
  }
  v18.i32[1] = v16;
  v14.f32[1] = v17;
  v15.i32[1] = LODWORD(a11);
  LODWORD(a11) = a2[1].i32[0];
  v19 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v18, COERCE_FLOAT(*a2)), v14, *a2, 1), v15, *(float *)&a11);
  v22 = vmla_f32(vmla_lane_f32(vmul_f32(a8, *a2), a9, *a2, 1), *(float32x2_t *)&a11, a7).u32[0];
  v21 = v19;
  result = sub_223B81438(a1, &v21, (uint64_t)v23);
  if ((_DWORD)result)
    *(_BYTE *)(a1 + 8) = result;
  return result;
}

uint64_t sub_223B81438(uint64_t a1, float32x2_t *a2, uint64_t a3)
{
  int v6;
  size_t v7;
  unint64_t v8;
  const void **v9;
  __int128 *p_dst;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  int v14;
  size_t v15;
  unint64_t v16;
  void *p_p;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  int v21;
  size_t v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  const void *v27;
  int v28;
  size_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  const void *v34;
  int v35;
  size_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  const void *v41;
  int8x16_t v42;
  float32x4_t v43;
  float32x2_t v44;
  float32x4_t v45;
  float32x2_t v46;
  float32x2_t v47;
  __int128 v48;
  float32x2_t *v49;
  __int16 *v50;
  float *v51;
  float *v52;
  int32x4_t v53;
  __int128 v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int32x4_t v58;
  float32x2_t v59;
  float32x2_t v60;
  float32x2_t v61;
  uint64_t v62;
  uint64_t v63;
  float32x2_t v64;
  float32x2_t v65;
  __int32 v66;
  float v67;
  __int32 v68;
  float32x2_t v69;
  float32x2_t v70;
  float v71;
  float v72;
  __int128 v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int32x4_t v77;
  __int128 v78;
  unsigned __int32 v79;
  float v80;
  float v81;
  float v82;
  BOOL v83;
  char v84;
  float32x2_t *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  float *v92;
  float *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  float v99;
  float v100;
  char *v101;
  void *v102;
  int v103;
  size_t v104;
  unint64_t v105;
  _BYTE *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  const void *v110;
  std::string *v111;
  __int128 v112;
  uint64_t v113;
  _BYTE *v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  std::mutex *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  std::string::size_type size;
  std::string *v125;
  std::string::size_type v126;
  std::string::size_type v127;
  int v128;
  __n128 *v131;
  std::string *v132;
  size_t v133;
  uint64_t v134;
  int v135;
  unsigned __int8 v136;
  float *v137;
  float v138;
  float v143;
  float v144;
  float32x2_t *v145;
  float v146;
  float *v147;
  float *v148;
  int8x16_t v149;
  float v150;
  float v151;
  float32x4_t v154;
  float32x2_t v155;
  float v156;
  float v157;
  float v159;
  float v160;
  float v161;
  uint64_t v162;
  float v167;
  uint64_t v168;
  __int128 v171;
  int8x16_t v172;
  int8x16_t v173;
  int8x16_t v174;
  int32x4_t v175;
  float32x2_t v176;
  float32x2_t v177;
  float32x2_t v178;
  __int128 v179;
  int8x16_t v180;
  int8x16_t v181;
  int8x16_t v182;
  int32x4_t v183;
  float32x2_t v184;
  float32x2_t v185;
  float32x2_t v186;
  float v187;
  float32x2_t v188;
  float32x4_t v189;
  float32x2_t v190;
  float32x2_t v191;
  std::string::size_type v192;
  std::string::size_type *v193;
  std::string::size_type v194;
  _DWORD *v195;
  float32x4_t v196;
  float32x4_t v197;
  std::string::size_type v198;
  void *v199;
  uint64_t *v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  unint64_t v204;
  _QWORD *v205;
  uint64_t v206;
  unint64_t v207;
  float v208;
  float v209;
  float v210;
  float v211;
  __int128 v212;
  int8x16_t v213;
  int8x16_t v214;
  int8x16_t v215;
  int32x4_t v216;
  float32x2_t v217;
  float32x2_t v218;
  float32x2_t v219;
  float v220;
  unsigned int v221;
  uint64_t *v222;
  unsigned int v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  const double *v227;
  unint64_t v228;
  const double *v229;
  unint64_t v230;
  uint64_t v231;
  unint64_t v232;
  int32x4_t v233;
  int32x4_t v234;
  const double *v235;
  const double *v236;
  const double *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  int v241;
  const void **v242;
  int v243;
  int v244;
  char *v246;
  char *v247;
  void *v248;
  void *v249;
  uint64_t v250;
  uint64_t v251;
  void *v252;
  uint64_t v253;
  void *v254;
  void *v255;
  char *v256;
  void *v257;
  uint64_t *v259;
  uint64_t v260;
  uint64_t v261;
  std::mutex *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t v266;
  _BYTE *v267;
  uint64_t v268;
  uint64_t v269;
  int v270;
  __n128 *v273;
  _BYTE *v274;
  size_t v275;
  uint64_t v276;
  uint64_t *v277;
  uint64_t v278;
  uint64_t v279;
  std::mutex *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  _BYTE *v285;
  uint64_t v286;
  uint64_t v287;
  int v288;
  __n128 *v291;
  _BYTE *v292;
  size_t v293;
  uint64_t *v294;
  uint64_t v295;
  uint64_t v296;
  std::mutex *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t *v301;
  std::string::size_type v302;
  std::string *v303;
  std::string::size_type v304;
  std::string::size_type v305;
  int v306;
  __n128 *v309;
  std::string *v310;
  size_t v311;
  uint64_t *v312;
  uint64_t v313;
  uint64_t v314;
  std::mutex *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  unint64_t v319;
  _BYTE *v320;
  uint64_t v321;
  uint64_t v322;
  int v323;
  __n128 *v326;
  _BYTE *v327;
  size_t v328;
  uint64_t *v329;
  uint64_t v330;
  uint64_t v331;
  std::mutex *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unint64_t v336;
  _BYTE *v337;
  uint64_t v338;
  uint64_t v339;
  int v340;
  __n128 *v343;
  _BYTE *v344;
  size_t v345;
  const void **v346;
  int8x8_t v347;
  uint64_t v348;
  float *v349;
  float32x4_t v350;
  void *v351;
  uint64_t v352;
  __int128 v353;
  int32x4_t v354;
  void *v355;
  float32x2_t v356;
  float v357;
  uint64_t v358;
  __int32 v359;
  void *v360[2];
  void *v361;
  unsigned int v362;
  int v363;
  char v364;
  __int128 v365;
  unint64_t v366;
  char v367;
  uint64_t v368;
  __int128 v369;
  unint64_t v370;
  char v371;
  uint64_t v372;
  __int128 __p;
  unint64_t v374;
  char v375;
  uint64_t v376;
  __int128 __dst;
  unint64_t v378;
  char v379;
  uint64_t v380;
  void *v381[6];
  char v382;
  uint64_t v383;
  _BYTE v384[32];
  __int128 v385;
  __int128 v386;
  __int128 v387;
  int v388;
  uint64_t v389;
  int v390;
  int8x8_t v391;
  _BYTE v392[32];
  int32x4_t v393;
  float32x2_t v394;
  unsigned __int32 v395;
  int v396;
  __int128 v397;
  std::string v398;
  __int128 v399;
  __int128 v400;
  __int128 v401;
  int v402;
  void *v403[2];
  __int128 v404;
  __int128 v405;
  __int128 v406;
  __int128 v407;
  int v408;
  uint64_t v409;
  unint64_t v410;
  unint64_t v411;
  unint64_t v412;
  uint64_t v413;
  float64x2x3_t v414;
  float64x2x3_t v415;
  float64x2x3_t v416;
  float64x2x3_t v417;

  v413 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  v348 = a3;
  v6 = *(char *)(a1 + 111);
  if (v6 >= 0)
    v7 = *(unsigned __int8 *)(a1 + 111);
  else
    v7 = *(_QWORD *)(a1 + 96);
  v8 = v7 + 39;
  if (v7 + 39 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v9 = (const void **)(a1 + 88);
  if (v8 <= 0x16)
  {
    v378 = 0;
    __dst = 0uLL;
    p_dst = &__dst;
    HIBYTE(v378) = v7 + 39;
LABEL_10:
    if (v6 >= 0)
      v13 = (const void *)(a1 + 88);
    else
      v13 = *v9;
    memmove(p_dst, v13, v7);
    goto LABEL_14;
  }
  v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v8 | 7) != 0x17)
    v11 = v8 | 7;
  v12 = v11 + 1;
  p_dst = (__int128 *)operator new(v11 + 1);
  v378 = v12 | 0x8000000000000000;
  *(_QWORD *)&__dst = p_dst;
  *((_QWORD *)&__dst + 1) = v7 + 39;
  if (v7)
    goto LABEL_10;
LABEL_14:
  strcpy((char *)p_dst + v7, ".IOFilter.IOFilterKeyframes.KeyframeAll");
  HIBYTE(v374) = 0;
  LOBYTE(__p) = 0;
  sub_223B84904((char *)v381, &__dst, &__p);
  if (SHIBYTE(v378) < 0)
    operator delete((void *)__dst);
  v14 = *(char *)(a1 + 111);
  if (v14 >= 0)
    v15 = *(unsigned __int8 *)(a1 + 111);
  else
    v15 = *(_QWORD *)(a1 + 96);
  v16 = v15 + 44;
  if (v15 + 44 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v16 <= 0x16)
  {
    v374 = 0;
    __p = 0uLL;
    p_p = &__p;
    HIBYTE(v374) = v15 + 44;
LABEL_25:
    if (v14 >= 0)
      v20 = (const void *)(a1 + 88);
    else
      v20 = *v9;
    memmove(p_p, v20, v15);
    goto LABEL_29;
  }
  v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v16 | 7) != 0x17)
    v18 = v16 | 7;
  v19 = v18 + 1;
  p_p = operator new(v18 + 1);
  v374 = v19 | 0x8000000000000000;
  *(_QWORD *)&__p = p_p;
  *((_QWORD *)&__p + 1) = v15 + 44;
  if (v15)
    goto LABEL_25;
LABEL_29:
  strcpy((char *)p_p + v15, ".IOFilter.IOFilterKeyframes.KeyframeIncluded");
  HIBYTE(v370) = 0;
  LOBYTE(v369) = 0;
  sub_223B84904((char *)&__dst, &__p, &v369);
  if (SHIBYTE(v374) < 0)
    operator delete((void *)__p);
  v21 = *(char *)(a1 + 111);
  if (v21 >= 0)
    v22 = *(unsigned __int8 *)(a1 + 111);
  else
    v22 = *(_QWORD *)(a1 + 96);
  v23 = v22 + 50;
  if (v22 + 50 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v23 <= 0x16)
  {
    v370 = 0;
    v369 = 0uLL;
    v24 = &v369;
    HIBYTE(v370) = v22 + 50;
LABEL_40:
    if (v21 >= 0)
      v27 = (const void *)(a1 + 88);
    else
      v27 = *v9;
    memmove(v24, v27, v22);
    goto LABEL_44;
  }
  v25 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v23 | 7) != 0x17)
    v25 = v23 | 7;
  v26 = v25 + 1;
  v24 = operator new(v25 + 1);
  v370 = v26 | 0x8000000000000000;
  *(_QWORD *)&v369 = v24;
  *((_QWORD *)&v369 + 1) = v22 + 50;
  if (v22)
    goto LABEL_40;
LABEL_44:
  strcpy((char *)v24 + v22, ".IOFilter.IOFilterKeyframes.KeyframeDistanceWeight");
  HIBYTE(v366) = 0;
  LOBYTE(v365) = 0;
  sub_223B84904((char *)&__p, &v369, &v365);
  if (SHIBYTE(v370) < 0)
    operator delete((void *)v369);
  v28 = *(char *)(a1 + 111);
  if (v28 >= 0)
    v29 = *(unsigned __int8 *)(a1 + 111);
  else
    v29 = *(_QWORD *)(a1 + 96);
  v30 = v29 + 50;
  if (v29 + 50 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v30 <= 0x16)
  {
    v366 = 0;
    v365 = 0uLL;
    v31 = &v365;
    HIBYTE(v366) = v29 + 50;
LABEL_55:
    if (v28 >= 0)
      v34 = (const void *)(a1 + 88);
    else
      v34 = *v9;
    memmove(v31, v34, v29);
    goto LABEL_59;
  }
  v32 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v30 | 7) != 0x17)
    v32 = v30 | 7;
  v33 = v32 + 1;
  v31 = operator new(v32 + 1);
  *((_QWORD *)&v365 + 1) = v29 + 50;
  v366 = v33 | 0x8000000000000000;
  *(_QWORD *)&v365 = v31;
  if (v29)
    goto LABEL_55;
LABEL_59:
  strcpy((char *)v31 + v29, ".IOFilter.IOFilterKeyframes.KeyframeBoundaryWeight");
  BYTE7(v404) = 0;
  LOBYTE(v403[0]) = 0;
  sub_223B84904((char *)&v369, &v365, (__int128 *)v403);
  if (SHIBYTE(v366) < 0)
    operator delete((void *)v365);
  v35 = *(char *)(a1 + 111);
  if (v35 >= 0)
    v36 = *(unsigned __int8 *)(a1 + 111);
  else
    v36 = *(_QWORD *)(a1 + 96);
  v37 = v36 + 45;
  if (v36 + 45 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v37 <= 0x16)
  {
    *(_QWORD *)&v404 = 0;
    v403[1] = 0;
    v403[0] = 0;
    v38 = v403;
    BYTE7(v404) = v36 + 45;
LABEL_70:
    if (v35 >= 0)
      v41 = (const void *)(a1 + 88);
    else
      v41 = *v9;
    memmove(v38, v41, v36);
    goto LABEL_74;
  }
  v39 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v37 | 7) != 0x17)
    v39 = v37 | 7;
  v40 = v39 + 1;
  v38 = operator new(v39 + 1);
  *(_QWORD *)&v404 = v40 | 0x8000000000000000;
  v403[0] = v38;
  v403[1] = (void *)(v36 + 45);
  if (v36)
    goto LABEL_70;
LABEL_74:
  strcpy((char *)v38 + v36, ".IOFilter.IOFilterKeyframes.KeyframeLogWeight");
  v384[23] = 0;
  v384[0] = 0;
  sub_223B84904((char *)&v365, (__int128 *)v403, (__int128 *)v384);
  if (SBYTE7(v404) < 0)
  {
    operator delete(v403[0]);
    v346 = (const void **)(a1 + 88);
    v364 = 0;
    v49 = *(float32x2_t **)(a1 + 32);
    v50 = &word_224651000;
    v352 = a1;
    if (v49)
      goto LABEL_76;
  }
  else
  {
    v346 = (const void **)(a1 + 88);
    v364 = 0;
    v49 = *(float32x2_t **)(a1 + 32);
    v50 = &word_224651000;
    v352 = a1;
    if (v49)
    {
LABEL_76:
      v51 = 0;
      v52 = 0;
      v349 = 0;
      v53 = *((int32x4_t *)v50 + 55);
      v354 = v53;
      while (1)
      {
        *(float32x2_t *)v53.i8 = v49[12];
        DWORD2(v397) = v53.i32[1];
        v53.i32[2] = v49[13].i32[0];
        v53 = vuzp1q_s32(v53, v53);
        *(_QWORD *)&v397 = v53.i64[0];
        if (v382)
        {
          *(float32x2_t *)v53.i8 = v49[4];
          v53.i32[2] = v49[5].i32[0];
          *(float32x2_t *)v42.i8 = v49[6];
          v42.i32[2] = v49[7].i32[0];
          *(float32x2_t *)v43.f32 = v49[10];
          v43.i32[2] = v49[11].i32[0];
          *(_QWORD *)&v54 = vzip1q_s32(v53, (int32x4_t)v42).u64[0];
          v55 = (int8x16_t)vnegq_f32(v43);
          v46.i32[0] = v49[9].i32[0];
          v56 = (int8x16_t)vtrn2q_s32(v53, (int32x4_t)v42);
          v56.i32[2] = HIDWORD(*(_QWORD *)&v49[8]);
          v57 = (int8x16_t)vzip2q_s32(v53, (int32x4_t)v42);
          v58 = (int32x4_t)v57;
          v58.i32[2] = v46.i32[0];
          v59 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)&v54, *(float *)v55.i32), *(float32x2_t *)v56.i8, *(float32x2_t *)v43.f32, 1), *(float32x2_t *)v57.i8, v43, 2);
          v60 = vmls_lane_f32(vmul_f32(v49[8], *(float32x2_t *)v55.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v49[8], 1), *(float32x2_t *)v43.f32, 1);
          v61 = (float32x2_t)vextq_s8(v55, v55, 8uLL).u64[0];
          *((_QWORD *)&v54 + 1) = *(_QWORD *)&v49[8];
          v55.i32[3] = 0;
          v55.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v56, 0).i32[3];
          *(uint64_t *)((char *)v55.i64 + 4) = vextq_s8(v56, v57, 4uLL).u64[0];
          v58.i64[1] = vdupq_laneq_s32(v58, 2).u32[0];
          v393 = v58;
          *(_OWORD *)v392 = v54;
          *(int8x16_t *)&v392[16] = v55;
          v394 = v59;
          v395 = vmla_f32(v60, v61, v46).u32[0];
          v396 = 1065353216;
          *(int32x4_t *)v360 = v354;
          sub_223207E58(&v398, (int *)v360);
          *(_OWORD *)&v384[16] = *(_OWORD *)&v398.__r_.__value_.__r.__words[1];
          v385 = v399;
          v386 = v400;
          v387 = v401;
          v388 = v402;
          v389 = 0xA0000000ALL;
          *(_QWORD *)&v384[8] = &off_24EC20868;
          *(_QWORD *)v384 = &off_24EC207B8;
          sub_224002D14((uint64_t)v384, (int32x2_t *)v392, (uint64_t *)&v397, (uint64_t)v403, 1.0);
          sub_22414E9E0((uint64_t)&v383, (uint64_t)v403);
          sub_22316F8F4((uint64_t *)v403);
        }
        *(float32x2_t *)v45.f32 = v49[10];
        v45.i32[2] = v49[11].i32[0];
        v62 = *(int *)(a1 + 80);
        if (v62 > 4)
        {
          v67 = 1.0;
          v64.i32[0] = 0;
          v65.i32[0] = 0;
          v66 = 0;
          v68 = 0;
          v69.i32[0] = 1.0;
        }
        else
        {
          v63 = 4 * v62;
          v64.i32[0] = *(_DWORD *)((char *)&unk_224667040 + v63);
          v65.i32[0] = *(_DWORD *)((char *)&unk_224667054 + v63);
          v66 = *(_DWORD *)((char *)&unk_224667068 + v63);
          v67 = *(float *)((char *)&unk_22466707C + v63);
          v68 = *(_DWORD *)((char *)&unk_224667090 + v63);
          v69.i32[0] = *(_DWORD *)((char *)&unk_2246670A4 + v63);
        }
        v69.i32[1] = v66;
        v64.f32[1] = v67;
        v65.i32[1] = v68;
        v70 = vsub_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v69, v45.f32[0]), v64, *(float32x2_t *)v45.f32, 1), v65, v45, 2), *a2);
        v71 = vmla_lane_f32(vmul_f32(v70, v70), (float32x2_t)vdup_lane_s32((int32x2_t)v70, 1), v70, 1).f32[0];
        if (v71 > 20.25)
          goto LABEL_78;
        v350 = v45;
        *(float *)v53.i32 = expf(v71 / -4.5);
        if (*(float *)v53.i32 <= 0.0)
          goto LABEL_78;
        v72 = *(float *)v53.i32;
        if (v375)
        {
          *(float32x2_t *)v53.i8 = v49[4];
          v53.i32[2] = v49[5].i32[0];
          *(float32x2_t *)v42.i8 = v49[6];
          v42.i32[2] = v49[7].i32[0];
          *(_QWORD *)&v73 = vzip1q_s32(v53, (int32x4_t)v42).u64[0];
          v74 = (int8x16_t)vnegq_f32(v350);
          v45.i32[0] = v49[9].i32[0];
          v75 = (int8x16_t)vtrn2q_s32(v53, (int32x4_t)v42);
          v75.i32[2] = HIDWORD(*(_QWORD *)&v49[8]);
          v76 = (int8x16_t)vzip2q_s32(v53, (int32x4_t)v42);
          v77 = (int32x4_t)v76;
          v77.i32[2] = v45.i32[0];
          *((_QWORD *)&v73 + 1) = *(_QWORD *)&v49[8];
          HIDWORD(v78) = 0;
          LODWORD(v78) = vdupq_lane_s32(*(int32x2_t *)&v75, 0).i32[3];
          *(_QWORD *)((char *)&v78 + 4) = vextq_s8(v75, v76, 4uLL).u64[0];
          v79 = vmla_f32(vmls_lane_f32(vmul_f32(v49[8], *(float32x2_t *)v74.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v49[8], 1), *(float32x2_t *)v350.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v74, v74, 8uLL), *(float32x2_t *)v45.f32).u32[0];
          v77.i64[1] = vdupq_laneq_s32(v77, 2).u32[0];
          v393 = v77;
          *(_OWORD *)v392 = v73;
          *(_OWORD *)&v392[16] = v78;
          v394 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)&v73, *(float *)v74.i32), *(float32x2_t *)v75.i8, *(float32x2_t *)v350.f32, 1), *(float32x2_t *)v76.i8, v350, 2);
          v395 = v79;
          v396 = 1065353216;
          *(int32x4_t *)v360 = v354;
          sub_223207E58(&v398, (int *)v360);
          v80 = powf(v72, 0.33333);
          *(_OWORD *)&v384[16] = *(_OWORD *)&v398.__r_.__value_.__r.__words[1];
          v385 = v399;
          v386 = v400;
          v387 = v401;
          v388 = v402;
          v389 = 0xA0000000ALL;
          *(_QWORD *)&v384[8] = &off_24EC20868;
          *(_QWORD *)v384 = &off_24EC207B8;
          sub_224002D14((uint64_t)v384, (int32x2_t *)v392, (uint64_t *)&v397, (uint64_t)v403, v80);
          sub_22414E9E0((uint64_t)&v376, (uint64_t)v403);
          sub_22316F8F4((uint64_t *)v403);
        }
        v81 = v49[12].f32[1];
        v82 = v49[13].f32[0];
        if (v81 <= v82)
        {
          v83 = 0;
          v84 = v364;
          if (v82 <= v81)
          {
LABEL_90:
            v85 = v49 + 4;
            v364 = v84 | v83;
            if (v51 >= v52)
              goto LABEL_94;
            goto LABEL_77;
          }
        }
        else
        {
          v83 = *(_BYTE *)(a1 + 8) != 1;
          v84 = v364;
          if (v82 <= v81)
            goto LABEL_90;
        }
        v85 = v49 + 4;
        v364 = v84 | v83 | (*(_BYTE *)(a1 + 8) != 2);
        if (v51 >= v52)
        {
LABEL_94:
          v86 = ((char *)v51 - (char *)v349) >> 4;
          v87 = v86 + 1;
          if ((unint64_t)(v86 + 1) >> 60)
            sub_22316E078();
          if (((char *)v52 - (char *)v349) >> 3 > v87)
            v87 = ((char *)v52 - (char *)v349) >> 3;
          if ((unint64_t)((char *)v52 - (char *)v349) >= 0x7FFFFFFFFFFFFFF0)
            v88 = 0xFFFFFFFFFFFFFFFLL;
          else
            v88 = v87;
          if (v88)
          {
            if (v88 >> 60)
              sub_223174E94();
            v89 = (char *)operator new(16 * v88);
            v90 = (uint64_t)&v89[16 * v86];
            *(float *)v90 = v72;
            *(_QWORD *)(v90 + 8) = v85;
            if (v51 != v349)
            {
LABEL_103:
              v91 = v90;
              v92 = v349;
              a1 = v352;
              do
              {
                v93 = (float *)(v91 - 16);
                v53 = *(int32x4_t *)(v51 - 4);
                *(int32x4_t *)(v91 - 16) = v53;
                v51 -= 4;
                v91 -= 16;
              }
              while (v51 != v349);
              v52 = (float *)&v89[16 * v88];
              v51 = (float *)(v90 + 16);
              if (v349)
LABEL_106:
                operator delete(v92);
LABEL_107:
              v349 = v93;
              goto LABEL_78;
            }
          }
          else
          {
            v89 = 0;
            v90 = 16 * v86;
            *(float *)v90 = v72;
            *(_QWORD *)(v90 + 8) = v85;
            if (v51 != v349)
              goto LABEL_103;
          }
          v93 = (float *)v90;
          v92 = v349;
          a1 = v352;
          v52 = (float *)&v89[16 * v88];
          v51 = (float *)(v90 + 16);
          if (v349)
            goto LABEL_106;
          goto LABEL_107;
        }
LABEL_77:
        *v51 = v72;
        *((_QWORD *)v51 + 1) = v85;
        v51 += 4;
LABEL_78:
        v49 = (float32x2_t *)*v49;
        if (!v49)
          goto LABEL_113;
      }
    }
  }
  v349 = 0;
  v51 = 0;
LABEL_113:
  v94 = *(unsigned __int8 *)(a1 + 8);
  v362 = -1;
  v363 = -1;
  v360[0] = 0;
  v360[1] = 0;
  v361 = 0;
  v96 = *(_QWORD *)(a1 + 56);
  v95 = *(_QWORD *)(a1 + 64);
  if (v96 == v95)
  {
    v351 = 0;
    v102 = 0;
    v97 = v348;
    if (!*(_BYTE *)(v348 + 8))
      goto LABEL_181;
LABEL_126:
    LOBYTE(v397) = v102 == v351;
    v103 = *(char *)(a1 + 111);
    if (v103 >= 0)
      v104 = *(unsigned __int8 *)(a1 + 111);
    else
      v104 = *(_QWORD *)(a1 + 96);
    v105 = v104 + 6;
    if (v104 + 6 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v105 >= 0x17)
    {
      v107 = (v105 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v105 | 7) != 0x17)
        v107 = v105 | 7;
      v108 = v107 + 1;
      v109 = (char *)operator new(v107 + 1);
      *(_QWORD *)&v392[16] = v108 | 0x8000000000000000;
      *(_QWORD *)v392 = v109;
      *(_QWORD *)&v392[8] = v104 + 6;
      *(_DWORD *)v109 = 1952543827;
      v106 = v109 + 6;
      *((_WORD *)v109 + 2) = 11891;
    }
    else
    {
      *(_OWORD *)&v392[8] = 0uLL;
      v392[23] = v104 + 6;
      v106 = &v392[6];
      *(_QWORD *)v392 = 0x2E7374617453;
      if (!v104)
        goto LABEL_140;
    }
    if (v103 >= 0)
      v110 = v346;
    else
      v110 = *v346;
    memmove(v106, v110, v104);
LABEL_140:
    v106[v104] = 0;
    v111 = std::string::append((std::string *)v392, ".UserOutOfBounds", 0x10uLL);
    v112 = *(_OWORD *)&v111->__r_.__value_.__l.__data_;
    *(_QWORD *)&v384[16] = *((_QWORD *)&v111->__r_.__value_.__l + 2);
    *(_OWORD *)v384 = v112;
    v111->__r_.__value_.__l.__size_ = 0;
    v111->__r_.__value_.__r.__words[2] = 0;
    v111->__r_.__value_.__r.__words[0] = 0;
    v403[0] = "cv3d.recon.";
    v403[1] = (void *)11;
    v113 = v384[23];
    v114 = v384;
    if (v384[23] < 0)
    {
      v114 = *(_BYTE **)v384;
      v113 = *(_QWORD *)&v384[8];
    }
    *(_QWORD *)&v404 = v114;
    *((_QWORD *)&v404 + 1) = v113;
    sub_2231A9820((uint64_t)v403, (uint64_t)&v405, 0, 0, &v398);
    if ((v384[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)v384);
      if ((v392[23] & 0x80000000) == 0)
        goto LABEL_144;
    }
    else if ((v392[23] & 0x80000000) == 0)
    {
LABEL_144:
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v115 = sub_2241471F8();
        v116 = v115[2];
        if (!v116)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v116 = v115[2];
        }
        v117 = *(_QWORD *)(v116 + 64);
        v118 = (std::mutex *)(v117 + 32);
        std::mutex::lock((std::mutex *)(v117 + 32));
        v120 = *(_QWORD *)(v117 + 96);
        v119 = *(_QWORD *)(v117 + 104);
        std::mutex::unlock(v118);
        if (v120 != v119)
        {
          sub_2241471F8();
          v121 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v121 + 24))(v121))
          {
            v404 = 0u;
            *(_OWORD *)v403 = 0u;
            LODWORD(v405) = 728325608;
            kdebug_trace();
            if (!*(_BYTE *)(v97 + 8))
              sub_22324A974();
            v122 = *(_QWORD *)v97;
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v121 + 24))(v121))
            {
              v384[23] = 13;
              strcpy(v384, "out of bounds");
              *(_QWORD *)v392 = (uint64_t)((double)v122 / 1000000000.0 * 1000000000.0);
              *(_QWORD *)&v392[8] = 2;
              v123 = sub_2241471F8();
              sub_2231AF6C8((uint64_t)v123, v121, (char *)&v397, (uint64_t)v384, (__int128 *)v392);
              if ((v384[23] & 0x80000000) != 0)
                operator delete(*(void **)v384);
            }
            kdebug_trace();
          }
        }
      }
      v404 = 0u;
      *(_OWORD *)v403 = 0u;
      LODWORD(v405) = 728325624;
      kdebug_trace();
      size = HIBYTE(v398.__r_.__value_.__r.__words[2]);
      if ((v398.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v398.__r_.__value_.__l.__size_;
      if (size >= 0x11)
      {
        v125 = &v398;
        if ((v398.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v125 = (std::string *)v398.__r_.__value_.__r.__words[0];
        v126 = v125->__r_.__value_.__r.__words[0];
        v127 = v125->__r_.__value_.__l.__size_;
        v128 = v125->__r_.__value_.__s.__data_[16];
        _ZF = v126 == 0x6365722E64337663 && v127 == 0x73746174532E6E6FLL;
        if (_ZF && v128 == 46)
        {
          v131 = sub_223187510();
          if (!*(_BYTE *)(v97 + 8))
            sub_22324A974();
          if ((v398.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v132 = &v398;
          else
            v132 = (std::string *)v398.__r_.__value_.__r.__words[0];
          if ((v398.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v133 = HIBYTE(v398.__r_.__value_.__r.__words[2]);
          else
            v133 = v398.__r_.__value_.__l.__size_;
          sub_223189538((uint64_t *)v131, v132, v133, (char *)&v397, (uint64_t)"out of bounds", 13);
        }
      }
      kdebug_trace();
      if (SHIBYTE(v398.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v398.__r_.__value_.__l.__data_);
      v404 = 0u;
      *(_OWORD *)v403 = 0u;
      LODWORD(v405) = 728325632;
      kdebug_trace();
      if (!*(_BYTE *)(v97 + 8))
        sub_22324A974();
      v134 = *(_QWORD *)v97;
      v135 = v397;
      v136 = atomic_load((unsigned __int8 *)&qword_25578DF68);
      if ((v136 & 1) == 0 && __cxa_guard_acquire(&qword_25578DF68))
      {
        qword_25578BBC8 = (uint64_t)&off_24EC37778;
        sub_223476B20((uint64_t)&qword_25578BBD0);
        __cxa_atexit((void (*)(void *))sub_223FDB180, &qword_25578BBC8, &dword_22314D000);
        __cxa_guard_release(&qword_25578DF68);
        a1 = v352;
      }
      sub_223B8520C((uint64_t)&qword_25578BBD0, v135 != 0, (double)v134 / 1000000000.0);
      kdebug_trace();
      goto LABEL_181;
    }
    operator delete(*(void **)v392);
    goto LABEL_144;
  }
  v97 = v348;
  do
  {
    v99 = a2[1].f32[0];
    v100 = *(float *)(v96 + 96);
    if (v99 >= v100 && v99 <= (float)(v100 + *(float *)(v96 + 100)))
    {
      v403[0] = (void *)*a2;
      if ((sub_223EA98C0((float *)v403, (float **)v96) & 0x80000000) == 0)
      {
        v101 = (char *)v360[1];
        if (v360[1] >= v361)
        {
          v98 = (void *)sub_22393654C((uint64_t *)v360, v96);
        }
        else
        {
          sub_2239367D8((uint64_t)v360[1], v96);
          v98 = v101 + 144;
        }
        a1 = v352;
        v360[1] = v98;
      }
    }
    v96 += 144;
  }
  while (v96 != v95);
  v102 = v360[0];
  v351 = v360[1];
  if (*(_BYTE *)(v348 + 8))
    goto LABEL_126;
LABEL_181:
  if (v364)
  {
    v137 = v349;
    if (v349 == v51)
    {
      v143 = 0.0;
    }
    else
    {
      v138 = 1.0;
      __asm { FMOV            V0.2S, #1.0 }
      v347 = *(int8x8_t *)_Q0.i8;
      _Q0.i32[3] = 1083179008;
      v143 = 0.0;
      do
      {
        v144 = *v137;
        v145 = (float32x2_t *)*((_QWORD *)v137 + 1);
        *(float32x2_t *)_Q0.i8 = v145[8];
        v359 = _Q0.i32[1];
        _Q0.i32[2] = v145[9].i32[0];
        _Q0 = (int8x16_t)vuzp1q_s32((int32x4_t)_Q0, (int32x4_t)_Q0);
        v358 = _Q0.i64[0];
        v146 = 1.0;
        if (v102 != v351)
        {
          v148 = (float *)v360[0];
          v147 = (float *)v360[1];
          *(float32x2_t *)_Q0.i8 = v145[6];
          _Q0.i32[2] = v145[7].i32[0];
          switch(*(_DWORD *)(v352 + 80))
          {
            case 0:
              v355 = (void *)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(0, *(float *)_Q0.i32), (float32x2_t)0xBF80000000000000, *(float32x2_t *)_Q0.i8, 1), (float32x2_t)3212836864, (float32x4_t)_Q0, 2);
              *(float32x2_t *)&v48 = vmla_f32(vmla_lane_f32(vneg_f32(*(float32x2_t *)_Q0.i8), 0, *(float32x2_t *)_Q0.i8, 1), 0, (float32x2_t)*(_OWORD *)&vextq_s8(_Q0, _Q0, 8uLL));
              v42 = (int8x16_t)xmmword_224666E80;
              v149 = (int8x16_t)xmmword_224657E10;
              v150 = 0.0;
              v151 = v143;
              if (v360[0] != v360[1])
                goto LABEL_191;
              goto LABEL_243;
            case 1:
              v355 = (void *)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(0, *(float *)_Q0.i32), (float32x2_t)1065353216, *(float32x2_t *)_Q0.i8, 1), (float32x2_t)0x3F80000000000000, (float32x4_t)_Q0, 2);
              *(float32x2_t *)&v48 = vmla_f32(vmla_lane_f32(*(float32x2_t *)_Q0.i8, 0, *(float32x2_t *)_Q0.i8, 1), 0, (float32x2_t)*(_OWORD *)&vextq_s8(_Q0, _Q0, 8uLL));
              v42 = (int8x16_t)xmmword_224660820;
              v149 = (int8x16_t)xmmword_2245F4CE0;
              v150 = 0.0;
              v151 = v143;
              if (v360[0] == v360[1])
                goto LABEL_243;
              goto LABEL_191;
            case 2:
              v355 = (void *)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32((float32x2_t)3212836864, *(float *)_Q0.i32), 0, *(float32x2_t *)_Q0.i8, 1), (float32x2_t)0xBF80000000000000, (float32x4_t)_Q0, 2);
              __asm { FMOV            V1.2S, #-1.0 }
              *(float32x2_t *)&v48 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)_Q0.i8, 0), _D1, *(float32x2_t *)_Q0.i8, 1), 0, (float32x2_t)*(_OWORD *)&vextq_s8(_Q0, _Q0, 8uLL));
              v42 = (int8x16_t)xmmword_224666E70;
              v149 = 0uLL;
              v150 = -1.0;
              v151 = v143;
              if (v360[0] == v360[1])
                goto LABEL_243;
              goto LABEL_191;
            case 3:
              v355 = (void *)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32((float32x2_t)0x3F80000000000000, *(float *)_Q0.i32), 0, *(float32x2_t *)_Q0.i8, 1), (float32x2_t)1065353216, (float32x4_t)_Q0, 2);
              *(float32x2_t *)&v48 = vmla_f32(vmla_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)_Q0.i8, 1), *(float32x2_t *)_Q0.i8, 0), 0, (float32x2_t)*(_OWORD *)&vextq_s8(_Q0, _Q0, 8uLL));
              v42 = (int8x16_t)xmmword_2245F53D0;
              v149 = (int8x16_t)xmmword_224657E50;
              v150 = 0.0;
              v151 = v143;
              if (v360[0] == v360[1])
                goto LABEL_243;
              goto LABEL_191;
            case 4:
              v355 = (void *)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32((float32x2_t)0xBF80000000000000, *(float *)_Q0.i32), (float32x2_t)3212836864, *(float32x2_t *)_Q0.i8, 1), 0, (float32x4_t)_Q0, 2);
              __asm { FMOV            V2.2S, #-1.0 }
              *(float32x2_t *)&v48 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)_Q0.i8, 0), 0, *(float32x2_t *)_Q0.i8, 1), _D2, (float32x2_t)*(_OWORD *)&vextq_s8(_Q0, _Q0, 8uLL));
              v42 = (int8x16_t)xmmword_224657E40;
              v149 = (int8x16_t)xmmword_224657E30;
              v150 = 0.0;
              v151 = v143;
              if (v360[0] != v360[1])
                goto LABEL_191;
              goto LABEL_243;
            default:
              v355 = (void *)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32((float32x2_t)1065353216, *(float *)_Q0.i32), (float32x2_t)0x3F80000000000000, *(float32x2_t *)_Q0.i8, 1), 0, (float32x4_t)_Q0, 2);
              *(float32x2_t *)&v48 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(_Q0, _Q0, 8uLL), vmla_lane_f32(vmul_f32(*(float32x2_t *)_Q0.i8, 0), 0, *(float32x2_t *)_Q0.i8, 1));
              v42 = (int8x16_t)xmmword_2245C76E0;
              v149 = (int8x16_t)xmmword_2245F53D0;
              v150 = 1.0;
              v151 = v143;
              if (v360[0] == v360[1])
              {
LABEL_243:
                v157 = INFINITY;
              }
              else
              {
LABEL_191:
                v44.i32[0] = v145[1].i32[0];
                v46.i32[0] = v145[3].i32[0];
                v47.i32[0] = v145[5].i32[0];
                __asm { FMOV            V6.2S, #5.0 }
                *(float32x2_t *)v154.f32 = vmla_f32(vmla_f32(vmul_f32(*v145, 0), 0, v145[2]), _D6, v145[4]);
                *(float32x2_t *)&v154.u32[2] = vmla_f32(vmla_f32(vmul_f32(v44, 0), 0, v46), _D6, v47);
                _Q0 = (int8x16_t)vaddq_f32((float32x4_t)_Q0, v154);
                *(int32x2_t *)v154.f32 = vdup_laneq_s32((int32x4_t)v149, 2);
                v154.f32[0] = v150;
                v44.i32[0] = v149.i32[0];
                v44.i32[1] = vextq_s8(v149, v149, 8uLL).i32[1];
                v155 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v154.f32, *(float *)_Q0.i32), v44, *(float32x2_t *)_Q0.i8, 1), (float32x2_t)vext_s8(*(int8x8_t *)v149.i8, *(int8x8_t *)v42.i8, 4uLL), (float32x4_t)_Q0, 2);
                v43 = (float32x4_t)vextq_s8(_Q0, _Q0, 8uLL);
                v156 = vmla_f32(vmla_laneq_f32(vmul_lane_f32(*(float32x2_t *)_Q0.i8, *(float32x2_t *)v42.i8, 1), (float32x2_t)vdup_lane_s32(*(int32x2_t *)_Q0.i8, 1), (float32x4_t)v42, 3), *(float32x2_t *)v43.f32, (float32x2_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL)).f32[0]- *(float *)&v48;
                v353 = v48;
                v157 = INFINITY;
                if (fabsf(v156) > 0.00001)
                {
                  do
                  {
                    v159 = v148[24];
                    if (*(float *)&v48 < v159 || *(float *)&v48 > (float)(v159 + v148[25]))
                    {
                      _Q0.i32[0] = 0;
                    }
                    else
                    {
                      v403[0] = v355;
                      if ((sub_223EA98C0((float *)v403, (float **)v148) & 0x80000000) != 0)
                      {
                        _Q0.i32[0] = 0;
                        v48 = v353;
                      }
                      else
                      {
                        v160 = v148[24];
                        v161 = v148[25];
                        v403[0] = v355;
                        *(float32x2_t *)v384 = v155;
                        v162 = sub_223EA97A0((uint64_t)v148, (uint64_t *)v403, (uint64_t *)v384);
                        v48 = v353;
                        *(float *)_Q0.i32 = (float)((float)(v160 + v161) - *(float *)&v353) / v156;
                        *(float *)v42.i32 = (float)(v160 - *(float *)&v353) / v156;
                        if (*(float *)v42.i32 >= 1.0 || *(float *)v42.i32 < 0.0)
                          *(float *)v42.i32 = 1.0;
                        if (*(float *)_Q0.i32 >= *(float *)v42.i32 || *(float *)_Q0.i32 < 0.0)
                          _Q0.i32[0] = v42.i32[0];
                        if (*(float *)_Q0.i32 > *(float *)&v162 && (v162 & 0xFF00000000) != 0)
                          _Q0.i32[0] = v162;
                        v138 = 1.0;
                        if (*(float *)_Q0.i32 >= 1.0)
                          _Q0.i32[0] = 1.0;
                      }
                    }
                    if (*(float *)_Q0.i32 < v157 && *(float *)_Q0.i32 > 0.0)
                      v157 = *(float *)_Q0.i32;
                    v148 += 36;
                  }
                  while (v148 != v147);
                }
                else
                {
                  do
                  {
                    v167 = v148[24];
                    if (*(float *)&v48 < v167 || *(float *)&v48 > (float)(v167 + v148[25]))
                    {
                      _Q0.i32[0] = 0;
                    }
                    else
                    {
                      v403[0] = v355;
                      if ((sub_223EA98C0((float *)v403, (float **)v148) & 0x80000000) != 0)
                      {
                        _Q0.i32[0] = 0;
                        v48 = v353;
                      }
                      else
                      {
                        v403[0] = v355;
                        *(float32x2_t *)v384 = v155;
                        v168 = sub_223EA97A0((uint64_t)v148, (uint64_t *)v403, (uint64_t *)v384);
                        _Q0.i32[0] = v168;
                        if (*(float *)&v168 >= 1.0 || (v168 & 0xFF00000000) == 0)
                          *(float *)_Q0.i32 = 1.0;
                        v138 = 1.0;
                        v48 = v353;
                        if (*(float *)_Q0.i32 >= 1.0)
                          _Q0.i32[0] = 1.0;
                      }
                    }
                    if (*(float *)_Q0.i32 < v157 && *(float *)_Q0.i32 > 0.0)
                      v157 = *(float *)_Q0.i32;
                    v148 += 36;
                  }
                  while (v148 != v147);
                }
              }
              if ((LODWORD(v157) & 0x7FFFFFFFu) >= 0x7F800000)
                v146 = 0.0;
              else
                v146 = v157 * v157;
              v143 = v151;
              if (v146 > 0.0)
                break;
              goto LABEL_185;
          }
        }
        if (v379)
        {
          *(float32x2_t *)_Q0.i8 = *v145;
          _Q0.i32[2] = v145[1].i32[0];
          *(float32x2_t *)v42.i8 = v145[2];
          v42.i32[2] = v145[3].i32[0];
          *(float32x2_t *)v43.f32 = v145[6];
          v43.i32[2] = v145[7].i32[0];
          *(_QWORD *)&v171 = vzip1q_s32((int32x4_t)_Q0, (int32x4_t)v42).u64[0];
          v172 = (int8x16_t)vnegq_f32(v43);
          v46.i32[0] = v145[5].i32[0];
          v173 = (int8x16_t)vtrn2q_s32((int32x4_t)_Q0, (int32x4_t)v42);
          v173.i32[2] = HIDWORD(*(_QWORD *)&v145[4]);
          v174 = (int8x16_t)vzip2q_s32((int32x4_t)_Q0, (int32x4_t)v42);
          v175 = (int32x4_t)v174;
          v175.i32[2] = v46.i32[0];
          v176 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)&v171, *(float *)v172.i32), *(float32x2_t *)v173.i8, *(float32x2_t *)v43.f32, 1), *(float32x2_t *)v174.i8, v43, 2);
          v177 = vmls_lane_f32(vmul_f32(v145[4], *(float32x2_t *)v172.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v145[4], 1), *(float32x2_t *)v43.f32, 1);
          v178 = (float32x2_t)vextq_s8(v172, v172, 8uLL).u64[0];
          *((_QWORD *)&v171 + 1) = *(_QWORD *)&v145[4];
          v172.i32[3] = 0;
          v172.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v173, 0).i32[3];
          *(uint64_t *)((char *)v172.i64 + 4) = vextq_s8(v173, v174, 4uLL).u64[0];
          v175.i64[1] = vdupq_laneq_s32(v175, 2).u32[0];
          v393 = v175;
          *(_OWORD *)v392 = v171;
          *(int8x16_t *)&v392[16] = v172;
          v394 = v176;
          v395 = vmla_f32(v177, v178, v46).u32[0];
          v396 = 1065353216;
          v397 = xmmword_224651370;
          sub_223207E58(&v398, (int *)&v397);
          *(_OWORD *)&v384[16] = *(_OWORD *)&v398.__r_.__value_.__r.__words[1];
          v385 = v399;
          v386 = v400;
          v387 = v401;
          v388 = v402;
          v389 = 0xA0000000ALL;
          *(_QWORD *)&v384[8] = &off_24EC20868;
          *(_QWORD *)v384 = &off_24EC207B8;
          sub_224002D14((uint64_t)v384, (int32x2_t *)v392, &v358, (uint64_t)v403, 1.0);
          sub_22414E9E0((uint64_t)&v380, (uint64_t)v403);
          sub_22316F8F4((uint64_t *)v403);
        }
        if (v371)
        {
          *(float32x2_t *)_Q0.i8 = *v145;
          _Q0.i32[2] = v145[1].i32[0];
          *(float32x2_t *)v42.i8 = v145[2];
          v42.i32[2] = v145[3].i32[0];
          *(float32x2_t *)v43.f32 = v145[6];
          v43.i32[2] = v145[7].i32[0];
          *(_QWORD *)&v179 = vzip1q_s32((int32x4_t)_Q0, (int32x4_t)v42).u64[0];
          v180 = (int8x16_t)vnegq_f32(v43);
          v46.i32[0] = v145[5].i32[0];
          v181 = (int8x16_t)vtrn2q_s32((int32x4_t)_Q0, (int32x4_t)v42);
          v181.i32[2] = HIDWORD(*(_QWORD *)&v145[4]);
          v182 = (int8x16_t)vzip2q_s32((int32x4_t)_Q0, (int32x4_t)v42);
          v183 = (int32x4_t)v182;
          v183.i32[2] = v46.i32[0];
          v184 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)&v179, *(float *)v180.i32), *(float32x2_t *)v181.i8, *(float32x2_t *)v43.f32, 1), *(float32x2_t *)v182.i8, v43, 2);
          v185 = vmls_lane_f32(vmul_f32(v145[4], *(float32x2_t *)v180.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v145[4], 1), *(float32x2_t *)v43.f32, 1);
          v186 = (float32x2_t)vextq_s8(v180, v180, 8uLL).u64[0];
          *((_QWORD *)&v179 + 1) = *(_QWORD *)&v145[4];
          v180.i32[3] = 0;
          v180.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v181, 0).i32[3];
          *(uint64_t *)((char *)v180.i64 + 4) = vextq_s8(v181, v182, 4uLL).u64[0];
          v183.i64[1] = vdupq_laneq_s32(v183, 2).u32[0];
          v393 = v183;
          *(_OWORD *)v392 = v179;
          *(int8x16_t *)&v392[16] = v180;
          v394 = v184;
          v395 = vmla_f32(v185, v186, v46).u32[0];
          v396 = 1065353216;
          v397 = xmmword_224651370;
          sub_223207E58(&v398, (int *)&v397);
          v187 = powf(v146, 0.33333);
          v404 = *(_OWORD *)&v398.__r_.__value_.__r.__words[1];
          v405 = v399;
          v406 = v400;
          v407 = v401;
          v408 = v402;
          v409 = 0xA0000000ALL;
          v403[1] = &off_24EC20868;
          v403[0] = &off_24EC207B8;
          sub_224002D14((uint64_t)v403, (int32x2_t *)v392, &v358, (uint64_t)v384, v187);
          if ((float)(v146 * 5.0) > 0.0)
          {
            v188.f32[0] = v146 * 5.0;
            v356 = v188;
            sub_2241498F4((uint64_t)v403, 0);
            v192 = (std::string::size_type)v145[6];
            LODWORD(v398.__r_.__value_.__r.__words[1]) = v145[7].i32[0];
            v398.__r_.__value_.__r.__words[0] = v192;
            v193 = (std::string::size_type *)v403[1];
            if (v403[1] >= (void *)v404)
            {
              v195 = (_DWORD *)sub_2233B2838((unint64_t *)v403, (uint64_t *)&v398);
            }
            else
            {
              v194 = v398.__r_.__value_.__r.__words[0];
              *((_DWORD *)v403[1] + 2) = v398.__r_.__value_.__r.__words[1];
              *v193 = v194;
              v195 = (_DWORD *)v193 + 3;
            }
            v403[1] = v195;
            v189.i32[0] = v145[1].i32[0];
            v190.i32[0] = v145[3].i32[0];
            v191.i32[0] = v145[5].i32[0];
            *(float32x2_t *)v196.f32 = vmla_n_f32(vmla_f32(vmul_f32(*v145, 0), 0, v145[2]), v145[4], v356.f32[0]);
            *(float32x2_t *)&v196.u32[2] = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v189.f32, 0), 0, v190), v356, v191);
            *(float32x2_t *)v189.f32 = v145[6];
            v189.i32[2] = v145[7].i32[0];
            v197 = vaddq_f32(v196, v189);
            LODWORD(v398.__r_.__value_.__r.__words[1]) = v197.i32[2];
            v398.__r_.__value_.__r.__words[0] = v197.i64[0];
            if ((unint64_t)v195 >= (unint64_t)v404)
            {
              v199 = (void *)sub_2233B2B48((unint64_t *)v403, (uint64_t *)&v398);
            }
            else
            {
              v198 = v398.__r_.__value_.__r.__words[0];
              v195[2] = v398.__r_.__value_.__r.__words[1];
              *(_QWORD *)v195 = v198;
              v199 = v195 + 3;
            }
            v403[1] = v199;
            LODWORD(v407) = 1;
            v200 = (uint64_t *)*((_QWORD *)&v405 + 1);
            if (*((_QWORD *)&v405 + 1) >= (unint64_t)v406)
            {
              v202 = sub_2233B2B48((unint64_t *)&v405, &v358);
            }
            else
            {
              v201 = v358;
              *(_DWORD *)(*((_QWORD *)&v405 + 1) + 8) = v359;
              *v200 = v201;
              v202 = (unint64_t)v200 + 12;
            }
            *((_QWORD *)&v405 + 1) = v202;
            if (v202 >= (unint64_t)v406)
            {
              v204 = sub_2233B2B48((unint64_t *)&v405, &v358);
            }
            else
            {
              v203 = v358;
              *(_DWORD *)(v202 + 8) = v359;
              *(_QWORD *)v202 = v203;
              v204 = v202 + 12;
            }
            *((_QWORD *)&v405 + 1) = v204;
            *(_QWORD *)&v397 = 0x100000000;
            DWORD2(v397) = 0;
            v205 = (_QWORD *)v411;
            if (v411 >= v412)
            {
              v207 = sub_2233B29C0(&v410, (uint64_t *)&v397);
            }
            else
            {
              v206 = v397;
              *(_DWORD *)(v411 + 8) = DWORD2(v397);
              *v205 = v206;
              v207 = (unint64_t)v205 + 12;
            }
            v411 = v207;
            sub_22414E9E0((uint64_t)v384, (uint64_t)v403);
            sub_22316F8F4((uint64_t *)v403);
          }
          sub_22414E9E0((uint64_t)&v372, (uint64_t)v384);
          sub_22316F8F4((uint64_t *)v384);
        }
        v208 = v138 - v145[8].f32[0];
        v209 = 0.0;
        if (v208 >= 0.0001)
        {
          v210 = (float)((float)(1.0 - (float)((float)((float)(v144 * v146) * 0.99) * v208)) * 0.5)
               + (float)((float)((float)((float)(v144 * v146) * 0.99) * v208) * (float)(v145[8].f32[1] / v208));
          v211 = logf(v210);
          v138 = 1.0;
          *(float *)_Q0.i32 = logf(1.0 - v210);
          v209 = v211 - *(float *)_Q0.i32;
          if (v367)
          {
            v42.i32[0] = 0;
            *(float *)&v42.i32[1] = v211 - *(float *)_Q0.i32;
            v390 = 0;
            v391 = vand_s8(v347, (int8x8_t)vcgt_f32(*(float32x2_t *)v42.i8, (float32x2_t)LODWORD(v209)));
            *(float32x2_t *)_Q0.i8 = *v145;
            _Q0.i32[2] = v145[1].i32[0];
            *(float32x2_t *)v42.i8 = v145[2];
            v42.i32[2] = v145[3].i32[0];
            v357 = v209;
            *(float32x2_t *)v43.f32 = v145[6];
            v43.i32[2] = v145[7].i32[0];
            *(_QWORD *)&v212 = vzip1q_s32((int32x4_t)_Q0, (int32x4_t)v42).u64[0];
            v213 = (int8x16_t)vnegq_f32(v43);
            v46.i32[0] = v145[5].i32[0];
            v214 = (int8x16_t)vtrn2q_s32((int32x4_t)_Q0, (int32x4_t)v42);
            v214.i32[2] = HIDWORD(*(_QWORD *)&v145[4]);
            v215 = (int8x16_t)vzip2q_s32((int32x4_t)_Q0, (int32x4_t)v42);
            v216 = (int32x4_t)v215;
            v216.i32[2] = v46.i32[0];
            v217 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)&v212, *(float *)v213.i32), *(float32x2_t *)v214.i8, *(float32x2_t *)v43.f32, 1), *(float32x2_t *)v215.i8, v43, 2);
            v218 = vmls_lane_f32(vmul_f32(v145[4], *(float32x2_t *)v213.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v145[4], 1), *(float32x2_t *)v43.f32, 1);
            v219 = (float32x2_t)vextq_s8(v213, v213, 8uLL).u64[0];
            *((_QWORD *)&v212 + 1) = *(_QWORD *)&v145[4];
            v213.i32[3] = 0;
            v213.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v214, 0).i32[3];
            *(uint64_t *)((char *)v213.i64 + 4) = vextq_s8(v214, v215, 4uLL).u64[0];
            v216.i64[1] = vdupq_laneq_s32(v216, 2).u32[0];
            v393 = v216;
            *(_OWORD *)v392 = v212;
            *(int8x16_t *)&v392[16] = v213;
            v394 = v217;
            v395 = vmla_f32(v218, v219, v46).u32[0];
            v396 = 1065353216;
            v397 = xmmword_224651370;
            sub_223207E58(&v398, (int *)&v397);
            v220 = powf(fabsf(v357 / 4.5951), 0.33333);
            *(_OWORD *)&v384[16] = *(_OWORD *)&v398.__r_.__value_.__r.__words[1];
            v385 = v399;
            v386 = v400;
            v387 = v401;
            v388 = v402;
            v389 = 0xA0000000ALL;
            *(_QWORD *)&v384[8] = &off_24EC20868;
            *(_QWORD *)v384 = &off_24EC207B8;
            sub_224002D14((uint64_t)v384, (int32x2_t *)v392, (uint64_t *)&v390, (uint64_t)v403, v220);
            sub_22414E9E0((uint64_t)&v368, (uint64_t)v403);
            sub_22316F8F4((uint64_t *)v403);
            v209 = v357;
          }
        }
        v143 = v143 + v209;
LABEL_185:
        v137 += 4;
      }
      while (v137 != v51);
    }
    if (v143 > 0.0)
      v221 = 1;
    else
      v221 = 2;
    if (v143 == 0.0)
      v94 = 0;
    else
      v94 = v221;
    v222 = (uint64_t *)v360[0];
    v362 = 0;
    v363 = 954437177 * ((unint64_t)((char *)v360[1] - (char *)v360[0]) >> 4);
    if (v360[1] == v360[0])
    {
      a1 = v352;
    }
    else
    {
      v223 = 0;
      a1 = v352;
      do
      {
        v227 = (const double *)v222[3];
        v226 = (char *)v222[4];
        if (v227 != (const double *)v226)
        {
          v228 = v226 - (char *)v227 - 24;
          if (v228 >= 0xC0)
          {
            v230 = v228 / 0x18 + 1;
            v231 = v230 & 7;
            if ((v230 & 7) == 0)
              v231 = 8;
            v232 = v230 - v231;
            v229 = &v227[3 * v232];
            v233 = 0uLL;
            v234 = (int32x4_t)v223;
            do
            {
              v235 = v227 + 12;
              v236 = v227;
              v414 = vld3q_f64(v236);
              v236 += 6;
              v415 = vld3q_f64(v236);
              v416 = vld3q_f64(v235);
              v237 = v227 + 18;
              v417 = vld3q_f64(v237);
              v234 = vaddq_s32(v234, vshrn_high_n_s64(vshrn_n_s64(vsubq_s64((int64x2_t)v414.val[1], (int64x2_t)v414.val[0]), 3uLL), vsubq_s64((int64x2_t)v415.val[1], (int64x2_t)v415.val[0]), 3uLL));
              v233 = vaddq_s32(v233, vshrn_high_n_s64(vshrn_n_s64(vsubq_s64((int64x2_t)v416.val[1], (int64x2_t)v416.val[0]), 3uLL), vsubq_s64((int64x2_t)v417.val[1], (int64x2_t)v417.val[0]), 3uLL));
              v227 += 24;
              v232 -= 8;
            }
            while (v232);
            v223 = vaddvq_s32(vaddq_s32(v233, v234));
          }
          else
          {
            v229 = (const double *)v222[3];
          }
          do
          {
            v239 = *(_QWORD *)v229;
            v238 = *((_QWORD *)v229 + 1);
            v229 += 3;
            v223 += (unint64_t)(v238 - v239) >> 3;
          }
          while (v229 != (const double *)v226);
        }
        v225 = *v222;
        v224 = v222[1];
        v222 += 18;
        v223 += (unint64_t)(v224 - v225) >> 3;
      }
      while (v222 != v360[1]);
      v362 = v223;
    }
  }
  v240 = *(unsigned __int8 *)(a1 + 111);
  v241 = (char)v240;
  if ((v240 & 0x80u) != 0)
    v240 = *(_QWORD *)(a1 + 96);
  if (v240 == 3)
  {
    v242 = v241 >= 0 ? v346 : (const void **)*v346;
    v243 = *(unsigned __int16 *)v242;
    v244 = *((unsigned __int8 *)v242 + 2);
    if (v243 == 21072 && v244 == 82)
    {
      v403[0] = "cv3d.recon.";
      v403[1] = (void *)11;
      *(_QWORD *)&v404 = "Stats.Occupancy.IOClassification.Pnp";
      *((_QWORD *)&v404 + 1) = 36;
      sub_2231A9820((uint64_t)v403, (uint64_t)&v405, 0, 0, (std::string *)v384);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v259 = sub_2241471F8();
        v260 = v259[2];
        if (!v260)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v260 = v259[2];
        }
        v261 = *(_QWORD *)(v260 + 64);
        v262 = (std::mutex *)(v261 + 32);
        std::mutex::lock((std::mutex *)(v261 + 32));
        v264 = *(_QWORD *)(v261 + 96);
        v263 = *(_QWORD *)(v261 + 104);
        std::mutex::unlock(v262);
        if (v264 != v263)
        {
          sub_2241471F8();
          v265 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v265 + 24))(v265))
          {
            v404 = 0u;
            *(_OWORD *)v403 = 0u;
            LODWORD(v405) = 728325608;
            kdebug_trace();
            v398.__r_.__value_.__r.__words[0] = *(_QWORD *)(v352 + 40);
            sub_223197768((double *)&qword_255788F20, v265, (uint64_t *)&v398, "# keyframes");
            kdebug_trace();
          }
        }
      }
      v404 = 0u;
      *(_OWORD *)v403 = 0u;
      LODWORD(v405) = 728325624;
      kdebug_trace();
      v266 = v384[23];
      if (v384[23] < 0)
        v266 = *(_QWORD *)&v384[8];
      if (v266 >= 0x11)
      {
        v267 = v384;
        if (v384[23] < 0)
          v267 = *(_BYTE **)v384;
        v268 = *(_QWORD *)v267;
        v269 = *((_QWORD *)v267 + 1);
        v270 = v267[16];
        if (v268 == 0x6365722E64337663 && v269 == 0x73746174532E6E6FLL && v270 == 46)
        {
          v273 = sub_223187510();
          if (v384[23] >= 0)
            v274 = v384;
          else
            v274 = *(_BYTE **)v384;
          if (v384[23] >= 0)
            v275 = v384[23];
          else
            v275 = *(_QWORD *)&v384[8];
          v398.__r_.__value_.__r.__words[0] = *(_QWORD *)(v352 + 40);
          sub_22318760C((uint64_t *)v273, v274, v275, (uint64_t *)&v398, (uint64_t)"# keyframes", 11);
        }
      }
      kdebug_trace();
      if ((v384[23] & 0x80000000) != 0)
        operator delete(*(void **)v384);
      v403[0] = "cv3d.recon.";
      v403[1] = (void *)11;
      *(_QWORD *)&v404 = "Stats.Occupancy.IOClassification.Pnp";
      *((_QWORD *)&v404 + 1) = 36;
      sub_2231A9820((uint64_t)v403, (uint64_t)&v405, 0, 0, (std::string *)v384);
      sub_224569D7C();
      sub_224569A80();
      v276 = v94;
      if (os_variant_has_internal_diagnostics())
      {
        v277 = sub_2241471F8();
        v278 = v277[2];
        if (!v278)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v278 = v277[2];
        }
        v279 = *(_QWORD *)(v278 + 64);
        v280 = (std::mutex *)(v279 + 32);
        std::mutex::lock((std::mutex *)(v279 + 32));
        v282 = *(_QWORD *)(v279 + 96);
        v281 = *(_QWORD *)(v279 + 104);
        std::mutex::unlock(v280);
        _ZF = v282 == v281;
        v94 = v276;
        if (!_ZF)
        {
          sub_2241471F8();
          v283 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
          v94 = v276;
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v283 + 24))(v283))
          {
            v404 = 0u;
            *(_OWORD *)v403 = 0u;
            LODWORD(v405) = 728325608;
            kdebug_trace();
            v398.__r_.__value_.__r.__words[0] = ((char *)v51 - (char *)v349) >> 4;
            sub_223B843EC((double *)&qword_255788F20, v283, (uint64_t *)&v398, "# nearby keyframes");
            kdebug_trace();
          }
        }
      }
      v404 = 0u;
      *(_OWORD *)v403 = 0u;
      LODWORD(v405) = 728325624;
      kdebug_trace();
      v284 = v384[23];
      if (v384[23] < 0)
        v284 = *(_QWORD *)&v384[8];
      if (v284 >= 0x11)
      {
        v285 = v384;
        if (v384[23] < 0)
          v285 = *(_BYTE **)v384;
        v286 = *(_QWORD *)v285;
        v287 = *((_QWORD *)v285 + 1);
        v288 = v285[16];
        if (v286 == 0x6365722E64337663 && v287 == 0x73746174532E6E6FLL && v288 == 46)
        {
          v291 = sub_223187510();
          if (v384[23] >= 0)
            v292 = v384;
          else
            v292 = *(_BYTE **)v384;
          if (v384[23] >= 0)
            v293 = v384[23];
          else
            v293 = *(_QWORD *)&v384[8];
          v398.__r_.__value_.__r.__words[0] = ((char *)v51 - (char *)v349) >> 4;
          sub_22318760C((uint64_t *)v291, v292, v293, (uint64_t *)&v398, (uint64_t)"# nearby keyframes", 18);
        }
      }
      kdebug_trace();
      if ((v384[23] & 0x80000000) != 0)
        operator delete(*(void **)v384);
      v403[0] = "cv3d.recon.";
      v403[1] = (void *)11;
      *(_QWORD *)&v404 = "Stats.Occupancy.IOClassification.Pnp";
      *((_QWORD *)&v404 + 1) = 36;
      sub_2231A9820((uint64_t)v403, (uint64_t)&v405, 0, 0, &v398);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v294 = sub_2241471F8();
        v295 = v294[2];
        if (!v295)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v295 = v294[2];
        }
        v296 = *(_QWORD *)(v295 + 64);
        v297 = (std::mutex *)(v296 + 32);
        std::mutex::lock((std::mutex *)(v296 + 32));
        v299 = *(_QWORD *)(v296 + 96);
        v298 = *(_QWORD *)(v296 + 104);
        std::mutex::unlock(v297);
        _ZF = v299 == v298;
        v94 = v276;
        if (!_ZF)
        {
          sub_2241471F8();
          v300 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
          v94 = v276;
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v300 + 24))(v300))
          {
            v404 = 0u;
            *(_OWORD *)v403 = 0u;
            LODWORD(v405) = 728325608;
            kdebug_trace();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v300 + 24))(v300))
            {
              *(_QWORD *)v384 = operator new(0x28uLL);
              *(_OWORD *)&v384[8] = xmmword_2245C6450;
              strcpy(*(char **)v384, "is_indoor_outdoor_label_contested");
              *(_QWORD *)v392 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
              *(_QWORD *)&v392[8] = 2;
              v301 = sub_2241471F8();
              sub_22393AEE8((uint64_t)v301, v300, &v364, (uint64_t)v384, (__int128 *)v392);
              if ((v384[23] & 0x80000000) != 0)
                operator delete(*(void **)v384);
            }
            kdebug_trace();
          }
        }
      }
      v404 = 0u;
      *(_OWORD *)v403 = 0u;
      LODWORD(v405) = 728325624;
      kdebug_trace();
      v302 = HIBYTE(v398.__r_.__value_.__r.__words[2]);
      if ((v398.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v302 = v398.__r_.__value_.__l.__size_;
      if (v302 >= 0x11)
      {
        v303 = &v398;
        if ((v398.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v303 = (std::string *)v398.__r_.__value_.__r.__words[0];
        v304 = v303->__r_.__value_.__r.__words[0];
        v305 = v303->__r_.__value_.__l.__size_;
        v306 = v303->__r_.__value_.__s.__data_[16];
        if (v304 == 0x6365722E64337663 && v305 == 0x73746174532E6E6FLL && v306 == 46)
        {
          v309 = sub_223187510();
          if ((v398.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v310 = &v398;
          else
            v310 = (std::string *)v398.__r_.__value_.__r.__words[0];
          if ((v398.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v311 = HIBYTE(v398.__r_.__value_.__r.__words[2]);
          else
            v311 = v398.__r_.__value_.__l.__size_;
          sub_223189538((uint64_t *)v309, v310, v311, &v364, (uint64_t)"is_indoor_outdoor_label_contested", 33);
        }
      }
      kdebug_trace();
      if (SHIBYTE(v398.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v398.__r_.__value_.__l.__data_);
      if (v364)
      {
        v403[0] = "cv3d.recon.";
        v403[1] = (void *)11;
        *(_QWORD *)&v404 = "Stats.Occupancy.IOClassification.Pnp";
        *((_QWORD *)&v404 + 1) = 36;
        sub_2231A9820((uint64_t)v403, (uint64_t)&v405, 0, 0, (std::string *)v384);
        sub_224569D7C();
        sub_224569A80();
        if (os_variant_has_internal_diagnostics())
        {
          v312 = sub_2241471F8();
          v313 = v312[2];
          if (!v313)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
            {
              abort();
            }
            v313 = v312[2];
          }
          v314 = *(_QWORD *)(v313 + 64);
          v315 = (std::mutex *)(v314 + 32);
          std::mutex::lock((std::mutex *)(v314 + 32));
          v317 = *(_QWORD *)(v314 + 96);
          v316 = *(_QWORD *)(v314 + 104);
          std::mutex::unlock(v315);
          _ZF = v317 == v316;
          v94 = v276;
          if (!_ZF)
          {
            sub_2241471F8();
            v318 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
            v94 = v276;
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v318 + 24))(v318))
            {
              v404 = 0u;
              *(_OWORD *)v403 = 0u;
              LODWORD(v405) = 728325608;
              kdebug_trace();
              sub_223B84528(v318, &v363);
              kdebug_trace();
            }
          }
        }
        v404 = 0u;
        *(_OWORD *)v403 = 0u;
        LODWORD(v405) = 728325624;
        kdebug_trace();
        v319 = v384[23];
        if (v384[23] < 0)
          v319 = *(_QWORD *)&v384[8];
        if (v319 >= 0x11)
        {
          v320 = v384;
          if (v384[23] < 0)
            v320 = *(_BYTE **)v384;
          v321 = *(_QWORD *)v320;
          v322 = *((_QWORD *)v320 + 1);
          v323 = v320[16];
          if (v321 == 0x6365722E64337663 && v322 == 0x73746174532E6E6FLL && v323 == 46)
          {
            v326 = sub_223187510();
            if (v384[23] >= 0)
              v327 = v384;
            else
              v327 = *(_BYTE **)v384;
            if (v384[23] >= 0)
              v328 = v384[23];
            else
              v328 = *(_QWORD *)&v384[8];
            sub_22361F5C4(v326, v327, v328, &v363, (uint64_t)"# boundaries", 12);
          }
        }
        kdebug_trace();
        if ((v384[23] & 0x80000000) != 0)
          operator delete(*(void **)v384);
        v403[0] = "cv3d.recon.";
        v403[1] = (void *)11;
        *(_QWORD *)&v404 = "Stats.Occupancy.IOClassification.Pnp";
        *((_QWORD *)&v404 + 1) = 36;
        sub_2231A9820((uint64_t)v403, (uint64_t)&v405, 0, 0, (std::string *)v384);
        sub_224569D7C();
        sub_224569A80();
        if (os_variant_has_internal_diagnostics())
        {
          v329 = sub_2241471F8();
          v330 = v329[2];
          if (!v330)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
            {
              abort();
            }
            v330 = v329[2];
          }
          v331 = *(_QWORD *)(v330 + 64);
          v332 = (std::mutex *)(v331 + 32);
          std::mutex::lock((std::mutex *)(v331 + 32));
          v334 = *(_QWORD *)(v331 + 96);
          v333 = *(_QWORD *)(v331 + 104);
          std::mutex::unlock(v332);
          if (v334 != v333)
          {
            sub_2241471F8();
            v335 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v335 + 24))(v335))
            {
              v404 = 0u;
              *(_OWORD *)v403 = 0u;
              LODWORD(v405) = 728325608;
              kdebug_trace();
              sub_223B84600(v335, (int *)&v362);
              kdebug_trace();
            }
          }
        }
        v404 = 0u;
        *(_OWORD *)v403 = 0u;
        LODWORD(v405) = 728325624;
        kdebug_trace();
        v336 = v384[23];
        if (v384[23] < 0)
          v336 = *(_QWORD *)&v384[8];
        if (v336 >= 0x11)
        {
          v337 = v384;
          if (v384[23] < 0)
            v337 = *(_BYTE **)v384;
          v338 = *(_QWORD *)v337;
          v339 = *((_QWORD *)v337 + 1);
          v340 = v337[16];
          if (v338 == 0x6365722E64337663 && v339 == 0x73746174532E6E6FLL && v340 == 46)
          {
            v343 = sub_223187510();
            if (v384[23] >= 0)
              v344 = v384;
            else
              v344 = *(_BYTE **)v384;
            if (v384[23] >= 0)
              v345 = v384[23];
            else
              v345 = *(_QWORD *)&v384[8];
            sub_22361F5C4(v343, v344, v345, (int *)&v362, (uint64_t)"# boundary segments", 19);
          }
        }
        kdebug_trace();
        if ((v384[23] & 0x80000000) != 0)
          operator delete(*(void **)v384);
      }
    }
  }
  kdebug_trace();
  v246 = (char *)v360[0];
  if (v360[0])
  {
    v247 = (char *)v360[1];
    v248 = v360[0];
    if (v360[1] != v360[0])
    {
      do
      {
        v249 = (void *)*((_QWORD *)v247 - 12);
        if (v249)
        {
          *((_QWORD *)v247 - 11) = v249;
          operator delete(v249);
        }
        v250 = *((_QWORD *)v247 - 15);
        if (v250)
        {
          v251 = *((_QWORD *)v247 - 14);
          v252 = (void *)*((_QWORD *)v247 - 15);
          if (v251 != v250)
          {
            v253 = *((_QWORD *)v247 - 14);
            do
            {
              v255 = *(void **)(v253 - 24);
              v253 -= 24;
              v254 = v255;
              if (v255)
              {
                *(_QWORD *)(v251 - 16) = v254;
                operator delete(v254);
              }
              v251 = v253;
            }
            while (v253 != v250);
            v252 = (void *)*((_QWORD *)v247 - 15);
          }
          *((_QWORD *)v247 - 14) = v250;
          operator delete(v252);
        }
        v256 = v247 - 144;
        v257 = (void *)*((_QWORD *)v247 - 18);
        if (v257)
        {
          *((_QWORD *)v247 - 17) = v257;
          operator delete(v257);
        }
        v247 -= 144;
      }
      while (v256 != v246);
      v248 = v360[0];
    }
    v360[1] = v246;
    operator delete(v248);
  }
  if (v349)
    operator delete(v349);
  sub_223B84DA4((void **)&v365);
  sub_223B84DA4((void **)&v369);
  sub_223B84DA4((void **)&__p);
  sub_223B84DA4((void **)&__dst);
  sub_223B84DA4(v381);
  return v94;
}

void sub_223B840A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36)
{
  __cxa_guard_abort(&qword_25578DF68);
  sub_2231874DC((uint64_t)&STACK[0xBA0]);
  sub_22391786C(&a31);
  if (a17)
    operator delete(a17);
  sub_223B84DA4(&a36);
  sub_223B84DA4((void **)&STACK[0x290]);
  sub_223B84DA4((void **)&STACK[0x448]);
  sub_223B84DA4((void **)&STACK[0x600]);
  sub_223B84DA4((void **)&STACK[0x7B8]);
  _Unwind_Resume(a1);
}

void sub_223B843EC(double *a1, uint64_t a2, uint64_t *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_2231AD778((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_223B8450C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223B84528(uint64_t a1, int *a2)
{
  uint64_t *v4;
  __int128 v5;
  void *__p[2];
  char v7;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    v7 = 12;
    *(_QWORD *)&v5 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
    *((_QWORD *)&v5 + 1) = 2;
    strcpy((char *)__p, "# boundaries");
    v4 = sub_2241471F8();
    sub_223B857C4((uint64_t)v4, a1, a2, (uint64_t *)__p, &v5);
    if (v7 < 0)
      operator delete(__p[0]);
  }
}

void sub_223B845E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223B84600(uint64_t a1, int *a2)
{
  uint64_t *v4;
  __int128 v5;
  char __p[20];
  char v7;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    v7 = 19;
    strcpy(__p, "# boundary segments");
    *(_QWORD *)&v5 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
    *((_QWORD *)&v5 + 1) = 2;
    v4 = sub_2241471F8();
    sub_223B857C4((uint64_t)v4, a1, a2, (uint64_t *)__p, &v5);
    if (v7 < 0)
      operator delete(*(void **)__p);
  }
}

void sub_223B846BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223B846D8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t i;

  if (*(_QWORD *)(a1 + 40))
  {
    v2 = *(_QWORD **)(a1 + 32);
    if (v2)
    {
      do
      {
        v3 = (_QWORD *)*v2;
        operator delete(v2);
        v2 = v3;
      }
      while (v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    v4 = *(_QWORD *)(a1 + 24);
    if (v4)
    {
      for (i = 0; i != v4; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 40) = 0;
  }
  *(_BYTE *)(a1 + 8) = 0;
  sub_2238891A0((uint64_t *)(a1 + 56));
  *(_DWORD *)(a1 + 80) = 0;
}

uint64_t sub_223B8474C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;

  *(_QWORD *)a1 = off_24EC5FCD8;
  v2 = *(std::__shared_weak_count **)(a1 + 120);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*(char *)(a1 + 111) & 0x80000000) == 0)
    {
LABEL_6:
      v5 = (uint64_t *)(a1 + 56);
      if (!*(_QWORD *)(a1 + 56))
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  else
  {
LABEL_5:
    if ((*(char *)(a1 + 111) & 0x80000000) == 0)
      goto LABEL_6;
  }
  operator delete(*(void **)(a1 + 88));
  v5 = (uint64_t *)(a1 + 56);
  if (*(_QWORD *)(a1 + 56))
  {
LABEL_7:
    sub_2238891A0(v5);
    operator delete((void *)*v5);
  }
LABEL_8:
  v6 = *(_QWORD **)(a1 + 32);
  if (v6)
  {
    do
    {
      v7 = (_QWORD *)*v6;
      operator delete(v6);
      v6 = v7;
    }
    while (v7);
  }
  v8 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v8)
    operator delete(v8);
  return a1;
}

void sub_223B8481C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;

  *(_QWORD *)a1 = off_24EC5FCD8;
  v2 = *(std::__shared_weak_count **)(a1 + 120);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*(char *)(a1 + 111) & 0x80000000) == 0)
    {
LABEL_6:
      v5 = (uint64_t *)(a1 + 56);
      if (!*(_QWORD *)(a1 + 56))
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  else
  {
LABEL_5:
    if ((*(char *)(a1 + 111) & 0x80000000) == 0)
      goto LABEL_6;
  }
  operator delete(*(void **)(a1 + 88));
  v5 = (uint64_t *)(a1 + 56);
  if (!*(_QWORD *)(a1 + 56))
  {
LABEL_8:
    v6 = *(_QWORD **)(a1 + 32);
    if (v6)
    {
      do
      {
        v7 = (_QWORD *)*v6;
        operator delete(v6);
        v6 = v7;
      }
      while (v7);
    }
    v8 = *(void **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v8)
      operator delete(v8);
    JUMPOUT(0x227684CE8);
  }
LABEL_7:
  sub_2238891A0(v5);
  operator delete((void *)*v5);
  goto LABEL_8;
}

uint64_t sub_223B848FC()
{
  return 1;
}

char *sub_223B84904(char *__dst, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  char *v6;
  __int128 v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  std::mutex *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  std::string __p;
  _QWORD v19[4];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (*((char *)a2 + 23) < 0)
  {
    sub_223197FA4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    v6 = __dst + 24;
    if ((*((char *)a3 + 23) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_5:
    sub_223197FA4(v6, *(void **)a3, *((_QWORD *)a3 + 1));
    goto LABEL_6;
  }
  v5 = *a2;
  *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
  *(_OWORD *)__dst = v5;
  v6 = __dst + 24;
  if (*((char *)a3 + 23) < 0)
    goto LABEL_5;
LABEL_3:
  v7 = *a3;
  *((_QWORD *)v6 + 2) = *((_QWORD *)a3 + 2);
  *(_OWORD *)v6 = v7;
LABEL_6:
  __dst[48] = 0;
  sub_2241498F4((uint64_t)(__dst + 56), 0);
  sub_224569D7C();
  sub_224569A80();
  if (!os_variant_has_internal_diagnostics())
    goto LABEL_18;
  v8 = sub_2241471F8();
  v9 = v8[2];
  if (!v9)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v9 = v8[2];
  }
  v10 = *(_QWORD *)(v9 + 64);
  v11 = (std::mutex *)(v10 + 32);
  std::mutex::lock((std::mutex *)(v10 + 32));
  v13 = *(_QWORD *)(v10 + 96);
  v12 = *(_QWORD *)(v10 + 104);
  std::mutex::unlock(v11);
  if (v13 == v12)
  {
LABEL_18:
    __dst[48] = 0;
  }
  else
  {
    v19[0] = "cv3d.recon.";
    v19[1] = 11;
    v14 = __dst[23];
    if ((v14 & 0x80u) == 0)
      v15 = __dst;
    else
      v15 = *(char **)__dst;
    if ((v14 & 0x80u) != 0)
      v14 = *((_QWORD *)__dst + 1);
    v19[2] = v15;
    v19[3] = v14;
    sub_2231A9820((uint64_t)v19, (uint64_t)&v20, 0, 0, &__p);
    sub_2241471F8();
    v16 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
    __dst[48] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return __dst;
}

void sub_223B84B20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  void **v15;
  uint64_t *v16;

  sub_22316F8F4(v16);
  if (*(char *)(v14 + 47) < 0)
  {
    operator delete(*v15);
    if ((*(char *)(v14 + 23) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((*(char *)(v14 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v14);
  _Unwind_Resume(a1);
}

uint64_t sub_223B84BC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      sub_2239367D8(a3 + v6, a1 + v6);
      v6 += 144;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_223B84C2C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;

  if (v3)
  {
    do
    {
      v5 = *(void **)(v2 - 96);
      if (v5)
      {
        *(_QWORD *)(v2 - 88) = v5;
        operator delete(v5);
      }
      v6 = *(_QWORD *)(v2 - 120);
      if (v6)
      {
        v7 = *(_QWORD *)(v2 - 112);
        v8 = *(void **)(v2 - 120);
        if (v7 != v6)
        {
          v9 = *(_QWORD *)(v2 - 112);
          do
          {
            v11 = *(void **)(v9 - 24);
            v9 -= 24;
            v10 = v11;
            if (v11)
            {
              *(_QWORD *)(v7 - 16) = v10;
              operator delete(v10);
            }
            v7 = v9;
          }
          while (v9 != v6);
          v8 = *(void **)(v2 - 120);
        }
        *(_QWORD *)(v2 - 112) = v6;
        operator delete(v8);
      }
      v12 = v2 - 144;
      v13 = *(void **)(v2 - 144);
      if (v13)
      {
        *(_QWORD *)(v2 - 136) = v13;
        operator delete(v13);
      }
      v2 -= 144;
    }
    while (v12 != v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223B84CBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      if (v5 != a3)
      {
        sub_2233320C8((_QWORD *)a3, *(char **)v5, *(char **)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 3);
        sub_22362017C(a3 + 24, *(char ***)(v5 + 24), *(_QWORD *)(v5 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v5 + 32) - *(_QWORD *)(v5 + 24)) >> 3));
        sub_223B26850((char **)(a3 + 48), *(uint64_t **)(v5 + 48), *(uint64_t **)(v5 + 56), (uint64_t)(*(_QWORD *)(v5 + 56) - *(_QWORD *)(v5 + 48)) >> 5);
      }
      v6 = *(_QWORD *)(v5 + 72);
      *(_DWORD *)(a3 + 80) = *(_DWORD *)(v5 + 80);
      *(_QWORD *)(a3 + 72) = v6;
      v7 = *(_QWORD *)(v5 + 84);
      *(_DWORD *)(a3 + 92) = *(_DWORD *)(v5 + 92);
      *(_QWORD *)(a3 + 84) = v7;
      v8 = *(_QWORD *)(v5 + 96);
      *(_DWORD *)(a3 + 104) = *(_DWORD *)(v5 + 104);
      *(_QWORD *)(a3 + 96) = v8;
      v9 = *(_OWORD *)(v5 + 108);
      v10 = *(_OWORD *)(v5 + 124);
      *(_DWORD *)(a3 + 140) = *(_DWORD *)(v5 + 140);
      *(_OWORD *)(a3 + 124) = v10;
      *(_OWORD *)(a3 + 108) = v9;
      v5 += 144;
      a3 += 144;
    }
    while (v5 != a2);
  }
  return a3;
}

void **sub_223B84DA4(void **a1)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::mutex *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  std::string::size_type size;
  std::string *v13;
  std::string::size_type v14;
  std::string::size_type v15;
  int v16;
  std::string v20;
  __int128 v21;
  void *__p[2];
  void *v23;
  void *v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x24BDAC8D0];
  __p[0] = "cv3d.recon.";
  __p[1] = (void *)11;
  v2 = (void *)*((unsigned __int8 *)a1 + 23);
  if ((char)v2 >= 0)
    v3 = a1;
  else
    v3 = *a1;
  if ((char)v2 < 0)
    v2 = a1[1];
  v23 = v3;
  v24 = v2;
  sub_2231A9820((uint64_t)__p, (uint64_t)v25, 0, 0, &v20);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v4 = sub_2241471F8();
    v5 = v4[2];
    if (!v5)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v5 = v4[2];
    }
    v6 = *(_QWORD *)(v5 + 64);
    v7 = (std::mutex *)(v6 + 32);
    std::mutex::lock((std::mutex *)(v6 + 32));
    v9 = *(_QWORD *)(v6 + 96);
    v8 = *(_QWORD *)(v6 + 104);
    std::mutex::unlock(v7);
    if (v9 != v8)
    {
      sub_2241471F8();
      v10 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10))
      {
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10))
        {
          if (*((char *)a1 + 47) < 0)
          {
            sub_223197FA4(__p, a1[3], (unint64_t)a1[4]);
          }
          else
          {
            *(_OWORD *)__p = *(_OWORD *)(a1 + 3);
            v23 = a1[5];
          }
          *(_QWORD *)&v21 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v21 + 1) = 2;
          v11 = sub_2241471F8();
          sub_22329D76C((uint64_t)v11, v10, (uint64_t)(a1 + 7), (uint64_t)__p, &v21);
          if (SHIBYTE(v23) < 0)
            operator delete(__p[0]);
        }
        kdebug_trace();
      }
    }
  }
  kdebug_trace();
  size = HIBYTE(v20.__r_.__value_.__r.__words[2]);
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v20.__r_.__value_.__l.__size_;
  if (size >= 0x11)
  {
    v13 = &v20;
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v13 = (std::string *)v20.__r_.__value_.__r.__words[0];
    v14 = v13->__r_.__value_.__r.__words[0];
    v15 = v13->__r_.__value_.__l.__size_;
    v16 = v13->__r_.__value_.__s.__data_[16];
    if (v14 == 0x6365722E64337663 && v15 == 0x73746174532E6E6FLL && v16 == 46)
      sub_223187510();
  }
  kdebug_trace();
  if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    sub_22316F8F4((uint64_t *)a1 + 7);
    if ((*((char *)a1 + 47) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(a1[3]);
    if ((*((char *)a1 + 23) & 0x80000000) == 0)
      return a1;
LABEL_39:
    operator delete(*a1);
    return a1;
  }
  operator delete(v20.__r_.__value_.__l.__data_);
  sub_22316F8F4((uint64_t *)a1 + 7);
  if (*((char *)a1 + 47) < 0)
    goto LABEL_38;
LABEL_35:
  if (*((char *)a1 + 23) < 0)
    goto LABEL_39;
  return a1;
}

void sub_223B850FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_22316DC48(exception_object);
}

void sub_223B85144(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void **sub_223B85168(uint64_t a1)
{
  void **result;

  result = *(void ***)(a1 + 24);
  if (result)
  {
    sub_223B84DA4(result);
    JUMPOUT(0x227684CE8);
  }
  return result;
}

uint64_t sub_223B8519C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d5recon10MeshLoggerEE27__shared_ptr_default_deleteIS3_S3_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d5recon10MeshLoggerEE27__shared_ptr_default_deleteIS3_S3_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d5recon10MeshLoggerEE27__shared_ptr_default_deleteIS3_S3_EE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d5recon10MeshLoggerEE27__shared_ptr_default_deleteIS3_S3_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_223B8520C(uint64_t a1, unsigned int a2, double a3)
{
  unsigned __int8 v6;
  uint64_t v7;
  BOOL v8;
  char v9;
  double v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  std::mutex *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::string::size_type size;
  std::string *p_p;
  std::string::size_type v20;
  std::string::size_type v21;
  int v22;
  __n128 *v25;
  std::string *v26;
  size_t v27;
  std::string __p;
  double v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v6 = atomic_load((unsigned __int8 *)&qword_25578E9D8);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25578E9D8))
  {
    __cxa_atexit((void (*)(void *))sub_2238B2938, &byte_25578E988, &dword_22314D000);
    __cxa_guard_release(&qword_25578E9D8);
  }
  std::mutex::lock((std::mutex *)(a1 + 7976));
  *(_QWORD *)(a1 + 8040) += a2;
  std::mutex::unlock((std::mutex *)(a1 + 7976));
  std::mutex::lock(&stru_25578E998);
  v7 = 0;
  if (byte_25578E988)
    v8 = 1;
  else
    v8 = a2 == 0;
  if (v8)
  {
    v9 = 1;
    v10 = 0.0;
    if (byte_25578E988 && (a2 & 1) == 0)
    {
      v9 = 0;
      v10 = a3 - *(double *)&qword_25578E990;
      v7 = 1;
    }
    byte_25578E988 = a2;
    std::mutex::unlock(&stru_25578E998);
    v29 = v10;
    v30 = v7;
    if ((v9 & 1) == 0)
    {
      std::mutex::lock((std::mutex *)(a1 + 8080));
      if (*(_BYTE *)(a1 + 8152) && *(double *)(a1 + 8144) > v10)
        v10 = *(double *)(a1 + 8144);
      *(double *)(a1 + 8144) = v10;
      *(_BYTE *)(a1 + 8152) = 1;
      std::mutex::unlock((std::mutex *)(a1 + 8080));
      *(_QWORD *)&v31 = "cv3d.recon.";
      *((_QWORD *)&v31 + 1) = 11;
      *(_QWORD *)&v32 = "Stats.aggregated";
      *((_QWORD *)&v32 + 1) = 16;
      sub_2231A9820((uint64_t)&v31, (uint64_t)&v33, 0, 0, &__p);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v11 = sub_2241471F8();
        v12 = v11[2];
        if (!v12)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v12 = v11[2];
        }
        v13 = *(_QWORD *)(v12 + 64);
        v14 = (std::mutex *)(v13 + 32);
        std::mutex::lock((std::mutex *)(v13 + 32));
        v16 = *(_QWORD *)(v13 + 96);
        v15 = *(_QWORD *)(v13 + 104);
        std::mutex::unlock(v14);
        if (v16 != v15)
        {
          sub_2241471F8();
          v17 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17))
          {
            v31 = 0u;
            v32 = 0u;
            v33 = 728325608;
            kdebug_trace();
            sub_223B85688((double *)&qword_255788F20, v17, (uint64_t *)&v29, "duration_of_last_out_of_bounds");
            kdebug_trace();
          }
        }
      }
      v31 = 0u;
      v32 = 0u;
      v33 = 728325624;
      kdebug_trace();
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = __p.__r_.__value_.__l.__size_;
      if (size >= 0x11)
      {
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        v20 = p_p->__r_.__value_.__r.__words[0];
        v21 = p_p->__r_.__value_.__l.__size_;
        v22 = p_p->__r_.__value_.__s.__data_[16];
        if (v20 == 0x6365722E64337663 && v21 == 0x73746174532E6E6FLL && v22 == 46)
        {
          v25 = sub_223187510();
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v26 = &__p;
          else
            v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v27 = __p.__r_.__value_.__l.__size_;
          sub_2231AA374((uint64_t *)v25, v26, v27, (uint64_t *)&v29, (uint64_t)"duration_of_last_out_of_bounds", 30);
        }
      }
      kdebug_trace();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    qword_25578E990 = *(_QWORD *)&a3;
    byte_25578E988 = a2;
    std::mutex::unlock(&stru_25578E998);
    v29 = 0.0;
    v30 = 0;
  }
}

void sub_223B85634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_223B85688(double *a1, uint64_t a2, uint64_t *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_223705350((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_223B857A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223B857C4(uint64_t a1, uint64_t a2, int *a3, uint64_t *a4, __int128 *a5)
{
  uint64_t *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unsigned __int8 v14;
  int v15;
  _DWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t v21;
  unint64_t v22;
  _QWORD v23[2];
  std::__shared_weak_count *v24;
  mach_timebase_info info;
  void *__p;
  void *v27;
  _DWORD *v28;
  _QWORD v29[2];
  _QWORD v30[3];
  _BYTE v31[15];
  char v32;
  char v33;
  char v34;
  char v35;
  __int128 v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v10 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    v11 = *a4;
    v29[0] = a4[1];
    *(_QWORD *)((char *)v29 + 7) = *(uint64_t *)((char *)a4 + 15);
    v12 = *((_BYTE *)a4 + 23);
    a4[1] = 0;
    a4[2] = 0;
    *a4 = 0;
    v13 = mach_continuous_time();
    v14 = atomic_load((unsigned __int8 *)&qword_255795560);
    if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
    {
      mach_timebase_info(&info);
      LODWORD(v21) = info.numer;
      LODWORD(v22) = info.denom;
      *(double *)&qword_255795558 = (double)v21 / (double)v22;
      __cxa_guard_release(&qword_255795560);
    }
    v30[0] = llround(*(double *)&qword_255795558 * (double)v13);
    v30[1] = 2;
    v30[2] = v11;
    *(_QWORD *)v31 = v29[0];
    *(_QWORD *)&v31[7] = *(_QWORD *)((char *)v29 + 7);
    v32 = v12;
    v29[0] = 0;
    *(_QWORD *)((char *)v29 + 7) = 0;
    v33 = 1;
    v34 = 0;
    v35 = 0;
    v36 = *a5;
    v37 = 1;
    v38 = 0;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v15 = *a3;
    LOBYTE(info.numer) = 7;
    v27 = 0;
    v28 = 0;
    __p = 0;
    v16 = operator new(4uLL);
    __p = v16;
    *v16 = v15;
    v27 = v16 + 1;
    v28 = v16 + 1;
    sub_2231AA8F0((char *)&info, (uint64_t)v30, v23);
    if (__p)
    {
      v27 = __p;
      operator delete(__p);
    }
    sub_2231AD66C((uint64_t)v30);
    sub_2231AA5A4(a1, v10, (uint64_t)v23);
    v17 = v24;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  return a1;
}

void sub_223B859E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  void *v19;
  int v20;

  __cxa_guard_abort(&qword_255795560);
  if (v20 < 0)
    operator delete(v19);
  _Unwind_Resume(a1);
}

void sub_223B85A5C()
{
  JUMPOUT(0x227684CE8);
}

const char *sub_223B85A70()
{
  return "cv3d.recon";
}

void sub_223B85A80(int a1@<W1>, _QWORD *a2@<X8>)
{
  char *v3;
  char *v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  switch(a1)
  {
    case 1:
      bzero(&v19, 0x720uLL);
      sub_2232BD040((uint64_t)&v19);
      BYTE8(v8) = 0;
      LOBYTE(v9) = 0;
      BYTE8(v10) = 0;
      LOBYTE(v11) = 0;
      LOBYTE(v12) = 0;
      LOBYTE(v13) = 0;
      LOBYTE(v16) = 0;
      v17 = 0;
      v18 = 0;
      v6 = 0uLL;
      LOBYTE(v7) = 0;
      v3 = (char *)operator new(0x778uLL);
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
      *(_QWORD *)v3 = &off_24EC5FE38;
      *((_QWORD *)v3 + 3) = off_24EC5FE88;
      v4 = v3 + 24;
      *((_QWORD *)v3 + 4) = &unk_24EC5FEE8;
      sub_223B866E4((uint64_t)&v6, (uint64_t)(v3 + 40));
      sub_223C75BC0((uint64_t)(v3 + 224), (uint64_t)&v19);
      sub_2231AD66C((uint64_t)&v6);
      sub_2232555B8((uint64_t)&v19);
      goto LABEL_7;
    case 2:
      v22 = 0;
      v23 = 0;
      v24 = 0;
      v25 = 0;
      v26 = 0;
      v27 = 0;
      v28 = 0;
      v29 = 0;
      v30 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v3 = (char *)operator new(0x178uLL);
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
      *(_QWORD *)v3 = &off_24EC60038;
      *((_QWORD *)v3 + 3) = off_24EC60088;
      v5 = v3 + 24;
      *((_QWORD *)v3 + 4) = &unk_24EC600E8;
      sub_223B866E4((uint64_t)&v19, (uint64_t)(v3 + 40));
      *((_QWORD *)v3 + 28) = 0;
      *((_QWORD *)v3 + 29) = 0;
      *((_QWORD *)v3 + 30) = 0;
      *((_QWORD *)v3 + 31) = 0x3FF0000000000000;
      *((_OWORD *)v3 + 16) = 0u;
      *((_OWORD *)v3 + 17) = 0u;
      *((_QWORD *)v3 + 36) = 0x3FF0000000000000;
      *(_OWORD *)(v3 + 296) = 0u;
      *(_OWORD *)(v3 + 312) = 0u;
      *((_QWORD *)v3 + 41) = 0x3FF0000000000000;
      *((_OWORD *)v3 + 21) = 0u;
      *((_OWORD *)v3 + 22) = 0u;
      *((_QWORD *)v3 + 46) = 0x3FF0000000000000;
      goto LABEL_5;
    case 3:
      v22 = 0;
      v23 = 0;
      v24 = 0;
      v25 = 0;
      v26 = 0;
      v27 = 0;
      v28 = 0;
      v29 = 0;
      v30 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v3 = (char *)operator new(0xF0uLL);
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
      *(_QWORD *)v3 = &off_24EC60198;
      *((_QWORD *)v3 + 3) = off_24EC601E8;
      v5 = v3 + 24;
      *((_QWORD *)v3 + 4) = &unk_24EC60248;
      sub_223B866E4((uint64_t)&v19, (uint64_t)(v3 + 40));
      *((_QWORD *)v3 + 28) = 0;
      *((_QWORD *)v3 + 29) = 0;
LABEL_5:
      sub_2231AD66C((uint64_t)&v19);
      *a2 = v5;
      goto LABEL_8;
    case 4:
      v17 = 0;
      v15 = 0u;
      v16 = 0u;
      v14 = 0u;
      v12 = 0u;
      v13 = 0u;
      v10 = 0u;
      v11 = 0u;
      v8 = 0u;
      v9 = 0u;
      v6 = 0u;
      v7 = 0u;
      v22 = 0;
      v23 = 0;
      v24 = 0;
      v25 = 0;
      v26 = 0;
      v27 = 0;
      v28 = 0;
      v29 = 0;
      v30 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v3 = (char *)operator new(0x198uLL);
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
      *(_QWORD *)v3 = &off_24EC602E0;
      *((_QWORD *)v3 + 3) = off_24EC60330;
      v4 = v3 + 24;
      *((_QWORD *)v3 + 4) = &unk_24EC60390;
      sub_223B866E4((uint64_t)&v19, (uint64_t)(v3 + 40));
      sub_223FD3470((uint64_t)(v3 + 224), (uint64_t)&v6);
      sub_2231AD66C((uint64_t)&v19);
LABEL_7:
      *a2 = v4;
LABEL_8:
      a2[1] = v3;
      break;
    default:
      *a2 = 0;
      a2[1] = 0;
      break;
  }
}

void sub_223B85D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  void *v44;

  v43 = *(unsigned int *)(v40 + 216);
  if ((_DWORD)v43 != -1)
    ((void (*)(char *, uint64_t))off_24EC5FFB8[v43])(&a13, v41);
  *(_DWORD *)(v40 + 216) = -1;
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v40);
  operator delete(v44);
  sub_2231AD66C((uint64_t)&a14);
  sub_2232555B8((uint64_t)&a40);
  _Unwind_Resume(a1);
}

void sub_223B85E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  sub_2231AD66C((uint64_t)&a11);
  sub_2232555B8((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void sub_223B85EC0(void *lpsrc@<X2>, int a2@<W1>, _QWORD *a3@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;

  switch(a2)
  {
    case 1:
      v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24EC6A3F8, (const struct __class_type_info *)&unk_24EC55AD8, 0);
      if (!v4)
      {
        if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/include/Kit/Visualization/DataIO.h", 1045, (uint64_t)"ptr != nullptr", 14, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          v5 = 8;
          v6 = 1840;
          goto LABEL_13;
        }
LABEL_24:
        abort();
      }
      v5 = (uint64_t)v4 + 8;
      v6 = (uint64_t)v4 + 1840;
LABEL_13:
      v16 = operator new(0x778uLL);
      v16[1] = 0;
      v16[2] = 0;
      *v16 = &off_24EC5FE38;
      v16[3] = off_24EC5FE88;
      v17 = v16 + 3;
      v16[4] = &unk_24EC5FEE8;
      sub_223B866E4(v6, (uint64_t)(v16 + 5));
      sub_223C75BC0((uint64_t)(v16 + 28), v5);
LABEL_23:
      *a3 = v17;
      a3[1] = v16;
      return;
    case 2:
      v7 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24EC6A3F8, (const struct __class_type_info *)&unk_24EC2B8D8, 0);
      if (v7)
      {
        v8 = (uint64_t)v7 + 8;
        v9 = (uint64_t)v7 + 96;
      }
      else
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/include/Kit/Visualization/DataIO.h", 1045, (uint64_t)"ptr != nullptr", 14, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_24;
        }
        v8 = 8;
        v9 = 96;
      }
      v18 = (char *)operator new(0x178uLL);
      sub_223BF4EFC((uint64_t)v18, v8, v9);
      *a3 = v18 + 24;
      a3[1] = v18;
      return;
    case 3:
      v10 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24EC6A3F8, (const struct __class_type_info *)&unk_24EC2B9A8, 0);
      if (v10)
      {
        v11 = (uint64_t)v10 + 8;
        v12 = (uint64_t)v10 + 32;
      }
      else
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/include/Kit/Visualization/DataIO.h", 1045, (uint64_t)"ptr != nullptr", 14, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_24;
        }
        v11 = 8;
        v12 = 32;
      }
      v19 = operator new(0xF0uLL);
      v19[1] = 0;
      v19[2] = 0;
      *v19 = &off_24EC60198;
      v19[3] = off_24EC601E8;
      v19[4] = &unk_24EC60248;
      sub_223B866E4(v12, (uint64_t)(v19 + 5));
      *((_OWORD *)v19 + 14) = *(_OWORD *)v11;
      *a3 = v19 + 3;
      a3[1] = v19;
      return;
    case 4:
      v13 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24EC6A3F8, (const struct __class_type_info *)&unk_24EC60480, 0);
      if (v13)
      {
        v14 = (uint64_t)v13 + 8;
        v15 = (uint64_t)v13 + 192;
      }
      else
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/include/Kit/Visualization/DataIO.h", 1045, (uint64_t)"ptr != nullptr", 14, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_24;
        }
        v14 = 8;
        v15 = 192;
      }
      v16 = operator new(0x198uLL);
      v16[1] = 0;
      v16[2] = 0;
      *v16 = &off_24EC602E0;
      v16[3] = off_24EC60330;
      v17 = v16 + 3;
      v16[4] = &unk_24EC60390;
      sub_223B866E4(v15, (uint64_t)(v16 + 5));
      sub_223FD3470((uint64_t)(v16 + 28), v14);
      goto LABEL_23;
    default:
      *a3 = 0;
      a3[1] = 0;
      return;
  }
}

void sub_223B8622C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  void *v17;

  v16 = *(unsigned int *)(v13 + 216);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_24EC5FFB8[v16])(&a13, v14);
  *(_DWORD *)(v13 + 216) = -1;
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v13);
  operator delete(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_223B862D8(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  int v4;
  size_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  _BYTE v16[24];
  int v17;
  void *__dst[2];
  unint64_t v19;
  _QWORD v20[5];
  _QWORD *v21;

  v17 = 0;
  v3 = operator new();
  *(_QWORD *)(v3 + 272) = 0;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)v3 = 0u;
  sub_223195210(v3);
  if (a2 >= 5
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Visualization/src/VisualizationData.cpp", 80, (uint64_t)"idx < static_cast<uint32_t>(DataType::End)", 42, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_2231813E8((_QWORD *)(v3 + 16), (uint64_t)(&off_24EC5FDC0)[2 * a2], (uint64_t)(&off_24EC5FDC0)[2 * a2 + 1]);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x10) != 0)
  {
    v7 = *(_QWORD *)(v3 + 112);
    v8 = *(_QWORD *)(v3 + 72);
    if (v7 < v8)
    {
      *(_QWORD *)(v3 + 112) = v8;
      v7 = v8;
    }
    v9 = *(const void **)(v3 + 64);
    v5 = v7 - (_QWORD)v9;
    if (v7 - (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_26;
  }
  else
  {
    if ((v4 & 8) == 0)
    {
      v5 = 0;
      HIBYTE(v19) = 0;
      v6 = __dst;
      goto LABEL_16;
    }
    v9 = *(const void **)(v3 + 40);
    v5 = *(_QWORD *)(v3 + 56) - (_QWORD)v9;
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
LABEL_26:
      sub_22316DBC0();
  }
  if (v5 >= 0x17)
  {
    v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v10 = v5 | 7;
    v11 = v10 + 1;
    v6 = (void **)operator new(v10 + 1);
    __dst[1] = (void *)v5;
    v19 = v11 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_15;
  }
  HIBYTE(v19) = v5;
  v6 = __dst;
  if (v5)
LABEL_15:
    memmove(v6, v9, v5);
LABEL_16:
  *((_BYTE *)v6 + v5) = 0;
  v12 = MEMORY[0x24BEDB7F0];
  v13 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v3 = *MEMORY[0x24BEDB7F0];
  v14 = *(_QWORD *)(v12 + 72);
  *(_QWORD *)(v3 + *(_QWORD *)(v13 - 24)) = *(_QWORD *)(v12 + 64);
  *(_QWORD *)(v3 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v3 + 16) = v14;
  if (*(char *)(v3 + 111) < 0)
    operator delete(*(void **)(v3 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x227684BE0](v3 + 128);
  MEMORY[0x227684CE8](v3, 0x10B2C40EED050F3);
  v20[0] = v16;
  v20[1] = __dst;
  v20[2] = v16;
  v20[3] = __dst;
  v20[4] = __dst;
  if (v17 == -1)
    sub_22316DD70();
  v21 = v20;
  ((void (*)(_QWORD **, _BYTE *))off_24EC5FF70[v17])(&v21, v16);
  if (SHIBYTE(v19) < 0)
    operator delete(__dst[0]);
  if (v17 == -1)
    sub_22316DD70();
  v20[0] = __dst;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC5FFA0[v17])(v20, v16);
  if (v17 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC5FF88[v17])(v20, v16);
  return result;
}

void sub_223B865BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  uint64_t v19;

  MEMORY[0x227684CE8](v18, 0x10B2C40EED050F3);
  if (a12 != -1)
    ((void (*)(uint64_t, uint64_t *))off_24EC5FF88[a12])(v19 - 49, &a9);
  _Unwind_Resume(a1);
}

void sub_223B86694(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5FE38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223B866A4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5FE38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223B866D4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_223B866E4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  int v4;
  int v5;
  __int128 v6;
  int v7;
  __int128 v8;
  int v9;
  _BYTE v10[8];
  __int128 v11;
  void *v12[2];
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  void *v17[2];
  uint64_t v18;
  unsigned __int8 v19;
  void *__p[2];
  uint64_t v21;
  unsigned __int8 v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (*(unsigned __int8 *)(a1 + 200) | *(unsigned __int8 *)(a1 + 160))
  {
    sub_223B87C9C((uint64_t)v10, (uint64_t *)a1);
    v3 = v11;
    *(_BYTE *)(a2 + 24) = 0;
    *(_OWORD *)(a2 + 8) = v3;
    *(_BYTE *)(a2 + 48) = 0;
    if (v14)
    {
      *(_OWORD *)(a2 + 24) = *(_OWORD *)v12;
      *(_QWORD *)(a2 + 40) = v13;
      v12[1] = 0;
      v13 = 0;
      v12[0] = 0;
      *(_BYTE *)(a2 + 48) = 1;
    }
    *(_BYTE *)(a2 + 80) = 0;
    *(_OWORD *)(a2 + 56) = v15;
    *(_QWORD *)(a2 + 72) = v16;
    *(_BYTE *)(a2 + 104) = 0;
    v4 = v19;
    if (v19)
    {
      *(_OWORD *)(a2 + 80) = *(_OWORD *)v17;
      *(_QWORD *)(a2 + 96) = v18;
      v17[1] = 0;
      v18 = 0;
      v17[0] = 0;
      *(_BYTE *)(a2 + 104) = 1;
    }
    *(_BYTE *)(a2 + 112) = 0;
    *(_BYTE *)(a2 + 136) = 0;
    v5 = v22;
    if (v22)
    {
      *(_OWORD *)(a2 + 112) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 128) = v21;
      __p[1] = 0;
      v21 = 0;
      __p[0] = 0;
      *(_BYTE *)(a2 + 136) = 1;
    }
    *(_BYTE *)(a2 + 144) = 0;
    *(_BYTE *)(a2 + 168) = 0;
    if (v25)
    {
      *(_OWORD *)(a2 + 144) = v23;
      *(_QWORD *)(a2 + 160) = v24;
      v24 = 0;
      v23 = 0uLL;
      *(_BYTE *)(a2 + 168) = 1;
    }
    *(_DWORD *)(a2 + 176) = 0;
    if (!v5)
      goto LABEL_34;
LABEL_32:
    if (SHIBYTE(v21) < 0)
    {
      operator delete(__p[0]);
      v4 = v19;
    }
    goto LABEL_34;
  }
  if (*(_BYTE *)(a1 + 72))
  {
    sub_223B8850C((uint64_t)v10, (uint64_t *)a1);
    v6 = v11;
    *(_BYTE *)(a2 + 24) = 0;
    *(_OWORD *)(a2 + 8) = v6;
    *(_BYTE *)(a2 + 48) = 0;
    if (v14)
    {
      *(_OWORD *)(a2 + 24) = *(_OWORD *)v12;
      *(_QWORD *)(a2 + 40) = v13;
      v12[1] = 0;
      v13 = 0;
      v12[0] = 0;
      *(_BYTE *)(a2 + 48) = 1;
    }
    *(_BYTE *)(a2 + 80) = 0;
    *(_OWORD *)(a2 + 56) = v15;
    *(_QWORD *)(a2 + 72) = v16;
    *(_BYTE *)(a2 + 104) = 0;
    v4 = v19;
    if (v19)
    {
      *(_OWORD *)(a2 + 80) = *(_OWORD *)v17;
      *(_QWORD *)(a2 + 96) = v18;
      v17[1] = 0;
      v18 = 0;
      v17[0] = 0;
      *(_BYTE *)(a2 + 104) = 1;
    }
    *(_BYTE *)(a2 + 112) = 0;
    *(_BYTE *)(a2 + 136) = 0;
    v7 = v22;
    if (v22)
    {
      *(_OWORD *)(a2 + 112) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 128) = v21;
      __p[1] = 0;
      v21 = 0;
      __p[0] = 0;
      *(_BYTE *)(a2 + 136) = 1;
    }
    *(_BYTE *)(a2 + 144) = 0;
    *(_BYTE *)(a2 + 168) = 0;
    if (v25)
    {
      *(_OWORD *)(a2 + 144) = v23;
      *(_QWORD *)(a2 + 160) = v24;
      v24 = 0;
      v23 = 0uLL;
      *(_BYTE *)(a2 + 168) = 1;
    }
    *(_DWORD *)(a2 + 176) = 1;
    if (v7)
      goto LABEL_32;
  }
  else
  {
    sub_223B8899C((uint64_t)v10, (uint64_t *)a1);
    v8 = v11;
    *(_BYTE *)(a2 + 24) = 0;
    *(_OWORD *)(a2 + 8) = v8;
    *(_BYTE *)(a2 + 48) = 0;
    if (v14)
    {
      *(_OWORD *)(a2 + 24) = *(_OWORD *)v12;
      *(_QWORD *)(a2 + 40) = v13;
      v12[1] = 0;
      v13 = 0;
      v12[0] = 0;
      *(_BYTE *)(a2 + 48) = 1;
    }
    *(_BYTE *)(a2 + 80) = 0;
    *(_OWORD *)(a2 + 56) = v15;
    *(_QWORD *)(a2 + 72) = v16;
    *(_BYTE *)(a2 + 104) = 0;
    v4 = v19;
    if (v19)
    {
      *(_OWORD *)(a2 + 80) = *(_OWORD *)v17;
      *(_QWORD *)(a2 + 96) = v18;
      v17[1] = 0;
      v18 = 0;
      v17[0] = 0;
      *(_BYTE *)(a2 + 104) = 1;
    }
    *(_BYTE *)(a2 + 112) = 0;
    *(_BYTE *)(a2 + 136) = 0;
    v9 = v22;
    if (v22)
    {
      *(_OWORD *)(a2 + 112) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 128) = v21;
      __p[1] = 0;
      v21 = 0;
      __p[0] = 0;
      *(_BYTE *)(a2 + 136) = 1;
    }
    *(_BYTE *)(a2 + 144) = 0;
    *(_BYTE *)(a2 + 168) = 0;
    if (v25)
    {
      *(_OWORD *)(a2 + 144) = v23;
      *(_QWORD *)(a2 + 160) = v24;
      v24 = 0;
      v23 = 0uLL;
      *(_BYTE *)(a2 + 168) = 1;
    }
    *(_DWORD *)(a2 + 176) = 2;
    if (v9)
      goto LABEL_32;
  }
LABEL_34:
  if (v4 && SHIBYTE(v18) < 0)
    operator delete(v17[0]);
  if (v14)
  {
    if (SHIBYTE(v13) < 0)
      operator delete(v12[0]);
  }
}

uint64_t sub_223B86A80(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24EC5FE88;
  *(_QWORD *)(a1 + 8) = &unk_24EC5FEE8;
  sub_2232BCBE0(a1 + 200);
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24EC5FFB8[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_223B86AEC(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24EC5FE88;
  *(_QWORD *)(a1 + 8) = &unk_24EC5FEE8;
  sub_2232BCBE0(a1 + 200);
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24EC5FFB8[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x227684CE8](a1, 0x10F3C4084B9AF75);
}

uint64_t sub_223B86B6C()
{
  return 1;
}

uint64_t sub_223B86B74()
{
  return 0;
}

uint64_t sub_223B86B7C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_223B86B88(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

uint64_t sub_223B86B94()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int128 v6;
  _QWORD *v7;
  _BYTE v9[1824];
  _BYTE v10[208];
  uint64_t (**v11)();
  _BYTE v12[1832];
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  unsigned __int128 v24;
  char v25;
  __int128 v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v29 = *MEMORY[0x24BDAC8D0];
  sub_223C7728C(v0 + 200, (uint64_t)v9);
  v3 = v0 + 16;
  v4 = *(_DWORD *)(v0 + 192);
  if (v4 == 2)
  {
    sub_223B8944C(v3, (uint64_t)v10);
  }
  else if (v4 == 1)
  {
    sub_223B89234(v3, (uint64_t)v10);
  }
  else
  {
    if (v4)
      sub_22316DD70();
    sub_223B8901C(v3, (uint64_t)v10);
  }
  v11 = &off_24EC55B00;
  sub_2232568B4((uint64_t)v12, (uint64_t)v9);
  sub_2231AB0FC((uint64_t)&v13, (uint64_t)v10);
  v11 = &off_24EC55A80;
  v5 = operator new();
  *(_QWORD *)v5 = &off_24EC55B00;
  sub_2232568B4(v5 + 8, (uint64_t)v12);
  *(_OWORD *)(v5 + 1840) = v13;
  *(_BYTE *)(v5 + 1856) = 0;
  *(_BYTE *)(v5 + 1880) = 0;
  if (v16)
  {
    *(_OWORD *)(v5 + 1856) = v14;
    *(_QWORD *)(v5 + 1872) = v15;
    v14 = 0uLL;
    v15 = 0;
    *(_BYTE *)(v5 + 1880) = 1;
  }
  *(_BYTE *)(v5 + 1888) = 0;
  *(_BYTE *)(v5 + 1912) = 0;
  if (v19)
  {
    *(_OWORD *)(v5 + 1888) = v17;
    *(_QWORD *)(v5 + 1904) = v18;
    v17 = 0uLL;
    v18 = 0;
    *(_BYTE *)(v5 + 1912) = 1;
  }
  *(_OWORD *)(v5 + 1920) = v20;
  *(_QWORD *)(v5 + 1936) = v21;
  *(_BYTE *)(v5 + 1952) = 0;
  *(_BYTE *)(v5 + 2000) = 0;
  if (v25)
  {
    *(_OWORD *)(v5 + 1952) = v22;
    *(_QWORD *)(v5 + 1968) = v23;
    v22 = 0uLL;
    v23 = 0;
    do
      v6 = __ldaxp(&v24);
    while (__stlxp(v6, &v24));
    *(_OWORD *)(v5 + 1984) = v6;
    *(_BYTE *)(v5 + 2000) = 1;
  }
  *(_BYTE *)(v5 + 2016) = 0;
  *(_BYTE *)(v5 + 2040) = 0;
  if (v28)
  {
    *(_OWORD *)(v5 + 2016) = v26;
    *(_QWORD *)(v5 + 2032) = v27;
    v27 = 0;
    v26 = 0uLL;
    *(_BYTE *)(v5 + 2040) = 1;
  }
  *(_QWORD *)v5 = &off_24EC55A80;
  *v2 = &off_24EC6A3B8;
  v2[1] = v5;
  v7 = (_QWORD *)operator new();
  *v7 = &off_24EC6A4B0;
  v7[1] = 0;
  v7[2] = 0;
  v7[3] = v5;
  v2[2] = v7;
  v11 = &off_24EC55B00;
  sub_2231AD66C((uint64_t)&v13);
  sub_2232555B8((uint64_t)v12);
  sub_2231AD66C((uint64_t)v10);
  return sub_2232555B8((uint64_t)v9);
}

void sub_223B86E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  STACK[0x7F0] = v12;
  sub_2231AD66C(v10);
  sub_2232555B8(v9);
  sub_2231AD66C((uint64_t)&STACK[0x720]);
  sub_2232555B8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223B86E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2232555B8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_223B86EA0(uint64_t a1, void *lpsrc)
{
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  _BOOL8 v7;
  uint64_t v8;
  int v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  const void *v13;
  size_t v14;
  const void *v15;
  _BOOL4 v16;
  uint64_t v17;
  float v18;
  float v19;
  int v20;
  BOOL v21;
  char v22;
  float v23;
  float v24;
  _BOOL4 v25;
  float v26;
  float v27;
  char *v28;
  char *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  float v37;
  _BOOL4 v38;
  float v39;
  float v40;
  float v41;
  float v42;
  _BOOL4 v43;
  float v44;
  float v45;
  _BOOL4 v46;
  uint64_t v48;
  double v49;
  double v50;
  int v51;
  BOOL v52;
  _BOOL4 v53;
  uint64_t v54;
  float v55;
  float v56;
  uint64_t v57;
  float v58;
  float v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  _QWORD *v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  float v73;
  float v74;
  char *v75;
  char *v76;
  _QWORD *v77;
  char *v79;
  char *v80;
  _QWORD *v81;
  char *v83;
  char *v84;
  _QWORD *v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  float v91;
  float v92;
  char *v93;
  char *v94;
  _QWORD *v95;
  _BYTE *v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t *v101;
  unsigned __int8 **v102;
  _BYTE *v103;
  uint64_t *v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t *v107;
  unsigned __int8 **v108;
  char v109;
  _BYTE v110[16];
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _BYTE v116[16];
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD v121[6];

  v121[5] = *MEMORY[0x24BDAC8D0];
  v3 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24EC6A430, (const struct __class_type_info *)&unk_24EC5FF58, 0);
  if (v3)
  {
    v4 = v3;
    v5 = a1 + 16;
    v6 = *(_DWORD *)(a1 + 192);
    if (v6 == 2)
    {
      sub_223B8944C(v5, (uint64_t)v116);
    }
    else if (v6 == 1)
    {
      sub_223B89234(v5, (uint64_t)v116);
    }
    else
    {
      if (v6)
        sub_22316DD70();
      sub_223B8901C(v5, (uint64_t)v116);
    }
    v8 = (uint64_t)(v4 + 16);
    v9 = *((_DWORD *)v4 + 48);
    if (v9 == 2)
    {
      sub_223B8944C(v8, (uint64_t)v110);
    }
    else if (v9 == 1)
    {
      sub_223B89234(v8, (uint64_t)v110);
    }
    else
    {
      if (v9)
        sub_22316DD70();
      sub_223B8901C(v8, (uint64_t)v110);
    }
    v103 = v116;
    v104 = &v117;
    v105 = &v118;
    v106 = &v119;
    v107 = &v120;
    v108 = (unsigned __int8 **)v121;
    v97 = v110;
    v98 = &v111;
    v99 = &v112;
    v100 = &v113;
    v101 = &v114;
    v102 = (unsigned __int8 **)&v115;
    if (!sub_224123BEC((uint64_t)&v109, &v103, &v97))
      goto LABEL_149;
    if (*((_BYTE *)v108 + 24) && *((_BYTE *)v102 + 24))
    {
      v10 = *v108;
      v11 = v108[1];
      v12 = *v102;
      if (v11 - *v108 != v102[1] - *v102)
        goto LABEL_149;
      if (v10 != v11)
      {
        while (sub_224122C08(v10, v12))
        {
          v10 += 96;
          v12 += 96;
          if (v10 == v11)
            goto LABEL_24;
        }
        goto LABEL_149;
      }
    }
    else if ((*((_BYTE *)v108 + 24) != 0) != (*((_BYTE *)v102 + 24) != 0))
    {
      goto LABEL_149;
    }
LABEL_24:
    if (*(_BYTE *)(a1 + 264) && v4[264])
    {
      if (!sub_223B8A384(a1 + 208, (uint64_t)(v4 + 208)))
        goto LABEL_149;
    }
    else if ((*(_BYTE *)(a1 + 264) != 0) != (v4[264] != 0))
    {
      goto LABEL_149;
    }
    if (*(_BYTE *)(a1 + 328) && v4[328])
    {
      if (!sub_223B8A384(a1 + 272, (uint64_t)(v4 + 272)))
        goto LABEL_149;
    }
    else if ((*(_BYTE *)(a1 + 328) != 0) != (v4[328] != 0))
    {
      goto LABEL_149;
    }
    if (*(_BYTE *)(a1 + 416) && v4[416])
    {
      if (!sub_223B8A8DC(a1 + 336, (uint64_t)(v4 + 336)))
        goto LABEL_149;
    }
    else if ((*(_BYTE *)(a1 + 416) != 0) != (v4[416] != 0))
    {
      goto LABEL_149;
    }
    if (*(_BYTE *)(a1 + 696) && v4[696])
    {
      if (*(_BYTE *)(a1 + 480) && v4[480])
      {
        if (!sub_223B8A384(a1 + 424, (uint64_t)(v4 + 424)))
          goto LABEL_149;
      }
      else if ((*(_BYTE *)(a1 + 480) != 0) != (v4[480] != 0))
      {
        goto LABEL_149;
      }
      if (!sub_22416C7A8((unsigned __int16 *)(a1 + 488), (unsigned __int16 *)v4 + 244)
        || (sub_22416C7A8((unsigned __int16 *)(a1 + 592), (unsigned __int16 *)v4 + 296) & 1) == 0)
      {
        goto LABEL_149;
      }
    }
    else if ((*(_BYTE *)(a1 + 696) != 0) != (v4[696] != 0))
    {
      goto LABEL_149;
    }
    if (*(_BYTE *)(a1 + 760) && v4[760])
    {
      if ((sub_223B8B8E4(a1 + 704, (uint64_t)(v4 + 704)) & 1) == 0)
        goto LABEL_149;
    }
    else if ((*(_BYTE *)(a1 + 760) != 0) != (v4[760] != 0))
    {
      goto LABEL_149;
    }
    if (*(_BYTE *)(a1 + 824) && v4[824])
    {
      if (!sub_223B8A384(a1 + 768, (uint64_t)(v4 + 768)))
        goto LABEL_149;
    }
    else if ((*(_BYTE *)(a1 + 824) != 0) != (v4[824] != 0))
    {
      goto LABEL_149;
    }
    if (*(_BYTE *)(a1 + 912) && v4[912])
    {
      if (!sub_223B8B180(a1 + 832, (uint64_t)(v4 + 832)))
        goto LABEL_149;
    }
    else if ((*(_BYTE *)(a1 + 912) != 0) != (v4[912] != 0))
    {
      goto LABEL_149;
    }
    if (*(_BYTE *)(a1 + 924) && v4[924])
    {
      if (*(float *)(a1 + 920) != *((float *)v4 + 230))
        goto LABEL_149;
    }
    else if ((*(_BYTE *)(a1 + 924) != 0) != (v4[924] != 0))
    {
      goto LABEL_149;
    }
    if (*(_BYTE *)(a1 + 952) && v4[952])
    {
      v13 = *(const void **)(a1 + 928);
      v14 = *(_QWORD *)(a1 + 936) - (_QWORD)v13;
      v15 = (const void *)*((_QWORD *)v4 + 116);
      if (v14 != *((_QWORD *)v4 + 117) - (_QWORD)v15 || memcmp(v13, v15, v14))
        goto LABEL_149;
    }
    else if ((*(_BYTE *)(a1 + 952) != 0) != (v4[952] != 0))
    {
      goto LABEL_149;
    }
    if (*(_BYTE *)(a1 + 964) && v4[964])
    {
      if (*(_DWORD *)(a1 + 960) != *((_DWORD *)v4 + 240))
        goto LABEL_149;
    }
    else if ((*(_BYTE *)(a1 + 964) != 0) != (v4[964] != 0))
    {
      goto LABEL_149;
    }
    if (*(_BYTE *)(a1 + 972) && v4[972])
    {
      if (*(_DWORD *)(a1 + 968) != *((_DWORD *)v4 + 242))
        goto LABEL_149;
    }
    else if ((*(_BYTE *)(a1 + 972) != 0) != (v4[972] != 0))
    {
      goto LABEL_149;
    }
    if (*(_BYTE *)(a1 + 980) && v4[980])
    {
      if (*(_DWORD *)(a1 + 976) != *((_DWORD *)v4 + 244))
        goto LABEL_149;
    }
    else if ((*(_BYTE *)(a1 + 980) != 0) != (v4[980] != 0))
    {
      goto LABEL_149;
    }
    if (!sub_22451896C(a1 + 984, (uint64_t)(v4 + 984)))
      goto LABEL_149;
    v16 = (*(_BYTE *)(a1 + 1036) != 0) == (v4[1036] != 0);
    if (*(_BYTE *)(a1 + 1036) && v4[1036])
    {
      v17 = 0;
      do
      {
        v18 = *(float *)(a1 + 1000 + v17);
        v19 = *(float *)&v4[v17 + 1000];
        v16 = v18 == v19;
        if (v18 != v19)
          break;
        v21 = v17 == 32;
        v17 += 4;
      }
      while (!v21);
    }
    if (!v16)
      goto LABEL_149;
    v20 = v4[1096];
    if (*(_BYTE *)(a1 + 1096))
      v21 = v20 == 0;
    else
      v21 = 1;
    if (v21)
    {
      if ((*(_BYTE *)(a1 + 1096) != 0) != (v20 != 0))
        goto LABEL_149;
    }
    else
    {
      v22 = sub_223B8B8E4(a1 + 1040, (uint64_t)(v4 + 1040));
      if ((v22 & 1) == 0)
        goto LABEL_149;
    }
    if (*(_BYTE *)(a1 + 1184) && v4[1184])
    {
      if (!sub_223B8BE08(a1 + 1104, (uint64_t)(v4 + 1104)))
        goto LABEL_149;
    }
    else if ((*(_BYTE *)(a1 + 1184) != 0) != (v4[1184] != 0))
    {
      goto LABEL_149;
    }
    if (*(_BYTE *)(a1 + 1272) && v4[1272])
    {
      if (!sub_223B8B180(a1 + 1192, (uint64_t)(v4 + 1192)))
        goto LABEL_149;
    }
    else if ((*(_BYTE *)(a1 + 1272) != 0) != (v4[1272] != 0))
    {
      goto LABEL_149;
    }
    if (*(unsigned __int8 *)(a1 + 1280) != v4[1280])
      goto LABEL_149;
    v23 = *(float *)(a1 + 1284);
    v24 = *((float *)v4 + 321);
    v25 = v23 == v24;
    if (v23 == v24)
    {
      v26 = *(float *)(a1 + 1288);
      v27 = *((float *)v4 + 322);
      v25 = v26 == v27;
      if (v26 == v27)
        v25 = *(float *)(a1 + 1292) == *((float *)v4 + 323);
    }
    if (!v25)
      goto LABEL_149;
    if (*(_BYTE *)(a1 + 1328) && v4[1328])
    {
      v28 = *(char **)(a1 + 1312);
      v29 = *(char **)(a1 + 1304);
      v30 = (_QWORD *)*((_QWORD *)v4 + 163);
      if (v28 - v29 != *((_QWORD *)v4 + 164) - (_QWORD)v30)
        goto LABEL_149;
      while (v29 != v28)
      {
        v32 = *(_QWORD *)v29;
        v31 = *((_QWORD *)v29 + 1);
        if (v31 - *(_QWORD *)v29 != v30[1] - *v30)
          goto LABEL_149;
        if (v32 != v31)
        {
          v33 = *v30 + 8;
          v34 = v32 + 8;
          do
          {
            v35 = v34 - 8;
            v36 = *(float *)(v34 - 8);
            v37 = *(float *)(v33 - 8);
            v38 = v36 == v37;
            if (v36 == v37)
            {
              v39 = *(float *)(v34 - 4);
              v40 = *(float *)(v33 - 4);
              v38 = v39 == v40;
              if (v39 == v40)
                v38 = *(float *)v34 == *(float *)v33;
            }
            if (!v38 || *(double *)(v34 + 8) != *(double *)(v33 + 8) || *(_DWORD *)(v34 + 16) != *(_DWORD *)(v33 + 16))
              goto LABEL_149;
            v33 += 32;
            v34 += 32;
          }
          while (v35 + 32 != v31);
        }
        v29 += 24;
        v30 += 3;
      }
    }
    else if ((*(_BYTE *)(a1 + 1328) != 0) != (v4[1328] != 0))
    {
      goto LABEL_149;
    }
    if (*(_QWORD *)(a1 + 1336) != *((_QWORD *)v4 + 167))
      goto LABEL_149;
    v41 = *(float *)(a1 + 1344);
    v42 = *((float *)v4 + 336);
    v43 = v41 == v42;
    if (v41 == v42)
      v43 = *(float *)(a1 + 1348) == *((float *)v4 + 337);
    if (!v43)
      goto LABEL_149;
    v44 = *(float *)(a1 + 1352);
    v45 = *((float *)v4 + 338);
    v46 = v44 == v45;
    if (v44 == v45)
      v46 = *(float *)(a1 + 1356) == *((float *)v4 + 339);
    if (!v46 || *(_QWORD *)(a1 + 1360) != *((_QWORD *)v4 + 170))
      goto LABEL_149;
    v48 = 0;
    do
    {
      v49 = *(double *)(a1 + 1384 + v48);
      v50 = *(double *)&v4[v48 + 1384];
      if (v49 != v50)
        break;
      v21 = v48 == 120;
      v48 += 8;
    }
    while (!v21);
    if (v49 != v50)
      goto LABEL_149;
    v51 = v4[1712];
    if (*(_BYTE *)(a1 + 1712))
      v52 = v51 == 0;
    else
      v52 = 1;
    if (v52)
    {
      if ((*(_BYTE *)(a1 + 1712) != 0) != (v51 != 0))
        goto LABEL_149;
    }
    else
    {
      if (*(unsigned __int8 *)(a1 + 1512) != v4[1512])
        goto LABEL_149;
      if (*(unsigned __int8 *)(a1 + 1513) != v4[1513])
        goto LABEL_149;
      if (*(unsigned __int8 *)(a1 + 1514) != v4[1514])
        goto LABEL_149;
      if (*(_DWORD *)(a1 + 1516) != *((_DWORD *)v4 + 379))
        goto LABEL_149;
      if (*(_QWORD *)(a1 + 1520) != *((_QWORD *)v4 + 190))
        goto LABEL_149;
      if (*(_DWORD *)(a1 + 1528) != *((_DWORD *)v4 + 382))
        goto LABEL_149;
      v65 = *(char **)(a1 + 1544);
      v66 = *(char **)(a1 + 1536);
      v67 = (_QWORD *)*((_QWORD *)v4 + 192);
      if (v65 - v66 != *((_QWORD *)v4 + 193) - (_QWORD)v67)
        goto LABEL_149;
      if (v66 != v65)
      {
        while (*(_QWORD *)v66 == *v67 && *((_QWORD *)v66 + 1) == v67[1])
        {
          v66 += 16;
          v67 += 2;
          if (v66 == v65)
            goto LABEL_197;
        }
        goto LABEL_149;
      }
LABEL_197:
      v69 = *(_QWORD *)(a1 + 1568);
      v70 = *(_QWORD *)(a1 + 1560);
      v71 = *((_QWORD *)v4 + 195);
      if (v69 - v70 != *((_QWORD *)v4 + 196) - v71)
        goto LABEL_149;
      for (; v70 != v69; v71 += 64)
      {
        v72 = 0;
        do
        {
          v73 = *(float *)(v70 + v72);
          v74 = *(float *)(v71 + v72);
          if (v73 != v74)
            break;
          v21 = v72 == 60;
          v72 += 4;
        }
        while (!v21);
        if (v73 != v74)
          goto LABEL_149;
        v70 += 64;
      }
      v75 = *(char **)(a1 + 1592);
      v76 = *(char **)(a1 + 1584);
      v77 = (_QWORD *)*((_QWORD *)v4 + 198);
      if (v75 - v76 != *((_QWORD *)v4 + 199) - (_QWORD)v77)
        goto LABEL_149;
      if (v76 != v75)
      {
        while (*(_QWORD *)v76 == *v77 && *((_QWORD *)v76 + 1) == v77[1])
        {
          v76 += 16;
          v77 += 2;
          if (v76 == v75)
            goto LABEL_213;
        }
        goto LABEL_149;
      }
LABEL_213:
      v79 = *(char **)(a1 + 1616);
      v80 = *(char **)(a1 + 1608);
      v81 = (_QWORD *)*((_QWORD *)v4 + 201);
      if (v79 - v80 != *((_QWORD *)v4 + 202) - (_QWORD)v81)
        goto LABEL_149;
      if (v80 != v79)
      {
        while (*(_QWORD *)v80 == *v81 && *((_QWORD *)v80 + 1) == v81[1])
        {
          v80 += 16;
          v81 += 2;
          if (v80 == v79)
            goto LABEL_221;
        }
        goto LABEL_149;
      }
LABEL_221:
      v83 = *(char **)(a1 + 1640);
      v84 = *(char **)(a1 + 1632);
      v85 = (_QWORD *)*((_QWORD *)v4 + 204);
      if (v83 - v84 != *((_QWORD *)v4 + 205) - (_QWORD)v85)
        goto LABEL_149;
      if (v84 != v83)
      {
        while (*(_QWORD *)v84 == *v85 && *((_QWORD *)v84 + 1) == v85[1])
        {
          v84 += 16;
          v85 += 2;
          if (v84 == v83)
            goto LABEL_229;
        }
        goto LABEL_149;
      }
LABEL_229:
      v87 = *(_QWORD *)(a1 + 1664);
      v88 = *(_QWORD *)(a1 + 1656);
      v89 = *((_QWORD *)v4 + 207);
      if (v87 - v88 != *((_QWORD *)v4 + 208) - v89)
        goto LABEL_149;
      for (; v88 != v87; v89 += 64)
      {
        v90 = 0;
        do
        {
          v91 = *(float *)(v88 + v90);
          v92 = *(float *)(v89 + v90);
          if (v91 != v92)
            break;
          v21 = v90 == 60;
          v90 += 4;
        }
        while (!v21);
        if (v91 != v92)
          goto LABEL_149;
        v88 += 64;
      }
      v93 = *(char **)(a1 + 1688);
      v94 = *(char **)(a1 + 1680);
      v95 = (_QWORD *)*((_QWORD *)v4 + 210);
      if (v93 - v94 != *((_QWORD *)v4 + 211) - (_QWORD)v95)
        goto LABEL_149;
      if (v94 != v93)
      {
        while (*(_QWORD *)v94 == *v95 && *((_QWORD *)v94 + 1) == v95[1])
        {
          v94 += 16;
          v95 += 2;
          if (v94 == v93)
            goto LABEL_245;
        }
        goto LABEL_149;
      }
LABEL_245:
      if (*(unsigned __int8 *)(a1 + 1704) != v4[1704])
        goto LABEL_149;
    }
    v53 = (*(_BYTE *)(a1 + 1848) != 0) == (v4[1848] != 0);
    if (*(_BYTE *)(a1 + 1848) && v4[1848])
    {
      v54 = 0;
      do
      {
        v55 = *(float *)(a1 + 1720 + v54);
        v56 = *(float *)&v4[v54 + 1720];
        if (v55 != v56)
          break;
        v21 = v54 == 60;
        v54 += 4;
      }
      while (!v21);
      if (v55 != v56)
        goto LABEL_149;
      v57 = 0;
      do
      {
        v58 = *(float *)(a1 + 1784 + v57);
        v59 = *(float *)&v4[v57 + 1784];
        v53 = v58 == v59;
        if (v58 != v59)
          break;
        v21 = v57 == 60;
        v57 += 4;
      }
      while (!v21);
    }
    if (v53)
    {
      v60 = *(_QWORD *)(a1 + 1856);
      v61 = *(_QWORD *)(a1 + 1864);
      v62 = *((_QWORD *)v4 + 232);
      if (v61 - v60 == *((_QWORD *)v4 + 233) - v62)
      {
        if (v60 == v61)
        {
LABEL_179:
          if (*(unsigned __int8 *)(a1 + 1880) == v4[1880])
          {
            v7 = (*(_BYTE *)(a1 + 1882) != 0) == (v4[1882] != 0);
            if (*(_BYTE *)(a1 + 1882) && v4[1882])
              v7 = *(unsigned __int8 *)(a1 + 1881) == v4[1881];
            goto LABEL_150;
          }
        }
        else
        {
          while (1)
          {
            v103 = (_BYTE *)v60;
            v104 = (uint64_t *)(v60 + 8);
            v63 = v60 + 168;
            v105 = (uint64_t *)(v60 + 136);
            v106 = (uint64_t *)(v60 + 168);
            v97 = (_BYTE *)v62;
            v98 = (uint64_t *)(v62 + 8);
            v64 = v62 + 168;
            v99 = (uint64_t *)(v62 + 136);
            v100 = (uint64_t *)(v62 + 168);
            if (!sub_223C8E448((uint64_t)&v109, (uint64_t)&v103, (uint64_t)&v97))
              break;
            v60 = v63 + 136;
            v62 = v64 + 136;
            if (v63 + 136 == v61)
              goto LABEL_179;
          }
        }
      }
    }
LABEL_149:
    v7 = 0;
LABEL_150:
    sub_2231AD66C((uint64_t)v110);
    sub_2231AD66C((uint64_t)v116);
    return v7;
  }
  return 0;
}

void sub_223B87B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_2231AD66C((uint64_t)&a23);
  sub_2231AD66C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_223B87B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_2231AD66C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

uint64_t sub_223B87B50(uint64_t a1, uint64_t (***a2)())
{
  return sub_223B8C5E0(a2, a1);
}

void sub_223B87B60(uint64_t a1, uint64_t (***a2)())
{
  sub_223BB2F30(a2, a1);
}

uint64_t sub_223B87B70(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  char v4;

  *(_QWORD *)(a1 - 8) = off_24EC5FE88;
  *(_QWORD *)a1 = &unk_24EC5FEE8;
  result = sub_2232BCBE0(a1 + 192);
  v3 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_24EC5FFB8[v3])(&v4, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
  return result;
}

uint64_t sub_223B87BDC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  *(_QWORD *)(a1 - 8) = off_24EC5FE88;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24EC5FEE8;
  sub_2232BCBE0(a1 + 192);
  v3 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_24EC5FFB8[v3])(&v5, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x227684CE8](v2, 0x10F3C4084B9AF75);
}

uint64_t sub_223B87C64()
{
  return 1;
}

uint64_t sub_223B87C6C()
{
  return 1;
}

uint64_t sub_223B87C74()
{
  return 0;
}

uint64_t sub_223B87C7C(uint64_t a1, uint64_t (***a2)())
{
  return sub_223B8C5E0(a2, a1 - 8);
}

void sub_223B87C8C(uint64_t a1, uint64_t (***a2)())
{
  sub_223BB2F30(a2, a1 - 8);
}

uint64_t sub_223B87C9C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  __int128 v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  char v11;
  __int128 v13;
  uint64_t v14;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 48) = 0;
  if (*((_BYTE *)a2 + 40))
  {
    if (*((char *)a2 + 39) < 0)
    {
      sub_223197FA4((_BYTE *)(a1 + 24), (void *)a2[2], a2[3]);
    }
    else
    {
      v6 = *((_OWORD *)a2 + 1);
      *(_QWORD *)(a1 + 40) = a2[4];
      *(_OWORD *)(a1 + 24) = v6;
    }
    *(_BYTE *)(a1 + 48) = 1;
  }
  if (*((_BYTE *)a2 + 96))
  {
    v7 = *((_BYTE *)a2 + 88);
    *(_QWORD *)(a1 + 56) = a2[10];
    *(_BYTE *)(a1 + 64) = v7;
    *(_BYTE *)(a1 + 80) = 0;
    v8 = a1 + 80;
    *(_BYTE *)(a1 + 72) = 1;
    *(_BYTE *)(a1 + 104) = 0;
    if (!*((_BYTE *)a2 + 72))
      goto LABEL_8;
  }
  else
  {
    *(_BYTE *)(a1 + 56) = 0;
    *(_BYTE *)(a1 + 80) = 0;
    v8 = a1 + 80;
    *(_BYTE *)(a1 + 72) = 0;
    *(_BYTE *)(a1 + 104) = 0;
    if (!*((_BYTE *)a2 + 72))
    {
LABEL_8:
      v9 = a1 + 112;
      if (*((_BYTE *)a2 + 160))
        goto LABEL_9;
      goto LABEL_16;
    }
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_223197FA4((_BYTE *)v8, (void *)a2[6], a2[7]);
  }
  else
  {
    v10 = *((_OWORD *)a2 + 3);
    *(_QWORD *)(v8 + 16) = a2[8];
    *(_OWORD *)v8 = v10;
  }
  *(_BYTE *)(a1 + 104) = 1;
  v9 = a1 + 112;
  if (*((_BYTE *)a2 + 160))
  {
LABEL_9:
    if (*((char *)a2 + 135) < 0)
    {
      sub_223197FA4(&v13, (void *)a2[14], a2[15]);
    }
    else
    {
      v13 = *((_OWORD *)a2 + 7);
      v14 = a2[16];
    }
    *(_OWORD *)v9 = v13;
    *(_QWORD *)(v9 + 16) = v14;
    *(_BYTE *)(a1 + 136) = 1;
    v11 = *((_BYTE *)a2 + 200);
    if (v11)
      goto LABEL_20;
    goto LABEL_17;
  }
LABEL_16:
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  v11 = *((_BYTE *)a2 + 200);
  if (v11)
  {
LABEL_20:
    sub_223B87EC4(a2 + 22, (uint64_t)&v13);
    *(_OWORD *)(a1 + 144) = v13;
    *(_QWORD *)(a1 + 160) = v14;
    v11 = 1;
    goto LABEL_21;
  }
LABEL_17:
  *(_BYTE *)(a1 + 144) = 0;
LABEL_21:
  *(_BYTE *)(a1 + 168) = v11;
  return a1;
}

void sub_223B87E58(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;

  if (v1[104] && v1[103] < 0)
    operator delete(*v3);
  if (v1[48])
  {
    if (v1[47] < 0)
      operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

double sub_223B87EC4@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  double result;
  __int128 v6;
  uint64_t v7;

  v4 = (a1[1] - *a1) >> 5;
  v7 = 0;
  v6 = 0uLL;
  sub_223227F94((char **)&v6, 0xAAAAAAAAAAAAAAABLL * v4);
  sub_223B87FCC(*a1, a1[1], (uint64_t)&v6);
  result = *(double *)&v6;
  *(_OWORD *)a2 = v6;
  *(_QWORD *)(a2 + 16) = v7;
  return result;
}

void sub_223B87F38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **__p, void **a10)
{
  void **v11;
  void **v12;

  if (__p)
  {
    v11 = a10;
    v12 = __p;
    if (a10 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != __p);
      v12 = __p;
    }
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223B87FCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  unint64_t v7;
  char *v8;
  int v9;
  void *__p[2];
  uint64_t v12;
  _BYTE v13[24];
  int v14;
  char v15;
  _QWORD v16[2];

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v14 = 0;
      sub_223B8812C((uint64_t)v16, (uint64_t)v13, v5);
      if (v14 == -1)
        sub_22316DD70();
      v16[0] = &v15;
      ((void (*)(void **__return_ptr, _QWORD *, _BYTE *))off_24EC5FFA0[v14])(__p, v16, v13);
      if (v14 != -1)
        ((void (*)(_QWORD *, _BYTE *))off_24EC5FF88[v14])(v16, v13);
      v7 = *(_QWORD *)(a3 + 8);
      if (v7 < *(_QWORD *)(a3 + 16))
      {
        v6 = *(_OWORD *)__p;
        *(_QWORD *)(v7 + 16) = v12;
        *(_OWORD *)v7 = v6;
        *(_QWORD *)(a3 + 8) = v7 + 24;
      }
      else
      {
        v8 = sub_22319BED8((void **)a3, (uint64_t)__p);
        v9 = SHIBYTE(v12);
        *(_QWORD *)(a3 + 8) = v8;
        if (v9 < 0)
          operator delete(__p[0]);
      }
      v5 += 96;
    }
    while (v5 != a2);
  }
  return a3;
}

void sub_223B880D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_223B8812C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  size_t v17;
  void **v18;
  unint64_t v19;
  unint64_t v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *__dst[2];
  unint64_t v30;
  _QWORD v31[5];
  _QWORD *v32;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_223195210(v5);
  v31[0] = v5;
  if (*(_BYTE *)(a3 + 24))
  {
    v6 = *(char *)(a3 + 23);
    if (v6 >= 0)
      v7 = a3;
    else
      v7 = *(_QWORD *)a3;
    if (v6 >= 0)
      v8 = *(unsigned __int8 *)(a3 + 23);
    else
      v8 = *(_QWORD *)(a3 + 8);
    sub_2231813E8((_QWORD *)(v5 + 16), v7, v8);
  }
  if (*(_BYTE *)(a3 + 80))
  {
    v9 = sub_2231813E8((_QWORD *)(v5 + 16), (uint64_t)"#", 1);
    v12 = *(_QWORD *)(a3 + 32);
    v11 = a3 + 32;
    v10 = v12;
    v13 = *(char *)(v11 + 23);
    if (v13 >= 0)
      v14 = v11;
    else
      v14 = v10;
    if (v13 >= 0)
      v15 = *(unsigned __int8 *)(v11 + 23);
    else
      v15 = *(_QWORD *)(v11 + 8);
    sub_2231813E8(v9, v14, v15);
  }
  v16 = *(_DWORD *)(v5 + 120);
  if ((v16 & 0x10) != 0)
  {
    v19 = *(_QWORD *)(v5 + 112);
    v20 = *(_QWORD *)(v5 + 72);
    if (v19 < v20)
    {
      *(_QWORD *)(v5 + 112) = v20;
      v19 = v20;
    }
    v21 = *(const void **)(v5 + 64);
    v17 = v19 - (_QWORD)v21;
    if (v19 - (unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_38;
  }
  else
  {
    if ((v16 & 8) == 0)
    {
      v17 = 0;
      HIBYTE(v30) = 0;
      v18 = __dst;
      goto LABEL_30;
    }
    v21 = *(const void **)(v5 + 40);
    v17 = *(_QWORD *)(v5 + 56) - (_QWORD)v21;
    if (v17 >= 0x7FFFFFFFFFFFFFF8)
LABEL_38:
      sub_22316DBC0();
  }
  if (v17 >= 0x17)
  {
    v22 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v22 = v17 | 7;
    v23 = v22 + 1;
    v18 = (void **)operator new(v22 + 1);
    __dst[1] = (void *)v17;
    v30 = v23 | 0x8000000000000000;
    __dst[0] = v18;
    goto LABEL_29;
  }
  HIBYTE(v30) = v17;
  v18 = __dst;
  if (v17)
LABEL_29:
    memmove(v18, v21, v17);
LABEL_30:
  *((_BYTE *)v18 + v17) = 0;
  v24 = v31[0];
  if (v31[0])
  {
    v25 = MEMORY[0x24BEDB7F0];
    v26 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v31[0] = *MEMORY[0x24BEDB7F0];
    v27 = *(_QWORD *)(v25 + 72);
    *(_QWORD *)(v24 + *(_QWORD *)(v26 - 24)) = *(_QWORD *)(v25 + 64);
    *(_QWORD *)(v24 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v24 + 16) = v27;
    if (*(char *)(v24 + 111) < 0)
      operator delete(*(void **)(v24 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v24 + 128);
    MEMORY[0x227684CE8](v24, 0x10B2C40EED050F3);
  }
  v31[0] = a2;
  v31[1] = __dst;
  v31[2] = a2;
  v31[3] = __dst;
  v31[4] = __dst;
  v28 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v28 == -1)
    sub_22316DD70();
  v32 = v31;
  ((void (*)(_QWORD **, uint64_t))off_24EC5FF70[v28])(&v32, a2);
  if (SHIBYTE(v30) < 0)
    operator delete(__dst[0]);
}

void sub_223B883D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_223B883FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223B88418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22456E764((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223B8842C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  if (*(_BYTE *)(a1 + 168))
  {
    v2 = *(_QWORD *)(a1 + 144);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 152);
      v4 = *(void **)(a1 + 144);
      if (v3 != v2)
      {
        do
        {
          if (*(char *)(v3 - 1) < 0)
            operator delete(*(void **)(v3 - 24));
          v3 -= 24;
        }
        while (v3 != v2);
        v4 = *(void **)(a1 + 144);
      }
      *(_QWORD *)(a1 + 152) = v2;
      operator delete(v4);
    }
  }
  if (*(_BYTE *)(a1 + 136) && *(char *)(a1 + 135) < 0)
  {
    operator delete(*(void **)(a1 + 112));
    if (!*(_BYTE *)(a1 + 104))
      goto LABEL_16;
  }
  else if (!*(_BYTE *)(a1 + 104))
  {
    goto LABEL_16;
  }
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
LABEL_16:
  if (!*(_BYTE *)(a1 + 48) || (*(char *)(a1 + 47) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 24));
  return a1;
}

uint64_t sub_223B8850C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  __int128 v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  char v11;
  __int128 v13;
  uint64_t v14;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 48) = 0;
  if (*((_BYTE *)a2 + 40))
  {
    if (*((char *)a2 + 39) < 0)
    {
      sub_223197FA4((_BYTE *)(a1 + 24), (void *)a2[2], a2[3]);
    }
    else
    {
      v6 = *((_OWORD *)a2 + 1);
      *(_QWORD *)(a1 + 40) = a2[4];
      *(_OWORD *)(a1 + 24) = v6;
    }
    *(_BYTE *)(a1 + 48) = 1;
  }
  if (*((_BYTE *)a2 + 96))
  {
    v7 = *((_BYTE *)a2 + 88);
    *(_QWORD *)(a1 + 56) = a2[10];
    *(_BYTE *)(a1 + 64) = v7;
    *(_BYTE *)(a1 + 80) = 0;
    v8 = a1 + 80;
    *(_BYTE *)(a1 + 72) = 1;
    *(_BYTE *)(a1 + 104) = 0;
    if (!*((_BYTE *)a2 + 72))
      goto LABEL_8;
  }
  else
  {
    *(_BYTE *)(a1 + 56) = 0;
    *(_BYTE *)(a1 + 80) = 0;
    v8 = a1 + 80;
    *(_BYTE *)(a1 + 72) = 0;
    *(_BYTE *)(a1 + 104) = 0;
    if (!*((_BYTE *)a2 + 72))
    {
LABEL_8:
      v9 = a1 + 112;
      if (*((_BYTE *)a2 + 160))
        goto LABEL_9;
      goto LABEL_16;
    }
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_223197FA4((_BYTE *)v8, (void *)a2[6], a2[7]);
  }
  else
  {
    v10 = *((_OWORD *)a2 + 3);
    *(_QWORD *)(v8 + 16) = a2[8];
    *(_OWORD *)v8 = v10;
  }
  *(_BYTE *)(a1 + 104) = 1;
  v9 = a1 + 112;
  if (*((_BYTE *)a2 + 160))
  {
LABEL_9:
    if (*((char *)a2 + 135) < 0)
    {
      sub_223197FA4(&v13, (void *)a2[14], a2[15]);
    }
    else
    {
      v13 = *((_OWORD *)a2 + 7);
      v14 = a2[16];
    }
    *(_OWORD *)v9 = v13;
    *(_QWORD *)(v9 + 16) = v14;
    *(_BYTE *)(a1 + 136) = 1;
    v11 = *((_BYTE *)a2 + 200);
    if (v11)
      goto LABEL_20;
    goto LABEL_17;
  }
LABEL_16:
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  v11 = *((_BYTE *)a2 + 200);
  if (v11)
  {
LABEL_20:
    sub_223B88734(a2 + 22, (uint64_t)&v13);
    *(_OWORD *)(a1 + 144) = v13;
    *(_QWORD *)(a1 + 160) = v14;
    v11 = 1;
    goto LABEL_21;
  }
LABEL_17:
  *(_BYTE *)(a1 + 144) = 0;
LABEL_21:
  *(_BYTE *)(a1 + 168) = v11;
  return a1;
}

void sub_223B886C8(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;

  if (v1[104] && v1[103] < 0)
    operator delete(*v3);
  if (v1[48])
  {
    if (v1[47] < 0)
      operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

double sub_223B88734@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  double result;
  __int128 v6;
  uint64_t v7;

  v4 = (a1[1] - *a1) >> 5;
  v7 = 0;
  v6 = 0uLL;
  sub_223227F94((char **)&v6, 0xAAAAAAAAAAAAAAABLL * v4);
  sub_223B8883C(*a1, a1[1], (uint64_t)&v6);
  result = *(double *)&v6;
  *(_OWORD *)a2 = v6;
  *(_QWORD *)(a2 + 16) = v7;
  return result;
}

void sub_223B887A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **__p, void **a10)
{
  void **v11;
  void **v12;

  if (__p)
  {
    v11 = a10;
    v12 = __p;
    if (a10 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != __p);
      v12 = __p;
    }
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223B8883C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  unint64_t v7;
  char *v8;
  int v9;
  void *__p[2];
  uint64_t v12;
  _BYTE v13[24];
  int v14;
  char v15;
  _QWORD v16[2];

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v14 = 0;
      sub_223B8812C((uint64_t)v16, (uint64_t)v13, v5);
      if (v14 == -1)
        sub_22316DD70();
      v16[0] = &v15;
      ((void (*)(void **__return_ptr, _QWORD *, _BYTE *))off_24EC5FFA0[v14])(__p, v16, v13);
      if (v14 != -1)
        ((void (*)(_QWORD *, _BYTE *))off_24EC5FF88[v14])(v16, v13);
      v7 = *(_QWORD *)(a3 + 8);
      if (v7 < *(_QWORD *)(a3 + 16))
      {
        v6 = *(_OWORD *)__p;
        *(_QWORD *)(v7 + 16) = v12;
        *(_OWORD *)v7 = v6;
        *(_QWORD *)(a3 + 8) = v7 + 24;
      }
      else
      {
        v8 = sub_22319BED8((void **)a3, (uint64_t)__p);
        v9 = SHIBYTE(v12);
        *(_QWORD *)(a3 + 8) = v8;
        if (v9 < 0)
          operator delete(__p[0]);
      }
      v5 += 96;
    }
    while (v5 != a2);
  }
  return a3;
}

void sub_223B88948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223B8899C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  __int128 v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  char v11;
  __int128 v13;
  uint64_t v14;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 48) = 0;
  if (*((_BYTE *)a2 + 40))
  {
    if (*((char *)a2 + 39) < 0)
    {
      sub_223197FA4((_BYTE *)(a1 + 24), (void *)a2[2], a2[3]);
    }
    else
    {
      v6 = *((_OWORD *)a2 + 1);
      *(_QWORD *)(a1 + 40) = a2[4];
      *(_OWORD *)(a1 + 24) = v6;
    }
    *(_BYTE *)(a1 + 48) = 1;
  }
  if (*((_BYTE *)a2 + 96))
  {
    v7 = *((_BYTE *)a2 + 88);
    *(_QWORD *)(a1 + 56) = a2[10];
    *(_BYTE *)(a1 + 64) = v7;
    *(_BYTE *)(a1 + 80) = 0;
    v8 = a1 + 80;
    *(_BYTE *)(a1 + 72) = 1;
    *(_BYTE *)(a1 + 104) = 0;
    if (!*((_BYTE *)a2 + 72))
      goto LABEL_8;
  }
  else
  {
    *(_BYTE *)(a1 + 56) = 0;
    *(_BYTE *)(a1 + 80) = 0;
    v8 = a1 + 80;
    *(_BYTE *)(a1 + 72) = 0;
    *(_BYTE *)(a1 + 104) = 0;
    if (!*((_BYTE *)a2 + 72))
    {
LABEL_8:
      v9 = a1 + 112;
      if (*((_BYTE *)a2 + 160))
        goto LABEL_9;
      goto LABEL_16;
    }
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_223197FA4((_BYTE *)v8, (void *)a2[6], a2[7]);
  }
  else
  {
    v10 = *((_OWORD *)a2 + 3);
    *(_QWORD *)(v8 + 16) = a2[8];
    *(_OWORD *)v8 = v10;
  }
  *(_BYTE *)(a1 + 104) = 1;
  v9 = a1 + 112;
  if (*((_BYTE *)a2 + 160))
  {
LABEL_9:
    if (*((char *)a2 + 135) < 0)
    {
      sub_223197FA4(&v13, (void *)a2[14], a2[15]);
    }
    else
    {
      v13 = *((_OWORD *)a2 + 7);
      v14 = a2[16];
    }
    *(_OWORD *)v9 = v13;
    *(_QWORD *)(v9 + 16) = v14;
    *(_BYTE *)(a1 + 136) = 1;
    v11 = *((_BYTE *)a2 + 200);
    if (v11)
      goto LABEL_20;
    goto LABEL_17;
  }
LABEL_16:
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  v11 = *((_BYTE *)a2 + 200);
  if (v11)
  {
LABEL_20:
    sub_223B88BC4(a2 + 22, (uint64_t)&v13);
    *(_OWORD *)(a1 + 144) = v13;
    *(_QWORD *)(a1 + 160) = v14;
    v11 = 1;
    goto LABEL_21;
  }
LABEL_17:
  *(_BYTE *)(a1 + 144) = 0;
LABEL_21:
  *(_BYTE *)(a1 + 168) = v11;
  return a1;
}

void sub_223B88B58(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;

  if (v1[104] && v1[103] < 0)
    operator delete(*v3);
  if (v1[48])
  {
    if (v1[47] < 0)
      operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

double sub_223B88BC4@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  double result;
  __int128 v6;
  uint64_t v7;

  v4 = (a1[1] - *a1) >> 5;
  v7 = 0;
  v6 = 0uLL;
  sub_223227F94((char **)&v6, 0xAAAAAAAAAAAAAAABLL * v4);
  sub_223B88CCC(*a1, a1[1], (uint64_t)&v6);
  result = *(double *)&v6;
  *(_OWORD *)a2 = v6;
  *(_QWORD *)(a2 + 16) = v7;
  return result;
}

void sub_223B88C38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **__p, void **a10)
{
  void **v11;
  void **v12;

  if (__p)
  {
    v11 = a10;
    v12 = __p;
    if (a10 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != __p);
      v12 = __p;
    }
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223B88CCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  unint64_t v7;
  char *v8;
  int v9;
  void *__p[2];
  uint64_t v12;
  _BYTE v13[24];
  int v14;
  char v15;
  _QWORD v16[2];

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v14 = 0;
      sub_223B8812C((uint64_t)v16, (uint64_t)v13, v5);
      if (v14 == -1)
        sub_22316DD70();
      v16[0] = &v15;
      ((void (*)(void **__return_ptr, _QWORD *, _BYTE *))off_24EC5FFA0[v14])(__p, v16, v13);
      if (v14 != -1)
        ((void (*)(_QWORD *, _BYTE *))off_24EC5FF88[v14])(v16, v13);
      v7 = *(_QWORD *)(a3 + 8);
      if (v7 < *(_QWORD *)(a3 + 16))
      {
        v6 = *(_OWORD *)__p;
        *(_QWORD *)(v7 + 16) = v12;
        *(_OWORD *)v7 = v6;
        *(_QWORD *)(a3 + 8) = v7 + 24;
      }
      else
      {
        v8 = sub_22319BED8((void **)a3, (uint64_t)__p);
        v9 = SHIBYTE(v12);
        *(_QWORD *)(a3 + 8) = v8;
        if (v9 < 0)
          operator delete(__p[0]);
      }
      v5 += 96;
    }
    while (v5 != a2);
  }
  return a3;
}

void sub_223B88DD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223B88E2C(uint64_t a1, uint64_t a2)
{
  return sub_223B8842C(a2);
}

uint64_t sub_223B88E34(uint64_t a1, uint64_t a2)
{
  return sub_223B8842C(a2);
}

uint64_t sub_223B88E3C(uint64_t a1, uint64_t a2)
{
  return sub_223B8842C(a2);
}

uint64_t sub_223B88E44(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(void **)(a1 + 8);
    if (v3 != v2)
    {
      v5 = *(_QWORD *)(a1 + 16);
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_223B88EB8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  if (*(_BYTE *)(result + 80))
  {
    *(_QWORD *)result = &off_24EC26FA8;
    v2 = *(std::__shared_weak_count **)(result + 16);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        return v1;
      }
    }
  }
  return result;
}

uint64_t sub_223B88F34(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char v8;
  char v9;

  v2 = *(unsigned int *)(a1 + 264);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24EC5FFD0[v2])(&v8, a1 + 200);
  *(_DWORD *)(a1 + 264) = -1;
  v3 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_24EC5FFD0[v3])(&v9, a1 + 96);
  *(_DWORD *)(a1 + 160) = -1;
  if (!*(_BYTE *)(a1 + 56))
    return a1;
  *(_QWORD *)a1 = &off_24EC21328;
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v4)
    return a1;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

double sub_223B8901C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _BYTE *v5;
  __int128 v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE __dst[24];

  v4 = *(unsigned __int8 *)(a1 + 16);
  *(_QWORD *)a2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 16) = 0;
  v5 = (_BYTE *)(a2 + 16);
  *(_BYTE *)(a2 + 40) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    if (*(char *)(a1 + 47) < 0)
    {
      sub_223197FA4(v5, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
    }
    else
    {
      v6 = *(_OWORD *)(a1 + 24);
      *(_OWORD *)v5 = v6;
      *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 40);
    }
    *(_BYTE *)(a2 + 40) = 1;
  }
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 72) = 0;
  if (*(_BYTE *)(a1 + 104))
  {
    if (*(char *)(a1 + 103) < 0)
    {
      sub_223197FA4((_BYTE *)(a2 + 48), *(void **)(a1 + 80), *(_QWORD *)(a1 + 88));
    }
    else
    {
      v6 = *(_OWORD *)(a1 + 80);
      *(_OWORD *)(a2 + 48) = v6;
      *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 96);
    }
    *(_BYTE *)(a2 + 72) = 1;
  }
  if (*(_BYTE *)(a1 + 72))
  {
    v7 = *(unsigned __int8 *)(a1 + 64);
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a2 + 88) = v7;
    *(_BYTE *)(a2 + 96) = 1;
    if (*(_BYTE *)(a1 + 136))
      goto LABEL_13;
  }
  else
  {
    *(_BYTE *)(a2 + 80) = 0;
    *(_BYTE *)(a2 + 96) = 0;
    if (*(_BYTE *)(a1 + 136))
    {
LABEL_13:
      if (*(char *)(a1 + 135) < 0)
      {
        sub_223197FA4(__dst, *(void **)(a1 + 112), *(_QWORD *)(a1 + 120));
      }
      else
      {
        v6 = *(_OWORD *)(a1 + 112);
        *(_OWORD *)__dst = v6;
        *(_QWORD *)&__dst[16] = *(_QWORD *)(a1 + 128);
      }
      v9 = *(_QWORD *)&__dst[8];
      v10 = *(_QWORD *)&__dst[15];
      *(_QWORD *)(a2 + 112) = *(_QWORD *)__dst;
      *(_QWORD *)(a2 + 120) = v9;
      *(_QWORD *)(a2 + 127) = v10;
      *(_BYTE *)(a2 + 135) = __dst[23];
      *(_QWORD *)(a2 + 144) = 0;
      *(_QWORD *)(a2 + 152) = 0;
      *(_BYTE *)(a2 + 160) = 1;
      v8 = *(_BYTE *)(a1 + 168);
      if (v8)
        goto LABEL_20;
      goto LABEL_17;
    }
  }
  *(_BYTE *)(a2 + 112) = 0;
  *(_BYTE *)(a2 + 160) = 0;
  v8 = *(_BYTE *)(a1 + 168);
  if (v8)
  {
LABEL_20:
    sub_223B89664((uint64_t *)(a1 + 144), (uint64_t)__dst);
    *(_QWORD *)&v6 = *(_QWORD *)__dst;
    *(_OWORD *)(a2 + 176) = *(_OWORD *)__dst;
    *(_QWORD *)(a2 + 192) = *(_QWORD *)&__dst[16];
    *(_BYTE *)(a2 + 200) = 1;
    return *(double *)&v6;
  }
LABEL_17:
  *(_BYTE *)(a2 + 176) = 0;
  *(_BYTE *)(a2 + 200) = v8;
  return *(double *)&v6;
}

void sub_223B891C8(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;

  if (v1[72] && v1[71] < 0)
    operator delete(*v3);
  if (v1[40])
  {
    if (v1[39] < 0)
      operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

double sub_223B89234@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _BYTE *v5;
  __int128 v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE __dst[24];

  v4 = *(unsigned __int8 *)(a1 + 16);
  *(_QWORD *)a2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 16) = 0;
  v5 = (_BYTE *)(a2 + 16);
  *(_BYTE *)(a2 + 40) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    if (*(char *)(a1 + 47) < 0)
    {
      sub_223197FA4(v5, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
    }
    else
    {
      v6 = *(_OWORD *)(a1 + 24);
      *(_OWORD *)v5 = v6;
      *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 40);
    }
    *(_BYTE *)(a2 + 40) = 1;
  }
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 72) = 0;
  if (*(_BYTE *)(a1 + 104))
  {
    if (*(char *)(a1 + 103) < 0)
    {
      sub_223197FA4((_BYTE *)(a2 + 48), *(void **)(a1 + 80), *(_QWORD *)(a1 + 88));
    }
    else
    {
      v6 = *(_OWORD *)(a1 + 80);
      *(_OWORD *)(a2 + 48) = v6;
      *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 96);
    }
    *(_BYTE *)(a2 + 72) = 1;
  }
  if (*(_BYTE *)(a1 + 72))
  {
    v7 = *(unsigned __int8 *)(a1 + 64);
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a2 + 88) = v7;
    *(_BYTE *)(a2 + 96) = 1;
    if (*(_BYTE *)(a1 + 136))
      goto LABEL_13;
  }
  else
  {
    *(_BYTE *)(a2 + 80) = 0;
    *(_BYTE *)(a2 + 96) = 0;
    if (*(_BYTE *)(a1 + 136))
    {
LABEL_13:
      if (*(char *)(a1 + 135) < 0)
      {
        sub_223197FA4(__dst, *(void **)(a1 + 112), *(_QWORD *)(a1 + 120));
      }
      else
      {
        v6 = *(_OWORD *)(a1 + 112);
        *(_OWORD *)__dst = v6;
        *(_QWORD *)&__dst[16] = *(_QWORD *)(a1 + 128);
      }
      v9 = *(_QWORD *)&__dst[8];
      v10 = *(_QWORD *)&__dst[15];
      *(_QWORD *)(a2 + 112) = *(_QWORD *)__dst;
      *(_QWORD *)(a2 + 120) = v9;
      *(_QWORD *)(a2 + 127) = v10;
      *(_BYTE *)(a2 + 135) = __dst[23];
      *(_QWORD *)(a2 + 144) = 0;
      *(_QWORD *)(a2 + 152) = 0;
      *(_BYTE *)(a2 + 160) = 1;
      v8 = *(_BYTE *)(a1 + 168);
      if (v8)
        goto LABEL_20;
      goto LABEL_17;
    }
  }
  *(_BYTE *)(a2 + 112) = 0;
  *(_BYTE *)(a2 + 160) = 0;
  v8 = *(_BYTE *)(a1 + 168);
  if (v8)
  {
LABEL_20:
    sub_223B89DFC((uint64_t *)(a1 + 144), (uint64_t)__dst);
    *(_QWORD *)&v6 = *(_QWORD *)__dst;
    *(_OWORD *)(a2 + 176) = *(_OWORD *)__dst;
    *(_QWORD *)(a2 + 192) = *(_QWORD *)&__dst[16];
    *(_BYTE *)(a2 + 200) = 1;
    return *(double *)&v6;
  }
LABEL_17:
  *(_BYTE *)(a2 + 176) = 0;
  *(_BYTE *)(a2 + 200) = v8;
  return *(double *)&v6;
}

void sub_223B893E0(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;

  if (v1[72] && v1[71] < 0)
    operator delete(*v3);
  if (v1[40])
  {
    if (v1[39] < 0)
      operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

double sub_223B8944C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _BYTE *v5;
  __int128 v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE __dst[24];

  v4 = *(unsigned __int8 *)(a1 + 16);
  *(_QWORD *)a2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 16) = 0;
  v5 = (_BYTE *)(a2 + 16);
  *(_BYTE *)(a2 + 40) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    if (*(char *)(a1 + 47) < 0)
    {
      sub_223197FA4(v5, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
    }
    else
    {
      v6 = *(_OWORD *)(a1 + 24);
      *(_OWORD *)v5 = v6;
      *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 40);
    }
    *(_BYTE *)(a2 + 40) = 1;
  }
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 72) = 0;
  if (*(_BYTE *)(a1 + 104))
  {
    if (*(char *)(a1 + 103) < 0)
    {
      sub_223197FA4((_BYTE *)(a2 + 48), *(void **)(a1 + 80), *(_QWORD *)(a1 + 88));
    }
    else
    {
      v6 = *(_OWORD *)(a1 + 80);
      *(_OWORD *)(a2 + 48) = v6;
      *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 96);
    }
    *(_BYTE *)(a2 + 72) = 1;
  }
  if (*(_BYTE *)(a1 + 72))
  {
    v7 = *(unsigned __int8 *)(a1 + 64);
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a2 + 88) = v7;
    *(_BYTE *)(a2 + 96) = 1;
    if (*(_BYTE *)(a1 + 136))
      goto LABEL_13;
  }
  else
  {
    *(_BYTE *)(a2 + 80) = 0;
    *(_BYTE *)(a2 + 96) = 0;
    if (*(_BYTE *)(a1 + 136))
    {
LABEL_13:
      if (*(char *)(a1 + 135) < 0)
      {
        sub_223197FA4(__dst, *(void **)(a1 + 112), *(_QWORD *)(a1 + 120));
      }
      else
      {
        v6 = *(_OWORD *)(a1 + 112);
        *(_OWORD *)__dst = v6;
        *(_QWORD *)&__dst[16] = *(_QWORD *)(a1 + 128);
      }
      v9 = *(_QWORD *)&__dst[8];
      v10 = *(_QWORD *)&__dst[15];
      *(_QWORD *)(a2 + 112) = *(_QWORD *)__dst;
      *(_QWORD *)(a2 + 120) = v9;
      *(_QWORD *)(a2 + 127) = v10;
      *(_BYTE *)(a2 + 135) = __dst[23];
      *(_QWORD *)(a2 + 144) = 0;
      *(_QWORD *)(a2 + 152) = 0;
      *(_BYTE *)(a2 + 160) = 1;
      v8 = *(_BYTE *)(a1 + 168);
      if (v8)
        goto LABEL_20;
      goto LABEL_17;
    }
  }
  *(_BYTE *)(a2 + 112) = 0;
  *(_BYTE *)(a2 + 160) = 0;
  v8 = *(_BYTE *)(a1 + 168);
  if (v8)
  {
LABEL_20:
    sub_223B8A0C0((uint64_t *)(a1 + 144), (uint64_t)__dst);
    *(_QWORD *)&v6 = *(_QWORD *)__dst;
    *(_OWORD *)(a2 + 176) = *(_OWORD *)__dst;
    *(_QWORD *)(a2 + 192) = *(_QWORD *)&__dst[16];
    *(_BYTE *)(a2 + 200) = 1;
    return *(double *)&v6;
  }
LABEL_17:
  *(_BYTE *)(a2 + 176) = 0;
  *(_BYTE *)(a2 + 200) = v8;
  return *(double *)&v6;
}

void sub_223B895F8(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;

  if (v1[72] && v1[71] < 0)
    operator delete(*v3);
  if (v1[40])
  {
    if (v1[39] < 0)
      operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

double sub_223B89664@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  unsigned __int128 v12;
  char *v13;
  double result;
  __int128 v15;
  unint64_t v16;
  void *v17[2];
  uint64_t v18;
  char v19;
  __int128 __p;
  uint64_t v21;
  unsigned __int128 v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v16 = 0;
  v15 = 0uLL;
  sub_223B89928((uint64_t)&v15, v4);
  v6 = *a1;
  for (i = a1[1]; v6 != i; v6 += 24)
  {
    if (*(char *)(v6 + 23) < 0)
    {
      v8 = *(_BYTE **)v6;
      v7 = *(_QWORD *)(v6 + 8);
    }
    else
    {
      v7 = *(unsigned __int8 *)(v6 + 23);
      v8 = (_BYTE *)v6;
    }
    sub_224122780(v8, v7, (uint64_t)v17);
    v9 = *((_QWORD *)&v15 + 1);
    if (*((_QWORD *)&v15 + 1) >= v16)
    {
      v13 = sub_223B89B68(&v15, (uint64_t)v17);
    }
    else
    {
      **((_BYTE **)&v15 + 1) = 0;
      *(_BYTE *)(v9 + 24) = 0;
      if (v19)
      {
        v10 = *(_OWORD *)v17;
        *(_QWORD *)(v9 + 16) = v18;
        *(_OWORD *)v9 = v10;
        v17[1] = 0;
        v18 = 0;
        v17[0] = 0;
        *(_BYTE *)(v9 + 24) = 1;
      }
      *(_BYTE *)(v9 + 32) = 0;
      *(_BYTE *)(v9 + 80) = 0;
      if (v23)
      {
        v11 = __p;
        *(_QWORD *)(v9 + 48) = v21;
        *(_OWORD *)(v9 + 32) = v11;
        v21 = 0;
        __p = 0uLL;
        do
          v12 = __ldaxp(&v22);
        while (__stlxp(v12, &v22));
        *(_OWORD *)(v9 + 64) = v12;
        *(_BYTE *)(v9 + 80) = 1;
      }
      v13 = (char *)(v9 + 96);
    }
    *((_QWORD *)&v15 + 1) = v13;
    if (v23 && SHIBYTE(v21) < 0)
      operator delete((void *)__p);
    if (v19 && SHIBYTE(v18) < 0)
      operator delete(v17[0]);
  }
  result = *(double *)&v15;
  *(_OWORD *)a2 = v15;
  *(_QWORD *)(a2 + 16) = v16;
  return result;
}

void sub_223B89810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **__p, void **a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void **v30;
  void **v31;

  if (__p)
  {
    v30 = a10;
    v31 = __p;
    if (a10 != __p)
    {
      do
      {
        if (*((_BYTE *)v30 - 16) && *((char *)v30 - 41) < 0)
          operator delete(*(v30 - 8));
        if (*((_BYTE *)v30 - 72))
        {
          if (*((char *)v30 - 73) < 0)
            operator delete(*(v30 - 12));
        }
        v30 -= 12;
      }
      while (v30 != __p);
      v31 = __p;
    }
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

void sub_223B89928(uint64_t a1, unint64_t a2)
{
  void **v2;
  void **v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void **v9;
  __int128 v10;

  v2 = *(void ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5) < a2)
  {
    if (a2 >= 0x2AAAAAAAAAAAAABLL)
      sub_22316E078();
    v4 = *(void ***)(a1 + 8);
    v5 = 96 * a2;
    v6 = (char *)operator new(96 * a2);
    v7 = &v6[(char *)v4 - (char *)v2];
    *(_QWORD *)&v10 = v7;
    *((_QWORD *)&v10 + 1) = &v6[v5];
    if (v4 != v2)
    {
      v8 = 0;
      do
      {
        sub_2231AB4E0(&v7[v8 * 8 - 96], (__int128 *)&v4[v8 - 12]);
        v8 -= 12;
      }
      while (&v4[v8] != v2);
      v2 = *(void ***)a1;
      v9 = *(void ***)(a1 + 8);
      *(_QWORD *)a1 = &v7[v8 * 8];
      *(_OWORD *)(a1 + 8) = v10;
      while (1)
      {
        if (v9 == v2)
          goto LABEL_17;
        if (*((_BYTE *)v9 - 16) && *((char *)v9 - 41) < 0)
        {
          operator delete(*(v9 - 8));
          if (!*((_BYTE *)v9 - 72))
            goto LABEL_7;
        }
        else if (!*((_BYTE *)v9 - 72))
        {
          goto LABEL_7;
        }
        if (*((char *)v9 - 73) < 0)
          operator delete(*(v9 - 12));
LABEL_7:
        v9 -= 12;
      }
    }
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v6[v5];
LABEL_17:
    if (v2)
      operator delete(v2);
  }
}

uint64_t sub_223B89AD8(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 96;
    if (*(_BYTE *)(i - 16) && *(char *)(i - 41) < 0)
    {
      operator delete(*(void **)(i - 64));
      if (!*(_BYTE *)(i - 72))
        continue;
    }
    else if (!*(_BYTE *)(i - 72))
    {
      continue;
    }
    if (*(char *)(i - 73) < 0)
      operator delete(*(void **)(i - 96));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_223B89B68(_QWORD *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  _OWORD *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  unsigned __int128 *v12;
  unsigned __int128 v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void **v18;
  __int128 v20;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 5);
  v4 = v3 + 1;
  if (v3 + 1 > 0x2AAAAAAAAAAAAAALL)
    sub_22316E078();
  if (0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 5) > v4)
    v4 = 0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - *a1) >> 5) >= 0x155555555555555)
    v6 = 0x2AAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL)
      sub_223174E94();
    v7 = operator new(96 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = (char *)&v7[6 * v3];
  *((_QWORD *)&v20 + 1) = &v7[6 * v6];
  *v8 = 0;
  v8[24] = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_OWORD *)v8 = *(_OWORD *)a2;
    *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    v8[24] = 1;
  }
  v9 = (char *)&v7[6 * v3];
  v9[32] = 0;
  v10 = v9 + 32;
  v10[48] = 0;
  v11 = (char *)&v7[6 * v3];
  if (*(_BYTE *)(a2 + 80))
  {
    *(_OWORD *)v10 = *(_OWORD *)(a2 + 32);
    *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    v12 = (unsigned __int128 *)(a2 + 64);
    do
      v13 = __ldaxp(v12);
    while (__stlxp(v13, v12));
    v7[6 * v3 + 4] = v13;
    v10[48] = 1;
    v11 = (char *)&v7[6 * v3];
  }
  v14 = v11 + 96;
  *(_QWORD *)&v20 = v11 + 96;
  v16 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 != (char *)*a1)
  {
    v17 = 0;
    do
    {
      sub_2231AB4E0(&v8[v17 - 96], (__int128 *)&v15[v17 - 96]);
      v17 -= 96;
    }
    while (&v15[v17] != v16);
    v15 = (char *)*a1;
    v18 = (void **)a1[1];
    *a1 = &v8[v17];
    *(_OWORD *)(a1 + 1) = v20;
    v14 = (char *)v20;
    while (1)
    {
      if (v18 == (void **)v15)
        goto LABEL_31;
      if (*((_BYTE *)v18 - 16) && *((char *)v18 - 41) < 0)
      {
        operator delete(*(v18 - 8));
        if (!*((_BYTE *)v18 - 72))
          goto LABEL_21;
      }
      else if (!*((_BYTE *)v18 - 72))
      {
        goto LABEL_21;
      }
      if (*((char *)v18 - 73) < 0)
        operator delete(*(v18 - 12));
LABEL_21:
      v18 -= 12;
    }
  }
  *a1 = v8;
  a1[1] = v14;
  a1[2] = *((_QWORD *)&v20 + 1);
LABEL_31:
  if (v15)
    operator delete(v15);
  return v14;
}

double sub_223B89DFC@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  unsigned __int128 v12;
  char *v13;
  double result;
  __int128 v15;
  unint64_t v16;
  void *v17[2];
  uint64_t v18;
  char v19;
  __int128 __p;
  uint64_t v21;
  unsigned __int128 v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v16 = 0;
  v15 = 0uLL;
  sub_223B89928((uint64_t)&v15, v4);
  v6 = *a1;
  for (i = a1[1]; v6 != i; v6 += 24)
  {
    if (*(char *)(v6 + 23) < 0)
    {
      v8 = *(_BYTE **)v6;
      v7 = *(_QWORD *)(v6 + 8);
    }
    else
    {
      v7 = *(unsigned __int8 *)(v6 + 23);
      v8 = (_BYTE *)v6;
    }
    sub_224122780(v8, v7, (uint64_t)v17);
    v9 = *((_QWORD *)&v15 + 1);
    if (*((_QWORD *)&v15 + 1) >= v16)
    {
      v13 = sub_223B89B68(&v15, (uint64_t)v17);
    }
    else
    {
      **((_BYTE **)&v15 + 1) = 0;
      *(_BYTE *)(v9 + 24) = 0;
      if (v19)
      {
        v10 = *(_OWORD *)v17;
        *(_QWORD *)(v9 + 16) = v18;
        *(_OWORD *)v9 = v10;
        v17[1] = 0;
        v18 = 0;
        v17[0] = 0;
        *(_BYTE *)(v9 + 24) = 1;
      }
      *(_BYTE *)(v9 + 32) = 0;
      *(_BYTE *)(v9 + 80) = 0;
      if (v23)
      {
        v11 = __p;
        *(_QWORD *)(v9 + 48) = v21;
        *(_OWORD *)(v9 + 32) = v11;
        v21 = 0;
        __p = 0uLL;
        do
          v12 = __ldaxp(&v22);
        while (__stlxp(v12, &v22));
        *(_OWORD *)(v9 + 64) = v12;
        *(_BYTE *)(v9 + 80) = 1;
      }
      v13 = (char *)(v9 + 96);
    }
    *((_QWORD *)&v15 + 1) = v13;
    if (v23 && SHIBYTE(v21) < 0)
      operator delete((void *)__p);
    if (v19 && SHIBYTE(v18) < 0)
      operator delete(v17[0]);
  }
  result = *(double *)&v15;
  *(_OWORD *)a2 = v15;
  *(_QWORD *)(a2 + 16) = v16;
  return result;
}

void sub_223B89FA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **__p, void **a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void **v30;
  void **v31;

  if (__p)
  {
    v30 = a10;
    v31 = __p;
    if (a10 != __p)
    {
      do
      {
        if (*((_BYTE *)v30 - 16) && *((char *)v30 - 41) < 0)
          operator delete(*(v30 - 8));
        if (*((_BYTE *)v30 - 72))
        {
          if (*((char *)v30 - 73) < 0)
            operator delete(*(v30 - 12));
        }
        v30 -= 12;
      }
      while (v30 != __p);
      v31 = __p;
    }
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

double sub_223B8A0C0@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  unsigned __int128 v12;
  char *v13;
  double result;
  __int128 v15;
  unint64_t v16;
  void *v17[2];
  uint64_t v18;
  char v19;
  __int128 __p;
  uint64_t v21;
  unsigned __int128 v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v16 = 0;
  v15 = 0uLL;
  sub_223B89928((uint64_t)&v15, v4);
  v6 = *a1;
  for (i = a1[1]; v6 != i; v6 += 24)
  {
    if (*(char *)(v6 + 23) < 0)
    {
      v8 = *(_BYTE **)v6;
      v7 = *(_QWORD *)(v6 + 8);
    }
    else
    {
      v7 = *(unsigned __int8 *)(v6 + 23);
      v8 = (_BYTE *)v6;
    }
    sub_224122780(v8, v7, (uint64_t)v17);
    v9 = *((_QWORD *)&v15 + 1);
    if (*((_QWORD *)&v15 + 1) >= v16)
    {
      v13 = sub_223B89B68(&v15, (uint64_t)v17);
    }
    else
    {
      **((_BYTE **)&v15 + 1) = 0;
      *(_BYTE *)(v9 + 24) = 0;
      if (v19)
      {
        v10 = *(_OWORD *)v17;
        *(_QWORD *)(v9 + 16) = v18;
        *(_OWORD *)v9 = v10;
        v17[1] = 0;
        v18 = 0;
        v17[0] = 0;
        *(_BYTE *)(v9 + 24) = 1;
      }
      *(_BYTE *)(v9 + 32) = 0;
      *(_BYTE *)(v9 + 80) = 0;
      if (v23)
      {
        v11 = __p;
        *(_QWORD *)(v9 + 48) = v21;
        *(_OWORD *)(v9 + 32) = v11;
        v21 = 0;
        __p = 0uLL;
        do
          v12 = __ldaxp(&v22);
        while (__stlxp(v12, &v22));
        *(_OWORD *)(v9 + 64) = v12;
        *(_BYTE *)(v9 + 80) = 1;
      }
      v13 = (char *)(v9 + 96);
    }
    *((_QWORD *)&v15 + 1) = v13;
    if (v23 && SHIBYTE(v21) < 0)
      operator delete((void *)__p);
    if (v19 && SHIBYTE(v18) < 0)
      operator delete(v17[0]);
  }
  result = *(double *)&v15;
  *(_OWORD *)a2 = v15;
  *(_QWORD *)(a2 + 16) = v16;
  return result;
}

void sub_223B8A26C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **__p, void **a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void **v30;
  void **v31;

  if (__p)
  {
    v30 = a10;
    v31 = __p;
    if (a10 != __p)
    {
      do
      {
        if (*((_BYTE *)v30 - 16) && *((char *)v30 - 41) < 0)
          operator delete(*(v30 - 8));
        if (*((_BYTE *)v30 - 72))
        {
          if (*((char *)v30 - 73) < 0)
            operator delete(*(v30 - 12));
        }
        v30 -= 12;
      }
      while (v30 != __p);
      v31 = __p;
    }
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_223B8A384(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
  {
    if (!v4)
    {
LABEL_21:
      v27 = 0;
      v13 = *(_QWORD *)(a2 + 8);
      v14 = *(std::__shared_weak_count **)(a2 + 16);
      if (v14)
        goto LABEL_22;
LABEL_18:
      if (!v13)
        goto LABEL_37;
      goto LABEL_34;
    }
    goto LABEL_16;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    if (!v4)
      goto LABEL_21;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (!v4)
      goto LABEL_21;
  }
  v4 = *(_QWORD *)(a1 + 8);
  v9 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v9)
    goto LABEL_16;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_16:
    if (!*(_BYTE *)(a1 + 49))
      goto LABEL_21;
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 49))
    goto LABEL_21;
LABEL_17:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v27, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_18;
LABEL_22:
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
    if (!v13)
      goto LABEL_37;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (!v13)
      goto LABEL_37;
  }
  v13 = *(_QWORD *)(a2 + 8);
  v18 = *(std::__shared_weak_count **)(a2 + 16);
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (*(_BYTE *)(a2 + 49))
        goto LABEL_35;
      goto LABEL_37;
    }
  }
LABEL_34:
  if (*(_BYTE *)(a2 + 49))
  {
LABEL_35:
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v26, v13, 0);
    goto LABEL_38;
  }
LABEL_37:
  v26 = 0;
LABEL_38:
  v22 = sub_223B8A60C(a1, a2);
  v23 = v26;
  v26 = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = v27;
  v27 = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  return v22;
}

void sub_223B8A5A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (!a12)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

BOOL sub_223B8A60C(uint64_t a1, uint64_t a2)
{
  int v2;
  int v5;
  _BOOL8 result;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  __int16 *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  int v25;
  __int16 *v26;
  __int16 *v27;
  int v28;
  uint64_t v48;
  __int16 *v49;
  __int16 *v50;
  __int16 *v51;
  __int16 *v52;
  uint64_t v61;

  v2 = *(_DWORD *)(a1 + 32);
  if (v2 != *(_DWORD *)(a2 + 32))
    return 0;
  v5 = *(_DWORD *)(a1 + 36);
  if (v5 != *(_DWORD *)(a2 + 36))
    return 0;
  if (v2)
    _ZF = v5 == 0;
  else
    _ZF = 1;
  if (_ZF)
    return 1;
  v8 = v5 - 1;
  v9 = *(unsigned int *)(a1 + 44);
  v61 = *(unsigned int *)(a1 + 40);
  v10 = *(unsigned int *)(a2 + 40);
  v11 = *(unsigned int *)(a2 + 44);
  v12 = *(__int16 **)(a1 + 24);
  if (*(_BYTE *)(a1 + 48) && v12)
  {
    v13 = *(_QWORD *)(a1 + 8);
    v14 = *(std::__shared_weak_count **)(a1 + 16);
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v13 + 88))(v13, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/SharedImage.h:1234");
    v12 = *(__int16 **)(a1 + 24);
  }
  v18 = *(__int16 **)(a2 + 24);
  if (*(_BYTE *)(a2 + 48) && v18)
  {
    v19 = *(_QWORD *)(a2 + 8);
    v20 = *(std::__shared_weak_count **)(a2 + 16);
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      do
        v23 = __ldaxr(v21);
      while (__stlxr(v23 - 1, v21));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v19 + 88))(v19, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/SharedImage.h:1234");
    v18 = *(__int16 **)(a2 + 24);
  }
  v24 = v2 - 1;
  if (v5 != 1)
  {
    if (v2 != 1)
    {
      v25 = 0;
LABEL_30:
      v26 = v18;
      v27 = v12;
      v28 = v2 - 1;
      while (1)
      {
        _H0 = *v27;
        _H1 = *v26;
        __asm
        {
          FCVT            S1, H1
          FCVT            S0, H0
        }
        if (_S0 != _S1)
          return 0;
        v27 += v61;
        v26 += v10;
        if (!--v28)
        {
          _H0 = *v27;
          _H1 = *v26;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            return 0;
          v12 += v9;
          v18 += v11;
          if (++v25 != v8)
            goto LABEL_30;
          goto LABEL_35;
        }
      }
    }
    _H0 = *v12;
    _H1 = *v18;
    __asm
    {
      FCVT            S1, H1
      FCVT            S0, H0
    }
    if (_S0 == _S1)
    {
      v48 = 2 * (v5 - 2) + 2;
      v49 = (__int16 *)((char *)v12 + v48 * v9);
      v50 = (__int16 *)((char *)v18 + v48 * v11);
      v51 = &v18[v11];
      v52 = &v12[v9];
      result = 0;
      while (--v8)
      {
        _H0 = *v51;
        v51 += v11;
        _H1 = *v52;
        v52 += v9;
        __asm
        {
          FCVT            S0, H0
          FCVT            S1, H1
        }
        if (_S1 != _S0)
          return result;
      }
      v18 = v50;
      v12 = v49;
      goto LABEL_46;
    }
    return 0;
  }
LABEL_35:
  if (v2 != 1)
  {
    do
    {
      _H0 = *v12;
      _H1 = *v18;
      __asm
      {
        FCVT            S1, H1
        FCVT            S0, H0
      }
      if (_S0 != _S1)
        return 0;
      v12 += v61;
      v18 += v10;
    }
    while (--v24);
  }
LABEL_46:
  _H0 = *v12;
  _H1 = *v18;
  __asm
  {
    FCVT            S1, H1
    FCVT            S0, H0
  }
  return _S0 == _S1;
}

BOOL sub_223B8A8DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t v24;
  char v26;
  uint64_t v27;
  uint64_t v28;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
  {
    if (!v4)
    {
LABEL_21:
      v28 = 0;
      v13 = *(_QWORD *)(a2 + 8);
      v14 = *(std::__shared_weak_count **)(a2 + 16);
      if (v14)
        goto LABEL_22;
LABEL_18:
      if (!v13)
        goto LABEL_37;
      goto LABEL_34;
    }
    goto LABEL_16;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    if (!v4)
      goto LABEL_21;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (!v4)
      goto LABEL_21;
  }
  v4 = *(_QWORD *)(a1 + 8);
  v9 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v9)
    goto LABEL_16;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_16:
    if (!*(_BYTE *)(a1 + 73))
      goto LABEL_21;
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_21;
LABEL_17:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v28, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_18;
LABEL_22:
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
    if (!v13)
      goto LABEL_37;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (!v13)
      goto LABEL_37;
  }
  v13 = *(_QWORD *)(a2 + 8);
  v18 = *(std::__shared_weak_count **)(a2 + 16);
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (*(_BYTE *)(a2 + 73))
        goto LABEL_35;
      goto LABEL_37;
    }
  }
LABEL_34:
  if (*(_BYTE *)(a2 + 73))
  {
LABEL_35:
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v27, v13, 0);
    goto LABEL_38;
  }
LABEL_37:
  v27 = 0;
LABEL_38:
  v22 = sub_223B8AB64(a1, a2, (uint64_t)&v26);
  v23 = v27;
  v27 = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = v28;
  v28 = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  return v22;
}

void sub_223B8AB00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (!a12)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

BOOL sub_223B8AB64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  __int16 *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  __int16 *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  int v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  char v31;

  v3 = *(_DWORD *)(a1 + 32);
  if (v3 != *(_DWORD *)(a2 + 32))
    return 0;
  v6 = *(_DWORD *)(a1 + 36);
  if (v6 != *(_DWORD *)(a2 + 36))
    return 0;
  v7 = *(_DWORD *)(a1 + 40);
  if (v7 != *(_DWORD *)(a2 + 40))
    return 0;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = v3 - 1;
    v9 = *(unsigned int *)(a1 + 48);
    v10 = *(unsigned int *)(a2 + 48);
    v26 = *(unsigned int *)(a1 + 44) | ((unint64_t)*(unsigned int *)(a2 + 44) << 32);
    v24 = 0;
    v27 = v6 - 1;
    v28 = v9 | (v10 << 32);
    v29 = v7 - 1;
    v30 = *(unsigned int *)(a1 + 52) | ((unint64_t)*(unsigned int *)(a2 + 52) << 32);
    v11 = *(__int16 **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v11)
    {
      v12 = *(_QWORD *)(a1 + 8);
      v13 = *(std::__shared_weak_count **)(a1 + 16);
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v12 + 88))(v12, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/SharedImage.h:1234");
      v11 = *(__int16 **)(a1 + 24);
    }
    v17 = *(__int16 **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v17)
    {
      v18 = *(_QWORD *)(a2 + 8);
      v19 = *(std::__shared_weak_count **)(a2 + 16);
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
        do
          v22 = __ldaxr(v20);
        while (__stlxr(v22 - 1, v20));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v18 + 88))(v18, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/SharedImage.h:1234");
      v17 = *(__int16 **)(a2 + 24);
    }
    v31 = 0;
    return sub_223B8AD90(&v24, (uint64_t)&v31, a3, v11, v17);
  }
  else
  {
    return !*(_DWORD *)(a2 + 56) || *(_DWORD *)(a2 + 60) == 0;
  }
}

BOOL sub_223B8AD90(_DWORD *a1, uint64_t a2, uint64_t a3, __int16 *a4, __int16 *a5)
{
  int v5;
  int v6;
  int v7;
  unsigned int *v8;
  unsigned int *v9;
  int v10;
  int v11;
  __int16 *v12;
  __int16 *v13;
  int v14;
  __int16 *v15;
  __int16 *v16;
  uint64_t v25;
  uint64_t v26;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v42;
  int v43;
  __int16 *v44;
  __int16 *v45;
  int v54;
  int v55;
  __int16 *v56;
  __int16 *v57;
  uint64_t v70;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int16 *v80;
  uint64_t v81;
  __int16 *v82;
  int v83;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int16 *v99;
  __int16 *v100;
  uint64_t v101;
  __int16 *v102;
  uint64_t v103;
  __int16 *v104;
  _BOOL8 result;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __int16 *v117;
  __int16 *v118;
  uint64_t v119;
  __int16 *v120;
  uint64_t v121;
  __int16 *v122;

  v5 = a1[8];
  v6 = a1[5];
  if (v5)
  {
    v7 = a1[2];
    if (v6)
    {
      v8 = a1 + 6;
      v9 = a1 + 7;
      if (v7)
      {
        v10 = 0;
LABEL_5:
        v11 = 0;
        v12 = a5;
        v13 = a4;
LABEL_6:
        v14 = a1[2];
        v15 = v13;
        v16 = v12;
        while (1)
        {
          _H0 = *v15;
          _H1 = *v16;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            break;
          v26 = a1[3];
          v25 = a1[4];
          v15 += v26;
          v16 += v25;
          if (!--v14)
          {
            _H0 = *v15;
            _H1 = *v16;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              return 0;
            v13 += *v8;
            v12 += *v9;
            if (++v11 == v6)
            {
              v31 = 2 * v26;
              v32 = 2 * v25;
              v33 = a1[2];
              while (1)
              {
                _H0 = *v13;
                _H1 = *v12;
                __asm
                {
                  FCVT            S1, H1
                  FCVT            S0, H0
                }
                if (_S0 != _S1)
                  return 0;
                v13 = (__int16 *)((char *)v13 + v31);
                v12 = (__int16 *)((char *)v12 + v32);
                if (!--v33)
                {
                  _H0 = *v13;
                  _H1 = *v12;
                  __asm
                  {
                    FCVT            S1, H1
                    FCVT            S0, H0
                  }
                  if (_S0 != _S1)
                    return 0;
                  a4 += a1[9];
                  a5 += a1[10];
                  if (++v10 != v5)
                    goto LABEL_5;
                  goto LABEL_18;
                }
              }
            }
            goto LABEL_6;
          }
        }
      }
      else
      {
        v70 = 2 * (v6 - 1) + 2;
        while (1)
        {
          _H0 = *a4;
          _H1 = *a5;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            break;
          v75 = *v8;
          v76 = *v9;
          v77 = v70 * v75;
          v78 = v70 * v76;
          v79 = v76;
          v80 = &a5[v79];
          v81 = v75;
          v82 = &a4[v81];
          v83 = a1[5];
          while (--v83)
          {
            _H0 = *v80;
            v80 = (__int16 *)((char *)v80 + v79 * 2);
            _H1 = *v82;
            v82 = (__int16 *)((char *)v82 + v81 * 2);
            __asm
            {
              FCVT            S0, H0
              FCVT            S1, H1
            }
            if (_S1 != _S0)
              return 0;
          }
          _H0 = *(__int16 *)((char *)a4 + v77);
          _H1 = *(__int16 *)((char *)a5 + v78);
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            break;
          a4 += a1[9];
          a5 += a1[10];
          if (++v7 == v5)
            goto LABEL_46;
        }
      }
      return 0;
    }
    if (v7)
    {
      v54 = 0;
LABEL_29:
      v55 = a1[2];
      v56 = a4;
      v57 = a5;
      while (1)
      {
        _H0 = *v56;
        _H1 = *v57;
        __asm
        {
          FCVT            S1, H1
          FCVT            S0, H0
        }
        if (_S0 != _S1)
          return 0;
        v56 += a1[3];
        v57 += a1[4];
        if (!--v55)
        {
          _H0 = *v56;
          _H1 = *v57;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            return 0;
          a4 += a1[9];
          a5 += a1[10];
          if (++v54 != v5)
            goto LABEL_29;
          goto LABEL_34;
        }
      }
    }
    _H0 = *a4;
    _H1 = *a5;
    __asm
    {
      FCVT            S1, H1
      FCVT            S0, H0
    }
    if (_S0 == _S1)
    {
      v115 = a1[9];
      v114 = a1[10];
      v116 = 2 * (v5 - 1) + 2;
      v117 = (__int16 *)((char *)a4 + v116 * v115);
      v118 = (__int16 *)((char *)a5 + v116 * v114);
      v119 = v114;
      v120 = &a5[v119];
      v121 = v115;
      v122 = &a4[v121];
      result = 0;
      while (--v5)
      {
        _H0 = *v120;
        v120 = (__int16 *)((char *)v120 + v119 * 2);
        _H1 = *v122;
        v122 = (__int16 *)((char *)v122 + v121 * 2);
        __asm
        {
          FCVT            S0, H0
          FCVT            S1, H1
        }
        if (_S1 != _S0)
          return result;
      }
      a5 = v118;
      a4 = v117;
      goto LABEL_59;
    }
    return 0;
  }
  v7 = a1[2];
LABEL_18:
  if (v6)
  {
    v8 = a1 + 6;
    v9 = a1 + 7;
    if (v7)
    {
      v42 = 0;
LABEL_21:
      v43 = v7;
      v44 = a4;
      v45 = a5;
      while (1)
      {
        _H0 = *v44;
        _H1 = *v45;
        __asm
        {
          FCVT            S1, H1
          FCVT            S0, H0
        }
        if (_S0 != _S1)
          return 0;
        v44 += a1[3];
        v45 += a1[4];
        if (!--v43)
        {
          _H0 = *v44;
          _H1 = *v45;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            return 0;
          a4 += *v8;
          a5 += *v9;
          if (++v42 != v6)
            goto LABEL_21;
          goto LABEL_34;
        }
      }
    }
LABEL_46:
    _H0 = *a4;
    _H1 = *a5;
    __asm
    {
      FCVT            S1, H1
      FCVT            S0, H0
    }
    if (_S0 != _S1)
      return 0;
    v96 = *v8;
    v97 = *v9;
    v98 = 2 * (v6 - 1) + 2;
    v99 = (__int16 *)((char *)a4 + v98 * v96);
    v100 = (__int16 *)((char *)a5 + v98 * v97);
    v101 = v97;
    v102 = &a5[v101];
    v103 = 2 * v96;
    v104 = &a4[v96];
    result = 0;
    while (--v6)
    {
      _H0 = *v102;
      v102 = (__int16 *)((char *)v102 + v101 * 2);
      _H1 = *v104;
      v104 = (__int16 *)((char *)v104 + v103);
      __asm
      {
        FCVT            S0, H0
        FCVT            S1, H1
      }
      if (_S1 != _S0)
        return result;
    }
    a5 = v100;
    a4 = v99;
  }
  else
  {
LABEL_34:
    if (v7)
    {
      do
      {
        _H0 = *a4;
        _H1 = *a5;
        __asm
        {
          FCVT            S1, H1
          FCVT            S0, H0
        }
        if (_S0 != _S1)
          return 0;
        a4 += a1[3];
        a5 += a1[4];
      }
      while (--v7);
    }
  }
LABEL_59:
  _H0 = *a4;
  _H1 = *a5;
  __asm
  {
    FCVT            S1, H1
    FCVT            S0, H0
  }
  return _S0 == _S1;
}

BOOL sub_223B8B180(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t v24;
  char v26;
  uint64_t v27;
  uint64_t v28;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
  {
    if (!v4)
    {
LABEL_21:
      v28 = 0;
      v13 = *(_QWORD *)(a2 + 8);
      v14 = *(std::__shared_weak_count **)(a2 + 16);
      if (v14)
        goto LABEL_22;
LABEL_18:
      if (!v13)
        goto LABEL_37;
      goto LABEL_34;
    }
    goto LABEL_16;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    if (!v4)
      goto LABEL_21;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (!v4)
      goto LABEL_21;
  }
  v4 = *(_QWORD *)(a1 + 8);
  v9 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v9)
    goto LABEL_16;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_16:
    if (!*(_BYTE *)(a1 + 73))
      goto LABEL_21;
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_21;
LABEL_17:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v28, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_18;
LABEL_22:
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
    if (!v13)
      goto LABEL_37;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (!v13)
      goto LABEL_37;
  }
  v13 = *(_QWORD *)(a2 + 8);
  v18 = *(std::__shared_weak_count **)(a2 + 16);
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (*(_BYTE *)(a2 + 73))
        goto LABEL_35;
      goto LABEL_37;
    }
  }
LABEL_34:
  if (*(_BYTE *)(a2 + 73))
  {
LABEL_35:
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v27, v13, 0);
    goto LABEL_38;
  }
LABEL_37:
  v27 = 0;
LABEL_38:
  v22 = sub_223B8B408(a1, a2, (uint64_t)&v26);
  v23 = v27;
  v27 = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = v28;
  v28 = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  return v22;
}

void sub_223B8B3A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (!a12)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

BOOL sub_223B8B408(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  float *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  int v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  char v31;

  v3 = *(_DWORD *)(a1 + 32);
  if (v3 != *(_DWORD *)(a2 + 32))
    return 0;
  v6 = *(_DWORD *)(a1 + 36);
  if (v6 != *(_DWORD *)(a2 + 36))
    return 0;
  v7 = *(_DWORD *)(a1 + 40);
  if (v7 != *(_DWORD *)(a2 + 40))
    return 0;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = v3 - 1;
    v9 = *(unsigned int *)(a1 + 48);
    v10 = *(unsigned int *)(a2 + 48);
    v26 = *(unsigned int *)(a1 + 44) | ((unint64_t)*(unsigned int *)(a2 + 44) << 32);
    v24 = 0;
    v27 = v6 - 1;
    v28 = v9 | (v10 << 32);
    v29 = v7 - 1;
    v30 = *(unsigned int *)(a1 + 52) | ((unint64_t)*(unsigned int *)(a2 + 52) << 32);
    v11 = *(float **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v11)
    {
      v12 = *(_QWORD *)(a1 + 8);
      v13 = *(std::__shared_weak_count **)(a1 + 16);
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v12 + 88))(v12, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/SharedImage.h:1234");
      v11 = *(float **)(a1 + 24);
    }
    v17 = *(float **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v17)
    {
      v18 = *(_QWORD *)(a2 + 8);
      v19 = *(std::__shared_weak_count **)(a2 + 16);
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
        do
          v22 = __ldaxr(v20);
        while (__stlxr(v22 - 1, v20));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v18 + 88))(v18, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/SharedImage.h:1234");
      v17 = *(float **)(a2 + 24);
    }
    v31 = 0;
    return sub_223B8B634(&v24, (uint64_t)&v31, a3, v11, v17);
  }
  else
  {
    return !*(_DWORD *)(a2 + 56) || *(_DWORD *)(a2 + 60) == 0;
  }
}

BOOL sub_223B8B634(_DWORD *a1, uint64_t a2, uint64_t a3, float *a4, float *a5)
{
  int v5;
  int v6;
  int v7;
  unsigned int *v8;
  unsigned int *v9;
  int v10;
  int v11;
  float *v12;
  float *v13;
  int v14;
  float *v15;
  float *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  float *v24;
  float *v25;
  int v26;
  float *v27;
  float *v28;
  int v29;
  int v30;
  float *v31;
  float *v32;

  v5 = a1[8];
  v6 = a1[5];
  if (v5)
  {
    v7 = a1[2];
    if (v6)
    {
      v8 = a1 + 6;
      v9 = a1 + 7;
      if (v7)
      {
        v10 = 0;
LABEL_5:
        v11 = 0;
        v12 = a4;
        v13 = a5;
LABEL_6:
        v14 = a1[2];
        v15 = v12;
        v16 = v13;
        while (*v15 == *v16)
        {
          v18 = a1[3];
          v17 = a1[4];
          v15 += v18;
          v16 += v17;
          if (!--v14)
          {
            if (*v15 != *v16)
              return 0;
            v12 += *v8;
            v13 += *v9;
            if (++v11 == v6)
            {
              v19 = 4 * v18;
              v20 = 4 * v17;
              v21 = a1[2];
              while (*v12 == *v13)
              {
                v12 = (float *)((char *)v12 + v19);
                v13 = (float *)((char *)v13 + v20);
                if (!--v21)
                {
                  if (*v12 != *v13)
                    return 0;
                  a4 += a1[9];
                  a5 += a1[10];
                  if (++v10 != v5)
                    goto LABEL_5;
                  goto LABEL_18;
                }
              }
              return 0;
            }
            goto LABEL_6;
          }
        }
      }
      else
      {
LABEL_27:
        v26 = a1[5];
        v27 = a4;
        v28 = a5;
        while (*v27 == *v28)
        {
          v27 += *v8;
          v28 += *v9;
          if (!--v26)
          {
            if (*v27 != *v28)
              return 0;
            a4 += a1[9];
            a5 += a1[10];
            if (++v7 == v5)
            {
LABEL_34:
              while (*a4 == *a5)
              {
                a4 += *v8;
                a5 += *v9;
                if (!--v6)
                  return *a4 == *a5;
              }
              return 0;
            }
            goto LABEL_27;
          }
        }
      }
    }
    else if (v7)
    {
      v29 = 0;
LABEL_38:
      v30 = a1[2];
      v31 = a4;
      v32 = a5;
      while (*v31 == *v32)
      {
        v31 += a1[3];
        v32 += a1[4];
        if (!--v30)
        {
          if (*v31 != *v32)
            return 0;
          a4 += a1[9];
          a5 += a1[10];
          if (++v29 != v5)
            goto LABEL_38;
          goto LABEL_43;
        }
      }
    }
    else
    {
      while (*a4 == *a5)
      {
        a4 += a1[9];
        a5 += a1[10];
        if (!--v5)
          return *a4 == *a5;
      }
    }
  }
  else
  {
    v7 = a1[2];
LABEL_18:
    if (v6)
    {
      v8 = a1 + 6;
      v9 = a1 + 7;
      if (!v7)
        goto LABEL_34;
      v22 = 0;
LABEL_21:
      v23 = v7;
      v24 = a4;
      v25 = a5;
      while (*v24 == *v25)
      {
        v24 += a1[3];
        v25 += a1[4];
        if (!--v23)
        {
          if (*v24 != *v25)
            return 0;
          a4 += *v8;
          a5 += *v9;
          if (++v22 != v6)
            goto LABEL_21;
          goto LABEL_43;
        }
      }
    }
    else
    {
LABEL_43:
      if (!v7)
        return *a4 == *a5;
      while (*a4 == *a5)
      {
        a4 += a1[3];
        a5 += a1[4];
        if (!--v7)
          return *a4 == *a5;
      }
    }
  }
  return 0;
}

uint64_t sub_223B8B8E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
  {
    if (!v4)
    {
LABEL_21:
      v27 = 0;
      v13 = *(_QWORD *)(a2 + 8);
      v14 = *(std::__shared_weak_count **)(a2 + 16);
      if (v14)
        goto LABEL_22;
LABEL_18:
      if (!v13)
        goto LABEL_37;
      goto LABEL_34;
    }
    goto LABEL_16;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    if (!v4)
      goto LABEL_21;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (!v4)
      goto LABEL_21;
  }
  v4 = *(_QWORD *)(a1 + 8);
  v9 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v9)
    goto LABEL_16;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_16:
    if (!*(_BYTE *)(a1 + 49))
      goto LABEL_21;
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 49))
    goto LABEL_21;
LABEL_17:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v27, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_18;
LABEL_22:
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
    if (!v13)
      goto LABEL_37;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (!v13)
      goto LABEL_37;
  }
  v13 = *(_QWORD *)(a2 + 8);
  v18 = *(std::__shared_weak_count **)(a2 + 16);
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (*(_BYTE *)(a2 + 49))
        goto LABEL_35;
      goto LABEL_37;
    }
  }
LABEL_34:
  if (*(_BYTE *)(a2 + 49))
  {
LABEL_35:
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v26, v13, 0);
    goto LABEL_38;
  }
LABEL_37:
  v26 = 0;
LABEL_38:
  v22 = sub_223B8BB6C(a1, a2);
  v23 = v26;
  v26 = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = v27;
  v27 = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  return v22;
}

void sub_223B8BB08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (!a12)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223B8BB6C(uint64_t a1, uint64_t a2)
{
  int v2;
  int v5;
  BOOL v6;
  uint64_t result;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  int v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  int v37;
  int v38;
  uint64_t v39;

  v2 = *(_DWORD *)(a1 + 32);
  if (v2 != *(_DWORD *)(a2 + 32))
    return 0;
  v5 = *(_DWORD *)(a1 + 36);
  if (v5 != *(_DWORD *)(a2 + 36))
    return 0;
  if (v2)
    v6 = v5 == 0;
  else
    v6 = 1;
  if (v6)
    return 1;
  v8 = v5 - 1;
  v9 = *(unsigned int *)(a1 + 40);
  v39 = *(unsigned int *)(a1 + 44);
  v11 = *(unsigned int *)(a2 + 40);
  v10 = *(unsigned int *)(a2 + 44);
  v12 = *(unsigned __int8 **)(a1 + 24);
  if (*(_BYTE *)(a1 + 48) && v12)
  {
    v13 = *(_QWORD *)(a1 + 8);
    v14 = *(std::__shared_weak_count **)(a1 + 16);
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v13 + 88))(v13, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/SharedImage.h:1234");
    v12 = *(unsigned __int8 **)(a1 + 24);
  }
  v18 = *(unsigned __int8 **)(a2 + 24);
  if (*(_BYTE *)(a2 + 48) && v18)
  {
    v19 = *(_QWORD *)(a2 + 8);
    v20 = *(std::__shared_weak_count **)(a2 + 16);
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      do
        v23 = __ldaxr(v21);
      while (__stlxr(v23 - 1, v21));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v19 + 88))(v19, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/SharedImage.h:1234");
    v18 = *(unsigned __int8 **)(a2 + 24);
  }
  v24 = v2 - 1;
  if (v5 != 1)
  {
    if (v2 != 1)
    {
      v25 = 0;
      v26 = (v5 - 2) + 1;
      v27 = &v12[v26 * v39];
      v28 = &v18[v26 * v10];
LABEL_30:
      v29 = v2 - 1;
      v30 = v12;
      v31 = v18;
      while (*v30 == *v31)
      {
        v30 += v9;
        v31 += v11;
        if (!--v29)
        {
          if (*v30 != *v31)
            return 0;
          v12 += v39;
          v18 += v10;
          if (++v25 == v8)
          {
            v12 = v27;
            v18 = v28;
            goto LABEL_36;
          }
          goto LABEL_30;
        }
      }
      return 0;
    }
    if (*v12 == *v18)
    {
      v33 = &v12[v39 * (unint64_t)v8];
      v35 = &v18[v10];
      v36 = &v12[v39];
      v34 = &v18[v10 * (unint64_t)v8];
      while (--v8)
      {
        result = 0;
        v37 = *v35;
        v35 += v10;
        v38 = *v36;
        v36 += v39;
        if (v38 != v37)
          return result;
      }
      return *v33 == *v34;
    }
    return 0;
  }
LABEL_36:
  if (v2 != 1)
  {
    v32 = (v2 - 2) + 1;
    v33 = &v12[v32 * v9];
    v34 = &v18[v32 * v11];
    while (*v12 == *v18)
    {
      v12 += v9;
      v18 += v11;
      if (!--v24)
        return *v33 == *v34;
    }
    return 0;
  }
  v34 = v18;
  v33 = v12;
  return *v33 == *v34;
}

BOOL sub_223B8BE08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t v24;
  char v26;
  uint64_t v27;
  uint64_t v28;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
  {
    if (!v4)
    {
LABEL_21:
      v28 = 0;
      v13 = *(_QWORD *)(a2 + 8);
      v14 = *(std::__shared_weak_count **)(a2 + 16);
      if (v14)
        goto LABEL_22;
LABEL_18:
      if (!v13)
        goto LABEL_37;
      goto LABEL_34;
    }
    goto LABEL_16;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    if (!v4)
      goto LABEL_21;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (!v4)
      goto LABEL_21;
  }
  v4 = *(_QWORD *)(a1 + 8);
  v9 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v9)
    goto LABEL_16;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_16:
    if (!*(_BYTE *)(a1 + 73))
      goto LABEL_21;
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_21;
LABEL_17:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v28, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_18;
LABEL_22:
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
    if (!v13)
      goto LABEL_37;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (!v13)
      goto LABEL_37;
  }
  v13 = *(_QWORD *)(a2 + 8);
  v18 = *(std::__shared_weak_count **)(a2 + 16);
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (*(_BYTE *)(a2 + 73))
        goto LABEL_35;
      goto LABEL_37;
    }
  }
LABEL_34:
  if (*(_BYTE *)(a2 + 73))
  {
LABEL_35:
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v27, v13, 0);
    goto LABEL_38;
  }
LABEL_37:
  v27 = 0;
LABEL_38:
  v22 = sub_223B8C090(a1, a2, (uint64_t)&v26);
  v23 = v27;
  v27 = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = v28;
  v28 = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  return v22;
}

void sub_223B8C02C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (!a12)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

BOOL sub_223B8C090(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  int v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  char v31;

  v3 = *(_DWORD *)(a1 + 32);
  if (v3 != *(_DWORD *)(a2 + 32))
    return 0;
  v6 = *(_DWORD *)(a1 + 36);
  if (v6 != *(_DWORD *)(a2 + 36))
    return 0;
  v7 = *(_DWORD *)(a1 + 40);
  if (v7 != *(_DWORD *)(a2 + 40))
    return 0;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = v3 - 1;
    v9 = *(unsigned int *)(a1 + 48);
    v10 = *(unsigned int *)(a2 + 48);
    v26 = *(unsigned int *)(a1 + 44) | ((unint64_t)*(unsigned int *)(a2 + 44) << 32);
    v24 = 0;
    v27 = v6 - 1;
    v28 = v9 | (v10 << 32);
    v29 = v7 - 1;
    v30 = *(unsigned int *)(a1 + 52) | ((unint64_t)*(unsigned int *)(a2 + 52) << 32);
    v11 = *(unsigned __int8 **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v11)
    {
      v12 = *(_QWORD *)(a1 + 8);
      v13 = *(std::__shared_weak_count **)(a1 + 16);
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v12 + 88))(v12, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/SharedImage.h:1234");
      v11 = *(unsigned __int8 **)(a1 + 24);
    }
    v17 = *(unsigned __int8 **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v17)
    {
      v18 = *(_QWORD *)(a2 + 8);
      v19 = *(std::__shared_weak_count **)(a2 + 16);
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
        do
          v22 = __ldaxr(v20);
        while (__stlxr(v22 - 1, v20));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v18 + 88))(v18, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/SharedImage.h:1234");
      v17 = *(unsigned __int8 **)(a2 + 24);
    }
    v31 = 0;
    return sub_223B8C2BC(&v24, (uint64_t)&v31, a3, v11, v17);
  }
  else
  {
    return !*(_DWORD *)(a2 + 56) || *(_DWORD *)(a2 + 60) == 0;
  }
}

BOOL sub_223B8C2BC(_DWORD *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int *v8;
  unsigned int *v9;
  int v10;
  int v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  int v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  _BOOL8 result;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  int v48;
  int v49;

  v5 = a1[8];
  v6 = a1[5];
  if (v5)
  {
    v7 = a1[2];
    if (v6)
    {
      v8 = a1 + 6;
      v9 = a1 + 7;
      if (v7)
      {
        v10 = 0;
LABEL_5:
        v11 = 0;
        v12 = a5;
        v13 = a4;
LABEL_6:
        v14 = a1[2];
        v15 = v13;
        v16 = v12;
        while (*v15 == *v16)
        {
          v18 = a1[3];
          v17 = a1[4];
          v15 += v18;
          v16 += v17;
          if (!--v14)
          {
            if (*v15 != *v16)
              return 0;
            v13 += *v8;
            v12 += *v9;
            if (++v11 == v6)
            {
              v19 = a1[2];
              while (*v13 == *v12)
              {
                v13 += v18;
                v12 += v17;
                if (!--v19)
                {
                  if (*v13 != *v12)
                    return 0;
                  a4 += a1[9];
                  a5 += a1[10];
                  if (++v10 != v5)
                    goto LABEL_5;
                  goto LABEL_18;
                }
              }
              return 0;
            }
            goto LABEL_6;
          }
        }
      }
      else
      {
        while (*a4 == *a5)
        {
          v24 = *v8;
          v25 = *v9;
          v26 = &a5[v25];
          v27 = &a4[v24];
          v28 = a1[5];
          while (--v28)
          {
            v29 = *v26;
            v26 += v25;
            v30 = *v27;
            v27 += v24;
            if (v30 != v29)
              return 0;
          }
          if (a4[v24 * (unint64_t)v6] != a5[v25 * (unint64_t)v6])
            break;
          a4 += a1[9];
          a5 += a1[10];
          if (++v7 == v5)
            goto LABEL_46;
        }
      }
      return 0;
    }
    if (v7)
    {
      v31 = 0;
LABEL_37:
      v32 = a1[2];
      v33 = a4;
      v34 = a5;
      while (*v33 == *v34)
      {
        v33 += a1[3];
        v34 += a1[4];
        if (!--v32)
        {
          if (*v33 != *v34)
            return 0;
          a4 += a1[9];
          a5 += a1[10];
          if (++v31 != v5)
            goto LABEL_37;
          goto LABEL_42;
        }
      }
      return 0;
    }
    if (*a4 == *a5)
    {
      v44 = a1[9];
      v45 = a1[10];
      v38 = &a4[v44 * (unint64_t)v5];
      v39 = &a5[v45 * (unint64_t)v5];
      v46 = &a5[v45];
      v47 = &a4[v44];
      while (--v5)
      {
        result = 0;
        v48 = *v46;
        v46 += v45;
        v49 = *v47;
        v47 += v44;
        if (v49 != v48)
          return result;
      }
      return *v38 == *v39;
    }
    return 0;
  }
  v7 = a1[2];
LABEL_18:
  if (!v6)
  {
LABEL_42:
    if (!v7)
      return *a4 == *a5;
    while (*a4 == *a5)
    {
      a4 += a1[3];
      a5 += a1[4];
      if (!--v7)
        return *a4 == *a5;
    }
    return 0;
  }
  v8 = a1 + 6;
  v9 = a1 + 7;
  if (v7)
  {
    v20 = 0;
LABEL_21:
    v21 = v7;
    v22 = a4;
    v23 = a5;
    while (*v22 == *v23)
    {
      v22 += a1[3];
      v23 += a1[4];
      if (!--v21)
      {
        if (*v22 != *v23)
          return 0;
        a4 += *v8;
        a5 += *v9;
        if (++v20 != v6)
          goto LABEL_21;
        goto LABEL_42;
      }
    }
    return 0;
  }
LABEL_46:
  if (*a4 != *a5)
    return 0;
  v36 = *v8;
  v37 = *v9;
  v38 = &a4[v36 * (unint64_t)v6];
  v39 = &a5[v37 * (unint64_t)v6];
  v40 = &a5[v37];
  v41 = &a4[v36];
  while (--v6)
  {
    result = 0;
    v42 = *v40;
    v40 += v37;
    v43 = *v41;
    v41 += v36;
    if (v43 != v42)
      return result;
  }
  return *v38 == *v39;
}

uint64_t sub_223B8C5E0(uint64_t (***a1)(), uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  unsigned __int8 *v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t result;
  uint64_t v23;
  _QWORD *v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  _QWORD *v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  unsigned __int8 *v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  size_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  char v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  const char *v56;
  uint64_t v57;
  unsigned int v58[418];
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24EC79080, (const struct __class_type_info *)&unk_24EC605E8, 0);
  if (v4)
  {
    v5 = (uint64_t)v4;
    v6 = *(_DWORD *)(a2 + 192);
    switch(v6)
    {
      case 2:
        if (*(unsigned __int8 *)v4[5] <= 1u)
        {
          v13 = *((unsigned __int8 *)v4 + 88);
          v4[9] = "info";
          v4[10] = 4;
          if (!v13)
            *((_BYTE *)v4 + 88) = 1;
        }
        sub_22454024C((uint64_t)v4);
        v56 = "version";
        v57 = 7;
        v58[0] = 4;
        if (**(unsigned __int8 **)(v5 + 40) <= 1u)
        {
          v14 = *(unsigned __int8 *)(v5 + 88);
          *(_QWORD *)(v5 + 72) = "version";
          *(_QWORD *)(v5 + 80) = 7;
          if (!v14)
            *(_BYTE *)(v5 + 88) = 1;
        }
        sub_224542048(v5, v58);
        sub_223B8F208(v5, a2 + 16, v58[0]);
        goto LABEL_32;
      case 1:
        if (*(unsigned __int8 *)v4[5] <= 1u)
        {
          v15 = *((unsigned __int8 *)v4 + 88);
          v4[9] = "info";
          v4[10] = 4;
          if (!v15)
            *((_BYTE *)v4 + 88) = 1;
        }
        sub_22454024C((uint64_t)v4);
        v56 = "version";
        v57 = 7;
        v58[0] = 5;
        if (**(unsigned __int8 **)(v5 + 40) <= 1u)
        {
          v16 = *(unsigned __int8 *)(v5 + 88);
          *(_QWORD *)(v5 + 72) = "version";
          *(_QWORD *)(v5 + 80) = 7;
          if (!v16)
            *(_BYTE *)(v5 + 88) = 1;
        }
        sub_224542048(v5, v58);
        sub_223B8E898(v5, a2 + 16, v58[0]);
        goto LABEL_32;
      case 0:
        if (*(unsigned __int8 *)v4[5] <= 1u)
        {
          v7 = *((unsigned __int8 *)v4 + 88);
          v4[9] = "info";
          v4[10] = 4;
          if (!v7)
            *((_BYTE *)v4 + 88) = 1;
        }
        sub_22454024C((uint64_t)v4);
        v56 = "version";
        v57 = 7;
        v58[0] = 6;
        if (**(unsigned __int8 **)(v5 + 40) <= 1u)
        {
          v8 = *(unsigned __int8 *)(v5 + 88);
          *(_QWORD *)(v5 + 72) = "version";
          *(_QWORD *)(v5 + 80) = 7;
          if (!v8)
            *(_BYTE *)(v5 + 88) = 1;
        }
        sub_224542048(v5, v58);
        sub_223B8D388(v5, a2 + 16, v58[0]);
LABEL_32:
        v17 = *(_QWORD *)(v5 + 56);
        v18 = *(unsigned __int8 **)(v17 - 8);
        *(_QWORD *)(v5 + 40) = v18;
        *(_QWORD *)(v5 + 56) = v17 - 8;
        if (*(_BYTE *)(v5 + 88))
          *(_BYTE *)(v5 + 88) = 0;
        if (*v18 <= 1u)
        {
          *(_QWORD *)(v5 + 72) = "value";
          *(_QWORD *)(v5 + 80) = 5;
          *(_BYTE *)(v5 + 88) = 1;
        }
        sub_22454024C(v5);
        v56 = "version";
        v57 = 7;
        v58[0] = 8;
        if (**(unsigned __int8 **)(v5 + 40) <= 1u)
        {
          v19 = *(unsigned __int8 *)(v5 + 88);
          *(_QWORD *)(v5 + 72) = "version";
          *(_QWORD *)(v5 + 80) = 7;
          if (!v19)
            *(_BYTE *)(v5 + 88) = 1;
        }
        sub_224542048(v5, v58);
        v20 = a2 + 200;
        v21 = v58[0];
        sub_223B92150((uint64_t)&v56, v20);
        sub_223B8F8E4(v5, (uint64_t)&v56, v21);
LABEL_40:
        result = sub_2232BCBE0((uint64_t)&v56);
        v23 = *(_QWORD *)(v5 + 56);
        *(_QWORD *)(v5 + 40) = *(_QWORD *)(v23 - 8);
        *(_QWORD *)(v5 + 56) = v23 - 8;
        if (*(_BYTE *)(v5 + 88))
          *(_BYTE *)(v5 + 88) = 0;
        return result;
    }
LABEL_118:
    sub_22316DD70();
  }
  v9 = (uint64_t *)__dynamic_cast(a1, (const struct __class_type_info *)&unk_24EC79080, (const struct __class_type_info *)&unk_24EC1FC00, 0);
  if (v9)
  {
    v10 = v9;
    v11 = *(_DWORD *)(a2 + 192);
    if (v11 == 2)
    {
      v28 = v9[3];
      if (*(_BYTE *)(v28 + 40))
      {
        v56 = (const char *)(v28 + 16);
        sub_22455A7EC((uint64_t **)&v56, 4u);
      }
      else
      {
        LOBYTE(v56) = 4;
        std::ostream::write();
      }
      sub_224555278(v10[3]);
      sub_223B979A0((uint64_t)v10, a2 + 16, 4u);
    }
    else if (v11 == 1)
    {
      v29 = v9[3];
      if (*(_BYTE *)(v29 + 40))
      {
        v56 = (const char *)(v29 + 16);
        sub_22455A7EC((uint64_t **)&v56, 5u);
      }
      else
      {
        LOBYTE(v56) = 5;
        std::ostream::write();
      }
      sub_224555278(v10[3]);
      sub_223B97884((uint64_t)v10, a2 + 16, 5u);
    }
    else
    {
      if (v11)
        goto LABEL_118;
      v12 = v9[3];
      if (*(_BYTE *)(v12 + 40))
      {
        v56 = (const char *)(v12 + 16);
        sub_22455A7EC((uint64_t **)&v56, 6u);
      }
      else
      {
        LOBYTE(v56) = 6;
        std::ostream::write();
      }
      sub_224555278(v10[3]);
      sub_223B970F8((uint64_t)v10, a2 + 16, 6u);
    }
    v43 = v10[3];
    v44 = *(_QWORD *)(*(_QWORD *)(v43 + 88) - 8);
    sub_224554D6C((uint64_t *)(v43 + 48), *(_QWORD *)(v43 + 16) - v44 - 9);
    v45 = *(_QWORD *)(v43 + 48);
    if (v45)
      memmove((void *)(*(_QWORD *)(v43 + 24) + v44), *(const void **)(v43 + 56), v45);
    *(_QWORD *)(v43 + 48) = 0;
    v46 = *(_QWORD *)(v43 + 80);
    v47 = *(_QWORD *)(v43 + 88) - 8;
    *(_QWORD *)(v43 + 88) = v47;
    if (v46 == v47)
    {
      std::ostream::write();
      if (*(_BYTE *)(v43 + 40))
      {
        free(*(void **)(v43 + 24));
        *(_BYTE *)(v43 + 40) = 0;
      }
    }
    v48 = v10[3];
    if (*(_BYTE *)(v48 + 40))
    {
      v56 = (const char *)(v48 + 16);
      sub_22455A7EC((uint64_t **)&v56, 8u);
    }
    else
    {
      LOBYTE(v56) = 8;
      std::ostream::write();
    }
    sub_223B92150((uint64_t)&v56, a2 + 200);
    sub_2232C8B58(v10, (uint64_t)&v56, 8u);
    return sub_2232BCBE0((uint64_t)&v56);
  }
  v24 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24EC79080, (const struct __class_type_info *)&unk_24EC60670, 0);
  if (v24)
  {
    v5 = (uint64_t)v24;
    v25 = *(_DWORD *)(a2 + 192);
    if (v25 == 2)
    {
      if (*(unsigned __int8 *)v24[5] <= 1u)
      {
        v34 = *((unsigned __int8 *)v24 + 88);
        v24[9] = "info";
        v24[10] = 4;
        if (!v34)
          *((_BYTE *)v24 + 88) = 1;
      }
      sub_22453FAE0((uint64_t)v24);
      v56 = "version";
      v57 = 7;
      v58[0] = 4;
      if (**(unsigned __int8 **)(v5 + 40) <= 1u)
      {
        v35 = *(unsigned __int8 *)(v5 + 88);
        *(_QWORD *)(v5 + 72) = "version";
        *(_QWORD *)(v5 + 80) = 7;
        if (!v35)
          *(_BYTE *)(v5 + 88) = 1;
      }
      sub_224540500(v5, v58);
      sub_223B9970C(v5, a2 + 16, v58[0]);
    }
    else if (v25 == 1)
    {
      if (*(unsigned __int8 *)v24[5] <= 1u)
      {
        v36 = *((unsigned __int8 *)v24 + 88);
        v24[9] = "info";
        v24[10] = 4;
        if (!v36)
          *((_BYTE *)v24 + 88) = 1;
      }
      sub_22453FAE0((uint64_t)v24);
      v56 = "version";
      v57 = 7;
      v58[0] = 5;
      if (**(unsigned __int8 **)(v5 + 40) <= 1u)
      {
        v37 = *(unsigned __int8 *)(v5 + 88);
        *(_QWORD *)(v5 + 72) = "version";
        *(_QWORD *)(v5 + 80) = 7;
        if (!v37)
          *(_BYTE *)(v5 + 88) = 1;
      }
      sub_224540500(v5, v58);
      sub_223B98FC8(v5, a2 + 16, v58[0]);
    }
    else
    {
      if (v25)
        goto LABEL_118;
      if (*(unsigned __int8 *)v24[5] <= 1u)
      {
        v26 = *((unsigned __int8 *)v24 + 88);
        v24[9] = "info";
        v24[10] = 4;
        if (!v26)
          *((_BYTE *)v24 + 88) = 1;
      }
      sub_22453FAE0((uint64_t)v24);
      v56 = "version";
      v57 = 7;
      v58[0] = 6;
      if (**(unsigned __int8 **)(v5 + 40) <= 1u)
      {
        v27 = *(unsigned __int8 *)(v5 + 88);
        *(_QWORD *)(v5 + 72) = "version";
        *(_QWORD *)(v5 + 80) = 7;
        if (!v27)
          *(_BYTE *)(v5 + 88) = 1;
      }
      sub_224540500(v5, v58);
      sub_223B98294(v5, a2 + 16, v58[0]);
    }
    v38 = *(_QWORD *)(v5 + 56);
    v39 = *(unsigned __int8 **)(v38 - 8);
    *(_QWORD *)(v5 + 40) = v39;
    *(_QWORD *)(v5 + 56) = v38 - 8;
    if (*(_BYTE *)(v5 + 88))
      *(_BYTE *)(v5 + 88) = 0;
    if (*v39 <= 1u)
    {
      *(_QWORD *)(v5 + 72) = "value";
      *(_QWORD *)(v5 + 80) = 5;
      *(_BYTE *)(v5 + 88) = 1;
    }
    sub_22453FAE0(v5);
    v56 = "version";
    v57 = 7;
    v58[0] = 8;
    if (**(unsigned __int8 **)(v5 + 40) <= 1u)
    {
      v40 = *(unsigned __int8 *)(v5 + 88);
      *(_QWORD *)(v5 + 72) = "version";
      *(_QWORD *)(v5 + 80) = 7;
      if (!v40)
        *(_BYTE *)(v5 + 88) = 1;
    }
    sub_224540500(v5, v58);
    v41 = a2 + 200;
    v42 = v58[0];
    sub_223B92150((uint64_t)&v56, v41);
    sub_223B99BBC(v5, (uint64_t)&v56, v42);
    goto LABEL_40;
  }
  v30 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24EC79080, (const struct __class_type_info *)&unk_24EC606B8, 0);
  if (v30)
  {
    v31 = (uint64_t)v30;
    v32 = *(_DWORD *)(a2 + 192);
    if (v32 == 2)
    {
      if (v30[5])
      {
        v49 = (_QWORD *)v30[3];
        LOBYTE(v56) = *(_BYTE *)(v31 + 32);
        sub_2231813E8(v49, (uint64_t)&v56, 1);
      }
      std::ostream::operator<<();
      ++*(_QWORD *)(v31 + 40);
      sub_223BA081C(v31, a2 + 16, 4u);
    }
    else if (v32 == 1)
    {
      if (v30[5])
      {
        v50 = (_QWORD *)v30[3];
        LOBYTE(v56) = *(_BYTE *)(v31 + 32);
        sub_2231813E8(v50, (uint64_t)&v56, 1);
      }
      std::ostream::operator<<();
      ++*(_QWORD *)(v31 + 40);
      sub_223BA0278(v31, a2 + 16, 5u);
    }
    else
    {
      if (v32)
        goto LABEL_118;
      if (v30[5])
      {
        v33 = (_QWORD *)v30[3];
        LOBYTE(v56) = *(_BYTE *)(v31 + 32);
        sub_2231813E8(v33, (uint64_t)&v56, 1);
      }
      std::ostream::operator<<();
      ++*(_QWORD *)(v31 + 40);
      sub_223B9FBAC(v31, a2 + 16, 6u);
    }
    v51 = *(_BYTE *)(v31 + 34);
    if (*(_QWORD *)(v31 + 40))
    {
      v52 = *(_QWORD **)(v31 + 24);
      LOBYTE(v56) = *(_BYTE *)(v31 + 32);
      sub_2231813E8(v52, (uint64_t)&v56, 1);
    }
    v53 = *(_QWORD **)(v31 + 24);
    LOBYTE(v56) = v51;
    sub_2231813E8(v53, (uint64_t)&v56, 1);
    v54 = *(_QWORD *)(v31 + 40);
    *(_QWORD *)(v31 + 40) = v54 + 1;
    if (v54 != -1)
    {
      v55 = *(_QWORD **)(v31 + 24);
      LOBYTE(v56) = *(_BYTE *)(v31 + 32);
      sub_2231813E8(v55, (uint64_t)&v56, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(v31 + 40);
    sub_223B92150((uint64_t)&v56, a2 + 200);
    sub_223BA0A94(v31, (uint64_t)&v56, 8u);
    return sub_2232BCBE0((uint64_t)&v56);
  }
  if (*a1 == &off_24EC776C0)
    return sub_223BA5DD4(a2, (uint64_t)a1);
  else
    return sub_223B8D0A8(a2, a1);
}

void sub_223B8D054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2232BCBE0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223B8D068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2232BCBE0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223B8D07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2232BCBE0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223B8D090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2232BCBE0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223B8D0A8(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v15[422];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    v8 = a2[2];
    v15[0] = 4;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, v15);
    v9 = v15[0];
    if (v8 < 1)
    {
      sub_223BACE24((uint64_t)a2, v4, v15[0]);
    }
    else
    {
      if (v8 == 2)
      {
        v15[0] = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, v15);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_223BACE24((uint64_t)a2, v4, v9);
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
    }
  }
  else if (v5 == 1)
  {
    v10 = a2[2];
    v15[0] = 5;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, v15);
    v11 = v15[0];
    if (v10 < 1)
    {
      sub_223BAC79C((uint64_t)a2, v4, v15[0]);
    }
    else
    {
      if (v10 == 2)
      {
        v15[0] = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, v15);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_223BAC79C((uint64_t)a2, v4, v11);
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
    }
  }
  else
  {
    if (v5)
      sub_22316DD70();
    v6 = a2[2];
    v15[0] = 6;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, v15);
    v7 = v15[0];
    if (v6 < 1)
    {
      sub_223BABEC8((uint64_t)a2, v4, v15[0]);
    }
    else
    {
      if (v6 == 2)
      {
        v15[0] = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, v15);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_223BABEC8((uint64_t)a2, v4, v7);
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
    }
  }
  v15[0] = 8;
  (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, v15);
  v12 = a1 + 200;
  v13 = v15[0];
  sub_223B92150((uint64_t)v15, v12);
  sub_223BAD070(a2, (uint64_t)v15, v13);
  return sub_2232BCBE0((uint64_t)v15);
}

void sub_223B8D35C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2232BCBE0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223B8D370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2232BCBE0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223B8D388(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_223B8DACC((uint64_t)v8, a2);
  sub_223B8D4A4(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_223B8D48C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223B8842C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223B8D4A4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  _BYTE *v11;
  _QWORD *v12;
  BOOL v13;
  void **v14;
  unsigned __int8 *v15;
  int v16;
  void **v17;
  int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  int v22;
  void **v23;
  int v24;
  int v25;
  unsigned __int8 *v26;
  int v27;
  void **v28;
  int v29;
  unsigned __int8 *v30;
  int v31;
  void **v32;
  int v33;
  unsigned __int8 *v34;
  int v35;
  void **v36;
  int v37;
  void **v38;
  unsigned __int8 *v39;
  int v40;
  void **v41;
  unint64_t v42;
  uint64_t v43;
  int v44;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "auto_timestamp";
    *(_QWORD *)(a1 + 80) = 14;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_22454024C(a1);
  v42 = (unint64_t)"version";
  v43 = 7;
  v44 = 2;
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v7 = *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 72) = "version", *(_QWORD *)(a1 + 80) = 7, v7))
  {
    sub_224542048(a1, &v44);
    v8 = *(unsigned __int8 **)(a1 + 40);
    if (*v8 <= 1u)
      goto LABEL_7;
  }
  else
  {
    *(_BYTE *)(a1 + 88) = 1;
    sub_224542048(a1, &v44);
    v8 = *(unsigned __int8 **)(a1 + 40);
    if (*v8 <= 1u)
    {
LABEL_7:
      *(_QWORD *)(a1 + 72) = "ns";
      v9 = a1 + 72;
      v11 = (_BYTE *)(a1 + 88);
      v10 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 80) = 2;
      v12 = (_QWORD *)(a1 + 80);
      if (!v10)
        *v11 = 1;
      goto LABEL_16;
    }
  }
  v12 = (_QWORD *)(a1 + 80);
  v9 = a1 + 72;
  v11 = (_BYTE *)(a1 + 88);
  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || (**(_DWORD **)v9 == *(_DWORD *)"version"
      ? (v13 = *(_DWORD *)(*(_QWORD *)v9 + 3) == *(_DWORD *)"sion")
      : (v13 = 0),
        !v13))
  {
LABEL_16:
    v14 = *(void ***)(a2 + 8);
    LOBYTE(v42) = 5;
    v43 = (uint64_t)v14;
    v15 = (unsigned __int8 *)sub_22453FEA0(a1);
    v16 = *v15;
    *v15 = 5;
    LOBYTE(v42) = v16;
    v17 = (void **)*((_QWORD *)v15 + 1);
    *((_QWORD *)v15 + 1) = v43;
    v43 = (uint64_t)v17;
    sub_22345337C((void ***)&v43, v16);
    v8 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v8 <= 1u)
  {
    v18 = *v11;
    *(_QWORD *)v9 = "clock_type";
    *v12 = 10;
    if (!v18)
      *v11 = 1;
  }
  v42 = a2 + 16;
  sub_223B8DCF8(a1, (unsigned __int8 **)&v42);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(unsigned __int8 **)(v19 - 8);
  *(_QWORD *)(a1 + 40) = v20;
  *(_QWORD *)(a1 + 56) = v19 - 8;
  if (*(_BYTE *)(a1 + 88))
    *v11 = 0;
  if (*v20 <= 1u)
  {
    *(_QWORD *)v9 = "name";
    *v12 = 4;
    *v11 = 1;
  }
  if (!*(_BYTE *)(a2 + 48))
  {
    LOBYTE(v42) = 0;
    v43 = 0;
    v21 = (unsigned __int8 *)sub_22453FEA0(a1);
    v22 = *v21;
    *v21 = v42;
    LOBYTE(v42) = v22;
    v23 = (void **)*((_QWORD *)v21 + 1);
    *((_QWORD *)v21 + 1) = v43;
    v43 = (uint64_t)v23;
    sub_22345337C((void ***)&v43, v22);
    if (a3 < 4)
      return;
LABEL_28:
    if (**(unsigned __int8 **)(a1 + 40) > 1u
      || (v24 = *v11, *(_QWORD *)v9 = "custom_timestamp", *v12 = 16, v24))
    {
      if (*(_BYTE *)(a2 + 72))
        goto LABEL_31;
    }
    else
    {
      *v11 = 1;
      if (*(_BYTE *)(a2 + 72))
      {
LABEL_31:
        v42 = *(_QWORD *)(a1 + 8);
        sub_223B8E0B4((int *)&v42, a1, (__int128 *)(a2 + 56));
        if (a3 == 5)
          goto LABEL_32;
        goto LABEL_39;
      }
    }
    LOBYTE(v42) = 0;
    v43 = 0;
    v26 = (unsigned __int8 *)sub_22453FEA0(a1);
    v27 = *v26;
    *v26 = v42;
    LOBYTE(v42) = v27;
    v28 = (void **)*((_QWORD *)v26 + 1);
    *((_QWORD *)v26 + 1) = v43;
    v43 = (uint64_t)v28;
    sub_22345337C((void ***)&v43, v27);
    if (a3 == 5)
    {
LABEL_32:
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v25 = *v11;
        *(_QWORD *)v9 = "space";
        *v12 = 5;
        if (!v25)
          *v11 = 1;
      }
      if (*(_BYTE *)(a2 + 104))
      {
        sub_224542510(a1, a2 + 80);
        return;
      }
LABEL_58:
      LOBYTE(v42) = 0;
      v43 = 0;
      v39 = (unsigned __int8 *)sub_22453FEA0(a1);
      v40 = *v39;
      *v39 = v42;
      LOBYTE(v42) = v40;
      v41 = (void **)*((_QWORD *)v39 + 1);
      *((_QWORD *)v39 + 1) = v43;
      v43 = (uint64_t)v41;
      sub_22345337C((void ***)&v43, v40);
      return;
    }
LABEL_39:
    if (a3 < 6)
      return;
    if (**(unsigned __int8 **)(a1 + 40) <= 1u)
    {
      v29 = *v11;
      *(_QWORD *)v9 = "space";
      *v12 = 5;
      if (!v29)
        *v11 = 1;
    }
    if (*(_BYTE *)(a2 + 104))
    {
      sub_224542510(a1, a2 + 80);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_50;
    }
    else
    {
      LOBYTE(v42) = 0;
      v43 = 0;
      v30 = (unsigned __int8 *)sub_22453FEA0(a1);
      v31 = *v30;
      *v30 = v42;
      LOBYTE(v42) = v31;
      v32 = (void **)*((_QWORD *)v30 + 1);
      *((_QWORD *)v30 + 1) = v43;
      v43 = (uint64_t)v32;
      sub_22345337C((void ***)&v43, v31);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_50;
    }
    v33 = *v11;
    *(_QWORD *)v9 = "instance_id";
    *v12 = 11;
    if (!v33)
      *v11 = 1;
LABEL_50:
    if (*(_BYTE *)(a2 + 136))
    {
      sub_224542510(a1, a2 + 112);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_56;
    }
    else
    {
      LOBYTE(v42) = 0;
      v43 = 0;
      v34 = (unsigned __int8 *)sub_22453FEA0(a1);
      v35 = *v34;
      *v34 = v42;
      LOBYTE(v42) = v35;
      v36 = (void **)*((_QWORD *)v34 + 1);
      *((_QWORD *)v34 + 1) = v43;
      v43 = (uint64_t)v36;
      sub_22345337C((void ***)&v43, v35);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_56;
    }
    v37 = *v11;
    *(_QWORD *)v9 = "references";
    *v12 = 10;
    if (!v37)
      *v11 = 1;
LABEL_56:
    if (*(_BYTE *)(a2 + 168))
    {
      v38 = *(void ***)(a2 + 144);
      v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 152) - (_QWORD)v38) >> 3);
      v43 = (uint64_t)v38;
      sub_224543FD4(a1, &v42);
      return;
    }
    goto LABEL_58;
  }
  sub_224542510(a1, a2 + 24);
  if (a3 >= 4)
    goto LABEL_28;
}

void sub_223B8DA4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_22345337C(v10, a10);
  _Unwind_Resume(a1);
}

void sub_223B8DA84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_22345337C(v10, a10);
  _Unwind_Resume(a1);
}

void sub_223B8DA9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_22345337C(v10, a10);
  _Unwind_Resume(a1);
}

void sub_223B8DAB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_22345337C(v10, a10);
  _Unwind_Resume(a1);
}

uint64_t sub_223B8DACC(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  v4 = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 48) = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    if (*(char *)(a2 + 47) < 0)
    {
      sub_223197FA4((_BYTE *)(a1 + 24), *(void **)(a2 + 24), *(_QWORD *)(a2 + 32));
    }
    else
    {
      v5 = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 24) = v5;
    }
    *(_BYTE *)(a1 + 48) = 1;
  }
  v6 = *(_OWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 56) = v6;
  *(_BYTE *)(a1 + 104) = 0;
  if (*(_BYTE *)(a2 + 104))
  {
    if (*(char *)(a2 + 103) < 0)
    {
      sub_223197FA4((_BYTE *)(a1 + 80), *(void **)(a2 + 80), *(_QWORD *)(a2 + 88));
    }
    else
    {
      v8 = *(_OWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 80) = v8;
    }
    *(_BYTE *)(a1 + 104) = 1;
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  if (*(_BYTE *)(a2 + 136))
  {
    if (*(char *)(a2 + 135) < 0)
    {
      sub_223197FA4((_BYTE *)(a1 + 112), *(void **)(a2 + 112), *(_QWORD *)(a2 + 120));
    }
    else
    {
      v9 = *(_OWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 112) = v9;
    }
    *(_BYTE *)(a1 + 136) = 1;
  }
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  if (*(_BYTE *)(a2 + 168))
  {
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    sub_223662D94((char *)(a1 + 144), *(_QWORD *)(a2 + 144), *(_QWORD *)(a2 + 152), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 152) - *(_QWORD *)(a2 + 144)) >> 3));
    *(_BYTE *)(a1 + 168) = 1;
  }
  return a1;
}

void sub_223B8DC3C(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v2;
  void **v3;
  void **v4;

  if (v2[136] && v2[135] < 0)
    operator delete(*v4);
  if (v2[104] && v2[103] < 0)
    operator delete(*v3);
  if (v2[48])
  {
    if (v2[47] < 0)
      operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_223B8DCF8(uint64_t a1, unsigned __int8 **a2)
{
  unsigned __int8 *v3;
  void *__p[2];
  char v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  v3 = *a2;
  v7 = 0;
  sub_223B8DE00((uint64_t)&v9, (uint64_t)v6, v3);
  if (v7 == -1)
    sub_22316DD70();
  v9 = &v8;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24EC5FFA0[v7])(__p, &v9, v6);
  if (v7 != -1)
    ((void (*)(char **, _BYTE *))off_24EC5FF88[v7])(&v9, v6);
  sub_224542510(a1, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_223B8DDBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223B8DDD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223B8DDEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223B8DE00(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_223195210(v5);
  v21[0] = v5;
  sub_2231813E8((_QWORD *)(v5 + 16), (uint64_t)(&off_24EC77E90)[2 * *a3], (uint64_t)(&off_24EC77E90)[2 * *a3 + 1]);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_22316DBC0();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v14 + 128);
    MEMORY[0x227684CE8](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_22316DD70();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24EC5FF70[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_223B8E060(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_223B8E084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223B8E0A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22456E764((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223B8E0B4(int *a1, uint64_t a2, __int128 *a3)
{
  int v6;
  int v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  _BYTE *v12;
  _QWORD *v13;
  BOOL v14;
  int v15;
  unsigned __int8 *v17;
  int v18;
  void **v19;
  int v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  int v24;
  __int128 v25;

  sub_22454024C(a2);
  v22 = "version";
  v23 = 7;
  v24 = 2;
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (v6 = *(unsigned __int8 *)(a2 + 88), *(_QWORD *)(a2 + 72) = "version", *(_QWORD *)(a2 + 80) = 7, v6))
  {
    sub_224542048(a2, &v24);
    v7 = *a1;
    if (*a1 >= 1)
      goto LABEL_4;
LABEL_20:
    v25 = *a3;
    v9 = *(unsigned __int8 **)(a2 + 40);
    if (*v9 <= 1u)
    {
      *(_QWORD *)(a2 + 72) = "ns";
      v10 = a2 + 72;
      v12 = (_BYTE *)(a2 + 88);
      v15 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 80) = 2;
      v13 = (_QWORD *)(a2 + 80);
      if (!v15)
        *v12 = 1;
      goto LABEL_29;
    }
    v13 = (_QWORD *)(a2 + 80);
    v10 = a2 + 72;
    v12 = (_BYTE *)(a2 + 88);
    if (!*(_BYTE *)(a2 + 88) || *(_QWORD *)(a2 + 80) != 7)
      goto LABEL_29;
    if (**(_DWORD **)v10 != *(_DWORD *)"version" || *(_DWORD *)(*(_QWORD *)v10 + 3) != *(_DWORD *)"sion")
      goto LABEL_29;
    goto LABEL_30;
  }
  *(_BYTE *)(a2 + 88) = 1;
  sub_224542048(a2, &v24);
  v7 = *a1;
  if (*a1 < 1)
    goto LABEL_20;
LABEL_4:
  if (v7 == 2)
  {
    v22 = "min_version";
    v23 = 11;
    v24 = 2;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v8 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "min_version";
      *(_QWORD *)(a2 + 80) = 11;
      if (!v8)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_224542048(a2, &v24);
  }
  v25 = *a3;
  v9 = *(unsigned __int8 **)(a2 + 40);
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "ns";
    v10 = a2 + 72;
    v12 = (_BYTE *)(a2 + 88);
    v11 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 80) = 2;
    v13 = (_QWORD *)(a2 + 80);
    if (!v11)
      *v12 = 1;
    goto LABEL_29;
  }
  v13 = (_QWORD *)(a2 + 80);
  v10 = a2 + 72;
  v12 = (_BYTE *)(a2 + 88);
  if (!*(_BYTE *)(a2 + 88)
    || *(_QWORD *)(a2 + 80) != 7
    || (**(_DWORD **)v10 == *(_DWORD *)"version"
      ? (v14 = *(_DWORD *)(*(_QWORD *)v10 + 3) == *(_DWORD *)"sion")
      : (v14 = 0),
        !v14))
  {
LABEL_29:
    LOBYTE(v22) = 5;
    v23 = v25;
    v17 = (unsigned __int8 *)sub_22453FEA0(a2);
    v18 = *v17;
    *v17 = 5;
    LOBYTE(v22) = v18;
    v19 = (void **)*((_QWORD *)v17 + 1);
    *((_QWORD *)v17 + 1) = v23;
    v23 = (uint64_t)v19;
    sub_22345337C((void ***)&v23, v18);
    v9 = *(unsigned __int8 **)(a2 + 40);
  }
LABEL_30:
  if (*v9 <= 1u)
  {
    v20 = *v12;
    *(_QWORD *)v10 = "clock_type";
    *v13 = 10;
    if (!v20)
      *v12 = 1;
  }
  v22 = (char *)&v25 + 8;
  sub_223B8E3EC(a2, (unsigned __int8 **)&v22);
  v21 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v21 - 8);
  *(_QWORD *)(a2 + 56) = v21 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_223B8E3BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_22345337C(v10, a10);
  _Unwind_Resume(a1);
}

void sub_223B8E3D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_22345337C(v10, a10);
  _Unwind_Resume(a1);
}

void sub_223B8E3EC(uint64_t a1, unsigned __int8 **a2)
{
  void **v3;
  BOOL v4;
  int *v5;
  int v6;
  int v7;
  BOOL v8;
  unsigned __int8 *v9;
  int v10;
  void **v11;
  unsigned __int8 *v12;
  void *__p[2];
  char v14;
  char v15[8];
  void **v16;
  int v17;
  char v18;
  char *v19;

  if ((*(_BYTE *)(a1 + 12) & 2) != 0)
  {
    v12 = *a2;
    v17 = 0;
    sub_223B8DE00((uint64_t)&v19, (uint64_t)v15, v12);
    if (v17 == -1)
      sub_22316DD70();
    v19 = &v18;
    ((void (*)(void **__return_ptr, char **, char *))off_24EC5FFA0[v17])(__p, &v19, v15);
    if (v17 != -1)
      ((void (*)(char **, char *))off_24EC5FF88[v17])(&v19, v15);
    sub_224542510(a1, (uint64_t)__p);
    if (v14 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v3 = (void **)**a2;
    if (*(_BYTE *)(a1 + 88))
      v4 = *(_QWORD *)(a1 + 80) == 7;
    else
      v4 = 0;
    if (!v4
      || ((v5 = *(int **)(a1 + 72), v6 = *v5, v7 = *(int *)((char *)v5 + 3), v6 == *(_DWORD *)"version")
        ? (v8 = v7 == *(_DWORD *)"sion")
        : (v8 = 0),
          !v8))
    {
      v15[0] = 6;
      v16 = v3;
      v9 = (unsigned __int8 *)sub_22453FEA0(a1);
      v10 = *v9;
      *v9 = 6;
      v15[0] = v10;
      v11 = (void **)*((_QWORD *)v9 + 1);
      *((_QWORD *)v9 + 1) = v16;
      v16 = v11;
      sub_22345337C(&v16, v10);
    }
  }
}

void sub_223B8E540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void ***v13;

  sub_22345337C(v13, a13);
  _Unwind_Resume(a1);
}

void sub_223B8E558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223B8E574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223B8E588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223B8E59C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, const std::string::value_type *a4@<X4>, std::string::size_type a5@<X5>, std::string *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string *p_p;
  std::string::size_type v17;
  std::string::size_type size;
  std::string *v19;
  std::string::size_type v20;
  __int128 i;
  std::string __p;
  __int128 v24;

  v11 = 0x5555555555555555 * ((a1 - a3) >> 3);
  if (v11 <= 1)
    v12 = 1;
  else
    v12 = 0x5555555555555555 * ((a1 - a3) >> 3);
  v13 = (v12 - 1) * a5;
  *(_QWORD *)&v24 = a1;
  *((_QWORD *)&v24 + 1) = a2;
  v14 = 0;
  v15 = a1 - a3;
  if (a1 != a3)
  {
    do
    {
      sub_223B8E7AC((unsigned __int8 **)&v24, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v14 += size;
      *(_QWORD *)&v24 = v24 + 24;
    }
    while ((_QWORD)v24 != a3);
  }
  a6->__r_.__value_.__r.__words[0] = 0;
  a6->__r_.__value_.__l.__size_ = 0;
  a6->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a6, v14 + v13);
  *(_QWORD *)&v24 = a1;
  *((_QWORD *)&v24 + 1) = a2;
  if (v15 < 0)
  {
    sub_223B8E7AC((unsigned __int8 **)&v24, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v17 = __p.__r_.__value_.__l.__size_;
    std::string::append(a6, (const std::string::value_type *)p_p, v17);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((unint64_t)v11 < 2)
        return;
    }
    else if ((unint64_t)v11 < 2)
    {
      return;
    }
    *(_QWORD *)&v24 = v24 + 24;
    for (i = v24; (_QWORD)i != a3; *(_QWORD *)&i = i + 24)
    {
      std::string::append(a6, a4, a5);
      sub_223B8E7AC((unsigned __int8 **)&i, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = &__p;
      else
        v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v20 = __p.__r_.__value_.__l.__size_;
      std::string::append(a6, (const std::string::value_type *)v19, v20);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_223B8E768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  if (a19 < 0)
    operator delete(__p);
  if (*(char *)(v19 + 23) < 0)
    operator delete(*(void **)v19);
  _Unwind_Resume(exception_object);
}

void sub_223B8E7AC(unsigned __int8 **a1@<X0>, std::string *a2@<X8>)
{
  unsigned __int8 *v3;
  std::string::size_type v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  const std::string::value_type *v8;

  v3 = *a1;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  if ((v3[23] & 0x80u) == 0)
    v4 = v3[23];
  else
    v4 = *((_QWORD *)v3 + 1);
  std::string::reserve(a2, v4);
  v5 = *((_QWORD *)v3 + 1);
  if ((v3[23] & 0x80u) == 0)
  {
    v6 = v3[23];
  }
  else
  {
    v3 = *(unsigned __int8 **)v3;
    v6 = v5;
  }
  if (v6)
  {
    while (1)
    {
      v7 = *v3;
      if (v7 == 59)
        break;
      if (v7 == 92)
      {
        v8 = "\\\\";
LABEL_15:
        std::string::append(a2, v8, 2uLL);
        goto LABEL_10;
      }
      std::string::push_back(a2, v7);
LABEL_10:
      ++v3;
      if (!--v6)
        return;
    }
    v8 = "\\;";
    goto LABEL_15;
  }
}

void sub_223B8E878(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_223B8E898(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_223B8EFDC((uint64_t)v8, a2);
  sub_223B8E9B4(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_223B8E99C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223B8842C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223B8E9B4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  _BYTE *v11;
  _QWORD *v12;
  BOOL v13;
  void **v14;
  unsigned __int8 *v15;
  int v16;
  void **v17;
  int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  int v22;
  void **v23;
  int v24;
  int v25;
  unsigned __int8 *v26;
  int v27;
  void **v28;
  int v29;
  unsigned __int8 *v30;
  int v31;
  void **v32;
  int v33;
  unsigned __int8 *v34;
  int v35;
  void **v36;
  int v37;
  void **v38;
  unsigned __int8 *v39;
  int v40;
  void **v41;
  unint64_t v42;
  uint64_t v43;
  int v44;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "auto_timestamp";
    *(_QWORD *)(a1 + 80) = 14;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_22454024C(a1);
  v42 = (unint64_t)"version";
  v43 = 7;
  v44 = 2;
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v7 = *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 72) = "version", *(_QWORD *)(a1 + 80) = 7, v7))
  {
    sub_224542048(a1, &v44);
    v8 = *(unsigned __int8 **)(a1 + 40);
    if (*v8 <= 1u)
      goto LABEL_7;
  }
  else
  {
    *(_BYTE *)(a1 + 88) = 1;
    sub_224542048(a1, &v44);
    v8 = *(unsigned __int8 **)(a1 + 40);
    if (*v8 <= 1u)
    {
LABEL_7:
      *(_QWORD *)(a1 + 72) = "ns";
      v9 = a1 + 72;
      v11 = (_BYTE *)(a1 + 88);
      v10 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 80) = 2;
      v12 = (_QWORD *)(a1 + 80);
      if (!v10)
        *v11 = 1;
      goto LABEL_16;
    }
  }
  v12 = (_QWORD *)(a1 + 80);
  v9 = a1 + 72;
  v11 = (_BYTE *)(a1 + 88);
  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || (**(_DWORD **)v9 == *(_DWORD *)"version"
      ? (v13 = *(_DWORD *)(*(_QWORD *)v9 + 3) == *(_DWORD *)"sion")
      : (v13 = 0),
        !v13))
  {
LABEL_16:
    v14 = *(void ***)(a2 + 8);
    LOBYTE(v42) = 5;
    v43 = (uint64_t)v14;
    v15 = (unsigned __int8 *)sub_22453FEA0(a1);
    v16 = *v15;
    *v15 = 5;
    LOBYTE(v42) = v16;
    v17 = (void **)*((_QWORD *)v15 + 1);
    *((_QWORD *)v15 + 1) = v43;
    v43 = (uint64_t)v17;
    sub_22345337C((void ***)&v43, v16);
    v8 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v8 <= 1u)
  {
    v18 = *v11;
    *(_QWORD *)v9 = "clock_type";
    *v12 = 10;
    if (!v18)
      *v11 = 1;
  }
  v42 = a2 + 16;
  sub_223B8DCF8(a1, (unsigned __int8 **)&v42);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(unsigned __int8 **)(v19 - 8);
  *(_QWORD *)(a1 + 40) = v20;
  *(_QWORD *)(a1 + 56) = v19 - 8;
  if (*(_BYTE *)(a1 + 88))
    *v11 = 0;
  if (*v20 <= 1u)
  {
    *(_QWORD *)v9 = "name";
    *v12 = 4;
    *v11 = 1;
  }
  if (!*(_BYTE *)(a2 + 48))
  {
    LOBYTE(v42) = 0;
    v43 = 0;
    v21 = (unsigned __int8 *)sub_22453FEA0(a1);
    v22 = *v21;
    *v21 = v42;
    LOBYTE(v42) = v22;
    v23 = (void **)*((_QWORD *)v21 + 1);
    *((_QWORD *)v21 + 1) = v43;
    v43 = (uint64_t)v23;
    sub_22345337C((void ***)&v43, v22);
    if (a3 < 4)
      return;
LABEL_28:
    if (**(unsigned __int8 **)(a1 + 40) > 1u
      || (v24 = *v11, *(_QWORD *)v9 = "custom_timestamp", *v12 = 16, v24))
    {
      if (*(_BYTE *)(a2 + 72))
        goto LABEL_31;
    }
    else
    {
      *v11 = 1;
      if (*(_BYTE *)(a2 + 72))
      {
LABEL_31:
        v42 = *(_QWORD *)(a1 + 8);
        sub_223B8E0B4((int *)&v42, a1, (__int128 *)(a2 + 56));
        if (a3 == 5)
          goto LABEL_32;
        goto LABEL_39;
      }
    }
    LOBYTE(v42) = 0;
    v43 = 0;
    v26 = (unsigned __int8 *)sub_22453FEA0(a1);
    v27 = *v26;
    *v26 = v42;
    LOBYTE(v42) = v27;
    v28 = (void **)*((_QWORD *)v26 + 1);
    *((_QWORD *)v26 + 1) = v43;
    v43 = (uint64_t)v28;
    sub_22345337C((void ***)&v43, v27);
    if (a3 == 5)
    {
LABEL_32:
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v25 = *v11;
        *(_QWORD *)v9 = "space";
        *v12 = 5;
        if (!v25)
          *v11 = 1;
      }
      if (*(_BYTE *)(a2 + 104))
      {
        sub_224542510(a1, a2 + 80);
        return;
      }
LABEL_58:
      LOBYTE(v42) = 0;
      v43 = 0;
      v39 = (unsigned __int8 *)sub_22453FEA0(a1);
      v40 = *v39;
      *v39 = v42;
      LOBYTE(v42) = v40;
      v41 = (void **)*((_QWORD *)v39 + 1);
      *((_QWORD *)v39 + 1) = v43;
      v43 = (uint64_t)v41;
      sub_22345337C((void ***)&v43, v40);
      return;
    }
LABEL_39:
    if (a3 < 6)
      return;
    if (**(unsigned __int8 **)(a1 + 40) <= 1u)
    {
      v29 = *v11;
      *(_QWORD *)v9 = "space";
      *v12 = 5;
      if (!v29)
        *v11 = 1;
    }
    if (*(_BYTE *)(a2 + 104))
    {
      sub_224542510(a1, a2 + 80);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_50;
    }
    else
    {
      LOBYTE(v42) = 0;
      v43 = 0;
      v30 = (unsigned __int8 *)sub_22453FEA0(a1);
      v31 = *v30;
      *v30 = v42;
      LOBYTE(v42) = v31;
      v32 = (void **)*((_QWORD *)v30 + 1);
      *((_QWORD *)v30 + 1) = v43;
      v43 = (uint64_t)v32;
      sub_22345337C((void ***)&v43, v31);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_50;
    }
    v33 = *v11;
    *(_QWORD *)v9 = "instance_id";
    *v12 = 11;
    if (!v33)
      *v11 = 1;
LABEL_50:
    if (*(_BYTE *)(a2 + 136))
    {
      sub_224542510(a1, a2 + 112);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_56;
    }
    else
    {
      LOBYTE(v42) = 0;
      v43 = 0;
      v34 = (unsigned __int8 *)sub_22453FEA0(a1);
      v35 = *v34;
      *v34 = v42;
      LOBYTE(v42) = v35;
      v36 = (void **)*((_QWORD *)v34 + 1);
      *((_QWORD *)v34 + 1) = v43;
      v43 = (uint64_t)v36;
      sub_22345337C((void ***)&v43, v35);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_56;
    }
    v37 = *v11;
    *(_QWORD *)v9 = "references";
    *v12 = 10;
    if (!v37)
      *v11 = 1;
LABEL_56:
    if (*(_BYTE *)(a2 + 168))
    {
      v38 = *(void ***)(a2 + 144);
      v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 152) - (_QWORD)v38) >> 3);
      v43 = (uint64_t)v38;
      sub_224543FD4(a1, &v42);
      return;
    }
    goto LABEL_58;
  }
  sub_224542510(a1, a2 + 24);
  if (a3 >= 4)
    goto LABEL_28;
}

void sub_223B8EF5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_22345337C(v10, a10);
  _Unwind_Resume(a1);
}

void sub_223B8EF94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_22345337C(v10, a10);
  _Unwind_Resume(a1);
}

void sub_223B8EFAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_22345337C(v10, a10);
  _Unwind_Resume(a1);
}

void sub_223B8EFC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_22345337C(v10, a10);
  _Unwind_Resume(a1);
}

uint64_t sub_223B8EFDC(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  v4 = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 48) = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    if (*(char *)(a2 + 47) < 0)
    {
      sub_223197FA4((_BYTE *)(a1 + 24), *(void **)(a2 + 24), *(_QWORD *)(a2 + 32));
    }
    else
    {
      v5 = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 24) = v5;
    }
    *(_BYTE *)(a1 + 48) = 1;
  }
  v6 = *(_OWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 56) = v6;
  *(_BYTE *)(a1 + 104) = 0;
  if (*(_BYTE *)(a2 + 104))
  {
    if (*(char *)(a2 + 103) < 0)
    {
      sub_223197FA4((_BYTE *)(a1 + 80), *(void **)(a2 + 80), *(_QWORD *)(a2 + 88));
    }
    else
    {
      v8 = *(_OWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 80) = v8;
    }
    *(_BYTE *)(a1 + 104) = 1;
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  if (*(_BYTE *)(a2 + 136))
  {
    if (*(char *)(a2 + 135) < 0)
    {
      sub_223197FA4((_BYTE *)(a1 + 112), *(void **)(a2 + 112), *(_QWORD *)(a2 + 120));
    }
    else
    {
      v9 = *(_OWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 112) = v9;
    }
    *(_BYTE *)(a1 + 136) = 1;
  }
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  if (*(_BYTE *)(a2 + 168))
  {
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    sub_223662D94((char *)(a1 + 144), *(_QWORD *)(a2 + 144), *(_QWORD *)(a2 + 152), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 152) - *(_QWORD *)(a2 + 144)) >> 3));
    *(_BYTE *)(a1 + 168) = 1;
  }
  return a1;
}

void sub_223B8F14C(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v2;
  void **v3;
  void **v4;

  if (v2[136] && v2[135] < 0)
    operator delete(*v4);
  if (v2[104] && v2[103] < 0)
    operator delete(*v3);
  if (v2[48])
  {
    if (v2[47] < 0)
      operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_223B8F208(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_223B8F6B8((uint64_t)v8, a2);
  sub_223B8F324(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_223B8F30C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223B8842C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223B8F324(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  _BYTE *v11;
  _QWORD *v12;
  BOOL v13;
  void **v14;
  unsigned __int8 *v15;
  int v16;
  void **v17;
  int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  int v22;
  void **v23;
  int v24;
  unsigned __int8 *v25;
  int v26;
  void **v27;
  const char *v28;
  uint64_t v29;
  int v30;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "auto_timestamp";
    *(_QWORD *)(a1 + 80) = 14;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_22454024C(a1);
  v28 = "version";
  v29 = 7;
  v30 = 2;
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v7 = *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 72) = "version", *(_QWORD *)(a1 + 80) = 7, v7))
  {
    sub_224542048(a1, &v30);
    v8 = *(unsigned __int8 **)(a1 + 40);
    if (*v8 <= 1u)
      goto LABEL_7;
  }
  else
  {
    *(_BYTE *)(a1 + 88) = 1;
    sub_224542048(a1, &v30);
    v8 = *(unsigned __int8 **)(a1 + 40);
    if (*v8 <= 1u)
    {
LABEL_7:
      *(_QWORD *)(a1 + 72) = "ns";
      v9 = a1 + 72;
      v11 = (_BYTE *)(a1 + 88);
      v10 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 80) = 2;
      v12 = (_QWORD *)(a1 + 80);
      if (!v10)
        *v11 = 1;
      goto LABEL_16;
    }
  }
  v12 = (_QWORD *)(a1 + 80);
  v9 = a1 + 72;
  v11 = (_BYTE *)(a1 + 88);
  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || (**(_DWORD **)v9 == *(_DWORD *)"version"
      ? (v13 = *(_DWORD *)(*(_QWORD *)v9 + 3) == *(_DWORD *)"sion")
      : (v13 = 0),
        !v13))
  {
LABEL_16:
    v14 = *(void ***)(a2 + 8);
    LOBYTE(v28) = 5;
    v29 = (uint64_t)v14;
    v15 = (unsigned __int8 *)sub_22453FEA0(a1);
    v16 = *v15;
    *v15 = 5;
    LOBYTE(v28) = v16;
    v17 = (void **)*((_QWORD *)v15 + 1);
    *((_QWORD *)v15 + 1) = v29;
    v29 = (uint64_t)v17;
    sub_22345337C((void ***)&v29, v16);
    v8 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v8 <= 1u)
  {
    v18 = *v11;
    *(_QWORD *)v9 = "clock_type";
    *v12 = 10;
    if (!v18)
      *v11 = 1;
  }
  v28 = (const char *)(a2 + 16);
  sub_223B8DCF8(a1, (unsigned __int8 **)&v28);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(unsigned __int8 **)(v19 - 8);
  *(_QWORD *)(a1 + 40) = v20;
  *(_QWORD *)(a1 + 56) = v19 - 8;
  if (*(_BYTE *)(a1 + 88))
    *v11 = 0;
  if (*v20 <= 1u)
  {
    *(_QWORD *)v9 = "name";
    *v12 = 4;
    *v11 = 1;
  }
  if (!*(_BYTE *)(a2 + 48))
  {
    LOBYTE(v28) = 0;
    v29 = 0;
    v21 = (unsigned __int8 *)sub_22453FEA0(a1);
    v22 = *v21;
    *v21 = v28;
    LOBYTE(v28) = v22;
    v23 = (void **)*((_QWORD *)v21 + 1);
    *((_QWORD *)v21 + 1) = v29;
    v29 = (uint64_t)v23;
    sub_22345337C((void ***)&v29, v22);
    if (a3 < 4)
      return;
LABEL_28:
    if (**(unsigned __int8 **)(a1 + 40) > 1u
      || (v24 = *v11, *(_QWORD *)v9 = "custom_timestamp", *v12 = 16, v24))
    {
      if (*(_BYTE *)(a2 + 72))
      {
LABEL_31:
        v28 = *(const char **)(a1 + 8);
        sub_223B8E0B4((int *)&v28, a1, (__int128 *)(a2 + 56));
        return;
      }
    }
    else
    {
      *v11 = 1;
      if (*(_BYTE *)(a2 + 72))
        goto LABEL_31;
    }
    LOBYTE(v28) = 0;
    v29 = 0;
    v25 = (unsigned __int8 *)sub_22453FEA0(a1);
    v26 = *v25;
    *v25 = v28;
    LOBYTE(v28) = v26;
    v27 = (void **)*((_QWORD *)v25 + 1);
    *((_QWORD *)v25 + 1) = v29;
    v29 = (uint64_t)v27;
    sub_22345337C((void ***)&v29, v26);
    return;
  }
  sub_224542510(a1, a2 + 24);
  if (a3 >= 4)
    goto LABEL_28;
}

void sub_223B8F670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_22345337C(v10, a10);
  _Unwind_Resume(a1);
}

void sub_223B8F688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_22345337C(v10, a10);
  _Unwind_Resume(a1);
}

void sub_223B8F6A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_22345337C(v10, a10);
  _Unwind_Resume(a1);
}

uint64_t sub_223B8F6B8(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  v4 = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 48) = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    if (*(char *)(a2 + 47) < 0)
    {
      sub_223197FA4((_BYTE *)(a1 + 24), *(void **)(a2 + 24), *(_QWORD *)(a2 + 32));
    }
    else
    {
      v5 = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 24) = v5;
    }
    *(_BYTE *)(a1 + 48) = 1;
  }
  v6 = *(_OWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 56) = v6;
  *(_BYTE *)(a1 + 104) = 0;
  if (*(_BYTE *)(a2 + 104))
  {
    if (*(char *)(a2 + 103) < 0)
    {
      sub_223197FA4((_BYTE *)(a1 + 80), *(void **)(a2 + 80), *(_QWORD *)(a2 + 88));
    }
    else
    {
      v8 = *(_OWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 80) = v8;
    }
    *(_BYTE *)(a1 + 104) = 1;
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  if (*(_BYTE *)(a2 + 136))
  {
    if (*(char *)(a2 + 135) < 0)
    {
      sub_223197FA4((_BYTE *)(a1 + 112), *(void **)(a2 + 112), *(_QWORD *)(a2 + 120));
    }
    else
    {
      v9 = *(_OWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 112) = v9;
    }
    *(_BYTE *)(a1 + 136) = 1;
  }
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  if (*(_BYTE *)(a2 + 168))
  {
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    sub_223662D94((char *)(a1 + 144), *(_QWORD *)(a2 + 144), *(_QWORD *)(a2 + 152), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 152) - *(_QWORD *)(a2 + 144)) >> 3));
    *(_BYTE *)(a1 + 168) = 1;
  }
  return a1;
}

void sub_223B8F828(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v2;
  void **v3;
  void **v4;

  if (v2[136] && v2[135] < 0)
    operator delete(*v4);
  if (v2[104] && v2[103] < 0)
    operator delete(*v3);
  if (v2[48])
  {
    if (v2[47] < 0)
      operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_223B8F8E4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  __int16 v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  __int16 v41;
  unint64_t v42;
  unint64_t v43;
  unsigned __int8 *v44;
  int v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  int v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  int v66;
  void **v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  __int16 v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  void **v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  __int16 v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  int v94;
  void **v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  __int16 v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  void **v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  __int16 v111;
  unint64_t v112;
  unint64_t v113;
  unsigned __int8 *v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  void **v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  __int16 v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  int v155;
  unint64_t *v156;
  unint64_t v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  unsigned int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  unsigned int v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  int *v205;
  int v206;
  int v207;
  BOOL v208;
  unsigned __int8 *v209;
  int v210;
  uint64_t v211;
  uint64_t v212;
  unsigned __int8 *v213;
  int v214;
  uint64_t v215;
  unsigned __int8 *v216;
  int v217;
  uint64_t v218;
  unsigned __int8 *v219;
  int v220;
  uint64_t v221;
  unsigned __int8 *v222;
  int v223;
  uint64_t v224;
  int v225;
  uint64_t v226;
  __int128 v227;
  unsigned __int8 *v228;
  int v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  int v238;
  uint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  __int16 v243;
  unint64_t v244;
  __int128 v245;
  unint64_t v246;
  unint64_t v247;
  unint64_t v248;
  void **v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  uint64_t v253;
  int v254;
  uint64_t v255;
  __int16 v256;
  unint64_t v257;
  unint64_t v258;
  unsigned __int8 *v259;
  int v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  __int16 v268;
  __int128 v269;
  unint64_t *v270;
  unint64_t v271;
  unint64_t v272;
  int v273;
  std::__shared_weak_count *v274;
  unint64_t *v275;
  unint64_t v276;
  std::__shared_weak_count *v277;
  unint64_t *v278;
  unint64_t v279;
  int *v280;
  int v281;
  int v282;
  BOOL v283;
  uint64_t v284;
  unsigned __int8 *v285;
  int v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  unsigned __int8 *v290;
  int v291;
  uint64_t v292;
  unsigned __int8 *v293;
  int v294;
  void **v295;
  int v296;
  char **v297;
  uint64_t v298;
  int v299;
  int v300;
  uint64_t v301;
  char v302;
  unsigned __int8 *v303;
  int v304;
  uint64_t v305;
  unsigned __int8 *v306;
  int v307;
  uint64_t v308;
  uint64_t v309;
  int v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  int *v323;
  int v324;
  int v325;
  BOOL v326;
  unsigned __int8 *v327;
  int v328;
  void **v329;
  int v330;
  int v331;
  uint64_t v332;
  int v333;
  uint64_t v334;
  char *v335;
  unsigned __int8 *v336;
  int v337;
  void **v338;
  _QWORD *v339;
  void *v340;
  char *v341;
  void *v342;
  void *v343;
  uint64_t v344;
  uint64_t v345;
  int v346;
  int v347;
  int *v348;
  int v349;
  int v350;
  BOOL v351;
  uint64_t v352;
  unsigned __int8 *v353;
  int v354;
  uint64_t v355;
  int v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  unsigned __int8 *v360;
  int v361;
  uint64_t v362;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  std::__shared_weak_count *v367;
  _BYTE v368[32];
  _BYTE v369[32];
  __int16 v370;
  __int16 v371;
  _QWORD v372[2];
  std::__shared_weak_count *v373;
  uint64_t v374;
  int v375;
  uint64_t v376;
  int v377;
  __int16 v378;
  _OWORD v379[2];
  _BYTE v380[64];
  int v381;
  uint64_t v382;
  uint64_t v383;
  _QWORD v384[2];
  int v385;
  uint64_t v386;
  int v387;
  __int16 v388;
  uint64_t (**v389)();
  void **v390;
  std::__shared_weak_count *v391;
  __int128 v392;
  uint64_t v393;
  int v394;
  __int16 v395;
  unsigned __int8 v396;
  uint64_t (**v397)();
  void **v398;
  std::__shared_weak_count *v399;
  __int128 v400;
  uint64_t v401;
  __int16 v402;
  uint64_t (**v403)();
  void **v404;
  std::__shared_weak_count *v405;
  uint64_t v406;
  int v407;
  uint64_t v408;
  int v409;
  __int16 v410;
  _BYTE v411[56];
  __int128 v412;
  __int16 v413;
  int v414;
  uint64_t v415[3];
  _BYTE v416[28];
  _BYTE v417[32];
  int v418;
  int v419;
  _BYTE v420[48];
  __int128 v421;
  __int128 v422;
  __int128 v423;
  __int128 v424;
  __int128 v425;
  uint64_t v426;
  void *v427;
  char *v428;
  int v429;
  __int128 __p;
  __int128 v431;
  _OWORD v432[4];
  __int128 v433;
  __int128 v434;
  int v435;
  uint64_t v436;

  v436 = *MEMORY[0x24BDAC8D0];
  sub_22454024C(a1);
  *(_QWORD *)v420 = "version";
  *(_QWORD *)&v420[8] = 7;
  *(_DWORD *)&v420[16] = 6;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v5 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "version";
    *(_QWORD *)(a1 + 80) = 7;
    if (!v5)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_224542048(a1, &v420[16]);
  v12 = *(_DWORD *)&v420[16];
  v13 = *(_DWORD *)&v420[16] - 2;
  if (*(_DWORD *)&v420[16] <= 2u)
  {
    v420[0] = 0;
    BYTE8(v421) = 0;
    sub_223B941A8(a1, (uint64_t)v420, v6, v7, v8, v9, v10, v11);
  }
  else
  {
    sub_223B93D28(a1, a2 + 8, v6, v7, v8, v9, v10, v11);
    if (v12 >= 5)
    {
      sub_223B93D28(a1, a2 + 72, v14, v15, v16, v17, v18, v19);
      goto LABEL_9;
    }
  }
  v420[0] = 0;
  BYTE8(v421) = 0;
  sub_223B941A8(a1, (uint64_t)v420, v14, v15, v16, v17, v18, v19);
  if (v12 < 4)
  {
    v420[0] = 0;
    LOBYTE(v423) = 0;
    sub_223B9341C(a1, (uint64_t)v420, v25, v20, v21, v22, v23, v24);
    goto LABEL_60;
  }
LABEL_9:
  v26 = *(unsigned __int8 *)(a2 + 216);
  if (*(_BYTE *)(a2 + 216))
  {
    v27 = *(_QWORD *)(a2 + 144);
    v28 = *(std::__shared_weak_count **)(a2 + 152);
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(p_shared_owners);
      while (__stxr(v30 + 1, p_shared_owners));
      v31 = *(_WORD *)(a2 + 208);
      do
        v32 = __ldxr(p_shared_owners);
      while (__stxr(v32 + 1, p_shared_owners));
      *(_OWORD *)v368 = *(_OWORD *)(a2 + 160);
      *(_OWORD *)&v368[16] = *(_OWORD *)(a2 + 176);
      do
        v33 = __ldxr(p_shared_owners);
      while (__stxr(v33 + 1, p_shared_owners));
      v366 = v27;
      v367 = v28;
      v370 = v31;
      do
        v34 = __ldaxr(p_shared_owners);
      while (__stlxr(v34 - 1, p_shared_owners));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
      do
        v35 = __ldaxr(p_shared_owners);
      while (__stlxr(v35 - 1, p_shared_owners));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
      v372[0] = &off_24EC1F8C8;
      v27 = v366;
      v36 = (unint64_t *)&v28->__shared_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
      v38 = *(_QWORD *)&v368[12];
      v39 = *(_DWORD *)&v368[28];
      v40 = *(_QWORD *)v368;
      v41 = v370;
      do
        v42 = __ldxr(v36);
      while (__stxr(v42 + 1, v36));
      do
        v43 = __ldxr(v36);
      while (__stxr(v43 + 1, v36));
    }
    else
    {
      v367 = 0;
      *(_OWORD *)v369 = *(_OWORD *)(a2 + 160);
      *(_OWORD *)&v369[16] = *(_OWORD *)(a2 + 176);
      v371 = *(_WORD *)(a2 + 208);
      v372[0] = &off_24EC1F8C8;
      v28 = 0;
      v38 = *(_QWORD *)&v369[12];
      v39 = *(_DWORD *)&v369[28];
      v40 = *(_QWORD *)v369;
      v41 = v371;
    }
    v372[1] = v27;
    v373 = v28;
    v374 = v38;
    v375 = 2 * v39;
    v376 = v40;
    v377 = 31;
    v378 = v41;
    if (v28)
    {
      v47 = (unint64_t *)&v28->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
      do
        v49 = __ldaxr(v47);
      while (__stlxr(v49 - 1, v47));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    sub_22416BFE0((uint64_t)v379, (uint64_t)v372, 0, v20, v21, v22, v23, v24);
    *(_OWORD *)v420 = v379[0];
    *(_OWORD *)&v420[12] = *(_OWORD *)((char *)v379 + 12);
    v420[32] = 0;
    LODWORD(v424) = -1;
    v50 = v381;
    if (v381 != -1)
    {
      ((void (*)(_BYTE *, _BYTE *, _BYTE *))off_24EC60008[v381])(v411, &v420[32], v380);
      LODWORD(v424) = v50;
    }
    BYTE8(v424) = 1;
    *(_QWORD *)v416 = *(_QWORD *)(a1 + 8);
    sub_223B94628(v416, a1, (uint64_t)v420);
  }
  else
  {
    v420[0] = 0;
    BYTE8(v424) = 0;
    v416[0] = 0;
    *(_QWORD *)&v416[8] = 0;
    v44 = (unsigned __int8 *)sub_22453FEA0(a1);
    v45 = *v44;
    *v44 = 0;
    v416[0] = v45;
    v46 = *((_QWORD *)v44 + 1);
    *((_QWORD *)v44 + 1) = *(_QWORD *)&v416[8];
    *(_QWORD *)&v416[8] = v46;
    sub_22345337C((void ***)&v416[8], v45);
  }
  if (BYTE8(v424))
  {
    if ((_DWORD)v424 != -1)
      ((void (*)(_BYTE *, _BYTE *))off_24EC5FFD0[v424])(v416, &v420[32]);
    LODWORD(v424) = -1;
  }
  if (v26)
  {
    if (v381 != -1)
      ((void (*)(_BYTE *, _BYTE *))off_24EC5FFD0[v381])(v416, v380);
    v381 = -1;
    v51 = v373;
    if (v373)
    {
      v52 = (unint64_t *)&v373->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    if (v367)
    {
      v54 = (unint64_t *)&v367->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v367->__on_zero_shared)(v367);
        std::__shared_weak_count::__release_weak(v367);
        if (*(_BYTE *)(a2 + 496))
          goto LABEL_61;
LABEL_118:
        v420[0] = 0;
        *(_QWORD *)&v420[8] = 0;
        v114 = (unsigned __int8 *)sub_22453FEA0(a1);
        v115 = *v114;
        *v114 = v420[0];
        v420[0] = v115;
        v116 = *((_QWORD *)v114 + 1);
        *((_QWORD *)v114 + 1) = *(_QWORD *)&v420[8];
        *(_QWORD *)&v420[8] = v116;
        sub_22345337C((void ***)&v420[8], v115);
        goto LABEL_221;
      }
    }
  }
LABEL_60:
  if (!*(_BYTE *)(a2 + 496))
    goto LABEL_118;
LABEL_61:
  sub_22454024C(a1);
  *(_QWORD *)v420 = "version";
  *(_QWORD *)&v420[8] = 7;
  *(_DWORD *)&v420[16] = 2;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v56 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "version";
    *(_QWORD *)(a1 + 80) = 7;
    if (!v56)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_224542048(a1, &v420[16]);
  v57 = *(_DWORD *)&v420[16];
  sub_223B92F28((uint64_t)v420, a2 + 224);
  if (v57 > 1)
  {
    *(_QWORD *)v411 = &off_24EC1F958;
    sub_2231B3FDC((uint64_t)&v411[8]);
    sub_22416BD7C((uint64_t)v416, (uint64_t)v411, 0);
    v91 = *(std::__shared_weak_count **)&v411[16];
    if (!*(_QWORD *)&v411[16])
      goto LABEL_95;
    v92 = (unint64_t *)(*(_QWORD *)&v411[16] + 8);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
      *(_DWORD *)&v416[24] = 0;
      v94 = BYTE8(v421);
      if (BYTE8(v421))
      {
LABEL_96:
        v397 = &off_24EC200A8;
        v95 = *(void ***)&v420[8];
        v96 = *(std::__shared_weak_count **)&v420[16];
        if (*(_QWORD *)&v420[16])
        {
          v97 = (unint64_t *)(*(_QWORD *)&v420[16] + 8);
          do
            v98 = __ldxr(v97);
          while (__stxr(v98 + 1, v97));
          v99 = v421;
          do
            v100 = __ldxr(v97);
          while (__stxr(v100 + 1, v97));
          v400 = *(_OWORD *)&v420[24];
          v401 = *(_QWORD *)&v420[40];
          do
            v101 = __ldxr(v97);
          while (__stxr(v101 + 1, v97));
          v398 = v95;
          v399 = v96;
          v402 = v99;
          do
            v102 = __ldaxr(v97);
          while (__stlxr(v102 - 1, v97));
          if (!v102)
          {
            ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
            std::__shared_weak_count::__release_weak(v96);
          }
          do
            v103 = __ldaxr(v97);
          while (__stlxr(v103 - 1, v97));
          if (!v103)
          {
            ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
            std::__shared_weak_count::__release_weak(v96);
          }
          v403 = &off_24EC1F8C8;
          v104 = v398;
          v105 = v399;
          if (v399)
          {
            v106 = (unint64_t *)&v399->__shared_owners_;
            do
              v107 = __ldxr(v106);
            while (__stxr(v107 + 1, v106));
            v108 = HIDWORD(v401);
            v109 = *((_QWORD *)&v400 + 1);
            v110 = v400;
            v111 = v402;
            do
              v112 = __ldxr(v106);
            while (__stxr(v112 + 1, v106));
            do
              v113 = __ldxr(v106);
            while (__stxr(v113 + 1, v106));
            goto LABEL_185;
          }
        }
        else
        {
          v398 = *(void ***)&v420[8];
          v399 = 0;
          v400 = *(_OWORD *)&v420[24];
          v401 = *(_QWORD *)&v420[40];
          v402 = v421;
          v403 = &off_24EC1F8C8;
          v104 = *(void ***)&v420[8];
          v105 = 0;
        }
        v108 = HIDWORD(v401);
        v109 = *((_QWORD *)&v400 + 1);
        v110 = v400;
        v111 = v402;
LABEL_185:
        v404 = v104;
        v405 = v105;
        v406 = v109;
        v407 = 2 * v108;
        v408 = v110;
        v409 = 3;
        v410 = v111;
        if (v105)
        {
          v156 = (unint64_t *)&v105->__shared_owners_;
          do
            v157 = __ldaxr(v156);
          while (__stlxr(v157 - 1, v156));
          if (!v157)
          {
            ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
            std::__shared_weak_count::__release_weak(v105);
          }
          do
            v158 = __ldaxr(v156);
          while (__stlxr(v158 - 1, v156));
          if (!v158)
          {
            ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
            std::__shared_weak_count::__release_weak(v105);
          }
        }
        sub_22416BFE0((uint64_t)v411, (uint64_t)&v403, 0, v86, v87, v88, v89, v90);
LABEL_194:
        v389 = *(uint64_t (***)())(a1 + 8);
        sub_223B95950(&v389, a1, (unsigned __int16 *)v411);
        if (v414 != -1)
          ((void (*)(uint64_t (***)(), _BYTE *))off_24EC5FFD0[v414])(&v389, &v411[32]);
        v414 = -1;
        if (v94)
        {
          v159 = v405;
          if (v405)
          {
            v160 = (unint64_t *)&v405->__shared_owners_;
            do
              v161 = __ldaxr(v160);
            while (__stlxr(v161 - 1, v160));
            if (!v161)
            {
              ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
              std::__shared_weak_count::__release_weak(v159);
            }
          }
          v162 = v399;
          if (v399)
          {
            v163 = (unint64_t *)&v399->__shared_owners_;
            do
              v164 = __ldaxr(v163);
            while (__stlxr(v164 - 1, v163));
            if (!v164)
            {
              ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
              std::__shared_weak_count::__release_weak(v162);
            }
          }
        }
        if (v419 != -1)
          ((void (*)(_BYTE *, _BYTE *))off_24EC5FFD0[v419])(v411, v417);
        goto LABEL_209;
      }
    }
    else
    {
LABEL_95:
      *(_DWORD *)&v416[24] = 0;
      v94 = BYTE8(v421);
      if (BYTE8(v421))
        goto LABEL_96;
    }
    *(_OWORD *)v411 = *(_OWORD *)v416;
    *(_OWORD *)&v411[12] = *(_OWORD *)&v416[12];
    v411[32] = 0;
    v414 = -1;
    v155 = v419;
    if (v419 != -1)
    {
      ((void (*)(uint64_t (***)(), _BYTE *, _BYTE *))off_24EC5FFF8[v419])(&v403, &v411[32], v417);
      v414 = v155;
    }
    goto LABEL_194;
  }
  LOBYTE(v389) = 0;
  v396 = 0;
  *(_QWORD *)v411 = &off_24EC1F958;
  sub_2231B3FDC((uint64_t)&v411[8]);
  sub_22416BD7C((uint64_t)v416, (uint64_t)v411, 0);
  v63 = *(std::__shared_weak_count **)&v411[16];
  if (!*(_QWORD *)&v411[16])
    goto LABEL_69;
  v64 = (unint64_t *)(*(_QWORD *)&v411[16] + 8);
  do
    v65 = __ldaxr(v64);
  while (__stlxr(v65 - 1, v64));
  if (v65)
  {
LABEL_69:
    *(_DWORD *)&v416[24] = 0;
    v66 = v396;
    if (v396)
      goto LABEL_70;
LABEL_120:
    *(_OWORD *)v411 = *(_OWORD *)v416;
    *(_OWORD *)&v411[12] = *(_OWORD *)&v416[12];
    v411[32] = 0;
    v414 = -1;
    v123 = v419;
    if (v419 != -1)
    {
      ((void (*)(uint64_t (***)(), _BYTE *, _BYTE *))off_24EC5FFF8[v419])(&v397, &v411[32], v417);
      v414 = v123;
    }
    goto LABEL_133;
  }
  ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
  std::__shared_weak_count::__release_weak(v63);
  *(_DWORD *)&v416[24] = 0;
  v66 = v396;
  if (!v396)
    goto LABEL_120;
LABEL_70:
  v397 = &off_24EC21230;
  v67 = v390;
  v68 = v391;
  if (v391)
  {
    v69 = (unint64_t *)&v391->__shared_owners_;
    do
      v70 = __ldxr(v69);
    while (__stxr(v70 + 1, v69));
    v71 = v394;
    do
      v72 = __ldxr(v69);
    while (__stxr(v72 + 1, v69));
    v400 = v392;
    v401 = v393;
    do
      v73 = __ldxr(v69);
    while (__stxr(v73 + 1, v69));
    v398 = v67;
    v399 = v68;
    v402 = v71;
    do
      v74 = __ldaxr(v69);
    while (__stlxr(v74 - 1, v69));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
    do
      v75 = __ldaxr(v69);
    while (__stlxr(v75 - 1, v69));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
    v403 = &off_24EC1F8C8;
    v76 = v398;
    v77 = v399;
    if (v399)
    {
      v78 = (unint64_t *)&v399->__shared_owners_;
      do
        v79 = __ldxr(v78);
      while (__stxr(v79 + 1, v78));
      v80 = HIDWORD(v401);
      v81 = *((_QWORD *)&v400 + 1);
      v82 = v400;
      v83 = v402;
      do
        v84 = __ldxr(v78);
      while (__stxr(v84 + 1, v78));
      do
        v85 = __ldxr(v78);
      while (__stxr(v85 + 1, v78));
      goto LABEL_124;
    }
  }
  else
  {
    v398 = v390;
    v399 = 0;
    v400 = v392;
    v401 = v393;
    v402 = v394;
    v403 = &off_24EC1F8C8;
    v76 = v390;
    v77 = 0;
  }
  v80 = HIDWORD(v401);
  v81 = *((_QWORD *)&v400 + 1);
  v82 = v400;
  v83 = v402;
LABEL_124:
  v404 = v76;
  v405 = v77;
  v406 = v81;
  v407 = 4 * v80;
  v408 = v82;
  v409 = 4;
  v410 = v83;
  if (v77)
  {
    v124 = (unint64_t *)&v77->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
    do
      v126 = __ldaxr(v124);
    while (__stlxr(v126 - 1, v124));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  sub_22416BFE0((uint64_t)v411, (uint64_t)&v403, 0, v58, v59, v60, v61, v62);
LABEL_133:
  v382 = *(_QWORD *)(a1 + 8);
  sub_223B95950(&v382, a1, (unsigned __int16 *)v411);
  if (v414 != -1)
    ((void (*)(uint64_t *, _BYTE *))off_24EC5FFD0[v414])(&v382, &v411[32]);
  v414 = -1;
  if (v66)
  {
    v127 = v405;
    if (v405)
    {
      v128 = (unint64_t *)&v405->__shared_owners_;
      do
        v129 = __ldaxr(v128);
      while (__stlxr(v129 - 1, v128));
      if (!v129)
      {
        ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
        std::__shared_weak_count::__release_weak(v127);
      }
    }
    v130 = v399;
    if (v399)
    {
      v131 = (unint64_t *)&v399->__shared_owners_;
      do
        v132 = __ldaxr(v131);
      while (__stlxr(v132 - 1, v131));
      if (!v132)
      {
        ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
        std::__shared_weak_count::__release_weak(v130);
      }
    }
  }
  if (v419 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_24EC5FFD0[v419])(v411, v417);
  v382 = (uint64_t)&off_24EC1F8C8;
  v133 = v390;
  v134 = v391;
  if (v391)
  {
    v135 = (unint64_t *)&v391->__shared_owners_;
    do
      v136 = __ldxr(v135);
    while (__stxr(v136 + 1, v135));
    v137 = HIDWORD(v393);
    v138 = *((_QWORD *)&v392 + 1);
    v139 = v392;
    v140 = v394;
    do
      v141 = __ldxr(v135);
    while (__stxr(v141 + 1, v135));
    do
      v142 = __ldxr(v135);
    while (__stxr(v142 + 1, v135));
  }
  else
  {
    v137 = HIDWORD(v393);
    v138 = *((_QWORD *)&v392 + 1);
    v139 = v392;
    v140 = v394;
  }
  v383 = (uint64_t)v133;
  v384[0] = v134;
  v384[1] = v138;
  v385 = 4 * v137;
  v386 = v139;
  v387 = 4;
  v388 = v140;
  if (v134)
  {
    v143 = (unint64_t *)&v134->__shared_owners_;
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
    do
      v145 = __ldaxr(v143);
    while (__stlxr(v145 - 1, v143));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  v416[8] = 0;
  v416[24] = 0;
  v417[0] = 0;
  v417[16] = 0;
  v417[24] = 1;
  v418 = 0;
  sub_22432B21C((uint64_t)&v382, 3u, (uint64_t)v411);
  sub_2232C1348((uint64_t)v420, (uint64_t)v411);
  v146 = *(std::__shared_weak_count **)&v411[16];
  if (*(_QWORD *)&v411[16])
  {
    v147 = (unint64_t *)(*(_QWORD *)&v411[16] + 8);
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  v149 = (std::__shared_weak_count *)v384[0];
  if (v384[0])
  {
    v150 = (unint64_t *)(v384[0] + 8);
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  if (v396)
  {
    v389 = &off_24EC27198;
    v152 = v391;
    if (v391)
    {
      v153 = (unint64_t *)&v391->__shared_owners_;
      do
        v154 = __ldaxr(v153);
      while (__stlxr(v154 - 1, v153));
      if (!v154)
      {
        ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
        std::__shared_weak_count::__release_weak(v152);
      }
    }
  }
LABEL_209:
  *(_QWORD *)v416 = *(_QWORD *)(a1 + 8);
  sub_223B95950(v416, a1, (unsigned __int16 *)&v422);
  *(_QWORD *)v416 = *(_QWORD *)(a1 + 8);
  sub_223B95950(v416, a1, (unsigned __int16 *)&__p);
  if ((_DWORD)v433 != -1)
    ((void (*)(_BYTE *, _OWORD *))off_24EC5FFD0[v433])(v416, v432);
  LODWORD(v433) = -1;
  if (v429 != -1)
    ((void (*)(_BYTE *, __int128 *))off_24EC5FFD0[v429])(v416, &v424);
  v429 = -1;
  if (BYTE8(v421))
  {
    *(_QWORD *)v420 = &off_24EC21328;
    v165 = *(std::__shared_weak_count **)&v420[16];
    if (*(_QWORD *)&v420[16])
    {
      v166 = (unint64_t *)(*(_QWORD *)&v420[16] + 8);
      do
        v167 = __ldaxr(v166);
      while (__stlxr(v167 - 1, v166));
      if (!v167)
      {
        ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
        std::__shared_weak_count::__release_weak(v165);
      }
    }
  }
  v168 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v168 - 8);
  *(_QWORD *)(a1 + 56) = v168 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
LABEL_221:
  if (v13 <= 3)
  {
    v420[0] = 0;
    BYTE8(v421) = 0;
    sub_223B93D28(a1, (uint64_t)v420, v117, v118, v119, v120, v121, v122);
  }
  v169 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v169 - 8);
  *(_QWORD *)(a1 + 56) = v169 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  sub_22454024C(a1);
  *(_QWORD *)v420 = "version";
  *(_QWORD *)&v420[8] = 7;
  *(_DWORD *)&v420[16] = 2;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v170 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "version";
    *(_QWORD *)(a1 + 80) = 7;
    if (!v170)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_224542048(a1, &v420[16]);
  v171 = *(_DWORD *)&v420[16];
  sub_223B938AC(a1, a2 + 504, v172, v173, v174, v175, v176, v177);
  if (v171 < 2)
  {
    v420[0] = 0;
    BYTE8(v421) = 0;
    sub_223B941A8(a1, (uint64_t)v420, v178, v179, v180, v181, v182, v183);
  }
  else
  {
    sub_223B93D28(a1, a2 + 568, v178, v179, v180, v181, v182, v183);
  }
  v190 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v190 - 8);
  *(_QWORD *)(a1 + 56) = v190 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (a3 <= 4)
  {
    sub_223B9341C(a1, a2 + 632, v184, v185, v186, v187, v188, v189);
    goto LABEL_272;
  }
  sub_22454024C(a1);
  *(_QWORD *)v420 = "version";
  *(_QWORD *)&v420[8] = 7;
  *(_DWORD *)&v420[16] = 5;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v197 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "version";
    *(_QWORD *)(a1 + 80) = 7;
    if (!v197)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_224542048(a1, &v420[16]);
  v198 = *(_DWORD *)&v420[16];
  sub_223B9341C(a1, a2 + 632, v199, v200, v201, v202, v203, v204);
  if (*(_BYTE *)(a2 + 724))
  {
    if (!*(_BYTE *)(a1 + 88)
      || *(_QWORD *)(a1 + 80) != 7
      || ((v205 = *(int **)(a1 + 72), v206 = *v205, v207 = *(int *)((char *)v205 + 3), v206 == *(_DWORD *)"version")
        ? (v208 = v207 == *(_DWORD *)"sion")
        : (v208 = 0),
          !v208))
    {
      sub_224542124(a1, (float *)(a2 + 720));
    }
    if (v198 < 2)
      goto LABEL_270;
  }
  else
  {
    v420[0] = 0;
    *(_QWORD *)&v420[8] = 0;
    v209 = (unsigned __int8 *)sub_22453FEA0(a1);
    v210 = *v209;
    *v209 = v420[0];
    v420[0] = v210;
    v211 = *((_QWORD *)v209 + 1);
    *((_QWORD *)v209 + 1) = *(_QWORD *)&v420[8];
    *(_QWORD *)&v420[8] = v211;
    sub_22345337C((void ***)&v420[8], v210);
    if (v198 < 2)
      goto LABEL_270;
  }
  if (*(_BYTE *)(a2 + 752))
  {
    v212 = *(_QWORD *)(a2 + 728);
    *(_QWORD *)v420 = (*(_QWORD *)(a2 + 736) - v212) >> 1;
    *(_QWORD *)&v420[8] = v212;
    sub_2245429C8(a1, (uint64_t)v420);
    if (*(_BYTE *)(a2 + 764))
      goto LABEL_251;
  }
  else
  {
    v420[0] = 0;
    *(_QWORD *)&v420[8] = 0;
    v213 = (unsigned __int8 *)sub_22453FEA0(a1);
    v214 = *v213;
    *v213 = v420[0];
    v420[0] = v214;
    v215 = *((_QWORD *)v213 + 1);
    *((_QWORD *)v213 + 1) = *(_QWORD *)&v420[8];
    *(_QWORD *)&v420[8] = v215;
    sub_22345337C((void ***)&v420[8], v214);
    if (*(_BYTE *)(a2 + 764))
    {
LABEL_251:
      sub_224542048(a1, (_DWORD *)(a2 + 760));
      if (*(_BYTE *)(a2 + 772))
        goto LABEL_252;
LABEL_256:
      v420[0] = 0;
      *(_QWORD *)&v420[8] = 0;
      v219 = (unsigned __int8 *)sub_22453FEA0(a1);
      v220 = *v219;
      *v219 = v420[0];
      v420[0] = v220;
      v221 = *((_QWORD *)v219 + 1);
      *((_QWORD *)v219 + 1) = *(_QWORD *)&v420[8];
      *(_QWORD *)&v420[8] = v221;
      sub_22345337C((void ***)&v420[8], v220);
      if (v198 < 3)
        goto LABEL_270;
      goto LABEL_257;
    }
  }
  v420[0] = 0;
  *(_QWORD *)&v420[8] = 0;
  v216 = (unsigned __int8 *)sub_22453FEA0(a1);
  v217 = *v216;
  *v216 = v420[0];
  v420[0] = v217;
  v218 = *((_QWORD *)v216 + 1);
  *((_QWORD *)v216 + 1) = *(_QWORD *)&v420[8];
  *(_QWORD *)&v420[8] = v218;
  sub_22345337C((void ***)&v420[8], v217);
  if (!*(_BYTE *)(a2 + 772))
    goto LABEL_256;
LABEL_252:
  sub_224542048(a1, (_DWORD *)(a2 + 768));
  if (v198 < 3)
    goto LABEL_270;
LABEL_257:
  if (!*(_BYTE *)(a2 + 780))
  {
    v420[0] = 0;
    *(_QWORD *)&v420[8] = 0;
    v222 = (unsigned __int8 *)sub_22453FEA0(a1);
    v223 = *v222;
    *v222 = v420[0];
    v420[0] = v223;
    v224 = *((_QWORD *)v222 + 1);
    *((_QWORD *)v222 + 1) = *(_QWORD *)&v420[8];
    *(_QWORD *)&v420[8] = v224;
    sub_22345337C((void ***)&v420[8], v223);
    if (v198 < 4)
      goto LABEL_270;
LABEL_261:
    sub_22454024C(a1);
    *(_QWORD *)v420 = "version";
    *(_QWORD *)&v420[8] = 7;
    *(_DWORD *)&v420[16] = 2;
    if (**(unsigned __int8 **)(a1 + 40) <= 1u)
    {
      v225 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 72) = "version";
      *(_QWORD *)(a1 + 80) = 7;
      if (!v225)
        *(_BYTE *)(a1 + 88) = 1;
    }
    sub_224542048(a1, &v420[16]);
    sub_223B95A78(a1, a2 + 784);
    v226 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(v226 - 8);
    *(_QWORD *)(a1 + 56) = v226 - 8;
    if (*(_BYTE *)(a1 + 88))
      *(_BYTE *)(a1 + 88) = 0;
    if (v198 != 4)
    {
      if (*(_BYTE *)(a2 + 836))
      {
        v227 = *(_OWORD *)(a2 + 816);
        *(_OWORD *)v420 = *(_OWORD *)(a2 + 800);
        *(_OWORD *)&v420[16] = v227;
        *(_DWORD *)&v420[32] = *(_DWORD *)(a2 + 832);
        *(_QWORD *)v416 = 9;
        *(_QWORD *)&v416[8] = v420;
        sub_2245436F8(a1, (float **)v416);
      }
      else
      {
        v420[0] = 0;
        *(_QWORD *)&v420[8] = 0;
        v228 = (unsigned __int8 *)sub_22453FEA0(a1);
        v229 = *v228;
        *v228 = v420[0];
        v420[0] = v229;
        v230 = *((_QWORD *)v228 + 1);
        *((_QWORD *)v228 + 1) = *(_QWORD *)&v420[8];
        *(_QWORD *)&v420[8] = v230;
        sub_22345337C((void ***)&v420[8], v229);
      }
    }
    goto LABEL_270;
  }
  sub_224542048(a1, (_DWORD *)(a2 + 776));
  if (v198 >= 4)
    goto LABEL_261;
LABEL_270:
  v231 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v231 - 8);
  *(_QWORD *)(a1 + 56) = v231 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
LABEL_272:
  sub_223B938AC(a1, a2 + 840, v191, v192, v193, v194, v195, v196);
  sub_22454024C(a1);
  *(_QWORD *)v420 = "version";
  *(_QWORD *)&v420[8] = 7;
  *(_DWORD *)&v420[16] = 1;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v232 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "version";
    *(_QWORD *)(a1 + 80) = 7;
    if (!v232)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_224542048(a1, &v420[16]);
  v238 = *(unsigned __int8 *)(a2 + 984);
  if (!*(_BYTE *)(a2 + 984))
  {
    v420[0] = 0;
    BYTE8(v424) = 0;
    v416[0] = 0;
    *(_QWORD *)&v416[8] = 0;
    v259 = (unsigned __int8 *)sub_22453FEA0(a1);
    v260 = *v259;
    *v259 = v416[0];
    v416[0] = v260;
    v261 = *((_QWORD *)v259 + 1);
    *((_QWORD *)v259 + 1) = *(_QWORD *)&v416[8];
    *(_QWORD *)&v416[8] = v261;
    sub_22345337C((void ***)&v416[8], v260);
    goto LABEL_311;
  }
  *(_QWORD *)v411 = &off_24EC28E38;
  v239 = *(_QWORD *)(a2 + 912);
  v240 = *(std::__shared_weak_count **)(a2 + 920);
  if (v240)
  {
    v241 = (unint64_t *)&v240->__shared_owners_;
    do
      v242 = __ldxr(v241);
    while (__stxr(v242 + 1, v241));
    v243 = *(_WORD *)(a2 + 976);
    do
      v244 = __ldxr(v241);
    while (__stxr(v244 + 1, v241));
    v245 = *(_OWORD *)(a2 + 944);
    *(_OWORD *)&v411[24] = *(_OWORD *)(a2 + 928);
    *(_OWORD *)&v411[40] = v245;
    v412 = *(_OWORD *)(a2 + 960);
    do
      v246 = __ldxr(v241);
    while (__stxr(v246 + 1, v241));
    *(_QWORD *)&v411[8] = v239;
    *(_QWORD *)&v411[16] = v240;
    v413 = v243;
    do
      v247 = __ldaxr(v241);
    while (__stlxr(v247 - 1, v241));
    if (!v247)
    {
      ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
      std::__shared_weak_count::__release_weak(v240);
    }
    do
      v248 = __ldaxr(v241);
    while (__stlxr(v248 - 1, v241));
    if (!v248)
    {
      ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
      std::__shared_weak_count::__release_weak(v240);
    }
    v389 = &off_24EC1F8C8;
    v249 = *(void ***)&v411[8];
    v250 = *(std::__shared_weak_count **)&v411[16];
    if (*(_QWORD *)&v411[16])
    {
      v251 = (unint64_t *)(*(_QWORD *)&v411[16] + 8);
      do
        v252 = __ldxr(v251);
      while (__stxr(v252 + 1, v251));
      v253 = *(_QWORD *)&v411[36];
      v254 = *(_DWORD *)&v411[52];
      v255 = *(_QWORD *)&v411[24];
      v256 = v413;
      do
        v257 = __ldxr(v251);
      while (__stxr(v257 + 1, v251));
      do
        v258 = __ldxr(v251);
      while (__stxr(v258 + 1, v251));
      goto LABEL_300;
    }
  }
  else
  {
    v268 = *(_WORD *)(a2 + 976);
    *(_QWORD *)&v411[8] = *(_QWORD *)(a2 + 912);
    *(_QWORD *)&v411[16] = 0;
    v269 = *(_OWORD *)(a2 + 944);
    *(_OWORD *)&v411[24] = *(_OWORD *)(a2 + 928);
    *(_OWORD *)&v411[40] = v269;
    v412 = *(_OWORD *)(a2 + 960);
    v413 = v268;
    v389 = &off_24EC1F8C8;
    v249 = *(void ***)&v411[8];
    v250 = 0;
  }
  v253 = *(_QWORD *)&v411[36];
  v254 = *(_DWORD *)&v411[52];
  v255 = *(_QWORD *)&v411[24];
  v256 = v413;
LABEL_300:
  v390 = v249;
  v391 = v250;
  *(_QWORD *)&v392 = v253;
  DWORD2(v392) = v254;
  v393 = v255;
  v394 = 25;
  v395 = v256;
  if (v250)
  {
    v270 = (unint64_t *)&v250->__shared_owners_;
    do
      v271 = __ldaxr(v270);
    while (__stlxr(v271 - 1, v270));
    if (!v271)
    {
      ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
      std::__shared_weak_count::__release_weak(v250);
    }
    do
      v272 = __ldaxr(v270);
    while (__stlxr(v272 - 1, v270));
    if (!v272)
    {
      ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
      std::__shared_weak_count::__release_weak(v250);
    }
  }
  sub_22416BFE0((uint64_t)v416, (uint64_t)&v389, 0, v233, v234, v235, v236, v237);
  *(_OWORD *)v420 = *(_OWORD *)v416;
  *(_OWORD *)&v420[12] = *(_OWORD *)&v416[12];
  v420[32] = 0;
  LODWORD(v424) = -1;
  v273 = v419;
  if (v419 != -1)
  {
    ((void (*)(uint64_t *, _BYTE *, _BYTE *))off_24EC60008[v419])(v415, &v420[32], v417);
    LODWORD(v424) = v273;
  }
  BYTE8(v424) = 1;
  v382 = *(_QWORD *)(a1 + 8);
  sub_223B94628(&v382, a1, (uint64_t)v420);
LABEL_311:
  if (BYTE8(v424))
  {
    if ((_DWORD)v424 != -1)
      ((void (*)(uint64_t *, _BYTE *))off_24EC5FFD0[v424])(&v382, &v420[32]);
    LODWORD(v424) = -1;
  }
  if (v238)
  {
    if (v419 != -1)
      ((void (*)(uint64_t *, _BYTE *))off_24EC5FFD0[v419])(&v382, v417);
    v419 = -1;
    v274 = v391;
    if (v391)
    {
      v275 = (unint64_t *)&v391->__shared_owners_;
      do
        v276 = __ldaxr(v275);
      while (__stlxr(v276 - 1, v275));
      if (!v276)
      {
        ((void (*)(std::__shared_weak_count *))v274->__on_zero_shared)(v274);
        std::__shared_weak_count::__release_weak(v274);
      }
    }
    v277 = *(std::__shared_weak_count **)&v411[16];
    if (*(_QWORD *)&v411[16])
    {
      v278 = (unint64_t *)(*(_QWORD *)&v411[16] + 8);
      do
        v279 = __ldaxr(v278);
      while (__stlxr(v279 - 1, v278));
      if (!v279)
      {
        ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
        std::__shared_weak_count::__release_weak(v277);
      }
    }
  }
  sub_223B9341C(a1, a2 + 992, v262, v263, v264, v265, v266, v267);
  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v280 = *(int **)(a1 + 72), v281 = *v280, v282 = *(int *)((char *)v280 + 3), v281 == *(_DWORD *)"version")
      ? (v283 = v282 == *(_DWORD *)"sion")
      : (v283 = 0),
        !v283))
  {
    v284 = *(unsigned __int8 *)(a2 + 1080);
    v420[0] = 6;
    *(_QWORD *)&v420[8] = v284;
    v285 = (unsigned __int8 *)sub_22453FEA0(a1);
    v286 = *v285;
    *v285 = v420[0];
    v420[0] = v286;
    v287 = *((_QWORD *)v285 + 1);
    *((_QWORD *)v285 + 1) = *(_QWORD *)&v420[8];
    *(_QWORD *)&v420[8] = v287;
    sub_22345337C((void ***)&v420[8], v286);
  }
  *(_QWORD *)v420 = 3;
  *(_QWORD *)&v420[8] = a2 + 1084;
  sub_2245436F8(a1, (float **)v420);
  v288 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v288 - 8);
  *(_QWORD *)(a1 + 56) = v288 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  v289 = *(_QWORD *)(a2 + 1136);
  v420[0] = 5;
  *(_QWORD *)&v420[8] = v289;
  v290 = (unsigned __int8 *)sub_22453FEA0(a1);
  v291 = *v290;
  *v290 = v420[0];
  v420[0] = v291;
  v292 = *((_QWORD *)v290 + 1);
  *((_QWORD *)v290 + 1) = *(_QWORD *)&v420[8];
  *(_QWORD *)&v420[8] = v292;
  sub_22345337C((void ***)&v420[8], v291);
  sub_223B95BE8((uint64_t)v420, a1, a2 + 1144);
  *(_QWORD *)v420 = 16;
  *(_QWORD *)&v420[8] = a2 + 1184;
  sub_224543B18(a1, v420);
  if (a3 == 1)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/include/Reconstruction/Frame/FrameBundleSample.h", 528, (uint64_t)"io::is_input_archive_v<Archive>", 31, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v420[0] = 0;
    LOBYTE(v432[0]) = 0;
    LOBYTE(v382) = 0;
    v383 = 0;
    v293 = (unsigned __int8 *)sub_22453FEA0(a1);
    v294 = *v293;
    *v293 = v382;
    LOBYTE(v382) = v294;
    v295 = (void **)*((_QWORD *)v293 + 1);
    *((_QWORD *)v293 + 1) = v383;
    v383 = (uint64_t)v295;
    sub_22345337C((void ***)&v383, v294);
    if (!LOBYTE(v432[0]))
      goto LABEL_371;
    v296 = *(unsigned __int8 *)(a2 + 1512);
    *(_OWORD *)(a2 + 1312) = *(_OWORD *)v420;
    *(_DWORD *)(a2 + 1328) = *(_DWORD *)&v420[16];
    v297 = (char **)(a2 + 1336);
    if (v296)
    {
      sub_2232C6B24(v297, (char **)&v420[24]);
      *(_BYTE *)(a2 + 1504) = BYTE8(v431);
      if (!LOBYTE(v432[0]))
        goto LABEL_371;
LABEL_357:
      if ((_QWORD)__p)
      {
        *((_QWORD *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      if (v427)
      {
        v428 = (char *)v427;
        operator delete(v427);
      }
      if (*((_QWORD *)&v425 + 1))
      {
        v426 = *((_QWORD *)&v425 + 1);
        operator delete(*((void **)&v425 + 1));
      }
      if ((_QWORD)v424)
      {
        *((_QWORD *)&v424 + 1) = v424;
        operator delete((void *)v424);
      }
      if (*((_QWORD *)&v422 + 1))
      {
        *(_QWORD *)&v423 = *((_QWORD *)&v422 + 1);
        operator delete(*((void **)&v422 + 1));
      }
      if ((_QWORD)v421)
      {
        *((_QWORD *)&v421 + 1) = v421;
        operator delete((void *)v421);
      }
      if (*(_QWORD *)&v420[24])
      {
        *(_QWORD *)&v420[32] = *(_QWORD *)&v420[24];
        operator delete(*(void **)&v420[24]);
      }
      goto LABEL_371;
    }
    sub_2232C6D24(v297, (uint64_t)&v420[24]);
    v302 = BYTE8(v431);
    *(_BYTE *)(a2 + 1512) = 1;
    *(_BYTE *)(a2 + 1504) = v302;
    if (LOBYTE(v432[0]))
      goto LABEL_357;
LABEL_371:
    *(_DWORD *)v420 = 0;
    sub_224542048(a1, v420);
    goto LABEL_372;
  }
  if (a3 <= 6)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/include/Reconstruction/Frame/FrameBundleSample.h", 535, (uint64_t)"io::is_input_archive_v<Archive>", 31, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    memset(v420, 0, 24);
    sub_22454024C(a1);
    v298 = *(_QWORD *)(a1 + 56);
    v299 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(v298 - 8);
    *(_QWORD *)(a1 + 56) = v298 - 8;
    if (v299)
      *(_BYTE *)(a1 + 88) = 0;
    if (a3 > 4)
    {
LABEL_372:
      if (*(_BYTE *)(a2 + 1648))
        goto LABEL_373;
      goto LABEL_376;
    }
    goto LABEL_371;
  }
  if (*(_BYTE *)(a2 + 1512))
  {
    sub_22454024C(a1);
    *(_QWORD *)v420 = "version";
    *(_QWORD *)&v420[8] = 7;
    *(_DWORD *)&v420[16] = 4;
    if (**(unsigned __int8 **)(a1 + 40) <= 1u)
    {
      v300 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 72) = "version";
      *(_QWORD *)(a1 + 80) = 7;
      if (!v300)
        *(_BYTE *)(a1 + 88) = 1;
    }
    sub_224542048(a1, &v420[16]);
    sub_223B95D74(a1, (__int128 *)(a2 + 1312), *(unsigned int *)&v420[16]);
    v301 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(v301 - 8);
    *(_QWORD *)(a1 + 56) = v301 - 8;
    if (*(_BYTE *)(a1 + 88))
    {
      *(_BYTE *)(a1 + 88) = 0;
      if (*(_BYTE *)(a2 + 1648))
        goto LABEL_373;
      goto LABEL_376;
    }
    goto LABEL_372;
  }
  v420[0] = 0;
  *(_QWORD *)&v420[8] = 0;
  v303 = (unsigned __int8 *)sub_22453FEA0(a1);
  v304 = *v303;
  *v303 = v420[0];
  v420[0] = v304;
  v305 = *((_QWORD *)v303 + 1);
  *((_QWORD *)v303 + 1) = *(_QWORD *)&v420[8];
  *(_QWORD *)&v420[8] = v305;
  sub_22345337C((void ***)&v420[8], v304);
  if (*(_BYTE *)(a2 + 1648))
  {
LABEL_373:
    *(_QWORD *)v420 = *(_QWORD *)(a1 + 8);
    sub_223B965DC((uint64_t)v420, a1, (__int128 *)(a2 + 1520));
    if (a3 < 3)
      return;
    goto LABEL_377;
  }
LABEL_376:
  v420[0] = 0;
  *(_QWORD *)&v420[8] = 0;
  v306 = (unsigned __int8 *)sub_22453FEA0(a1);
  v307 = *v306;
  *v306 = v420[0];
  v420[0] = v307;
  v308 = *((_QWORD *)v306 + 1);
  *((_QWORD *)v306 + 1) = *(_QWORD *)&v420[8];
  *(_QWORD *)&v420[8] = v308;
  sub_22345337C((void ***)&v420[8], v307);
  if (a3 < 3)
    return;
LABEL_377:
  sub_22454024C(a1);
  v309 = *(_QWORD *)(a2 + 1656);
  v365 = *(_QWORD *)(a2 + 1664);
  if (v309 != v365)
  {
    v364 = a2;
    while (1)
    {
      sub_22454024C(a1);
      *(_QWORD *)v420 = "version";
      *(_QWORD *)&v420[8] = 7;
      *(_DWORD *)&v420[16] = 1;
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v310 = *(unsigned __int8 *)(a1 + 88);
        *(_QWORD *)(a1 + 72) = "version";
        *(_QWORD *)(a1 + 80) = 7;
        if (!v310)
          *(_BYTE *)(a1 + 88) = 1;
      }
      sub_224542048(a1, &v420[16]);
      *(_OWORD *)v420 = *(_OWORD *)v309;
      v311 = *(_OWORD *)(v309 + 16);
      v312 = *(_OWORD *)(v309 + 32);
      v313 = *(_OWORD *)(v309 + 64);
      v421 = *(_OWORD *)(v309 + 48);
      v422 = v313;
      *(_OWORD *)&v420[16] = v311;
      *(_OWORD *)&v420[32] = v312;
      v314 = *(_OWORD *)(v309 + 80);
      v315 = *(_OWORD *)(v309 + 96);
      v316 = *(_OWORD *)(v309 + 112);
      v426 = *(_QWORD *)(v309 + 128);
      v424 = v315;
      v425 = v316;
      v423 = v314;
      sub_223B9317C(&v427, (uint64_t *)(v309 + 144));
      __p = *(_OWORD *)(v309 + 168);
      v317 = *(_OWORD *)(v309 + 184);
      v318 = *(_OWORD *)(v309 + 200);
      v319 = *(_OWORD *)(v309 + 232);
      v432[1] = *(_OWORD *)(v309 + 216);
      v432[2] = v319;
      v431 = v317;
      v432[0] = v318;
      v320 = *(_OWORD *)(v309 + 248);
      v321 = *(_OWORD *)(v309 + 264);
      v322 = *(_OWORD *)(v309 + 280);
      v435 = *(_DWORD *)(v309 + 296);
      v433 = v321;
      v434 = v322;
      v432[3] = v320;
      if (!*(_BYTE *)(a1 + 88)
        || *(_QWORD *)(a1 + 80) != 7
        || ((v323 = *(int **)(a1 + 72), v324 = *v323, v325 = *(int *)((char *)v323 + 3), v324 == *(_DWORD *)"version")
          ? (v326 = v325 == *(_DWORD *)"sion")
          : (v326 = 0),
            !v326))
      {
        LOBYTE(v382) = 5;
        v383 = *(_QWORD *)v420;
        v327 = (unsigned __int8 *)sub_22453FEA0(a1);
        v328 = *v327;
        *v327 = v382;
        LOBYTE(v382) = v328;
        v329 = (void **)*((_QWORD *)v327 + 1);
        *((_QWORD *)v327 + 1) = v383;
        v383 = (uint64_t)v329;
        sub_22345337C((void ***)&v383, v328);
      }
      v382 = 16;
      v383 = (uint64_t)&v420[8];
      sub_224543B18(a1, &v382);
      sub_22454024C(a1);
      v382 = (uint64_t)"version";
      v383 = 7;
      LODWORD(v384[0]) = 2;
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v330 = *(unsigned __int8 *)(a1 + 88);
        *(_QWORD *)(a1 + 72) = "version";
        *(_QWORD *)(a1 + 80) = 7;
        if (!v330)
          *(_BYTE *)(a1 + 88) = 1;
      }
      sub_224542048(a1, v384);
      if (LODWORD(v384[0]) == 1)
      {
        memset(v415, 0, sizeof(v415));
        sub_22454024C(a1);
        v382 = (uint64_t)"version";
        v383 = 7;
        LODWORD(v384[0]) = 1;
        if (**(unsigned __int8 **)(a1 + 40) <= 1u)
        {
          v331 = *(unsigned __int8 *)(a1 + 88);
          *(_QWORD *)(a1 + 72) = "version";
          *(_QWORD *)(a1 + 80) = 7;
          if (!v331)
            *(_BYTE *)(a1 + 88) = 1;
        }
        sub_224542048(a1, v384);
        sub_223B966E8(a1, v415);
        v332 = *(_QWORD *)(a1 + 56);
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(v332 - 8);
        *(_QWORD *)(a1 + 56) = v332 - 8;
        if (*(_BYTE *)(a1 + 88))
          *(_BYTE *)(a1 + 88) = 0;
      }
      sub_22454024C(a1);
      v382 = (uint64_t)"version";
      v383 = 7;
      LODWORD(v384[0]) = 1;
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v333 = *(unsigned __int8 *)(a1 + 88);
        *(_QWORD *)(a1 + 72) = "version";
        *(_QWORD *)(a1 + 80) = 7;
        if (!v333)
          *(_BYTE *)(a1 + 88) = 1;
      }
      sub_224542048(a1, v384);
      sub_223B966E8(a1, (uint64_t *)&v427);
      v334 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(v334 - 8);
      *(_QWORD *)(a1 + 56) = v334 - 8;
      if (*(_BYTE *)(a1 + 88))
        *(_BYTE *)(a1 + 88) = 0;
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(v334 - 16);
      *(_QWORD *)(a1 + 56) = v334 - 16;
      if ((_BYTE)v435)
      {
        v382 = *(_QWORD *)(a1 + 8);
        sub_223B965DC((uint64_t)&v382, a1, &__p);
        v335 = (char *)v427;
        if (v427)
          goto LABEL_408;
      }
      else
      {
        LOBYTE(v382) = 0;
        v383 = 0;
        v336 = (unsigned __int8 *)sub_22453FEA0(a1);
        v337 = *v336;
        *v336 = v382;
        LOBYTE(v382) = v337;
        v338 = (void **)*((_QWORD *)v336 + 1);
        *((_QWORD *)v336 + 1) = v383;
        v383 = (uint64_t)v338;
        sub_22345337C((void ***)&v383, v337);
        v335 = (char *)v427;
        if (v427)
        {
LABEL_408:
          v339 = v428;
          v340 = v335;
          if (v428 != v335)
          {
            v341 = v428;
            do
            {
              v343 = (void *)*((_QWORD *)v341 - 3);
              v341 -= 24;
              v342 = v343;
              if (v343)
              {
                *(v339 - 2) = v342;
                operator delete(v342);
              }
              v339 = v341;
            }
            while (v341 != v335);
            v340 = v427;
          }
          v428 = v335;
          operator delete(v340);
        }
      }
      v344 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(v344 - 8);
      *(_QWORD *)(a1 + 56) = v344 - 8;
      if (*(_BYTE *)(a1 + 88))
        *(_BYTE *)(a1 + 88) = 0;
      v309 += 304;
      a2 = v364;
      if (v309 == v365)
      {
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(v344 - 16);
        *(_QWORD *)(a1 + 56) = v344 - 16;
        goto LABEL_420;
      }
    }
  }
  v345 = *(_QWORD *)(a1 + 56);
  v346 = *(unsigned __int8 *)(a1 + 88);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v345 - 8);
  *(_QWORD *)(a1 + 56) = v345 - 8;
  if (v346)
    *(_BYTE *)(a1 + 88) = 0;
LABEL_420:
  if (a3 >= 6)
  {
    sub_22454024C(a1);
    *(_QWORD *)v420 = "version";
    *(_QWORD *)&v420[8] = 7;
    *(_DWORD *)&v420[16] = 1;
    if (**(unsigned __int8 **)(a1 + 40) <= 1u)
    {
      v347 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 72) = "version";
      *(_QWORD *)(a1 + 80) = 7;
      if (!v347)
        *(_BYTE *)(a1 + 88) = 1;
    }
    sub_224542048(a1, &v420[16]);
    if (*(_BYTE *)(a1 + 88)
      && *(_QWORD *)(a1 + 80) == 7
      && ((v348 = *(int **)(a1 + 72), v349 = *v348, v350 = *(int *)((char *)v348 + 3), v349 == *(_DWORD *)"version")
        ? (v351 = v350 == *(_DWORD *)"sion")
        : (v351 = 0),
          v351))
    {
      v358 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(v358 - 8);
      *(_QWORD *)(a1 + 56) = v358 - 8;
    }
    else
    {
      v352 = *(unsigned __int8 *)(a2 + 1680);
      v420[0] = 6;
      *(_QWORD *)&v420[8] = v352;
      v353 = (unsigned __int8 *)sub_22453FEA0(a1);
      v354 = *v353;
      *v353 = v420[0];
      v420[0] = v354;
      v355 = *((_QWORD *)v353 + 1);
      *((_QWORD *)v353 + 1) = *(_QWORD *)&v420[8];
      *(_QWORD *)&v420[8] = v355;
      sub_22345337C((void ***)&v420[8], v354);
      v356 = *(unsigned __int8 *)(a1 + 88);
      v357 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(v357 - 8);
      *(_QWORD *)(a1 + 56) = v357 - 8;
      if (!v356)
      {
        if (a3 < 8)
          return;
LABEL_435:
        if (*(_BYTE *)(a2 + 1682))
        {
          v359 = *(unsigned __int8 *)(a2 + 1681);
          v420[0] = 4;
          *(_QWORD *)&v420[8] = v359;
        }
        else
        {
          v420[0] = 0;
          *(_QWORD *)&v420[8] = 0;
        }
        v360 = (unsigned __int8 *)sub_22453FEA0(a1);
        v361 = *v360;
        *v360 = v420[0];
        v420[0] = v361;
        v362 = *((_QWORD *)v360 + 1);
        *((_QWORD *)v360 + 1) = *(_QWORD *)&v420[8];
        *(_QWORD *)&v420[8] = v362;
        sub_22345337C((void ***)&v420[8], v361);
        return;
      }
    }
    *(_BYTE *)(a1 + 88) = 0;
    if (a3 < 8)
      return;
    goto LABEL_435;
  }
}

void sub_223B91BF0(_Unwind_Exception *a1)
{
  void ***v1;

  sub_22345337C(v1, LOBYTE(STACK[0x2F0]));
  _Unwind_Resume(a1);
}

void sub_223B91C08(_Unwind_Exception *a1)
{
  void ***v1;

  sub_22345337C(v1, LOBYTE(STACK[0x2F0]));
  _Unwind_Resume(a1);
}

void sub_223B91C20(_Unwind_Exception *a1)
{
  void ***v1;

  sub_22345337C(v1, LOBYTE(STACK[0x2F0]));
  _Unwind_Resume(a1);
}

void sub_223B91C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;

  v54 = LODWORD(STACK[0x260]);
  if ((_DWORD)v54 != -1)
    (*(void (**)(char *, uint64_t))(v52 + 8 * v54))(&a51, v51);
  sub_22319A588((uint64_t)&STACK[0x288]);
  sub_223B88F34((uint64_t)&STACK[0x2F0]);
  _Unwind_Resume(a1);
}

void sub_223B91E00()
{
  int v0;

  sub_22319A588((uint64_t)&STACK[0x200]);
  if (v0)
    JUMPOUT(0x223B91E10);
  JUMPOUT(0x223B91E20);
}

void sub_223B91E2C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)STACK[0x210];
  if (STACK[0x210])
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      sub_223B88F34((uint64_t)&STACK[0x2F0]);
      _Unwind_Resume(a1);
    }
  }
  sub_223B88F34((uint64_t)&STACK[0x2F0]);
  _Unwind_Resume(a1);
}

void sub_223B91E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  unint64_t v54;

  v52 = (std::__shared_weak_count *)STACK[0x210];
  if (STACK[0x210])
  {
    p_shared_owners = (unint64_t *)&v52->__shared_owners_;
    do
      v54 = __ldaxr(p_shared_owners);
    while (__stlxr(v54 - 1, p_shared_owners));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  sub_2232BBEF8((uint64_t)&a51);
  sub_223B88F34((uint64_t)&STACK[0x2F0]);
  _Unwind_Resume(a1);
}

void sub_223B91ED4(_Unwind_Exception *a1)
{
  void ***v1;

  sub_22345337C(v1, LOBYTE(STACK[0x2F0]));
  _Unwind_Resume(a1);
}

void sub_223B91F0C(_Unwind_Exception *a1)
{
  void ***v1;

  sub_22345337C(v1, LOBYTE(STACK[0x2F0]));
  _Unwind_Resume(a1);
}

void sub_223B91F24(_Unwind_Exception *a1)
{
  sub_223255D3C((uint64_t)&STACK[0x2F0]);
  _Unwind_Resume(a1);
}

void sub_223B91F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;

  v54 = LODWORD(STACK[0x350]);
  if ((_DWORD)v54 != -1)
    (*(void (**)(char *, uint64_t))(v52 + 8 * v54))(&a44, v51);
  LODWORD(STACK[0x350]) = -1;
  sub_22319A588((uint64_t)&STACK[0x288]);
  sub_22319A5E0((uint64_t)&a51);
  sub_2232CDB08((uint64_t)&STACK[0x200]);
  _Unwind_Resume(a1);
}

void sub_223B91F74(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_223B91F84()
{
  sub_2232C17E0((uint64_t)&STACK[0x2F0]);
  JUMPOUT(0x223B91F90);
}

void sub_223B91FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  sub_22319A5E0((uint64_t)va1);
  sub_2231D4840((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223B91FCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,unsigned __int8 a44)
{
  void ***v44;

  sub_22345337C(v44, a44);
  JUMPOUT(0x223B91FDCLL);
}

void sub_223B91FF8(_Unwind_Exception *a1)
{
  sub_2232BBEF8((uint64_t)&STACK[0x2F0]);
  _Unwind_Resume(a1);
}

void sub_223B9200C(_Unwind_Exception *a1)
{
  sub_2232BBF74((uint64_t)&STACK[0x2F0]);
  _Unwind_Resume(a1);
}

void sub_223B92020(_Unwind_Exception *a1)
{
  sub_2232BBEF8((uint64_t)&STACK[0x2F0]);
  _Unwind_Resume(a1);
}

void sub_223B92034()
{
  sub_2232C17E0((uint64_t)&STACK[0x2F0]);
  JUMPOUT(0x223B92040);
}

void sub_223B92060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  sub_22319A5E0((uint64_t)&a51);
  sub_2232CDB08((uint64_t)&STACK[0x200]);
  _Unwind_Resume(a1);
}

void sub_223B9207C(_Unwind_Exception *a1)
{
  sub_2232BBEF8((uint64_t)&STACK[0x2F0]);
  _Unwind_Resume(a1);
}

void sub_223B92090(_Unwind_Exception *a1)
{
  void ***v1;

  sub_22345337C(v1, LOBYTE(STACK[0x2F0]));
  _Unwind_Resume(a1);
}

void sub_223B920A8(_Unwind_Exception *a1)
{
  void ***v1;

  sub_22345337C(v1, LOBYTE(STACK[0x2F0]));
  _Unwind_Resume(a1);
}

void sub_223B920D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,unsigned __int8 a44)
{
  void ***v44;
  unint64_t v46;
  unint64_t v47;
  void *v48;
  unint64_t v49;
  void *v50;
  void *v51;

  sub_22345337C(v44, a44);
  v46 = STACK[0x380];
  if (!STACK[0x380])
    JUMPOUT(0x223B920FCLL);
  v47 = STACK[0x388];
  v48 = (void *)STACK[0x380];
  if (STACK[0x388] != v46)
  {
    v49 = STACK[0x388];
    do
    {
      v51 = *(void **)(v49 - 24);
      v49 -= 24;
      v50 = v51;
      if (v51)
      {
        *(_QWORD *)(v47 - 16) = v50;
        operator delete(v50);
      }
      v47 = v49;
    }
    while (v49 != v46);
    v48 = (void *)STACK[0x380];
  }
  STACK[0x388] = v46;
  operator delete(v48);
  _Unwind_Resume(a1);
}

uint64_t sub_223B92150(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int16 v8;
  unint64_t v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int16 v14;
  __int128 v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __int16 v20;
  unint64_t v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __int16 v26;
  __int128 v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  __int16 v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  __int16 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  __int16 v46;
  unint64_t v47;
  __int128 v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  __int16 v52;
  __int128 v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  __int16 v58;
  unint64_t v59;
  __int128 v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  __int16 v64;
  __int128 v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  __int16 v70;
  unint64_t v71;
  __int128 v72;
  __int128 v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  __int16 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  __int16 v87;
  unint64_t v88;
  __int128 v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  __int16 v93;
  __int128 v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  __int16 v99;
  unint64_t v100;
  __int128 v101;
  __int128 v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  __int16 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  __int16 v113;
  unint64_t v114;
  __int128 v115;
  __int128 v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  __int16 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int16 v154;

  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  if (*(_BYTE *)(a2 + 64))
  {
    *(_QWORD *)(a1 + 8) = &off_24EC21328;
    v4 = *(_QWORD *)(a2 + 16);
    v5 = *(std::__shared_weak_count **)(a2 + 24);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v8 = *(_WORD *)(a2 + 56);
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      v10 = *(_OWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = v10;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      *(_QWORD *)(a1 + 16) = v4;
      *(_QWORD *)(a1 + 24) = v5;
      *(_WORD *)(a1 + 56) = v8;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      v14 = *(_WORD *)(a2 + 56);
      *(_QWORD *)(a1 + 16) = v4;
      *(_QWORD *)(a1 + 24) = 0;
      v15 = *(_OWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = v15;
      *(_WORD *)(a1 + 56) = v14;
    }
    *(_BYTE *)(a1 + 64) = 1;
  }
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  if (*(_BYTE *)(a2 + 128))
  {
    *(_QWORD *)(a1 + 72) = &off_24EC21328;
    v16 = *(_QWORD *)(a2 + 80);
    v17 = *(std::__shared_weak_count **)(a2 + 88);
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      v20 = *(_WORD *)(a2 + 120);
      do
        v21 = __ldxr(v18);
      while (__stxr(v21 + 1, v18));
      v22 = *(_OWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = v22;
      do
        v23 = __ldxr(v18);
      while (__stxr(v23 + 1, v18));
      *(_QWORD *)(a1 + 80) = v16;
      *(_QWORD *)(a1 + 88) = v17;
      *(_WORD *)(a1 + 120) = v20;
      do
        v24 = __ldaxr(v18);
      while (__stlxr(v24 - 1, v18));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
      do
        v25 = __ldaxr(v18);
      while (__stlxr(v25 - 1, v18));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    else
    {
      v26 = *(_WORD *)(a2 + 120);
      *(_QWORD *)(a1 + 80) = v16;
      *(_QWORD *)(a1 + 88) = 0;
      v27 = *(_OWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = v27;
      *(_WORD *)(a1 + 120) = v26;
    }
    *(_BYTE *)(a1 + 128) = 1;
  }
  *(_BYTE *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  if (*(_BYTE *)(a2 + 216))
  {
    *(_QWORD *)(a1 + 136) = &off_24EC26FA8;
    v28 = *(_QWORD *)(a2 + 144);
    v29 = *(std::__shared_weak_count **)(a2 + 152);
    if (v29)
    {
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      v32 = *(_WORD *)(a2 + 208);
      do
        v33 = __ldxr(v30);
      while (__stxr(v33 + 1, v30));
      v34 = *(_OWORD *)(a2 + 160);
      v35 = *(_OWORD *)(a2 + 192);
      *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 192) = v35;
      *(_OWORD *)(a1 + 160) = v34;
      do
        v36 = __ldxr(v30);
      while (__stxr(v36 + 1, v30));
      *(_QWORD *)(a1 + 144) = v28;
      *(_QWORD *)(a1 + 152) = v29;
      *(_WORD *)(a1 + 208) = v32;
      do
        v37 = __ldaxr(v30);
      while (__stlxr(v37 - 1, v30));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
      do
        v38 = __ldaxr(v30);
      while (__stlxr(v38 - 1, v30));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    else
    {
      v39 = *(_WORD *)(a2 + 208);
      *(_QWORD *)(a1 + 144) = v28;
      *(_QWORD *)(a1 + 152) = 0;
      v40 = *(_OWORD *)(a2 + 160);
      v41 = *(_OWORD *)(a2 + 192);
      *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 192) = v41;
      *(_OWORD *)(a1 + 160) = v40;
      *(_WORD *)(a1 + 208) = v39;
    }
    *(_BYTE *)(a1 + 216) = 1;
  }
  *(_BYTE *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 496) = 0;
  if (*(_BYTE *)(a2 + 496))
  {
    sub_223B92F28(a1 + 224, a2 + 224);
    *(_BYTE *)(a1 + 496) = 1;
  }
  *(_BYTE *)(a1 + 504) = 0;
  *(_BYTE *)(a1 + 560) = 0;
  if (*(_BYTE *)(a2 + 560))
  {
    *(_QWORD *)(a1 + 504) = &off_24EC270A0;
    v42 = *(_QWORD *)(a2 + 512);
    v43 = *(std::__shared_weak_count **)(a2 + 520);
    if (v43)
    {
      v44 = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
      v46 = *(_WORD *)(a2 + 552);
      do
        v47 = __ldxr(v44);
      while (__stxr(v47 + 1, v44));
      v48 = *(_OWORD *)(a2 + 528);
      *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
      *(_OWORD *)(a1 + 528) = v48;
      do
        v49 = __ldxr(v44);
      while (__stxr(v49 + 1, v44));
      *(_QWORD *)(a1 + 512) = v42;
      *(_QWORD *)(a1 + 520) = v43;
      *(_WORD *)(a1 + 552) = v46;
      do
        v50 = __ldaxr(v44);
      while (__stlxr(v50 - 1, v44));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
      do
        v51 = __ldaxr(v44);
      while (__stlxr(v51 - 1, v44));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    else
    {
      v52 = *(_WORD *)(a2 + 552);
      *(_QWORD *)(a1 + 512) = v42;
      *(_QWORD *)(a1 + 520) = 0;
      v53 = *(_OWORD *)(a2 + 528);
      *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
      *(_OWORD *)(a1 + 528) = v53;
      *(_WORD *)(a1 + 552) = v52;
    }
    *(_BYTE *)(a1 + 560) = 1;
  }
  *(_BYTE *)(a1 + 568) = 0;
  *(_BYTE *)(a1 + 624) = 0;
  if (*(_BYTE *)(a2 + 624))
  {
    *(_QWORD *)(a1 + 568) = &off_24EC21328;
    v54 = *(_QWORD *)(a2 + 576);
    v55 = *(std::__shared_weak_count **)(a2 + 584);
    if (v55)
    {
      v56 = (unint64_t *)&v55->__shared_owners_;
      do
        v57 = __ldxr(v56);
      while (__stxr(v57 + 1, v56));
      v58 = *(_WORD *)(a2 + 616);
      do
        v59 = __ldxr(v56);
      while (__stxr(v59 + 1, v56));
      v60 = *(_OWORD *)(a2 + 592);
      *(_QWORD *)(a1 + 608) = *(_QWORD *)(a2 + 608);
      *(_OWORD *)(a1 + 592) = v60;
      do
        v61 = __ldxr(v56);
      while (__stxr(v61 + 1, v56));
      *(_QWORD *)(a1 + 576) = v54;
      *(_QWORD *)(a1 + 584) = v55;
      *(_WORD *)(a1 + 616) = v58;
      do
        v62 = __ldaxr(v56);
      while (__stlxr(v62 - 1, v56));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
      do
        v63 = __ldaxr(v56);
      while (__stlxr(v63 - 1, v56));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    else
    {
      v64 = *(_WORD *)(a2 + 616);
      *(_QWORD *)(a1 + 576) = v54;
      *(_QWORD *)(a1 + 584) = 0;
      v65 = *(_OWORD *)(a2 + 592);
      *(_QWORD *)(a1 + 608) = *(_QWORD *)(a2 + 608);
      *(_OWORD *)(a1 + 592) = v65;
      *(_WORD *)(a1 + 616) = v64;
    }
    *(_BYTE *)(a1 + 624) = 1;
  }
  *(_BYTE *)(a1 + 632) = 0;
  *(_BYTE *)(a1 + 712) = 0;
  if (*(_BYTE *)(a2 + 712))
  {
    *(_QWORD *)(a1 + 632) = &off_24EC26EB0;
    v66 = *(_QWORD *)(a2 + 640);
    v67 = *(std::__shared_weak_count **)(a2 + 648);
    if (v67)
    {
      v68 = (unint64_t *)&v67->__shared_owners_;
      do
        v69 = __ldxr(v68);
      while (__stxr(v69 + 1, v68));
      v70 = *(_WORD *)(a2 + 704);
      do
        v71 = __ldxr(v68);
      while (__stxr(v71 + 1, v68));
      v72 = *(_OWORD *)(a2 + 656);
      v73 = *(_OWORD *)(a2 + 688);
      *(_OWORD *)(a1 + 672) = *(_OWORD *)(a2 + 672);
      *(_OWORD *)(a1 + 688) = v73;
      *(_OWORD *)(a1 + 656) = v72;
      do
        v74 = __ldxr(v68);
      while (__stxr(v74 + 1, v68));
      *(_QWORD *)(a1 + 640) = v66;
      *(_QWORD *)(a1 + 648) = v67;
      *(_WORD *)(a1 + 704) = v70;
      do
        v75 = __ldaxr(v68);
      while (__stlxr(v75 - 1, v68));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
      do
        v76 = __ldaxr(v68);
      while (__stlxr(v76 - 1, v68));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    else
    {
      v77 = *(_WORD *)(a2 + 704);
      *(_QWORD *)(a1 + 640) = v66;
      *(_QWORD *)(a1 + 648) = 0;
      v78 = *(_OWORD *)(a2 + 656);
      v79 = *(_OWORD *)(a2 + 688);
      *(_OWORD *)(a1 + 672) = *(_OWORD *)(a2 + 672);
      *(_OWORD *)(a1 + 688) = v79;
      *(_OWORD *)(a1 + 656) = v78;
      *(_WORD *)(a1 + 704) = v77;
    }
    *(_BYTE *)(a1 + 712) = 1;
  }
  *(_QWORD *)(a1 + 720) = *(_QWORD *)(a2 + 720);
  sub_223257B24(a1 + 728, a2 + 728);
  v80 = *(_OWORD *)(a2 + 760);
  *(_QWORD *)(a1 + 773) = *(_QWORD *)(a2 + 773);
  *(_OWORD *)(a1 + 760) = v80;
  sub_22319ED0C((_QWORD *)(a1 + 784), a2 + 784);
  v81 = *(_OWORD *)(a2 + 800);
  v82 = *(_OWORD *)(a2 + 816);
  *(_QWORD *)(a1 + 832) = *(_QWORD *)(a2 + 832);
  *(_OWORD *)(a1 + 800) = v81;
  *(_OWORD *)(a1 + 816) = v82;
  *(_BYTE *)(a1 + 840) = 0;
  *(_BYTE *)(a1 + 896) = 0;
  if (*(_BYTE *)(a2 + 896))
  {
    *(_QWORD *)(a1 + 840) = &off_24EC270A0;
    v83 = *(_QWORD *)(a2 + 848);
    v84 = *(std::__shared_weak_count **)(a2 + 856);
    if (v84)
    {
      v85 = (unint64_t *)&v84->__shared_owners_;
      do
        v86 = __ldxr(v85);
      while (__stxr(v86 + 1, v85));
      v87 = *(_WORD *)(a2 + 888);
      do
        v88 = __ldxr(v85);
      while (__stxr(v88 + 1, v85));
      v89 = *(_OWORD *)(a2 + 864);
      *(_QWORD *)(a1 + 880) = *(_QWORD *)(a2 + 880);
      *(_OWORD *)(a1 + 864) = v89;
      do
        v90 = __ldxr(v85);
      while (__stxr(v90 + 1, v85));
      *(_QWORD *)(a1 + 848) = v83;
      *(_QWORD *)(a1 + 856) = v84;
      *(_WORD *)(a1 + 888) = v87;
      do
        v91 = __ldaxr(v85);
      while (__stlxr(v91 - 1, v85));
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
        std::__shared_weak_count::__release_weak(v84);
      }
      do
        v92 = __ldaxr(v85);
      while (__stlxr(v92 - 1, v85));
      if (!v92)
      {
        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
        std::__shared_weak_count::__release_weak(v84);
      }
    }
    else
    {
      v93 = *(_WORD *)(a2 + 888);
      *(_QWORD *)(a1 + 848) = v83;
      *(_QWORD *)(a1 + 856) = 0;
      v94 = *(_OWORD *)(a2 + 864);
      *(_QWORD *)(a1 + 880) = *(_QWORD *)(a2 + 880);
      *(_OWORD *)(a1 + 864) = v94;
      *(_WORD *)(a1 + 888) = v93;
    }
    *(_BYTE *)(a1 + 896) = 1;
  }
  *(_BYTE *)(a1 + 904) = 0;
  *(_BYTE *)(a1 + 984) = 0;
  if (*(_BYTE *)(a2 + 984))
  {
    *(_QWORD *)(a1 + 904) = &off_24EC27290;
    v95 = *(_QWORD *)(a2 + 912);
    v96 = *(std::__shared_weak_count **)(a2 + 920);
    if (v96)
    {
      v97 = (unint64_t *)&v96->__shared_owners_;
      do
        v98 = __ldxr(v97);
      while (__stxr(v98 + 1, v97));
      v99 = *(_WORD *)(a2 + 976);
      do
        v100 = __ldxr(v97);
      while (__stxr(v100 + 1, v97));
      v101 = *(_OWORD *)(a2 + 928);
      v102 = *(_OWORD *)(a2 + 960);
      *(_OWORD *)(a1 + 944) = *(_OWORD *)(a2 + 944);
      *(_OWORD *)(a1 + 960) = v102;
      *(_OWORD *)(a1 + 928) = v101;
      do
        v103 = __ldxr(v97);
      while (__stxr(v103 + 1, v97));
      *(_QWORD *)(a1 + 912) = v95;
      *(_QWORD *)(a1 + 920) = v96;
      *(_WORD *)(a1 + 976) = v99;
      do
        v104 = __ldaxr(v97);
      while (__stlxr(v104 - 1, v97));
      if (!v104)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
      do
        v105 = __ldaxr(v97);
      while (__stlxr(v105 - 1, v97));
      if (!v105)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
    else
    {
      v106 = *(_WORD *)(a2 + 976);
      *(_QWORD *)(a1 + 912) = v95;
      *(_QWORD *)(a1 + 920) = 0;
      v107 = *(_OWORD *)(a2 + 928);
      v108 = *(_OWORD *)(a2 + 960);
      *(_OWORD *)(a1 + 944) = *(_OWORD *)(a2 + 944);
      *(_OWORD *)(a1 + 960) = v108;
      *(_OWORD *)(a1 + 928) = v107;
      *(_WORD *)(a1 + 976) = v106;
    }
    *(_BYTE *)(a1 + 984) = 1;
  }
  *(_BYTE *)(a1 + 992) = 0;
  *(_BYTE *)(a1 + 1072) = 0;
  if (*(_BYTE *)(a2 + 1072))
  {
    *(_QWORD *)(a1 + 992) = &off_24EC26EB0;
    v109 = *(_QWORD *)(a2 + 1000);
    v110 = *(std::__shared_weak_count **)(a2 + 1008);
    if (v110)
    {
      v111 = (unint64_t *)&v110->__shared_owners_;
      do
        v112 = __ldxr(v111);
      while (__stxr(v112 + 1, v111));
      v113 = *(_WORD *)(a2 + 1064);
      do
        v114 = __ldxr(v111);
      while (__stxr(v114 + 1, v111));
      v115 = *(_OWORD *)(a2 + 1016);
      v116 = *(_OWORD *)(a2 + 1048);
      *(_OWORD *)(a1 + 1032) = *(_OWORD *)(a2 + 1032);
      *(_OWORD *)(a1 + 1048) = v116;
      *(_OWORD *)(a1 + 1016) = v115;
      do
        v117 = __ldxr(v111);
      while (__stxr(v117 + 1, v111));
      *(_QWORD *)(a1 + 1000) = v109;
      *(_QWORD *)(a1 + 1008) = v110;
      *(_WORD *)(a1 + 1064) = v113;
      do
        v118 = __ldaxr(v111);
      while (__stlxr(v118 - 1, v111));
      if (!v118)
      {
        ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
        std::__shared_weak_count::__release_weak(v110);
      }
      do
        v119 = __ldaxr(v111);
      while (__stlxr(v119 - 1, v111));
      if (!v119)
      {
        ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
        std::__shared_weak_count::__release_weak(v110);
      }
    }
    else
    {
      v120 = *(_WORD *)(a2 + 1064);
      *(_QWORD *)(a1 + 1000) = v109;
      *(_QWORD *)(a1 + 1008) = 0;
      v121 = *(_OWORD *)(a2 + 1016);
      v122 = *(_OWORD *)(a2 + 1048);
      *(_OWORD *)(a1 + 1032) = *(_OWORD *)(a2 + 1032);
      *(_OWORD *)(a1 + 1048) = v122;
      *(_OWORD *)(a1 + 1016) = v121;
      *(_WORD *)(a1 + 1064) = v120;
    }
    *(_BYTE *)(a1 + 1072) = 1;
  }
  *(_OWORD *)(a1 + 1080) = *(_OWORD *)(a2 + 1080);
  *(_BYTE *)(a1 + 1096) = 0;
  *(_BYTE *)(a1 + 1128) = 0;
  if (*(_BYTE *)(a2 + 1128))
  {
    sub_223B9317C((_QWORD *)(a1 + 1104), (uint64_t *)(a2 + 1104));
    *(_BYTE *)(a1 + 1128) = 1;
  }
  *(_QWORD *)(a1 + 1136) = *(_QWORD *)(a2 + 1136);
  sub_224158B04((_QWORD *)(a1 + 1144), (float32x2_t *)(a2 + 1144));
  v123 = *(_OWORD *)(a2 + 1184);
  v124 = *(_OWORD *)(a2 + 1200);
  v125 = *(_OWORD *)(a2 + 1216);
  *(_OWORD *)(a1 + 1232) = *(_OWORD *)(a2 + 1232);
  *(_OWORD *)(a1 + 1216) = v125;
  *(_OWORD *)(a1 + 1200) = v124;
  *(_OWORD *)(a1 + 1184) = v123;
  v126 = *(_OWORD *)(a2 + 1248);
  v127 = *(_OWORD *)(a2 + 1264);
  v128 = *(_OWORD *)(a2 + 1280);
  *(_OWORD *)(a1 + 1296) = *(_OWORD *)(a2 + 1296);
  *(_OWORD *)(a1 + 1280) = v128;
  *(_OWORD *)(a1 + 1264) = v127;
  *(_OWORD *)(a1 + 1248) = v126;
  *(_BYTE *)(a1 + 1312) = 0;
  *(_BYTE *)(a1 + 1512) = 0;
  if (*(_BYTE *)(a2 + 1512))
  {
    v129 = *(_OWORD *)(a2 + 1312);
    *(_DWORD *)(a1 + 1328) = *(_DWORD *)(a2 + 1328);
    *(_OWORD *)(a1 + 1312) = v129;
    sub_2232C6D24((_QWORD *)(a1 + 1336), a2 + 1336);
    *(_BYTE *)(a1 + 1504) = *(_BYTE *)(a2 + 1504);
    *(_BYTE *)(a1 + 1512) = 1;
  }
  *(_OWORD *)(a1 + 1520) = *(_OWORD *)(a2 + 1520);
  v130 = *(_OWORD *)(a2 + 1536);
  v131 = *(_OWORD *)(a2 + 1552);
  v132 = *(_OWORD *)(a2 + 1568);
  *(_OWORD *)(a1 + 1584) = *(_OWORD *)(a2 + 1584);
  *(_OWORD *)(a1 + 1568) = v132;
  *(_OWORD *)(a1 + 1552) = v131;
  *(_OWORD *)(a1 + 1536) = v130;
  v133 = *(_OWORD *)(a2 + 1600);
  v134 = *(_OWORD *)(a2 + 1616);
  v135 = *(_OWORD *)(a2 + 1632);
  *(_DWORD *)(a1 + 1648) = *(_DWORD *)(a2 + 1648);
  *(_OWORD *)(a1 + 1632) = v135;
  *(_OWORD *)(a1 + 1616) = v134;
  *(_OWORD *)(a1 + 1600) = v133;
  *(_QWORD *)(a1 + 1672) = 0;
  *(_OWORD *)(a1 + 1656) = 0u;
  v136 = *(_QWORD *)(a2 + 1656);
  v137 = *(_QWORD *)(a2 + 1664);
  if (v137 != v136)
  {
    if (0x86BCA1AF286BCA1BLL * ((v137 - v136) >> 4) >= 0xD79435E50D7944)
      sub_22316E078();
    v138 = (char *)operator new(v137 - v136);
    v139 = 0;
    *(_QWORD *)(a1 + 1656) = v138;
    *(_QWORD *)(a1 + 1664) = v138;
    *(_QWORD *)(a1 + 1672) = &v138[16 * ((v137 - v136) >> 4)];
    do
    {
      v140 = &v138[v139];
      v141 = v136 + v139;
      *(_OWORD *)v140 = *(_OWORD *)(v136 + v139);
      v142 = *(_OWORD *)(v136 + v139 + 16);
      v143 = *(_OWORD *)(v136 + v139 + 32);
      v144 = *(_OWORD *)(v136 + v139 + 64);
      *((_OWORD *)v140 + 3) = *(_OWORD *)(v136 + v139 + 48);
      *((_OWORD *)v140 + 4) = v144;
      *((_OWORD *)v140 + 1) = v142;
      *((_OWORD *)v140 + 2) = v143;
      v145 = *(_OWORD *)(v136 + v139 + 80);
      v146 = *(_OWORD *)(v136 + v139 + 96);
      v147 = *(_OWORD *)(v136 + v139 + 112);
      *((_QWORD *)v140 + 16) = *(_QWORD *)(v136 + v139 + 128);
      *((_OWORD *)v140 + 6) = v146;
      *((_OWORD *)v140 + 7) = v147;
      *((_OWORD *)v140 + 5) = v145;
      sub_223B9317C(&v138[v139 + 144], (uint64_t *)(v136 + v139 + 144));
      *(_OWORD *)(v140 + 168) = *(_OWORD *)(v136 + v139 + 168);
      v148 = *(_OWORD *)(v136 + v139 + 184);
      v149 = *(_OWORD *)(v136 + v139 + 200);
      v150 = *(_OWORD *)(v136 + v139 + 216);
      *(_OWORD *)(v140 + 232) = *(_OWORD *)(v136 + v139 + 232);
      *(_OWORD *)(v140 + 216) = v150;
      *(_OWORD *)(v140 + 200) = v149;
      *(_OWORD *)(v140 + 184) = v148;
      v151 = *(_OWORD *)(v136 + v139 + 248);
      v152 = *(_OWORD *)(v136 + v139 + 264);
      v153 = *(_OWORD *)(v136 + v139 + 280);
      *((_DWORD *)v140 + 74) = *(_DWORD *)(v136 + v139 + 296);
      *(_OWORD *)(v140 + 264) = v152;
      *(_OWORD *)(v140 + 280) = v153;
      *(_OWORD *)(v140 + 248) = v151;
      v139 += 304;
    }
    while (v141 + 304 != v137);
    *(_QWORD *)(a1 + 1664) = &v138[v139];
  }
  v154 = *(_WORD *)(a2 + 1680);
  *(_BYTE *)(a1 + 1682) = *(_BYTE *)(a2 + 1682);
  *(_WORD *)(a1 + 1680) = v154;
  return a1;
}

void sub_223B92D64(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_BYTE *)(v2 + 1512))
    sub_223255CAC(v4);
  sub_22365B530(v3);
  sub_2232BC87C(v2 + 1096);
  sub_2232559C8(v2 + 904);
  sub_223255A90(v2 + 840);
  sub_2232BC8F8(v5);
  sub_223255BE4(v2 + 504);
  sub_2232BC9D0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223B92F28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int16 v8;
  unint64_t v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int16 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  _BYTE v23[2];
  _BYTE v24[2];

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 56) = 0;
  if (*(_BYTE *)(a2 + 56))
  {
    *(_QWORD *)a1 = &off_24EC21328;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(std::__shared_weak_count **)(a2 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v8 = *(_WORD *)(a2 + 48);
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      v10 = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 24) = v10;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      *(_QWORD *)(a1 + 8) = v4;
      *(_QWORD *)(a1 + 16) = v5;
      *(_WORD *)(a1 + 48) = v8;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      v14 = *(_WORD *)(a2 + 48);
      *(_QWORD *)(a1 + 8) = v4;
      *(_QWORD *)(a1 + 16) = 0;
      v15 = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 24) = v15;
      *(_WORD *)(a1 + 48) = v14;
    }
    *(_BYTE *)(a1 + 56) = 1;
  }
  v16 = *(_OWORD *)(a2 + 64);
  v17 = *(_OWORD *)(a2 + 76);
  *(_BYTE *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 76) = v17;
  *(_OWORD *)(a1 + 64) = v16;
  *(_DWORD *)(a1 + 160) = -1;
  v18 = *(unsigned int *)(a2 + 160);
  if ((_DWORD)v18 != -1)
  {
    ((void (*)(_BYTE *, uint64_t, uint64_t))off_24EC5FFF8[v18])(v23, a1 + 96, a2 + 96);
    *(_DWORD *)(a1 + 160) = v18;
  }
  v19 = *(_OWORD *)(a2 + 168);
  v20 = *(_OWORD *)(a2 + 180);
  *(_BYTE *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 180) = v20;
  *(_OWORD *)(a1 + 168) = v19;
  *(_DWORD *)(a1 + 264) = -1;
  v21 = *(unsigned int *)(a2 + 264);
  if ((_DWORD)v21 != -1)
  {
    ((void (*)(_BYTE *, uint64_t, uint64_t))off_24EC5FFF8[v21])(v24, a1 + 200, a2 + 200);
    *(_DWORD *)(a1 + 264) = v21;
  }
  return a1;
}

void sub_223B930EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v17 = *(unsigned int *)(v13 + 264);
  if ((_DWORD)v17 != -1)
    ((void (*)(char *, uint64_t))off_24EC5FFD0[v17])(&a13, v15);
  *(_DWORD *)(v13 + 264) = -1;
  sub_22319A588(v14);
  sub_2232BBF74(v13);
  _Unwind_Resume(a1);
}

void sub_223B93138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, char a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v12 + 160);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))off_24EC5FFD0[v15])(&a12, v13);
  *(_DWORD *)(v12 + 160) = -1;
  sub_2232BBF74(v12);
  _Unwind_Resume(a1);
}

_QWORD *sub_223B9317C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  char *v15;

  a1[2] = 0;
  *a1 = 0;
  a1[1] = 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 != *a2)
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3);
    if (v6 >= 0xAAAAAAAAAAAAAABLL)
      sub_22316E078();
    v7 = (char *)operator new(v5);
    v8 = 0;
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[24 * v6];
    do
    {
      v10 = &v7[v8];
      v11 = v3 + v8;
      *(_QWORD *)v10 = 0;
      *((_QWORD *)v10 + 1) = 0;
      *((_QWORD *)v10 + 2) = 0;
      v13 = *(_BYTE **)(v3 + v8);
      v12 = *(_BYTE **)(v3 + v8 + 8);
      v14 = v12 - v13;
      if (v12 != v13)
      {
        if (v14 < 0)
          sub_22316E078();
        v15 = (char *)operator new(v12 - v13);
        *(_QWORD *)v10 = v15;
        *((_QWORD *)v10 + 1) = v15;
        v9 = &v15[32 * (v14 >> 5)];
        *((_QWORD *)v10 + 2) = v9;
        memcpy(v15, v13, v14 - 4);
        *((_QWORD *)v10 + 1) = v9;
      }
      v8 += 24;
    }
    while (v11 + 24 != v4);
    a1[1] = &v7[v8];
  }
  return a1;
}

void sub_223B932C0(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;

  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = (char *)v1[1];
      do
      {
        v8 = (void *)*((_QWORD *)v6 - 3);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *((_QWORD *)v4 - 2) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void ***sub_223B93344(void ***result)
{
  void ***v1;
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (char *)**result;
    if (v3)
    {
      v4 = (char *)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          v7 = *((_QWORD *)v4 - 20);
          if (v7)
          {
            v8 = *((_QWORD *)v4 - 19);
            v6 = (void *)*((_QWORD *)v4 - 20);
            if (v8 != v7)
            {
              v9 = *((_QWORD *)v4 - 19);
              do
              {
                v11 = *(void **)(v9 - 24);
                v9 -= 24;
                v10 = v11;
                if (v11)
                {
                  *(_QWORD *)(v8 - 16) = v10;
                  operator delete(v10);
                }
                v8 = v9;
              }
              while (v9 != v7);
              v6 = (void *)*((_QWORD *)v4 - 20);
            }
            *((_QWORD *)v4 - 19) = v7;
            operator delete(v6);
          }
          v4 -= 304;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void sub_223B9341C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int16 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  __int16 v24;
  unint64_t v25;
  unint64_t v26;
  unsigned __int8 *v27;
  int v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  _BYTE v41[32];
  _BYTE v42[32];
  __int16 v43;
  __int16 v44;
  _QWORD v45[2];
  std::__shared_weak_count *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  __int16 v51;
  _BYTE v52[28];
  _BYTE v53[64];
  int v54;
  _OWORD v55[2];
  _BYTE v56[64];
  int v57;
  char v58;
  char v59;
  uint64_t v60;

  v9 = *(unsigned __int8 *)(a2 + 80);
  if (*(_BYTE *)(a2 + 80))
  {
    v10 = *(_QWORD *)(a2 + 8);
    v11 = *(std::__shared_weak_count **)(a2 + 16);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      v14 = *(_WORD *)(a2 + 72);
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
      *(_OWORD *)v41 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)&v41[16] = *(_OWORD *)(a2 + 40);
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
      v39 = v10;
      v40 = v11;
      v43 = v14;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      v45[0] = &off_24EC1F8C8;
      v10 = v39;
      v19 = (unint64_t *)&v11->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      v21 = *(_QWORD *)&v41[12];
      v22 = *(_DWORD *)&v41[28];
      v23 = *(_QWORD *)v41;
      v24 = v43;
      do
        v25 = __ldxr(v19);
      while (__stxr(v25 + 1, v19));
      do
        v26 = __ldxr(v19);
      while (__stxr(v26 + 1, v19));
    }
    else
    {
      v40 = 0;
      *(_OWORD *)v42 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)&v42[16] = *(_OWORD *)(a2 + 40);
      v44 = *(_WORD *)(a2 + 72);
      v45[0] = &off_24EC1F8C8;
      v11 = 0;
      v21 = *(_QWORD *)&v42[12];
      v22 = *(_DWORD *)&v42[28];
      v23 = *(_QWORD *)v42;
      v24 = v44;
    }
    v45[1] = v10;
    v46 = v11;
    v47 = v21;
    v48 = 4 * v22;
    v49 = v23;
    v50 = 32;
    v51 = v24;
    if (v11)
    {
      v30 = (unint64_t *)&v11->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      do
        v32 = __ldaxr(v30);
      while (__stlxr(v32 - 1, v30));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    sub_22416BFE0((uint64_t)v52, (uint64_t)v45, 0, a4, a5, a6, a7, a8);
    v55[0] = *(_OWORD *)v52;
    *(_OWORD *)((char *)v55 + 12) = *(_OWORD *)&v52[12];
    v56[0] = 0;
    v57 = -1;
    v33 = v54;
    if (v54 != -1)
    {
      ((void (*)(char *, _BYTE *, _BYTE *))off_24EC60008[v54])(&v59, v56, v53);
      v57 = v33;
    }
    v58 = 1;
    v60 = *(_QWORD *)(a1 + 8);
    sub_223B94628(&v60, a1, (uint64_t)v55);
  }
  else
  {
    LOBYTE(v55[0]) = 0;
    v58 = 0;
    v52[0] = 0;
    *(_QWORD *)&v52[8] = 0;
    v27 = (unsigned __int8 *)sub_22453FEA0(a1);
    v28 = *v27;
    *v27 = 0;
    v52[0] = v28;
    v29 = *((_QWORD *)v27 + 1);
    *((_QWORD *)v27 + 1) = *(_QWORD *)&v52[8];
    *(_QWORD *)&v52[8] = v29;
    sub_22345337C((void ***)&v52[8], v28);
  }
  if (v58)
  {
    if (v57 != -1)
      ((void (*)(uint64_t *, _BYTE *))off_24EC5FFD0[v57])(&v60, v56);
    v57 = -1;
  }
  if (v9)
  {
    if (v54 != -1)
      ((void (*)(uint64_t *, _BYTE *))off_24EC5FFD0[v54])(&v60, v53);
    v54 = -1;
    v34 = v46;
    if (v46)
    {
      v35 = (unint64_t *)&v46->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    if (v40)
    {
      v37 = (unint64_t *)&v40->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
  }
}

void sub_223B93804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,unsigned __int8 a26)
{
  void ***v26;
  uint64_t v27;

  sub_22345337C(v26, a26);
  sub_2232C17E0(v27 - 176);
  _Unwind_Resume(a1);
}

void sub_223B9382C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  v29 = *(unsigned int *)(v27 - 80);
  if ((_DWORD)v29 != -1)
    ((void (*)(uint64_t, uint64_t))off_24EC5FFD0[v29])(v27 - 56, v26);
  *(_DWORD *)(v27 - 80) = -1;
  sub_22319A588((uint64_t)&a26);
  sub_22319A5E0((uint64_t)&a19);
  sub_2231CE1A0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223B93890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_22319A5E0((uint64_t)&a19);
  sub_2231CE1A0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223B938AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int16 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  unint64_t v25;
  unint64_t v26;
  unsigned __int8 *v27;
  int v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  __int16 v45;
  __int16 v46;
  _QWORD v47[2];
  std::__shared_weak_count *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  __int16 v53;
  _BYTE v54[28];
  _BYTE v55[64];
  int v56;
  _OWORD v57[2];
  _BYTE v58[64];
  int v59;
  char v60;
  char v61;
  uint64_t v62;

  v9 = *(unsigned __int8 *)(a2 + 56);
  if (*(_BYTE *)(a2 + 56))
  {
    v10 = *(_QWORD *)(a2 + 8);
    v11 = *(std::__shared_weak_count **)(a2 + 16);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      v14 = *(_WORD *)(a2 + 48);
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
      v41 = *(_OWORD *)(a2 + 24);
      v43 = *(_QWORD *)(a2 + 40);
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
      v39 = v10;
      v40 = v11;
      v45 = v14;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      v47[0] = &off_24EC1F8C8;
      v10 = v39;
      v19 = (unint64_t *)&v11->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      v21 = HIDWORD(v43);
      v22 = *((_QWORD *)&v41 + 1);
      v23 = v41;
      v24 = v45;
      do
        v25 = __ldxr(v19);
      while (__stxr(v25 + 1, v19));
      do
        v26 = __ldxr(v19);
      while (__stxr(v26 + 1, v19));
    }
    else
    {
      v40 = 0;
      v42 = *(_OWORD *)(a2 + 24);
      v44 = *(_QWORD *)(a2 + 40);
      v46 = *(_WORD *)(a2 + 48);
      v47[0] = &off_24EC1F8C8;
      v11 = 0;
      v21 = HIDWORD(v44);
      v22 = *((_QWORD *)&v42 + 1);
      v23 = v42;
      v24 = v46;
    }
    v47[1] = v10;
    v48 = v11;
    v49 = v22;
    v50 = v21;
    v51 = v23;
    v52 = 1;
    v53 = v24;
    if (v11)
    {
      v30 = (unint64_t *)&v11->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      do
        v32 = __ldaxr(v30);
      while (__stlxr(v32 - 1, v30));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    sub_22416BFE0((uint64_t)v54, (uint64_t)v47, 0, a4, a5, a6, a7, a8);
    v57[0] = *(_OWORD *)v54;
    *(_OWORD *)((char *)v57 + 12) = *(_OWORD *)&v54[12];
    v58[0] = 0;
    v59 = -1;
    v33 = v56;
    if (v56 != -1)
    {
      ((void (*)(char *, _BYTE *, _BYTE *))off_24EC60008[v56])(&v61, v58, v55);
      v59 = v33;
    }
    v60 = 1;
    v62 = *(_QWORD *)(a1 + 8);
    sub_223B94628(&v62, a1, (uint64_t)v57);
  }
  else
  {
    LOBYTE(v57[0]) = 0;
    v60 = 0;
    v54[0] = 0;
    *(_QWORD *)&v54[8] = 0;
    v27 = (unsigned __int8 *)sub_22453FEA0(a1);
    v28 = *v27;
    *v27 = 0;
    v54[0] = v28;
    v29 = *((_QWORD *)v27 + 1);
    *((_QWORD *)v27 + 1) = *(_QWORD *)&v54[8];
    *(_QWORD *)&v54[8] = v29;
    sub_22345337C((void ***)&v54[8], v28);
  }
  if (v60)
  {
    if (v59 != -1)
      ((void (*)(uint64_t *, _BYTE *))off_24EC5FFD0[v59])(&v62, v58);
    v59 = -1;
  }
  if (v9)
  {
    if (v56 != -1)
      ((void (*)(uint64_t *, _BYTE *))off_24EC5FFD0[v56])(&v62, v55);
    v56 = -1;
    v34 = v48;
    if (v48)
    {
      v35 = (unint64_t *)&v48->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    if (v40)
    {
      v37 = (unint64_t *)&v40->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
  }
}

void sub_223B93C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,unsigned __int8 a24)
{
  void ***v24;
  uint64_t v25;

  sub_22345337C(v24, a24);
  sub_2232C17E0(v25 - 176);
  _Unwind_Resume(a1);
}

void sub_223B93CA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v5 = *(unsigned int *)(v3 - 80);
  if ((_DWORD)v5 != -1)
    ((void (*)(uint64_t, uint64_t))off_24EC5FFD0[v5])(v3 - 56, v2);
  *(_DWORD *)(v3 - 80) = -1;
  sub_22319A588((uint64_t)va2);
  sub_22319A5E0((uint64_t)va1);
  sub_2231BEEB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223B93D0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_22319A5E0((uint64_t)va1);
  sub_2231BEEB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223B93D28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int16 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  unint64_t v25;
  unint64_t v26;
  unsigned __int8 *v27;
  int v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  __int16 v45;
  __int16 v46;
  _QWORD v47[2];
  std::__shared_weak_count *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  __int16 v53;
  _BYTE v54[28];
  _BYTE v55[64];
  int v56;
  _OWORD v57[2];
  _BYTE v58[64];
  int v59;
  char v60;
  char v61;
  uint64_t v62;

  v9 = *(unsigned __int8 *)(a2 + 56);
  if (*(_BYTE *)(a2 + 56))
  {
    v10 = *(_QWORD *)(a2 + 8);
    v11 = *(std::__shared_weak_count **)(a2 + 16);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      v14 = *(_WORD *)(a2 + 48);
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
      v41 = *(_OWORD *)(a2 + 24);
      v43 = *(_QWORD *)(a2 + 40);
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
      v39 = v10;
      v40 = v11;
      v45 = v14;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      v47[0] = &off_24EC1F8C8;
      v10 = v39;
      v19 = (unint64_t *)&v11->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      v21 = HIDWORD(v43);
      v22 = *((_QWORD *)&v41 + 1);
      v23 = v41;
      v24 = v45;
      do
        v25 = __ldxr(v19);
      while (__stxr(v25 + 1, v19));
      do
        v26 = __ldxr(v19);
      while (__stxr(v26 + 1, v19));
    }
    else
    {
      v40 = 0;
      v42 = *(_OWORD *)(a2 + 24);
      v44 = *(_QWORD *)(a2 + 40);
      v46 = *(_WORD *)(a2 + 48);
      v47[0] = &off_24EC1F8C8;
      v11 = 0;
      v21 = HIDWORD(v44);
      v22 = *((_QWORD *)&v42 + 1);
      v23 = v42;
      v24 = v46;
    }
    v47[1] = v10;
    v48 = v11;
    v49 = v22;
    v50 = 2 * v21;
    v51 = v23;
    v52 = 3;
    v53 = v24;
    if (v11)
    {
      v30 = (unint64_t *)&v11->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      do
        v32 = __ldaxr(v30);
      while (__stlxr(v32 - 1, v30));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    sub_22416BFE0((uint64_t)v54, (uint64_t)v47, 0, a4, a5, a6, a7, a8);
    v57[0] = *(_OWORD *)v54;
    *(_OWORD *)((char *)v57 + 12) = *(_OWORD *)&v54[12];
    v58[0] = 0;
    v59 = -1;
    v33 = v56;
    if (v56 != -1)
    {
      ((void (*)(char *, _BYTE *, _BYTE *))off_24EC60008[v56])(&v61, v58, v55);
      v59 = v33;
    }
    v60 = 1;
    v62 = *(_QWORD *)(a1 + 8);
    sub_223B94628(&v62, a1, (uint64_t)v57);
  }
  else
  {
    LOBYTE(v57[0]) = 0;
    v60 = 0;
    v54[0] = 0;
    *(_QWORD *)&v54[8] = 0;
    v27 = (unsigned __int8 *)sub_22453FEA0(a1);
    v28 = *v27;
    *v27 = 0;
    v54[0] = v28;
    v29 = *((_QWORD *)v27 + 1);
    *((_QWORD *)v27 + 1) = *(_QWORD *)&v54[8];
    *(_QWORD *)&v54[8] = v29;
    sub_22345337C((void ***)&v54[8], v28);
  }
  if (v60)
  {
    if (v59 != -1)
      ((void (*)(uint64_t *, _BYTE *))off_24EC5FFD0[v59])(&v62, v58);
    v59 = -1;
  }
  if (v9)
  {
    if (v56 != -1)
      ((void (*)(uint64_t *, _BYTE *))off_24EC5FFD0[v56])(&v62, v55);
    v56 = -1;
    v34 = v48;
    if (v48)
    {
      v35 = (unint64_t *)&v48->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    if (v40)
    {
      v37 = (unint64_t *)&v40->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
  }
}

void sub_223B94100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,unsigned __int8 a24)
{
  void ***v24;
  uint64_t v25;

  sub_22345337C(v24, a24);
  sub_2232C17E0(v25 - 176);
  _Unwind_Resume(a1);
}

void sub_223B94128(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v5 = *(unsigned int *)(v3 - 80);
  if ((_DWORD)v5 != -1)
    ((void (*)(uint64_t, uint64_t))off_24EC5FFD0[v5])(v3 - 56, v2);
  *(_DWORD *)(v3 - 80) = -1;
  sub_22319A588((uint64_t)va2);
  sub_22319A5E0((uint64_t)va1);
  sub_22319EF60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223B9418C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_22319A5E0((uint64_t)va1);
  sub_22319EF60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223B941A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int16 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  unint64_t v25;
  unint64_t v26;
  unsigned __int8 *v27;
  int v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  __int16 v45;
  __int16 v46;
  _QWORD v47[2];
  std::__shared_weak_count *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  __int16 v53;
  _BYTE v54[28];
  _BYTE v55[64];
  int v56;
  _OWORD v57[2];
  _BYTE v58[64];
  int v59;
  char v60;
  char v61;
  uint64_t v62;

  v9 = *(unsigned __int8 *)(a2 + 56);
  if (*(_BYTE *)(a2 + 56))
  {
    v10 = *(_QWORD *)(a2 + 8);
    v11 = *(std::__shared_weak_count **)(a2 + 16);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      v14 = *(_WORD *)(a2 + 48);
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
      v41 = *(_OWORD *)(a2 + 24);
      v43 = *(_QWORD *)(a2 + 40);
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
      v39 = v10;
      v40 = v11;
      v45 = v14;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      v47[0] = &off_24EC1F8C8;
      v10 = v39;
      v19 = (unint64_t *)&v11->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      v21 = HIDWORD(v43);
      v22 = *((_QWORD *)&v41 + 1);
      v23 = v41;
      v24 = v45;
      do
        v25 = __ldxr(v19);
      while (__stxr(v25 + 1, v19));
      do
        v26 = __ldxr(v19);
      while (__stxr(v26 + 1, v19));
    }
    else
    {
      v40 = 0;
      v42 = *(_OWORD *)(a2 + 24);
      v44 = *(_QWORD *)(a2 + 40);
      v46 = *(_WORD *)(a2 + 48);
      v47[0] = &off_24EC1F8C8;
      v11 = 0;
      v21 = HIDWORD(v44);
      v22 = *((_QWORD *)&v42 + 1);
      v23 = v42;
      v24 = v46;
    }
    v47[1] = v10;
    v48 = v11;
    v49 = v22;
    v50 = 4 * v21;
    v51 = v23;
    v52 = 4;
    v53 = v24;
    if (v11)
    {
      v30 = (unint64_t *)&v11->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      do
        v32 = __ldaxr(v30);
      while (__stlxr(v32 - 1, v30));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    sub_22416BFE0((uint64_t)v54, (uint64_t)v47, 0, a4, a5, a6, a7, a8);
    v57[0] = *(_OWORD *)v54;
    *(_OWORD *)((char *)v57 + 12) = *(_OWORD *)&v54[12];
    v58[0] = 0;
    v59 = -1;
    v33 = v56;
    if (v56 != -1)
    {
      ((void (*)(char *, _BYTE *, _BYTE *))off_24EC60008[v56])(&v61, v58, v55);
      v59 = v33;
    }
    v60 = 1;
    v62 = *(_QWORD *)(a1 + 8);
    sub_223B94628(&v62, a1, (uint64_t)v57);
  }
  else
  {
    LOBYTE(v57[0]) = 0;
    v60 = 0;
    v54[0] = 0;
    *(_QWORD *)&v54[8] = 0;
    v27 = (unsigned __int8 *)sub_22453FEA0(a1);
    v28 = *v27;
    *v27 = 0;
    v54[0] = v28;
    v29 = *((_QWORD *)v27 + 1);
    *((_QWORD *)v27 + 1) = *(_QWORD *)&v54[8];
    *(_QWORD *)&v54[8] = v29;
    sub_22345337C((void ***)&v54[8], v28);
  }
  if (v60)
  {
    if (v59 != -1)
      ((void (*)(uint64_t *, _BYTE *))off_24EC5FFD0[v59])(&v62, v58);
    v59 = -1;
  }
  if (v9)
  {
    if (v56 != -1)
      ((void (*)(uint64_t *, _BYTE *))off_24EC5FFD0[v56])(&v62, v55);
    v56 = -1;
    v34 = v48;
    if (v48)
    {
      v35 = (unint64_t *)&v48->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    if (v40)
    {
      v37 = (unint64_t *)&v40->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
  }
}

void sub_223B94580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,unsigned __int8 a24)
{
  void ***v24;
  uint64_t v25;

  sub_22345337C(v24, a24);
  sub_2232C17E0(v25 - 176);
  _Unwind_Resume(a1);
}

void sub_223B945A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v5 = *(unsigned int *)(v3 - 80);
  if ((_DWORD)v5 != -1)
    ((void (*)(uint64_t, uint64_t))off_24EC5FFD0[v5])(v3 - 56, v2);
  *(_DWORD *)(v3 - 80) = -1;
  sub_22319A588((uint64_t)va2);
  sub_22319A5E0((uint64_t)va1);
  sub_2231BD9DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223B9460C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_22319A5E0((uint64_t)va1);
  sub_2231BD9DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223B94628(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[28];
  _BYTE v11[64];
  int v12;
  char v13;
  char v14;

  sub_22454024C(a2);
  *(_QWORD *)v10 = "version";
  *(_QWORD *)&v10[8] = 7;
  *(_DWORD *)&v10[16] = 2;
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (v6 = *(unsigned __int8 *)(a2 + 88), *(_QWORD *)(a2 + 72) = "version", *(_QWORD *)(a2 + 80) = 7, v6))
  {
    sub_224542048(a2, &v10[16]);
    if (*a1 != 2)
      goto LABEL_8;
  }
  else
  {
    *(_BYTE *)(a2 + 88) = 1;
    sub_224542048(a2, &v10[16]);
    if (*a1 != 2)
      goto LABEL_8;
  }
  *(_QWORD *)v10 = "min_version";
  *(_QWORD *)&v10[8] = 11;
  *(_DWORD *)&v10[16] = 2;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v7 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "min_version";
    *(_QWORD *)(a2 + 80) = 11;
    if (!v7)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_224542048(a2, &v10[16]);
LABEL_8:
  *(_OWORD *)v10 = *(_OWORD *)a3;
  *(_OWORD *)&v10[12] = *(_OWORD *)(a3 + 12);
  v11[0] = 0;
  v12 = -1;
  v8 = *(unsigned int *)(a3 + 96);
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(char *, _BYTE *, uint64_t))off_24EC5FFF8[v8])(&v13, v11, a3 + 32);
    v12 = v8;
  }
  sub_223B9482C(a2, (unsigned __int16 *)v10);
  if (v12 != -1)
    ((void (*)(char *, _BYTE *))off_24EC5FFD0[v12])(&v14, v11);
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(a2 + 56) = v9 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_223B947C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21)
{
  uint64_t v21;
  uint64_t v22;

  if (a21 != -1)
    ((void (*)(uint64_t, uint64_t))off_24EC5FFD0[a21])(v22 - 33, v21);
  _Unwind_Resume(exception_object);
}

void sub_223B9482C(uint64_t a1, unsigned __int16 *a2)
{
  int v4;
  void **v5;
  BOOL v6;
  int *v7;
  int v8;
  int v9;
  unsigned __int8 *v11;
  int v12;
  void **v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  void **v20;
  int v21;
  int v22;
  uint64_t v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  void **v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  uint64_t v33;
  int v34;
  unsigned __int16 v35;
  unint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  unsigned __int16 v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  char v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  unsigned __int16 v62;
  __int128 v63;
  __int128 v64;
  int v65;
  uint64_t v66;
  std::ios_base v67;
  uint64_t v68;
  int v69;
  uint64_t (**v70)();
  uint64_t v71;
  std::__shared_weak_count *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  int v76;
  unsigned __int16 v77;

  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v4 = *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 72) = "io_format", *(_QWORD *)(a1 + 80) = 9, v4))
  {
    if ((*(_BYTE *)(a1 + 12) & 2) == 0)
      goto LABEL_4;
LABEL_16:
    LODWORD(v58) = 0;
    sub_223B94FE4((uint64_t)&v54, (uint64_t)&v55, a2);
    if ((_DWORD)v58 == -1)
      sub_22316DD70();
    v54 = &v53;
    ((void (*)(uint64_t (***__return_ptr)(), char **, uint64_t *))off_24EC5FFA0[v58])(&v70, &v54, &v55);
    if ((_DWORD)v58 != -1)
      ((void (*)(char **, uint64_t *))off_24EC5FF88[v58])(&v54, &v55);
    sub_224542510(a1, (uint64_t)&v70);
    if (SHIBYTE(v72) < 0)
    {
      operator delete(v70);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_24;
      goto LABEL_21;
    }
LABEL_20:
    if (**(unsigned __int8 **)(a1 + 40) > 1u)
      goto LABEL_24;
    goto LABEL_21;
  }
  *(_BYTE *)(a1 + 88) = 1;
  if ((*(_BYTE *)(a1 + 12) & 2) != 0)
    goto LABEL_16;
LABEL_4:
  v5 = (void **)*a2;
  if (*(_BYTE *)(a1 + 88))
    v6 = *(_QWORD *)(a1 + 80) == 7;
  else
    v6 = 0;
  if (v6)
  {
    v7 = *(int **)(a1 + 72);
    v8 = *v7;
    v9 = *(int *)((char *)v7 + 3);
    if (v8 == *(_DWORD *)"version" && v9 == *(_DWORD *)"sion")
      goto LABEL_20;
  }
  LOBYTE(v55) = 6;
  v56 = (uint64_t)v5;
  v11 = (unsigned __int8 *)sub_22453FEA0(a1);
  v12 = *v11;
  *v11 = 6;
  LOBYTE(v55) = v12;
  v13 = (void **)*((_QWORD *)v11 + 1);
  *((_QWORD *)v11 + 1) = v56;
  v56 = (uint64_t)v13;
  sub_22345337C((void ***)&v56, v12);
  if (**(unsigned __int8 **)(a1 + 40) > 1u)
    goto LABEL_24;
LABEL_21:
  v14 = *(unsigned __int8 *)(a1 + 88);
  *(_QWORD *)(a1 + 72) = "structure";
  *(_QWORD *)(a1 + 80) = 9;
  if (!v14)
    *(_BYTE *)(a1 + 88) = 1;
LABEL_24:
  v15 = *(_DWORD *)(a1 + 8);
  sub_22454024C(a1);
  v55 = (uint64_t)"version";
  v56 = 7;
  LODWORD(v57) = 2;
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v16 = *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 72) = "version", *(_QWORD *)(a1 + 80) = 7, v16))
  {
    sub_224542048(a1, &v57);
    if (v15 >= 1)
    {
LABEL_27:
      if (v15 == 2)
      {
        v55 = (uint64_t)"min_version";
        v56 = 11;
        LODWORD(v57) = 2;
        if (**(unsigned __int8 **)(a1 + 40) <= 1u)
        {
          v17 = *(unsigned __int8 *)(a1 + 88);
          *(_QWORD *)(a1 + 72) = "min_version";
          *(_QWORD *)(a1 + 80) = 11;
          if (!v17)
            *(_BYTE *)(a1 + 88) = 1;
        }
        sub_224542048(a1, &v57);
      }
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v18 = *(unsigned __int8 *)(a1 + 88);
        *(_QWORD *)(a1 + 72) = "image_format";
        *(_QWORD *)(a1 + 80) = 12;
        if (!v18)
          *(_BYTE *)(a1 + 88) = 1;
      }
      sub_223B95298(a1, (uint64_t *)a2 + 1);
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v19 = *(unsigned __int8 *)(a1 + 88);
        *(_QWORD *)(a1 + 72) = "size";
        *(_QWORD *)(a1 + 80) = 4;
        if (!v19)
          *(_BYTE *)(a1 + 88) = 1;
      }
      v20 = (void **)(a2 + 8);
      goto LABEL_46;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 88) = 1;
    sub_224542048(a1, &v57);
    if (v15 >= 1)
      goto LABEL_27;
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v21 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "image_format";
    *(_QWORD *)(a1 + 80) = 12;
    if (!v21)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_223B95298(a1, (uint64_t *)a2 + 1);
  v20 = (void **)(a2 + 8);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v22 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "size";
    *(_QWORD *)(a1 + 80) = 4;
    if (!v22)
      *(_BYTE *)(a1 + 88) = 1;
  }
LABEL_46:
  v55 = 2;
  v56 = (uint64_t)v20;
  sub_224542C38(a1, (uint64_t)&v55);
  v23 = *(_QWORD *)(a1 + 56);
  v24 = *(unsigned __int8 **)(v23 - 8);
  *(_QWORD *)(a1 + 40) = v24;
  *(_QWORD *)(a1 + 56) = v23 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v24 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "image_data";
    *(_QWORD *)(a1 + 80) = 10;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_22454024C(a1);
  v25 = *a2;
  if (v25 == 1)
  {
    v26 = *((_DWORD *)a2 + 24);
    if (!v26)
    {
      v55 = (uint64_t)&off_24EC1F8C8;
      v29 = (void **)*((_QWORD *)a2 + 5);
      v30 = (std::__shared_weak_count *)*((_QWORD *)a2 + 6);
      if (v30)
      {
        p_shared_owners = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(p_shared_owners);
        while (__stxr(v32 + 1, p_shared_owners));
        v33 = *((_QWORD *)a2 + 9);
        v34 = *((_DWORD *)a2 + 20);
        v35 = a2[42];
        do
          v36 = __ldxr(p_shared_owners);
        while (__stxr(v36 + 1, p_shared_owners));
      }
      else
      {
        v33 = *((_QWORD *)a2 + 9);
        v34 = *((_DWORD *)a2 + 20);
        v35 = a2[42];
      }
      v56 = (uint64_t)v29;
      v57 = v30;
      v58 = *((_QWORD *)a2 + 7);
      v59 = *((_DWORD *)a2 + 16);
      v60 = v33;
      v61 = v34;
      v62 = v35;
      if (v30)
      {
        v45 = (unint64_t *)&v30->__shared_owners_;
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      goto LABEL_75;
    }
    if (v26 == 1)
    {
      v55 = (uint64_t)&off_24EC1F8C8;
      sub_2231F47D4((uint64_t)(a2 + 16), (uint64_t)&v56);
LABEL_75:
      sub_22416E5E0((const void *)a1, (uint64_t)&v55);
      v47 = v57;
      if (!v57)
        return;
      v48 = (unint64_t *)&v57->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      goto LABEL_88;
    }
LABEL_92:
    sub_22316DD70();
  }
  v27 = sub_22416E0BC(v25);
  v28 = *((_DWORD *)a2 + 24);
  if (v28)
  {
    if (v28 != 1)
      goto LABEL_92;
    v70 = &off_24EC1F8C8;
    sub_2231F47D4((uint64_t)(a2 + 16), (uint64_t)&v71);
  }
  else
  {
    v70 = &off_24EC1F8C8;
    v37 = *((_QWORD *)a2 + 5);
    v38 = (std::__shared_weak_count *)*((_QWORD *)a2 + 6);
    if (v38)
    {
      v39 = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
      v41 = *((_QWORD *)a2 + 9);
      v42 = *((_DWORD *)a2 + 20);
      v43 = a2[42];
      do
        v44 = __ldxr(v39);
      while (__stxr(v44 + 1, v39));
    }
    else
    {
      v41 = *((_QWORD *)a2 + 9);
      v42 = *((_DWORD *)a2 + 20);
      v43 = a2[42];
    }
    v71 = v37;
    v72 = v38;
    v73 = *((_QWORD *)a2 + 7);
    v74 = *((_DWORD *)a2 + 16);
    v75 = v41;
    v76 = v42;
    v77 = v43;
    if (v38)
    {
      v50 = (unint64_t *)&v38->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
  }
  v55 = a1;
  std::streambuf::basic_streambuf();
  v56 = MEMORY[0x24BEDB848] + 16;
  v63 = 0u;
  v64 = 0u;
  v65 = 24;
  v66 = MEMORY[0x24BEDB828] + 24;
  v67.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB828] + 64);
  std::ios_base::init(&v67, &v56);
  v68 = 0;
  v69 = -1;
  sub_22319F8C4(&v70, (char *)&v66, v27);
  sub_223B956E8((uint64_t)&v55);
  v47 = v72;
  if (!v72)
    return;
  v52 = (unint64_t *)&v72->__shared_owners_;
  do
    v49 = __ldaxr(v52);
  while (__stlxr(v49 - 1, v52));
LABEL_88:
  if (!v49)
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
  }
}

void sub_223B94EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12)
{
  void ***v12;

  sub_22345337C(v12, a12);
  _Unwind_Resume(a1);
}

void sub_223B94EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_223B956E8((uint64_t)va);
  sub_22319A5E0(v4 - 120);
  _Unwind_Resume(a1);
}

void sub_223B94FE4(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_223195210(v5);
  v21[0] = v5;
  sub_2231813E8((_QWORD *)(v5 + 16), (uint64_t)(&off_24EC6D5D0)[2 * *a3], (uint64_t)(&off_24EC6D5D0)[2 * *a3 + 1]);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_22316DBC0();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v14 + 128);
    MEMORY[0x227684CE8](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_22316DD70();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24EC5FF70[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_223B95244(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_223B95268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223B95284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22456E764((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223B95298(uint64_t a1, uint64_t *a2)
{
  void **v3;
  BOOL v4;
  int *v5;
  int v6;
  int v7;
  BOOL v8;
  unsigned __int8 *v9;
  int v10;
  void **v11;
  void *__p[2];
  char v13;
  char v14[8];
  void **v15;
  int v16;
  char v17;
  char *v18;

  if ((*(_BYTE *)(a1 + 12) & 2) != 0)
  {
    v16 = 0;
    sub_223B95444((uint64_t)&v18, (uint64_t)v14, a2);
    if (v16 == -1)
      sub_22316DD70();
    v18 = &v17;
    ((void (*)(void **__return_ptr, char **, char *))off_24EC5FFA0[v16])(__p, &v18, v14);
    if (v16 != -1)
      ((void (*)(char **, char *))off_24EC5FF88[v16])(&v18, v14);
    sub_224542510(a1, (uint64_t)__p);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v3 = (void **)*a2;
    if (*(_BYTE *)(a1 + 88))
      v4 = *(_QWORD *)(a1 + 80) == 7;
    else
      v4 = 0;
    if (!v4
      || ((v5 = *(int **)(a1 + 72), v6 = *v5, v7 = *(int *)((char *)v5 + 3), v6 == *(_DWORD *)"version")
        ? (v8 = v7 == *(_DWORD *)"sion")
        : (v8 = 0),
          !v8))
    {
      v14[0] = 6;
      v15 = v3;
      v9 = (unsigned __int8 *)sub_22453FEA0(a1);
      v10 = *v9;
      *v9 = 6;
      v14[0] = v10;
      v11 = (void **)*((_QWORD *)v9 + 1);
      *((_QWORD *)v9 + 1) = v15;
      v15 = v11;
      sub_22345337C(&v15, v10);
    }
  }
}

void sub_223B953E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void ***v13;

  sub_22345337C(v13, a13);
  _Unwind_Resume(a1);
}

void sub_223B95400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223B9541C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223B95430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223B95444(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_223195210(v5);
  v21[0] = v5;
  sub_22416D348((_QWORD *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_22316DBC0();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v14 + 128);
    MEMORY[0x227684CE8](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_22316DD70();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24EC5FF70[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_223B95694(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_223B956B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223B956D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22456E764((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223B956E8(uint64_t a1)
{
  int v2;
  size_t v3;
  void **p_dst;
  unint64_t v5;
  unint64_t v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  size_t v11;
  uint64_t v12;
  int *v13;
  int v14;
  int v15;
  BOOL v16;
  unsigned __int8 *v17;
  int v18;
  void **v19;
  void **v20;
  uint64_t v21;
  void **__dst;
  size_t v24;
  int64_t v25;
  size_t v26;
  void **v27;

  v2 = *(_DWORD *)(a1 + 104);
  if ((v2 & 0x10) != 0)
  {
    v5 = *(_QWORD *)(a1 + 96);
    v6 = *(_QWORD *)(a1 + 56);
    if (v5 < v6)
    {
      *(_QWORD *)(a1 + 96) = v6;
      v5 = v6;
    }
    v7 = *(const void **)(a1 + 48);
    v3 = v5 - (_QWORD)v7;
    if (v5 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_36;
  }
  else
  {
    if ((v2 & 8) == 0)
    {
      v3 = 0;
      HIBYTE(v25) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_14;
    }
    v7 = *(const void **)(a1 + 24);
    v3 = *(_QWORD *)(a1 + 40) - (_QWORD)v7;
    if (v3 >= 0x7FFFFFFFFFFFFFF8)
LABEL_36:
      sub_22316DBC0();
  }
  if (v3 >= 0x17)
  {
    v8 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v8 = v3 | 7;
    v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    v24 = v3;
    v25 = v9 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_13;
  }
  HIBYTE(v25) = v3;
  p_dst = (void **)&__dst;
  if (v3)
LABEL_13:
    memmove(p_dst, v7, v3);
LABEL_14:
  *((_BYTE *)p_dst + v3) = 0;
  v10 = HIBYTE(v25);
  if (v25 >= 0)
    v11 = HIBYTE(v25);
  else
    v11 = v24;
  v12 = *(_QWORD *)a1;
  if (!*(_BYTE *)(*(_QWORD *)a1 + 88)
    || *(_QWORD *)(v12 + 80) != 7
    || ((v13 = *(int **)(v12 + 72), v14 = *v13, v15 = *(int *)((char *)v13 + 3), v14 == *(_DWORD *)"version")
      ? (v16 = v15 == *(_DWORD *)"sion")
      : (v16 = 0),
        !v16))
  {
    LOBYTE(v26) = 6;
    v27 = (void **)v11;
    v17 = (unsigned __int8 *)sub_22453FEA0(v12);
    v18 = *v17;
    *v17 = v26;
    LOBYTE(v26) = v18;
    v19 = (void **)*((_QWORD *)v17 + 1);
    *((_QWORD *)v17 + 1) = v27;
    v27 = v19;
    sub_22345337C(&v27, v18);
    v10 = HIBYTE(v25);
  }
  if (v10 < 0)
  {
    v20 = __dst;
    if (v11 && !__dst)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v20 = 0;
    }
  }
  else
  {
    v20 = (void **)&__dst;
  }
  v21 = *(_QWORD *)a1;
  v26 = v11;
  v27 = v20;
  sub_2245403C8(v21, &v26);
  if (SHIBYTE(v25) < 0)
    operator delete(__dst);
  std::ostream::~ostream();
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  return a1;
}

void sub_223B95934(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void ***v13;

  sub_22345337C(v13, a13);
  sub_22316DC48(a1);
}

void sub_223B95950(_DWORD *a1, uint64_t a2, unsigned __int16 *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  int v9;

  sub_22454024C(a2);
  v9 = 2;
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (v6 = *(unsigned __int8 *)(a2 + 88), *(_QWORD *)(a2 + 72) = "version", *(_QWORD *)(a2 + 80) = 7, v6))
  {
    sub_224542048(a2, &v9);
    if (*a1 != 2)
      goto LABEL_8;
  }
  else
  {
    *(_BYTE *)(a2 + 88) = 1;
    sub_224542048(a2, &v9);
    if (*a1 != 2)
      goto LABEL_8;
  }
  v9 = 2;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v7 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "min_version";
    *(_QWORD *)(a2 + 80) = 11;
    if (!v7)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_224542048(a2, &v9);
LABEL_8:
  sub_223B9482C(a2, a3);
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(a2 + 56) = v8 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_223B95A78(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  void **v7;
  void ***v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unsigned __int8 *v14;
  unsigned __int8 v15;
  void **v16;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v3 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "dictionary";
    *(_QWORD *)(a1 + 80) = 10;
    if (!v3)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_22319ED0C(&v12, a2);
  sub_2245175B0((uint64_t)&v12, (uint64_t *)&v14);
  v4 = (uint64_t)v14;
  v15 = *v14;
  v16 = (void **)*((_QWORD *)v14 + 1);
  *v14 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unsigned __int8 *)sub_22453FEA0(a1);
  v6 = *v5;
  *v5 = v15;
  v15 = v6;
  v7 = (void **)*((_QWORD *)v5 + 1);
  *((_QWORD *)v5 + 1) = v16;
  v16 = v7;
  sub_22345337C(&v16, v6);
  v8 = (void ***)v14;
  v14 = 0;
  if (v8)
  {
    sub_22345337C(v8 + 1, *(unsigned __int8 *)v8);
    MEMORY[0x227684CE8](v8, 0x1022C40B06DCE69);
  }
  v9 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_223B95BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, void ***a12, unsigned __int8 a13)
{
  void ***v13;

  sub_22345337C(v13, a13);
  sub_2245357D0(&a12);
  sub_223167354((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_223B95BD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223B95BE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  sub_22454024C(a2);
  v10 = (uint64_t)"version";
  v11 = 7;
  v12 = 2;
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (v5 = *(unsigned __int8 *)(a2 + 88), *(_QWORD *)(a2 + 72) = "version", *(_QWORD *)(a2 + 80) = 7, v5))
  {
    sub_224542048(a2, &v12);
    if (**(unsigned __int8 **)(a2 + 40) > 1u)
      goto LABEL_7;
  }
  else
  {
    *(_BYTE *)(a2 + 88) = 1;
    sub_224542048(a2, &v12);
    if (**(unsigned __int8 **)(a2 + 40) > 1u)
      goto LABEL_7;
  }
  v6 = *(unsigned __int8 *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = "focal_length";
  *(_QWORD *)(a2 + 80) = 12;
  if (!v6)
    *(_BYTE *)(a2 + 88) = 1;
LABEL_7:
  v10 = 2;
  v11 = a3;
  sub_2245436F8(a2, (float **)&v10);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v7 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "principal_point";
    *(_QWORD *)(a2 + 80) = 15;
    if (!v7)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v10 = 2;
  v11 = a3 + 8;
  sub_2245436F8(a2, (float **)&v10);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v8 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "image_size";
    *(_QWORD *)(a2 + 80) = 10;
    if (!v8)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v10 = 2;
  v11 = a3 + 16;
  sub_224542C38(a2, (uint64_t)&v10);
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(a2 + 56) = v9 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_223B95D74(uint64_t a1, __int128 *a2, unsigned int a3)
{
  BOOL v6;
  int *v7;
  int v8;
  int v9;
  BOOL v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  int v17;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  int v24;
  int v25;
  BOOL v26;
  unsigned __int8 *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  int v33;
  int v34;
  unsigned __int8 *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  int v41;
  int v42;
  unsigned __int8 *v44;
  int v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  char *v49;
  char *v50;
  uint64_t v51;
  __int128 *v52;
  __int128 *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  __int128 *v67;
  __int128 *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  char *v73;
  char *v74;
  unsigned __int8 *v75;
  int v76;
  uint64_t v77;
  int *v78;
  int v79;
  int v80;
  BOOL v81;
  unsigned __int8 *v82;
  int v83;
  uint64_t v84;
  __int128 v85;
  int v86;
  void *v87;
  char *v88;
  void *v89;
  __int128 *v90;
  void *v91;
  char *v92;
  void *v93;
  char *v94;
  void *v95;
  char *v96;
  void *v97;
  __int128 *v98;
  void *__p;
  char *v100;
  unsigned __int8 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  __int128 *v107;

  v85 = *a2;
  v86 = *((_DWORD *)a2 + 4);
  sub_2232C6D24(&v87, (uint64_t)a2 + 24);
  v101 = *((_BYTE *)a2 + 192);
  if (*(_BYTE *)(a1 + 88))
    v6 = *(_QWORD *)(a1 + 80) == 7;
  else
    v6 = 0;
  if (v6
    && ((v7 = *(int **)(a1 + 72), v8 = *v7, v9 = *(int *)((char *)v7 + 3), v8 == *(_DWORD *)"version")
      ? (v10 = v9 == *(_DWORD *)"sion")
      : (v10 = 0),
        v10))
  {
    v14 = 7;
  }
  else
  {
    LOBYTE(v102) = 4;
    *((_QWORD *)&v102 + 1) = v85;
    v11 = (unsigned __int8 *)sub_22453FEA0(a1);
    v12 = *v11;
    *v11 = v102;
    LOBYTE(v102) = v12;
    v13 = *((_QWORD *)v11 + 1);
    *((_QWORD *)v11 + 1) = *((_QWORD *)&v102 + 1);
    *((_QWORD *)&v102 + 1) = v13;
    sub_22345337C((void ***)&v102 + 1, v12);
    v14 = *(_QWORD *)(a1 + 80);
    if (!*(_BYTE *)(a1 + 88))
      goto LABEL_16;
  }
  if (v14 == 7)
  {
    v15 = *(int **)(a1 + 72);
    v16 = *v15;
    v17 = *(int *)((char *)v15 + 3);
    if (v16 == *(_DWORD *)"version" && v17 == *(_DWORD *)"sion")
    {
      v22 = 7;
      goto LABEL_17;
    }
  }
LABEL_16:
  LOBYTE(v102) = 4;
  *((_QWORD *)&v102 + 1) = BYTE1(v85);
  v19 = (unsigned __int8 *)sub_22453FEA0(a1);
  v20 = *v19;
  *v19 = v102;
  LOBYTE(v102) = v20;
  v21 = *((_QWORD *)v19 + 1);
  *((_QWORD *)v19 + 1) = *((_QWORD *)&v102 + 1);
  *((_QWORD *)&v102 + 1) = v21;
  sub_22345337C((void ***)&v102 + 1, v20);
  v22 = *(_QWORD *)(a1 + 80);
  if (!*(_BYTE *)(a1 + 88))
    goto LABEL_22;
LABEL_17:
  if (v22 != 7
    || ((v23 = *(int **)(a1 + 72), v24 = *v23, v25 = *(int *)((char *)v23 + 3), v24 == *(_DWORD *)"version")
      ? (v26 = v25 == *(_DWORD *)"sion")
      : (v26 = 0),
        !v26))
  {
LABEL_22:
    LOBYTE(v102) = 5;
    *((_QWORD *)&v102 + 1) = SDWORD1(v85);
    v27 = (unsigned __int8 *)sub_22453FEA0(a1);
    v28 = *v27;
    *v27 = v102;
    LOBYTE(v102) = v28;
    v29 = *((_QWORD *)v27 + 1);
    *((_QWORD *)v27 + 1) = *((_QWORD *)&v102 + 1);
    *((_QWORD *)&v102 + 1) = v29;
    sub_22345337C((void ***)&v102 + 1, v28);
    v30 = *(_QWORD *)(a1 + 80);
    v31 = *((_QWORD *)&v85 + 1);
    if (!*(_BYTE *)(a1 + 88))
      goto LABEL_28;
    goto LABEL_23;
  }
  v30 = 7;
  v31 = *((_QWORD *)&v85 + 1);
LABEL_23:
  if (v30 == 7)
  {
    v32 = *(int **)(a1 + 72);
    v33 = *v32;
    v34 = *(int *)((char *)v32 + 3);
    if (v33 == *(_DWORD *)"version" && v34 == *(_DWORD *)"sion")
    {
      v39 = 7;
      goto LABEL_29;
    }
  }
LABEL_28:
  LOBYTE(v102) = 5;
  *((_QWORD *)&v102 + 1) = v31;
  v36 = (unsigned __int8 *)sub_22453FEA0(a1);
  v37 = *v36;
  *v36 = v102;
  LOBYTE(v102) = v37;
  v38 = *((_QWORD *)v36 + 1);
  *((_QWORD *)v36 + 1) = *((_QWORD *)&v102 + 1);
  *((_QWORD *)&v102 + 1) = v38;
  sub_22345337C((void ***)&v102 + 1, v37);
  v39 = *(_QWORD *)(a1 + 80);
  if (!*(_BYTE *)(a1 + 88))
  {
LABEL_34:
    LOBYTE(v102) = 5;
    *((_QWORD *)&v102 + 1) = v86;
    v44 = (unsigned __int8 *)sub_22453FEA0(a1);
    v45 = *v44;
    *v44 = v102;
    LOBYTE(v102) = v45;
    v46 = *((_QWORD *)v44 + 1);
    *((_QWORD *)v44 + 1) = *((_QWORD *)&v102 + 1);
    *((_QWORD *)&v102 + 1) = v46;
    sub_22345337C((void ***)&v102 + 1, v45);
    goto LABEL_35;
  }
LABEL_29:
  if (v39 != 7)
    goto LABEL_34;
  v40 = *(int **)(a1 + 72);
  v41 = *v40;
  v42 = *(int *)((char *)v40 + 3);
  if (v41 != *(_DWORD *)"version" || v42 != *(_DWORD *)"sion")
    goto LABEL_34;
LABEL_35:
  if (a3 >= 2)
  {
    sub_22454024C(a1);
    *(_QWORD *)&v102 = "version";
    *((_QWORD *)&v102 + 1) = 7;
    LODWORD(v103) = 2;
    if (**(unsigned __int8 **)(a1 + 40) <= 1u)
    {
      v47 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 72) = "version";
      *(_QWORD *)(a1 + 80) = 7;
      if (!v47)
        *(_BYTE *)(a1 + 88) = 1;
    }
    sub_224542048(a1, &v103);
    v48 = v103;
    sub_22454024C(a1);
    v49 = (char *)v87;
    v50 = v88;
    if (v87 != v88)
    {
      do
      {
        *(_QWORD *)&v102 = 16;
        *((_QWORD *)&v102 + 1) = v49;
        sub_2245403C8(a1, (size_t *)&v102);
        v49 += 16;
      }
      while (v49 != v50);
    }
    v51 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(v51 - 8);
    *(_QWORD *)(a1 + 56) = v51 - 8;
    if (*(_BYTE *)(a1 + 88))
      *(_BYTE *)(a1 + 88) = 0;
    sub_22454024C(a1);
    v52 = (__int128 *)v89;
    v53 = v90;
    if (v89 != v90)
    {
      do
      {
        v54 = *v52;
        v55 = v52[1];
        v56 = v52[3];
        v104 = v52[2];
        v105 = v56;
        v102 = v54;
        v103 = v55;
        v106 = 16;
        v107 = &v102;
        sub_2245436F8(a1, (float **)&v106);
        v52 += 4;
      }
      while (v52 != v53);
    }
    v57 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(v57 - 8);
    *(_QWORD *)(a1 + 56) = v57 - 8;
    if (*(_BYTE *)(a1 + 88))
      *(_BYTE *)(a1 + 88) = 0;
    sub_22454024C(a1);
    v58 = (char *)v91;
    v59 = v92;
    if (v91 != v92)
    {
      do
      {
        *(_QWORD *)&v102 = 16;
        *((_QWORD *)&v102 + 1) = v58;
        sub_2245403C8(a1, (size_t *)&v102);
        v58 += 16;
      }
      while (v58 != v59);
    }
    v60 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(v60 - 8);
    *(_QWORD *)(a1 + 56) = v60 - 8;
    if (*(_BYTE *)(a1 + 88))
      *(_BYTE *)(a1 + 88) = 0;
    sub_22454024C(a1);
    v61 = (char *)v93;
    v62 = v94;
    if (v93 != v94)
    {
      do
      {
        *(_QWORD *)&v102 = 16;
        *((_QWORD *)&v102 + 1) = v61;
        sub_2245403C8(a1, (size_t *)&v102);
        v61 += 16;
      }
      while (v61 != v62);
    }
    v63 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(v63 - 8);
    *(_QWORD *)(a1 + 56) = v63 - 8;
    if (*(_BYTE *)(a1 + 88))
      *(_BYTE *)(a1 + 88) = 0;
    if (v48 >= 2)
    {
      sub_22454024C(a1);
      v64 = (char *)v95;
      v65 = v96;
      if (v95 != v96)
      {
        do
        {
          *(_QWORD *)&v102 = 16;
          *((_QWORD *)&v102 + 1) = v64;
          sub_2245403C8(a1, (size_t *)&v102);
          v64 += 16;
        }
        while (v64 != v65);
      }
      v66 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(v66 - 8);
      *(_QWORD *)(a1 + 56) = v66 - 8;
      if (*(_BYTE *)(a1 + 88))
        *(_BYTE *)(a1 + 88) = 0;
      sub_22454024C(a1);
      v67 = (__int128 *)v97;
      v68 = v98;
      if (v97 != v98)
      {
        do
        {
          v69 = *v67;
          v70 = v67[1];
          v71 = v67[3];
          v104 = v67[2];
          v105 = v71;
          v102 = v69;
          v103 = v70;
          v106 = 16;
          v107 = &v102;
          sub_2245436F8(a1, (float **)&v106);
          v67 += 4;
        }
        while (v67 != v68);
      }
      v72 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(v72 - 8);
      *(_QWORD *)(a1 + 56) = v72 - 8;
      if (*(_BYTE *)(a1 + 88))
        *(_BYTE *)(a1 + 88) = 0;
      sub_22454024C(a1);
      v73 = (char *)__p;
      v74 = v100;
      if (__p != v100)
      {
        do
        {
          *(_QWORD *)&v102 = 16;
          *((_QWORD *)&v102 + 1) = v73;
          sub_2245403C8(a1, (size_t *)&v102);
          v73 += 16;
        }
        while (v73 != v74);
      }
      v63 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(v63 - 8);
      *(_QWORD *)(a1 + 56) = v63 - 8;
      if (*(_BYTE *)(a1 + 88))
        *(_BYTE *)(a1 + 88) = 0;
    }
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(v63 - 16);
    *(_QWORD *)(a1 + 56) = v63 - 16;
    if (a3 != 2)
    {
      LOBYTE(v102) = 6;
      *((_QWORD *)&v102 + 1) = v101;
      v75 = (unsigned __int8 *)sub_22453FEA0(a1);
      v76 = *v75;
      *v75 = v102;
      LOBYTE(v102) = v76;
      v77 = *((_QWORD *)v75 + 1);
      *((_QWORD *)v75 + 1) = *((_QWORD *)&v102 + 1);
      *((_QWORD *)&v102 + 1) = v77;
      sub_22345337C((void ***)&v102 + 1, v76);
      if (a3 >= 4)
      {
        if (!*(_BYTE *)(a1 + 88)
          || *(_QWORD *)(a1 + 80) != 7
          || ((v78 = *(int **)(a1 + 72), v79 = *v78, v80 = *(int *)((char *)v78 + 3), v79 == *(_DWORD *)"version")
            ? (v81 = v80 == *(_DWORD *)"sion")
            : (v81 = 0),
              !v81))
        {
          LOBYTE(v102) = 4;
          *((_QWORD *)&v102 + 1) = BYTE2(v85);
          v82 = (unsigned __int8 *)sub_22453FEA0(a1);
          v83 = *v82;
          *v82 = v102;
          LOBYTE(v102) = v83;
          v84 = *((_QWORD *)v82 + 1);
          *((_QWORD *)v82 + 1) = *((_QWORD *)&v102 + 1);
          *((_QWORD *)&v102 + 1) = v84;
          sub_22345337C((void ***)&v102 + 1, v83);
        }
      }
    }
  }
  if (__p)
  {
    v100 = (char *)__p;
    operator delete(__p);
  }
  if (v97)
  {
    v98 = (__int128 *)v97;
    operator delete(v97);
  }
  if (v95)
  {
    v96 = (char *)v95;
    operator delete(v95);
  }
  if (v93)
  {
    v94 = (char *)v93;
    operator delete(v93);
  }
  if (v91)
  {
    v92 = (char *)v91;
    operator delete(v91);
  }
  if (v89)
  {
    v90 = (__int128 *)v89;
    operator delete(v89);
  }
  if (v87)
  {
    v88 = (char *)v87;
    operator delete(v87);
  }
}

void sub_223B964E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void ***v2;
  uint64_t v3;

  sub_22345337C(v2, *(unsigned __int8 *)(v3 - 160));
  sub_223255CAC(v1);
  _Unwind_Resume(a1);
}

void sub_223B96508(_Unwind_Exception *a1)
{
  uint64_t v1;
  void ***v2;
  uint64_t v3;

  sub_22345337C(v2, *(unsigned __int8 *)(v3 - 160));
  sub_223255CAC(v1);
  _Unwind_Resume(a1);
}

void sub_223B9653C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223255CAC(v1);
  _Unwind_Resume(a1);
}

void sub_223B96550(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223255CAC(v1);
  _Unwind_Resume(a1);
}

void sub_223B96564(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223255CAC(v1);
  _Unwind_Resume(a1);
}

void sub_223B96578(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223255CAC(v1);
  _Unwind_Resume(a1);
}

void sub_223B9658C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223255CAC(v1);
  _Unwind_Resume(a1);
}

void sub_223B965A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223255CAC(v1);
  _Unwind_Resume(a1);
}

void sub_223B965B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223255CAC(v1);
  _Unwind_Resume(a1);
}

void sub_223B965C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223255CAC(v1);
  _Unwind_Resume(a1);
}

void sub_223B965DC(uint64_t a1, uint64_t a2, __int128 *a3)
{
  int v5;
  unsigned int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  _OWORD v13[3];
  _OWORD v14[4];
  uint64_t v15;
  __int128 *v16;

  sub_22454024C(a2);
  *(_QWORD *)&v12 = "version";
  *((_QWORD *)&v12 + 1) = 7;
  LODWORD(v13[0]) = 2;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v5 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v5)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_224542048(a2, v13);
  v6 = v13[0];
  v7 = a3[5];
  v14[0] = a3[4];
  v14[1] = v7;
  v8 = a3[7];
  v14[2] = a3[6];
  v14[3] = v8;
  v9 = a3[1];
  v12 = *a3;
  v13[0] = v9;
  v10 = a3[3];
  v13[1] = a3[2];
  v13[2] = v10;
  v15 = 16;
  v16 = &v12;
  sub_2245436F8(a2, (float **)&v15);
  if (v6 >= 2)
  {
    v15 = 16;
    v16 = v14;
    sub_2245436F8(a2, (float **)&v15);
  }
  v11 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(a2 + 56) = v11 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_223B966E8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  _QWORD *v25;
  char *v26;
  unsigned __int8 *v27;
  __int128 v28;
  int *v29;
  int v30;
  int v31;
  BOOL v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  unsigned __int8 *v36;
  int v37;
  uint64_t v38;
  __int128 v39;
  int *v40;
  int v41;
  int v42;
  BOOL v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _BYTE *v53;
  _QWORD *v54;
  char *v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  int v58;
  void **v59;
  int *v60;
  int v61;
  int v62;
  _QWORD *v64;
  unint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  _BYTE *v73;
  _QWORD *v74;
  char *v75;
  unsigned __int8 *v76;
  unsigned __int8 *v77;
  int v78;
  void **v79;
  int *v80;
  int v81;
  int v82;
  unsigned __int8 *v84;
  int v85;
  void **v86;
  int v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  _OWORD *v92;
  char *v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _OWORD *v99;
  char *v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  _OWORD *v108;
  char *v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  char *v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char **v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;

  sub_22454024C(a1);
  v4 = *a2;
  v123 = a2[1];
  if (*a2 != v123)
  {
    v126 = (char **)(a1 + 48);
    while (1)
    {
      sub_22454024C(a1);
      *(_QWORD *)&v127 = "version";
      *((_QWORD *)&v127 + 1) = 7;
      LODWORD(v128) = 1;
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a1 + 88);
        *(_QWORD *)(a1 + 72) = "version";
        *(_QWORD *)(a1 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a1 + 88) = 1;
      }
      sub_224542048(a1, &v128);
      v9 = *(const void **)v4;
      v8 = *(_QWORD *)(v4 + 8);
      v124 = v4;
      v10 = v8 - *(_QWORD *)v4;
      if (v8 == *(_QWORD *)v4)
      {
        v125 = 0;
        v11 = 0;
      }
      else
      {
        if (v10 < 0)
          sub_22316E078();
        v11 = (char *)operator new(v8 - (_QWORD)v9);
        v125 = &v11[32 * (v10 >> 5)];
        memcpy(v11, v9, v10 - 4);
      }
      sub_22454024C(a1);
      v12 = *(char **)(a1 + 56);
      if (v11 != v125)
        break;
      v116 = *(unsigned __int8 *)(a1 + 88);
      v117 = *((_QWORD *)v12 - 1);
      v115 = v12 - 8;
      *(_QWORD *)(a1 + 40) = v117;
      *(_QWORD *)(a1 + 56) = v115;
      if (v116)
        *(_BYTE *)(a1 + 88) = 0;
LABEL_129:
      if (v11)
      {
        operator delete(v11);
        v118 = *(_QWORD *)(a1 + 56);
        v119 = *(unsigned __int8 *)(a1 + 88);
        v120 = *(_QWORD *)(v118 - 8);
        v5 = (char *)(v118 - 8);
        *(_QWORD *)(a1 + 40) = v120;
        *(_QWORD *)(a1 + 56) = v5;
        if (v119)
          *(_BYTE *)(a1 + 88) = 0;
      }
      else
      {
        v6 = *((_QWORD *)v115 - 1);
        v5 = v115 - 8;
        *(_QWORD *)(a1 + 40) = v6;
        *(_QWORD *)(a1 + 56) = v5;
      }
      v4 += 24;
      if (v4 == v123)
      {
        *(_QWORD *)(a1 + 40) = *((_QWORD *)v5 - 1);
        *(_QWORD *)(a1 + 56) = v5 - 8;
        return;
      }
    }
    v13 = v11;
    while (1)
    {
      v15 = *(_DWORD *)(a1 + 8);
      v16 = *(_QWORD *)(a1 + 64);
      if ((unint64_t)v12 < v16)
      {
        *(_QWORD *)v12 = *(_QWORD *)(a1 + 40);
        v17 = v12 + 8;
        goto LABEL_30;
      }
      v18 = *v126;
      v19 = v12 - *v126;
      v20 = v19 >> 3;
      v21 = (v19 >> 3) + 1;
      if (v21 >> 61)
        goto LABEL_136;
      v22 = v16 - (_QWORD)v18;
      if (v22 >> 2 > v21)
        v21 = v22 >> 2;
      v23 = (unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v21;
      if (v23)
      {
        if (v23 >> 61)
          goto LABEL_137;
        v24 = operator new(8 * v23);
        v25 = &v24[8 * v20];
        *v25 = *(_QWORD *)(a1 + 40);
        v17 = v25 + 1;
        v26 = (char *)(v12 - v18);
        if (v12 == v18)
        {
LABEL_28:
          *(_QWORD *)(a1 + 48) = v25;
          *(_QWORD *)(a1 + 56) = v17;
          *(_QWORD *)(a1 + 64) = &v24[8 * v23];
          if (!v12)
            goto LABEL_30;
LABEL_29:
          operator delete(v12);
          goto LABEL_30;
        }
      }
      else
      {
        v24 = 0;
        v25 = (_QWORD *)(8 * v20);
        v64 = (_QWORD *)(8 * v20);
        *v64 = *(_QWORD *)(a1 + 40);
        v17 = v64 + 1;
        v26 = (char *)(v12 - v18);
        if (v12 == v18)
          goto LABEL_28;
      }
      v65 = (unint64_t)(v26 - 8);
      if (v65 < 0x58)
        break;
      if ((unint64_t)(v12 - v24 - v19) < 0x20)
      {
        v66 = v12;
        do
        {
LABEL_114:
          v103 = *((_QWORD *)v66 - 1);
          v66 -= 8;
          *--v25 = v103;
        }
        while (v66 != v18);
        goto LABEL_115;
      }
      v97 = (v65 >> 3) + 1;
      v98 = 8 * (v97 & 0x3FFFFFFFFFFFFFFCLL);
      v66 = &v12[-v98];
      v25 = (_QWORD *)((char *)v25 - v98);
      v99 = &v24[v19 - 16];
      v100 = v12 - 16;
      v101 = v97 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v102 = *(_OWORD *)v100;
        *(v99 - 1) = *((_OWORD *)v100 - 1);
        *v99 = v102;
        v99 -= 2;
        v100 -= 32;
        v101 -= 4;
      }
      while (v101);
      if (v97 != (v97 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_114;
LABEL_115:
      v12 = *v126;
      *(_QWORD *)(a1 + 48) = v25;
      *(_QWORD *)(a1 + 56) = v17;
      *(_QWORD *)(a1 + 64) = &v24[8 * v23];
      if (v12)
        goto LABEL_29;
LABEL_30:
      *(_QWORD *)(a1 + 56) = v17;
      v27 = (unsigned __int8 *)sub_22453FEA0(a1);
      *(_QWORD *)(a1 + 40) = v27;
      if (*(_BYTE *)(a1 + 88))
        *(_BYTE *)(a1 + 88) = 0;
      if (*v27 >= 2u)
      {
        LOBYTE(v127) = 6;
        *((_QWORD *)&v127 + 1) = 1;
        v36 = (unsigned __int8 *)sub_22453FEA0(a1);
        v37 = *v36;
        *v36 = v127;
        LOBYTE(v127) = v37;
        v38 = *((_QWORD *)v36 + 1);
        *((_QWORD *)v36 + 1) = *((_QWORD *)&v127 + 1);
        *((_QWORD *)&v127 + 1) = v38;
        sub_22345337C((void ***)&v127 + 1, v37);
        if (v15 >= 1)
        {
LABEL_34:
          v28 = *((_OWORD *)v13 + 1);
          v127 = *(_OWORD *)v13;
          v128 = v28;
          v129 = 3;
          v130 = (uint64_t)&v127;
          sub_2245436F8(a1, (float **)&v129);
          if (!*(_BYTE *)(a1 + 88)
            || *(_QWORD *)(a1 + 80) != 7
            || ((v29 = *(int **)(a1 + 72), v30 = *v29, v31 = *(int *)((char *)v29 + 3), v30 == *(_DWORD *)"version")
              ? (v32 = v31 == *(_DWORD *)"sion")
              : (v32 = 0),
                !v32))
          {
            sub_22454231C(a1, (double *)&v128);
          }
          v34 = *(char **)(a1 + 56);
          v33 = *(_QWORD *)(a1 + 64);
          if ((unint64_t)v34 < v33)
          {
            *(_QWORD *)v34 = *(_QWORD *)(a1 + 40);
            v35 = (uint64_t)(v34 + 8);
LABEL_64:
            *(_QWORD *)(a1 + 56) = v35;
            v56 = (unsigned __int8 *)sub_22453FEA0(a1);
            *(_QWORD *)(a1 + 40) = v56;
            if (*(_BYTE *)(a1 + 88))
              *(_BYTE *)(a1 + 88) = 0;
            if (*v56 < 2u)
              goto LABEL_91;
            LOBYTE(v129) = 6;
            v130 = 1;
            v57 = (unsigned __int8 *)sub_22453FEA0(a1);
            v58 = *v57;
            *v57 = v129;
            LOBYTE(v129) = v58;
            v59 = (void **)*((_QWORD *)v57 + 1);
            *((_QWORD *)v57 + 1) = v130;
            v130 = (uint64_t)v59;
            sub_22345337C((void ***)&v130, v58);
            if (!*(_BYTE *)(a1 + 88) || *(_QWORD *)(a1 + 80) != 7)
              goto LABEL_98;
            v60 = *(int **)(a1 + 72);
            v61 = *v60;
            v62 = *(int *)((char *)v60 + 3);
            if (v61 != *(_DWORD *)"version" || v62 != *(_DWORD *)"sion")
              goto LABEL_98;
            goto LABEL_14;
          }
          v47 = *v126;
          v48 = v34 - *v126;
          v49 = v48 >> 3;
          v50 = (v48 >> 3) + 1;
          if (v50 >> 61)
            goto LABEL_136;
          v51 = v33 - (_QWORD)v47;
          if (v51 >> 2 > v50)
            v50 = v51 >> 2;
          if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
            v52 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v52 = v50;
          if (v52)
          {
            if (v52 >> 61)
              goto LABEL_137;
            v53 = operator new(8 * v52);
            v54 = &v53[8 * v49];
            *v54 = *(_QWORD *)(a1 + 40);
            v35 = (uint64_t)(v54 + 1);
            v55 = (char *)(v34 - v47);
            if (v34 == v47)
              goto LABEL_62;
LABEL_103:
            v88 = (unint64_t)(v55 - 8);
            if (v88 < 0x58)
              goto LABEL_141;
            if ((unint64_t)(v34 - v53 - v48) < 0x20)
              goto LABEL_141;
            v89 = (v88 >> 3) + 1;
            v90 = 8 * (v89 & 0x3FFFFFFFFFFFFFFCLL);
            v91 = &v34[-v90];
            v54 = (_QWORD *)((char *)v54 - v90);
            v92 = &v53[v48 - 16];
            v93 = v34 - 16;
            v94 = v89 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v95 = *(_OWORD *)v93;
              *(v92 - 1) = *((_OWORD *)v93 - 1);
              *v92 = v95;
              v92 -= 2;
              v93 -= 32;
              v94 -= 4;
            }
            while (v94);
            v34 = v91;
            if (v89 != (v89 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_141:
              do
              {
                v96 = *((_QWORD *)v34 - 1);
                v34 -= 8;
                *--v54 = v96;
              }
              while (v34 != v47);
            }
            v34 = *v126;
            *(_QWORD *)(a1 + 48) = v54;
            *(_QWORD *)(a1 + 56) = v35;
            *(_QWORD *)(a1 + 64) = &v53[8 * v52];
            if (!v34)
              goto LABEL_64;
          }
          else
          {
            v53 = 0;
            v54 = (_QWORD *)(8 * v49);
            *(_QWORD *)(8 * v49) = *(_QWORD *)(a1 + 40);
            v35 = 8 * v49 + 8;
            v55 = (char *)(v34 - v47);
            if (v34 != v47)
              goto LABEL_103;
LABEL_62:
            *(_QWORD *)(a1 + 48) = v54;
            *(_QWORD *)(a1 + 56) = v35;
            *(_QWORD *)(a1 + 64) = &v53[8 * v52];
            if (!v34)
              goto LABEL_64;
          }
          operator delete(v34);
          goto LABEL_64;
        }
      }
      else
      {
        *(_QWORD *)(a1 + 72) = "version";
        *(_QWORD *)(a1 + 80) = 7;
        *(_BYTE *)(a1 + 88) = 1;
        *(_DWORD *)(a1 + 96) = 1;
        *(_BYTE *)(a1 + 100) = 1;
        *(_BYTE *)(a1 + 88) = 0;
        if (v15 >= 1)
          goto LABEL_34;
      }
      v39 = *((_OWORD *)v13 + 1);
      v127 = *(_OWORD *)v13;
      v128 = v39;
      v129 = 3;
      v130 = (uint64_t)&v127;
      sub_2245436F8(a1, (float **)&v129);
      if (!*(_BYTE *)(a1 + 88)
        || *(_QWORD *)(a1 + 80) != 7
        || ((v40 = *(int **)(a1 + 72), v41 = *v40, v42 = *(int *)((char *)v40 + 3), v41 == *(_DWORD *)"version")
          ? (v43 = v42 == *(_DWORD *)"sion")
          : (v43 = 0),
            !v43))
      {
        sub_22454231C(a1, (double *)&v128);
      }
      v45 = *(char **)(a1 + 56);
      v44 = *(_QWORD *)(a1 + 64);
      if ((unint64_t)v45 >= v44)
      {
        v67 = *v126;
        v68 = v45 - *v126;
        v69 = v68 >> 3;
        v70 = (v68 >> 3) + 1;
        if (v70 >> 61)
LABEL_136:
          sub_22453F17C();
        v71 = v44 - (_QWORD)v67;
        if (v71 >> 2 > v70)
          v70 = v71 >> 2;
        if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8)
          v72 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v72 = v70;
        if (v72)
        {
          if (v72 >> 61)
LABEL_137:
            sub_223174E94();
          v73 = operator new(8 * v72);
          v74 = &v73[8 * v69];
          *v74 = *(_QWORD *)(a1 + 40);
          v46 = (uint64_t)(v74 + 1);
          v75 = (char *)(v45 - v67);
          if (v45 != v67)
          {
LABEL_118:
            v104 = (unint64_t)(v75 - 8);
            if (v104 < 0x58)
              goto LABEL_142;
            if ((unint64_t)(v45 - v73 - v68) < 0x20)
              goto LABEL_142;
            v105 = (v104 >> 3) + 1;
            v106 = 8 * (v105 & 0x3FFFFFFFFFFFFFFCLL);
            v107 = &v45[-v106];
            v74 = (_QWORD *)((char *)v74 - v106);
            v108 = &v73[v68 - 16];
            v109 = v45 - 16;
            v110 = v105 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v111 = *(_OWORD *)v109;
              *(v108 - 1) = *((_OWORD *)v109 - 1);
              *v108 = v111;
              v108 -= 2;
              v109 -= 32;
              v110 -= 4;
            }
            while (v110);
            v45 = v107;
            if (v105 != (v105 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_142:
              do
              {
                v112 = *((_QWORD *)v45 - 1);
                v45 -= 8;
                *--v74 = v112;
              }
              while (v45 != v67);
            }
            v45 = *v126;
            *(_QWORD *)(a1 + 48) = v74;
            *(_QWORD *)(a1 + 56) = v46;
            *(_QWORD *)(a1 + 64) = &v73[8 * v72];
            if (!v45)
              goto LABEL_88;
LABEL_87:
            operator delete(v45);
            goto LABEL_88;
          }
        }
        else
        {
          v73 = 0;
          v74 = (_QWORD *)(8 * v69);
          *(_QWORD *)(8 * v69) = *(_QWORD *)(a1 + 40);
          v46 = 8 * v69 + 8;
          v75 = (char *)(v45 - v67);
          if (v45 != v67)
            goto LABEL_118;
        }
        *(_QWORD *)(a1 + 48) = v74;
        *(_QWORD *)(a1 + 56) = v46;
        *(_QWORD *)(a1 + 64) = &v73[8 * v72];
        if (v45)
          goto LABEL_87;
      }
      else
      {
        *(_QWORD *)v45 = *(_QWORD *)(a1 + 40);
        v46 = (uint64_t)(v45 + 8);
      }
LABEL_88:
      *(_QWORD *)(a1 + 56) = v46;
      v76 = (unsigned __int8 *)sub_22453FEA0(a1);
      *(_QWORD *)(a1 + 40) = v76;
      if (*(_BYTE *)(a1 + 88))
        *(_BYTE *)(a1 + 88) = 0;
      if (*v76 < 2u)
      {
LABEL_91:
        *(_QWORD *)(a1 + 72) = "version";
        *(_QWORD *)(a1 + 80) = 7;
        *(_BYTE *)(a1 + 88) = 1;
        *(_DWORD *)(a1 + 96) = 1;
        *(_BYTE *)(a1 + 100) = 1;
        *(_BYTE *)(a1 + 88) = 0;
LABEL_98:
        LOBYTE(v129) = 5;
        v130 = SDWORD2(v128);
        v84 = (unsigned __int8 *)sub_22453FEA0(a1);
        v85 = *v84;
        *v84 = v129;
        LOBYTE(v129) = v85;
        v86 = (void **)*((_QWORD *)v84 + 1);
        *((_QWORD *)v84 + 1) = v130;
        v130 = (uint64_t)v86;
        sub_22345337C((void ***)&v130, v85);
        v87 = *(unsigned __int8 *)(a1 + 88);
        v14 = *(_QWORD *)(a1 + 56);
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(v14 - 8);
        *(_QWORD *)(a1 + 56) = v14 - 8;
        if (!v87)
          goto LABEL_16;
        goto LABEL_15;
      }
      LOBYTE(v129) = 6;
      v130 = 1;
      v77 = (unsigned __int8 *)sub_22453FEA0(a1);
      v78 = *v77;
      *v77 = v129;
      LOBYTE(v129) = v78;
      v79 = (void **)*((_QWORD *)v77 + 1);
      *((_QWORD *)v77 + 1) = v130;
      v130 = (uint64_t)v79;
      sub_22345337C((void ***)&v130, v78);
      if (!*(_BYTE *)(a1 + 88) || *(_QWORD *)(a1 + 80) != 7)
        goto LABEL_98;
      v80 = *(int **)(a1 + 72);
      v81 = *v80;
      v82 = *(int *)((char *)v80 + 3);
      if (v81 != *(_DWORD *)"version" || v82 != *(_DWORD *)"sion")
        goto LABEL_98;
LABEL_14:
      v14 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(v14 - 8);
      *(_QWORD *)(a1 + 56) = v14 - 8;
LABEL_15:
      *(_BYTE *)(a1 + 88) = 0;
LABEL_16:
      v12 = (char *)(v14 - 16);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(v14 - 16);
      *(_QWORD *)(a1 + 56) = v14 - 16;
      v13 += 32;
      if (v13 == v125)
      {
        v114 = *(_QWORD *)(v14 - 24);
        v113 = (char *)(v14 - 24);
        *(_QWORD *)(a1 + 40) = v114;
        *(_QWORD *)(a1 + 56) = v113;
        v115 = v113;
        v4 = v124;
        goto LABEL_129;
      }
    }
    v66 = v12;
    goto LABEL_114;
  }
  v121 = *(_QWORD *)(a1 + 56);
  v122 = *(unsigned __int8 *)(a1 + 88);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v121 - 8);
  *(_QWORD *)(a1 + 56) = v121 - 8;
  if (v122)
    *(_BYTE *)(a1 + 88) = 0;
}

void sub_223B97090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223B970F8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_223B8DACC((uint64_t)v8, a2);
  sub_223B97214(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_223B971FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223B8842C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223B97214(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  const void **v30;
  const void **v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t *v39;

  v6 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v6 + 40))
  {
    v39 = (uint64_t *)(v6 + 16);
    sub_22455A7EC(&v39, 2u);
    sub_224555278(*(_QWORD *)(a1 + 24));
    v7 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v7 + 40))
      goto LABEL_3;
LABEL_6:
    sub_22455B08C();
    v8 = *(char *)(a2 + 16);
    v9 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v9 + 40))
      goto LABEL_4;
    goto LABEL_7;
  }
  sub_22455AA60((uint64_t)&v39, v6 + 8);
  sub_224555278(*(_QWORD *)(a1 + 24));
  v7 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v7 + 40))
    goto LABEL_6;
LABEL_3:
  v39 = (uint64_t *)(v7 + 16);
  sub_22455AB50(&v39, *(_QWORD *)(a2 + 8));
  v8 = *(char *)(a2 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v9 + 40))
  {
LABEL_4:
    v39 = (uint64_t *)(v9 + 16);
    sub_224559C04(&v39, v8);
    goto LABEL_11;
  }
LABEL_7:
  if (v8 < 0)
  {
    LOBYTE(v39) = -52;
    BYTE1(v39) = v8;
  }
  else
  {
    LOBYTE(v39) = v8;
  }
  std::ostream::write();
LABEL_11:
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 88) - 8);
  sub_224554D6C((uint64_t *)(v10 + 48), *(_QWORD *)(v10 + 16) - v11 - 9);
  v12 = *(_QWORD *)(v10 + 48);
  if (v12)
    memmove((void *)(*(_QWORD *)(v10 + 24) + v11), *(const void **)(v10 + 56), v12);
  *(_QWORD *)(v10 + 48) = 0;
  v13 = *(_QWORD *)(v10 + 80);
  v14 = *(_QWORD *)(v10 + 88) - 8;
  *(_QWORD *)(v10 + 88) = v14;
  if (v13 == v14)
  {
    std::ostream::write();
    if (*(_BYTE *)(v10 + 40))
    {
      free(*(void **)(v10 + 24));
      *(_BYTE *)(v10 + 40) = 0;
    }
  }
  if (*(_BYTE *)(a2 + 48))
  {
    v15 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v15 + 40))
    {
      v39 = (uint64_t *)(v15 + 16);
      sub_224559C04(&v39, 1);
      v16 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v16 + 40))
        goto LABEL_19;
    }
    else
    {
      LOBYTE(v39) = 1;
      std::ostream::write();
      v16 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v16 + 40))
      {
LABEL_19:
        v39 = (uint64_t *)(v16 + 16);
        sub_22455B8BC((uint64_t)&v38, &v39, (const void **)(a2 + 24));
        if (a3 < 4)
          return;
        goto LABEL_28;
      }
    }
    sub_22455BCF4((uint64_t)&v39, v16 + 8, a2 + 24);
    if (a3 < 4)
      return;
  }
  else
  {
    v17 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v17 + 40))
    {
      v39 = (uint64_t *)(v17 + 16);
      sub_224559C04(&v39, 0);
      if (a3 < 4)
        return;
    }
    else
    {
      LOBYTE(v39) = 0;
      std::ostream::write();
      if (a3 < 4)
        return;
    }
  }
LABEL_28:
  sub_223300278(a1, a2 + 56);
  if (a3 != 5)
  {
    if (a3 < 6)
      return;
    if (!*(_BYTE *)(a2 + 104))
    {
      v23 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v23 + 40))
      {
        v39 = (uint64_t *)(v23 + 16);
        sub_224559C04(&v39, 0);
        if (!*(_BYTE *)(a2 + 136))
        {
LABEL_54:
          v26 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v26 + 40))
          {
            v39 = (uint64_t *)(v26 + 16);
            sub_224559C04(&v39, 0);
            if (*(_BYTE *)(a2 + 168))
              goto LABEL_56;
          }
          else
          {
            LOBYTE(v39) = 0;
            std::ostream::write();
            if (*(_BYTE *)(a2 + 168))
            {
LABEL_56:
              v27 = *(_QWORD *)(a1 + 24);
              if (*(_BYTE *)(v27 + 40))
              {
                v39 = (uint64_t *)(v27 + 16);
                sub_224559C04(&v39, 1);
              }
              else
              {
                LOBYTE(v39) = 1;
                std::ostream::write();
              }
              v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 152) - *(_QWORD *)(a2 + 144)) >> 3);
              v29 = *(_QWORD *)(a1 + 24);
              if (*(_BYTE *)(v29 + 40))
              {
                v39 = (uint64_t *)(v29 + 16);
                sub_22455B1CC(&v39, v28);
              }
              else
              {
                sub_22455B4D4();
              }
              v31 = *(const void ***)(a2 + 144);
              v30 = *(const void ***)(a2 + 152);
              v32 = ((char *)v30 - (char *)v31) / 24;
              v33 = *(_QWORD *)(a1 + 24);
              if (*(_BYTE *)(v33 + 40))
              {
                v39 = (uint64_t *)(v33 + 16);
                if (v30 != v31)
                {
                  v34 = 24 * v32;
                  do
                  {
                    sub_22455B8BC((uint64_t)&v38, &v39, v31);
                    v31 += 3;
                    v34 -= 24;
                  }
                  while (v34);
                }
              }
              else if (v30 != v31)
              {
                v35 = v33 + 8;
                v36 = 24 * v32;
                do
                {
                  sub_22455BCF4((uint64_t)&v39, v35, (uint64_t)v31);
                  v31 += 3;
                  v36 -= 24;
                }
                while (v36);
              }
              return;
            }
          }
LABEL_72:
          v37 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v37 + 40))
          {
            v39 = (uint64_t *)(v37 + 16);
            sub_224559C04(&v39, 0);
          }
          else
          {
            LOBYTE(v39) = 0;
            std::ostream::write();
          }
          return;
        }
      }
      else
      {
        LOBYTE(v39) = 0;
        std::ostream::write();
        if (!*(_BYTE *)(a2 + 136))
          goto LABEL_54;
      }
LABEL_46:
      v24 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v24 + 40))
      {
        v39 = (uint64_t *)(v24 + 16);
        sub_224559C04(&v39, 1);
        v25 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v25 + 40))
          goto LABEL_48;
      }
      else
      {
        LOBYTE(v39) = 1;
        std::ostream::write();
        v25 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v25 + 40))
        {
LABEL_48:
          v39 = (uint64_t *)(v25 + 16);
          sub_22455B8BC((uint64_t)&v38, &v39, (const void **)(a2 + 112));
          if (*(_BYTE *)(a2 + 168))
            goto LABEL_56;
          goto LABEL_72;
        }
      }
      sub_22455BCF4((uint64_t)&v39, v25 + 8, a2 + 112);
      if (*(_BYTE *)(a2 + 168))
        goto LABEL_56;
      goto LABEL_72;
    }
    v21 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v21 + 40))
    {
      v39 = (uint64_t *)(v21 + 16);
      sub_224559C04(&v39, 1);
      v22 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v22 + 40))
        goto LABEL_37;
    }
    else
    {
      LOBYTE(v39) = 1;
      std::ostream::write();
      v22 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v22 + 40))
      {
LABEL_37:
        v39 = (uint64_t *)(v22 + 16);
        sub_22455B8BC((uint64_t)&v38, &v39, (const void **)(a2 + 80));
        if (!*(_BYTE *)(a2 + 136))
          goto LABEL_54;
        goto LABEL_46;
      }
    }
    sub_22455BCF4((uint64_t)&v39, v22 + 8, a2 + 80);
    if (!*(_BYTE *)(a2 + 136))
      goto LABEL_54;
    goto LABEL_46;
  }
  if (!*(_BYTE *)(a2 + 104))
    goto LABEL_72;
  v18 = (const void **)(a2 + 80);
  v19 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v19 + 40))
  {
    v39 = (uint64_t *)(v19 + 16);
    sub_224559C04(&v39, 1);
    v20 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v20 + 40))
    {
LABEL_32:
      v39 = (uint64_t *)(v20 + 16);
      sub_22455B8BC((uint64_t)&v38, &v39, v18);
      return;
    }
  }
  else
  {
    LOBYTE(v39) = 1;
    std::ostream::write();
    v20 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v20 + 40))
      goto LABEL_32;
  }
  sub_22455BCF4((uint64_t)&v39, v20 + 8, (uint64_t)v18);
}

void sub_223B97884(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_223B8EFDC((uint64_t)v8, a2);
  sub_223B97214(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_223B97988(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223B8842C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223B979A0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_223B8F6B8((uint64_t)v8, a2);
  sub_223B97ABC(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_223B97AA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223B8842C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223B97ABC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t *v19;

  v6 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v6 + 40))
  {
    v19 = (uint64_t *)(v6 + 16);
    sub_22455A7EC(&v19, 2u);
    sub_224555278(*(_QWORD *)(a1 + 24));
    v7 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v7 + 40))
      goto LABEL_3;
LABEL_6:
    sub_22455B08C();
    v8 = *(char *)(a2 + 16);
    v9 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v9 + 40))
      goto LABEL_4;
    goto LABEL_7;
  }
  sub_22455AA60((uint64_t)&v19, v6 + 8);
  sub_224555278(*(_QWORD *)(a1 + 24));
  v7 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v7 + 40))
    goto LABEL_6;
LABEL_3:
  v19 = (uint64_t *)(v7 + 16);
  sub_22455AB50(&v19, *(_QWORD *)(a2 + 8));
  v8 = *(char *)(a2 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v9 + 40))
  {
LABEL_4:
    v19 = (uint64_t *)(v9 + 16);
    sub_224559C04(&v19, v8);
    goto LABEL_11;
  }
LABEL_7:
  if (v8 < 0)
  {
    LOBYTE(v19) = -52;
    BYTE1(v19) = v8;
  }
  else
  {
    LOBYTE(v19) = v8;
  }
  std::ostream::write();
LABEL_11:
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 88) - 8);
  sub_224554D6C((uint64_t *)(v10 + 48), *(_QWORD *)(v10 + 16) - v11 - 9);
  v12 = *(_QWORD *)(v10 + 48);
  if (v12)
    memmove((void *)(*(_QWORD *)(v10 + 24) + v11), *(const void **)(v10 + 56), v12);
  *(_QWORD *)(v10 + 48) = 0;
  v13 = *(_QWORD *)(v10 + 80);
  v14 = *(_QWORD *)(v10 + 88) - 8;
  *(_QWORD *)(v10 + 88) = v14;
  if (v13 == v14)
  {
    std::ostream::write();
    if (*(_BYTE *)(v10 + 40))
    {
      free(*(void **)(v10 + 24));
      *(_BYTE *)(v10 + 40) = 0;
    }
  }
  if (!*(_BYTE *)(a2 + 48))
  {
    v17 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v17 + 40))
    {
      v19 = (uint64_t *)(v17 + 16);
      sub_224559C04(&v19, 0);
      if (a3 < 4)
        return;
    }
    else
    {
      LOBYTE(v19) = 0;
      std::ostream::write();
      if (a3 < 4)
        return;
    }
    goto LABEL_26;
  }
  v15 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v15 + 40))
  {
    v19 = (uint64_t *)(v15 + 16);
    sub_224559C04(&v19, 1);
    v16 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v16 + 40))
      goto LABEL_19;
LABEL_25:
    sub_22455BCF4((uint64_t)&v19, v16 + 8, a2 + 24);
    if (a3 < 4)
      return;
    goto LABEL_26;
  }
  LOBYTE(v19) = 1;
  std::ostream::write();
  v16 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v16 + 40))
    goto LABEL_25;
LABEL_19:
  v19 = (uint64_t *)(v16 + 16);
  sub_22455B8BC((uint64_t)&v18, &v19, (const void **)(a2 + 24));
  if (a3 < 4)
    return;
LABEL_26:
  sub_223300278(a1, a2 + 56);
}

void sub_223B97D3C(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_223195210(v5);
  v21[0] = v5;
  sub_2231813E8((_QWORD *)(v5 + 16), (uint64_t)(&off_24EC78578)[2 * *a3], (uint64_t)(&off_24EC78578)[2 * *a3 + 1]);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_22316DBC0();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v14 + 128);
    MEMORY[0x227684CE8](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_22316DD70();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24EC5FF70[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_223B97F9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_223B97FC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223B97FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22456E764((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223B97FF0(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_223195210(v5);
  v21[0] = v5;
  sub_22454B4D0((_QWORD *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_22316DBC0();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v14 + 128);
    MEMORY[0x227684CE8](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_22316DD70();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24EC5FF70[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_223B98240(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_223B98264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223B98280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22456E764((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223B98294(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_223B8DACC((uint64_t)v8, a2);
  sub_223B983B0(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_223B98398(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223B8842C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223B983B0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  _BYTE *v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned __int8 *v26;
  int v27;
  uint64_t v28;
  int v29;
  unsigned __int8 *v30;
  int v31;
  uint64_t v32;
  int v33;
  unsigned __int8 *v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unsigned __int8 *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "auto_timestamp";
    *(_QWORD *)(a1 + 80) = 14;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_22453FAE0(a1);
  v42 = (unint64_t)"version";
  v43 = 7;
  v44 = 2;
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v7 = *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 72) = "version", *(_QWORD *)(a1 + 80) = 7, v7))
  {
    sub_224540500(a1, &v44);
    v8 = *(unsigned __int8 **)(a1 + 40);
    if (*v8 <= 1u)
      goto LABEL_7;
  }
  else
  {
    *(_BYTE *)(a1 + 88) = 1;
    sub_224540500(a1, &v44);
    v8 = *(unsigned __int8 **)(a1 + 40);
    if (*v8 <= 1u)
    {
LABEL_7:
      *(_QWORD *)(a1 + 72) = "ns";
      v9 = a1 + 72;
      v11 = (_BYTE *)(a1 + 88);
      v10 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 80) = 2;
      v12 = (_QWORD *)(a1 + 80);
      if (!v10)
        *v11 = 1;
      goto LABEL_16;
    }
  }
  v12 = (_QWORD *)(a1 + 80);
  v9 = a1 + 72;
  v11 = (_BYTE *)(a1 + 88);
  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || (**(_DWORD **)v9 == *(_DWORD *)"version"
      ? (v13 = *(_DWORD *)(*(_QWORD *)v9 + 3) == *(_DWORD *)"sion")
      : (v13 = 0),
        !v13))
  {
LABEL_16:
    v14 = *(_QWORD *)(a2 + 8);
    LOBYTE(v42) = 5;
    v43 = v14;
    v15 = (unsigned __int8 *)sub_22453F8B8(a1);
    v16 = *v15;
    *v15 = 5;
    LOBYTE(v42) = v16;
    v17 = *((_QWORD *)v15 + 1);
    *((_QWORD *)v15 + 1) = v43;
    v43 = v17;
    sub_223454278(&v43, v16);
    v8 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v8 <= 1u)
  {
    v18 = *v11;
    *(_QWORD *)v9 = "clock_type";
    *v12 = 10;
    if (!v18)
      *v11 = 1;
  }
  v42 = a2 + 16;
  sub_223B989D8(a1, (unsigned __int8 **)&v42);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(unsigned __int8 **)(v19 - 8);
  *(_QWORD *)(a1 + 40) = v20;
  *(_QWORD *)(a1 + 56) = v19 - 8;
  if (*(_BYTE *)(a1 + 88))
    *v11 = 0;
  if (*v20 <= 1u)
  {
    *(_QWORD *)v9 = "name";
    *v12 = 4;
    *v11 = 1;
  }
  if (!*(_BYTE *)(a2 + 48))
  {
    LOBYTE(v42) = 0;
    v43 = 0;
    v21 = (unsigned __int8 *)sub_22453F8B8(a1);
    v22 = *v21;
    *v21 = v42;
    LOBYTE(v42) = v22;
    v23 = *((_QWORD *)v21 + 1);
    *((_QWORD *)v21 + 1) = v43;
    v43 = v23;
    sub_223454278(&v43, v22);
    if (a3 < 4)
      return;
LABEL_28:
    if (**(unsigned __int8 **)(a1 + 40) > 1u
      || (v24 = *v11, *(_QWORD *)v9 = "custom_timestamp", *v12 = 16, v24))
    {
      if (*(_BYTE *)(a2 + 72))
        goto LABEL_31;
    }
    else
    {
      *v11 = 1;
      if (*(_BYTE *)(a2 + 72))
      {
LABEL_31:
        v42 = *(_QWORD *)(a1 + 8);
        sub_223B98AE0((int *)&v42, a1, (__int128 *)(a2 + 56));
        if (a3 == 5)
          goto LABEL_32;
        goto LABEL_39;
      }
    }
    LOBYTE(v42) = 0;
    v43 = 0;
    v26 = (unsigned __int8 *)sub_22453F8B8(a1);
    v27 = *v26;
    *v26 = v42;
    LOBYTE(v42) = v27;
    v28 = *((_QWORD *)v26 + 1);
    *((_QWORD *)v26 + 1) = v43;
    v43 = v28;
    sub_223454278(&v43, v27);
    if (a3 == 5)
    {
LABEL_32:
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v25 = *v11;
        *(_QWORD *)v9 = "space";
        *v12 = 5;
        if (!v25)
          *v11 = 1;
      }
      if (*(_BYTE *)(a2 + 104))
      {
        sub_2245409C8(a1, a2 + 80);
        return;
      }
LABEL_58:
      LOBYTE(v42) = 0;
      v43 = 0;
      v39 = (unsigned __int8 *)sub_22453F8B8(a1);
      v40 = *v39;
      *v39 = v42;
      LOBYTE(v42) = v40;
      v41 = *((_QWORD *)v39 + 1);
      *((_QWORD *)v39 + 1) = v43;
      v43 = v41;
      sub_223454278(&v43, v40);
      return;
    }
LABEL_39:
    if (a3 < 6)
      return;
    if (**(unsigned __int8 **)(a1 + 40) <= 1u)
    {
      v29 = *v11;
      *(_QWORD *)v9 = "space";
      *v12 = 5;
      if (!v29)
        *v11 = 1;
    }
    if (*(_BYTE *)(a2 + 104))
    {
      sub_2245409C8(a1, a2 + 80);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_50;
    }
    else
    {
      LOBYTE(v42) = 0;
      v43 = 0;
      v30 = (unsigned __int8 *)sub_22453F8B8(a1);
      v31 = *v30;
      *v30 = v42;
      LOBYTE(v42) = v31;
      v32 = *((_QWORD *)v30 + 1);
      *((_QWORD *)v30 + 1) = v43;
      v43 = v32;
      sub_223454278(&v43, v31);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_50;
    }
    v33 = *v11;
    *(_QWORD *)v9 = "instance_id";
    *v12 = 11;
    if (!v33)
      *v11 = 1;
LABEL_50:
    if (*(_BYTE *)(a2 + 136))
    {
      sub_2245409C8(a1, a2 + 112);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_56;
    }
    else
    {
      LOBYTE(v42) = 0;
      v43 = 0;
      v34 = (unsigned __int8 *)sub_22453F8B8(a1);
      v35 = *v34;
      *v34 = v42;
      LOBYTE(v42) = v35;
      v36 = *((_QWORD *)v34 + 1);
      *((_QWORD *)v34 + 1) = v43;
      v43 = v36;
      sub_223454278(&v43, v35);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_56;
    }
    v37 = *v11;
    *(_QWORD *)v9 = "references";
    *v12 = 10;
    if (!v37)
      *v11 = 1;
LABEL_56:
    if (*(_BYTE *)(a2 + 168))
    {
      v38 = *(_QWORD *)(a2 + 144);
      v42 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 152) - v38) >> 3);
      v43 = v38;
      sub_224541EE4(a1, &v42);
      return;
    }
    goto LABEL_58;
  }
  sub_2245409C8(a1, a2 + 24);
  if (a3 >= 4)
    goto LABEL_28;
}

void sub_223B98958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_223454278(v10, a10);
  _Unwind_Resume(a1);
}

void sub_223B98990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_223454278(v10, a10);
  _Unwind_Resume(a1);
}

void sub_223B989A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_223454278(v10, a10);
  _Unwind_Resume(a1);
}

void sub_223B989C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_223454278(v10, a10);
  _Unwind_Resume(a1);
}

void sub_223B989D8(uint64_t a1, unsigned __int8 **a2)
{
  unsigned __int8 *v3;
  void *__p[2];
  char v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  v3 = *a2;
  v7 = 0;
  sub_223B8DE00((uint64_t)&v9, (uint64_t)v6, v3);
  if (v7 == -1)
    sub_22316DD70();
  v9 = &v8;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24EC5FFA0[v7])(__p, &v9, v6);
  if (v7 != -1)
    ((void (*)(char **, _BYTE *))off_24EC5FF88[v7])(&v9, v6);
  sub_2245409C8(a1, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_223B98A9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223B98AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223B98ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223B98AE0(int *a1, uint64_t a2, __int128 *a3)
{
  int v6;
  int v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  _BYTE *v12;
  _QWORD *v13;
  BOOL v14;
  int v15;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  int v24;
  __int128 v25;

  sub_22453FAE0(a2);
  v22 = "version";
  v23 = 7;
  v24 = 2;
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (v6 = *(unsigned __int8 *)(a2 + 88), *(_QWORD *)(a2 + 72) = "version", *(_QWORD *)(a2 + 80) = 7, v6))
  {
    sub_224540500(a2, &v24);
    v7 = *a1;
    if (*a1 >= 1)
      goto LABEL_4;
LABEL_20:
    v25 = *a3;
    v9 = *(unsigned __int8 **)(a2 + 40);
    if (*v9 <= 1u)
    {
      *(_QWORD *)(a2 + 72) = "ns";
      v10 = a2 + 72;
      v12 = (_BYTE *)(a2 + 88);
      v15 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 80) = 2;
      v13 = (_QWORD *)(a2 + 80);
      if (!v15)
        *v12 = 1;
      goto LABEL_29;
    }
    v13 = (_QWORD *)(a2 + 80);
    v10 = a2 + 72;
    v12 = (_BYTE *)(a2 + 88);
    if (!*(_BYTE *)(a2 + 88) || *(_QWORD *)(a2 + 80) != 7)
      goto LABEL_29;
    if (**(_DWORD **)v10 != *(_DWORD *)"version" || *(_DWORD *)(*(_QWORD *)v10 + 3) != *(_DWORD *)"sion")
      goto LABEL_29;
    goto LABEL_30;
  }
  *(_BYTE *)(a2 + 88) = 1;
  sub_224540500(a2, &v24);
  v7 = *a1;
  if (*a1 < 1)
    goto LABEL_20;
LABEL_4:
  if (v7 == 2)
  {
    v22 = "min_version";
    v23 = 11;
    v24 = 2;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v8 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "min_version";
      *(_QWORD *)(a2 + 80) = 11;
      if (!v8)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_224540500(a2, &v24);
  }
  v25 = *a3;
  v9 = *(unsigned __int8 **)(a2 + 40);
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "ns";
    v10 = a2 + 72;
    v12 = (_BYTE *)(a2 + 88);
    v11 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 80) = 2;
    v13 = (_QWORD *)(a2 + 80);
    if (!v11)
      *v12 = 1;
    goto LABEL_29;
  }
  v13 = (_QWORD *)(a2 + 80);
  v10 = a2 + 72;
  v12 = (_BYTE *)(a2 + 88);
  if (!*(_BYTE *)(a2 + 88)
    || *(_QWORD *)(a2 + 80) != 7
    || (**(_DWORD **)v10 == *(_DWORD *)"version"
      ? (v14 = *(_DWORD *)(*(_QWORD *)v10 + 3) == *(_DWORD *)"sion")
      : (v14 = 0),
        !v14))
  {
LABEL_29:
    LOBYTE(v22) = 5;
    v23 = v25;
    v17 = (unsigned __int8 *)sub_22453F8B8(a2);
    v18 = *v17;
    *v17 = 5;
    LOBYTE(v22) = v18;
    v19 = *((_QWORD *)v17 + 1);
    *((_QWORD *)v17 + 1) = v23;
    v23 = v19;
    sub_223454278(&v23, v18);
    v9 = *(unsigned __int8 **)(a2 + 40);
  }
LABEL_30:
  if (*v9 <= 1u)
  {
    v20 = *v12;
    *(_QWORD *)v10 = "clock_type";
    *v13 = 10;
    if (!v20)
      *v12 = 1;
  }
  v22 = (char *)&v25 + 8;
  sub_223B98E18(a2, (unsigned __int8 **)&v22);
  v21 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v21 - 8);
  *(_QWORD *)(a2 + 56) = v21 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_223B98DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_223454278(v10, a10);
  _Unwind_Resume(a1);
}

void sub_223B98E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_223454278(v10, a10);
  _Unwind_Resume(a1);
}

void sub_223B98E18(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v3;
  BOOL v4;
  int *v5;
  int v6;
  int v7;
  BOOL v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  void *__p[2];
  char v14;
  char v15[8];
  uint64_t v16;
  int v17;
  char v18;
  char *v19;

  if ((*(_BYTE *)(a1 + 12) & 2) != 0)
  {
    v12 = *a2;
    v17 = 0;
    sub_223B8DE00((uint64_t)&v19, (uint64_t)v15, v12);
    if (v17 == -1)
      sub_22316DD70();
    v19 = &v18;
    ((void (*)(void **__return_ptr, char **, char *))off_24EC5FFA0[v17])(__p, &v19, v15);
    if (v17 != -1)
      ((void (*)(char **, char *))off_24EC5FF88[v17])(&v19, v15);
    sub_2245409C8(a1, (uint64_t)__p);
    if (v14 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v3 = **a2;
    if (*(_BYTE *)(a1 + 88))
      v4 = *(_QWORD *)(a1 + 80) == 7;
    else
      v4 = 0;
    if (!v4
      || ((v5 = *(int **)(a1 + 72), v6 = *v5, v7 = *(int *)((char *)v5 + 3), v6 == *(_DWORD *)"version")
        ? (v8 = v7 == *(_DWORD *)"sion")
        : (v8 = 0),
          !v8))
    {
      v15[0] = 6;
      v16 = v3;
      v9 = (unsigned __int8 *)sub_22453F8B8(a1);
      v10 = *v9;
      *v9 = 6;
      v15[0] = v10;
      v11 = *((_QWORD *)v9 + 1);
      *((_QWORD *)v9 + 1) = v16;
      v16 = v11;
      sub_223454278(&v16, v10);
    }
  }
}

void sub_223B98F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  uint64_t *v13;

  sub_223454278(v13, a13);
  _Unwind_Resume(a1);
}

void sub_223B98F84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223B98FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223B98FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223B98FC8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_223B8EFDC((uint64_t)v8, a2);
  sub_223B990E4(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_223B990CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223B8842C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223B990E4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  _BYTE *v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned __int8 *v26;
  int v27;
  uint64_t v28;
  int v29;
  unsigned __int8 *v30;
  int v31;
  uint64_t v32;
  int v33;
  unsigned __int8 *v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unsigned __int8 *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "auto_timestamp";
    *(_QWORD *)(a1 + 80) = 14;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_22453FAE0(a1);
  v42 = (unint64_t)"version";
  v43 = 7;
  v44 = 2;
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v7 = *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 72) = "version", *(_QWORD *)(a1 + 80) = 7, v7))
  {
    sub_224540500(a1, &v44);
    v8 = *(unsigned __int8 **)(a1 + 40);
    if (*v8 <= 1u)
      goto LABEL_7;
  }
  else
  {
    *(_BYTE *)(a1 + 88) = 1;
    sub_224540500(a1, &v44);
    v8 = *(unsigned __int8 **)(a1 + 40);
    if (*v8 <= 1u)
    {
LABEL_7:
      *(_QWORD *)(a1 + 72) = "ns";
      v9 = a1 + 72;
      v11 = (_BYTE *)(a1 + 88);
      v10 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 80) = 2;
      v12 = (_QWORD *)(a1 + 80);
      if (!v10)
        *v11 = 1;
      goto LABEL_16;
    }
  }
  v12 = (_QWORD *)(a1 + 80);
  v9 = a1 + 72;
  v11 = (_BYTE *)(a1 + 88);
  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || (**(_DWORD **)v9 == *(_DWORD *)"version"
      ? (v13 = *(_DWORD *)(*(_QWORD *)v9 + 3) == *(_DWORD *)"sion")
      : (v13 = 0),
        !v13))
  {
LABEL_16:
    v14 = *(_QWORD *)(a2 + 8);
    LOBYTE(v42) = 5;
    v43 = v14;
    v15 = (unsigned __int8 *)sub_22453F8B8(a1);
    v16 = *v15;
    *v15 = 5;
    LOBYTE(v42) = v16;
    v17 = *((_QWORD *)v15 + 1);
    *((_QWORD *)v15 + 1) = v43;
    v43 = v17;
    sub_223454278(&v43, v16);
    v8 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v8 <= 1u)
  {
    v18 = *v11;
    *(_QWORD *)v9 = "clock_type";
    *v12 = 10;
    if (!v18)
      *v11 = 1;
  }
  v42 = a2 + 16;
  sub_223B989D8(a1, (unsigned __int8 **)&v42);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(unsigned __int8 **)(v19 - 8);
  *(_QWORD *)(a1 + 40) = v20;
  *(_QWORD *)(a1 + 56) = v19 - 8;
  if (*(_BYTE *)(a1 + 88))
    *v11 = 0;
  if (*v20 <= 1u)
  {
    *(_QWORD *)v9 = "name";
    *v12 = 4;
    *v11 = 1;
  }
  if (!*(_BYTE *)(a2 + 48))
  {
    LOBYTE(v42) = 0;
    v43 = 0;
    v21 = (unsigned __int8 *)sub_22453F8B8(a1);
    v22 = *v21;
    *v21 = v42;
    LOBYTE(v42) = v22;
    v23 = *((_QWORD *)v21 + 1);
    *((_QWORD *)v21 + 1) = v43;
    v43 = v23;
    sub_223454278(&v43, v22);
    if (a3 < 4)
      return;
LABEL_28:
    if (**(unsigned __int8 **)(a1 + 40) > 1u
      || (v24 = *v11, *(_QWORD *)v9 = "custom_timestamp", *v12 = 16, v24))
    {
      if (*(_BYTE *)(a2 + 72))
        goto LABEL_31;
    }
    else
    {
      *v11 = 1;
      if (*(_BYTE *)(a2 + 72))
      {
LABEL_31:
        v42 = *(_QWORD *)(a1 + 8);
        sub_223B98AE0((int *)&v42, a1, (__int128 *)(a2 + 56));
        if (a3 == 5)
          goto LABEL_32;
        goto LABEL_39;
      }
    }
    LOBYTE(v42) = 0;
    v43 = 0;
    v26 = (unsigned __int8 *)sub_22453F8B8(a1);
    v27 = *v26;
    *v26 = v42;
    LOBYTE(v42) = v27;
    v28 = *((_QWORD *)v26 + 1);
    *((_QWORD *)v26 + 1) = v43;
    v43 = v28;
    sub_223454278(&v43, v27);
    if (a3 == 5)
    {
LABEL_32:
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v25 = *v11;
        *(_QWORD *)v9 = "space";
        *v12 = 5;
        if (!v25)
          *v11 = 1;
      }
      if (*(_BYTE *)(a2 + 104))
      {
        sub_2245409C8(a1, a2 + 80);
        return;
      }
LABEL_58:
      LOBYTE(v42) = 0;
      v43 = 0;
      v39 = (unsigned __int8 *)sub_22453F8B8(a1);
      v40 = *v39;
      *v39 = v42;
      LOBYTE(v42) = v40;
      v41 = *((_QWORD *)v39 + 1);
      *((_QWORD *)v39 + 1) = v43;
      v43 = v41;
      sub_223454278(&v43, v40);
      return;
    }
LABEL_39:
    if (a3 < 6)
      return;
    if (**(unsigned __int8 **)(a1 + 40) <= 1u)
    {
      v29 = *v11;
      *(_QWORD *)v9 = "space";
      *v12 = 5;
      if (!v29)
        *v11 = 1;
    }
    if (*(_BYTE *)(a2 + 104))
    {
      sub_2245409C8(a1, a2 + 80);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_50;
    }
    else
    {
      LOBYTE(v42) = 0;
      v43 = 0;
      v30 = (unsigned __int8 *)sub_22453F8B8(a1);
      v31 = *v30;
      *v30 = v42;
      LOBYTE(v42) = v31;
      v32 = *((_QWORD *)v30 + 1);
      *((_QWORD *)v30 + 1) = v43;
      v43 = v32;
      sub_223454278(&v43, v31);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_50;
    }
    v33 = *v11;
    *(_QWORD *)v9 = "instance_id";
    *v12 = 11;
    if (!v33)
      *v11 = 1;
LABEL_50:
    if (*(_BYTE *)(a2 + 136))
    {
      sub_2245409C8(a1, a2 + 112);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_56;
    }
    else
    {
      LOBYTE(v42) = 0;
      v43 = 0;
      v34 = (unsigned __int8 *)sub_22453F8B8(a1);
      v35 = *v34;
      *v34 = v42;
      LOBYTE(v42) = v35;
      v36 = *((_QWORD *)v34 + 1);
      *((_QWORD *)v34 + 1) = v43;
      v43 = v36;
      sub_223454278(&v43, v35);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_56;
    }
    v37 = *v11;
    *(_QWORD *)v9 = "references";
    *v12 = 10;
    if (!v37)
      *v11 = 1;
LABEL_56:
    if (*(_BYTE *)(a2 + 168))
    {
      v38 = *(_QWORD *)(a2 + 144);
      v42 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 152) - v38) >> 3);
      v43 = v38;
      sub_224541EE4(a1, &v42);
      return;
    }
    goto LABEL_58;
  }
  sub_2245409C8(a1, a2 + 24);
  if (a3 >= 4)
    goto LABEL_28;
}

void sub_223B9968C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_223454278(v10, a10);
  _Unwind_Resume(a1);
}

void sub_223B996C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_223454278(v10, a10);
  _Unwind_Resume(a1);
}

void sub_223B996DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_223454278(v10, a10);
  _Unwind_Resume(a1);
}

void sub_223B996F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_223454278(v10, a10);
  _Unwind_Resume(a1);
}

void sub_223B9970C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_223B8F6B8((uint64_t)v8, a2);
  sub_223B99828(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_223B99810(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223B8842C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223B99828(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  _BYTE *v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  int v24;
  unsigned __int8 *v25;
  int v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  int v30;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "auto_timestamp";
    *(_QWORD *)(a1 + 80) = 14;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_22453FAE0(a1);
  v28 = "version";
  v29 = 7;
  v30 = 2;
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v7 = *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 72) = "version", *(_QWORD *)(a1 + 80) = 7, v7))
  {
    sub_224540500(a1, &v30);
    v8 = *(unsigned __int8 **)(a1 + 40);
    if (*v8 <= 1u)
      goto LABEL_7;
  }
  else
  {
    *(_BYTE *)(a1 + 88) = 1;
    sub_224540500(a1, &v30);
    v8 = *(unsigned __int8 **)(a1 + 40);
    if (*v8 <= 1u)
    {
LABEL_7:
      *(_QWORD *)(a1 + 72) = "ns";
      v9 = a1 + 72;
      v11 = (_BYTE *)(a1 + 88);
      v10 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 80) = 2;
      v12 = (_QWORD *)(a1 + 80);
      if (!v10)
        *v11 = 1;
      goto LABEL_16;
    }
  }
  v12 = (_QWORD *)(a1 + 80);
  v9 = a1 + 72;
  v11 = (_BYTE *)(a1 + 88);
  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || (**(_DWORD **)v9 == *(_DWORD *)"version"
      ? (v13 = *(_DWORD *)(*(_QWORD *)v9 + 3) == *(_DWORD *)"sion")
      : (v13 = 0),
        !v13))
  {
LABEL_16:
    v14 = *(_QWORD *)(a2 + 8);
    LOBYTE(v28) = 5;
    v29 = v14;
    v15 = (unsigned __int8 *)sub_22453F8B8(a1);
    v16 = *v15;
    *v15 = 5;
    LOBYTE(v28) = v16;
    v17 = *((_QWORD *)v15 + 1);
    *((_QWORD *)v15 + 1) = v29;
    v29 = v17;
    sub_223454278(&v29, v16);
    v8 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v8 <= 1u)
  {
    v18 = *v11;
    *(_QWORD *)v9 = "clock_type";
    *v12 = 10;
    if (!v18)
      *v11 = 1;
  }
  v28 = (const char *)(a2 + 16);
  sub_223B989D8(a1, (unsigned __int8 **)&v28);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(unsigned __int8 **)(v19 - 8);
  *(_QWORD *)(a1 + 40) = v20;
  *(_QWORD *)(a1 + 56) = v19 - 8;
  if (*(_BYTE *)(a1 + 88))
    *v11 = 0;
  if (*v20 <= 1u)
  {
    *(_QWORD *)v9 = "name";
    *v12 = 4;
    *v11 = 1;
  }
  if (!*(_BYTE *)(a2 + 48))
  {
    LOBYTE(v28) = 0;
    v29 = 0;
    v21 = (unsigned __int8 *)sub_22453F8B8(a1);
    v22 = *v21;
    *v21 = v28;
    LOBYTE(v28) = v22;
    v23 = *((_QWORD *)v21 + 1);
    *((_QWORD *)v21 + 1) = v29;
    v29 = v23;
    sub_223454278(&v29, v22);
    if (a3 < 4)
      return;
LABEL_28:
    if (**(unsigned __int8 **)(a1 + 40) > 1u
      || (v24 = *v11, *(_QWORD *)v9 = "custom_timestamp", *v12 = 16, v24))
    {
      if (*(_BYTE *)(a2 + 72))
      {
LABEL_31:
        v28 = *(const char **)(a1 + 8);
        sub_223B98AE0((int *)&v28, a1, (__int128 *)(a2 + 56));
        return;
      }
    }
    else
    {
      *v11 = 1;
      if (*(_BYTE *)(a2 + 72))
        goto LABEL_31;
    }
    LOBYTE(v28) = 0;
    v29 = 0;
    v25 = (unsigned __int8 *)sub_22453F8B8(a1);
    v26 = *v25;
    *v25 = v28;
    LOBYTE(v28) = v26;
    v27 = *((_QWORD *)v25 + 1);
    *((_QWORD *)v25 + 1) = v29;
    v29 = v27;
    sub_223454278(&v29, v26);
    return;
  }
  sub_2245409C8(a1, a2 + 24);
  if (a3 >= 4)
    goto LABEL_28;
}

void sub_223B99B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_223454278(v10, a10);
  _Unwind_Resume(a1);
}

void sub_223B99B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_223454278(v10, a10);
  _Unwind_Resume(a1);
}

void sub_223B99BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_223454278(v10, a10);
  _Unwind_Resume(a1);
}

void sub_223B99BBC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  __int16 v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  __int16 v41;
  unint64_t v42;
  unint64_t v43;
  unsigned __int8 *v44;
  int v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  int v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  int v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  __int16 v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  __int16 v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  int v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  __int16 v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  __int16 v111;
  unint64_t v112;
  unint64_t v113;
  unsigned __int8 *v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  __int16 v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  int v155;
  unint64_t *v156;
  unint64_t v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  unsigned int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  unsigned int v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  int *v205;
  int v206;
  int v207;
  BOOL v208;
  unsigned __int8 *v209;
  int v210;
  uint64_t v211;
  uint64_t v212;
  unsigned __int8 *v213;
  int v214;
  uint64_t v215;
  unsigned __int8 *v216;
  int v217;
  uint64_t v218;
  unsigned __int8 *v219;
  int v220;
  uint64_t v221;
  unsigned __int8 *v222;
  int v223;
  uint64_t v224;
  int v225;
  uint64_t v226;
  __int128 v227;
  unsigned __int8 *v228;
  int v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  int v238;
  uint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  __int16 v243;
  unint64_t v244;
  __int128 v245;
  unint64_t v246;
  unint64_t v247;
  unint64_t v248;
  uint64_t v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  uint64_t v253;
  int v254;
  uint64_t v255;
  __int16 v256;
  unint64_t v257;
  unint64_t v258;
  unsigned __int8 *v259;
  int v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  __int16 v268;
  __int128 v269;
  unint64_t *v270;
  unint64_t v271;
  unint64_t v272;
  int v273;
  std::__shared_weak_count *v274;
  unint64_t *v275;
  unint64_t v276;
  std::__shared_weak_count *v277;
  unint64_t *v278;
  unint64_t v279;
  int *v280;
  int v281;
  int v282;
  BOOL v283;
  uint64_t v284;
  unsigned __int8 *v285;
  int v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  unsigned __int8 *v290;
  int v291;
  uint64_t v292;
  unsigned __int8 *v293;
  int v294;
  uint64_t v295;
  int v296;
  char **v297;
  uint64_t v298;
  int v299;
  int v300;
  uint64_t v301;
  char v302;
  unsigned __int8 *v303;
  int v304;
  uint64_t v305;
  unsigned __int8 *v306;
  int v307;
  uint64_t v308;
  uint64_t v309;
  int v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  int *v323;
  int v324;
  int v325;
  BOOL v326;
  unsigned __int8 *v327;
  int v328;
  uint64_t v329;
  int v330;
  int v331;
  uint64_t v332;
  int v333;
  uint64_t v334;
  char *v335;
  unsigned __int8 *v336;
  int v337;
  uint64_t v338;
  _QWORD *v339;
  void *v340;
  char *v341;
  void *v342;
  void *v343;
  uint64_t v344;
  uint64_t v345;
  int v346;
  int v347;
  int *v348;
  int v349;
  int v350;
  BOOL v351;
  uint64_t v352;
  unsigned __int8 *v353;
  int v354;
  uint64_t v355;
  int v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  unsigned __int8 *v360;
  int v361;
  uint64_t v362;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  std::__shared_weak_count *v367;
  _BYTE v368[32];
  _BYTE v369[32];
  __int16 v370;
  __int16 v371;
  _QWORD v372[2];
  std::__shared_weak_count *v373;
  uint64_t v374;
  int v375;
  uint64_t v376;
  int v377;
  __int16 v378;
  _OWORD v379[2];
  _BYTE v380[64];
  int v381;
  uint64_t v382;
  uint64_t v383;
  _QWORD v384[2];
  int v385;
  uint64_t v386;
  int v387;
  __int16 v388;
  uint64_t (**v389)();
  uint64_t v390;
  std::__shared_weak_count *v391;
  __int128 v392;
  uint64_t v393;
  int v394;
  __int16 v395;
  unsigned __int8 v396;
  uint64_t (**v397)();
  uint64_t v398;
  std::__shared_weak_count *v399;
  __int128 v400;
  uint64_t v401;
  __int16 v402;
  uint64_t (**v403)();
  uint64_t v404;
  std::__shared_weak_count *v405;
  uint64_t v406;
  int v407;
  uint64_t v408;
  int v409;
  __int16 v410;
  _BYTE v411[56];
  __int128 v412;
  __int16 v413;
  int v414;
  uint64_t v415[3];
  _BYTE v416[28];
  _BYTE v417[32];
  int v418;
  int v419;
  _BYTE v420[48];
  __int128 v421;
  __int128 v422;
  __int128 v423;
  __int128 v424;
  __int128 v425;
  uint64_t v426;
  void *v427;
  char *v428;
  int v429;
  __int128 __p;
  __int128 v431;
  _OWORD v432[4];
  __int128 v433;
  __int128 v434;
  int v435;
  uint64_t v436;

  v436 = *MEMORY[0x24BDAC8D0];
  sub_22453FAE0(a1);
  *(_QWORD *)v420 = "version";
  *(_QWORD *)&v420[8] = 7;
  *(_DWORD *)&v420[16] = 6;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v5 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "version";
    *(_QWORD *)(a1 + 80) = 7;
    if (!v5)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_224540500(a1, &v420[16]);
  v12 = *(_DWORD *)&v420[16];
  v13 = *(_DWORD *)&v420[16] - 2;
  if (*(_DWORD *)&v420[16] <= 2u)
  {
    v420[0] = 0;
    BYTE8(v421) = 0;
    sub_223B9D1B4(a1, (uint64_t)v420, v6, v7, v8, v9, v10, v11);
  }
  else
  {
    sub_223B9CD34(a1, a2 + 8, v6, v7, v8, v9, v10, v11);
    if (v12 >= 5)
    {
      sub_223B9CD34(a1, a2 + 72, v14, v15, v16, v17, v18, v19);
      goto LABEL_9;
    }
  }
  v420[0] = 0;
  BYTE8(v421) = 0;
  sub_223B9D1B4(a1, (uint64_t)v420, v14, v15, v16, v17, v18, v19);
  if (v12 < 4)
  {
    v420[0] = 0;
    LOBYTE(v423) = 0;
    sub_223B9C428(a1, (uint64_t)v420, v25, v20, v21, v22, v23, v24);
    goto LABEL_60;
  }
LABEL_9:
  v26 = *(unsigned __int8 *)(a2 + 216);
  if (*(_BYTE *)(a2 + 216))
  {
    v27 = *(_QWORD *)(a2 + 144);
    v28 = *(std::__shared_weak_count **)(a2 + 152);
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(p_shared_owners);
      while (__stxr(v30 + 1, p_shared_owners));
      v31 = *(_WORD *)(a2 + 208);
      do
        v32 = __ldxr(p_shared_owners);
      while (__stxr(v32 + 1, p_shared_owners));
      *(_OWORD *)v368 = *(_OWORD *)(a2 + 160);
      *(_OWORD *)&v368[16] = *(_OWORD *)(a2 + 176);
      do
        v33 = __ldxr(p_shared_owners);
      while (__stxr(v33 + 1, p_shared_owners));
      v366 = v27;
      v367 = v28;
      v370 = v31;
      do
        v34 = __ldaxr(p_shared_owners);
      while (__stlxr(v34 - 1, p_shared_owners));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
      do
        v35 = __ldaxr(p_shared_owners);
      while (__stlxr(v35 - 1, p_shared_owners));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
      v372[0] = &off_24EC1F8C8;
      v27 = v366;
      v36 = (unint64_t *)&v28->__shared_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
      v38 = *(_QWORD *)&v368[12];
      v39 = *(_DWORD *)&v368[28];
      v40 = *(_QWORD *)v368;
      v41 = v370;
      do
        v42 = __ldxr(v36);
      while (__stxr(v42 + 1, v36));
      do
        v43 = __ldxr(v36);
      while (__stxr(v43 + 1, v36));
    }
    else
    {
      v367 = 0;
      *(_OWORD *)v369 = *(_OWORD *)(a2 + 160);
      *(_OWORD *)&v369[16] = *(_OWORD *)(a2 + 176);
      v371 = *(_WORD *)(a2 + 208);
      v372[0] = &off_24EC1F8C8;
      v28 = 0;
      v38 = *(_QWORD *)&v369[12];
      v39 = *(_DWORD *)&v369[28];
      v40 = *(_QWORD *)v369;
      v41 = v371;
    }
    v372[1] = v27;
    v373 = v28;
    v374 = v38;
    v375 = 2 * v39;
    v376 = v40;
    v377 = 31;
    v378 = v41;
    if (v28)
    {
      v47 = (unint64_t *)&v28->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
      do
        v49 = __ldaxr(v47);
      while (__stlxr(v49 - 1, v47));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    sub_22416BFE0((uint64_t)v379, (uint64_t)v372, 0, v20, v21, v22, v23, v24);
    *(_OWORD *)v420 = v379[0];
    *(_OWORD *)&v420[12] = *(_OWORD *)((char *)v379 + 12);
    v420[32] = 0;
    LODWORD(v424) = -1;
    v50 = v381;
    if (v381 != -1)
    {
      ((void (*)(_BYTE *, _BYTE *, _BYTE *))off_24EC60008[v381])(v411, &v420[32], v380);
      LODWORD(v424) = v50;
    }
    BYTE8(v424) = 1;
    *(_QWORD *)v416 = *(_QWORD *)(a1 + 8);
    sub_223B9D634(v416, a1, (uint64_t)v420);
  }
  else
  {
    v420[0] = 0;
    BYTE8(v424) = 0;
    v416[0] = 0;
    *(_QWORD *)&v416[8] = 0;
    v44 = (unsigned __int8 *)sub_22453F8B8(a1);
    v45 = *v44;
    *v44 = 0;
    v416[0] = v45;
    v46 = *((_QWORD *)v44 + 1);
    *((_QWORD *)v44 + 1) = *(_QWORD *)&v416[8];
    *(_QWORD *)&v416[8] = v46;
    sub_223454278((uint64_t *)&v416[8], v45);
  }
  if (BYTE8(v424))
  {
    if ((_DWORD)v424 != -1)
      ((void (*)(_BYTE *, _BYTE *))off_24EC5FFD0[v424])(v416, &v420[32]);
    LODWORD(v424) = -1;
  }
  if (v26)
  {
    if (v381 != -1)
      ((void (*)(_BYTE *, _BYTE *))off_24EC5FFD0[v381])(v416, v380);
    v381 = -1;
    v51 = v373;
    if (v373)
    {
      v52 = (unint64_t *)&v373->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    if (v367)
    {
      v54 = (unint64_t *)&v367->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v367->__on_zero_shared)(v367);
        std::__shared_weak_count::__release_weak(v367);
        if (*(_BYTE *)(a2 + 496))
          goto LABEL_61;
LABEL_118:
        v420[0] = 0;
        *(_QWORD *)&v420[8] = 0;
        v114 = (unsigned __int8 *)sub_22453F8B8(a1);
        v115 = *v114;
        *v114 = v420[0];
        v420[0] = v115;
        v116 = *((_QWORD *)v114 + 1);
        *((_QWORD *)v114 + 1) = *(_QWORD *)&v420[8];
        *(_QWORD *)&v420[8] = v116;
        sub_223454278((uint64_t *)&v420[8], v115);
        goto LABEL_221;
      }
    }
  }
LABEL_60:
  if (!*(_BYTE *)(a2 + 496))
    goto LABEL_118;
LABEL_61:
  sub_22453FAE0(a1);
  *(_QWORD *)v420 = "version";
  *(_QWORD *)&v420[8] = 7;
  *(_DWORD *)&v420[16] = 2;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v56 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "version";
    *(_QWORD *)(a1 + 80) = 7;
    if (!v56)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_224540500(a1, &v420[16]);
  v57 = *(_DWORD *)&v420[16];
  sub_223B92F28((uint64_t)v420, a2 + 224);
  if (v57 > 1)
  {
    *(_QWORD *)v411 = &off_24EC1F958;
    sub_2231B3FDC((uint64_t)&v411[8]);
    sub_22416BD7C((uint64_t)v416, (uint64_t)v411, 0);
    v91 = *(std::__shared_weak_count **)&v411[16];
    if (!*(_QWORD *)&v411[16])
      goto LABEL_95;
    v92 = (unint64_t *)(*(_QWORD *)&v411[16] + 8);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
      *(_DWORD *)&v416[24] = 0;
      v94 = BYTE8(v421);
      if (BYTE8(v421))
      {
LABEL_96:
        v397 = &off_24EC200A8;
        v95 = *(_QWORD *)&v420[8];
        v96 = *(std::__shared_weak_count **)&v420[16];
        if (*(_QWORD *)&v420[16])
        {
          v97 = (unint64_t *)(*(_QWORD *)&v420[16] + 8);
          do
            v98 = __ldxr(v97);
          while (__stxr(v98 + 1, v97));
          v99 = v421;
          do
            v100 = __ldxr(v97);
          while (__stxr(v100 + 1, v97));
          v400 = *(_OWORD *)&v420[24];
          v401 = *(_QWORD *)&v420[40];
          do
            v101 = __ldxr(v97);
          while (__stxr(v101 + 1, v97));
          v398 = v95;
          v399 = v96;
          v402 = v99;
          do
            v102 = __ldaxr(v97);
          while (__stlxr(v102 - 1, v97));
          if (!v102)
          {
            ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
            std::__shared_weak_count::__release_weak(v96);
          }
          do
            v103 = __ldaxr(v97);
          while (__stlxr(v103 - 1, v97));
          if (!v103)
          {
            ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
            std::__shared_weak_count::__release_weak(v96);
          }
          v403 = &off_24EC1F8C8;
          v104 = v398;
          v105 = v399;
          if (v399)
          {
            v106 = (unint64_t *)&v399->__shared_owners_;
            do
              v107 = __ldxr(v106);
            while (__stxr(v107 + 1, v106));
            v108 = HIDWORD(v401);
            v109 = *((_QWORD *)&v400 + 1);
            v110 = v400;
            v111 = v402;
            do
              v112 = __ldxr(v106);
            while (__stxr(v112 + 1, v106));
            do
              v113 = __ldxr(v106);
            while (__stxr(v113 + 1, v106));
            goto LABEL_185;
          }
        }
        else
        {
          v398 = *(_QWORD *)&v420[8];
          v399 = 0;
          v400 = *(_OWORD *)&v420[24];
          v401 = *(_QWORD *)&v420[40];
          v402 = v421;
          v403 = &off_24EC1F8C8;
          v104 = *(_QWORD *)&v420[8];
          v105 = 0;
        }
        v108 = HIDWORD(v401);
        v109 = *((_QWORD *)&v400 + 1);
        v110 = v400;
        v111 = v402;
LABEL_185:
        v404 = v104;
        v405 = v105;
        v406 = v109;
        v407 = 2 * v108;
        v408 = v110;
        v409 = 3;
        v410 = v111;
        if (v105)
        {
          v156 = (unint64_t *)&v105->__shared_owners_;
          do
            v157 = __ldaxr(v156);
          while (__stlxr(v157 - 1, v156));
          if (!v157)
          {
            ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
            std::__shared_weak_count::__release_weak(v105);
          }
          do
            v158 = __ldaxr(v156);
          while (__stlxr(v158 - 1, v156));
          if (!v158)
          {
            ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
            std::__shared_weak_count::__release_weak(v105);
          }
        }
        sub_22416BFE0((uint64_t)v411, (uint64_t)&v403, 0, v86, v87, v88, v89, v90);
LABEL_194:
        v389 = *(uint64_t (***)())(a1 + 8);
        sub_223B9E404(&v389, a1, (unsigned __int16 *)v411);
        if (v414 != -1)
          ((void (*)(uint64_t (***)(), _BYTE *))off_24EC5FFD0[v414])(&v389, &v411[32]);
        v414 = -1;
        if (v94)
        {
          v159 = v405;
          if (v405)
          {
            v160 = (unint64_t *)&v405->__shared_owners_;
            do
              v161 = __ldaxr(v160);
            while (__stlxr(v161 - 1, v160));
            if (!v161)
            {
              ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
              std::__shared_weak_count::__release_weak(v159);
            }
          }
          v162 = v399;
          if (v399)
          {
            v163 = (unint64_t *)&v399->__shared_owners_;
            do
              v164 = __ldaxr(v163);
            while (__stlxr(v164 - 1, v163));
            if (!v164)
            {
              ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
              std::__shared_weak_count::__release_weak(v162);
            }
          }
        }
        if (v419 != -1)
          ((void (*)(_BYTE *, _BYTE *))off_24EC5FFD0[v419])(v411, v417);
        goto LABEL_209;
      }
    }
    else
    {
LABEL_95:
      *(_DWORD *)&v416[24] = 0;
      v94 = BYTE8(v421);
      if (BYTE8(v421))
        goto LABEL_96;
    }
    *(_OWORD *)v411 = *(_OWORD *)v416;
    *(_OWORD *)&v411[12] = *(_OWORD *)&v416[12];
    v411[32] = 0;
    v414 = -1;
    v155 = v419;
    if (v419 != -1)
    {
      ((void (*)(uint64_t (***)(), _BYTE *, _BYTE *))off_24EC5FFF8[v419])(&v403, &v411[32], v417);
      v414 = v155;
    }
    goto LABEL_194;
  }
  LOBYTE(v389) = 0;
  v396 = 0;
  *(_QWORD *)v411 = &off_24EC1F958;
  sub_2231B3FDC((uint64_t)&v411[8]);
  sub_22416BD7C((uint64_t)v416, (uint64_t)v411, 0);
  v63 = *(std::__shared_weak_count **)&v411[16];
  if (!*(_QWORD *)&v411[16])
    goto LABEL_69;
  v64 = (unint64_t *)(*(_QWORD *)&v411[16] + 8);
  do
    v65 = __ldaxr(v64);
  while (__stlxr(v65 - 1, v64));
  if (v65)
  {
LABEL_69:
    *(_DWORD *)&v416[24] = 0;
    v66 = v396;
    if (v396)
      goto LABEL_70;
LABEL_120:
    *(_OWORD *)v411 = *(_OWORD *)v416;
    *(_OWORD *)&v411[12] = *(_OWORD *)&v416[12];
    v411[32] = 0;
    v414 = -1;
    v123 = v419;
    if (v419 != -1)
    {
      ((void (*)(uint64_t (***)(), _BYTE *, _BYTE *))off_24EC5FFF8[v419])(&v397, &v411[32], v417);
      v414 = v123;
    }
    goto LABEL_133;
  }
  ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
  std::__shared_weak_count::__release_weak(v63);
  *(_DWORD *)&v416[24] = 0;
  v66 = v396;
  if (!v396)
    goto LABEL_120;
LABEL_70:
  v397 = &off_24EC21230;
  v67 = v390;
  v68 = v391;
  if (v391)
  {
    v69 = (unint64_t *)&v391->__shared_owners_;
    do
      v70 = __ldxr(v69);
    while (__stxr(v70 + 1, v69));
    v71 = v394;
    do
      v72 = __ldxr(v69);
    while (__stxr(v72 + 1, v69));
    v400 = v392;
    v401 = v393;
    do
      v73 = __ldxr(v69);
    while (__stxr(v73 + 1, v69));
    v398 = v67;
    v399 = v68;
    v402 = v71;
    do
      v74 = __ldaxr(v69);
    while (__stlxr(v74 - 1, v69));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
    do
      v75 = __ldaxr(v69);
    while (__stlxr(v75 - 1, v69));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
    v403 = &off_24EC1F8C8;
    v76 = v398;
    v77 = v399;
    if (v399)
    {
      v78 = (unint64_t *)&v399->__shared_owners_;
      do
        v79 = __ldxr(v78);
      while (__stxr(v79 + 1, v78));
      v80 = HIDWORD(v401);
      v81 = *((_QWORD *)&v400 + 1);
      v82 = v400;
      v83 = v402;
      do
        v84 = __ldxr(v78);
      while (__stxr(v84 + 1, v78));
      do
        v85 = __ldxr(v78);
      while (__stxr(v85 + 1, v78));
      goto LABEL_124;
    }
  }
  else
  {
    v398 = v390;
    v399 = 0;
    v400 = v392;
    v401 = v393;
    v402 = v394;
    v403 = &off_24EC1F8C8;
    v76 = v390;
    v77 = 0;
  }
  v80 = HIDWORD(v401);
  v81 = *((_QWORD *)&v400 + 1);
  v82 = v400;
  v83 = v402;
LABEL_124:
  v404 = v76;
  v405 = v77;
  v406 = v81;
  v407 = 4 * v80;
  v408 = v82;
  v409 = 4;
  v410 = v83;
  if (v77)
  {
    v124 = (unint64_t *)&v77->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
    do
      v126 = __ldaxr(v124);
    while (__stlxr(v126 - 1, v124));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  sub_22416BFE0((uint64_t)v411, (uint64_t)&v403, 0, v58, v59, v60, v61, v62);
LABEL_133:
  v382 = *(_QWORD *)(a1 + 8);
  sub_223B9E404(&v382, a1, (unsigned __int16 *)v411);
  if (v414 != -1)
    ((void (*)(uint64_t *, _BYTE *))off_24EC5FFD0[v414])(&v382, &v411[32]);
  v414 = -1;
  if (v66)
  {
    v127 = v405;
    if (v405)
    {
      v128 = (unint64_t *)&v405->__shared_owners_;
      do
        v129 = __ldaxr(v128);
      while (__stlxr(v129 - 1, v128));
      if (!v129)
      {
        ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
        std::__shared_weak_count::__release_weak(v127);
      }
    }
    v130 = v399;
    if (v399)
    {
      v131 = (unint64_t *)&v399->__shared_owners_;
      do
        v132 = __ldaxr(v131);
      while (__stlxr(v132 - 1, v131));
      if (!v132)
      {
        ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
        std::__shared_weak_count::__release_weak(v130);
      }
    }
  }
  if (v419 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_24EC5FFD0[v419])(v411, v417);
  v382 = (uint64_t)&off_24EC1F8C8;
  v133 = v390;
  v134 = v391;
  if (v391)
  {
    v135 = (unint64_t *)&v391->__shared_owners_;
    do
      v136 = __ldxr(v135);
    while (__stxr(v136 + 1, v135));
    v137 = HIDWORD(v393);
    v138 = *((_QWORD *)&v392 + 1);
    v139 = v392;
    v140 = v394;
    do
      v141 = __ldxr(v135);
    while (__stxr(v141 + 1, v135));
    do
      v142 = __ldxr(v135);
    while (__stxr(v142 + 1, v135));
  }
  else
  {
    v137 = HIDWORD(v393);
    v138 = *((_QWORD *)&v392 + 1);
    v139 = v392;
    v140 = v394;
  }
  v383 = v133;
  v384[0] = v134;
  v384[1] = v138;
  v385 = 4 * v137;
  v386 = v139;
  v387 = 4;
  v388 = v140;
  if (v134)
  {
    v143 = (unint64_t *)&v134->__shared_owners_;
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
    do
      v145 = __ldaxr(v143);
    while (__stlxr(v145 - 1, v143));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  v416[8] = 0;
  v416[24] = 0;
  v417[0] = 0;
  v417[16] = 0;
  v417[24] = 1;
  v418 = 0;
  sub_22432B21C((uint64_t)&v382, 3u, (uint64_t)v411);
  sub_2232C1348((uint64_t)v420, (uint64_t)v411);
  v146 = *(std::__shared_weak_count **)&v411[16];
  if (*(_QWORD *)&v411[16])
  {
    v147 = (unint64_t *)(*(_QWORD *)&v411[16] + 8);
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  v149 = (std::__shared_weak_count *)v384[0];
  if (v384[0])
  {
    v150 = (unint64_t *)(v384[0] + 8);
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  if (v396)
  {
    v389 = &off_24EC27198;
    v152 = v391;
    if (v391)
    {
      v153 = (unint64_t *)&v391->__shared_owners_;
      do
        v154 = __ldaxr(v153);
      while (__stlxr(v154 - 1, v153));
      if (!v154)
      {
        ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
        std::__shared_weak_count::__release_weak(v152);
      }
    }
  }
LABEL_209:
  *(_QWORD *)v416 = *(_QWORD *)(a1 + 8);
  sub_223B9E404(v416, a1, (unsigned __int16 *)&v422);
  *(_QWORD *)v416 = *(_QWORD *)(a1 + 8);
  sub_223B9E404(v416, a1, (unsigned __int16 *)&__p);
  if ((_DWORD)v433 != -1)
    ((void (*)(_BYTE *, _OWORD *))off_24EC5FFD0[v433])(v416, v432);
  LODWORD(v433) = -1;
  if (v429 != -1)
    ((void (*)(_BYTE *, __int128 *))off_24EC5FFD0[v429])(v416, &v424);
  v429 = -1;
  if (BYTE8(v421))
  {
    *(_QWORD *)v420 = &off_24EC21328;
    v165 = *(std::__shared_weak_count **)&v420[16];
    if (*(_QWORD *)&v420[16])
    {
      v166 = (unint64_t *)(*(_QWORD *)&v420[16] + 8);
      do
        v167 = __ldaxr(v166);
      while (__stlxr(v167 - 1, v166));
      if (!v167)
      {
        ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
        std::__shared_weak_count::__release_weak(v165);
      }
    }
  }
  v168 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v168 - 8);
  *(_QWORD *)(a1 + 56) = v168 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
LABEL_221:
  if (v13 <= 3)
  {
    v420[0] = 0;
    BYTE8(v421) = 0;
    sub_223B9CD34(a1, (uint64_t)v420, v117, v118, v119, v120, v121, v122);
  }
  v169 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v169 - 8);
  *(_QWORD *)(a1 + 56) = v169 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  sub_22453FAE0(a1);
  *(_QWORD *)v420 = "version";
  *(_QWORD *)&v420[8] = 7;
  *(_DWORD *)&v420[16] = 2;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v170 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "version";
    *(_QWORD *)(a1 + 80) = 7;
    if (!v170)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_224540500(a1, &v420[16]);
  v171 = *(_DWORD *)&v420[16];
  sub_223B9C8B8(a1, a2 + 504, v172, v173, v174, v175, v176, v177);
  if (v171 < 2)
  {
    v420[0] = 0;
    BYTE8(v421) = 0;
    sub_223B9D1B4(a1, (uint64_t)v420, v178, v179, v180, v181, v182, v183);
  }
  else
  {
    sub_223B9CD34(a1, a2 + 568, v178, v179, v180, v181, v182, v183);
  }
  v190 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v190 - 8);
  *(_QWORD *)(a1 + 56) = v190 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (a3 <= 4)
  {
    sub_223B9C428(a1, a2 + 632, v184, v185, v186, v187, v188, v189);
    goto LABEL_272;
  }
  sub_22453FAE0(a1);
  *(_QWORD *)v420 = "version";
  *(_QWORD *)&v420[8] = 7;
  *(_DWORD *)&v420[16] = 5;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v197 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "version";
    *(_QWORD *)(a1 + 80) = 7;
    if (!v197)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_224540500(a1, &v420[16]);
  v198 = *(_DWORD *)&v420[16];
  sub_223B9C428(a1, a2 + 632, v199, v200, v201, v202, v203, v204);
  if (*(_BYTE *)(a2 + 724))
  {
    if (!*(_BYTE *)(a1 + 88)
      || *(_QWORD *)(a1 + 80) != 7
      || ((v205 = *(int **)(a1 + 72), v206 = *v205, v207 = *(int *)((char *)v205 + 3), v206 == *(_DWORD *)"version")
        ? (v208 = v207 == *(_DWORD *)"sion")
        : (v208 = 0),
          !v208))
    {
      sub_2245405DC(a1, (float *)(a2 + 720));
    }
    if (v198 < 2)
      goto LABEL_270;
  }
  else
  {
    v420[0] = 0;
    *(_QWORD *)&v420[8] = 0;
    v209 = (unsigned __int8 *)sub_22453F8B8(a1);
    v210 = *v209;
    *v209 = v420[0];
    v420[0] = v210;
    v211 = *((_QWORD *)v209 + 1);
    *((_QWORD *)v209 + 1) = *(_QWORD *)&v420[8];
    *(_QWORD *)&v420[8] = v211;
    sub_223454278((uint64_t *)&v420[8], v210);
    if (v198 < 2)
      goto LABEL_270;
  }
  if (*(_BYTE *)(a2 + 752))
  {
    v212 = *(_QWORD *)(a2 + 728);
    *(_QWORD *)v420 = (*(_QWORD *)(a2 + 736) - v212) >> 1;
    *(_QWORD *)&v420[8] = v212;
    sub_224540D48(a1, (uint64_t)v420);
    if (*(_BYTE *)(a2 + 764))
      goto LABEL_251;
  }
  else
  {
    v420[0] = 0;
    *(_QWORD *)&v420[8] = 0;
    v213 = (unsigned __int8 *)sub_22453F8B8(a1);
    v214 = *v213;
    *v213 = v420[0];
    v420[0] = v214;
    v215 = *((_QWORD *)v213 + 1);
    *((_QWORD *)v213 + 1) = *(_QWORD *)&v420[8];
    *(_QWORD *)&v420[8] = v215;
    sub_223454278((uint64_t *)&v420[8], v214);
    if (*(_BYTE *)(a2 + 764))
    {
LABEL_251:
      sub_224540500(a1, (_DWORD *)(a2 + 760));
      if (*(_BYTE *)(a2 + 772))
        goto LABEL_252;
LABEL_256:
      v420[0] = 0;
      *(_QWORD *)&v420[8] = 0;
      v219 = (unsigned __int8 *)sub_22453F8B8(a1);
      v220 = *v219;
      *v219 = v420[0];
      v420[0] = v220;
      v221 = *((_QWORD *)v219 + 1);
      *((_QWORD *)v219 + 1) = *(_QWORD *)&v420[8];
      *(_QWORD *)&v420[8] = v221;
      sub_223454278((uint64_t *)&v420[8], v220);
      if (v198 < 3)
        goto LABEL_270;
      goto LABEL_257;
    }
  }
  v420[0] = 0;
  *(_QWORD *)&v420[8] = 0;
  v216 = (unsigned __int8 *)sub_22453F8B8(a1);
  v217 = *v216;
  *v216 = v420[0];
  v420[0] = v217;
  v218 = *((_QWORD *)v216 + 1);
  *((_QWORD *)v216 + 1) = *(_QWORD *)&v420[8];
  *(_QWORD *)&v420[8] = v218;
  sub_223454278((uint64_t *)&v420[8], v217);
  if (!*(_BYTE *)(a2 + 772))
    goto LABEL_256;
LABEL_252:
  sub_224540500(a1, (_DWORD *)(a2 + 768));
  if (v198 < 3)
    goto LABEL_270;
LABEL_257:
  if (!*(_BYTE *)(a2 + 780))
  {
    v420[0] = 0;
    *(_QWORD *)&v420[8] = 0;
    v222 = (unsigned __int8 *)sub_22453F8B8(a1);
    v223 = *v222;
    *v222 = v420[0];
    v420[0] = v223;
    v224 = *((_QWORD *)v222 + 1);
    *((_QWORD *)v222 + 1) = *(_QWORD *)&v420[8];
    *(_QWORD *)&v420[8] = v224;
    sub_223454278((uint64_t *)&v420[8], v223);
    if (v198 < 4)
      goto LABEL_270;
LABEL_261:
    sub_22453FAE0(a1);
    *(_QWORD *)v420 = "version";
    *(_QWORD *)&v420[8] = 7;
    *(_DWORD *)&v420[16] = 2;
    if (**(unsigned __int8 **)(a1 + 40) <= 1u)
    {
      v225 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 72) = "version";
      *(_QWORD *)(a1 + 80) = 7;
      if (!v225)
        *(_BYTE *)(a1 + 88) = 1;
    }
    sub_224540500(a1, &v420[16]);
    sub_223B9E52C(a1, a2 + 784);
    v226 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(v226 - 8);
    *(_QWORD *)(a1 + 56) = v226 - 8;
    if (*(_BYTE *)(a1 + 88))
      *(_BYTE *)(a1 + 88) = 0;
    if (v198 != 4)
    {
      if (*(_BYTE *)(a2 + 836))
      {
        v227 = *(_OWORD *)(a2 + 816);
        *(_OWORD *)v420 = *(_OWORD *)(a2 + 800);
        *(_OWORD *)&v420[16] = v227;
        *(_DWORD *)&v420[32] = *(_DWORD *)(a2 + 832);
        *(_QWORD *)v416 = 9;
        *(_QWORD *)&v416[8] = v420;
        sub_224541808(a1, v416);
      }
      else
      {
        v420[0] = 0;
        *(_QWORD *)&v420[8] = 0;
        v228 = (unsigned __int8 *)sub_22453F8B8(a1);
        v229 = *v228;
        *v228 = v420[0];
        v420[0] = v229;
        v230 = *((_QWORD *)v228 + 1);
        *((_QWORD *)v228 + 1) = *(_QWORD *)&v420[8];
        *(_QWORD *)&v420[8] = v230;
        sub_223454278((uint64_t *)&v420[8], v229);
      }
    }
    goto LABEL_270;
  }
  sub_224540500(a1, (_DWORD *)(a2 + 776));
  if (v198 >= 4)
    goto LABEL_261;
LABEL_270:
  v231 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v231 - 8);
  *(_QWORD *)(a1 + 56) = v231 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
LABEL_272:
  sub_223B9C8B8(a1, a2 + 840, v191, v192, v193, v194, v195, v196);
  sub_22453FAE0(a1);
  *(_QWORD *)v420 = "version";
  *(_QWORD *)&v420[8] = 7;
  *(_DWORD *)&v420[16] = 1;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v232 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "version";
    *(_QWORD *)(a1 + 80) = 7;
    if (!v232)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_224540500(a1, &v420[16]);
  v238 = *(unsigned __int8 *)(a2 + 984);
  if (!*(_BYTE *)(a2 + 984))
  {
    v420[0] = 0;
    BYTE8(v424) = 0;
    v416[0] = 0;
    *(_QWORD *)&v416[8] = 0;
    v259 = (unsigned __int8 *)sub_22453F8B8(a1);
    v260 = *v259;
    *v259 = v416[0];
    v416[0] = v260;
    v261 = *((_QWORD *)v259 + 1);
    *((_QWORD *)v259 + 1) = *(_QWORD *)&v416[8];
    *(_QWORD *)&v416[8] = v261;
    sub_223454278((uint64_t *)&v416[8], v260);
    goto LABEL_311;
  }
  *(_QWORD *)v411 = &off_24EC28E38;
  v239 = *(_QWORD *)(a2 + 912);
  v240 = *(std::__shared_weak_count **)(a2 + 920);
  if (v240)
  {
    v241 = (unint64_t *)&v240->__shared_owners_;
    do
      v242 = __ldxr(v241);
    while (__stxr(v242 + 1, v241));
    v243 = *(_WORD *)(a2 + 976);
    do
      v244 = __ldxr(v241);
    while (__stxr(v244 + 1, v241));
    v245 = *(_OWORD *)(a2 + 944);
    *(_OWORD *)&v411[24] = *(_OWORD *)(a2 + 928);
    *(_OWORD *)&v411[40] = v245;
    v412 = *(_OWORD *)(a2 + 960);
    do
      v246 = __ldxr(v241);
    while (__stxr(v246 + 1, v241));
    *(_QWORD *)&v411[8] = v239;
    *(_QWORD *)&v411[16] = v240;
    v413 = v243;
    do
      v247 = __ldaxr(v241);
    while (__stlxr(v247 - 1, v241));
    if (!v247)
    {
      ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
      std::__shared_weak_count::__release_weak(v240);
    }
    do
      v248 = __ldaxr(v241);
    while (__stlxr(v248 - 1, v241));
    if (!v248)
    {
      ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
      std::__shared_weak_count::__release_weak(v240);
    }
    v389 = &off_24EC1F8C8;
    v249 = *(_QWORD *)&v411[8];
    v250 = *(std::__shared_weak_count **)&v411[16];
    if (*(_QWORD *)&v411[16])
    {
      v251 = (unint64_t *)(*(_QWORD *)&v411[16] + 8);
      do
        v252 = __ldxr(v251);
      while (__stxr(v252 + 1, v251));
      v253 = *(_QWORD *)&v411[36];
      v254 = *(_DWORD *)&v411[52];
      v255 = *(_QWORD *)&v411[24];
      v256 = v413;
      do
        v257 = __ldxr(v251);
      while (__stxr(v257 + 1, v251));
      do
        v258 = __ldxr(v251);
      while (__stxr(v258 + 1, v251));
      goto LABEL_300;
    }
  }
  else
  {
    v268 = *(_WORD *)(a2 + 976);
    *(_QWORD *)&v411[8] = *(_QWORD *)(a2 + 912);
    *(_QWORD *)&v411[16] = 0;
    v269 = *(_OWORD *)(a2 + 944);
    *(_OWORD *)&v411[24] = *(_OWORD *)(a2 + 928);
    *(_OWORD *)&v411[40] = v269;
    v412 = *(_OWORD *)(a2 + 960);
    v413 = v268;
    v389 = &off_24EC1F8C8;
    v249 = *(_QWORD *)&v411[8];
    v250 = 0;
  }
  v253 = *(_QWORD *)&v411[36];
  v254 = *(_DWORD *)&v411[52];
  v255 = *(_QWORD *)&v411[24];
  v256 = v413;
LABEL_300:
  v390 = v249;
  v391 = v250;
  *(_QWORD *)&v392 = v253;
  DWORD2(v392) = v254;
  v393 = v255;
  v394 = 25;
  v395 = v256;
  if (v250)
  {
    v270 = (unint64_t *)&v250->__shared_owners_;
    do
      v271 = __ldaxr(v270);
    while (__stlxr(v271 - 1, v270));
    if (!v271)
    {
      ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
      std::__shared_weak_count::__release_weak(v250);
    }
    do
      v272 = __ldaxr(v270);
    while (__stlxr(v272 - 1, v270));
    if (!v272)
    {
      ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
      std::__shared_weak_count::__release_weak(v250);
    }
  }
  sub_22416BFE0((uint64_t)v416, (uint64_t)&v389, 0, v233, v234, v235, v236, v237);
  *(_OWORD *)v420 = *(_OWORD *)v416;
  *(_OWORD *)&v420[12] = *(_OWORD *)&v416[12];
  v420[32] = 0;
  LODWORD(v424) = -1;
  v273 = v419;
  if (v419 != -1)
  {
    ((void (*)(uint64_t *, _BYTE *, _BYTE *))off_24EC60008[v419])(v415, &v420[32], v417);
    LODWORD(v424) = v273;
  }
  BYTE8(v424) = 1;
  v382 = *(_QWORD *)(a1 + 8);
  sub_223B9D634(&v382, a1, (uint64_t)v420);
LABEL_311:
  if (BYTE8(v424))
  {
    if ((_DWORD)v424 != -1)
      ((void (*)(uint64_t *, _BYTE *))off_24EC5FFD0[v424])(&v382, &v420[32]);
    LODWORD(v424) = -1;
  }
  if (v238)
  {
    if (v419 != -1)
      ((void (*)(uint64_t *, _BYTE *))off_24EC5FFD0[v419])(&v382, v417);
    v419 = -1;
    v274 = v391;
    if (v391)
    {
      v275 = (unint64_t *)&v391->__shared_owners_;
      do
        v276 = __ldaxr(v275);
      while (__stlxr(v276 - 1, v275));
      if (!v276)
      {
        ((void (*)(std::__shared_weak_count *))v274->__on_zero_shared)(v274);
        std::__shared_weak_count::__release_weak(v274);
      }
    }
    v277 = *(std::__shared_weak_count **)&v411[16];
    if (*(_QWORD *)&v411[16])
    {
      v278 = (unint64_t *)(*(_QWORD *)&v411[16] + 8);
      do
        v279 = __ldaxr(v278);
      while (__stlxr(v279 - 1, v278));
      if (!v279)
      {
        ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
        std::__shared_weak_count::__release_weak(v277);
      }
    }
  }
  sub_223B9C428(a1, a2 + 992, v262, v263, v264, v265, v266, v267);
  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v280 = *(int **)(a1 + 72), v281 = *v280, v282 = *(int *)((char *)v280 + 3), v281 == *(_DWORD *)"version")
      ? (v283 = v282 == *(_DWORD *)"sion")
      : (v283 = 0),
        !v283))
  {
    v284 = *(unsigned __int8 *)(a2 + 1080);
    v420[0] = 6;
    *(_QWORD *)&v420[8] = v284;
    v285 = (unsigned __int8 *)sub_22453F8B8(a1);
    v286 = *v285;
    *v285 = v420[0];
    v420[0] = v286;
    v287 = *((_QWORD *)v285 + 1);
    *((_QWORD *)v285 + 1) = *(_QWORD *)&v420[8];
    *(_QWORD *)&v420[8] = v287;
    sub_223454278((uint64_t *)&v420[8], v286);
  }
  *(_QWORD *)v420 = 3;
  *(_QWORD *)&v420[8] = a2 + 1084;
  sub_224541808(a1, v420);
  v288 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v288 - 8);
  *(_QWORD *)(a1 + 56) = v288 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  v289 = *(_QWORD *)(a2 + 1136);
  v420[0] = 5;
  *(_QWORD *)&v420[8] = v289;
  v290 = (unsigned __int8 *)sub_22453F8B8(a1);
  v291 = *v290;
  *v290 = v420[0];
  v420[0] = v291;
  v292 = *((_QWORD *)v290 + 1);
  *((_QWORD *)v290 + 1) = *(_QWORD *)&v420[8];
  *(_QWORD *)&v420[8] = v292;
  sub_223454278((uint64_t *)&v420[8], v291);
  sub_223B9E69C((uint64_t)v420, a1, a2 + 1144);
  *(_QWORD *)v420 = 16;
  *(_QWORD *)&v420[8] = a2 + 1184;
  sub_224541B78(a1, v420);
  if (a3 == 1)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/include/Reconstruction/Frame/FrameBundleSample.h", 528, (uint64_t)"io::is_input_archive_v<Archive>", 31, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v420[0] = 0;
    LOBYTE(v432[0]) = 0;
    LOBYTE(v382) = 0;
    v383 = 0;
    v293 = (unsigned __int8 *)sub_22453F8B8(a1);
    v294 = *v293;
    *v293 = v382;
    LOBYTE(v382) = v294;
    v295 = *((_QWORD *)v293 + 1);
    *((_QWORD *)v293 + 1) = v383;
    v383 = v295;
    sub_223454278(&v383, v294);
    if (!LOBYTE(v432[0]))
      goto LABEL_371;
    v296 = *(unsigned __int8 *)(a2 + 1512);
    *(_OWORD *)(a2 + 1312) = *(_OWORD *)v420;
    *(_DWORD *)(a2 + 1328) = *(_DWORD *)&v420[16];
    v297 = (char **)(a2 + 1336);
    if (v296)
    {
      sub_2232C6B24(v297, (char **)&v420[24]);
      *(_BYTE *)(a2 + 1504) = BYTE8(v431);
      if (!LOBYTE(v432[0]))
        goto LABEL_371;
LABEL_357:
      if ((_QWORD)__p)
      {
        *((_QWORD *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      if (v427)
      {
        v428 = (char *)v427;
        operator delete(v427);
      }
      if (*((_QWORD *)&v425 + 1))
      {
        v426 = *((_QWORD *)&v425 + 1);
        operator delete(*((void **)&v425 + 1));
      }
      if ((_QWORD)v424)
      {
        *((_QWORD *)&v424 + 1) = v424;
        operator delete((void *)v424);
      }
      if (*((_QWORD *)&v422 + 1))
      {
        *(_QWORD *)&v423 = *((_QWORD *)&v422 + 1);
        operator delete(*((void **)&v422 + 1));
      }
      if ((_QWORD)v421)
      {
        *((_QWORD *)&v421 + 1) = v421;
        operator delete((void *)v421);
      }
      if (*(_QWORD *)&v420[24])
      {
        *(_QWORD *)&v420[32] = *(_QWORD *)&v420[24];
        operator delete(*(void **)&v420[24]);
      }
      goto LABEL_371;
    }
    sub_2232C6D24(v297, (uint64_t)&v420[24]);
    v302 = BYTE8(v431);
    *(_BYTE *)(a2 + 1512) = 1;
    *(_BYTE *)(a2 + 1504) = v302;
    if (LOBYTE(v432[0]))
      goto LABEL_357;
LABEL_371:
    *(_DWORD *)v420 = 0;
    sub_224540500(a1, v420);
    goto LABEL_372;
  }
  if (a3 <= 6)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/include/Reconstruction/Frame/FrameBundleSample.h", 535, (uint64_t)"io::is_input_archive_v<Archive>", 31, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    memset(v420, 0, 24);
    sub_22453FAE0(a1);
    v298 = *(_QWORD *)(a1 + 56);
    v299 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(v298 - 8);
    *(_QWORD *)(a1 + 56) = v298 - 8;
    if (v299)
      *(_BYTE *)(a1 + 88) = 0;
    if (a3 > 4)
    {
LABEL_372:
      if (*(_BYTE *)(a2 + 1648))
        goto LABEL_373;
      goto LABEL_376;
    }
    goto LABEL_371;
  }
  if (*(_BYTE *)(a2 + 1512))
  {
    sub_22453FAE0(a1);
    *(_QWORD *)v420 = "version";
    *(_QWORD *)&v420[8] = 7;
    *(_DWORD *)&v420[16] = 4;
    if (**(unsigned __int8 **)(a1 + 40) <= 1u)
    {
      v300 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 72) = "version";
      *(_QWORD *)(a1 + 80) = 7;
      if (!v300)
        *(_BYTE *)(a1 + 88) = 1;
    }
    sub_224540500(a1, &v420[16]);
    sub_223B9E828(a1, (__int128 *)(a2 + 1312), *(unsigned int *)&v420[16]);
    v301 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(v301 - 8);
    *(_QWORD *)(a1 + 56) = v301 - 8;
    if (*(_BYTE *)(a1 + 88))
    {
      *(_BYTE *)(a1 + 88) = 0;
      if (*(_BYTE *)(a2 + 1648))
        goto LABEL_373;
      goto LABEL_376;
    }
    goto LABEL_372;
  }
  v420[0] = 0;
  *(_QWORD *)&v420[8] = 0;
  v303 = (unsigned __int8 *)sub_22453F8B8(a1);
  v304 = *v303;
  *v303 = v420[0];
  v420[0] = v304;
  v305 = *((_QWORD *)v303 + 1);
  *((_QWORD *)v303 + 1) = *(_QWORD *)&v420[8];
  *(_QWORD *)&v420[8] = v305;
  sub_223454278((uint64_t *)&v420[8], v304);
  if (*(_BYTE *)(a2 + 1648))
  {
LABEL_373:
    *(_QWORD *)v420 = *(_QWORD *)(a1 + 8);
    sub_223B9F090((uint64_t)v420, a1, (__int128 *)(a2 + 1520));
    if (a3 < 3)
      return;
    goto LABEL_377;
  }
LABEL_376:
  v420[0] = 0;
  *(_QWORD *)&v420[8] = 0;
  v306 = (unsigned __int8 *)sub_22453F8B8(a1);
  v307 = *v306;
  *v306 = v420[0];
  v420[0] = v307;
  v308 = *((_QWORD *)v306 + 1);
  *((_QWORD *)v306 + 1) = *(_QWORD *)&v420[8];
  *(_QWORD *)&v420[8] = v308;
  sub_223454278((uint64_t *)&v420[8], v307);
  if (a3 < 3)
    return;
LABEL_377:
  sub_22453FAE0(a1);
  v309 = *(_QWORD *)(a2 + 1656);
  v365 = *(_QWORD *)(a2 + 1664);
  if (v309 != v365)
  {
    v364 = a2;
    while (1)
    {
      sub_22453FAE0(a1);
      *(_QWORD *)v420 = "version";
      *(_QWORD *)&v420[8] = 7;
      *(_DWORD *)&v420[16] = 1;
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v310 = *(unsigned __int8 *)(a1 + 88);
        *(_QWORD *)(a1 + 72) = "version";
        *(_QWORD *)(a1 + 80) = 7;
        if (!v310)
          *(_BYTE *)(a1 + 88) = 1;
      }
      sub_224540500(a1, &v420[16]);
      *(_OWORD *)v420 = *(_OWORD *)v309;
      v311 = *(_OWORD *)(v309 + 16);
      v312 = *(_OWORD *)(v309 + 32);
      v313 = *(_OWORD *)(v309 + 64);
      v421 = *(_OWORD *)(v309 + 48);
      v422 = v313;
      *(_OWORD *)&v420[16] = v311;
      *(_OWORD *)&v420[32] = v312;
      v314 = *(_OWORD *)(v309 + 80);
      v315 = *(_OWORD *)(v309 + 96);
      v316 = *(_OWORD *)(v309 + 112);
      v426 = *(_QWORD *)(v309 + 128);
      v424 = v315;
      v425 = v316;
      v423 = v314;
      sub_223B9317C(&v427, (uint64_t *)(v309 + 144));
      __p = *(_OWORD *)(v309 + 168);
      v317 = *(_OWORD *)(v309 + 184);
      v318 = *(_OWORD *)(v309 + 200);
      v319 = *(_OWORD *)(v309 + 232);
      v432[1] = *(_OWORD *)(v309 + 216);
      v432[2] = v319;
      v431 = v317;
      v432[0] = v318;
      v320 = *(_OWORD *)(v309 + 248);
      v321 = *(_OWORD *)(v309 + 264);
      v322 = *(_OWORD *)(v309 + 280);
      v435 = *(_DWORD *)(v309 + 296);
      v433 = v321;
      v434 = v322;
      v432[3] = v320;
      if (!*(_BYTE *)(a1 + 88)
        || *(_QWORD *)(a1 + 80) != 7
        || ((v323 = *(int **)(a1 + 72), v324 = *v323, v325 = *(int *)((char *)v323 + 3), v324 == *(_DWORD *)"version")
          ? (v326 = v325 == *(_DWORD *)"sion")
          : (v326 = 0),
            !v326))
      {
        LOBYTE(v382) = 5;
        v383 = *(_QWORD *)v420;
        v327 = (unsigned __int8 *)sub_22453F8B8(a1);
        v328 = *v327;
        *v327 = v382;
        LOBYTE(v382) = v328;
        v329 = *((_QWORD *)v327 + 1);
        *((_QWORD *)v327 + 1) = v383;
        v383 = v329;
        sub_223454278(&v383, v328);
      }
      v382 = 16;
      v383 = (uint64_t)&v420[8];
      sub_224541B78(a1, &v382);
      sub_22453FAE0(a1);
      v382 = (uint64_t)"version";
      v383 = 7;
      LODWORD(v384[0]) = 2;
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v330 = *(unsigned __int8 *)(a1 + 88);
        *(_QWORD *)(a1 + 72) = "version";
        *(_QWORD *)(a1 + 80) = 7;
        if (!v330)
          *(_BYTE *)(a1 + 88) = 1;
      }
      sub_224540500(a1, v384);
      if (LODWORD(v384[0]) == 1)
      {
        memset(v415, 0, sizeof(v415));
        sub_22453FAE0(a1);
        v382 = (uint64_t)"version";
        v383 = 7;
        LODWORD(v384[0]) = 1;
        if (**(unsigned __int8 **)(a1 + 40) <= 1u)
        {
          v331 = *(unsigned __int8 *)(a1 + 88);
          *(_QWORD *)(a1 + 72) = "version";
          *(_QWORD *)(a1 + 80) = 7;
          if (!v331)
            *(_BYTE *)(a1 + 88) = 1;
        }
        sub_224540500(a1, v384);
        sub_223B9F19C(a1, v415);
        v332 = *(_QWORD *)(a1 + 56);
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(v332 - 8);
        *(_QWORD *)(a1 + 56) = v332 - 8;
        if (*(_BYTE *)(a1 + 88))
          *(_BYTE *)(a1 + 88) = 0;
      }
      sub_22453FAE0(a1);
      v382 = (uint64_t)"version";
      v383 = 7;
      LODWORD(v384[0]) = 1;
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v333 = *(unsigned __int8 *)(a1 + 88);
        *(_QWORD *)(a1 + 72) = "version";
        *(_QWORD *)(a1 + 80) = 7;
        if (!v333)
          *(_BYTE *)(a1 + 88) = 1;
      }
      sub_224540500(a1, v384);
      sub_223B9F19C(a1, (uint64_t *)&v427);
      v334 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(v334 - 8);
      *(_QWORD *)(a1 + 56) = v334 - 8;
      if (*(_BYTE *)(a1 + 88))
        *(_BYTE *)(a1 + 88) = 0;
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(v334 - 16);
      *(_QWORD *)(a1 + 56) = v334 - 16;
      if ((_BYTE)v435)
      {
        v382 = *(_QWORD *)(a1 + 8);
        sub_223B9F090((uint64_t)&v382, a1, &__p);
        v335 = (char *)v427;
        if (v427)
          goto LABEL_408;
      }
      else
      {
        LOBYTE(v382) = 0;
        v383 = 0;
        v336 = (unsigned __int8 *)sub_22453F8B8(a1);
        v337 = *v336;
        *v336 = v382;
        LOBYTE(v382) = v337;
        v338 = *((_QWORD *)v336 + 1);
        *((_QWORD *)v336 + 1) = v383;
        v383 = v338;
        sub_223454278(&v383, v337);
        v335 = (char *)v427;
        if (v427)
        {
LABEL_408:
          v339 = v428;
          v340 = v335;
          if (v428 != v335)
          {
            v341 = v428;
            do
            {
              v343 = (void *)*((_QWORD *)v341 - 3);
              v341 -= 24;
              v342 = v343;
              if (v343)
              {
                *(v339 - 2) = v342;
                operator delete(v342);
              }
              v339 = v341;
            }
            while (v341 != v335);
            v340 = v427;
          }
          v428 = v335;
          operator delete(v340);
        }
      }
      v344 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(v344 - 8);
      *(_QWORD *)(a1 + 56) = v344 - 8;
      if (*(_BYTE *)(a1 + 88))
        *(_BYTE *)(a1 + 88) = 0;
      v309 += 304;
      a2 = v364;
      if (v309 == v365)
      {
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(v344 - 16);
        *(_QWORD *)(a1 + 56) = v344 - 16;
        goto LABEL_420;
      }
    }
  }
  v345 = *(_QWORD *)(a1 + 56);
  v346 = *(unsigned __int8 *)(a1 + 88);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v345 - 8);
  *(_QWORD *)(a1 + 56) = v345 - 8;
  if (v346)
    *(_BYTE *)(a1 + 88) = 0;
LABEL_420:
  if (a3 >= 6)
  {
    sub_22453FAE0(a1);
    *(_QWORD *)v420 = "version";
    *(_QWORD *)&v420[8] = 7;
    *(_DWORD *)&v420[16] = 1;
    if (**(unsigned __int8 **)(a1 + 40) <= 1u)
    {
      v347 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 72) = "version";
      *(_QWORD *)(a1 + 80) = 7;
      if (!v347)
        *(_BYTE *)(a1 + 88) = 1;
    }
    sub_224540500(a1, &v420[16]);
    if (*(_BYTE *)(a1 + 88)
      && *(_QWORD *)(a1 + 80) == 7
      && ((v348 = *(int **)(a1 + 72), v349 = *v348, v350 = *(int *)((char *)v348 + 3), v349 == *(_DWORD *)"version")
        ? (v351 = v350 == *(_DWORD *)"sion")
        : (v351 = 0),
          v351))
    {
      v358 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(v358 - 8);
      *(_QWORD *)(a1 + 56) = v358 - 8;
    }
    else
    {
      v352 = *(unsigned __int8 *)(a2 + 1680);
      v420[0] = 6;
      *(_QWORD *)&v420[8] = v352;
      v353 = (unsigned __int8 *)sub_22453F8B8(a1);
      v354 = *v353;
      *v353 = v420[0];
      v420[0] = v354;
      v355 = *((_QWORD *)v353 + 1);
      *((_QWORD *)v353 + 1) = *(_QWORD *)&v420[8];
      *(_QWORD *)&v420[8] = v355;
      sub_223454278((uint64_t *)&v420[8], v354);
      v356 = *(unsigned __int8 *)(a1 + 88);
      v357 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(v357 - 8);
      *(_QWORD *)(a1 + 56) = v357 - 8;
      if (!v356)
      {
        if (a3 < 8)
          return;
LABEL_435:
        if (*(_BYTE *)(a2 + 1682))
        {
          v359 = *(unsigned __int8 *)(a2 + 1681);
          v420[0] = 4;
          *(_QWORD *)&v420[8] = v359;
        }
        else
        {
          v420[0] = 0;
          *(_QWORD *)&v420[8] = 0;
        }
        v360 = (unsigned __int8 *)sub_22453F8B8(a1);
        v361 = *v360;
        *v360 = v420[0];
        v420[0] = v361;
        v362 = *((_QWORD *)v360 + 1);
        *((_QWORD *)v360 + 1) = *(_QWORD *)&v420[8];
        *(_QWORD *)&v420[8] = v362;
        sub_223454278((uint64_t *)&v420[8], v361);
        return;
      }
    }
    *(_BYTE *)(a1 + 88) = 0;
    if (a3 < 8)
      return;
    goto LABEL_435;
  }
}

void sub_223B9BEC8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_223454278(v1, LOBYTE(STACK[0x2F0]));
  _Unwind_Resume(a1);
}

void sub_223B9BEE0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_223454278(v1, LOBYTE(STACK[0x2F0]));
  _Unwind_Resume(a1);
}

void sub_223B9BEF8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_223454278(v1, LOBYTE(STACK[0x2F0]));
  _Unwind_Resume(a1);
}

void sub_223B9BF10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;

  v54 = LODWORD(STACK[0x260]);
  if ((_DWORD)v54 != -1)
    (*(void (**)(char *, uint64_t))(v52 + 8 * v54))(&a51, v51);
  sub_22319A588((uint64_t)&STACK[0x288]);
  sub_223B88F34((uint64_t)&STACK[0x2F0]);
  _Unwind_Resume(a1);
}

void sub_223B9C0D8()
{
  int v0;

  sub_22319A588((uint64_t)&STACK[0x200]);
  if (v0)
    JUMPOUT(0x223B9C0E8);
  JUMPOUT(0x223B9C0F8);
}

void sub_223B9C104(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)STACK[0x210];
  if (STACK[0x210])
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      sub_223B88F34((uint64_t)&STACK[0x2F0]);
      _Unwind_Resume(a1);
    }
  }
  sub_223B88F34((uint64_t)&STACK[0x2F0]);
  _Unwind_Resume(a1);
}

void sub_223B9C150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  unint64_t v54;

  v52 = (std::__shared_weak_count *)STACK[0x210];
  if (STACK[0x210])
  {
    p_shared_owners = (unint64_t *)&v52->__shared_owners_;
    do
      v54 = __ldaxr(p_shared_owners);
    while (__stlxr(v54 - 1, p_shared_owners));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  sub_2232BBEF8((uint64_t)&a51);
  sub_223B88F34((uint64_t)&STACK[0x2F0]);
  _Unwind_Resume(a1);
}

void sub_223B9C1AC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_223454278(v1, LOBYTE(STACK[0x2F0]));
  _Unwind_Resume(a1);
}

void sub_223B9C1E4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_223454278(v1, LOBYTE(STACK[0x2F0]));
  _Unwind_Resume(a1);
}

void sub_223B9C1FC(_Unwind_Exception *a1)
{
  sub_223255D3C((uint64_t)&STACK[0x2F0]);
  _Unwind_Resume(a1);
}

void sub_223B9C218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;

  v54 = LODWORD(STACK[0x350]);
  if ((_DWORD)v54 != -1)
    (*(void (**)(char *, uint64_t))(v52 + 8 * v54))(&a44, v51);
  LODWORD(STACK[0x350]) = -1;
  sub_22319A588((uint64_t)&STACK[0x288]);
  sub_22319A5E0((uint64_t)&a51);
  sub_2232CDB08((uint64_t)&STACK[0x200]);
  _Unwind_Resume(a1);
}

void sub_223B9C24C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_223B9C25C()
{
  sub_2232C17E0((uint64_t)&STACK[0x2F0]);
  JUMPOUT(0x223B9C268);
}

void sub_223B9C288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  sub_22319A5E0((uint64_t)va1);
  sub_2231D4840((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223B9C2A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,unsigned __int8 a44)
{
  uint64_t *v44;

  sub_223454278(v44, a44);
  JUMPOUT(0x223B9C2B4);
}

void sub_223B9C2D0(_Unwind_Exception *a1)
{
  sub_2232BBEF8((uint64_t)&STACK[0x2F0]);
  _Unwind_Resume(a1);
}

void sub_223B9C2E4(_Unwind_Exception *a1)
{
  sub_2232BBF74((uint64_t)&STACK[0x2F0]);
  _Unwind_Resume(a1);
}

void sub_223B9C2F8(_Unwind_Exception *a1)
{
  sub_2232BBEF8((uint64_t)&STACK[0x2F0]);
  _Unwind_Resume(a1);
}

void sub_223B9C30C()
{
  sub_2232C17E0((uint64_t)&STACK[0x2F0]);
  JUMPOUT(0x223B9C318);
}

void sub_223B9C338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  sub_22319A5E0((uint64_t)&a51);
  sub_2232CDB08((uint64_t)&STACK[0x200]);
  _Unwind_Resume(a1);
}

void sub_223B9C354(_Unwind_Exception *a1)
{
  sub_2232BBEF8((uint64_t)&STACK[0x2F0]);
  _Unwind_Resume(a1);
}

void sub_223B9C368(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_223454278(v1, LOBYTE(STACK[0x2F0]));
  _Unwind_Resume(a1);
}

void sub_223B9C380(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_223454278(v1, LOBYTE(STACK[0x2F0]));
  _Unwind_Resume(a1);
}

void sub_223B9C3AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,unsigned __int8 a44)
{
  uint64_t *v44;
  unint64_t v46;
  unint64_t v47;
  void *v48;
  unint64_t v49;
  void *v50;
  void *v51;

  sub_223454278(v44, a44);
  v46 = STACK[0x380];
  if (!STACK[0x380])
    JUMPOUT(0x223B9C3D4);
  v47 = STACK[0x388];
  v48 = (void *)STACK[0x380];
  if (STACK[0x388] != v46)
  {
    v49 = STACK[0x388];
    do
    {
      v51 = *(void **)(v49 - 24);
      v49 -= 24;
      v50 = v51;
      if (v51)
      {
        *(_QWORD *)(v47 - 16) = v50;
        operator delete(v50);
      }
      v47 = v49;
    }
    while (v49 != v46);
    v48 = (void *)STACK[0x380];
  }
  STACK[0x388] = v46;
  operator delete(v48);
  _Unwind_Resume(a1);
}

void sub_223B9C428(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int16 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  __int16 v24;
  unint64_t v25;
  unint64_t v26;
  unsigned __int8 *v27;
  int v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  _BYTE v41[32];
  _BYTE v42[32];
  __int16 v43;
  __int16 v44;
  _QWORD v45[2];
  std::__shared_weak_count *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  __int16 v51;
  _BYTE v52[28];
  _BYTE v53[64];
  int v54;
  _OWORD v55[2];
  _BYTE v56[64];
  int v57;
  char v58;
  char v59;
  uint64_t v60;

  v9 = *(unsigned __int8 *)(a2 + 80);
  if (*(_BYTE *)(a2 + 80))
  {
    v10 = *(_QWORD *)(a2 + 8);
    v11 = *(std::__shared_weak_count **)(a2 + 16);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      v14 = *(_WORD *)(a2 + 72);
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
      *(_OWORD *)v41 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)&v41[16] = *(_OWORD *)(a2 + 40);
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
      v39 = v10;
      v40 = v11;
      v43 = v14;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      v45[0] = &off_24EC1F8C8;
      v10 = v39;
      v19 = (unint64_t *)&v11->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      v21 = *(_QWORD *)&v41[12];
      v22 = *(_DWORD *)&v41[28];
      v23 = *(_QWORD *)v41;
      v24 = v43;
      do
        v25 = __ldxr(v19);
      while (__stxr(v25 + 1, v19));
      do
        v26 = __ldxr(v19);
      while (__stxr(v26 + 1, v19));
    }
    else
    {
      v40 = 0;
      *(_OWORD *)v42 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)&v42[16] = *(_OWORD *)(a2 + 40);
      v44 = *(_WORD *)(a2 + 72);
      v45[0] = &off_24EC1F8C8;
      v11 = 0;
      v21 = *(_QWORD *)&v42[12];
      v22 = *(_DWORD *)&v42[28];
      v23 = *(_QWORD *)v42;
      v24 = v44;
    }
    v45[1] = v10;
    v46 = v11;
    v47 = v21;
    v48 = 4 * v22;
    v49 = v23;
    v50 = 32;
    v51 = v24;
    if (v11)
    {
      v30 = (unint64_t *)&v11->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      do
        v32 = __ldaxr(v30);
      while (__stlxr(v32 - 1, v30));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    sub_22416BFE0((uint64_t)v52, (uint64_t)v45, 0, a4, a5, a6, a7, a8);
    v55[0] = *(_OWORD *)v52;
    *(_OWORD *)((char *)v55 + 12) = *(_OWORD *)&v52[12];
    v56[0] = 0;
    v57 = -1;
    v33 = v54;
    if (v54 != -1)
    {
      ((void (*)(char *, _BYTE *, _BYTE *))off_24EC60008[v54])(&v59, v56, v53);
      v57 = v33;
    }
    v58 = 1;
    v60 = *(_QWORD *)(a1 + 8);
    sub_223B9D634(&v60, a1, (uint64_t)v55);
  }
  else
  {
    LOBYTE(v55[0]) = 0;
    v58 = 0;
    v52[0] = 0;
    *(_QWORD *)&v52[8] = 0;
    v27 = (unsigned __int8 *)sub_22453F8B8(a1);
    v28 = *v27;
    *v27 = 0;
    v52[0] = v28;
    v29 = *((_QWORD *)v27 + 1);
    *((_QWORD *)v27 + 1) = *(_QWORD *)&v52[8];
    *(_QWORD *)&v52[8] = v29;
    sub_223454278((uint64_t *)&v52[8], v28);
  }
  if (v58)
  {
    if (v57 != -1)
      ((void (*)(uint64_t *, _BYTE *))off_24EC5FFD0[v57])(&v60, v56);
    v57 = -1;
  }
  if (v9)
  {
    if (v54 != -1)
      ((void (*)(uint64_t *, _BYTE *))off_24EC5FFD0[v54])(&v60, v53);
    v54 = -1;
    v34 = v46;
    if (v46)
    {
      v35 = (unint64_t *)&v46->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    if (v40)
    {
      v37 = (unint64_t *)&v40->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
  }
}

void sub_223B9C810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,unsigned __int8 a26)
{
  uint64_t *v26;
  uint64_t v27;

  sub_223454278(v26, a26);
  sub_2232C17E0(v27 - 176);
  _Unwind_Resume(a1);
}

void sub_223B9C838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  v29 = *(unsigned int *)(v27 - 80);
  if ((_DWORD)v29 != -1)
    ((void (*)(uint64_t, uint64_t))off_24EC5FFD0[v29])(v27 - 56, v26);
  *(_DWORD *)(v27 - 80) = -1;
  sub_22319A588((uint64_t)&a26);
  sub_22319A5E0((uint64_t)&a19);
  sub_2231CE1A0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223B9C89C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_22319A5E0((uint64_t)&a19);
  sub_2231CE1A0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223B9C8B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int16 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  unint64_t v25;
  unint64_t v26;
  unsigned __int8 *v27;
  int v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  __int16 v45;
  __int16 v46;
  _QWORD v47[2];
  std::__shared_weak_count *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  __int16 v53;
  _BYTE v54[28];
  _BYTE v55[64];
  int v56;
  _OWORD v57[2];
  _BYTE v58[64];
  int v59;
  char v60;
  char v61;
  uint64_t v62;

  v9 = *(unsigned __int8 *)(a2 + 56);
  if (*(_BYTE *)(a2 + 56))
  {
    v10 = *(_QWORD *)(a2 + 8);
    v11 = *(std::__shared_weak_count **)(a2 + 16);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      v14 = *(_WORD *)(a2 + 48);
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
      v41 = *(_OWORD *)(a2 + 24);
      v43 = *(_QWORD *)(a2 + 40);
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
      v39 = v10;
      v40 = v11;
      v45 = v14;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      v47[0] = &off_24EC1F8C8;
      v10 = v39;
      v19 = (unint64_t *)&v11->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      v21 = HIDWORD(v43);
      v22 = *((_QWORD *)&v41 + 1);
      v23 = v41;
      v24 = v45;
      do
        v25 = __ldxr(v19);
      while (__stxr(v25 + 1, v19));
      do
        v26 = __ldxr(v19);
      while (__stxr(v26 + 1, v19));
    }
    else
    {
      v40 = 0;
      v42 = *(_OWORD *)(a2 + 24);
      v44 = *(_QWORD *)(a2 + 40);
      v46 = *(_WORD *)(a2 + 48);
      v47[0] = &off_24EC1F8C8;
      v11 = 0;
      v21 = HIDWORD(v44);
      v22 = *((_QWORD *)&v42 + 1);
      v23 = v42;
      v24 = v46;
    }
    v47[1] = v10;
    v48 = v11;
    v49 = v22;
    v50 = v21;
    v51 = v23;
    v52 = 1;
    v53 = v24;
    if (v11)
    {
      v30 = (unint64_t *)&v11->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      do
        v32 = __ldaxr(v30);
      while (__stlxr(v32 - 1, v30));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    sub_22416BFE0((uint64_t)v54, (uint64_t)v47, 0, a4, a5, a6, a7, a8);
    v57[0] = *(_OWORD *)v54;
    *(_OWORD *)((char *)v57 + 12) = *(_OWORD *)&v54[12];
    v58[0] = 0;
    v59 = -1;
    v33 = v56;
    if (v56 != -1)
    {
      ((void (*)(char *, _BYTE *, _BYTE *))off_24EC60008[v56])(&v61, v58, v55);
      v59 = v33;
    }
    v60 = 1;
    v62 = *(_QWORD *)(a1 + 8);
    sub_223B9D634(&v62, a1, (uint64_t)v57);
  }
  else
  {
    LOBYTE(v57[0]) = 0;
    v60 = 0;
    v54[0] = 0;
    *(_QWORD *)&v54[8] = 0;
    v27 = (unsigned __int8 *)sub_22453F8B8(a1);
    v28 = *v27;
    *v27 = 0;
    v54[0] = v28;
    v29 = *((_QWORD *)v27 + 1);
    *((_QWORD *)v27 + 1) = *(_QWORD *)&v54[8];
    *(_QWORD *)&v54[8] = v29;
    sub_223454278((uint64_t *)&v54[8], v28);
  }
  if (v60)
  {
    if (v59 != -1)
      ((void (*)(uint64_t *, _BYTE *))off_24EC5FFD0[v59])(&v62, v58);
    v59 = -1;
  }
  if (v9)
  {
    if (v56 != -1)
      ((void (*)(uint64_t *, _BYTE *))off_24EC5FFD0[v56])(&v62, v55);
    v56 = -1;
    v34 = v48;
    if (v48)
    {
      v35 = (unint64_t *)&v48->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    if (v40)
    {
      v37 = (unint64_t *)&v40->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
  }
}

void sub_223B9CC8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,unsigned __int8 a24)
{
  uint64_t *v24;
  uint64_t v25;

  sub_223454278(v24, a24);
  sub_2232C17E0(v25 - 176);
  _Unwind_Resume(a1);
}

void sub_223B9CCB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v5 = *(unsigned int *)(v3 - 80);
  if ((_DWORD)v5 != -1)
    ((void (*)(uint64_t, uint64_t))off_24EC5FFD0[v5])(v3 - 56, v2);
  *(_DWORD *)(v3 - 80) = -1;
  sub_22319A588((uint64_t)va2);
  sub_22319A5E0((uint64_t)va1);
  sub_2231BEEB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223B9CD18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_22319A5E0((uint64_t)va1);
  sub_2231BEEB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223B9CD34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int16 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  unint64_t v25;
  unint64_t v26;
  unsigned __int8 *v27;
  int v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  __int16 v45;
  __int16 v46;
  _QWORD v47[2];
  std::__shared_weak_count *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  __int16 v53;
  _BYTE v54[28];
  _BYTE v55[64];
  int v56;
  _OWORD v57[2];
  _BYTE v58[64];
  int v59;
  char v60;
  char v61;
  uint64_t v62;

  v9 = *(unsigned __int8 *)(a2 + 56);
  if (*(_BYTE *)(a2 + 56))
  {
    v10 = *(_QWORD *)(a2 + 8);
    v11 = *(std::__shared_weak_count **)(a2 + 16);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      v14 = *(_WORD *)(a2 + 48);
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
      v41 = *(_OWORD *)(a2 + 24);
      v43 = *(_QWORD *)(a2 + 40);
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
      v39 = v10;
      v40 = v11;
      v45 = v14;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      v47[0] = &off_24EC1F8C8;
      v10 = v39;
      v19 = (unint64_t *)&v11->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      v21 = HIDWORD(v43);
      v22 = *((_QWORD *)&v41 + 1);
      v23 = v41;
      v24 = v45;
      do
        v25 = __ldxr(v19);
      while (__stxr(v25 + 1, v19));
      do
        v26 = __ldxr(v19);
      while (__stxr(v26 + 1, v19));
    }
    else
    {
      v40 = 0;
      v42 = *(_OWORD *)(a2 + 24);
      v44 = *(_QWORD *)(a2 + 40);
      v46 = *(_WORD *)(a2 + 48);
      v47[0] = &off_24EC1F8C8;
      v11 = 0;
      v21 = HIDWORD(v44);
      v22 = *((_QWORD *)&v42 + 1);
      v23 = v42;
      v24 = v46;
    }
    v47[1] = v10;
    v48 = v11;
    v49 = v22;
    v50 = 2 * v21;
    v51 = v23;
    v52 = 3;
    v53 = v24;
    if (v11)
    {
      v30 = (unint64_t *)&v11->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      do
        v32 = __ldaxr(v30);
      while (__stlxr(v32 - 1, v30));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    sub_22416BFE0((uint64_t)v54, (uint64_t)v47, 0, a4, a5, a6, a7, a8);
    v57[0] = *(_OWORD *)v54;
    *(_OWORD *)((char *)v57 + 12) = *(_OWORD *)&v54[12];
    v58[0] = 0;
    v59 = -1;
    v33 = v56;
    if (v56 != -1)
    {
      ((void (*)(char *, _BYTE *, _BYTE *))off_24EC60008[v56])(&v61, v58, v55);
      v59 = v33;
    }
    v60 = 1;
    v62 = *(_QWORD *)(a1 + 8);
    sub_223B9D634(&v62, a1, (uint64_t)v57);
  }
  else
  {
    LOBYTE(v57[0]) = 0;
    v60 = 0;
    v54[0] = 0;
    *(_QWORD *)&v54[8] = 0;
    v27 = (unsigned __int8 *)sub_22453F8B8(a1);
    v28 = *v27;
    *v27 = 0;
    v54[0] = v28;
    v29 = *((_QWORD *)v27 + 1);
    *((_QWORD *)v27 + 1) = *(_QWORD *)&v54[8];
    *(_QWORD *)&v54[8] = v29;
    sub_223454278((uint64_t *)&v54[8], v28);
  }
  if (v60)
  {
    if (v59 != -1)
      ((void (*)(uint64_t *, _BYTE *))off_24EC5FFD0[v59])(&v62, v58);
    v59 = -1;
  }
  if (v9)
  {
    if (v56 != -1)
      ((void (*)(uint64_t *, _BYTE *))off_24EC5FFD0[v56])(&v62, v55);
    v56 = -1;
    v34 = v48;
    if (v48)
    {
      v35 = (unint64_t *)&v48->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    if (v40)
    {
      v37 = (unint64_t *)&v40->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
  }
}

void sub_223B9D10C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,unsigned __int8 a24)
{
  uint64_t *v24;
  uint64_t v25;

  sub_223454278(v24, a24);
  sub_2232C17E0(v25 - 176);
  _Unwind_Resume(a1);
}

void sub_223B9D134(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v5 = *(unsigned int *)(v3 - 80);
  if ((_DWORD)v5 != -1)
    ((void (*)(uint64_t, uint64_t))off_24EC5FFD0[v5])(v3 - 56, v2);
  *(_DWORD *)(v3 - 80) = -1;
  sub_22319A588((uint64_t)va2);
  sub_22319A5E0((uint64_t)va1);
  sub_22319EF60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223B9D198(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_22319A5E0((uint64_t)va1);
  sub_22319EF60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223B9D1B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int16 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  unint64_t v25;
  unint64_t v26;
  unsigned __int8 *v27;
  int v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  __int16 v45;
  __int16 v46;
  _QWORD v47[2];
  std::__shared_weak_count *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  __int16 v53;
  _BYTE v54[28];
  _BYTE v55[64];
  int v56;
  _OWORD v57[2];
  _BYTE v58[64];
  int v59;
  char v60;
  char v61;
  uint64_t v62;

  v9 = *(unsigned __int8 *)(a2 + 56);
  if (*(_BYTE *)(a2 + 56))
  {
    v10 = *(_QWORD *)(a2 + 8);
    v11 = *(std::__shared_weak_count **)(a2 + 16);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      v14 = *(_WORD *)(a2 + 48);
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
      v41 = *(_OWORD *)(a2 + 24);
      v43 = *(_QWORD *)(a2 + 40);
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
      v39 = v10;
      v40 = v11;
      v45 = v14;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      v47[0] = &off_24EC1F8C8;
      v10 = v39;
      v19 = (unint64_t *)&v11->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      v21 = HIDWORD(v43);
      v22 = *((_QWORD *)&v41 + 1);
      v23 = v41;
      v24 = v45;
      do
        v25 = __ldxr(v19);
      while (__stxr(v25 + 1, v19));
      do
        v26 = __ldxr(v19);
      while (__stxr(v26 + 1, v19));
    }
    else
    {
      v40 = 0;
      v42 = *(_OWORD *)(a2 + 24);
      v44 = *(_QWORD *)(a2 + 40);
      v46 = *(_WORD *)(a2 + 48);
      v47[0] = &off_24EC1F8C8;
      v11 = 0;
      v21 = HIDWORD(v44);
      v22 = *((_QWORD *)&v42 + 1);
      v23 = v42;
      v24 = v46;
    }
    v47[1] = v10;
    v48 = v11;
    v49 = v22;
    v50 = 4 * v21;
    v51 = v23;
    v52 = 4;
    v53 = v24;
    if (v11)
    {
      v30 = (unint64_t *)&v11->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      do
        v32 = __ldaxr(v30);
      while (__stlxr(v32 - 1, v30));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    sub_22416BFE0((uint64_t)v54, (uint64_t)v47, 0, a4, a5, a6, a7, a8);
    v57[0] = *(_OWORD *)v54;
    *(_OWORD *)((char *)v57 + 12) = *(_OWORD *)&v54[12];
    v58[0] = 0;
    v59 = -1;
    v33 = v56;
    if (v56 != -1)
    {
      ((void (*)(char *, _BYTE *, _BYTE *))off_24EC60008[v56])(&v61, v58, v55);
      v59 = v33;
    }
    v60 = 1;
    v62 = *(_QWORD *)(a1 + 8);
    sub_223B9D634(&v62, a1, (uint64_t)v57);
  }
  else
  {
    LOBYTE(v57[0]) = 0;
    v60 = 0;
    v54[0] = 0;
    *(_QWORD *)&v54[8] = 0;
    v27 = (unsigned __int8 *)sub_22453F8B8(a1);
    v28 = *v27;
    *v27 = 0;
    v54[0] = v28;
    v29 = *((_QWORD *)v27 + 1);
    *((_QWORD *)v27 + 1) = *(_QWORD *)&v54[8];
    *(_QWORD *)&v54[8] = v29;
    sub_223454278((uint64_t *)&v54[8], v28);
  }
  if (v60)
  {
    if (v59 != -1)
      ((void (*)(uint64_t *, _BYTE *))off_24EC5FFD0[v59])(&v62, v58);
    v59 = -1;
  }
  if (v9)
  {
    if (v56 != -1)
      ((void (*)(uint64_t *, _BYTE *))off_24EC5FFD0[v56])(&v62, v55);
    v56 = -1;
    v34 = v48;
    if (v48)
    {
      v35 = (unint64_t *)&v48->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    if (v40)
    {
      v37 = (unint64_t *)&v40->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
  }
}

void sub_223B9D58C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,unsigned __int8 a24)
{
  uint64_t *v24;
  uint64_t v25;

  sub_223454278(v24, a24);
  sub_2232C17E0(v25 - 176);
  _Unwind_Resume(a1);
}

void sub_223B9D5B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v5 = *(unsigned int *)(v3 - 80);
  if ((_DWORD)v5 != -1)
    ((void (*)(uint64_t, uint64_t))off_24EC5FFD0[v5])(v3 - 56, v2);
  *(_DWORD *)(v3 - 80) = -1;
  sub_22319A588((uint64_t)va2);
  sub_22319A5E0((uint64_t)va1);
  sub_2231BD9DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223B9D618(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_22319A5E0((uint64_t)va1);
  sub_2231BD9DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223B9D634(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[28];
  _BYTE v11[64];
  int v12;
  char v13;
  char v14;

  sub_22453FAE0(a2);
  *(_QWORD *)v10 = "version";
  *(_QWORD *)&v10[8] = 7;
  *(_DWORD *)&v10[16] = 2;
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (v6 = *(unsigned __int8 *)(a2 + 88), *(_QWORD *)(a2 + 72) = "version", *(_QWORD *)(a2 + 80) = 7, v6))
  {
    sub_224540500(a2, &v10[16]);
    if (*a1 != 2)
      goto LABEL_8;
  }
  else
  {
    *(_BYTE *)(a2 + 88) = 1;
    sub_224540500(a2, &v10[16]);
    if (*a1 != 2)
      goto LABEL_8;
  }
  *(_QWORD *)v10 = "min_version";
  *(_QWORD *)&v10[8] = 11;
  *(_DWORD *)&v10[16] = 2;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v7 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "min_version";
    *(_QWORD *)(a2 + 80) = 11;
    if (!v7)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_224540500(a2, &v10[16]);
LABEL_8:
  *(_OWORD *)v10 = *(_OWORD *)a3;
  *(_OWORD *)&v10[12] = *(_OWORD *)(a3 + 12);
  v11[0] = 0;
  v12 = -1;
  v8 = *(unsigned int *)(a3 + 96);
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(char *, _BYTE *, uint64_t))off_24EC5FFF8[v8])(&v13, v11, a3 + 32);
    v12 = v8;
  }
  sub_223B9D838(a2, (unsigned __int16 *)v10);
  if (v12 != -1)
    ((void (*)(char *, _BYTE *))off_24EC5FFD0[v12])(&v14, v11);
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(a2 + 56) = v9 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_223B9D7D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21)
{
  uint64_t v21;
  uint64_t v22;

  if (a21 != -1)
    ((void (*)(uint64_t, uint64_t))off_24EC5FFD0[a21])(v22 - 33, v21);
  _Unwind_Resume(exception_object);
}

void sub_223B9D838(uint64_t a1, unsigned __int16 *a2)
{
  int v4;
  uint64_t v5;
  BOOL v6;
  int *v7;
  int v8;
  int v9;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  uint64_t v33;
  int v34;
  unsigned __int16 v35;
  unint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  unsigned __int16 v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  char v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  unsigned __int16 v62;
  __int128 v63;
  __int128 v64;
  int v65;
  uint64_t v66;
  std::ios_base v67;
  uint64_t v68;
  int v69;
  uint64_t (**v70)();
  uint64_t v71;
  std::__shared_weak_count *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  int v76;
  unsigned __int16 v77;

  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v4 = *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 72) = "io_format", *(_QWORD *)(a1 + 80) = 9, v4))
  {
    if ((*(_BYTE *)(a1 + 12) & 2) == 0)
      goto LABEL_4;
LABEL_16:
    LODWORD(v58) = 0;
    sub_223B94FE4((uint64_t)&v54, (uint64_t)&v55, a2);
    if ((_DWORD)v58 == -1)
      sub_22316DD70();
    v54 = &v53;
    ((void (*)(uint64_t (***__return_ptr)(), char **, uint64_t *))off_24EC5FFA0[v58])(&v70, &v54, &v55);
    if ((_DWORD)v58 != -1)
      ((void (*)(char **, uint64_t *))off_24EC5FF88[v58])(&v54, &v55);
    sub_2245409C8(a1, (uint64_t)&v70);
    if (SHIBYTE(v72) < 0)
    {
      operator delete(v70);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_24;
      goto LABEL_21;
    }
LABEL_20:
    if (**(unsigned __int8 **)(a1 + 40) > 1u)
      goto LABEL_24;
    goto LABEL_21;
  }
  *(_BYTE *)(a1 + 88) = 1;
  if ((*(_BYTE *)(a1 + 12) & 2) != 0)
    goto LABEL_16;
LABEL_4:
  v5 = *a2;
  if (*(_BYTE *)(a1 + 88))
    v6 = *(_QWORD *)(a1 + 80) == 7;
  else
    v6 = 0;
  if (v6)
  {
    v7 = *(int **)(a1 + 72);
    v8 = *v7;
    v9 = *(int *)((char *)v7 + 3);
    if (v8 == *(_DWORD *)"version" && v9 == *(_DWORD *)"sion")
      goto LABEL_20;
  }
  LOBYTE(v55) = 6;
  v56 = v5;
  v11 = (unsigned __int8 *)sub_22453F8B8(a1);
  v12 = *v11;
  *v11 = 6;
  LOBYTE(v55) = v12;
  v13 = *((_QWORD *)v11 + 1);
  *((_QWORD *)v11 + 1) = v56;
  v56 = v13;
  sub_223454278(&v56, v12);
  if (**(unsigned __int8 **)(a1 + 40) > 1u)
    goto LABEL_24;
LABEL_21:
  v14 = *(unsigned __int8 *)(a1 + 88);
  *(_QWORD *)(a1 + 72) = "structure";
  *(_QWORD *)(a1 + 80) = 9;
  if (!v14)
    *(_BYTE *)(a1 + 88) = 1;
LABEL_24:
  v15 = *(_DWORD *)(a1 + 8);
  sub_22453FAE0(a1);
  v55 = (uint64_t)"version";
  v56 = 7;
  LODWORD(v57) = 2;
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v16 = *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 72) = "version", *(_QWORD *)(a1 + 80) = 7, v16))
  {
    sub_224540500(a1, &v57);
    if (v15 >= 1)
    {
LABEL_27:
      if (v15 == 2)
      {
        v55 = (uint64_t)"min_version";
        v56 = 11;
        LODWORD(v57) = 2;
        if (**(unsigned __int8 **)(a1 + 40) <= 1u)
        {
          v17 = *(unsigned __int8 *)(a1 + 88);
          *(_QWORD *)(a1 + 72) = "min_version";
          *(_QWORD *)(a1 + 80) = 11;
          if (!v17)
            *(_BYTE *)(a1 + 88) = 1;
        }
        sub_224540500(a1, &v57);
      }
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v18 = *(unsigned __int8 *)(a1 + 88);
        *(_QWORD *)(a1 + 72) = "image_format";
        *(_QWORD *)(a1 + 80) = 12;
        if (!v18)
          *(_BYTE *)(a1 + 88) = 1;
      }
      sub_223B9DFF0(a1, (uint64_t *)a2 + 1);
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v19 = *(unsigned __int8 *)(a1 + 88);
        *(_QWORD *)(a1 + 72) = "size";
        *(_QWORD *)(a1 + 80) = 4;
        if (!v19)
          *(_BYTE *)(a1 + 88) = 1;
      }
      v20 = (uint64_t)(a2 + 8);
      goto LABEL_46;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 88) = 1;
    sub_224540500(a1, &v57);
    if (v15 >= 1)
      goto LABEL_27;
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v21 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "image_format";
    *(_QWORD *)(a1 + 80) = 12;
    if (!v21)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_223B9DFF0(a1, (uint64_t *)a2 + 1);
  v20 = (uint64_t)(a2 + 8);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v22 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "size";
    *(_QWORD *)(a1 + 80) = 4;
    if (!v22)
      *(_BYTE *)(a1 + 88) = 1;
  }
LABEL_46:
  v55 = 2;
  v56 = v20;
  sub_224540FB8(a1, (uint64_t)&v55);
  v23 = *(_QWORD *)(a1 + 56);
  v24 = *(unsigned __int8 **)(v23 - 8);
  *(_QWORD *)(a1 + 40) = v24;
  *(_QWORD *)(a1 + 56) = v23 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v24 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "image_data";
    *(_QWORD *)(a1 + 80) = 10;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_22453FAE0(a1);
  v25 = *a2;
  if (v25 == 1)
  {
    v26 = *((_DWORD *)a2 + 24);
    if (!v26)
    {
      v55 = (uint64_t)&off_24EC1F8C8;
      v29 = *((_QWORD *)a2 + 5);
      v30 = (std::__shared_weak_count *)*((_QWORD *)a2 + 6);
      if (v30)
      {
        p_shared_owners = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(p_shared_owners);
        while (__stxr(v32 + 1, p_shared_owners));
        v33 = *((_QWORD *)a2 + 9);
        v34 = *((_DWORD *)a2 + 20);
        v35 = a2[42];
        do
          v36 = __ldxr(p_shared_owners);
        while (__stxr(v36 + 1, p_shared_owners));
      }
      else
      {
        v33 = *((_QWORD *)a2 + 9);
        v34 = *((_DWORD *)a2 + 20);
        v35 = a2[42];
      }
      v56 = v29;
      v57 = v30;
      v58 = *((_QWORD *)a2 + 7);
      v59 = *((_DWORD *)a2 + 16);
      v60 = v33;
      v61 = v34;
      v62 = v35;
      if (v30)
      {
        v45 = (unint64_t *)&v30->__shared_owners_;
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      goto LABEL_75;
    }
    if (v26 == 1)
    {
      v55 = (uint64_t)&off_24EC1F8C8;
      sub_2231F47D4((uint64_t)(a2 + 16), (uint64_t)&v56);
LABEL_75:
      sub_22416E5E0((const void *)a1, (uint64_t)&v55);
      v47 = v57;
      if (!v57)
        return;
      v48 = (unint64_t *)&v57->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      goto LABEL_88;
    }
LABEL_92:
    sub_22316DD70();
  }
  v27 = sub_22416E0BC(v25);
  v28 = *((_DWORD *)a2 + 24);
  if (v28)
  {
    if (v28 != 1)
      goto LABEL_92;
    v70 = &off_24EC1F8C8;
    sub_2231F47D4((uint64_t)(a2 + 16), (uint64_t)&v71);
  }
  else
  {
    v70 = &off_24EC1F8C8;
    v37 = *((_QWORD *)a2 + 5);
    v38 = (std::__shared_weak_count *)*((_QWORD *)a2 + 6);
    if (v38)
    {
      v39 = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
      v41 = *((_QWORD *)a2 + 9);
      v42 = *((_DWORD *)a2 + 20);
      v43 = a2[42];
      do
        v44 = __ldxr(v39);
      while (__stxr(v44 + 1, v39));
    }
    else
    {
      v41 = *((_QWORD *)a2 + 9);
      v42 = *((_DWORD *)a2 + 20);
      v43 = a2[42];
    }
    v71 = v37;
    v72 = v38;
    v73 = *((_QWORD *)a2 + 7);
    v74 = *((_DWORD *)a2 + 16);
    v75 = v41;
    v76 = v42;
    v77 = v43;
    if (v38)
    {
      v50 = (unint64_t *)&v38->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
  }
  v55 = a1;
  std::streambuf::basic_streambuf();
  v56 = MEMORY[0x24BEDB848] + 16;
  v63 = 0u;
  v64 = 0u;
  v65 = 24;
  v66 = MEMORY[0x24BEDB828] + 24;
  v67.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB828] + 64);
  std::ios_base::init(&v67, &v56);
  v68 = 0;
  v69 = -1;
  sub_22319F8C4(&v70, (char *)&v66, v27);
  sub_223B9E19C((uint64_t)&v55);
  v47 = v72;
  if (!v72)
    return;
  v52 = (unint64_t *)&v72->__shared_owners_;
  do
    v49 = __ldaxr(v52);
  while (__stlxr(v49 - 1, v52));
LABEL_88:
  if (!v49)
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
  }
}

void sub_223B9DEE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12)
{
  uint64_t *v12;

  sub_223454278(v12, a12);
  _Unwind_Resume(a1);
}

void sub_223B9DF00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_223B9E19C((uint64_t)va);
  sub_22319A5E0(v4 - 120);
  _Unwind_Resume(a1);
}

void sub_223B9DFF0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  BOOL v4;
  int *v5;
  int v6;
  int v7;
  BOOL v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  void *__p[2];
  char v13;
  char v14[8];
  uint64_t v15;
  int v16;
  char v17;
  char *v18;

  if ((*(_BYTE *)(a1 + 12) & 2) != 0)
  {
    v16 = 0;
    sub_223B95444((uint64_t)&v18, (uint64_t)v14, a2);
    if (v16 == -1)
      sub_22316DD70();
    v18 = &v17;
    ((void (*)(void **__return_ptr, char **, char *))off_24EC5FFA0[v16])(__p, &v18, v14);
    if (v16 != -1)
      ((void (*)(char **, char *))off_24EC5FF88[v16])(&v18, v14);
    sub_2245409C8(a1, (uint64_t)__p);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v3 = *a2;
    if (*(_BYTE *)(a1 + 88))
      v4 = *(_QWORD *)(a1 + 80) == 7;
    else
      v4 = 0;
    if (!v4
      || ((v5 = *(int **)(a1 + 72), v6 = *v5, v7 = *(int *)((char *)v5 + 3), v6 == *(_DWORD *)"version")
        ? (v8 = v7 == *(_DWORD *)"sion")
        : (v8 = 0),
          !v8))
    {
      v14[0] = 6;
      v15 = v3;
      v9 = (unsigned __int8 *)sub_22453F8B8(a1);
      v10 = *v9;
      *v9 = 6;
      v14[0] = v10;
      v11 = *((_QWORD *)v9 + 1);
      *((_QWORD *)v9 + 1) = v15;
      v15 = v11;
      sub_223454278(&v15, v10);
    }
  }
}

void sub_223B9E140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  uint64_t *v13;

  sub_223454278(v13, a13);
  _Unwind_Resume(a1);
}

void sub_223B9E158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223B9E174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223B9E188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223B9E19C(uint64_t a1)
{
  int v2;
  size_t v3;
  void **p_dst;
  unint64_t v5;
  unint64_t v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  int v14;
  int v15;
  BOOL v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  void **v20;
  uint64_t v21;
  void **__dst;
  size_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *(_DWORD *)(a1 + 104);
  if ((v2 & 0x10) != 0)
  {
    v5 = *(_QWORD *)(a1 + 96);
    v6 = *(_QWORD *)(a1 + 56);
    if (v5 < v6)
    {
      *(_QWORD *)(a1 + 96) = v6;
      v5 = v6;
    }
    v7 = *(const void **)(a1 + 48);
    v3 = v5 - (_QWORD)v7;
    if (v5 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_36;
  }
  else
  {
    if ((v2 & 8) == 0)
    {
      v3 = 0;
      HIBYTE(v25) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_14;
    }
    v7 = *(const void **)(a1 + 24);
    v3 = *(_QWORD *)(a1 + 40) - (_QWORD)v7;
    if (v3 >= 0x7FFFFFFFFFFFFFF8)
LABEL_36:
      sub_22316DBC0();
  }
  if (v3 >= 0x17)
  {
    v8 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v8 = v3 | 7;
    v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    v24 = v3;
    v25 = v9 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_13;
  }
  HIBYTE(v25) = v3;
  p_dst = (void **)&__dst;
  if (v3)
LABEL_13:
    memmove(p_dst, v7, v3);
LABEL_14:
  *((_BYTE *)p_dst + v3) = 0;
  v10 = HIBYTE(v25);
  if (v25 >= 0)
    v11 = HIBYTE(v25);
  else
    v11 = v24;
  v12 = *(_QWORD *)a1;
  if (!*(_BYTE *)(*(_QWORD *)a1 + 88)
    || *(_QWORD *)(v12 + 80) != 7
    || ((v13 = *(int **)(v12 + 72), v14 = *v13, v15 = *(int *)((char *)v13 + 3), v14 == *(_DWORD *)"version")
      ? (v16 = v15 == *(_DWORD *)"sion")
      : (v16 = 0),
        !v16))
  {
    LOBYTE(v26) = 6;
    v27 = v11;
    v17 = (unsigned __int8 *)sub_22453F8B8(v12);
    v18 = *v17;
    *v17 = v26;
    LOBYTE(v26) = v18;
    v19 = *((_QWORD *)v17 + 1);
    *((_QWORD *)v17 + 1) = v27;
    v27 = v19;
    sub_223454278(&v27, v18);
    v10 = HIBYTE(v25);
  }
  if (v10 < 0)
  {
    v20 = __dst;
    if (v11 && !__dst)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v20 = 0;
    }
  }
  else
  {
    v20 = (void **)&__dst;
  }
  v21 = *(_QWORD *)a1;
  v26 = v11;
  v27 = (uint64_t)v20;
  sub_22453FC5C(v21, (size_t *)&v26);
  if (SHIBYTE(v25) < 0)
    operator delete(__dst);
  std::ostream::~ostream();
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  return a1;
}

void sub_223B9E3E8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  uint64_t *v13;

  sub_223454278(v13, a13);
  sub_22316DC48(a1);
}

void sub_223B9E404(_DWORD *a1, uint64_t a2, unsigned __int16 *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  int v9;

  sub_22453FAE0(a2);
  v9 = 2;
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (v6 = *(unsigned __int8 *)(a2 + 88), *(_QWORD *)(a2 + 72) = "version", *(_QWORD *)(a2 + 80) = 7, v6))
  {
    sub_224540500(a2, &v9);
    if (*a1 != 2)
      goto LABEL_8;
  }
  else
  {
    *(_BYTE *)(a2 + 88) = 1;
    sub_224540500(a2, &v9);
    if (*a1 != 2)
      goto LABEL_8;
  }
  v9 = 2;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v7 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "min_version";
    *(_QWORD *)(a2 + 80) = 11;
    if (!v7)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_224540500(a2, &v9);
LABEL_8:
  sub_223B9D838(a2, a3);
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(a2 + 56) = v8 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_223B9E52C(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unsigned __int8 *v14;
  unsigned __int8 v15;
  uint64_t v16;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v3 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "dictionary";
    *(_QWORD *)(a1 + 80) = 10;
    if (!v3)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_22319ED0C(&v12, a2);
  sub_224517240((uint64_t)&v12, (uint64_t *)&v14);
  v4 = (uint64_t)v14;
  v15 = *v14;
  v16 = *((_QWORD *)v14 + 1);
  *v14 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unsigned __int8 *)sub_22453F8B8(a1);
  v6 = *v5;
  *v5 = v15;
  v15 = v6;
  v7 = *((_QWORD *)v5 + 1);
  *((_QWORD *)v5 + 1) = v16;
  v16 = v7;
  sub_223454278(&v16, v6);
  v8 = (uint64_t *)v14;
  v14 = 0;
  if (v8)
  {
    sub_223454278(v8 + 1, *(unsigned __int8 *)v8);
    MEMORY[0x227684CE8](v8, 0x1022C40B06DCE69);
  }
  v9 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_223B9E660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t *a12, unsigned __int8 a13)
{
  uint64_t *v13;

  sub_223454278(v13, a13);
  sub_224535780(&a12);
  sub_223167354((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_223B9E688(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223B9E69C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  sub_22453FAE0(a2);
  v10 = (uint64_t)"version";
  v11 = 7;
  v12 = 2;
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (v5 = *(unsigned __int8 *)(a2 + 88), *(_QWORD *)(a2 + 72) = "version", *(_QWORD *)(a2 + 80) = 7, v5))
  {
    sub_224540500(a2, &v12);
    if (**(unsigned __int8 **)(a2 + 40) > 1u)
      goto LABEL_7;
  }
  else
  {
    *(_BYTE *)(a2 + 88) = 1;
    sub_224540500(a2, &v12);
    if (**(unsigned __int8 **)(a2 + 40) > 1u)
      goto LABEL_7;
  }
  v6 = *(unsigned __int8 *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = "focal_length";
  *(_QWORD *)(a2 + 80) = 12;
  if (!v6)
    *(_BYTE *)(a2 + 88) = 1;
LABEL_7:
  v10 = 2;
  v11 = a3;
  sub_224541808(a2, &v10);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v7 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "principal_point";
    *(_QWORD *)(a2 + 80) = 15;
    if (!v7)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v10 = 2;
  v11 = a3 + 8;
  sub_224541808(a2, &v10);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v8 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "image_size";
    *(_QWORD *)(a2 + 80) = 10;
    if (!v8)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v10 = 2;
  v11 = a3 + 16;
  sub_224540FB8(a2, (uint64_t)&v10);
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(a2 + 56) = v9 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_223B9E828(uint64_t a1, __int128 *a2, unsigned int a3)
{
  BOOL v6;
  int *v7;
  int v8;
  int v9;
  BOOL v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  int v17;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  int v24;
  int v25;
  BOOL v26;
  unsigned __int8 *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  int v33;
  int v34;
  unsigned __int8 *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  int v41;
  int v42;
  unsigned __int8 *v44;
  int v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  char *v49;
  char *v50;
  uint64_t v51;
  __int128 *v52;
  __int128 *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  __int128 *v67;
  __int128 *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  char *v73;
  char *v74;
  unsigned __int8 *v75;
  int v76;
  uint64_t v77;
  int *v78;
  int v79;
  int v80;
  BOOL v81;
  unsigned __int8 *v82;
  int v83;
  uint64_t v84;
  __int128 v85;
  int v86;
  void *v87;
  char *v88;
  void *v89;
  __int128 *v90;
  void *v91;
  char *v92;
  void *v93;
  char *v94;
  void *v95;
  char *v96;
  void *v97;
  __int128 *v98;
  void *__p;
  char *v100;
  unsigned __int8 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  __int128 *v107;

  v85 = *a2;
  v86 = *((_DWORD *)a2 + 4);
  sub_2232C6D24(&v87, (uint64_t)a2 + 24);
  v101 = *((_BYTE *)a2 + 192);
  if (*(_BYTE *)(a1 + 88))
    v6 = *(_QWORD *)(a1 + 80) == 7;
  else
    v6 = 0;
  if (v6
    && ((v7 = *(int **)(a1 + 72), v8 = *v7, v9 = *(int *)((char *)v7 + 3), v8 == *(_DWORD *)"version")
      ? (v10 = v9 == *(_DWORD *)"sion")
      : (v10 = 0),
        v10))
  {
    v14 = 7;
  }
  else
  {
    LOBYTE(v102) = 4;
    *((_QWORD *)&v102 + 1) = v85;
    v11 = (unsigned __int8 *)sub_22453F8B8(a1);
    v12 = *v11;
    *v11 = v102;
    LOBYTE(v102) = v12;
    v13 = *((_QWORD *)v11 + 1);
    *((_QWORD *)v11 + 1) = *((_QWORD *)&v102 + 1);
    *((_QWORD *)&v102 + 1) = v13;
    sub_223454278((uint64_t *)&v102 + 1, v12);
    v14 = *(_QWORD *)(a1 + 80);
    if (!*(_BYTE *)(a1 + 88))
      goto LABEL_16;
  }
  if (v14 == 7)
  {
    v15 = *(int **)(a1 + 72);
    v16 = *v15;
    v17 = *(int *)((char *)v15 + 3);
    if (v16 == *(_DWORD *)"version" && v17 == *(_DWORD *)"sion")
    {
      v22 = 7;
      goto LABEL_17;
    }
  }
LABEL_16:
  LOBYTE(v102) = 4;
  *((_QWORD *)&v102 + 1) = BYTE1(v85);
  v19 = (unsigned __int8 *)sub_22453F8B8(a1);
  v20 = *v19;
  *v19 = v102;
  LOBYTE(v102) = v20;
  v21 = *((_QWORD *)v19 + 1);
  *((_QWORD *)v19 + 1) = *((_QWORD *)&v102 + 1);
  *((_QWORD *)&v102 + 1) = v21;
  sub_223454278((uint64_t *)&v102 + 1, v20);
  v22 = *(_QWORD *)(a1 + 80);
  if (!*(_BYTE *)(a1 + 88))
    goto LABEL_22;
LABEL_17:
  if (v22 != 7
    || ((v23 = *(int **)(a1 + 72), v24 = *v23, v25 = *(int *)((char *)v23 + 3), v24 == *(_DWORD *)"version")
      ? (v26 = v25 == *(_DWORD *)"sion")
      : (v26 = 0),
        !v26))
  {
LABEL_22:
    LOBYTE(v102) = 5;
    *((_QWORD *)&v102 + 1) = SDWORD1(v85);
    v27 = (unsigned __int8 *)sub_22453F8B8(a1);
    v28 = *v27;
    *v27 = v102;
    LOBYTE(v102) = v28;
    v29 = *((_QWORD *)v27 + 1);
    *((_QWORD *)v27 + 1) = *((_QWORD *)&v102 + 1);
    *((_QWORD *)&v102 + 1) = v29;
    sub_223454278((uint64_t *)&v102 + 1, v28);
    v30 = *(_QWORD *)(a1 + 80);
    v31 = *((_QWORD *)&v85 + 1);
    if (!*(_BYTE *)(a1 + 88))
      goto LABEL_28;
    goto LABEL_23;
  }
  v30 = 7;
  v31 = *((_QWORD *)&v85 + 1);
LABEL_23:
  if (v30 == 7)
  {
    v32 = *(int **)(a1 + 72);
    v33 = *v32;
    v34 = *(int *)((char *)v32 + 3);
    if (v33 == *(_DWORD *)"version" && v34 == *(_DWORD *)"sion")
    {
      v39 = 7;
      goto LABEL_29;
    }
  }
LABEL_28:
  LOBYTE(v102) = 5;
  *((_QWORD *)&v102 + 1) = v31;
  v36 = (unsigned __int8 *)sub_22453F8B8(a1);
  v37 = *v36;
  *v36 = v102;
  LOBYTE(v102) = v37;
  v38 = *((_QWORD *)v36 + 1);
  *((_QWORD *)v36 + 1) = *((_QWORD *)&v102 + 1);
  *((_QWORD *)&v102 + 1) = v38;
  sub_223454278((uint64_t *)&v102 + 1, v37);
  v39 = *(_QWORD *)(a1 + 80);
  if (!*(_BYTE *)(a1 + 88))
  {
LABEL_34:
    LOBYTE(v102) = 5;
    *((_QWORD *)&v102 + 1) = v86;
    v44 = (unsigned __int8 *)sub_22453F8B8(a1);
    v45 = *v44;
    *v44 = v102;
    LOBYTE(v102) = v45;
    v46 = *((_QWORD *)v44 + 1);
    *((_QWORD *)v44 + 1) = *((_QWORD *)&v102 + 1);
    *((_QWORD *)&v102 + 1) = v46;
    sub_223454278((uint64_t *)&v102 + 1, v45);
    goto LABEL_35;
  }
LABEL_29:
  if (v39 != 7)
    goto LABEL_34;
  v40 = *(int **)(a1 + 72);
  v41 = *v40;
  v42 = *(int *)((char *)v40 + 3);
  if (v41 != *(_DWORD *)"version" || v42 != *(_DWORD *)"sion")
    goto LABEL_34;
LABEL_35:
  if (a3 >= 2)
  {
    sub_22453FAE0(a1);
    *(_QWORD *)&v102 = "version";
    *((_QWORD *)&v102 + 1) = 7;
    LODWORD(v103) = 2;
    if (**(unsigned __int8 **)(a1 + 40) <= 1u)
    {
      v47 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 72) = "version";
      *(_QWORD *)(a1 + 80) = 7;
      if (!v47)
        *(_BYTE *)(a1 + 88) = 1;
    }
    sub_224540500(a1, &v103);
    v48 = v103;
    sub_22453FAE0(a1);
    v49 = (char *)v87;
    v50 = v88;
    if (v87 != v88)
    {
      do
      {
        *(_QWORD *)&v102 = 16;
        *((_QWORD *)&v102 + 1) = v49;
        sub_22453FC5C(a1, (size_t *)&v102);
        v49 += 16;
      }
      while (v49 != v50);
    }
    v51 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(v51 - 8);
    *(_QWORD *)(a1 + 56) = v51 - 8;
    if (*(_BYTE *)(a1 + 88))
      *(_BYTE *)(a1 + 88) = 0;
    sub_22453FAE0(a1);
    v52 = (__int128 *)v89;
    v53 = v90;
    if (v89 != v90)
    {
      do
      {
        v54 = *v52;
        v55 = v52[1];
        v56 = v52[3];
        v104 = v52[2];
        v105 = v56;
        v102 = v54;
        v103 = v55;
        v106 = 16;
        v107 = &v102;
        sub_224541808(a1, &v106);
        v52 += 4;
      }
      while (v52 != v53);
    }
    v57 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(v57 - 8);
    *(_QWORD *)(a1 + 56) = v57 - 8;
    if (*(_BYTE *)(a1 + 88))
      *(_BYTE *)(a1 + 88) = 0;
    sub_22453FAE0(a1);
    v58 = (char *)v91;
    v59 = v92;
    if (v91 != v92)
    {
      do
      {
        *(_QWORD *)&v102 = 16;
        *((_QWORD *)&v102 + 1) = v58;
        sub_22453FC5C(a1, (size_t *)&v102);
        v58 += 16;
      }
      while (v58 != v59);
    }
    v60 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(v60 - 8);
    *(_QWORD *)(a1 + 56) = v60 - 8;
    if (*(_BYTE *)(a1 + 88))
      *(_BYTE *)(a1 + 88) = 0;
    sub_22453FAE0(a1);
    v61 = (char *)v93;
    v62 = v94;
    if (v93 != v94)
    {
      do
      {
        *(_QWORD *)&v102 = 16;
        *((_QWORD *)&v102 + 1) = v61;
        sub_22453FC5C(a1, (size_t *)&v102);
        v61 += 16;
      }
      while (v61 != v62);
    }
    v63 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(v63 - 8);
    *(_QWORD *)(a1 + 56) = v63 - 8;
    if (*(_BYTE *)(a1 + 88))
      *(_BYTE *)(a1 + 88) = 0;
    if (v48 >= 2)
    {
      sub_22453FAE0(a1);
      v64 = (char *)v95;
      v65 = v96;
      if (v95 != v96)
      {
        do
        {
          *(_QWORD *)&v102 = 16;
          *((_QWORD *)&v102 + 1) = v64;
          sub_22453FC5C(a1, (size_t *)&v102);
          v64 += 16;
        }
        while (v64 != v65);
      }
      v66 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(v66 - 8);
      *(_QWORD *)(a1 + 56) = v66 - 8;
      if (*(_BYTE *)(a1 + 88))
        *(_BYTE *)(a1 + 88) = 0;
      sub_22453FAE0(a1);
      v67 = (__int128 *)v97;
      v68 = v98;
      if (v97 != v98)
      {
        do
        {
          v69 = *v67;
          v70 = v67[1];
          v71 = v67[3];
          v104 = v67[2];
          v105 = v71;
          v102 = v69;
          v103 = v70;
          v106 = 16;
          v107 = &v102;
          sub_224541808(a1, &v106);
          v67 += 4;
        }
        while (v67 != v68);
      }
      v72 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(v72 - 8);
      *(_QWORD *)(a1 + 56) = v72 - 8;
      if (*(_BYTE *)(a1 + 88))
        *(_BYTE *)(a1 + 88) = 0;
      sub_22453FAE0(a1);
      v73 = (char *)__p;
      v74 = v100;
      if (__p != v100)
      {
        do
        {
          *(_QWORD *)&v102 = 16;
          *((_QWORD *)&v102 + 1) = v73;
          sub_22453FC5C(a1, (size_t *)&v102);
          v73 += 16;
        }
        while (v73 != v74);
      }
      v63 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(v63 - 8);
      *(_QWORD *)(a1 + 56) = v63 - 8;
      if (*(_BYTE *)(a1 + 88))
        *(_BYTE *)(a1 + 88) = 0;
    }
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(v63 - 16);
    *(_QWORD *)(a1 + 56) = v63 - 16;
    if (a3 != 2)
    {
      LOBYTE(v102) = 6;
      *((_QWORD *)&v102 + 1) = v101;
      v75 = (unsigned __int8 *)sub_22453F8B8(a1);
      v76 = *v75;
      *v75 = v102;
      LOBYTE(v102) = v76;
      v77 = *((_QWORD *)v75 + 1);
      *((_QWORD *)v75 + 1) = *((_QWORD *)&v102 + 1);
      *((_QWORD *)&v102 + 1) = v77;
      sub_223454278((uint64_t *)&v102 + 1, v76);
      if (a3 >= 4)
      {
        if (!*(_BYTE *)(a1 + 88)
          || *(_QWORD *)(a1 + 80) != 7
          || ((v78 = *(int **)(a1 + 72), v79 = *v78, v80 = *(int *)((char *)v78 + 3), v79 == *(_DWORD *)"version")
            ? (v81 = v80 == *(_DWORD *)"sion")
            : (v81 = 0),
              !v81))
        {
          LOBYTE(v102) = 4;
          *((_QWORD *)&v102 + 1) = BYTE2(v85);
          v82 = (unsigned __int8 *)sub_22453F8B8(a1);
          v83 = *v82;
          *v82 = v102;
          LOBYTE(v102) = v83;
          v84 = *((_QWORD *)v82 + 1);
          *((_QWORD *)v82 + 1) = *((_QWORD *)&v102 + 1);
          *((_QWORD *)&v102 + 1) = v84;
          sub_223454278((uint64_t *)&v102 + 1, v83);
        }
      }
    }
  }
  if (__p)
  {
    v100 = (char *)__p;
    operator delete(__p);
  }
  if (v97)
  {
    v98 = (__int128 *)v97;
    operator delete(v97);
  }
  if (v95)
  {
    v96 = (char *)v95;
    operator delete(v95);
  }
  if (v93)
  {
    v94 = (char *)v93;
    operator delete(v93);
  }
  if (v91)
  {
    v92 = (char *)v91;
    operator delete(v91);
  }
  if (v89)
  {
    v90 = (__int128 *)v89;
    operator delete(v89);
  }
  if (v87)
  {
    v88 = (char *)v87;
    operator delete(v87);
  }
}

void sub_223B9EF9C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  sub_223454278(v2, *(unsigned __int8 *)(v3 - 160));
  sub_223255CAC(v1);
  _Unwind_Resume(a1);
}

void sub_223B9EFBC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  sub_223454278(v2, *(unsigned __int8 *)(v3 - 160));
  sub_223255CAC(v1);
  _Unwind_Resume(a1);
}

void sub_223B9EFF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223255CAC(v1);
  _Unwind_Resume(a1);
}

void sub_223B9F004(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223255CAC(v1);
  _Unwind_Resume(a1);
}

void sub_223B9F018(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223255CAC(v1);
  _Unwind_Resume(a1);
}

void sub_223B9F02C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223255CAC(v1);
  _Unwind_Resume(a1);
}

void sub_223B9F040(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223255CAC(v1);
  _Unwind_Resume(a1);
}

void sub_223B9F054(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223255CAC(v1);
  _Unwind_Resume(a1);
}

void sub_223B9F068(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223255CAC(v1);
  _Unwind_Resume(a1);
}

void sub_223B9F07C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223255CAC(v1);
  _Unwind_Resume(a1);
}

void sub_223B9F090(uint64_t a1, uint64_t a2, __int128 *a3)
{
  int v5;
  unsigned int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  _OWORD v13[3];
  _OWORD v14[4];
  uint64_t v15;
  __int128 *v16;

  sub_22453FAE0(a2);
  *(_QWORD *)&v12 = "version";
  *((_QWORD *)&v12 + 1) = 7;
  LODWORD(v13[0]) = 2;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v5 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v5)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_224540500(a2, v13);
  v6 = v13[0];
  v7 = a3[5];
  v14[0] = a3[4];
  v14[1] = v7;
  v8 = a3[7];
  v14[2] = a3[6];
  v14[3] = v8;
  v9 = a3[1];
  v12 = *a3;
  v13[0] = v9;
  v10 = a3[3];
  v13[1] = a3[2];
  v13[2] = v10;
  v15 = 16;
  v16 = &v12;
  sub_224541808(a2, &v15);
  if (v6 >= 2)
  {
    v15 = 16;
    v16 = v14;
    sub_224541808(a2, &v15);
  }
  v11 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(a2 + 56) = v11 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_223B9F19C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  _QWORD *v25;
  char *v26;
  unsigned __int8 *v27;
  __int128 v28;
  int *v29;
  int v30;
  int v31;
  BOOL v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  unsigned __int8 *v36;
  int v37;
  uint64_t v38;
  __int128 v39;
  int *v40;
  int v41;
  int v42;
  BOOL v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _BYTE *v53;
  _QWORD *v54;
  char *v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  int v58;
  uint64_t v59;
  int *v60;
  int v61;
  int v62;
  _QWORD *v64;
  unint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  _BYTE *v73;
  _QWORD *v74;
  char *v75;
  unsigned __int8 *v76;
  unsigned __int8 *v77;
  int v78;
  uint64_t v79;
  int *v80;
  int v81;
  int v82;
  unsigned __int8 *v84;
  int v85;
  uint64_t v86;
  int v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  _OWORD *v92;
  char *v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _OWORD *v99;
  char *v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  _OWORD *v108;
  char *v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  char *v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char **v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;

  sub_22453FAE0(a1);
  v4 = *a2;
  v123 = a2[1];
  if (*a2 != v123)
  {
    v126 = (char **)(a1 + 48);
    while (1)
    {
      sub_22453FAE0(a1);
      *(_QWORD *)&v127 = "version";
      *((_QWORD *)&v127 + 1) = 7;
      LODWORD(v128) = 1;
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a1 + 88);
        *(_QWORD *)(a1 + 72) = "version";
        *(_QWORD *)(a1 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a1 + 88) = 1;
      }
      sub_224540500(a1, &v128);
      v9 = *(const void **)v4;
      v8 = *(_QWORD *)(v4 + 8);
      v124 = v4;
      v10 = v8 - *(_QWORD *)v4;
      if (v8 == *(_QWORD *)v4)
      {
        v125 = 0;
        v11 = 0;
      }
      else
      {
        if (v10 < 0)
          sub_22316E078();
        v11 = (char *)operator new(v8 - (_QWORD)v9);
        v125 = &v11[32 * (v10 >> 5)];
        memcpy(v11, v9, v10 - 4);
      }
      sub_22453FAE0(a1);
      v12 = *(char **)(a1 + 56);
      if (v11 != v125)
        break;
      v116 = *(unsigned __int8 *)(a1 + 88);
      v117 = *((_QWORD *)v12 - 1);
      v115 = v12 - 8;
      *(_QWORD *)(a1 + 40) = v117;
      *(_QWORD *)(a1 + 56) = v115;
      if (v116)
        *(_BYTE *)(a1 + 88) = 0;
LABEL_129:
      if (v11)
      {
        operator delete(v11);
        v118 = *(_QWORD *)(a1 + 56);
        v119 = *(unsigned __int8 *)(a1 + 88);
        v120 = *(_QWORD *)(v118 - 8);
        v5 = (char *)(v118 - 8);
        *(_QWORD *)(a1 + 40) = v120;
        *(_QWORD *)(a1 + 56) = v5;
        if (v119)
          *(_BYTE *)(a1 + 88) = 0;
      }
      else
      {
        v6 = *((_QWORD *)v115 - 1);
        v5 = v115 - 8;
        *(_QWORD *)(a1 + 40) = v6;
        *(_QWORD *)(a1 + 56) = v5;
      }
      v4 += 24;
      if (v4 == v123)
      {
        *(_QWORD *)(a1 + 40) = *((_QWORD *)v5 - 1);
        *(_QWORD *)(a1 + 56) = v5 - 8;
        return;
      }
    }
    v13 = v11;
    while (1)
    {
      v15 = *(_DWORD *)(a1 + 8);
      v16 = *(_QWORD *)(a1 + 64);
      if ((unint64_t)v12 < v16)
      {
        *(_QWORD *)v12 = *(_QWORD *)(a1 + 40);
        v17 = v12 + 8;
        goto LABEL_30;
      }
      v18 = *v126;
      v19 = v12 - *v126;
      v20 = v19 >> 3;
      v21 = (v19 >> 3) + 1;
      if (v21 >> 61)
        goto LABEL_136;
      v22 = v16 - (_QWORD)v18;
      if (v22 >> 2 > v21)
        v21 = v22 >> 2;
      v23 = (unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v21;
      if (v23)
      {
        if (v23 >> 61)
          goto LABEL_137;
        v24 = operator new(8 * v23);
        v25 = &v24[8 * v20];
        *v25 = *(_QWORD *)(a1 + 40);
        v17 = v25 + 1;
        v26 = (char *)(v12 - v18);
        if (v12 == v18)
        {
LABEL_28:
          *(_QWORD *)(a1 + 48) = v25;
          *(_QWORD *)(a1 + 56) = v17;
          *(_QWORD *)(a1 + 64) = &v24[8 * v23];
          if (!v12)
            goto LABEL_30;
LABEL_29:
          operator delete(v12);
          goto LABEL_30;
        }
      }
      else
      {
        v24 = 0;
        v25 = (_QWORD *)(8 * v20);
        v64 = (_QWORD *)(8 * v20);
        *v64 = *(_QWORD *)(a1 + 40);
        v17 = v64 + 1;
        v26 = (char *)(v12 - v18);
        if (v12 == v18)
          goto LABEL_28;
      }
      v65 = (unint64_t)(v26 - 8);
      if (v65 < 0x58)
        break;
      if ((unint64_t)(v12 - v24 - v19) < 0x20)
      {
        v66 = v12;
        do
        {
LABEL_114:
          v103 = *((_QWORD *)v66 - 1);
          v66 -= 8;
          *--v25 = v103;
        }
        while (v66 != v18);
        goto LABEL_115;
      }
      v97 = (v65 >> 3) + 1;
      v98 = 8 * (v97 & 0x3FFFFFFFFFFFFFFCLL);
      v66 = &v12[-v98];
      v25 = (_QWORD *)((char *)v25 - v98);
      v99 = &v24[v19 - 16];
      v100 = v12 - 16;
      v101 = v97 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v102 = *(_OWORD *)v100;
        *(v99 - 1) = *((_OWORD *)v100 - 1);
        *v99 = v102;
        v99 -= 2;
        v100 -= 32;
        v101 -= 4;
      }
      while (v101);
      if (v97 != (v97 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_114;
LABEL_115:
      v12 = *v126;
      *(_QWORD *)(a1 + 48) = v25;
      *(_QWORD *)(a1 + 56) = v17;
      *(_QWORD *)(a1 + 64) = &v24[8 * v23];
      if (v12)
        goto LABEL_29;
LABEL_30:
      *(_QWORD *)(a1 + 56) = v17;
      v27 = (unsigned __int8 *)sub_22453F8B8(a1);
      *(_QWORD *)(a1 + 40) = v27;
      if (*(_BYTE *)(a1 + 88))
        *(_BYTE *)(a1 + 88) = 0;
      if (*v27 >= 2u)
      {
        LOBYTE(v127) = 6;
        *((_QWORD *)&v127 + 1) = 1;
        v36 = (unsigned __int8 *)sub_22453F8B8(a1);
        v37 = *v36;
        *v36 = v127;
        LOBYTE(v127) = v37;
        v38 = *((_QWORD *)v36 + 1);
        *((_QWORD *)v36 + 1) = *((_QWORD *)&v127 + 1);
        *((_QWORD *)&v127 + 1) = v38;
        sub_223454278((uint64_t *)&v127 + 1, v37);
        if (v15 >= 1)
        {
LABEL_34:
          v28 = *((_OWORD *)v13 + 1);
          v127 = *(_OWORD *)v13;
          v128 = v28;
          v129 = 3;
          v130 = (uint64_t)&v127;
          sub_224541808(a1, &v129);
          if (!*(_BYTE *)(a1 + 88)
            || *(_QWORD *)(a1 + 80) != 7
            || ((v29 = *(int **)(a1 + 72), v30 = *v29, v31 = *(int *)((char *)v29 + 3), v30 == *(_DWORD *)"version")
              ? (v32 = v31 == *(_DWORD *)"sion")
              : (v32 = 0),
                !v32))
          {
            sub_2245407D4(a1, (double *)&v128);
          }
          v34 = *(char **)(a1 + 56);
          v33 = *(_QWORD *)(a1 + 64);
          if ((unint64_t)v34 < v33)
          {
            *(_QWORD *)v34 = *(_QWORD *)(a1 + 40);
            v35 = (uint64_t)(v34 + 8);
LABEL_64:
            *(_QWORD *)(a1 + 56) = v35;
            v56 = (unsigned __int8 *)sub_22453F8B8(a1);
            *(_QWORD *)(a1 + 40) = v56;
            if (*(_BYTE *)(a1 + 88))
              *(_BYTE *)(a1 + 88) = 0;
            if (*v56 < 2u)
              goto LABEL_91;
            LOBYTE(v129) = 6;
            v130 = 1;
            v57 = (unsigned __int8 *)sub_22453F8B8(a1);
            v58 = *v57;
            *v57 = v129;
            LOBYTE(v129) = v58;
            v59 = *((_QWORD *)v57 + 1);
            *((_QWORD *)v57 + 1) = v130;
            v130 = v59;
            sub_223454278(&v130, v58);
            if (!*(_BYTE *)(a1 + 88) || *(_QWORD *)(a1 + 80) != 7)
              goto LABEL_98;
            v60 = *(int **)(a1 + 72);
            v61 = *v60;
            v62 = *(int *)((char *)v60 + 3);
            if (v61 != *(_DWORD *)"version" || v62 != *(_DWORD *)"sion")
              goto LABEL_98;
            goto LABEL_14;
          }
          v47 = *v126;
          v48 = v34 - *v126;
          v49 = v48 >> 3;
          v50 = (v48 >> 3) + 1;
          if (v50 >> 61)
            goto LABEL_136;
          v51 = v33 - (_QWORD)v47;
          if (v51 >> 2 > v50)
            v50 = v51 >> 2;
          if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
            v52 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v52 = v50;
          if (v52)
          {
            if (v52 >> 61)
              goto LABEL_137;
            v53 = operator new(8 * v52);
            v54 = &v53[8 * v49];
            *v54 = *(_QWORD *)(a1 + 40);
            v35 = (uint64_t)(v54 + 1);
            v55 = (char *)(v34 - v47);
            if (v34 == v47)
              goto LABEL_62;
LABEL_103:
            v88 = (unint64_t)(v55 - 8);
            if (v88 < 0x58)
              goto LABEL_141;
            if ((unint64_t)(v34 - v53 - v48) < 0x20)
              goto LABEL_141;
            v89 = (v88 >> 3) + 1;
            v90 = 8 * (v89 & 0x3FFFFFFFFFFFFFFCLL);
            v91 = &v34[-v90];
            v54 = (_QWORD *)((char *)v54 - v90);
            v92 = &v53[v48 - 16];
            v93 = v34 - 16;
            v94 = v89 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v95 = *(_OWORD *)v93;
              *(v92 - 1) = *((_OWORD *)v93 - 1);
              *v92 = v95;
              v92 -= 2;
              v93 -= 32;
              v94 -= 4;
            }
            while (v94);
            v34 = v91;
            if (v89 != (v89 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_141:
              do
              {
                v96 = *((_QWORD *)v34 - 1);
                v34 -= 8;
                *--v54 = v96;
              }
              while (v34 != v47);
            }
            v34 = *v126;
            *(_QWORD *)(a1 + 48) = v54;
            *(_QWORD *)(a1 + 56) = v35;
            *(_QWORD *)(a1 + 64) = &v53[8 * v52];
            if (!v34)
              goto LABEL_64;
          }
          else
          {
            v53 = 0;
            v54 = (_QWORD *)(8 * v49);
            *(_QWORD *)(8 * v49) = *(_QWORD *)(a1 + 40);
            v35 = 8 * v49 + 8;
            v55 = (char *)(v34 - v47);
            if (v34 != v47)
              goto LABEL_103;
LABEL_62:
            *(_QWORD *)(a1 + 48) = v54;
            *(_QWORD *)(a1 + 56) = v35;
            *(_QWORD *)(a1 + 64) = &v53[8 * v52];
            if (!v34)
              goto LABEL_64;
          }
          operator delete(v34);
          goto LABEL_64;
        }
      }
      else
      {
        *(_QWORD *)(a1 + 72) = "version";
        *(_QWORD *)(a1 + 80) = 7;
        *(_BYTE *)(a1 + 88) = 1;
        *(_DWORD *)(a1 + 96) = 1;
        *(_BYTE *)(a1 + 100) = 1;
        *(_BYTE *)(a1 + 88) = 0;
        if (v15 >= 1)
          goto LABEL_34;
      }
      v39 = *((_OWORD *)v13 + 1);
      v127 = *(_OWORD *)v13;
      v128 = v39;
      v129 = 3;
      v130 = (uint64_t)&v127;
      sub_224541808(a1, &v129);
      if (!*(_BYTE *)(a1 + 88)
        || *(_QWORD *)(a1 + 80) != 7
        || ((v40 = *(int **)(a1 + 72), v41 = *v40, v42 = *(int *)((char *)v40 + 3), v41 == *(_DWORD *)"version")
          ? (v43 = v42 == *(_DWORD *)"sion")
          : (v43 = 0),
            !v43))
      {
        sub_2245407D4(a1, (double *)&v128);
      }
      v45 = *(char **)(a1 + 56);
      v44 = *(_QWORD *)(a1 + 64);
      if ((unint64_t)v45 >= v44)
      {
        v67 = *v126;
        v68 = v45 - *v126;
        v69 = v68 >> 3;
        v70 = (v68 >> 3) + 1;
        if (v70 >> 61)
LABEL_136:
          sub_224519D3C();
        v71 = v44 - (_QWORD)v67;
        if (v71 >> 2 > v70)
          v70 = v71 >> 2;
        if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8)
          v72 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v72 = v70;
        if (v72)
        {
          if (v72 >> 61)
LABEL_137:
            sub_223174E94();
          v73 = operator new(8 * v72);
          v74 = &v73[8 * v69];
          *v74 = *(_QWORD *)(a1 + 40);
          v46 = (uint64_t)(v74 + 1);
          v75 = (char *)(v45 - v67);
          if (v45 != v67)
          {
LABEL_118:
            v104 = (unint64_t)(v75 - 8);
            if (v104 < 0x58)
              goto LABEL_142;
            if ((unint64_t)(v45 - v73 - v68) < 0x20)
              goto LABEL_142;
            v105 = (v104 >> 3) + 1;
            v106 = 8 * (v105 & 0x3FFFFFFFFFFFFFFCLL);
            v107 = &v45[-v106];
            v74 = (_QWORD *)((char *)v74 - v106);
            v108 = &v73[v68 - 16];
            v109 = v45 - 16;
            v110 = v105 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v111 = *(_OWORD *)v109;
              *(v108 - 1) = *((_OWORD *)v109 - 1);
              *v108 = v111;
              v108 -= 2;
              v109 -= 32;
              v110 -= 4;
            }
            while (v110);
            v45 = v107;
            if (v105 != (v105 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_142:
              do
              {
                v112 = *((_QWORD *)v45 - 1);
                v45 -= 8;
                *--v74 = v112;
              }
              while (v45 != v67);
            }
            v45 = *v126;
            *(_QWORD *)(a1 + 48) = v74;
            *(_QWORD *)(a1 + 56) = v46;
            *(_QWORD *)(a1 + 64) = &v73[8 * v72];
            if (!v45)
              goto LABEL_88;
LABEL_87:
            operator delete(v45);
            goto LABEL_88;
          }
        }
        else
        {
          v73 = 0;
          v74 = (_QWORD *)(8 * v69);
          *(_QWORD *)(8 * v69) = *(_QWORD *)(a1 + 40);
          v46 = 8 * v69 + 8;
          v75 = (char *)(v45 - v67);
          if (v45 != v67)
            goto LABEL_118;
        }
        *(_QWORD *)(a1 + 48) = v74;
        *(_QWORD *)(a1 + 56) = v46;
        *(_QWORD *)(a1 + 64) = &v73[8 * v72];
        if (v45)
          goto LABEL_87;
      }
      else
      {
        *(_QWORD *)v45 = *(_QWORD *)(a1 + 40);
        v46 = (uint64_t)(v45 + 8);
      }
LABEL_88:
      *(_QWORD *)(a1 + 56) = v46;
      v76 = (unsigned __int8 *)sub_22453F8B8(a1);
      *(_QWORD *)(a1 + 40) = v76;
      if (*(_BYTE *)(a1 + 88))
        *(_BYTE *)(a1 + 88) = 0;
      if (*v76 < 2u)
      {
LABEL_91:
        *(_QWORD *)(a1 + 72) = "version";
        *(_QWORD *)(a1 + 80) = 7;
        *(_BYTE *)(a1 + 88) = 1;
        *(_DWORD *)(a1 + 96) = 1;
        *(_BYTE *)(a1 + 100) = 1;
        *(_BYTE *)(a1 + 88) = 0;
LABEL_98:
        LOBYTE(v129) = 5;
        v130 = SDWORD2(v128);
        v84 = (unsigned __int8 *)sub_22453F8B8(a1);
        v85 = *v84;
        *v84 = v129;
        LOBYTE(v129) = v85;
        v86 = *((_QWORD *)v84 + 1);
        *((_QWORD *)v84 + 1) = v130;
        v130 = v86;
        sub_223454278(&v130, v85);
        v87 = *(unsigned __int8 *)(a1 + 88);
        v14 = *(_QWORD *)(a1 + 56);
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(v14 - 8);
        *(_QWORD *)(a1 + 56) = v14 - 8;
        if (!v87)
          goto LABEL_16;
        goto LABEL_15;
      }
      LOBYTE(v129) = 6;
      v130 = 1;
      v77 = (unsigned __int8 *)sub_22453F8B8(a1);
      v78 = *v77;
      *v77 = v129;
      LOBYTE(v129) = v78;
      v79 = *((_QWORD *)v77 + 1);
      *((_QWORD *)v77 + 1) = v130;
      v130 = v79;
      sub_223454278(&v130, v78);
      if (!*(_BYTE *)(a1 + 88) || *(_QWORD *)(a1 + 80) != 7)
        goto LABEL_98;
      v80 = *(int **)(a1 + 72);
      v81 = *v80;
      v82 = *(int *)((char *)v80 + 3);
      if (v81 != *(_DWORD *)"version" || v82 != *(_DWORD *)"sion")
        goto LABEL_98;
LABEL_14:
      v14 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(v14 - 8);
      *(_QWORD *)(a1 + 56) = v14 - 8;
LABEL_15:
      *(_BYTE *)(a1 + 88) = 0;
LABEL_16:
      v12 = (char *)(v14 - 16);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(v14 - 16);
      *(_QWORD *)(a1 + 56) = v14 - 16;
      v13 += 32;
      if (v13 == v125)
      {
        v114 = *(_QWORD *)(v14 - 24);
        v113 = (char *)(v14 - 24);
        *(_QWORD *)(a1 + 40) = v114;
        *(_QWORD *)(a1 + 56) = v113;
        v115 = v113;
        v4 = v124;
        goto LABEL_129;
      }
    }
    v66 = v12;
    goto LABEL_114;
  }
  v121 = *(_QWORD *)(a1 + 56);
  v122 = *(unsigned __int8 *)(a1 + 88);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v121 - 8);
  *(_QWORD *)(a1 + 56) = v121 - 8;
  if (v122)
    *(_BYTE *)(a1 + 88) = 0;
}

void sub_223B9FB44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223B9FBAC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_223B8DACC((uint64_t)v8, a2);
  sub_223B9FCC8(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_223B9FCB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223B8842C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223B9FCC8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  std::string::value_type v9;
  _QWORD *v10;
  _QWORD *v11;
  int64x2_t v12;
  int8x16_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  std::string v25;
  std::string __p;
  char v27;

  if (*(_QWORD *)(a1 + 40))
  {
    v6 = *(_QWORD **)(a1 + 24);
    __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v6, (uint64_t)&__p, 1);
  }
  std::ostream::operator<<();
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v7 + 1;
  if (v7 != -1)
  {
    v8 = *(_QWORD **)(a1 + 24);
    __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v8, (uint64_t)&__p, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a2 + 16);
  sub_22454F564(a1, (unsigned __int8 *)&__p);
  v9 = *(_BYTE *)(a1 + 34);
  if (*(_QWORD *)(a1 + 40))
  {
    v10 = *(_QWORD **)(a1 + 24);
    __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v10, (uint64_t)&__p, 1);
  }
  v11 = *(_QWORD **)(a1 + 24);
  __p.__r_.__value_.__s.__data_[0] = v9;
  sub_2231813E8(v11, (uint64_t)&__p, 1);
  ++*(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a2 + 48))
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    sub_22454F564(a1, (unsigned __int8 *)&__p);
    sub_22454F620(a1, a2 + 24);
    if (a3 < 4)
      return;
  }
  else
  {
    __p.__r_.__value_.__s.__data_[0] = 0;
    sub_22454F564(a1, (unsigned __int8 *)&__p);
    if (a3 < 4)
      return;
  }
  sub_223BA0150(a1, a2 + 56);
  if (a3 == 5)
  {
    if (*(_BYTE *)(a2 + 104))
    {
      __p.__r_.__value_.__s.__data_[0] = 1;
      sub_22454F564(a1, (unsigned __int8 *)&__p);
      sub_22454F620(a1, a2 + 80);
    }
    else
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      sub_22454F564(a1, (unsigned __int8 *)&__p);
    }
    return;
  }
  if (a3 < 6)
    return;
  if (*(_BYTE *)(a2 + 104))
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    sub_22454F564(a1, (unsigned __int8 *)&__p);
    sub_22454F620(a1, a2 + 80);
    if (*(_BYTE *)(a2 + 136))
      goto LABEL_17;
LABEL_43:
    __p.__r_.__value_.__s.__data_[0] = 0;
    sub_22454F564(a1, (unsigned __int8 *)&__p);
    if (*(_QWORD *)(a1 + 40))
    {
      v22 = *(_QWORD **)(a1 + 24);
      __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
      sub_2231813E8(v22, (uint64_t)&__p, 1);
      ++*(_QWORD *)(a1 + 40);
      __p.__r_.__value_.__s.__data_[0] = 0;
      v27 = 0;
      if (*(_BYTE *)(a2 + 168))
        goto LABEL_18;
    }
    else
    {
      *(_QWORD *)(a1 + 40) = 1;
      __p.__r_.__value_.__s.__data_[0] = 0;
      v27 = 0;
      if (*(_BYTE *)(a2 + 168))
        goto LABEL_18;
    }
LABEL_45:
    v25.__r_.__value_.__s.__data_[0] = 0;
    sub_22454F564(a1, (unsigned __int8 *)&v25);
    if (*(_QWORD *)(a1 + 40))
    {
      v23 = *(_QWORD **)(a1 + 24);
      v25.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
      sub_2231813E8(v23, (uint64_t)&v25, 1);
      v24 = *(_QWORD *)(a1 + 40) + 1;
    }
    else
    {
      v24 = 1;
    }
    *(_QWORD *)(a1 + 40) = v24;
    return;
  }
  __p.__r_.__value_.__s.__data_[0] = 0;
  sub_22454F564(a1, (unsigned __int8 *)&__p);
  if (*(_QWORD *)(a1 + 40))
  {
    v21 = *(_QWORD **)(a1 + 24);
    __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v21, (uint64_t)&__p, 1);
    ++*(_QWORD *)(a1 + 40);
    if (!*(_BYTE *)(a2 + 136))
      goto LABEL_43;
  }
  else
  {
    *(_QWORD *)(a1 + 40) = 1;
    if (!*(_BYTE *)(a2 + 136))
      goto LABEL_43;
  }
LABEL_17:
  __p.__r_.__value_.__s.__data_[0] = 1;
  sub_22454F564(a1, (unsigned __int8 *)&__p);
  sub_22454F620(a1, a2 + 112);
  __p.__r_.__value_.__s.__data_[0] = 0;
  v27 = 0;
  if (!*(_BYTE *)(a2 + 168))
    goto LABEL_45;
LABEL_18:
  v14 = *(_QWORD *)(a2 + 144);
  v15 = *(_QWORD *)(a2 + 152);
  if (v14 == v15)
  {
LABEL_36:
    sub_22319C0DC(v14, v15, ";", 1uLL, &v25, v12, v13);
  }
  else
  {
    v16 = *(uint64_t **)(a2 + 144);
    while (1)
    {
      v17 = *((unsigned __int8 *)v16 + 23);
      if ((v17 & 0x80u) == 0)
        v18 = v16;
      else
        v18 = (uint64_t *)*v16;
      if ((v17 & 0x80u) != 0)
        v17 = v16[1];
      if (v17)
      {
        v19 = 0;
        while (1)
        {
          v20 = *((unsigned __int8 *)v18 + v19);
          if (v20 == 59 || v20 == 92)
            break;
          if (v17 == ++v19)
            goto LABEL_20;
        }
        if (v17 != v19 && v19 != -1)
          break;
      }
LABEL_20:
      v16 += 3;
      if (v16 == (uint64_t *)v15)
        goto LABEL_36;
    }
    sub_223B8E59C(v14, v15, *(_QWORD *)(a2 + 152), ";", 1uLL, &v25);
  }
  __p = v25;
  v27 = 1;
  v25.__r_.__value_.__s.__data_[0] = 1;
  sub_22454F564(a1, (unsigned __int8 *)&v25);
  sub_22454F620(a1, (uint64_t)&__p);
  if (v27 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_223BA012C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a19)
  {
    if (a18 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_223BA0150(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  char v13;
  char v14;
  char v15;
  char v16;

  if (*(_BYTE *)(a2 + 16))
  {
    v11 = 1;
    sub_22454F564(a1, &v11);
    if (*(_QWORD *)(a1 + 40))
    {
      v4 = *(_QWORD **)(a1 + 24);
      v13 = *(_BYTE *)(a1 + 32);
      sub_2231813E8(v4, (uint64_t)&v13, 1);
    }
    std::ostream::operator<<();
    v5 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v5 + 1;
    if (v5 != -1)
    {
      v6 = *(_QWORD **)(a1 + 24);
      v14 = *(_BYTE *)(a1 + 32);
      sub_2231813E8(v6, (uint64_t)&v14, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a1 + 40);
    v12 = *(_BYTE *)(a2 + 8);
    sub_22454F564(a1, &v12);
    v7 = *(_BYTE *)(a1 + 34);
    if (*(_QWORD *)(a1 + 40))
    {
      v8 = *(_QWORD **)(a1 + 24);
      v15 = *(_BYTE *)(a1 + 32);
      sub_2231813E8(v8, (uint64_t)&v15, 1);
    }
    v9 = *(_QWORD **)(a1 + 24);
    v16 = v7;
    sub_2231813E8(v9, (uint64_t)&v16, 1);
    ++*(_QWORD *)(a1 + 40);
  }
  else
  {
    v10 = 0;
    sub_22454F564(a1, &v10);
  }
}

void sub_223BA0278(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_223B8EFDC((uint64_t)v8, a2);
  sub_223BA0394(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_223BA037C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223B8842C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BA0394(uint64_t a1, uint64_t a2, unsigned int a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  std::string::value_type v9;
  _QWORD *v10;
  _QWORD *v11;
  int64x2_t v12;
  int8x16_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  std::string v25;
  std::string __p;
  char v27;

  if (*(_QWORD *)(a1 + 40))
  {
    v6 = *(_QWORD **)(a1 + 24);
    __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v6, (uint64_t)&__p, 1);
  }
  std::ostream::operator<<();
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v7 + 1;
  if (v7 != -1)
  {
    v8 = *(_QWORD **)(a1 + 24);
    __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v8, (uint64_t)&__p, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a2 + 16);
  sub_22454F564(a1, (unsigned __int8 *)&__p);
  v9 = *(_BYTE *)(a1 + 34);
  if (*(_QWORD *)(a1 + 40))
  {
    v10 = *(_QWORD **)(a1 + 24);
    __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v10, (uint64_t)&__p, 1);
  }
  v11 = *(_QWORD **)(a1 + 24);
  __p.__r_.__value_.__s.__data_[0] = v9;
  sub_2231813E8(v11, (uint64_t)&__p, 1);
  ++*(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a2 + 48))
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    sub_22454F564(a1, (unsigned __int8 *)&__p);
    sub_22454F620(a1, a2 + 24);
    if (a3 < 4)
      return;
  }
  else
  {
    __p.__r_.__value_.__s.__data_[0] = 0;
    sub_22454F564(a1, (unsigned __int8 *)&__p);
    if (a3 < 4)
      return;
  }
  sub_223BA0150(a1, a2 + 56);
  if (a3 == 5)
  {
    if (*(_BYTE *)(a2 + 104))
    {
      __p.__r_.__value_.__s.__data_[0] = 1;
      sub_22454F564(a1, (unsigned __int8 *)&__p);
      sub_22454F620(a1, a2 + 80);
    }
    else
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      sub_22454F564(a1, (unsigned __int8 *)&__p);
    }
    return;
  }
  if (a3 < 6)
    return;
  if (*(_BYTE *)(a2 + 104))
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    sub_22454F564(a1, (unsigned __int8 *)&__p);
    sub_22454F620(a1, a2 + 80);
    if (*(_BYTE *)(a2 + 136))
      goto LABEL_17;
LABEL_43:
    __p.__r_.__value_.__s.__data_[0] = 0;
    sub_22454F564(a1, (unsigned __int8 *)&__p);
    if (*(_QWORD *)(a1 + 40))
    {
      v22 = *(_QWORD **)(a1 + 24);
      __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
      sub_2231813E8(v22, (uint64_t)&__p, 1);
      ++*(_QWORD *)(a1 + 40);
      __p.__r_.__value_.__s.__data_[0] = 0;
      v27 = 0;
      if (*(_BYTE *)(a2 + 168))
        goto LABEL_18;
    }
    else
    {
      *(_QWORD *)(a1 + 40) = 1;
      __p.__r_.__value_.__s.__data_[0] = 0;
      v27 = 0;
      if (*(_BYTE *)(a2 + 168))
        goto LABEL_18;
    }
LABEL_45:
    v25.__r_.__value_.__s.__data_[0] = 0;
    sub_22454F564(a1, (unsigned __int8 *)&v25);
    if (*(_QWORD *)(a1 + 40))
    {
      v23 = *(_QWORD **)(a1 + 24);
      v25.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
      sub_2231813E8(v23, (uint64_t)&v25, 1);
      v24 = *(_QWORD *)(a1 + 40) + 1;
    }
    else
    {
      v24 = 1;
    }
    *(_QWORD *)(a1 + 40) = v24;
    return;
  }
  __p.__r_.__value_.__s.__data_[0] = 0;
  sub_22454F564(a1, (unsigned __int8 *)&__p);
  if (*(_QWORD *)(a1 + 40))
  {
    v21 = *(_QWORD **)(a1 + 24);
    __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v21, (uint64_t)&__p, 1);
    ++*(_QWORD *)(a1 + 40);
    if (!*(_BYTE *)(a2 + 136))
      goto LABEL_43;
  }
  else
  {
    *(_QWORD *)(a1 + 40) = 1;
    if (!*(_BYTE *)(a2 + 136))
      goto LABEL_43;
  }
LABEL_17:
  __p.__r_.__value_.__s.__data_[0] = 1;
  sub_22454F564(a1, (unsigned __int8 *)&__p);
  sub_22454F620(a1, a2 + 112);
  __p.__r_.__value_.__s.__data_[0] = 0;
  v27 = 0;
  if (!*(_BYTE *)(a2 + 168))
    goto LABEL_45;
LABEL_18:
  v14 = *(_QWORD *)(a2 + 144);
  v15 = *(_QWORD *)(a2 + 152);
  if (v14 == v15)
  {
LABEL_36:
    sub_22319C0DC(v14, v15, ";", 1uLL, &v25, v12, v13);
  }
  else
  {
    v16 = *(uint64_t **)(a2 + 144);
    while (1)
    {
      v17 = *((unsigned __int8 *)v16 + 23);
      if ((v17 & 0x80u) == 0)
        v18 = v16;
      else
        v18 = (uint64_t *)*v16;
      if ((v17 & 0x80u) != 0)
        v17 = v16[1];
      if (v17)
      {
        v19 = 0;
        while (1)
        {
          v20 = *((unsigned __int8 *)v18 + v19);
          if (v20 == 59 || v20 == 92)
            break;
          if (v17 == ++v19)
            goto LABEL_20;
        }
        if (v17 != v19 && v19 != -1)
          break;
      }
LABEL_20:
      v16 += 3;
      if (v16 == (uint64_t *)v15)
        goto LABEL_36;
    }
    sub_223B8E59C(v14, v15, *(_QWORD *)(a2 + 152), ";", 1uLL, &v25);
  }
  __p = v25;
  v27 = 1;
  v25.__r_.__value_.__s.__data_[0] = 1;
  sub_22454F564(a1, (unsigned __int8 *)&v25);
  sub_22454F620(a1, (uint64_t)&__p);
  if (v27 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_223BA07F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a19)
  {
    if (a18 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_223BA081C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_223B8F6B8((uint64_t)v8, a2);
  sub_223BA0938(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_223BA0920(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223B8842C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BA0938(uint64_t a1, uint64_t a2, unsigned int a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  char v9;
  _QWORD *v10;
  _QWORD *v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  char v15;
  char v16;
  char v17;
  char v18;

  if (*(_QWORD *)(a1 + 40))
  {
    v6 = *(_QWORD **)(a1 + 24);
    v15 = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v6, (uint64_t)&v15, 1);
  }
  std::ostream::operator<<();
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v7 + 1;
  if (v7 != -1)
  {
    v8 = *(_QWORD **)(a1 + 24);
    v16 = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v8, (uint64_t)&v16, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  v12 = *(_BYTE *)(a2 + 16);
  sub_22454F564(a1, &v12);
  v9 = *(_BYTE *)(a1 + 34);
  if (*(_QWORD *)(a1 + 40))
  {
    v10 = *(_QWORD **)(a1 + 24);
    v17 = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v10, (uint64_t)&v17, 1);
  }
  v11 = *(_QWORD **)(a1 + 24);
  v18 = v9;
  sub_2231813E8(v11, (uint64_t)&v18, 1);
  ++*(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a2 + 48))
  {
    v14 = 1;
    sub_22454F564(a1, &v14);
    sub_22454F620(a1, a2 + 24);
    if (a3 < 4)
      return;
  }
  else
  {
    v13 = 0;
    sub_22454F564(a1, &v13);
    if (a3 < 4)
      return;
  }
  sub_223BA0150(a1, a2 + 56);
}

void sub_223BA0A94(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  __int16 v30;
  unint64_t v31;
  __int128 v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  __int16 v43;
  unint64_t v44;
  unint64_t v45;
  __int16 v46;
  __int128 v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  int v51;
  _QWORD *v52;
  char v53;
  _QWORD *v54;
  _QWORD *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  int v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  __int16 v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  __int16 v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  int v92;
  __int16 v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  char v98;
  _QWORD *v99;
  _QWORD *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  char v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  _QWORD *v113;
  char v114;
  _QWORD *v115;
  _QWORD *v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  __int16 v154;
  unint64_t v155;
  __int128 v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  __int16 v166;
  unint64_t v167;
  unint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  _QWORD *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  __int16 v189;
  __int128 v190;
  unint64_t *v191;
  unint64_t v192;
  unint64_t v193;
  int v194;
  _QWORD *v195;
  unsigned __int8 v196;
  _QWORD *v197;
  _QWORD *v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  _QWORD *v205;
  uint64_t v206;
  _QWORD *v207;
  uint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  _QWORD *v211;
  uint64_t v212;
  _QWORD *v213;
  uint64_t v214;
  _QWORD *v215;
  uint64_t v216;
  _QWORD *v217;
  uint64_t v218;
  _QWORD *v219;
  uint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  _QWORD *v223;
  uint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  char v227;
  _QWORD *v228;
  _QWORD *v229;
  uint64_t v230;
  uint64_t v231;
  _QWORD *v232;
  int v233;
  char **v234;
  _QWORD *v235;
  uint64_t v236;
  _QWORD *v237;
  _QWORD *v238;
  uint64_t v239;
  _QWORD *v240;
  uint64_t v241;
  _QWORD *v242;
  uint64_t v243;
  _QWORD *v244;
  uint64_t v245;
  _QWORD *v246;
  uint64_t v247;
  _QWORD *v248;
  uint64_t v249;
  _QWORD *v250;
  uint64_t v251;
  _QWORD *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t i;
  uint64_t j;
  _QWORD *v257;
  _QWORD *v258;
  _BYTE *v259;
  uint64_t v260;
  _QWORD *v261;
  _QWORD *v262;
  _QWORD *v263;
  uint64_t v264;
  uint64_t v265;
  _QWORD *v266;
  char v267;
  _QWORD *v268;
  _QWORD *v269;
  _QWORD *v270;
  uint64_t v271;
  _QWORD *v272;
  uint64_t v273;
  _QWORD *v274;
  uint64_t v275;
  _QWORD *v276;
  uint64_t v277;
  _QWORD *v278;
  uint64_t v279;
  _QWORD *v280;
  uint64_t v281;
  _QWORD *v282;
  uint64_t v283;
  _QWORD *v284;
  uint64_t v285;
  _QWORD *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  _QWORD *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t k;
  uint64_t m;
  _QWORD *v304;
  _QWORD *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t n;
  uint64_t ii;
  _QWORD *v310;
  _QWORD *v311;
  _BYTE *v312;
  uint64_t v313;
  _QWORD *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t jj;
  uint64_t kk;
  _QWORD *v319;
  _QWORD *v320;
  _BYTE *v321;
  uint64_t v322;
  _QWORD *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t mm;
  uint64_t nn;
  _QWORD *v328;
  _QWORD *v329;
  _BYTE *v330;
  uint64_t v331;
  _QWORD *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t i1;
  uint64_t i2;
  _QWORD *v337;
  _QWORD *v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t i3;
  uint64_t i4;
  _QWORD *v343;
  _QWORD *v344;
  _BYTE *v345;
  uint64_t v346;
  _QWORD *v347;
  char v348;
  _QWORD *v349;
  uint64_t v350;
  uint64_t i5;
  _QWORD *v352;
  uint64_t v353;
  _QWORD *v354;
  uint64_t v355;
  uint64_t i6;
  _QWORD *v357;
  _QWORD *v358;
  uint64_t v359;
  _QWORD *v360;
  uint64_t v361;
  _QWORD *v362;
  uint64_t v363;
  uint64_t *v364;
  uint64_t *i7;
  _QWORD *v366;
  uint64_t v367;
  _QWORD *v368;
  uint64_t v369;
  uint64_t v370;
  _QWORD *v371;
  uint64_t v372;
  _QWORD *v373;
  uint64_t v374;
  _QWORD *v375;
  uint64_t v376;
  _QWORD *v377;
  uint64_t v378;
  _QWORD *v379;
  uint64_t v380;
  _QWORD *v381;
  uint64_t v382;
  _QWORD *v383;
  _QWORD *v384;
  _QWORD *v385;
  unsigned int v386;
  _BYTE __p[32];
  _QWORD v388[2];
  void *v389;
  void *v390;
  void *v391;
  void *v392;
  void *v393;
  void *v394;
  void *v395;
  void *v396;
  void *v397;
  void *v398;
  void *v399;
  void *v400;
  char v401;
  char v402;
  uint64_t (**v403)();
  uint64_t v404;
  std::__shared_weak_count *v405;
  _BYTE v406[32];
  __int128 v407;
  __int16 v408;
  _QWORD v409[2];
  std::__shared_weak_count *v410;
  uint64_t v411;
  int v412;
  uint64_t v413;
  int v414;
  __int16 v415;
  _OWORD v416[2];
  _BYTE v417[64];
  int v418;
  uint64_t (**v419)();
  uint64_t v420;
  std::__shared_weak_count *v421;
  __int128 v422;
  uint64_t v423;
  __int16 v424;
  _QWORD v425[2];
  std::__shared_weak_count *v426;
  uint64_t v427;
  int v428;
  uint64_t v429;
  int v430;
  __int16 v431;
  uint64_t (**v432)();
  uint64_t v433;
  std::__shared_weak_count *v434;
  _BYTE v435[32];
  __int128 v436;
  __int16 v437;
  _QWORD v438[2];
  std::__shared_weak_count *v439;
  uint64_t v440;
  int v441;
  uint64_t v442;
  int v443;
  __int16 v444;
  _BYTE v445[28];
  _BYTE v446[64];
  int v447;
  char v448;
  unsigned __int8 v449[17];

  v6 = a2 + 8;
  if (*(_QWORD *)(a1 + 40))
  {
    v7 = *(_QWORD **)(a1 + 24);
    __p[0] = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v7, (uint64_t)__p, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  sub_223BA3EF0(a1, v6, v8, v9, v10, v11, v12, v13);
  sub_223BA3EF0(a1, a2 + 72, v14, v15, v16, v17, v18, v19);
  v25 = *(unsigned __int8 *)(a2 + 216);
  if (!*(_BYTE *)(a2 + 216))
  {
    __p[0] = 0;
    LOBYTE(v394) = 0;
    v445[0] = 0;
    sub_22454F564(a1, v445);
    if (!(_BYTE)v394)
      goto LABEL_46;
    goto LABEL_25;
  }
  v403 = &off_24EC25150;
  v26 = *(_QWORD *)(a2 + 144);
  v27 = *(std::__shared_weak_count **)(a2 + 152);
  if (!v27)
  {
    v46 = *(_WORD *)(a2 + 208);
    v404 = *(_QWORD *)(a2 + 144);
    v405 = 0;
    v47 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)v406 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)&v406[16] = v47;
    v407 = *(_OWORD *)(a2 + 192);
    v408 = v46;
    v409[0] = &off_24EC1F8C8;
    v36 = v404;
    v37 = 0;
    goto LABEL_30;
  }
  p_shared_owners = (unint64_t *)&v27->__shared_owners_;
  do
    v29 = __ldxr(p_shared_owners);
  while (__stxr(v29 + 1, p_shared_owners));
  v30 = *(_WORD *)(a2 + 208);
  do
    v31 = __ldxr(p_shared_owners);
  while (__stxr(v31 + 1, p_shared_owners));
  v32 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)v406 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)&v406[16] = v32;
  v407 = *(_OWORD *)(a2 + 192);
  do
    v33 = __ldxr(p_shared_owners);
  while (__stxr(v33 + 1, p_shared_owners));
  v404 = v26;
  v405 = v27;
  v408 = v30;
  do
    v34 = __ldaxr(p_shared_owners);
  while (__stlxr(v34 - 1, p_shared_owners));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  do
    v35 = __ldaxr(p_shared_owners);
  while (__stlxr(v35 - 1, p_shared_owners));
  if (v35)
  {
    v409[0] = &off_24EC1F8C8;
    v36 = v404;
    v37 = v405;
    if (v405)
      goto LABEL_18;
LABEL_30:
    v40 = *(_QWORD *)&v406[12];
    v41 = *(_DWORD *)&v406[28];
    v42 = *(_QWORD *)v406;
    v43 = v408;
    goto LABEL_31;
  }
  ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
  std::__shared_weak_count::__release_weak(v27);
  v409[0] = &off_24EC1F8C8;
  v36 = v404;
  v37 = v405;
  if (!v405)
    goto LABEL_30;
LABEL_18:
  v38 = (unint64_t *)&v37->__shared_owners_;
  do
    v39 = __ldxr(v38);
  while (__stxr(v39 + 1, v38));
  v40 = *(_QWORD *)&v406[12];
  v41 = *(_DWORD *)&v406[28];
  v42 = *(_QWORD *)v406;
  v43 = v408;
  do
    v44 = __ldxr(v38);
  while (__stxr(v44 + 1, v38));
  do
    v45 = __ldxr(v38);
  while (__stxr(v45 + 1, v38));
LABEL_31:
  v409[1] = v36;
  v410 = v37;
  v411 = v40;
  v412 = 2 * v41;
  v413 = v42;
  v414 = 31;
  v415 = v43;
  if (v37)
  {
    v48 = (unint64_t *)&v37->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
    do
      v50 = __ldaxr(v48);
    while (__stlxr(v50 - 1, v48));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  sub_22416BFE0((uint64_t)v416, (uint64_t)v409, 0, v20, v21, v22, v23, v24);
  *(_OWORD *)__p = v416[0];
  *(_OWORD *)&__p[12] = *(_OWORD *)((char *)v416 + 12);
  LOBYTE(v388[0]) = 0;
  LODWORD(v393) = -1;
  v51 = v418;
  if (v418 != -1)
  {
    ((void (*)(uint64_t (***)(), _QWORD *, _BYTE *))off_24EC60008[v418])(&v432, v388, v417);
    LODWORD(v393) = v51;
  }
  LOBYTE(v394) = 1;
  v445[0] = 1;
  sub_22454F564(a1, v445);
  if (*(_QWORD *)(a1 + 40))
  {
    v52 = *(_QWORD **)(a1 + 24);
    v445[0] = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v52, (uint64_t)v445, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  sub_223BA43C0(a1, (uint64_t)__p);
  v53 = *(_BYTE *)(a1 + 34);
  if (*(_QWORD *)(a1 + 40))
  {
    v54 = *(_QWORD **)(a1 + 24);
    v445[0] = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v54, (uint64_t)v445, 1);
  }
  v55 = *(_QWORD **)(a1 + 24);
  v445[0] = v53;
  sub_2231813E8(v55, (uint64_t)v445, 1);
  ++*(_QWORD *)(a1 + 40);
  if (!(_BYTE)v394)
  {
LABEL_46:
    if (!v25)
      goto LABEL_57;
    goto LABEL_47;
  }
LABEL_25:
  if ((_DWORD)v393 != -1)
    ((void (*)(_BYTE *, _QWORD *))off_24EC5FFD0[v393])(v445, v388);
  LODWORD(v393) = -1;
  if (!v25)
    goto LABEL_57;
LABEL_47:
  if (v418 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_24EC5FFD0[v418])(v445, v417);
  v418 = -1;
  v56 = v410;
  if (!v410)
    goto LABEL_53;
  v57 = (unint64_t *)&v410->__shared_owners_;
  do
    v58 = __ldaxr(v57);
  while (__stlxr(v58 - 1, v57));
  if (!v58)
  {
    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
    std::__shared_weak_count::__release_weak(v56);
    v59 = v405;
    if (!v405)
      goto LABEL_57;
  }
  else
  {
LABEL_53:
    v59 = v405;
    if (!v405)
      goto LABEL_57;
  }
  v60 = (unint64_t *)&v59->__shared_owners_;
  do
    v61 = __ldaxr(v60);
  while (__stlxr(v61 - 1, v60));
  if (v61)
  {
LABEL_57:
    v386 = a3;
    if (*(_BYTE *)(a2 + 496))
      goto LABEL_58;
    goto LABEL_90;
  }
  ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
  std::__shared_weak_count::__release_weak(v59);
  v386 = a3;
  if (*(_BYTE *)(a2 + 496))
  {
LABEL_58:
    __p[0] = 1;
    sub_22454F564(a1, __p);
    if (*(_QWORD *)(a1 + 40))
    {
      v62 = *(_QWORD **)(a1 + 24);
      __p[0] = *(_BYTE *)(a1 + 32);
      sub_2231813E8(v62, (uint64_t)__p, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a1 + 40);
    *(_QWORD *)v445 = &off_24EC1F958;
    sub_2231B3FDC((uint64_t)&v445[8]);
    sub_22416BD7C((uint64_t)__p, (uint64_t)v445, 0);
    v68 = *(std::__shared_weak_count **)&v445[16];
    if (!*(_QWORD *)&v445[16])
      goto LABEL_64;
    v69 = (unint64_t *)(*(_QWORD *)&v445[16] + 8);
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
      *(_DWORD *)&__p[24] = 0;
      v71 = *(unsigned __int8 *)(a2 + 280);
      if (*(_BYTE *)(a2 + 280))
      {
LABEL_65:
        v419 = &off_24EC200A8;
        v72 = *(_QWORD *)(a2 + 232);
        v73 = *(std::__shared_weak_count **)(a2 + 240);
        if (v73)
        {
          v74 = (unint64_t *)&v73->__shared_owners_;
          do
            v75 = __ldxr(v74);
          while (__stxr(v75 + 1, v74));
          v76 = *(_WORD *)(a2 + 272);
          do
            v77 = __ldxr(v74);
          while (__stxr(v77 + 1, v74));
          v422 = *(_OWORD *)(a2 + 248);
          v423 = *(_QWORD *)(a2 + 264);
          do
            v78 = __ldxr(v74);
          while (__stxr(v78 + 1, v74));
          v420 = v72;
          v421 = v73;
          v424 = v76;
          do
            v79 = __ldaxr(v74);
          while (__stlxr(v79 - 1, v74));
          if (!v79)
          {
            ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
            std::__shared_weak_count::__release_weak(v73);
          }
          do
            v80 = __ldaxr(v74);
          while (__stlxr(v80 - 1, v74));
          if (v80)
          {
            v425[0] = &off_24EC1F8C8;
            v81 = v420;
            v82 = v421;
            if (v421)
              goto LABEL_79;
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
            std::__shared_weak_count::__release_weak(v73);
            v425[0] = &off_24EC1F8C8;
            v81 = v420;
            v82 = v421;
            if (v421)
            {
LABEL_79:
              v83 = (unint64_t *)&v82->__shared_owners_;
              do
                v84 = __ldxr(v83);
              while (__stxr(v84 + 1, v83));
              v85 = HIDWORD(v423);
              v86 = *((_QWORD *)&v422 + 1);
              v87 = v422;
              v88 = v424;
              do
                v89 = __ldxr(v83);
              while (__stxr(v89 + 1, v83));
              do
                v90 = __ldxr(v83);
              while (__stxr(v90 + 1, v83));
              goto LABEL_97;
            }
          }
        }
        else
        {
          v93 = *(_WORD *)(a2 + 272);
          v420 = *(_QWORD *)(a2 + 232);
          v421 = 0;
          v422 = *(_OWORD *)(a2 + 248);
          v423 = *(_QWORD *)(a2 + 264);
          v424 = v93;
          v425[0] = &off_24EC1F8C8;
          v81 = v420;
          v82 = 0;
        }
        v85 = HIDWORD(v423);
        v86 = *((_QWORD *)&v422 + 1);
        v87 = v422;
        v88 = v424;
LABEL_97:
        v425[1] = v81;
        v426 = v82;
        v427 = v86;
        v428 = 2 * v85;
        v429 = v87;
        v430 = 3;
        v431 = v88;
        if (v82)
        {
          v94 = (unint64_t *)&v82->__shared_owners_;
          do
            v95 = __ldaxr(v94);
          while (__stlxr(v95 - 1, v94));
          if (!v95)
          {
            ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
            std::__shared_weak_count::__release_weak(v82);
          }
          do
            v96 = __ldaxr(v94);
          while (__stlxr(v96 - 1, v94));
          if (!v96)
          {
            ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
            std::__shared_weak_count::__release_weak(v82);
          }
        }
        sub_22416BFE0((uint64_t)v445, (uint64_t)v425, 0, v63, v64, v65, v66, v67);
        goto LABEL_106;
      }
    }
    else
    {
LABEL_64:
      *(_DWORD *)&__p[24] = 0;
      v71 = *(unsigned __int8 *)(a2 + 280);
      if (*(_BYTE *)(a2 + 280))
        goto LABEL_65;
    }
    *(_OWORD *)v445 = *(_OWORD *)__p;
    *(_OWORD *)&v445[12] = *(_OWORD *)&__p[12];
    v446[0] = 0;
    v447 = -1;
    v92 = (int)v393;
    if ((_DWORD)v393 != -1)
    {
      ((void (*)(_QWORD *, _BYTE *, _QWORD *))off_24EC5FFF8[v393])(v438, v446, v388);
      v447 = v92;
    }
LABEL_106:
    if (*(_QWORD *)(a1 + 40))
    {
      v97 = *(_QWORD **)(a1 + 24);
      LOBYTE(v432) = *(_BYTE *)(a1 + 32);
      sub_2231813E8(v97, (uint64_t)&v432, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a1 + 40);
    sub_223BA43C0(a1, (uint64_t)v445);
    v98 = *(_BYTE *)(a1 + 34);
    if (*(_QWORD *)(a1 + 40))
    {
      v99 = *(_QWORD **)(a1 + 24);
      LOBYTE(v432) = *(_BYTE *)(a1 + 32);
      sub_2231813E8(v99, (uint64_t)&v432, 1);
    }
    v100 = *(_QWORD **)(a1 + 24);
    LOBYTE(v432) = v98;
    sub_2231813E8(v100, (uint64_t)&v432, 1);
    ++*(_QWORD *)(a1 + 40);
    if (v447 != -1)
      ((void (*)(uint64_t (***)(), _BYTE *))off_24EC5FFD0[v447])(&v432, v446);
    v447 = -1;
    if (v71)
    {
      v101 = v426;
      if (!v426)
        goto LABEL_117;
      v102 = (unint64_t *)&v426->__shared_owners_;
      do
        v103 = __ldaxr(v102);
      while (__stlxr(v103 - 1, v102));
      if (!v103)
      {
        ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
        std::__shared_weak_count::__release_weak(v101);
        v104 = v421;
        if (!v421)
          goto LABEL_121;
      }
      else
      {
LABEL_117:
        v104 = v421;
        if (!v421)
          goto LABEL_121;
      }
      v105 = (unint64_t *)&v104->__shared_owners_;
      do
        v106 = __ldaxr(v105);
      while (__stlxr(v106 - 1, v105));
      if (!v106)
      {
        ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
        std::__shared_weak_count::__release_weak(v104);
        v107 = v393;
        a3 = v386;
        if ((_DWORD)v393 == -1)
        {
LABEL_123:
          if (*(_QWORD *)(a1 + 40))
          {
            v108 = *(_QWORD **)(a1 + 24);
            __p[0] = *(_BYTE *)(a1 + 32);
            sub_2231813E8(v108, (uint64_t)__p, 1);
          }
          std::ostream::operator<<();
          ++*(_QWORD *)(a1 + 40);
          sub_223BA43C0(a1, a2 + 288);
          v109 = *(_BYTE *)(a1 + 34);
          if (*(_QWORD *)(a1 + 40))
          {
            v110 = *(_QWORD **)(a1 + 24);
            __p[0] = *(_BYTE *)(a1 + 32);
            sub_2231813E8(v110, (uint64_t)__p, 1);
          }
          v111 = *(_QWORD **)(a1 + 24);
          __p[0] = v109;
          sub_2231813E8(v111, (uint64_t)__p, 1);
          v112 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v112 + 1;
          if (v112 != -1)
          {
            v113 = *(_QWORD **)(a1 + 24);
            __p[0] = *(_BYTE *)(a1 + 32);
            sub_2231813E8(v113, (uint64_t)__p, 1);
          }
          std::ostream::operator<<();
          ++*(_QWORD *)(a1 + 40);
          sub_223BA43C0(a1, a2 + 392);
          v114 = *(_BYTE *)(a1 + 34);
          if (*(_QWORD *)(a1 + 40))
          {
            v115 = *(_QWORD **)(a1 + 24);
            __p[0] = *(_BYTE *)(a1 + 32);
            sub_2231813E8(v115, (uint64_t)__p, 1);
          }
          v116 = *(_QWORD **)(a1 + 24);
          __p[0] = v114;
          sub_2231813E8(v116, (uint64_t)__p, 1);
          v117 = *(_QWORD *)(a1 + 40) + 1;
          *(_QWORD *)(a1 + 40) = v117;
          v91 = a2 + 504;
          if (v117)
            goto LABEL_132;
          goto LABEL_133;
        }
LABEL_122:
        ((void (*)(_BYTE *, _QWORD *))off_24EC5FFD0[v107])(v445, v388);
        goto LABEL_123;
      }
    }
LABEL_121:
    v107 = v393;
    a3 = v386;
    if ((_DWORD)v393 == -1)
      goto LABEL_123;
    goto LABEL_122;
  }
LABEL_90:
  __p[0] = 0;
  sub_22454F564(a1, __p);
  v91 = a2 + 504;
  if (*(_QWORD *)(a1 + 40))
  {
LABEL_132:
    v118 = *(_QWORD **)(a1 + 24);
    __p[0] = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v118, (uint64_t)__p, 1);
  }
LABEL_133:
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  sub_223BA3A24(a1, v91, v119, v120, v121, v122, v123, v124);
  sub_223BA3EF0(a1, a2 + 568, v125, v126, v127, v128, v129, v130);
  if (a3 <= 4)
  {
    sub_223BA3540(a1, a2 + 632, v131, v132, v133, v134, v135, v136);
    sub_223BA3A24(a1, a2 + 840, v137, v138, v139, v140, v141, v142);
    if (!*(_QWORD *)(a1 + 40))
      goto LABEL_136;
    goto LABEL_135;
  }
  if (*(_QWORD *)(a1 + 40))
  {
    v169 = *(_QWORD **)(a1 + 24);
    __p[0] = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v169, (uint64_t)__p, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  sub_223BA3540(a1, a2 + 632, v170, v171, v172, v173, v174, v175);
  if (*(_BYTE *)(a2 + 724))
  {
    __p[0] = 1;
    sub_22454F564(a1, __p);
    if (*(_QWORD *)(a1 + 40))
    {
      v176 = *(_QWORD **)(a1 + 24);
      __p[0] = *(_BYTE *)(a1 + 32);
      sub_2231813E8(v176, (uint64_t)__p, 1);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
    std::ostream::operator<<();
    ++*(_QWORD *)(a1 + 40);
    if (*(_BYTE *)(a2 + 752))
      goto LABEL_163;
LABEL_281:
    __p[0] = 0;
    sub_22454F564(a1, __p);
    goto LABEL_282;
  }
  __p[0] = 0;
  sub_22454F564(a1, __p);
  if (!*(_BYTE *)(a2 + 752))
    goto LABEL_281;
LABEL_163:
  __p[0] = 1;
  sub_22454F564(a1, __p);
  if (*(_QWORD *)(a1 + 40))
  {
    v177 = *(_QWORD **)(a1 + 24);
    __p[0] = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v177, (uint64_t)__p, 1);
  }
  std::ostream::operator<<();
  v178 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 40) = v178;
  v179 = *(_QWORD *)(a2 + 728);
  v180 = *(_QWORD *)(a2 + 736) - v179;
  if (v180)
  {
    v181 = 2 * (v180 >> 1);
    do
    {
      if (v178)
      {
        v182 = *(_QWORD **)(a1 + 24);
        __p[0] = *(_BYTE *)(a1 + 32);
        sub_2231813E8(v182, (uint64_t)__p, 1);
      }
      v179 += 2;
      std::ostream::operator<<();
      v178 = *(_QWORD *)(a1 + 40) + 1;
      *(_QWORD *)(a1 + 40) = v178;
      v181 -= 2;
    }
    while (v181);
  }
LABEL_282:
  if (!*(_BYTE *)(a2 + 764))
  {
    __p[0] = 0;
    sub_22454F564(a1, __p);
    if (*(_BYTE *)(a2 + 772))
      goto LABEL_286;
LABEL_317:
    __p[0] = 0;
    sub_22454F564(a1, __p);
    if (*(_BYTE *)(a2 + 780))
      goto LABEL_289;
    goto LABEL_318;
  }
  __p[0] = 1;
  sub_22454F564(a1, __p);
  if (*(_QWORD *)(a1 + 40))
  {
    v261 = *(_QWORD **)(a1 + 24);
    __p[0] = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v261, (uint64_t)__p, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  if (!*(_BYTE *)(a2 + 772))
    goto LABEL_317;
LABEL_286:
  __p[0] = 1;
  sub_22454F564(a1, __p);
  if (*(_QWORD *)(a1 + 40))
  {
    v262 = *(_QWORD **)(a1 + 24);
    __p[0] = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v262, (uint64_t)__p, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a2 + 780))
  {
LABEL_289:
    __p[0] = 1;
    sub_22454F564(a1, __p);
    if (*(_QWORD *)(a1 + 40))
    {
      v263 = *(_QWORD **)(a1 + 24);
      __p[0] = *(_BYTE *)(a1 + 32);
      sub_2231813E8(v263, (uint64_t)__p, 1);
    }
    std::ostream::operator<<();
    v264 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 40) = v264;
    v265 = a2 + 784;
    if (v264)
      goto LABEL_292;
    goto LABEL_293;
  }
LABEL_318:
  __p[0] = 0;
  sub_22454F564(a1, __p);
  v265 = a2 + 784;
  if (*(_QWORD *)(a1 + 40))
  {
LABEL_292:
    v266 = *(_QWORD **)(a1 + 24);
    __p[0] = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v266, (uint64_t)__p, 1);
  }
LABEL_293:
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  sub_223BA4B38(a1, v265);
  v267 = *(_BYTE *)(a1 + 34);
  if (*(_QWORD *)(a1 + 40))
  {
    v268 = *(_QWORD **)(a1 + 24);
    __p[0] = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v268, (uint64_t)__p, 1);
  }
  v269 = *(_QWORD **)(a1 + 24);
  __p[0] = v267;
  sub_2231813E8(v269, (uint64_t)__p, 1);
  ++*(_QWORD *)(a1 + 40);
  if (!*(_BYTE *)(a2 + 836))
  {
    __p[0] = 0;
    sub_22454F564(a1, __p);
    sub_223BA3A24(a1, a2 + 840, v293, v294, v295, v296, v297, v298);
    if (!*(_QWORD *)(a1 + 40))
      goto LABEL_136;
LABEL_135:
    v143 = *(_QWORD **)(a1 + 24);
    __p[0] = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v143, (uint64_t)__p, 1);
    goto LABEL_136;
  }
  __p[0] = 1;
  sub_22454F564(a1, __p);
  if (*(_QWORD *)(a1 + 40))
  {
    v270 = *(_QWORD **)(a1 + 24);
    __p[0] = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v270, (uint64_t)__p, 1);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
  std::ostream::operator<<();
  v271 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v271 + 1;
  if (v271 != -1)
  {
    v272 = *(_QWORD **)(a1 + 24);
    __p[0] = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v272, (uint64_t)__p, 1);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
  std::ostream::operator<<();
  v273 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v273 + 1;
  if (v273 != -1)
  {
    v274 = *(_QWORD **)(a1 + 24);
    __p[0] = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v274, (uint64_t)__p, 1);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
  std::ostream::operator<<();
  v275 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v275 + 1;
  if (v275 != -1)
  {
    v276 = *(_QWORD **)(a1 + 24);
    __p[0] = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v276, (uint64_t)__p, 1);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
  std::ostream::operator<<();
  v277 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v277 + 1;
  if (v277 != -1)
  {
    v278 = *(_QWORD **)(a1 + 24);
    __p[0] = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v278, (uint64_t)__p, 1);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
  std::ostream::operator<<();
  v279 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v279 + 1;
  if (v279 != -1)
  {
    v280 = *(_QWORD **)(a1 + 24);
    __p[0] = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v280, (uint64_t)__p, 1);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
  std::ostream::operator<<();
  v281 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v281 + 1;
  if (v281 != -1)
  {
    v282 = *(_QWORD **)(a1 + 24);
    __p[0] = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v282, (uint64_t)__p, 1);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
  std::ostream::operator<<();
  v283 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v283 + 1;
  if (v283 != -1)
  {
    v284 = *(_QWORD **)(a1 + 24);
    __p[0] = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v284, (uint64_t)__p, 1);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
  std::ostream::operator<<();
  v285 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v285 + 1;
  if (v285 != -1)
  {
    v286 = *(_QWORD **)(a1 + 24);
    __p[0] = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v286, (uint64_t)__p, 1);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  sub_223BA3A24(a1, a2 + 840, v287, v288, v289, v290, v291, v292);
  if (*(_QWORD *)(a1 + 40))
    goto LABEL_135;
LABEL_136:
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  v149 = *(unsigned __int8 *)(a2 + 984);
  if (!*(_BYTE *)(a2 + 984))
  {
    __p[0] = 0;
    LOBYTE(v394) = 0;
    v445[0] = 0;
    sub_22454F564(a1, v445);
    if (!(_BYTE)v394)
      goto LABEL_192;
    goto LABEL_171;
  }
  v432 = &off_24EC28E38;
  v150 = *(_QWORD *)(a2 + 912);
  v151 = *(std::__shared_weak_count **)(a2 + 920);
  if (!v151)
  {
    v189 = *(_WORD *)(a2 + 976);
    v433 = *(_QWORD *)(a2 + 912);
    v434 = 0;
    v190 = *(_OWORD *)(a2 + 944);
    *(_OWORD *)v435 = *(_OWORD *)(a2 + 928);
    *(_OWORD *)&v435[16] = v190;
    v436 = *(_OWORD *)(a2 + 960);
    v437 = v189;
    v438[0] = &off_24EC1F8C8;
    v160 = 0;
    goto LABEL_176;
  }
  v152 = (unint64_t *)&v151->__shared_owners_;
  do
    v153 = __ldxr(v152);
  while (__stxr(v153 + 1, v152));
  v154 = *(_WORD *)(a2 + 976);
  do
    v155 = __ldxr(v152);
  while (__stxr(v155 + 1, v152));
  v156 = *(_OWORD *)(a2 + 944);
  *(_OWORD *)v435 = *(_OWORD *)(a2 + 928);
  *(_OWORD *)&v435[16] = v156;
  v436 = *(_OWORD *)(a2 + 960);
  do
    v157 = __ldxr(v152);
  while (__stxr(v157 + 1, v152));
  v433 = v150;
  v434 = v151;
  v437 = v154;
  do
    v158 = __ldaxr(v152);
  while (__stlxr(v158 - 1, v152));
  if (!v158)
  {
    ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
    std::__shared_weak_count::__release_weak(v151);
  }
  do
    v159 = __ldaxr(v152);
  while (__stlxr(v159 - 1, v152));
  if (v159)
  {
    v438[0] = &off_24EC1F8C8;
    v150 = v433;
    v160 = v434;
    if (v434)
      goto LABEL_151;
LABEL_176:
    v163 = *(_QWORD *)&v435[12];
    v164 = *(_DWORD *)&v435[28];
    v165 = *(_QWORD *)v435;
    v166 = v437;
    goto LABEL_177;
  }
  ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
  std::__shared_weak_count::__release_weak(v151);
  v438[0] = &off_24EC1F8C8;
  v150 = v433;
  v160 = v434;
  if (!v434)
    goto LABEL_176;
LABEL_151:
  v161 = (unint64_t *)&v160->__shared_owners_;
  do
    v162 = __ldxr(v161);
  while (__stxr(v162 + 1, v161));
  v163 = *(_QWORD *)&v435[12];
  v164 = *(_DWORD *)&v435[28];
  v165 = *(_QWORD *)v435;
  v166 = v437;
  do
    v167 = __ldxr(v161);
  while (__stxr(v167 + 1, v161));
  do
    v168 = __ldxr(v161);
  while (__stxr(v168 + 1, v161));
LABEL_177:
  v438[1] = v150;
  v439 = v160;
  v440 = v163;
  v441 = v164;
  v442 = v165;
  v443 = 25;
  v444 = v166;
  if (v160)
  {
    v191 = (unint64_t *)&v160->__shared_owners_;
    do
      v192 = __ldaxr(v191);
    while (__stlxr(v192 - 1, v191));
    if (!v192)
    {
      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
      std::__shared_weak_count::__release_weak(v160);
    }
    do
      v193 = __ldaxr(v191);
    while (__stlxr(v193 - 1, v191));
    if (!v193)
    {
      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
      std::__shared_weak_count::__release_weak(v160);
    }
  }
  sub_22416BFE0((uint64_t)v445, (uint64_t)v438, 0, v144, v145, v146, v147, v148);
  *(_OWORD *)__p = *(_OWORD *)v445;
  *(_OWORD *)&__p[12] = *(_OWORD *)&v445[12];
  LOBYTE(v388[0]) = 0;
  LODWORD(v393) = -1;
  v194 = v447;
  if (v447 != -1)
  {
    ((void (*)(char *, _QWORD *, _BYTE *))off_24EC60008[v447])(&v448, v388, v446);
    LODWORD(v393) = v194;
  }
  LOBYTE(v394) = 1;
  v449[0] = 1;
  sub_22454F564(a1, v449);
  if (*(_QWORD *)(a1 + 40))
  {
    v195 = *(_QWORD **)(a1 + 24);
    v449[0] = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v195, (uint64_t)v449, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  sub_223BA43C0(a1, (uint64_t)__p);
  v196 = *(_BYTE *)(a1 + 34);
  if (*(_QWORD *)(a1 + 40))
  {
    v197 = *(_QWORD **)(a1 + 24);
    v449[0] = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v197, (uint64_t)v449, 1);
  }
  v198 = *(_QWORD **)(a1 + 24);
  v449[0] = v196;
  sub_2231813E8(v198, (uint64_t)v449, 1);
  ++*(_QWORD *)(a1 + 40);
  if (!(_BYTE)v394)
  {
LABEL_192:
    if (!v149)
      goto LABEL_205;
    goto LABEL_193;
  }
LABEL_171:
  if ((_DWORD)v393 != -1)
    ((void (*)(unsigned __int8 *, _QWORD *))off_24EC5FFD0[v393])(v449, v388);
  LODWORD(v393) = -1;
  if (v149)
  {
LABEL_193:
    if (v447 != -1)
      ((void (*)(unsigned __int8 *, _BYTE *))off_24EC5FFD0[v447])(v449, v446);
    v447 = -1;
    v199 = v439;
    if (v439)
    {
      v200 = (unint64_t *)&v439->__shared_owners_;
      do
        v201 = __ldaxr(v200);
      while (__stlxr(v201 - 1, v200));
      if (!v201)
      {
        ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
        std::__shared_weak_count::__release_weak(v199);
      }
    }
    v202 = v434;
    if (v434)
    {
      v203 = (unint64_t *)&v434->__shared_owners_;
      do
        v204 = __ldaxr(v203);
      while (__stlxr(v204 - 1, v203));
      if (!v204)
      {
        ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
        std::__shared_weak_count::__release_weak(v202);
      }
    }
  }
LABEL_205:
  sub_223BA3540(a1, a2 + 992, v183, v184, v185, v186, v187, v188);
  sub_22454F564(a1, (unsigned __int8 *)(a2 + 1080));
  if (*(_QWORD *)(a1 + 40))
  {
    v205 = *(_QWORD **)(a1 + 24);
    __p[0] = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v205, (uint64_t)__p, 1);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
  std::ostream::operator<<();
  v206 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v206 + 1;
  if (v206 != -1)
  {
    v207 = *(_QWORD **)(a1 + 24);
    __p[0] = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v207, (uint64_t)__p, 1);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
  std::ostream::operator<<();
  v208 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v208 + 1;
  if (v208 != -1)
  {
    v209 = *(_QWORD **)(a1 + 24);
    __p[0] = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v209, (uint64_t)__p, 1);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
  std::ostream::operator<<();
  v210 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v210 + 1;
  if (v210 != -1)
  {
    v211 = *(_QWORD **)(a1 + 24);
    __p[0] = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v211, (uint64_t)__p, 1);
  }
  std::ostream::operator<<();
  v212 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v212 + 1;
  if (v212 != -1)
  {
    v213 = *(_QWORD **)(a1 + 24);
    __p[0] = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v213, (uint64_t)__p, 1);
  }
  std::ostream::operator<<();
  v214 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v214 + 1;
  if (v214 != -1)
  {
    v215 = *(_QWORD **)(a1 + 24);
    __p[0] = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v215, (uint64_t)__p, 1);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
  std::ostream::operator<<();
  v216 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v216 + 1;
  if (v216 != -1)
  {
    v217 = *(_QWORD **)(a1 + 24);
    __p[0] = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v217, (uint64_t)__p, 1);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
  std::ostream::operator<<();
  v218 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v218 + 1;
  if (v218 != -1)
  {
    v219 = *(_QWORD **)(a1 + 24);
    __p[0] = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v219, (uint64_t)__p, 1);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
  std::ostream::operator<<();
  v220 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v220 + 1;
  if (v220 != -1)
  {
    v221 = *(_QWORD **)(a1 + 24);
    __p[0] = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v221, (uint64_t)__p, 1);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
  std::ostream::operator<<();
  v222 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v222 + 1;
  if (v222 != -1)
  {
    v223 = *(_QWORD **)(a1 + 24);
    __p[0] = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v223, (uint64_t)__p, 1);
  }
  std::ostream::operator<<();
  v224 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v224 + 1;
  if (v224 != -1)
  {
    v225 = *(_QWORD **)(a1 + 24);
    __p[0] = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v225, (uint64_t)__p, 1);
  }
  std::ostream::operator<<();
  v226 = *(_QWORD *)(a1 + 40);
  v227 = *(_BYTE *)(a1 + 34);
  *(_QWORD *)(a1 + 40) = v226 + 1;
  if (v226 != -1)
  {
    v228 = *(_QWORD **)(a1 + 24);
    __p[0] = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v228, (uint64_t)__p, 1);
  }
  v229 = *(_QWORD **)(a1 + 24);
  __p[0] = v227;
  sub_2231813E8(v229, (uint64_t)__p, 1);
  v230 = 0;
  v231 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 40) = v231;
  do
  {
    if (v231)
    {
      v232 = *(_QWORD **)(a1 + 24);
      __p[0] = *(_BYTE *)(a1 + 32);
      sub_2231813E8(v232, (uint64_t)__p, 1);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
    std::ostream::operator<<();
    v231 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 40) = v231;
    v230 += 8;
  }
  while (v230 != 128);
  if (v386 == 1)
  {
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/include/Reconstruction/Frame/FrameBundleSample.h", 528, (uint64_t)"io::is_input_archive_v<Archive>", 31, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      __p[0] = 0;
      v402 = 0;
      v449[0] = 0;
      sub_22454F564(a1, v449);
      if (!v402)
        goto LABEL_428;
      v233 = *(unsigned __int8 *)(a2 + 1512);
      *(_OWORD *)(a2 + 1312) = *(_OWORD *)__p;
      *(_DWORD *)(a2 + 1328) = *(_DWORD *)&__p[16];
      v234 = (char **)(a2 + 1336);
      if (v233)
      {
        sub_2232C6B24(v234, (char **)&__p[24]);
        *(_BYTE *)(a2 + 1504) = v401;
        if (!v402)
          goto LABEL_428;
      }
      else
      {
        sub_2232C6D24(v234, (uint64_t)&__p[24]);
        v348 = v401;
        *(_BYTE *)(a2 + 1512) = 1;
        *(_BYTE *)(a2 + 1504) = v348;
        if (!v402)
          goto LABEL_428;
      }
      if (v399)
      {
        v400 = v399;
        operator delete(v399);
      }
      if (v397)
      {
        v398 = v397;
        operator delete(v397);
      }
      if (v395)
      {
        v396 = v395;
        operator delete(v395);
      }
      if (v393)
      {
        v394 = v393;
        operator delete(v393);
      }
      if (v391)
      {
        v392 = v391;
        operator delete(v391);
      }
      if (v389)
      {
        v390 = v389;
        operator delete(v389);
      }
      if (*(_QWORD *)&__p[24])
      {
        v388[0] = *(_QWORD *)&__p[24];
        operator delete(*(void **)&__p[24]);
      }
LABEL_428:
      if (!*(_QWORD *)(a1 + 40))
      {
LABEL_246:
        std::ostream::operator<<();
        ++*(_QWORD *)(a1 + 40);
        sub_223BA5C7C(a1, a2 + 1520);
        if (v386 < 3)
          return;
        goto LABEL_432;
      }
LABEL_245:
      v237 = *(_QWORD **)(a1 + 24);
      __p[0] = *(_BYTE *)(a1 + 32);
      sub_2231813E8(v237, (uint64_t)__p, 1);
      goto LABEL_246;
    }
LABEL_491:
    abort();
  }
  if (v386 > 6)
  {
    if (*(_BYTE *)(a2 + 1512))
    {
      __p[0] = 1;
      sub_22454F564(a1, __p);
      if (*(_QWORD *)(a1 + 40))
      {
        v238 = *(_QWORD **)(a1 + 24);
        __p[0] = *(_BYTE *)(a1 + 32);
        sub_2231813E8(v238, (uint64_t)__p, 1);
      }
      std::ostream::operator<<();
      v239 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v239 + 1;
      if (v239 != -1)
      {
        v240 = *(_QWORD **)(a1 + 24);
        __p[0] = *(_BYTE *)(a1 + 32);
        sub_2231813E8(v240, (uint64_t)__p, 1);
      }
      std::ostream::operator<<();
      v241 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v241 + 1;
      if (v241 != -1)
      {
        v242 = *(_QWORD **)(a1 + 24);
        __p[0] = *(_BYTE *)(a1 + 32);
        sub_2231813E8(v242, (uint64_t)__p, 1);
      }
      std::ostream::operator<<();
      v243 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v243 + 1;
      if (v243 != -1)
      {
        v244 = *(_QWORD **)(a1 + 24);
        __p[0] = *(_BYTE *)(a1 + 32);
        sub_2231813E8(v244, (uint64_t)__p, 1);
      }
      std::ostream::operator<<();
      v245 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v245 + 1;
      if (v245 != -1)
      {
        v246 = *(_QWORD **)(a1 + 24);
        __p[0] = *(_BYTE *)(a1 + 32);
        sub_2231813E8(v246, (uint64_t)__p, 1);
      }
      std::ostream::operator<<();
      v247 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v247 + 1;
      if (v247 != -1)
      {
        v248 = *(_QWORD **)(a1 + 24);
        __p[0] = *(_BYTE *)(a1 + 32);
        sub_2231813E8(v248, (uint64_t)__p, 1);
      }
      std::ostream::operator<<();
      v249 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v249 + 1;
      if (v249 != -1)
      {
        v250 = *(_QWORD **)(a1 + 24);
        __p[0] = *(_BYTE *)(a1 + 32);
        sub_2231813E8(v250, (uint64_t)__p, 1);
      }
      std::ostream::operator<<();
      v251 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v251 + 1;
      if (v251 != -1)
      {
        v252 = *(_QWORD **)(a1 + 24);
        __p[0] = *(_BYTE *)(a1 + 32);
        sub_2231813E8(v252, (uint64_t)__p, 1);
      }
      std::ostream::operator<<();
      v253 = *(_QWORD *)(a1 + 40) + 1;
      *(_QWORD *)(a1 + 40) = v253;
      v254 = *(_QWORD *)(a2 + 1336);
      for (i = *(_QWORD *)(a2 + 1344); v254 != i; v254 += 16)
      {
        for (j = 0; j != 16; ++j)
        {
          if (v253)
          {
            v257 = *(_QWORD **)(a1 + 24);
            __p[0] = *(_BYTE *)(a1 + 32);
            sub_2231813E8(v257, (uint64_t)__p, 1);
          }
          v258 = *(_QWORD **)(a1 + 24);
          sub_223FC497C((unsigned __int8 *)(v254 + j));
          if (__p[23] >= 0)
            v259 = __p;
          else
            v259 = *(_BYTE **)__p;
          if (__p[23] >= 0)
            v260 = __p[23];
          else
            v260 = *(_QWORD *)&__p[8];
          sub_2231813E8(v258, (uint64_t)v259, v260);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          v253 = *(_QWORD *)(a1 + 40) + 1;
          *(_QWORD *)(a1 + 40) = v253;
        }
      }
      if (v253)
      {
        v299 = *(_QWORD **)(a1 + 24);
        __p[0] = *(_BYTE *)(a1 + 32);
        sub_2231813E8(v299, (uint64_t)__p, 1);
      }
      std::ostream::operator<<();
      v300 = *(_QWORD *)(a1 + 40) + 1;
      *(_QWORD *)(a1 + 40) = v300;
      v301 = *(_QWORD *)(a2 + 1360);
      for (k = *(_QWORD *)(a2 + 1368); v301 != k; v301 += 64)
      {
        for (m = 0; m != 64; m += 4)
        {
          if (v300)
          {
            v304 = *(_QWORD **)(a1 + 24);
            __p[0] = *(_BYTE *)(a1 + 32);
            sub_2231813E8(v304, (uint64_t)__p, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
          std::ostream::operator<<();
          v300 = *(_QWORD *)(a1 + 40) + 1;
          *(_QWORD *)(a1 + 40) = v300;
        }
      }
      if (v300)
      {
        v305 = *(_QWORD **)(a1 + 24);
        __p[0] = *(_BYTE *)(a1 + 32);
        sub_2231813E8(v305, (uint64_t)__p, 1);
      }
      std::ostream::operator<<();
      v306 = *(_QWORD *)(a1 + 40) + 1;
      *(_QWORD *)(a1 + 40) = v306;
      v307 = *(_QWORD *)(a2 + 1384);
      for (n = *(_QWORD *)(a2 + 1392); v307 != n; v307 += 16)
      {
        for (ii = 0; ii != 16; ++ii)
        {
          if (v306)
          {
            v310 = *(_QWORD **)(a1 + 24);
            __p[0] = *(_BYTE *)(a1 + 32);
            sub_2231813E8(v310, (uint64_t)__p, 1);
          }
          v311 = *(_QWORD **)(a1 + 24);
          sub_223FC497C((unsigned __int8 *)(v307 + ii));
          if (__p[23] >= 0)
            v312 = __p;
          else
            v312 = *(_BYTE **)__p;
          if (__p[23] >= 0)
            v313 = __p[23];
          else
            v313 = *(_QWORD *)&__p[8];
          sub_2231813E8(v311, (uint64_t)v312, v313);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          v306 = *(_QWORD *)(a1 + 40) + 1;
          *(_QWORD *)(a1 + 40) = v306;
        }
      }
      if (v306)
      {
        v314 = *(_QWORD **)(a1 + 24);
        __p[0] = *(_BYTE *)(a1 + 32);
        sub_2231813E8(v314, (uint64_t)__p, 1);
      }
      std::ostream::operator<<();
      v315 = *(_QWORD *)(a1 + 40) + 1;
      *(_QWORD *)(a1 + 40) = v315;
      v316 = *(_QWORD *)(a2 + 1408);
      for (jj = *(_QWORD *)(a2 + 1416); v316 != jj; v316 += 16)
      {
        for (kk = 0; kk != 16; ++kk)
        {
          if (v315)
          {
            v319 = *(_QWORD **)(a1 + 24);
            __p[0] = *(_BYTE *)(a1 + 32);
            sub_2231813E8(v319, (uint64_t)__p, 1);
          }
          v320 = *(_QWORD **)(a1 + 24);
          sub_223FC497C((unsigned __int8 *)(v316 + kk));
          if (__p[23] >= 0)
            v321 = __p;
          else
            v321 = *(_BYTE **)__p;
          if (__p[23] >= 0)
            v322 = __p[23];
          else
            v322 = *(_QWORD *)&__p[8];
          sub_2231813E8(v320, (uint64_t)v321, v322);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          v315 = *(_QWORD *)(a1 + 40) + 1;
          *(_QWORD *)(a1 + 40) = v315;
        }
      }
      if (v315)
      {
        v323 = *(_QWORD **)(a1 + 24);
        __p[0] = *(_BYTE *)(a1 + 32);
        sub_2231813E8(v323, (uint64_t)__p, 1);
      }
      std::ostream::operator<<();
      v324 = *(_QWORD *)(a1 + 40) + 1;
      *(_QWORD *)(a1 + 40) = v324;
      v325 = *(_QWORD *)(a2 + 1432);
      for (mm = *(_QWORD *)(a2 + 1440); v325 != mm; v325 += 16)
      {
        for (nn = 0; nn != 16; ++nn)
        {
          if (v324)
          {
            v328 = *(_QWORD **)(a1 + 24);
            __p[0] = *(_BYTE *)(a1 + 32);
            sub_2231813E8(v328, (uint64_t)__p, 1);
          }
          v329 = *(_QWORD **)(a1 + 24);
          sub_223FC497C((unsigned __int8 *)(v325 + nn));
          if (__p[23] >= 0)
            v330 = __p;
          else
            v330 = *(_BYTE **)__p;
          if (__p[23] >= 0)
            v331 = __p[23];
          else
            v331 = *(_QWORD *)&__p[8];
          sub_2231813E8(v329, (uint64_t)v330, v331);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          v324 = *(_QWORD *)(a1 + 40) + 1;
          *(_QWORD *)(a1 + 40) = v324;
        }
      }
      if (v324)
      {
        v332 = *(_QWORD **)(a1 + 24);
        __p[0] = *(_BYTE *)(a1 + 32);
        sub_2231813E8(v332, (uint64_t)__p, 1);
      }
      std::ostream::operator<<();
      v333 = *(_QWORD *)(a1 + 40) + 1;
      *(_QWORD *)(a1 + 40) = v333;
      v334 = *(_QWORD *)(a2 + 1456);
      for (i1 = *(_QWORD *)(a2 + 1464); v334 != i1; v334 += 64)
      {
        for (i2 = 0; i2 != 64; i2 += 4)
        {
          if (v333)
          {
            v337 = *(_QWORD **)(a1 + 24);
            __p[0] = *(_BYTE *)(a1 + 32);
            sub_2231813E8(v337, (uint64_t)__p, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
          std::ostream::operator<<();
          v333 = *(_QWORD *)(a1 + 40) + 1;
          *(_QWORD *)(a1 + 40) = v333;
        }
      }
      if (v333)
      {
        v338 = *(_QWORD **)(a1 + 24);
        __p[0] = *(_BYTE *)(a1 + 32);
        sub_2231813E8(v338, (uint64_t)__p, 1);
      }
      std::ostream::operator<<();
      v339 = *(_QWORD *)(a1 + 40) + 1;
      *(_QWORD *)(a1 + 40) = v339;
      v340 = *(_QWORD *)(a2 + 1480);
      for (i3 = *(_QWORD *)(a2 + 1488); v340 != i3; v340 += 16)
      {
        for (i4 = 0; i4 != 16; ++i4)
        {
          if (v339)
          {
            v343 = *(_QWORD **)(a1 + 24);
            __p[0] = *(_BYTE *)(a1 + 32);
            sub_2231813E8(v343, (uint64_t)__p, 1);
          }
          v344 = *(_QWORD **)(a1 + 24);
          sub_223FC497C((unsigned __int8 *)(v340 + i4));
          if (__p[23] >= 0)
            v345 = __p;
          else
            v345 = *(_BYTE **)__p;
          if (__p[23] >= 0)
            v346 = __p[23];
          else
            v346 = *(_QWORD *)&__p[8];
          sub_2231813E8(v344, (uint64_t)v345, v346);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          v339 = *(_QWORD *)(a1 + 40) + 1;
          *(_QWORD *)(a1 + 40) = v339;
        }
      }
      __p[0] = *(_BYTE *)(a2 + 1504);
      sub_22454F564(a1, __p);
      if (*(_QWORD *)(a1 + 40))
      {
        v347 = *(_QWORD **)(a1 + 24);
        __p[0] = *(_BYTE *)(a1 + 32);
        sub_2231813E8(v347, (uint64_t)__p, 1);
      }
      std::ostream::operator<<();
      ++*(_QWORD *)(a1 + 40);
    }
    else
    {
      __p[0] = 0;
      sub_22454F564(a1, __p);
    }
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/include/Reconstruction/Frame/FrameBundleSample.h", 535, (uint64_t)"io::is_input_archive_v<Archive>", 31, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_491;
    }
    memset(__p, 0, 24);
    if (*(_QWORD *)(a1 + 40))
    {
      v235 = *(_QWORD **)(a1 + 24);
      v449[0] = *(_BYTE *)(a1 + 32);
      sub_2231813E8(v235, (uint64_t)v449, 1);
    }
    std::ostream::operator<<();
    v236 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 40) = v236;
    if (v386 < 5)
    {
      if (!v236)
        goto LABEL_246;
      goto LABEL_245;
    }
  }
  sub_223BA5C7C(a1, a2 + 1520);
LABEL_432:
  if (*(_QWORD *)(a1 + 40))
  {
    v349 = *(_QWORD **)(a1 + 24);
    __p[0] = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v349, (uint64_t)__p, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  v350 = *(_QWORD *)(a2 + 1656);
  for (i5 = *(_QWORD *)(a2 + 1664); v350 != i5; v350 += 304)
  {
    if (*(_QWORD *)(a1 + 40))
    {
      v352 = *(_QWORD **)(a1 + 24);
      __p[0] = *(_BYTE *)(a1 + 32);
      sub_2231813E8(v352, (uint64_t)__p, 1);
    }
    std::ostream::operator<<();
    v353 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v353 + 1;
    if (v353 != -1)
    {
      v354 = *(_QWORD **)(a1 + 24);
      __p[0] = *(_BYTE *)(a1 + 32);
      sub_2231813E8(v354, (uint64_t)__p, 1);
    }
    std::ostream::operator<<();
    v355 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 40) = v355;
    for (i6 = 8; i6 != 136; i6 += 8)
    {
      if (v355)
      {
        v357 = *(_QWORD **)(a1 + 24);
        __p[0] = *(_BYTE *)(a1 + 32);
        sub_2231813E8(v357, (uint64_t)__p, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      v355 = *(_QWORD *)(a1 + 40) + 1;
      *(_QWORD *)(a1 + 40) = v355;
    }
    if (v355)
    {
      v358 = *(_QWORD **)(a1 + 24);
      __p[0] = *(_BYTE *)(a1 + 32);
      sub_2231813E8(v358, (uint64_t)__p, 1);
    }
    std::ostream::operator<<();
    v359 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v359 + 1;
    if (v359 != -1)
    {
      v360 = *(_QWORD **)(a1 + 24);
      __p[0] = *(_BYTE *)(a1 + 32);
      sub_2231813E8(v360, (uint64_t)__p, 1);
    }
    std::ostream::operator<<();
    v361 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v361 + 1;
    if (v361 != -1)
    {
      v362 = *(_QWORD **)(a1 + 24);
      __p[0] = *(_BYTE *)(a1 + 32);
      sub_2231813E8(v362, (uint64_t)__p, 1);
    }
    std::ostream::operator<<();
    v363 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 40) = v363;
    v364 = *(uint64_t **)(v350 + 144);
    for (i7 = *(uint64_t **)(v350 + 152); v364 != i7; v364 += 3)
    {
      if (v363)
      {
        v366 = *(_QWORD **)(a1 + 24);
        __p[0] = *(_BYTE *)(a1 + 32);
        sub_2231813E8(v366, (uint64_t)__p, 1);
      }
      std::ostream::operator<<();
      v367 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v367 + 1;
      if (v367 != -1)
      {
        v368 = *(_QWORD **)(a1 + 24);
        __p[0] = *(_BYTE *)(a1 + 32);
        sub_2231813E8(v368, (uint64_t)__p, 1);
      }
      std::ostream::operator<<();
      v363 = *(_QWORD *)(a1 + 40) + 1;
      *(_QWORD *)(a1 + 40) = v363;
      v370 = *v364;
      v369 = v364[1];
      if (v369 != *v364)
      {
        do
        {
          if (v363)
          {
            v371 = *(_QWORD **)(a1 + 24);
            __p[0] = *(_BYTE *)(a1 + 32);
            sub_2231813E8(v371, (uint64_t)__p, 1);
          }
          std::ostream::operator<<();
          v372 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v372 + 1;
          if (v372 != -1)
          {
            v373 = *(_QWORD **)(a1 + 24);
            __p[0] = *(_BYTE *)(a1 + 32);
            sub_2231813E8(v373, (uint64_t)__p, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
          std::ostream::operator<<();
          v374 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v374 + 1;
          if (v374 != -1)
          {
            v375 = *(_QWORD **)(a1 + 24);
            __p[0] = *(_BYTE *)(a1 + 32);
            sub_2231813E8(v375, (uint64_t)__p, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
          std::ostream::operator<<();
          v376 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v376 + 1;
          if (v376 != -1)
          {
            v377 = *(_QWORD **)(a1 + 24);
            __p[0] = *(_BYTE *)(a1 + 32);
            sub_2231813E8(v377, (uint64_t)__p, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
          std::ostream::operator<<();
          v378 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v378 + 1;
          if (v378 != -1)
          {
            v379 = *(_QWORD **)(a1 + 24);
            __p[0] = *(_BYTE *)(a1 + 32);
            sub_2231813E8(v379, (uint64_t)__p, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
          std::ostream::operator<<();
          v380 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v380 + 1;
          if (v380 != -1)
          {
            v381 = *(_QWORD **)(a1 + 24);
            __p[0] = *(_BYTE *)(a1 + 32);
            sub_2231813E8(v381, (uint64_t)__p, 1);
          }
          std::ostream::operator<<();
          v382 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v382 + 1;
          if (v382 != -1)
          {
            v383 = *(_QWORD **)(a1 + 24);
            __p[0] = *(_BYTE *)(a1 + 32);
            sub_2231813E8(v383, (uint64_t)__p, 1);
          }
          std::ostream::operator<<();
          v363 = *(_QWORD *)(a1 + 40) + 1;
          *(_QWORD *)(a1 + 40) = v363;
          v370 += 32;
        }
        while (v370 != v369);
      }
    }
    sub_223BA5C7C(a1, v350 + 168);
  }
  if (v386 >= 6)
  {
    if (*(_QWORD *)(a1 + 40))
    {
      v384 = *(_QWORD **)(a1 + 24);
      __p[0] = *(_BYTE *)(a1 + 32);
      sub_2231813E8(v384, (uint64_t)__p, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a1 + 40);
    sub_22454F564(a1, (unsigned __int8 *)(a2 + 1680));
    if (v386 >= 8)
    {
      if (*(_BYTE *)(a2 + 1682))
      {
        __p[0] = 1;
        sub_22454F564(a1, __p);
        if (*(_QWORD *)(a1 + 40))
        {
          v385 = *(_QWORD **)(a1 + 24);
          __p[0] = *(_BYTE *)(a1 + 32);
          sub_2231813E8(v385, (uint64_t)__p, 1);
        }
        std::ostream::operator<<();
        ++*(_QWORD *)(a1 + 40);
      }
      else
      {
        __p[0] = 0;
        sub_22454F564(a1, __p);
      }
    }
  }
}

void sub_223BA3308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  va_list va;

  va_start(va, a3);
  v6 = *(unsigned int *)(v4 - 112);
  if ((_DWORD)v6 != -1)
    ((void (*)(unint64_t *, uint64_t))off_24EC5FFD0[v6])(&STACK[0x248], v3);
  sub_22319A588((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BA34BC(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2232C17E0((uint64_t)va);
  JUMPOUT(0x223BA34C8);
}

void sub_223BA34E8(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2232C17E0((uint64_t)va);
  JUMPOUT(0x223BA34F4);
}

void sub_223BA3514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223BA3540(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int16 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  __int16 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  _QWORD *v31;
  unsigned __int8 v32;
  _QWORD *v33;
  _QWORD *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  _BYTE v42[32];
  _BYTE v43[32];
  __int16 v44;
  __int16 v45;
  _QWORD v46[2];
  std::__shared_weak_count *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  __int16 v52;
  _BYTE v53[28];
  _BYTE v54[64];
  int v55;
  _OWORD v56[2];
  _BYTE v57[64];
  int v58;
  char v59;
  char v60;
  unsigned __int8 v61;

  v9 = *(unsigned __int8 *)(a2 + 80);
  if (!*(_BYTE *)(a2 + 80))
  {
    LOBYTE(v56[0]) = 0;
    v59 = 0;
    v53[0] = 0;
    sub_22454F564(a1, v53);
    if (v59)
      goto LABEL_43;
LABEL_24:
    if (!v9)
      return;
    goto LABEL_46;
  }
  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(std::__shared_weak_count **)(a2 + 16);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    v14 = *(_WORD *)(a2 + 72);
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    *(_OWORD *)v42 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)&v42[16] = *(_OWORD *)(a2 + 40);
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    v40 = v10;
    v41 = v11;
    v44 = v14;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    v46[0] = &off_24EC1F8C8;
    v10 = v40;
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    v21 = *(_QWORD *)&v42[12];
    v22 = *(_DWORD *)&v42[28];
    v23 = *(_QWORD *)v42;
    v24 = v44;
    do
      v25 = __ldxr(v19);
    while (__stxr(v25 + 1, v19));
    do
      v26 = __ldxr(v19);
    while (__stxr(v26 + 1, v19));
  }
  else
  {
    v41 = 0;
    *(_OWORD *)v43 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)&v43[16] = *(_OWORD *)(a2 + 40);
    v45 = *(_WORD *)(a2 + 72);
    v46[0] = &off_24EC1F8C8;
    v11 = 0;
    v21 = *(_QWORD *)&v43[12];
    v22 = *(_DWORD *)&v43[28];
    v23 = *(_QWORD *)v43;
    v24 = v45;
  }
  v46[1] = v10;
  v47 = v11;
  v48 = v21;
  v49 = 4 * v22;
  v50 = v23;
  v51 = 32;
  v52 = v24;
  if (v11)
  {
    v27 = (unint64_t *)&v11->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v29 = __ldaxr(v27);
    while (__stlxr(v29 - 1, v27));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  sub_22416BFE0((uint64_t)v53, (uint64_t)v46, 0, a4, a5, a6, a7, a8);
  v56[0] = *(_OWORD *)v53;
  *(_OWORD *)((char *)v56 + 12) = *(_OWORD *)&v53[12];
  v57[0] = 0;
  v58 = -1;
  v30 = v55;
  if (v55 != -1)
  {
    ((void (*)(char *, _BYTE *, _BYTE *))off_24EC60008[v55])(&v60, v57, v54);
    v58 = v30;
  }
  v59 = 1;
  v61 = 1;
  sub_22454F564(a1, &v61);
  if (*(_QWORD *)(a1 + 40))
  {
    v31 = *(_QWORD **)(a1 + 24);
    v61 = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v31, (uint64_t)&v61, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  sub_223BA43C0(a1, (uint64_t)v56);
  v32 = *(_BYTE *)(a1 + 34);
  if (*(_QWORD *)(a1 + 40))
  {
    v33 = *(_QWORD **)(a1 + 24);
    v61 = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v33, (uint64_t)&v61, 1);
  }
  v34 = *(_QWORD **)(a1 + 24);
  v61 = v32;
  sub_2231813E8(v34, (uint64_t)&v61, 1);
  ++*(_QWORD *)(a1 + 40);
  if (!v59)
    goto LABEL_24;
LABEL_43:
  if (v58 != -1)
    ((void (*)(unsigned __int8 *, _BYTE *))off_24EC5FFD0[v58])(&v61, v57);
  v58 = -1;
  if (v9)
  {
LABEL_46:
    if (v55 != -1)
      ((void (*)(unsigned __int8 *, _BYTE *))off_24EC5FFD0[v55])(&v61, v54);
    v55 = -1;
    v35 = v47;
    if (v47)
    {
      v36 = (unint64_t *)&v47->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    if (v41)
    {
      v38 = (unint64_t *)&v41->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
  }
}

void sub_223BA3988(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2232C17E0(v1 - 176);
  _Unwind_Resume(a1);
}

void sub_223BA39A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  v29 = *(unsigned int *)(v27 - 80);
  if ((_DWORD)v29 != -1)
    ((void (*)(uint64_t, uint64_t))off_24EC5FFD0[v29])(v27 - 49, v26);
  *(_DWORD *)(v27 - 80) = -1;
  sub_22319A588((uint64_t)&a26);
  sub_22319A5E0((uint64_t)&a19);
  sub_2231CE1A0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223BA3A24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int16 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  _QWORD *v31;
  unsigned __int8 v32;
  _QWORD *v33;
  _QWORD *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  __int16 v46;
  __int16 v47;
  _QWORD v48[2];
  std::__shared_weak_count *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  __int16 v54;
  unsigned __int8 v55[32];
  _BYTE v56[64];
  int v57;
  _OWORD v58[2];
  _BYTE v59[64];
  int v60;
  char v61;
  char v62;
  unsigned __int8 v63;

  v9 = *(unsigned __int8 *)(a2 + 56);
  if (!*(_BYTE *)(a2 + 56))
  {
    LOBYTE(v58[0]) = 0;
    v61 = 0;
    v55[0] = 0;
    sub_22454F564(a1, v55);
    if (v61)
      goto LABEL_43;
LABEL_24:
    if (!v9)
      return;
    goto LABEL_46;
  }
  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(std::__shared_weak_count **)(a2 + 16);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    v14 = *(_WORD *)(a2 + 48);
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    v42 = *(_OWORD *)(a2 + 24);
    v44 = *(_QWORD *)(a2 + 40);
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    v40 = v10;
    v41 = v11;
    v46 = v14;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    v48[0] = &off_24EC1F8C8;
    v10 = v40;
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    v21 = HIDWORD(v44);
    v22 = *((_QWORD *)&v42 + 1);
    v23 = v42;
    v24 = v46;
    do
      v25 = __ldxr(v19);
    while (__stxr(v25 + 1, v19));
    do
      v26 = __ldxr(v19);
    while (__stxr(v26 + 1, v19));
  }
  else
  {
    v41 = 0;
    v43 = *(_OWORD *)(a2 + 24);
    v45 = *(_QWORD *)(a2 + 40);
    v47 = *(_WORD *)(a2 + 48);
    v48[0] = &off_24EC1F8C8;
    v11 = 0;
    v21 = HIDWORD(v45);
    v22 = *((_QWORD *)&v43 + 1);
    v23 = v43;
    v24 = v47;
  }
  v48[1] = v10;
  v49 = v11;
  v50 = v22;
  v51 = v21;
  v52 = v23;
  v53 = 1;
  v54 = v24;
  if (v11)
  {
    v27 = (unint64_t *)&v11->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v29 = __ldaxr(v27);
    while (__stlxr(v29 - 1, v27));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  sub_22416BFE0((uint64_t)v55, (uint64_t)v48, 0, a4, a5, a6, a7, a8);
  v58[0] = *(_OWORD *)v55;
  *(_OWORD *)((char *)v58 + 12) = *(_OWORD *)&v55[12];
  v59[0] = 0;
  v60 = -1;
  v30 = v57;
  if (v57 != -1)
  {
    ((void (*)(char *, _BYTE *, _BYTE *))off_24EC60008[v57])(&v62, v59, v56);
    v60 = v30;
  }
  v61 = 1;
  v63 = 1;
  sub_22454F564(a1, &v63);
  if (*(_QWORD *)(a1 + 40))
  {
    v31 = *(_QWORD **)(a1 + 24);
    v63 = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v31, (uint64_t)&v63, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  sub_223BA43C0(a1, (uint64_t)v58);
  v32 = *(_BYTE *)(a1 + 34);
  if (*(_QWORD *)(a1 + 40))
  {
    v33 = *(_QWORD **)(a1 + 24);
    v63 = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v33, (uint64_t)&v63, 1);
  }
  v34 = *(_QWORD **)(a1 + 24);
  v63 = v32;
  sub_2231813E8(v34, (uint64_t)&v63, 1);
  ++*(_QWORD *)(a1 + 40);
  if (!v61)
    goto LABEL_24;
LABEL_43:
  if (v60 != -1)
    ((void (*)(unsigned __int8 *, _BYTE *))off_24EC5FFD0[v60])(&v63, v59);
  v60 = -1;
  if (v9)
  {
LABEL_46:
    if (v57 != -1)
      ((void (*)(unsigned __int8 *, _BYTE *))off_24EC5FFD0[v57])(&v63, v56);
    v57 = -1;
    v35 = v49;
    if (v49)
    {
      v36 = (unint64_t *)&v49->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    if (v41)
    {
      v38 = (unint64_t *)&v41->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
  }
}

void sub_223BA3E54(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2232C17E0(v1 - 176);
  _Unwind_Resume(a1);
}

void sub_223BA3E70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v5 = *(unsigned int *)(v3 - 80);
  if ((_DWORD)v5 != -1)
    ((void (*)(uint64_t, uint64_t))off_24EC5FFD0[v5])(v3 - 49, v2);
  *(_DWORD *)(v3 - 80) = -1;
  sub_22319A588((uint64_t)va2);
  sub_22319A5E0((uint64_t)va1);
  sub_2231BEEB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BA3EF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int16 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  _QWORD *v31;
  unsigned __int8 v32;
  _QWORD *v33;
  _QWORD *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  __int16 v46;
  __int16 v47;
  _QWORD v48[2];
  std::__shared_weak_count *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  __int16 v54;
  unsigned __int8 v55[32];
  _BYTE v56[64];
  int v57;
  _OWORD v58[2];
  _BYTE v59[64];
  int v60;
  char v61;
  char v62;
  unsigned __int8 v63;

  v9 = *(unsigned __int8 *)(a2 + 56);
  if (!*(_BYTE *)(a2 + 56))
  {
    LOBYTE(v58[0]) = 0;
    v61 = 0;
    v55[0] = 0;
    sub_22454F564(a1, v55);
    if (v61)
      goto LABEL_43;
LABEL_24:
    if (!v9)
      return;
    goto LABEL_46;
  }
  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(std::__shared_weak_count **)(a2 + 16);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    v14 = *(_WORD *)(a2 + 48);
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    v42 = *(_OWORD *)(a2 + 24);
    v44 = *(_QWORD *)(a2 + 40);
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    v40 = v10;
    v41 = v11;
    v46 = v14;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    v48[0] = &off_24EC1F8C8;
    v10 = v40;
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    v21 = HIDWORD(v44);
    v22 = *((_QWORD *)&v42 + 1);
    v23 = v42;
    v24 = v46;
    do
      v25 = __ldxr(v19);
    while (__stxr(v25 + 1, v19));
    do
      v26 = __ldxr(v19);
    while (__stxr(v26 + 1, v19));
  }
  else
  {
    v41 = 0;
    v43 = *(_OWORD *)(a2 + 24);
    v45 = *(_QWORD *)(a2 + 40);
    v47 = *(_WORD *)(a2 + 48);
    v48[0] = &off_24EC1F8C8;
    v11 = 0;
    v21 = HIDWORD(v45);
    v22 = *((_QWORD *)&v43 + 1);
    v23 = v43;
    v24 = v47;
  }
  v48[1] = v10;
  v49 = v11;
  v50 = v22;
  v51 = 2 * v21;
  v52 = v23;
  v53 = 3;
  v54 = v24;
  if (v11)
  {
    v27 = (unint64_t *)&v11->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v29 = __ldaxr(v27);
    while (__stlxr(v29 - 1, v27));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  sub_22416BFE0((uint64_t)v55, (uint64_t)v48, 0, a4, a5, a6, a7, a8);
  v58[0] = *(_OWORD *)v55;
  *(_OWORD *)((char *)v58 + 12) = *(_OWORD *)&v55[12];
  v59[0] = 0;
  v60 = -1;
  v30 = v57;
  if (v57 != -1)
  {
    ((void (*)(char *, _BYTE *, _BYTE *))off_24EC60008[v57])(&v62, v59, v56);
    v60 = v30;
  }
  v61 = 1;
  v63 = 1;
  sub_22454F564(a1, &v63);
  if (*(_QWORD *)(a1 + 40))
  {
    v31 = *(_QWORD **)(a1 + 24);
    v63 = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v31, (uint64_t)&v63, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  sub_223BA43C0(a1, (uint64_t)v58);
  v32 = *(_BYTE *)(a1 + 34);
  if (*(_QWORD *)(a1 + 40))
  {
    v33 = *(_QWORD **)(a1 + 24);
    v63 = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v33, (uint64_t)&v63, 1);
  }
  v34 = *(_QWORD **)(a1 + 24);
  v63 = v32;
  sub_2231813E8(v34, (uint64_t)&v63, 1);
  ++*(_QWORD *)(a1 + 40);
  if (!v61)
    goto LABEL_24;
LABEL_43:
  if (v60 != -1)
    ((void (*)(unsigned __int8 *, _BYTE *))off_24EC5FFD0[v60])(&v63, v59);
  v60 = -1;
  if (v9)
  {
LABEL_46:
    if (v57 != -1)
      ((void (*)(unsigned __int8 *, _BYTE *))off_24EC5FFD0[v57])(&v63, v56);
    v57 = -1;
    v35 = v49;
    if (v49)
    {
      v36 = (unint64_t *)&v49->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    if (v41)
    {
      v38 = (unint64_t *)&v41->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
  }
}

void sub_223BA4324(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2232C17E0(v1 - 176);
  _Unwind_Resume(a1);
}

void sub_223BA4340(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v5 = *(unsigned int *)(v3 - 80);
  if ((_DWORD)v5 != -1)
    ((void (*)(uint64_t, uint64_t))off_24EC5FFD0[v5])(v3 - 49, v2);
  *(_DWORD *)(v3 - 80) = -1;
  sub_22319A588((uint64_t)va2);
  sub_22319A5E0((uint64_t)va1);
  sub_22319EF60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BA43C0(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  int v23;
  __int16 v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t (**v31)();
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  __int16 v38;

  if (*(_QWORD *)(a1 + 40))
  {
    v4 = *(_QWORD **)(a1 + 24);
    LOBYTE(v31) = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v4, (uint64_t)&v31, 1);
  }
  std::ostream::operator<<();
  v5 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v5 + 1;
  if (v5 != -1)
  {
    v6 = *(_QWORD **)(a1 + 24);
    LOBYTE(v31) = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v6, (uint64_t)&v31, 1);
  }
  std::ostream::operator<<();
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v7 + 1;
  if (v7 != -1)
  {
    v8 = *(_QWORD **)(a1 + 24);
    LOBYTE(v31) = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v8, (uint64_t)&v31, 1);
  }
  std::ostream::operator<<();
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v9 + 1;
  if (v9 != -1)
  {
    v10 = *(_QWORD **)(a1 + 24);
    LOBYTE(v31) = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v10, (uint64_t)&v31, 1);
  }
  std::ostream::operator<<();
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v11 + 1;
  if (v11 != -1)
  {
    v12 = *(_QWORD **)(a1 + 24);
    LOBYTE(v31) = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v12, (uint64_t)&v31, 1);
  }
  std::ostream::operator<<();
  v13 = *(_QWORD *)(a1 + 40);
  v14 = *(_BYTE *)(a1 + 34);
  *(_QWORD *)(a1 + 40) = v13 + 1;
  if (v13 != -1)
  {
    v15 = *(_QWORD **)(a1 + 24);
    LOBYTE(v31) = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v15, (uint64_t)&v31, 1);
  }
  v16 = *(_QWORD **)(a1 + 24);
  LOBYTE(v31) = v14;
  sub_2231813E8(v16, (uint64_t)&v31, 1);
  ++*(_QWORD *)(a1 + 40);
  if (*(_WORD *)a2 == 1)
  {
    v17 = *(_DWORD *)(a2 + 96);
    if (v17)
    {
      if (v17 != 1)
        sub_22316DD70();
      v31 = &off_24EC1F8C8;
      sub_2231F47D4(a2 + 32, (uint64_t)&v32);
    }
    else
    {
      v31 = &off_24EC1F8C8;
      v18 = *(_QWORD *)(a2 + 40);
      v19 = *(std::__shared_weak_count **)(a2 + 48);
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldxr(p_shared_owners);
        while (__stxr(v21 + 1, p_shared_owners));
        v22 = *(_QWORD *)(a2 + 72);
        v23 = *(_DWORD *)(a2 + 80);
        v24 = *(_WORD *)(a2 + 84);
        do
          v25 = __ldxr(p_shared_owners);
        while (__stxr(v25 + 1, p_shared_owners));
      }
      else
      {
        v22 = *(_QWORD *)(a2 + 72);
        v23 = *(_DWORD *)(a2 + 80);
        v24 = *(_WORD *)(a2 + 84);
      }
      v32 = v18;
      v33 = v19;
      v34 = *(_QWORD *)(a2 + 56);
      v35 = *(_DWORD *)(a2 + 64);
      v36 = v22;
      v37 = v23;
      v38 = v24;
      if (v19)
      {
        v26 = (unint64_t *)&v19->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
    }
    sub_22416E5E0((const void *)a1, (uint64_t)&v31);
    v28 = v33;
    if (v33)
    {
      v29 = (unint64_t *)&v33->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
  }
  else
  {
    sub_223BA46D8(a1, (unsigned __int16 *)a2);
  }
}

void sub_223BA46D8(uint64_t a1, unsigned __int16 *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  int v11;
  unsigned __int16 v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20[8];
  __int128 v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  std::ios_base v25;
  uint64_t v26;
  int v27;
  uint64_t (**v28)();
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  unsigned __int16 v35;

  v4 = sub_22416E0BC(*a2);
  v5 = *((_DWORD *)a2 + 24);
  if (v5)
  {
    if (v5 != 1)
      sub_22316DD70();
    v28 = &off_24EC1F8C8;
    sub_2231F47D4((uint64_t)(a2 + 16), (uint64_t)&v29);
  }
  else
  {
    v28 = &off_24EC1F8C8;
    v6 = *((_QWORD *)a2 + 5);
    v7 = (std::__shared_weak_count *)*((_QWORD *)a2 + 6);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      v10 = *((_QWORD *)a2 + 9);
      v11 = *((_DWORD *)a2 + 20);
      v12 = a2[42];
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    else
    {
      v10 = *((_QWORD *)a2 + 9);
      v11 = *((_DWORD *)a2 + 20);
      v12 = a2[42];
    }
    v29 = v6;
    v30 = v7;
    v31 = *((_QWORD *)a2 + 7);
    v32 = *((_DWORD *)a2 + 16);
    v33 = v10;
    v34 = v11;
    v35 = v12;
    if (v7)
    {
      v14 = (unint64_t *)&v7->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  v19 = a1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x24BEDB848] + 16;
  v21 = 0u;
  v22 = 0u;
  v23 = 24;
  v24 = MEMORY[0x24BEDB828] + 24;
  v25.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB828] + 64);
  std::ios_base::init(&v25, v20);
  v26 = 0;
  v27 = -1;
  sub_22319F8C4(&v28, (char *)&v24, v4);
  sub_223BA492C(&v19);
  v16 = v30;
  if (v30)
  {
    v17 = (unint64_t *)&v30->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_223BA48C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_223BA492C((uint64_t *)va);
  sub_22319A5E0(v2 - 104);
  _Unwind_Resume(a1);
}

uint64_t *sub_223BA492C(uint64_t *a1)
{
  int v2;
  size_t v3;
  void **p_dst;
  unint64_t v5;
  unint64_t v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  std::string::size_type v10;
  uint64_t v11;
  _QWORD *v12;
  void **v13;
  uint64_t v14;
  std::string::size_type v16[2];
  void **__dst;
  size_t v18;
  int64_t v19;

  v2 = *((_DWORD *)a1 + 26);
  if ((v2 & 0x10) != 0)
  {
    v5 = a1[12];
    v6 = a1[7];
    if (v5 < v6)
    {
      a1[12] = v6;
      v5 = v6;
    }
    v7 = (const void *)a1[6];
    v3 = v5 - (_QWORD)v7;
    if (v5 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_31;
  }
  else
  {
    if ((v2 & 8) == 0)
    {
      v3 = 0;
      HIBYTE(v19) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_14;
    }
    v7 = (const void *)a1[3];
    v3 = a1[5] - (_QWORD)v7;
    if (v3 >= 0x7FFFFFFFFFFFFFF8)
LABEL_31:
      sub_22316DBC0();
  }
  if (v3 >= 0x17)
  {
    v8 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v8 = v3 | 7;
    v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    v18 = v3;
    v19 = v9 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_13;
  }
  HIBYTE(v19) = v3;
  p_dst = (void **)&__dst;
  if (v3)
LABEL_13:
    memmove(p_dst, v7, v3);
LABEL_14:
  *((_BYTE *)p_dst + v3) = 0;
  if (v19 >= 0)
    v10 = HIBYTE(v19);
  else
    v10 = v18;
  v11 = *a1;
  if (*(_QWORD *)(*a1 + 40))
  {
    v12 = *(_QWORD **)(v11 + 24);
    LOBYTE(v16[0]) = *(_BYTE *)(v11 + 32);
    sub_2231813E8(v12, (uint64_t)v16, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(v11 + 40);
  if (SHIBYTE(v19) < 0)
  {
    v13 = __dst;
    if (v10 && !__dst)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v13 = 0;
    }
  }
  else
  {
    v13 = (void **)&__dst;
  }
  v14 = *a1;
  v16[0] = v10;
  v16[1] = (std::string::size_type)v13;
  sub_22454FB5C(v14, v16);
  if (SHIBYTE(v19) < 0)
    operator delete(__dst);
  std::ostream::~ostream();
  a1[1] = MEMORY[0x24BEDB848] + 16;
  if (*((char *)a1 + 95) < 0)
    operator delete((void *)a1[9]);
  std::streambuf::~streambuf();
  return a1;
}

void sub_223BA4B38(uint64_t a1, uint64_t a2)
{
  void **v3;
  void **v4;
  char *v5;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  _QWORD *v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  void **i;
  void **v24;
  char *v25;
  void **v26;
  __int128 v27;
  char *v28;
  __int128 v29;
  _OWORD v30[2];
  __int128 v31;

  v31 = 0u;
  memset(v30, 0, sizeof(v30));
  sub_224518A54((uint64_t)&v26, a2);
  v3 = v26;
  *(_QWORD *)&v30[0] = v26;
  v4 = (void **)v27;
  *(_OWORD *)((char *)v30 + 8) = v27;
  v5 = v28;
  *((_QWORD *)&v30[1] + 1) = v28;
  v25 = (char *)v29;
  v31 = v29;
  if (*(_QWORD *)(a1 + 40))
  {
    v24 = (void **)v27;
    v6 = *(_QWORD **)(a1 + 24);
    LOBYTE(v26) = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v6, (uint64_t)&v26, 1);
    v4 = v24;
  }
  v7 = v4;
  v8 = ((char *)v4 - (char *)v3) / 24;
  std::ostream::operator<<();
  v9 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 40) = v9;
  if (v7 != v3)
  {
    v10 = 24 * v8;
    v11 = (uint64_t)v3;
    do
    {
      sub_22454F620(a1, v11);
      v11 += 24;
      v10 -= 24;
    }
    while (v10);
    v9 = *(_QWORD *)(a1 + 40);
  }
  if (v9)
  {
    v12 = *(_QWORD **)(a1 + 24);
    LOBYTE(v26) = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v12, (uint64_t)&v26, 1);
  }
  v13 = v25;
  std::ostream::operator<<();
  v14 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 40) = v14;
  if (v25 == v5)
  {
    if (!v5)
      goto LABEL_27;
    goto LABEL_26;
  }
  v15 = 0;
  do
  {
    if (v14)
    {
      v16 = *(_QWORD **)(a1 + 24);
      LOBYTE(v26) = *(_BYTE *)(a1 + 32);
      sub_2231813E8(v16, (uint64_t)&v26, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a1 + 40);
    sub_223BA4E3C(a1, (uint64_t)&v5[v15]);
    v17 = *(_BYTE *)(a1 + 34);
    if (*(_QWORD *)(a1 + 40))
    {
      v18 = *(_QWORD **)(a1 + 24);
      LOBYTE(v26) = *(_BYTE *)(a1 + 32);
      sub_2231813E8(v18, (uint64_t)&v26, 1);
    }
    v19 = *(_QWORD **)(a1 + 24);
    LOBYTE(v26) = v17;
    sub_2231813E8(v19, (uint64_t)&v26, 1);
    v14 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 40) = v14;
    v15 += 24;
  }
  while (24 * ((v25 - v5) / 24) != v15);
  if (v5)
  {
    do
    {
      v20 = (std::__shared_weak_count *)*((_QWORD *)v13 - 1);
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v13 -= 24;
    }
    while (v13 != v5);
    v5 = (char *)*((_QWORD *)&v30[1] + 1);
    v3 = *(void ***)&v30[0];
LABEL_26:
    operator delete(v5);
  }
LABEL_27:
  if (v3)
  {
    for (i = (void **)*((_QWORD *)&v30[0] + 1); i != v3; i -= 3)
    {
      if (*((char *)i - 1) < 0)
        operator delete(*(i - 3));
    }
    operator delete(v3);
  }
}

void sub_223BA4DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_2231A6210((void **)va);
  _Unwind_Resume(a1);
}

void sub_223BA4DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_2231A6210((void **)va);
  _Unwind_Resume(a1);
}

void sub_223BA4E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_2231A6210((void **)va);
  _Unwind_Resume(a1);
}

void sub_223BA4E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_2231A6210((void **)va);
  _Unwind_Resume(a1);
}

void sub_223BA4E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_2231A6210((void **)va);
  _Unwind_Resume(a1);
}

void sub_223BA4E3C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  const void *v5;
  CFTypeID TypeID;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  const void *v12;
  CFTypeID v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  const void *v19;
  const __CFBoolean *v20;
  CFTypeID v21;
  _QWORD *v22;
  const void *v23;
  CFTypeID v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *size;
  unint64_t *v28;
  unint64_t v29;
  const __CFArray *v30;
  void *v31;
  __int128 v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  CFIndex Count;
  CFIndex i;
  const void *ValueAtIndex;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::string::size_type v50;
  char *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  std::string::size_type v60;
  int64_t v61;
  _QWORD *v62;
  char v63;
  _QWORD *v64;
  _QWORD *v65;
  std::string::size_type v66;
  void *v67;
  std::__shared_weak_count *v68;
  unint64_t *p_shared_owners;
  unint64_t v70;
  void *v71;
  size_t v72;
  std::string::size_type v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  _QWORD *v80;
  char v81;
  _QWORD *v82;
  _QWORD *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  _QWORD *v92;
  std::string::value_type v93;
  _QWORD *v94;
  _QWORD *v95;
  unint64_t *v96;
  __int128 v97;
  __int128 v98;
  __int128 theArray;
  uint64_t v100;
  __int128 v101;
  std::string __p;
  std::string::size_type v103;
  std::string::size_type v104;
  __int128 v105;

  if (*(_QWORD *)(a1 + 40))
  {
    v4 = *(_QWORD **)(a1 + 24);
    __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v4, (uint64_t)&__p, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  switch(*(_WORD *)a2)
  {
    case 0:
      v5 = *(const void **)(a2 + 8);
      if (v5 && (TypeID = CFNumberGetTypeID(), CFGetTypeID(v5) == TypeID))
      {
        sub_2231A6D40(&v105, *(CFTypeRef *)(a2 + 8));
        v98 = v105;
        if (*((_QWORD *)&v105 + 1))
        {
          v7 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
          do
            v8 = __ldxr(v7);
          while (__stxr(v8 + 1, v7));
          v9 = (std::__shared_weak_count *)*((_QWORD *)&v105 + 1);
          if (*((_QWORD *)&v105 + 1))
          {
            v10 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
            do
              v11 = __ldaxr(v10);
            while (__stlxr(v11 - 1, v10));
            if (!v11)
            {
              ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
              std::__shared_weak_count::__release_weak(v9);
            }
          }
        }
      }
      else
      {
        v98 = 0uLL;
      }
      sub_2231A6E84(&theArray, (uint64_t)&v98);
      sub_2245322E8((CFNumberRef *)&theArray);
      __p.__r_.__value_.__s.__data_[0] = v100;
      __p.__r_.__value_.__s.__data_[8] = v100;
      v103 = 0;
      v104 = 0;
      __p.__r_.__value_.__r.__words[2] = 0;
      v71 = (void *)v101;
      v72 = *((_QWORD *)&v101 + 1) - v101;
      if (*((_QWORD *)&v101 + 1) != (_QWORD)v101)
      {
        if ((v72 & 0x8000000000000000) != 0)
          sub_2240336DC();
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)operator new(*((_QWORD *)&v101 + 1) - v101);
        v103 = __p.__r_.__value_.__r.__words[2];
        v73 = __p.__r_.__value_.__r.__words[2] + v72;
        v104 = __p.__r_.__value_.__r.__words[2] + v72;
        memcpy((void *)__p.__r_.__value_.__r.__words[2], v71, v72);
        v103 = v73;
      }
      if (v71)
      {
        *((_QWORD *)&v101 + 1) = v71;
        operator delete(v71);
      }
      v74 = (std::__shared_weak_count *)*((_QWORD *)&theArray + 1);
      if (*((_QWORD *)&theArray + 1))
      {
        v75 = (unint64_t *)(*((_QWORD *)&theArray + 1) + 8);
        do
          v76 = __ldaxr(v75);
        while (__stlxr(v76 - 1, v75));
        if (!v76)
        {
          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
          std::__shared_weak_count::__release_weak(v74);
        }
      }
      v77 = (std::__shared_weak_count *)*((_QWORD *)&v98 + 1);
      if (*((_QWORD *)&v98 + 1))
      {
        v78 = (unint64_t *)(*((_QWORD *)&v98 + 1) + 8);
        do
          v79 = __ldaxr(v78);
        while (__stlxr(v79 - 1, v78));
        if (!v79)
        {
          ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
          std::__shared_weak_count::__release_weak(v77);
        }
      }
      if (*(_QWORD *)(a1 + 40))
      {
        v80 = *(_QWORD **)(a1 + 24);
        LOBYTE(v100) = *(_BYTE *)(a1 + 32);
        sub_2231813E8(v80, (uint64_t)&v100, 1);
      }
      std::ostream::operator<<();
      ++*(_QWORD *)(a1 + 40);
      LOBYTE(v100) = __p.__r_.__value_.__s.__data_[0];
      sub_22454F564(a1, (unsigned __int8 *)&v100);
      sub_223BA59B8(__p.__r_.__value_.__s.__data_[0], (uint64_t)&__p, a1);
      v81 = *(_BYTE *)(a1 + 34);
      if (*(_QWORD *)(a1 + 40))
      {
        v82 = *(_QWORD **)(a1 + 24);
        LOBYTE(v100) = *(_BYTE *)(a1 + 32);
        sub_2231813E8(v82, (uint64_t)&v100, 1);
      }
      v83 = *(_QWORD **)(a1 + 24);
      LOBYTE(v100) = v81;
      sub_2231813E8(v83, (uint64_t)&v100, 1);
      ++*(_QWORD *)(a1 + 40);
      v31 = (void *)__p.__r_.__value_.__r.__words[2];
      if (!__p.__r_.__value_.__r.__words[2])
        return;
      v103 = __p.__r_.__value_.__r.__words[2];
      goto LABEL_128;
    case 1:
      sub_224527CB8(*(_QWORD *)(a2 + 8), &__p);
      sub_22454F620(a1, (uint64_t)&__p);
      if (!(_BYTE)v103 || (SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
      v31 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_128:
      operator delete(v31);
      return;
    case 2:
      v20 = *(const __CFBoolean **)(a2 + 8);
      if (!v20)
        goto LABEL_28;
      v21 = CFBooleanGetTypeID();
      if (CFGetTypeID(v20) == v21)
      {
        CFBooleanGetValue(v20);
LABEL_28:
        if (*(_QWORD *)(a1 + 40))
          goto LABEL_29;
      }
      else if (*(_QWORD *)(a1 + 40))
      {
LABEL_29:
        v22 = *(_QWORD **)(a1 + 24);
        __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
        sub_2231813E8(v22, (uint64_t)&__p, 1);
      }
      std::ostream::operator<<();
      ++*(_QWORD *)(a1 + 40);
      return;
    case 3:
      v23 = *(const void **)(a2 + 8);
      if (v23 && (v24 = CFArrayGetTypeID(), CFGetTypeID(v23) == v24))
      {
        sub_2231A7194(&__p, *(CFTypeRef *)(a2 + 8));
        theArray = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v25 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v26 = __ldxr(v25);
          while (__stxr(v26 + 1, v25));
          size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v28 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v29 = __ldaxr(v28);
            while (__stlxr(v29 - 1, v28));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
          }
        }
        v30 = (const __CFArray *)theArray;
      }
      else
      {
        v30 = 0;
        theArray = 0uLL;
      }
      memset(&__p, 0, sizeof(__p));
      Count = CFArrayGetCount(v30);
      sub_2231A6C10(&__p.__r_.__value_.__l.__data_, Count);
      if (Count)
      {
        for (i = 0; i != Count; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)theArray, i);
          sub_2231A74D8(&v105, ValueAtIndex);
          v97 = v105;
          if (*((_QWORD *)&v105 + 1))
          {
            v45 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
            do
              v46 = __ldxr(v45);
            while (__stxr(v46 + 1, v45));
            v47 = (std::__shared_weak_count *)*((_QWORD *)&v105 + 1);
            if (*((_QWORD *)&v105 + 1))
            {
              v48 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
              do
                v49 = __ldaxr(v48);
              while (__stlxr(v49 - 1, v48));
              if (!v49)
              {
                ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                std::__shared_weak_count::__release_weak(v47);
              }
            }
          }
          sub_224517D14((uint64_t)&v100, (uint64_t)&v97);
          v50 = __p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
          {
            v51 = sub_2231A7364(&__p.__r_.__value_.__l.__data_, (uint64_t)&v100);
            v52 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)v51;
            if (*((_QWORD *)&v101 + 1))
            {
              v53 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
              do
                v54 = __ldaxr(v53);
              while (__stlxr(v54 - 1, v53));
              if (!v54)
              {
                ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                std::__shared_weak_count::__release_weak(v52);
              }
            }
          }
          else
          {
            *(_WORD *)__p.__r_.__value_.__l.__size_ = v100;
            *(_OWORD *)(v50 + 8) = v101;
            v101 = 0uLL;
            __p.__r_.__value_.__l.__size_ = v50 + 24;
          }
          v55 = (std::__shared_weak_count *)*((_QWORD *)&v97 + 1);
          if (*((_QWORD *)&v97 + 1))
          {
            v56 = (unint64_t *)(*((_QWORD *)&v97 + 1) + 8);
            do
              v57 = __ldaxr(v56);
            while (__stlxr(v57 - 1, v56));
            if (!v57)
            {
              ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
              std::__shared_weak_count::__release_weak(v55);
            }
          }
        }
      }
      if (*(_QWORD *)(a1 + 40))
      {
        v58 = *(_QWORD **)(a1 + 24);
        LOBYTE(v100) = *(_BYTE *)(a1 + 32);
        sub_2231813E8(v58, (uint64_t)&v100, 1);
      }
      std::ostream::operator<<();
      v59 = *(_QWORD *)(a1 + 40) + 1;
      *(_QWORD *)(a1 + 40) = v59;
      v60 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
      {
        v61 = 24 * ((int64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) / 24);
        do
        {
          if (v59)
          {
            v62 = *(_QWORD **)(a1 + 24);
            LOBYTE(v100) = *(_BYTE *)(a1 + 32);
            sub_2231813E8(v62, (uint64_t)&v100, 1);
          }
          std::ostream::operator<<();
          ++*(_QWORD *)(a1 + 40);
          sub_223BA4E3C(a1, v60, 2);
          v63 = *(_BYTE *)(a1 + 34);
          if (*(_QWORD *)(a1 + 40))
          {
            v64 = *(_QWORD **)(a1 + 24);
            LOBYTE(v100) = *(_BYTE *)(a1 + 32);
            sub_2231813E8(v64, (uint64_t)&v100, 1);
          }
          v65 = *(_QWORD **)(a1 + 24);
          LOBYTE(v100) = v63;
          sub_2231813E8(v65, (uint64_t)&v100, 1);
          v59 = *(_QWORD *)(a1 + 40) + 1;
          *(_QWORD *)(a1 + 40) = v59;
          v60 += 24;
          v61 -= 24;
        }
        while (v61);
        v60 = __p.__r_.__value_.__r.__words[0];
      }
      if (v60)
      {
        v66 = __p.__r_.__value_.__l.__size_;
        v67 = (void *)v60;
        if (__p.__r_.__value_.__l.__size_ != v60)
        {
          do
          {
            v68 = *(std::__shared_weak_count **)(v66 - 8);
            if (v68)
            {
              p_shared_owners = (unint64_t *)&v68->__shared_owners_;
              do
                v70 = __ldaxr(p_shared_owners);
              while (__stlxr(v70 - 1, p_shared_owners));
              if (!v70)
              {
                ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                std::__shared_weak_count::__release_weak(v68);
              }
            }
            v66 -= 24;
          }
          while (v66 != v60);
          v67 = (void *)__p.__r_.__value_.__r.__words[0];
        }
        __p.__r_.__value_.__l.__size_ = v60;
        operator delete(v67);
      }
      v84 = (std::__shared_weak_count *)*((_QWORD *)&theArray + 1);
      if (!*((_QWORD *)&theArray + 1))
        return;
      v85 = (unint64_t *)(*((_QWORD *)&theArray + 1) + 8);
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 - 1, v85));
      goto LABEL_153;
    case 4:
      v12 = *(const void **)(a2 + 8);
      if (v12 && (v13 = CFDictionaryGetTypeID(), CFGetTypeID(v12) == v13))
      {
        sub_22319EE1C(&__p, *(CFTypeRef *)(a2 + 8));
        theArray = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v14 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
          v16 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v17 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
        }
        v19 = (const void *)theArray;
      }
      else
      {
        v19 = 0;
        theArray = 0uLL;
      }
      sub_22319EE1C(&__p, v19);
      v32 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v33 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 1, v33));
        v35 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v36 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        do
          v38 = __ldxr(v33);
        while (__stxr(v38 + 1, v33));
        v105 = v32;
        do
          v39 = __ldxr(v33);
        while (__stxr(v39 + 1, v33));
        do
          v40 = __ldaxr(v33);
        while (__stlxr(v40 - 1, v33));
        if (!v40)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v32 + 1) + 16))(*((_QWORD *)&v32 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v32 + 1));
        }
        do
          v41 = __ldaxr(v33);
        while (__stlxr(v41 - 1, v33));
        if (!v41)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v32 + 1) + 16))(*((_QWORD *)&v32 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v32 + 1));
        }
      }
      else
      {
        v105 = __p.__r_.__value_.__r.__words[0];
      }
      sub_224518820(&v100, (uint64_t)&v105);
      v87 = (std::__shared_weak_count *)*((_QWORD *)&v105 + 1);
      if (*((_QWORD *)&v105 + 1))
      {
        v88 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
          std::__shared_weak_count::__release_weak(v87);
        }
      }
      if (*((_QWORD *)&theArray + 1))
      {
        v90 = (unint64_t *)(*((_QWORD *)&theArray + 1) + 8);
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&theArray + 1) + 16))(*((_QWORD *)&theArray + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&theArray + 1));
        }
      }
      if (*(_QWORD *)(a1 + 40))
      {
        v92 = *(_QWORD **)(a1 + 24);
        __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
        sub_2231813E8(v92, (uint64_t)&__p, 1);
      }
      std::ostream::operator<<();
      ++*(_QWORD *)(a1 + 40);
      sub_223BA4B38(a1, &v100, 2);
      v93 = *(_BYTE *)(a1 + 34);
      if (*(_QWORD *)(a1 + 40))
      {
        v94 = *(_QWORD **)(a1 + 24);
        __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
        sub_2231813E8(v94, (uint64_t)&__p, 1);
      }
      v95 = *(_QWORD **)(a1 + 24);
      __p.__r_.__value_.__s.__data_[0] = v93;
      sub_2231813E8(v95, (uint64_t)&__p, 1);
      ++*(_QWORD *)(a1 + 40);
      v84 = (std::__shared_weak_count *)v101;
      if (!(_QWORD)v101)
        return;
      v96 = (unint64_t *)(v101 + 8);
      do
        v86 = __ldaxr(v96);
      while (__stlxr(v86 - 1, v96));
LABEL_153:
      if (!v86)
      {
        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
        std::__shared_weak_count::__release_weak(v84);
      }
      return;
    default:
      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Foundation/FoundationIO/include/Kit/FoundationIO/DictionaryRefIO.h", 281, (uint64_t)"", 0, (uint64_t)"invalid value type identifier", 29, (void (*)(void **))sub_22457406C);
      abort();
  }
}

void sub_223BA5870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va1);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BA588C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  sub_223167354(v6 - 64);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BA58A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BA58BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26)
{
  if ((_BYTE)a26)
  {
    if (a25 < 0)
    {
      operator delete(__p);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_223BA59B8(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  unsigned __int8 v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;

  switch(a1)
  {
    case 0:
      v12 = *(_BYTE *)sub_22454C038(a2 + 8);
      sub_22454F564(a3, &v12);
      return;
    case 1:
      sub_22454C290(a2 + 8);
      if (*(_QWORD *)(a3 + 40))
      {
        v4 = *(_QWORD **)(a3 + 24);
        v14 = *(_BYTE *)(a3 + 32);
        sub_2231813E8(v4, (uint64_t)&v14, 1);
      }
      std::ostream::operator<<();
      goto LABEL_28;
    case 2:
      sub_22454C378(a2 + 8);
      if (*(_QWORD *)(a3 + 40))
      {
        v5 = *(_QWORD **)(a3 + 24);
        v15 = *(_BYTE *)(a3 + 32);
        sub_2231813E8(v5, (uint64_t)&v15, 1);
      }
      std::ostream::operator<<();
      goto LABEL_28;
    case 3:
      sub_22454C460(a2 + 8);
      if (*(_QWORD *)(a3 + 40))
      {
        v6 = *(_QWORD **)(a3 + 24);
        v16 = *(_BYTE *)(a3 + 32);
        sub_2231813E8(v6, (uint64_t)&v16, 1);
      }
      std::ostream::operator<<();
      goto LABEL_28;
    case 5:
      v13 = *(_BYTE *)sub_22454C548(a2 + 8);
      sub_22454F380(a3, &v13);
      return;
    case 6:
      sub_22454C630(a2 + 8);
      if (*(_QWORD *)(a3 + 40))
      {
        v7 = *(_QWORD **)(a3 + 24);
        v17 = *(_BYTE *)(a3 + 32);
        sub_2231813E8(v7, (uint64_t)&v17, 1);
      }
      std::ostream::operator<<();
      goto LABEL_28;
    case 7:
      sub_22454C718(a2 + 8);
      if (*(_QWORD *)(a3 + 40))
      {
        v8 = *(_QWORD **)(a3 + 24);
        v18 = *(_BYTE *)(a3 + 32);
        sub_2231813E8(v8, (uint64_t)&v18, 1);
      }
      std::ostream::operator<<();
      goto LABEL_28;
    case 8:
      sub_22454C800(a2 + 8);
      if (*(_QWORD *)(a3 + 40))
      {
        v9 = *(_QWORD **)(a3 + 24);
        v19 = *(_BYTE *)(a3 + 32);
        sub_2231813E8(v9, (uint64_t)&v19, 1);
      }
      std::ostream::operator<<();
      goto LABEL_28;
    case 11:
      sub_22454C8E8(a2 + 8);
      if (*(_QWORD *)(a3 + 40))
      {
        v10 = *(_QWORD **)(a3 + 24);
        v20 = *(_BYTE *)(a3 + 32);
        sub_2231813E8(v10, (uint64_t)&v20, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a3 + 24) + *(_QWORD *)(**(_QWORD **)(a3 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      goto LABEL_28;
    case 12:
      sub_22454C9D0(a2 + 8);
      if (*(_QWORD *)(a3 + 40))
      {
        v11 = *(_QWORD **)(a3 + 24);
        v21 = *(_BYTE *)(a3 + 32);
        sub_2231813E8(v11, (uint64_t)&v21, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a3 + 24) + *(_QWORD *)(**(_QWORD **)(a3 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
LABEL_28:
      ++*(_QWORD *)(a3 + 40);
      return;
    default:
      sub_22454B274(a1);
  }
}

void sub_223BA5C7C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t i;
  _QWORD *v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  char v11;
  char v12;
  char v13;

  if (*(_BYTE *)(a2 + 128))
  {
    v10 = 1;
    sub_22454F564(a1, &v10);
    if (*(_QWORD *)(a1 + 40))
    {
      v3 = *(_QWORD **)(a1 + 24);
      v11 = *(_BYTE *)(a1 + 32);
      sub_2231813E8(v3, (uint64_t)&v11, 1);
    }
    std::ostream::operator<<();
    v4 = 0;
    v5 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 40) = v5;
    do
    {
      if (v5)
      {
        v6 = *(_QWORD **)(a1 + 24);
        v12 = *(_BYTE *)(a1 + 32);
        sub_2231813E8(v6, (uint64_t)&v12, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v5 = *(_QWORD *)(a1 + 40) + 1;
      *(_QWORD *)(a1 + 40) = v5;
      v4 += 4;
    }
    while (v4 != 64);
    for (i = 0; i != 64; i += 4)
    {
      if (v5)
      {
        v8 = *(_QWORD **)(a1 + 24);
        v13 = *(_BYTE *)(a1 + 32);
        sub_2231813E8(v8, (uint64_t)&v13, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v5 = *(_QWORD *)(a1 + 40) + 1;
      *(_QWORD *)(a1 + 40) = v5;
    }
  }
  else
  {
    v9 = 0;
    sub_22454F564(a1, &v9);
  }
}

uint64_t sub_223BA5DD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v13;
  char v14[1684];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    v13 = 4;
    sub_224501B60(a2 + 24, *(char **)(a2 + 32), (char *)&v13, v14, 4);
    v7 = v13;
    sub_2244FF590((_QWORD *)a2);
    sub_223BA6918(a2, v4, v7);
  }
  else if (v5 == 1)
  {
    v13 = 5;
    sub_224501B60(a2 + 24, *(char **)(a2 + 32), (char *)&v13, v14, 4);
    v8 = v13;
    sub_2244FF590((_QWORD *)a2);
    sub_223BA67FC(a2, v4, v8);
  }
  else
  {
    if (v5)
      sub_22316DD70();
    v13 = 6;
    sub_224501B60(a2 + 24, *(char **)(a2 + 32), (char *)&v13, v14, 4);
    v6 = v13;
    sub_2244FF590((_QWORD *)a2);
    sub_223BA5FAC(a2, v4, v6);
  }
  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v9 + 10) = *(_QWORD *)(a2 + 32) - v9 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
  v13 = 8;
  sub_224501B60(a2 + 24, *(char **)(a2 + 32), (char *)&v13, v14, 4);
  v10 = a1 + 200;
  v11 = v13;
  sub_223B92150((uint64_t)&v13, v10);
  sub_223BA6C18(a2, (uint64_t)&v13, v11);
  return sub_2232BCBE0((uint64_t)&v13);
}

void sub_223BA5F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2232BCBE0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223BA5FAC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_223B8DACC((uint64_t)v8, a2);
  sub_223BA60C8(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_223BA60B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223B8842C((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_223BA60C8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  char *result;
  _BOOL4 v13;
  uint64_t v14;
  char *p_src;
  int64_t v16;
  uint64_t v17;
  char *v18;
  int64_t v19;
  _BOOL4 v20;
  char *v21;
  char *v22;
  uint64_t v23;
  int64_t v24;
  _BOOL4 v25;
  uint64_t v26;
  char *v27;
  int64_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  int64_t v33;
  char *v34;
  uint64_t v35;
  BOOL v36;
  _BOOL4 v37;
  unint64_t v38;
  uint64_t __src;
  uint64_t v40;

  v6 = (char *)(a2 + 8);
  LODWORD(__src) = 2;
  v7 = a1 + 24;
  sub_224501B60(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 4, 4);
  sub_2244FF590((_QWORD *)a1);
  sub_224501B60(v7, *(char **)(a1 + 32), v6, (char *)(a2 + 16), 8);
  LOBYTE(__src) = *(_BYTE *)(a2 + 16);
  sub_224501B60(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v8 + 10) = *(_QWORD *)(a1 + 32) - v8 - 18;
  *(_QWORD *)(a1 + 56) -= 8;
  if (*(_BYTE *)(a2 + 48))
  {
    LOBYTE(__src) = 1;
    sub_224501B60(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
    v9 = *(unsigned __int8 *)(a2 + 47);
    if ((v9 & 0x80u) != 0)
      v9 = *(_QWORD *)(a2 + 32);
    __src = v9;
    sub_224501B60(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&v40, 8);
    if (*(char *)(a2 + 47) < 0)
    {
      v10 = *(char **)(a2 + 24);
      v11 = *(_QWORD *)(a2 + 32);
      if (!v10)
      {
        if (v11)
        {
          v13 = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
          v10 = 0;
          if (v13)
            goto LABEL_57;
        }
      }
    }
    else
    {
      v10 = (char *)(a2 + 24);
      v11 = *(unsigned __int8 *)(a2 + 47);
    }
    result = sub_224501B60(v7, *(char **)(a1 + 32), v10, &v10[v11], v11);
    if (a3 < 4)
      return result;
  }
  else
  {
    LOBYTE(__src) = 0;
    result = sub_224501B60(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
    if (a3 < 4)
      return result;
  }
  result = sub_223BA66D8(a1, (char *)(a2 + 56));
  if (a3 == 5)
  {
    if (*(_BYTE *)(a2 + 104))
    {
      LOBYTE(__src) = 1;
      sub_224501B60(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
      v14 = *(unsigned __int8 *)(a2 + 103);
      if ((v14 & 0x80u) != 0)
        v14 = *(_QWORD *)(a2 + 88);
      __src = v14;
      sub_224501B60(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&v40, 8);
      if ((*(char *)(a2 + 103) & 0x80000000) == 0)
      {
        p_src = (char *)(a2 + 80);
        v16 = *(unsigned __int8 *)(a2 + 103);
LABEL_27:
        v21 = *(char **)(a1 + 32);
        v22 = &p_src[v16];
        v23 = v7;
        v24 = v16;
        return sub_224501B60(v23, v21, p_src, v22, v24);
      }
      p_src = *(char **)(a2 + 80);
      v16 = *(_QWORD *)(a2 + 88);
      if (p_src)
        goto LABEL_27;
      if (!v16)
        goto LABEL_27;
      v20 = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
      p_src = 0;
      if (!v20)
        goto LABEL_27;
LABEL_57:
      abort();
    }
LABEL_30:
    LOBYTE(__src) = 0;
    v21 = *(char **)(a1 + 32);
    v22 = (char *)&__src + 1;
    p_src = (char *)&__src;
    v23 = v7;
    v24 = 1;
    return sub_224501B60(v23, v21, p_src, v22, v24);
  }
  if (a3 < 6)
    return result;
  if (!*(_BYTE *)(a2 + 104))
  {
    LOBYTE(__src) = 0;
    sub_224501B60(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
    if (*(_BYTE *)(a2 + 136))
      goto LABEL_37;
LABEL_29:
    LOBYTE(__src) = 0;
    sub_224501B60(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
    if (!*(_BYTE *)(a2 + 168))
      goto LABEL_30;
    goto LABEL_45;
  }
  LOBYTE(__src) = 1;
  sub_224501B60(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
  v17 = *(unsigned __int8 *)(a2 + 103);
  if ((v17 & 0x80u) != 0)
    v17 = *(_QWORD *)(a2 + 88);
  __src = v17;
  sub_224501B60(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&v40, 8);
  if (*(char *)(a2 + 103) < 0)
  {
    v18 = *(char **)(a2 + 80);
    v19 = *(_QWORD *)(a2 + 88);
    if (!v18)
    {
      if (v19)
      {
        v25 = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
        v18 = 0;
        if (v25)
          goto LABEL_57;
      }
    }
  }
  else
  {
    v18 = (char *)(a2 + 80);
    v19 = *(unsigned __int8 *)(a2 + 103);
  }
  sub_224501B60(v7, *(char **)(a1 + 32), v18, &v18[v19], v19);
  if (!*(_BYTE *)(a2 + 136))
    goto LABEL_29;
LABEL_37:
  LOBYTE(__src) = 1;
  sub_224501B60(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
  v26 = *(unsigned __int8 *)(a2 + 135);
  if ((v26 & 0x80u) != 0)
    v26 = *(_QWORD *)(a2 + 120);
  __src = v26;
  sub_224501B60(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&v40, 8);
  if (*(char *)(a2 + 135) < 0)
  {
    v27 = *(char **)(a2 + 112);
    v28 = *(_QWORD *)(a2 + 120);
    if (!v27)
    {
      if (v28)
      {
        v29 = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
        v27 = 0;
        if (v29)
          goto LABEL_57;
      }
    }
  }
  else
  {
    v27 = (char *)(a2 + 112);
    v28 = *(unsigned __int8 *)(a2 + 135);
  }
  sub_224501B60(v7, *(char **)(a1 + 32), v27, &v27[v28], v28);
  if (!*(_BYTE *)(a2 + 168))
    goto LABEL_30;
LABEL_45:
  LOBYTE(__src) = 1;
  sub_224501B60(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
  v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 152) - *(_QWORD *)(a2 + 144)) >> 3);
  result = sub_224501B60(v7, *(char **)(a1 + 32), (char *)&v38, (char *)&__src, 8);
  v30 = *(_QWORD *)(a2 + 144);
  v31 = *(_QWORD *)(a2 + 152) - v30;
  if (v31)
  {
    for (i = 24 * (v31 / 24); i; i -= 24)
    {
      v35 = *(unsigned __int8 *)(v30 + 23);
      if ((v35 & 0x80u) != 0)
        v35 = *(_QWORD *)(v30 + 8);
      __src = v35;
      sub_224501B60(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&v40, 8);
      if (*(char *)(v30 + 23) < 0)
      {
        v34 = *(char **)v30;
        v33 = *(_QWORD *)(v30 + 8);
        if (*(_QWORD *)v30)
          v36 = 1;
        else
          v36 = v33 == 0;
        if (!v36)
        {
          v37 = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
          v34 = 0;
          if (v37)
            goto LABEL_57;
        }
      }
      else
      {
        v33 = *(unsigned __int8 *)(v30 + 23);
        v34 = (char *)v30;
      }
      result = sub_224501B60(v7, *(char **)(a1 + 32), v34, &v34[v33], v33);
      v30 += 24;
    }
  }
  return result;
}

char *sub_223BA66D8(uint64_t a1, char *a2)
{
  uint64_t v3;
  char *result;
  uint64_t v6;
  char v7;
  char __src;
  int v9;
  char v10[3];
  char v11;
  uint64_t v12;

  v3 = a1 + 24;
  if (a2[16])
  {
    __src = 1;
    sub_224501B60(a1 + 24, *(char **)(a1 + 32), &__src, (char *)&v9, 1);
    v9 = 2;
    sub_224501B60(v3, *(char **)(a1 + 32), (char *)&v9, v10, 4);
    sub_2244FF590((_QWORD *)a1);
    sub_224501B60(v3, *(char **)(a1 + 32), a2, a2 + 8, 8);
    v11 = a2[8];
    result = sub_224501B60(v3, *(char **)(a1 + 32), &v11, (char *)&v12, 1);
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
    *(_QWORD *)(v6 + 10) = *(_QWORD *)(a1 + 32) - v6 - 18;
    *(_QWORD *)(a1 + 56) -= 8;
  }
  else
  {
    v7 = 0;
    return sub_224501B60(a1 + 24, *(char **)(a1 + 32), &v7, &__src, 1);
  }
  return result;
}

void sub_223BA67FC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_223B8EFDC((uint64_t)v8, a2);
  sub_223BA60C8(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_223BA6900(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223B8842C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BA6918(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_223B8F6B8((uint64_t)v8, a2);
  sub_223BA6A34(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_223BA6A1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223B8842C((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_223BA6A34(uint64_t a1, uint64_t a2, unsigned int a3)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  char *result;
  _BOOL4 v13;
  int v14;
  char v15;
  char __src;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;

  v6 = (char *)(a2 + 8);
  v14 = 2;
  v7 = a1 + 24;
  sub_224501B60(a1 + 24, *(char **)(a1 + 32), (char *)&v14, &v15, 4);
  sub_2244FF590((_QWORD *)a1);
  sub_224501B60(v7, *(char **)(a1 + 32), v6, (char *)(a2 + 16), 8);
  __src = *(_BYTE *)(a2 + 16);
  sub_224501B60(v7, *(char **)(a1 + 32), &__src, &v17, 1);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v8 + 10) = *(_QWORD *)(a1 + 32) - v8 - 18;
  *(_QWORD *)(a1 + 56) -= 8;
  if (!*(_BYTE *)(a2 + 48))
  {
    v17 = 0;
    result = sub_224501B60(v7, *(char **)(a1 + 32), &v17, &v18, 1);
    if (a3 < 4)
      return result;
    return sub_223BA66D8(a1, (char *)(a2 + 56));
  }
  v18 = 1;
  sub_224501B60(v7, *(char **)(a1 + 32), &v18, (char *)&v19, 1);
  v9 = *(unsigned __int8 *)(a2 + 47);
  if ((v9 & 0x80u) != 0)
    v9 = *(_QWORD *)(a2 + 32);
  v19 = v9;
  sub_224501B60(v7, *(char **)(a1 + 32), (char *)&v19, (char *)&v20, 8);
  if (*(char *)(a2 + 47) < 0)
  {
    v10 = *(char **)(a2 + 24);
    v11 = *(_QWORD *)(a2 + 32);
    if (!v10 && v11)
    {
      v13 = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
      v10 = 0;
      if (v13)
        abort();
    }
  }
  else
  {
    v10 = (char *)(a2 + 24);
    v11 = *(unsigned __int8 *)(a2 + 47);
  }
  result = sub_224501B60(v7, *(char **)(a1 + 32), v10, &v10[v11], v11);
  if (a3 >= 4)
    return sub_223BA66D8(a1, (char *)(a2 + 56));
  return result;
}

char *sub_223BA6C18(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  __int16 v30;
  unint64_t v31;
  __int128 v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  __int16 v42;
  unint64_t v43;
  unint64_t v44;
  char v45;
  __int16 v46;
  __int128 v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  int v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  int v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  __int16 v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  __int16 v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  int v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  __int16 v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  __int16 v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  __int16 v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t *v141;
  unint64_t v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  int v153;
  __int16 v154;
  unint64_t *v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unsigned int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unsigned int v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  uint64_t v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  __int16 v213;
  unint64_t v214;
  __int128 v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  uint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  uint64_t v223;
  int v224;
  uint64_t v225;
  __int16 v226;
  unint64_t v227;
  unint64_t v228;
  char v229;
  __int16 v230;
  __int128 v231;
  unint64_t *v232;
  unint64_t v233;
  unint64_t v234;
  int v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  uint64_t v248;
  char *v249;
  int v250;
  char **v251;
  unsigned int v252;
  unsigned int v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  char *v257;
  char *v258;
  uint64_t v259;
  uint64_t v260;
  char *v261;
  char *v262;
  uint64_t v263;
  uint64_t v264;
  char *v265;
  char *v266;
  uint64_t v267;
  uint64_t v268;
  char *v269;
  char *v270;
  uint64_t v271;
  uint64_t v272;
  char *v273;
  char *v274;
  uint64_t v275;
  uint64_t v276;
  char *v277;
  char *v278;
  uint64_t v279;
  uint64_t v280;
  char *v281;
  char v282;
  unsigned int v283;
  char *result;
  char **v285;
  char **j;
  unsigned int v287;
  char *v288;
  char *v289;
  char *v290;
  char *v291;
  char *v292;
  uint64_t i;
  uint64_t v296;
  unint64_t v298;
  uint64_t (**v299)();
  uint64_t v300;
  std::__shared_weak_count *v301;
  _BYTE v302[32];
  __int128 v303;
  __int16 v304;
  _QWORD v305[2];
  std::__shared_weak_count *v306;
  uint64_t v307;
  int v308;
  uint64_t v309;
  int v310;
  __int16 v311;
  _OWORD v312[2];
  _BYTE v313[64];
  int v314;
  uint64_t (**v315)();
  uint64_t v316;
  std::__shared_weak_count *v317;
  __int128 v318;
  uint64_t v319;
  __int16 v320;
  uint64_t (**v321)();
  uint64_t v322;
  std::__shared_weak_count *v323;
  uint64_t v324;
  int v325;
  uint64_t v326;
  int v327;
  __int16 v328;
  uint64_t (**v329)();
  uint64_t v330;
  std::__shared_weak_count *v331;
  _BYTE v332[32];
  __int128 v333;
  __int16 v334;
  uint64_t (**v335)();
  uint64_t v336;
  std::__shared_weak_count *v337;
  uint64_t v338;
  int v339;
  uint64_t v340;
  int v341;
  __int16 v342;
  _BYTE v343[28];
  _BYTE v344[64];
  int v345;
  unint64_t v346;
  char v347[4];
  int v348;
  _BYTE __src[32];
  _QWORD v350[2];
  void *v351;
  void *v352;
  int v353;
  void *v354;
  void *v355;
  void *v356;
  void *v357;
  void *v358;
  void *v359;
  void *v360;
  void *v361;
  void *__p;
  void *v363;
  char v364;
  char v365;
  uint64_t v366;

  v366 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)__src = 6;
  v3 = a1 + 24;
  sub_224501B60(a1 + 24, *(char **)(a1 + 32), __src, &__src[4], 4);
  v10 = *(_DWORD *)__src;
  v11 = *(_DWORD *)__src - 2;
  if (*(_DWORD *)__src <= 2u)
  {
    __src[0] = 0;
    LOBYTE(v352) = 0;
    sub_223BAA280(a1, (uint64_t)__src, v4, v5, v6, v7, v8, v9);
    v18 = a2;
LABEL_5:
    __src[0] = 0;
    LOBYTE(v352) = 0;
    sub_223BAA280(a1, (uint64_t)__src, v12, v13, v14, v15, v16, v17);
    if (v10 < 4)
    {
      __src[0] = 0;
      LOBYTE(v355) = 0;
      sub_223BA95F8(a1, (uint64_t)__src, v24, v19, v20, v21, v22, v23);
      goto LABEL_56;
    }
    goto LABEL_6;
  }
  sub_223BA9E58(a1, a2 + 8, v4, v5, v6, v7, v8, v9);
  v18 = a2;
  if (v10 < 5)
    goto LABEL_5;
  sub_223BA9E58(a1, a2 + 72, v12, v13, v14, v15, v16, v17);
  v18 = a2;
LABEL_6:
  v25 = *(unsigned __int8 *)(v18 + 216);
  if (*(_BYTE *)(v18 + 216))
  {
    v299 = &off_24EC25150;
    v26 = *(_QWORD *)(v18 + 144);
    v27 = *(std::__shared_weak_count **)(v18 + 152);
    if (v27)
    {
      p_shared_owners = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldxr(p_shared_owners);
      while (__stxr(v29 + 1, p_shared_owners));
      v30 = *(_WORD *)(v18 + 208);
      do
        v31 = __ldxr(p_shared_owners);
      while (__stxr(v31 + 1, p_shared_owners));
      v32 = *(_OWORD *)(v18 + 176);
      *(_OWORD *)v302 = *(_OWORD *)(v18 + 160);
      *(_OWORD *)&v302[16] = v32;
      v303 = *(_OWORD *)(v18 + 192);
      do
        v33 = __ldxr(p_shared_owners);
      while (__stxr(v33 + 1, p_shared_owners));
      v300 = v26;
      v301 = v27;
      v304 = v30;
      do
        v34 = __ldaxr(p_shared_owners);
      while (__stlxr(v34 - 1, p_shared_owners));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
      do
        v35 = __ldaxr(p_shared_owners);
      while (__stlxr(v35 - 1, p_shared_owners));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
      v305[0] = &off_24EC1F8C8;
      v26 = v300;
      v36 = v301;
      v37 = (unint64_t *)&v301->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
      v39 = *(_QWORD *)&v302[12];
      v40 = *(_DWORD *)&v302[28];
      v41 = *(_QWORD *)v302;
      v42 = v304;
      do
        v43 = __ldxr(v37);
      while (__stxr(v43 + 1, v37));
      do
        v44 = __ldxr(v37);
      while (__stxr(v44 + 1, v37));
    }
    else
    {
      v46 = *(_WORD *)(v18 + 208);
      v300 = *(_QWORD *)(v18 + 144);
      v301 = 0;
      v47 = *(_OWORD *)(v18 + 176);
      *(_OWORD *)v302 = *(_OWORD *)(v18 + 160);
      *(_OWORD *)&v302[16] = v47;
      v303 = *(_OWORD *)(v18 + 192);
      v304 = v46;
      v305[0] = &off_24EC1F8C8;
      v36 = 0;
      v39 = *(_QWORD *)&v302[12];
      v40 = HIDWORD(v47);
      v41 = *(_QWORD *)v302;
      v42 = v304;
    }
    v305[1] = v26;
    v306 = v36;
    v307 = v39;
    v308 = 2 * v40;
    v309 = v41;
    v310 = 31;
    v311 = v42;
    if (v36)
    {
      v48 = (unint64_t *)&v36->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
      do
        v50 = __ldaxr(v48);
      while (__stlxr(v50 - 1, v48));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    sub_22416BFE0((uint64_t)v312, (uint64_t)v305, 0, v19, v20, v21, v22, v23);
    *(_OWORD *)__src = v312[0];
    *(_OWORD *)&__src[12] = *(_OWORD *)((char *)v312 + 12);
    LOBYTE(v350[0]) = 0;
    LODWORD(v356) = -1;
    v51 = v314;
    if (v314 != -1)
    {
      ((void (*)(uint64_t (***)(), _QWORD *, _BYTE *))off_24EC60008[v314])(&v329, v350, v313);
      LODWORD(v356) = v51;
    }
    v45 = 1;
  }
  else
  {
    v45 = 0;
    __src[0] = 0;
  }
  LOBYTE(v357) = v45;
  sub_223BAA6A8(a1, (uint64_t)__src);
  if ((_BYTE)v357)
  {
    if ((_DWORD)v356 != -1)
      ((void (*)(_BYTE *, _QWORD *))off_24EC5FFD0[v356])(v343, v350);
    LODWORD(v356) = -1;
  }
  if (!v25)
    goto LABEL_56;
  if (v314 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_24EC5FFD0[v314])(v343, v313);
  v314 = -1;
  v52 = v306;
  if (!v306)
    goto LABEL_52;
  v53 = (unint64_t *)&v306->__shared_owners_;
  do
    v54 = __ldaxr(v53);
  while (__stlxr(v54 - 1, v53));
  if (!v54)
  {
    ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
    std::__shared_weak_count::__release_weak(v52);
    v55 = v301;
    if (!v301)
      goto LABEL_56;
  }
  else
  {
LABEL_52:
    v55 = v301;
    if (!v301)
      goto LABEL_56;
  }
  v56 = (unint64_t *)&v55->__shared_owners_;
  do
    v57 = __ldaxr(v56);
  while (__stlxr(v57 - 1, v56));
  if (v57)
  {
LABEL_56:
    if (*(_BYTE *)(v18 + 496))
      goto LABEL_57;
    goto LABEL_113;
  }
  ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
  std::__shared_weak_count::__release_weak(v55);
  if (*(_BYTE *)(v18 + 496))
  {
LABEL_57:
    __src[0] = 1;
    sub_224501B60(v3, *(char **)(a1 + 32), __src, &__src[1], 1);
    *(_DWORD *)__src = 2;
    sub_224501B60(v3, *(char **)(a1 + 32), __src, &__src[4], 4);
    if (*(_DWORD *)__src <= 1u)
    {
      LOBYTE(v329) = 0;
      LOBYTE(v333) = 0;
      *(_QWORD *)v343 = &off_24EC1F958;
      sub_2231B3FDC((uint64_t)&v343[8]);
      sub_22416BD7C((uint64_t)__src, (uint64_t)v343, 0);
      v63 = *(std::__shared_weak_count **)&v343[16];
      if (!*(_QWORD *)&v343[16])
        goto LABEL_62;
      v64 = (unint64_t *)(*(_QWORD *)&v343[16] + 8);
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
        *(_DWORD *)&__src[24] = 0;
        v66 = v333;
        if ((_BYTE)v333)
        {
LABEL_63:
          v315 = &off_24EC21230;
          v67 = v330;
          v68 = v331;
          if (v331)
          {
            v69 = (unint64_t *)&v331->__shared_owners_;
            do
              v70 = __ldxr(v69);
            while (__stxr(v70 + 1, v69));
            v71 = *(_WORD *)&v332[24];
            do
              v72 = __ldxr(v69);
            while (__stxr(v72 + 1, v69));
            v318 = *(_OWORD *)v332;
            v319 = *(_QWORD *)&v332[16];
            do
              v73 = __ldxr(v69);
            while (__stxr(v73 + 1, v69));
            v316 = v67;
            v317 = v68;
            v320 = v71;
            do
              v74 = __ldaxr(v69);
            while (__stlxr(v74 - 1, v69));
            if (!v74)
            {
              ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
              std::__shared_weak_count::__release_weak(v68);
            }
            do
              v75 = __ldaxr(v69);
            while (__stlxr(v75 - 1, v69));
            if (!v75)
            {
              ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
              std::__shared_weak_count::__release_weak(v68);
            }
            v321 = &off_24EC1F8C8;
            v76 = v316;
            v77 = v317;
            if (v317)
            {
              v78 = (unint64_t *)&v317->__shared_owners_;
              do
                v79 = __ldxr(v78);
              while (__stxr(v79 + 1, v78));
              v80 = HIDWORD(v319);
              v81 = *((_QWORD *)&v318 + 1);
              v82 = v318;
              v83 = v320;
              do
                v84 = __ldxr(v78);
              while (__stxr(v84 + 1, v78));
              do
                v85 = __ldxr(v78);
              while (__stxr(v85 + 1, v78));
              goto LABEL_120;
            }
          }
          else
          {
            v316 = v330;
            v317 = 0;
            v318 = *(_OWORD *)v332;
            v319 = *(_QWORD *)&v332[16];
            v320 = *(_WORD *)&v332[24];
            v321 = &off_24EC1F8C8;
            v76 = v330;
            v77 = 0;
          }
          v80 = HIDWORD(v319);
          v81 = *((_QWORD *)&v318 + 1);
          v82 = v318;
          v83 = v320;
LABEL_120:
          v322 = v76;
          v323 = v77;
          v324 = v81;
          v325 = 4 * v80;
          v326 = v82;
          v327 = 4;
          v328 = v83;
          if (v77)
          {
            v121 = (unint64_t *)&v77->__shared_owners_;
            do
              v122 = __ldaxr(v121);
            while (__stlxr(v122 - 1, v121));
            if (!v122)
            {
              ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
              std::__shared_weak_count::__release_weak(v77);
            }
            do
              v123 = __ldaxr(v121);
            while (__stlxr(v123 - 1, v121));
            if (!v123)
            {
              ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
              std::__shared_weak_count::__release_weak(v77);
            }
          }
          sub_22416BFE0((uint64_t)v343, (uint64_t)&v321, 0, v58, v59, v60, v61, v62);
LABEL_129:
          LODWORD(v335) = 2;
          sub_224501B60(v3, *(char **)(a1 + 32), (char *)&v335, (char *)&v335 + 4, 4);
          sub_2244FF590((_QWORD *)a1);
          sub_223BAA7A4(a1, (uint64_t)v343);
          v124 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
          *(_QWORD *)(v124 + 10) = *(_QWORD *)(a1 + 32) - v124 - 18;
          *(_QWORD *)(a1 + 56) -= 8;
          if (v345 != -1)
            ((void (*)(uint64_t (***)(), _BYTE *))off_24EC5FFD0[v345])(&v335, v344);
          v345 = -1;
          if (v66)
          {
            v125 = v323;
            if (v323)
            {
              v126 = (unint64_t *)&v323->__shared_owners_;
              do
                v127 = __ldaxr(v126);
              while (__stlxr(v127 - 1, v126));
              if (!v127)
              {
                ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                std::__shared_weak_count::__release_weak(v125);
              }
            }
            v128 = v317;
            if (v317)
            {
              v129 = (unint64_t *)&v317->__shared_owners_;
              do
                v130 = __ldaxr(v129);
              while (__stlxr(v130 - 1, v129));
              if (!v130)
              {
                ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                std::__shared_weak_count::__release_weak(v128);
              }
            }
          }
          if ((_DWORD)v356 != -1)
            ((void (*)(_BYTE *, _QWORD *))off_24EC5FFD0[v356])(v343, v350);
          v335 = &off_24EC1F8C8;
          v131 = v330;
          v132 = v331;
          if (v331)
          {
            v133 = (unint64_t *)&v331->__shared_owners_;
            do
              v134 = __ldxr(v133);
            while (__stxr(v134 + 1, v133));
            v135 = *(_DWORD *)&v332[20];
            v137 = *(_QWORD *)v332;
            v136 = *(_QWORD *)&v332[8];
            v138 = *(_WORD *)&v332[24];
            do
              v139 = __ldxr(v133);
            while (__stxr(v139 + 1, v133));
            do
              v140 = __ldxr(v133);
            while (__stxr(v140 + 1, v133));
          }
          else
          {
            v135 = *(_DWORD *)&v332[20];
            v137 = *(_QWORD *)v332;
            v136 = *(_QWORD *)&v332[8];
            v138 = *(_WORD *)&v332[24];
          }
          v336 = v131;
          v337 = v132;
          v338 = v136;
          v339 = 4 * v135;
          v340 = v137;
          v341 = 4;
          v342 = v138;
          if (v132)
          {
            v141 = (unint64_t *)&v132->__shared_owners_;
            do
              v142 = __ldaxr(v141);
            while (__stlxr(v142 - 1, v141));
            if (!v142)
            {
              ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
              std::__shared_weak_count::__release_weak(v132);
            }
            do
              v143 = __ldaxr(v141);
            while (__stlxr(v143 - 1, v141));
            if (!v143)
            {
              ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
              std::__shared_weak_count::__release_weak(v132);
            }
          }
          __src[8] = 0;
          __src[24] = 0;
          LOBYTE(v350[0]) = 0;
          LOBYTE(v351) = 0;
          LOBYTE(v352) = 1;
          v353 = 0;
          sub_22432B21C((uint64_t)&v335, 3u, (uint64_t)v343);
          sub_2232C1348(a2 + 224, (uint64_t)v343);
          v144 = *(std::__shared_weak_count **)&v343[16];
          if (*(_QWORD *)&v343[16])
          {
            v145 = (unint64_t *)(*(_QWORD *)&v343[16] + 8);
            do
              v146 = __ldaxr(v145);
            while (__stlxr(v146 - 1, v145));
            if (!v146)
            {
              ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
              std::__shared_weak_count::__release_weak(v144);
            }
          }
          v147 = v337;
          if (v337)
          {
            v148 = (unint64_t *)&v337->__shared_owners_;
            do
              v149 = __ldaxr(v148);
            while (__stlxr(v149 - 1, v148));
            if (!v149)
            {
              ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
              std::__shared_weak_count::__release_weak(v147);
            }
          }
          if ((_BYTE)v333)
          {
            v329 = &off_24EC27198;
            v150 = v331;
            if (v331)
            {
              v151 = (unint64_t *)&v331->__shared_owners_;
              do
                v152 = __ldaxr(v151);
              while (__stlxr(v152 - 1, v151));
              if (!v152)
              {
                ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
                std::__shared_weak_count::__release_weak(v150);
              }
            }
          }
          goto LABEL_205;
        }
      }
      else
      {
LABEL_62:
        *(_DWORD *)&__src[24] = 0;
        v66 = v333;
        if ((_BYTE)v333)
          goto LABEL_63;
      }
      *(_OWORD *)v343 = *(_OWORD *)__src;
      *(_OWORD *)&v343[12] = *(_OWORD *)&__src[12];
      v344[0] = 0;
      v345 = -1;
      v120 = (int)v356;
      if ((_DWORD)v356 != -1)
      {
        ((void (*)(uint64_t (***)(), _BYTE *, _QWORD *))off_24EC5FFF8[v356])(&v321, v344, v350);
        v345 = v120;
      }
      goto LABEL_129;
    }
    *(_QWORD *)v343 = &off_24EC1F958;
    sub_2231B3FDC((uint64_t)&v343[8]);
    sub_22416BD7C((uint64_t)__src, (uint64_t)v343, 0);
    v91 = *(std::__shared_weak_count **)&v343[16];
    if (!*(_QWORD *)&v343[16])
      goto LABEL_88;
    v92 = (unint64_t *)(*(_QWORD *)&v343[16] + 8);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
      *(_DWORD *)&__src[24] = 0;
      v94 = *(unsigned __int8 *)(a2 + 280);
      if (*(_BYTE *)(a2 + 280))
      {
LABEL_89:
        v315 = &off_24EC200A8;
        v95 = *(_QWORD *)(a2 + 232);
        v96 = *(std::__shared_weak_count **)(a2 + 240);
        if (v96)
        {
          v97 = (unint64_t *)&v96->__shared_owners_;
          do
            v98 = __ldxr(v97);
          while (__stxr(v98 + 1, v97));
          v99 = *(_WORD *)(a2 + 272);
          do
            v100 = __ldxr(v97);
          while (__stxr(v100 + 1, v97));
          v318 = *(_OWORD *)(a2 + 248);
          v319 = *(_QWORD *)(a2 + 264);
          do
            v101 = __ldxr(v97);
          while (__stxr(v101 + 1, v97));
          v316 = v95;
          v317 = v96;
          v320 = v99;
          do
            v102 = __ldaxr(v97);
          while (__stlxr(v102 - 1, v97));
          if (!v102)
          {
            ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
            std::__shared_weak_count::__release_weak(v96);
          }
          do
            v103 = __ldaxr(v97);
          while (__stlxr(v103 - 1, v97));
          if (!v103)
          {
            ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
            std::__shared_weak_count::__release_weak(v96);
          }
          v321 = &off_24EC1F8C8;
          v104 = v316;
          v105 = v317;
          if (v317)
          {
            v106 = (unint64_t *)&v317->__shared_owners_;
            do
              v107 = __ldxr(v106);
            while (__stxr(v107 + 1, v106));
            v108 = HIDWORD(v319);
            v109 = *((_QWORD *)&v318 + 1);
            v110 = v318;
            v111 = v320;
            do
              v112 = __ldxr(v106);
            while (__stxr(v112 + 1, v106));
            do
              v113 = __ldxr(v106);
            while (__stxr(v113 + 1, v106));
            goto LABEL_181;
          }
        }
        else
        {
          v154 = *(_WORD *)(a2 + 272);
          v316 = *(_QWORD *)(a2 + 232);
          v317 = 0;
          v318 = *(_OWORD *)(a2 + 248);
          v319 = *(_QWORD *)(a2 + 264);
          v320 = v154;
          v321 = &off_24EC1F8C8;
          v104 = v316;
          v105 = 0;
        }
        v108 = HIDWORD(v319);
        v109 = *((_QWORD *)&v318 + 1);
        v110 = v318;
        v111 = v320;
LABEL_181:
        v322 = v104;
        v323 = v105;
        v324 = v109;
        v325 = 2 * v108;
        v326 = v110;
        v327 = 3;
        v328 = v111;
        if (v105)
        {
          v155 = (unint64_t *)&v105->__shared_owners_;
          do
            v156 = __ldaxr(v155);
          while (__stlxr(v156 - 1, v155));
          if (!v156)
          {
            ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
            std::__shared_weak_count::__release_weak(v105);
          }
          do
            v157 = __ldaxr(v155);
          while (__stlxr(v157 - 1, v155));
          if (!v157)
          {
            ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
            std::__shared_weak_count::__release_weak(v105);
          }
        }
        sub_22416BFE0((uint64_t)v343, (uint64_t)&v321, 0, v86, v87, v88, v89, v90);
LABEL_190:
        LODWORD(v329) = 2;
        sub_224501B60(v3, *(char **)(a1 + 32), (char *)&v329, (char *)&v329 + 4, 4);
        sub_2244FF590((_QWORD *)a1);
        sub_223BAA7A4(a1, (uint64_t)v343);
        v158 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
        *(_QWORD *)(v158 + 10) = *(_QWORD *)(a1 + 32) - v158 - 18;
        *(_QWORD *)(a1 + 56) -= 8;
        if (v345 != -1)
          ((void (*)(uint64_t (***)(), _BYTE *))off_24EC5FFD0[v345])(&v329, v344);
        v345 = -1;
        if (v94)
        {
          v159 = v323;
          if (v323)
          {
            v160 = (unint64_t *)&v323->__shared_owners_;
            do
              v161 = __ldaxr(v160);
            while (__stlxr(v161 - 1, v160));
            if (!v161)
            {
              ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
              std::__shared_weak_count::__release_weak(v159);
            }
          }
          v162 = v317;
          if (v317)
          {
            v163 = (unint64_t *)&v317->__shared_owners_;
            do
              v164 = __ldaxr(v163);
            while (__stlxr(v164 - 1, v163));
            if (!v164)
            {
              ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
              std::__shared_weak_count::__release_weak(v162);
            }
          }
        }
        if ((_DWORD)v356 != -1)
          ((void (*)(_BYTE *, _QWORD *))off_24EC5FFD0[v356])(v343, v350);
LABEL_205:
        *(_DWORD *)__src = 2;
        sub_224501B60(v3, *(char **)(a1 + 32), __src, &__src[4], 4);
        sub_2244FF590((_QWORD *)a1);
        sub_223BAA7A4(a1, a2 + 288);
        v165 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
        *(_QWORD *)(v165 + 10) = *(_QWORD *)(a1 + 32) - v165 - 18;
        *(_QWORD *)(a1 + 56) -= 8;
        *(_DWORD *)__src = 2;
        sub_224501B60(v3, *(char **)(a1 + 32), __src, &__src[4], 4);
        sub_2244FF590((_QWORD *)a1);
        sub_223BAA7A4(a1, a2 + 392);
        v166 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
        *(_QWORD *)(v166 + 10) = *(_QWORD *)(a1 + 32) - v166 - 18;
        *(_QWORD *)(a1 + 56) -= 8;
        if (v11 > 3)
          goto LABEL_207;
        goto LABEL_206;
      }
    }
    else
    {
LABEL_88:
      *(_DWORD *)&__src[24] = 0;
      v94 = *(unsigned __int8 *)(a2 + 280);
      if (*(_BYTE *)(a2 + 280))
        goto LABEL_89;
    }
    *(_OWORD *)v343 = *(_OWORD *)__src;
    *(_OWORD *)&v343[12] = *(_OWORD *)&__src[12];
    v344[0] = 0;
    v345 = -1;
    v153 = (int)v356;
    if ((_DWORD)v356 != -1)
    {
      ((void (*)(uint64_t (***)(), _BYTE *, _QWORD *))off_24EC5FFF8[v356])(&v335, v344, v350);
      v345 = v153;
    }
    goto LABEL_190;
  }
LABEL_113:
  __src[0] = 0;
  sub_224501B60(v3, *(char **)(a1 + 32), __src, &__src[1], 1);
  if (v11 <= 3)
  {
LABEL_206:
    __src[0] = 0;
    LOBYTE(v352) = 0;
    sub_223BA9E58(a1, (uint64_t)__src, v114, v115, v116, v117, v118, v119);
  }
LABEL_207:
  *(_DWORD *)__src = 2;
  sub_224501B60(v3, *(char **)(a1 + 32), __src, &__src[4], 4);
  v167 = *(_DWORD *)__src;
  sub_223BA9A34(a1, a2 + 504, v168, v169, v170, v171, v172, v173);
  if (v167 < 2)
  {
    __src[0] = 0;
    LOBYTE(v352) = 0;
    sub_223BAA280(a1, (uint64_t)__src, v174, v175, v176, v177, v178, v179);
  }
  else
  {
    sub_223BA9E58(a1, a2 + 568, v174, v175, v176, v177, v178, v179);
  }
  if (a3 <= 4)
  {
    sub_223BA95F8(a1, a2 + 632, v180, v181, v182, v183, v184, v185);
LABEL_212:
    v192 = a2;
    goto LABEL_235;
  }
  *(_DWORD *)__src = 5;
  sub_224501B60(v3, *(char **)(a1 + 32), __src, &__src[4], 4);
  v193 = *(_DWORD *)__src;
  sub_223BA95F8(a1, a2 + 632, v194, v195, v196, v197, v198, v199);
  if (*(_BYTE *)(a2 + 724))
  {
    __src[0] = 1;
    sub_224501B60(v3, *(char **)(a1 + 32), __src, &__src[1], 1);
    sub_224501B60(v3, *(char **)(a1 + 32), (char *)(a2 + 720), (char *)(a2 + 724), 4);
  }
  else
  {
    __src[0] = 0;
    sub_224501B60(v3, *(char **)(a1 + 32), __src, &__src[1], 1);
  }
  v192 = a2;
  if (v193 >= 2)
  {
    if (*(_BYTE *)(a2 + 752))
    {
      __src[0] = 1;
      sub_224501B60(v3, *(char **)(a1 + 32), __src, &__src[1], 1);
      *(_QWORD *)__src = (uint64_t)(*(_QWORD *)(a2 + 736) - *(_QWORD *)(a2 + 728)) >> 1;
      sub_224501B60(v3, *(char **)(a1 + 32), __src, &__src[8], 8);
      v200 = *(char **)(a2 + 728);
      v201 = *(char **)(a2 + 736);
      if (!v200
        && v201
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      sub_224501B60(v3, *(char **)(a1 + 32), v200, v201, v201 - v200);
    }
    else
    {
      __src[0] = 0;
      sub_224501B60(v3, *(char **)(a1 + 32), __src, &__src[1], 1);
    }
    if (*(_BYTE *)(a2 + 764))
    {
      __src[0] = 1;
      sub_224501B60(v3, *(char **)(a1 + 32), __src, &__src[1], 1);
      sub_224501B60(v3, *(char **)(a1 + 32), (char *)(a2 + 760), (char *)(a2 + 764), 4);
    }
    else
    {
      __src[0] = 0;
      sub_224501B60(v3, *(char **)(a1 + 32), __src, &__src[1], 1);
    }
    if (*(_BYTE *)(a2 + 772))
    {
      __src[0] = 1;
      sub_224501B60(v3, *(char **)(a1 + 32), __src, &__src[1], 1);
      sub_224501B60(v3, *(char **)(a1 + 32), (char *)(a2 + 768), (char *)(a2 + 772), 4);
    }
    else
    {
      __src[0] = 0;
      sub_224501B60(v3, *(char **)(a1 + 32), __src, &__src[1], 1);
    }
    v192 = a2;
    if (v193 >= 3)
    {
      if (*(_BYTE *)(a2 + 780))
      {
        __src[0] = 1;
        sub_224501B60(v3, *(char **)(a1 + 32), __src, &__src[1], 1);
        sub_224501B60(v3, *(char **)(a1 + 32), (char *)(a2 + 776), (char *)(a2 + 780), 4);
      }
      else
      {
        __src[0] = 0;
        sub_224501B60(v3, *(char **)(a1 + 32), __src, &__src[1], 1);
      }
      v192 = a2;
      if (v193 >= 4)
      {
        *(_DWORD *)__src = 2;
        sub_224501B60(v3, *(char **)(a1 + 32), __src, &__src[4], 4);
        sub_2244FF590((_QWORD *)a1);
        sub_223BAAE7C(a1, a2 + 784);
        v202 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
        *(_QWORD *)(v202 + 10) = *(_QWORD *)(a1 + 32) - v202 - 18;
        *(_QWORD *)(a1 + 56) -= 8;
        v192 = a2;
        if (v193 != 4)
        {
          if (*(_BYTE *)(a2 + 836))
          {
            __src[0] = 1;
            sub_224501B60(v3, *(char **)(a1 + 32), __src, &__src[1], 1);
            sub_224501B60(v3, *(char **)(a1 + 32), (char *)(a2 + 800), (char *)(a2 + 836), 36);
          }
          else
          {
            __src[0] = 0;
            sub_224501B60(v3, *(char **)(a1 + 32), __src, &__src[1], 1);
          }
          goto LABEL_212;
        }
      }
    }
  }
LABEL_235:
  sub_223BA9A34(a1, v192 + 840, v186, v187, v188, v189, v190, v191);
  *(_DWORD *)__src = 1;
  sub_224501B60(v3, *(char **)(a1 + 32), __src, &__src[4], 4);
  v208 = *(unsigned __int8 *)(a2 + 984);
  if (!*(_BYTE *)(a2 + 984))
  {
    v229 = 0;
    __src[0] = 0;
    goto LABEL_270;
  }
  v329 = &off_24EC28E38;
  v209 = *(_QWORD *)(a2 + 912);
  v210 = *(std::__shared_weak_count **)(a2 + 920);
  if (v210)
  {
    v211 = (unint64_t *)&v210->__shared_owners_;
    do
      v212 = __ldxr(v211);
    while (__stxr(v212 + 1, v211));
    v213 = *(_WORD *)(a2 + 976);
    do
      v214 = __ldxr(v211);
    while (__stxr(v214 + 1, v211));
    v215 = *(_OWORD *)(a2 + 944);
    *(_OWORD *)v332 = *(_OWORD *)(a2 + 928);
    *(_OWORD *)&v332[16] = v215;
    v333 = *(_OWORD *)(a2 + 960);
    do
      v216 = __ldxr(v211);
    while (__stxr(v216 + 1, v211));
    v330 = v209;
    v331 = v210;
    v334 = v213;
    do
      v217 = __ldaxr(v211);
    while (__stlxr(v217 - 1, v211));
    if (!v217)
    {
      ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
      std::__shared_weak_count::__release_weak(v210);
    }
    do
      v218 = __ldaxr(v211);
    while (__stlxr(v218 - 1, v211));
    if (v218)
    {
      v335 = &off_24EC1F8C8;
      v219 = v330;
      v220 = v331;
      if (v331)
        goto LABEL_250;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
      std::__shared_weak_count::__release_weak(v210);
      v335 = &off_24EC1F8C8;
      v219 = v330;
      v220 = v331;
      if (v331)
      {
LABEL_250:
        v221 = (unint64_t *)&v220->__shared_owners_;
        do
          v222 = __ldxr(v221);
        while (__stxr(v222 + 1, v221));
        v223 = *(_QWORD *)&v332[12];
        v224 = *(_DWORD *)&v332[28];
        v225 = *(_QWORD *)v332;
        v226 = v334;
        do
          v227 = __ldxr(v221);
        while (__stxr(v227 + 1, v221));
        do
          v228 = __ldxr(v221);
        while (__stxr(v228 + 1, v221));
        goto LABEL_259;
      }
    }
  }
  else
  {
    v230 = *(_WORD *)(a2 + 976);
    v330 = *(_QWORD *)(a2 + 912);
    v331 = 0;
    v231 = *(_OWORD *)(a2 + 944);
    *(_OWORD *)v332 = *(_OWORD *)(a2 + 928);
    *(_OWORD *)&v332[16] = v231;
    v333 = *(_OWORD *)(a2 + 960);
    v334 = v230;
    v335 = &off_24EC1F8C8;
    v219 = v330;
    v220 = 0;
  }
  v223 = *(_QWORD *)&v332[12];
  v224 = *(_DWORD *)&v332[28];
  v225 = *(_QWORD *)v332;
  v226 = v334;
LABEL_259:
  v336 = v219;
  v337 = v220;
  v338 = v223;
  v339 = v224;
  v340 = v225;
  v341 = 25;
  v342 = v226;
  if (v220)
  {
    v232 = (unint64_t *)&v220->__shared_owners_;
    do
      v233 = __ldaxr(v232);
    while (__stlxr(v233 - 1, v232));
    if (!v233)
    {
      ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
      std::__shared_weak_count::__release_weak(v220);
    }
    do
      v234 = __ldaxr(v232);
    while (__stlxr(v234 - 1, v232));
    if (!v234)
    {
      ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
      std::__shared_weak_count::__release_weak(v220);
    }
  }
  sub_22416BFE0((uint64_t)v343, (uint64_t)&v335, 0, v203, v204, v205, v206, v207);
  *(_OWORD *)__src = *(_OWORD *)v343;
  *(_OWORD *)&__src[12] = *(_OWORD *)&v343[12];
  LOBYTE(v350[0]) = 0;
  LODWORD(v356) = -1;
  v235 = v345;
  if (v345 != -1)
  {
    ((void (*)(unint64_t *, _QWORD *, _BYTE *))off_24EC60008[v345])(&v298, v350, v344);
    LODWORD(v356) = v235;
  }
  v229 = 1;
LABEL_270:
  LOBYTE(v357) = v229;
  sub_223BAA6A8(a1, (uint64_t)__src);
  if ((_BYTE)v357)
  {
    if ((_DWORD)v356 != -1)
      ((void (*)(unint64_t *, _QWORD *))off_24EC5FFD0[v356])(&v346, v350);
    LODWORD(v356) = -1;
  }
  if (v208)
  {
    if (v345 != -1)
      ((void (*)(unint64_t *, _BYTE *))off_24EC5FFD0[v345])(&v346, v344);
    v345 = -1;
    v242 = v337;
    if (v337)
    {
      v243 = (unint64_t *)&v337->__shared_owners_;
      do
        v244 = __ldaxr(v243);
      while (__stlxr(v244 - 1, v243));
      if (!v244)
      {
        ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
        std::__shared_weak_count::__release_weak(v242);
      }
    }
    v245 = v331;
    if (v331)
    {
      v246 = (unint64_t *)&v331->__shared_owners_;
      do
        v247 = __ldaxr(v246);
      while (__stlxr(v247 - 1, v246));
      if (!v247)
      {
        ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
        std::__shared_weak_count::__release_weak(v245);
      }
    }
  }
  sub_223BA95F8(a1, a2 + 992, v236, v237, v238, v239, v240, v241);
  sub_224501B60(v3, *(char **)(a1 + 32), (char *)(a2 + 1080), (char *)(a2 + 1081), 1);
  sub_224501B60(v3, *(char **)(a1 + 32), (char *)(a2 + 1084), (char *)(a2 + 1096), 12);
  *(_QWORD *)__src = *(_QWORD *)(a2 + 1136);
  sub_224501B60(v3, *(char **)(a1 + 32), __src, &__src[8], 8);
  *(_DWORD *)__src = 2;
  sub_224501B60(v3, *(char **)(a1 + 32), __src, &__src[4], 4);
  sub_2244FF590((_QWORD *)a1);
  sub_224501B60(v3, *(char **)(a1 + 32), (char *)(a2 + 1144), (char *)(a2 + 1152), 8);
  sub_224501B60(v3, *(char **)(a1 + 32), (char *)(a2 + 1152), (char *)(a2 + 1160), 8);
  sub_224501B60(v3, *(char **)(a1 + 32), (char *)(a2 + 1160), (char *)(a2 + 1168), 8);
  v248 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v248 + 10) = *(_QWORD *)(a1 + 32) - v248 - 18;
  *(_QWORD *)(a1 + 56) -= 8;
  v249 = (char *)(a2 + 1312);
  sub_224501B60(v3, *(char **)(a1 + 32), (char *)(a2 + 1184), (char *)(a2 + 1312), 128);
  if (a3 == 1)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/include/Reconstruction/Frame/FrameBundleSample.h", 528, (uint64_t)"io::is_input_archive_v<Archive>", 31, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    __src[0] = 0;
    v365 = 0;
    LOBYTE(v346) = 0;
    sub_224501B60(v3, *(char **)(a1 + 32), (char *)&v346, (char *)&v346 + 1, 1);
    if (!v365)
      goto LABEL_341;
    v250 = *(unsigned __int8 *)(a2 + 1512);
    *(_OWORD *)v249 = *(_OWORD *)__src;
    *(_DWORD *)(a2 + 1328) = *(_DWORD *)&__src[16];
    v251 = (char **)(a2 + 1336);
    if (v250)
    {
      sub_2232C6B24(v251, (char **)&__src[24]);
      *(_BYTE *)(a2 + 1504) = v364;
      if (!v365)
        goto LABEL_341;
    }
    else
    {
      sub_2232C6D24(v251, (uint64_t)&__src[24]);
      v282 = v364;
      *(_BYTE *)(a2 + 1512) = 1;
      *(_BYTE *)(a2 + 1504) = v282;
      if (!v365)
      {
LABEL_341:
        *(_DWORD *)__src = 0;
        sub_224501B60(v3, *(char **)(a1 + 32), __src, &__src[4], 4);
        goto LABEL_342;
      }
    }
    if (__p)
    {
      v363 = __p;
      operator delete(__p);
    }
    if (v360)
    {
      v361 = v360;
      operator delete(v360);
    }
    if (v358)
    {
      v359 = v358;
      operator delete(v358);
    }
    if (v356)
    {
      v357 = v356;
      operator delete(v356);
    }
    if (v354)
    {
      v355 = v354;
      operator delete(v354);
    }
    if (v351)
    {
      v352 = v351;
      operator delete(v351);
    }
    if (*(_QWORD *)&__src[24])
    {
      v350[0] = *(_QWORD *)&__src[24];
      operator delete(*(void **)&__src[24]);
    }
    goto LABEL_341;
  }
  if (a3 > 6)
  {
    if (*(_BYTE *)(a2 + 1512))
    {
      __src[0] = 1;
      sub_224501B60(v3, *(char **)(a1 + 32), __src, &__src[1], 1);
      *(_DWORD *)__src = 4;
      sub_224501B60(v3, *(char **)(a1 + 32), __src, &__src[4], 4);
      v252 = *(_DWORD *)__src;
      sub_224501B60(v3, *(char **)(a1 + 32), v249, (char *)(a2 + 1313), 1);
      sub_224501B60(v3, *(char **)(a1 + 32), (char *)(a2 + 1313), (char *)(a2 + 1314), 1);
      sub_224501B60(v3, *(char **)(a1 + 32), (char *)(a2 + 1316), (char *)(a2 + 1320), 4);
      *(_QWORD *)__src = *(_QWORD *)(a2 + 1320);
      sub_224501B60(v3, *(char **)(a1 + 32), __src, &__src[8], 8);
      sub_224501B60(v3, *(char **)(a1 + 32), (char *)(a2 + 1328), (char *)(a2 + 1332), 4);
      if (v252 >= 2)
      {
        *(_DWORD *)__src = 2;
        sub_224501B60(v3, *(char **)(a1 + 32), __src, &__src[4], 4);
        v253 = *(_DWORD *)__src;
        *(_QWORD *)__src = (uint64_t)(*(_QWORD *)(a2 + 1344) - *(_QWORD *)(a2 + 1336)) >> 4;
        sub_224501B60(v3, *(char **)(a1 + 32), __src, &__src[8], 8);
        v254 = *(char **)(a2 + 1336);
        v255 = *(_QWORD *)(a2 + 1344) - (_QWORD)v254;
        if (v255)
        {
          v256 = 16 * (v255 >> 4);
          do
          {
            v257 = v254 + 16;
            sub_224501B60(v3, *(char **)(a1 + 32), v254, v254 + 16, 16);
            v254 = v257;
            v256 -= 16;
          }
          while (v256);
        }
        *(_QWORD *)__src = (uint64_t)(*(_QWORD *)(a2 + 1368) - *(_QWORD *)(a2 + 1360)) >> 6;
        sub_224501B60(v3, *(char **)(a1 + 32), __src, &__src[8], 8);
        v258 = *(char **)(a2 + 1360);
        v259 = *(_QWORD *)(a2 + 1368) - (_QWORD)v258;
        if (v259)
        {
          v260 = v259 >> 6 << 6;
          do
          {
            v261 = v258 + 64;
            sub_224501B60(v3, *(char **)(a1 + 32), v258, v258 + 64, 64);
            v258 = v261;
            v260 -= 64;
          }
          while (v260);
        }
        *(_QWORD *)__src = (uint64_t)(*(_QWORD *)(a2 + 1392) - *(_QWORD *)(a2 + 1384)) >> 4;
        sub_224501B60(v3, *(char **)(a1 + 32), __src, &__src[8], 8);
        v262 = *(char **)(a2 + 1384);
        v263 = *(_QWORD *)(a2 + 1392) - (_QWORD)v262;
        if (v263)
        {
          v264 = 16 * (v263 >> 4);
          do
          {
            v265 = v262 + 16;
            sub_224501B60(v3, *(char **)(a1 + 32), v262, v262 + 16, 16);
            v262 = v265;
            v264 -= 16;
          }
          while (v264);
        }
        *(_QWORD *)__src = (uint64_t)(*(_QWORD *)(a2 + 1416) - *(_QWORD *)(a2 + 1408)) >> 4;
        sub_224501B60(v3, *(char **)(a1 + 32), __src, &__src[8], 8);
        v266 = *(char **)(a2 + 1408);
        v267 = *(_QWORD *)(a2 + 1416) - (_QWORD)v266;
        if (v267)
        {
          v268 = 16 * (v267 >> 4);
          do
          {
            v269 = v266 + 16;
            sub_224501B60(v3, *(char **)(a1 + 32), v266, v266 + 16, 16);
            v266 = v269;
            v268 -= 16;
          }
          while (v268);
        }
        if (v253 >= 2)
        {
          *(_QWORD *)__src = (uint64_t)(*(_QWORD *)(a2 + 1440) - *(_QWORD *)(a2 + 1432)) >> 4;
          sub_224501B60(v3, *(char **)(a1 + 32), __src, &__src[8], 8);
          v270 = *(char **)(a2 + 1432);
          v271 = *(_QWORD *)(a2 + 1440) - (_QWORD)v270;
          if (v271)
          {
            v272 = 16 * (v271 >> 4);
            do
            {
              v273 = v270 + 16;
              sub_224501B60(v3, *(char **)(a1 + 32), v270, v270 + 16, 16);
              v270 = v273;
              v272 -= 16;
            }
            while (v272);
          }
          *(_QWORD *)__src = (uint64_t)(*(_QWORD *)(a2 + 1464) - *(_QWORD *)(a2 + 1456)) >> 6;
          sub_224501B60(v3, *(char **)(a1 + 32), __src, &__src[8], 8);
          v274 = *(char **)(a2 + 1456);
          v275 = *(_QWORD *)(a2 + 1464) - (_QWORD)v274;
          if (v275)
          {
            v276 = v275 >> 6 << 6;
            do
            {
              v277 = v274 + 64;
              sub_224501B60(v3, *(char **)(a1 + 32), v274, v274 + 64, 64);
              v274 = v277;
              v276 -= 64;
            }
            while (v276);
          }
          *(_QWORD *)__src = (uint64_t)(*(_QWORD *)(a2 + 1488) - *(_QWORD *)(a2 + 1480)) >> 4;
          sub_224501B60(v3, *(char **)(a1 + 32), __src, &__src[8], 8);
          v278 = *(char **)(a2 + 1480);
          v279 = *(_QWORD *)(a2 + 1488) - (_QWORD)v278;
          if (v279)
          {
            v280 = 16 * (v279 >> 4);
            do
            {
              v281 = v278 + 16;
              sub_224501B60(v3, *(char **)(a1 + 32), v278, v278 + 16, 16);
              v278 = v281;
              v280 -= 16;
            }
            while (v280);
          }
        }
        if (v252 != 2)
        {
          __src[0] = *(_BYTE *)(a2 + 1504);
          sub_224501B60(v3, *(char **)(a1 + 32), __src, &__src[1], 1);
          if (v252 >= 4)
            sub_224501B60(v3, *(char **)(a1 + 32), (char *)(a2 + 1314), (char *)(a2 + 1315), 1);
        }
      }
    }
    else
    {
      __src[0] = 0;
      sub_224501B60(v3, *(char **)(a1 + 32), __src, &__src[1], 1);
    }
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/include/Reconstruction/Frame/FrameBundleSample.h", 535, (uint64_t)"io::is_input_archive_v<Archive>", 31, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    memset(__src, 0, 24);
    v346 = 0;
    sub_224501B60(v3, *(char **)(a1 + 32), (char *)&v346, v347, 8);
    if (a3 <= 4)
      goto LABEL_341;
  }
LABEL_342:
  if (*(_BYTE *)(a2 + 1648))
  {
    __src[0] = 1;
    sub_224501B60(v3, *(char **)(a1 + 32), __src, &__src[1], 1);
    *(_DWORD *)__src = 2;
    sub_224501B60(v3, *(char **)(a1 + 32), __src, &__src[4], 4);
    v283 = *(_DWORD *)__src;
    result = sub_224501B60(v3, *(char **)(a1 + 32), (char *)(a2 + 1520), (char *)(a2 + 1584), 64);
    if (v283 >= 2)
      result = sub_224501B60(v3, *(char **)(a1 + 32), (char *)(a2 + 1584), (char *)(a2 + 1648), 64);
  }
  else
  {
    __src[0] = 0;
    result = sub_224501B60(v3, *(char **)(a1 + 32), __src, &__src[1], 1);
  }
  if (a3 >= 3)
  {
    v298 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(_QWORD *)(a2 + 1664) - *(_QWORD *)(a2 + 1656)) >> 4);
    result = sub_224501B60(v3, *(char **)(a1 + 32), (char *)&v298, (char *)&v299, 8);
    v296 = *(_QWORD *)(a2 + 1656);
    for (i = *(_QWORD *)(a2 + 1664); v296 != i; v296 += 304)
    {
      *(_DWORD *)__src = 1;
      sub_224501B60(v3, *(char **)(a1 + 32), __src, &__src[4], 4);
      *(_QWORD *)__src = *(_QWORD *)v296;
      sub_224501B60(v3, *(char **)(a1 + 32), __src, &__src[8], 8);
      sub_224501B60(v3, *(char **)(a1 + 32), (char *)(v296 + 8), (char *)(v296 + 136), 128);
      *(_DWORD *)__src = 2;
      sub_224501B60(v3, *(char **)(a1 + 32), __src, &__src[4], 4);
      if (*(_DWORD *)__src == 1)
      {
        *(_DWORD *)__src = 1;
        sub_224501B60(v3, *(char **)(a1 + 32), __src, &__src[4], 4);
        *(_QWORD *)__src = 0;
        sub_224501B60(v3, *(char **)(a1 + 32), __src, &__src[8], 8);
      }
      *(_DWORD *)__src = 1;
      sub_224501B60(v3, *(char **)(a1 + 32), __src, &__src[4], 4);
      v346 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v296 + 152) - *(_QWORD *)(v296 + 144)) >> 3);
      sub_224501B60(v3, *(char **)(a1 + 32), (char *)&v346, v347, 8);
      v285 = *(char ***)(v296 + 144);
      for (j = *(char ***)(v296 + 152); v285 != j; v285 += 3)
      {
        *(_DWORD *)__src = 1;
        sub_224501B60(v3, *(char **)(a1 + 32), __src, &__src[4], 4);
        *(_QWORD *)__src = (v285[1] - *v285) >> 5;
        sub_224501B60(v3, *(char **)(a1 + 32), __src, &__src[8], 8);
        v288 = *v285;
        v289 = v285[1];
        if (v289 != *v285)
        {
          do
          {
            v348 = 1;
            sub_224501B60(v3, *(char **)(a1 + 32), (char *)&v348, __src, 4);
            v290 = v288 + 12;
            sub_224501B60(v3, *(char **)(a1 + 32), v288, v288 + 12, 12);
            v291 = v288 + 16;
            v292 = v288 + 24;
            sub_224501B60(v3, *(char **)(a1 + 32), v291, v290 + 12, 8);
            v348 = 1;
            sub_224501B60(v3, *(char **)(a1 + 32), (char *)&v348, __src, 4);
            sub_224501B60(v3, *(char **)(a1 + 32), v292, v292 + 4, 4);
            v288 = v292 + 8;
          }
          while (v290 + 20 != v289);
        }
      }
      if (*(_BYTE *)(v296 + 296))
      {
        __src[0] = 1;
        sub_224501B60(v3, *(char **)(a1 + 32), __src, &__src[1], 1);
        *(_DWORD *)__src = 2;
        sub_224501B60(v3, *(char **)(a1 + 32), __src, &__src[4], 4);
        v287 = *(_DWORD *)__src;
        result = sub_224501B60(v3, *(char **)(a1 + 32), (char *)(v296 + 168), (char *)(v296 + 232), 64);
        if (v287 >= 2)
          result = sub_224501B60(v3, *(char **)(a1 + 32), (char *)(v296 + 232), (char *)(v296 + 296), 64);
      }
      else
      {
        __src[0] = 0;
        result = sub_224501B60(v3, *(char **)(a1 + 32), __src, &__src[1], 1);
      }
    }
    if (a3 >= 6)
    {
      *(_DWORD *)__src = 1;
      sub_224501B60(v3, *(char **)(a1 + 32), __src, &__src[4], 4);
      result = sub_224501B60(v3, *(char **)(a1 + 32), (char *)(a2 + 1680), (char *)(a2 + 1681), 1);
      if (a3 >= 8)
      {
        if (*(_BYTE *)(a2 + 1682))
        {
          __src[0] = 1;
          sub_224501B60(v3, *(char **)(a1 + 32), __src, &__src[1], 1);
          return sub_224501B60(v3, *(char **)(a1 + 32), (char *)(a2 + 1681), (char *)(a2 + 1682), 1);
        }
        else
        {
          __src[0] = 0;
          return sub_224501B60(v3, *(char **)(a1 + 32), __src, &__src[1], 1);
        }
      }
    }
  }
  return result;
}

void sub_223BA9264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  uint64_t v62;
  uint64_t v64;

  v64 = LODWORD(STACK[0x290]);
  if ((_DWORD)v64 != -1)
    ((void (*)(char *, uint64_t))off_24EC5FFD0[v64])(&a62, v62);
  sub_22319A588((uint64_t)&STACK[0x2B0]);
  _Unwind_Resume(a1);
}

void sub_223BA9584()
{
  int v0;

  sub_22319A588((uint64_t)&STACK[0x230]);
  if (v0)
    JUMPOUT(0x223BA9594);
  JUMPOUT(0x223BA95A4);
}

void sub_223BA95BC(_Unwind_Exception *a1)
{
  int v1;

  sub_2232C17E0((uint64_t)&STACK[0x2B0]);
  if (v1)
    JUMPOUT(0x223BA95CCLL);
  _Unwind_Resume(a1);
}

void sub_223BA95F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int16 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  __int16 v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  _BYTE v40[32];
  _BYTE v41[32];
  __int16 v42;
  __int16 v43;
  _QWORD v44[2];
  std::__shared_weak_count *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  __int16 v50;
  _OWORD v51[2];
  _BYTE v52[64];
  int v53;
  _OWORD v54[2];
  _BYTE v55[64];
  int v56;
  char v57;
  char v58;
  char v59;

  v9 = *(unsigned __int8 *)(a2 + 80);
  if (*(_BYTE *)(a2 + 80))
  {
    v10 = *(_QWORD *)(a2 + 8);
    v11 = *(std::__shared_weak_count **)(a2 + 16);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      v14 = *(_WORD *)(a2 + 72);
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
      *(_OWORD *)v40 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)&v40[16] = *(_OWORD *)(a2 + 40);
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
      v38 = v10;
      v39 = v11;
      v42 = v14;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      v44[0] = &off_24EC1F8C8;
      v10 = v38;
      v19 = (unint64_t *)&v11->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      v21 = *(_QWORD *)&v40[12];
      v22 = *(_DWORD *)&v40[28];
      v23 = *(_QWORD *)v40;
      v24 = v42;
      do
        v25 = __ldxr(v19);
      while (__stxr(v25 + 1, v19));
      do
        v26 = __ldxr(v19);
      while (__stxr(v26 + 1, v19));
    }
    else
    {
      v39 = 0;
      *(_OWORD *)v41 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)&v41[16] = *(_OWORD *)(a2 + 40);
      v43 = *(_WORD *)(a2 + 72);
      v44[0] = &off_24EC1F8C8;
      v11 = 0;
      v21 = *(_QWORD *)&v41[12];
      v22 = *(_DWORD *)&v41[28];
      v23 = *(_QWORD *)v41;
      v24 = v43;
    }
    v44[1] = v10;
    v45 = v11;
    v46 = v21;
    v47 = 4 * v22;
    v48 = v23;
    v49 = 32;
    v50 = v24;
    if (v11)
    {
      v28 = (unint64_t *)&v11->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      do
        v30 = __ldaxr(v28);
      while (__stlxr(v30 - 1, v28));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    sub_22416BFE0((uint64_t)v51, (uint64_t)v44, 0, a4, a5, a6, a7, a8);
    v54[0] = v51[0];
    *(_OWORD *)((char *)v54 + 12) = *(_OWORD *)((char *)v51 + 12);
    v55[0] = 0;
    v56 = -1;
    v31 = v53;
    if (v53 != -1)
    {
      ((void (*)(char *, _BYTE *, _BYTE *))off_24EC60008[v53])(&v58, v55, v52);
      v56 = v31;
    }
    v27 = 1;
  }
  else
  {
    v27 = 0;
    LOBYTE(v54[0]) = 0;
  }
  v57 = v27;
  sub_223BAA6A8(a1, (uint64_t)v54);
  if (v57)
  {
    if (v56 != -1)
      ((void (*)(char *, _BYTE *))off_24EC5FFD0[v56])(&v59, v55);
    v56 = -1;
  }
  if (v9)
  {
    if (v53 != -1)
      ((void (*)(char *, _BYTE *))off_24EC5FFD0[v53])(&v59, v52);
    v53 = -1;
    v32 = v45;
    if (!v45)
      goto LABEL_46;
    v33 = (unint64_t *)&v45->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      v35 = v39;
      if (!v39)
        return;
    }
    else
    {
LABEL_46:
      v35 = v39;
      if (!v39)
        return;
    }
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_223BA99C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  v29 = *(unsigned int *)(v27 - 80);
  if ((_DWORD)v29 != -1)
    ((void (*)(uint64_t, uint64_t))off_24EC5FFD0[v29])(v27 - 49, v26);
  *(_DWORD *)(v27 - 80) = -1;
  sub_22319A588((uint64_t)&a26);
  sub_22319A5E0((uint64_t)&a19);
  sub_2231CE1A0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223BA9A34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int16 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  __int16 v44;
  __int16 v45;
  _QWORD v46[2];
  std::__shared_weak_count *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  __int16 v52;
  _OWORD v53[2];
  _BYTE v54[64];
  int v55;
  _OWORD v56[2];
  _BYTE v57[64];
  int v58;
  char v59;
  char v60;
  char v61;

  v9 = *(unsigned __int8 *)(a2 + 56);
  if (*(_BYTE *)(a2 + 56))
  {
    v10 = *(_QWORD *)(a2 + 8);
    v11 = *(std::__shared_weak_count **)(a2 + 16);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      v14 = *(_WORD *)(a2 + 48);
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
      v40 = *(_OWORD *)(a2 + 24);
      v42 = *(_QWORD *)(a2 + 40);
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
      v38 = v10;
      v39 = v11;
      v44 = v14;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      v46[0] = &off_24EC1F8C8;
      v10 = v38;
      v19 = (unint64_t *)&v11->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      v21 = HIDWORD(v42);
      v22 = *((_QWORD *)&v40 + 1);
      v23 = v40;
      v24 = v44;
      do
        v25 = __ldxr(v19);
      while (__stxr(v25 + 1, v19));
      do
        v26 = __ldxr(v19);
      while (__stxr(v26 + 1, v19));
    }
    else
    {
      v39 = 0;
      v41 = *(_OWORD *)(a2 + 24);
      v43 = *(_QWORD *)(a2 + 40);
      v45 = *(_WORD *)(a2 + 48);
      v46[0] = &off_24EC1F8C8;
      v11 = 0;
      v21 = HIDWORD(v43);
      v22 = *((_QWORD *)&v41 + 1);
      v23 = v41;
      v24 = v45;
    }
    v46[1] = v10;
    v47 = v11;
    v48 = v22;
    v49 = v21;
    v50 = v23;
    v51 = 1;
    v52 = v24;
    if (v11)
    {
      v28 = (unint64_t *)&v11->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      do
        v30 = __ldaxr(v28);
      while (__stlxr(v30 - 1, v28));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    sub_22416BFE0((uint64_t)v53, (uint64_t)v46, 0, a4, a5, a6, a7, a8);
    v56[0] = v53[0];
    *(_OWORD *)((char *)v56 + 12) = *(_OWORD *)((char *)v53 + 12);
    v57[0] = 0;
    v58 = -1;
    v31 = v55;
    if (v55 != -1)
    {
      ((void (*)(char *, _BYTE *, _BYTE *))off_24EC60008[v55])(&v60, v57, v54);
      v58 = v31;
    }
    v27 = 1;
  }
  else
  {
    v27 = 0;
    LOBYTE(v56[0]) = 0;
  }
  v59 = v27;
  sub_223BAA6A8(a1, (uint64_t)v56);
  if (v59)
  {
    if (v58 != -1)
      ((void (*)(char *, _BYTE *))off_24EC5FFD0[v58])(&v61, v57);
    v58 = -1;
  }
  if (v9)
  {
    if (v55 != -1)
      ((void (*)(char *, _BYTE *))off_24EC5FFD0[v55])(&v61, v54);
    v55 = -1;
    v32 = v47;
    if (!v47)
      goto LABEL_46;
    v33 = (unint64_t *)&v47->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      v35 = v39;
      if (!v39)
        return;
    }
    else
    {
LABEL_46:
      v35 = v39;
      if (!v39)
        return;
    }
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_223BA9DE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v5 = *(unsigned int *)(v3 - 80);
  if ((_DWORD)v5 != -1)
    ((void (*)(uint64_t, uint64_t))off_24EC5FFD0[v5])(v3 - 49, v2);
  *(_DWORD *)(v3 - 80) = -1;
  sub_22319A588((uint64_t)va2);
  sub_22319A5E0((uint64_t)va1);
  sub_2231BEEB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BA9E58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int16 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  __int16 v44;
  __int16 v45;
  _QWORD v46[2];
  std::__shared_weak_count *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  __int16 v52;
  _OWORD v53[2];
  _BYTE v54[64];
  int v55;
  _OWORD v56[2];
  _BYTE v57[64];
  int v58;
  char v59;
  char v60;
  char v61;

  v9 = *(unsigned __int8 *)(a2 + 56);
  if (*(_BYTE *)(a2 + 56))
  {
    v10 = *(_QWORD *)(a2 + 8);
    v11 = *(std::__shared_weak_count **)(a2 + 16);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      v14 = *(_WORD *)(a2 + 48);
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
      v40 = *(_OWORD *)(a2 + 24);
      v42 = *(_QWORD *)(a2 + 40);
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
      v38 = v10;
      v39 = v11;
      v44 = v14;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      v46[0] = &off_24EC1F8C8;
      v10 = v38;
      v19 = (unint64_t *)&v11->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      v21 = HIDWORD(v42);
      v22 = *((_QWORD *)&v40 + 1);
      v23 = v40;
      v24 = v44;
      do
        v25 = __ldxr(v19);
      while (__stxr(v25 + 1, v19));
      do
        v26 = __ldxr(v19);
      while (__stxr(v26 + 1, v19));
    }
    else
    {
      v39 = 0;
      v41 = *(_OWORD *)(a2 + 24);
      v43 = *(_QWORD *)(a2 + 40);
      v45 = *(_WORD *)(a2 + 48);
      v46[0] = &off_24EC1F8C8;
      v11 = 0;
      v21 = HIDWORD(v43);
      v22 = *((_QWORD *)&v41 + 1);
      v23 = v41;
      v24 = v45;
    }
    v46[1] = v10;
    v47 = v11;
    v48 = v22;
    v49 = 2 * v21;
    v50 = v23;
    v51 = 3;
    v52 = v24;
    if (v11)
    {
      v28 = (unint64_t *)&v11->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      do
        v30 = __ldaxr(v28);
      while (__stlxr(v30 - 1, v28));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    sub_22416BFE0((uint64_t)v53, (uint64_t)v46, 0, a4, a5, a6, a7, a8);
    v56[0] = v53[0];
    *(_OWORD *)((char *)v56 + 12) = *(_OWORD *)((char *)v53 + 12);
    v57[0] = 0;
    v58 = -1;
    v31 = v55;
    if (v55 != -1)
    {
      ((void (*)(char *, _BYTE *, _BYTE *))off_24EC60008[v55])(&v60, v57, v54);
      v58 = v31;
    }
    v27 = 1;
  }
  else
  {
    v27 = 0;
    LOBYTE(v56[0]) = 0;
  }
  v59 = v27;
  sub_223BAA6A8(a1, (uint64_t)v56);
  if (v59)
  {
    if (v58 != -1)
      ((void (*)(char *, _BYTE *))off_24EC5FFD0[v58])(&v61, v57);
    v58 = -1;
  }
  if (v9)
  {
    if (v55 != -1)
      ((void (*)(char *, _BYTE *))off_24EC5FFD0[v55])(&v61, v54);
    v55 = -1;
    v32 = v47;
    if (!v47)
      goto LABEL_46;
    v33 = (unint64_t *)&v47->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      v35 = v39;
      if (!v39)
        return;
    }
    else
    {
LABEL_46:
      v35 = v39;
      if (!v39)
        return;
    }
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_223BAA210(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v5 = *(unsigned int *)(v3 - 80);
  if ((_DWORD)v5 != -1)
    ((void (*)(uint64_t, uint64_t))off_24EC5FFD0[v5])(v3 - 49, v2);
  *(_DWORD *)(v3 - 80) = -1;
  sub_22319A588((uint64_t)va2);
  sub_22319A5E0((uint64_t)va1);
  sub_22319EF60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BAA280(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int16 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  __int16 v44;
  __int16 v45;
  _QWORD v46[2];
  std::__shared_weak_count *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  __int16 v52;
  _OWORD v53[2];
  _BYTE v54[64];
  int v55;
  _OWORD v56[2];
  _BYTE v57[64];
  int v58;
  char v59;
  char v60;
  char v61;

  v9 = *(unsigned __int8 *)(a2 + 56);
  if (*(_BYTE *)(a2 + 56))
  {
    v10 = *(_QWORD *)(a2 + 8);
    v11 = *(std::__shared_weak_count **)(a2 + 16);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      v14 = *(_WORD *)(a2 + 48);
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
      v40 = *(_OWORD *)(a2 + 24);
      v42 = *(_QWORD *)(a2 + 40);
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
      v38 = v10;
      v39 = v11;
      v44 = v14;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      v46[0] = &off_24EC1F8C8;
      v10 = v38;
      v19 = (unint64_t *)&v11->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      v21 = HIDWORD(v42);
      v22 = *((_QWORD *)&v40 + 1);
      v23 = v40;
      v24 = v44;
      do
        v25 = __ldxr(v19);
      while (__stxr(v25 + 1, v19));
      do
        v26 = __ldxr(v19);
      while (__stxr(v26 + 1, v19));
    }
    else
    {
      v39 = 0;
      v41 = *(_OWORD *)(a2 + 24);
      v43 = *(_QWORD *)(a2 + 40);
      v45 = *(_WORD *)(a2 + 48);
      v46[0] = &off_24EC1F8C8;
      v11 = 0;
      v21 = HIDWORD(v43);
      v22 = *((_QWORD *)&v41 + 1);
      v23 = v41;
      v24 = v45;
    }
    v46[1] = v10;
    v47 = v11;
    v48 = v22;
    v49 = 4 * v21;
    v50 = v23;
    v51 = 4;
    v52 = v24;
    if (v11)
    {
      v28 = (unint64_t *)&v11->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      do
        v30 = __ldaxr(v28);
      while (__stlxr(v30 - 1, v28));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    sub_22416BFE0((uint64_t)v53, (uint64_t)v46, 0, a4, a5, a6, a7, a8);
    v56[0] = v53[0];
    *(_OWORD *)((char *)v56 + 12) = *(_OWORD *)((char *)v53 + 12);
    v57[0] = 0;
    v58 = -1;
    v31 = v55;
    if (v55 != -1)
    {
      ((void (*)(char *, _BYTE *, _BYTE *))off_24EC60008[v55])(&v60, v57, v54);
      v58 = v31;
    }
    v27 = 1;
  }
  else
  {
    v27 = 0;
    LOBYTE(v56[0]) = 0;
  }
  v59 = v27;
  sub_223BAA6A8(a1, (uint64_t)v56);
  if (v59)
  {
    if (v58 != -1)
      ((void (*)(char *, _BYTE *))off_24EC5FFD0[v58])(&v61, v57);
    v58 = -1;
  }
  if (v9)
  {
    if (v55 != -1)
      ((void (*)(char *, _BYTE *))off_24EC5FFD0[v55])(&v61, v54);
    v55 = -1;
    v32 = v47;
    if (!v47)
      goto LABEL_46;
    v33 = (unint64_t *)&v47->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      v35 = v39;
      if (!v39)
        return;
    }
    else
    {
LABEL_46:
      v35 = v39;
      if (!v39)
        return;
    }
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_223BAA638(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v5 = *(unsigned int *)(v3 - 80);
  if ((_DWORD)v5 != -1)
    ((void (*)(uint64_t, uint64_t))off_24EC5FFD0[v5])(v3 - 49, v2);
  *(_DWORD *)(v3 - 80) = -1;
  sub_22319A588((uint64_t)va2);
  sub_22319A5E0((uint64_t)va1);
  sub_2231BD9DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BAA6A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  char v6;
  char __src;
  int v8;
  uint64_t v9;

  v3 = a1 + 24;
  if (*(_BYTE *)(a2 + 104))
  {
    __src = 1;
    sub_224501B60(a1 + 24, *(char **)(a1 + 32), &__src, (char *)&v8, 1);
    v8 = 2;
    sub_224501B60(v3, *(char **)(a1 + 32), (char *)&v8, (char *)&v9, 4);
    sub_2244FF590((_QWORD *)a1);
    sub_223BAA7A4(a1, a2);
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
    *(_QWORD *)(v5 + 10) = *(_QWORD *)(a1 + 32) - v5 - 18;
    *(_QWORD *)(a1 + 56) -= 8;
  }
  else
  {
    v6 = 0;
    sub_224501B60(a1 + 24, *(char **)(a1 + 32), &v6, &__src, 1);
  }
}

void sub_223BAA7A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  int v12;
  __int16 v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t (**__src)();
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  __int16 v27;

  LOWORD(__src) = *(_WORD *)a2;
  v4 = a1 + 24;
  sub_224501B60(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 2, 2);
  LODWORD(__src) = 2;
  sub_224501B60(v4, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 4, 4);
  sub_2244FF590((_QWORD *)a1);
  __src = *(uint64_t (***)())(a2 + 8);
  sub_224501B60(v4, *(char **)(a1 + 32), (char *)&__src, (char *)&v21, 8);
  sub_224501B60(v4, *(char **)(a1 + 32), (char *)(a2 + 16), (char *)(a2 + 24), 8);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v5 + 10) = *(_QWORD *)(a1 + 32) - v5 - 18;
  *(_QWORD *)(a1 + 56) -= 8;
  if (*(_WORD *)a2 == 1)
  {
    v6 = *(_DWORD *)(a2 + 96);
    if (v6)
    {
      if (v6 != 1)
        sub_22316DD70();
      __src = &off_24EC1F8C8;
      sub_2231F47D4(a2 + 32, (uint64_t)&v21);
    }
    else
    {
      __src = &off_24EC1F8C8;
      v7 = *(_QWORD *)(a2 + 40);
      v8 = *(std::__shared_weak_count **)(a2 + 48);
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
        v11 = *(_QWORD *)(a2 + 72);
        v12 = *(_DWORD *)(a2 + 80);
        v13 = *(_WORD *)(a2 + 84);
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
      }
      else
      {
        v11 = *(_QWORD *)(a2 + 72);
        v12 = *(_DWORD *)(a2 + 80);
        v13 = *(_WORD *)(a2 + 84);
      }
      v21 = v7;
      v22 = v8;
      v23 = *(_QWORD *)(a2 + 56);
      v24 = *(_DWORD *)(a2 + 64);
      v25 = v11;
      v26 = v12;
      v27 = v13;
      if (v8)
      {
        v15 = (unint64_t *)&v8->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    sub_22416E5E0((const void *)a1, (uint64_t)&__src);
    v17 = v22;
    if (v22)
    {
      v18 = (unint64_t *)&v22->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  else
  {
    sub_223BAAA28(a1, (unsigned __int16 *)a2);
  }
}

void sub_223BAAA28(uint64_t a1, unsigned __int16 *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  int v11;
  unsigned __int16 v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20[8];
  __int128 v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  std::ios_base v25;
  uint64_t v26;
  int v27;
  uint64_t (**v28)();
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  unsigned __int16 v35;

  v4 = sub_22416E0BC(*a2);
  v5 = *((_DWORD *)a2 + 24);
  if (v5)
  {
    if (v5 != 1)
      sub_22316DD70();
    v28 = &off_24EC1F8C8;
    sub_2231F47D4((uint64_t)(a2 + 16), (uint64_t)&v29);
  }
  else
  {
    v28 = &off_24EC1F8C8;
    v6 = *((_QWORD *)a2 + 5);
    v7 = (std::__shared_weak_count *)*((_QWORD *)a2 + 6);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      v10 = *((_QWORD *)a2 + 9);
      v11 = *((_DWORD *)a2 + 20);
      v12 = a2[42];
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    else
    {
      v10 = *((_QWORD *)a2 + 9);
      v11 = *((_DWORD *)a2 + 20);
      v12 = a2[42];
    }
    v29 = v6;
    v30 = v7;
    v31 = *((_QWORD *)a2 + 7);
    v32 = *((_DWORD *)a2 + 16);
    v33 = v10;
    v34 = v11;
    v35 = v12;
    if (v7)
    {
      v14 = (unint64_t *)&v7->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  v19 = a1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x24BEDB848] + 16;
  v21 = 0u;
  v22 = 0u;
  v23 = 24;
  v24 = MEMORY[0x24BEDB828] + 24;
  v25.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB828] + 64);
  std::ios_base::init(&v25, v20);
  v26 = 0;
  v27 = -1;
  sub_22319F8C4(&v28, (char *)&v24, v4);
  sub_223BAAC7C((uint64_t)&v19);
  v16 = v30;
  if (v30)
  {
    v17 = (unint64_t *)&v30->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_223BAAC14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_223BAAC7C((uint64_t)va);
  sub_22319A5E0(v2 - 104);
  _Unwind_Resume(a1);
}

uint64_t sub_223BAAC7C(uint64_t a1)
{
  int v2;
  size_t v3;
  void **p_dst;
  unint64_t v5;
  unint64_t v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  char *v11;
  int64_t v12;
  int64_t v14;
  char *__dst;
  size_t v16;
  int64_t v17;

  v2 = *(_DWORD *)(a1 + 104);
  if ((v2 & 0x10) != 0)
  {
    v5 = *(_QWORD *)(a1 + 96);
    v6 = *(_QWORD *)(a1 + 56);
    if (v5 < v6)
    {
      *(_QWORD *)(a1 + 96) = v6;
      v5 = v6;
    }
    v7 = *(const void **)(a1 + 48);
    v3 = v5 - (_QWORD)v7;
    if (v5 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_28;
  }
  else
  {
    if ((v2 & 8) == 0)
    {
      v3 = 0;
      HIBYTE(v17) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_14;
    }
    v7 = *(const void **)(a1 + 24);
    v3 = *(_QWORD *)(a1 + 40) - (_QWORD)v7;
    if (v3 >= 0x7FFFFFFFFFFFFFF8)
LABEL_28:
      sub_22316DBC0();
  }
  if (v3 >= 0x17)
  {
    v8 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v8 = v3 | 7;
    v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    v16 = v3;
    v17 = v9 | 0x8000000000000000;
    __dst = (char *)p_dst;
    goto LABEL_13;
  }
  HIBYTE(v17) = v3;
  p_dst = (void **)&__dst;
  if (v3)
LABEL_13:
    memmove(p_dst, v7, v3);
LABEL_14:
  *((_BYTE *)p_dst + v3) = 0;
  v10 = HIBYTE(v17);
  if (v17 < 0)
    v10 = v16;
  v14 = v10;
  sub_224501B60(*(_QWORD *)a1 + 24, *(char **)(*(_QWORD *)a1 + 32), (char *)&v14, (char *)&__dst, 8);
  if (SHIBYTE(v17) < 0)
  {
    v12 = v14;
    v11 = __dst;
    if (!__dst && v14)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v11 = 0;
    }
  }
  else
  {
    v11 = (char *)&__dst;
    v12 = v14;
  }
  sub_224501B60(*(_QWORD *)a1 + 24, *(char **)(*(_QWORD *)a1 + 32), v11, &v11[v12], v12);
  if (SHIBYTE(v17) < 0)
    operator delete(__dst);
  std::ostream::~ostream();
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  return a1;
}

void sub_223BAAE7C(uint64_t a1, uint64_t a2)
{
  void **v3;
  char *v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  char **v8;
  uint64_t v9;
  int64_t v10;
  char *v11;
  BOOL v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void **i;
  char *v20;
  uint64_t v21;
  __int128 v22;
  char *v23;
  __int128 v24;
  _OWORD v25[2];
  __int128 v26;
  uint64_t __src;
  uint64_t v28;

  v26 = 0u;
  memset(v25, 0, sizeof(v25));
  sub_224518A54((uint64_t)&v21, a2);
  v3 = (void **)v21;
  *(_QWORD *)&v25[0] = v21;
  *(_OWORD *)((char *)v25 + 8) = v22;
  v4 = v23;
  *((_QWORD *)&v25[1] + 1) = v23;
  v20 = (char *)v24;
  v26 = v24;
  v5 = (void **)v22;
  v6 = ((uint64_t)v22 - v21) / 24;
  __src = v6;
  sub_224501B60(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&v28, 8);
  if (v5 != v3)
  {
    v7 = 24 * v6;
    v8 = (char **)v3;
    do
    {
      v9 = *((unsigned __int8 *)v8 + 23);
      if ((v9 & 0x80u) != 0)
        v9 = (uint64_t)v8[1];
      v21 = v9;
      sub_224501B60(a1 + 24, *(char **)(a1 + 32), (char *)&v21, (char *)&v22, 8);
      if (*((char *)v8 + 23) < 0)
      {
        v11 = *v8;
        v10 = (int64_t)v8[1];
        if (*v8)
          v12 = 1;
        else
          v12 = v10 == 0;
        if (!v12)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v11 = 0;
        }
      }
      else
      {
        v10 = *((unsigned __int8 *)v8 + 23);
        v11 = (char *)v8;
      }
      sub_224501B60(a1 + 24, *(char **)(a1 + 32), v11, &v11[v10], v10);
      v8 += 3;
      v7 -= 24;
    }
    while (v7);
  }
  v13 = v20;
  v21 = (v20 - v4) / 24;
  sub_224501B60(a1 + 24, *(char **)(a1 + 32), (char *)&v21, (char *)&v22, 8);
  if (v20 == v4)
  {
    if (!v4)
      goto LABEL_28;
    goto LABEL_27;
  }
  v14 = 0;
  do
  {
    LODWORD(__src) = 2;
    sub_224501B60(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 4, 4);
    sub_2244FF590((_QWORD *)a1);
    sub_223BAB1F8(a1, (uint64_t)&v4[v14]);
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
    *(_QWORD *)(v15 + 10) = *(_QWORD *)(a1 + 32) - v15 - 18;
    *(_QWORD *)(a1 + 56) -= 8;
    v14 += 24;
  }
  while (24 * ((v20 - v4) / 24) != v14);
  if (v4)
  {
    do
    {
      v16 = (std::__shared_weak_count *)*((_QWORD *)v13 - 1);
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v13 -= 24;
    }
    while (v13 != v4);
    v4 = (char *)*((_QWORD *)&v25[1] + 1);
    v3 = *(void ***)&v25[0];
LABEL_27:
    operator delete(v4);
  }
LABEL_28:
  if (v3)
  {
    for (i = (void **)*((_QWORD *)&v25[0] + 1); i != v3; i -= 3)
    {
      if (*((char *)i - 1) < 0)
        operator delete(*(i - 3));
    }
    operator delete(v3);
  }
}

void sub_223BAB180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_2231A6210((void **)va);
  _Unwind_Resume(a1);
}

void sub_223BAB194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_2231A6210((void **)va);
  _Unwind_Resume(a1);
}

void sub_223BAB1A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_2231A6210((void **)va);
  _Unwind_Resume(a1);
}

void sub_223BAB1BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_2231A6210((void **)va);
  _Unwind_Resume(a1);
}

void sub_223BAB1D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_2231A6210((void **)va);
  _Unwind_Resume(a1);
}

void sub_223BAB1E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_2231A6210((void **)va);
  _Unwind_Resume(a1);
}

void sub_223BAB1F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  CFTypeID TypeID;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  const void *v12;
  CFTypeID v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  const void *v19;
  const __CFBoolean *v20;
  CFTypeID v21;
  __int16 v22;
  __int16 v23;
  const void *v24;
  CFTypeID v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  const __CFArray *v31;
  std::string::size_type size;
  std::string::size_type v33;
  std::string *p_p;
  __int128 v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  CFIndex Count;
  CFIndex i;
  const void *ValueAtIndex;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::string::size_type v53;
  char *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::string::size_type v61;
  int64_t v62;
  uint64_t v63;
  uint64_t v64;
  std::string::size_type v65;
  void *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  void *v70;
  size_t v71;
  char *v72;
  char *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  void *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t data_low;
  uint64_t v91;
  unint64_t *v92;
  __int128 v93;
  __int128 v94;
  __int128 theArray;
  unint64_t __src;
  __int128 v97;
  std::string __p;
  char *v99;
  char *v100;
  __int128 v101;

  LOWORD(__p.__r_.__value_.__l.__data_) = *(_WORD *)a2;
  v4 = a1 + 24;
  sub_224501B60(a1 + 24, *(char **)(a1 + 32), (char *)&__p, &__p.__r_.__value_.__s.__data_[2], 2);
  switch(*(_WORD *)a2)
  {
    case 0:
      v5 = *(const void **)(a2 + 8);
      if (v5 && (TypeID = CFNumberGetTypeID(), CFGetTypeID(v5) == TypeID))
      {
        sub_2231A6D40(&v101, *(CFTypeRef *)(a2 + 8));
        v94 = v101;
        if (*((_QWORD *)&v101 + 1))
        {
          v7 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
          do
            v8 = __ldxr(v7);
          while (__stxr(v8 + 1, v7));
          v9 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
          if (*((_QWORD *)&v101 + 1))
          {
            v10 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
            do
              v11 = __ldaxr(v10);
            while (__stlxr(v11 - 1, v10));
            if (!v11)
            {
              ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
              std::__shared_weak_count::__release_weak(v9);
            }
          }
        }
      }
      else
      {
        v94 = 0uLL;
      }
      sub_2231A6E84(&theArray, (uint64_t)&v94);
      sub_2245322E8((CFNumberRef *)&theArray);
      __p.__r_.__value_.__s.__data_[0] = __src;
      __p.__r_.__value_.__s.__data_[8] = __src;
      v99 = 0;
      v100 = 0;
      __p.__r_.__value_.__r.__words[2] = 0;
      v70 = (void *)v97;
      v71 = *((_QWORD *)&v97 + 1) - v97;
      if (*((_QWORD *)&v97 + 1) != (_QWORD)v97)
      {
        if ((v71 & 0x8000000000000000) != 0)
          sub_2240336DC();
        v72 = (char *)operator new(*((_QWORD *)&v97 + 1) - v97);
        v73 = &v72[v71];
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v72;
        v100 = &v72[v71];
        memcpy(v72, v70, v71);
        v99 = v73;
      }
      if (v70)
      {
        *((_QWORD *)&v97 + 1) = v70;
        operator delete(v70);
      }
      v74 = (std::__shared_weak_count *)*((_QWORD *)&theArray + 1);
      if (*((_QWORD *)&theArray + 1))
      {
        v75 = (unint64_t *)(*((_QWORD *)&theArray + 1) + 8);
        do
          v76 = __ldaxr(v75);
        while (__stlxr(v76 - 1, v75));
        if (!v76)
        {
          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
          std::__shared_weak_count::__release_weak(v74);
        }
      }
      v77 = (std::__shared_weak_count *)*((_QWORD *)&v94 + 1);
      if (*((_QWORD *)&v94 + 1))
      {
        v78 = (unint64_t *)(*((_QWORD *)&v94 + 1) + 8);
        do
          v79 = __ldaxr(v78);
        while (__stlxr(v79 - 1, v78));
        if (!v79)
        {
          ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
          std::__shared_weak_count::__release_weak(v77);
        }
      }
      LODWORD(__src) = 2;
      sub_224501B60(v4, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 4, 4);
      sub_2244FF590((_QWORD *)a1);
      LOBYTE(__src) = __p.__r_.__value_.__s.__data_[0];
      sub_224501B60(v4, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
      sub_223BABD44(__p.__r_.__value_.__s.__data_[0], (uint64_t)&__p, a1);
      v80 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
      *(_QWORD *)(v80 + 10) = *(_QWORD *)(a1 + 32) - v80 - 18;
      *(_QWORD *)(a1 + 56) -= 8;
      v81 = (void *)__p.__r_.__value_.__r.__words[2];
      if (!__p.__r_.__value_.__r.__words[2])
        return;
      v99 = (char *)__p.__r_.__value_.__r.__words[2];
      goto LABEL_145;
    case 1:
      sub_224527CB8(*(_QWORD *)(a2 + 8), &__p);
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = __p.__r_.__value_.__l.__size_;
      __src = size;
      sub_224501B60(v4, *(char **)(a1 + 32), (char *)&__src, (char *)&v97, 8);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        v33 = __p.__r_.__value_.__l.__size_;
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if (!__p.__r_.__value_.__r.__words[0] && __p.__r_.__value_.__l.__size_)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          p_p = 0;
        }
      }
      else
      {
        v33 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        p_p = &__p;
      }
      sub_224501B60(v4, *(char **)(a1 + 32), (char *)p_p, (char *)p_p + v33, v33);
      if (!(_BYTE)v99 || (SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
      v81 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_145:
      operator delete(v81);
      return;
    case 2:
      v20 = *(const __CFBoolean **)(a2 + 8);
      if (v20 && (v21 = CFBooleanGetTypeID(), CFGetTypeID(v20) == v21))
      {
        v22 = CFBooleanGetValue(v20) != 0;
        v23 = 1;
      }
      else
      {
        v22 = 0;
        v23 = 0;
      }
      LOWORD(__p.__r_.__value_.__l.__data_) = v22 | (v23 << 8);
      sub_224501B60(v4, *(char **)(a1 + 32), (char *)&__p, &__p.__r_.__value_.__s.__data_[1], 1);
      return;
    case 3:
      v24 = *(const void **)(a2 + 8);
      if (v24 && (v25 = CFArrayGetTypeID(), CFGetTypeID(v24) == v25))
      {
        sub_2231A7194(&__p, *(CFTypeRef *)(a2 + 8));
        theArray = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v26 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
          v28 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v29 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v30 = __ldaxr(v29);
            while (__stlxr(v30 - 1, v29));
            if (!v30)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
        }
        v31 = (const __CFArray *)theArray;
      }
      else
      {
        v31 = 0;
        theArray = 0uLL;
      }
      memset(&__p, 0, sizeof(__p));
      Count = CFArrayGetCount(v31);
      sub_2231A6C10(&__p.__r_.__value_.__l.__data_, Count);
      if (Count)
      {
        for (i = 0; i != Count; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)theArray, i);
          sub_2231A74D8(&v101, ValueAtIndex);
          v93 = v101;
          if (*((_QWORD *)&v101 + 1))
          {
            v48 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
            do
              v49 = __ldxr(v48);
            while (__stxr(v49 + 1, v48));
            v50 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
            if (*((_QWORD *)&v101 + 1))
            {
              v51 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
              do
                v52 = __ldaxr(v51);
              while (__stlxr(v52 - 1, v51));
              if (!v52)
              {
                ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                std::__shared_weak_count::__release_weak(v50);
              }
            }
          }
          sub_224517D14((uint64_t)&__src, (uint64_t)&v93);
          v53 = __p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
          {
            v54 = sub_2231A7364(&__p.__r_.__value_.__l.__data_, (uint64_t)&__src);
            v55 = (std::__shared_weak_count *)*((_QWORD *)&v97 + 1);
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)v54;
            if (*((_QWORD *)&v97 + 1))
            {
              v56 = (unint64_t *)(*((_QWORD *)&v97 + 1) + 8);
              do
                v57 = __ldaxr(v56);
              while (__stlxr(v57 - 1, v56));
              if (!v57)
              {
                ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                std::__shared_weak_count::__release_weak(v55);
              }
            }
          }
          else
          {
            *(_WORD *)__p.__r_.__value_.__l.__size_ = __src;
            *(_OWORD *)(v53 + 8) = v97;
            v97 = 0uLL;
            __p.__r_.__value_.__l.__size_ = v53 + 24;
          }
          v58 = (std::__shared_weak_count *)*((_QWORD *)&v93 + 1);
          if (*((_QWORD *)&v93 + 1))
          {
            v59 = (unint64_t *)(*((_QWORD *)&v93 + 1) + 8);
            do
              v60 = __ldaxr(v59);
            while (__stlxr(v60 - 1, v59));
            if (!v60)
            {
              ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
              std::__shared_weak_count::__release_weak(v58);
            }
          }
        }
      }
      __src = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3);
      sub_224501B60(v4, *(char **)(a1 + 32), (char *)&__src, (char *)&v97, 8);
      v61 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
      {
        v62 = 24 * ((int64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) / 24);
        do
        {
          LODWORD(v101) = 2;
          sub_224501B60(v4, *(char **)(a1 + 32), (char *)&v101, (char *)&v101 + 4, 4);
          v63 = v101;
          sub_2244FF590((_QWORD *)a1);
          sub_223BAB1F8(a1, v61, v63);
          v64 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
          *(_QWORD *)(v64 + 10) = *(_QWORD *)(a1 + 32) - v64 - 18;
          *(_QWORD *)(a1 + 56) -= 8;
          v61 += 24;
          v62 -= 24;
        }
        while (v62);
        v61 = __p.__r_.__value_.__r.__words[0];
      }
      if (v61)
      {
        v65 = __p.__r_.__value_.__l.__size_;
        v66 = (void *)v61;
        if (__p.__r_.__value_.__l.__size_ != v61)
        {
          do
          {
            v67 = *(std::__shared_weak_count **)(v65 - 8);
            if (v67)
            {
              p_shared_owners = (unint64_t *)&v67->__shared_owners_;
              do
                v69 = __ldaxr(p_shared_owners);
              while (__stlxr(v69 - 1, p_shared_owners));
              if (!v69)
              {
                ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                std::__shared_weak_count::__release_weak(v67);
              }
            }
            v65 -= 24;
          }
          while (v65 != v61);
          v66 = (void *)__p.__r_.__value_.__r.__words[0];
        }
        __p.__r_.__value_.__l.__size_ = v61;
        operator delete(v66);
      }
      v82 = (std::__shared_weak_count *)*((_QWORD *)&theArray + 1);
      if (!*((_QWORD *)&theArray + 1))
        return;
      v83 = (unint64_t *)(*((_QWORD *)&theArray + 1) + 8);
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      goto LABEL_136;
    case 4:
      v12 = *(const void **)(a2 + 8);
      if (v12 && (v13 = CFDictionaryGetTypeID(), CFGetTypeID(v12) == v13))
      {
        sub_22319EE1C(&__p, *(CFTypeRef *)(a2 + 8));
        theArray = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v14 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
          v16 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v17 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
        }
        v19 = (const void *)theArray;
      }
      else
      {
        v19 = 0;
        theArray = 0uLL;
      }
      sub_22319EE1C(&__p, v19);
      v35 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v36 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v37 = __ldxr(v36);
        while (__stxr(v37 + 1, v36));
        v38 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v39 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
        do
          v41 = __ldxr(v36);
        while (__stxr(v41 + 1, v36));
        v101 = v35;
        do
          v42 = __ldxr(v36);
        while (__stxr(v42 + 1, v36));
        do
          v43 = __ldaxr(v36);
        while (__stlxr(v43 - 1, v36));
        if (!v43)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v35 + 1) + 16))(*((_QWORD *)&v35 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v35 + 1));
        }
        do
          v44 = __ldaxr(v36);
        while (__stlxr(v44 - 1, v36));
        if (!v44)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v35 + 1) + 16))(*((_QWORD *)&v35 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v35 + 1));
        }
      }
      else
      {
        v101 = __p.__r_.__value_.__r.__words[0];
      }
      sub_224518820(&__src, (uint64_t)&v101);
      v85 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
      if (*((_QWORD *)&v101 + 1))
      {
        v86 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
      if (*((_QWORD *)&theArray + 1))
      {
        v88 = (unint64_t *)(*((_QWORD *)&theArray + 1) + 8);
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&theArray + 1) + 16))(*((_QWORD *)&theArray + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&theArray + 1));
        }
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 2;
      sub_224501B60(v4, *(char **)(a1 + 32), (char *)&__p, &__p.__r_.__value_.__s.__data_[4], 4);
      data_low = LODWORD(__p.__r_.__value_.__l.__data_);
      sub_2244FF590((_QWORD *)a1);
      sub_223BAAE7C(a1, &__src, data_low);
      v91 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
      *(_QWORD *)(v91 + 10) = *(_QWORD *)(a1 + 32) - v91 - 18;
      *(_QWORD *)(a1 + 56) -= 8;
      v82 = (std::__shared_weak_count *)v97;
      if (!(_QWORD)v97)
        return;
      v92 = (unint64_t *)(v97 + 8);
      do
        v84 = __ldaxr(v92);
      while (__stlxr(v84 - 1, v92));
LABEL_136:
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
      return;
    default:
      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Foundation/FoundationIO/include/Kit/FoundationIO/DictionaryRefIO.h", 281, (uint64_t)"", 0, (uint64_t)"invalid value type identifier", 29, (void (*)(void **))sub_22457406C);
      abort();
  }
}

void sub_223BABBFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va1);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BABC18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  sub_223167354(v6 - 80);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BABC34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BABC48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BABC5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a17)
  {
    a18 = (uint64_t)a17;
    operator delete(a17);
  }
  sub_223167354((uint64_t)&a14);
  sub_223167354((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_223BABC98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26)
{
  if ((_BYTE)a26)
  {
    if (a25 < 0)
    {
      operator delete(__p);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

char *sub_223BABD44(int a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v4;
  _WORD *v5;
  _DWORD *v6;
  uint64_t *v7;
  char *result;
  uint64_t __src;
  uint64_t v10;

  switch(a1)
  {
    case 0:
      v4 = (_BYTE *)sub_22454C038(a2 + 8);
      goto LABEL_7;
    case 1:
      v5 = (_WORD *)sub_22454C290(a2 + 8);
      goto LABEL_9;
    case 2:
      v6 = (_DWORD *)sub_22454C378(a2 + 8);
      goto LABEL_11;
    case 3:
      v7 = (uint64_t *)sub_22454C460(a2 + 8);
      goto LABEL_13;
    case 5:
      v4 = (_BYTE *)sub_22454C548(a2 + 8);
LABEL_7:
      LOBYTE(__src) = *v4;
      return sub_224501B60(a3 + 24, *(char **)(a3 + 32), (char *)&__src, (char *)&__src + 1, 1);
    case 6:
      v5 = (_WORD *)sub_22454C630(a2 + 8);
LABEL_9:
      LOWORD(__src) = *v5;
      return sub_224501B60(a3 + 24, *(char **)(a3 + 32), (char *)&__src, (char *)&__src + 2, 2);
    case 7:
      v6 = (_DWORD *)sub_22454C718(a2 + 8);
LABEL_11:
      LODWORD(__src) = *v6;
      goto LABEL_15;
    case 8:
      v7 = (uint64_t *)sub_22454C800(a2 + 8);
LABEL_13:
      __src = *v7;
      goto LABEL_17;
    case 11:
      LODWORD(__src) = *(_DWORD *)sub_22454C8E8(a2 + 8);
LABEL_15:
      result = sub_224501B60(a3 + 24, *(char **)(a3 + 32), (char *)&__src, (char *)&__src + 4, 4);
      break;
    case 12:
      __src = *(_QWORD *)sub_22454C9D0(a2 + 8);
LABEL_17:
      result = sub_224501B60(a3 + 24, *(char **)(a3 + 32), (char *)&__src, (char *)&v10, 8);
      break;
    default:
      sub_22454B274(a1);
  }
  return result;
}

void sub_223BABEC8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_223B8DACC((uint64_t)v8, a2);
  sub_223BABFE4(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_223BABFCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223B8842C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BABFE4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64x2_t v9;
  int8x16_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  void (*v18)(uint64_t, std::string *);
  void (*v19)(uint64_t, std::string *);
  std::string v20;
  std::string __p;
  char v22;

  __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 8);
  sub_223BAC550((int *)&__p, (_BYTE *)a1, a2 + 8);
  if (*(_BYTE *)(a2 + 48))
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 24);
    if (a3 < 4)
      return;
  }
  else
  {
    __p.__r_.__value_.__s.__data_[0] = 0;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
    if (a3 < 4)
      return;
  }
  if (*(_BYTE *)(a2 + 72))
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
    __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 8);
    sub_223BAC550((int *)&__p, (_BYTE *)a1, a2 + 56);
    if (a3 == 5)
      goto LABEL_7;
  }
  else
  {
    __p.__r_.__value_.__s.__data_[0] = 0;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
    if (a3 == 5)
    {
LABEL_7:
      if (*(_BYTE *)(a2 + 104))
      {
        __p.__r_.__value_.__s.__data_[0] = 1;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 80);
        return;
      }
      goto LABEL_45;
    }
  }
  if (a3 >= 6)
  {
    if ((*(_BYTE *)(a1 + 12) & 4) == 0)
    {
      if (*(_BYTE *)(a2 + 104))
      {
        __p.__r_.__value_.__s.__data_[0] = 1;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 80);
        if (*(_BYTE *)(a2 + 136))
          goto LABEL_14;
      }
      else
      {
        __p.__r_.__value_.__s.__data_[0] = 0;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
        if (*(_BYTE *)(a2 + 136))
        {
LABEL_14:
          __p.__r_.__value_.__s.__data_[0] = 1;
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 112);
          if (*(_BYTE *)(a2 + 168))
            goto LABEL_15;
          goto LABEL_45;
        }
      }
      __p.__r_.__value_.__s.__data_[0] = 0;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
      if (*(_BYTE *)(a2 + 168))
      {
LABEL_15:
        __p.__r_.__value_.__s.__data_[0] = 1;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
        __p.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAABLL
                                         * ((uint64_t)(*(_QWORD *)(a2 + 152) - *(_QWORD *)(a2 + 144)) >> 3);
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 120))(a1, &__p);
        v6 = *(_QWORD *)(a2 + 144);
        v7 = *(_QWORD *)(a2 + 152) - v6;
        if (v7)
        {
          v8 = 24 * (v7 / 24);
          do
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, v6);
            v6 += 24;
            v8 -= 24;
          }
          while (v8);
        }
        return;
      }
LABEL_45:
      __p.__r_.__value_.__s.__data_[0] = 0;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
      return;
    }
    if (*(_BYTE *)(a2 + 104))
    {
      __p.__r_.__value_.__s.__data_[0] = 1;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 80);
      if (*(_BYTE *)(a2 + 136))
        goto LABEL_21;
    }
    else
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
      (*(void (**)(uint64_t, void *))(*(_QWORD *)a1 + 288))(a1, &unk_224667427);
      if (*(_BYTE *)(a2 + 136))
      {
LABEL_21:
        __p.__r_.__value_.__s.__data_[0] = 1;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 112);
        __p.__r_.__value_.__s.__data_[0] = 0;
        v22 = 0;
        if (*(_BYTE *)(a2 + 168))
        {
LABEL_22:
          v11 = *(_QWORD *)(a2 + 144);
          v12 = *(_QWORD *)(a2 + 152);
          if (v11 == v12)
          {
LABEL_39:
            sub_22319C0DC(v11, v12, ";", 1uLL, &v20, v9, v10);
          }
          else
          {
            v13 = *(uint64_t **)(a2 + 144);
            while (1)
            {
              v14 = *((unsigned __int8 *)v13 + 23);
              if ((v14 & 0x80u) == 0)
                v15 = v13;
              else
                v15 = (uint64_t *)*v13;
              if ((v14 & 0x80u) != 0)
                v14 = v13[1];
              if (v14)
              {
                v16 = 0;
                while (1)
                {
                  v17 = *((unsigned __int8 *)v15 + v16);
                  if (v17 == 59 || v17 == 92)
                    break;
                  if (v14 == ++v16)
                    goto LABEL_24;
                }
                if (v14 != v16 && v16 != -1)
                  break;
              }
LABEL_24:
              v13 += 3;
              if (v13 == (uint64_t *)v12)
                goto LABEL_39;
            }
            sub_223B8E59C(v11, v12, *(_QWORD *)(a2 + 152), ";", 1uLL, &v20);
          }
          __p = v20;
          v22 = 1;
          v18 = *(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80);
          v20.__r_.__value_.__s.__data_[0] = 1;
          v18(a1, &v20);
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 144))(a1, &__p);
          if (v22 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          return;
        }
LABEL_48:
        v19 = *(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80);
        v20.__r_.__value_.__s.__data_[0] = 0;
        v19(a1, &v20);
        (*(void (**)(uint64_t, void *))(*(_QWORD *)a1 + 288))(a1, &unk_224667427);
        return;
      }
    }
    __p.__r_.__value_.__s.__data_[0] = 0;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
    (*(void (**)(uint64_t, void *))(*(_QWORD *)a1 + 288))(a1, &unk_224667427);
    __p.__r_.__value_.__s.__data_[0] = 0;
    v22 = 0;
    if (*(_BYTE *)(a2 + 168))
      goto LABEL_22;
    goto LABEL_48;
  }
}

void sub_223BAC52C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a19)
  {
    if (a18 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_223BAC550(int *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  unsigned __int8 *v7;

  LODWORD(v7) = 2;
  (*(void (**)(_BYTE *, unsigned __int8 **))(*(_QWORD *)a2 + 104))(a2, &v7);
  if (*a1 < 1)
  {
    v6 = *(_QWORD *)a2;
LABEL_6:
    (*(void (**)(_BYTE *, uint64_t))(v6 + 72))(a2, a3);
    v7 = (unsigned __int8 *)(a3 + 8);
    sub_223BAC664(a2, &v7);
    return;
  }
  if (*a1 == 2)
  {
    LODWORD(v7) = 2;
    (*(void (**)(_BYTE *, unsigned __int8 **))(*(_QWORD *)a2 + 104))(a2, &v7);
    v6 = *(_QWORD *)a2;
    if (*a1 < 1)
      goto LABEL_6;
  }
  else
  {
    v6 = *(_QWORD *)a2;
  }
  (*(void (**)(_BYTE *))(v6 + 16))(a2);
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 72))(a2, a3);
  v7 = (unsigned __int8 *)(a3 + 8);
  sub_223BAC664(a2, &v7);
  (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 24))(a2);
}

void sub_223BAC664(_BYTE *a1, unsigned __int8 **a2)
{
  unsigned __int8 *v3;
  void *__p[2];
  char v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  if ((a1[12] & 2) != 0)
  {
    v3 = *a2;
    v7 = 0;
    sub_223B8DE00((uint64_t)&v9, (uint64_t)v6, v3);
    if (v7 == -1)
      sub_22316DD70();
    v9 = &v8;
    ((void (*)(void **__return_ptr, char **, _BYTE *))off_24EC5FFA0[v7])(__p, &v9, v6);
    if (v7 != -1)
      ((void (*)(char **, _BYTE *))off_24EC5FF88[v7])(&v9, v6);
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 144))(a1, __p);
    if (v5 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v6[0] = **a2;
    (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v6);
  }
}

void sub_223BAC758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223BAC774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BAC788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BAC79C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_223B8EFDC((uint64_t)v8, a2);
  sub_223BAC8B8(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_223BAC8A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223B8842C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BAC8B8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64x2_t v9;
  int8x16_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  void (*v18)(uint64_t, std::string *);
  void (*v19)(uint64_t, std::string *);
  std::string v20;
  std::string __p;
  char v22;

  __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 8);
  sub_223BAC550((int *)&__p, (_BYTE *)a1, a2 + 8);
  if (*(_BYTE *)(a2 + 48))
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 24);
    if (a3 < 4)
      return;
  }
  else
  {
    __p.__r_.__value_.__s.__data_[0] = 0;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
    if (a3 < 4)
      return;
  }
  if (*(_BYTE *)(a2 + 72))
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
    __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 8);
    sub_223BAC550((int *)&__p, (_BYTE *)a1, a2 + 56);
    if (a3 == 5)
      goto LABEL_7;
  }
  else
  {
    __p.__r_.__value_.__s.__data_[0] = 0;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
    if (a3 == 5)
    {
LABEL_7:
      if (*(_BYTE *)(a2 + 104))
      {
        __p.__r_.__value_.__s.__data_[0] = 1;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 80);
        return;
      }
      goto LABEL_45;
    }
  }
  if (a3 >= 6)
  {
    if ((*(_BYTE *)(a1 + 12) & 4) == 0)
    {
      if (*(_BYTE *)(a2 + 104))
      {
        __p.__r_.__value_.__s.__data_[0] = 1;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 80);
        if (*(_BYTE *)(a2 + 136))
          goto LABEL_14;
      }
      else
      {
        __p.__r_.__value_.__s.__data_[0] = 0;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
        if (*(_BYTE *)(a2 + 136))
        {
LABEL_14:
          __p.__r_.__value_.__s.__data_[0] = 1;
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 112);
          if (*(_BYTE *)(a2 + 168))
            goto LABEL_15;
          goto LABEL_45;
        }
      }
      __p.__r_.__value_.__s.__data_[0] = 0;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
      if (*(_BYTE *)(a2 + 168))
      {
LABEL_15:
        __p.__r_.__value_.__s.__data_[0] = 1;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
        __p.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAABLL
                                         * ((uint64_t)(*(_QWORD *)(a2 + 152) - *(_QWORD *)(a2 + 144)) >> 3);
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 120))(a1, &__p);
        v6 = *(_QWORD *)(a2 + 144);
        v7 = *(_QWORD *)(a2 + 152) - v6;
        if (v7)
        {
          v8 = 24 * (v7 / 24);
          do
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, v6);
            v6 += 24;
            v8 -= 24;
          }
          while (v8);
        }
        return;
      }
LABEL_45:
      __p.__r_.__value_.__s.__data_[0] = 0;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
      return;
    }
    if (*(_BYTE *)(a2 + 104))
    {
      __p.__r_.__value_.__s.__data_[0] = 1;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 80);
      if (*(_BYTE *)(a2 + 136))
        goto LABEL_21;
    }
    else
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
      (*(void (**)(uint64_t, void *))(*(_QWORD *)a1 + 288))(a1, &unk_224667427);
      if (*(_BYTE *)(a2 + 136))
      {
LABEL_21:
        __p.__r_.__value_.__s.__data_[0] = 1;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 112);
        __p.__r_.__value_.__s.__data_[0] = 0;
        v22 = 0;
        if (*(_BYTE *)(a2 + 168))
        {
LABEL_22:
          v11 = *(_QWORD *)(a2 + 144);
          v12 = *(_QWORD *)(a2 + 152);
          if (v11 == v12)
          {
LABEL_39:
            sub_22319C0DC(v11, v12, ";", 1uLL, &v20, v9, v10);
          }
          else
          {
            v13 = *(uint64_t **)(a2 + 144);
            while (1)
            {
              v14 = *((unsigned __int8 *)v13 + 23);
              if ((v14 & 0x80u) == 0)
                v15 = v13;
              else
                v15 = (uint64_t *)*v13;
              if ((v14 & 0x80u) != 0)
                v14 = v13[1];
              if (v14)
              {
                v16 = 0;
                while (1)
                {
                  v17 = *((unsigned __int8 *)v15 + v16);
                  if (v17 == 59 || v17 == 92)
                    break;
                  if (v14 == ++v16)
                    goto LABEL_24;
                }
                if (v14 != v16 && v16 != -1)
                  break;
              }
LABEL_24:
              v13 += 3;
              if (v13 == (uint64_t *)v12)
                goto LABEL_39;
            }
            sub_223B8E59C(v11, v12, *(_QWORD *)(a2 + 152), ";", 1uLL, &v20);
          }
          __p = v20;
          v22 = 1;
          v18 = *(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80);
          v20.__r_.__value_.__s.__data_[0] = 1;
          v18(a1, &v20);
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 144))(a1, &__p);
          if (v22 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          return;
        }
LABEL_48:
        v19 = *(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80);
        v20.__r_.__value_.__s.__data_[0] = 0;
        v19(a1, &v20);
        (*(void (**)(uint64_t, void *))(*(_QWORD *)a1 + 288))(a1, &unk_224667427);
        return;
      }
    }
    __p.__r_.__value_.__s.__data_[0] = 0;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
    (*(void (**)(uint64_t, void *))(*(_QWORD *)a1 + 288))(a1, &unk_224667427);
    __p.__r_.__value_.__s.__data_[0] = 0;
    v22 = 0;
    if (*(_BYTE *)(a2 + 168))
      goto LABEL_22;
    goto LABEL_48;
  }
}

void sub_223BACE00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a19)
  {
    if (a18 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_223BACE24(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_223B8F6B8((uint64_t)v8, a2);
  sub_223BACF40(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_223BACF28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223B8842C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BACF40(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  sub_223BAC550((int *)&v6, (_BYTE *)a1, a2 + 8);
  if (*(_BYTE *)(a2 + 48))
  {
    LOBYTE(v6) = 1;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 80))(a1, &v6);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 24);
    if (a3 < 4)
      return;
  }
  else
  {
    LOBYTE(v6) = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 80))(a1, &v6);
    if (a3 < 4)
      return;
  }
  if (*(_BYTE *)(a2 + 72))
  {
    LOBYTE(v6) = 1;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 80))(a1, &v6);
    v6 = *(_QWORD *)(a1 + 8);
    sub_223BAC550((int *)&v6, (_BYTE *)a1, a2 + 56);
  }
  else
  {
    LOBYTE(v6) = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 80))(a1, &v6);
  }
}

uint64_t sub_223BAD070(_DWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  __int16 v31;
  unint64_t v32;
  __int128 v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  __int16 v43;
  unint64_t v44;
  unint64_t v45;
  char v46;
  __int16 v47;
  __int128 v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  int v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  __int16 v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  __int16 v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  int v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  __int16 v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  __int16 v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t v124;
  int v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  __int16 v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t *v142;
  unint64_t v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  int v154;
  __int16 v155;
  unint64_t *v156;
  unint64_t v157;
  unint64_t v158;
  int v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  int v166;
  int v167;
  unsigned int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unsigned int v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  int v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  int v209;
  uint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  __int16 v214;
  unint64_t v215;
  __int128 v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  uint64_t v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  uint64_t v224;
  int v225;
  uint64_t v226;
  __int16 v227;
  unint64_t v228;
  unint64_t v229;
  char v230;
  __int16 v231;
  __int128 v232;
  unint64_t *v233;
  unint64_t v234;
  unint64_t v235;
  int v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  int v249;
  char **v250;
  unsigned int v251;
  unsigned int v252;
  char v253;
  uint64_t result;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  _QWORD v259[2];
  uint64_t v260;
  std::__shared_weak_count *v261;
  _BYTE v262[32];
  __int128 v263;
  __int16 v264;
  _QWORD v265[2];
  std::__shared_weak_count *v266;
  uint64_t v267;
  int v268;
  uint64_t v269;
  int v270;
  __int16 v271;
  _OWORD v272[2];
  _BYTE v273[64];
  int v274;
  uint64_t (**v275)();
  uint64_t v276;
  std::__shared_weak_count *v277;
  __int128 v278;
  uint64_t v279;
  __int16 v280;
  uint64_t (**v281)();
  uint64_t v282;
  std::__shared_weak_count *v283;
  uint64_t v284;
  int v285;
  uint64_t v286;
  int v287;
  __int16 v288;
  uint64_t (**v289)();
  uint64_t v290;
  std::__shared_weak_count *v291;
  _BYTE v292[32];
  __int128 v293;
  __int16 v294;
  uint64_t (**v295)();
  uint64_t v296;
  std::__shared_weak_count *v297;
  uint64_t v298;
  int v299;
  uint64_t v300;
  int v301;
  __int16 v302;
  _BYTE v303[28];
  _BYTE v304[64];
  int v305;
  uint64_t v306;
  _BYTE v307[32];
  _QWORD v308[2];
  void *v309;
  void *v310;
  int v311;
  void *v312;
  void *v313;
  void *v314;
  void *v315;
  void *v316;
  void *v317;
  void *v318;
  void *v319;
  void *__p;
  void *v321;
  char v322;
  char v323;
  uint64_t v324;

  v324 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)v307 = 6;
  (*(void (**)(_DWORD *, _BYTE *))(*(_QWORD *)a1 + 104))(a1, v307);
  v12 = *(_DWORD *)v307;
  v13 = *(_DWORD *)v307 - 2;
  if (*(_DWORD *)v307 <= 2u)
  {
    v307[0] = 0;
    LOBYTE(v310) = 0;
    sub_223BB0368(a1, (uint64_t)v307, v6, v7, v8, v9, v10, v11);
LABEL_5:
    v307[0] = 0;
    LOBYTE(v310) = 0;
    sub_223BB0368(a1, (uint64_t)v307, v14, v15, v16, v17, v18, v19);
    if (v12 < 4)
    {
      v307[0] = 0;
      LOBYTE(v313) = 0;
      sub_223BAF6E0(a1, (uint64_t)v307, v25, v20, v21, v22, v23, v24);
      goto LABEL_56;
    }
    goto LABEL_6;
  }
  sub_223BAFF40(a1, a2 + 8, v6, v7, v8, v9, v10, v11);
  if (v12 < 5)
    goto LABEL_5;
  sub_223BAFF40(a1, a2 + 72, v14, v15, v16, v17, v18, v19);
LABEL_6:
  v26 = *(unsigned __int8 *)(a2 + 216);
  if (*(_BYTE *)(a2 + 216))
  {
    v259[1] = &off_24EC25150;
    v27 = *(_QWORD *)(a2 + 144);
    v28 = *(std::__shared_weak_count **)(a2 + 152);
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(p_shared_owners);
      while (__stxr(v30 + 1, p_shared_owners));
      v31 = *(_WORD *)(a2 + 208);
      do
        v32 = __ldxr(p_shared_owners);
      while (__stxr(v32 + 1, p_shared_owners));
      v33 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)v262 = *(_OWORD *)(a2 + 160);
      *(_OWORD *)&v262[16] = v33;
      v263 = *(_OWORD *)(a2 + 192);
      do
        v34 = __ldxr(p_shared_owners);
      while (__stxr(v34 + 1, p_shared_owners));
      v260 = v27;
      v261 = v28;
      v264 = v31;
      do
        v35 = __ldaxr(p_shared_owners);
      while (__stlxr(v35 - 1, p_shared_owners));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
      do
        v36 = __ldaxr(p_shared_owners);
      while (__stlxr(v36 - 1, p_shared_owners));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
      v265[0] = &off_24EC1F8C8;
      v27 = v260;
      v37 = v261;
      v38 = (unint64_t *)&v261->__shared_owners_;
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
      v40 = *(_QWORD *)&v262[12];
      v41 = *(_DWORD *)&v262[28];
      v42 = *(_QWORD *)v262;
      v43 = v264;
      do
        v44 = __ldxr(v38);
      while (__stxr(v44 + 1, v38));
      do
        v45 = __ldxr(v38);
      while (__stxr(v45 + 1, v38));
    }
    else
    {
      v47 = *(_WORD *)(a2 + 208);
      v260 = *(_QWORD *)(a2 + 144);
      v261 = 0;
      v48 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)v262 = *(_OWORD *)(a2 + 160);
      *(_OWORD *)&v262[16] = v48;
      v263 = *(_OWORD *)(a2 + 192);
      v264 = v47;
      v265[0] = &off_24EC1F8C8;
      v37 = 0;
      v40 = *(_QWORD *)&v262[12];
      v41 = HIDWORD(v48);
      v42 = *(_QWORD *)v262;
      v43 = v264;
    }
    v265[1] = v27;
    v266 = v37;
    v267 = v40;
    v268 = 2 * v41;
    v269 = v42;
    v270 = 31;
    v271 = v43;
    if (v37)
    {
      v49 = (unint64_t *)&v37->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
      do
        v51 = __ldaxr(v49);
      while (__stlxr(v51 - 1, v49));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    sub_22416BFE0((uint64_t)v272, (uint64_t)v265, 0, v20, v21, v22, v23, v24);
    *(_OWORD *)v307 = v272[0];
    *(_OWORD *)&v307[12] = *(_OWORD *)((char *)v272 + 12);
    LOBYTE(v308[0]) = 0;
    LODWORD(v314) = -1;
    v52 = v274;
    if (v274 != -1)
    {
      ((void (*)(uint64_t (***)(), _QWORD *, _BYTE *))off_24EC60008[v274])(&v289, v308, v273);
      LODWORD(v314) = v52;
    }
    v46 = 1;
  }
  else
  {
    v46 = 0;
    v307[0] = 0;
  }
  LOBYTE(v315) = v46;
  sub_223BB0790(a1, (uint64_t)v307);
  if ((_BYTE)v315)
  {
    if ((_DWORD)v314 != -1)
      ((void (*)(_BYTE *, _QWORD *))off_24EC5FFD0[v314])(v303, v308);
    LODWORD(v314) = -1;
  }
  if (!v26)
    goto LABEL_56;
  if (v274 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_24EC5FFD0[v274])(v303, v273);
  v274 = -1;
  v53 = v266;
  if (!v266)
    goto LABEL_52;
  v54 = (unint64_t *)&v266->__shared_owners_;
  do
    v55 = __ldaxr(v54);
  while (__stlxr(v55 - 1, v54));
  if (!v55)
  {
    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
    std::__shared_weak_count::__release_weak(v53);
    v56 = v261;
    if (!v261)
      goto LABEL_56;
  }
  else
  {
LABEL_52:
    v56 = v261;
    if (!v261)
      goto LABEL_56;
  }
  v57 = (unint64_t *)&v56->__shared_owners_;
  do
    v58 = __ldaxr(v57);
  while (__stlxr(v58 - 1, v57));
  if (v58)
  {
LABEL_56:
    if (*(_BYTE *)(a2 + 496))
      goto LABEL_57;
LABEL_113:
    v307[0] = 0;
    (*(void (**)(_DWORD *, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v307);
    goto LABEL_224;
  }
  ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
  std::__shared_weak_count::__release_weak(v56);
  if (!*(_BYTE *)(a2 + 496))
    goto LABEL_113;
LABEL_57:
  v307[0] = 1;
  (*(void (**)(_DWORD *, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v307);
  *(_DWORD *)v307 = 2;
  (*(void (**)(_DWORD *, _BYTE *))(*(_QWORD *)a1 + 104))(a1, v307);
  if (*(_DWORD *)v307 > 1u)
  {
    *(_QWORD *)v303 = &off_24EC1F958;
    sub_2231B3FDC((uint64_t)&v303[8]);
    sub_22416BD7C((uint64_t)v307, (uint64_t)v303, 0);
    v92 = *(std::__shared_weak_count **)&v303[16];
    if (!*(_QWORD *)&v303[16])
      goto LABEL_88;
    v93 = (unint64_t *)(*(_QWORD *)&v303[16] + 8);
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
      *(_DWORD *)&v307[24] = 0;
      v95 = *(unsigned __int8 *)(a2 + 280);
      if (*(_BYTE *)(a2 + 280))
      {
LABEL_89:
        v275 = &off_24EC200A8;
        v96 = *(_QWORD *)(a2 + 232);
        v97 = *(std::__shared_weak_count **)(a2 + 240);
        if (v97)
        {
          v98 = (unint64_t *)&v97->__shared_owners_;
          do
            v99 = __ldxr(v98);
          while (__stxr(v99 + 1, v98));
          v100 = *(_WORD *)(a2 + 272);
          do
            v101 = __ldxr(v98);
          while (__stxr(v101 + 1, v98));
          v278 = *(_OWORD *)(a2 + 248);
          v279 = *(_QWORD *)(a2 + 264);
          do
            v102 = __ldxr(v98);
          while (__stxr(v102 + 1, v98));
          v276 = v96;
          v277 = v97;
          v280 = v100;
          do
            v103 = __ldaxr(v98);
          while (__stlxr(v103 - 1, v98));
          if (!v103)
          {
            ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
            std::__shared_weak_count::__release_weak(v97);
          }
          do
            v104 = __ldaxr(v98);
          while (__stlxr(v104 - 1, v98));
          if (!v104)
          {
            ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
            std::__shared_weak_count::__release_weak(v97);
          }
          v281 = &off_24EC1F8C8;
          v105 = v276;
          v106 = v277;
          if (v277)
          {
            v107 = (unint64_t *)&v277->__shared_owners_;
            do
              v108 = __ldxr(v107);
            while (__stxr(v108 + 1, v107));
            v109 = HIDWORD(v279);
            v110 = *((_QWORD *)&v278 + 1);
            v111 = v278;
            v112 = v280;
            do
              v113 = __ldxr(v107);
            while (__stxr(v113 + 1, v107));
            do
              v114 = __ldxr(v107);
            while (__stxr(v114 + 1, v107));
            goto LABEL_185;
          }
        }
        else
        {
          v155 = *(_WORD *)(a2 + 272);
          v276 = *(_QWORD *)(a2 + 232);
          v277 = 0;
          v278 = *(_OWORD *)(a2 + 248);
          v279 = *(_QWORD *)(a2 + 264);
          v280 = v155;
          v281 = &off_24EC1F8C8;
          v105 = v276;
          v106 = 0;
        }
        v109 = HIDWORD(v279);
        v110 = *((_QWORD *)&v278 + 1);
        v111 = v278;
        v112 = v280;
LABEL_185:
        v282 = v105;
        v283 = v106;
        v284 = v110;
        v285 = 2 * v109;
        v286 = v111;
        v287 = 3;
        v288 = v112;
        if (v106)
        {
          v156 = (unint64_t *)&v106->__shared_owners_;
          do
            v157 = __ldaxr(v156);
          while (__stlxr(v157 - 1, v156));
          if (!v157)
          {
            ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
            std::__shared_weak_count::__release_weak(v106);
          }
          do
            v158 = __ldaxr(v156);
          while (__stlxr(v158 - 1, v156));
          if (!v158)
          {
            ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
            std::__shared_weak_count::__release_weak(v106);
          }
        }
        sub_22416BFE0((uint64_t)v303, (uint64_t)&v281, 0, v87, v88, v89, v90, v91);
LABEL_194:
        v159 = a1[2];
        LODWORD(v289) = 2;
        (*(void (**)(_DWORD *, uint64_t (***)()))(*(_QWORD *)a1 + 104))(a1, &v289);
        if (v159 < 1)
        {
          sub_223BB08B4((uint64_t)a1, (uint64_t)v303);
        }
        else
        {
          if (v159 == 2)
          {
            LODWORD(v289) = 2;
            (*(void (**)(_DWORD *, uint64_t (***)()))(*(_QWORD *)a1 + 104))(a1, &v289);
          }
          (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 16))(a1);
          sub_223BB08B4((uint64_t)a1, (uint64_t)v303);
          (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 24))(a1);
        }
        if (v305 != -1)
          ((void (*)(uint64_t (***)(), _BYTE *))off_24EC5FFD0[v305])(&v289, v304);
        v305 = -1;
        if (v95)
        {
          v160 = v283;
          if (v283)
          {
            v161 = (unint64_t *)&v283->__shared_owners_;
            do
              v162 = __ldaxr(v161);
            while (__stlxr(v162 - 1, v161));
            if (!v162)
            {
              ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
              std::__shared_weak_count::__release_weak(v160);
            }
          }
          v163 = v277;
          if (v277)
          {
            v164 = (unint64_t *)&v277->__shared_owners_;
            do
              v165 = __ldaxr(v164);
            while (__stlxr(v165 - 1, v164));
            if (!v165)
            {
              ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
              std::__shared_weak_count::__release_weak(v163);
            }
          }
        }
        if ((_DWORD)v314 != -1)
          ((void (*)(_BYTE *, _QWORD *))off_24EC5FFD0[v314])(v303, v308);
        goto LABEL_214;
      }
    }
    else
    {
LABEL_88:
      *(_DWORD *)&v307[24] = 0;
      v95 = *(unsigned __int8 *)(a2 + 280);
      if (*(_BYTE *)(a2 + 280))
        goto LABEL_89;
    }
    *(_OWORD *)v303 = *(_OWORD *)v307;
    *(_OWORD *)&v303[12] = *(_OWORD *)&v307[12];
    v304[0] = 0;
    v305 = -1;
    v154 = (int)v314;
    if ((_DWORD)v314 != -1)
    {
      ((void (*)(uint64_t (***)(), _BYTE *, _QWORD *))off_24EC5FFF8[v314])(&v295, v304, v308);
      v305 = v154;
    }
    goto LABEL_194;
  }
  LOBYTE(v289) = 0;
  LOBYTE(v293) = 0;
  *(_QWORD *)v303 = &off_24EC1F958;
  sub_2231B3FDC((uint64_t)&v303[8]);
  sub_22416BD7C((uint64_t)v307, (uint64_t)v303, 0);
  v64 = *(std::__shared_weak_count **)&v303[16];
  if (!*(_QWORD *)&v303[16])
    goto LABEL_62;
  v65 = (unint64_t *)(*(_QWORD *)&v303[16] + 8);
  do
    v66 = __ldaxr(v65);
  while (__stlxr(v66 - 1, v65));
  if (v66)
  {
LABEL_62:
    *(_DWORD *)&v307[24] = 0;
    v67 = v293;
    if ((_BYTE)v293)
      goto LABEL_63;
LABEL_115:
    *(_OWORD *)v303 = *(_OWORD *)v307;
    *(_OWORD *)&v303[12] = *(_OWORD *)&v307[12];
    v304[0] = 0;
    v305 = -1;
    v121 = (int)v314;
    if ((_DWORD)v314 != -1)
    {
      ((void (*)(uint64_t (***)(), _BYTE *, _QWORD *))off_24EC5FFF8[v314])(&v281, v304, v308);
      v305 = v121;
    }
    goto LABEL_128;
  }
  ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
  std::__shared_weak_count::__release_weak(v64);
  *(_DWORD *)&v307[24] = 0;
  v67 = v293;
  if (!(_BYTE)v293)
    goto LABEL_115;
LABEL_63:
  v275 = &off_24EC21230;
  v68 = v290;
  v69 = v291;
  if (v291)
  {
    v70 = (unint64_t *)&v291->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
    v72 = *(_WORD *)&v292[24];
    do
      v73 = __ldxr(v70);
    while (__stxr(v73 + 1, v70));
    v278 = *(_OWORD *)v292;
    v279 = *(_QWORD *)&v292[16];
    do
      v74 = __ldxr(v70);
    while (__stxr(v74 + 1, v70));
    v276 = v68;
    v277 = v69;
    v280 = v72;
    do
      v75 = __ldaxr(v70);
    while (__stlxr(v75 - 1, v70));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
    do
      v76 = __ldaxr(v70);
    while (__stlxr(v76 - 1, v70));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
    v281 = &off_24EC1F8C8;
    v77 = v276;
    v78 = v277;
    if (v277)
    {
      v79 = (unint64_t *)&v277->__shared_owners_;
      do
        v80 = __ldxr(v79);
      while (__stxr(v80 + 1, v79));
      v81 = HIDWORD(v279);
      v82 = *((_QWORD *)&v278 + 1);
      v83 = v278;
      v84 = v280;
      do
        v85 = __ldxr(v79);
      while (__stxr(v85 + 1, v79));
      do
        v86 = __ldxr(v79);
      while (__stxr(v86 + 1, v79));
      goto LABEL_119;
    }
  }
  else
  {
    v276 = v290;
    v277 = 0;
    v278 = *(_OWORD *)v292;
    v279 = *(_QWORD *)&v292[16];
    v280 = *(_WORD *)&v292[24];
    v281 = &off_24EC1F8C8;
    v77 = v290;
    v78 = 0;
  }
  v81 = HIDWORD(v279);
  v82 = *((_QWORD *)&v278 + 1);
  v83 = v278;
  v84 = v280;
LABEL_119:
  v282 = v77;
  v283 = v78;
  v284 = v82;
  v285 = 4 * v81;
  v286 = v83;
  v287 = 4;
  v288 = v84;
  if (v78)
  {
    v122 = (unint64_t *)&v78->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
    do
      v124 = __ldaxr(v122);
    while (__stlxr(v124 - 1, v122));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  sub_22416BFE0((uint64_t)v303, (uint64_t)&v281, 0, v59, v60, v61, v62, v63);
LABEL_128:
  v125 = a1[2];
  LODWORD(v295) = 2;
  (*(void (**)(_DWORD *, uint64_t (***)()))(*(_QWORD *)a1 + 104))(a1, &v295);
  if (v125 < 1)
  {
    sub_223BB08B4((uint64_t)a1, (uint64_t)v303);
  }
  else
  {
    if (v125 == 2)
    {
      LODWORD(v295) = 2;
      (*(void (**)(_DWORD *, uint64_t (***)()))(*(_QWORD *)a1 + 104))(a1, &v295);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 16))(a1);
    sub_223BB08B4((uint64_t)a1, (uint64_t)v303);
    (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 24))(a1);
  }
  if (v305 != -1)
    ((void (*)(uint64_t (***)(), _BYTE *))off_24EC5FFD0[v305])(&v295, v304);
  v305 = -1;
  if (v67)
  {
    v126 = v283;
    if (v283)
    {
      v127 = (unint64_t *)&v283->__shared_owners_;
      do
        v128 = __ldaxr(v127);
      while (__stlxr(v128 - 1, v127));
      if (!v128)
      {
        ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
        std::__shared_weak_count::__release_weak(v126);
      }
    }
    v129 = v277;
    if (v277)
    {
      v130 = (unint64_t *)&v277->__shared_owners_;
      do
        v131 = __ldaxr(v130);
      while (__stlxr(v131 - 1, v130));
      if (!v131)
      {
        ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
        std::__shared_weak_count::__release_weak(v129);
      }
    }
  }
  if ((_DWORD)v314 != -1)
    ((void (*)(_BYTE *, _QWORD *))off_24EC5FFD0[v314])(v303, v308);
  v295 = &off_24EC1F8C8;
  v132 = v290;
  v133 = v291;
  if (v291)
  {
    v134 = (unint64_t *)&v291->__shared_owners_;
    do
      v135 = __ldxr(v134);
    while (__stxr(v135 + 1, v134));
    v136 = *(_DWORD *)&v292[20];
    v138 = *(_QWORD *)v292;
    v137 = *(_QWORD *)&v292[8];
    v139 = *(_WORD *)&v292[24];
    do
      v140 = __ldxr(v134);
    while (__stxr(v140 + 1, v134));
    do
      v141 = __ldxr(v134);
    while (__stxr(v141 + 1, v134));
  }
  else
  {
    v136 = *(_DWORD *)&v292[20];
    v138 = *(_QWORD *)v292;
    v137 = *(_QWORD *)&v292[8];
    v139 = *(_WORD *)&v292[24];
  }
  v296 = v132;
  v297 = v133;
  v298 = v137;
  v299 = 4 * v136;
  v300 = v138;
  v301 = 4;
  v302 = v139;
  if (v133)
  {
    v142 = (unint64_t *)&v133->__shared_owners_;
    do
      v143 = __ldaxr(v142);
    while (__stlxr(v143 - 1, v142));
    if (!v143)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
    do
      v144 = __ldaxr(v142);
    while (__stlxr(v144 - 1, v142));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
  v307[8] = 0;
  v307[24] = 0;
  LOBYTE(v308[0]) = 0;
  LOBYTE(v309) = 0;
  LOBYTE(v310) = 1;
  v311 = 0;
  sub_22432B21C((uint64_t)&v295, 3u, (uint64_t)v303);
  sub_2232C1348(a2 + 224, (uint64_t)v303);
  v145 = *(std::__shared_weak_count **)&v303[16];
  if (*(_QWORD *)&v303[16])
  {
    v146 = (unint64_t *)(*(_QWORD *)&v303[16] + 8);
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
  v148 = v297;
  if (v297)
  {
    v149 = (unint64_t *)&v297->__shared_owners_;
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
      std::__shared_weak_count::__release_weak(v148);
    }
  }
  if ((_BYTE)v293)
  {
    v289 = &off_24EC27198;
    v151 = v291;
    if (v291)
    {
      v152 = (unint64_t *)&v291->__shared_owners_;
      do
        v153 = __ldaxr(v152);
      while (__stlxr(v153 - 1, v152));
      if (!v153)
      {
        ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
        std::__shared_weak_count::__release_weak(v151);
      }
    }
  }
LABEL_214:
  v166 = a1[2];
  *(_DWORD *)v307 = 2;
  (*(void (**)(_DWORD *, _BYTE *))(*(_QWORD *)a1 + 104))(a1, v307);
  if (v166 < 1)
  {
    sub_223BB08B4((uint64_t)a1, a2 + 288);
  }
  else
  {
    if (v166 == 2)
    {
      *(_DWORD *)v307 = 2;
      (*(void (**)(_DWORD *, _BYTE *))(*(_QWORD *)a1 + 104))(a1, v307);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 16))(a1);
    sub_223BB08B4((uint64_t)a1, a2 + 288);
    (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 24))(a1);
  }
  v167 = a1[2];
  *(_DWORD *)v307 = 2;
  (*(void (**)(_DWORD *, _BYTE *))(*(_QWORD *)a1 + 104))(a1, v307);
  if (v167 < 1)
  {
    sub_223BB08B4((uint64_t)a1, a2 + 392);
  }
  else
  {
    if (v167 == 2)
    {
      *(_DWORD *)v307 = 2;
      (*(void (**)(_DWORD *, _BYTE *))(*(_QWORD *)a1 + 104))(a1, v307);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 16))(a1);
    sub_223BB08B4((uint64_t)a1, a2 + 392);
    (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 24))(a1);
  }
LABEL_224:
  if (v13 <= 3)
  {
    v307[0] = 0;
    LOBYTE(v310) = 0;
    sub_223BAFF40(a1, (uint64_t)v307, v115, v116, v117, v118, v119, v120);
  }
  *(_DWORD *)v307 = 2;
  (*(void (**)(_DWORD *, _BYTE *))(*(_QWORD *)a1 + 104))(a1, v307);
  v168 = *(_DWORD *)v307;
  sub_223BAFB1C(a1, a2 + 504, v169, v170, v171, v172, v173, v174);
  if (v168 < 2)
  {
    v307[0] = 0;
    LOBYTE(v310) = 0;
    sub_223BB0368(a1, (uint64_t)v307, v175, v176, v177, v178, v179, v180);
  }
  else
  {
    sub_223BAFF40(a1, a2 + 568, v175, v176, v177, v178, v179, v180);
  }
  if (a3 > 4)
  {
    *(_DWORD *)v307 = 5;
    (*(void (**)(_DWORD *, _BYTE *))(*(_QWORD *)a1 + 104))(a1, v307);
    v193 = *(_DWORD *)v307;
    sub_223BAF6E0(a1, a2 + 632, v194, v195, v196, v197, v198, v199);
    if (*(_BYTE *)(a2 + 724))
    {
      v307[0] = 1;
      (*(void (**)(_DWORD *, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v307);
      (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 720);
    }
    else
    {
      v307[0] = 0;
      (*(void (**)(_DWORD *, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v307);
    }
    if (v193 >= 2)
    {
      if (*(_BYTE *)(a2 + 752))
      {
        v307[0] = 1;
        (*(void (**)(_DWORD *, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v307);
        *(_QWORD *)v307 = (uint64_t)(*(_QWORD *)(a2 + 736) - *(_QWORD *)(a2 + 728)) >> 1;
        (*(void (**)(_DWORD *, _BYTE *))(*(_QWORD *)a1 + 120))(a1, v307);
        v200 = *(_QWORD *)(a2 + 728);
        v201 = *(_QWORD *)(a2 + 736) - v200;
        if (v201)
        {
          v202 = 2 * (v201 >> 1);
          do
          {
            (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 96))(a1, v200);
            v200 += 2;
            v202 -= 2;
          }
          while (v202);
        }
      }
      else
      {
        v307[0] = 0;
        (*(void (**)(_DWORD *, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v307);
      }
      if (*(_BYTE *)(a2 + 764))
      {
        v307[0] = 1;
        (*(void (**)(_DWORD *, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v307);
        (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 104))(a1, a2 + 760);
      }
      else
      {
        v307[0] = 0;
        (*(void (**)(_DWORD *, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v307);
      }
      if (*(_BYTE *)(a2 + 772))
      {
        v307[0] = 1;
        (*(void (**)(_DWORD *, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v307);
        (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 104))(a1, a2 + 768);
      }
      else
      {
        v307[0] = 0;
        (*(void (**)(_DWORD *, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v307);
      }
      if (v193 >= 3)
      {
        if (*(_BYTE *)(a2 + 780))
        {
          v307[0] = 1;
          (*(void (**)(_DWORD *, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v307);
          (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 104))(a1, a2 + 776);
        }
        else
        {
          v307[0] = 0;
          (*(void (**)(_DWORD *, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v307);
        }
        if (v193 >= 4)
        {
          v203 = a1[2];
          *(_DWORD *)v307 = 2;
          (*(void (**)(_DWORD *, _BYTE *))(*(_QWORD *)a1 + 104))(a1, v307);
          if (v203 < 1)
          {
            sub_223BB1294(a1, a2 + 784);
          }
          else
          {
            if (v203 == 2)
            {
              *(_DWORD *)v307 = 2;
              (*(void (**)(_DWORD *, _BYTE *))(*(_QWORD *)a1 + 104))(a1, v307);
            }
            (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 16))(a1);
            sub_223BB1294(a1, a2 + 784);
            (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 24))(a1);
          }
          if (v193 >= 5)
          {
            if (*(_BYTE *)(a2 + 836))
            {
              v307[0] = 1;
              (*(void (**)(_DWORD *, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v307);
              (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 800);
              (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 804);
              (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 808);
              (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 812);
              (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 816);
              (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 820);
              (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 824);
              (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 828);
              (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 832);
            }
            else
            {
              v307[0] = 0;
              (*(void (**)(_DWORD *, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v307);
            }
          }
        }
      }
    }
  }
  else
  {
    sub_223BAF6E0(a1, a2 + 632, v181, v182, v183, v184, v185, v186);
  }
  sub_223BAFB1C(a1, a2 + 840, v187, v188, v189, v190, v191, v192);
  *(_DWORD *)v307 = 1;
  (*(void (**)(_DWORD *, _BYTE *))(*(_QWORD *)a1 + 104))(a1, v307);
  v209 = *(unsigned __int8 *)(a2 + 984);
  if (!*(_BYTE *)(a2 + 984))
  {
    v230 = 0;
    v307[0] = 0;
    goto LABEL_296;
  }
  v289 = &off_24EC28E38;
  v210 = *(_QWORD *)(a2 + 912);
  v211 = *(std::__shared_weak_count **)(a2 + 920);
  if (v211)
  {
    v212 = (unint64_t *)&v211->__shared_owners_;
    do
      v213 = __ldxr(v212);
    while (__stxr(v213 + 1, v212));
    v214 = *(_WORD *)(a2 + 976);
    do
      v215 = __ldxr(v212);
    while (__stxr(v215 + 1, v212));
    v216 = *(_OWORD *)(a2 + 944);
    *(_OWORD *)v292 = *(_OWORD *)(a2 + 928);
    *(_OWORD *)&v292[16] = v216;
    v293 = *(_OWORD *)(a2 + 960);
    do
      v217 = __ldxr(v212);
    while (__stxr(v217 + 1, v212));
    v290 = v210;
    v291 = v211;
    v294 = v214;
    do
      v218 = __ldaxr(v212);
    while (__stlxr(v218 - 1, v212));
    if (!v218)
    {
      ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
      std::__shared_weak_count::__release_weak(v211);
    }
    do
      v219 = __ldaxr(v212);
    while (__stlxr(v219 - 1, v212));
    if (v219)
    {
      v295 = &off_24EC1F8C8;
      v220 = v290;
      v221 = v291;
      if (v291)
        goto LABEL_276;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
      std::__shared_weak_count::__release_weak(v211);
      v295 = &off_24EC1F8C8;
      v220 = v290;
      v221 = v291;
      if (v291)
      {
LABEL_276:
        v222 = (unint64_t *)&v221->__shared_owners_;
        do
          v223 = __ldxr(v222);
        while (__stxr(v223 + 1, v222));
        v224 = *(_QWORD *)&v292[12];
        v225 = *(_DWORD *)&v292[28];
        v226 = *(_QWORD *)v292;
        v227 = v294;
        do
          v228 = __ldxr(v222);
        while (__stxr(v228 + 1, v222));
        do
          v229 = __ldxr(v222);
        while (__stxr(v229 + 1, v222));
        goto LABEL_285;
      }
    }
  }
  else
  {
    v231 = *(_WORD *)(a2 + 976);
    v290 = *(_QWORD *)(a2 + 912);
    v291 = 0;
    v232 = *(_OWORD *)(a2 + 944);
    *(_OWORD *)v292 = *(_OWORD *)(a2 + 928);
    *(_OWORD *)&v292[16] = v232;
    v293 = *(_OWORD *)(a2 + 960);
    v294 = v231;
    v295 = &off_24EC1F8C8;
    v220 = v290;
    v221 = 0;
  }
  v224 = *(_QWORD *)&v292[12];
  v225 = *(_DWORD *)&v292[28];
  v226 = *(_QWORD *)v292;
  v227 = v294;
LABEL_285:
  v296 = v220;
  v297 = v221;
  v298 = v224;
  v299 = v225;
  v300 = v226;
  v301 = 25;
  v302 = v227;
  if (v221)
  {
    v233 = (unint64_t *)&v221->__shared_owners_;
    do
      v234 = __ldaxr(v233);
    while (__stlxr(v234 - 1, v233));
    if (!v234)
    {
      ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
      std::__shared_weak_count::__release_weak(v221);
    }
    do
      v235 = __ldaxr(v233);
    while (__stlxr(v235 - 1, v233));
    if (!v235)
    {
      ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
      std::__shared_weak_count::__release_weak(v221);
    }
  }
  sub_22416BFE0((uint64_t)v303, (uint64_t)&v295, 0, v204, v205, v206, v207, v208);
  *(_OWORD *)v307 = *(_OWORD *)v303;
  *(_OWORD *)&v307[12] = *(_OWORD *)&v303[12];
  LOBYTE(v308[0]) = 0;
  LODWORD(v314) = -1;
  v236 = v305;
  if (v305 != -1)
  {
    ((void (*)(_QWORD *, _QWORD *, _BYTE *))off_24EC60008[v305])(v259, v308, v304);
    LODWORD(v314) = v236;
  }
  v230 = 1;
LABEL_296:
  LOBYTE(v315) = v230;
  sub_223BB0790(a1, (uint64_t)v307);
  if ((_BYTE)v315)
  {
    if ((_DWORD)v314 != -1)
      ((void (*)(uint64_t *, _QWORD *))off_24EC5FFD0[v314])(&v306, v308);
    LODWORD(v314) = -1;
  }
  if (v209)
  {
    if (v305 != -1)
      ((void (*)(uint64_t *, _BYTE *))off_24EC5FFD0[v305])(&v306, v304);
    v305 = -1;
    v243 = v297;
    if (v297)
    {
      v244 = (unint64_t *)&v297->__shared_owners_;
      do
        v245 = __ldaxr(v244);
      while (__stlxr(v245 - 1, v244));
      if (!v245)
      {
        ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
        std::__shared_weak_count::__release_weak(v243);
      }
    }
    v246 = v291;
    if (v291)
    {
      v247 = (unint64_t *)&v291->__shared_owners_;
      do
        v248 = __ldaxr(v247);
      while (__stlxr(v248 - 1, v247));
      if (!v248)
      {
        ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
        std::__shared_weak_count::__release_weak(v246);
      }
    }
  }
  sub_223BAF6E0(a1, a2 + 992, v237, v238, v239, v240, v241, v242);
  (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2 + 1080);
  (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 1084);
  (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 1088);
  (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 1092);
  *(_QWORD *)v307 = *(_QWORD *)(a2 + 1136);
  (*(void (**)(_DWORD *, _BYTE *))(*(_QWORD *)a1 + 72))(a1, v307);
  *(_QWORD *)v307 = *((_QWORD *)a1 + 1);
  sub_223BB2530((int *)v307, (uint64_t)a1, a2 + 1144);
  (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 1184);
  (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 1192);
  (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 1200);
  (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 1208);
  (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 1216);
  (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 1224);
  (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 1232);
  (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 1240);
  (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 1248);
  (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 1256);
  (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 1264);
  (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 1272);
  (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 1280);
  (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 1288);
  (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 1296);
  (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 1304);
  if (a3 == 1)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/include/Reconstruction/Frame/FrameBundleSample.h", 528, (uint64_t)"io::is_input_archive_v<Archive>", 31, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v307[0] = 0;
    v323 = 0;
    LOBYTE(v306) = 0;
    (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a1 + 80))(a1, &v306);
    if (!v323)
      goto LABEL_347;
    v249 = *(unsigned __int8 *)(a2 + 1512);
    *(_OWORD *)(a2 + 1312) = *(_OWORD *)v307;
    *(_DWORD *)(a2 + 1328) = *(_DWORD *)&v307[16];
    v250 = (char **)(a2 + 1336);
    if (v249)
    {
      sub_2232C6B24(v250, (char **)&v307[24]);
      *(_BYTE *)(a2 + 1504) = v322;
      if (!v323)
        goto LABEL_347;
    }
    else
    {
      sub_2232C6D24(v250, (uint64_t)&v307[24]);
      v253 = v322;
      *(_BYTE *)(a2 + 1512) = 1;
      *(_BYTE *)(a2 + 1504) = v253;
      if (!v323)
      {
LABEL_347:
        *(_DWORD *)v307 = 0;
        (*(void (**)(_DWORD *, _BYTE *))(*(_QWORD *)a1 + 104))(a1, v307);
        goto LABEL_348;
      }
    }
    if (__p)
    {
      v321 = __p;
      operator delete(__p);
    }
    if (v318)
    {
      v319 = v318;
      operator delete(v318);
    }
    if (v316)
    {
      v317 = v316;
      operator delete(v316);
    }
    if (v314)
    {
      v315 = v314;
      operator delete(v314);
    }
    if (v312)
    {
      v313 = v312;
      operator delete(v312);
    }
    if (v309)
    {
      v310 = v309;
      operator delete(v309);
    }
    if (*(_QWORD *)&v307[24])
    {
      v308[0] = *(_QWORD *)&v307[24];
      operator delete(*(void **)&v307[24]);
    }
    goto LABEL_347;
  }
  if (a3 > 6)
  {
    if (*(_BYTE *)(a2 + 1512))
    {
      v307[0] = 1;
      (*(void (**)(_DWORD *, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v307);
      *(_DWORD *)v307 = 4;
      (*(void (**)(_DWORD *, _BYTE *))(*(_QWORD *)a1 + 104))(a1, v307);
      v251 = *(_DWORD *)v307;
      (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 32))(a1, a2 + 1312);
      (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 32))(a1, a2 + 1313);
      (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2 + 1316);
      *(_QWORD *)v307 = *(_QWORD *)(a2 + 1320);
      (*(void (**)(_DWORD *, _BYTE *))(*(_QWORD *)a1 + 72))(a1, v307);
      (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2 + 1328);
      if (v251 >= 2)
      {
        *(_DWORD *)v307 = 2;
        (*(void (**)(_DWORD *, _BYTE *))(*(_QWORD *)a1 + 104))(a1, v307);
        v252 = *(_DWORD *)v307;
        *(_QWORD *)v307 = (uint64_t)(*(_QWORD *)(a2 + 1344) - *(_QWORD *)(a2 + 1336)) >> 4;
        (*(void (**)(_DWORD *, _BYTE *))(*(_QWORD *)a1 + 120))(a1, v307);
        sub_223BB26EC((uint64_t)a1, (uint64_t)(*(_QWORD *)(a2 + 1344) - *(_QWORD *)(a2 + 1336)) >> 4, *(_QWORD *)(a2 + 1336));
        *(_QWORD *)v307 = (uint64_t)(*(_QWORD *)(a2 + 1368) - *(_QWORD *)(a2 + 1360)) >> 6;
        (*(void (**)(_DWORD *, _BYTE *))(*(_QWORD *)a1 + 120))(a1, v307);
        sub_223BB2868((uint64_t)a1, (uint64_t)(*(_QWORD *)(a2 + 1368) - *(_QWORD *)(a2 + 1360)) >> 6, *(_QWORD *)(a2 + 1360));
        *(_QWORD *)v307 = (uint64_t)(*(_QWORD *)(a2 + 1392) - *(_QWORD *)(a2 + 1384)) >> 4;
        (*(void (**)(_DWORD *, _BYTE *))(*(_QWORD *)a1 + 120))(a1, v307);
        sub_223BB26EC((uint64_t)a1, (uint64_t)(*(_QWORD *)(a2 + 1392) - *(_QWORD *)(a2 + 1384)) >> 4, *(_QWORD *)(a2 + 1384));
        *(_QWORD *)v307 = (uint64_t)(*(_QWORD *)(a2 + 1416) - *(_QWORD *)(a2 + 1408)) >> 4;
        (*(void (**)(_DWORD *, _BYTE *))(*(_QWORD *)a1 + 120))(a1, v307);
        sub_223BB26EC((uint64_t)a1, (uint64_t)(*(_QWORD *)(a2 + 1416) - *(_QWORD *)(a2 + 1408)) >> 4, *(_QWORD *)(a2 + 1408));
        if (v252 >= 2)
        {
          *(_QWORD *)v307 = (uint64_t)(*(_QWORD *)(a2 + 1440) - *(_QWORD *)(a2 + 1432)) >> 4;
          (*(void (**)(_DWORD *, _BYTE *))(*(_QWORD *)a1 + 120))(a1, v307);
          sub_223BB26EC((uint64_t)a1, (uint64_t)(*(_QWORD *)(a2 + 1440) - *(_QWORD *)(a2 + 1432)) >> 4, *(_QWORD *)(a2 + 1432));
          *(_QWORD *)v307 = (uint64_t)(*(_QWORD *)(a2 + 1464) - *(_QWORD *)(a2 + 1456)) >> 6;
          (*(void (**)(_DWORD *, _BYTE *))(*(_QWORD *)a1 + 120))(a1, v307);
          sub_223BB2868((uint64_t)a1, (uint64_t)(*(_QWORD *)(a2 + 1464) - *(_QWORD *)(a2 + 1456)) >> 6, *(_QWORD *)(a2 + 1456));
          *(_QWORD *)v307 = (uint64_t)(*(_QWORD *)(a2 + 1488) - *(_QWORD *)(a2 + 1480)) >> 4;
          (*(void (**)(_DWORD *, _BYTE *))(*(_QWORD *)a1 + 120))(a1, v307);
          sub_223BB26EC((uint64_t)a1, (uint64_t)(*(_QWORD *)(a2 + 1488) - *(_QWORD *)(a2 + 1480)) >> 4, *(_QWORD *)(a2 + 1480));
        }
        if (v251 != 2)
        {
          v307[0] = *(_BYTE *)(a2 + 1504);
          (*(void (**)(_DWORD *, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v307);
          if (v251 >= 4)
            (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 32))(a1, a2 + 1314);
        }
      }
    }
    else
    {
      v307[0] = 0;
      (*(void (**)(_DWORD *, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v307);
    }
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/include/Reconstruction/Frame/FrameBundleSample.h", 535, (uint64_t)"io::is_input_archive_v<Archive>", 31, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    memset(v307, 0, 24);
    v306 = 0;
    (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a1 + 120))(a1, &v306);
    if (a3 <= 4)
      goto LABEL_347;
  }
LABEL_348:
  if (*(_BYTE *)(a2 + 1648))
  {
    v307[0] = 1;
    (*(void (**)(_DWORD *, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v307);
    *(_DWORD *)v307 = 2;
    (*(void (**)(_DWORD *, _BYTE *))(*(_QWORD *)a1 + 104))(a1, v307);
    result = sub_223BB29E4((uint64_t)a1, a2 + 1520, *(unsigned int *)v307);
  }
  else
  {
    v307[0] = 0;
    result = (*(uint64_t (**)(_DWORD *, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v307);
  }
  if (a3 >= 3)
  {
    v259[0] = 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(_QWORD *)(a2 + 1664) - *(_QWORD *)(a2 + 1656)) >> 4);
    result = (*(uint64_t (**)(_DWORD *, _QWORD *))(*(_QWORD *)a1 + 120))(a1, v259);
    v255 = *(_QWORD *)(a2 + 1656);
    v256 = *(_QWORD *)(a2 + 1664);
    if (v256 != v255)
    {
      v257 = v255 + 168;
      do
      {
        *(_DWORD *)v307 = 1;
        (*(void (**)(_DWORD *, _BYTE *))(*(_QWORD *)a1 + 104))(a1, v307);
        *(_QWORD *)v307 = *(_QWORD *)(v257 - 168);
        (*(void (**)(_DWORD *, _BYTE *))(*(_QWORD *)a1 + 72))(a1, v307);
        (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 136))(a1, v257 - 160);
        (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 136))(a1, v257 - 152);
        (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 136))(a1, v257 - 144);
        (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 136))(a1, v257 - 136);
        (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 136))(a1, v257 - 128);
        (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 136))(a1, v257 - 120);
        (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 136))(a1, v257 - 112);
        (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 136))(a1, v257 - 104);
        (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 136))(a1, v257 - 96);
        (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 136))(a1, v257 - 88);
        (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 136))(a1, v257 - 80);
        (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 136))(a1, v257 - 72);
        (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 136))(a1, v257 - 64);
        (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 136))(a1, v257 - 56);
        (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 136))(a1, v257 - 48);
        (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 136))(a1, v257 - 40);
        *(_DWORD *)v307 = 2;
        (*(void (**)(_DWORD *, _BYTE *))(*(_QWORD *)a1 + 104))(a1, v307);
        if (*(_DWORD *)v307 == 1)
        {
          memset(v307, 0, 24);
          v306 = *((_QWORD *)a1 + 1);
          sub_223BB2C9C((int *)&v306, (uint64_t)a1, (uint64_t **)v307);
        }
        *(_QWORD *)v307 = *((_QWORD *)a1 + 1);
        v258 = v257 - 24;
        sub_223BB2C9C((int *)v307, (uint64_t)a1, (uint64_t **)(v257 - 24));
        if (*(_BYTE *)(v257 + 128))
        {
          v307[0] = 1;
          (*(void (**)(_DWORD *, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v307);
          *(_DWORD *)v307 = 2;
          (*(void (**)(_DWORD *, _BYTE *))(*(_QWORD *)a1 + 104))(a1, v307);
          result = sub_223BB29E4((uint64_t)a1, v257, *(unsigned int *)v307);
        }
        else
        {
          v307[0] = 0;
          result = (*(uint64_t (**)(_DWORD *, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v307);
        }
        v257 += 304;
      }
      while (v258 + 160 != v256);
    }
    if (a3 >= 6)
    {
      *(_DWORD *)v307 = 1;
      (*(void (**)(_DWORD *, _BYTE *))(*(_QWORD *)a1 + 104))(a1, v307);
      result = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2 + 1680);
      if (a3 >= 8)
      {
        if (*(_BYTE *)(a2 + 1682))
        {
          v307[0] = 1;
          (*(void (**)(_DWORD *, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v307);
          return (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 32))(a1, a2 + 1681);
        }
        else
        {
          v307[0] = 0;
          return (*(uint64_t (**)(_DWORD *, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v307);
        }
      }
    }
  }
  return result;
}

void sub_223BAF34C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  uint64_t v54;
  uint64_t v56;

  v56 = LODWORD(STACK[0x250]);
  if ((_DWORD)v56 != -1)
    ((void (*)(char *, uint64_t))off_24EC5FFD0[v56])(&a54, v54);
  sub_22319A588((uint64_t)&STACK[0x260]);
  _Unwind_Resume(a1);
}

void sub_223BAF69C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;
  int v71;

  sub_22319A588((uint64_t)&a71);
  if (v71)
    JUMPOUT(0x223BAF6ACLL);
  JUMPOUT(0x223BAF6BCLL);
}

void sub_223BAF6E0(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int16 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  __int16 v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  _BYTE v40[32];
  _BYTE v41[32];
  __int16 v42;
  __int16 v43;
  _QWORD v44[2];
  std::__shared_weak_count *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  __int16 v50;
  _OWORD v51[2];
  _BYTE v52[64];
  int v53;
  _OWORD v54[2];
  _BYTE v55[64];
  int v56;
  char v57;
  char v58;
  char v59;

  v9 = *(unsigned __int8 *)(a2 + 80);
  if (*(_BYTE *)(a2 + 80))
  {
    v10 = *(_QWORD *)(a2 + 8);
    v11 = *(std::__shared_weak_count **)(a2 + 16);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      v14 = *(_WORD *)(a2 + 72);
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
      *(_OWORD *)v40 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)&v40[16] = *(_OWORD *)(a2 + 40);
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
      v38 = v10;
      v39 = v11;
      v42 = v14;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      v44[0] = &off_24EC1F8C8;
      v10 = v38;
      v19 = (unint64_t *)&v11->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      v21 = *(_QWORD *)&v40[12];
      v22 = *(_DWORD *)&v40[28];
      v23 = *(_QWORD *)v40;
      v24 = v42;
      do
        v25 = __ldxr(v19);
      while (__stxr(v25 + 1, v19));
      do
        v26 = __ldxr(v19);
      while (__stxr(v26 + 1, v19));
    }
    else
    {
      v39 = 0;
      *(_OWORD *)v41 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)&v41[16] = *(_OWORD *)(a2 + 40);
      v43 = *(_WORD *)(a2 + 72);
      v44[0] = &off_24EC1F8C8;
      v11 = 0;
      v21 = *(_QWORD *)&v41[12];
      v22 = *(_DWORD *)&v41[28];
      v23 = *(_QWORD *)v41;
      v24 = v43;
    }
    v44[1] = v10;
    v45 = v11;
    v46 = v21;
    v47 = 4 * v22;
    v48 = v23;
    v49 = 32;
    v50 = v24;
    if (v11)
    {
      v28 = (unint64_t *)&v11->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      do
        v30 = __ldaxr(v28);
      while (__stlxr(v30 - 1, v28));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    sub_22416BFE0((uint64_t)v51, (uint64_t)v44, 0, a4, a5, a6, a7, a8);
    v54[0] = v51[0];
    *(_OWORD *)((char *)v54 + 12) = *(_OWORD *)((char *)v51 + 12);
    v55[0] = 0;
    v56 = -1;
    v31 = v53;
    if (v53 != -1)
    {
      ((void (*)(char *, _BYTE *, _BYTE *))off_24EC60008[v53])(&v58, v55, v52);
      v56 = v31;
    }
    v27 = 1;
  }
  else
  {
    v27 = 0;
    LOBYTE(v54[0]) = 0;
  }
  v57 = v27;
  sub_223BB0790(a1, (uint64_t)v54);
  if (v57)
  {
    if (v56 != -1)
      ((void (*)(char *, _BYTE *))off_24EC5FFD0[v56])(&v59, v55);
    v56 = -1;
  }
  if (v9)
  {
    if (v53 != -1)
      ((void (*)(char *, _BYTE *))off_24EC5FFD0[v53])(&v59, v52);
    v53 = -1;
    v32 = v45;
    if (!v45)
      goto LABEL_46;
    v33 = (unint64_t *)&v45->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      v35 = v39;
      if (!v39)
        return;
    }
    else
    {
LABEL_46:
      v35 = v39;
      if (!v39)
        return;
    }
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_223BAFAAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  v29 = *(unsigned int *)(v27 - 80);
  if ((_DWORD)v29 != -1)
    ((void (*)(uint64_t, uint64_t))off_24EC5FFD0[v29])(v27 - 49, v26);
  *(_DWORD *)(v27 - 80) = -1;
  sub_22319A588((uint64_t)&a26);
  sub_22319A5E0((uint64_t)&a19);
  sub_2231CE1A0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223BAFB1C(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int16 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  __int16 v44;
  __int16 v45;
  _QWORD v46[2];
  std::__shared_weak_count *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  __int16 v52;
  _OWORD v53[2];
  _BYTE v54[64];
  int v55;
  _OWORD v56[2];
  _BYTE v57[64];
  int v58;
  char v59;
  char v60;
  char v61;

  v9 = *(unsigned __int8 *)(a2 + 56);
  if (*(_BYTE *)(a2 + 56))
  {
    v10 = *(_QWORD *)(a2 + 8);
    v11 = *(std::__shared_weak_count **)(a2 + 16);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      v14 = *(_WORD *)(a2 + 48);
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
      v40 = *(_OWORD *)(a2 + 24);
      v42 = *(_QWORD *)(a2 + 40);
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
      v38 = v10;
      v39 = v11;
      v44 = v14;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      v46[0] = &off_24EC1F8C8;
      v10 = v38;
      v19 = (unint64_t *)&v11->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      v21 = HIDWORD(v42);
      v22 = *((_QWORD *)&v40 + 1);
      v23 = v40;
      v24 = v44;
      do
        v25 = __ldxr(v19);
      while (__stxr(v25 + 1, v19));
      do
        v26 = __ldxr(v19);
      while (__stxr(v26 + 1, v19));
    }
    else
    {
      v39 = 0;
      v41 = *(_OWORD *)(a2 + 24);
      v43 = *(_QWORD *)(a2 + 40);
      v45 = *(_WORD *)(a2 + 48);
      v46[0] = &off_24EC1F8C8;
      v11 = 0;
      v21 = HIDWORD(v43);
      v22 = *((_QWORD *)&v41 + 1);
      v23 = v41;
      v24 = v45;
    }
    v46[1] = v10;
    v47 = v11;
    v48 = v22;
    v49 = v21;
    v50 = v23;
    v51 = 1;
    v52 = v24;
    if (v11)
    {
      v28 = (unint64_t *)&v11->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      do
        v30 = __ldaxr(v28);
      while (__stlxr(v30 - 1, v28));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    sub_22416BFE0((uint64_t)v53, (uint64_t)v46, 0, a4, a5, a6, a7, a8);
    v56[0] = v53[0];
    *(_OWORD *)((char *)v56 + 12) = *(_OWORD *)((char *)v53 + 12);
    v57[0] = 0;
    v58 = -1;
    v31 = v55;
    if (v55 != -1)
    {
      ((void (*)(char *, _BYTE *, _BYTE *))off_24EC60008[v55])(&v60, v57, v54);
      v58 = v31;
    }
    v27 = 1;
  }
  else
  {
    v27 = 0;
    LOBYTE(v56[0]) = 0;
  }
  v59 = v27;
  sub_223BB0790(a1, (uint64_t)v56);
  if (v59)
  {
    if (v58 != -1)
      ((void (*)(char *, _BYTE *))off_24EC5FFD0[v58])(&v61, v57);
    v58 = -1;
  }
  if (v9)
  {
    if (v55 != -1)
      ((void (*)(char *, _BYTE *))off_24EC5FFD0[v55])(&v61, v54);
    v55 = -1;
    v32 = v47;
    if (!v47)
      goto LABEL_46;
    v33 = (unint64_t *)&v47->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      v35 = v39;
      if (!v39)
        return;
    }
    else
    {
LABEL_46:
      v35 = v39;
      if (!v39)
        return;
    }
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_223BAFED0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v5 = *(unsigned int *)(v3 - 80);
  if ((_DWORD)v5 != -1)
    ((void (*)(uint64_t, uint64_t))off_24EC5FFD0[v5])(v3 - 49, v2);
  *(_DWORD *)(v3 - 80) = -1;
  sub_22319A588((uint64_t)va2);
  sub_22319A5E0((uint64_t)va1);
  sub_2231BEEB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BAFF40(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int16 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  __int16 v44;
  __int16 v45;
  _QWORD v46[2];
  std::__shared_weak_count *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  __int16 v52;
  _OWORD v53[2];
  _BYTE v54[64];
  int v55;
  _OWORD v56[2];
  _BYTE v57[64];
  int v58;
  char v59;
  char v60;
  char v61;

  v9 = *(unsigned __int8 *)(a2 + 56);
  if (*(_BYTE *)(a2 + 56))
  {
    v10 = *(_QWORD *)(a2 + 8);
    v11 = *(std::__shared_weak_count **)(a2 + 16);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      v14 = *(_WORD *)(a2 + 48);
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
      v40 = *(_OWORD *)(a2 + 24);
      v42 = *(_QWORD *)(a2 + 40);
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
      v38 = v10;
      v39 = v11;
      v44 = v14;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      v46[0] = &off_24EC1F8C8;
      v10 = v38;
      v19 = (unint64_t *)&v11->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      v21 = HIDWORD(v42);
      v22 = *((_QWORD *)&v40 + 1);
      v23 = v40;
      v24 = v44;
      do
        v25 = __ldxr(v19);
      while (__stxr(v25 + 1, v19));
      do
        v26 = __ldxr(v19);
      while (__stxr(v26 + 1, v19));
    }
    else
    {
      v39 = 0;
      v41 = *(_OWORD *)(a2 + 24);
      v43 = *(_QWORD *)(a2 + 40);
      v45 = *(_WORD *)(a2 + 48);
      v46[0] = &off_24EC1F8C8;
      v11 = 0;
      v21 = HIDWORD(v43);
      v22 = *((_QWORD *)&v41 + 1);
      v23 = v41;
      v24 = v45;
    }
    v46[1] = v10;
    v47 = v11;
    v48 = v22;
    v49 = 2 * v21;
    v50 = v23;
    v51 = 3;
    v52 = v24;
    if (v11)
    {
      v28 = (unint64_t *)&v11->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      do
        v30 = __ldaxr(v28);
      while (__stlxr(v30 - 1, v28));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    sub_22416BFE0((uint64_t)v53, (uint64_t)v46, 0, a4, a5, a6, a7, a8);
    v56[0] = v53[0];
    *(_OWORD *)((char *)v56 + 12) = *(_OWORD *)((char *)v53 + 12);
    v57[0] = 0;
    v58 = -1;
    v31 = v55;
    if (v55 != -1)
    {
      ((void (*)(char *, _BYTE *, _BYTE *))off_24EC60008[v55])(&v60, v57, v54);
      v58 = v31;
    }
    v27 = 1;
  }
  else
  {
    v27 = 0;
    LOBYTE(v56[0]) = 0;
  }
  v59 = v27;
  sub_223BB0790(a1, (uint64_t)v56);
  if (v59)
  {
    if (v58 != -1)
      ((void (*)(char *, _BYTE *))off_24EC5FFD0[v58])(&v61, v57);
    v58 = -1;
  }
  if (v9)
  {
    if (v55 != -1)
      ((void (*)(char *, _BYTE *))off_24EC5FFD0[v55])(&v61, v54);
    v55 = -1;
    v32 = v47;
    if (!v47)
      goto LABEL_46;
    v33 = (unint64_t *)&v47->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      v35 = v39;
      if (!v39)
        return;
    }
    else
    {
LABEL_46:
      v35 = v39;
      if (!v39)
        return;
    }
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_223BB02F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v5 = *(unsigned int *)(v3 - 80);
  if ((_DWORD)v5 != -1)
    ((void (*)(uint64_t, uint64_t))off_24EC5FFD0[v5])(v3 - 49, v2);
  *(_DWORD *)(v3 - 80) = -1;
  sub_22319A588((uint64_t)va2);
  sub_22319A5E0((uint64_t)va1);
  sub_22319EF60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BB0368(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int16 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  __int16 v44;
  __int16 v45;
  _QWORD v46[2];
  std::__shared_weak_count *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  __int16 v52;
  _OWORD v53[2];
  _BYTE v54[64];
  int v55;
  _OWORD v56[2];
  _BYTE v57[64];
  int v58;
  char v59;
  char v60;
  char v61;

  v9 = *(unsigned __int8 *)(a2 + 56);
  if (*(_BYTE *)(a2 + 56))
  {
    v10 = *(_QWORD *)(a2 + 8);
    v11 = *(std::__shared_weak_count **)(a2 + 16);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      v14 = *(_WORD *)(a2 + 48);
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
      v40 = *(_OWORD *)(a2 + 24);
      v42 = *(_QWORD *)(a2 + 40);
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
      v38 = v10;
      v39 = v11;
      v44 = v14;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      v46[0] = &off_24EC1F8C8;
      v10 = v38;
      v19 = (unint64_t *)&v11->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      v21 = HIDWORD(v42);
      v22 = *((_QWORD *)&v40 + 1);
      v23 = v40;
      v24 = v44;
      do
        v25 = __ldxr(v19);
      while (__stxr(v25 + 1, v19));
      do
        v26 = __ldxr(v19);
      while (__stxr(v26 + 1, v19));
    }
    else
    {
      v39 = 0;
      v41 = *(_OWORD *)(a2 + 24);
      v43 = *(_QWORD *)(a2 + 40);
      v45 = *(_WORD *)(a2 + 48);
      v46[0] = &off_24EC1F8C8;
      v11 = 0;
      v21 = HIDWORD(v43);
      v22 = *((_QWORD *)&v41 + 1);
      v23 = v41;
      v24 = v45;
    }
    v46[1] = v10;
    v47 = v11;
    v48 = v22;
    v49 = 4 * v21;
    v50 = v23;
    v51 = 4;
    v52 = v24;
    if (v11)
    {
      v28 = (unint64_t *)&v11->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      do
        v30 = __ldaxr(v28);
      while (__stlxr(v30 - 1, v28));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    sub_22416BFE0((uint64_t)v53, (uint64_t)v46, 0, a4, a5, a6, a7, a8);
    v56[0] = v53[0];
    *(_OWORD *)((char *)v56 + 12) = *(_OWORD *)((char *)v53 + 12);
    v57[0] = 0;
    v58 = -1;
    v31 = v55;
    if (v55 != -1)
    {
      ((void (*)(char *, _BYTE *, _BYTE *))off_24EC60008[v55])(&v60, v57, v54);
      v58 = v31;
    }
    v27 = 1;
  }
  else
  {
    v27 = 0;
    LOBYTE(v56[0]) = 0;
  }
  v59 = v27;
  sub_223BB0790(a1, (uint64_t)v56);
  if (v59)
  {
    if (v58 != -1)
      ((void (*)(char *, _BYTE *))off_24EC5FFD0[v58])(&v61, v57);
    v58 = -1;
  }
  if (v9)
  {
    if (v55 != -1)
      ((void (*)(char *, _BYTE *))off_24EC5FFD0[v55])(&v61, v54);
    v55 = -1;
    v32 = v47;
    if (!v47)
      goto LABEL_46;
    v33 = (unint64_t *)&v47->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      v35 = v39;
      if (!v39)
        return;
    }
    else
    {
LABEL_46:
      v35 = v39;
      if (!v39)
        return;
    }
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_223BB0720(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v5 = *(unsigned int *)(v3 - 80);
  if ((_DWORD)v5 != -1)
    ((void (*)(uint64_t, uint64_t))off_24EC5FFD0[v5])(v3 - 49, v2);
  *(_DWORD *)(v3 - 80) = -1;
  sub_22319A588((uint64_t)va2);
  sub_22319A5E0((uint64_t)va1);
  sub_2231BD9DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BB0790(_DWORD *a1, uint64_t a2)
{
  int v4;
  char v5;
  char v6;
  int v7;
  int v8;

  if (*(_BYTE *)(a2 + 104))
  {
    v6 = 1;
    (*(void (**)(_DWORD *, char *))(*(_QWORD *)a1 + 80))(a1, &v6);
    v4 = a1[2];
    v7 = 2;
    (*(void (**)(_DWORD *, int *))(*(_QWORD *)a1 + 104))(a1, &v7);
    if (v4 < 1)
    {
      sub_223BB08B4((uint64_t)a1, a2);
    }
    else
    {
      if (v4 == 2)
      {
        v8 = 2;
        (*(void (**)(_DWORD *, int *))(*(_QWORD *)a1 + 104))(a1, &v8);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 16))(a1);
      sub_223BB08B4((uint64_t)a1, a2);
      (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 24))(a1);
    }
  }
  else
  {
    v5 = 0;
    (*(void (**)(_DWORD *, char *))(*(_QWORD *)a1 + 80))(a1, &v5);
  }
}

void sub_223BB08B4(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  int v10;
  __int16 v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t (**v18)();
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  __int16 v25;

  v18 = (uint64_t (**)())a2;
  sub_223BB0CF4((_BYTE *)a1, (unsigned __int16 **)&v18);
  v18 = *(uint64_t (***)())(a1 + 8);
  sub_223BB0E2C((int *)&v18, (_BYTE *)a1, (uint64_t *)(a2 + 8));
  if (*(_WORD *)a2 == 1)
  {
    v4 = *(_DWORD *)(a2 + 96);
    if (v4)
    {
      if (v4 != 1)
        sub_22316DD70();
      v18 = &off_24EC1F8C8;
      sub_2231F47D4(a2 + 32, (uint64_t)&v19);
    }
    else
    {
      v18 = &off_24EC1F8C8;
      v5 = *(_QWORD *)(a2 + 40);
      v6 = *(std::__shared_weak_count **)(a2 + 48);
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        v9 = *(_QWORD *)(a2 + 72);
        v10 = *(_DWORD *)(a2 + 80);
        v11 = *(_WORD *)(a2 + 84);
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      else
      {
        v9 = *(_QWORD *)(a2 + 72);
        v10 = *(_DWORD *)(a2 + 80);
        v11 = *(_WORD *)(a2 + 84);
      }
      v19 = v5;
      v20 = v6;
      v21 = *(_QWORD *)(a2 + 56);
      v22 = *(_DWORD *)(a2 + 64);
      v23 = v9;
      v24 = v10;
      v25 = v11;
      if (v6)
      {
        v13 = (unint64_t *)&v6->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    sub_22416E5E0((const void *)a1, (uint64_t)&v18);
    v15 = v20;
    if (v20)
    {
      v16 = (unint64_t *)&v20->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  else
  {
    sub_223BB0AA0(a1, (unsigned __int16 *)a2);
  }
}

void sub_223BB0AA0(uint64_t a1, unsigned __int16 *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  int v11;
  unsigned __int16 v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20[8];
  __int128 v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  std::ios_base v25;
  uint64_t v26;
  int v27;
  uint64_t (**v28)();
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  unsigned __int16 v35;

  v4 = sub_22416E0BC(*a2);
  v5 = *((_DWORD *)a2 + 24);
  if (v5)
  {
    if (v5 != 1)
      sub_22316DD70();
    v28 = &off_24EC1F8C8;
    sub_2231F47D4((uint64_t)(a2 + 16), (uint64_t)&v29);
  }
  else
  {
    v28 = &off_24EC1F8C8;
    v6 = *((_QWORD *)a2 + 5);
    v7 = (std::__shared_weak_count *)*((_QWORD *)a2 + 6);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      v10 = *((_QWORD *)a2 + 9);
      v11 = *((_DWORD *)a2 + 20);
      v12 = a2[42];
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    else
    {
      v10 = *((_QWORD *)a2 + 9);
      v11 = *((_DWORD *)a2 + 20);
      v12 = a2[42];
    }
    v29 = v6;
    v30 = v7;
    v31 = *((_QWORD *)a2 + 7);
    v32 = *((_DWORD *)a2 + 16);
    v33 = v10;
    v34 = v11;
    v35 = v12;
    if (v7)
    {
      v14 = (unint64_t *)&v7->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  v19 = a1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x24BEDB848] + 16;
  v21 = 0u;
  v22 = 0u;
  v23 = 24;
  v24 = MEMORY[0x24BEDB828] + 24;
  v25.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB828] + 64);
  std::ios_base::init(&v25, v20);
  v26 = 0;
  v27 = -1;
  sub_22319F8C4(&v28, (char *)&v24, v4);
  sub_223BB10A0(&v19);
  v16 = v30;
  if (v30)
  {
    v17 = (unint64_t *)&v30->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_223BB0C8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_223BB10A0((uint64_t *)va);
  sub_22319A5E0(v2 - 104);
  _Unwind_Resume(a1);
}

void sub_223BB0CF4(_BYTE *a1, unsigned __int16 **a2)
{
  unsigned __int16 *v3;
  void *__p[2];
  char v5;
  _WORD v6[12];
  int v7;
  char v8;
  char *v9;

  if ((a1[12] & 2) != 0)
  {
    v3 = *a2;
    v7 = 0;
    sub_223B94FE4((uint64_t)&v9, (uint64_t)v6, v3);
    if (v7 == -1)
      sub_22316DD70();
    v9 = &v8;
    ((void (*)(void **__return_ptr, char **, _WORD *))off_24EC5FFA0[v7])(__p, &v9, v6);
    if (v7 != -1)
      ((void (*)(char **, _WORD *))off_24EC5FF88[v7])(&v9, v6);
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 144))(a1, __p);
    if (v5 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v6[0] = **a2;
    (*(void (**)(_BYTE *, _WORD *))(*(_QWORD *)a1 + 96))(a1, v6);
  }
}

void sub_223BB0DE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223BB0E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BB0E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223BB0E2C(int *a1, _BYTE *a2, uint64_t *a3)
{
  int v6;
  uint64_t result;
  uint64_t *v8;

  LODWORD(v8) = 2;
  (*(void (**)(_BYTE *, uint64_t **))(*(_QWORD *)a2 + 104))(a2, &v8);
  if (*a1 < 1)
  {
    v8 = a3;
    sub_223BB0F68(a2, &v8);
    (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, a3 + 1);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 104))(a2, (uint64_t)a3 + 12);
  }
  else
  {
    if (*a1 == 2
      && (LODWORD(v8) = 2, (*(void (**)(_BYTE *, uint64_t **))(*(_QWORD *)a2 + 104))(a2, &v8), *a1 < 1))
    {
      v6 = 0;
    }
    else
    {
      (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 16))(a2);
      v6 = 1;
    }
    v8 = a3;
    sub_223BB0F68(a2, &v8);
    (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, a3 + 1);
    result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 104))(a2, (uint64_t)a3 + 12);
    if (v6)
      return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a2 + 24))(a2);
  }
  return result;
}

void sub_223BB0F68(_BYTE *a1, uint64_t **a2)
{
  uint64_t *v3;
  void *__p[2];
  char v5;
  _QWORD v6[3];
  int v7;
  char v8;
  char *v9;

  if ((a1[12] & 2) != 0)
  {
    v3 = *a2;
    v7 = 0;
    sub_223B95444((uint64_t)&v9, (uint64_t)v6, v3);
    if (v7 == -1)
      sub_22316DD70();
    v9 = &v8;
    ((void (*)(void **__return_ptr, char **, _QWORD *))off_24EC5FFA0[v7])(__p, &v9, v6);
    if (v7 != -1)
      ((void (*)(char **, _QWORD *))off_24EC5FF88[v7])(&v9, v6);
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 144))(a1, __p);
    if (v5 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v6[0] = **a2;
    (*(void (**)(_BYTE *, _QWORD *))(*(_QWORD *)a1 + 120))(a1, v6);
  }
}

void sub_223BB105C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223BB1078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BB108C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_223BB10A0(_QWORD *a1)
{
  int v2;
  size_t v3;
  void **p_dst;
  unint64_t v5;
  unint64_t v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  void **v11;
  size_t v12;
  uint64_t v13;
  _QWORD v15[2];
  size_t v16;
  void **__dst;
  size_t v18;
  int64_t v19;

  v2 = *((_DWORD *)a1 + 26);
  if ((v2 & 0x10) != 0)
  {
    v5 = a1[12];
    v6 = a1[7];
    if (v5 < v6)
    {
      a1[12] = v6;
      v5 = v6;
    }
    v7 = (const void *)a1[6];
    v3 = v5 - (_QWORD)v7;
    if (v5 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_28;
  }
  else
  {
    if ((v2 & 8) == 0)
    {
      v3 = 0;
      HIBYTE(v19) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_14;
    }
    v7 = (const void *)a1[3];
    v3 = a1[5] - (_QWORD)v7;
    if (v3 >= 0x7FFFFFFFFFFFFFF8)
LABEL_28:
      sub_22316DBC0();
  }
  if (v3 >= 0x17)
  {
    v8 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v8 = v3 | 7;
    v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    v18 = v3;
    v19 = v9 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_13;
  }
  HIBYTE(v19) = v3;
  p_dst = (void **)&__dst;
  if (v3)
LABEL_13:
    memmove(p_dst, v7, v3);
LABEL_14:
  *((_BYTE *)p_dst + v3) = 0;
  v10 = HIBYTE(v19);
  if (v19 < 0)
    v10 = v18;
  v16 = v10;
  (*(void (**)(_QWORD, size_t *))(*(_QWORD *)*a1 + 120))(*a1, &v16);
  if (SHIBYTE(v19) < 0)
  {
    v12 = v16;
    v11 = __dst;
    if (!__dst && v16)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v11 = 0;
    }
  }
  else
  {
    v11 = (void **)&__dst;
    v12 = v16;
  }
  v13 = *a1;
  v15[0] = v12;
  v15[1] = v11;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v13 + 272))(v13, v15);
  if (SHIBYTE(v19) < 0)
    operator delete(__dst);
  std::ostream::~ostream();
  a1[1] = MEMORY[0x24BEDB848] + 16;
  if (*((char *)a1 + 95) < 0)
    operator delete((void *)a1[9]);
  std::streambuf::~streambuf();
  return a1;
}

void sub_223BB1294(_DWORD *a1, uint64_t a2)
{
  void **v3;
  char *v4;
  void (*v5)(_DWORD *, uint64_t *);
  void **v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void **i;
  char *v17;
  uint64_t v18;
  __int128 v19;
  char *v20;
  __int128 v21;
  _OWORD v22[2];
  __int128 v23;
  int v24;

  v23 = 0u;
  memset(v22, 0, sizeof(v22));
  sub_224518A54((uint64_t)&v18, a2);
  v3 = (void **)v18;
  *(_QWORD *)&v22[0] = v18;
  *(_OWORD *)((char *)v22 + 8) = v19;
  v4 = v20;
  *((_QWORD *)&v22[1] + 1) = v20;
  v17 = (char *)v21;
  v23 = v21;
  v5 = *(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a1 + 120);
  v6 = (void **)v19;
  v7 = ((uint64_t)v19 - v18) / 24;
  v18 = v7;
  v5(a1, &v18);
  if (v6 != v3)
  {
    v8 = 24 * v7;
    v9 = (char *)v3;
    do
    {
      (*(void (**)(_DWORD *, char *))(*(_QWORD *)a1 + 144))(a1, v9);
      v9 += 24;
      v8 -= 24;
    }
    while (v8);
  }
  v10 = v17;
  v18 = (v17 - v4) / 24;
  (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a1 + 120))(a1, &v18);
  if (v17 == v4)
  {
    if (!v4)
      goto LABEL_23;
    goto LABEL_22;
  }
  v11 = 0;
  do
  {
    v12 = a1[2];
    v24 = 2;
    (*(void (**)(_DWORD *, int *))(*(_QWORD *)a1 + 104))(a1, &v24);
    if (v12 < 1)
    {
      sub_223BB1570((uint64_t)a1, (std::string::size_type)&v4[v11]);
    }
    else
    {
      if (v12 == 2)
      {
        v24 = 2;
        (*(void (**)(_DWORD *, int *))(*(_QWORD *)a1 + 104))(a1, &v24);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 16))(a1);
      sub_223BB1570((uint64_t)a1, (std::string::size_type)&v4[v11]);
      (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 24))(a1);
    }
    v11 += 24;
  }
  while (24 * ((v17 - v4) / 24) != v11);
  if (v4)
  {
    do
    {
      v13 = (std::__shared_weak_count *)*((_QWORD *)v10 - 1);
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v10 -= 24;
    }
    while (v10 != v4);
    v4 = (char *)*((_QWORD *)&v22[1] + 1);
    v3 = *(void ***)&v22[0];
LABEL_22:
    operator delete(v4);
  }
LABEL_23:
  if (v3)
  {
    for (i = (void **)*((_QWORD *)&v22[0] + 1); i != v3; i -= 3)
    {
      if (*((char *)i - 1) < 0)
        operator delete(*(i - 3));
    }
    operator delete(v3);
  }
}

void sub_223BB150C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_2231A6210((void **)va);
  _Unwind_Resume(a1);
}

void sub_223BB1520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_2231A6210((void **)va);
  _Unwind_Resume(a1);
}

void sub_223BB1534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_2231A6210((void **)va);
  _Unwind_Resume(a1);
}

void sub_223BB1548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_2231A6210((void **)va);
  _Unwind_Resume(a1);
}

void sub_223BB155C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_2231A6210((void **)va);
  _Unwind_Resume(a1);
}

void sub_223BB1570(uint64_t a1, std::string::size_type a2)
{
  const void *v4;
  CFTypeID TypeID;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  const void *v11;
  CFTypeID v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  const void *v18;
  const __CFBoolean *v19;
  CFTypeID v20;
  __int16 v21;
  __int16 v22;
  const void *v23;
  CFTypeID v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *size;
  unint64_t *v28;
  unint64_t v29;
  const __CFArray *v30;
  __int128 v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  CFIndex Count;
  CFIndex i;
  const void *ValueAtIndex;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::string::size_type v49;
  char *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::string::size_type v57;
  int64_t v58;
  int v59;
  uint64_t v60;
  void *v61;
  size_t v62;
  std::string::size_type v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  std::string::size_type v72;
  void *v73;
  std::__shared_weak_count *v74;
  unint64_t *p_shared_owners;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  int v85;
  uint64_t data_low;
  unint64_t *v87;
  __int128 v88;
  __int128 v89;
  __int128 theArray;
  unint64_t p_p;
  __int128 v92;
  std::string __p;
  std::string::size_type v94;
  std::string::size_type v95;
  __int128 v96;

  __p.__r_.__value_.__r.__words[0] = a2;
  sub_223BB207C((_BYTE *)a1, (unsigned __int16 **)&__p);
  switch(*(_WORD *)a2)
  {
    case 0:
      v4 = *(const void **)(a2 + 8);
      if (v4 && (TypeID = CFNumberGetTypeID(), CFGetTypeID(v4) == TypeID))
      {
        sub_2231A6D40(&v96, *(CFTypeRef *)(a2 + 8));
        v89 = v96;
        if (*((_QWORD *)&v96 + 1))
        {
          v6 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
          do
            v7 = __ldxr(v6);
          while (__stxr(v7 + 1, v6));
          v8 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
          if (*((_QWORD *)&v96 + 1))
          {
            v9 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
            do
              v10 = __ldaxr(v9);
            while (__stlxr(v10 - 1, v9));
            if (!v10)
            {
              ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
              std::__shared_weak_count::__release_weak(v8);
            }
          }
        }
      }
      else
      {
        v89 = 0uLL;
      }
      sub_2231A6E84(&theArray, (uint64_t)&v89);
      sub_2245322E8((CFNumberRef *)&theArray);
      __p.__r_.__value_.__s.__data_[0] = p_p;
      __p.__r_.__value_.__s.__data_[8] = p_p;
      v94 = 0;
      v95 = 0;
      __p.__r_.__value_.__r.__words[2] = 0;
      v61 = (void *)v92;
      v62 = *((_QWORD *)&v92 + 1) - v92;
      if (*((_QWORD *)&v92 + 1) != (_QWORD)v92)
      {
        if ((v62 & 0x8000000000000000) != 0)
          sub_2240336DC();
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)operator new(*((_QWORD *)&v92 + 1) - v92);
        v94 = __p.__r_.__value_.__r.__words[2];
        v63 = __p.__r_.__value_.__r.__words[2] + v62;
        v95 = __p.__r_.__value_.__r.__words[2] + v62;
        memcpy((void *)__p.__r_.__value_.__r.__words[2], v61, v62);
        v94 = v63;
      }
      if (v61)
      {
        *((_QWORD *)&v92 + 1) = v61;
        operator delete(v61);
      }
      v64 = (std::__shared_weak_count *)*((_QWORD *)&theArray + 1);
      if (*((_QWORD *)&theArray + 1))
      {
        v65 = (unint64_t *)(*((_QWORD *)&theArray + 1) + 8);
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      v67 = (std::__shared_weak_count *)*((_QWORD *)&v89 + 1);
      if (*((_QWORD *)&v89 + 1))
      {
        v68 = (unint64_t *)(*((_QWORD *)&v89 + 1) + 8);
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      v70 = *(_QWORD *)a1;
      *(_QWORD *)&v96 = *(_QWORD *)(a1 + 8);
      v71 = v96;
      LODWORD(p_p) = 2;
      (*(void (**)(uint64_t, unint64_t *))(v70 + 104))(a1, &p_p);
      if (v71 < 1)
      {
        p_p = (unint64_t)&__p;
        sub_223BB23F8((_BYTE *)a1, (_BYTE **)&p_p);
        sub_223BB228C(__p.__r_.__value_.__s.__data_[0], (uint64_t)&__p, a1);
      }
      else
      {
        sub_223BB21B4((int *)&v96, (_BYTE *)a1, &__p);
      }
      if (__p.__r_.__value_.__r.__words[2])
      {
        v94 = __p.__r_.__value_.__r.__words[2];
        operator delete((void *)__p.__r_.__value_.__r.__words[2]);
      }
      return;
    case 1:
      sub_224527CB8(*(_QWORD *)(a2 + 8), &__p);
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 144))(a1, &__p);
      if ((_BYTE)v94 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      return;
    case 2:
      v19 = *(const __CFBoolean **)(a2 + 8);
      if (v19 && (v20 = CFBooleanGetTypeID(), CFGetTypeID(v19) == v20))
      {
        v21 = CFBooleanGetValue(v19) != 0;
        v22 = 1;
      }
      else
      {
        v21 = 0;
        v22 = 0;
      }
      LOWORD(__p.__r_.__value_.__l.__data_) = v21 | (v22 << 8);
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 32))(a1, &__p);
      return;
    case 3:
      v23 = *(const void **)(a2 + 8);
      if (v23 && (v24 = CFArrayGetTypeID(), CFGetTypeID(v23) == v24))
      {
        sub_2231A7194(&__p, *(CFTypeRef *)(a2 + 8));
        theArray = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v25 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v26 = __ldxr(v25);
          while (__stxr(v26 + 1, v25));
          size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v28 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v29 = __ldaxr(v28);
            while (__stlxr(v29 - 1, v28));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
          }
        }
        v30 = (const __CFArray *)theArray;
      }
      else
      {
        v30 = 0;
        theArray = 0uLL;
      }
      memset(&__p, 0, sizeof(__p));
      Count = CFArrayGetCount(v30);
      sub_2231A6C10(&__p.__r_.__value_.__l.__data_, Count);
      if (Count)
      {
        for (i = 0; i != Count; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)theArray, i);
          sub_2231A74D8(&v96, ValueAtIndex);
          v88 = v96;
          if (*((_QWORD *)&v96 + 1))
          {
            v44 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
            v46 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
            if (*((_QWORD *)&v96 + 1))
            {
              v47 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
              do
                v48 = __ldaxr(v47);
              while (__stlxr(v48 - 1, v47));
              if (!v48)
              {
                ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                std::__shared_weak_count::__release_weak(v46);
              }
            }
          }
          sub_224517D14((uint64_t)&p_p, (uint64_t)&v88);
          v49 = __p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
          {
            v50 = sub_2231A7364(&__p.__r_.__value_.__l.__data_, (uint64_t)&p_p);
            v51 = (std::__shared_weak_count *)*((_QWORD *)&v92 + 1);
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)v50;
            if (*((_QWORD *)&v92 + 1))
            {
              v52 = (unint64_t *)(*((_QWORD *)&v92 + 1) + 8);
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
          }
          else
          {
            *(_WORD *)__p.__r_.__value_.__l.__size_ = p_p;
            *(_OWORD *)(v49 + 8) = v92;
            v92 = 0uLL;
            __p.__r_.__value_.__l.__size_ = v49 + 24;
          }
          v54 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
          if (*((_QWORD *)&v88 + 1))
          {
            v55 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
            do
              v56 = __ldaxr(v55);
            while (__stlxr(v56 - 1, v55));
            if (!v56)
            {
              ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
              std::__shared_weak_count::__release_weak(v54);
            }
          }
        }
      }
      p_p = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3);
      (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 120))(a1, &p_p);
      v57 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
      {
        v58 = 24 * ((int64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) / 24);
        do
        {
          v59 = *(_DWORD *)(a1 + 8);
          LODWORD(v96) = 2;
          (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 104))(a1, &v96);
          v60 = v96;
          if (v59 < 1)
          {
            sub_223BB1570(a1, v57, v96);
          }
          else
          {
            if (v59 == 2)
            {
              LODWORD(v96) = 2;
              (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 104))(a1, &v96);
            }
            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
            sub_223BB1570(a1, v57, v60);
            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
          }
          v57 += 24;
          v58 -= 24;
        }
        while (v58);
        v57 = __p.__r_.__value_.__r.__words[0];
      }
      if (v57)
      {
        v72 = __p.__r_.__value_.__l.__size_;
        v73 = (void *)v57;
        if (__p.__r_.__value_.__l.__size_ != v57)
        {
          do
          {
            v74 = *(std::__shared_weak_count **)(v72 - 8);
            if (v74)
            {
              p_shared_owners = (unint64_t *)&v74->__shared_owners_;
              do
                v76 = __ldaxr(p_shared_owners);
              while (__stlxr(v76 - 1, p_shared_owners));
              if (!v76)
              {
                ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                std::__shared_weak_count::__release_weak(v74);
              }
            }
            v72 -= 24;
          }
          while (v72 != v57);
          v73 = (void *)__p.__r_.__value_.__r.__words[0];
        }
        __p.__r_.__value_.__l.__size_ = v57;
        operator delete(v73);
      }
      v77 = (std::__shared_weak_count *)*((_QWORD *)&theArray + 1);
      if (!*((_QWORD *)&theArray + 1))
        return;
      v78 = (unint64_t *)(*((_QWORD *)&theArray + 1) + 8);
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      break;
    case 4:
      v11 = *(const void **)(a2 + 8);
      if (v11 && (v12 = CFDictionaryGetTypeID(), CFGetTypeID(v11) == v12))
      {
        sub_22319EE1C(&__p, *(CFTypeRef *)(a2 + 8));
        theArray = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v13 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
          v15 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v16 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v17 = __ldaxr(v16);
            while (__stlxr(v17 - 1, v16));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
          }
        }
        v18 = (const void *)theArray;
      }
      else
      {
        v18 = 0;
        theArray = 0uLL;
      }
      sub_22319EE1C(&__p, v18);
      v31 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v32 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
        v34 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v35 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 - 1, v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
        do
          v37 = __ldxr(v32);
        while (__stxr(v37 + 1, v32));
        v96 = v31;
        do
          v38 = __ldxr(v32);
        while (__stxr(v38 + 1, v32));
        do
          v39 = __ldaxr(v32);
        while (__stlxr(v39 - 1, v32));
        if (!v39)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v31 + 1) + 16))(*((_QWORD *)&v31 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v31 + 1));
        }
        do
          v40 = __ldaxr(v32);
        while (__stlxr(v40 - 1, v32));
        if (!v40)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v31 + 1) + 16))(*((_QWORD *)&v31 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v31 + 1));
        }
      }
      else
      {
        v96 = __p.__r_.__value_.__r.__words[0];
      }
      sub_224518820(&p_p, (uint64_t)&v96);
      v80 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
      if (*((_QWORD *)&v96 + 1))
      {
        v81 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
      if (*((_QWORD *)&theArray + 1))
      {
        v83 = (unint64_t *)(*((_QWORD *)&theArray + 1) + 8);
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        if (!v84)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&theArray + 1) + 16))(*((_QWORD *)&theArray + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&theArray + 1));
        }
      }
      v85 = *(_DWORD *)(a1 + 8);
      LODWORD(__p.__r_.__value_.__l.__data_) = 2;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 104))(a1, &__p);
      data_low = LODWORD(__p.__r_.__value_.__l.__data_);
      if (v85 < 1)
      {
        sub_223BB1294(a1, &p_p, LODWORD(__p.__r_.__value_.__l.__data_));
      }
      else
      {
        if (v85 == 2)
        {
          LODWORD(__p.__r_.__value_.__l.__data_) = 2;
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 104))(a1, &__p);
        }
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
        sub_223BB1294(a1, &p_p, data_low);
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
      }
      v77 = (std::__shared_weak_count *)v92;
      if (!(_QWORD)v92)
        return;
      v87 = (unint64_t *)(v92 + 8);
      do
        v79 = __ldaxr(v87);
      while (__stlxr(v79 - 1, v87));
      break;
    default:
      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Foundation/FoundationIO/include/Kit/FoundationIO/DictionaryRefIO.h", 281, (uint64_t)"", 0, (uint64_t)"invalid value type identifier", 29, (void (*)(void **))sub_22457406C);
      abort();
  }
  if (!v79)
  {
    ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
    std::__shared_weak_count::__release_weak(v77);
  }
}

void sub_223BB1F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va1);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BB1F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  sub_223167354(v6 - 64);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BB1F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BB1F80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26)
{
  if ((_BYTE)a26)
  {
    if (a25 < 0)
    {
      operator delete(__p);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_223BB2028(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  va_list va2;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v11 = va_arg(va3, _QWORD);
  v13 = va_arg(va3, _QWORD);
  v14 = va_arg(va3, _QWORD);
  v15 = va_arg(va3, _QWORD);
  sub_223197300((uint64_t)va2);
  sub_223167354((uint64_t)va);
  sub_2231A62F0((void **)va3);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_223BB205C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_2231A62F0(va1);
  sub_223167354((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223BB207C(_BYTE *a1, unsigned __int16 **a2)
{
  unsigned __int16 *v3;
  void *__p[2];
  char v5;
  _WORD v6[12];
  int v7;
  char v8;
  char *v9;

  if ((a1[12] & 2) != 0)
  {
    v3 = *a2;
    v7 = 0;
    sub_223B97D3C((uint64_t)&v9, (uint64_t)v6, v3);
    if (v7 == -1)
      sub_22316DD70();
    v9 = &v8;
    ((void (*)(void **__return_ptr, char **, _WORD *))off_24EC5FFA0[v7])(__p, &v9, v6);
    if (v7 != -1)
      ((void (*)(char **, _WORD *))off_24EC5FF88[v7])(&v9, v6);
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 144))(a1, __p);
    if (v5 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v6[0] = **a2;
    (*(void (**)(_BYTE *, _WORD *))(*(_QWORD *)a1 + 96))(a1, v6);
  }
}

void sub_223BB2170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223BB218C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BB21A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223BB21B4(int *a1, _BYTE *a2, _BYTE *a3)
{
  int v5;
  int v8;
  _BYTE *v9;

  v5 = *a1;
  if (*a1 == 2)
  {
    v8 = 2;
    (*(void (**)(_BYTE *, int *))(*(_QWORD *)a2 + 104))(a2, &v8);
    v5 = *a1;
  }
  if (v5 < 1)
  {
    v9 = a3;
    sub_223BB23F8(a2, &v9);
    return sub_223BB228C(*a3, (uint64_t)a3, (uint64_t)a2);
  }
  else
  {
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 16))(a2);
    v9 = a3;
    sub_223BB23F8(a2, &v9);
    sub_223BB228C(*a3, (uint64_t)a3, (uint64_t)a2);
    return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a2 + 24))(a2);
  }
}

uint64_t sub_223BB228C(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  switch(a1)
  {
    case 0:
      LOBYTE(v5) = *(_BYTE *)sub_22454C038(a2 + 8);
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a3 + 80))(a3, &v5);
      break;
    case 1:
      LOWORD(v5) = *(_WORD *)sub_22454C290(a2 + 8);
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a3 + 96))(a3, &v5);
      break;
    case 2:
      LODWORD(v5) = *(_DWORD *)sub_22454C378(a2 + 8);
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a3 + 104))(a3, &v5);
      break;
    case 3:
      v5 = *(_QWORD *)sub_22454C460(a2 + 8);
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a3 + 120))(a3, &v5);
      break;
    case 5:
      LOBYTE(v5) = *(_BYTE *)sub_22454C548(a2 + 8);
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a3 + 88))(a3, &v5);
      break;
    case 6:
      LOWORD(v5) = *(_WORD *)sub_22454C630(a2 + 8);
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a3 + 48))(a3, &v5);
      break;
    case 7:
      LODWORD(v5) = *(_DWORD *)sub_22454C718(a2 + 8);
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a3 + 56))(a3, &v5);
      break;
    case 8:
      v5 = *(_QWORD *)sub_22454C800(a2 + 8);
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a3 + 72))(a3, &v5);
      break;
    case 11:
      LODWORD(v5) = *(_DWORD *)sub_22454C8E8(a2 + 8);
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a3 + 128))(a3, &v5);
      break;
    case 12:
      v5 = *(_QWORD *)sub_22454C9D0(a2 + 8);
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a3 + 136))(a3, &v5);
      break;
    default:
      sub_22454B274(a1);
  }
  return result;
}

void sub_223BB23F8(_BYTE *a1, _BYTE **a2)
{
  _BYTE *v3;
  void *__p[2];
  char v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  if ((a1[12] & 2) != 0)
  {
    v3 = *a2;
    v7 = 0;
    sub_223B97FF0((uint64_t)&v9, (uint64_t)v6, v3);
    if (v7 == -1)
      sub_22316DD70();
    v9 = &v8;
    ((void (*)(void **__return_ptr, char **, _BYTE *))off_24EC5FFA0[v7])(__p, &v9, v6);
    if (v7 != -1)
      ((void (*)(char **, _BYTE *))off_24EC5FF88[v7])(&v9, v6);
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 144))(a1, __p);
    if (v5 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v6[0] = **a2;
    (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v6);
  }
}

void sub_223BB24EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223BB2508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BB251C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223BB2530(int *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t result;
  int v8;
  int v9;

  v8 = 2;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)a2 + 104))(a2, &v8);
  if (*a1 < 1)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 12);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 16);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 20);
  }
  else
  {
    if (*a1 == 2 && (v9 = 2, (*(void (**)(uint64_t, int *))(*(_QWORD *)a2 + 104))(a2, &v9), *a1 < 1))
    {
      v6 = 0;
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
      v6 = 1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 12);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 16);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 20);
    if (v6)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  }
  return result;
}

uint64_t sub_223BB26EC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v3 = a3;
    v4 = result;
    v5 = a3 + 16 * a2;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 80))(v4, v3);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 80))(v4, v3 + 1);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 80))(v4, v3 + 2);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 80))(v4, v3 + 3);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 80))(v4, v3 + 4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 80))(v4, v3 + 5);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 80))(v4, v3 + 6);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 80))(v4, v3 + 7);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 80))(v4, v3 + 8);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 80))(v4, v3 + 9);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 80))(v4, v3 + 10);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 80))(v4, v3 + 11);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 80))(v4, v3 + 12);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 80))(v4, v3 + 13);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 80))(v4, v3 + 14);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 80))(v4, v3 + 15);
      v3 += 16;
    }
    while (v3 != v5);
  }
  return result;
}

uint64_t sub_223BB2868(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v3 = a3;
    v4 = result;
    v5 = a3 + (a2 << 6);
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 128))(v4, v3);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 128))(v4, v3 + 4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 128))(v4, v3 + 8);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 128))(v4, v3 + 12);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 128))(v4, v3 + 16);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 128))(v4, v3 + 20);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 128))(v4, v3 + 24);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 128))(v4, v3 + 28);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 128))(v4, v3 + 32);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 128))(v4, v3 + 36);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 128))(v4, v3 + 40);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 128))(v4, v3 + 44);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 128))(v4, v3 + 48);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 128))(v4, v3 + 52);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 128))(v4, v3 + 56);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 128))(v4, v3 + 60);
      v3 += 64;
    }
    while (v3 != v5);
  }
  return result;
}

uint64_t sub_223BB29E4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t result;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 12);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 20);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 28);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 32);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 36);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 40);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 44);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 52);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 56);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 60);
  if (a3 >= 2)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 64);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 68);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 72);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 76);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 80);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 84);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 88);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 92);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 96);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 100);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 104);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 108);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 112);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 116);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 120);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 124);
  }
  return result;
}

uint64_t sub_223BB2C9C(int *a1, uint64_t a2, uint64_t **a3)
{
  uint64_t result;
  uint64_t *v7;
  int64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;

  LODWORD(v13) = 1;
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a2 + 104))(a2, &v13);
  if (*a1 < 1)
  {
    v13 = 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3);
    result = (*(uint64_t (**)(uint64_t, unint64_t *))(*(_QWORD *)a2 + 120))(a2, &v13);
    v10 = *a3;
    v11 = (char *)a3[1] - (char *)*a3;
    if (v11)
    {
      v12 = 24 * (v11 / 24);
      do
      {
        v14 = 1;
        (*(void (**)(uint64_t, int *))(*(_QWORD *)a2 + 104))(a2, &v14);
        result = sub_223BB2E1C(a2, v10);
        v10 += 3;
        v12 -= 24;
      }
      while (v12);
    }
  }
  else
  {
    v13 = 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3);
    result = (*(uint64_t (**)(uint64_t, unint64_t *))(*(_QWORD *)a2 + 120))(a2, &v13);
    v7 = *a3;
    v8 = (char *)a3[1] - (char *)*a3;
    if (v8)
    {
      v9 = 24 * (v8 / 24);
      do
      {
        v14 = 1;
        (*(void (**)(uint64_t, int *))(*(_QWORD *)a2 + 104))(a2, &v14);
        result = sub_223BB2E1C(a2, v7);
        v7 += 3;
        v9 -= 24;
      }
      while (v9);
    }
  }
  return result;
}

uint64_t sub_223BB2E1C(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v8 = (a2[1] - *a2) >> 5;
  result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 120))(a1, &v8);
  v5 = *a2;
  for (i = a2[1]; v5 != i; v5 = v7 + 16)
  {
    v9 = 1;
    (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 104))(a1, &v9);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v5);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v5 + 4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v5 + 8);
    v7 = v5 + 16;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, v7);
    v9 = 1;
    (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 104))(a1, &v9);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, v7 + 8);
  }
  return result;
}

void sub_223BB2F30(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  void *v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  int v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  char v99;
  char v100;
  _QWORD *exception;
  _QWORD *v102;
  char v103;
  void *__p[2];
  char v105;
  _BYTE v106[8];
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  char v110;
  __int128 v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  char v115;
  __int128 v116;
  uint64_t v117;
  char v118;
  __int128 v119;
  uint64_t v120;
  unsigned __int8 v121;
  uint64_t v122;

  v122 = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24EC79068, (const struct __class_type_info *)&unk_24EC60740, 0);
  if (v4)
  {
    v5 = (uint64_t)v4;
    v6 = *(_DWORD *)(a2 + 192);
    switch(v6)
    {
      case 0:
LABEL_73:
        v36 = *(unsigned __int8 *)(v5 + 104);
        *(_QWORD *)(v5 + 88) = "info";
        *(_QWORD *)(v5 + 96) = 4;
        if (!v36)
          *(_BYTE *)(v5 + 104) = 1;
        sub_223BB4B40(v5, a2 + 16);
        v37 = *(unsigned __int8 *)(v5 + 104);
        *(_QWORD *)(v5 + 88) = "value";
        *(_QWORD *)(v5 + 96) = 5;
        if (!v37)
          *(_BYTE *)(v5 + 104) = 1;
        sub_224544628(v5);
        v38 = *(unsigned __int8 *)(v5 + 104);
        *(_QWORD *)(v5 + 88) = "version";
        *(_QWORD *)(v5 + 96) = 7;
        if (!v38)
          *(_BYTE *)(v5 + 104) = 1;
        v39 = (char *)sub_2245448E0((uint64_t *)v5);
        ++*(_QWORD *)(v5 + 112);
        __p[0] = 0;
        sub_22451CAD4(v39, __p);
        if ((unint64_t)__p[0] >> 32)
        {
          exception = __cxa_allocate_exception(8uLL);
          *exception = &off_24EC7AC38;
          __cxa_throw(exception, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
        }
        sub_223BB6128(v5, a2 + 200, __p[0]);
LABEL_81:
        v40 = *(_QWORD *)(v5 + 48);
        *(_QWORD *)(v5 + 32) = *(_QWORD *)(v40 - 8);
        v41 = *(_QWORD *)(v5 + 72);
        *(_QWORD *)(v5 + 112) = *(_QWORD *)(v41 - 8);
        *(_QWORD *)(v5 + 48) = v40 - 8;
        *(_QWORD *)(v5 + 72) = v41 - 8;
        return;
      case 1:
        sub_223B89234(a2 + 16, (uint64_t)__p);
        sub_223B87C9C((uint64_t)v106, (uint64_t *)__p);
        v7 = *(unsigned int *)(a2 + 192);
        if ((_DWORD)v7 != -1)
        {
          if (!(_DWORD)v7)
          {
            sub_223BB47F0(a2 + 16, (uint64_t)v106);
            if (!v121)
              goto LABEL_63;
            goto LABEL_39;
          }
          ((void (*)(char *, uint64_t))off_24EC5FFB8[v7])(&v103, a2 + 16);
        }
        *(_BYTE *)(a2 + 40) = 0;
        *(_DWORD *)(a2 + 192) = -1;
        *(_OWORD *)(a2 + 24) = v107;
        *(_BYTE *)(a2 + 64) = 0;
        if (v110)
        {
          v20 = v109;
          *(_OWORD *)(a2 + 40) = v108;
          *(_QWORD *)(a2 + 56) = v20;
          v108 = 0uLL;
          v109 = 0;
          *(_BYTE *)(a2 + 64) = 1;
        }
        v21 = v112;
        v22 = v111;
        *(_BYTE *)(a2 + 96) = 0;
        *(_OWORD *)(a2 + 72) = v22;
        *(_QWORD *)(a2 + 88) = v21;
        *(_BYTE *)(a2 + 120) = 0;
        if (v115)
        {
          v23 = v114;
          *(_OWORD *)(a2 + 96) = v113;
          *(_QWORD *)(a2 + 112) = v23;
          v113 = 0uLL;
          v114 = 0;
          *(_BYTE *)(a2 + 120) = 1;
        }
        *(_BYTE *)(a2 + 128) = 0;
        *(_BYTE *)(a2 + 152) = 0;
        if (v118)
        {
          v24 = v117;
          *(_OWORD *)(a2 + 128) = v116;
          *(_QWORD *)(a2 + 144) = v24;
          v116 = 0uLL;
          v117 = 0;
          *(_BYTE *)(a2 + 152) = 1;
        }
        *(_BYTE *)(a2 + 160) = 0;
        *(_BYTE *)(a2 + 184) = 0;
        v25 = v121;
        if (v121)
        {
          *(_OWORD *)(a2 + 160) = v119;
          *(_QWORD *)(a2 + 176) = v120;
          v119 = 0uLL;
          v120 = 0;
          *(_BYTE *)(a2 + 184) = 1;
        }
        *(_DWORD *)(a2 + 192) = 0;
        if (!v25)
          goto LABEL_63;
LABEL_39:
        v26 = v119;
        if (!(_QWORD)v119)
          goto LABEL_63;
        v27 = *((_QWORD *)&v119 + 1);
        v28 = (void *)v119;
        if (*((_QWORD *)&v119 + 1) == (_QWORD)v119)
          goto LABEL_62;
        do
        {
          if (*(char *)(v27 - 1) < 0)
            operator delete(*(void **)(v27 - 24));
          v27 -= 24;
        }
        while (v27 != v26);
LABEL_61:
        v28 = (void *)v119;
LABEL_62:
        *((_QWORD *)&v119 + 1) = v26;
        operator delete(v28);
        goto LABEL_63;
      case 2:
        sub_223B8944C(a2 + 16, (uint64_t)__p);
        sub_223B87C9C((uint64_t)v106, (uint64_t *)__p);
        v13 = *(unsigned int *)(a2 + 192);
        if ((_DWORD)v13 != -1)
        {
          if (!(_DWORD)v13)
          {
            sub_223BB47F0(a2 + 16, (uint64_t)v106);
            if (!v121)
            {
LABEL_63:
              if (v118 && SHIBYTE(v117) < 0)
                operator delete((void *)v116);
              if (v115 && SHIBYTE(v114) < 0)
                operator delete((void *)v113);
              if (v110 && SHIBYTE(v109) < 0)
                operator delete((void *)v108);
              sub_2231AD66C((uint64_t)__p);
              if (*(_DWORD *)(a2 + 192))
                sub_22316DD70();
              goto LABEL_73;
            }
            goto LABEL_55;
          }
          ((void (*)(char *, uint64_t))off_24EC5FFB8[v13])(&v103, a2 + 16);
        }
        *(_BYTE *)(a2 + 40) = 0;
        *(_DWORD *)(a2 + 192) = -1;
        *(_OWORD *)(a2 + 24) = v107;
        *(_BYTE *)(a2 + 64) = 0;
        if (v110)
        {
          v29 = v109;
          *(_OWORD *)(a2 + 40) = v108;
          *(_QWORD *)(a2 + 56) = v29;
          v108 = 0uLL;
          v109 = 0;
          *(_BYTE *)(a2 + 64) = 1;
        }
        v30 = v112;
        v31 = v111;
        *(_BYTE *)(a2 + 96) = 0;
        *(_OWORD *)(a2 + 72) = v31;
        *(_QWORD *)(a2 + 88) = v30;
        *(_BYTE *)(a2 + 120) = 0;
        if (v115)
        {
          v32 = v114;
          *(_OWORD *)(a2 + 96) = v113;
          *(_QWORD *)(a2 + 112) = v32;
          v113 = 0uLL;
          v114 = 0;
          *(_BYTE *)(a2 + 120) = 1;
        }
        *(_BYTE *)(a2 + 128) = 0;
        *(_BYTE *)(a2 + 152) = 0;
        if (v118)
        {
          v33 = v117;
          *(_OWORD *)(a2 + 128) = v116;
          *(_QWORD *)(a2 + 144) = v33;
          v116 = 0uLL;
          v117 = 0;
          *(_BYTE *)(a2 + 152) = 1;
        }
        *(_BYTE *)(a2 + 160) = 0;
        *(_BYTE *)(a2 + 184) = 0;
        v34 = v121;
        if (v121)
        {
          *(_OWORD *)(a2 + 160) = v119;
          *(_QWORD *)(a2 + 176) = v120;
          v119 = 0uLL;
          v120 = 0;
          *(_BYTE *)(a2 + 184) = 1;
        }
        *(_DWORD *)(a2 + 192) = 0;
        if (!v34)
          goto LABEL_63;
LABEL_55:
        v26 = v119;
        if (!(_QWORD)v119)
          goto LABEL_63;
        v35 = *((_QWORD *)&v119 + 1);
        v28 = (void *)v119;
        if (*((_QWORD *)&v119 + 1) == (_QWORD)v119)
          goto LABEL_62;
        do
        {
          if (*(char *)(v35 - 1) < 0)
            operator delete(*(void **)(v35 - 24));
          v35 -= 24;
        }
        while (v35 != v26);
        goto LABEL_61;
    }
LABEL_272:
    sub_22316DD70();
  }
  v8 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24EC79068, (const struct __class_type_info *)&unk_24EC20CC0, 0);
  if (v8)
  {
    v9 = v8;
    v10 = *(_DWORD *)(a2 + 192);
    if (!v10)
    {
LABEL_138:
      sub_223BBD12C((uint64_t)__p, v9, a2 + 16);
      LODWORD(__p[0]) = 8;
      sub_224554038(v9[6], __p);
      sub_2232BFB3C(v9, a2 + 200, __p[0]);
      return;
    }
    if (v10 == 1)
    {
      sub_223B89234(a2 + 16, (uint64_t)__p);
      sub_223B87C9C((uint64_t)v106, (uint64_t *)__p);
      v11 = *(unsigned int *)(a2 + 192);
      if ((_DWORD)v11 != -1)
      {
        if (!(_DWORD)v11)
        {
          sub_223BB47F0(a2 + 16, (uint64_t)v106);
          v12 = v121;
LABEL_102:
          if (!v12)
            goto LABEL_128;
          v54 = v119;
          if (!(_QWORD)v119)
            goto LABEL_128;
          v55 = *((_QWORD *)&v119 + 1);
          v56 = (void *)v119;
          if (*((_QWORD *)&v119 + 1) == (_QWORD)v119)
          {
LABEL_127:
            *((_QWORD *)&v119 + 1) = v54;
            operator delete(v56);
LABEL_128:
            if (v118 && SHIBYTE(v117) < 0)
              operator delete((void *)v116);
            if (v115 && SHIBYTE(v114) < 0)
              operator delete((void *)v113);
            if (v110 && SHIBYTE(v109) < 0)
              operator delete((void *)v108);
            sub_2231AD66C((uint64_t)__p);
            if (*(_DWORD *)(a2 + 192))
              sub_22316DD70();
            goto LABEL_138;
          }
          do
          {
            if (*(char *)(v55 - 1) < 0)
              operator delete(*(void **)(v55 - 24));
            v55 -= 24;
          }
          while (v55 != v54);
LABEL_126:
          v56 = (void *)v119;
          goto LABEL_127;
        }
        ((void (*)(char *, uint64_t))off_24EC5FFB8[v11])(&v103, a2 + 16);
      }
      *(_BYTE *)(a2 + 40) = 0;
      *(_DWORD *)(a2 + 192) = -1;
      *(_OWORD *)(a2 + 24) = v107;
      *(_BYTE *)(a2 + 64) = 0;
      if (v110)
      {
        v49 = v109;
        *(_OWORD *)(a2 + 40) = v108;
        *(_QWORD *)(a2 + 56) = v49;
        v108 = 0uLL;
        v109 = 0;
        *(_BYTE *)(a2 + 64) = 1;
      }
      v50 = v112;
      v51 = v111;
      *(_BYTE *)(a2 + 96) = 0;
      *(_OWORD *)(a2 + 72) = v51;
      *(_QWORD *)(a2 + 88) = v50;
      *(_BYTE *)(a2 + 120) = 0;
      if (v115)
      {
        v52 = v114;
        *(_OWORD *)(a2 + 96) = v113;
        *(_QWORD *)(a2 + 112) = v52;
        v113 = 0uLL;
        v114 = 0;
        *(_BYTE *)(a2 + 120) = 1;
      }
      *(_BYTE *)(a2 + 128) = 0;
      *(_BYTE *)(a2 + 152) = 0;
      if (v118)
      {
        v53 = v117;
        *(_OWORD *)(a2 + 128) = v116;
        *(_QWORD *)(a2 + 144) = v53;
        v116 = 0uLL;
        v117 = 0;
        *(_BYTE *)(a2 + 152) = 1;
      }
      *(_BYTE *)(a2 + 160) = 0;
      *(_BYTE *)(a2 + 184) = 0;
      v12 = v121;
      if (v121)
      {
        *(_OWORD *)(a2 + 160) = v119;
        *(_QWORD *)(a2 + 176) = v120;
        v119 = 0uLL;
        v120 = 0;
        *(_BYTE *)(a2 + 184) = 1;
      }
      *(_DWORD *)(a2 + 192) = 0;
      goto LABEL_102;
    }
    if (v10 != 2)
      goto LABEL_272;
    sub_223B8944C(a2 + 16, (uint64_t)__p);
    sub_223B87C9C((uint64_t)v106, (uint64_t *)__p);
    v18 = *(unsigned int *)(a2 + 192);
    if ((_DWORD)v18 != -1)
    {
      if (!(_DWORD)v18)
      {
        sub_223BB47F0(a2 + 16, (uint64_t)v106);
        v19 = v121;
LABEL_119:
        if (!v19)
          goto LABEL_128;
        v54 = v119;
        if (!(_QWORD)v119)
          goto LABEL_128;
        v62 = *((_QWORD *)&v119 + 1);
        v56 = (void *)v119;
        if (*((_QWORD *)&v119 + 1) == (_QWORD)v119)
          goto LABEL_127;
        do
        {
          if (*(char *)(v62 - 1) < 0)
            operator delete(*(void **)(v62 - 24));
          v62 -= 24;
        }
        while (v62 != v54);
        goto LABEL_126;
      }
      ((void (*)(char *, uint64_t))off_24EC5FFB8[v18])(&v103, a2 + 16);
    }
    *(_BYTE *)(a2 + 40) = 0;
    *(_DWORD *)(a2 + 192) = -1;
    *(_OWORD *)(a2 + 24) = v107;
    *(_BYTE *)(a2 + 64) = 0;
    if (v110)
    {
      v57 = v109;
      *(_OWORD *)(a2 + 40) = v108;
      *(_QWORD *)(a2 + 56) = v57;
      v108 = 0uLL;
      v109 = 0;
      *(_BYTE *)(a2 + 64) = 1;
    }
    v58 = v112;
    v59 = v111;
    *(_BYTE *)(a2 + 96) = 0;
    *(_OWORD *)(a2 + 72) = v59;
    *(_QWORD *)(a2 + 88) = v58;
    *(_BYTE *)(a2 + 120) = 0;
    if (v115)
    {
      v60 = v114;
      *(_OWORD *)(a2 + 96) = v113;
      *(_QWORD *)(a2 + 112) = v60;
      v113 = 0uLL;
      v114 = 0;
      *(_BYTE *)(a2 + 120) = 1;
    }
    *(_BYTE *)(a2 + 128) = 0;
    *(_BYTE *)(a2 + 152) = 0;
    if (v118)
    {
      v61 = v117;
      *(_OWORD *)(a2 + 128) = v116;
      *(_QWORD *)(a2 + 144) = v61;
      v116 = 0uLL;
      v117 = 0;
      *(_BYTE *)(a2 + 152) = 1;
    }
    *(_BYTE *)(a2 + 160) = 0;
    *(_BYTE *)(a2 + 184) = 0;
    v19 = v121;
    if (v121)
    {
      *(_OWORD *)(a2 + 160) = v119;
      *(_QWORD *)(a2 + 176) = v120;
      v119 = 0uLL;
      v120 = 0;
      *(_BYTE *)(a2 + 184) = 1;
    }
    *(_DWORD *)(a2 + 192) = 0;
    goto LABEL_119;
  }
  v14 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24EC79068, (const struct __class_type_info *)&unk_24EC607C8, 0);
  if (v14)
  {
    v5 = (uint64_t)v14;
    v15 = *(_DWORD *)(a2 + 192);
    if (!v15)
    {
LABEL_191:
      v79 = *(unsigned __int8 *)(v5 + 104);
      *(_QWORD *)(v5 + 88) = "info";
      *(_QWORD *)(v5 + 96) = 4;
      if (!v79)
        *(_BYTE *)(v5 + 104) = 1;
      sub_223BBD758(v5, a2 + 16);
      v80 = *(unsigned __int8 *)(v5 + 104);
      *(_QWORD *)(v5 + 88) = "value";
      *(_QWORD *)(v5 + 96) = 5;
      if (!v80)
        *(_BYTE *)(v5 + 104) = 1;
      sub_224544138(v5);
      v81 = *(unsigned __int8 *)(v5 + 104);
      *(_QWORD *)(v5 + 88) = "version";
      *(_QWORD *)(v5 + 96) = 7;
      if (!v81)
        *(_BYTE *)(v5 + 104) = 1;
      v82 = (char *)sub_2245443F0((uint64_t *)v5);
      ++*(_QWORD *)(v5 + 112);
      __p[0] = 0;
      sub_22451C444(v82, __p);
      if ((unint64_t)__p[0] >> 32)
      {
        v102 = __cxa_allocate_exception(8uLL);
        *v102 = &off_24EC7AC38;
        __cxa_throw(v102, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
      }
      sub_223BBE924(v5, a2 + 200, __p[0]);
      goto LABEL_81;
    }
    if (v15 == 1)
    {
      sub_223B89234(a2 + 16, (uint64_t)__p);
      sub_223B87C9C((uint64_t)v106, (uint64_t *)__p);
      v16 = *(unsigned int *)(a2 + 192);
      if ((_DWORD)v16 != -1)
      {
        if (!(_DWORD)v16)
        {
          sub_223BB47F0(a2 + 16, (uint64_t)v106);
          v17 = v121;
LABEL_155:
          if (!v17)
            goto LABEL_181;
          v70 = v119;
          if (!(_QWORD)v119)
            goto LABEL_181;
          v71 = *((_QWORD *)&v119 + 1);
          v72 = (void *)v119;
          if (*((_QWORD *)&v119 + 1) == (_QWORD)v119)
          {
LABEL_180:
            *((_QWORD *)&v119 + 1) = v70;
            operator delete(v72);
LABEL_181:
            if (v118 && SHIBYTE(v117) < 0)
              operator delete((void *)v116);
            if (v115 && SHIBYTE(v114) < 0)
              operator delete((void *)v113);
            if (v110 && SHIBYTE(v109) < 0)
              operator delete((void *)v108);
            sub_2231AD66C((uint64_t)__p);
            if (*(_DWORD *)(a2 + 192))
              sub_22316DD70();
            goto LABEL_191;
          }
          do
          {
            if (*(char *)(v71 - 1) < 0)
              operator delete(*(void **)(v71 - 24));
            v71 -= 24;
          }
          while (v71 != v70);
LABEL_179:
          v72 = (void *)v119;
          goto LABEL_180;
        }
        ((void (*)(char *, uint64_t))off_24EC5FFB8[v16])(&v103, a2 + 16);
      }
      *(_BYTE *)(a2 + 40) = 0;
      *(_DWORD *)(a2 + 192) = -1;
      *(_OWORD *)(a2 + 24) = v107;
      *(_BYTE *)(a2 + 64) = 0;
      if (v110)
      {
        v65 = v109;
        *(_OWORD *)(a2 + 40) = v108;
        *(_QWORD *)(a2 + 56) = v65;
        v108 = 0uLL;
        v109 = 0;
        *(_BYTE *)(a2 + 64) = 1;
      }
      v66 = v112;
      v67 = v111;
      *(_BYTE *)(a2 + 96) = 0;
      *(_OWORD *)(a2 + 72) = v67;
      *(_QWORD *)(a2 + 88) = v66;
      *(_BYTE *)(a2 + 120) = 0;
      if (v115)
      {
        v68 = v114;
        *(_OWORD *)(a2 + 96) = v113;
        *(_QWORD *)(a2 + 112) = v68;
        v113 = 0uLL;
        v114 = 0;
        *(_BYTE *)(a2 + 120) = 1;
      }
      *(_BYTE *)(a2 + 128) = 0;
      *(_BYTE *)(a2 + 152) = 0;
      if (v118)
      {
        v69 = v117;
        *(_OWORD *)(a2 + 128) = v116;
        *(_QWORD *)(a2 + 144) = v69;
        v116 = 0uLL;
        v117 = 0;
        *(_BYTE *)(a2 + 152) = 1;
      }
      *(_BYTE *)(a2 + 160) = 0;
      *(_BYTE *)(a2 + 184) = 0;
      v17 = v121;
      if (v121)
      {
        *(_OWORD *)(a2 + 160) = v119;
        *(_QWORD *)(a2 + 176) = v120;
        v119 = 0uLL;
        v120 = 0;
        *(_BYTE *)(a2 + 184) = 1;
      }
      *(_DWORD *)(a2 + 192) = 0;
      goto LABEL_155;
    }
    if (v15 != 2)
      goto LABEL_272;
    sub_223B8944C(a2 + 16, (uint64_t)__p);
    sub_223B87C9C((uint64_t)v106, (uint64_t *)__p);
    v47 = *(unsigned int *)(a2 + 192);
    if ((_DWORD)v47 != -1)
    {
      if (!(_DWORD)v47)
      {
        sub_223BB47F0(a2 + 16, (uint64_t)v106);
        v48 = v121;
LABEL_172:
        if (!v48)
          goto LABEL_181;
        v70 = v119;
        if (!(_QWORD)v119)
          goto LABEL_181;
        v78 = *((_QWORD *)&v119 + 1);
        v72 = (void *)v119;
        if (*((_QWORD *)&v119 + 1) == (_QWORD)v119)
          goto LABEL_180;
        do
        {
          if (*(char *)(v78 - 1) < 0)
            operator delete(*(void **)(v78 - 24));
          v78 -= 24;
        }
        while (v78 != v70);
        goto LABEL_179;
      }
      ((void (*)(char *, uint64_t))off_24EC5FFB8[v47])(&v103, a2 + 16);
    }
    *(_BYTE *)(a2 + 40) = 0;
    *(_DWORD *)(a2 + 192) = -1;
    *(_OWORD *)(a2 + 24) = v107;
    *(_BYTE *)(a2 + 64) = 0;
    if (v110)
    {
      v73 = v109;
      *(_OWORD *)(a2 + 40) = v108;
      *(_QWORD *)(a2 + 56) = v73;
      v108 = 0uLL;
      v109 = 0;
      *(_BYTE *)(a2 + 64) = 1;
    }
    v74 = v112;
    v75 = v111;
    *(_BYTE *)(a2 + 96) = 0;
    *(_OWORD *)(a2 + 72) = v75;
    *(_QWORD *)(a2 + 88) = v74;
    *(_BYTE *)(a2 + 120) = 0;
    if (v115)
    {
      v76 = v114;
      *(_OWORD *)(a2 + 96) = v113;
      *(_QWORD *)(a2 + 112) = v76;
      v113 = 0uLL;
      v114 = 0;
      *(_BYTE *)(a2 + 120) = 1;
    }
    *(_BYTE *)(a2 + 128) = 0;
    *(_BYTE *)(a2 + 152) = 0;
    if (v118)
    {
      v77 = v117;
      *(_OWORD *)(a2 + 128) = v116;
      *(_QWORD *)(a2 + 144) = v77;
      v116 = 0uLL;
      v117 = 0;
      *(_BYTE *)(a2 + 152) = 1;
    }
    *(_BYTE *)(a2 + 160) = 0;
    *(_BYTE *)(a2 + 184) = 0;
    v48 = v121;
    if (v121)
    {
      *(_OWORD *)(a2 + 160) = v119;
      *(_QWORD *)(a2 + 176) = v120;
      v119 = 0uLL;
      v120 = 0;
      *(_BYTE *)(a2 + 184) = 1;
    }
    *(_DWORD *)(a2 + 192) = 0;
    goto LABEL_172;
  }
  v42 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24EC79068, (const struct __class_type_info *)&unk_24EC60800, 0);
  if (v42)
  {
    v43 = (uint64_t)v42;
    v44 = *(_DWORD *)(a2 + 192);
    if (!v44)
      goto LABEL_246;
    if (v44 == 1)
    {
      sub_223B89234(a2 + 16, (uint64_t)__p);
      sub_223B87C9C((uint64_t)v106, (uint64_t *)__p);
      v45 = *(unsigned int *)(a2 + 192);
      if ((_DWORD)v45 != -1)
      {
        if (!(_DWORD)v45)
        {
          sub_223BB47F0(a2 + 16, (uint64_t)v106);
          v46 = v121;
LABEL_210:
          if (!v46)
            goto LABEL_236;
          v88 = v119;
          if (!(_QWORD)v119)
            goto LABEL_236;
          v89 = *((_QWORD *)&v119 + 1);
          v90 = (void *)v119;
          if (*((_QWORD *)&v119 + 1) == (_QWORD)v119)
          {
LABEL_235:
            *((_QWORD *)&v119 + 1) = v88;
            operator delete(v90);
LABEL_236:
            if (v118 && SHIBYTE(v117) < 0)
              operator delete((void *)v116);
            if (v115 && SHIBYTE(v114) < 0)
              operator delete((void *)v113);
            if (v110 && SHIBYTE(v109) < 0)
              operator delete((void *)v108);
            sub_2231AD66C((uint64_t)__p);
            if (*(_DWORD *)(a2 + 192))
              sub_22316DD70();
LABEL_246:
            LODWORD(__p[0]) = 6;
            sub_2245508F0(v43, __p);
            v97 = __p[0];
            if (LODWORD(__p[0]) >= 6)
              v98 = 6;
            else
              v98 = __p[0];
            if (v98 < 3)
              sub_223BC4F50((uint64_t)__p, v43, a2 + 16, v98);
            else
              sub_223BC5140(v43, a2 + 16, v98);
            if (v97 < 3 || *(_BYTE *)(v43 + 131))
            {
LABEL_254:
              LODWORD(__p[0]) = 8;
              sub_2245508F0(v43, __p);
              sub_223BC5E6C(v43, a2 + 200, __p[0]);
              return;
            }
            while (1)
            {
              if ((*(_BYTE *)(*(_QWORD *)(v43 + 16) + *(_QWORD *)(**(_QWORD **)(v43 + 16) - 24) + 32) & 2) != 0)
                goto LABEL_254;
              sub_2245523C0(v43, (uint64_t)__p);
              if (v105 < 0)
              {
                if (__p[1] != (void *)1 || *(unsigned __int8 *)(v43 + 72) != *(unsigned __int8 *)__p[0])
                {
LABEL_267:
                  v100 = 1;
                  goto LABEL_268;
                }
              }
              else if (v105 != 1 || *(unsigned __int8 *)(v43 + 72) != LOBYTE(__p[0]))
              {
                goto LABEL_267;
              }
              v100 = 0;
LABEL_268:
              if (v105 < 0)
                operator delete(__p[0]);
              if (*(_BYTE *)(v43 + 131))
                v99 = 0;
              else
                v99 = v100;
              if ((v99 & 1) == 0)
                goto LABEL_254;
            }
          }
          do
          {
            if (*(char *)(v89 - 1) < 0)
              operator delete(*(void **)(v89 - 24));
            v89 -= 24;
          }
          while (v89 != v88);
LABEL_234:
          v90 = (void *)v119;
          goto LABEL_235;
        }
        ((void (*)(char *, uint64_t))off_24EC5FFB8[v45])(&v103, a2 + 16);
      }
      *(_BYTE *)(a2 + 40) = 0;
      *(_DWORD *)(a2 + 192) = -1;
      *(_OWORD *)(a2 + 24) = v107;
      *(_BYTE *)(a2 + 64) = 0;
      if (v110)
      {
        v83 = v109;
        *(_OWORD *)(a2 + 40) = v108;
        *(_QWORD *)(a2 + 56) = v83;
        v108 = 0uLL;
        v109 = 0;
        *(_BYTE *)(a2 + 64) = 1;
      }
      v84 = v112;
      v85 = v111;
      *(_BYTE *)(a2 + 96) = 0;
      *(_OWORD *)(a2 + 72) = v85;
      *(_QWORD *)(a2 + 88) = v84;
      *(_BYTE *)(a2 + 120) = 0;
      if (v115)
      {
        v86 = v114;
        *(_OWORD *)(a2 + 96) = v113;
        *(_QWORD *)(a2 + 112) = v86;
        v113 = 0uLL;
        v114 = 0;
        *(_BYTE *)(a2 + 120) = 1;
      }
      *(_BYTE *)(a2 + 128) = 0;
      *(_BYTE *)(a2 + 152) = 0;
      if (v118)
      {
        v87 = v117;
        *(_OWORD *)(a2 + 128) = v116;
        *(_QWORD *)(a2 + 144) = v87;
        v116 = 0uLL;
        v117 = 0;
        *(_BYTE *)(a2 + 152) = 1;
      }
      *(_BYTE *)(a2 + 160) = 0;
      *(_BYTE *)(a2 + 184) = 0;
      v46 = v121;
      if (v121)
      {
        *(_OWORD *)(a2 + 160) = v119;
        *(_QWORD *)(a2 + 176) = v120;
        v119 = 0uLL;
        v120 = 0;
        *(_BYTE *)(a2 + 184) = 1;
      }
      *(_DWORD *)(a2 + 192) = 0;
      goto LABEL_210;
    }
    if (v44 != 2)
      goto LABEL_272;
    sub_223B8944C(a2 + 16, (uint64_t)__p);
    sub_223B87C9C((uint64_t)v106, (uint64_t *)__p);
    v63 = *(unsigned int *)(a2 + 192);
    if ((_DWORD)v63 != -1)
    {
      if (!(_DWORD)v63)
      {
        sub_223BB47F0(a2 + 16, (uint64_t)v106);
        v64 = v121;
LABEL_227:
        if (!v64)
          goto LABEL_236;
        v88 = v119;
        if (!(_QWORD)v119)
          goto LABEL_236;
        v96 = *((_QWORD *)&v119 + 1);
        v90 = (void *)v119;
        if (*((_QWORD *)&v119 + 1) == (_QWORD)v119)
          goto LABEL_235;
        do
        {
          if (*(char *)(v96 - 1) < 0)
            operator delete(*(void **)(v96 - 24));
          v96 -= 24;
        }
        while (v96 != v88);
        goto LABEL_234;
      }
      ((void (*)(char *, uint64_t))off_24EC5FFB8[v63])(&v103, a2 + 16);
    }
    *(_BYTE *)(a2 + 40) = 0;
    *(_DWORD *)(a2 + 192) = -1;
    *(_OWORD *)(a2 + 24) = v107;
    *(_BYTE *)(a2 + 64) = 0;
    if (v110)
    {
      v91 = v109;
      *(_OWORD *)(a2 + 40) = v108;
      *(_QWORD *)(a2 + 56) = v91;
      v108 = 0uLL;
      v109 = 0;
      *(_BYTE *)(a2 + 64) = 1;
    }
    v92 = v112;
    v93 = v111;
    *(_BYTE *)(a2 + 96) = 0;
    *(_OWORD *)(a2 + 72) = v93;
    *(_QWORD *)(a2 + 88) = v92;
    *(_BYTE *)(a2 + 120) = 0;
    if (v115)
    {
      v94 = v114;
      *(_OWORD *)(a2 + 96) = v113;
      *(_QWORD *)(a2 + 112) = v94;
      v113 = 0uLL;
      v114 = 0;
      *(_BYTE *)(a2 + 120) = 1;
    }
    *(_BYTE *)(a2 + 128) = 0;
    *(_BYTE *)(a2 + 152) = 0;
    if (v118)
    {
      v95 = v117;
      *(_OWORD *)(a2 + 128) = v116;
      *(_QWORD *)(a2 + 144) = v95;
      v116 = 0uLL;
      v117 = 0;
      *(_BYTE *)(a2 + 152) = 1;
    }
    *(_BYTE *)(a2 + 160) = 0;
    *(_BYTE *)(a2 + 184) = 0;
    v64 = v121;
    if (v121)
    {
      *(_OWORD *)(a2 + 160) = v119;
      *(_QWORD *)(a2 + 176) = v120;
      v119 = 0uLL;
      v120 = 0;
      *(_BYTE *)(a2 + 184) = 1;
    }
    *(_DWORD *)(a2 + 192) = 0;
    goto LABEL_227;
  }
  if (*a1 == &off_24EC77900)
    sub_223BCDA14(a2, a1);
  else
    sub_223BB4304(a2, a1);
}

void sub_223BB422C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_223BB4304(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17[27];
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_223B89234(a1 + 16, (uint64_t)v17);
    sub_223B87C9C((uint64_t)&v18, v17);
    v6 = *(unsigned int *)(a1 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_223BB47F0(v4, (uint64_t)&v18);
        if (!v33)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24EC5FFB8[v6])(&v16, v4);
    }
    *(_BYTE *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 192) = -1;
    *(_OWORD *)(a1 + 24) = v19;
    *(_BYTE *)(a1 + 64) = 0;
    if (v22)
    {
      *(_OWORD *)(a1 + 40) = v20;
      *(_QWORD *)(a1 + 56) = v21;
      v21 = 0;
      v20 = 0uLL;
      *(_BYTE *)(a1 + 64) = 1;
    }
    *(_BYTE *)(a1 + 96) = 0;
    *(_OWORD *)(a1 + 72) = v23;
    *(_QWORD *)(a1 + 88) = v24;
    *(_BYTE *)(a1 + 120) = 0;
    if (v27)
    {
      *(_OWORD *)(a1 + 96) = v25;
      *(_QWORD *)(a1 + 112) = v26;
      v26 = 0;
      v25 = 0uLL;
      *(_BYTE *)(a1 + 120) = 1;
    }
    *(_BYTE *)(a1 + 128) = 0;
    *(_BYTE *)(a1 + 152) = 0;
    if (v30)
    {
      *(_OWORD *)(a1 + 128) = v28;
      *(_QWORD *)(a1 + 144) = v29;
      v29 = 0;
      v28 = 0uLL;
      *(_BYTE *)(a1 + 152) = 1;
    }
    *(_BYTE *)(a1 + 160) = 0;
    *(_BYTE *)(a1 + 184) = 0;
    v8 = v33;
    if (v33)
    {
      *(_OWORD *)(a1 + 160) = v31;
      *(_QWORD *)(a1 + 176) = v32;
      v32 = 0;
      v31 = 0uLL;
      *(_BYTE *)(a1 + 184) = 1;
    }
    *(_DWORD *)(a1 + 192) = 0;
    if (!v8)
      goto LABEL_46;
LABEL_22:
    v9 = v31;
    if (!(_QWORD)v31)
      goto LABEL_46;
    v10 = *((_QWORD *)&v31 + 1);
    v11 = (void *)v31;
    if (*((_QWORD *)&v31 + 1) == (_QWORD)v31)
      goto LABEL_45;
    do
    {
      if (*(char *)(v10 - 1) < 0)
        operator delete(*(void **)(v10 - 24));
      v10 -= 24;
    }
    while (v10 != v9);
LABEL_44:
    v11 = (void *)v31;
LABEL_45:
    *((_QWORD *)&v31 + 1) = v9;
    operator delete(v11);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_22316DD70();
  sub_223B8944C(a1 + 16, (uint64_t)v17);
  sub_223B87C9C((uint64_t)&v18, v17);
  v7 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24EC5FFB8[v7])(&v16, v4);
LABEL_29:
    *(_BYTE *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 192) = -1;
    *(_OWORD *)(a1 + 24) = v19;
    *(_BYTE *)(a1 + 64) = 0;
    if (v22)
    {
      *(_OWORD *)(a1 + 40) = v20;
      *(_QWORD *)(a1 + 56) = v21;
      v21 = 0;
      v20 = 0uLL;
      *(_BYTE *)(a1 + 64) = 1;
    }
    *(_BYTE *)(a1 + 96) = 0;
    *(_OWORD *)(a1 + 72) = v23;
    *(_QWORD *)(a1 + 88) = v24;
    *(_BYTE *)(a1 + 120) = 0;
    if (v27)
    {
      *(_OWORD *)(a1 + 96) = v25;
      *(_QWORD *)(a1 + 112) = v26;
      v26 = 0;
      v25 = 0uLL;
      *(_BYTE *)(a1 + 120) = 1;
    }
    *(_BYTE *)(a1 + 128) = 0;
    *(_BYTE *)(a1 + 152) = 0;
    if (v30)
    {
      *(_OWORD *)(a1 + 128) = v28;
      *(_QWORD *)(a1 + 144) = v29;
      v29 = 0;
      v28 = 0uLL;
      *(_BYTE *)(a1 + 152) = 1;
    }
    *(_BYTE *)(a1 + 160) = 0;
    *(_BYTE *)(a1 + 184) = 0;
    v12 = v33;
    if (v33)
    {
      *(_OWORD *)(a1 + 160) = v31;
      *(_QWORD *)(a1 + 176) = v32;
      v32 = 0;
      v31 = 0uLL;
      *(_BYTE *)(a1 + 184) = 1;
    }
    *(_DWORD *)(a1 + 192) = 0;
    if (!v12)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_223BB47F0(v4, (uint64_t)&v18);
  if (v33)
  {
LABEL_38:
    v9 = v31;
    if (!(_QWORD)v31)
      goto LABEL_46;
    v13 = *((_QWORD *)&v31 + 1);
    v11 = (void *)v31;
    if (*((_QWORD *)&v31 + 1) == (_QWORD)v31)
      goto LABEL_45;
    do
    {
      if (*(char *)(v13 - 1) < 0)
        operator delete(*(void **)(v13 - 24));
      v13 -= 24;
    }
    while (v13 != v9);
    goto LABEL_44;
  }
LABEL_46:
  if (v30 && SHIBYTE(v29) < 0)
    operator delete((void *)v28);
  if (v27 && SHIBYTE(v26) < 0)
    operator delete((void *)v25);
  if (v22 && SHIBYTE(v21) < 0)
    operator delete((void *)v20);
  sub_2231AD66C((uint64_t)v17);
  if (*(_DWORD *)(a1 + 192))
    sub_22316DD70();
LABEL_56:
  v14 = *a2;
  v17[0] = a2[1];
  v15 = v17[0];
  v18 = 6;
  (*(void (**)(_QWORD *, unsigned int *))(v14 + 104))(a2, &v18);
  if (v15 < 1)
  {
    if (v18 < 3)
      sub_223BD7864((uint64_t)&v18, (uint64_t)a2, v4, v18);
    else
      sub_223BD7AD8((uint64_t)a2, v4, v18);
  }
  else
  {
    sub_223BD7174((int *)v17, (uint64_t)a2, v4, v18);
  }
  LODWORD(v17[0]) = 8;
  (*(void (**)(_QWORD *, uint64_t *))(*a2 + 104))(a2, v17);
  sub_223BD8694(a2, a1 + 200, v17[0]);
}

void sub_223BB47A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223BB47F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void **v10;
  __int128 *v11;
  __int128 v12;
  uint64_t v13;
  __int128 *v14;
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a1 + 24;
  v6 = (__int128 *)(a2 + 24);
  if (*(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48))
  {
    if (*(_BYTE *)(a1 + 48))
    {
      if (*(char *)(a1 + 47) < 0)
        operator delete(*(void **)v5);
      v7 = *v6;
      *(_QWORD *)(v5 + 16) = *((_QWORD *)v6 + 2);
      *(_OWORD *)v5 = v7;
      *(_BYTE *)(a2 + 47) = 0;
      *(_BYTE *)(a2 + 24) = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 48))
  {
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)v5);
    *(_BYTE *)(a1 + 48) = 0;
  }
  else
  {
    v8 = *v6;
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_OWORD *)v5 = v8;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)v6 = 0;
    *(_BYTE *)(a1 + 48) = 1;
  }
  v9 = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v9;
  v10 = (void **)(a1 + 80);
  v11 = (__int128 *)(a2 + 80);
  if (*(unsigned __int8 *)(a1 + 104) != *(unsigned __int8 *)(a2 + 104))
  {
    if (!*(_BYTE *)(a1 + 104))
    {
      v17 = *v11;
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_OWORD *)v10 = v17;
      *(_QWORD *)(a2 + 88) = 0;
      *(_QWORD *)(a2 + 96) = 0;
      *(_QWORD *)v11 = 0;
      *(_BYTE *)(a1 + 104) = 1;
      v13 = a1 + 112;
      v14 = (__int128 *)(a2 + 112);
      v15 = *(unsigned __int8 *)(a1 + 136);
      if (v15 == *(unsigned __int8 *)(a2 + 136))
        goto LABEL_22;
LABEL_27:
      if (v15)
      {
        if (*(char *)(a1 + 135) < 0)
          operator delete(*(void **)v13);
        *(_BYTE *)(a1 + 136) = 0;
      }
      else
      {
        v18 = *v14;
        *(_QWORD *)(v13 + 16) = *((_QWORD *)v14 + 2);
        *(_OWORD *)v13 = v18;
        *((_QWORD *)v14 + 1) = 0;
        *((_QWORD *)v14 + 2) = 0;
        *(_QWORD *)v14 = 0;
        *(_BYTE *)(a1 + 136) = 1;
      }
      goto LABEL_32;
    }
    if (*(char *)(a1 + 103) < 0)
      operator delete(*v10);
    *(_BYTE *)(a1 + 104) = 0;
LABEL_21:
    v13 = a1 + 112;
    v14 = (__int128 *)(a2 + 112);
    v15 = *(unsigned __int8 *)(a1 + 136);
    if (v15 == *(unsigned __int8 *)(a2 + 136))
      goto LABEL_22;
    goto LABEL_27;
  }
  if (!*(_BYTE *)(a1 + 104))
    goto LABEL_21;
  if (*(char *)(a1 + 103) < 0)
    operator delete(*v10);
  v12 = *v11;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)v10 = v12;
  *(_BYTE *)(a2 + 103) = 0;
  *(_BYTE *)(a2 + 80) = 0;
  v13 = a1 + 112;
  v14 = (__int128 *)(a2 + 112);
  v15 = *(unsigned __int8 *)(a1 + 136);
  if (v15 != *(unsigned __int8 *)(a2 + 136))
    goto LABEL_27;
LABEL_22:
  if (v15)
  {
    if (*(char *)(a1 + 135) < 0)
      operator delete(*(void **)v13);
    v16 = *v14;
    *(_QWORD *)(v13 + 16) = *((_QWORD *)v14 + 2);
    *(_OWORD *)v13 = v16;
    *(_BYTE *)(a2 + 135) = 0;
    *(_BYTE *)(a2 + 112) = 0;
  }
LABEL_32:
  sub_223BB4A04(a1 + 144, a2 + 144);
  return a1;
}

void sub_223BB4A04(uint64_t a1, uint64_t a2)
{
  void **v4;
  void **v5;
  void **v6;
  void **v7;
  void **v8;
  void **v9;

  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (*(_BYTE *)(a1 + 24))
    {
      v4 = *(void ***)a1;
      if (*(_QWORD *)a1)
      {
        v5 = *(void ***)(a1 + 8);
        v6 = *(void ***)a1;
        if (v5 != v4)
        {
          do
          {
            if (*((char *)v5 - 1) < 0)
              operator delete(*(v5 - 3));
            v5 -= 3;
          }
          while (v5 != v4);
          v6 = *(void ***)a1;
        }
        *(_QWORD *)(a1 + 8) = v4;
        operator delete(v6);
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
      }
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    v7 = *(void ***)a1;
    if (*(_QWORD *)a1)
    {
      v8 = *(void ***)(a1 + 8);
      v9 = *(void ***)a1;
      if (v8 != v7)
      {
        do
        {
          if (*((char *)v8 - 1) < 0)
            operator delete(*(v8 - 3));
          v8 -= 3;
        }
        while (v8 != v7);
        v9 = *(void ***)a1;
      }
      *(_QWORD *)(a1 + 8) = v7;
      operator delete(v9);
    }
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
}

uint64_t sub_223BB4B40(uint64_t a1, uint64_t a2)
{
  int v4;
  char *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *exception;
  char v11;
  unint64_t v12;

  sub_224544628(a1);
  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_2245448E0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v12 = 0;
  sub_22451CAD4(v5, &v12);
  if (HIDWORD(v12))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24EC7AC38;
    __cxa_throw(exception, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
  }
  if (v12 >= 6)
    v6 = 6;
  else
    v6 = v12;
  if (v6 < 3)
    sub_223BB4C3C((uint64_t)&v11, a1, a2, v6);
  else
    sub_223BB4E2C(a1, a2, v6);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 - 8);
  v8 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(a1 + 48) = v7 - 8;
  *(_QWORD *)(a1 + 72) = v8 - 8;
  return a1;
}

void sub_223BB4C3C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  __int128 v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  void *v14;
  char v15;
  char v16;
  void *v17;
  char v18;
  char v19;
  void *__p;
  void **v21;
  char v22;
  char v23[8];
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v24 = 0;
  BYTE8(v24) = 0;
  LOBYTE(v25) = 0;
  v27 = 0;
  sub_223BB5FEC(a2, (uint64_t)v23, a4);
  *(_OWORD *)&v8[8] = v24;
  LOBYTE(v9) = 0;
  v11 = 0;
  if (v27)
  {
    if (SHIBYTE(v26) < 0)
    {
      sub_223197FA4(&v9, (void *)v25, *((unint64_t *)&v25 + 1));
    }
    else
    {
      v9 = v25;
      v10 = v26;
    }
    v11 = 1;
  }
  v12 = 0;
  v13 = 0;
  LOBYTE(v14) = 0;
  v16 = 0;
  LOBYTE(v17) = 0;
  v19 = 0;
  LOBYTE(__p) = 0;
  v22 = 0;
  sub_223BB47F0(a3, (uint64_t)v8);
  if (v22)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v21;
      v7 = __p;
      if (v21 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v21 = v5;
      operator delete(v7);
    }
  }
  if (v19 && v18 < 0)
    operator delete(v17);
  if (v16 && v15 < 0)
    operator delete(v14);
  if (v11 && SHIBYTE(v10) < 0)
    operator delete((void *)v9);
  if (v27)
  {
    if (SHIBYTE(v26) < 0)
      operator delete((void *)v25);
  }
}

void sub_223BB4DE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  uint64_t v18;

  if (a18 && a17 < 0)
    operator delete(__p);
  if (*(_BYTE *)(v18 - 48))
  {
    if (*(char *)(v18 - 49) < 0)
      operator delete(*(void **)(v18 - 72));
  }
  _Unwind_Resume(exception_object);
}

void sub_223BB4E2C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  _QWORD *exception;
  __int128 v19;
  uint64_t v20;

  v6 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "auto_timestamp";
  *(_QWORD *)(a1 + 96) = 14;
  if (!v6)
    *(_BYTE *)(a1 + 104) = 1;
  sub_224544628(a1);
  v7 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v7)
    *(_BYTE *)(a1 + 104) = 1;
  v8 = (char *)sub_2245448E0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)&v19 = 0;
  sub_22451CAD4(v8, &v19);
  if (DWORD1(v19))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24EC7AC38;
    __cxa_throw(exception, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
  }
  if (v19 >= 2)
    v9 = 2;
  else
    v9 = v19;
  sub_223BB530C(a1, a2 + 8, v9);
  v10 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v10 - 8);
  v11 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(a1 + 48) = v10 - 8;
  *(_QWORD *)(a1 + 72) = v11 - 8;
  v12 = a2 + 24;
  LODWORD(v10) = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "name";
  *(_QWORD *)(a1 + 96) = 4;
  if ((_DWORD)v10)
  {
    sub_223BB5654((uint64_t *)a1, v12);
    if (a3 < 4)
      return;
  }
  else
  {
    *(_BYTE *)(a1 + 104) = 1;
    sub_223BB5654((uint64_t *)a1, v12);
    if (a3 < 4)
      return;
  }
  v13 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "custom_timestamp";
  *(_QWORD *)(a1 + 96) = 16;
  if (!v13)
  {
    *(_BYTE *)(a1 + 104) = 1;
    if (*(_BYTE *)sub_2245448E0((uint64_t *)a1))
      goto LABEL_15;
LABEL_17:
    ++*(_QWORD *)(a1 + 112);
    if (*(_BYTE *)(a2 + 72))
      *(_BYTE *)(a2 + 72) = 0;
    goto LABEL_19;
  }
  if (!*(_BYTE *)sub_2245448E0((uint64_t *)a1))
    goto LABEL_17;
LABEL_15:
  *(_QWORD *)&v19 = 0;
  BYTE8(v19) = 0;
  v20 = *(_QWORD *)(a1 + 8);
  sub_223BB5774((int *)&v20, a1, (uint64_t)&v19);
  *(_OWORD *)(a2 + 56) = v19;
  *(_BYTE *)(a2 + 72) = 1;
LABEL_19:
  if (a3 == 5)
  {
    v14 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "space";
    *(_QWORD *)(a1 + 96) = 5;
    if (!v14)
      *(_BYTE *)(a1 + 104) = 1;
    sub_223BB5654((uint64_t *)a1, a2 + 80);
  }
  else if (a3 >= 6)
  {
    v15 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "space";
    *(_QWORD *)(a1 + 96) = 5;
    if (!v15)
      *(_BYTE *)(a1 + 104) = 1;
    sub_223BB5654((uint64_t *)a1, a2 + 80);
    v16 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "instance_id";
    *(_QWORD *)(a1 + 96) = 11;
    if (!v16)
      *(_BYTE *)(a1 + 104) = 1;
    sub_223BB5654((uint64_t *)a1, a2 + 112);
    v17 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "references";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v17)
      *(_BYTE *)(a1 + 104) = 1;
    sub_223BB5E90((uint64_t *)a1, a2 + 144);
  }
}

void sub_223BB50EC(char *a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v3;
  size_t v4;
  char *v5;
  _BYTE *v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  int v12;
  unint64_t v13;
  __int128 v14;
  unint64_t v15;
  __int128 v16;
  char *v17;
  int v18;
  std::string v19;

  v3 = a1[23] < 0;
  if (a1[23] >= 0)
    v4 = a1[23];
  else
    v4 = *((_QWORD *)a1 + 1);
  if (a1[23] >= 0)
    v5 = a1;
  else
    v5 = *(char **)a1;
  if (!v4 || ((v7 = memchr(v5, 92, v4)) != 0 ? (v8 = v7 - v5 == -1) : (v8 = 1), v8))
  {
    sub_2231AD150(v5, v4, ";", 1, 1, a2);
    return;
  }
  v9 = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  memset(&v19, 0, sizeof(v19));
  do
  {
    v11 = *(char **)a1;
    if (!v3)
      v11 = a1;
    v12 = v11[v9];
    if (v12 == 59)
    {
      v13 = *(_QWORD *)(a2 + 8);
      if (v13 >= *(_QWORD *)(a2 + 16))
      {
        *(_QWORD *)(a2 + 8) = sub_22323C290((char **)a2, (uint64_t)&v19);
        if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_27;
      }
      else
      {
        if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
        {
          sub_223197FA4(*(_BYTE **)(a2 + 8), v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
        }
        else
        {
          v14 = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
          *(_QWORD *)(v13 + 16) = *((_QWORD *)&v19.__r_.__value_.__l + 2);
          *(_OWORD *)v13 = v14;
        }
        *(_QWORD *)(a2 + 8) = v13 + 24;
        *(_QWORD *)(a2 + 8) = v13 + 24;
        if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_27:
          *((_BYTE *)&v19.__r_.__value_.__s + 23) = 0;
          v19.__r_.__value_.__s.__data_[0] = 0;
          goto LABEL_17;
        }
      }
      v19.__r_.__value_.__l.__size_ = 0;
      *v19.__r_.__value_.__l.__data_ = 0;
    }
    else
    {
      if (v12 == 92)
        ++v9;
      std::string::push_back(&v19, v11[v9]);
    }
LABEL_17:
    ++v9;
    v3 = a1[23] < 0;
    v10 = a1[23];
    if ((v10 & 0x80u) != 0)
      v10 = *((_QWORD *)a1 + 1);
  }
  while (v9 < v10);
  v15 = *(_QWORD *)(a2 + 8);
  if (v15 >= *(_QWORD *)(a2 + 16))
  {
    v17 = sub_22319BED8((void **)a2, (uint64_t)&v19);
    v18 = SHIBYTE(v19.__r_.__value_.__r.__words[2]);
    *(_QWORD *)(a2 + 8) = v17;
    if (v18 < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
  }
  else
  {
    v16 = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
    *(_QWORD *)(v15 + 16) = *((_QWORD *)&v19.__r_.__value_.__l + 2);
    *(_OWORD *)v15 = v16;
    *(_QWORD *)(a2 + 8) = v15 + 24;
  }
}

void sub_223BB52D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void **v15;

  if (a15 < 0)
    operator delete(__p);
  sub_22319BB48(v15);
  _Unwind_Resume(a1);
}

void sub_223BB530C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v5;
  char *v6;
  char *v7;
  int v8;
  int v9;
  char *v10;
  int v11;
  char v12;
  char *v13;
  char v14;
  char *v15;

  if (a3 < 2)
  {
    v14 = 0;
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "ns";
    *(_QWORD *)(a1 + 96) = 2;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v10 = (char *)sub_2245448E0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v15 = 0;
    sub_22451CC1C(v10, &v15);
    v13 = v15;
    v11 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "clock_type";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v11)
      *(_BYTE *)(a1 + 104) = 1;
    v15 = &v14;
    sub_223BB5464((uint64_t *)a1, &v15);
    v12 = v14;
    *(_QWORD *)a2 = v13;
    *(_BYTE *)(a2 + 8) = v12;
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "ns";
    *(_QWORD *)(a1 + 96) = 2;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = (char *)sub_2245448E0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v13 = 0;
    sub_22451CC1C(v6, &v13);
    *(_QWORD *)a2 = v13;
    v7 = (char *)(a2 + 8);
    v8 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "clock_type";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v8)
      *(_BYTE *)(a1 + 104) = 1;
    v13 = v7;
    sub_223BB5464((uint64_t *)a1, &v13);
  }
}

void sub_223BB5464(uint64_t *a1, _BYTE **a2)
{
  void **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;

  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v4 = (void **)sub_2245448E0(a1);
  ++a1[14];
  v18 = 0;
  v17 = 0uLL;
  sub_22451CFD4(v4, (uint64_t)&v17);
  v15 = v18;
  *(_OWORD *)__p = v17;
  v5 = SHIBYTE(v18);
  v6 = (char *)v17;
  v7 = operator new();
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_22456E918(v7, v9);
  *(_QWORD *)&v17 = v8;
  v16 = 0;
  sub_224504EE8((uint64_t *)v8, &v16);
  v10 = v16;
  v11 = MEMORY[0x24BEDB7F0];
  v12 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)(v8 + *(_QWORD *)(v12 - 24)) = *(_QWORD *)(v11 + 64);
  *(_QWORD *)(v8 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v8 + 16) = v13;
  if (*(char *)(v8 + 111) < 0)
    operator delete(*(void **)(v8 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x227684BE0](v8 + 128);
  MEMORY[0x227684CE8](v8, 0x10B2C40EED050F3);
  **a2 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_223BB55C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_22456E764((uint64_t *)&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223BB5654(uint64_t *a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[3];

  v10[2] = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)sub_2245448E0(a1))
  {
    v4 = (void **)sub_2245448E0(a1);
    ++a1[14];
    v9 = 0uLL;
    v8 = 0;
    sub_22451CFD4(v4, (uint64_t)&v8);
    v5 = v8;
    v10[0] = v9;
    *(_QWORD *)((char *)v10 + 7) = *(_QWORD *)((char *)&v9 + 7);
    v6 = HIBYTE(v9);
    if (*(_BYTE *)(a2 + 24))
    {
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      *(_BYTE *)(a2 + 24) = 0;
    }
    v7 = v10[0];
    *(_QWORD *)a2 = v5;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v10 + 7);
    *(_BYTE *)(a2 + 23) = v6;
    *(_BYTE *)(a2 + 24) = 1;
  }
  else
  {
    ++a1[14];
    if (*(_BYTE *)(a2 + 24))
    {
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      *(_BYTE *)(a2 + 24) = 0;
    }
  }
}

void sub_223BB5758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223BB5774(int *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  char *v7;
  unsigned int v8;
  int v9;
  char *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *exception;
  __int128 *v15;
  unint64_t v16;

  sub_224544628(a2);
  v6 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v6)
    *(_BYTE *)(a2 + 104) = 1;
  v7 = (char *)sub_2245448E0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v16 = 0;
  sub_22451CAD4(v7, &v16);
  v8 = v16;
  if (HIDWORD(v16))
    goto LABEL_14;
  if (*a1 < 1)
    goto LABEL_13;
  if (v16 >= 2 && *a1 == 2)
  {
    v9 = *(unsigned __int8 *)(a2 + 104);
    *(_QWORD *)(a2 + 88) = "min_version";
    *(_QWORD *)(a2 + 96) = 11;
    if (!v9)
      *(_BYTE *)(a2 + 104) = 1;
    v10 = (char *)sub_2245448E0((uint64_t *)a2);
    ++*(_QWORD *)(a2 + 112);
    v16 = 0;
    sub_22451CAD4(v10, &v16);
    v11 = v16;
    if (!HIDWORD(v16))
    {
      if (v16 >= 3)
      {
        v15 = sub_223BB58E4();
        sub_22455C3A8((std::string *)v15, v11, 2u);
      }
      goto LABEL_11;
    }
LABEL_14:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24EC7AC38;
    __cxa_throw(exception, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
  }
LABEL_11:
  if (v8 >= 2)
    v8 = 2;
LABEL_13:
  sub_223BB5AE0(a2, a3, v8);
  v12 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v12 - 8);
  v13 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(a2 + 48) = v12 - 8;
  *(_QWORD *)(a2 + 72) = v13 - 8;
}

__int128 *sub_223BB58E4()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578E9F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578E9F8))
    return &xmmword_25578E9E0;
  v2 = (char *)sub_223BB59C0();
  if (v2[23] < 0)
  {
    sub_223197FA4(&xmmword_25578E9E0, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_25578E9F0 = *((_QWORD *)v2 + 2);
    xmmword_25578E9E0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578E9E0, &dword_22314D000);
  __cxa_guard_release(&qword_25578E9F8);
  return &xmmword_25578E9E0;
}

void sub_223BB59A8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578E9F8);
  _Unwind_Resume(a1);
}

void *sub_223BB59C0()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_25578EA18);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578EA18))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::timeio::TimestampSample]", qword_25578EA00);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578EA00, &dword_22314D000);
    __cxa_guard_release(&qword_25578EA18);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_25578EA38);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_25578EA38))
    return &unk_25578EA20;
  sub_224573040((uint64_t)qword_25578EA00, (uint64_t)&unk_25578EA20);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_25578EA20, &dword_22314D000);
  __cxa_guard_release(&qword_25578EA38);
  return &unk_25578EA20;
}

void sub_223BB5AB0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578EA38);
  _Unwind_Resume(a1);
}

void sub_223BB5AC8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578EA18);
  _Unwind_Resume(a1);
}

void sub_223BB5AE0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v5;
  char *v6;
  char *v7;
  int v8;
  int v9;
  char *v10;
  int v11;
  char v12;
  char *v13;
  char v14;
  char *v15;

  if (a3 < 2)
  {
    v14 = 0;
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "ns";
    *(_QWORD *)(a1 + 96) = 2;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v10 = (char *)sub_2245448E0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v15 = 0;
    sub_22451CC1C(v10, &v15);
    v13 = v15;
    v11 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "clock_type";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v11)
      *(_BYTE *)(a1 + 104) = 1;
    v15 = &v14;
    sub_223BB5C38(a1, &v15);
    v12 = v14;
    *(_QWORD *)a2 = v13;
    *(_BYTE *)(a2 + 8) = v12;
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "ns";
    *(_QWORD *)(a1 + 96) = 2;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = (char *)sub_2245448E0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v13 = 0;
    sub_22451CC1C(v6, &v13);
    *(_QWORD *)a2 = v13;
    v7 = (char *)(a2 + 8);
    v8 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "clock_type";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v8)
      *(_BYTE *)(a1 + 104) = 1;
    v13 = v7;
    sub_223BB5C38(a1, &v13);
  }
}

void sub_223BB5C38(uint64_t a1, _BYTE **a2)
{
  char *v4;
  void **v5;
  int v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *exception;
  void *__p[2];
  uint64_t v17;
  char v18;
  __int128 v19;
  uint64_t v20;

  if ((*(_BYTE *)(a1 + 12) & 2) != 0)
  {
    __p[0] = 0;
    __p[1] = 0;
    v17 = 0;
    v5 = (void **)sub_2245448E0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v20 = 0;
    v19 = 0uLL;
    sub_22451CFD4(v5, (uint64_t)&v19);
    v17 = v20;
    *(_OWORD *)__p = v19;
    v6 = SHIBYTE(v20);
    v7 = (char *)v19;
    v8 = operator new();
    v9 = v8;
    if (v6 >= 0)
      v10 = (char *)__p;
    else
      v10 = v7;
    sub_22456E918(v8, v10);
    *(_QWORD *)&v19 = v9;
    v18 = 0;
    sub_224504EE8((uint64_t *)v9, &v18);
    v11 = v18;
    v12 = MEMORY[0x24BEDB7F0];
    v13 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v9 = *MEMORY[0x24BEDB7F0];
    v14 = *(_QWORD *)(v12 + 72);
    *(_QWORD *)(v9 + *(_QWORD *)(v13 - 24)) = *(_QWORD *)(v12 + 64);
    *(_QWORD *)(v9 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v9 + 16) = v14;
    if (*(char *)(v9 + 111) < 0)
      operator delete(*(void **)(v9 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v9 + 128);
    MEMORY[0x227684CE8](v9, 0x10B2C40EED050F3);
    **a2 = v11;
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
  }
  else
  {
    v4 = (char *)sub_2245448E0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    *(_QWORD *)&v19 = 0;
    sub_22451CAD4(v4, &v19);
    if ((unint64_t)v19 >= 0x100)
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = &off_24EC7AC38;
      __cxa_throw(exception, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
    }
    **a2 = v19;
  }
}

void sub_223BB5E04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_22456E764((uint64_t *)&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223BB5E90(uint64_t *a1, uint64_t a2)
{
  unsigned __int8 *v4;
  void **v5;
  void **v6;
  void **v7;
  void **v8;
  void **v9;
  void **v10;
  __int128 v11;
  uint64_t v12;
  char v13;

  if (*(_BYTE *)sub_2245448E0(a1))
  {
    v11 = 0uLL;
    v12 = 0;
    v13 = 0;
    v4 = (unsigned __int8 *)sub_2245448E0(a1);
    ++a1[14];
    sub_224546428((uint64_t)&v13, v4, (void **)&v11);
    if (*(_BYTE *)(a2 + 24))
    {
      v5 = *(void ***)a2;
      if (*(_QWORD *)a2)
      {
        v6 = *(void ***)(a2 + 8);
        v7 = *(void ***)a2;
        if (v6 != v5)
        {
          do
          {
            if (*((char *)v6 - 1) < 0)
              operator delete(*(v6 - 3));
            v6 -= 3;
          }
          while (v6 != v5);
          v7 = *(void ***)a2;
        }
        *(_QWORD *)(a2 + 8) = v5;
        operator delete(v7);
      }
    }
    *(_OWORD *)a2 = v11;
    *(_QWORD *)(a2 + 16) = v12;
    *(_BYTE *)(a2 + 24) = 1;
  }
  else
  {
    ++a1[14];
    if (*(_BYTE *)(a2 + 24))
    {
      v8 = *(void ***)a2;
      if (*(_QWORD *)a2)
      {
        v9 = *(void ***)(a2 + 8);
        v10 = *(void ***)a2;
        if (v9 != v8)
        {
          do
          {
            if (*((char *)v9 - 1) < 0)
              operator delete(*(v9 - 3));
            v9 -= 3;
          }
          while (v9 != v8);
          v10 = *(void ***)a2;
        }
        *(_QWORD *)(a2 + 8) = v8;
        operator delete(v10);
      }
      *(_BYTE *)(a2 + 24) = 0;
    }
  }
}

void sub_223BB5FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_22319BB48(&a9);
  _Unwind_Resume(a1);
}

void sub_223BB5FEC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *exception;
  unint64_t v14;

  v6 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "auto_timestamp";
  *(_QWORD *)(a1 + 96) = 14;
  if (!v6)
    *(_BYTE *)(a1 + 104) = 1;
  sub_224544628(a1);
  v7 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v7)
    *(_BYTE *)(a1 + 104) = 1;
  v8 = (char *)sub_2245448E0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v14 = 0;
  sub_22451CAD4(v8, &v14);
  if (HIDWORD(v14))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24EC7AC38;
    __cxa_throw(exception, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
  }
  if (v14 >= 2)
    v9 = 2;
  else
    v9 = v14;
  sub_223BB530C(a1, a2 + 8, v9);
  v10 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v10 - 8);
  v11 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(a1 + 48) = v10 - 8;
  *(_QWORD *)(a1 + 72) = v11 - 8;
  if (a3 >= 2)
  {
    v12 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "name";
    *(_QWORD *)(a1 + 96) = 4;
    if (!v12)
      *(_BYTE *)(a1 + 104) = 1;
    sub_223BB5654((uint64_t *)a1, a2 + 24);
  }
}

void sub_223BB6128(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4;
  char *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  void *v15;
  __int16 v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  char *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  void *v37;
  __int16 v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  char *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  void *v59;
  __int16 v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  char v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  int v84;
  char *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  char *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  int v110;
  uint64_t v111;
  void *v112;
  __int16 v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  char *v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  char *v146;
  unsigned int v147;
  uint64_t *v148;
  char *v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  int v153;
  uint64_t v154;
  void *v155;
  __int16 v156;
  unint64_t v157;
  unint64_t v158;
  void **v159;
  void *v160;
  void *v161;
  char *v162;
  char *v163;
  char *v164;
  unint64_t *v165;
  unint64_t v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  int v177;
  char *v178;
  unsigned int v179;
  std::__shared_weak_count *v180;
  int v181;
  unsigned __int8 *v182;
  unsigned __int8 *v183;
  int v184;
  uint64_t v185;
  __int128 v186;
  unint64_t *v187;
  unint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  __int128 v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  __int128 v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  char *v209;
  int v210;
  char v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  char *v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  int v223;
  char *v224;
  unsigned int v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  unsigned int v229;
  int v230;
  char **v231;
  unsigned __int8 *v232;
  int v233;
  unint64_t v234;
  char *v235;
  char *v236;
  unint64_t v237;
  char v238;
  char *v239;
  char *v240;
  int v241;
  char *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  char *v248;
  char *v249;
  char *v250;
  char *v251;
  char *v252;
  char *v253;
  void *v254;
  char *v255;
  char *v256;
  void *v257;
  char *v258;
  uint64_t v259;
  int v260;
  char *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  void *v266;
  uint64_t v267;
  void *v268;
  void *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  void *v273;
  uint64_t v274;
  void *v275;
  void *v276;
  char *v277;
  unint64_t v278;
  unint64_t v279;
  float *v280;
  float v281;
  uint64_t v282;
  unint64_t v283;
  unint64_t v284;
  unint64_t v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  uint64_t *v290;
  unsigned __int8 *v291;
  int v292;
  unint64_t v293;
  uint64_t *v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t v298;
  uint64_t v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  uint64_t v304;
  uint64_t v305;
  int v306;
  char *v307;
  char *v308;
  unint64_t v309;
  int v310;
  char *v311;
  uint64_t v312;
  uint64_t v313;
  unint64_t v314;
  unint64_t v315;
  float *v316;
  float v317;
  uint64_t v318;
  unint64_t v319;
  unint64_t v320;
  unint64_t v321;
  void *v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  void *v326;
  void *v327;
  uint64_t v328;
  uint64_t v329;
  int v330;
  char *v331;
  char *v332;
  uint64_t v333;
  uint64_t v334;
  char *v335;
  _QWORD *v336;
  _QWORD *v337;
  _QWORD *v338;
  _QWORD *exception;
  _QWORD *v340;
  _QWORD *v341;
  _QWORD *v342;
  _QWORD *v343;
  _QWORD *v344;
  _QWORD *v345;
  _QWORD *v346;
  _QWORD *v347;
  _QWORD *v348;
  _QWORD *v349;
  _QWORD *v350;
  _QWORD *v351;
  _QWORD *v352;
  _QWORD *v353;
  _BYTE v356[16];
  std::__shared_weak_count *v357;
  void *v358[2];
  std::__shared_weak_count *v359;
  void *v360;
  uint64_t v361;
  int v362;
  __int16 v363;
  char v364;
  void *v365;
  char *v366;
  std::__shared_weak_count *v367;
  uint64_t v368;
  int v369;
  void *v370;
  int v371;
  __int16 v372;
  __int128 v373;
  std::__shared_weak_count *v374;
  char v375;
  __int128 *v376;
  __int128 v377;
  void *v378[2];
  __int128 v379;
  void *v380[2];
  int v381;
  void *v382;
  void *v383;
  void *v384;
  void *v385;
  void *v386;
  void *v387;
  void *v388;
  void *v389;
  void *v390;
  void *v391;
  char v392;
  __int128 v393[2];
  __int128 v394;
  void *v395[2];
  void *v396[2];
  __int128 v397;
  void *v398[2];
  __int128 v399;
  uint64_t v400;
  void *v401;
  void *v402;
  int v403;
  void *__p;
  void *v405;
  char v406;
  char v407[64];
  int v408;
  uint64_t v409;

  v409 = *MEMORY[0x24BDAC8D0];
  sub_224544628(a1);
  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_2245448E0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)&v393[0] = 0;
  sub_22451CAD4(v5, v393);
  v6 = v393[0];
  if (HIDWORD(*(_QWORD *)&v393[0]))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24EC7AC38;
    __cxa_throw(exception, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
  }
  v7 = a2;
  v8 = LODWORD(v393[0]) - 2;
  if (LODWORD(v393[0]) <= 2)
  {
    LOBYTE(v377) = 0;
    LOBYTE(v380[1]) = 0;
    sub_223BB96E0((uint64_t *)a1, (uint64_t)&v377);
    if (LOBYTE(v380[1]))
    {
      v365 = &off_24EC1F8C8;
      v9 = (char *)*((_QWORD *)&v377 + 1);
      v10 = (std::__shared_weak_count *)v378[0];
      if (v378[0])
      {
        v11 = (unint64_t *)((char *)v378[0] + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
        v13 = HIDWORD(v379);
        v15 = v378[1];
        v14 = v379;
        v16 = (__int16)v380[0];
        do
          v17 = __ldxr(v11);
        while (__stxr(v17 + 1, v11));
        do
          v18 = __ldxr(v11);
        while (__stxr(v18 + 1, v11));
      }
      else
      {
        v13 = HIDWORD(v379);
        v15 = v378[1];
        v14 = v379;
        v16 = (__int16)v380[0];
      }
      v366 = v9;
      v367 = v10;
      v368 = v14;
      v369 = 4 * v13;
      v370 = v15;
      v371 = 4;
      v372 = v16;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        v7 = a2;
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      BYTE8(v393[0]) = 0;
      BYTE8(v393[1]) = 0;
      LOBYTE(v394) = 0;
      LOBYTE(v395[0]) = 0;
      LOBYTE(v395[1]) = 1;
      LODWORD(v396[0]) = 0;
      sub_22432B21C((uint64_t)&v365, 3u, (uint64_t)&v373);
      sub_2232C1348(a2 + 8, (uint64_t)&v373);
      v22 = v374;
      if (v374)
      {
        v23 = (unint64_t *)&v374->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      v25 = v367;
      if (v367)
      {
        v26 = (unint64_t *)&v367->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      if (LOBYTE(v380[1]))
      {
        *(_QWORD *)&v377 = &off_24EC27198;
        v28 = (std::__shared_weak_count *)v378[0];
        if (v378[0])
        {
          v29 = (unint64_t *)((char *)v378[0] + 8);
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
      }
    }
  }
  else
  {
    sub_223BB953C((uint64_t *)a1, a2 + 8);
    v7 = a2;
    if (v6 >= 5)
    {
      sub_223BB953C((uint64_t *)a1, a2 + 72);
      v7 = a2;
      goto LABEL_82;
    }
  }
  LOBYTE(v377) = 0;
  LOBYTE(v380[1]) = 0;
  sub_223BB96E0((uint64_t *)a1, (uint64_t)&v377);
  if (LOBYTE(v380[1]))
  {
    v365 = &off_24EC1F8C8;
    v31 = (char *)*((_QWORD *)&v377 + 1);
    v32 = (std::__shared_weak_count *)v378[0];
    if (v378[0])
    {
      v33 = (unint64_t *)((char *)v378[0] + 8);
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
      v35 = HIDWORD(v379);
      v37 = v378[1];
      v36 = v379;
      v38 = (__int16)v380[0];
      do
        v39 = __ldxr(v33);
      while (__stxr(v39 + 1, v33));
      do
        v40 = __ldxr(v33);
      while (__stxr(v40 + 1, v33));
    }
    else
    {
      v35 = HIDWORD(v379);
      v37 = v378[1];
      v36 = v379;
      v38 = (__int16)v380[0];
    }
    v366 = v31;
    v367 = v32;
    v368 = v36;
    v369 = 4 * v35;
    v370 = v37;
    v371 = 4;
    v372 = v38;
    if (v32)
    {
      v41 = (unint64_t *)&v32->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
      do
        v43 = __ldaxr(v41);
      while (__stlxr(v43 - 1, v41));
      v7 = a2;
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    BYTE8(v393[0]) = 0;
    BYTE8(v393[1]) = 0;
    LOBYTE(v394) = 0;
    LOBYTE(v395[0]) = 0;
    LOBYTE(v395[1]) = 1;
    LODWORD(v396[0]) = 0;
    sub_22432B21C((uint64_t)&v365, 3u, (uint64_t)&v373);
    sub_2232C1348(v7 + 72, (uint64_t)&v373);
    v44 = v374;
    if (v374)
    {
      v45 = (unint64_t *)&v374->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    v47 = v367;
    if (!v367)
      goto LABEL_66;
    v48 = (unint64_t *)&v367->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
      if (!LOBYTE(v380[1]))
        goto LABEL_81;
    }
    else
    {
LABEL_66:
      if (!LOBYTE(v380[1]))
        goto LABEL_81;
    }
    *(_QWORD *)&v377 = &off_24EC27198;
    v50 = (std::__shared_weak_count *)v378[0];
    if (v378[0])
    {
      v51 = (unint64_t *)((char *)v378[0] + 8);
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
        if (v6 < 4)
          goto LABEL_72;
LABEL_82:
        LOBYTE(v393[0]) = 0;
        LOBYTE(v398[1]) = 0;
        sub_223BB9884((uint64_t *)a1, (uint64_t)v393);
        v63 = LOBYTE(v398[1]);
        if (LOBYTE(v398[1]))
        {
          sub_22416C400((uint64_t)v393, (uint64_t)v356);
          *(_QWORD *)&v377 = &off_24EC28F30;
          sub_2232C2C00((uint64_t)v356, (uint64_t *)&v377 + 1);
          v64 = 1;
        }
        else
        {
          v64 = 0;
          LOBYTE(v377) = 0;
        }
        LOBYTE(v383) = v64;
        sub_2232C33D4(v7 + 136, (uint64_t)&v377);
        if (!(_BYTE)v383)
          goto LABEL_90;
        *(_QWORD *)&v377 = &off_24EC28F30;
        v65 = (std::__shared_weak_count *)v378[0];
        if (!v378[0])
          goto LABEL_90;
        v66 = (unint64_t *)((char *)v378[0] + 8);
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
          if (!v63)
            goto LABEL_95;
        }
        else
        {
LABEL_90:
          if (!v63)
            goto LABEL_95;
        }
        v68 = v357;
        if (v357)
        {
          v69 = (unint64_t *)&v357->__shared_owners_;
          do
            v70 = __ldaxr(v69);
          while (__stlxr(v70 - 1, v69));
          if (!v70)
          {
            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
            std::__shared_weak_count::__release_weak(v68);
            if (!LOBYTE(v398[1]))
              goto LABEL_127;
            goto LABEL_96;
          }
        }
LABEL_95:
        if (!LOBYTE(v398[1]))
          goto LABEL_127;
LABEL_96:
        if (LODWORD(v398[0]) != -1)
          ((void (*)(__int128 *, __int128 *))off_24EC5FFD0[LODWORD(v398[0])])(&v377, &v394);
        goto LABEL_127;
      }
    }
  }
LABEL_81:
  if (v6 >= 4)
    goto LABEL_82;
LABEL_72:
  LOBYTE(v393[0]) = 0;
  LOBYTE(v397) = 0;
  sub_223BB91F4((uint64_t *)a1, (uint64_t)v393);
  if ((_BYTE)v397)
  {
    v365 = &off_24EC1F8C8;
    v53 = (char *)*((_QWORD *)&v393[0] + 1);
    v54 = *(std::__shared_weak_count **)&v393[1];
    if (*(_QWORD *)&v393[1])
    {
      v55 = (unint64_t *)(*(_QWORD *)&v393[1] + 8);
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
      v57 = *(_QWORD *)((char *)&v394 + 4);
      v58 = HIDWORD(v395[0]);
      v59 = (void *)*((_QWORD *)&v393[1] + 1);
      v60 = (__int16)v396[1];
      do
        v61 = __ldxr(v55);
      while (__stxr(v61 + 1, v55));
      do
        v62 = __ldxr(v55);
      while (__stxr(v62 + 1, v55));
    }
    else
    {
      v57 = *(_QWORD *)((char *)&v394 + 4);
      v58 = HIDWORD(v395[0]);
      v59 = (void *)*((_QWORD *)&v393[1] + 1);
      v60 = (__int16)v396[1];
    }
    v366 = v53;
    v367 = v54;
    v368 = v57;
    v369 = 4 * v58;
    v370 = v59;
    v371 = 32;
    v372 = v60;
    if (v54)
    {
      v71 = (unint64_t *)&v54->__shared_owners_;
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
      do
        v73 = __ldaxr(v71);
      while (__stlxr(v73 - 1, v71));
      v7 = a2;
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    BYTE8(v377) = 0;
    LOBYTE(v378[1]) = 0;
    LOBYTE(v379) = 0;
    LOBYTE(v380[0]) = 0;
    LOBYTE(v380[1]) = 1;
    v381 = 0;
    sub_22432B21C((uint64_t)&v365, 0x1Fu, (uint64_t)&v373);
    sub_2232C1620(v7 + 136, (uint64_t)&v373);
    v74 = v374;
    if (v374)
    {
      v75 = (unint64_t *)&v374->__shared_owners_;
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
    }
    v77 = v367;
    if (v367)
    {
      v78 = (unint64_t *)&v367->__shared_owners_;
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
    if ((_BYTE)v397)
    {
      *(_QWORD *)&v393[0] = &off_24EC26EB0;
      v80 = *(std::__shared_weak_count **)&v393[1];
      if (*(_QWORD *)&v393[1])
      {
        v81 = (unint64_t *)(*(_QWORD *)&v393[1] + 8);
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
    }
  }
LABEL_127:
  v83 = a2 + 224;
  if (!*(_BYTE *)sub_2245448E0((uint64_t *)a1))
  {
    ++*(_QWORD *)(a1 + 112);
    sub_2232C39E0(v83);
    if (v8 > 3)
      goto LABEL_218;
    goto LABEL_211;
  }
  sub_2232C3AB8((uint64_t)v393);
  sub_224544628(a1);
  v84 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v84)
    *(_BYTE *)(a1 + 104) = 1;
  v85 = (char *)sub_2245448E0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)&v377 = 0;
  sub_22451CAD4(v85, &v377);
  if (DWORD1(v377))
  {
    v345 = __cxa_allocate_exception(8uLL);
    *v345 = &off_24EC7AC38;
    __cxa_throw(v345, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
  }
  if ((v377 & 0xFFFFFFFE) == 0)
  {
    LOBYTE(v358[0]) = 0;
    v364 = 0;
    *(_QWORD *)&v373 = &off_24EC1F958;
    sub_2231B3FDC((uint64_t)&v373 + 8);
    sub_22416BD7C((uint64_t)&v377, (uint64_t)&v373, 0);
    v96 = v374;
    if (v374)
    {
      v97 = (unint64_t *)&v374->__shared_owners_;
      do
        v98 = __ldaxr(v97);
      while (__stlxr(v98 - 1, v97));
      if (!v98)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
    LODWORD(v378[1]) = 0;
    *(_QWORD *)&v373 = *(_QWORD *)(a1 + 8);
    sub_223BB9B10((int *)&v373, a1, (unsigned __int16 *)&v377);
    sub_22416C400((uint64_t)&v377, (uint64_t)&v365);
    *(_QWORD *)&v373 = &off_24EC28BC8;
    sub_2232C1E78((uint64_t)&v365, (uint64_t *)&v373 + 1);
    v375 = 1;
    sub_2232C264C((uint64_t)v358, (uint64_t)&v373);
    if (v375)
    {
      *(_QWORD *)&v373 = &off_24EC28BC8;
      v99 = v374;
      if (v374)
      {
        v100 = (unint64_t *)&v374->__shared_owners_;
        do
          v101 = __ldaxr(v100);
        while (__stlxr(v101 - 1, v100));
        if (!v101)
        {
          ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
          std::__shared_weak_count::__release_weak(v99);
        }
      }
    }
    v102 = v367;
    if (!v367)
      goto LABEL_165;
    v103 = (unint64_t *)&v367->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
      v105 = v384;
      if ((_DWORD)v384 == -1)
        goto LABEL_167;
    }
    else
    {
LABEL_165:
      v105 = v384;
      if ((_DWORD)v384 == -1)
      {
LABEL_167:
        v365 = &off_24EC1F8C8;
        v106 = (char *)v358[1];
        v107 = v359;
        if (v359)
        {
          v108 = (unint64_t *)&v359->__shared_owners_;
          do
            v109 = __ldxr(v108);
          while (__stxr(v109 + 1, v108));
          v110 = v362;
          v112 = v360;
          v111 = v361;
          v113 = v363;
          do
            v114 = __ldxr(v108);
          while (__stxr(v114 + 1, v108));
          do
            v115 = __ldxr(v108);
          while (__stxr(v115 + 1, v108));
        }
        else
        {
          v110 = v362;
          v112 = v360;
          v111 = v361;
          v113 = v363;
        }
        v366 = v106;
        v367 = v107;
        v368 = v111;
        v369 = 4 * v110;
        v370 = v112;
        v371 = 4;
        v372 = v113;
        if (v107)
        {
          v116 = (unint64_t *)&v107->__shared_owners_;
          do
            v117 = __ldaxr(v116);
          while (__stlxr(v117 - 1, v116));
          if (!v117)
          {
            ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
            std::__shared_weak_count::__release_weak(v107);
          }
          do
            v118 = __ldaxr(v116);
          while (__stlxr(v118 - 1, v116));
          if (!v118)
          {
            ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
            std::__shared_weak_count::__release_weak(v107);
          }
        }
        BYTE8(v377) = 0;
        LOBYTE(v378[1]) = 0;
        LOBYTE(v379) = 0;
        LOBYTE(v380[0]) = 0;
        LOBYTE(v380[1]) = 1;
        v381 = 0;
        sub_22432B21C((uint64_t)&v365, 3u, (uint64_t)&v373);
        sub_2232C1348((uint64_t)v393, (uint64_t)&v373);
        v119 = v374;
        if (v374)
        {
          v120 = (unint64_t *)&v374->__shared_owners_;
          do
            v121 = __ldaxr(v120);
          while (__stlxr(v121 - 1, v120));
          if (!v121)
          {
            ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
            std::__shared_weak_count::__release_weak(v119);
          }
        }
        v122 = v367;
        if (v367)
        {
          v123 = (unint64_t *)&v367->__shared_owners_;
          do
            v124 = __ldaxr(v123);
          while (__stlxr(v124 - 1, v123));
          if (!v124)
          {
            ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
            std::__shared_weak_count::__release_weak(v122);
          }
        }
        if (v364)
        {
          v358[0] = &off_24EC27198;
          v125 = v359;
          if (v359)
          {
            v126 = (unint64_t *)&v359->__shared_owners_;
            do
              v127 = __ldaxr(v126);
            while (__stlxr(v127 - 1, v126));
            if (!v127)
            {
              ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
              std::__shared_weak_count::__release_weak(v125);
            }
          }
        }
        goto LABEL_201;
      }
    }
    ((void (*)(__int128 *, __int128 *))off_24EC5FFD0[v105])(&v373, &v379);
    goto LABEL_167;
  }
  *(_QWORD *)&v373 = &off_24EC1F958;
  sub_2231B3FDC((uint64_t)&v373 + 8);
  sub_22416BD7C((uint64_t)&v377, (uint64_t)&v373, 0);
  v86 = v374;
  if (v374)
  {
    v87 = (unint64_t *)&v374->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  LODWORD(v378[1]) = 0;
  *(_QWORD *)&v373 = *(_QWORD *)(a1 + 8);
  sub_223BB9B10((int *)&v373, a1, (unsigned __int16 *)&v377);
  sub_22416C400((uint64_t)&v377, (uint64_t)&v365);
  *(_QWORD *)&v373 = &off_24EC21040;
  sub_2232C1A28((uint64_t)&v365, (uint64_t *)&v373 + 1);
  v375 = 1;
  sub_2232C1C50((uint64_t)v393, (uint64_t)&v373);
  if (!v375)
    goto LABEL_142;
  *(_QWORD *)&v373 = &off_24EC21040;
  v89 = v374;
  if (!v374)
    goto LABEL_142;
  v90 = (unint64_t *)&v374->__shared_owners_;
  do
    v91 = __ldaxr(v90);
  while (__stlxr(v91 - 1, v90));
  if (!v91)
  {
    ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
    std::__shared_weak_count::__release_weak(v89);
    v92 = v367;
    if (!v367)
      goto LABEL_146;
  }
  else
  {
LABEL_142:
    v92 = v367;
    if (!v367)
      goto LABEL_146;
  }
  v93 = (unint64_t *)&v92->__shared_owners_;
  do
    v94 = __ldaxr(v93);
  while (__stlxr(v94 - 1, v93));
  if (v94)
  {
LABEL_146:
    v95 = v384;
    if ((_DWORD)v384 == -1)
      goto LABEL_201;
    goto LABEL_147;
  }
  ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
  std::__shared_weak_count::__release_weak(v92);
  v95 = v384;
  if ((_DWORD)v384 != -1)
LABEL_147:
    ((void (*)(__int128 *, __int128 *))off_24EC5FFD0[v95])(&v373, &v379);
LABEL_201:
  *(_QWORD *)&v377 = *(_QWORD *)(a1 + 8);
  sub_223BB9B10((int *)&v377, a1, (unsigned __int16 *)v396);
  *(_QWORD *)&v377 = *(_QWORD *)(a1 + 8);
  sub_223BB9B10((int *)&v377, a1, (unsigned __int16 *)&__p);
  v128 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v128 - 8);
  v129 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v129 - 8);
  *(_QWORD *)(a1 + 48) = v128 - 8;
  *(_QWORD *)(a1 + 72) = v129 - 8;
  sub_2232C39E0(v83);
  sub_223BBB5FC(v83, (uint64_t)v393);
  *(_BYTE *)(a2 + 496) = 1;
  if (v408 != -1)
    ((void (*)(__int128 *, char *))off_24EC5FFD0[v408])(&v377, v407);
  v408 = -1;
  if (v403 != -1)
    ((void (*)(__int128 *, void **))off_24EC5FFD0[v403])(&v377, v398);
  v403 = -1;
  if (!LOBYTE(v395[1]))
    goto LABEL_210;
  *(_QWORD *)&v393[0] = &off_24EC21328;
  v130 = *(std::__shared_weak_count **)&v393[1];
  if (!*(_QWORD *)&v393[1])
    goto LABEL_210;
  v131 = (unint64_t *)(*(_QWORD *)&v393[1] + 8);
  do
    v132 = __ldaxr(v131);
  while (__stlxr(v132 - 1, v131));
  if (!v132)
  {
    ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
    std::__shared_weak_count::__release_weak(v130);
    if (v8 > 3)
      goto LABEL_218;
  }
  else
  {
LABEL_210:
    if (v8 > 3)
      goto LABEL_218;
  }
LABEL_211:
  LOBYTE(v393[0]) = 0;
  LOBYTE(v395[1]) = 0;
  sub_223BB953C((uint64_t *)a1, (uint64_t)v393);
  if (LOBYTE(v395[1]))
  {
    *(_QWORD *)&v393[0] = &off_24EC21328;
    v133 = *(std::__shared_weak_count **)&v393[1];
    if (*(_QWORD *)&v393[1])
    {
      v134 = (unint64_t *)(*(_QWORD *)&v393[1] + 8);
      do
        v135 = __ldaxr(v134);
      while (__stlxr(v135 - 1, v134));
      if (!v135)
      {
        ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
        std::__shared_weak_count::__release_weak(v133);
      }
    }
  }
LABEL_218:
  v136 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v136 - 8);
  v137 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v137 - 8);
  *(_QWORD *)(a1 + 48) = v136 - 8;
  *(_QWORD *)(a1 + 72) = v137 - 8;
  sub_224544628(a1);
  v138 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v138)
    *(_BYTE *)(a1 + 104) = 1;
  v139 = (char *)sub_2245448E0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)&v393[0] = 0;
  sub_22451CAD4(v139, v393);
  v140 = v393[0];
  if (HIDWORD(*(_QWORD *)&v393[0]))
  {
    v340 = __cxa_allocate_exception(8uLL);
    *v340 = &off_24EC7AC38;
    __cxa_throw(v340, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
  }
  sub_223BB9398((uint64_t *)a1, a2 + 504);
  if ((v140 & 0xFFFFFFFE) != 0)
  {
    sub_223BB953C((uint64_t *)a1, a2 + 568);
    v141 = a2;
  }
  else
  {
    LOBYTE(v377) = 0;
    LOBYTE(v380[1]) = 0;
    sub_223BB96E0((uint64_t *)a1, (uint64_t)&v377);
    v141 = a2;
    if (LOBYTE(v380[1]))
    {
      v365 = &off_24EC1F8C8;
      v149 = (char *)*((_QWORD *)&v377 + 1);
      v150 = (std::__shared_weak_count *)v378[0];
      if (v378[0])
      {
        v151 = (unint64_t *)((char *)v378[0] + 8);
        do
          v152 = __ldxr(v151);
        while (__stxr(v152 + 1, v151));
        v153 = HIDWORD(v379);
        v155 = v378[1];
        v154 = v379;
        v156 = (__int16)v380[0];
        do
          v157 = __ldxr(v151);
        while (__stxr(v157 + 1, v151));
        do
          v158 = __ldxr(v151);
        while (__stxr(v158 + 1, v151));
      }
      else
      {
        v153 = HIDWORD(v379);
        v155 = v378[1];
        v154 = v379;
        v156 = (__int16)v380[0];
      }
      v366 = v149;
      v367 = v150;
      v368 = v154;
      v369 = 4 * v153;
      v370 = v155;
      v371 = 4;
      v372 = v156;
      if (v150)
      {
        v165 = (unint64_t *)&v150->__shared_owners_;
        do
          v166 = __ldaxr(v165);
        while (__stlxr(v166 - 1, v165));
        if (!v166)
        {
          ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
          std::__shared_weak_count::__release_weak(v150);
        }
        do
          v167 = __ldaxr(v165);
        while (__stlxr(v167 - 1, v165));
        v141 = a2;
        if (!v167)
        {
          ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
          std::__shared_weak_count::__release_weak(v150);
        }
      }
      BYTE8(v393[0]) = 0;
      BYTE8(v393[1]) = 0;
      LOBYTE(v394) = 0;
      LOBYTE(v395[0]) = 0;
      LOBYTE(v395[1]) = 1;
      LODWORD(v396[0]) = 0;
      sub_22432B21C((uint64_t)&v365, 3u, (uint64_t)&v373);
      sub_2232C1348(v141 + 568, (uint64_t)&v373);
      v168 = v374;
      if (v374)
      {
        v169 = (unint64_t *)&v374->__shared_owners_;
        do
          v170 = __ldaxr(v169);
        while (__stlxr(v170 - 1, v169));
        if (!v170)
        {
          ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
          std::__shared_weak_count::__release_weak(v168);
        }
      }
      v171 = v367;
      if (v367)
      {
        v172 = (unint64_t *)&v367->__shared_owners_;
        do
          v173 = __ldaxr(v172);
        while (__stlxr(v173 - 1, v172));
        if (!v173)
        {
          ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
          std::__shared_weak_count::__release_weak(v171);
        }
      }
      if (LOBYTE(v380[1]))
      {
        *(_QWORD *)&v377 = &off_24EC27198;
        v174 = (std::__shared_weak_count *)v378[0];
        if (v378[0])
        {
          v175 = (unint64_t *)((char *)v378[0] + 8);
          do
            v176 = __ldaxr(v175);
          while (__stlxr(v176 - 1, v175));
          if (!v176)
          {
            ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
            std::__shared_weak_count::__release_weak(v174);
          }
        }
      }
    }
  }
  v142 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v142 - 8);
  v143 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v143 - 8);
  *(_QWORD *)(a1 + 48) = v142 - 8;
  *(_QWORD *)(a1 + 72) = v143 - 8;
  if (a3 > 4)
  {
    sub_224544628(a1);
    v145 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "version";
    *(_QWORD *)(a1 + 96) = 7;
    if (!v145)
      *(_BYTE *)(a1 + 104) = 1;
    v146 = (char *)sub_2245448E0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    *(_QWORD *)&v393[0] = 0;
    sub_22451CAD4(v146, v393);
    v147 = v393[0];
    if (HIDWORD(*(_QWORD *)&v393[0]))
    {
      v346 = __cxa_allocate_exception(8uLL);
      *v346 = &off_24EC7AC38;
      __cxa_throw(v346, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
    }
    sub_223BB91F4((uint64_t *)a1, v141 + 632);
    if (*(_BYTE *)sub_2245448E0((uint64_t *)a1))
    {
      v148 = (uint64_t *)sub_2245448E0((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v144 = a2;
      *(float *)(a2 + 720) = sub_22454AD28(v148);
      *(_BYTE *)(a2 + 724) = 1;
    }
    else
    {
      ++*(_QWORD *)(a1 + 112);
      v144 = a2;
      if (*(_BYTE *)(a2 + 724))
        *(_BYTE *)(a2 + 724) = 0;
    }
    if (v147 >= 2)
    {
      v159 = (void **)(a2 + 728);
      if (*(_BYTE *)sub_2245448E0((uint64_t *)a1))
      {
        memset(v393, 0, 24);
        sub_224546324((uint64_t *)a1, (uint64_t *)v393);
        if (*(_BYTE *)(a2 + 752))
        {
          v160 = *v159;
          if (*v159)
          {
            *(_QWORD *)(a2 + 736) = v160;
            operator delete(v160);
          }
        }
        *(_OWORD *)v159 = v393[0];
        *(_QWORD *)(a2 + 744) = *(_QWORD *)&v393[1];
        *(_BYTE *)(a2 + 752) = 1;
      }
      else
      {
        ++*(_QWORD *)(a1 + 112);
        if (*(_BYTE *)(a2 + 752))
        {
          v161 = *v159;
          if (*v159)
          {
            *(_QWORD *)(a2 + 736) = v161;
            operator delete(v161);
          }
          *(_BYTE *)(a2 + 752) = 0;
        }
      }
      if (*(_BYTE *)sub_2245448E0((uint64_t *)a1))
      {
        v162 = (char *)sub_2245448E0((uint64_t *)a1);
        ++*(_QWORD *)(a1 + 112);
        *(_QWORD *)&v393[0] = 0;
        sub_22451CAD4(v162, v393);
        if (HIDWORD(*(_QWORD *)&v393[0]))
        {
          v350 = __cxa_allocate_exception(8uLL);
          *v350 = &off_24EC7AC38;
          __cxa_throw(v350, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
        }
        *(_DWORD *)(a2 + 760) = v393[0];
        *(_BYTE *)(a2 + 764) = 1;
      }
      else
      {
        ++*(_QWORD *)(a1 + 112);
        if (*(_BYTE *)(a2 + 764))
          *(_BYTE *)(a2 + 764) = 0;
      }
      if (*(_BYTE *)sub_2245448E0((uint64_t *)a1))
      {
        v163 = (char *)sub_2245448E0((uint64_t *)a1);
        ++*(_QWORD *)(a1 + 112);
        *(_QWORD *)&v393[0] = 0;
        sub_22451CAD4(v163, v393);
        if (HIDWORD(*(_QWORD *)&v393[0]))
        {
          v351 = __cxa_allocate_exception(8uLL);
          *v351 = &off_24EC7AC38;
          __cxa_throw(v351, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
        }
        v144 = a2;
        *(_DWORD *)(a2 + 768) = v393[0];
        *(_BYTE *)(a2 + 772) = 1;
      }
      else
      {
        ++*(_QWORD *)(a1 + 112);
        v144 = a2;
        if (*(_BYTE *)(a2 + 772))
          *(_BYTE *)(a2 + 772) = 0;
      }
      if (v147 >= 3)
      {
        if (*(_BYTE *)sub_2245448E0((uint64_t *)a1))
        {
          v164 = (char *)sub_2245448E0((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          *(_QWORD *)&v393[0] = 0;
          sub_22451CAD4(v164, v393);
          if (HIDWORD(*(_QWORD *)&v393[0]))
          {
            v352 = __cxa_allocate_exception(8uLL);
            *v352 = &off_24EC7AC38;
            __cxa_throw(v352, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
          }
          v144 = a2;
          *(_DWORD *)(a2 + 776) = v393[0];
          *(_BYTE *)(a2 + 780) = 1;
        }
        else
        {
          ++*(_QWORD *)(a1 + 112);
          v144 = a2;
          if (*(_BYTE *)(a2 + 780))
            *(_BYTE *)(a2 + 780) = 0;
        }
        if (v147 >= 4)
        {
          sub_224544628(a1);
          v177 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "version";
          *(_QWORD *)(a1 + 96) = 7;
          if (!v177)
            *(_BYTE *)(a1 + 104) = 1;
          v178 = (char *)sub_2245448E0((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          *(_QWORD *)&v393[0] = 0;
          sub_22451CAD4(v178, v393);
          if (HIDWORD(*(_QWORD *)&v393[0]))
          {
            v353 = __cxa_allocate_exception(8uLL);
            *v353 = &off_24EC7AC38;
            __cxa_throw(v353, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
          }
          if (LODWORD(v393[0]) >= 2)
            v179 = 2;
          else
            v179 = v393[0];
          if (v179 >= 2)
          {
            sub_223BBB798(a1, a2 + 784);
            v144 = a2;
          }
          else
          {
            *((_QWORD *)&v393[0] + 1) = 0;
            *(_QWORD *)&v393[1] = 0;
            *(_QWORD *)&v393[0] = (char *)v393 + 8;
            sub_224530B6C(v393, &v377);
            v180 = (std::__shared_weak_count *)*((_QWORD *)&v377 + 1);
            v373 = v377;
            sub_22323DF84((uint64_t)v393, *((char **)&v393[0] + 1));
            v181 = *(unsigned __int8 *)(a1 + 104);
            *(_QWORD *)(a1 + 88) = "dictionary";
            *(_QWORD *)(a1 + 96) = 10;
            if (!v181)
              *(_BYTE *)(a1 + 104) = 1;
            v182 = (unsigned __int8 *)operator new();
            *(_QWORD *)v182 = 0;
            *((_QWORD *)v182 + 1) = 0;
            v183 = (unsigned __int8 *)sub_2245448E0((uint64_t *)a1);
            ++*(_QWORD *)(a1 + 112);
            sub_22451BC6C((uint64_t)v393, v183);
            v184 = *v182;
            *v182 = v393[0];
            LOBYTE(v393[0]) = v184;
            v185 = *((_QWORD *)v182 + 1);
            *((_QWORD *)v182 + 1) = *((_QWORD *)&v393[0] + 1);
            *((_QWORD *)&v393[0] + 1) = v185;
            sub_22345337C((void ***)v393 + 1, v184);
            *(_QWORD *)&v377 = v182;
            sub_2245198EC((uint64_t *)&v377, v393);
            v186 = v393[0];
            v393[0] = 0uLL;
            v373 = v186;
            v144 = a2;
            if (v180)
            {
              v187 = (unint64_t *)&v180->__shared_owners_;
              do
                v188 = __ldaxr(v187);
              while (__stlxr(v188 - 1, v187));
              if (!v188)
              {
                ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
                std::__shared_weak_count::__release_weak(v180);
              }
            }
            v189 = (std::__shared_weak_count *)*((_QWORD *)&v393[0] + 1);
            if (*((_QWORD *)&v393[0] + 1))
            {
              v190 = (unint64_t *)(*((_QWORD *)&v393[0] + 1) + 8);
              do
                v191 = __ldaxr(v190);
              while (__stlxr(v191 - 1, v190));
              if (!v191)
              {
                ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
                std::__shared_weak_count::__release_weak(v189);
              }
            }
            sub_22345337C((void ***)v182 + 1, *v182);
            MEMORY[0x227684CE8](v182, 0x1022C40B06DCE69);
            sub_224518820(v393, (uint64_t)&v373);
            v192 = v393[0];
            v393[0] = 0uLL;
            v193 = *(std::__shared_weak_count **)(a2 + 792);
            *(_OWORD *)(a2 + 784) = v192;
            if (v193)
            {
              v194 = (unint64_t *)&v193->__shared_owners_;
              do
                v195 = __ldaxr(v194);
              while (__stlxr(v195 - 1, v194));
              if (!v195)
              {
                ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
                std::__shared_weak_count::__release_weak(v193);
              }
            }
            v196 = (std::__shared_weak_count *)*((_QWORD *)&v393[0] + 1);
            if (*((_QWORD *)&v393[0] + 1))
            {
              v197 = (unint64_t *)(*((_QWORD *)&v393[0] + 1) + 8);
              do
                v198 = __ldaxr(v197);
              while (__stlxr(v198 - 1, v197));
              if (!v198)
              {
                ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
                std::__shared_weak_count::__release_weak(v196);
              }
            }
            v199 = (std::__shared_weak_count *)*((_QWORD *)&v373 + 1);
            if (*((_QWORD *)&v373 + 1))
            {
              v200 = (unint64_t *)(*((_QWORD *)&v373 + 1) + 8);
              do
                v201 = __ldaxr(v200);
              while (__stlxr(v201 - 1, v200));
              if (!v201)
              {
                ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
                std::__shared_weak_count::__release_weak(v199);
              }
            }
          }
          v202 = *(_QWORD *)(a1 + 48);
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(v202 - 8);
          v203 = *(_QWORD *)(a1 + 72);
          *(_QWORD *)(a1 + 112) = *(_QWORD *)(v203 - 8);
          *(_QWORD *)(a1 + 48) = v202 - 8;
          *(_QWORD *)(a1 + 72) = v203 - 8;
          if (v147 != 4)
          {
            if (*(_BYTE *)sub_2245448E0((uint64_t *)a1))
            {
              LODWORD(v394) = 0;
              memset(v393, 0, sizeof(v393));
              v204 = sub_2245448E0((uint64_t *)a1);
              ++*(_QWORD *)(a1 + 112);
              sub_224545EA4(v204, (float *)v393);
              v144 = a2;
              v205 = v393[1];
              *(_OWORD *)(a2 + 800) = v393[0];
              *(_OWORD *)(a2 + 816) = v205;
              *(_DWORD *)(a2 + 832) = v394;
              *(_BYTE *)(a2 + 836) = 1;
            }
            else
            {
              ++*(_QWORD *)(a1 + 112);
              v144 = a2;
              if (*(_BYTE *)(a2 + 836))
                *(_BYTE *)(a2 + 836) = 0;
            }
          }
        }
      }
    }
    v206 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v206 - 8);
    v207 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(v207 - 8);
    *(_QWORD *)(a1 + 48) = v206 - 8;
    *(_QWORD *)(a1 + 72) = v207 - 8;
  }
  else
  {
    sub_223BB91F4((uint64_t *)a1, v141 + 632);
    v144 = a2;
  }
  sub_223BB9398((uint64_t *)a1, v144 + 840);
  sub_224544628(a1);
  v208 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v208)
    *(_BYTE *)(a1 + 104) = 1;
  v209 = (char *)sub_2245448E0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)&v393[0] = 0;
  sub_22451CAD4(v209, v393);
  if (DWORD1(v393[0]))
  {
    v341 = __cxa_allocate_exception(8uLL);
    *v341 = &off_24EC7AC38;
    __cxa_throw(v341, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
  }
  LOBYTE(v393[0]) = 0;
  LOBYTE(v398[1]) = 0;
  sub_223BB9884((uint64_t *)a1, (uint64_t)v393);
  v210 = LOBYTE(v398[1]);
  if (LOBYTE(v398[1]))
  {
    sub_22416C400((uint64_t)v393, (uint64_t)&v373);
    *(_QWORD *)&v377 = &off_24EC28A18;
    sub_2232C59F4((uint64_t)&v373, (uint64_t *)&v377 + 1);
    v211 = 1;
  }
  else
  {
    v211 = 0;
    LOBYTE(v377) = 0;
  }
  LOBYTE(v383) = v211;
  sub_2232C5C1C(a2 + 904, (uint64_t)&v377);
  if (!(_BYTE)v383)
    goto LABEL_349;
  *(_QWORD *)&v377 = &off_24EC28A18;
  v212 = (std::__shared_weak_count *)v378[0];
  if (!v378[0])
    goto LABEL_349;
  v213 = (unint64_t *)((char *)v378[0] + 8);
  do
    v214 = __ldaxr(v213);
  while (__stlxr(v214 - 1, v213));
  if (!v214)
  {
    ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
    std::__shared_weak_count::__release_weak(v212);
    if (!v210)
      goto LABEL_354;
  }
  else
  {
LABEL_349:
    if (!v210)
      goto LABEL_354;
  }
  v215 = v374;
  if (v374)
  {
    v216 = (unint64_t *)&v374->__shared_owners_;
    do
      v217 = __ldaxr(v216);
    while (__stlxr(v217 - 1, v216));
    if (!v217)
    {
      ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
      std::__shared_weak_count::__release_weak(v215);
      if (!LOBYTE(v398[1]))
        goto LABEL_357;
      goto LABEL_355;
    }
  }
LABEL_354:
  if (!LOBYTE(v398[1]))
    goto LABEL_357;
LABEL_355:
  if (LODWORD(v398[0]) != -1)
    ((void (*)(__int128 *, __int128 *))off_24EC5FFD0[LODWORD(v398[0])])(&v377, &v394);
LABEL_357:
  sub_223BB91F4((uint64_t *)a1, a2 + 992);
  v218 = (char *)sub_2245448E0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)&v393[0] = 0;
  sub_22451CAD4(v218, v393);
  if (*(_QWORD *)&v393[0] >= 0x100uLL)
  {
    v342 = __cxa_allocate_exception(8uLL);
    *v342 = &off_24EC7AC38;
    __cxa_throw(v342, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
  }
  *(_BYTE *)(a2 + 1080) = v393[0];
  v219 = sub_2245448E0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  sub_224545EA4(v219, (float *)(a2 + 1084));
  v220 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v220 - 8);
  v221 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v221 - 8);
  *(_QWORD *)(a1 + 48) = v220 - 8;
  *(_QWORD *)(a1 + 72) = v221 - 8;
  v222 = (char *)sub_2245448E0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)&v393[0] = 0;
  sub_22451CC1C(v222, v393);
  *(_QWORD *)(a2 + 1136) = *(_QWORD *)&v393[0];
  sub_224544628(a1);
  v223 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v223)
    *(_BYTE *)(a1 + 104) = 1;
  v224 = (char *)sub_2245448E0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)&v393[0] = 0;
  sub_22451CAD4(v224, v393);
  if (HIDWORD(*(_QWORD *)&v393[0]))
  {
    v343 = __cxa_allocate_exception(8uLL);
    *v343 = &off_24EC7AC38;
    __cxa_throw(v343, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
  }
  if (LODWORD(v393[0]) >= 2)
    v225 = 2;
  else
    v225 = v393[0];
  sub_223BBB938(a1, (float *)(a2 + 1144), v225);
  v226 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v226 - 8);
  v227 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v227 - 8);
  *(_QWORD *)(a1 + 48) = v226 - 8;
  *(_QWORD *)(a1 + 72) = v227 - 8;
  v228 = sub_2245448E0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  sub_224545FAC(v228, (double *)(a2 + 1184));
  v229 = a3;
  if (a3 == 1)
  {
    LOBYTE(v393[0]) = 0;
    v407[0] = 0;
    sub_223BBBD3C(a1, (uint64_t)v393);
    if (!v407[0])
      goto LABEL_469;
    v230 = *(unsigned __int8 *)(a2 + 1512);
    *(_OWORD *)(a2 + 1312) = v393[0];
    *(_DWORD *)(a2 + 1328) = v393[1];
    v231 = (char **)(a2 + 1336);
    if (v230)
    {
      sub_2232C6B24(v231, (char **)&v393[1] + 1);
      *(_BYTE *)(a2 + 1504) = v406;
      if (!v407[0])
        goto LABEL_469;
    }
    else
    {
      sub_2232C6D24(v231, (uint64_t)&v393[1] + 8);
      v238 = v406;
      *(_BYTE *)(a2 + 1512) = 1;
      *(_BYTE *)(a2 + 1504) = v238;
      if (!v407[0])
        goto LABEL_469;
    }
    if (__p)
    {
      v405 = __p;
      operator delete(__p);
    }
    if (v401)
    {
      v402 = v401;
      operator delete(v401);
    }
    if (*((_QWORD *)&v399 + 1))
    {
      v400 = *((_QWORD *)&v399 + 1);
      operator delete(*((void **)&v399 + 1));
    }
    if (v398[0])
    {
      v398[1] = v398[0];
      operator delete(v398[0]);
    }
    if (v396[1])
    {
      *(void **)&v397 = v396[1];
      operator delete(v396[1]);
    }
    if (v395[0])
    {
      v395[1] = v395[0];
      operator delete(v395[0]);
    }
    if (*((_QWORD *)&v393[1] + 1))
    {
      *(_QWORD *)&v394 = *((_QWORD *)&v393[1] + 1);
      operator delete(*((void **)&v393[1] + 1));
    }
    goto LABEL_469;
  }
  if (a3 > 6)
  {
    sub_223BBBD3C(a1, a2 + 1312);
    goto LABEL_496;
  }
  v365 = 0;
  v366 = 0;
  v367 = 0;
  sub_224544628(a1);
  v232 = *(unsigned __int8 **)(a1 + 32);
  v233 = *v232;
  if (v233 == 2)
  {
    v234 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v232 + 1) + 8) - **((_QWORD **)v232 + 1)) >> 4;
  }
  else if (v233 == 1)
  {
    v234 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v232 + 1) + 8) - **((_QWORD **)v232 + 1)) >> 3);
  }
  else
  {
    if (!*v232)
    {
      v234 = 0;
      v236 = (char *)v365;
      v235 = v366;
      v237 = 0x8F5C28F5C28F5C29 * ((v366 - (_BYTE *)v365) >> 3);
      goto LABEL_404;
    }
    v234 = 1;
  }
  v236 = (char *)v365;
  v235 = v366;
  v237 = 0x8F5C28F5C28F5C29 * ((v366 - (_BYTE *)v365) >> 3);
  if (v234 > v237)
  {
    sub_2232C71E0((uint64_t *)&v365, v234 - v237);
    v240 = (char *)v365;
    v239 = v366;
    if (v365 != v366)
      goto LABEL_399;
LABEL_410:
    v245 = *(_QWORD *)(a1 + 48);
    v246 = *(_QWORD *)(a1 + 72);
    v247 = v239;
    goto LABEL_411;
  }
LABEL_404:
  if (v237 <= v234)
  {
    v239 = v235;
    v240 = (char *)v365;
    if (v365 != v235)
      goto LABEL_399;
    goto LABEL_410;
  }
  v239 = &v236[200 * v234];
  if (v235 != v239)
  {
    do
    {
      v248 = v235 - 200;
      sub_223255CAC((uint64_t)(v235 - 176));
      v235 = v248;
    }
    while (v248 != v239);
  }
  v366 = v239;
  v229 = a3;
  v240 = (char *)v365;
  if (v365 == v239)
    goto LABEL_410;
  do
  {
LABEL_399:
    sub_224544628(a1);
    v241 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "version";
    *(_QWORD *)(a1 + 96) = 7;
    if (!v241)
      *(_BYTE *)(a1 + 104) = 1;
    v242 = (char *)sub_2245448E0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    *(_QWORD *)&v393[0] = 0;
    sub_22451CAD4(v242, v393);
    if (HIDWORD(*(_QWORD *)&v393[0]))
    {
      v338 = __cxa_allocate_exception(8uLL);
      *v338 = &off_24EC7AC38;
      __cxa_throw(v338, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
    }
    sub_223BBBF4C(a1, (uint64_t)v240, v393[0]);
    v243 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v243 - 8);
    v244 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(v244 - 8);
    *(_QWORD *)(a1 + 48) = v243 - 8;
    *(_QWORD *)(a1 + 72) = v244 - 8;
    v240 += 200;
  }
  while (v240 != v239);
  v245 = v243 - 8;
  v246 = v244 - 8;
  v247 = (char *)v365;
  v239 = v366;
LABEL_411:
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v245 - 8);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v246 - 8);
  *(_QWORD *)(a1 + 48) = v245 - 8;
  *(_QWORD *)(a1 + 72) = v246 - 8;
  if (v247 != v239)
  {
    v377 = 0uLL;
    v378[0] = 0;
    sub_2232C7578((uint64_t *)&v377, 0x8F5C28F5C28F5C29 * ((v239 - v247) >> 3));
    v249 = (char *)v365;
    v250 = v366;
    v376 = &v377;
    if (v365 != v366)
    {
      do
      {
        LOBYTE(v393[0]) = *v249;
        *(_WORD *)((char *)v393 + 1) = *(_WORD *)(v249 + 1);
        DWORD1(v393[0]) = *((_DWORD *)v249 + 1);
        *((_QWORD *)&v393[0] + 1) = *((_QWORD *)v249 + 1);
        LODWORD(v393[1]) = *((_DWORD *)v249 + 4);
        v251 = v249 + 24;
        sub_223C7574C((char ***)v249 + 3, (uint64_t)&v393[1] + 8);
        v406 = v251[168];
        sub_2232C77CC((uint64_t **)&v376, (uint64_t)v393);
        if (__p)
        {
          v405 = __p;
          operator delete(__p);
        }
        if (v401)
        {
          v402 = v401;
          operator delete(v401);
        }
        if (*((_QWORD *)&v399 + 1))
        {
          v400 = *((_QWORD *)&v399 + 1);
          operator delete(*((void **)&v399 + 1));
        }
        if (v398[0])
        {
          v398[1] = v398[0];
          operator delete(v398[0]);
        }
        if (v396[1])
        {
          *(void **)&v397 = v396[1];
          operator delete(v396[1]);
        }
        if (v395[0])
        {
          v395[1] = v395[0];
          operator delete(v395[0]);
        }
        if (*((_QWORD *)&v393[1] + 1))
        {
          *(_QWORD *)&v394 = *((_QWORD *)&v393[1] + 1);
          operator delete(*((void **)&v393[1] + 1));
        }
        v249 = v251 + 176;
      }
      while (v251 + 176 != v250);
    }
    *(_OWORD *)v358 = v377;
    v359 = (std::__shared_weak_count *)v378[0];
    sub_223C2A714((uint64_t *)v358, (uint64_t)&v377);
    LOBYTE(v393[0]) = v377;
    *(_WORD *)((char *)v393 + 1) = *(_WORD *)((char *)&v377 + 1);
    DWORD1(v393[0]) = DWORD1(v377);
    *((_QWORD *)&v393[0] + 1) = *((_QWORD *)&v377 + 1);
    LODWORD(v393[1]) = v378[0];
    sub_223C75208((uint64_t)&v393[1] + 8, (char **)&v378[1]);
    v406 = v392;
    sub_2232C0648(a2 + 1312, v393);
    v229 = a3;
    if (__p)
    {
      v405 = __p;
      operator delete(__p);
    }
    if (v401)
    {
      v402 = v401;
      operator delete(v401);
    }
    if (*((_QWORD *)&v399 + 1))
    {
      v400 = *((_QWORD *)&v399 + 1);
      operator delete(*((void **)&v399 + 1));
    }
    if (v398[0])
    {
      v398[1] = v398[0];
      operator delete(v398[0]);
    }
    if (v396[1])
    {
      *(void **)&v397 = v396[1];
      operator delete(v396[1]);
    }
    if (v395[0])
    {
      v395[1] = v395[0];
      operator delete(v395[0]);
    }
    if (*((_QWORD *)&v393[1] + 1))
    {
      *(_QWORD *)&v394 = *((_QWORD *)&v393[1] + 1);
      operator delete(*((void **)&v393[1] + 1));
    }
    if (v390)
    {
      v391 = v390;
      operator delete(v390);
    }
    if (v388)
    {
      v389 = v388;
      operator delete(v388);
    }
    if (v386)
    {
      v387 = v386;
      operator delete(v386);
    }
    if (v384)
    {
      v385 = v384;
      operator delete(v384);
    }
    if (v382)
    {
      v383 = v382;
      operator delete(v382);
    }
    if (v380[0])
    {
      v380[1] = v380[0];
      operator delete(v380[0]);
    }
    if (v378[1])
    {
      *(void **)&v379 = v378[1];
      operator delete(v378[1]);
    }
    v252 = (char *)v358[0];
    if (v358[0])
    {
      v253 = (char *)v358[1];
      v254 = v358[0];
      if (v358[1] != v358[0])
      {
        do
        {
          v255 = v253 - 200;
          sub_223255CAC((uint64_t)(v253 - 176));
          v253 = v255;
        }
        while (v255 != v252);
        v254 = v358[0];
        v229 = a3;
      }
      v358[1] = v252;
      operator delete(v254);
    }
    v239 = (char *)v365;
  }
  if (v239)
  {
    v256 = v366;
    v257 = v239;
    if (v366 != v239)
    {
      do
      {
        v258 = v256 - 200;
        sub_223255CAC((uint64_t)(v256 - 176));
        v256 = v258;
      }
      while (v258 != v239);
      v257 = v365;
      v229 = a3;
    }
    v366 = v239;
    operator delete(v257);
  }
  if (v229 > 3)
  {
    if (a3 > 4)
      goto LABEL_496;
    goto LABEL_495;
  }
LABEL_469:
  if (*(_BYTE *)sub_2245448E0((uint64_t *)a1))
  {
    memset((char *)v393 + 8, 0, 24);
    sub_224544628(a1);
    v259 = a2;
    v260 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "version";
    *(_QWORD *)(a1 + 96) = 7;
    if (!v260)
      *(_BYTE *)(a1 + 104) = 1;
    v261 = (char *)sub_2245448E0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    *(_QWORD *)&v377 = 0;
    sub_22451CAD4(v261, &v377);
    if (DWORD1(v377))
    {
      v347 = __cxa_allocate_exception(8uLL);
      *v347 = &off_24EC7AC38;
      __cxa_throw(v347, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
    }
    sub_223BBC8F4(a1, (uint64_t)v393, v377);
    v262 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v262 - 8);
    v263 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(v263 - 8);
    *(_QWORD *)(a1 + 48) = v262 - 8;
    *(_QWORD *)(a1 + 72) = v263 - 8;
    if (*(_BYTE *)(a2 + 1128))
    {
      v264 = *(_QWORD *)(a2 + 1104);
      if (v264)
      {
        v265 = *(_QWORD *)(a2 + 1112);
        v266 = *(void **)(a2 + 1104);
        if (v265 != v264)
        {
          v267 = *(_QWORD *)(a2 + 1112);
          do
          {
            v269 = *(void **)(v267 - 24);
            v267 -= 24;
            v268 = v269;
            if (v269)
            {
              *(_QWORD *)(v265 - 16) = v268;
              operator delete(v268);
            }
            v265 = v267;
          }
          while (v267 != v264);
          v259 = a2;
          v266 = *(void **)(a2 + 1104);
        }
        *(_QWORD *)(v259 + 1112) = v264;
        operator delete(v266);
      }
    }
    *(_OWORD *)(v259 + 1104) = *(__int128 *)((char *)v393 + 8);
    *(_QWORD *)(v259 + 1120) = *((_QWORD *)&v393[1] + 1);
    *(_BYTE *)(v259 + 1128) = 1;
  }
  else
  {
    ++*(_QWORD *)(a1 + 112);
    if (*(_BYTE *)(a2 + 1128))
    {
      v270 = a2;
      v271 = *(_QWORD *)(a2 + 1104);
      if (v271)
      {
        v272 = *(_QWORD *)(a2 + 1112);
        v273 = *(void **)(a2 + 1104);
        if (v272 != v271)
        {
          v274 = *(_QWORD *)(a2 + 1112);
          do
          {
            v276 = *(void **)(v274 - 24);
            v274 -= 24;
            v275 = v276;
            if (v276)
            {
              *(_QWORD *)(v272 - 16) = v275;
              operator delete(v275);
            }
            v272 = v274;
          }
          while (v274 != v271);
          v270 = a2;
          v273 = *(void **)(a2 + 1104);
        }
        *(_QWORD *)(v270 + 1112) = v271;
        operator delete(v273);
      }
      *(_BYTE *)(v270 + 1128) = 0;
    }
  }
LABEL_495:
  v277 = (char *)sub_2245448E0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)&v393[0] = 0;
  sub_22451CAD4(v277, v393);
  if (DWORD1(v393[0]))
  {
    v344 = __cxa_allocate_exception(8uLL);
    *v344 = &off_24EC7AC38;
    __cxa_throw(v344, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
  }
LABEL_496:
  if (*(_BYTE *)sub_2245448E0((uint64_t *)a1))
  {
    LODWORD(v278) = 0;
    v279 = 0;
    v394 = 0u;
    *(_OWORD *)v395 = 0u;
    memset(v393, 0, sizeof(v393));
    v280 = (float *)&v377;
    do
    {
      if ((_DWORD)v278 == HIDWORD(v279))
        v281 = 1.0;
      else
        v281 = 0.0;
      *v280++ = v281;
      v282 = (v279 + 1);
      v283 = v279 & 0xFFFFFFFF00000000;
      v284 = v282 | v283;
      v285 = v283 + 0x100000000;
      if ((int)v278 >= 3)
        v278 = v285;
      else
        v278 = v284;
      v279 = v278;
    }
    while (v278 != 0x400000000);
    *(_OWORD *)v396 = v377;
    v397 = *(_OWORD *)v378;
    *(_OWORD *)v398 = v379;
    v399 = *(_OWORD *)v380;
    sub_223BBD020(a1, (float *)v393);
    v286 = v397;
    *(_OWORD *)(a2 + 1584) = *(_OWORD *)v396;
    *(_OWORD *)(a2 + 1600) = v286;
    v287 = v399;
    *(_OWORD *)(a2 + 1616) = *(_OWORD *)v398;
    *(_OWORD *)(a2 + 1632) = v287;
    v288 = v393[1];
    *(_OWORD *)(a2 + 1520) = v393[0];
    *(_OWORD *)(a2 + 1536) = v288;
    v289 = *(_OWORD *)v395;
    *(_OWORD *)(a2 + 1552) = v394;
    *(_OWORD *)(a2 + 1568) = v289;
    *(_BYTE *)(a2 + 1648) = 1;
  }
  else
  {
    ++*(_QWORD *)(a1 + 112);
    if (*(_BYTE *)(a2 + 1648))
      *(_BYTE *)(a2 + 1648) = 0;
  }
  if (a3 >= 3)
  {
    sub_224544628(a1);
    v290 = (uint64_t *)(a2 + 1656);
    v291 = *(unsigned __int8 **)(a1 + 32);
    v292 = *v291;
    if (v292 == 2)
    {
      v293 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v291 + 1) + 8) - **((_QWORD **)v291 + 1)) >> 4;
    }
    else if (v292 == 1)
    {
      v293 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v291 + 1) + 8) - **((_QWORD **)v291 + 1)) >> 3);
    }
    else
    {
      if (!*v291)
      {
        v293 = 0;
        v294 = (uint64_t *)(a2 + 1664);
        v295 = *(_QWORD *)(a2 + 1664);
        v296 = *(_QWORD *)(a2 + 1656);
        v297 = 0x86BCA1AF286BCA1BLL * ((v295 - v296) >> 4);
        goto LABEL_538;
      }
      v293 = 1;
    }
    v294 = (uint64_t *)(a2 + 1664);
    v295 = *(_QWORD *)(a2 + 1664);
    v296 = *(_QWORD *)(a2 + 1656);
    v297 = 0x86BCA1AF286BCA1BLL * ((v295 - v296) >> 4);
    if (v293 > v297)
    {
      sub_2232C879C((char **)(a2 + 1656), v293 - v297);
      v298 = *v294;
      v299 = *v290;
      if (*v290 != *v294)
        goto LABEL_520;
      goto LABEL_554;
    }
LABEL_538:
    if (v297 > v293)
    {
      v298 = v296 + 304 * v293;
      while (v295 != v298)
      {
        v323 = *(_QWORD *)(v295 - 160);
        if (v323)
        {
          v324 = *(_QWORD *)(v295 - 152);
          v322 = *(void **)(v295 - 160);
          if (v324 != v323)
          {
            v325 = *(_QWORD *)(v295 - 152);
            do
            {
              v327 = *(void **)(v325 - 24);
              v325 -= 24;
              v326 = v327;
              if (v327)
              {
                *(_QWORD *)(v324 - 16) = v326;
                operator delete(v326);
              }
              v324 = v325;
            }
            while (v325 != v323);
            v322 = *(void **)(v295 - 160);
          }
          *(_QWORD *)(v295 - 152) = v323;
          operator delete(v322);
        }
        v295 -= 304;
      }
      *v294 = v298;
      v299 = *v290;
      if (*v290 == v298)
        goto LABEL_554;
      do
      {
LABEL_520:
        sub_224544628(a1);
        v306 = *(unsigned __int8 *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = "version";
        *(_QWORD *)(a1 + 96) = 7;
        if (!v306)
          *(_BYTE *)(a1 + 104) = 1;
        v307 = (char *)sub_2245448E0((uint64_t *)a1);
        ++*(_QWORD *)(a1 + 112);
        *(_QWORD *)&v393[0] = 0;
        sub_22451CAD4(v307, v393);
        if (DWORD1(v393[0]))
        {
          v337 = __cxa_allocate_exception(8uLL);
          *v337 = &off_24EC7AC38;
          __cxa_throw(v337, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
        }
        v308 = (char *)sub_2245448E0((uint64_t *)a1);
        ++*(_QWORD *)(a1 + 112);
        *(_QWORD *)&v393[0] = 0;
        sub_22451CC1C(v308, v393);
        *(_QWORD *)v299 = *(_QWORD *)&v393[0];
        v309 = sub_2245448E0((uint64_t *)a1);
        ++*(_QWORD *)(a1 + 112);
        sub_224545FAC(v309, (double *)(v299 + 8));
        sub_224544628(a1);
        v310 = *(unsigned __int8 *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = "version";
        *(_QWORD *)(a1 + 96) = 7;
        if (!v310)
          *(_BYTE *)(a1 + 104) = 1;
        v311 = (char *)sub_2245448E0((uint64_t *)a1);
        ++*(_QWORD *)(a1 + 112);
        *(_QWORD *)&v393[0] = 0;
        sub_22451CAD4(v311, v393);
        if (HIDWORD(*(_QWORD *)&v393[0]))
        {
          v336 = __cxa_allocate_exception(8uLL);
          *v336 = &off_24EC7AC38;
          __cxa_throw(v336, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
        }
        sub_223BBC8F4(a1, v299 + 136, v393[0]);
        v312 = *(_QWORD *)(a1 + 48);
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(v312 - 8);
        v313 = *(_QWORD *)(a1 + 72);
        *(_QWORD *)(a1 + 112) = *(_QWORD *)(v313 - 8);
        *(_QWORD *)(a1 + 48) = v312 - 8;
        *(_QWORD *)(a1 + 72) = v313 - 8;
        if (*(_BYTE *)sub_2245448E0((uint64_t *)a1))
        {
          LODWORD(v314) = 0;
          v315 = 0;
          v394 = 0u;
          *(_OWORD *)v395 = 0u;
          v316 = (float *)&v377;
          memset(v393, 0, sizeof(v393));
          do
          {
            if ((_DWORD)v314 == HIDWORD(v315))
              v317 = 1.0;
            else
              v317 = 0.0;
            *v316++ = v317;
            v318 = (v315 + 1);
            v319 = v315 & 0xFFFFFFFF00000000;
            v320 = v318 | v319;
            v321 = v319 + 0x100000000;
            if ((int)v314 >= 3)
              v314 = v321;
            else
              v314 = v320;
            v315 = v314;
          }
          while (v314 != 0x400000000);
          *(_OWORD *)v396 = v377;
          v397 = *(_OWORD *)v378;
          *(_OWORD *)v398 = v379;
          v399 = *(_OWORD *)v380;
          sub_223BBD020(a1, (float *)v393);
          v300 = v397;
          *(_OWORD *)(v299 + 232) = *(_OWORD *)v396;
          *(_OWORD *)(v299 + 248) = v300;
          v301 = v399;
          *(_OWORD *)(v299 + 264) = *(_OWORD *)v398;
          *(_OWORD *)(v299 + 280) = v301;
          v302 = v393[1];
          *(_OWORD *)(v299 + 168) = v393[0];
          *(_OWORD *)(v299 + 184) = v302;
          v303 = *(_OWORD *)v395;
          *(_OWORD *)(v299 + 200) = v394;
          *(_OWORD *)(v299 + 216) = v303;
          *(_BYTE *)(v299 + 296) = 1;
        }
        else
        {
          ++*(_QWORD *)(a1 + 112);
          if (*(_BYTE *)(v299 + 296))
            *(_BYTE *)(v299 + 296) = 0;
        }
        v304 = *(_QWORD *)(a1 + 48);
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(v304 - 8);
        v305 = *(_QWORD *)(a1 + 72);
        *(_QWORD *)(a1 + 112) = *(_QWORD *)(v305 - 8);
        *(_QWORD *)(a1 + 48) = v304 - 8;
        *(_QWORD *)(a1 + 72) = v305 - 8;
        v299 += 304;
      }
      while (v299 != v298);
      v328 = v304 - 8;
      v329 = v305 - 8;
      goto LABEL_555;
    }
    v298 = v295;
    v299 = *v290;
    if (*v290 != v298)
      goto LABEL_520;
LABEL_554:
    v328 = *(_QWORD *)(a1 + 48);
    v329 = *(_QWORD *)(a1 + 72);
LABEL_555:
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v328 - 8);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(v329 - 8);
    *(_QWORD *)(a1 + 48) = v328 - 8;
    *(_QWORD *)(a1 + 72) = v329 - 8;
    if (a3 >= 6)
    {
      sub_224544628(a1);
      v330 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (!v330)
        *(_BYTE *)(a1 + 104) = 1;
      v331 = (char *)sub_2245448E0((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      *(_QWORD *)&v393[0] = 0;
      sub_22451CAD4(v331, v393);
      if (DWORD1(v393[0]))
      {
        v348 = __cxa_allocate_exception(8uLL);
        *v348 = &off_24EC7AC38;
        __cxa_throw(v348, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
      }
      v332 = (char *)sub_2245448E0((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      *(_QWORD *)&v393[0] = 0;
      sub_22451CAD4(v332, v393);
      if (*(_QWORD *)&v393[0] >= 0x100uLL)
      {
        v349 = __cxa_allocate_exception(8uLL);
        *v349 = &off_24EC7AC38;
        __cxa_throw(v349, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
      }
      *(_BYTE *)(a2 + 1680) = v393[0];
      v333 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(v333 - 8);
      v334 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(v334 - 8);
      *(_QWORD *)(a1 + 48) = v333 - 8;
      *(_QWORD *)(a1 + 72) = v334 - 8;
      if (a3 >= 8)
      {
        if (*(_BYTE *)sub_2245448E0((uint64_t *)a1))
        {
          v335 = (char *)sub_2245448E0((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          LOBYTE(v393[0]) = 0;
          sub_22451CECC(v335, v393);
          *(_BYTE *)(a2 + 1681) = v393[0];
          *(_BYTE *)(a2 + 1682) = 1;
        }
        else
        {
          ++*(_QWORD *)(a1 + 112);
          if (*(_BYTE *)(a2 + 1682))
            *(_BYTE *)(a2 + 1682) = 0;
        }
      }
    }
  }
}

void sub_223BB8CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36)
{
  unint64_t *p_shared_owners;
  unint64_t v38;

  if (a36)
  {
    p_shared_owners = (unint64_t *)&a36->__shared_owners_;
    do
      v38 = __ldaxr(p_shared_owners);
    while (__stlxr(v38 - 1, p_shared_owners));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))a36->__on_zero_shared)(a36);
      std::__shared_weak_count::__release_weak(a36);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void sub_223BB91F4(uint64_t *a1, uint64_t a2)
{
  int v3;
  char v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE v11[16];
  std::__shared_weak_count *v12;
  uint64_t (**v13)();
  uint64_t v14;
  std::__shared_weak_count *v15;
  char v16;
  _BYTE v17[32];
  uint64_t v18;
  int v19;
  unsigned __int8 v20;

  v17[0] = 0;
  v20 = 0;
  sub_223BB9884(a1, (uint64_t)v17);
  v3 = v20;
  if (v20)
  {
    sub_22416C400((uint64_t)v17, (uint64_t)v11);
    v13 = &off_24EC28D40;
    sub_2232C495C((uint64_t)v11, &v14);
    v4 = 1;
  }
  else
  {
    v4 = 0;
    LOBYTE(v13) = 0;
  }
  v16 = v4;
  sub_2232C4B84(a2, (uint64_t)&v13);
  if (v16)
  {
    v13 = &off_24EC28D40;
    v5 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  if (!v3)
    goto LABEL_15;
  v8 = v12;
  if (!v12)
    goto LABEL_15;
  v9 = (unint64_t *)&v12->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v20)
      return;
  }
  else
  {
LABEL_15:
    if (!v20)
      return;
  }
  if (v19 != -1)
    ((void (*)(uint64_t (***)(), uint64_t *))off_24EC5FFD0[v19])(&v13, &v18);
}

void sub_223BB9340(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_22319B358((uint64_t)va);
  sub_2232C17E0(v2 - 144);
  _Unwind_Resume(a1);
}

void sub_223BB9398(uint64_t *a1, uint64_t a2)
{
  int v3;
  char v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE v11[16];
  std::__shared_weak_count *v12;
  uint64_t (**v13)();
  uint64_t v14;
  std::__shared_weak_count *v15;
  char v16;
  _BYTE v17[32];
  uint64_t v18;
  int v19;
  unsigned __int8 v20;

  v17[0] = 0;
  v20 = 0;
  sub_223BB9884(a1, (uint64_t)v17);
  v3 = v20;
  if (v20)
  {
    sub_22416C400((uint64_t)v17, (uint64_t)v11);
    v13 = &off_24EC29028;
    sub_2232C529C((uint64_t)v11, &v14);
    v4 = 1;
  }
  else
  {
    v4 = 0;
    LOBYTE(v13) = 0;
  }
  v16 = v4;
  sub_2232C5628(a2, (uint64_t)&v13);
  if (v16)
  {
    v13 = &off_24EC29028;
    v5 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  if (!v3)
    goto LABEL_15;
  v8 = v12;
  if (!v12)
    goto LABEL_15;
  v9 = (unint64_t *)&v12->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v20)
      return;
  }
  else
  {
LABEL_15:
    if (!v20)
      return;
  }
  if (v19 != -1)
    ((void (*)(uint64_t (***)(), uint64_t *))off_24EC5FFD0[v19])(&v13, &v18);
}

void sub_223BB94E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  sub_22319B358((uint64_t)&a9);
  sub_2232C17E0((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_223BB953C(uint64_t *a1, uint64_t a2)
{
  int v3;
  char v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE v11[16];
  std::__shared_weak_count *v12;
  uint64_t (**v13)();
  uint64_t v14;
  std::__shared_weak_count *v15;
  char v16;
  _BYTE v17[32];
  uint64_t v18;
  int v19;
  unsigned __int8 v20;

  v17[0] = 0;
  v20 = 0;
  sub_223BB9884(a1, (uint64_t)v17);
  v3 = v20;
  if (v20)
  {
    sub_22416C400((uint64_t)v17, (uint64_t)v11);
    v13 = &off_24EC21040;
    sub_2232C1A28((uint64_t)v11, &v14);
    v4 = 1;
  }
  else
  {
    v4 = 0;
    LOBYTE(v13) = 0;
  }
  v16 = v4;
  sub_2232C1C50(a2, (uint64_t)&v13);
  if (v16)
  {
    v13 = &off_24EC21040;
    v5 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  if (!v3)
    goto LABEL_15;
  v8 = v12;
  if (!v12)
    goto LABEL_15;
  v9 = (unint64_t *)&v12->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v20)
      return;
  }
  else
  {
LABEL_15:
    if (!v20)
      return;
  }
  if (v19 != -1)
    ((void (*)(uint64_t (***)(), uint64_t *))off_24EC5FFD0[v19])(&v13, &v18);
}

void sub_223BB9688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  sub_22319B358((uint64_t)&a9);
  sub_2232C17E0((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_223BB96E0(uint64_t *a1, uint64_t a2)
{
  int v3;
  char v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE v11[16];
  std::__shared_weak_count *v12;
  uint64_t (**v13)();
  uint64_t v14;
  std::__shared_weak_count *v15;
  char v16;
  _BYTE v17[32];
  uint64_t v18;
  int v19;
  unsigned __int8 v20;

  v17[0] = 0;
  v20 = 0;
  sub_223BB9884(a1, (uint64_t)v17);
  v3 = v20;
  if (v20)
  {
    sub_22416C400((uint64_t)v17, (uint64_t)v11);
    v13 = &off_24EC28BC8;
    sub_2232C1E78((uint64_t)v11, &v14);
    v4 = 1;
  }
  else
  {
    v4 = 0;
    LOBYTE(v13) = 0;
  }
  v16 = v4;
  sub_2232C264C(a2, (uint64_t)&v13);
  if (v16)
  {
    v13 = &off_24EC28BC8;
    v5 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  if (!v3)
    goto LABEL_15;
  v8 = v12;
  if (!v12)
    goto LABEL_15;
  v9 = (unint64_t *)&v12->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v20)
      return;
  }
  else
  {
LABEL_15:
    if (!v20)
      return;
  }
  if (v19 != -1)
    ((void (*)(uint64_t (***)(), uint64_t *))off_24EC5FFD0[v19])(&v13, &v18);
}

void sub_223BB982C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  sub_22319B358((uint64_t)&a9);
  sub_2232C17E0((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_223BB9884(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[28];
  _BYTE v12[64];
  unsigned int v13;
  char v14;
  uint64_t (**v15)();
  uint64_t v16;
  std::__shared_weak_count *v17;

  if (*(_BYTE *)sub_2245448E0(a1))
  {
    v15 = &off_24EC1F958;
    sub_2231B3FDC((uint64_t)&v16);
    sub_22416BD7C((uint64_t)v11, (uint64_t)&v15, 0);
    v4 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    *(_DWORD *)&v11[24] = 0;
    v15 = (uint64_t (**)())a1[1];
    sub_223BB9B10((int *)&v15, (uint64_t)a1, (unsigned __int16 *)v11);
    if (*(_BYTE *)(a2 + 104))
    {
      v7 = *(unsigned int *)(a2 + 96);
      if ((_DWORD)v7 != -1)
        ((void (*)(uint64_t (***)(), uint64_t))off_24EC5FFD0[v7])(&v15, a2 + 32);
      *(_DWORD *)(a2 + 96) = -1;
      *(_BYTE *)(a2 + 104) = 0;
    }
    *(_OWORD *)a2 = *(_OWORD *)v11;
    *(_OWORD *)(a2 + 12) = *(_OWORD *)&v11[12];
    *(_BYTE *)(a2 + 32) = 0;
    *(_DWORD *)(a2 + 96) = -1;
    v8 = v13;
    if (v13 == -1)
    {
      *(_BYTE *)(a2 + 104) = 1;
    }
    else
    {
      ((void (*)(char *, uint64_t, _BYTE *))off_24EC60008[v13])(&v14, a2 + 32, v12);
      *(_DWORD *)(a2 + 96) = v8;
      v9 = v13;
      *(_BYTE *)(a2 + 104) = 1;
      if ((_DWORD)v9 != -1)
        ((void (*)(uint64_t (***)(), _BYTE *))off_24EC5FFD0[v9])(&v15, v12);
    }
  }
  else
  {
    ++a1[14];
    if (*(_BYTE *)(a2 + 104))
    {
      v10 = *(unsigned int *)(a2 + 96);
      if ((_DWORD)v10 != -1)
        ((void (*)(_BYTE *, uint64_t))off_24EC5FFD0[v10])(v11, a2 + 32);
      *(_DWORD *)(a2 + 96) = -1;
      *(_BYTE *)(a2 + 104) = 0;
    }
  }
}

void sub_223BB9A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v13 = *(unsigned int *)(v9 + 96);
  if ((_DWORD)v13 != -1)
    ((void (*)(uint64_t, uint64_t))off_24EC5FFD0[v13])(v11 - 96, v10);
  *(_DWORD *)(v9 + 96) = -1;
  sub_22319A588((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223BB9AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319A588((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223BB9ACC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 - 80);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_223BB9B10(int *a1, uint64_t a2, unsigned __int16 *a3)
{
  int v6;
  char *v7;
  unsigned int v8;
  int v9;
  char *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *exception;
  __int128 *v16;
  unint64_t v17;

  sub_224544628(a2);
  v6 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v6)
    *(_BYTE *)(a2 + 104) = 1;
  v7 = (char *)sub_2245448E0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v17 = 0;
  sub_22451CAD4(v7, &v17);
  v8 = v17;
  if (HIDWORD(v17))
    goto LABEL_19;
  if (*a1 >= 1)
  {
    if (v17 < 2 || *a1 != 2)
      goto LABEL_11;
    v9 = *(unsigned __int8 *)(a2 + 104);
    *(_QWORD *)(a2 + 88) = "min_version";
    *(_QWORD *)(a2 + 96) = 11;
    if (!v9)
      *(_BYTE *)(a2 + 104) = 1;
    v10 = (char *)sub_2245448E0((uint64_t *)a2);
    ++*(_QWORD *)(a2 + 112);
    v17 = 0;
    sub_22451CAD4(v10, &v17);
    v11 = v17;
    if (!HIDWORD(v17))
    {
      if (v17 >= 3)
      {
        v16 = sub_223BB9C9C();
        sub_22455C3A8((std::string *)v16, v11, 2u);
      }
LABEL_11:
      if (v8 >= 2)
        v12 = 2;
      else
        v12 = v8;
      if (v12 >= 2)
        goto LABEL_15;
LABEL_17:
      sub_223BBA04C(a2, (uint64_t)a3);
      goto LABEL_18;
    }
LABEL_19:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24EC7AC38;
    __cxa_throw(exception, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
  }
  if (v17 < 2)
    goto LABEL_17;
LABEL_15:
  sub_223BBA6C4(a2, a3);
LABEL_18:
  v13 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v13 - 8);
  v14 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(a2 + 48) = v13 - 8;
  *(_QWORD *)(a2 + 72) = v14 - 8;
}

__int128 *sub_223BB9C9C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578EB18);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578EB18))
    return &xmmword_25578EB00;
  v2 = sub_223BB9D78();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&xmmword_25578EB00, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25578EB10 = v2->__r_.__value_.__r.__words[2];
    xmmword_25578EB00 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578EB00, &dword_22314D000);
  __cxa_guard_release(&qword_25578EB18);
  return &xmmword_25578EB00;
}

void sub_223BB9D60(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578EB18);
  _Unwind_Resume(a1);
}

std::string *sub_223BB9D78()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578EB38);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578EB38))
    return &stru_25578EB20;
  sub_223BB9E68((uint64_t)__p);
  sub_2232A0AA8((char *)__p, &stru_25578EB20);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578EB20, &dword_22314D000);
  __cxa_guard_release(&qword_25578EB38);
  return &stru_25578EB20;
}

void sub_223BB9E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25578EB38);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25578EB38);
  _Unwind_Resume(a1);
}

void sub_223BB9E68(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25578EB58);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25578EB58))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::imgio::ImageSample<>]", qword_25578EB40);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578EB40, &dword_22314D000);
    __cxa_guard_release(&qword_25578EB58);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25578EB78);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25578EB78))
  {
    v5 = sub_2231A38CC(qword_25578EB40, "<", 0);
    sub_2231A37C8(qword_25578EB40, 0, v5, qword_25578EB60);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578EB60, &dword_22314D000);
    __cxa_guard_release(&qword_25578EB78);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25578EB98);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25578EB98))
  {
    sub_224573040((uint64_t)qword_25578EB60, (uint64_t)&xmmword_25578EB80);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578EB80, &dword_22314D000);
    __cxa_guard_release(&qword_25578EB98);
  }
  if (byte_25578EB97 < 0)
  {
    sub_223197FA4((_BYTE *)a1, (void *)xmmword_25578EB80, *((unint64_t *)&xmmword_25578EB80 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25578EB80;
    *(_QWORD *)(a1 + 16) = unk_25578EB90;
  }
}

void sub_223BBA004(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578EB98);
  _Unwind_Resume(a1);
}

void sub_223BBA01C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578EB78);
  _Unwind_Resume(a1);
}

void sub_223BBA034(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578EB58);
  _Unwind_Resume(a1);
}

void sub_223BBA04C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  char *v11;
  int v12;
  int v13;
  int v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *exception;
  unsigned __int16 v29;
  __int128 v30;
  int v31;
  uint64_t (**v32)();
  __int128 v33;
  __int128 v34;
  _BYTE v35[22];
  unsigned int v36;
  _BYTE v37[40];
  _BYTE v38[22];
  void *__p;
  char v40;
  int v41;
  _QWORD v42[21];
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[22];
  char v47;

  *(_QWORD *)v37 = &off_24EC1F958;
  sub_2231B3FDC((uint64_t)&v37[8]);
  sub_22416B680((uint64_t)&v29, (uint64_t)v37, 0);
  v4 = *(std::__shared_weak_count **)&v37[16];
  if (*(_QWORD *)&v37[16])
  {
    v5 = (unint64_t *)(*(_QWORD *)&v37[16] + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v31 = 0;
  v7 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "io_format";
  *(_QWORD *)(a1 + 96) = 9;
  if (!v7)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)v37 = &v29;
  sub_223BBABC8(a1, (_WORD **)v37);
  v8 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "structure";
  *(_QWORD *)(a1 + 96) = 9;
  if (!v8)
    *(_BYTE *)(a1 + 104) = 1;
  v9 = *(_DWORD *)(a1 + 8);
  sub_224544628(a1);
  v10 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v10)
    *(_BYTE *)(a1 + 104) = 1;
  v11 = (char *)sub_2245448E0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)v37 = 0;
  sub_22451CAD4(v11, v37);
  if (*(_DWORD *)&v37[4])
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24EC7AC38;
    __cxa_throw(exception, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
  }
  v12 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "image_format";
  *(_QWORD *)(a1 + 96) = 12;
  if (v12)
  {
    if (v9 >= 1)
      goto LABEL_15;
  }
  else
  {
    *(_BYTE *)(a1 + 104) = 1;
    if (v9 >= 1)
    {
LABEL_15:
      *(_QWORD *)v37 = &v30;
      sub_223BBB1D0(a1, (_QWORD **)v37);
      v13 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "size";
      *(_QWORD *)(a1 + 96) = 4;
      if (!v13)
        *(_BYTE *)(a1 + 104) = 1;
      goto LABEL_21;
    }
  }
  *(_QWORD *)v37 = &v30;
  sub_223BBB1D0(a1, (_QWORD **)v37);
  v14 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "size";
  *(_QWORD *)(a1 + 96) = 4;
  if (!v14)
    *(_BYTE *)(a1 + 104) = 1;
LABEL_21:
  *(_QWORD *)v37 = 2;
  *(_QWORD *)&v37[8] = (char *)&v30 + 8;
  v15 = (char *)sub_2245448E0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  sub_224545A98(v15, (uint64_t)v37);
  v16 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v16 - 8);
  v17 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a1 + 48) = v16 - 8;
  *(_QWORD *)(a1 + 72) = v17 - 8;
  LODWORD(v16) = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "image_data";
  *(_QWORD *)(a1 + 96) = 10;
  if (!(_DWORD)v16)
    *(_BYTE *)(a1 + 104) = 1;
  sub_224544628(a1);
  if (v29 == 1)
  {
    sub_22416B268((uint64_t *)&v30, v31);
    if (v36 != -1)
      ((void (*)(uint64_t *, uint64_t (***)()))off_24EC6D660[v36])(&v43, &v32);
    v32 = &off_24EC1F958;
    v33 = *(_OWORD *)&v37[8];
    v34 = *(_OWORD *)&v37[24];
    *(_OWORD *)v35 = *(_OWORD *)v38;
    *(_QWORD *)&v35[14] = *(_QWORD *)&v38[14];
    v36 = 1;
    sub_22416E278((const void *)a1, (uint64_t)&v32);
    goto LABEL_44;
  }
  v18 = sub_22416E0BC(v29);
  sub_223BBB3F4((uint64_t)v37, (uint64_t *)a1);
  sub_2231B3838(v42, v18, (uint64_t)&v43);
  if (v36 != -1)
  {
    if (v36 == 1)
    {
      v19 = v44;
      v44 = 0uLL;
      v20 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
      v33 = v19;
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v34 = v45;
      *(_OWORD *)v35 = *(_OWORD *)v46;
      *(_QWORD *)&v35[14] = *(_QWORD *)&v46[14];
      v23 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
      if (*((_QWORD *)&v44 + 1))
      {
        v24 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      goto LABEL_41;
    }
    ((void (*)(char *, uint64_t (***)()))off_24EC5FFD0[v36])(&v47, &v32);
  }
  v32 = &off_24EC1F958;
  v33 = v44;
  v44 = 0uLL;
  v34 = v45;
  *(_OWORD *)v35 = *(_OWORD *)v46;
  *(_QWORD *)&v35[14] = *(_QWORD *)&v46[14];
  v36 = 1;
LABEL_41:
  std::istream::~istream();
  *(_QWORD *)v37 = MEMORY[0x24BEDB848] + 16;
  if (v40 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
LABEL_44:
  *(_WORD *)v37 = v29;
  *(_OWORD *)&v37[8] = v30;
  v26 = v36;
  *(_DWORD *)&v37[24] = v31;
  v37[32] = 0;
  v41 = -1;
  if (v36 == -1)
  {
    *(_OWORD *)a2 = *(_OWORD *)v37;
    *(_OWORD *)(a2 + 12) = *(_OWORD *)&v37[12];
    v27 = *(unsigned int *)(a2 + 96);
    if ((_DWORD)v27 != -1)
    {
      ((void (*)(uint64_t *, uint64_t))off_24EC5FFD0[v27])(&v43, a2 + 32);
      *(_DWORD *)(a2 + 96) = -1;
    }
  }
  else
  {
    ((void (*)(char *, _BYTE *, uint64_t (***)()))off_24EC60008[v36])(&v47, &v37[32], &v32);
    v41 = v26;
    *(_OWORD *)a2 = *(_OWORD *)v37;
    *(_OWORD *)(a2 + 12) = *(_OWORD *)&v37[12];
    v43 = a2 + 32;
    ((void (*)(uint64_t *))off_24EC60018[v26])(&v43);
  }
  if (v41 != -1)
    ((void (*)(uint64_t *, _BYTE *))off_24EC5FFD0[v41])(&v43, &v37[32]);
  if (v36 != -1)
    ((void (*)(_BYTE *, uint64_t (***)()))off_24EC5FFD0[v36])(v37, &v32);
}

void sub_223BBA5FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  sub_2231B394C((uint64_t)&a22);
  sub_2231B55F0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223BBA620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  sub_22319A588((uint64_t)&a22);
  sub_2231B55F0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223BBA63C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34)
{
  uint64_t v34;
  uint64_t v35;

  if (a34 != -1)
    ((void (*)(uint64_t, uint64_t))off_24EC5FFD0[a34])(v35 - 136, v34);
  sub_2231B55F0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223BBA6C4(uint64_t a1, unsigned __int16 *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  char *v8;
  unsigned int v9;
  int v10;
  char *v11;
  unsigned int v12;
  int v13;
  int v14;
  char *v15;
  int v16;
  int v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *exception;
  __int128 *v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[22];
  void *__p;
  char v39;
  _QWORD v40[21];
  _BYTE v41[24];
  __int128 v42;
  _OWORD v43[2];
  char v44;

  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "io_format";
  *(_QWORD *)(a1 + 96) = 9;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v34 = (unint64_t)a2;
  sub_223BBABC8(a1, (_WORD **)&v34);
  v5 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "structure";
  *(_QWORD *)(a1 + 96) = 9;
  if (!v5)
    *(_BYTE *)(a1 + 104) = 1;
  v6 = *(_DWORD *)(a1 + 8);
  sub_224544628(a1);
  v7 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v7)
    *(_BYTE *)(a1 + 104) = 1;
  v8 = (char *)sub_2245448E0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v34 = 0;
  sub_22451CAD4(v8, &v34);
  v9 = v34;
  if (HIDWORD(v34))
    goto LABEL_51;
  if (v6 < 1)
    goto LABEL_17;
  if (v6 == 2 && v34 >= 2)
  {
    v10 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "min_version";
    *(_QWORD *)(a1 + 96) = 11;
    if (!v10)
      *(_BYTE *)(a1 + 104) = 1;
    v11 = (char *)sub_2245448E0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v34 = 0;
    sub_22451CAD4(v11, &v34);
    v12 = v34;
    if (!HIDWORD(v34))
    {
      if (v34 >= 3)
      {
        v33 = sub_223BBAE20();
        sub_22455C3A8((std::string *)v33, v12, 2u);
      }
      goto LABEL_15;
    }
LABEL_51:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24EC7AC38;
    __cxa_throw(exception, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
  }
LABEL_15:
  if (v9 >= 2)
    v9 = 2;
LABEL_17:
  if (v9 < 2)
  {
    *(_OWORD *)v41 = 1uLL;
    v16 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "image_format";
    *(_QWORD *)(a1 + 96) = 12;
    if (!v16)
      *(_BYTE *)(a1 + 104) = 1;
    v34 = (unint64_t)v41;
    sub_223BBB1D0(a1, (_QWORD **)&v34);
    v17 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "size";
    *(_QWORD *)(a1 + 96) = 4;
    if (!v17)
      *(_BYTE *)(a1 + 104) = 1;
    v34 = 2;
    *(_QWORD *)&v35 = &v41[8];
    v18 = (char *)sub_2245448E0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_224545A98(v18, (uint64_t)&v34);
    *(_OWORD *)(a2 + 4) = *(_OWORD *)v41;
  }
  else
  {
    v13 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "image_format";
    *(_QWORD *)(a1 + 96) = 12;
    if (!v13)
      *(_BYTE *)(a1 + 104) = 1;
    v34 = (unint64_t)(a2 + 4);
    sub_223BBB1D0(a1, (_QWORD **)&v34);
    v14 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "size";
    *(_QWORD *)(a1 + 96) = 4;
    if (!v14)
      *(_BYTE *)(a1 + 104) = 1;
    v34 = 2;
    *(_QWORD *)&v35 = a2 + 8;
    v15 = (char *)sub_2245448E0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_224545A98(v15, (uint64_t)&v34);
  }
  v19 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v19 - 8);
  v20 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v20 - 8);
  *(_QWORD *)(a1 + 48) = v19 - 8;
  *(_QWORD *)(a1 + 72) = v20 - 8;
  LODWORD(v19) = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "image_data";
  *(_QWORD *)(a1 + 96) = 10;
  if ((_DWORD)v19)
  {
    sub_224544628(a1);
    v21 = *a2;
    if (v21 == 1)
    {
LABEL_30:
      sub_22416B404((uint64_t *)a2 + 1, *((_DWORD *)a2 + 6));
      v22 = *((unsigned int *)a2 + 24);
      if ((_DWORD)v22 != -1)
        ((void (*)(_BYTE *, unsigned __int16 *))off_24EC6D660[v22])(v41, a2 + 16);
      *((_QWORD *)a2 + 4) = &off_24EC1F958;
      *(_OWORD *)(a2 + 20) = v35;
      *(_OWORD *)(a2 + 28) = v36;
      *(_OWORD *)(a2 + 36) = *(_OWORD *)v37;
      *(_QWORD *)(a2 + 43) = *(_QWORD *)&v37[14];
      *((_DWORD *)a2 + 24) = 1;
      sub_22416E278((const void *)a1, (uint64_t)(a2 + 16));
      return;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 104) = 1;
    sub_224544628(a1);
    v21 = *a2;
    if (v21 == 1)
      goto LABEL_30;
  }
  v23 = sub_22416E0BC(v21);
  sub_223BBB3F4((uint64_t)&v34, (uint64_t *)a1);
  sub_2231B3838(v40, v23, (uint64_t)v41);
  v24 = *((unsigned int *)a2 + 24);
  if ((_DWORD)v24 != -1)
  {
    if ((_DWORD)v24 == 1)
    {
      v25 = *(_OWORD *)&v41[8];
      *(_QWORD *)&v41[8] = 0;
      *(_QWORD *)&v41[16] = 0;
      v26 = (std::__shared_weak_count *)*((_QWORD *)a2 + 6);
      *(_OWORD *)(a2 + 20) = v25;
      if (v26)
      {
        p_shared_owners = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(p_shared_owners);
        while (__stlxr(v28 - 1, p_shared_owners));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      *(_OWORD *)(a2 + 28) = v42;
      *(_OWORD *)(a2 + 36) = v43[0];
      *(_QWORD *)(a2 + 43) = *(_QWORD *)((char *)v43 + 14);
      v29 = *(std::__shared_weak_count **)&v41[16];
      if (*(_QWORD *)&v41[16])
      {
        v30 = (unint64_t *)(*(_QWORD *)&v41[16] + 8);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      goto LABEL_48;
    }
    ((void (*)(char *, unsigned __int16 *))off_24EC5FFD0[v24])(&v44, a2 + 16);
  }
  *((_QWORD *)a2 + 4) = &off_24EC1F958;
  *(_OWORD *)(a2 + 20) = *(_OWORD *)&v41[8];
  *(_QWORD *)&v41[8] = 0;
  *(_QWORD *)&v41[16] = 0;
  *(_OWORD *)(a2 + 28) = v42;
  *(_OWORD *)(a2 + 36) = v43[0];
  *(_QWORD *)(a2 + 43) = *(_QWORD *)((char *)v43 + 14);
  *((_DWORD *)a2 + 24) = 1;
LABEL_48:
  std::istream::~istream();
  v34 = MEMORY[0x24BEDB848] + 16;
  if (v39 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
}

void sub_223BBABB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2231B394C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223BBABC8(uint64_t a1, _WORD **a2)
{
  char *v4;
  void **v5;
  int v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *exception;
  void *__p[2];
  uint64_t v17;
  __int16 v18;
  __int128 v19;
  uint64_t v20;

  if ((*(_BYTE *)(a1 + 12) & 2) != 0)
  {
    __p[0] = 0;
    __p[1] = 0;
    v17 = 0;
    v5 = (void **)sub_2245448E0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v20 = 0;
    v19 = 0uLL;
    sub_22451CFD4(v5, (uint64_t)&v19);
    v17 = v20;
    *(_OWORD *)__p = v19;
    v6 = SHIBYTE(v20);
    v7 = (char *)v19;
    v8 = operator new();
    v9 = v8;
    if (v6 >= 0)
      v10 = (char *)__p;
    else
      v10 = v7;
    sub_22456E918(v8, v10);
    *(_QWORD *)&v19 = v9;
    v18 = 0;
    sub_22416D4C8((uint64_t *)v9, &v18);
    v11 = v18;
    v12 = MEMORY[0x24BEDB7F0];
    v13 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v9 = *MEMORY[0x24BEDB7F0];
    v14 = *(_QWORD *)(v12 + 72);
    *(_QWORD *)(v9 + *(_QWORD *)(v13 - 24)) = *(_QWORD *)(v12 + 64);
    *(_QWORD *)(v9 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v9 + 16) = v14;
    if (*(char *)(v9 + 111) < 0)
      operator delete(*(void **)(v9 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v9 + 128);
    MEMORY[0x227684CE8](v9, 0x10B2C40EED050F3);
    **a2 = v11;
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
  }
  else
  {
    v4 = (char *)sub_2245448E0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    *(_QWORD *)&v19 = 0;
    sub_22451CAD4(v4, &v19);
    if ((unint64_t)v19 >= 0x10000)
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = &off_24EC7AC38;
      __cxa_throw(exception, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
    }
    **a2 = v19;
  }
}

void sub_223BBAD94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_22456E764((uint64_t *)&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

__int128 *sub_223BBAE20()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578EBB8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578EBB8))
    return &xmmword_25578EBA0;
  v2 = sub_223BBAEFC();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&xmmword_25578EBA0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25578EBB0 = v2->__r_.__value_.__r.__words[2];
    xmmword_25578EBA0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578EBA0, &dword_22314D000);
  __cxa_guard_release(&qword_25578EBB8);
  return &xmmword_25578EBA0;
}

void sub_223BBAEE4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578EBB8);
  _Unwind_Resume(a1);
}

std::string *sub_223BBAEFC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578EBD8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578EBD8))
    return &stru_25578EBC0;
  sub_223BBAFEC((uint64_t)__p);
  sub_2232A0AA8((char *)__p, &stru_25578EBC0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578EBC0, &dword_22314D000);
  __cxa_guard_release(&qword_25578EBD8);
  return &stru_25578EBC0;
}

void sub_223BBAFAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25578EBD8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25578EBD8);
  _Unwind_Resume(a1);
}

void sub_223BBAFEC(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25578EBF8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25578EBF8))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::imgio::ImageStructureSample<>]", qword_25578EBE0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578EBE0, &dword_22314D000);
    __cxa_guard_release(&qword_25578EBF8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25578EC18);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25578EC18))
  {
    v5 = sub_2231A38CC(qword_25578EBE0, "<", 0);
    sub_2231A37C8(qword_25578EBE0, 0, v5, qword_25578EC00);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578EC00, &dword_22314D000);
    __cxa_guard_release(&qword_25578EC18);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25578EC38);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25578EC38))
  {
    sub_224573040((uint64_t)qword_25578EC00, (uint64_t)&xmmword_25578EC20);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578EC20, &dword_22314D000);
    __cxa_guard_release(&qword_25578EC38);
  }
  if (byte_25578EC37 < 0)
  {
    sub_223197FA4((_BYTE *)a1, (void *)xmmword_25578EC20, *((unint64_t *)&xmmword_25578EC20 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25578EC20;
    *(_QWORD *)(a1 + 16) = unk_25578EC30;
  }
}

void sub_223BBB188(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578EC38);
  _Unwind_Resume(a1);
}

void sub_223BBB1A0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578EC18);
  _Unwind_Resume(a1);
}

void sub_223BBB1B8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578EBF8);
  _Unwind_Resume(a1);
}

void sub_223BBB1D0(uint64_t a1, _QWORD **a2)
{
  char *v4;
  void **v5;
  int v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *__p[2];
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  if ((*(_BYTE *)(a1 + 12) & 2) != 0)
  {
    __p[0] = 0;
    __p[1] = 0;
    v16 = 0;
    v5 = (void **)sub_2245448E0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v19 = 0;
    v18 = 0uLL;
    sub_22451CFD4(v5, (uint64_t)&v18);
    v16 = v19;
    *(_OWORD *)__p = v18;
    v6 = SHIBYTE(v19);
    v7 = (char *)v18;
    v8 = operator new();
    v9 = v8;
    if (v6 >= 0)
      v10 = (char *)__p;
    else
      v10 = v7;
    sub_22456E918(v8, v10);
    v17 = 0;
    *(_QWORD *)&v18 = v9;
    sub_22416DB34((uint64_t *)v9, &v17);
    v11 = v17;
    v12 = MEMORY[0x24BEDB7F0];
    v13 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v9 = *MEMORY[0x24BEDB7F0];
    v14 = *(_QWORD *)(v12 + 72);
    *(_QWORD *)(v9 + *(_QWORD *)(v13 - 24)) = *(_QWORD *)(v12 + 64);
    *(_QWORD *)(v9 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v9 + 16) = v14;
    if (*(char *)(v9 + 111) < 0)
      operator delete(*(void **)(v9 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v9 + 128);
    MEMORY[0x227684CE8](v9, 0x10B2C40EED050F3);
    **a2 = v11;
    if (SHIBYTE(v16) < 0)
      operator delete(__p[0]);
  }
  else
  {
    v4 = (char *)sub_2245448E0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    *(_QWORD *)&v18 = 0;
    sub_22451CAD4(v4, &v18);
    **a2 = v18;
  }
}

void sub_223BBB368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_22456E764((uint64_t *)&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_223BBB3F4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void **v5;
  uint64_t v6;
  char *v7;
  std::string::size_type v8;
  std::string *p_n;
  char *v10;
  _QWORD v12[2];
  std::string __n;

  v4 = std::streambuf::basic_streambuf();
  *(_QWORD *)v4 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(v4 + 64) = 0u;
  v5 = (void **)(v4 + 64);
  v6 = MEMORY[0x24BEDB820];
  *(_OWORD *)(v4 + 80) = 0u;
  *(_QWORD *)(v4 + 104) = v6 + 24;
  *(_DWORD *)(v4 + 96) = 24;
  *(_QWORD *)(v4 + 120) = v6 + 64;
  *(_QWORD *)(v4 + 112) = 0;
  std::ios_base::init((std::ios_base *)(v4 + 120), (void *)a1);
  *(_QWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = -1;
  v7 = (char *)sub_2245448E0(a2);
  ++a2[14];
  __n.__r_.__value_.__r.__words[0] = 0;
  sub_22451CAD4(v7, &__n);
  v8 = __n.__r_.__value_.__r.__words[0];
  memset(&__n, 0, sizeof(__n));
  if (v8 && (std::string::append(&__n, v8, 0), SHIBYTE(__n.__r_.__value_.__r.__words[2]) < 0))
  {
    p_n = (std::string *)__n.__r_.__value_.__r.__words[0];
    if (!__n.__r_.__value_.__r.__words[0])
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      p_n = 0;
    }
  }
  else
  {
    p_n = &__n;
  }
  v12[0] = v8;
  v12[1] = p_n;
  v10 = (char *)sub_2245448E0(a2);
  ++a2[14];
  sub_2245449F8(v10, (uint64_t)v12);
  if (*(char *)(a1 + 87) < 0)
    operator delete(*v5);
  *(std::string *)v5 = __n;
  *((_BYTE *)&__n.__r_.__value_.__s + 23) = 0;
  __n.__r_.__value_.__s.__data_[0] = 0;
  sub_2231B5488(a1);
  if (SHIBYTE(__n.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__n.__r_.__value_.__l.__data_);
  return a1;
}

void sub_223BBB590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (a17 < 0)
    operator delete(__p);
  std::istream::~istream();
  sub_2231A01E4(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_223BBB5FC(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _BYTE v12[2];
  _BYTE v13[2];

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 56) = 0;
  if (*(_BYTE *)(a2 + 56))
  {
    *(_QWORD *)a1 = &off_24EC21328;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 34) = *(_OWORD *)(a2 + 34);
    *(_OWORD *)(a1 + 24) = v4;
    *(_BYTE *)(a1 + 56) = 1;
  }
  v5 = *(_OWORD *)(a2 + 64);
  v6 = *(_OWORD *)(a2 + 76);
  *(_BYTE *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 76) = v6;
  *(_OWORD *)(a1 + 64) = v5;
  *(_DWORD *)(a1 + 160) = -1;
  v7 = *(unsigned int *)(a2 + 160);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(_BYTE *, uint64_t, uint64_t))off_24EC60008[v7])(v12, a1 + 96, a2 + 96);
    *(_DWORD *)(a1 + 160) = v7;
  }
  v8 = *(_OWORD *)(a2 + 168);
  v9 = *(_OWORD *)(a2 + 180);
  *(_BYTE *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 180) = v9;
  *(_OWORD *)(a1 + 168) = v8;
  *(_DWORD *)(a1 + 264) = -1;
  v10 = *(unsigned int *)(a2 + 264);
  if ((_DWORD)v10 != -1)
  {
    ((void (*)(_BYTE *, uint64_t, uint64_t))off_24EC60008[v10])(v13, a1 + 200, a2 + 200);
    *(_DWORD *)(a1 + 264) = v10;
  }
  return a1;
}

void sub_223BBB708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v17 = *(unsigned int *)(v13 + 264);
  if ((_DWORD)v17 != -1)
    ((void (*)(char *, uint64_t))off_24EC5FFD0[v17])(&a13, v15);
  *(_DWORD *)(v13 + 264) = -1;
  sub_22319A588(v14);
  sub_2232BBF74(v13);
  _Unwind_Resume(a1);
}

void sub_223BBB754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, char a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v12 + 160);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))off_24EC5FFD0[v15])(&a12, v13);
  *(_DWORD *)(v12 + 160) = -1;
  sub_2232BBF74(v12);
  _Unwind_Resume(a1);
}

void sub_223BBB798(uint64_t a1, uint64_t a2)
{
  int v4;
  void ***v5;
  unsigned __int8 *v6;
  int v7;
  void **v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void ***v16;
  void ***v17;
  void ***v18;
  __int128 v19;

  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "dictionary";
  *(_QWORD *)(a1 + 96) = 10;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (void ***)operator new();
  *v5 = 0;
  v5[1] = 0;
  v18 = v5;
  v6 = (unsigned __int8 *)sub_2245448E0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  sub_22451BC6C((uint64_t)&v19, v6);
  v7 = *(unsigned __int8 *)v5;
  *(_BYTE *)v5 = v19;
  LOBYTE(v19) = v7;
  v8 = v5[1];
  v5[1] = (void **)*((_QWORD *)&v19 + 1);
  *((_QWORD *)&v19 + 1) = v8;
  sub_22345337C((void ***)&v19 + 1, v7);
  v17 = v5;
  sub_2245198EC((uint64_t *)&v17, &v19);
  v9 = v19;
  v19 = 0uLL;
  v10 = *(std::__shared_weak_count **)(a2 + 8);
  *(_OWORD *)a2 = v9;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v18;
  if (v18)
  {
    sub_22345337C(v18 + 1, *(unsigned __int8 *)v18);
    MEMORY[0x227684CE8](v16, 0x1022C40B06DCE69);
  }
}

void sub_223BBB910(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2245357D0((void ****)va);
  _Unwind_Resume(a1);
}

void sub_223BBB924(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2245357D0((void ****)va);
  _Unwind_Resume(a1);
}

void sub_223BBB938(uint64_t a1, float *a2, unsigned int a3)
{
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  char *v10;
  _QWORD v11[2];

  if (a3 < 2)
  {
    sub_223BBBA5C((uint64_t)v11, a1, (uint64_t)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "focal_length";
    *(_QWORD *)(a1 + 96) = 12;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = sub_2245448E0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_224545EA4(v6, a2);
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "principal_point";
    *(_QWORD *)(a1 + 96) = 15;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    v8 = sub_2245448E0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_224545EA4(v8, a2 + 2);
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "image_size";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v11[0] = 2;
    v11[1] = a2 + 4;
    v10 = (char *)sub_2245448E0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_224545A98(v10, (uint64_t)v11);
  }
}

void sub_223BBBA5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  char *v12;
  float32x2_t v13;
  float32x2_t *v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v22;
  float32x2_t v23;
  int32x2_t v24;
  int8x16_t v25;
  int8x16_t *v26;
  uint64_t v27;
  char *v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  int8x16_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  int8x16_t *v42;
  std::__shared_weak_count *v43;
  _QWORD v44[2];

  v39 = 0;
  v40 = 0;
  v41 = 0;
  v5 = (char *)operator new(0x78uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24EC6CCC0;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24EC20868;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 56) = v6;
  *(int32x4_t *)(v5 + 72) = v6;
  *(int32x4_t *)(v5 + 88) = v6;
  *((_DWORD *)v5 + 26) = 2143289344;
  *((_QWORD *)v5 + 14) = 0;
  v43 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24EC207B8;
  v42 = (int8x16_t *)(v5 + 24);
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "focal_length";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v8 = sub_2245448E0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_224545EA4(v8, (float *)&v39);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "principal_point";
  *(_QWORD *)(a2 + 96) = 15;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  v10 = sub_2245448E0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_224545EA4(v10, (float *)&v40);
  v11 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "image_size";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v11)
    *(_BYTE *)(a2 + 104) = 1;
  v44[0] = 2;
  v44[1] = &v41;
  v12 = (char *)sub_2245448E0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_224545A98(v12, (uint64_t)v44);
  v13 = v41;
  v14 = (float32x2_t *)v42;
  v15 = v39;
  v16 = v40;
  __asm { FMOV            V2.2S, #1.0 }
  v22 = vdiv_f32(_D2, v39);
  v23 = vmul_f32(v22, vneg_f32(v40));
  v24 = vzip1_s32((int32x2_t)v39, (int32x2_t)v40);
  v25.i64[0] = v24.u32[0];
  v25.i64[1] = v24.u32[1];
  v42[1] = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)v39, (int32x2_t)v40), 0x20uLL), v25);
  v14[4] = v22;
  v14[5] = v23;
  v14[6].i32[0] = v15.i32[0];
  v14[7] = 0;
  v14[6].i32[1] = 0;
  v14[8].i32[0] = v15.i32[1];
  v14[8].i32[1] = 0;
  v14[9] = v16;
  v14[10].i32[0] = 1065353216;
  v14[11] = v13;
  v26 = v42;
  v38 = v42[1];
  v27 = v42[5].i64[1];
  v28 = (char *)operator new(0x78uLL);
  *((_QWORD *)v28 + 1) = 0;
  *((_QWORD *)v28 + 2) = 0;
  *(_QWORD *)v28 = &off_24EC6CE00;
  v29 = v26[1];
  *((_QWORD *)v28 + 4) = &off_24EC20868;
  *(int8x16_t *)(v28 + 40) = v29;
  *(int8x16_t *)(v28 + 56) = v26[2];
  v30 = v26[3];
  v31 = v26[4];
  *((_DWORD *)v28 + 26) = v26[5].i32[0];
  *(int8x16_t *)(v28 + 88) = v31;
  *(int8x16_t *)(v28 + 72) = v30;
  *((_QWORD *)v28 + 3) = &off_24EC207B8;
  *((_QWORD *)v28 + 14) = v27;
  *(int8x16_t *)a3 = v38;
  *(_QWORD *)(a3 + 16) = v27;
  *(_QWORD *)(a3 + 24) = v28 + 24;
  v32 = *(std::__shared_weak_count **)(a3 + 32);
  *(_QWORD *)(a3 + 32) = v28;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v43;
  if (v43)
  {
    v36 = (unint64_t *)&v43->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_223BBBD14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_22365B530((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BBBD28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_22365B530((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BBBD3C(uint64_t a1, uint64_t a2)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *exception;
  _BYTE v9[20];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD v19[2];
  unint64_t v20;

  if (*(_BYTE *)sub_2245448E0((uint64_t *)a1))
  {
    *(_WORD *)v9 = 0;
    v9[2] = 0;
    *(_OWORD *)&v9[4] = 0uLL;
    v10 = 0u;
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    memset(v19, 0, 25);
    sub_224544628(a1);
    v4 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "version";
    *(_QWORD *)(a1 + 96) = 7;
    if (!v4)
      *(_BYTE *)(a1 + 104) = 1;
    v5 = (char *)sub_2245448E0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v20 = 0;
    sub_22451CAD4(v5, &v20);
    if (HIDWORD(v20))
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = &off_24EC7AC38;
      __cxa_throw(exception, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
    }
    sub_223BBBF4C(a1, (uint64_t)v9, v20);
    v6 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v6 - 8);
    v7 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(v7 - 8);
    *(_QWORD *)(a1 + 48) = v6 - 8;
    *(_QWORD *)(a1 + 72) = v7 - 8;
    if (*(_BYTE *)(a2 + 200))
    {
      sub_223255CAC(a2 + 24);
      *(_BYTE *)(a2 + 200) = 0;
    }
    *(_OWORD *)a2 = *(_OWORD *)v9;
    *(_DWORD *)(a2 + 16) = *(_DWORD *)&v9[16];
    *(_OWORD *)(a2 + 24) = v10;
    *(_OWORD *)(a2 + 40) = v11;
    *(_OWORD *)(a2 + 56) = v12;
    *(_OWORD *)(a2 + 72) = v13;
    *(_OWORD *)(a2 + 88) = v14;
    *(_OWORD *)(a2 + 104) = v15;
    *(_OWORD *)(a2 + 120) = v16;
    *(_OWORD *)(a2 + 136) = v17;
    *(_OWORD *)(a2 + 152) = v18;
    *(_OWORD *)(a2 + 168) = v19[0];
    *(_QWORD *)(a2 + 184) = *(_QWORD *)&v19[1];
    *(_BYTE *)(a2 + 192) = BYTE8(v19[1]);
    *(_BYTE *)(a2 + 200) = 1;
  }
  else
  {
    ++*(_QWORD *)(a1 + 112);
    if (*(_BYTE *)(a2 + 200))
    {
      sub_223255CAC(a2 + 24);
      *(_BYTE *)(a2 + 200) = 0;
    }
  }
}

void sub_223BBBF38(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223255CAC(v1);
  _Unwind_Resume(a1);
}

void sub_223BBBF4C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  int v11;
  char *v12;
  int v13;
  unsigned __int8 *v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  int v25;
  unint64_t v26;
  float *v27;
  float **v28;
  float *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  int v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  int v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 *v64;
  int v65;
  unint64_t v66;
  float *v67;
  float **v68;
  float *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned __int8 *v74;
  int v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  _QWORD *exception;
  unint64_t v85;
  uint64_t v86;

  v6 = (char *)sub_2245448E0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  LOBYTE(v85) = 0;
  sub_22451CECC(v6, &v85);
  *(_BYTE *)a2 = v85;
  v7 = (char *)sub_2245448E0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  LOBYTE(v85) = 0;
  sub_22451CECC(v7, &v85);
  *(_BYTE *)(a2 + 1) = v85;
  v8 = (char *)sub_2245448E0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v85 = 0;
  sub_22451CC1C(v8, &v85);
  if (v85 != (int)v85)
    goto LABEL_105;
  *(_DWORD *)(a2 + 4) = v85;
  v9 = (char *)sub_2245448E0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v85 = 0;
  sub_22451CC1C(v9, &v85);
  *(_QWORD *)(a2 + 8) = v85;
  v10 = (char *)sub_2245448E0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v85 = 0;
  sub_22451CC1C(v10, &v85);
  if (v85 != (int)v85)
    goto LABEL_105;
  *(_DWORD *)(a2 + 16) = v85;
  if (a3 < 2)
    return;
  sub_224544628(a1);
  v11 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v11)
    *(_BYTE *)(a1 + 104) = 1;
  v12 = (char *)sub_2245448E0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v85 = 0;
  sub_22451CAD4(v12, &v85);
  v13 = v85;
  if (HIDWORD(v85))
    goto LABEL_105;
  sub_224544628(a1);
  v14 = *(unsigned __int8 **)(a1 + 32);
  v15 = *v14;
  if (v15 == 2)
  {
    v16 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v14 + 1) + 8) - **((_QWORD **)v14 + 1)) >> 4;
  }
  else if (v15 == 1)
  {
    v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v14 + 1) + 8) - **((_QWORD **)v14 + 1)) >> 3);
  }
  else
  {
    if (!*v14)
    {
      v16 = 0;
      v18 = (uint64_t *)(a2 + 32);
      v17 = *(_QWORD *)(a2 + 32);
      v19 = *(_QWORD *)(a2 + 24);
      v20 = (v17 - v19) >> 4;
      goto LABEL_16;
    }
    v16 = 1;
  }
  v18 = (uint64_t *)(a2 + 32);
  v17 = *(_QWORD *)(a2 + 32);
  v19 = *(_QWORD *)(a2 + 24);
  v20 = (v17 - v19) >> 4;
  if (v16 > v20)
  {
    sub_2232C68D0((char **)(a2 + 24), v16 - v20);
    v19 = *(_QWORD *)(a2 + 24);
    v17 = *v18;
    goto LABEL_18;
  }
LABEL_16:
  if (v20 > v16)
  {
    v17 = v19 + 16 * v16;
    *v18 = v17;
  }
LABEL_18:
  while (v19 != v17)
  {
    v85 = 16;
    v86 = v19;
    v21 = (char *)sub_2245448E0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2245449F8(v21, (uint64_t)&v85);
    v19 += 16;
  }
  v22 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v22 - 8);
  v23 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v23 - 8);
  *(_QWORD *)(a1 + 48) = v22 - 8;
  *(_QWORD *)(a1 + 72) = v23 - 8;
  sub_224544628(a1);
  v24 = *(unsigned __int8 **)(a1 + 32);
  v25 = *v24;
  if (v25 == 2)
  {
    v26 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v24 + 1) + 8) - **((_QWORD **)v24 + 1)) >> 4;
  }
  else if (v25 == 1)
  {
    v26 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v24 + 1) + 8) - **((_QWORD **)v24 + 1)) >> 3);
  }
  else
  {
    if (!*v24)
    {
      v26 = 0;
      v28 = (float **)(a2 + 56);
      v27 = *(float **)(a2 + 56);
      v29 = *(float **)(a2 + 48);
      v30 = ((char *)v27 - (char *)v29) >> 6;
      goto LABEL_29;
    }
    v26 = 1;
  }
  v28 = (float **)(a2 + 56);
  v27 = *(float **)(a2 + 56);
  v29 = *(float **)(a2 + 48);
  v30 = ((char *)v27 - (char *)v29) >> 6;
  if (v26 > v30)
  {
    sub_2232C69F8((char **)(a2 + 48), v26 - v30);
    v29 = *(float **)(a2 + 48);
    v27 = *v28;
    goto LABEL_32;
  }
LABEL_29:
  if (v30 > v26)
  {
    v27 = &v29[16 * v26];
    *v28 = v27;
  }
LABEL_32:
  while (v29 != v27)
  {
    v31 = sub_2245448E0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_224545EA4(v31, v29);
    v29 += 16;
  }
  v32 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v32 - 8);
  v33 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v33 - 8);
  *(_QWORD *)(a1 + 48) = v32 - 8;
  *(_QWORD *)(a1 + 72) = v33 - 8;
  sub_224544628(a1);
  v34 = *(unsigned __int8 **)(a1 + 32);
  v35 = *v34;
  if (v35 == 2)
  {
    v36 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v34 + 1) + 8) - **((_QWORD **)v34 + 1)) >> 4;
  }
  else if (v35 == 1)
  {
    v36 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v34 + 1) + 8) - **((_QWORD **)v34 + 1)) >> 3);
  }
  else
  {
    if (!*v34)
    {
      v36 = 0;
      v38 = (uint64_t *)(a2 + 80);
      v37 = *(_QWORD *)(a2 + 80);
      v39 = *(_QWORD *)(a2 + 72);
      v40 = (v37 - v39) >> 4;
      goto LABEL_42;
    }
    v36 = 1;
  }
  v38 = (uint64_t *)(a2 + 80);
  v37 = *(_QWORD *)(a2 + 80);
  v39 = *(_QWORD *)(a2 + 72);
  v40 = (v37 - v39) >> 4;
  if (v36 > v40)
  {
    sub_2232C68D0((char **)(a2 + 72), v36 - v40);
    v39 = *(_QWORD *)(a2 + 72);
    v37 = *v38;
    goto LABEL_44;
  }
LABEL_42:
  if (v40 > v36)
  {
    v37 = v39 + 16 * v36;
    *v38 = v37;
  }
LABEL_44:
  while (v39 != v37)
  {
    v85 = 16;
    v86 = v39;
    v41 = (char *)sub_2245448E0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2245449F8(v41, (uint64_t)&v85);
    v39 += 16;
  }
  v42 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v42 - 8);
  v43 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v43 - 8);
  *(_QWORD *)(a1 + 48) = v42 - 8;
  *(_QWORD *)(a1 + 72) = v43 - 8;
  sub_224544628(a1);
  v44 = *(unsigned __int8 **)(a1 + 32);
  v45 = *v44;
  if (v45 == 2)
  {
    v46 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v44 + 1) + 8) - **((_QWORD **)v44 + 1)) >> 4;
  }
  else if (v45 == 1)
  {
    v46 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v44 + 1) + 8) - **((_QWORD **)v44 + 1)) >> 3);
  }
  else
  {
    if (!*v44)
    {
      v46 = 0;
      v48 = (uint64_t *)(a2 + 104);
      v47 = *(_QWORD *)(a2 + 104);
      v49 = *(_QWORD *)(a2 + 96);
      v50 = (v47 - v49) >> 4;
      goto LABEL_55;
    }
    v46 = 1;
  }
  v48 = (uint64_t *)(a2 + 104);
  v47 = *(_QWORD *)(a2 + 104);
  v49 = *(_QWORD *)(a2 + 96);
  v50 = (v47 - v49) >> 4;
  if (v46 > v50)
  {
    sub_2232C68D0((char **)(a2 + 96), v46 - v50);
    v49 = *(_QWORD *)(a2 + 96);
    v47 = *v48;
    goto LABEL_57;
  }
LABEL_55:
  if (v50 > v46)
  {
    v47 = v49 + 16 * v46;
    *v48 = v47;
  }
LABEL_57:
  while (v49 != v47)
  {
    v85 = 16;
    v86 = v49;
    v51 = (char *)sub_2245448E0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2245449F8(v51, (uint64_t)&v85);
    v49 += 16;
  }
  v52 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v52 - 8);
  v53 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v53 - 8);
  *(_QWORD *)(a1 + 48) = v52 - 8;
  *(_QWORD *)(a1 + 72) = v53 - 8;
  if ((v13 & 0xFFFFFFFE) != 0)
  {
    sub_224544628(a1);
    v54 = *(unsigned __int8 **)(a1 + 32);
    v55 = *v54;
    if (v55 == 2)
    {
      v56 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v54 + 1) + 8) - **((_QWORD **)v54 + 1)) >> 4;
    }
    else if (v55 == 1)
    {
      v56 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v54 + 1) + 8) - **((_QWORD **)v54 + 1)) >> 3);
    }
    else
    {
      if (!*v54)
      {
        v56 = 0;
        v58 = (uint64_t *)(a2 + 128);
        v57 = *(_QWORD *)(a2 + 128);
        v59 = *(_QWORD *)(a2 + 120);
        v60 = (v57 - v59) >> 4;
        goto LABEL_69;
      }
      v56 = 1;
    }
    v58 = (uint64_t *)(a2 + 128);
    v57 = *(_QWORD *)(a2 + 128);
    v59 = *(_QWORD *)(a2 + 120);
    v60 = (v57 - v59) >> 4;
    if (v56 > v60)
    {
      sub_2232C68D0((char **)(a2 + 120), v56 - v60);
      v59 = *(_QWORD *)(a2 + 120);
      v57 = *v58;
      goto LABEL_71;
    }
LABEL_69:
    if (v60 > v56)
    {
      v57 = v59 + 16 * v56;
      *v58 = v57;
    }
LABEL_71:
    while (v59 != v57)
    {
      v85 = 16;
      v86 = v59;
      v61 = (char *)sub_2245448E0((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      sub_2245449F8(v61, (uint64_t)&v85);
      v59 += 16;
    }
    v62 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v62 - 8);
    v63 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(v63 - 8);
    *(_QWORD *)(a1 + 48) = v62 - 8;
    *(_QWORD *)(a1 + 72) = v63 - 8;
    sub_224544628(a1);
    v64 = *(unsigned __int8 **)(a1 + 32);
    v65 = *v64;
    if (v65 == 2)
    {
      v66 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v64 + 1) + 8) - **((_QWORD **)v64 + 1)) >> 4;
    }
    else if (v65 == 1)
    {
      v66 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v64 + 1) + 8) - **((_QWORD **)v64 + 1)) >> 3);
    }
    else
    {
      if (!*v64)
      {
        v66 = 0;
        v68 = (float **)(a2 + 152);
        v67 = *(float **)(a2 + 152);
        v69 = *(float **)(a2 + 144);
        v70 = ((char *)v67 - (char *)v69) >> 6;
        goto LABEL_82;
      }
      v66 = 1;
    }
    v68 = (float **)(a2 + 152);
    v67 = *(float **)(a2 + 152);
    v69 = *(float **)(a2 + 144);
    v70 = ((char *)v67 - (char *)v69) >> 6;
    if (v66 > v70)
    {
      sub_2232C69F8((char **)(a2 + 144), v66 - v70);
      v69 = *(float **)(a2 + 144);
      v67 = *v68;
      goto LABEL_85;
    }
LABEL_82:
    if (v70 > v66)
    {
      v67 = &v69[16 * v66];
      *v68 = v67;
    }
LABEL_85:
    while (v69 != v67)
    {
      v71 = sub_2245448E0((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      sub_224545EA4(v71, v69);
      v69 += 16;
    }
    v72 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v72 - 8);
    v73 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(v73 - 8);
    *(_QWORD *)(a1 + 48) = v72 - 8;
    *(_QWORD *)(a1 + 72) = v73 - 8;
    sub_224544628(a1);
    v74 = *(unsigned __int8 **)(a1 + 32);
    v75 = *v74;
    if (v75 == 2)
    {
      v76 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v74 + 1) + 8) - **((_QWORD **)v74 + 1)) >> 4;
    }
    else if (v75 == 1)
    {
      v76 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v74 + 1) + 8) - **((_QWORD **)v74 + 1)) >> 3);
    }
    else
    {
      if (!*v74)
      {
        v76 = 0;
        v78 = (uint64_t *)(a2 + 176);
        v77 = *(_QWORD *)(a2 + 176);
        v79 = *(_QWORD *)(a2 + 168);
        v80 = (v77 - v79) >> 4;
        goto LABEL_95;
      }
      v76 = 1;
    }
    v78 = (uint64_t *)(a2 + 176);
    v77 = *(_QWORD *)(a2 + 176);
    v79 = *(_QWORD *)(a2 + 168);
    v80 = (v77 - v79) >> 4;
    if (v76 > v80)
    {
      sub_2232C68D0((char **)(a2 + 168), v76 - v80);
      v79 = *(_QWORD *)(a2 + 168);
      v77 = *v78;
LABEL_97:
      while (v79 != v77)
      {
        v85 = 16;
        v86 = v79;
        v81 = (char *)sub_2245448E0((uint64_t *)a1);
        ++*(_QWORD *)(a1 + 112);
        sub_2245449F8(v81, (uint64_t)&v85);
        v79 += 16;
      }
      v52 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(v52 - 8);
      v53 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(v53 - 8);
      *(_QWORD *)(a1 + 48) = v52 - 8;
      *(_QWORD *)(a1 + 72) = v53 - 8;
      goto LABEL_100;
    }
LABEL_95:
    if (v80 > v76)
    {
      v77 = v79 + 16 * v76;
      *v78 = v77;
    }
    goto LABEL_97;
  }
LABEL_100:
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v52 - 16);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v53 - 16);
  *(_QWORD *)(a1 + 48) = v52 - 16;
  *(_QWORD *)(a1 + 72) = v53 - 16;
  if (a3 == 2)
    return;
  v82 = (char *)sub_2245448E0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v85 = 0;
  sub_22451CAD4(v82, &v85);
  if (v85 >= 0x100)
  {
LABEL_105:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24EC7AC38;
    __cxa_throw(exception, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
  }
  *(_BYTE *)(a2 + 192) = v85;
  if (a3 >= 4)
  {
    v83 = (char *)sub_2245448E0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    LOBYTE(v85) = 0;
    sub_22451CECC(v83, &v85);
    *(_BYTE *)(a2 + 2) = v85;
  }
}

void sub_223BBC8F4(uint64_t a1, uint64_t a2, int a3)
{
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  void *v14;
  int v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *exception;
  void *__p;
  char *v22;
  uint64_t v23;
  uint64_t v24;

  if (a3 == 1)
  {
    __p = 0;
    v22 = 0;
    v23 = 0;
    sub_224544628(a1);
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "version";
    *(_QWORD *)(a1 + 96) = 7;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = (char *)sub_2245448E0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v24 = 0;
    sub_22451CAD4(v6, &v24);
    if (HIDWORD(v24))
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = &off_24EC7AC38;
      __cxa_throw(exception, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
    }
    sub_223BBCAE0(a1, &__p);
    v7 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 - 8);
    v8 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(v8 - 8);
    *(_QWORD *)(a1 + 48) = v7 - 8;
    *(_QWORD *)(a1 + 72) = v8 - 8;
    v9 = (char *)__p;
    if (__p)
    {
      v10 = v22;
      v11 = __p;
      if (v22 != __p)
      {
        v12 = v22;
        do
        {
          v14 = (void *)*((_QWORD *)v12 - 3);
          v12 -= 24;
          v13 = v14;
          if (v14)
          {
            *((_QWORD *)v10 - 2) = v13;
            operator delete(v13);
          }
          v10 = v12;
        }
        while (v12 != v9);
        v11 = __p;
      }
      v22 = v9;
      operator delete(v11);
    }
  }
  sub_224544628(a1);
  v15 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v15)
    *(_BYTE *)(a1 + 104) = 1;
  v16 = (char *)sub_2245448E0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  __p = 0;
  sub_22451CAD4(v16, &__p);
  if (HIDWORD(__p))
  {
    v19 = __cxa_allocate_exception(8uLL);
    *v19 = &off_24EC7AC38;
    __cxa_throw(v19, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
  }
  sub_223BBCAE0(a1, (_QWORD *)(a2 + 8));
  v17 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v17 - 8);
  v18 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v18 - 8);
  *(_QWORD *)(a1 + 48) = v17 - 8;
  *(_QWORD *)(a1 + 72) = v18 - 8;
}

void sub_223BBCACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_22317C838(&a9);
  _Unwind_Resume(a1);
}

void sub_223BBCAE0(uint64_t a1, _QWORD *a2)
{
  unsigned __int8 *v4;
  int v5;
  unint64_t v6;
  char **v7;
  char ***v8;
  uint64_t v9;
  unint64_t v10;
  char **v11;
  char **v12;
  _QWORD *v13;
  char **v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  char *v21;
  unsigned __int8 *v22;
  unint64_t v23;
  char *v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *exception;
  uint64_t v30;

  sub_224544628(a1);
  v4 = *(unsigned __int8 **)(a1 + 32);
  v5 = *v4;
  if (v5 == 2)
  {
    v6 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v4 + 1) + 8) - **((_QWORD **)v4 + 1)) >> 4;
    goto LABEL_8;
  }
  if (v5 == 1)
  {
    v6 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v4 + 1) + 8) - **((_QWORD **)v4 + 1)) >> 3);
    goto LABEL_8;
  }
  if (*v4)
  {
    v6 = 1;
LABEL_8:
    v8 = (char ***)(a2 + 1);
    v7 = (char **)a2[1];
    v9 = *a2;
    v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a2) >> 3);
    if (v6 > v10)
    {
      sub_2232C7FD8((uint64_t)a2, v6 - v10);
      v13 = a2;
      v11 = (char **)*a2;
      v12 = (char **)v13[1];
      if (v11 != v12)
        goto LABEL_20;
      goto LABEL_47;
    }
    goto LABEL_11;
  }
  v6 = 0;
  v8 = (char ***)(a2 + 1);
  v7 = (char **)a2[1];
  v9 = *a2;
  v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a2) >> 3);
LABEL_11:
  if (v10 <= v6)
  {
    v12 = v7;
    v11 = (char **)*a2;
    if (v11 != v7)
      goto LABEL_20;
    goto LABEL_47;
  }
  v12 = (char **)(v9 + 24 * v6);
  if (v7 != v12)
  {
    v14 = v7;
    do
    {
      v16 = *(v14 - 3);
      v14 -= 3;
      v15 = v16;
      if (v16)
      {
        *(v7 - 2) = v15;
        operator delete(v15);
      }
      v7 = v14;
    }
    while (v14 != v12);
  }
  *v8 = v12;
  v11 = (char **)*a2;
  if (v11 == v12)
  {
LABEL_47:
    v27 = *(_QWORD *)(a1 + 48);
    v28 = *(_QWORD *)(a1 + 72);
    goto LABEL_48;
  }
  do
  {
LABEL_20:
    v19 = *(_DWORD *)(a1 + 8);
    sub_224544628(a1);
    v20 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "version";
    *(_QWORD *)(a1 + 96) = 7;
    if (!v20)
      *(_BYTE *)(a1 + 104) = 1;
    v21 = (char *)sub_2245448E0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v30 = 0;
    sub_22451CAD4(v21, &v30);
    if (HIDWORD(v30))
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = &off_24EC7AC38;
      __cxa_throw(exception, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
    }
    sub_224544628(a1);
    v22 = *(unsigned __int8 **)(a1 + 32);
    v23 = *v22;
    if (!*v22)
      goto LABEL_29;
    if ((_DWORD)v23 == 1)
    {
      v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v22 + 1) + 8) - **((_QWORD **)v22 + 1)) >> 3);
LABEL_29:
      v24 = *v11;
      v25 = v11[1];
      v26 = (v25 - *v11) >> 5;
      if (v19 < 1)
        goto LABEL_38;
      goto LABEL_30;
    }
    if ((_DWORD)v23 == 2)
    {
      v23 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v22 + 1) + 8) - **((_QWORD **)v22 + 1)) >> 4;
      v24 = *v11;
      v25 = v11[1];
      v26 = (v25 - *v11) >> 5;
      if (v19 < 1)
        goto LABEL_38;
    }
    else
    {
      v23 = 1;
      v24 = *v11;
      v25 = v11[1];
      v26 = (v25 - *v11) >> 5;
      if (v19 < 1)
      {
LABEL_38:
        if (v23 <= v26)
        {
          if (v23 < v26)
          {
            v25 = &v24[32 * v23];
            v11[1] = v25;
          }
        }
        else
        {
          sub_2231B6534(v11, v23 - v26);
          v24 = *v11;
          v25 = v11[1];
        }
        while (v24 != v25)
        {
          v30 = *(_QWORD *)(a1 + 8);
          sub_223BBCE7C((uint64_t)&v30, a1, (uint64_t)v24);
          v24 += 32;
        }
        goto LABEL_19;
      }
    }
LABEL_30:
    if (v23 <= v26)
    {
      if (v23 < v26)
      {
        v25 = &v24[32 * v23];
        v11[1] = v25;
      }
    }
    else
    {
      sub_2231B6534(v11, v23 - v26);
      v24 = *v11;
      v25 = v11[1];
    }
    while (v24 != v25)
    {
      v30 = *(_QWORD *)(a1 + 8);
      sub_223BBCE7C((uint64_t)&v30, a1, (uint64_t)v24);
      v24 += 32;
    }
LABEL_19:
    v17 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v17 - 8);
    v18 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(v18 - 8);
    *(_QWORD *)(a1 + 48) = v17 - 8;
    *(_QWORD *)(a1 + 72) = v18 - 8;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v17 - 16);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(v18 - 16);
    *(_QWORD *)(a1 + 48) = v17 - 16;
    *(_QWORD *)(a1 + 72) = v18 - 16;
    v11 += 3;
  }
  while (v11 != v12);
  v27 = v17 - 16;
  v28 = v18 - 16;
LABEL_48:
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v27 - 8);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v28 - 8);
  *(_QWORD *)(a1 + 48) = v27 - 8;
  *(_QWORD *)(a1 + 72) = v28 - 8;
}

void sub_223BBCE7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  char *v6;
  unint64_t v7;
  uint64_t *v8;
  int v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *exception;
  uint64_t v15;

  sub_224544628(a2);
  v5 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v5)
    *(_BYTE *)(a2 + 104) = 1;
  v6 = (char *)sub_2245448E0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v15 = 0;
  sub_22451CAD4(v6, &v15);
  if (HIDWORD(v15))
    goto LABEL_9;
  v7 = sub_2245448E0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_224545EA4(v7, (float *)a3);
  v8 = (uint64_t *)sub_2245448E0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  *(double *)(a3 + 16) = sub_22454AE08(v8);
  sub_224544628(a2);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  v10 = (char *)sub_2245448E0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v15 = 0;
  sub_22451CAD4(v10, &v15);
  if (HIDWORD(v15)
    || (v11 = (char *)sub_2245448E0((uint64_t *)a2),
        ++*(_QWORD *)(a2 + 112),
        v15 = 0,
        sub_22451CC1C(v11, &v15),
        v15 != (int)v15))
  {
LABEL_9:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24EC7AC38;
    __cxa_throw(exception, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
  }
  *(_DWORD *)(a3 + 24) = v15;
  v12 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v12 - 8);
  v13 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(a2 + 48) = v12 - 8;
  *(_QWORD *)(a2 + 72) = v13 - 8;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v12 - 16);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v13 - 16);
  *(_QWORD *)(a2 + 48) = v12 - 16;
  *(_QWORD *)(a2 + 72) = v13 - 16;
}

void sub_223BBD020(uint64_t a1, float *a2)
{
  int v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *exception;
  unint64_t v12;

  sub_224544628(a1);
  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_2245448E0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v12 = 0;
  sub_22451CAD4(v5, &v12);
  if (HIDWORD(v12))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24EC7AC38;
    __cxa_throw(exception, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
  }
  v6 = v12 & 0xFFFFFFFE;
  v7 = sub_2245448E0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  sub_224545EA4(v7, a2);
  if (v6)
  {
    v8 = sub_2245448E0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_224545EA4(v8, a2 + 16);
  }
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v9 - 8);
  v10 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(a1 + 48) = v9 - 8;
  *(_QWORD *)(a1 + 72) = v10 - 8;
}

void sub_223BBD12C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  char v10;

  v9 = 6;
  sub_224554038(a2[6], &v9);
  v5 = v9;
  if (v9 >= 3)
    sub_2231B1308(a2 + 2);
  if (v5 >= 6)
    v6 = 6;
  else
    v6 = v5;
  if (v6 < 3)
  {
    sub_223BBD21C((uint64_t)&v10, (uint64_t)a2, a3, v6);
    if (v5 < 3)
      return;
  }
  else
  {
    sub_223BBD478((uint64_t)a2, a3, v6);
    if (v5 < 3)
      return;
  }
  v7 = a2[4];
  v8 = *(_QWORD *)(v7 - 16) - (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(a2 + 2) + *(_QWORD *)(v7 - 8);
  if (v8)
    (*(void (**)(_QWORD *, uint64_t))(a2[2] + 40))(a2 + 2, v8);
  a2[4] -= 16;
}

void sub_223BBD21C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  void **v7;
  void **v8;
  void *v9;
  char v10[8];
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  void *v17;
  char v18;
  char v19;
  void *v20;
  char v21;
  char v22;
  void *__p;
  void **v24;
  char v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v26 = 0;
  BYTE8(v26) = 0;
  LOBYTE(v27) = 0;
  v29 = 0;
  sub_2231B2E50((uint64_t)v10, a2, (uint64_t)&v26);
  if (a4 >= 2)
  {
    v10[0] = 0;
    sub_224553CF0(*(_QWORD *)(a2 + 48), v10);
    if (v10[0])
    {
      if (!v29)
      {
        v27 = 0uLL;
        v28 = 0;
        v29 = 1;
      }
      sub_22455481C(*(_QWORD *)(a2 + 48), (void **)&v27);
    }
    else if (v29)
    {
      if (SHIBYTE(v28) < 0)
        operator delete((void *)v27);
      v29 = 0;
    }
  }
  v11 = v26;
  LOBYTE(v12) = 0;
  v14 = 0;
  if (v29)
  {
    if (SHIBYTE(v28) < 0)
    {
      sub_223197FA4(&v12, (void *)v27, *((unint64_t *)&v27 + 1));
    }
    else
    {
      v12 = v27;
      v13 = v28;
    }
    v14 = 1;
  }
  v15 = 0;
  v16 = 0;
  LOBYTE(v17) = 0;
  v19 = 0;
  LOBYTE(v20) = 0;
  v22 = 0;
  LOBYTE(__p) = 0;
  v25 = 0;
  sub_223BB47F0(a3, (uint64_t)v10);
  if (v25)
  {
    v7 = (void **)__p;
    if (__p)
    {
      v8 = v24;
      v9 = __p;
      if (v24 != __p)
      {
        do
        {
          if (*((char *)v8 - 1) < 0)
            operator delete(*(v8 - 3));
          v8 -= 3;
        }
        while (v8 != v7);
        v9 = __p;
      }
      v24 = v7;
      operator delete(v9);
    }
  }
  if (v22 && v21 < 0)
    operator delete(v20);
  if (v19 && v18 < 0)
    operator delete(v17);
  if (v14 && SHIBYTE(v13) < 0)
    operator delete((void *)v12);
  if (v29)
  {
    if (SHIBYTE(v28) < 0)
      operator delete((void *)v27);
  }
}

void sub_223BBD434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  uint64_t v18;

  if (a18 && a17 < 0)
    operator delete(__p);
  if (*(_BYTE *)(v18 - 64))
  {
    if (*(char *)(v18 - 65) < 0)
      operator delete(*(void **)(v18 - 88));
  }
  _Unwind_Resume(exception_object);
}

void sub_223BBD478(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v6;
  void **v7;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  void **v12;
  void *v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;

  sub_2231B2E50((uint64_t)&v14, a1, a2 + 8);
  v6 = (void **)(a2 + 24);
  v15 = 0;
  sub_224553CF0(*(_QWORD *)(a1 + 48), &v15);
  if (v15)
  {
    if (!*(_BYTE *)(a2 + 48))
    {
      *v6 = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      *(_BYTE *)(a2 + 48) = 1;
    }
    sub_22455481C(*(_QWORD *)(a1 + 48), (void **)(a2 + 24));
  }
  else if (*(_BYTE *)(a2 + 48))
  {
    if (*(char *)(a2 + 47) < 0)
      operator delete(*v6);
    *(_BYTE *)(a2 + 48) = 0;
  }
  if (a3 >= 4)
  {
    v16 = 0;
    sub_224553CF0(*(_QWORD *)(a1 + 48), &v16);
    if (v16)
    {
      if (!*(_BYTE *)(a2 + 72))
      {
        *(_QWORD *)(a2 + 56) = 0;
        *(_BYTE *)(a2 + 64) = 0;
        *(_BYTE *)(a2 + 72) = 1;
      }
      sub_2231B2E50((uint64_t)&v17, a1, a2 + 56);
    }
    else if (*(_BYTE *)(a2 + 72))
    {
      *(_BYTE *)(a2 + 72) = 0;
    }
    if (a3 == 5)
    {
      v7 = (void **)(a2 + 80);
      v18 = 0;
      sub_224553CF0(*(_QWORD *)(a1 + 48), &v18);
      if (v18)
      {
        if (!*(_BYTE *)(a2 + 104))
        {
          *v7 = 0;
          *(_QWORD *)(a2 + 88) = 0;
          *(_QWORD *)(a2 + 96) = 0;
          *(_BYTE *)(a2 + 104) = 1;
        }
        sub_22455481C(*(_QWORD *)(a1 + 48), (void **)(a2 + 80));
      }
      else if (*(_BYTE *)(a2 + 104))
      {
        if (*(char *)(a2 + 103) < 0)
          operator delete(*v7);
        *(_BYTE *)(a2 + 104) = 0;
      }
    }
    else if (a3 >= 6)
    {
      v8 = (void **)(a2 + 80);
      v19 = 0;
      sub_224553CF0(*(_QWORD *)(a1 + 48), &v19);
      if (v19)
      {
        if (!*(_BYTE *)(a2 + 104))
        {
          *v8 = 0;
          *(_QWORD *)(a2 + 88) = 0;
          *(_QWORD *)(a2 + 96) = 0;
          *(_BYTE *)(a2 + 104) = 1;
        }
        sub_22455481C(*(_QWORD *)(a1 + 48), (void **)(a2 + 80));
      }
      else if (*(_BYTE *)(a2 + 104))
      {
        if (*(char *)(a2 + 103) < 0)
          operator delete(*v8);
        *(_BYTE *)(a2 + 104) = 0;
      }
      v9 = (void **)(a2 + 112);
      v20 = 0;
      sub_224553CF0(*(_QWORD *)(a1 + 48), &v20);
      if (v20)
      {
        if (!*(_BYTE *)(a2 + 136))
        {
          *v9 = 0;
          *(_QWORD *)(a2 + 120) = 0;
          *(_QWORD *)(a2 + 128) = 0;
          *(_BYTE *)(a2 + 136) = 1;
        }
        sub_22455481C(*(_QWORD *)(a1 + 48), (void **)(a2 + 112));
      }
      else if (*(_BYTE *)(a2 + 136))
      {
        if (*(char *)(a2 + 135) < 0)
          operator delete(*v9);
        *(_BYTE *)(a2 + 136) = 0;
      }
      v10 = (void **)(a2 + 144);
      v21 = 0;
      sub_224553CF0(*(_QWORD *)(a1 + 48), &v21);
      if (v21)
      {
        if (!*(_BYTE *)(a2 + 168))
        {
          *v10 = 0;
          *(_QWORD *)(a2 + 152) = 0;
          *(_QWORD *)(a2 + 160) = 0;
          *(_BYTE *)(a2 + 168) = 1;
        }
        sub_2231B7368(a1, a2 + 144);
      }
      else if (*(_BYTE *)(a2 + 168))
      {
        v11 = (void **)*v10;
        if (*v10)
        {
          v12 = *(void ***)(a2 + 152);
          v13 = *v10;
          if (v12 != v11)
          {
            do
            {
              if (*((char *)v12 - 1) < 0)
                operator delete(*(v12 - 3));
              v12 -= 3;
            }
            while (v12 != v11);
            v13 = *v10;
          }
          *(_QWORD *)(a2 + 152) = v11;
          operator delete(v13);
        }
        *(_BYTE *)(a2 + 168) = 0;
      }
    }
  }
}

uint64_t sub_223BBD758(uint64_t a1, uint64_t a2)
{
  int v4;
  char *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *exception;
  char v11;
  unint64_t v12;

  sub_224544138(a1);
  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_2245443F0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v12 = 0;
  sub_22451C444(v5, &v12);
  if (HIDWORD(v12))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24EC7AC38;
    __cxa_throw(exception, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
  }
  if (v12 >= 6)
    v6 = 6;
  else
    v6 = v12;
  if (v6 < 3)
    sub_223BBD854((uint64_t)&v11, a1, a2, v6);
  else
    sub_223BBDA44(a1, a2, v6);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 - 8);
  v8 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(a1 + 48) = v7 - 8;
  *(_QWORD *)(a1 + 72) = v8 - 8;
  return a1;
}

void sub_223BBD854(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  __int128 v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  void *v14;
  char v15;
  char v16;
  void *v17;
  char v18;
  char v19;
  void *__p;
  void **v21;
  char v22;
  char v23[8];
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v24 = 0;
  BYTE8(v24) = 0;
  LOBYTE(v25) = 0;
  v27 = 0;
  sub_223BBE7E8(a2, (uint64_t)v23, a4);
  *(_OWORD *)&v8[8] = v24;
  LOBYTE(v9) = 0;
  v11 = 0;
  if (v27)
  {
    if (SHIBYTE(v26) < 0)
    {
      sub_223197FA4(&v9, (void *)v25, *((unint64_t *)&v25 + 1));
    }
    else
    {
      v9 = v25;
      v10 = v26;
    }
    v11 = 1;
  }
  v12 = 0;
  v13 = 0;
  LOBYTE(v14) = 0;
  v16 = 0;
  LOBYTE(v17) = 0;
  v19 = 0;
  LOBYTE(__p) = 0;
  v22 = 0;
  sub_223BB47F0(a3, (uint64_t)v8);
  if (v22)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v21;
      v7 = __p;
      if (v21 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v21 = v5;
      operator delete(v7);
    }
  }
  if (v19 && v18 < 0)
    operator delete(v17);
  if (v16 && v15 < 0)
    operator delete(v14);
  if (v11 && SHIBYTE(v10) < 0)
    operator delete((void *)v9);
  if (v27)
  {
    if (SHIBYTE(v26) < 0)
      operator delete((void *)v25);
  }
}

void sub_223BBDA00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  uint64_t v18;

  if (a18 && a17 < 0)
    operator delete(__p);
  if (*(_BYTE *)(v18 - 48))
  {
    if (*(char *)(v18 - 49) < 0)
      operator delete(*(void **)(v18 - 72));
  }
  _Unwind_Resume(exception_object);
}

void sub_223BBDA44(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  _QWORD *exception;
  __int128 v19;
  uint64_t v20;

  v6 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "auto_timestamp";
  *(_QWORD *)(a1 + 96) = 14;
  if (!v6)
    *(_BYTE *)(a1 + 104) = 1;
  sub_224544138(a1);
  v7 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v7)
    *(_BYTE *)(a1 + 104) = 1;
  v8 = (char *)sub_2245443F0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)&v19 = 0;
  sub_22451C444(v8, &v19);
  if (DWORD1(v19))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24EC7AC38;
    __cxa_throw(exception, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
  }
  if (v19 >= 2)
    v9 = 2;
  else
    v9 = v19;
  sub_223BBDD04(a1, a2 + 8, v9);
  v10 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v10 - 8);
  v11 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(a1 + 48) = v10 - 8;
  *(_QWORD *)(a1 + 72) = v11 - 8;
  v12 = a2 + 24;
  LODWORD(v10) = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "name";
  *(_QWORD *)(a1 + 96) = 4;
  if ((_DWORD)v10)
  {
    sub_223BBE04C((uint64_t *)a1, v12);
    if (a3 < 4)
      return;
  }
  else
  {
    *(_BYTE *)(a1 + 104) = 1;
    sub_223BBE04C((uint64_t *)a1, v12);
    if (a3 < 4)
      return;
  }
  v13 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "custom_timestamp";
  *(_QWORD *)(a1 + 96) = 16;
  if (!v13)
  {
    *(_BYTE *)(a1 + 104) = 1;
    if (*(_BYTE *)sub_2245443F0((uint64_t *)a1))
      goto LABEL_15;
LABEL_17:
    ++*(_QWORD *)(a1 + 112);
    if (*(_BYTE *)(a2 + 72))
      *(_BYTE *)(a2 + 72) = 0;
    goto LABEL_19;
  }
  if (!*(_BYTE *)sub_2245443F0((uint64_t *)a1))
    goto LABEL_17;
LABEL_15:
  *(_QWORD *)&v19 = 0;
  BYTE8(v19) = 0;
  v20 = *(_QWORD *)(a1 + 8);
  sub_223BBE16C((int *)&v20, a1, (uint64_t)&v19);
  *(_OWORD *)(a2 + 56) = v19;
  *(_BYTE *)(a2 + 72) = 1;
LABEL_19:
  if (a3 == 5)
  {
    v14 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "space";
    *(_QWORD *)(a1 + 96) = 5;
    if (!v14)
      *(_BYTE *)(a1 + 104) = 1;
    sub_223BBE04C((uint64_t *)a1, a2 + 80);
  }
  else if (a3 >= 6)
  {
    v15 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "space";
    *(_QWORD *)(a1 + 96) = 5;
    if (!v15)
      *(_BYTE *)(a1 + 104) = 1;
    sub_223BBE04C((uint64_t *)a1, a2 + 80);
    v16 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "instance_id";
    *(_QWORD *)(a1 + 96) = 11;
    if (!v16)
      *(_BYTE *)(a1 + 104) = 1;
    sub_223BBE04C((uint64_t *)a1, a2 + 112);
    v17 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "references";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v17)
      *(_BYTE *)(a1 + 104) = 1;
    sub_223BBE68C((uint64_t *)a1, a2 + 144);
  }
}

void sub_223BBDD04(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v5;
  char *v6;
  char *v7;
  int v8;
  int v9;
  char *v10;
  int v11;
  char v12;
  char *v13;
  char v14;
  char *v15;

  if (a3 < 2)
  {
    v14 = 0;
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "ns";
    *(_QWORD *)(a1 + 96) = 2;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v10 = (char *)sub_2245443F0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v15 = 0;
    sub_22451C58C(v10, &v15);
    v13 = v15;
    v11 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "clock_type";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v11)
      *(_BYTE *)(a1 + 104) = 1;
    v15 = &v14;
    sub_223BBDE5C((uint64_t *)a1, &v15);
    v12 = v14;
    *(_QWORD *)a2 = v13;
    *(_BYTE *)(a2 + 8) = v12;
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "ns";
    *(_QWORD *)(a1 + 96) = 2;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = (char *)sub_2245443F0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v13 = 0;
    sub_22451C58C(v6, &v13);
    *(_QWORD *)a2 = v13;
    v7 = (char *)(a2 + 8);
    v8 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "clock_type";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v8)
      *(_BYTE *)(a1 + 104) = 1;
    v13 = v7;
    sub_223BBDE5C((uint64_t *)a1, &v13);
  }
}

void sub_223BBDE5C(uint64_t *a1, _BYTE **a2)
{
  void **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;

  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v4 = (void **)sub_2245443F0(a1);
  ++a1[14];
  v18 = 0;
  v17 = 0uLL;
  sub_22451C83C(v4, (uint64_t)&v17);
  v15 = v18;
  *(_OWORD *)__p = v17;
  v5 = SHIBYTE(v18);
  v6 = (char *)v17;
  v7 = operator new();
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_22456E918(v7, v9);
  *(_QWORD *)&v17 = v8;
  v16 = 0;
  sub_224504EE8((uint64_t *)v8, &v16);
  v10 = v16;
  v11 = MEMORY[0x24BEDB7F0];
  v12 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)(v8 + *(_QWORD *)(v12 - 24)) = *(_QWORD *)(v11 + 64);
  *(_QWORD *)(v8 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v8 + 16) = v13;
  if (*(char *)(v8 + 111) < 0)
    operator delete(*(void **)(v8 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x227684BE0](v8 + 128);
  MEMORY[0x227684CE8](v8, 0x10B2C40EED050F3);
  **a2 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_223BBDFC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_22456E764((uint64_t *)&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223BBE04C(uint64_t *a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[3];

  v10[2] = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)sub_2245443F0(a1))
  {
    v4 = (void **)sub_2245443F0(a1);
    ++a1[14];
    v9 = 0uLL;
    v8 = 0;
    sub_22451C83C(v4, (uint64_t)&v8);
    v5 = v8;
    v10[0] = v9;
    *(_QWORD *)((char *)v10 + 7) = *(_QWORD *)((char *)&v9 + 7);
    v6 = HIBYTE(v9);
    if (*(_BYTE *)(a2 + 24))
    {
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      *(_BYTE *)(a2 + 24) = 0;
    }
    v7 = v10[0];
    *(_QWORD *)a2 = v5;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v10 + 7);
    *(_BYTE *)(a2 + 23) = v6;
    *(_BYTE *)(a2 + 24) = 1;
  }
  else
  {
    ++a1[14];
    if (*(_BYTE *)(a2 + 24))
    {
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      *(_BYTE *)(a2 + 24) = 0;
    }
  }
}

void sub_223BBE150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223BBE16C(int *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  char *v7;
  unsigned int v8;
  int v9;
  char *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *exception;
  __int128 *v15;
  unint64_t v16;

  sub_224544138(a2);
  v6 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v6)
    *(_BYTE *)(a2 + 104) = 1;
  v7 = (char *)sub_2245443F0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v16 = 0;
  sub_22451C444(v7, &v16);
  v8 = v16;
  if (HIDWORD(v16))
    goto LABEL_14;
  if (*a1 < 1)
    goto LABEL_13;
  if (v16 >= 2 && *a1 == 2)
  {
    v9 = *(unsigned __int8 *)(a2 + 104);
    *(_QWORD *)(a2 + 88) = "min_version";
    *(_QWORD *)(a2 + 96) = 11;
    if (!v9)
      *(_BYTE *)(a2 + 104) = 1;
    v10 = (char *)sub_2245443F0((uint64_t *)a2);
    ++*(_QWORD *)(a2 + 112);
    v16 = 0;
    sub_22451C444(v10, &v16);
    v11 = v16;
    if (!HIDWORD(v16))
    {
      if (v16 >= 3)
      {
        v15 = sub_223BB58E4();
        sub_22455C3A8((std::string *)v15, v11, 2u);
      }
      goto LABEL_11;
    }
LABEL_14:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24EC7AC38;
    __cxa_throw(exception, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
  }
LABEL_11:
  if (v8 >= 2)
    v8 = 2;
LABEL_13:
  sub_223BBE2DC(a2, a3, v8);
  v12 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v12 - 8);
  v13 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(a2 + 48) = v12 - 8;
  *(_QWORD *)(a2 + 72) = v13 - 8;
}

void sub_223BBE2DC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v5;
  char *v6;
  char *v7;
  int v8;
  int v9;
  char *v10;
  int v11;
  char v12;
  char *v13;
  char v14;
  char *v15;

  if (a3 < 2)
  {
    v14 = 0;
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "ns";
    *(_QWORD *)(a1 + 96) = 2;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v10 = (char *)sub_2245443F0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v15 = 0;
    sub_22451C58C(v10, &v15);
    v13 = v15;
    v11 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "clock_type";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v11)
      *(_BYTE *)(a1 + 104) = 1;
    v15 = &v14;
    sub_223BBE434(a1, &v15);
    v12 = v14;
    *(_QWORD *)a2 = v13;
    *(_BYTE *)(a2 + 8) = v12;
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "ns";
    *(_QWORD *)(a1 + 96) = 2;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = (char *)sub_2245443F0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v13 = 0;
    sub_22451C58C(v6, &v13);
    *(_QWORD *)a2 = v13;
    v7 = (char *)(a2 + 8);
    v8 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "clock_type";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v8)
      *(_BYTE *)(a1 + 104) = 1;
    v13 = v7;
    sub_223BBE434(a1, &v13);
  }
}

void sub_223BBE434(uint64_t a1, _BYTE **a2)
{
  char *v4;
  void **v5;
  int v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *exception;
  void *__p[2];
  uint64_t v17;
  char v18;
  __int128 v19;
  uint64_t v20;

  if ((*(_BYTE *)(a1 + 12) & 2) != 0)
  {
    __p[0] = 0;
    __p[1] = 0;
    v17 = 0;
    v5 = (void **)sub_2245443F0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v20 = 0;
    v19 = 0uLL;
    sub_22451C83C(v5, (uint64_t)&v19);
    v17 = v20;
    *(_OWORD *)__p = v19;
    v6 = SHIBYTE(v20);
    v7 = (char *)v19;
    v8 = operator new();
    v9 = v8;
    if (v6 >= 0)
      v10 = (char *)__p;
    else
      v10 = v7;
    sub_22456E918(v8, v10);
    *(_QWORD *)&v19 = v9;
    v18 = 0;
    sub_224504EE8((uint64_t *)v9, &v18);
    v11 = v18;
    v12 = MEMORY[0x24BEDB7F0];
    v13 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v9 = *MEMORY[0x24BEDB7F0];
    v14 = *(_QWORD *)(v12 + 72);
    *(_QWORD *)(v9 + *(_QWORD *)(v13 - 24)) = *(_QWORD *)(v12 + 64);
    *(_QWORD *)(v9 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v9 + 16) = v14;
    if (*(char *)(v9 + 111) < 0)
      operator delete(*(void **)(v9 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v9 + 128);
    MEMORY[0x227684CE8](v9, 0x10B2C40EED050F3);
    **a2 = v11;
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
  }
  else
  {
    v4 = (char *)sub_2245443F0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    *(_QWORD *)&v19 = 0;
    sub_22451C444(v4, &v19);
    if ((unint64_t)v19 >= 0x100)
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = &off_24EC7AC38;
      __cxa_throw(exception, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
    }
    **a2 = v19;
  }
}

void sub_223BBE600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_22456E764((uint64_t *)&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223BBE68C(uint64_t *a1, uint64_t a2)
{
  unsigned __int8 *v4;
  void **v5;
  void **v6;
  void **v7;
  void **v8;
  void **v9;
  void **v10;
  __int128 v11;
  uint64_t v12;
  char v13;

  if (*(_BYTE *)sub_2245443F0(a1))
  {
    v11 = 0uLL;
    v12 = 0;
    v13 = 0;
    v4 = (unsigned __int8 *)sub_2245443F0(a1);
    ++a1[14];
    sub_224545590((uint64_t)&v13, v4, (void **)&v11);
    if (*(_BYTE *)(a2 + 24))
    {
      v5 = *(void ***)a2;
      if (*(_QWORD *)a2)
      {
        v6 = *(void ***)(a2 + 8);
        v7 = *(void ***)a2;
        if (v6 != v5)
        {
          do
          {
            if (*((char *)v6 - 1) < 0)
              operator delete(*(v6 - 3));
            v6 -= 3;
          }
          while (v6 != v5);
          v7 = *(void ***)a2;
        }
        *(_QWORD *)(a2 + 8) = v5;
        operator delete(v7);
      }
    }
    *(_OWORD *)a2 = v11;
    *(_QWORD *)(a2 + 16) = v12;
    *(_BYTE *)(a2 + 24) = 1;
  }
  else
  {
    ++a1[14];
    if (*(_BYTE *)(a2 + 24))
    {
      v8 = *(void ***)a2;
      if (*(_QWORD *)a2)
      {
        v9 = *(void ***)(a2 + 8);
        v10 = *(void ***)a2;
        if (v9 != v8)
        {
          do
          {
            if (*((char *)v9 - 1) < 0)
              operator delete(*(v9 - 3));
            v9 -= 3;
          }
          while (v9 != v8);
          v10 = *(void ***)a2;
        }
        *(_QWORD *)(a2 + 8) = v8;
        operator delete(v10);
      }
      *(_BYTE *)(a2 + 24) = 0;
    }
  }
}

void sub_223BBE7D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_22319BB48(&a9);
  _Unwind_Resume(a1);
}

void sub_223BBE7E8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *exception;
  unint64_t v14;

  v6 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "auto_timestamp";
  *(_QWORD *)(a1 + 96) = 14;
  if (!v6)
    *(_BYTE *)(a1 + 104) = 1;
  sub_224544138(a1);
  v7 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v7)
    *(_BYTE *)(a1 + 104) = 1;
  v8 = (char *)sub_2245443F0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v14 = 0;
  sub_22451C444(v8, &v14);
  if (HIDWORD(v14))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24EC7AC38;
    __cxa_throw(exception, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
  }
  if (v14 >= 2)
    v9 = 2;
  else
    v9 = v14;
  sub_223BBDD04(a1, a2 + 8, v9);
  v10 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v10 - 8);
  v11 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(a1 + 48) = v10 - 8;
  *(_QWORD *)(a1 + 72) = v11 - 8;
  if (a3 >= 2)
  {
    v12 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "name";
    *(_QWORD *)(a1 + 96) = 4;
    if (!v12)
      *(_BYTE *)(a1 + 104) = 1;
    sub_223BBE04C((uint64_t *)a1, a2 + 24);
  }
}

void sub_223BBE924(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4;
  char *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  void *v15;
  __int16 v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  char *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  void *v37;
  __int16 v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  char *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  void *v59;
  __int16 v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  char v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  int v84;
  char *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  char *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  int v110;
  uint64_t v111;
  void *v112;
  __int16 v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  char *v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  char *v146;
  unsigned int v147;
  uint64_t *v148;
  char *v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  int v153;
  uint64_t v154;
  void *v155;
  __int16 v156;
  unint64_t v157;
  unint64_t v158;
  void **v159;
  void *v160;
  void *v161;
  char *v162;
  char *v163;
  char *v164;
  unint64_t *v165;
  unint64_t v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  int v177;
  char *v178;
  unsigned int v179;
  std::__shared_weak_count *v180;
  int v181;
  _QWORD *v182;
  unsigned __int8 *v183;
  int v184;
  uint64_t v185;
  __int128 v186;
  unint64_t *v187;
  unint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  __int128 v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  __int128 v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  char *v209;
  int v210;
  char v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  char *v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  int v223;
  char *v224;
  unsigned int v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  unsigned int v229;
  int v230;
  char **v231;
  unsigned __int8 *v232;
  int v233;
  unint64_t v234;
  char *v235;
  char *v236;
  unint64_t v237;
  char v238;
  char *v239;
  char *v240;
  int v241;
  char *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  char *v248;
  char *v249;
  char *v250;
  char *v251;
  char *v252;
  char *v253;
  void *v254;
  char *v255;
  char *v256;
  void *v257;
  char *v258;
  uint64_t v259;
  int v260;
  char *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  void *v266;
  uint64_t v267;
  void *v268;
  void *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  void *v273;
  uint64_t v274;
  void *v275;
  void *v276;
  char *v277;
  unint64_t v278;
  unint64_t v279;
  float *v280;
  float v281;
  uint64_t v282;
  unint64_t v283;
  unint64_t v284;
  unint64_t v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  uint64_t *v290;
  unsigned __int8 *v291;
  int v292;
  unint64_t v293;
  uint64_t *v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t v298;
  uint64_t v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  uint64_t v304;
  uint64_t v305;
  int v306;
  char *v307;
  char *v308;
  unint64_t v309;
  int v310;
  char *v311;
  uint64_t v312;
  uint64_t v313;
  unint64_t v314;
  unint64_t v315;
  float *v316;
  float v317;
  uint64_t v318;
  unint64_t v319;
  unint64_t v320;
  unint64_t v321;
  void *v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  void *v326;
  void *v327;
  uint64_t v328;
  uint64_t v329;
  int v330;
  char *v331;
  char *v332;
  uint64_t v333;
  uint64_t v334;
  char *v335;
  _QWORD *v336;
  _QWORD *v337;
  _QWORD *v338;
  _QWORD *exception;
  _QWORD *v340;
  _QWORD *v341;
  _QWORD *v342;
  _QWORD *v343;
  _QWORD *v344;
  _QWORD *v345;
  _QWORD *v346;
  _QWORD *v347;
  _QWORD *v348;
  _QWORD *v349;
  _QWORD *v350;
  _QWORD *v351;
  _QWORD *v352;
  _QWORD *v353;
  _BYTE v356[16];
  std::__shared_weak_count *v357;
  void *v358[2];
  std::__shared_weak_count *v359;
  void *v360;
  uint64_t v361;
  int v362;
  __int16 v363;
  char v364;
  void *v365;
  char *v366;
  std::__shared_weak_count *v367;
  uint64_t v368;
  int v369;
  void *v370;
  int v371;
  __int16 v372;
  __int128 v373;
  std::__shared_weak_count *v374;
  char v375;
  __int128 *v376;
  __int128 v377;
  void *v378[2];
  __int128 v379;
  void *v380[2];
  int v381;
  void *v382;
  void *v383;
  void *v384;
  void *v385;
  void *v386;
  void *v387;
  void *v388;
  void *v389;
  void *v390;
  void *v391;
  char v392;
  __int128 v393[2];
  __int128 v394;
  void *v395[2];
  void *v396[2];
  __int128 v397;
  void *v398[2];
  __int128 v399;
  uint64_t v400;
  void *v401;
  void *v402;
  int v403;
  void *__p;
  void *v405;
  char v406;
  char v407[64];
  int v408;
  uint64_t v409;

  v409 = *MEMORY[0x24BDAC8D0];
  sub_224544138(a1);
  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_2245443F0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)&v393[0] = 0;
  sub_22451C444(v5, v393);
  v6 = v393[0];
  if (HIDWORD(*(_QWORD *)&v393[0]))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24EC7AC38;
    __cxa_throw(exception, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
  }
  v7 = a2;
  v8 = LODWORD(v393[0]) - 2;
  if (LODWORD(v393[0]) <= 2)
  {
    LOBYTE(v377) = 0;
    LOBYTE(v380[1]) = 0;
    sub_223BC1EB4((uint64_t *)a1, (uint64_t)&v377);
    if (LOBYTE(v380[1]))
    {
      v365 = &off_24EC1F8C8;
      v9 = (char *)*((_QWORD *)&v377 + 1);
      v10 = (std::__shared_weak_count *)v378[0];
      if (v378[0])
      {
        v11 = (unint64_t *)((char *)v378[0] + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
        v13 = HIDWORD(v379);
        v15 = v378[1];
        v14 = v379;
        v16 = (__int16)v380[0];
        do
          v17 = __ldxr(v11);
        while (__stxr(v17 + 1, v11));
        do
          v18 = __ldxr(v11);
        while (__stxr(v18 + 1, v11));
      }
      else
      {
        v13 = HIDWORD(v379);
        v15 = v378[1];
        v14 = v379;
        v16 = (__int16)v380[0];
      }
      v366 = v9;
      v367 = v10;
      v368 = v14;
      v369 = 4 * v13;
      v370 = v15;
      v371 = 4;
      v372 = v16;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        v7 = a2;
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      BYTE8(v393[0]) = 0;
      BYTE8(v393[1]) = 0;
      LOBYTE(v394) = 0;
      LOBYTE(v395[0]) = 0;
      LOBYTE(v395[1]) = 1;
      LODWORD(v396[0]) = 0;
      sub_22432B21C((uint64_t)&v365, 3u, (uint64_t)&v373);
      sub_2232C1348(a2 + 8, (uint64_t)&v373);
      v22 = v374;
      if (v374)
      {
        v23 = (unint64_t *)&v374->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      v25 = v367;
      if (v367)
      {
        v26 = (unint64_t *)&v367->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      if (LOBYTE(v380[1]))
      {
        *(_QWORD *)&v377 = &off_24EC27198;
        v28 = (std::__shared_weak_count *)v378[0];
        if (v378[0])
        {
          v29 = (unint64_t *)((char *)v378[0] + 8);
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
      }
    }
  }
  else
  {
    sub_223BC1D10((uint64_t *)a1, a2 + 8);
    v7 = a2;
    if (v6 >= 5)
    {
      sub_223BC1D10((uint64_t *)a1, a2 + 72);
      v7 = a2;
      goto LABEL_82;
    }
  }
  LOBYTE(v377) = 0;
  LOBYTE(v380[1]) = 0;
  sub_223BC1EB4((uint64_t *)a1, (uint64_t)&v377);
  if (LOBYTE(v380[1]))
  {
    v365 = &off_24EC1F8C8;
    v31 = (char *)*((_QWORD *)&v377 + 1);
    v32 = (std::__shared_weak_count *)v378[0];
    if (v378[0])
    {
      v33 = (unint64_t *)((char *)v378[0] + 8);
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
      v35 = HIDWORD(v379);
      v37 = v378[1];
      v36 = v379;
      v38 = (__int16)v380[0];
      do
        v39 = __ldxr(v33);
      while (__stxr(v39 + 1, v33));
      do
        v40 = __ldxr(v33);
      while (__stxr(v40 + 1, v33));
    }
    else
    {
      v35 = HIDWORD(v379);
      v37 = v378[1];
      v36 = v379;
      v38 = (__int16)v380[0];
    }
    v366 = v31;
    v367 = v32;
    v368 = v36;
    v369 = 4 * v35;
    v370 = v37;
    v371 = 4;
    v372 = v38;
    if (v32)
    {
      v41 = (unint64_t *)&v32->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
      do
        v43 = __ldaxr(v41);
      while (__stlxr(v43 - 1, v41));
      v7 = a2;
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    BYTE8(v393[0]) = 0;
    BYTE8(v393[1]) = 0;
    LOBYTE(v394) = 0;
    LOBYTE(v395[0]) = 0;
    LOBYTE(v395[1]) = 1;
    LODWORD(v396[0]) = 0;
    sub_22432B21C((uint64_t)&v365, 3u, (uint64_t)&v373);
    sub_2232C1348(v7 + 72, (uint64_t)&v373);
    v44 = v374;
    if (v374)
    {
      v45 = (unint64_t *)&v374->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    v47 = v367;
    if (!v367)
      goto LABEL_66;
    v48 = (unint64_t *)&v367->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
      if (!LOBYTE(v380[1]))
        goto LABEL_81;
    }
    else
    {
LABEL_66:
      if (!LOBYTE(v380[1]))
        goto LABEL_81;
    }
    *(_QWORD *)&v377 = &off_24EC27198;
    v50 = (std::__shared_weak_count *)v378[0];
    if (v378[0])
    {
      v51 = (unint64_t *)((char *)v378[0] + 8);
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
        if (v6 < 4)
          goto LABEL_72;
LABEL_82:
        LOBYTE(v393[0]) = 0;
        LOBYTE(v398[1]) = 0;
        sub_223BC2058((uint64_t *)a1, (uint64_t)v393);
        v63 = LOBYTE(v398[1]);
        if (LOBYTE(v398[1]))
        {
          sub_22416C400((uint64_t)v393, (uint64_t)v356);
          *(_QWORD *)&v377 = &off_24EC28F30;
          sub_2232C2C00((uint64_t)v356, (uint64_t *)&v377 + 1);
          v64 = 1;
        }
        else
        {
          v64 = 0;
          LOBYTE(v377) = 0;
        }
        LOBYTE(v383) = v64;
        sub_2232C33D4(v7 + 136, (uint64_t)&v377);
        if (!(_BYTE)v383)
          goto LABEL_90;
        *(_QWORD *)&v377 = &off_24EC28F30;
        v65 = (std::__shared_weak_count *)v378[0];
        if (!v378[0])
          goto LABEL_90;
        v66 = (unint64_t *)((char *)v378[0] + 8);
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
          if (!v63)
            goto LABEL_95;
        }
        else
        {
LABEL_90:
          if (!v63)
            goto LABEL_95;
        }
        v68 = v357;
        if (v357)
        {
          v69 = (unint64_t *)&v357->__shared_owners_;
          do
            v70 = __ldaxr(v69);
          while (__stlxr(v70 - 1, v69));
          if (!v70)
          {
            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
            std::__shared_weak_count::__release_weak(v68);
            if (!LOBYTE(v398[1]))
              goto LABEL_127;
            goto LABEL_96;
          }
        }
LABEL_95:
        if (!LOBYTE(v398[1]))
          goto LABEL_127;
LABEL_96:
        if (LODWORD(v398[0]) != -1)
          ((void (*)(__int128 *, __int128 *))off_24EC5FFD0[LODWORD(v398[0])])(&v377, &v394);
        goto LABEL_127;
      }
    }
  }
LABEL_81:
  if (v6 >= 4)
    goto LABEL_82;
LABEL_72:
  LOBYTE(v393[0]) = 0;
  LOBYTE(v397) = 0;
  sub_223BC19C8((uint64_t *)a1, (uint64_t)v393);
  if ((_BYTE)v397)
  {
    v365 = &off_24EC1F8C8;
    v53 = (char *)*((_QWORD *)&v393[0] + 1);
    v54 = *(std::__shared_weak_count **)&v393[1];
    if (*(_QWORD *)&v393[1])
    {
      v55 = (unint64_t *)(*(_QWORD *)&v393[1] + 8);
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
      v57 = *(_QWORD *)((char *)&v394 + 4);
      v58 = HIDWORD(v395[0]);
      v59 = (void *)*((_QWORD *)&v393[1] + 1);
      v60 = (__int16)v396[1];
      do
        v61 = __ldxr(v55);
      while (__stxr(v61 + 1, v55));
      do
        v62 = __ldxr(v55);
      while (__stxr(v62 + 1, v55));
    }
    else
    {
      v57 = *(_QWORD *)((char *)&v394 + 4);
      v58 = HIDWORD(v395[0]);
      v59 = (void *)*((_QWORD *)&v393[1] + 1);
      v60 = (__int16)v396[1];
    }
    v366 = v53;
    v367 = v54;
    v368 = v57;
    v369 = 4 * v58;
    v370 = v59;
    v371 = 32;
    v372 = v60;
    if (v54)
    {
      v71 = (unint64_t *)&v54->__shared_owners_;
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
      do
        v73 = __ldaxr(v71);
      while (__stlxr(v73 - 1, v71));
      v7 = a2;
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    BYTE8(v377) = 0;
    LOBYTE(v378[1]) = 0;
    LOBYTE(v379) = 0;
    LOBYTE(v380[0]) = 0;
    LOBYTE(v380[1]) = 1;
    v381 = 0;
    sub_22432B21C((uint64_t)&v365, 0x1Fu, (uint64_t)&v373);
    sub_2232C1620(v7 + 136, (uint64_t)&v373);
    v74 = v374;
    if (v374)
    {
      v75 = (unint64_t *)&v374->__shared_owners_;
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
    }
    v77 = v367;
    if (v367)
    {
      v78 = (unint64_t *)&v367->__shared_owners_;
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
    if ((_BYTE)v397)
    {
      *(_QWORD *)&v393[0] = &off_24EC26EB0;
      v80 = *(std::__shared_weak_count **)&v393[1];
      if (*(_QWORD *)&v393[1])
      {
        v81 = (unint64_t *)(*(_QWORD *)&v393[1] + 8);
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
    }
  }
LABEL_127:
  v83 = a2 + 224;
  if (!*(_BYTE *)sub_2245443F0((uint64_t *)a1))
  {
    ++*(_QWORD *)(a1 + 112);
    sub_2232C39E0(v83);
    if (v8 > 3)
      goto LABEL_218;
    goto LABEL_211;
  }
  sub_2232C3AB8((uint64_t)v393);
  sub_224544138(a1);
  v84 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v84)
    *(_BYTE *)(a1 + 104) = 1;
  v85 = (char *)sub_2245443F0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)&v377 = 0;
  sub_22451C444(v85, &v377);
  if (DWORD1(v377))
  {
    v345 = __cxa_allocate_exception(8uLL);
    *v345 = &off_24EC7AC38;
    __cxa_throw(v345, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
  }
  if ((v377 & 0xFFFFFFFE) == 0)
  {
    LOBYTE(v358[0]) = 0;
    v364 = 0;
    *(_QWORD *)&v373 = &off_24EC1F958;
    sub_2231B3FDC((uint64_t)&v373 + 8);
    sub_22416BD7C((uint64_t)&v377, (uint64_t)&v373, 0);
    v96 = v374;
    if (v374)
    {
      v97 = (unint64_t *)&v374->__shared_owners_;
      do
        v98 = __ldaxr(v97);
      while (__stlxr(v98 - 1, v97));
      if (!v98)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
    LODWORD(v378[1]) = 0;
    *(_QWORD *)&v373 = *(_QWORD *)(a1 + 8);
    sub_223BC22E4((int *)&v373, a1, (unsigned __int16 *)&v377);
    sub_22416C400((uint64_t)&v377, (uint64_t)&v365);
    *(_QWORD *)&v373 = &off_24EC28BC8;
    sub_2232C1E78((uint64_t)&v365, (uint64_t *)&v373 + 1);
    v375 = 1;
    sub_2232C264C((uint64_t)v358, (uint64_t)&v373);
    if (v375)
    {
      *(_QWORD *)&v373 = &off_24EC28BC8;
      v99 = v374;
      if (v374)
      {
        v100 = (unint64_t *)&v374->__shared_owners_;
        do
          v101 = __ldaxr(v100);
        while (__stlxr(v101 - 1, v100));
        if (!v101)
        {
          ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
          std::__shared_weak_count::__release_weak(v99);
        }
      }
    }
    v102 = v367;
    if (!v367)
      goto LABEL_165;
    v103 = (unint64_t *)&v367->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
      v105 = v384;
      if ((_DWORD)v384 == -1)
        goto LABEL_167;
    }
    else
    {
LABEL_165:
      v105 = v384;
      if ((_DWORD)v384 == -1)
      {
LABEL_167:
        v365 = &off_24EC1F8C8;
        v106 = (char *)v358[1];
        v107 = v359;
        if (v359)
        {
          v108 = (unint64_t *)&v359->__shared_owners_;
          do
            v109 = __ldxr(v108);
          while (__stxr(v109 + 1, v108));
          v110 = v362;
          v112 = v360;
          v111 = v361;
          v113 = v363;
          do
            v114 = __ldxr(v108);
          while (__stxr(v114 + 1, v108));
          do
            v115 = __ldxr(v108);
          while (__stxr(v115 + 1, v108));
        }
        else
        {
          v110 = v362;
          v112 = v360;
          v111 = v361;
          v113 = v363;
        }
        v366 = v106;
        v367 = v107;
        v368 = v111;
        v369 = 4 * v110;
        v370 = v112;
        v371 = 4;
        v372 = v113;
        if (v107)
        {
          v116 = (unint64_t *)&v107->__shared_owners_;
          do
            v117 = __ldaxr(v116);
          while (__stlxr(v117 - 1, v116));
          if (!v117)
          {
            ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
            std::__shared_weak_count::__release_weak(v107);
          }
          do
            v118 = __ldaxr(v116);
          while (__stlxr(v118 - 1, v116));
          if (!v118)
          {
            ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
            std::__shared_weak_count::__release_weak(v107);
          }
        }
        BYTE8(v377) = 0;
        LOBYTE(v378[1]) = 0;
        LOBYTE(v379) = 0;
        LOBYTE(v380[0]) = 0;
        LOBYTE(v380[1]) = 1;
        v381 = 0;
        sub_22432B21C((uint64_t)&v365, 3u, (uint64_t)&v373);
        sub_2232C1348((uint64_t)v393, (uint64_t)&v373);
        v119 = v374;
        if (v374)
        {
          v120 = (unint64_t *)&v374->__shared_owners_;
          do
            v121 = __ldaxr(v120);
          while (__stlxr(v121 - 1, v120));
          if (!v121)
          {
            ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
            std::__shared_weak_count::__release_weak(v119);
          }
        }
        v122 = v367;
        if (v367)
        {
          v123 = (unint64_t *)&v367->__shared_owners_;
          do
            v124 = __ldaxr(v123);
          while (__stlxr(v124 - 1, v123));
          if (!v124)
          {
            ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
            std::__shared_weak_count::__release_weak(v122);
          }
        }
        if (v364)
        {
          v358[0] = &off_24EC27198;
          v125 = v359;
          if (v359)
          {
            v126 = (unint64_t *)&v359->__shared_owners_;
            do
              v127 = __ldaxr(v126);
            while (__stlxr(v127 - 1, v126));
            if (!v127)
            {
              ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
              std::__shared_weak_count::__release_weak(v125);
            }
          }
        }
        goto LABEL_201;
      }
    }
    ((void (*)(__int128 *, __int128 *))off_24EC5FFD0[v105])(&v373, &v379);
    goto LABEL_167;
  }
  *(_QWORD *)&v373 = &off_24EC1F958;
  sub_2231B3FDC((uint64_t)&v373 + 8);
  sub_22416BD7C((uint64_t)&v377, (uint64_t)&v373, 0);
  v86 = v374;
  if (v374)
  {
    v87 = (unint64_t *)&v374->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  LODWORD(v378[1]) = 0;
  *(_QWORD *)&v373 = *(_QWORD *)(a1 + 8);
  sub_223BC22E4((int *)&v373, a1, (unsigned __int16 *)&v377);
  sub_22416C400((uint64_t)&v377, (uint64_t)&v365);
  *(_QWORD *)&v373 = &off_24EC21040;
  sub_2232C1A28((uint64_t)&v365, (uint64_t *)&v373 + 1);
  v375 = 1;
  sub_2232C1C50((uint64_t)v393, (uint64_t)&v373);
  if (!v375)
    goto LABEL_142;
  *(_QWORD *)&v373 = &off_24EC21040;
  v89 = v374;
  if (!v374)
    goto LABEL_142;
  v90 = (unint64_t *)&v374->__shared_owners_;
  do
    v91 = __ldaxr(v90);
  while (__stlxr(v91 - 1, v90));
  if (!v91)
  {
    ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
    std::__shared_weak_count::__release_weak(v89);
    v92 = v367;
    if (!v367)
      goto LABEL_146;
  }
  else
  {
LABEL_142:
    v92 = v367;
    if (!v367)
      goto LABEL_146;
  }
  v93 = (unint64_t *)&v92->__shared_owners_;
  do
    v94 = __ldaxr(v93);
  while (__stlxr(v94 - 1, v93));
  if (v94)
  {
LABEL_146:
    v95 = v384;
    if ((_DWORD)v384 == -1)
      goto LABEL_201;
    goto LABEL_147;
  }
  ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
  std::__shared_weak_count::__release_weak(v92);
  v95 = v384;
  if ((_DWORD)v384 != -1)
LABEL_147:
    ((void (*)(__int128 *, __int128 *))off_24EC5FFD0[v95])(&v373, &v379);
LABEL_201:
  *(_QWORD *)&v377 = *(_QWORD *)(a1 + 8);
  sub_223BC22E4((int *)&v377, a1, (unsigned __int16 *)v396);
  *(_QWORD *)&v377 = *(_QWORD *)(a1 + 8);
  sub_223BC22E4((int *)&v377, a1, (unsigned __int16 *)&__p);
  v128 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v128 - 8);
  v129 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v129 - 8);
  *(_QWORD *)(a1 + 48) = v128 - 8;
  *(_QWORD *)(a1 + 72) = v129 - 8;
  sub_2232C39E0(v83);
  sub_223BBB5FC(v83, (uint64_t)v393);
  *(_BYTE *)(a2 + 496) = 1;
  if (v408 != -1)
    ((void (*)(__int128 *, char *))off_24EC5FFD0[v408])(&v377, v407);
  v408 = -1;
  if (v403 != -1)
    ((void (*)(__int128 *, void **))off_24EC5FFD0[v403])(&v377, v398);
  v403 = -1;
  if (!LOBYTE(v395[1]))
    goto LABEL_210;
  *(_QWORD *)&v393[0] = &off_24EC21328;
  v130 = *(std::__shared_weak_count **)&v393[1];
  if (!*(_QWORD *)&v393[1])
    goto LABEL_210;
  v131 = (unint64_t *)(*(_QWORD *)&v393[1] + 8);
  do
    v132 = __ldaxr(v131);
  while (__stlxr(v132 - 1, v131));
  if (!v132)
  {
    ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
    std::__shared_weak_count::__release_weak(v130);
    if (v8 > 3)
      goto LABEL_218;
  }
  else
  {
LABEL_210:
    if (v8 > 3)
      goto LABEL_218;
  }
LABEL_211:
  LOBYTE(v393[0]) = 0;
  LOBYTE(v395[1]) = 0;
  sub_223BC1D10((uint64_t *)a1, (uint64_t)v393);
  if (LOBYTE(v395[1]))
  {
    *(_QWORD *)&v393[0] = &off_24EC21328;
    v133 = *(std::__shared_weak_count **)&v393[1];
    if (*(_QWORD *)&v393[1])
    {
      v134 = (unint64_t *)(*(_QWORD *)&v393[1] + 8);
      do
        v135 = __ldaxr(v134);
      while (__stlxr(v135 - 1, v134));
      if (!v135)
      {
        ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
        std::__shared_weak_count::__release_weak(v133);
      }
    }
  }
LABEL_218:
  v136 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v136 - 8);
  v137 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v137 - 8);
  *(_QWORD *)(a1 + 48) = v136 - 8;
  *(_QWORD *)(a1 + 72) = v137 - 8;
  sub_224544138(a1);
  v138 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v138)
    *(_BYTE *)(a1 + 104) = 1;
  v139 = (char *)sub_2245443F0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)&v393[0] = 0;
  sub_22451C444(v139, v393);
  v140 = v393[0];
  if (HIDWORD(*(_QWORD *)&v393[0]))
  {
    v340 = __cxa_allocate_exception(8uLL);
    *v340 = &off_24EC7AC38;
    __cxa_throw(v340, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
  }
  sub_223BC1B6C((uint64_t *)a1, a2 + 504);
  if ((v140 & 0xFFFFFFFE) != 0)
  {
    sub_223BC1D10((uint64_t *)a1, a2 + 568);
    v141 = a2;
  }
  else
  {
    LOBYTE(v377) = 0;
    LOBYTE(v380[1]) = 0;
    sub_223BC1EB4((uint64_t *)a1, (uint64_t)&v377);
    v141 = a2;
    if (LOBYTE(v380[1]))
    {
      v365 = &off_24EC1F8C8;
      v149 = (char *)*((_QWORD *)&v377 + 1);
      v150 = (std::__shared_weak_count *)v378[0];
      if (v378[0])
      {
        v151 = (unint64_t *)((char *)v378[0] + 8);
        do
          v152 = __ldxr(v151);
        while (__stxr(v152 + 1, v151));
        v153 = HIDWORD(v379);
        v155 = v378[1];
        v154 = v379;
        v156 = (__int16)v380[0];
        do
          v157 = __ldxr(v151);
        while (__stxr(v157 + 1, v151));
        do
          v158 = __ldxr(v151);
        while (__stxr(v158 + 1, v151));
      }
      else
      {
        v153 = HIDWORD(v379);
        v155 = v378[1];
        v154 = v379;
        v156 = (__int16)v380[0];
      }
      v366 = v149;
      v367 = v150;
      v368 = v154;
      v369 = 4 * v153;
      v370 = v155;
      v371 = 4;
      v372 = v156;
      if (v150)
      {
        v165 = (unint64_t *)&v150->__shared_owners_;
        do
          v166 = __ldaxr(v165);
        while (__stlxr(v166 - 1, v165));
        if (!v166)
        {
          ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
          std::__shared_weak_count::__release_weak(v150);
        }
        do
          v167 = __ldaxr(v165);
        while (__stlxr(v167 - 1, v165));
        v141 = a2;
        if (!v167)
        {
          ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
          std::__shared_weak_count::__release_weak(v150);
        }
      }
      BYTE8(v393[0]) = 0;
      BYTE8(v393[1]) = 0;
      LOBYTE(v394) = 0;
      LOBYTE(v395[0]) = 0;
      LOBYTE(v395[1]) = 1;
      LODWORD(v396[0]) = 0;
      sub_22432B21C((uint64_t)&v365, 3u, (uint64_t)&v373);
      sub_2232C1348(v141 + 568, (uint64_t)&v373);
      v168 = v374;
      if (v374)
      {
        v169 = (unint64_t *)&v374->__shared_owners_;
        do
          v170 = __ldaxr(v169);
        while (__stlxr(v170 - 1, v169));
        if (!v170)
        {
          ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
          std::__shared_weak_count::__release_weak(v168);
        }
      }
      v171 = v367;
      if (v367)
      {
        v172 = (unint64_t *)&v367->__shared_owners_;
        do
          v173 = __ldaxr(v172);
        while (__stlxr(v173 - 1, v172));
        if (!v173)
        {
          ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
          std::__shared_weak_count::__release_weak(v171);
        }
      }
      if (LOBYTE(v380[1]))
      {
        *(_QWORD *)&v377 = &off_24EC27198;
        v174 = (std::__shared_weak_count *)v378[0];
        if (v378[0])
        {
          v175 = (unint64_t *)((char *)v378[0] + 8);
          do
            v176 = __ldaxr(v175);
          while (__stlxr(v176 - 1, v175));
          if (!v176)
          {
            ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
            std::__shared_weak_count::__release_weak(v174);
          }
        }
      }
    }
  }
  v142 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v142 - 8);
  v143 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v143 - 8);
  *(_QWORD *)(a1 + 48) = v142 - 8;
  *(_QWORD *)(a1 + 72) = v143 - 8;
  if (a3 > 4)
  {
    sub_224544138(a1);
    v145 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "version";
    *(_QWORD *)(a1 + 96) = 7;
    if (!v145)
      *(_BYTE *)(a1 + 104) = 1;
    v146 = (char *)sub_2245443F0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    *(_QWORD *)&v393[0] = 0;
    sub_22451C444(v146, v393);
    v147 = v393[0];
    if (HIDWORD(*(_QWORD *)&v393[0]))
    {
      v346 = __cxa_allocate_exception(8uLL);
      *v346 = &off_24EC7AC38;
      __cxa_throw(v346, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
    }
    sub_223BC19C8((uint64_t *)a1, v141 + 632);
    if (*(_BYTE *)sub_2245443F0((uint64_t *)a1))
    {
      v148 = (uint64_t *)sub_2245443F0((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v144 = a2;
      *(float *)(a2 + 720) = sub_22454A580(v148);
      *(_BYTE *)(a2 + 724) = 1;
    }
    else
    {
      ++*(_QWORD *)(a1 + 112);
      v144 = a2;
      if (*(_BYTE *)(a2 + 724))
        *(_BYTE *)(a2 + 724) = 0;
    }
    if (v147 >= 2)
    {
      v159 = (void **)(a2 + 728);
      if (*(_BYTE *)sub_2245443F0((uint64_t *)a1))
      {
        memset(v393, 0, 24);
        sub_2245454A0((uint64_t *)a1, (uint64_t *)v393);
        if (*(_BYTE *)(a2 + 752))
        {
          v160 = *v159;
          if (*v159)
          {
            *(_QWORD *)(a2 + 736) = v160;
            operator delete(v160);
          }
        }
        *(_OWORD *)v159 = v393[0];
        *(_QWORD *)(a2 + 744) = *(_QWORD *)&v393[1];
        *(_BYTE *)(a2 + 752) = 1;
      }
      else
      {
        ++*(_QWORD *)(a1 + 112);
        if (*(_BYTE *)(a2 + 752))
        {
          v161 = *v159;
          if (*v159)
          {
            *(_QWORD *)(a2 + 736) = v161;
            operator delete(v161);
          }
          *(_BYTE *)(a2 + 752) = 0;
        }
      }
      if (*(_BYTE *)sub_2245443F0((uint64_t *)a1))
      {
        v162 = (char *)sub_2245443F0((uint64_t *)a1);
        ++*(_QWORD *)(a1 + 112);
        *(_QWORD *)&v393[0] = 0;
        sub_22451C444(v162, v393);
        if (HIDWORD(*(_QWORD *)&v393[0]))
        {
          v350 = __cxa_allocate_exception(8uLL);
          *v350 = &off_24EC7AC38;
          __cxa_throw(v350, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
        }
        *(_DWORD *)(a2 + 760) = v393[0];
        *(_BYTE *)(a2 + 764) = 1;
      }
      else
      {
        ++*(_QWORD *)(a1 + 112);
        if (*(_BYTE *)(a2 + 764))
          *(_BYTE *)(a2 + 764) = 0;
      }
      if (*(_BYTE *)sub_2245443F0((uint64_t *)a1))
      {
        v163 = (char *)sub_2245443F0((uint64_t *)a1);
        ++*(_QWORD *)(a1 + 112);
        *(_QWORD *)&v393[0] = 0;
        sub_22451C444(v163, v393);
        if (HIDWORD(*(_QWORD *)&v393[0]))
        {
          v351 = __cxa_allocate_exception(8uLL);
          *v351 = &off_24EC7AC38;
          __cxa_throw(v351, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
        }
        v144 = a2;
        *(_DWORD *)(a2 + 768) = v393[0];
        *(_BYTE *)(a2 + 772) = 1;
      }
      else
      {
        ++*(_QWORD *)(a1 + 112);
        v144 = a2;
        if (*(_BYTE *)(a2 + 772))
          *(_BYTE *)(a2 + 772) = 0;
      }
      if (v147 >= 3)
      {
        if (*(_BYTE *)sub_2245443F0((uint64_t *)a1))
        {
          v164 = (char *)sub_2245443F0((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          *(_QWORD *)&v393[0] = 0;
          sub_22451C444(v164, v393);
          if (HIDWORD(*(_QWORD *)&v393[0]))
          {
            v352 = __cxa_allocate_exception(8uLL);
            *v352 = &off_24EC7AC38;
            __cxa_throw(v352, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
          }
          v144 = a2;
          *(_DWORD *)(a2 + 776) = v393[0];
          *(_BYTE *)(a2 + 780) = 1;
        }
        else
        {
          ++*(_QWORD *)(a1 + 112);
          v144 = a2;
          if (*(_BYTE *)(a2 + 780))
            *(_BYTE *)(a2 + 780) = 0;
        }
        if (v147 >= 4)
        {
          sub_224544138(a1);
          v177 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "version";
          *(_QWORD *)(a1 + 96) = 7;
          if (!v177)
            *(_BYTE *)(a1 + 104) = 1;
          v178 = (char *)sub_2245443F0((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          *(_QWORD *)&v393[0] = 0;
          sub_22451C444(v178, v393);
          if (HIDWORD(*(_QWORD *)&v393[0]))
          {
            v353 = __cxa_allocate_exception(8uLL);
            *v353 = &off_24EC7AC38;
            __cxa_throw(v353, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
          }
          if (LODWORD(v393[0]) >= 2)
            v179 = 2;
          else
            v179 = v393[0];
          if (v179 >= 2)
          {
            sub_223BC3670(a1, a2 + 784);
            v144 = a2;
          }
          else
          {
            *((_QWORD *)&v393[0] + 1) = 0;
            *(_QWORD *)&v393[1] = 0;
            *(_QWORD *)&v393[0] = (char *)v393 + 8;
            sub_224530B6C(v393, &v377);
            v180 = (std::__shared_weak_count *)*((_QWORD *)&v377 + 1);
            v373 = v377;
            sub_22323DF84((uint64_t)v393, *((char **)&v393[0] + 1));
            v181 = *(unsigned __int8 *)(a1 + 104);
            *(_QWORD *)(a1 + 88) = "dictionary";
            *(_QWORD *)(a1 + 96) = 10;
            if (!v181)
              *(_BYTE *)(a1 + 104) = 1;
            v182 = (_QWORD *)operator new();
            *v182 = 0;
            v182[1] = 0;
            v183 = (unsigned __int8 *)sub_2245443F0((uint64_t *)a1);
            ++*(_QWORD *)(a1 + 112);
            sub_223799EE8((uint64_t)v393, v183);
            v184 = *(unsigned __int8 *)v182;
            *(_BYTE *)v182 = v393[0];
            LOBYTE(v393[0]) = v184;
            v185 = v182[1];
            v182[1] = *((_QWORD *)&v393[0] + 1);
            *((_QWORD *)&v393[0] + 1) = v185;
            sub_223454278((uint64_t *)v393 + 1, v184);
            *(_QWORD *)&v377 = v182;
            sub_2245197F4((uint64_t *)&v377, v393);
            v186 = v393[0];
            v393[0] = 0uLL;
            v373 = v186;
            v144 = a2;
            if (v180)
            {
              v187 = (unint64_t *)&v180->__shared_owners_;
              do
                v188 = __ldaxr(v187);
              while (__stlxr(v188 - 1, v187));
              if (!v188)
              {
                ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
                std::__shared_weak_count::__release_weak(v180);
              }
            }
            v189 = (std::__shared_weak_count *)*((_QWORD *)&v393[0] + 1);
            if (*((_QWORD *)&v393[0] + 1))
            {
              v190 = (unint64_t *)(*((_QWORD *)&v393[0] + 1) + 8);
              do
                v191 = __ldaxr(v190);
              while (__stlxr(v191 - 1, v190));
              if (!v191)
              {
                ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
                std::__shared_weak_count::__release_weak(v189);
              }
            }
            sub_223454278(v182 + 1, *(unsigned __int8 *)v182);
            MEMORY[0x227684CE8](v182, 0x1022C40B06DCE69);
            sub_224518820(v393, (uint64_t)&v373);
            v192 = v393[0];
            v393[0] = 0uLL;
            v193 = *(std::__shared_weak_count **)(a2 + 792);
            *(_OWORD *)(a2 + 784) = v192;
            if (v193)
            {
              v194 = (unint64_t *)&v193->__shared_owners_;
              do
                v195 = __ldaxr(v194);
              while (__stlxr(v195 - 1, v194));
              if (!v195)
              {
                ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
                std::__shared_weak_count::__release_weak(v193);
              }
            }
            v196 = (std::__shared_weak_count *)*((_QWORD *)&v393[0] + 1);
            if (*((_QWORD *)&v393[0] + 1))
            {
              v197 = (unint64_t *)(*((_QWORD *)&v393[0] + 1) + 8);
              do
                v198 = __ldaxr(v197);
              while (__stlxr(v198 - 1, v197));
              if (!v198)
              {
                ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
                std::__shared_weak_count::__release_weak(v196);
              }
            }
            v199 = (std::__shared_weak_count *)*((_QWORD *)&v373 + 1);
            if (*((_QWORD *)&v373 + 1))
            {
              v200 = (unint64_t *)(*((_QWORD *)&v373 + 1) + 8);
              do
                v201 = __ldaxr(v200);
              while (__stlxr(v201 - 1, v200));
              if (!v201)
              {
                ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
                std::__shared_weak_count::__release_weak(v199);
              }
            }
          }
          v202 = *(_QWORD *)(a1 + 48);
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(v202 - 8);
          v203 = *(_QWORD *)(a1 + 72);
          *(_QWORD *)(a1 + 112) = *(_QWORD *)(v203 - 8);
          *(_QWORD *)(a1 + 48) = v202 - 8;
          *(_QWORD *)(a1 + 72) = v203 - 8;
          if (v147 != 4)
          {
            if (*(_BYTE *)sub_2245443F0((uint64_t *)a1))
            {
              LODWORD(v394) = 0;
              memset(v393, 0, sizeof(v393));
              v204 = sub_2245443F0((uint64_t *)a1);
              ++*(_QWORD *)(a1 + 112);
              sub_224545240(v204, (float *)v393);
              v144 = a2;
              v205 = v393[1];
              *(_OWORD *)(a2 + 800) = v393[0];
              *(_OWORD *)(a2 + 816) = v205;
              *(_DWORD *)(a2 + 832) = v394;
              *(_BYTE *)(a2 + 836) = 1;
            }
            else
            {
              ++*(_QWORD *)(a1 + 112);
              v144 = a2;
              if (*(_BYTE *)(a2 + 836))
                *(_BYTE *)(a2 + 836) = 0;
            }
          }
        }
      }
    }
    v206 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v206 - 8);
    v207 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(v207 - 8);
    *(_QWORD *)(a1 + 48) = v206 - 8;
    *(_QWORD *)(a1 + 72) = v207 - 8;
  }
  else
  {
    sub_223BC19C8((uint64_t *)a1, v141 + 632);
    v144 = a2;
  }
  sub_223BC1B6C((uint64_t *)a1, v144 + 840);
  sub_224544138(a1);
  v208 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v208)
    *(_BYTE *)(a1 + 104) = 1;
  v209 = (char *)sub_2245443F0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)&v393[0] = 0;
  sub_22451C444(v209, v393);
  if (DWORD1(v393[0]))
  {
    v341 = __cxa_allocate_exception(8uLL);
    *v341 = &off_24EC7AC38;
    __cxa_throw(v341, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
  }
  LOBYTE(v393[0]) = 0;
  LOBYTE(v398[1]) = 0;
  sub_223BC2058((uint64_t *)a1, (uint64_t)v393);
  v210 = LOBYTE(v398[1]);
  if (LOBYTE(v398[1]))
  {
    sub_22416C400((uint64_t)v393, (uint64_t)&v373);
    *(_QWORD *)&v377 = &off_24EC28A18;
    sub_2232C59F4((uint64_t)&v373, (uint64_t *)&v377 + 1);
    v211 = 1;
  }
  else
  {
    v211 = 0;
    LOBYTE(v377) = 0;
  }
  LOBYTE(v383) = v211;
  sub_2232C5C1C(a2 + 904, (uint64_t)&v377);
  if (!(_BYTE)v383)
    goto LABEL_349;
  *(_QWORD *)&v377 = &off_24EC28A18;
  v212 = (std::__shared_weak_count *)v378[0];
  if (!v378[0])
    goto LABEL_349;
  v213 = (unint64_t *)((char *)v378[0] + 8);
  do
    v214 = __ldaxr(v213);
  while (__stlxr(v214 - 1, v213));
  if (!v214)
  {
    ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
    std::__shared_weak_count::__release_weak(v212);
    if (!v210)
      goto LABEL_354;
  }
  else
  {
LABEL_349:
    if (!v210)
      goto LABEL_354;
  }
  v215 = v374;
  if (v374)
  {
    v216 = (unint64_t *)&v374->__shared_owners_;
    do
      v217 = __ldaxr(v216);
    while (__stlxr(v217 - 1, v216));
    if (!v217)
    {
      ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
      std::__shared_weak_count::__release_weak(v215);
      if (!LOBYTE(v398[1]))
        goto LABEL_357;
      goto LABEL_355;
    }
  }
LABEL_354:
  if (!LOBYTE(v398[1]))
    goto LABEL_357;
LABEL_355:
  if (LODWORD(v398[0]) != -1)
    ((void (*)(__int128 *, __int128 *))off_24EC5FFD0[LODWORD(v398[0])])(&v377, &v394);
LABEL_357:
  sub_223BC19C8((uint64_t *)a1, a2 + 992);
  v218 = (char *)sub_2245443F0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)&v393[0] = 0;
  sub_22451C444(v218, v393);
  if (*(_QWORD *)&v393[0] >= 0x100uLL)
  {
    v342 = __cxa_allocate_exception(8uLL);
    *v342 = &off_24EC7AC38;
    __cxa_throw(v342, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
  }
  *(_BYTE *)(a2 + 1080) = v393[0];
  v219 = sub_2245443F0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  sub_224545240(v219, (float *)(a2 + 1084));
  v220 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v220 - 8);
  v221 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v221 - 8);
  *(_QWORD *)(a1 + 48) = v220 - 8;
  *(_QWORD *)(a1 + 72) = v221 - 8;
  v222 = (char *)sub_2245443F0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)&v393[0] = 0;
  sub_22451C58C(v222, v393);
  *(_QWORD *)(a2 + 1136) = *(_QWORD *)&v393[0];
  sub_224544138(a1);
  v223 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v223)
    *(_BYTE *)(a1 + 104) = 1;
  v224 = (char *)sub_2245443F0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)&v393[0] = 0;
  sub_22451C444(v224, v393);
  if (HIDWORD(*(_QWORD *)&v393[0]))
  {
    v343 = __cxa_allocate_exception(8uLL);
    *v343 = &off_24EC7AC38;
    __cxa_throw(v343, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
  }
  if (LODWORD(v393[0]) >= 2)
    v225 = 2;
  else
    v225 = v393[0];
  sub_223BC3810(a1, (float *)(a2 + 1144), v225);
  v226 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v226 - 8);
  v227 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v227 - 8);
  *(_QWORD *)(a1 + 48) = v226 - 8;
  *(_QWORD *)(a1 + 72) = v227 - 8;
  v228 = sub_2245443F0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  sub_224545370(v228, (double *)(a2 + 1184));
  v229 = a3;
  if (a3 == 1)
  {
    LOBYTE(v393[0]) = 0;
    v407[0] = 0;
    sub_223BC3C14(a1, (uint64_t)v393);
    if (!v407[0])
      goto LABEL_469;
    v230 = *(unsigned __int8 *)(a2 + 1512);
    *(_OWORD *)(a2 + 1312) = v393[0];
    *(_DWORD *)(a2 + 1328) = v393[1];
    v231 = (char **)(a2 + 1336);
    if (v230)
    {
      sub_2232C6B24(v231, (char **)&v393[1] + 1);
      *(_BYTE *)(a2 + 1504) = v406;
      if (!v407[0])
        goto LABEL_469;
    }
    else
    {
      sub_2232C6D24(v231, (uint64_t)&v393[1] + 8);
      v238 = v406;
      *(_BYTE *)(a2 + 1512) = 1;
      *(_BYTE *)(a2 + 1504) = v238;
      if (!v407[0])
        goto LABEL_469;
    }
    if (__p)
    {
      v405 = __p;
      operator delete(__p);
    }
    if (v401)
    {
      v402 = v401;
      operator delete(v401);
    }
    if (*((_QWORD *)&v399 + 1))
    {
      v400 = *((_QWORD *)&v399 + 1);
      operator delete(*((void **)&v399 + 1));
    }
    if (v398[0])
    {
      v398[1] = v398[0];
      operator delete(v398[0]);
    }
    if (v396[1])
    {
      *(void **)&v397 = v396[1];
      operator delete(v396[1]);
    }
    if (v395[0])
    {
      v395[1] = v395[0];
      operator delete(v395[0]);
    }
    if (*((_QWORD *)&v393[1] + 1))
    {
      *(_QWORD *)&v394 = *((_QWORD *)&v393[1] + 1);
      operator delete(*((void **)&v393[1] + 1));
    }
    goto LABEL_469;
  }
  if (a3 > 6)
  {
    sub_223BC3C14(a1, a2 + 1312);
    goto LABEL_496;
  }
  v365 = 0;
  v366 = 0;
  v367 = 0;
  sub_224544138(a1);
  v232 = *(unsigned __int8 **)(a1 + 32);
  v233 = *v232;
  if (v233 == 2)
  {
    v234 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v232 + 1) + 8) - **((_QWORD **)v232 + 1)) >> 4;
  }
  else if (v233 == 1)
  {
    v234 = *(_QWORD *)(*((_QWORD *)v232 + 1) + 16);
  }
  else
  {
    if (!*v232)
    {
      v234 = 0;
      v236 = (char *)v365;
      v235 = v366;
      v237 = 0x8F5C28F5C28F5C29 * ((v366 - (_BYTE *)v365) >> 3);
      goto LABEL_404;
    }
    v234 = 1;
  }
  v236 = (char *)v365;
  v235 = v366;
  v237 = 0x8F5C28F5C28F5C29 * ((v366 - (_BYTE *)v365) >> 3);
  if (v234 > v237)
  {
    sub_2232C71E0((uint64_t *)&v365, v234 - v237);
    v240 = (char *)v365;
    v239 = v366;
    if (v365 != v366)
      goto LABEL_399;
LABEL_410:
    v245 = *(_QWORD *)(a1 + 48);
    v246 = *(_QWORD *)(a1 + 72);
    v247 = v239;
    goto LABEL_411;
  }
LABEL_404:
  if (v237 <= v234)
  {
    v239 = v235;
    v240 = (char *)v365;
    if (v365 != v235)
      goto LABEL_399;
    goto LABEL_410;
  }
  v239 = &v236[200 * v234];
  if (v235 != v239)
  {
    do
    {
      v248 = v235 - 200;
      sub_223255CAC((uint64_t)(v235 - 176));
      v235 = v248;
    }
    while (v248 != v239);
  }
  v366 = v239;
  v229 = a3;
  v240 = (char *)v365;
  if (v365 == v239)
    goto LABEL_410;
  do
  {
LABEL_399:
    sub_224544138(a1);
    v241 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "version";
    *(_QWORD *)(a1 + 96) = 7;
    if (!v241)
      *(_BYTE *)(a1 + 104) = 1;
    v242 = (char *)sub_2245443F0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    *(_QWORD *)&v393[0] = 0;
    sub_22451C444(v242, v393);
    if (HIDWORD(*(_QWORD *)&v393[0]))
    {
      v338 = __cxa_allocate_exception(8uLL);
      *v338 = &off_24EC7AC38;
      __cxa_throw(v338, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
    }
    sub_223BC3E24(a1, (uint64_t)v240, v393[0]);
    v243 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v243 - 8);
    v244 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(v244 - 8);
    *(_QWORD *)(a1 + 48) = v243 - 8;
    *(_QWORD *)(a1 + 72) = v244 - 8;
    v240 += 200;
  }
  while (v240 != v239);
  v245 = v243 - 8;
  v246 = v244 - 8;
  v247 = (char *)v365;
  v239 = v366;
LABEL_411:
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v245 - 8);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v246 - 8);
  *(_QWORD *)(a1 + 48) = v245 - 8;
  *(_QWORD *)(a1 + 72) = v246 - 8;
  if (v247 != v239)
  {
    v377 = 0uLL;
    v378[0] = 0;
    sub_2232C7578((uint64_t *)&v377, 0x8F5C28F5C28F5C29 * ((v239 - v247) >> 3));
    v249 = (char *)v365;
    v250 = v366;
    v376 = &v377;
    if (v365 != v366)
    {
      do
      {
        LOBYTE(v393[0]) = *v249;
        *(_WORD *)((char *)v393 + 1) = *(_WORD *)(v249 + 1);
        DWORD1(v393[0]) = *((_DWORD *)v249 + 1);
        *((_QWORD *)&v393[0] + 1) = *((_QWORD *)v249 + 1);
        LODWORD(v393[1]) = *((_DWORD *)v249 + 4);
        v251 = v249 + 24;
        sub_223C7574C((char ***)v249 + 3, (uint64_t)&v393[1] + 8);
        v406 = v251[168];
        sub_2232C77CC((uint64_t **)&v376, (uint64_t)v393);
        if (__p)
        {
          v405 = __p;
          operator delete(__p);
        }
        if (v401)
        {
          v402 = v401;
          operator delete(v401);
        }
        if (*((_QWORD *)&v399 + 1))
        {
          v400 = *((_QWORD *)&v399 + 1);
          operator delete(*((void **)&v399 + 1));
        }
        if (v398[0])
        {
          v398[1] = v398[0];
          operator delete(v398[0]);
        }
        if (v396[1])
        {
          *(void **)&v397 = v396[1];
          operator delete(v396[1]);
        }
        if (v395[0])
        {
          v395[1] = v395[0];
          operator delete(v395[0]);
        }
        if (*((_QWORD *)&v393[1] + 1))
        {
          *(_QWORD *)&v394 = *((_QWORD *)&v393[1] + 1);
          operator delete(*((void **)&v393[1] + 1));
        }
        v249 = v251 + 176;
      }
      while (v251 + 176 != v250);
    }
    *(_OWORD *)v358 = v377;
    v359 = (std::__shared_weak_count *)v378[0];
    sub_223C2A714((uint64_t *)v358, (uint64_t)&v377);
    LOBYTE(v393[0]) = v377;
    *(_WORD *)((char *)v393 + 1) = *(_WORD *)((char *)&v377 + 1);
    DWORD1(v393[0]) = DWORD1(v377);
    *((_QWORD *)&v393[0] + 1) = *((_QWORD *)&v377 + 1);
    LODWORD(v393[1]) = v378[0];
    sub_223C75208((uint64_t)&v393[1] + 8, (char **)&v378[1]);
    v406 = v392;
    sub_2232C0648(a2 + 1312, v393);
    v229 = a3;
    if (__p)
    {
      v405 = __p;
      operator delete(__p);
    }
    if (v401)
    {
      v402 = v401;
      operator delete(v401);
    }
    if (*((_QWORD *)&v399 + 1))
    {
      v400 = *((_QWORD *)&v399 + 1);
      operator delete(*((void **)&v399 + 1));
    }
    if (v398[0])
    {
      v398[1] = v398[0];
      operator delete(v398[0]);
    }
    if (v396[1])
    {
      *(void **)&v397 = v396[1];
      operator delete(v396[1]);
    }
    if (v395[0])
    {
      v395[1] = v395[0];
      operator delete(v395[0]);
    }
    if (*((_QWORD *)&v393[1] + 1))
    {
      *(_QWORD *)&v394 = *((_QWORD *)&v393[1] + 1);
      operator delete(*((void **)&v393[1] + 1));
    }
    if (v390)
    {
      v391 = v390;
      operator delete(v390);
    }
    if (v388)
    {
      v389 = v388;
      operator delete(v388);
    }
    if (v386)
    {
      v387 = v386;
      operator delete(v386);
    }
    if (v384)
    {
      v385 = v384;
      operator delete(v384);
    }
    if (v382)
    {
      v383 = v382;
      operator delete(v382);
    }
    if (v380[0])
    {
      v380[1] = v380[0];
      operator delete(v380[0]);
    }
    if (v378[1])
    {
      *(void **)&v379 = v378[1];
      operator delete(v378[1]);
    }
    v252 = (char *)v358[0];
    if (v358[0])
    {
      v253 = (char *)v358[1];
      v254 = v358[0];
      if (v358[1] != v358[0])
      {
        do
        {
          v255 = v253 - 200;
          sub_223255CAC((uint64_t)(v253 - 176));
          v253 = v255;
        }
        while (v255 != v252);
        v254 = v358[0];
        v229 = a3;
      }
      v358[1] = v252;
      operator delete(v254);
    }
    v239 = (char *)v365;
  }
  if (v239)
  {
    v256 = v366;
    v257 = v239;
    if (v366 != v239)
    {
      do
      {
        v258 = v256 - 200;
        sub_223255CAC((uint64_t)(v256 - 176));
        v256 = v258;
      }
      while (v258 != v239);
      v257 = v365;
      v229 = a3;
    }
    v366 = v239;
    operator delete(v257);
  }
  if (v229 > 3)
  {
    if (a3 > 4)
      goto LABEL_496;
    goto LABEL_495;
  }
LABEL_469:
  if (*(_BYTE *)sub_2245443F0((uint64_t *)a1))
  {
    memset((char *)v393 + 8, 0, 24);
    sub_224544138(a1);
    v259 = a2;
    v260 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "version";
    *(_QWORD *)(a1 + 96) = 7;
    if (!v260)
      *(_BYTE *)(a1 + 104) = 1;
    v261 = (char *)sub_2245443F0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    *(_QWORD *)&v377 = 0;
    sub_22451C444(v261, &v377);
    if (DWORD1(v377))
    {
      v347 = __cxa_allocate_exception(8uLL);
      *v347 = &off_24EC7AC38;
      __cxa_throw(v347, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
    }
    sub_223BC4740(a1, (uint64_t)v393, v377);
    v262 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v262 - 8);
    v263 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(v263 - 8);
    *(_QWORD *)(a1 + 48) = v262 - 8;
    *(_QWORD *)(a1 + 72) = v263 - 8;
    if (*(_BYTE *)(a2 + 1128))
    {
      v264 = *(_QWORD *)(a2 + 1104);
      if (v264)
      {
        v265 = *(_QWORD *)(a2 + 1112);
        v266 = *(void **)(a2 + 1104);
        if (v265 != v264)
        {
          v267 = *(_QWORD *)(a2 + 1112);
          do
          {
            v269 = *(void **)(v267 - 24);
            v267 -= 24;
            v268 = v269;
            if (v269)
            {
              *(_QWORD *)(v265 - 16) = v268;
              operator delete(v268);
            }
            v265 = v267;
          }
          while (v267 != v264);
          v259 = a2;
          v266 = *(void **)(a2 + 1104);
        }
        *(_QWORD *)(v259 + 1112) = v264;
        operator delete(v266);
      }
    }
    *(_OWORD *)(v259 + 1104) = *(__int128 *)((char *)v393 + 8);
    *(_QWORD *)(v259 + 1120) = *((_QWORD *)&v393[1] + 1);
    *(_BYTE *)(v259 + 1128) = 1;
  }
  else
  {
    ++*(_QWORD *)(a1 + 112);
    if (*(_BYTE *)(a2 + 1128))
    {
      v270 = a2;
      v271 = *(_QWORD *)(a2 + 1104);
      if (v271)
      {
        v272 = *(_QWORD *)(a2 + 1112);
        v273 = *(void **)(a2 + 1104);
        if (v272 != v271)
        {
          v274 = *(_QWORD *)(a2 + 1112);
          do
          {
            v276 = *(void **)(v274 - 24);
            v274 -= 24;
            v275 = v276;
            if (v276)
            {
              *(_QWORD *)(v272 - 16) = v275;
              operator delete(v275);
            }
            v272 = v274;
          }
          while (v274 != v271);
          v270 = a2;
          v273 = *(void **)(a2 + 1104);
        }
        *(_QWORD *)(v270 + 1112) = v271;
        operator delete(v273);
      }
      *(_BYTE *)(v270 + 1128) = 0;
    }
  }
LABEL_495:
  v277 = (char *)sub_2245443F0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)&v393[0] = 0;
  sub_22451C444(v277, v393);
  if (DWORD1(v393[0]))
  {
    v344 = __cxa_allocate_exception(8uLL);
    *v344 = &off_24EC7AC38;
    __cxa_throw(v344, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
  }
LABEL_496:
  if (*(_BYTE *)sub_2245443F0((uint64_t *)a1))
  {
    LODWORD(v278) = 0;
    v279 = 0;
    v394 = 0u;
    *(_OWORD *)v395 = 0u;
    memset(v393, 0, sizeof(v393));
    v280 = (float *)&v377;
    do
    {
      if ((_DWORD)v278 == HIDWORD(v279))
        v281 = 1.0;
      else
        v281 = 0.0;
      *v280++ = v281;
      v282 = (v279 + 1);
      v283 = v279 & 0xFFFFFFFF00000000;
      v284 = v282 | v283;
      v285 = v283 + 0x100000000;
      if ((int)v278 >= 3)
        v278 = v285;
      else
        v278 = v284;
      v279 = v278;
    }
    while (v278 != 0x400000000);
    *(_OWORD *)v396 = v377;
    v397 = *(_OWORD *)v378;
    *(_OWORD *)v398 = v379;
    v399 = *(_OWORD *)v380;
    sub_223BC4E44(a1, (float *)v393);
    v286 = v397;
    *(_OWORD *)(a2 + 1584) = *(_OWORD *)v396;
    *(_OWORD *)(a2 + 1600) = v286;
    v287 = v399;
    *(_OWORD *)(a2 + 1616) = *(_OWORD *)v398;
    *(_OWORD *)(a2 + 1632) = v287;
    v288 = v393[1];
    *(_OWORD *)(a2 + 1520) = v393[0];
    *(_OWORD *)(a2 + 1536) = v288;
    v289 = *(_OWORD *)v395;
    *(_OWORD *)(a2 + 1552) = v394;
    *(_OWORD *)(a2 + 1568) = v289;
    *(_BYTE *)(a2 + 1648) = 1;
  }
  else
  {
    ++*(_QWORD *)(a1 + 112);
    if (*(_BYTE *)(a2 + 1648))
      *(_BYTE *)(a2 + 1648) = 0;
  }
  if (a3 >= 3)
  {
    sub_224544138(a1);
    v290 = (uint64_t *)(a2 + 1656);
    v291 = *(unsigned __int8 **)(a1 + 32);
    v292 = *v291;
    if (v292 == 2)
    {
      v293 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v291 + 1) + 8) - **((_QWORD **)v291 + 1)) >> 4;
    }
    else if (v292 == 1)
    {
      v293 = *(_QWORD *)(*((_QWORD *)v291 + 1) + 16);
    }
    else
    {
      if (!*v291)
      {
        v293 = 0;
        v294 = (uint64_t *)(a2 + 1664);
        v295 = *(_QWORD *)(a2 + 1664);
        v296 = *(_QWORD *)(a2 + 1656);
        v297 = 0x86BCA1AF286BCA1BLL * ((v295 - v296) >> 4);
        goto LABEL_538;
      }
      v293 = 1;
    }
    v294 = (uint64_t *)(a2 + 1664);
    v295 = *(_QWORD *)(a2 + 1664);
    v296 = *(_QWORD *)(a2 + 1656);
    v297 = 0x86BCA1AF286BCA1BLL * ((v295 - v296) >> 4);
    if (v293 > v297)
    {
      sub_2232C879C((char **)(a2 + 1656), v293 - v297);
      v298 = *v294;
      v299 = *v290;
      if (*v290 != *v294)
        goto LABEL_520;
      goto LABEL_554;
    }
LABEL_538:
    if (v297 > v293)
    {
      v298 = v296 + 304 * v293;
      while (v295 != v298)
      {
        v323 = *(_QWORD *)(v295 - 160);
        if (v323)
        {
          v324 = *(_QWORD *)(v295 - 152);
          v322 = *(void **)(v295 - 160);
          if (v324 != v323)
          {
            v325 = *(_QWORD *)(v295 - 152);
            do
            {
              v327 = *(void **)(v325 - 24);
              v325 -= 24;
              v326 = v327;
              if (v327)
              {
                *(_QWORD *)(v324 - 16) = v326;
                operator delete(v326);
              }
              v324 = v325;
            }
            while (v325 != v323);
            v322 = *(void **)(v295 - 160);
          }
          *(_QWORD *)(v295 - 152) = v323;
          operator delete(v322);
        }
        v295 -= 304;
      }
      *v294 = v298;
      v299 = *v290;
      if (*v290 == v298)
        goto LABEL_554;
      do
      {
LABEL_520:
        sub_224544138(a1);
        v306 = *(unsigned __int8 *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = "version";
        *(_QWORD *)(a1 + 96) = 7;
        if (!v306)
          *(_BYTE *)(a1 + 104) = 1;
        v307 = (char *)sub_2245443F0((uint64_t *)a1);
        ++*(_QWORD *)(a1 + 112);
        *(_QWORD *)&v393[0] = 0;
        sub_22451C444(v307, v393);
        if (DWORD1(v393[0]))
        {
          v337 = __cxa_allocate_exception(8uLL);
          *v337 = &off_24EC7AC38;
          __cxa_throw(v337, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
        }
        v308 = (char *)sub_2245443F0((uint64_t *)a1);
        ++*(_QWORD *)(a1 + 112);
        *(_QWORD *)&v393[0] = 0;
        sub_22451C58C(v308, v393);
        *(_QWORD *)v299 = *(_QWORD *)&v393[0];
        v309 = sub_2245443F0((uint64_t *)a1);
        ++*(_QWORD *)(a1 + 112);
        sub_224545370(v309, (double *)(v299 + 8));
        sub_224544138(a1);
        v310 = *(unsigned __int8 *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = "version";
        *(_QWORD *)(a1 + 96) = 7;
        if (!v310)
          *(_BYTE *)(a1 + 104) = 1;
        v311 = (char *)sub_2245443F0((uint64_t *)a1);
        ++*(_QWORD *)(a1 + 112);
        *(_QWORD *)&v393[0] = 0;
        sub_22451C444(v311, v393);
        if (HIDWORD(*(_QWORD *)&v393[0]))
        {
          v336 = __cxa_allocate_exception(8uLL);
          *v336 = &off_24EC7AC38;
          __cxa_throw(v336, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
        }
        sub_223BC4740(a1, v299 + 136, v393[0]);
        v312 = *(_QWORD *)(a1 + 48);
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(v312 - 8);
        v313 = *(_QWORD *)(a1 + 72);
        *(_QWORD *)(a1 + 112) = *(_QWORD *)(v313 - 8);
        *(_QWORD *)(a1 + 48) = v312 - 8;
        *(_QWORD *)(a1 + 72) = v313 - 8;
        if (*(_BYTE *)sub_2245443F0((uint64_t *)a1))
        {
          LODWORD(v314) = 0;
          v315 = 0;
          v394 = 0u;
          *(_OWORD *)v395 = 0u;
          v316 = (float *)&v377;
          memset(v393, 0, sizeof(v393));
          do
          {
            if ((_DWORD)v314 == HIDWORD(v315))
              v317 = 1.0;
            else
              v317 = 0.0;
            *v316++ = v317;
            v318 = (v315 + 1);
            v319 = v315 & 0xFFFFFFFF00000000;
            v320 = v318 | v319;
            v321 = v319 + 0x100000000;
            if ((int)v314 >= 3)
              v314 = v321;
            else
              v314 = v320;
            v315 = v314;
          }
          while (v314 != 0x400000000);
          *(_OWORD *)v396 = v377;
          v397 = *(_OWORD *)v378;
          *(_OWORD *)v398 = v379;
          v399 = *(_OWORD *)v380;
          sub_223BC4E44(a1, (float *)v393);
          v300 = v397;
          *(_OWORD *)(v299 + 232) = *(_OWORD *)v396;
          *(_OWORD *)(v299 + 248) = v300;
          v301 = v399;
          *(_OWORD *)(v299 + 264) = *(_OWORD *)v398;
          *(_OWORD *)(v299 + 280) = v301;
          v302 = v393[1];
          *(_OWORD *)(v299 + 168) = v393[0];
          *(_OWORD *)(v299 + 184) = v302;
          v303 = *(_OWORD *)v395;
          *(_OWORD *)(v299 + 200) = v394;
          *(_OWORD *)(v299 + 216) = v303;
          *(_BYTE *)(v299 + 296) = 1;
        }
        else
        {
          ++*(_QWORD *)(a1 + 112);
          if (*(_BYTE *)(v299 + 296))
            *(_BYTE *)(v299 + 296) = 0;
        }
        v304 = *(_QWORD *)(a1 + 48);
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(v304 - 8);
        v305 = *(_QWORD *)(a1 + 72);
        *(_QWORD *)(a1 + 112) = *(_QWORD *)(v305 - 8);
        *(_QWORD *)(a1 + 48) = v304 - 8;
        *(_QWORD *)(a1 + 72) = v305 - 8;
        v299 += 304;
      }
      while (v299 != v298);
      v328 = v304 - 8;
      v329 = v305 - 8;
      goto LABEL_555;
    }
    v298 = v295;
    v299 = *v290;
    if (*v290 != v298)
      goto LABEL_520;
LABEL_554:
    v328 = *(_QWORD *)(a1 + 48);
    v329 = *(_QWORD *)(a1 + 72);
LABEL_555:
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v328 - 8);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(v329 - 8);
    *(_QWORD *)(a1 + 48) = v328 - 8;
    *(_QWORD *)(a1 + 72) = v329 - 8;
    if (a3 >= 6)
    {
      sub_224544138(a1);
      v330 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (!v330)
        *(_BYTE *)(a1 + 104) = 1;
      v331 = (char *)sub_2245443F0((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      *(_QWORD *)&v393[0] = 0;
      sub_22451C444(v331, v393);
      if (DWORD1(v393[0]))
      {
        v348 = __cxa_allocate_exception(8uLL);
        *v348 = &off_24EC7AC38;
        __cxa_throw(v348, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
      }
      v332 = (char *)sub_2245443F0((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      *(_QWORD *)&v393[0] = 0;
      sub_22451C444(v332, v393);
      if (*(_QWORD *)&v393[0] >= 0x100uLL)
      {
        v349 = __cxa_allocate_exception(8uLL);
        *v349 = &off_24EC7AC38;
        __cxa_throw(v349, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
      }
      *(_BYTE *)(a2 + 1680) = v393[0];
      v333 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(v333 - 8);
      v334 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(v334 - 8);
      *(_QWORD *)(a1 + 48) = v333 - 8;
      *(_QWORD *)(a1 + 72) = v334 - 8;
      if (a3 >= 8)
      {
        if (*(_BYTE *)sub_2245443F0((uint64_t *)a1))
        {
          v335 = (char *)sub_2245443F0((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          LOBYTE(v393[0]) = 0;
          sub_223996FF0(v335, v393);
          *(_BYTE *)(a2 + 1681) = v393[0];
          *(_BYTE *)(a2 + 1682) = 1;
        }
        else
        {
          ++*(_QWORD *)(a1 + 112);
          if (*(_BYTE *)(a2 + 1682))
            *(_BYTE *)(a2 + 1682) = 0;
        }
      }
    }
  }
}

void sub_223BC14A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36)
{
  unint64_t *p_shared_owners;
  unint64_t v38;

  if (a36)
  {
    p_shared_owners = (unint64_t *)&a36->__shared_owners_;
    do
      v38 = __ldaxr(p_shared_owners);
    while (__stlxr(v38 - 1, p_shared_owners));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))a36->__on_zero_shared)(a36);
      std::__shared_weak_count::__release_weak(a36);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void sub_223BC19C8(uint64_t *a1, uint64_t a2)
{
  int v3;
  char v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE v11[16];
  std::__shared_weak_count *v12;
  uint64_t (**v13)();
  uint64_t v14;
  std::__shared_weak_count *v15;
  char v16;
  _BYTE v17[32];
  uint64_t v18;
  int v19;
  unsigned __int8 v20;

  v17[0] = 0;
  v20 = 0;
  sub_223BC2058(a1, (uint64_t)v17);
  v3 = v20;
  if (v20)
  {
    sub_22416C400((uint64_t)v17, (uint64_t)v11);
    v13 = &off_24EC28D40;
    sub_2232C495C((uint64_t)v11, &v14);
    v4 = 1;
  }
  else
  {
    v4 = 0;
    LOBYTE(v13) = 0;
  }
  v16 = v4;
  sub_2232C4B84(a2, (uint64_t)&v13);
  if (v16)
  {
    v13 = &off_24EC28D40;
    v5 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  if (!v3)
    goto LABEL_15;
  v8 = v12;
  if (!v12)
    goto LABEL_15;
  v9 = (unint64_t *)&v12->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v20)
      return;
  }
  else
  {
LABEL_15:
    if (!v20)
      return;
  }
  if (v19 != -1)
    ((void (*)(uint64_t (***)(), uint64_t *))off_24EC5FFD0[v19])(&v13, &v18);
}

void sub_223BC1B14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_22319B358((uint64_t)va);
  sub_2232C17E0(v2 - 144);
  _Unwind_Resume(a1);
}

void sub_223BC1B6C(uint64_t *a1, uint64_t a2)
{
  int v3;
  char v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE v11[16];
  std::__shared_weak_count *v12;
  uint64_t (**v13)();
  uint64_t v14;
  std::__shared_weak_count *v15;
  char v16;
  _BYTE v17[32];
  uint64_t v18;
  int v19;
  unsigned __int8 v20;

  v17[0] = 0;
  v20 = 0;
  sub_223BC2058(a1, (uint64_t)v17);
  v3 = v20;
  if (v20)
  {
    sub_22416C400((uint64_t)v17, (uint64_t)v11);
    v13 = &off_24EC29028;
    sub_2232C529C((uint64_t)v11, &v14);
    v4 = 1;
  }
  else
  {
    v4 = 0;
    LOBYTE(v13) = 0;
  }
  v16 = v4;
  sub_2232C5628(a2, (uint64_t)&v13);
  if (v16)
  {
    v13 = &off_24EC29028;
    v5 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  if (!v3)
    goto LABEL_15;
  v8 = v12;
  if (!v12)
    goto LABEL_15;
  v9 = (unint64_t *)&v12->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v20)
      return;
  }
  else
  {
LABEL_15:
    if (!v20)
      return;
  }
  if (v19 != -1)
    ((void (*)(uint64_t (***)(), uint64_t *))off_24EC5FFD0[v19])(&v13, &v18);
}

void sub_223BC1CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  sub_22319B358((uint64_t)&a9);
  sub_2232C17E0((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_223BC1D10(uint64_t *a1, uint64_t a2)
{
  int v3;
  char v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE v11[16];
  std::__shared_weak_count *v12;
  uint64_t (**v13)();
  uint64_t v14;
  std::__shared_weak_count *v15;
  char v16;
  _BYTE v17[32];
  uint64_t v18;
  int v19;
  unsigned __int8 v20;

  v17[0] = 0;
  v20 = 0;
  sub_223BC2058(a1, (uint64_t)v17);
  v3 = v20;
  if (v20)
  {
    sub_22416C400((uint64_t)v17, (uint64_t)v11);
    v13 = &off_24EC21040;
    sub_2232C1A28((uint64_t)v11, &v14);
    v4 = 1;
  }
  else
  {
    v4 = 0;
    LOBYTE(v13) = 0;
  }
  v16 = v4;
  sub_2232C1C50(a2, (uint64_t)&v13);
  if (v16)
  {
    v13 = &off_24EC21040;
    v5 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  if (!v3)
    goto LABEL_15;
  v8 = v12;
  if (!v12)
    goto LABEL_15;
  v9 = (unint64_t *)&v12->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v20)
      return;
  }
  else
  {
LABEL_15:
    if (!v20)
      return;
  }
  if (v19 != -1)
    ((void (*)(uint64_t (***)(), uint64_t *))off_24EC5FFD0[v19])(&v13, &v18);
}

void sub_223BC1E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  sub_22319B358((uint64_t)&a9);
  sub_2232C17E0((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_223BC1EB4(uint64_t *a1, uint64_t a2)
{
  int v3;
  char v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE v11[16];
  std::__shared_weak_count *v12;
  uint64_t (**v13)();
  uint64_t v14;
  std::__shared_weak_count *v15;
  char v16;
  _BYTE v17[32];
  uint64_t v18;
  int v19;
  unsigned __int8 v20;

  v17[0] = 0;
  v20 = 0;
  sub_223BC2058(a1, (uint64_t)v17);
  v3 = v20;
  if (v20)
  {
    sub_22416C400((uint64_t)v17, (uint64_t)v11);
    v13 = &off_24EC28BC8;
    sub_2232C1E78((uint64_t)v11, &v14);
    v4 = 1;
  }
  else
  {
    v4 = 0;
    LOBYTE(v13) = 0;
  }
  v16 = v4;
  sub_2232C264C(a2, (uint64_t)&v13);
  if (v16)
  {
    v13 = &off_24EC28BC8;
    v5 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  if (!v3)
    goto LABEL_15;
  v8 = v12;
  if (!v12)
    goto LABEL_15;
  v9 = (unint64_t *)&v12->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v20)
      return;
  }
  else
  {
LABEL_15:
    if (!v20)
      return;
  }
  if (v19 != -1)
    ((void (*)(uint64_t (***)(), uint64_t *))off_24EC5FFD0[v19])(&v13, &v18);
}

void sub_223BC2000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  sub_22319B358((uint64_t)&a9);
  sub_2232C17E0((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_223BC2058(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[28];
  _BYTE v12[64];
  unsigned int v13;
  char v14;
  uint64_t (**v15)();
  uint64_t v16;
  std::__shared_weak_count *v17;

  if (*(_BYTE *)sub_2245443F0(a1))
  {
    v15 = &off_24EC1F958;
    sub_2231B3FDC((uint64_t)&v16);
    sub_22416BD7C((uint64_t)v11, (uint64_t)&v15, 0);
    v4 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    *(_DWORD *)&v11[24] = 0;
    v15 = (uint64_t (**)())a1[1];
    sub_223BC22E4((int *)&v15, (uint64_t)a1, (unsigned __int16 *)v11);
    if (*(_BYTE *)(a2 + 104))
    {
      v7 = *(unsigned int *)(a2 + 96);
      if ((_DWORD)v7 != -1)
        ((void (*)(uint64_t (***)(), uint64_t))off_24EC5FFD0[v7])(&v15, a2 + 32);
      *(_DWORD *)(a2 + 96) = -1;
      *(_BYTE *)(a2 + 104) = 0;
    }
    *(_OWORD *)a2 = *(_OWORD *)v11;
    *(_OWORD *)(a2 + 12) = *(_OWORD *)&v11[12];
    *(_BYTE *)(a2 + 32) = 0;
    *(_DWORD *)(a2 + 96) = -1;
    v8 = v13;
    if (v13 == -1)
    {
      *(_BYTE *)(a2 + 104) = 1;
    }
    else
    {
      ((void (*)(char *, uint64_t, _BYTE *))off_24EC60008[v13])(&v14, a2 + 32, v12);
      *(_DWORD *)(a2 + 96) = v8;
      v9 = v13;
      *(_BYTE *)(a2 + 104) = 1;
      if ((_DWORD)v9 != -1)
        ((void (*)(uint64_t (***)(), _BYTE *))off_24EC5FFD0[v9])(&v15, v12);
    }
  }
  else
  {
    ++a1[14];
    if (*(_BYTE *)(a2 + 104))
    {
      v10 = *(unsigned int *)(a2 + 96);
      if ((_DWORD)v10 != -1)
        ((void (*)(_BYTE *, uint64_t))off_24EC5FFD0[v10])(v11, a2 + 32);
      *(_DWORD *)(a2 + 96) = -1;
      *(_BYTE *)(a2 + 104) = 0;
    }
  }
}

void sub_223BC2248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v13 = *(unsigned int *)(v9 + 96);
  if ((_DWORD)v13 != -1)
    ((void (*)(uint64_t, uint64_t))off_24EC5FFD0[v13])(v11 - 96, v10);
  *(_DWORD *)(v9 + 96) = -1;
  sub_22319A588((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223BC228C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319A588((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223BC22A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 - 80);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_223BC22E4(int *a1, uint64_t a2, unsigned __int16 *a3)
{
  int v6;
  char *v7;
  unsigned int v8;
  int v9;
  char *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *exception;
  __int128 *v16;
  unint64_t v17;

  sub_224544138(a2);
  v6 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v6)
    *(_BYTE *)(a2 + 104) = 1;
  v7 = (char *)sub_2245443F0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v17 = 0;
  sub_22451C444(v7, &v17);
  v8 = v17;
  if (HIDWORD(v17))
    goto LABEL_19;
  if (*a1 >= 1)
  {
    if (v17 < 2 || *a1 != 2)
      goto LABEL_11;
    v9 = *(unsigned __int8 *)(a2 + 104);
    *(_QWORD *)(a2 + 88) = "min_version";
    *(_QWORD *)(a2 + 96) = 11;
    if (!v9)
      *(_BYTE *)(a2 + 104) = 1;
    v10 = (char *)sub_2245443F0((uint64_t *)a2);
    ++*(_QWORD *)(a2 + 112);
    v17 = 0;
    sub_22451C444(v10, &v17);
    v11 = v17;
    if (!HIDWORD(v17))
    {
      if (v17 >= 3)
      {
        v16 = sub_223BB9C9C();
        sub_22455C3A8((std::string *)v16, v11, 2u);
      }
LABEL_11:
      if (v8 >= 2)
        v12 = 2;
      else
        v12 = v8;
      if (v12 >= 2)
        goto LABEL_15;
LABEL_17:
      sub_223BC2470(a2, (uint64_t)a3);
      goto LABEL_18;
    }
LABEL_19:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24EC7AC38;
    __cxa_throw(exception, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
  }
  if (v17 < 2)
    goto LABEL_17;
LABEL_15:
  sub_223BC2AE8(a2, a3);
LABEL_18:
  v13 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v13 - 8);
  v14 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(a2 + 48) = v13 - 8;
  *(_QWORD *)(a2 + 72) = v14 - 8;
}

void sub_223BC2470(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  char *v11;
  int v12;
  int v13;
  int v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *exception;
  unsigned __int16 v29;
  __int128 v30;
  int v31;
  uint64_t (**v32)();
  __int128 v33;
  __int128 v34;
  _BYTE v35[22];
  unsigned int v36;
  _BYTE v37[40];
  _BYTE v38[22];
  void *__p;
  char v40;
  int v41;
  _QWORD v42[21];
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[22];
  char v47;

  *(_QWORD *)v37 = &off_24EC1F958;
  sub_2231B3FDC((uint64_t)&v37[8]);
  sub_22416B680((uint64_t)&v29, (uint64_t)v37, 0);
  v4 = *(std::__shared_weak_count **)&v37[16];
  if (*(_QWORD *)&v37[16])
  {
    v5 = (unint64_t *)(*(_QWORD *)&v37[16] + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v31 = 0;
  v7 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "io_format";
  *(_QWORD *)(a1 + 96) = 9;
  if (!v7)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)v37 = &v29;
  sub_223BC2FEC(a1, (_WORD **)v37);
  v8 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "structure";
  *(_QWORD *)(a1 + 96) = 9;
  if (!v8)
    *(_BYTE *)(a1 + 104) = 1;
  v9 = *(_DWORD *)(a1 + 8);
  sub_224544138(a1);
  v10 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v10)
    *(_BYTE *)(a1 + 104) = 1;
  v11 = (char *)sub_2245443F0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)v37 = 0;
  sub_22451C444(v11, v37);
  if (*(_DWORD *)&v37[4])
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24EC7AC38;
    __cxa_throw(exception, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
  }
  v12 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "image_format";
  *(_QWORD *)(a1 + 96) = 12;
  if (v12)
  {
    if (v9 >= 1)
      goto LABEL_15;
  }
  else
  {
    *(_BYTE *)(a1 + 104) = 1;
    if (v9 >= 1)
    {
LABEL_15:
      *(_QWORD *)v37 = &v30;
      sub_223BC3244(a1, (_QWORD **)v37);
      v13 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "size";
      *(_QWORD *)(a1 + 96) = 4;
      if (!v13)
        *(_BYTE *)(a1 + 104) = 1;
      goto LABEL_21;
    }
  }
  *(_QWORD *)v37 = &v30;
  sub_223BC3244(a1, (_QWORD **)v37);
  v14 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "size";
  *(_QWORD *)(a1 + 96) = 4;
  if (!v14)
    *(_BYTE *)(a1 + 104) = 1;
LABEL_21:
  *(_QWORD *)v37 = 2;
  *(_QWORD *)&v37[8] = (char *)&v30 + 8;
  v15 = (char *)sub_2245443F0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  sub_224544E0C(v15, (uint64_t)v37);
  v16 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v16 - 8);
  v17 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a1 + 48) = v16 - 8;
  *(_QWORD *)(a1 + 72) = v17 - 8;
  LODWORD(v16) = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "image_data";
  *(_QWORD *)(a1 + 96) = 10;
  if (!(_DWORD)v16)
    *(_BYTE *)(a1 + 104) = 1;
  sub_224544138(a1);
  if (v29 == 1)
  {
    sub_22416B268((uint64_t *)&v30, v31);
    if (v36 != -1)
      ((void (*)(uint64_t *, uint64_t (***)()))off_24EC6D660[v36])(&v43, &v32);
    v32 = &off_24EC1F958;
    v33 = *(_OWORD *)&v37[8];
    v34 = *(_OWORD *)&v37[24];
    *(_OWORD *)v35 = *(_OWORD *)v38;
    *(_QWORD *)&v35[14] = *(_QWORD *)&v38[14];
    v36 = 1;
    sub_22416E278((const void *)a1, (uint64_t)&v32);
    goto LABEL_44;
  }
  v18 = sub_22416E0BC(v29);
  sub_223BC3468((uint64_t)v37, (uint64_t *)a1);
  sub_2231B3838(v42, v18, (uint64_t)&v43);
  if (v36 != -1)
  {
    if (v36 == 1)
    {
      v19 = v44;
      v44 = 0uLL;
      v20 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
      v33 = v19;
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v34 = v45;
      *(_OWORD *)v35 = *(_OWORD *)v46;
      *(_QWORD *)&v35[14] = *(_QWORD *)&v46[14];
      v23 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
      if (*((_QWORD *)&v44 + 1))
      {
        v24 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      goto LABEL_41;
    }
    ((void (*)(char *, uint64_t (***)()))off_24EC5FFD0[v36])(&v47, &v32);
  }
  v32 = &off_24EC1F958;
  v33 = v44;
  v44 = 0uLL;
  v34 = v45;
  *(_OWORD *)v35 = *(_OWORD *)v46;
  *(_QWORD *)&v35[14] = *(_QWORD *)&v46[14];
  v36 = 1;
LABEL_41:
  std::istream::~istream();
  *(_QWORD *)v37 = MEMORY[0x24BEDB848] + 16;
  if (v40 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
LABEL_44:
  *(_WORD *)v37 = v29;
  *(_OWORD *)&v37[8] = v30;
  v26 = v36;
  *(_DWORD *)&v37[24] = v31;
  v37[32] = 0;
  v41 = -1;
  if (v36 == -1)
  {
    *(_OWORD *)a2 = *(_OWORD *)v37;
    *(_OWORD *)(a2 + 12) = *(_OWORD *)&v37[12];
    v27 = *(unsigned int *)(a2 + 96);
    if ((_DWORD)v27 != -1)
    {
      ((void (*)(uint64_t *, uint64_t))off_24EC5FFD0[v27])(&v43, a2 + 32);
      *(_DWORD *)(a2 + 96) = -1;
    }
  }
  else
  {
    ((void (*)(char *, _BYTE *, uint64_t (***)()))off_24EC60008[v36])(&v47, &v37[32], &v32);
    v41 = v26;
    *(_OWORD *)a2 = *(_OWORD *)v37;
    *(_OWORD *)(a2 + 12) = *(_OWORD *)&v37[12];
    v43 = a2 + 32;
    ((void (*)(uint64_t *))off_24EC60018[v26])(&v43);
  }
  if (v41 != -1)
    ((void (*)(uint64_t *, _BYTE *))off_24EC5FFD0[v41])(&v43, &v37[32]);
  if (v36 != -1)
    ((void (*)(_BYTE *, uint64_t (***)()))off_24EC5FFD0[v36])(v37, &v32);
}

void sub_223BC2A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  sub_2231B394C((uint64_t)&a22);
  sub_2231B55F0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223BC2A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  sub_22319A588((uint64_t)&a22);
  sub_2231B55F0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223BC2A60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34)
{
  uint64_t v34;
  uint64_t v35;

  if (a34 != -1)
    ((void (*)(uint64_t, uint64_t))off_24EC5FFD0[a34])(v35 - 136, v34);
  sub_2231B55F0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223BC2AE8(uint64_t a1, unsigned __int16 *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  char *v8;
  unsigned int v9;
  int v10;
  char *v11;
  unsigned int v12;
  int v13;
  int v14;
  char *v15;
  int v16;
  int v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *exception;
  __int128 *v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[22];
  void *__p;
  char v39;
  _QWORD v40[21];
  _BYTE v41[24];
  __int128 v42;
  _OWORD v43[2];
  char v44;

  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "io_format";
  *(_QWORD *)(a1 + 96) = 9;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v34 = (unint64_t)a2;
  sub_223BC2FEC(a1, (_WORD **)&v34);
  v5 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "structure";
  *(_QWORD *)(a1 + 96) = 9;
  if (!v5)
    *(_BYTE *)(a1 + 104) = 1;
  v6 = *(_DWORD *)(a1 + 8);
  sub_224544138(a1);
  v7 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v7)
    *(_BYTE *)(a1 + 104) = 1;
  v8 = (char *)sub_2245443F0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v34 = 0;
  sub_22451C444(v8, &v34);
  v9 = v34;
  if (HIDWORD(v34))
    goto LABEL_51;
  if (v6 < 1)
    goto LABEL_17;
  if (v6 == 2 && v34 >= 2)
  {
    v10 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "min_version";
    *(_QWORD *)(a1 + 96) = 11;
    if (!v10)
      *(_BYTE *)(a1 + 104) = 1;
    v11 = (char *)sub_2245443F0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v34 = 0;
    sub_22451C444(v11, &v34);
    v12 = v34;
    if (!HIDWORD(v34))
    {
      if (v34 >= 3)
      {
        v33 = sub_223BBAE20();
        sub_22455C3A8((std::string *)v33, v12, 2u);
      }
      goto LABEL_15;
    }
LABEL_51:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24EC7AC38;
    __cxa_throw(exception, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
  }
LABEL_15:
  if (v9 >= 2)
    v9 = 2;
LABEL_17:
  if (v9 < 2)
  {
    *(_OWORD *)v41 = 1uLL;
    v16 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "image_format";
    *(_QWORD *)(a1 + 96) = 12;
    if (!v16)
      *(_BYTE *)(a1 + 104) = 1;
    v34 = (unint64_t)v41;
    sub_223BC3244(a1, (_QWORD **)&v34);
    v17 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "size";
    *(_QWORD *)(a1 + 96) = 4;
    if (!v17)
      *(_BYTE *)(a1 + 104) = 1;
    v34 = 2;
    *(_QWORD *)&v35 = &v41[8];
    v18 = (char *)sub_2245443F0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_224544E0C(v18, (uint64_t)&v34);
    *(_OWORD *)(a2 + 4) = *(_OWORD *)v41;
  }
  else
  {
    v13 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "image_format";
    *(_QWORD *)(a1 + 96) = 12;
    if (!v13)
      *(_BYTE *)(a1 + 104) = 1;
    v34 = (unint64_t)(a2 + 4);
    sub_223BC3244(a1, (_QWORD **)&v34);
    v14 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "size";
    *(_QWORD *)(a1 + 96) = 4;
    if (!v14)
      *(_BYTE *)(a1 + 104) = 1;
    v34 = 2;
    *(_QWORD *)&v35 = a2 + 8;
    v15 = (char *)sub_2245443F0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_224544E0C(v15, (uint64_t)&v34);
  }
  v19 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v19 - 8);
  v20 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v20 - 8);
  *(_QWORD *)(a1 + 48) = v19 - 8;
  *(_QWORD *)(a1 + 72) = v20 - 8;
  LODWORD(v19) = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "image_data";
  *(_QWORD *)(a1 + 96) = 10;
  if ((_DWORD)v19)
  {
    sub_224544138(a1);
    v21 = *a2;
    if (v21 == 1)
    {
LABEL_30:
      sub_22416B404((uint64_t *)a2 + 1, *((_DWORD *)a2 + 6));
      v22 = *((unsigned int *)a2 + 24);
      if ((_DWORD)v22 != -1)
        ((void (*)(_BYTE *, unsigned __int16 *))off_24EC6D660[v22])(v41, a2 + 16);
      *((_QWORD *)a2 + 4) = &off_24EC1F958;
      *(_OWORD *)(a2 + 20) = v35;
      *(_OWORD *)(a2 + 28) = v36;
      *(_OWORD *)(a2 + 36) = *(_OWORD *)v37;
      *(_QWORD *)(a2 + 43) = *(_QWORD *)&v37[14];
      *((_DWORD *)a2 + 24) = 1;
      sub_22416E278((const void *)a1, (uint64_t)(a2 + 16));
      return;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 104) = 1;
    sub_224544138(a1);
    v21 = *a2;
    if (v21 == 1)
      goto LABEL_30;
  }
  v23 = sub_22416E0BC(v21);
  sub_223BC3468((uint64_t)&v34, (uint64_t *)a1);
  sub_2231B3838(v40, v23, (uint64_t)v41);
  v24 = *((unsigned int *)a2 + 24);
  if ((_DWORD)v24 != -1)
  {
    if ((_DWORD)v24 == 1)
    {
      v25 = *(_OWORD *)&v41[8];
      *(_QWORD *)&v41[8] = 0;
      *(_QWORD *)&v41[16] = 0;
      v26 = (std::__shared_weak_count *)*((_QWORD *)a2 + 6);
      *(_OWORD *)(a2 + 20) = v25;
      if (v26)
      {
        p_shared_owners = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(p_shared_owners);
        while (__stlxr(v28 - 1, p_shared_owners));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      *(_OWORD *)(a2 + 28) = v42;
      *(_OWORD *)(a2 + 36) = v43[0];
      *(_QWORD *)(a2 + 43) = *(_QWORD *)((char *)v43 + 14);
      v29 = *(std::__shared_weak_count **)&v41[16];
      if (*(_QWORD *)&v41[16])
      {
        v30 = (unint64_t *)(*(_QWORD *)&v41[16] + 8);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      goto LABEL_48;
    }
    ((void (*)(char *, unsigned __int16 *))off_24EC5FFD0[v24])(&v44, a2 + 16);
  }
  *((_QWORD *)a2 + 4) = &off_24EC1F958;
  *(_OWORD *)(a2 + 20) = *(_OWORD *)&v41[8];
  *(_QWORD *)&v41[8] = 0;
  *(_QWORD *)&v41[16] = 0;
  *(_OWORD *)(a2 + 28) = v42;
  *(_OWORD *)(a2 + 36) = v43[0];
  *(_QWORD *)(a2 + 43) = *(_QWORD *)((char *)v43 + 14);
  *((_DWORD *)a2 + 24) = 1;
LABEL_48:
  std::istream::~istream();
  v34 = MEMORY[0x24BEDB848] + 16;
  if (v39 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
}

void sub_223BC2FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2231B394C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223BC2FEC(uint64_t a1, _WORD **a2)
{
  char *v4;
  void **v5;
  int v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *exception;
  void *__p[2];
  uint64_t v17;
  __int16 v18;
  __int128 v19;
  uint64_t v20;

  if ((*(_BYTE *)(a1 + 12) & 2) != 0)
  {
    __p[0] = 0;
    __p[1] = 0;
    v17 = 0;
    v5 = (void **)sub_2245443F0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v20 = 0;
    v19 = 0uLL;
    sub_22451C83C(v5, (uint64_t)&v19);
    v17 = v20;
    *(_OWORD *)__p = v19;
    v6 = SHIBYTE(v20);
    v7 = (char *)v19;
    v8 = operator new();
    v9 = v8;
    if (v6 >= 0)
      v10 = (char *)__p;
    else
      v10 = v7;
    sub_22456E918(v8, v10);
    *(_QWORD *)&v19 = v9;
    v18 = 0;
    sub_22416D4C8((uint64_t *)v9, &v18);
    v11 = v18;
    v12 = MEMORY[0x24BEDB7F0];
    v13 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v9 = *MEMORY[0x24BEDB7F0];
    v14 = *(_QWORD *)(v12 + 72);
    *(_QWORD *)(v9 + *(_QWORD *)(v13 - 24)) = *(_QWORD *)(v12 + 64);
    *(_QWORD *)(v9 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v9 + 16) = v14;
    if (*(char *)(v9 + 111) < 0)
      operator delete(*(void **)(v9 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v9 + 128);
    MEMORY[0x227684CE8](v9, 0x10B2C40EED050F3);
    **a2 = v11;
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
  }
  else
  {
    v4 = (char *)sub_2245443F0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    *(_QWORD *)&v19 = 0;
    sub_22451C444(v4, &v19);
    if ((unint64_t)v19 >= 0x10000)
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = &off_24EC7AC38;
      __cxa_throw(exception, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
    }
    **a2 = v19;
  }
}

void sub_223BC31B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_22456E764((uint64_t *)&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223BC3244(uint64_t a1, _QWORD **a2)
{
  char *v4;
  void **v5;
  int v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *__p[2];
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  if ((*(_BYTE *)(a1 + 12) & 2) != 0)
  {
    __p[0] = 0;
    __p[1] = 0;
    v16 = 0;
    v5 = (void **)sub_2245443F0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v19 = 0;
    v18 = 0uLL;
    sub_22451C83C(v5, (uint64_t)&v18);
    v16 = v19;
    *(_OWORD *)__p = v18;
    v6 = SHIBYTE(v19);
    v7 = (char *)v18;
    v8 = operator new();
    v9 = v8;
    if (v6 >= 0)
      v10 = (char *)__p;
    else
      v10 = v7;
    sub_22456E918(v8, v10);
    v17 = 0;
    *(_QWORD *)&v18 = v9;
    sub_22416DB34((uint64_t *)v9, &v17);
    v11 = v17;
    v12 = MEMORY[0x24BEDB7F0];
    v13 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v9 = *MEMORY[0x24BEDB7F0];
    v14 = *(_QWORD *)(v12 + 72);
    *(_QWORD *)(v9 + *(_QWORD *)(v13 - 24)) = *(_QWORD *)(v12 + 64);
    *(_QWORD *)(v9 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v9 + 16) = v14;
    if (*(char *)(v9 + 111) < 0)
      operator delete(*(void **)(v9 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v9 + 128);
    MEMORY[0x227684CE8](v9, 0x10B2C40EED050F3);
    **a2 = v11;
    if (SHIBYTE(v16) < 0)
      operator delete(__p[0]);
  }
  else
  {
    v4 = (char *)sub_2245443F0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    *(_QWORD *)&v18 = 0;
    sub_22451C444(v4, &v18);
    **a2 = v18;
  }
}

void sub_223BC33DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_22456E764((uint64_t *)&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_223BC3468(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void **v5;
  uint64_t v6;
  char *v7;
  std::string::size_type v8;
  std::string *p_n;
  char *v10;
  _QWORD v12[2];
  std::string __n;

  v4 = std::streambuf::basic_streambuf();
  *(_QWORD *)v4 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(v4 + 64) = 0u;
  v5 = (void **)(v4 + 64);
  v6 = MEMORY[0x24BEDB820];
  *(_OWORD *)(v4 + 80) = 0u;
  *(_QWORD *)(v4 + 104) = v6 + 24;
  *(_DWORD *)(v4 + 96) = 24;
  *(_QWORD *)(v4 + 120) = v6 + 64;
  *(_QWORD *)(v4 + 112) = 0;
  std::ios_base::init((std::ios_base *)(v4 + 120), (void *)a1);
  *(_QWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = -1;
  v7 = (char *)sub_2245443F0(a2);
  ++a2[14];
  __n.__r_.__value_.__r.__words[0] = 0;
  sub_22451C444(v7, &__n);
  v8 = __n.__r_.__value_.__r.__words[0];
  memset(&__n, 0, sizeof(__n));
  if (v8 && (std::string::append(&__n, v8, 0), SHIBYTE(__n.__r_.__value_.__r.__words[2]) < 0))
  {
    p_n = (std::string *)__n.__r_.__value_.__r.__words[0];
    if (!__n.__r_.__value_.__r.__words[0])
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      p_n = 0;
    }
  }
  else
  {
    p_n = &__n;
  }
  v12[0] = v8;
  v12[1] = p_n;
  v10 = (char *)sub_2245443F0(a2);
  ++a2[14];
  sub_224544508(v10, (uint64_t)v12);
  if (*(char *)(a1 + 87) < 0)
    operator delete(*v5);
  *(std::string *)v5 = __n;
  *((_BYTE *)&__n.__r_.__value_.__s + 23) = 0;
  __n.__r_.__value_.__s.__data_[0] = 0;
  sub_2231B5488(a1);
  if (SHIBYTE(__n.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__n.__r_.__value_.__l.__data_);
  return a1;
}

void sub_223BC3604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (a17 < 0)
    operator delete(__p);
  std::istream::~istream();
  sub_2231A01E4(v17);
  _Unwind_Resume(a1);
}

void sub_223BC3670(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t *v5;
  unsigned __int8 *v6;
  int v7;
  uint64_t v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  __int128 v19;

  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "dictionary";
  *(_QWORD *)(a1 + 96) = 10;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (uint64_t *)operator new();
  *v5 = 0;
  v5[1] = 0;
  v18 = v5;
  v6 = (unsigned __int8 *)sub_2245443F0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  sub_223799EE8((uint64_t)&v19, v6);
  v7 = *(unsigned __int8 *)v5;
  *(_BYTE *)v5 = v19;
  LOBYTE(v19) = v7;
  v8 = v5[1];
  v5[1] = *((_QWORD *)&v19 + 1);
  *((_QWORD *)&v19 + 1) = v8;
  sub_223454278((uint64_t *)&v19 + 1, v7);
  v17 = v5;
  sub_2245197F4((uint64_t *)&v17, &v19);
  v9 = v19;
  v19 = 0uLL;
  v10 = *(std::__shared_weak_count **)(a2 + 8);
  *(_OWORD *)a2 = v9;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v18;
  if (v18)
  {
    sub_223454278(v18 + 1, *(unsigned __int8 *)v18);
    MEMORY[0x227684CE8](v16, 0x1022C40B06DCE69);
  }
}

void sub_223BC37E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_224535780((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_223BC37FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_224535780((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_223BC3810(uint64_t a1, float *a2, unsigned int a3)
{
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  char *v10;
  _QWORD v11[2];

  if (a3 < 2)
  {
    sub_223BC3934((uint64_t)v11, a1, (uint64_t)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "focal_length";
    *(_QWORD *)(a1 + 96) = 12;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = sub_2245443F0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_224545240(v6, a2);
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "principal_point";
    *(_QWORD *)(a1 + 96) = 15;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    v8 = sub_2245443F0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_224545240(v8, a2 + 2);
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "image_size";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v11[0] = 2;
    v11[1] = a2 + 4;
    v10 = (char *)sub_2245443F0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_224544E0C(v10, (uint64_t)v11);
  }
}

void sub_223BC3934(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  char *v12;
  float32x2_t v13;
  float32x2_t *v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v22;
  float32x2_t v23;
  int32x2_t v24;
  int8x16_t v25;
  int8x16_t *v26;
  uint64_t v27;
  char *v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  int8x16_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  int8x16_t *v42;
  std::__shared_weak_count *v43;
  _QWORD v44[2];

  v39 = 0;
  v40 = 0;
  v41 = 0;
  v5 = (char *)operator new(0x78uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24EC6CCC0;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24EC20868;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 56) = v6;
  *(int32x4_t *)(v5 + 72) = v6;
  *(int32x4_t *)(v5 + 88) = v6;
  *((_DWORD *)v5 + 26) = 2143289344;
  *((_QWORD *)v5 + 14) = 0;
  v43 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24EC207B8;
  v42 = (int8x16_t *)(v5 + 24);
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "focal_length";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v8 = sub_2245443F0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_224545240(v8, (float *)&v39);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "principal_point";
  *(_QWORD *)(a2 + 96) = 15;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  v10 = sub_2245443F0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_224545240(v10, (float *)&v40);
  v11 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "image_size";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v11)
    *(_BYTE *)(a2 + 104) = 1;
  v44[0] = 2;
  v44[1] = &v41;
  v12 = (char *)sub_2245443F0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_224544E0C(v12, (uint64_t)v44);
  v13 = v41;
  v14 = (float32x2_t *)v42;
  v15 = v39;
  v16 = v40;
  __asm { FMOV            V2.2S, #1.0 }
  v22 = vdiv_f32(_D2, v39);
  v23 = vmul_f32(v22, vneg_f32(v40));
  v24 = vzip1_s32((int32x2_t)v39, (int32x2_t)v40);
  v25.i64[0] = v24.u32[0];
  v25.i64[1] = v24.u32[1];
  v42[1] = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)v39, (int32x2_t)v40), 0x20uLL), v25);
  v14[4] = v22;
  v14[5] = v23;
  v14[6].i32[0] = v15.i32[0];
  v14[7] = 0;
  v14[6].i32[1] = 0;
  v14[8].i32[0] = v15.i32[1];
  v14[8].i32[1] = 0;
  v14[9] = v16;
  v14[10].i32[0] = 1065353216;
  v14[11] = v13;
  v26 = v42;
  v38 = v42[1];
  v27 = v42[5].i64[1];
  v28 = (char *)operator new(0x78uLL);
  *((_QWORD *)v28 + 1) = 0;
  *((_QWORD *)v28 + 2) = 0;
  *(_QWORD *)v28 = &off_24EC6CE00;
  v29 = v26[1];
  *((_QWORD *)v28 + 4) = &off_24EC20868;
  *(int8x16_t *)(v28 + 40) = v29;
  *(int8x16_t *)(v28 + 56) = v26[2];
  v30 = v26[3];
  v31 = v26[4];
  *((_DWORD *)v28 + 26) = v26[5].i32[0];
  *(int8x16_t *)(v28 + 88) = v31;
  *(int8x16_t *)(v28 + 72) = v30;
  *((_QWORD *)v28 + 3) = &off_24EC207B8;
  *((_QWORD *)v28 + 14) = v27;
  *(int8x16_t *)a3 = v38;
  *(_QWORD *)(a3 + 16) = v27;
  *(_QWORD *)(a3 + 24) = v28 + 24;
  v32 = *(std::__shared_weak_count **)(a3 + 32);
  *(_QWORD *)(a3 + 32) = v28;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v43;
  if (v43)
  {
    v36 = (unint64_t *)&v43->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_223BC3BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_22365B530((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BC3C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_22365B530((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BC3C14(uint64_t a1, uint64_t a2)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *exception;
  _BYTE v9[20];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD v19[2];
  unint64_t v20;

  if (*(_BYTE *)sub_2245443F0((uint64_t *)a1))
  {
    *(_WORD *)v9 = 0;
    v9[2] = 0;
    *(_OWORD *)&v9[4] = 0uLL;
    v10 = 0u;
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    memset(v19, 0, 25);
    sub_224544138(a1);
    v4 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "version";
    *(_QWORD *)(a1 + 96) = 7;
    if (!v4)
      *(_BYTE *)(a1 + 104) = 1;
    v5 = (char *)sub_2245443F0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v20 = 0;
    sub_22451C444(v5, &v20);
    if (HIDWORD(v20))
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = &off_24EC7AC38;
      __cxa_throw(exception, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
    }
    sub_223BC3E24(a1, (uint64_t)v9, v20);
    v6 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v6 - 8);
    v7 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(v7 - 8);
    *(_QWORD *)(a1 + 48) = v6 - 8;
    *(_QWORD *)(a1 + 72) = v7 - 8;
    if (*(_BYTE *)(a2 + 200))
    {
      sub_223255CAC(a2 + 24);
      *(_BYTE *)(a2 + 200) = 0;
    }
    *(_OWORD *)a2 = *(_OWORD *)v9;
    *(_DWORD *)(a2 + 16) = *(_DWORD *)&v9[16];
    *(_OWORD *)(a2 + 24) = v10;
    *(_OWORD *)(a2 + 40) = v11;
    *(_OWORD *)(a2 + 56) = v12;
    *(_OWORD *)(a2 + 72) = v13;
    *(_OWORD *)(a2 + 88) = v14;
    *(_OWORD *)(a2 + 104) = v15;
    *(_OWORD *)(a2 + 120) = v16;
    *(_OWORD *)(a2 + 136) = v17;
    *(_OWORD *)(a2 + 152) = v18;
    *(_OWORD *)(a2 + 168) = v19[0];
    *(_QWORD *)(a2 + 184) = *(_QWORD *)&v19[1];
    *(_BYTE *)(a2 + 192) = BYTE8(v19[1]);
    *(_BYTE *)(a2 + 200) = 1;
  }
  else
  {
    ++*(_QWORD *)(a1 + 112);
    if (*(_BYTE *)(a2 + 200))
    {
      sub_223255CAC(a2 + 24);
      *(_BYTE *)(a2 + 200) = 0;
    }
  }
}

void sub_223BC3E10(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223255CAC(v1);
  _Unwind_Resume(a1);
}

void sub_223BC3E24(uint64_t a1, uint64_t a2, unsigned int a3)
{
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  int v11;
  char *v12;
  int v13;
  unsigned __int8 *v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  int v25;
  unint64_t v26;
  float *v27;
  float **v28;
  float *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  int v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  int v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 *v64;
  int v65;
  unint64_t v66;
  float *v67;
  float **v68;
  float *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned __int8 *v74;
  int v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  _QWORD *exception;
  unint64_t v85;
  uint64_t v86;

  v6 = (char *)sub_2245443F0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  LOBYTE(v85) = 0;
  sub_223996FF0(v6, &v85);
  *(_BYTE *)a2 = v85;
  v7 = (char *)sub_2245443F0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  LOBYTE(v85) = 0;
  sub_223996FF0(v7, &v85);
  *(_BYTE *)(a2 + 1) = v85;
  v8 = (char *)sub_2245443F0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v85 = 0;
  sub_22451C58C(v8, &v85);
  if (v85 != (int)v85)
    goto LABEL_105;
  *(_DWORD *)(a2 + 4) = v85;
  v9 = (char *)sub_2245443F0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v85 = 0;
  sub_22451C58C(v9, &v85);
  *(_QWORD *)(a2 + 8) = v85;
  v10 = (char *)sub_2245443F0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v85 = 0;
  sub_22451C58C(v10, &v85);
  if (v85 != (int)v85)
    goto LABEL_105;
  *(_DWORD *)(a2 + 16) = v85;
  if (a3 < 2)
    return;
  sub_224544138(a1);
  v11 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v11)
    *(_BYTE *)(a1 + 104) = 1;
  v12 = (char *)sub_2245443F0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v85 = 0;
  sub_22451C444(v12, &v85);
  v13 = v85;
  if (HIDWORD(v85))
    goto LABEL_105;
  sub_224544138(a1);
  v14 = *(unsigned __int8 **)(a1 + 32);
  v15 = *v14;
  if (v15 == 2)
  {
    v16 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v14 + 1) + 8) - **((_QWORD **)v14 + 1)) >> 4;
  }
  else if (v15 == 1)
  {
    v16 = *(_QWORD *)(*((_QWORD *)v14 + 1) + 16);
  }
  else
  {
    if (!*v14)
    {
      v16 = 0;
      v18 = (uint64_t *)(a2 + 32);
      v17 = *(_QWORD *)(a2 + 32);
      v19 = *(_QWORD *)(a2 + 24);
      v20 = (v17 - v19) >> 4;
      goto LABEL_16;
    }
    v16 = 1;
  }
  v18 = (uint64_t *)(a2 + 32);
  v17 = *(_QWORD *)(a2 + 32);
  v19 = *(_QWORD *)(a2 + 24);
  v20 = (v17 - v19) >> 4;
  if (v16 > v20)
  {
    sub_2232C68D0((char **)(a2 + 24), v16 - v20);
    v19 = *(_QWORD *)(a2 + 24);
    v17 = *v18;
    goto LABEL_18;
  }
LABEL_16:
  if (v20 > v16)
  {
    v17 = v19 + 16 * v16;
    *v18 = v17;
  }
LABEL_18:
  while (v19 != v17)
  {
    v85 = 16;
    v86 = v19;
    v21 = (char *)sub_2245443F0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_224544508(v21, (uint64_t)&v85);
    v19 += 16;
  }
  v22 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v22 - 8);
  v23 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v23 - 8);
  *(_QWORD *)(a1 + 48) = v22 - 8;
  *(_QWORD *)(a1 + 72) = v23 - 8;
  sub_224544138(a1);
  v24 = *(unsigned __int8 **)(a1 + 32);
  v25 = *v24;
  if (v25 == 2)
  {
    v26 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v24 + 1) + 8) - **((_QWORD **)v24 + 1)) >> 4;
  }
  else if (v25 == 1)
  {
    v26 = *(_QWORD *)(*((_QWORD *)v24 + 1) + 16);
  }
  else
  {
    if (!*v24)
    {
      v26 = 0;
      v28 = (float **)(a2 + 56);
      v27 = *(float **)(a2 + 56);
      v29 = *(float **)(a2 + 48);
      v30 = ((char *)v27 - (char *)v29) >> 6;
      goto LABEL_29;
    }
    v26 = 1;
  }
  v28 = (float **)(a2 + 56);
  v27 = *(float **)(a2 + 56);
  v29 = *(float **)(a2 + 48);
  v30 = ((char *)v27 - (char *)v29) >> 6;
  if (v26 > v30)
  {
    sub_2232C69F8((char **)(a2 + 48), v26 - v30);
    v29 = *(float **)(a2 + 48);
    v27 = *v28;
    goto LABEL_32;
  }
LABEL_29:
  if (v30 > v26)
  {
    v27 = &v29[16 * v26];
    *v28 = v27;
  }
LABEL_32:
  while (v29 != v27)
  {
    v31 = sub_2245443F0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_224545240(v31, v29);
    v29 += 16;
  }
  v32 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v32 - 8);
  v33 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v33 - 8);
  *(_QWORD *)(a1 + 48) = v32 - 8;
  *(_QWORD *)(a1 + 72) = v33 - 8;
  sub_224544138(a1);
  v34 = *(unsigned __int8 **)(a1 + 32);
  v35 = *v34;
  if (v35 == 2)
  {
    v36 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v34 + 1) + 8) - **((_QWORD **)v34 + 1)) >> 4;
  }
  else if (v35 == 1)
  {
    v36 = *(_QWORD *)(*((_QWORD *)v34 + 1) + 16);
  }
  else
  {
    if (!*v34)
    {
      v36 = 0;
      v38 = (uint64_t *)(a2 + 80);
      v37 = *(_QWORD *)(a2 + 80);
      v39 = *(_QWORD *)(a2 + 72);
      v40 = (v37 - v39) >> 4;
      goto LABEL_42;
    }
    v36 = 1;
  }
  v38 = (uint64_t *)(a2 + 80);
  v37 = *(_QWORD *)(a2 + 80);
  v39 = *(_QWORD *)(a2 + 72);
  v40 = (v37 - v39) >> 4;
  if (v36 > v40)
  {
    sub_2232C68D0((char **)(a2 + 72), v36 - v40);
    v39 = *(_QWORD *)(a2 + 72);
    v37 = *v38;
    goto LABEL_44;
  }
LABEL_42:
  if (v40 > v36)
  {
    v37 = v39 + 16 * v36;
    *v38 = v37;
  }
LABEL_44:
  while (v39 != v37)
  {
    v85 = 16;
    v86 = v39;
    v41 = (char *)sub_2245443F0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_224544508(v41, (uint64_t)&v85);
    v39 += 16;
  }
  v42 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v42 - 8);
  v43 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v43 - 8);
  *(_QWORD *)(a1 + 48) = v42 - 8;
  *(_QWORD *)(a1 + 72) = v43 - 8;
  sub_224544138(a1);
  v44 = *(unsigned __int8 **)(a1 + 32);
  v45 = *v44;
  if (v45 == 2)
  {
    v46 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v44 + 1) + 8) - **((_QWORD **)v44 + 1)) >> 4;
  }
  else if (v45 == 1)
  {
    v46 = *(_QWORD *)(*((_QWORD *)v44 + 1) + 16);
  }
  else
  {
    if (!*v44)
    {
      v46 = 0;
      v48 = (uint64_t *)(a2 + 104);
      v47 = *(_QWORD *)(a2 + 104);
      v49 = *(_QWORD *)(a2 + 96);
      v50 = (v47 - v49) >> 4;
      goto LABEL_55;
    }
    v46 = 1;
  }
  v48 = (uint64_t *)(a2 + 104);
  v47 = *(_QWORD *)(a2 + 104);
  v49 = *(_QWORD *)(a2 + 96);
  v50 = (v47 - v49) >> 4;
  if (v46 > v50)
  {
    sub_2232C68D0((char **)(a2 + 96), v46 - v50);
    v49 = *(_QWORD *)(a2 + 96);
    v47 = *v48;
    goto LABEL_57;
  }
LABEL_55:
  if (v50 > v46)
  {
    v47 = v49 + 16 * v46;
    *v48 = v47;
  }
LABEL_57:
  while (v49 != v47)
  {
    v85 = 16;
    v86 = v49;
    v51 = (char *)sub_2245443F0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_224544508(v51, (uint64_t)&v85);
    v49 += 16;
  }
  v52 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v52 - 8);
  v53 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v53 - 8);
  *(_QWORD *)(a1 + 48) = v52 - 8;
  *(_QWORD *)(a1 + 72) = v53 - 8;
  if ((v13 & 0xFFFFFFFE) != 0)
  {
    sub_224544138(a1);
    v54 = *(unsigned __int8 **)(a1 + 32);
    v55 = *v54;
    if (v55 == 2)
    {
      v56 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v54 + 1) + 8) - **((_QWORD **)v54 + 1)) >> 4;
    }
    else if (v55 == 1)
    {
      v56 = *(_QWORD *)(*((_QWORD *)v54 + 1) + 16);
    }
    else
    {
      if (!*v54)
      {
        v56 = 0;
        v58 = (uint64_t *)(a2 + 128);
        v57 = *(_QWORD *)(a2 + 128);
        v59 = *(_QWORD *)(a2 + 120);
        v60 = (v57 - v59) >> 4;
        goto LABEL_69;
      }
      v56 = 1;
    }
    v58 = (uint64_t *)(a2 + 128);
    v57 = *(_QWORD *)(a2 + 128);
    v59 = *(_QWORD *)(a2 + 120);
    v60 = (v57 - v59) >> 4;
    if (v56 > v60)
    {
      sub_2232C68D0((char **)(a2 + 120), v56 - v60);
      v59 = *(_QWORD *)(a2 + 120);
      v57 = *v58;
      goto LABEL_71;
    }
LABEL_69:
    if (v60 > v56)
    {
      v57 = v59 + 16 * v56;
      *v58 = v57;
    }
LABEL_71:
    while (v59 != v57)
    {
      v85 = 16;
      v86 = v59;
      v61 = (char *)sub_2245443F0((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      sub_224544508(v61, (uint64_t)&v85);
      v59 += 16;
    }
    v62 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v62 - 8);
    v63 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(v63 - 8);
    *(_QWORD *)(a1 + 48) = v62 - 8;
    *(_QWORD *)(a1 + 72) = v63 - 8;
    sub_224544138(a1);
    v64 = *(unsigned __int8 **)(a1 + 32);
    v65 = *v64;
    if (v65 == 2)
    {
      v66 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v64 + 1) + 8) - **((_QWORD **)v64 + 1)) >> 4;
    }
    else if (v65 == 1)
    {
      v66 = *(_QWORD *)(*((_QWORD *)v64 + 1) + 16);
    }
    else
    {
      if (!*v64)
      {
        v66 = 0;
        v68 = (float **)(a2 + 152);
        v67 = *(float **)(a2 + 152);
        v69 = *(float **)(a2 + 144);
        v70 = ((char *)v67 - (char *)v69) >> 6;
        goto LABEL_82;
      }
      v66 = 1;
    }
    v68 = (float **)(a2 + 152);
    v67 = *(float **)(a2 + 152);
    v69 = *(float **)(a2 + 144);
    v70 = ((char *)v67 - (char *)v69) >> 6;
    if (v66 > v70)
    {
      sub_2232C69F8((char **)(a2 + 144), v66 - v70);
      v69 = *(float **)(a2 + 144);
      v67 = *v68;
      goto LABEL_85;
    }
LABEL_82:
    if (v70 > v66)
    {
      v67 = &v69[16 * v66];
      *v68 = v67;
    }
LABEL_85:
    while (v69 != v67)
    {
      v71 = sub_2245443F0((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      sub_224545240(v71, v69);
      v69 += 16;
    }
    v72 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v72 - 8);
    v73 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(v73 - 8);
    *(_QWORD *)(a1 + 48) = v72 - 8;
    *(_QWORD *)(a1 + 72) = v73 - 8;
    sub_224544138(a1);
    v74 = *(unsigned __int8 **)(a1 + 32);
    v75 = *v74;
    if (v75 == 2)
    {
      v76 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v74 + 1) + 8) - **((_QWORD **)v74 + 1)) >> 4;
    }
    else if (v75 == 1)
    {
      v76 = *(_QWORD *)(*((_QWORD *)v74 + 1) + 16);
    }
    else
    {
      if (!*v74)
      {
        v76 = 0;
        v78 = (uint64_t *)(a2 + 176);
        v77 = *(_QWORD *)(a2 + 176);
        v79 = *(_QWORD *)(a2 + 168);
        v80 = (v77 - v79) >> 4;
        goto LABEL_95;
      }
      v76 = 1;
    }
    v78 = (uint64_t *)(a2 + 176);
    v77 = *(_QWORD *)(a2 + 176);
    v79 = *(_QWORD *)(a2 + 168);
    v80 = (v77 - v79) >> 4;
    if (v76 > v80)
    {
      sub_2232C68D0((char **)(a2 + 168), v76 - v80);
      v79 = *(_QWORD *)(a2 + 168);
      v77 = *v78;
LABEL_97:
      while (v79 != v77)
      {
        v85 = 16;
        v86 = v79;
        v81 = (char *)sub_2245443F0((uint64_t *)a1);
        ++*(_QWORD *)(a1 + 112);
        sub_224544508(v81, (uint64_t)&v85);
        v79 += 16;
      }
      v52 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(v52 - 8);
      v53 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(v53 - 8);
      *(_QWORD *)(a1 + 48) = v52 - 8;
      *(_QWORD *)(a1 + 72) = v53 - 8;
      goto LABEL_100;
    }
LABEL_95:
    if (v80 > v76)
    {
      v77 = v79 + 16 * v76;
      *v78 = v77;
    }
    goto LABEL_97;
  }
LABEL_100:
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v52 - 16);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v53 - 16);
  *(_QWORD *)(a1 + 48) = v52 - 16;
  *(_QWORD *)(a1 + 72) = v53 - 16;
  if (a3 == 2)
    return;
  v82 = (char *)sub_2245443F0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v85 = 0;
  sub_22451C444(v82, &v85);
  if (v85 >= 0x100)
  {
LABEL_105:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24EC7AC38;
    __cxa_throw(exception, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
  }
  *(_BYTE *)(a2 + 192) = v85;
  if (a3 >= 4)
  {
    v83 = (char *)sub_2245443F0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    LOBYTE(v85) = 0;
    sub_223996FF0(v83, &v85);
    *(_BYTE *)(a2 + 2) = v85;
  }
}

void sub_223BC4740(uint64_t a1, uint64_t a2, int a3)
{
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  void *v14;
  int v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *exception;
  void *__p;
  char *v22;
  uint64_t v23;
  uint64_t v24;

  if (a3 == 1)
  {
    __p = 0;
    v22 = 0;
    v23 = 0;
    sub_224544138(a1);
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "version";
    *(_QWORD *)(a1 + 96) = 7;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = (char *)sub_2245443F0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v24 = 0;
    sub_22451C444(v6, &v24);
    if (HIDWORD(v24))
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = &off_24EC7AC38;
      __cxa_throw(exception, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
    }
    sub_223BC492C(a1, &__p);
    v7 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 - 8);
    v8 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(v8 - 8);
    *(_QWORD *)(a1 + 48) = v7 - 8;
    *(_QWORD *)(a1 + 72) = v8 - 8;
    v9 = (char *)__p;
    if (__p)
    {
      v10 = v22;
      v11 = __p;
      if (v22 != __p)
      {
        v12 = v22;
        do
        {
          v14 = (void *)*((_QWORD *)v12 - 3);
          v12 -= 24;
          v13 = v14;
          if (v14)
          {
            *((_QWORD *)v10 - 2) = v13;
            operator delete(v13);
          }
          v10 = v12;
        }
        while (v12 != v9);
        v11 = __p;
      }
      v22 = v9;
      operator delete(v11);
    }
  }
  sub_224544138(a1);
  v15 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v15)
    *(_BYTE *)(a1 + 104) = 1;
  v16 = (char *)sub_2245443F0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  __p = 0;
  sub_22451C444(v16, &__p);
  if (HIDWORD(__p))
  {
    v19 = __cxa_allocate_exception(8uLL);
    *v19 = &off_24EC7AC38;
    __cxa_throw(v19, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
  }
  sub_223BC492C(a1, (_QWORD *)(a2 + 8));
  v17 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v17 - 8);
  v18 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v18 - 8);
  *(_QWORD *)(a1 + 48) = v17 - 8;
  *(_QWORD *)(a1 + 72) = v18 - 8;
}

void sub_223BC4918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_22317C838(&a9);
  _Unwind_Resume(a1);
}

void sub_223BC492C(uint64_t a1, _QWORD *a2)
{
  unsigned __int8 *v4;
  int v5;
  unint64_t v6;
  char **v7;
  char ***v8;
  uint64_t v9;
  unint64_t v10;
  char **v11;
  char **v12;
  _QWORD *v13;
  char **v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  char *v21;
  unsigned __int8 *v22;
  unint64_t v23;
  char *v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *exception;
  uint64_t v30;

  sub_224544138(a1);
  v4 = *(unsigned __int8 **)(a1 + 32);
  v5 = *v4;
  if (v5 == 2)
  {
    v6 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v4 + 1) + 8) - **((_QWORD **)v4 + 1)) >> 4;
    goto LABEL_8;
  }
  if (v5 == 1)
  {
    v6 = *(_QWORD *)(*((_QWORD *)v4 + 1) + 16);
    goto LABEL_8;
  }
  if (*v4)
  {
    v6 = 1;
LABEL_8:
    v8 = (char ***)(a2 + 1);
    v7 = (char **)a2[1];
    v9 = *a2;
    v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a2) >> 3);
    if (v6 > v10)
    {
      sub_2232C7FD8((uint64_t)a2, v6 - v10);
      v13 = a2;
      v11 = (char **)*a2;
      v12 = (char **)v13[1];
      if (v11 != v12)
        goto LABEL_20;
      goto LABEL_47;
    }
    goto LABEL_11;
  }
  v6 = 0;
  v8 = (char ***)(a2 + 1);
  v7 = (char **)a2[1];
  v9 = *a2;
  v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a2) >> 3);
LABEL_11:
  if (v10 <= v6)
  {
    v12 = v7;
    v11 = (char **)*a2;
    if (v11 != v7)
      goto LABEL_20;
    goto LABEL_47;
  }
  v12 = (char **)(v9 + 24 * v6);
  if (v7 != v12)
  {
    v14 = v7;
    do
    {
      v16 = *(v14 - 3);
      v14 -= 3;
      v15 = v16;
      if (v16)
      {
        *(v7 - 2) = v15;
        operator delete(v15);
      }
      v7 = v14;
    }
    while (v14 != v12);
  }
  *v8 = v12;
  v11 = (char **)*a2;
  if (v11 == v12)
  {
LABEL_47:
    v27 = *(_QWORD *)(a1 + 48);
    v28 = *(_QWORD *)(a1 + 72);
    goto LABEL_48;
  }
  do
  {
LABEL_20:
    v19 = *(_DWORD *)(a1 + 8);
    sub_224544138(a1);
    v20 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "version";
    *(_QWORD *)(a1 + 96) = 7;
    if (!v20)
      *(_BYTE *)(a1 + 104) = 1;
    v21 = (char *)sub_2245443F0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v30 = 0;
    sub_22451C444(v21, &v30);
    if (HIDWORD(v30))
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = &off_24EC7AC38;
      __cxa_throw(exception, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
    }
    sub_224544138(a1);
    v22 = *(unsigned __int8 **)(a1 + 32);
    v23 = *v22;
    if (!*v22)
      goto LABEL_29;
    if ((_DWORD)v23 == 1)
    {
      v23 = *(_QWORD *)(*((_QWORD *)v22 + 1) + 16);
LABEL_29:
      v24 = *v11;
      v25 = v11[1];
      v26 = (v25 - *v11) >> 5;
      if (v19 < 1)
        goto LABEL_38;
      goto LABEL_30;
    }
    if ((_DWORD)v23 == 2)
    {
      v23 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v22 + 1) + 8) - **((_QWORD **)v22 + 1)) >> 4;
      v24 = *v11;
      v25 = v11[1];
      v26 = (v25 - *v11) >> 5;
      if (v19 < 1)
        goto LABEL_38;
    }
    else
    {
      v23 = 1;
      v24 = *v11;
      v25 = v11[1];
      v26 = (v25 - *v11) >> 5;
      if (v19 < 1)
      {
LABEL_38:
        if (v23 <= v26)
        {
          if (v23 < v26)
          {
            v25 = &v24[32 * v23];
            v11[1] = v25;
          }
        }
        else
        {
          sub_2231B6534(v11, v23 - v26);
          v24 = *v11;
          v25 = v11[1];
        }
        while (v24 != v25)
        {
          v30 = *(_QWORD *)(a1 + 8);
          sub_223BC4CA0((uint64_t)&v30, a1, (uint64_t)v24);
          v24 += 32;
        }
        goto LABEL_19;
      }
    }
LABEL_30:
    if (v23 <= v26)
    {
      if (v23 < v26)
      {
        v25 = &v24[32 * v23];
        v11[1] = v25;
      }
    }
    else
    {
      sub_2231B6534(v11, v23 - v26);
      v24 = *v11;
      v25 = v11[1];
    }
    while (v24 != v25)
    {
      v30 = *(_QWORD *)(a1 + 8);
      sub_223BC4CA0((uint64_t)&v30, a1, (uint64_t)v24);
      v24 += 32;
    }
LABEL_19:
    v17 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v17 - 8);
    v18 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(v18 - 8);
    *(_QWORD *)(a1 + 48) = v17 - 8;
    *(_QWORD *)(a1 + 72) = v18 - 8;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v17 - 16);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(v18 - 16);
    *(_QWORD *)(a1 + 48) = v17 - 16;
    *(_QWORD *)(a1 + 72) = v18 - 16;
    v11 += 3;
  }
  while (v11 != v12);
  v27 = v17 - 16;
  v28 = v18 - 16;
LABEL_48:
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v27 - 8);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v28 - 8);
  *(_QWORD *)(a1 + 48) = v27 - 8;
  *(_QWORD *)(a1 + 72) = v28 - 8;
}

void sub_223BC4CA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  char *v6;
  unint64_t v7;
  uint64_t *v8;
  int v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *exception;
  uint64_t v15;

  sub_224544138(a2);
  v5 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v5)
    *(_BYTE *)(a2 + 104) = 1;
  v6 = (char *)sub_2245443F0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v15 = 0;
  sub_22451C444(v6, &v15);
  if (HIDWORD(v15))
    goto LABEL_9;
  v7 = sub_2245443F0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_224545240(v7, (float *)a3);
  v8 = (uint64_t *)sub_2245443F0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  *(double *)(a3 + 16) = sub_22454A660(v8);
  sub_224544138(a2);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  v10 = (char *)sub_2245443F0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v15 = 0;
  sub_22451C444(v10, &v15);
  if (HIDWORD(v15)
    || (v11 = (char *)sub_2245443F0((uint64_t *)a2),
        ++*(_QWORD *)(a2 + 112),
        v15 = 0,
        sub_22451C58C(v11, &v15),
        v15 != (int)v15))
  {
LABEL_9:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24EC7AC38;
    __cxa_throw(exception, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
  }
  *(_DWORD *)(a3 + 24) = v15;
  v12 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v12 - 8);
  v13 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(a2 + 48) = v12 - 8;
  *(_QWORD *)(a2 + 72) = v13 - 8;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v12 - 16);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v13 - 16);
  *(_QWORD *)(a2 + 48) = v12 - 16;
  *(_QWORD *)(a2 + 72) = v13 - 16;
}

void sub_223BC4E44(uint64_t a1, float *a2)
{
  int v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *exception;
  unint64_t v12;

  sub_224544138(a1);
  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_2245443F0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v12 = 0;
  sub_22451C444(v5, &v12);
  if (HIDWORD(v12))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24EC7AC38;
    __cxa_throw(exception, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
  }
  v6 = v12 & 0xFFFFFFFE;
  v7 = sub_2245443F0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  sub_224545240(v7, a2);
  if (v6)
  {
    v8 = sub_2245443F0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_224545240(v8, a2 + 16);
  }
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v9 - 8);
  v10 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(a1 + 48) = v9 - 8;
  *(_QWORD *)(a1 + 72) = v10 - 8;
}

void sub_223BC4F50(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  __int128 v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  void *v14;
  char v15;
  char v16;
  void *v17;
  char v18;
  char v19;
  void *__p;
  void **v21;
  char v22;
  char v23[8];
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v24 = 0;
  BYTE8(v24) = 0;
  LOBYTE(v25) = 0;
  v27 = 0;
  sub_223BC5C00(a2, (uint64_t)v23, a4);
  *(_OWORD *)&v8[8] = v24;
  LOBYTE(v9) = 0;
  v11 = 0;
  if (v27)
  {
    if (SHIBYTE(v26) < 0)
    {
      sub_223197FA4(&v9, (void *)v25, *((unint64_t *)&v25 + 1));
    }
    else
    {
      v9 = v25;
      v10 = v26;
    }
    v11 = 1;
  }
  v12 = 0;
  v13 = 0;
  LOBYTE(v14) = 0;
  v16 = 0;
  LOBYTE(v17) = 0;
  v19 = 0;
  LOBYTE(__p) = 0;
  v22 = 0;
  sub_223BB47F0(a3, (uint64_t)v8);
  if (v22)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v21;
      v7 = __p;
      if (v21 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v21 = v5;
      operator delete(v7);
    }
  }
  if (v19 && v18 < 0)
    operator delete(v17);
  if (v16 && v15 < 0)
    operator delete(v14);
  if (v11 && SHIBYTE(v10) < 0)
    operator delete((void *)v9);
  if (v27)
  {
    if (SHIBYTE(v26) < 0)
      operator delete((void *)v25);
  }
}

void sub_223BC50FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  uint64_t v18;

  if (a18 && a17 < 0)
    operator delete(__p);
  if (*(_BYTE *)(v18 - 48))
  {
    if (*(char *)(v18 - 49) < 0)
      operator delete(*(void **)(v18 - 72));
  }
  _Unwind_Resume(exception_object);
}

void sub_223BC5140(uint64_t a1, uint64_t a2, unsigned int a3)
{
  _QWORD *v6;
  unsigned int v7;
  unsigned int v8;
  char v9;
  void **v10;
  char v11;
  char v12;
  void **v13;
  void **v14;
  void **v15;
  uint64_t v16;
  void **v17;
  void **v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void **v23;
  void **v24;
  void *v25;
  void *v26[2];
  uint64_t v27;
  void *v28[2];
  uint64_t v29;
  char v30;
  void *__p[2];
  uint64_t v32;
  char v33;

  v6 = (_QWORD *)(a2 + 8);
  LODWORD(__p[0]) = 2;
  sub_2245508F0(a1, __p);
  v7 = __p[0];
  if (LODWORD(__p[0]) >= 2)
    v8 = 2;
  else
    v8 = __p[0];
  if (v8 < 2)
  {
    __p[0] = 0;
    LOBYTE(__p[1]) = 0;
    sub_224550B44(a1, __p);
    LOBYTE(v28[0]) = 0;
    sub_22454FFAC(a1, v28);
    v9 = (char)v28[0];
    *v6 = __p[0];
    *(_BYTE *)(a2 + 16) = v9;
    if (v7 < 2)
      goto LABEL_9;
LABEL_8:
    if (*(_BYTE *)(a1 + 131))
      goto LABEL_9;
    while (1)
    {
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
        goto LABEL_9;
      sub_2245523C0(a1, (uint64_t)__p);
      if (SHIBYTE(v32) < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_24:
          v12 = 0;
          if (SHIBYTE(v32) < 0)
            goto LABEL_27;
          goto LABEL_13;
        }
      }
      else if (SHIBYTE(v32) == 1 && *(unsigned __int8 *)(a1 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_24;
      }
      v12 = 1;
      if (SHIBYTE(v32) < 0)
LABEL_27:
        operator delete(__p[0]);
LABEL_13:
      if (*(_BYTE *)(a1 + 131))
        v11 = 0;
      else
        v11 = v12;
      if ((v11 & 1) == 0)
        goto LABEL_9;
    }
  }
  sub_224550B44(a1, v6);
  LOBYTE(__p[0]) = 0;
  sub_22454FFAC(a1, __p);
  *(_BYTE *)(a2 + 16) = __p[0];
  if (v7 >= 2)
    goto LABEL_8;
LABEL_9:
  v10 = (void **)(a2 + 24);
  LOBYTE(v28[0]) = 0;
  sub_22454FFAC(a1, v28);
  if (!LOBYTE(v28[0]))
  {
    if (*(_BYTE *)(a2 + 48))
    {
      if (*(char *)(a2 + 47) < 0)
        operator delete(*v10);
      *(_BYTE *)(a2 + 48) = 0;
      if (a3 < 4)
        return;
LABEL_41:
      sub_223BC58DC(a1, a2 + 56);
      if (a3 == 5)
      {
        v13 = (void **)(a2 + 80);
        LOBYTE(v28[0]) = 0;
        sub_22454FFAC(a1, v28);
        if (LOBYTE(v28[0]))
        {
          if (!*(_BYTE *)(a2 + 104))
          {
            *v13 = 0;
            *(_QWORD *)(a2 + 88) = 0;
            *(_QWORD *)(a2 + 96) = 0;
            *(_BYTE *)(a2 + 104) = 1;
          }
          ++*(_QWORD *)(a1 + 80);
          if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
          {
            *(_BYTE *)(a1 + 132) = 1;
          }
          else
          {
            sub_2245523C0(a1, (uint64_t)__p);
            if (*(char *)(a2 + 103) < 0)
              operator delete(*v13);
            *(_OWORD *)v13 = *(_OWORD *)__p;
            *(_QWORD *)(a2 + 96) = v32;
            ++*(_QWORD *)(a1 + 104);
          }
        }
        else if (*(_BYTE *)(a2 + 104))
        {
          if (*(char *)(a2 + 103) < 0)
            operator delete(*v13);
          *(_BYTE *)(a2 + 104) = 0;
        }
        return;
      }
      if (a3 < 6)
        return;
      v14 = (void **)(a2 + 80);
      LOBYTE(v28[0]) = 0;
      sub_22454FFAC(a1, v28);
      if (LOBYTE(v28[0]))
      {
        if (!*(_BYTE *)(a2 + 104))
        {
          *v14 = 0;
          *(_QWORD *)(a2 + 88) = 0;
          *(_QWORD *)(a2 + 96) = 0;
          *(_BYTE *)(a2 + 104) = 1;
        }
        ++*(_QWORD *)(a1 + 80);
        if (!*(_BYTE *)(a1 + 128) || !*(_BYTE *)(a1 + 131))
        {
          sub_2245523C0(a1, (uint64_t)__p);
          if (*(char *)(a2 + 103) < 0)
            operator delete(*v14);
          *(_OWORD *)v14 = *(_OWORD *)__p;
          *(_QWORD *)(a2 + 96) = v32;
LABEL_73:
          ++*(_QWORD *)(a1 + 104);
LABEL_74:
          v15 = (void **)(a2 + 112);
          LOBYTE(v28[0]) = 0;
          sub_22454FFAC(a1, v28);
          if (LOBYTE(v28[0]))
          {
            if (!*(_BYTE *)(a2 + 136))
            {
              *v15 = 0;
              *(_QWORD *)(a2 + 120) = 0;
              *(_QWORD *)(a2 + 128) = 0;
              *(_BYTE *)(a2 + 136) = 1;
            }
            ++*(_QWORD *)(a1 + 80);
            if (!*(_BYTE *)(a1 + 128) || !*(_BYTE *)(a1 + 131))
            {
              sub_2245523C0(a1, (uint64_t)__p);
              if (*(char *)(a2 + 135) < 0)
                operator delete(*v15);
              *(_OWORD *)v15 = *(_OWORD *)__p;
              *(_QWORD *)(a2 + 128) = v32;
              goto LABEL_102;
            }
          }
          else
          {
            if (*(_BYTE *)(a2 + 136))
            {
              if (*(char *)(a2 + 135) < 0)
                operator delete(*v15);
              *(_BYTE *)(a2 + 136) = 0;
            }
            ++*(_QWORD *)(a1 + 80);
            if (!*(_BYTE *)(a1 + 128) || !*(_BYTE *)(a1 + 131))
            {
              sub_2245523C0(a1, (uint64_t)__p);
              if (SHIBYTE(v32) < 0)
                operator delete(__p[0]);
LABEL_102:
              ++*(_QWORD *)(a1 + 104);
              LOBYTE(v26[0]) = 0;
              sub_22454FFAC(a1, v26);
              if (!LOBYTE(v26[0]))
              {
LABEL_103:
                ++*(_QWORD *)(a1 + 80);
                if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
                {
                  *(_BYTE *)(a1 + 132) = 1;
                }
                else
                {
                  sub_2245523C0(a1, (uint64_t)v28);
                  if (SHIBYTE(v29) < 0)
                    operator delete(v28[0]);
                  ++*(_QWORD *)(a1 + 104);
                }
                if (*(_BYTE *)(a2 + 168))
                {
                  v20 = *(_QWORD *)(a2 + 144);
                  if (v20)
                  {
                    v21 = *(_QWORD *)(a2 + 152);
                    v22 = *(void **)(a2 + 144);
                    if (v21 != v20)
                    {
                      do
                      {
                        if (*(char *)(v21 - 1) < 0)
                          operator delete(*(void **)(v21 - 24));
                        v21 -= 24;
                      }
                      while (v21 != v20);
                      v22 = *(void **)(a2 + 144);
                    }
                    *(_QWORD *)(a2 + 152) = v20;
                    operator delete(v22);
                  }
                  *(_BYTE *)(a2 + 168) = 0;
                }
                return;
              }
              goto LABEL_89;
            }
          }
          *(_BYTE *)(a1 + 132) = 1;
          LOBYTE(v26[0]) = 0;
          sub_22454FFAC(a1, v26);
          if (!LOBYTE(v26[0]))
            goto LABEL_103;
LABEL_89:
          __p[0] = 0;
          __p[1] = 0;
          v32 = 0;
          v33 = 1;
          ++*(_QWORD *)(a1 + 80);
          if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
          {
            *(_BYTE *)(a1 + 132) = 1;
          }
          else
          {
            sub_2245523C0(a1, (uint64_t)v28);
            v16 = *(_QWORD *)(a1 + 104);
            *(_OWORD *)__p = *(_OWORD *)v28;
            v32 = v29;
            *(_QWORD *)(a1 + 104) = v16 + 1;
          }
          sub_223BB50EC((char *)__p, (uint64_t)v26);
          *(_OWORD *)v28 = *(_OWORD *)v26;
          v29 = v27;
          v26[1] = 0;
          v27 = 0;
          v26[0] = 0;
          v30 = 1;
          sub_223BB4A04(a2 + 144, (uint64_t)v28);
          if (v30)
          {
            v17 = (void **)v28[0];
            if (v28[0])
            {
              v18 = (void **)v28[1];
              v19 = v28[0];
              if (v28[1] != v28[0])
              {
                do
                {
                  if (*((char *)v18 - 1) < 0)
                    operator delete(*(v18 - 3));
                  v18 -= 3;
                }
                while (v18 != v17);
                v19 = v28[0];
              }
              v28[1] = v17;
              operator delete(v19);
            }
          }
          v23 = (void **)v26[0];
          if (v26[0])
          {
            v24 = (void **)v26[1];
            v25 = v26[0];
            if (v26[1] != v26[0])
            {
              do
              {
                if (*((char *)v24 - 1) < 0)
                  operator delete(*(v24 - 3));
                v24 -= 3;
              }
              while (v24 != v23);
              v25 = v26[0];
            }
            v26[1] = v23;
            operator delete(v25);
          }
          if (v33 && SHIBYTE(v32) < 0)
            operator delete(__p[0]);
          return;
        }
      }
      else
      {
        if (*(_BYTE *)(a2 + 104))
        {
          if (*(char *)(a2 + 103) < 0)
            operator delete(*v14);
          *(_BYTE *)(a2 + 104) = 0;
        }
        ++*(_QWORD *)(a1 + 80);
        if (!*(_BYTE *)(a1 + 128) || !*(_BYTE *)(a1 + 131))
        {
          sub_2245523C0(a1, (uint64_t)__p);
          if (SHIBYTE(v32) < 0)
            operator delete(__p[0]);
          goto LABEL_73;
        }
      }
      *(_BYTE *)(a1 + 132) = 1;
      goto LABEL_74;
    }
LABEL_36:
    if (a3 < 4)
      return;
    goto LABEL_41;
  }
  if (!*(_BYTE *)(a2 + 48))
  {
    *v10 = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(_BYTE *)(a2 + 48) = 1;
    ++*(_QWORD *)(a1 + 80);
    if (!*(_BYTE *)(a1 + 128))
      goto LABEL_38;
    goto LABEL_34;
  }
  ++*(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 128))
  {
LABEL_34:
    if (!*(_BYTE *)(a1 + 131))
      goto LABEL_38;
    *(_BYTE *)(a1 + 132) = 1;
    goto LABEL_36;
  }
LABEL_38:
  sub_2245523C0(a1, (uint64_t)__p);
  if (*(char *)(a2 + 47) < 0)
    operator delete(*v10);
  *(_OWORD *)v10 = *(_OWORD *)__p;
  *(_QWORD *)(a2 + 40) = v32;
  ++*(_QWORD *)(a1 + 104);
  if (a3 >= 4)
    goto LABEL_41;
}

void sub_223BC58B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a23)
  {
    if (a22 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_223BC58DC(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  void *__p;
  uint64_t v12;
  char v13;

  v9 = 0;
  sub_22454FFAC(a1, &v9);
  if (v9)
  {
    if (!*(_BYTE *)(a2 + 16))
    {
      *(_QWORD *)a2 = 0;
      *(_BYTE *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 16) = 1;
    }
    LODWORD(__p) = 2;
    sub_2245508F0(a1, &__p);
    v4 = __p;
    if (__p >= 2)
      v5 = 2;
    else
      v5 = __p;
    if (v5 < 2)
    {
      __p = 0;
      LOBYTE(v12) = 0;
      sub_224550B44(a1, &__p);
      v10 = 0;
      sub_22454FFAC(a1, &v10);
      v6 = v10;
      *(_QWORD *)a2 = __p;
      *(_BYTE *)(a2 + 8) = v6;
      if (v4 < 2)
        return;
    }
    else
    {
      sub_224550B44(a1, (_QWORD *)a2);
      LOBYTE(__p) = 0;
      sub_22454FFAC(a1, &__p);
      *(_BYTE *)(a2 + 8) = (_BYTE)__p;
      if (v4 < 2)
        return;
    }
    if (!*(_BYTE *)(a1 + 131))
    {
      do
      {
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
          return;
        sub_2245523C0(a1, (uint64_t)&__p);
        if (v13 < 0)
        {
          if (v12 == 1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)__p)
          {
LABEL_26:
            v8 = 0;
            if (v13 < 0)
              goto LABEL_29;
            goto LABEL_15;
          }
        }
        else if (v13 == 1 && *(unsigned __int8 *)(a1 + 72) == __p)
        {
          goto LABEL_26;
        }
        v8 = 1;
        if (v13 < 0)
LABEL_29:
          operator delete(__p);
LABEL_15:
        if (*(_BYTE *)(a1 + 131))
          v7 = 0;
        else
          v7 = v8;
      }
      while ((v7 & 1) != 0);
    }
  }
  else if (*(_BYTE *)(a2 + 16))
  {
    *(_BYTE *)(a2 + 16) = 0;
  }
}

__n128 sub_223BC5A8C(uint64_t a1, char **a2)
{
  __n128 result;
  char *v5;
  unint64_t v6;
  char *v7;
  char *v8;
  char **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  __n128 v15;
  uint64_t v16;

  v14 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  sub_224550D98(a1, &v14);
  v5 = a2[1];
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a2) >> 3);
  if (v14 <= v6)
  {
    if (v14 >= v6)
    {
      v7 = *a2;
      v10 = v5 - v7;
      if (v5 == v7)
        return result;
    }
    else
    {
      v11 = (uint64_t)&(*a2)[24 * v14];
      while (v5 != (char *)v11)
      {
        if (*(v5 - 1) < 0)
          operator delete(*((void **)v5 - 3));
        v5 -= 24;
      }
      a2[1] = (char *)v11;
      v7 = *a2;
      v10 = v11 - (_QWORD)v7;
      if ((char *)v11 == v7)
        return result;
    }
  }
  else
  {
    sub_2231B744C(a2, v14 - v6);
    v9 = a2;
    v7 = *a2;
    v8 = v9[1];
    v10 = v8 - v7;
    if (v8 == v7)
      return result;
  }
  v12 = 24 * (v10 / 24);
  do
  {
    while (1)
    {
      ++*(_QWORD *)(a1 + 80);
      if (!*(_BYTE *)(a1 + 128) || *(_BYTE *)(a1 + 131) == 0)
        break;
      *(_BYTE *)(a1 + 132) = 1;
      v7 += 24;
      v12 -= 24;
      if (!v12)
        return result;
    }
    sub_2245523C0(a1, (uint64_t)&v15);
    if (v7[23] < 0)
      operator delete(*(void **)v7);
    result = v15;
    *((_QWORD *)v7 + 2) = v16;
    *(__n128 *)v7 = result;
    v7 += 24;
    ++*(_QWORD *)(a1 + 104);
    v12 -= 24;
  }
  while (v12);
  return result;
}

double sub_223BC5C00(uint64_t a1, uint64_t a2, unsigned int a3)
{
  _QWORD *v6;
  unsigned int v7;
  unsigned int v8;
  double result;
  char v10;
  void **v11;
  char v12;
  char v13;
  char v14;
  void *__p[2];
  uint64_t v16;

  v6 = (_QWORD *)(a2 + 8);
  LODWORD(__p[0]) = 2;
  sub_2245508F0(a1, __p);
  v7 = __p[0];
  if (LODWORD(__p[0]) >= 2)
    v8 = 2;
  else
    v8 = __p[0];
  if (v8 < 2)
  {
    __p[0] = 0;
    LOBYTE(__p[1]) = 0;
    sub_224550B44(a1, __p);
    v14 = 0;
    sub_22454FFAC(a1, &v14);
    v10 = v14;
    *v6 = __p[0];
    *(_BYTE *)(a2 + 16) = v10;
    if (v7 < 2)
      goto LABEL_9;
LABEL_8:
    if (*(_BYTE *)(a1 + 131))
      goto LABEL_9;
    while (1)
    {
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
        goto LABEL_9;
      sub_2245523C0(a1, (uint64_t)__p);
      if (SHIBYTE(v16) < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_25:
          v13 = 0;
          if (SHIBYTE(v16) < 0)
            goto LABEL_28;
          goto LABEL_14;
        }
      }
      else if (SHIBYTE(v16) == 1 && *(unsigned __int8 *)(a1 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_25;
      }
      v13 = 1;
      if (SHIBYTE(v16) < 0)
LABEL_28:
        operator delete(__p[0]);
LABEL_14:
      if (*(_BYTE *)(a1 + 131))
        v12 = 0;
      else
        v12 = v13;
      if ((v12 & 1) == 0)
        goto LABEL_9;
    }
  }
  sub_224550B44(a1, v6);
  LOBYTE(__p[0]) = 0;
  sub_22454FFAC(a1, __p);
  *(_BYTE *)(a2 + 16) = __p[0];
  if (v7 >= 2)
    goto LABEL_8;
LABEL_9:
  if (a3 < 2)
    return result;
  v11 = (void **)(a2 + 24);
  v14 = 0;
  sub_22454FFAC(a1, &v14);
  if (v14)
  {
    if (*(_BYTE *)(a2 + 48))
    {
      ++*(_QWORD *)(a1 + 80);
      if (!*(_BYTE *)(a1 + 128))
        goto LABEL_37;
    }
    else
    {
      *v11 = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      *(_BYTE *)(a2 + 48) = 1;
      ++*(_QWORD *)(a1 + 80);
      if (!*(_BYTE *)(a1 + 128))
      {
LABEL_37:
        sub_2245523C0(a1, (uint64_t)__p);
        if (*(char *)(a2 + 47) < 0)
          operator delete(*v11);
        result = *(double *)__p;
        *(_OWORD *)v11 = *(_OWORD *)__p;
        *(_QWORD *)(a2 + 40) = v16;
        ++*(_QWORD *)(a1 + 104);
        return result;
      }
    }
    if (*(_BYTE *)(a1 + 131))
    {
      *(_BYTE *)(a1 + 132) = 1;
      return result;
    }
    goto LABEL_37;
  }
  if (*(_BYTE *)(a2 + 48))
  {
    if (*(char *)(a2 + 47) < 0)
      operator delete(*v11);
    *(_BYTE *)(a2 + 48) = 0;
  }
  return result;
}

void sub_223BC5E6C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v6;
  unsigned int v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  int v12;
  uint64_t v13;
  void *v14;
  __int16 v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  char *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  void *v36;
  __int16 v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  char *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  void *v58;
  __int16 v59;
  unint64_t v60;
  unint64_t v61;
  int v62;
  char v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unsigned int v85;
  unsigned int v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unsigned int v90;
  unsigned int v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  char *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  __int16 v106;
  unint64_t v107;
  unint64_t v108;
  char v109;
  char v110;
  char v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t v118;
  char v119;
  char v120;
  char v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  char v138;
  char v139;
  char v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  unsigned int v144;
  char v145;
  char v146;
  char v147;
  char *v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  int v152;
  uint64_t v153;
  void *v154;
  __int16 v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t *v158;
  unint64_t v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  uint64_t v170;
  unsigned int v171;
  void **v172;
  uint64_t v173;
  void *v174;
  int v175;
  char v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  int v183;
  char **v184;
  char *v185;
  unint64_t v186;
  char *v187;
  char *v188;
  int64_t v189;
  char *v190;
  char v191;
  uint64_t v192;
  char *v193;
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  void *v198;
  char *v199;
  char *v200;
  void *v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  void *v205;
  uint64_t v206;
  void *v207;
  void *v208;
  char *v209;
  char *v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unsigned int v214;
  unsigned int v215;
  _DWORD *v216;
  char v217;
  char v218;
  char v219;
  void *v220[2];
  std::__shared_weak_count *v221;
  _BYTE v222[16];
  std::__shared_weak_count *v223;
  void *v224;
  char *v225;
  std::__shared_weak_count *v226;
  uint64_t v227;
  uint64_t v228;
  void *v229;
  int v230;
  __int16 v231;
  char v232;
  _QWORD v233[2];
  std::__shared_weak_count *v234;
  uint64_t v235;
  int v236;
  uint64_t v237;
  int v238;
  __int16 v239;
  void **v240;
  void *__p[2];
  std::__shared_weak_count *v242;
  void *v243;
  void *v244;
  int v245;
  void *v246;
  void *v247;
  int v248;
  void *v249;
  void *v250;
  void *v251;
  void *v252;
  void *v253;
  void *v254;
  void *v255;
  void *v256;
  void *v257;
  void *v258;
  char v259;
  void *v260[2];
  void *v261[2];
  __int128 v262;
  void *v263[2];
  void *v264[2];
  __int128 v265;
  void *v266[2];
  void *v267[2];
  __int128 v268;
  void *v269[2];
  void *v270[2];
  __int128 v271;
  uint64_t v272;
  char v273;
  uint64_t v274;

  v274 = *MEMORY[0x24BDAC8D0];
  LODWORD(v260[0]) = 6;
  sub_2245508F0(a1, v260);
  v6 = v260[0];
  v7 = LODWORD(v260[0]) - 2;
  if (LODWORD(v260[0]) <= 2)
  {
    LOBYTE(__p[0]) = 0;
    LOBYTE(v247) = 0;
    sub_223BC8A64(a1, (uint64_t)__p);
    if ((_BYTE)v247)
    {
      v224 = &off_24EC1F8C8;
      v8 = (char *)__p[1];
      v9 = v242;
      if (v242)
      {
        p_shared_owners = (unint64_t *)&v242->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
        v12 = v245;
        v14 = v243;
        v13 = (uint64_t)v244;
        v15 = (__int16)v246;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
        do
          v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
      }
      else
      {
        v12 = v245;
        v14 = v243;
        v13 = (uint64_t)v244;
        v15 = (__int16)v246;
      }
      v225 = v8;
      v226 = v9;
      v227 = v13;
      LODWORD(v228) = 4 * v12;
      v229 = v14;
      v230 = 4;
      v231 = v15;
      if (v9)
      {
        v18 = (unint64_t *)&v9->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        do
          v20 = __ldaxr(v18);
        while (__stlxr(v20 - 1, v18));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      LOBYTE(v260[1]) = 0;
      LOBYTE(v261[1]) = 0;
      LOBYTE(v262) = 0;
      LOBYTE(v263[0]) = 0;
      LOBYTE(v263[1]) = 1;
      LODWORD(v264[0]) = 0;
      sub_22432B21C((uint64_t)&v224, 3u, (uint64_t)v233);
      sub_2232C1348(a2 + 8, (uint64_t)v233);
      v21 = v234;
      if (v234)
      {
        v22 = (unint64_t *)&v234->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      v24 = v226;
      if (v226)
      {
        v25 = (unint64_t *)&v226->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      if ((_BYTE)v247)
      {
        __p[0] = &off_24EC27198;
        v27 = v242;
        if (v242)
        {
          v28 = (unint64_t *)&v242->__shared_owners_;
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
      }
    }
  }
  else
  {
    sub_223BC88C0(a1, a2 + 8);
    if (v6 >= 5)
    {
      sub_223BC88C0(a1, a2 + 72);
      goto LABEL_79;
    }
  }
  LOBYTE(__p[0]) = 0;
  LOBYTE(v247) = 0;
  sub_223BC8A64(a1, (uint64_t)__p);
  if ((_BYTE)v247)
  {
    v224 = &off_24EC1F8C8;
    v30 = (char *)__p[1];
    v31 = v242;
    if (v242)
    {
      v32 = (unint64_t *)&v242->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
      v34 = v245;
      v36 = v243;
      v35 = (uint64_t)v244;
      v37 = (__int16)v246;
      do
        v38 = __ldxr(v32);
      while (__stxr(v38 + 1, v32));
      do
        v39 = __ldxr(v32);
      while (__stxr(v39 + 1, v32));
    }
    else
    {
      v34 = v245;
      v36 = v243;
      v35 = (uint64_t)v244;
      v37 = (__int16)v246;
    }
    v225 = v30;
    v226 = v31;
    v227 = v35;
    LODWORD(v228) = 4 * v34;
    v229 = v36;
    v230 = 4;
    v231 = v37;
    if (v31)
    {
      v40 = (unint64_t *)&v31->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
      do
        v42 = __ldaxr(v40);
      while (__stlxr(v42 - 1, v40));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    LOBYTE(v260[1]) = 0;
    LOBYTE(v261[1]) = 0;
    LOBYTE(v262) = 0;
    LOBYTE(v263[0]) = 0;
    LOBYTE(v263[1]) = 1;
    LODWORD(v264[0]) = 0;
    sub_22432B21C((uint64_t)&v224, 3u, (uint64_t)v233);
    sub_2232C1348(a2 + 72, (uint64_t)v233);
    v43 = v234;
    if (v234)
    {
      v44 = (unint64_t *)&v234->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    v46 = v226;
    if (!v226)
      goto LABEL_63;
    v47 = (unint64_t *)&v226->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
      if (!(_BYTE)v247)
        goto LABEL_78;
    }
    else
    {
LABEL_63:
      if (!(_BYTE)v247)
        goto LABEL_78;
    }
    __p[0] = &off_24EC27198;
    v49 = v242;
    if (v242)
    {
      v50 = (unint64_t *)&v242->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
        if (v6 < 4)
          goto LABEL_69;
LABEL_79:
        LOBYTE(v260[0]) = 0;
        LOBYTE(v266[1]) = 0;
        sub_223BC8C08(a1, (uint64_t)v260);
        v62 = LOBYTE(v266[1]);
        if (LOBYTE(v266[1]))
        {
          sub_22416C400((uint64_t)v260, (uint64_t)v222);
          __p[0] = &off_24EC28F30;
          sub_2232C2C00((uint64_t)v222, (uint64_t *)&__p[1]);
          v63 = 1;
        }
        else
        {
          v63 = 0;
          LOBYTE(__p[0]) = 0;
        }
        LOBYTE(v250) = v63;
        sub_2232C33D4(a2 + 136, (uint64_t)__p);
        if (!(_BYTE)v250)
          goto LABEL_87;
        __p[0] = &off_24EC28F30;
        v64 = v242;
        if (!v242)
          goto LABEL_87;
        v65 = (unint64_t *)&v242->__shared_owners_;
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
          if (!v62)
            goto LABEL_92;
        }
        else
        {
LABEL_87:
          if (!v62)
            goto LABEL_92;
        }
        v67 = v223;
        if (v223)
        {
          v68 = (unint64_t *)&v223->__shared_owners_;
          do
            v69 = __ldaxr(v68);
          while (__stlxr(v69 - 1, v68));
          if (!v69)
          {
            ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
            std::__shared_weak_count::__release_weak(v67);
            if (!LOBYTE(v266[1]))
              goto LABEL_124;
            goto LABEL_93;
          }
        }
LABEL_92:
        if (!LOBYTE(v266[1]))
          goto LABEL_124;
LABEL_93:
        if (LODWORD(v266[0]) != -1)
          ((void (*)(void **, __int128 *))off_24EC5FFD0[LODWORD(v266[0])])(__p, &v262);
        goto LABEL_124;
      }
    }
  }
LABEL_78:
  if (v6 >= 4)
    goto LABEL_79;
LABEL_69:
  LOBYTE(v260[0]) = 0;
  LOBYTE(v265) = 0;
  sub_223BC8578(a1, (uint64_t)v260);
  if ((_BYTE)v265)
  {
    v224 = &off_24EC1F8C8;
    v52 = (char *)v260[1];
    v53 = (std::__shared_weak_count *)v261[0];
    if (v261[0])
    {
      v54 = (unint64_t *)((char *)v261[0] + 8);
      do
        v55 = __ldxr(v54);
      while (__stxr(v55 + 1, v54));
      v56 = *(_QWORD *)((char *)&v262 + 4);
      v57 = HIDWORD(v263[0]);
      v58 = v261[1];
      v59 = (__int16)v264[1];
      do
        v60 = __ldxr(v54);
      while (__stxr(v60 + 1, v54));
      do
        v61 = __ldxr(v54);
      while (__stxr(v61 + 1, v54));
    }
    else
    {
      v56 = *(_QWORD *)((char *)&v262 + 4);
      v57 = HIDWORD(v263[0]);
      v58 = v261[1];
      v59 = (__int16)v264[1];
    }
    v225 = v52;
    v226 = v53;
    v227 = v56;
    LODWORD(v228) = 4 * v57;
    v229 = v58;
    v230 = 32;
    v231 = v59;
    if (v53)
    {
      v70 = (unint64_t *)&v53->__shared_owners_;
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
      do
        v72 = __ldaxr(v70);
      while (__stlxr(v72 - 1, v70));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    LOBYTE(__p[1]) = 0;
    LOBYTE(v243) = 0;
    LOBYTE(v244) = 0;
    LOBYTE(v246) = 0;
    LOBYTE(v247) = 1;
    v248 = 0;
    sub_22432B21C((uint64_t)&v224, 0x1Fu, (uint64_t)v233);
    sub_2232C1620(a2 + 136, (uint64_t)v233);
    v73 = v234;
    if (v234)
    {
      v74 = (unint64_t *)&v234->__shared_owners_;
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }
    v76 = v226;
    if (v226)
    {
      v77 = (unint64_t *)&v226->__shared_owners_;
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
    if ((_BYTE)v265)
    {
      v260[0] = &off_24EC26EB0;
      v79 = (std::__shared_weak_count *)v261[0];
      if (v261[0])
      {
        v80 = (unint64_t *)((char *)v261[0] + 8);
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 - 1, v80));
        if (!v81)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
    }
  }
LABEL_124:
  LOBYTE(v220[0]) = 0;
  sub_22454FFAC(a1, v220);
  if (LOBYTE(v220[0]))
  {
    if (!*(_BYTE *)(a2 + 496))
    {
      sub_2232C39E0(a2 + 224);
      *(_OWORD *)(a2 + 464) = 0u;
      *(_OWORD *)(a2 + 480) = 0u;
      *(_OWORD *)(a2 + 432) = 0u;
      *(_OWORD *)(a2 + 448) = 0u;
      *(_OWORD *)(a2 + 400) = 0u;
      *(_OWORD *)(a2 + 416) = 0u;
      *(_OWORD *)(a2 + 368) = 0u;
      *(_OWORD *)(a2 + 384) = 0u;
      *(_OWORD *)(a2 + 336) = 0u;
      *(_OWORD *)(a2 + 352) = 0u;
      *(_OWORD *)(a2 + 304) = 0u;
      *(_OWORD *)(a2 + 320) = 0u;
      *(_OWORD *)(a2 + 272) = 0u;
      *(_OWORD *)(a2 + 288) = 0u;
      *(_OWORD *)(a2 + 240) = 0u;
      *(_OWORD *)(a2 + 256) = 0u;
      *(_OWORD *)(a2 + 224) = 0u;
      sub_2232C3AB8(a2 + 224);
      *(_BYTE *)(a2 + 496) = 1;
    }
    LODWORD(v260[0]) = 2;
    sub_2245508F0(a1, v260);
    if (LODWORD(v260[0]) <= 1)
    {
      LOBYTE(v224) = 0;
      v232 = 0;
      __p[0] = &off_24EC1F958;
      sub_2231B3FDC((uint64_t)&__p[1]);
      sub_22416BD7C((uint64_t)v260, (uint64_t)__p, 0);
      v82 = v242;
      if (v242)
      {
        v83 = (unint64_t *)&v242->__shared_owners_;
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
          std::__shared_weak_count::__release_weak(v82);
        }
      }
      LODWORD(v261[1]) = 0;
      LODWORD(__p[0]) = 2;
      sub_2245508F0(a1, __p);
      v85 = __p[0];
      if (LODWORD(__p[0]) >= 2)
        v86 = 2;
      else
        v86 = __p[0];
      if (v86 < 2)
        sub_223BC8E50((uint64_t)__p, (const void *)a1, (uint64_t)v260);
      else
        sub_223BC90C8(a1, (uint64_t)v260);
      if (v85 < 2 || *(_BYTE *)(a1 + 131))
      {
LABEL_152:
        sub_22416C400((uint64_t)v260, (uint64_t)v233);
        __p[0] = &off_24EC28BC8;
        sub_2232C1E78((uint64_t)v233, (uint64_t *)&__p[1]);
        LOBYTE(v247) = 1;
        sub_2232C264C((uint64_t)&v224, (uint64_t)__p);
        if ((_BYTE)v247)
        {
          __p[0] = &off_24EC28BC8;
          v92 = v242;
          if (v242)
          {
            v93 = (unint64_t *)&v242->__shared_owners_;
            do
              v94 = __ldaxr(v93);
            while (__stlxr(v94 - 1, v93));
            if (!v94)
            {
              ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
              std::__shared_weak_count::__release_weak(v92);
            }
          }
        }
        v95 = v234;
        if (!v234)
          goto LABEL_162;
        v96 = (unint64_t *)&v234->__shared_owners_;
        do
          v97 = __ldaxr(v96);
        while (__stlxr(v97 - 1, v96));
        if (!v97)
        {
          ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
          std::__shared_weak_count::__release_weak(v95);
          v98 = LODWORD(v266[0]);
          if (LODWORD(v266[0]) == -1)
            goto LABEL_164;
        }
        else
        {
LABEL_162:
          v98 = LODWORD(v266[0]);
          if (LODWORD(v266[0]) == -1)
          {
LABEL_164:
            v233[0] = &off_24EC1F8C8;
            v99 = v225;
            v100 = v226;
            if (v226)
            {
              v101 = (unint64_t *)&v226->__shared_owners_;
              do
                v102 = __ldxr(v101);
              while (__stxr(v102 + 1, v101));
              v103 = HIDWORD(v229);
              v105 = v227;
              v104 = v228;
              v106 = v230;
              do
                v107 = __ldxr(v101);
              while (__stxr(v107 + 1, v101));
              do
                v108 = __ldxr(v101);
              while (__stxr(v108 + 1, v101));
            }
            else
            {
              v103 = HIDWORD(v229);
              v105 = v227;
              v104 = v228;
              v106 = v230;
            }
            v233[1] = v99;
            v234 = v100;
            v235 = v104;
            v236 = 4 * v103;
            v237 = v105;
            v238 = 4;
            v239 = v106;
            if (v100)
            {
              v122 = (unint64_t *)&v100->__shared_owners_;
              do
                v123 = __ldaxr(v122);
              while (__stlxr(v123 - 1, v122));
              if (!v123)
              {
                ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                std::__shared_weak_count::__release_weak(v100);
              }
              do
                v124 = __ldaxr(v122);
              while (__stlxr(v124 - 1, v122));
              if (!v124)
              {
                ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                std::__shared_weak_count::__release_weak(v100);
              }
            }
            LOBYTE(v260[1]) = 0;
            LOBYTE(v261[1]) = 0;
            LOBYTE(v262) = 0;
            LOBYTE(v263[0]) = 0;
            LOBYTE(v263[1]) = 1;
            LODWORD(v264[0]) = 0;
            sub_22432B21C((uint64_t)v233, 3u, (uint64_t)__p);
            sub_2232C1348(a2 + 224, (uint64_t)__p);
            v125 = v242;
            if (v242)
            {
              v126 = (unint64_t *)&v242->__shared_owners_;
              do
                v127 = __ldaxr(v126);
              while (__stlxr(v127 - 1, v126));
              if (!v127)
              {
                ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                std::__shared_weak_count::__release_weak(v125);
              }
            }
            v128 = v234;
            if (v234)
            {
              v129 = (unint64_t *)&v234->__shared_owners_;
              do
                v130 = __ldaxr(v129);
              while (__stlxr(v130 - 1, v129));
              if (!v130)
              {
                ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                std::__shared_weak_count::__release_weak(v128);
              }
            }
            if (v232)
            {
              v224 = &off_24EC27198;
              v131 = v226;
              if (v226)
              {
                v132 = (unint64_t *)&v226->__shared_owners_;
                do
                  v133 = __ldaxr(v132);
                while (__stlxr(v133 - 1, v132));
                if (!v133)
                {
                  ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
                  std::__shared_weak_count::__release_weak(v131);
                }
              }
            }
LABEL_250:
            LODWORD(v260[0]) = 2;
            sub_2245508F0(a1, v260);
            v134 = v260[0];
            if (LODWORD(v260[0]) >= 2)
              v135 = 2;
            else
              v135 = v260[0];
            if (v135 < 2)
              sub_223BC8E50((uint64_t)v260, (const void *)a1, a2 + 288);
            else
              sub_223BC90C8(a1, a2 + 288);
            if (v134 < 2 || *(_BYTE *)(a1 + 131))
            {
LABEL_258:
              LODWORD(v260[0]) = 2;
              sub_2245508F0(a1, v260);
              v136 = v260[0];
              if (LODWORD(v260[0]) >= 2)
                v137 = 2;
              else
                v137 = v260[0];
              if (v137 < 2)
                sub_223BC8E50((uint64_t)v260, (const void *)a1, a2 + 392);
              else
                sub_223BC90C8(a1, a2 + 392);
              if (v136 < 2 || *(_BYTE *)(a1 + 131))
                goto LABEL_284;
              while (1)
              {
                if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
                  goto LABEL_284;
                sub_2245523C0(a1, (uint64_t)v260);
                if (SHIBYTE(v261[0]) < 0)
                {
                  if (v260[1] == (void *)1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)v260[0])
                    goto LABEL_305;
LABEL_293:
                  v145 = 1;
                  if (SHIBYTE(v261[0]) < 0)
                    goto LABEL_306;
LABEL_294:
                  if (*(_BYTE *)(a1 + 131))
                    v146 = 0;
                  else
                    v146 = v145;
                  if ((v146 & 1) == 0)
                    goto LABEL_284;
                }
                else
                {
                  if (SHIBYTE(v261[0]) != 1 || *(unsigned __int8 *)(a1 + 72) != LOBYTE(v260[0]))
                    goto LABEL_293;
LABEL_305:
                  v145 = 0;
                  if ((SHIBYTE(v261[0]) & 0x80000000) == 0)
                    goto LABEL_294;
LABEL_306:
                  operator delete(v260[0]);
                  if (*(_BYTE *)(a1 + 131))
                    v147 = 0;
                  else
                    v147 = v145;
                  if ((v147 & 1) == 0)
                    goto LABEL_284;
                }
              }
            }
            while (1)
            {
              if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
                goto LABEL_258;
              sub_2245523C0(a1, (uint64_t)v260);
              if (SHIBYTE(v261[0]) < 0)
              {
                if (v260[1] == (void *)1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)v260[0])
                  goto LABEL_275;
LABEL_263:
                v138 = 1;
                if (SHIBYTE(v261[0]) < 0)
                  goto LABEL_276;
LABEL_264:
                if (*(_BYTE *)(a1 + 131))
                  v139 = 0;
                else
                  v139 = v138;
                if ((v139 & 1) == 0)
                  goto LABEL_258;
              }
              else
              {
                if (SHIBYTE(v261[0]) != 1 || *(unsigned __int8 *)(a1 + 72) != LOBYTE(v260[0]))
                  goto LABEL_263;
LABEL_275:
                v138 = 0;
                if ((SHIBYTE(v261[0]) & 0x80000000) == 0)
                  goto LABEL_264;
LABEL_276:
                operator delete(v260[0]);
                if (*(_BYTE *)(a1 + 131))
                  v140 = 0;
                else
                  v140 = v138;
                if ((v140 & 1) == 0)
                  goto LABEL_258;
              }
            }
          }
        }
        ((void (*)(void **, __int128 *))off_24EC5FFD0[v98])(__p, &v262);
        goto LABEL_164;
      }
      while (1)
      {
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
          goto LABEL_152;
        sub_2245523C0(a1, (uint64_t)__p);
        if (SHIBYTE(v242) < 0)
        {
          if (__p[1] == (void *)1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)__p[0])
            goto LABEL_183;
LABEL_171:
          v109 = 1;
          if (SHIBYTE(v242) < 0)
            goto LABEL_184;
LABEL_172:
          if (*(_BYTE *)(a1 + 131))
            v110 = 0;
          else
            v110 = v109;
          if ((v110 & 1) == 0)
            goto LABEL_152;
        }
        else
        {
          if (SHIBYTE(v242) != 1 || *(unsigned __int8 *)(a1 + 72) != LOBYTE(__p[0]))
            goto LABEL_171;
LABEL_183:
          v109 = 0;
          if ((SHIBYTE(v242) & 0x80000000) == 0)
            goto LABEL_172;
LABEL_184:
          operator delete(__p[0]);
          if (*(_BYTE *)(a1 + 131))
            v111 = 0;
          else
            v111 = v109;
          if ((v111 & 1) == 0)
            goto LABEL_152;
        }
      }
    }
    __p[0] = &off_24EC1F958;
    sub_2231B3FDC((uint64_t)&__p[1]);
    sub_22416BD7C((uint64_t)v260, (uint64_t)__p, 0);
    v87 = v242;
    if (v242)
    {
      v88 = (unint64_t *)&v242->__shared_owners_;
      do
        v89 = __ldaxr(v88);
      while (__stlxr(v89 - 1, v88));
      if (!v89)
      {
        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
        std::__shared_weak_count::__release_weak(v87);
      }
    }
    LODWORD(v261[1]) = 0;
    LODWORD(__p[0]) = 2;
    sub_2245508F0(a1, __p);
    v90 = __p[0];
    if (LODWORD(__p[0]) >= 2)
      v91 = 2;
    else
      v91 = __p[0];
    if (v91 < 2)
      sub_223BC8E50((uint64_t)__p, (const void *)a1, (uint64_t)v260);
    else
      sub_223BC90C8(a1, (uint64_t)v260);
    if (v90 < 2 || *(_BYTE *)(a1 + 131))
    {
LABEL_192:
      sub_22416C400((uint64_t)v260, (uint64_t)v233);
      __p[0] = &off_24EC21040;
      sub_2232C1A28((uint64_t)v233, (uint64_t *)&__p[1]);
      LOBYTE(v247) = 1;
      sub_2232C1C50(a2 + 224, (uint64_t)__p);
      if ((_BYTE)v247)
      {
        __p[0] = &off_24EC21040;
        v112 = v242;
        if (v242)
        {
          v113 = (unint64_t *)&v242->__shared_owners_;
          do
            v114 = __ldaxr(v113);
          while (__stlxr(v114 - 1, v113));
          if (!v114)
          {
            ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
            std::__shared_weak_count::__release_weak(v112);
          }
        }
      }
      v115 = v234;
      if (!v234)
        goto LABEL_202;
      v116 = (unint64_t *)&v234->__shared_owners_;
      do
        v117 = __ldaxr(v116);
      while (__stlxr(v117 - 1, v116));
      if (!v117)
      {
        ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
        std::__shared_weak_count::__release_weak(v115);
        v118 = LODWORD(v266[0]);
        if (LODWORD(v266[0]) == -1)
          goto LABEL_250;
      }
      else
      {
LABEL_202:
        v118 = LODWORD(v266[0]);
        if (LODWORD(v266[0]) == -1)
          goto LABEL_250;
      }
      ((void (*)(void **, __int128 *))off_24EC5FFD0[v118])(__p, &v262);
      goto LABEL_250;
    }
    while (1)
    {
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
        goto LABEL_192;
      sub_2245523C0(a1, (uint64_t)__p);
      if (SHIBYTE(v242) < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)__p[0])
          goto LABEL_216;
LABEL_204:
        v119 = 1;
        if (SHIBYTE(v242) < 0)
          goto LABEL_217;
LABEL_205:
        if (*(_BYTE *)(a1 + 131))
          v120 = 0;
        else
          v120 = v119;
        if ((v120 & 1) == 0)
          goto LABEL_192;
      }
      else
      {
        if (SHIBYTE(v242) != 1 || *(unsigned __int8 *)(a1 + 72) != LOBYTE(__p[0]))
          goto LABEL_204;
LABEL_216:
        v119 = 0;
        if ((SHIBYTE(v242) & 0x80000000) == 0)
          goto LABEL_205;
LABEL_217:
        operator delete(__p[0]);
        if (*(_BYTE *)(a1 + 131))
          v121 = 0;
        else
          v121 = v119;
        if ((v121 & 1) == 0)
          goto LABEL_192;
      }
    }
  }
  sub_2232C39E0(a2 + 224);
LABEL_284:
  if (v7 <= 3)
  {
    LOBYTE(v260[0]) = 0;
    LOBYTE(v263[1]) = 0;
    sub_223BC88C0(a1, (uint64_t)v260);
    if (LOBYTE(v263[1]))
    {
      v260[0] = &off_24EC21328;
      v141 = (std::__shared_weak_count *)v261[0];
      if (v261[0])
      {
        v142 = (unint64_t *)((char *)v261[0] + 8);
        do
          v143 = __ldaxr(v142);
        while (__stlxr(v143 - 1, v142));
        if (!v143)
        {
          ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
          std::__shared_weak_count::__release_weak(v141);
        }
      }
    }
  }
  LODWORD(v260[0]) = 2;
  sub_2245508F0(a1, v260);
  v144 = v260[0];
  sub_223BC871C(a1, a2 + 504);
  if (v144 >= 2)
  {
    sub_223BC88C0(a1, a2 + 568);
    goto LABEL_358;
  }
  LOBYTE(__p[0]) = 0;
  LOBYTE(v247) = 0;
  sub_223BC8A64(a1, (uint64_t)__p);
  if (!(_BYTE)v247)
    goto LABEL_358;
  v224 = &off_24EC1F8C8;
  v148 = (char *)__p[1];
  v149 = v242;
  if (v242)
  {
    v150 = (unint64_t *)&v242->__shared_owners_;
    do
      v151 = __ldxr(v150);
    while (__stxr(v151 + 1, v150));
    v152 = v245;
    v154 = v243;
    v153 = (uint64_t)v244;
    v155 = (__int16)v246;
    do
      v156 = __ldxr(v150);
    while (__stxr(v156 + 1, v150));
    do
      v157 = __ldxr(v150);
    while (__stxr(v157 + 1, v150));
  }
  else
  {
    v152 = v245;
    v154 = v243;
    v153 = (uint64_t)v244;
    v155 = (__int16)v246;
  }
  v225 = v148;
  v226 = v149;
  v227 = v153;
  LODWORD(v228) = 4 * v152;
  v229 = v154;
  v230 = 4;
  v231 = v155;
  if (v149)
  {
    v158 = (unint64_t *)&v149->__shared_owners_;
    do
      v159 = __ldaxr(v158);
    while (__stlxr(v159 - 1, v158));
    if (!v159)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
    do
      v160 = __ldaxr(v158);
    while (__stlxr(v160 - 1, v158));
    if (!v160)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  LOBYTE(v260[1]) = 0;
  LOBYTE(v261[1]) = 0;
  LOBYTE(v262) = 0;
  LOBYTE(v263[0]) = 0;
  LOBYTE(v263[1]) = 1;
  LODWORD(v264[0]) = 0;
  sub_22432B21C((uint64_t)&v224, 3u, (uint64_t)v233);
  sub_2232C1348(a2 + 568, (uint64_t)v233);
  v161 = v234;
  if (v234)
  {
    v162 = (unint64_t *)&v234->__shared_owners_;
    do
      v163 = __ldaxr(v162);
    while (__stlxr(v163 - 1, v162));
    if (!v163)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
  v164 = v226;
  if (!v226)
    goto LABEL_570;
  v165 = (unint64_t *)&v226->__shared_owners_;
  do
    v166 = __ldaxr(v165);
  while (__stlxr(v166 - 1, v165));
  if (!v166)
  {
    ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
    std::__shared_weak_count::__release_weak(v164);
    if (!(_BYTE)v247)
      goto LABEL_358;
  }
  else
  {
LABEL_570:
    if (!(_BYTE)v247)
      goto LABEL_358;
  }
  __p[0] = &off_24EC27198;
  v167 = v242;
  if (!v242)
    goto LABEL_358;
  v168 = (unint64_t *)&v242->__shared_owners_;
  do
    v169 = __ldaxr(v168);
  while (__stlxr(v169 - 1, v168));
  if (v169)
  {
LABEL_358:
    v170 = a2 + 632;
    if (a3 <= 4)
      goto LABEL_359;
    goto LABEL_343;
  }
  ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
  std::__shared_weak_count::__release_weak(v167);
  v170 = a2 + 632;
  if (a3 <= 4)
  {
LABEL_359:
    sub_223BC8578(a1, v170);
    goto LABEL_360;
  }
LABEL_343:
  LODWORD(v260[0]) = 5;
  sub_2245508F0(a1, v260);
  v171 = v260[0];
  sub_223BC8578(a1, v170);
  LOBYTE(v260[0]) = 0;
  sub_22454FFAC(a1, v260);
  if (LOBYTE(v260[0]))
  {
    if (!*(_BYTE *)(a2 + 724))
    {
      *(_DWORD *)(a2 + 720) = 0;
      *(_BYTE *)(a2 + 724) = 1;
    }
    sub_224551268(a1, (_DWORD *)(a2 + 720));
  }
  else if (*(_BYTE *)(a2 + 724))
  {
    *(_BYTE *)(a2 + 724) = 0;
  }
  if (v171 >= 2)
  {
    LOBYTE(__p[0]) = 0;
    sub_22454FFAC(a1, __p);
    v172 = (void **)(a2 + 728);
    if (LOBYTE(__p[0]))
    {
      if (*(_BYTE *)(a2 + 752))
      {
        v173 = (uint64_t)(*(_QWORD *)(a2 + 736) - *(_QWORD *)(a2 + 728)) >> 1;
      }
      else
      {
        v173 = 0;
        *v172 = 0;
        *(_QWORD *)(a2 + 736) = 0;
        *(_QWORD *)(a2 + 744) = 0;
        *(_BYTE *)(a2 + 752) = 1;
      }
      v260[0] = (void *)v173;
      sub_224550D98(a1, v260);
      v209 = *(char **)(a2 + 736);
      v210 = *(char **)(a2 + 728);
      v211 = (v209 - v210) >> 1;
      if (v260[0] <= (void *)v211)
      {
        if (v260[0] < (void *)v211)
        {
          v209 = &v210[2 * (uint64_t)v260[0]];
          *(_QWORD *)(a2 + 736) = v209;
        }
      }
      else
      {
        sub_2232C5090(a2 + 728, (unint64_t)v260[0] - v211);
        v210 = *(char **)(a2 + 728);
        v209 = *(char **)(a2 + 736);
      }
      v212 = v209 - v210;
      if (v212)
      {
        v213 = 2 * (v212 >> 1);
        do
        {
          sub_224550448(a1, v210);
          v210 += 2;
          v213 -= 2;
        }
        while (v213);
      }
    }
    else if (*(_BYTE *)(a2 + 752))
    {
      v174 = *v172;
      if (*v172)
      {
        *(_QWORD *)(a2 + 736) = v174;
        operator delete(v174);
      }
      *(_BYTE *)(a2 + 752) = 0;
    }
    LOBYTE(v260[0]) = 0;
    sub_22454FFAC(a1, v260);
    if (LOBYTE(v260[0]))
    {
      if (!*(_BYTE *)(a2 + 764))
      {
        *(_DWORD *)(a2 + 760) = 0;
        *(_BYTE *)(a2 + 764) = 1;
      }
      sub_2245508F0(a1, (_DWORD *)(a2 + 760));
    }
    else if (*(_BYTE *)(a2 + 764))
    {
      *(_BYTE *)(a2 + 764) = 0;
    }
    LOBYTE(v260[0]) = 0;
    sub_22454FFAC(a1, v260);
    if (LOBYTE(v260[0]))
    {
      if (!*(_BYTE *)(a2 + 772))
      {
        *(_DWORD *)(a2 + 768) = 0;
        *(_BYTE *)(a2 + 772) = 1;
      }
      sub_2245508F0(a1, (_DWORD *)(a2 + 768));
    }
    else if (*(_BYTE *)(a2 + 772))
    {
      *(_BYTE *)(a2 + 772) = 0;
    }
    if (v171 >= 3)
    {
      LOBYTE(v260[0]) = 0;
      sub_22454FFAC(a1, v260);
      if (LOBYTE(v260[0]))
      {
        if (!*(_BYTE *)(a2 + 780))
        {
          *(_DWORD *)(a2 + 776) = 0;
          *(_BYTE *)(a2 + 780) = 1;
        }
        sub_2245508F0(a1, (_DWORD *)(a2 + 776));
      }
      else if (*(_BYTE *)(a2 + 780))
      {
        *(_BYTE *)(a2 + 780) = 0;
      }
      if (v171 >= 4)
      {
        LODWORD(v260[0]) = 2;
        sub_2245508F0(a1, v260);
        v214 = v260[0];
        if (LODWORD(v260[0]) >= 2)
          v215 = 2;
        else
          v215 = v260[0];
        if (v215 < 2)
          sub_223BC99F4((uint64_t)v260, a1, a2 + 784);
        else
          sub_223BC9B7C(a1, a2 + 784);
        if (v214 < 2 || *(_BYTE *)(a1 + 131))
        {
LABEL_541:
          if (v171 >= 5)
          {
            LOBYTE(v260[0]) = 0;
            sub_22454FFAC(a1, v260);
            if (LOBYTE(v260[0]))
            {
              v216 = (_DWORD *)(a2 + 800);
              if (!*(_BYTE *)(a2 + 836))
              {
                *(_DWORD *)(a2 + 832) = 0;
                *(_OWORD *)v216 = 0u;
                *(_OWORD *)(a2 + 816) = 0u;
                *(_BYTE *)(a2 + 836) = 1;
              }
              sub_224551268(a1, v216);
              sub_224551268(a1, (_DWORD *)(a2 + 804));
              sub_224551268(a1, (_DWORD *)(a2 + 808));
              sub_224551268(a1, (_DWORD *)(a2 + 812));
              sub_224551268(a1, (_DWORD *)(a2 + 816));
              sub_224551268(a1, (_DWORD *)(a2 + 820));
              sub_224551268(a1, (_DWORD *)(a2 + 824));
              sub_224551268(a1, (_DWORD *)(a2 + 828));
              sub_224551268(a1, (_DWORD *)(a2 + 832));
            }
            else if (*(_BYTE *)(a2 + 836))
            {
              *(_BYTE *)(a2 + 836) = 0;
            }
          }
          goto LABEL_360;
        }
        while (1)
        {
          if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
            goto LABEL_541;
          sub_2245523C0(a1, (uint64_t)v260);
          if (SHIBYTE(v261[0]) < 0)
          {
            if (v260[1] == (void *)1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)v260[0])
              goto LABEL_558;
LABEL_546:
            v217 = 1;
            if (SHIBYTE(v261[0]) < 0)
              goto LABEL_559;
LABEL_547:
            if (*(_BYTE *)(a1 + 131))
              v218 = 0;
            else
              v218 = v217;
            if ((v218 & 1) == 0)
              goto LABEL_541;
          }
          else
          {
            if (SHIBYTE(v261[0]) != 1 || *(unsigned __int8 *)(a1 + 72) != LOBYTE(v260[0]))
              goto LABEL_546;
LABEL_558:
            v217 = 0;
            if ((SHIBYTE(v261[0]) & 0x80000000) == 0)
              goto LABEL_547;
LABEL_559:
            operator delete(v260[0]);
            if (*(_BYTE *)(a1 + 131))
              v219 = 0;
            else
              v219 = v217;
            if ((v219 & 1) == 0)
              goto LABEL_541;
          }
        }
      }
    }
  }
LABEL_360:
  sub_223BC871C(a1, a2 + 840);
  LODWORD(v260[0]) = 1;
  sub_2245508F0(a1, v260);
  LOBYTE(v260[0]) = 0;
  LOBYTE(v266[1]) = 0;
  sub_223BC8C08(a1, (uint64_t)v260);
  v175 = LOBYTE(v266[1]);
  if (LOBYTE(v266[1]))
  {
    sub_22416C400((uint64_t)v260, (uint64_t)v233);
    __p[0] = &off_24EC28A18;
    sub_2232C59F4((uint64_t)v233, (uint64_t *)&__p[1]);
    v176 = 1;
  }
  else
  {
    v176 = 0;
    LOBYTE(__p[0]) = 0;
  }
  LOBYTE(v250) = v176;
  sub_2232C5C1C(a2 + 904, (uint64_t)__p);
  if (!(_BYTE)v250)
    goto LABEL_368;
  __p[0] = &off_24EC28A18;
  v177 = v242;
  if (!v242)
    goto LABEL_368;
  v178 = (unint64_t *)&v242->__shared_owners_;
  do
    v179 = __ldaxr(v178);
  while (__stlxr(v179 - 1, v178));
  if (!v179)
  {
    ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
    std::__shared_weak_count::__release_weak(v177);
    if (!v175)
      goto LABEL_373;
  }
  else
  {
LABEL_368:
    if (!v175)
      goto LABEL_373;
  }
  v180 = v234;
  if (v234)
  {
    v181 = (unint64_t *)&v234->__shared_owners_;
    do
      v182 = __ldaxr(v181);
    while (__stlxr(v182 - 1, v181));
    if (!v182)
    {
      ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
      std::__shared_weak_count::__release_weak(v180);
      if (!LOBYTE(v266[1]))
        goto LABEL_376;
      goto LABEL_374;
    }
  }
LABEL_373:
  if (!LOBYTE(v266[1]))
    goto LABEL_376;
LABEL_374:
  if (LODWORD(v266[0]) != -1)
    ((void (*)(void **, __int128 *))off_24EC5FFD0[LODWORD(v266[0])])(__p, &v262);
LABEL_376:
  sub_223BC8578(a1, a2 + 992);
  sub_22454FFAC(a1, (_BYTE *)(a2 + 1080));
  sub_224551268(a1, (_DWORD *)(a2 + 1084));
  sub_224551268(a1, (_DWORD *)(a2 + 1088));
  sub_224551268(a1, (_DWORD *)(a2 + 1092));
  v260[0] = 0;
  sub_224550B44(a1, v260);
  *(void **)(a2 + 1136) = v260[0];
  sub_223BCC564((uint64_t)v260, a1, (_DWORD *)(a2 + 1144));
  sub_2245514BC(a1, (_QWORD *)(a2 + 1184));
  sub_2245514BC(a1, (_QWORD *)(a2 + 1192));
  sub_2245514BC(a1, (_QWORD *)(a2 + 1200));
  sub_2245514BC(a1, (_QWORD *)(a2 + 1208));
  sub_2245514BC(a1, (_QWORD *)(a2 + 1216));
  sub_2245514BC(a1, (_QWORD *)(a2 + 1224));
  sub_2245514BC(a1, (_QWORD *)(a2 + 1232));
  sub_2245514BC(a1, (_QWORD *)(a2 + 1240));
  sub_2245514BC(a1, (_QWORD *)(a2 + 1248));
  sub_2245514BC(a1, (_QWORD *)(a2 + 1256));
  sub_2245514BC(a1, (_QWORD *)(a2 + 1264));
  sub_2245514BC(a1, (_QWORD *)(a2 + 1272));
  sub_2245514BC(a1, (_QWORD *)(a2 + 1280));
  sub_2245514BC(a1, (_QWORD *)(a2 + 1288));
  sub_2245514BC(a1, (_QWORD *)(a2 + 1296));
  sub_2245514BC(a1, (_QWORD *)(a2 + 1304));
  if (a3 == 1)
  {
    LOBYTE(v260[0]) = 0;
    v273 = 0;
    LOBYTE(v224) = 0;
    sub_22454FFAC(a1, &v224);
    if ((_BYTE)v224)
    {
      if (!v273)
      {
        v272 = 0;
        *(_OWORD *)v270 = 0u;
        v271 = 0u;
        v268 = 0u;
        *(_OWORD *)v269 = 0u;
        *(_OWORD *)v266 = 0u;
        *(_OWORD *)v267 = 0u;
        *(_OWORD *)v264 = 0u;
        v265 = 0u;
        v262 = 0u;
        *(_OWORD *)v263 = 0u;
        *(_OWORD *)v260 = 0u;
        *(_OWORD *)v261 = 0u;
        v273 = 1;
      }
      LODWORD(__p[0]) = 4;
      sub_2245508F0(a1, __p);
      sub_223BCC960(a1, (uint64_t)v260, __p[0]);
      if (!v273)
        goto LABEL_481;
      v183 = *(unsigned __int8 *)(a2 + 1512);
      *(_OWORD *)(a2 + 1312) = *(_OWORD *)v260;
      *(_DWORD *)(a2 + 1328) = v261[0];
      v184 = (char **)(a2 + 1336);
      if (v183)
      {
        sub_2232C6B24(v184, (char **)&v261[1]);
        *(_BYTE *)(a2 + 1504) = v272;
        if (!v273)
          goto LABEL_481;
      }
      else
      {
        sub_2232C6D24(v184, (uint64_t)&v261[1]);
        v191 = v272;
        *(_BYTE *)(a2 + 1512) = 1;
        *(_BYTE *)(a2 + 1504) = v191;
        if (!v273)
          goto LABEL_481;
      }
    }
    else if (!v273)
    {
LABEL_481:
      LOBYTE(__p[0]) = 0;
      sub_22454FFAC(a1, __p);
      if (LOBYTE(__p[0]))
      {
        if (!*(_BYTE *)(a2 + 1128))
        {
          *(_OWORD *)(a2 + 1096) = 0u;
          *(_OWORD *)(a2 + 1112) = 0u;
          *(_BYTE *)(a2 + 1128) = 1;
        }
        LODWORD(v260[0]) = 2;
        sub_2245508F0(a1, v260);
        sub_223BCD288(a1, a2 + 1096, (int)v260[0]);
      }
      else if (*(_BYTE *)(a2 + 1128))
      {
        v203 = *(_QWORD *)(a2 + 1104);
        if (v203)
        {
          v204 = *(_QWORD *)(a2 + 1112);
          v205 = *(void **)(a2 + 1104);
          if (v204 != v203)
          {
            v206 = *(_QWORD *)(a2 + 1112);
            do
            {
              v208 = *(void **)(v206 - 24);
              v206 -= 24;
              v207 = v208;
              if (v208)
              {
                *(_QWORD *)(v204 - 16) = v207;
                operator delete(v207);
              }
              v204 = v206;
            }
            while (v206 != v203);
            v205 = *(void **)(a2 + 1104);
          }
          *(_QWORD *)(a2 + 1112) = v203;
          operator delete(v205);
        }
        *(_BYTE *)(a2 + 1128) = 0;
      }
      goto LABEL_527;
    }
    if (v270[1])
    {
      *(void **)&v271 = v270[1];
      operator delete(v270[1]);
    }
    if (v269[0])
    {
      v269[1] = v269[0];
      operator delete(v269[0]);
    }
    if (v267[1])
    {
      *(void **)&v268 = v267[1];
      operator delete(v267[1]);
    }
    if (v266[0])
    {
      v266[1] = v266[0];
      operator delete(v266[0]);
    }
    if (v264[1])
    {
      *(void **)&v265 = v264[1];
      operator delete(v264[1]);
    }
    if (v263[0])
    {
      v263[1] = v263[0];
      operator delete(v263[0]);
    }
    if (v261[1])
    {
      *(void **)&v262 = v261[1];
      operator delete(v261[1]);
    }
    goto LABEL_481;
  }
  if (a3 > 6)
  {
    LOBYTE(__p[0]) = 0;
    sub_22454FFAC(a1, __p);
    if (LOBYTE(__p[0]))
    {
      if (!*(_BYTE *)(a2 + 1512))
      {
        *(_QWORD *)(a2 + 1504) = 0;
        *(_OWORD *)(a2 + 1472) = 0u;
        *(_OWORD *)(a2 + 1488) = 0u;
        *(_OWORD *)(a2 + 1440) = 0u;
        *(_OWORD *)(a2 + 1456) = 0u;
        *(_OWORD *)(a2 + 1408) = 0u;
        *(_OWORD *)(a2 + 1424) = 0u;
        *(_OWORD *)(a2 + 1376) = 0u;
        *(_OWORD *)(a2 + 1392) = 0u;
        *(_OWORD *)(a2 + 1344) = 0u;
        *(_OWORD *)(a2 + 1360) = 0u;
        *(_OWORD *)(a2 + 1312) = 0u;
        *(_OWORD *)(a2 + 1328) = 0u;
        *(_BYTE *)(a2 + 1512) = 1;
      }
      LODWORD(v260[0]) = 4;
      sub_2245508F0(a1, v260);
      sub_223BCC960(a1, a2 + 1312, v260[0]);
    }
    else if (*(_BYTE *)(a2 + 1512))
    {
      sub_223255CAC(a2 + 1336);
      *(_BYTE *)(a2 + 1512) = 0;
    }
    goto LABEL_493;
  }
  v224 = 0;
  v225 = 0;
  v226 = 0;
  v260[0] = 0;
  sub_224550D98(a1, v260);
  v185 = v225;
  v186 = 0x8F5C28F5C28F5C29 * ((v225 - (_BYTE *)v224) >> 3);
  if (v260[0] > (void *)v186)
  {
    sub_2232C71E0((uint64_t *)&v224, (unint64_t)v260[0] - v186);
    v187 = (char *)v224;
    v188 = v225;
    v189 = v225 - (_BYTE *)v224;
    if (v225 == v224)
      goto LABEL_475;
    goto LABEL_421;
  }
  if (v260[0] < (void *)v186)
  {
    v188 = (char *)v224 + 200 * (uint64_t)v260[0];
    if (v225 != v188)
    {
      do
      {
        v190 = v185 - 200;
        sub_223255CAC((uint64_t)(v185 - 176));
        v185 = v190;
      }
      while (v190 != v188);
    }
    v225 = v188;
    v187 = (char *)v224;
    v189 = v188 - (_BYTE *)v224;
    if (v188 == v224)
      goto LABEL_475;
    goto LABEL_421;
  }
  v188 = v225;
  v187 = (char *)v224;
  v189 = v225 - (_BYTE *)v224;
  if (v225 != v224)
  {
LABEL_421:
    v192 = 200 * (v189 / 200);
    do
    {
      LODWORD(__p[0]) = 4;
      sub_2245508F0(a1, __p);
      sub_223BCC960(a1, (uint64_t)v187, __p[0]);
      v187 += 200;
      v192 -= 200;
    }
    while (v192);
    v188 = v225;
    if (v224 != v225)
    {
      __p[0] = 0;
      __p[1] = 0;
      v242 = 0;
      sub_2232C7578((uint64_t *)__p, 0x8F5C28F5C28F5C29 * ((v225 - (_BYTE *)v224) >> 3));
      v193 = (char *)v224;
      v194 = v225;
      v240 = __p;
      if (v224 != v225)
      {
        do
        {
          LOBYTE(v260[0]) = *v193;
          *(_WORD *)((char *)v260 + 1) = *(_WORD *)(v193 + 1);
          HIDWORD(v260[0]) = *((_DWORD *)v193 + 1);
          v260[1] = *((void **)v193 + 1);
          LODWORD(v261[0]) = *((_DWORD *)v193 + 4);
          v195 = v193 + 24;
          sub_223C7574C((char ***)v193 + 3, (uint64_t)&v261[1]);
          LOBYTE(v272) = v195[168];
          sub_2232C77CC((uint64_t **)&v240, (uint64_t)v260);
          if (v270[1])
          {
            *(void **)&v271 = v270[1];
            operator delete(v270[1]);
          }
          if (v269[0])
          {
            v269[1] = v269[0];
            operator delete(v269[0]);
          }
          if (v267[1])
          {
            *(void **)&v268 = v267[1];
            operator delete(v267[1]);
          }
          if (v266[0])
          {
            v266[1] = v266[0];
            operator delete(v266[0]);
          }
          if (v264[1])
          {
            *(void **)&v265 = v264[1];
            operator delete(v264[1]);
          }
          if (v263[0])
          {
            v263[1] = v263[0];
            operator delete(v263[0]);
          }
          if (v261[1])
          {
            *(void **)&v262 = v261[1];
            operator delete(v261[1]);
          }
          v193 = v195 + 176;
        }
        while (v195 + 176 != v194);
      }
      *(_OWORD *)v220 = *(_OWORD *)__p;
      v221 = v242;
      sub_223C2A714((uint64_t *)v220, (uint64_t)__p);
      LOBYTE(v260[0]) = __p[0];
      *(_WORD *)((char *)v260 + 1) = *(_WORD *)((char *)__p + 1);
      HIDWORD(v260[0]) = HIDWORD(__p[0]);
      v260[1] = __p[1];
      LODWORD(v261[0]) = (_DWORD)v242;
      sub_223C75208((uint64_t)&v261[1], (char **)&v243);
      LOBYTE(v272) = v259;
      sub_2232C0648(a2 + 1312, (__int128 *)v260);
      if (v270[1])
      {
        *(void **)&v271 = v270[1];
        operator delete(v270[1]);
      }
      if (v269[0])
      {
        v269[1] = v269[0];
        operator delete(v269[0]);
      }
      if (v267[1])
      {
        *(void **)&v268 = v267[1];
        operator delete(v267[1]);
      }
      if (v266[0])
      {
        v266[1] = v266[0];
        operator delete(v266[0]);
      }
      if (v264[1])
      {
        *(void **)&v265 = v264[1];
        operator delete(v264[1]);
      }
      if (v263[0])
      {
        v263[1] = v263[0];
        operator delete(v263[0]);
      }
      if (v261[1])
      {
        *(void **)&v262 = v261[1];
        operator delete(v261[1]);
      }
      if (v257)
      {
        v258 = v257;
        operator delete(v257);
      }
      if (v255)
      {
        v256 = v255;
        operator delete(v255);
      }
      if (v253)
      {
        v254 = v253;
        operator delete(v253);
      }
      if (v251)
      {
        v252 = v251;
        operator delete(v251);
      }
      if (v249)
      {
        v250 = v249;
        operator delete(v249);
      }
      if (v246)
      {
        v247 = v246;
        operator delete(v246);
      }
      if (v243)
      {
        v244 = v243;
        operator delete(v243);
      }
      v196 = (char *)v220[0];
      if (v220[0])
      {
        v197 = (char *)v220[1];
        v198 = v220[0];
        if (v220[1] != v220[0])
        {
          do
          {
            v199 = v197 - 200;
            sub_223255CAC((uint64_t)(v197 - 176));
            v197 = v199;
          }
          while (v199 != v196);
          v198 = v220[0];
        }
        v220[1] = v196;
        operator delete(v198);
      }
      v188 = (char *)v224;
    }
  }
LABEL_475:
  if (v188)
  {
    v200 = v225;
    v201 = v188;
    if (v225 != v188)
    {
      do
      {
        v202 = v200 - 200;
        sub_223255CAC((uint64_t)(v200 - 176));
        v200 = v202;
      }
      while (v202 != v188);
      v201 = v224;
    }
    v225 = v188;
    operator delete(v201);
  }
  if (a3 <= 3)
    goto LABEL_481;
  if (a3 <= 4)
  {
LABEL_527:
    LODWORD(v260[0]) = 0;
    sub_2245508F0(a1, v260);
    sub_223BCD54C(a1, a2 + 1520);
    if (a3 >= 3)
      sub_223BCD7C4(a1, a2 + 1656);
    return;
  }
LABEL_493:
  sub_223BCD54C(a1, a2 + 1520);
  sub_223BCD7C4(a1, a2 + 1656);
  if (a3 >= 6)
  {
    LODWORD(v260[0]) = 1;
    sub_2245508F0(a1, v260);
    sub_22454FFAC(a1, (_BYTE *)(a2 + 1680));
    if (a3 >= 8)
    {
      LOBYTE(v260[0]) = 0;
      sub_22454FFAC(a1, v260);
      if (LOBYTE(v260[0]))
      {
        if (!*(_BYTE *)(a2 + 1682))
          *(_WORD *)(a2 + 1681) = 256;
        sub_224551710(a1, (_BYTE *)(a2 + 1681));
      }
      else if (*(_BYTE *)(a2 + 1682))
      {
        *(_BYTE *)(a2 + 1682) = 0;
      }
    }
  }
}

void sub_223BC800C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  uint64_t v20;
  uint64_t v21;

  sub_223255CAC(v21);
  sub_223255CAC(v20);
  sub_2232C0794(&a9);
  sub_2232C0794(&a20);
  _Unwind_Resume(a1);
}

void sub_223BC8040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  sub_2232C0794(&a9);
  sub_2232C0794(&a20);
  _Unwind_Resume(a1);
}

void sub_223BC805C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37)
{
  sub_2232C0794(&a37);
  sub_2232C0794(&a20);
  _Unwind_Resume(a1);
}

void sub_223BC8558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_2232C0794((void **)va);
  _Unwind_Resume(a1);
}

void sub_223BC8578(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE v11[16];
  std::__shared_weak_count *v12;
  uint64_t (**v13)();
  uint64_t v14;
  std::__shared_weak_count *v15;
  char v16;
  _BYTE v17[32];
  uint64_t v18;
  int v19;
  unsigned __int8 v20;

  v17[0] = 0;
  v20 = 0;
  sub_223BC8C08(a1, (uint64_t)v17);
  v3 = v20;
  if (v20)
  {
    sub_22416C400((uint64_t)v17, (uint64_t)v11);
    v13 = &off_24EC28D40;
    sub_2232C495C((uint64_t)v11, &v14);
    v4 = 1;
  }
  else
  {
    v4 = 0;
    LOBYTE(v13) = 0;
  }
  v16 = v4;
  sub_2232C4B84(a2, (uint64_t)&v13);
  if (v16)
  {
    v13 = &off_24EC28D40;
    v5 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  if (!v3)
    goto LABEL_15;
  v8 = v12;
  if (!v12)
    goto LABEL_15;
  v9 = (unint64_t *)&v12->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v20)
      return;
  }
  else
  {
LABEL_15:
    if (!v20)
      return;
  }
  if (v19 != -1)
    ((void (*)(uint64_t (***)(), uint64_t *))off_24EC5FFD0[v19])(&v13, &v18);
}

void sub_223BC86C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_22319B358((uint64_t)va);
  sub_2232C17E0(v2 - 144);
  _Unwind_Resume(a1);
}

void sub_223BC871C(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE v11[16];
  std::__shared_weak_count *v12;
  uint64_t (**v13)();
  uint64_t v14;
  std::__shared_weak_count *v15;
  char v16;
  _BYTE v17[32];
  uint64_t v18;
  int v19;
  unsigned __int8 v20;

  v17[0] = 0;
  v20 = 0;
  sub_223BC8C08(a1, (uint64_t)v17);
  v3 = v20;
  if (v20)
  {
    sub_22416C400((uint64_t)v17, (uint64_t)v11);
    v13 = &off_24EC29028;
    sub_2232C529C((uint64_t)v11, &v14);
    v4 = 1;
  }
  else
  {
    v4 = 0;
    LOBYTE(v13) = 0;
  }
  v16 = v4;
  sub_2232C5628(a2, (uint64_t)&v13);
  if (v16)
  {
    v13 = &off_24EC29028;
    v5 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  if (!v3)
    goto LABEL_15;
  v8 = v12;
  if (!v12)
    goto LABEL_15;
  v9 = (unint64_t *)&v12->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v20)
      return;
  }
  else
  {
LABEL_15:
    if (!v20)
      return;
  }
  if (v19 != -1)
    ((void (*)(uint64_t (***)(), uint64_t *))off_24EC5FFD0[v19])(&v13, &v18);
}

void sub_223BC8868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  sub_22319B358((uint64_t)&a9);
  sub_2232C17E0((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_223BC88C0(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE v11[16];
  std::__shared_weak_count *v12;
  uint64_t (**v13)();
  uint64_t v14;
  std::__shared_weak_count *v15;
  char v16;
  _BYTE v17[32];
  uint64_t v18;
  int v19;
  unsigned __int8 v20;

  v17[0] = 0;
  v20 = 0;
  sub_223BC8C08(a1, (uint64_t)v17);
  v3 = v20;
  if (v20)
  {
    sub_22416C400((uint64_t)v17, (uint64_t)v11);
    v13 = &off_24EC21040;
    sub_2232C1A28((uint64_t)v11, &v14);
    v4 = 1;
  }
  else
  {
    v4 = 0;
    LOBYTE(v13) = 0;
  }
  v16 = v4;
  sub_2232C1C50(a2, (uint64_t)&v13);
  if (v16)
  {
    v13 = &off_24EC21040;
    v5 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  if (!v3)
    goto LABEL_15;
  v8 = v12;
  if (!v12)
    goto LABEL_15;
  v9 = (unint64_t *)&v12->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v20)
      return;
  }
  else
  {
LABEL_15:
    if (!v20)
      return;
  }
  if (v19 != -1)
    ((void (*)(uint64_t (***)(), uint64_t *))off_24EC5FFD0[v19])(&v13, &v18);
}

void sub_223BC8A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  sub_22319B358((uint64_t)&a9);
  sub_2232C17E0((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_223BC8A64(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE v11[16];
  std::__shared_weak_count *v12;
  uint64_t (**v13)();
  uint64_t v14;
  std::__shared_weak_count *v15;
  char v16;
  _BYTE v17[32];
  uint64_t v18;
  int v19;
  unsigned __int8 v20;

  v17[0] = 0;
  v20 = 0;
  sub_223BC8C08(a1, (uint64_t)v17);
  v3 = v20;
  if (v20)
  {
    sub_22416C400((uint64_t)v17, (uint64_t)v11);
    v13 = &off_24EC28BC8;
    sub_2232C1E78((uint64_t)v11, &v14);
    v4 = 1;
  }
  else
  {
    v4 = 0;
    LOBYTE(v13) = 0;
  }
  v16 = v4;
  sub_2232C264C(a2, (uint64_t)&v13);
  if (v16)
  {
    v13 = &off_24EC28BC8;
    v5 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  if (!v3)
    goto LABEL_15;
  v8 = v12;
  if (!v12)
    goto LABEL_15;
  v9 = (unint64_t *)&v12->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v20)
      return;
  }
  else
  {
LABEL_15:
    if (!v20)
      return;
  }
  if (v19 != -1)
    ((void (*)(uint64_t (***)(), uint64_t *))off_24EC5FFD0[v19])(&v13, &v18);
}

void sub_223BC8BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  sub_22319B358((uint64_t)&a9);
  sub_2232C17E0((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_223BC8C08(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  void *__p;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v12 = 0;
  sub_22454FFAC(a1, &v12);
  if (v12)
  {
    if (!*(_BYTE *)(a2 + 104))
    {
      __p = &off_24EC1F958;
      sub_2231B3FDC((uint64_t)&v14);
      sub_22416BD7C(a2, (uint64_t)&__p, 0);
      v4 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      *(_DWORD *)(a2 + 24) = 0;
      *(_BYTE *)(a2 + 104) = 1;
    }
    LODWORD(__p) = 2;
    sub_2245508F0(a1, &__p);
    v7 = __p;
    if (__p >= 2)
      v8 = 2;
    else
      v8 = __p;
    if (v8 < 2)
    {
      sub_223BC8E50((uint64_t)&__p, (const void *)a1, a2);
      if (v7 < 2)
        return;
    }
    else
    {
      sub_223BC90C8(a1, a2);
      if (v7 < 2)
        return;
    }
    if (!*(_BYTE *)(a1 + 131))
    {
      do
      {
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
          return;
        sub_2245523C0(a1, (uint64_t)&__p);
        if (SHIBYTE(v15) < 0)
        {
          if (v14 == 1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)__p)
          {
LABEL_33:
            v11 = 0;
            if (SHIBYTE(v15) < 0)
              goto LABEL_36;
            goto LABEL_22;
          }
        }
        else if (SHIBYTE(v15) == 1 && *(unsigned __int8 *)(a1 + 72) == __p)
        {
          goto LABEL_33;
        }
        v11 = 1;
        if (SHIBYTE(v15) < 0)
LABEL_36:
          operator delete(__p);
LABEL_22:
        if (*(_BYTE *)(a1 + 131))
          v10 = 0;
        else
          v10 = v11;
      }
      while ((v10 & 1) != 0);
    }
  }
  else if (*(_BYTE *)(a2 + 104))
  {
    v9 = *(unsigned int *)(a2 + 96);
    if ((_DWORD)v9 != -1)
      ((void (*)(void **, uint64_t))off_24EC5FFD0[v9])(&__p, a2 + 32);
    *(_DWORD *)(a2 + 96) = -1;
    *(_BYTE *)(a2 + 104) = 0;
  }
}

void sub_223BC8E0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  unint64_t *p_shared_owners;
  unint64_t v15;

  if (a13)
  {
    p_shared_owners = (unint64_t *)&a13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
      std::__shared_weak_count::__release_weak(a13);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_223BC8E50(uint64_t a1, const void *a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[28];
  _BYTE v11[64];
  int v12;
  __int16 v13;
  __int128 v14;
  int v15;
  _BYTE v16[64];
  unsigned int v17;
  char v18;
  uint64_t v19;

  *(_QWORD *)v10 = &off_24EC1F958;
  sub_2231B3FDC((uint64_t)&v10[8]);
  sub_22416B680((uint64_t)&v13, (uint64_t)v10, 0);
  v5 = *(std::__shared_weak_count **)&v10[16];
  if (*(_QWORD *)&v10[16])
  {
    v6 = (unint64_t *)(*(_QWORD *)&v10[16] + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v15 = 0;
  sub_223BC9708(a2, (uint64_t)&v13);
  *(_WORD *)v10 = v13;
  *(_OWORD *)&v10[8] = v14;
  v8 = v17;
  *(_DWORD *)&v10[24] = v15;
  v11[0] = 0;
  v12 = -1;
  if (v17 == -1)
  {
    *(_OWORD *)a3 = *(_OWORD *)v10;
    *(_OWORD *)(a3 + 12) = *(_OWORD *)&v10[12];
    v9 = *(unsigned int *)(a3 + 96);
    if ((_DWORD)v9 != -1)
    {
      ((void (*)(uint64_t *, uint64_t))off_24EC5FFD0[v9])(&v19, a3 + 32);
      *(_DWORD *)(a3 + 96) = -1;
    }
  }
  else
  {
    ((void (*)(char *, _BYTE *, _BYTE *))off_24EC60008[v17])(&v18, v11, v16);
    v12 = v8;
    *(_OWORD *)a3 = *(_OWORD *)v10;
    *(_OWORD *)(a3 + 12) = *(_OWORD *)&v10[12];
    v19 = a3 + 32;
    ((void (*)(uint64_t *))off_24EC60018[v8])(&v19);
  }
  if (v12 != -1)
    ((void (*)(uint64_t *, _BYTE *))off_24EC5FFD0[v12])(&v19, v11);
  if (v17 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_24EC5FFD0[v17])(v10, v16);
}

void sub_223BC9024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  sub_22319A588((uint64_t)&a9);
  sub_2231B55F0((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_223BC9040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, ...)
{
  uint64_t v14;
  uint64_t v15;
  va_list va;

  va_start(va, a14);
  if (a14 != -1)
    ((void (*)(uint64_t, uint64_t))off_24EC5FFD0[a14])(v15 - 56, v14);
  sub_2231B55F0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BC9084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_223BC90C8(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  char v7;
  char v8;
  void *__p;
  __int128 v10;
  __int128 v11;
  _BYTE v12[22];
  char v13;

  LOWORD(__p) = 0;
  sub_224550448(a1, &__p);
  *(_WORD *)a2 = (_WORD)__p;
  LODWORD(__p) = 2;
  sub_2245508F0(a1, &__p);
  v4 = __p;
  if (__p >= 2)
    v5 = 2;
  else
    v5 = __p;
  sub_223BC9454(a1, a2 + 8, v5);
  if (v4 >= 2 && !*(_BYTE *)(a1 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
        break;
      sub_2245523C0(a1, (uint64_t)&__p);
      if (SHIBYTE(v10) < 0)
      {
        if ((_QWORD)v10 == 1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_21:
          v8 = 0;
          if (SHIBYTE(v10) < 0)
            goto LABEL_24;
          goto LABEL_10;
        }
      }
      else if (SHIBYTE(v10) == 1 && *(unsigned __int8 *)(a1 + 72) == __p)
      {
        goto LABEL_21;
      }
      v8 = 1;
      if (SHIBYTE(v10) < 0)
LABEL_24:
        operator delete(__p);
LABEL_10:
      if (*(_BYTE *)(a1 + 131))
        v7 = 0;
      else
        v7 = v8;
    }
    while ((v7 & 1) != 0);
  }
  if (*(_WORD *)a2 == 1)
  {
    sub_22416B404((uint64_t *)(a2 + 8), *(_DWORD *)(a2 + 24));
    v6 = *(unsigned int *)(a2 + 96);
    if ((_DWORD)v6 != -1)
      ((void (*)(char *, uint64_t))off_24EC6D660[v6])(&v13, a2 + 32);
    *(_QWORD *)(a2 + 32) = &off_24EC1F958;
    *(_OWORD *)(a2 + 40) = v10;
    *(_OWORD *)(a2 + 56) = v11;
    *(_OWORD *)(a2 + 72) = *(_OWORD *)v12;
    *(_QWORD *)(a2 + 86) = *(_QWORD *)&v12[14];
    *(_DWORD *)(a2 + 96) = 1;
    sub_22416E278((const void *)a1, a2 + 32);
  }
  else
  {
    sub_223BC92A4(a1, (unsigned __int16 *)a2);
  }
}

uint64_t sub_223BC92A4(uint64_t a1, unsigned __int16 *a2)
{
  int v4;
  uint64_t v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD v14[10];
  char v15;
  _QWORD v16[21];
  _BYTE v17[8];
  __int128 v18;
  __int128 v19;
  _BYTE v20[22];
  char v21;

  v4 = sub_22416E0BC(*a2);
  sub_223BC9518((uint64_t)v14, a1);
  sub_2231B3838(v16, v4, (uint64_t)v17);
  v5 = *((unsigned int *)a2 + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_14;
  if ((_DWORD)v5 != 1)
  {
    ((void (*)(char *, unsigned __int16 *))off_24EC5FFD0[v5])(&v21, a2 + 16);
LABEL_14:
    *((_QWORD *)a2 + 4) = &off_24EC1F958;
    *(_OWORD *)(a2 + 20) = v18;
    v18 = 0uLL;
    *(_OWORD *)(a2 + 28) = v19;
    *(_OWORD *)(a2 + 36) = *(_OWORD *)v20;
    *(_QWORD *)(a2 + 43) = *(_QWORD *)&v20[14];
    *((_DWORD *)a2 + 24) = 1;
    goto LABEL_15;
  }
  v6 = v18;
  v18 = 0uLL;
  v7 = (std::__shared_weak_count *)*((_QWORD *)a2 + 6);
  *(_OWORD *)(a2 + 20) = v6;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_OWORD *)(a2 + 28) = v19;
  *(_OWORD *)(a2 + 36) = *(_OWORD *)v20;
  *(_QWORD *)(a2 + 43) = *(_QWORD *)&v20[14];
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
LABEL_15:
  std::istream::~istream();
  v14[0] = MEMORY[0x24BEDB848] + 16;
  if (v15 < 0)
    operator delete((void *)v14[8]);
  return std::streambuf::~streambuf();
}

void sub_223BC9440(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2231B394C((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_223BC9454(uint64_t a1, uint64_t a2, unsigned int a3)
{
  double result;
  __int128 v6;
  unint64_t v7;

  if (a3 < 2)
  {
    v7 = 0;
    sub_224550D98(a1, &v7);
    v6 = v7;
    sub_2245508F0(a1, (_DWORD *)&v6 + 2);
    sub_2245508F0(a1, (_DWORD *)((unint64_t)&v6 | 0xC));
    result = *(double *)&v6;
    *(_OWORD *)a2 = v6;
  }
  else
  {
    *(_QWORD *)&v6 = 0;
    sub_224550D98(a1, &v6);
    *(_QWORD *)a2 = v6;
    sub_2245508F0(a1, (_DWORD *)(a2 + 8));
    sub_2245508F0(a1, (_DWORD *)(a2 + 12));
  }
  return result;
}

uint64_t sub_223BC9518(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void **v5;
  uint64_t v6;
  std::string::size_type v7;
  std::string *v8;
  _QWORD v10[2];
  std::string v11;
  std::string::size_type __n;

  v4 = std::streambuf::basic_streambuf();
  *(_QWORD *)v4 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(v4 + 64) = 0u;
  v5 = (void **)(v4 + 64);
  v6 = MEMORY[0x24BEDB820];
  *(_OWORD *)(v4 + 80) = 0u;
  *(_QWORD *)(v4 + 104) = v6 + 24;
  *(_DWORD *)(v4 + 96) = 24;
  *(_QWORD *)(v4 + 120) = v6 + 64;
  *(_QWORD *)(v4 + 112) = 0;
  std::ios_base::init((std::ios_base *)(v4 + 120), (void *)a1);
  *(_QWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = -1;
  __n = 0;
  sub_224550D98(a2, &__n);
  memset(&v11, 0, sizeof(v11));
  if (!__n)
  {
    v7 = 0;
    goto LABEL_8;
  }
  std::string::append(&v11, __n, 0);
  v7 = __n;
  if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_8:
    v8 = &v11;
    goto LABEL_9;
  }
  v8 = (std::string *)v11.__r_.__value_.__r.__words[0];
  if (!v11.__r_.__value_.__r.__words[0] && __n)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v8 = 0;
  }
LABEL_9:
  v10[0] = v7;
  v10[1] = v8;
  sub_2245525C0(a2, (uint64_t)v10);
  if (*(char *)(a1 + 87) < 0)
    operator delete(*v5);
  *(std::string *)v5 = v11;
  *((_BYTE *)&v11.__r_.__value_.__s + 23) = 0;
  v11.__r_.__value_.__s.__data_[0] = 0;
  sub_2231B5488(a1);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_223BC969C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  if (a16 < 0)
    operator delete(__p);
  std::istream::~istream();
  sub_2231A01E4(v16);
  _Unwind_Resume(a1);
}

void sub_223BC9708(const void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  _BYTE v8[22];
  char v9;

  LOWORD(v5) = 0;
  sub_224550448((uint64_t)a1, &v5);
  *(_WORD *)a2 = v5;
  LODWORD(v5) = 1;
  sub_2245508F0((uint64_t)a1, &v5);
  v5 = 0;
  sub_224550D98((uint64_t)a1, &v5);
  *(_QWORD *)(a2 + 8) = v5;
  sub_2245508F0((uint64_t)a1, (_DWORD *)(a2 + 16));
  sub_2245508F0((uint64_t)a1, (_DWORD *)(a2 + 20));
  if (*(_WORD *)a2 == 1)
  {
    sub_22416B268((uint64_t *)(a2 + 8), *(_DWORD *)(a2 + 24));
    v4 = *(unsigned int *)(a2 + 96);
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, uint64_t))off_24EC6D660[v4])(&v9, a2 + 32);
    *(_QWORD *)(a2 + 32) = &off_24EC1F958;
    *(_OWORD *)(a2 + 40) = v6;
    *(_OWORD *)(a2 + 56) = v7;
    *(_OWORD *)(a2 + 72) = *(_OWORD *)v8;
    *(_QWORD *)(a2 + 86) = *(_QWORD *)&v8[14];
    *(_DWORD *)(a2 + 96) = 1;
    sub_22416E278(a1, a2 + 32);
  }
  else
  {
    sub_223BC9844((uint64_t)a1, (unsigned __int16 *)a2);
  }
}

uint64_t sub_223BC9844(uint64_t a1, unsigned __int16 *a2)
{
  int v4;
  uint64_t v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD v14[10];
  char v15;
  _QWORD v16[21];
  _BYTE v17[8];
  __int128 v18;
  __int128 v19;
  _BYTE v20[22];
  char v21;

  v4 = sub_22416E0BC(*a2);
  sub_223BC9518((uint64_t)v14, a1);
  sub_2231B3838(v16, v4, (uint64_t)v17);
  v5 = *((unsigned int *)a2 + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_14;
  if ((_DWORD)v5 != 1)
  {
    ((void (*)(char *, unsigned __int16 *))off_24EC5FFD0[v5])(&v21, a2 + 16);
LABEL_14:
    *((_QWORD *)a2 + 4) = &off_24EC1F958;
    *(_OWORD *)(a2 + 20) = v18;
    v18 = 0uLL;
    *(_OWORD *)(a2 + 28) = v19;
    *(_OWORD *)(a2 + 36) = *(_OWORD *)v20;
    *(_QWORD *)(a2 + 43) = *(_QWORD *)&v20[14];
    *((_DWORD *)a2 + 24) = 1;
    goto LABEL_15;
  }
  v6 = v18;
  v18 = 0uLL;
  v7 = (std::__shared_weak_count *)*((_QWORD *)a2 + 6);
  *(_OWORD *)(a2 + 20) = v6;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_OWORD *)(a2 + 28) = v19;
  *(_OWORD *)(a2 + 36) = *(_OWORD *)v20;
  *(_QWORD *)(a2 + 43) = *(_QWORD *)&v20[14];
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
LABEL_15:
  std::istream::~istream();
  v14[0] = MEMORY[0x24BEDB848] + 16;
  if (v15 < 0)
    operator delete((void *)v14[8]);
  return std::streambuf::~streambuf();
}

void sub_223BC99E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2231B394C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BC99F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;

  *((_QWORD *)&v16 + 1) = 0;
  v17 = 0;
  *(_QWORD *)&v16 = (char *)&v16 + 8;
  sub_224530B6C(&v16, &v18);
  v15 = v18;
  sub_22323DF84((uint64_t)&v16, *((char **)&v16 + 1));
  sub_223BCC25C(a2, (uint64_t)&v15);
  sub_224518820(&v16, (uint64_t)&v15);
  v5 = v16;
  v16 = 0uLL;
  v6 = *(std::__shared_weak_count **)(a3 + 8);
  *(_OWORD *)a3 = v5;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_223BC9B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223BC9B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223BC9B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, char *a12)
{
  sub_22323DF84((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

void sub_223BC9B7C(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  char v15;
  char v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  char *v25;
  void *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  void **v30;
  void **v31;
  void *v32;
  void *v33[2];
  void *v34[2];
  __int128 v35;
  unint64_t v36;
  void *__p[2];
  char v38;

  *(_OWORD *)v34 = 0u;
  v35 = 0u;
  *(_OWORD *)v33 = 0u;
  sub_223BC5A8C(a1, (char **)v33);
  v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (unint64_t)v34[1]) >> 3);
  sub_224550D98(a1, &v36);
  v4 = (char *)v35;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (unint64_t)v34[1]) >> 3);
  v6 = v36 - v5;
  if (v36 > v5)
  {
    sub_2231B7814((uint64_t *)&v34[1], v6);
    v7 = (char *)v34[1];
    v8 = (char *)v35;
    if ((void *)v35 != v34[1])
      goto LABEL_18;
    goto LABEL_44;
  }
  if (v36 < v5)
  {
    v8 = (char *)v34[1] + 24 * v36;
    while (v4 != v8)
    {
      v9 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *, unint64_t))v9->__on_zero_shared)(v9, v6);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v4 -= 24;
    }
    *(_QWORD *)&v35 = v8;
    v7 = (char *)v34[1];
    if (v8 == v34[1])
      goto LABEL_44;
LABEL_18:
    while (1)
    {
      LODWORD(__p[0]) = 2;
      sub_2245508F0(a1, __p);
      v12 = __p[0];
      v13 = LODWORD(__p[0]) >= 2 ? 2 : LODWORD(__p[0]);
      if (v13 < 2)
        sub_223BCA17C((uint64_t)__p, a1, (uint64_t)v7);
      else
        sub_223BCA334(a1, (uint64_t)v7);
      if (v12 >= 2 && *(_BYTE *)(a1 + 131) == 0)
        break;
LABEL_17:
      v7 += 24;
      if (v7 == v8)
        goto LABEL_44;
    }
    while (1)
    {
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
        goto LABEL_17;
      sub_2245523C0(a1, (uint64_t)__p);
      if (v38 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_40:
          v16 = 0;
          if (v38 < 0)
            goto LABEL_43;
          goto LABEL_29;
        }
      }
      else if (v38 == 1 && *(unsigned __int8 *)(a1 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_40;
      }
      v16 = 1;
      if (v38 < 0)
LABEL_43:
        operator delete(__p[0]);
LABEL_29:
      if (*(_BYTE *)(a1 + 131))
        v15 = 0;
      else
        v15 = v16;
      if ((v15 & 1) == 0)
        goto LABEL_17;
    }
  }
  v8 = (char *)v35;
  v7 = (char *)v34[1];
  if ((void *)v35 != v34[1])
    goto LABEL_18;
LABEL_44:
  sub_22451907C((uint64_t *)v33, (void ***)__p);
  v17 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  v18 = *(std::__shared_weak_count **)(a2 + 8);
  *(_OWORD *)a2 = v17;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v22 = (unint64_t *)((char *)__p[1] + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = (char *)v34[1];
  if (v34[1])
  {
    v25 = (char *)v35;
    v26 = v34[1];
    if ((void *)v35 != v34[1])
    {
      do
      {
        v27 = (std::__shared_weak_count *)*((_QWORD *)v25 - 1);
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v25 -= 24;
      }
      while (v25 != v24);
      v26 = v34[1];
    }
    *(_QWORD *)&v35 = v24;
    operator delete(v26);
  }
  v30 = (void **)v33[0];
  if (v33[0])
  {
    v31 = (void **)v33[1];
    v32 = v33[0];
    if (v33[1] != v33[0])
    {
      do
      {
        if (*((char *)v31 - 1) < 0)
          operator delete(*(v31 - 3));
        v31 -= 3;
      }
      while (v31 != v30);
      v32 = v33[0];
    }
    v33[1] = v30;
    operator delete(v32);
  }
}

void sub_223BC9EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_2231A6210(&a9);
  _Unwind_Resume(a1);
}

void sub_223BC9F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_2231A6210(&a9);
  _Unwind_Resume(a1);
}

void sub_223BC9F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_2231A6210(&a9);
  _Unwind_Resume(a1);
}

void sub_223BC9F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_2231A6210(&a9);
  _Unwind_Resume(a1);
}

void sub_223BC9F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_2231A6210(&a9);
  _Unwind_Resume(a1);
}

void sub_223BC9F54(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  char v17;
  char v18;
  unint64_t v19;
  void *__p[2];
  char v21;

  v19 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  sub_224550D98(a1, &v19);
  v4 = a2[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3);
  v6 = v19 - v5;
  if (v19 > v5)
  {
    sub_2231B7814(a2, v6);
    v9 = a2;
    v7 = *a2;
    v8 = v9[1];
    if (v8 != v7)
      goto LABEL_18;
    return;
  }
  if (v19 < v5)
  {
    v8 = *a2 + 24 * v19;
    while (v4 != v8)
    {
      v10 = *(std::__shared_weak_count **)(v4 - 8);
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *, unint64_t))v10->__on_zero_shared)(v10, v6);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v4 -= 24;
    }
    a2[1] = v8;
    v7 = *a2;
    if (v8 == v7)
      return;
    while (1)
    {
LABEL_18:
      LODWORD(__p[0]) = 2;
      sub_2245508F0(a1, __p);
      v13 = __p[0];
      if (LODWORD(__p[0]) >= 2)
        v14 = 2;
      else
        v14 = __p[0];
      if (v14 >= 2)
      {
        sub_223BCA334(a1, v7, 2);
        if (v13 >= 2 && *(_BYTE *)(a1 + 131) == 0)
          goto LABEL_36;
        goto LABEL_17;
      }
      sub_223BCA17C((uint64_t)__p, a1, v7);
      if (v13 >= 2 && *(_BYTE *)(a1 + 131) == 0)
        break;
LABEL_17:
      v7 += 24;
      if (v7 == v8)
        return;
    }
    while (1)
    {
LABEL_36:
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
        goto LABEL_17;
      sub_2245523C0(a1, (uint64_t)__p);
      if (v21 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_43:
          v18 = 0;
          if (v21 < 0)
            goto LABEL_46;
          goto LABEL_32;
        }
      }
      else if (v21 == 1 && *(unsigned __int8 *)(a1 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_43;
      }
      v18 = 1;
      if (v21 < 0)
LABEL_46:
        operator delete(__p[0]);
LABEL_32:
      if (*(_BYTE *)(a1 + 131))
        v17 = 0;
      else
        v17 = v18;
      if ((v17 & 1) == 0)
        goto LABEL_17;
    }
  }
  v8 = a2[1];
  v7 = *a2;
  if (v4 != v7)
    goto LABEL_18;
}

void sub_223BCA17C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  __int16 v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  v20 = 0;
  v21 = 0;
  sub_223BCB654(a2, (uint64_t)&v19);
  v4 = v19;
  sub_2231B9338(&v22, (uint64_t)&v20);
  sub_2231B9338(&v18, (uint64_t)&v22);
  v5 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  *(_WORD *)a3 = v4;
  v8 = v18;
  v18 = 0uLL;
  v9 = *(std::__shared_weak_count **)(a3 + 16);
  *(_OWORD *)(a3 + 8) = v8;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v21;
  if (v21)
  {
    v16 = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_223BCA2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va1);
  sub_223197300((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BCA30C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_223197300((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BCA320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_223197300((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BCA334(uint64_t a1, uint64_t a2)
{
  int v4;
  _DWORD *v5;
  unsigned int v6;
  unsigned int v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  char *v30;
  char *v31;
  void *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  __int128 v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  __int128 v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  char v57;
  char v58;
  char v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  char v72;
  char v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  void *v81[2];
  void *v82;
  __int128 v83;
  void *v84[2];
  void *__p;
  void *v86;
  _DWORD *v87;
  __int128 v88;
  void *v89;

  LOWORD(v84[0]) = 0;
  sub_224550448(a1, v84);
  v4 = LOWORD(v84[0]);
  *(_WORD *)a2 = v84[0];
  switch(v4)
  {
    case 0:
      LOBYTE(v84[0]) = 7;
      LOBYTE(v84[1]) = 7;
      v5 = operator new(4uLL);
      __p = v5;
      *v5 = 0;
      v86 = v5 + 1;
      v87 = v5 + 1;
      LODWORD(v88) = 2;
      sub_2245508F0(a1, &v88);
      v6 = v88;
      if (v88 >= 2)
        v7 = 2;
      else
        v7 = v88;
      if (v7 < 2)
      {
        sub_223BCADD8((uint64_t)&v88, a1, (uint64_t)v84);
      }
      else
      {
        LOBYTE(v88) = 0;
        sub_22454FFAC(a1, &v88);
        LOBYTE(v84[0]) = v88;
        sub_223BCAF5C(v88, a1, (uint64_t)v84);
      }
      if (v6 < 2 || *(_BYTE *)(a1 + 131))
        goto LABEL_75;
      while (2)
      {
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) == 0)
        {
          sub_2245523C0(a1, (uint64_t)&v88);
          if (SHIBYTE(v89) < 0)
          {
            if (*((_QWORD *)&v88 + 1) != 1 || *(unsigned __int8 *)(a1 + 72) != *(unsigned __int8 *)v88)
            {
LABEL_92:
              v57 = 1;
              if ((SHIBYTE(v89) & 0x80000000) == 0)
                goto LABEL_93;
              goto LABEL_105;
            }
          }
          else if (SHIBYTE(v89) != 1 || *(unsigned __int8 *)(a1 + 72) != v88)
          {
            goto LABEL_92;
          }
          v57 = 0;
          if ((SHIBYTE(v89) & 0x80000000) == 0)
          {
LABEL_93:
            if (*(_BYTE *)(a1 + 131))
              v58 = 0;
            else
              v58 = v57;
            if ((v58 & 1) == 0)
              break;
            continue;
          }
LABEL_105:
          operator delete((void *)v88);
          if (*(_BYTE *)(a1 + 131))
            v59 = 0;
          else
            v59 = v57;
          if ((v59 & 1) == 0)
            break;
          continue;
        }
        break;
      }
LABEL_75:
      sub_224532630((uint64_t)&v88, (uint64_t)&v84[1]);
      v83 = v88;
      sub_2231B844C(v81, (uint64_t)&v83);
      v47 = *(_OWORD *)v81;
      v81[0] = 0;
      v81[1] = 0;
      v48 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v47;
      if (v48)
      {
        p_shared_owners = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldaxr(p_shared_owners);
        while (__stlxr(v50 - 1, p_shared_owners));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = (std::__shared_weak_count *)v81[1];
      if (v81[1])
      {
        v52 = (unint64_t *)((char *)v81[1] + 8);
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v54 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
      if (*((_QWORD *)&v83 + 1))
      {
        v55 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      if (__p)
      {
        v86 = __p;
        operator delete(__p);
      }
      return;
    case 1:
      v88 = 0uLL;
      v89 = 0;
      ++*(_QWORD *)(a1 + 80);
      if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
      {
        *(_BYTE *)(a1 + 132) = 1;
      }
      else
      {
        sub_2245523C0(a1, (uint64_t)v84);
        v36 = *(_QWORD *)(a1 + 104);
        v88 = *(_OWORD *)v84;
        v89 = __p;
        *(_QWORD *)(a1 + 104) = v36 + 1;
      }
      sub_224527BAC((uint64_t)&v88, (CFStringRef *)v81);
      sub_2231B855C(v84, (uint64_t)v81);
      v37 = *(_OWORD *)v84;
      v84[0] = 0;
      v84[1] = 0;
      v38 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v37;
      if (v38)
      {
        v39 = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      v41 = (std::__shared_weak_count *)v84[1];
      if (v84[1])
      {
        v42 = (unint64_t *)((char *)v84[1] + 8);
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      v44 = (std::__shared_weak_count *)v81[1];
      if (v81[1])
      {
        v45 = (unint64_t *)((char *)v81[1] + 8);
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
      if (SHIBYTE(v89) < 0)
        operator delete((void *)v88);
      return;
    case 2:
      LOBYTE(v81[0]) = 0;
      sub_224551710(a1, v81);
      sub_22452795C(v81, (std::__shared_weak_count_vtbl **)&v88);
      sub_2231B866C(v84, (uint64_t)&v88);
      v8 = *(_OWORD *)v84;
      v84[0] = 0;
      v84[1] = 0;
      v9 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v8;
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v12 = (std::__shared_weak_count *)v84[1];
      if (v84[1])
      {
        v13 = (unint64_t *)((char *)v84[1] + 8);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v15 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
      if (*((_QWORD *)&v88 + 1))
      {
        v16 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
          goto LABEL_132;
      }
      return;
    case 3:
      v88 = 0uLL;
      v89 = 0;
      sub_223BC9F54(a1, (uint64_t *)&v88);
      v84[1] = 0;
      __p = 0;
      v84[0] = 0;
      sub_2231B90C8((uint64_t)v84, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v88 + 1) - v88) >> 3));
      sub_223BCB4EC(v88, *((uint64_t *)&v88 + 1), (uint64_t)v84);
      *(_OWORD *)v81 = *(_OWORD *)v84;
      v82 = __p;
      sub_2231B9590((uint64_t *)v81, (CFMutableArrayRef *)&v83);
      sub_2231B877C(v84, (uint64_t)&v83);
      v20 = *(_OWORD *)v84;
      v84[0] = 0;
      v84[1] = 0;
      v21 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v20;
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      v24 = (std::__shared_weak_count *)v84[1];
      if (v84[1])
      {
        v25 = (unint64_t *)((char *)v84[1] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      v27 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
      if (*((_QWORD *)&v83 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v30 = (char *)v81[0];
      if (v81[0])
      {
        v31 = (char *)v81[1];
        v32 = v81[0];
        if (v81[1] != v81[0])
        {
          do
          {
            v33 = (std::__shared_weak_count *)*((_QWORD *)v31 - 1);
            if (v33)
            {
              v34 = (unint64_t *)&v33->__shared_owners_;
              do
                v35 = __ldaxr(v34);
              while (__stlxr(v35 - 1, v34));
              if (!v35)
              {
                ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
                std::__shared_weak_count::__release_weak(v33);
              }
            }
            v31 -= 16;
          }
          while (v31 != v30);
          v32 = v81[0];
        }
        v81[1] = v30;
        operator delete(v32);
      }
      v75 = v88;
      if ((_QWORD)v88)
      {
        v76 = *((_QWORD *)&v88 + 1);
        v77 = (void *)v88;
        if (*((_QWORD *)&v88 + 1) != (_QWORD)v88)
        {
          do
          {
            v78 = *(std::__shared_weak_count **)(v76 - 8);
            if (v78)
            {
              v79 = (unint64_t *)&v78->__shared_owners_;
              do
                v80 = __ldaxr(v79);
              while (__stlxr(v80 - 1, v79));
              if (!v80)
              {
                ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                std::__shared_weak_count::__release_weak(v78);
              }
            }
            v76 -= 24;
          }
          while (v76 != v75);
          v77 = (void *)v88;
        }
        *((_QWORD *)&v88 + 1) = v75;
        operator delete(v77);
      }
      return;
    case 4:
      v84[1] = 0;
      __p = 0;
      v84[0] = &v84[1];
      sub_224530B6C(v84, &v88);
      *(_OWORD *)v81 = v88;
      sub_22323DF84((uint64_t)v84, (char *)v84[1]);
      LODWORD(v84[0]) = 2;
      sub_2245508F0(a1, v84);
      v18 = v84[0];
      if (LODWORD(v84[0]) >= 2)
        v19 = 2;
      else
        v19 = v84[0];
      if (v19 < 2)
        sub_223BC99F4((uint64_t)v84, a1, (uint64_t)v81);
      else
        sub_223BC9B7C(a1, v81, 2);
      if (v18 < 2 || *(_BYTE *)(a1 + 131))
        goto LABEL_113;
      while (2)
      {
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) == 0)
        {
          sub_2245523C0(a1, (uint64_t)v84);
          if (SHIBYTE(__p) < 0)
          {
            if (v84[1] != (void *)1 || *(unsigned __int8 *)(a1 + 72) != *(unsigned __int8 *)v84[0])
            {
LABEL_133:
              v72 = 1;
              if ((SHIBYTE(__p) & 0x80000000) == 0)
                goto LABEL_134;
              goto LABEL_146;
            }
          }
          else if (SHIBYTE(__p) != 1 || *(unsigned __int8 *)(a1 + 72) != LOBYTE(v84[0]))
          {
            goto LABEL_133;
          }
          v72 = 0;
          if ((SHIBYTE(__p) & 0x80000000) == 0)
          {
LABEL_134:
            if (*(_BYTE *)(a1 + 131))
              v73 = 0;
            else
              v73 = v72;
            if ((v73 & 1) == 0)
              break;
            continue;
          }
LABEL_146:
          operator delete(v84[0]);
          if (*(_BYTE *)(a1 + 131))
            v74 = 0;
          else
            v74 = v72;
          if ((v74 & 1) == 0)
            break;
          continue;
        }
        break;
      }
LABEL_113:
      sub_22319ED0C(&v88, (uint64_t)v81);
      sub_2231B8924(v84, (uint64_t)&v88);
      v60 = *(_OWORD *)v84;
      v84[0] = 0;
      v84[1] = 0;
      v61 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v60;
      if (v61)
      {
        v62 = (unint64_t *)&v61->__shared_owners_;
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      v64 = (std::__shared_weak_count *)v84[1];
      if (v84[1])
      {
        v65 = (unint64_t *)((char *)v84[1] + 8);
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      v67 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
      if (*((_QWORD *)&v88 + 1))
      {
        v68 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      v15 = (std::__shared_weak_count *)v81[1];
      if (v81[1])
      {
        v70 = (unint64_t *)((char *)v81[1] + 8);
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
LABEL_132:
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      return;
    default:
      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Foundation/FoundationIO/include/Kit/FoundationIO/DictionaryRefIO.h", 250, (uint64_t)"", 0, (uint64_t)"invalid value type identifier", 29, (void (*)(void **))sub_22457406C);
      abort();
  }
}

void sub_223BCAC78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_223167354(v9 - 64);
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223BCAC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223BCACA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18)
{
  sub_223167354((uint64_t)&a13);
  if (!__p)
    _Unwind_Resume(a1);
  a18 = (uint64_t)__p;
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223BCADD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  char v6;
  char v7;
  char *v8;
  size_t v9;
  char *v10;
  char *v11;
  void *v12;
  _QWORD *v13;
  _BYTE v14[16];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18[8];
  char v19;
  char *v20;
  char *v21;
  _DWORD *v22;

  v18[0] = 7;
  v19 = 7;
  v5 = (char *)operator new(4uLL);
  v20 = v5;
  *(_DWORD *)v5 = 0;
  v21 = v5 + 4;
  v22 = v5 + 4;
  v14[0] = 0;
  sub_22454FFAC(a2, v14);
  v18[0] = v14[0];
  sub_223BCB224(v14[0], a2, (uint64_t)v18);
  v6 = v18[0];
  v14[0] = v18[0];
  v7 = v19;
  v14[8] = v19;
  v16 = 0;
  v17 = 0;
  v15 = 0;
  v8 = v20;
  v9 = v21 - v20;
  if (v21 == v20)
  {
    v11 = 0;
    v10 = 0;
    *(_BYTE *)a3 = v18[0];
    *(_BYTE *)(a3 + 8) = v7;
    v13 = (_QWORD *)(a3 + 16);
    v12 = *(void **)(a3 + 16);
    if (v12)
    {
LABEL_4:
      *(_QWORD *)(a3 + 24) = v12;
      operator delete(v12);
      *v13 = 0;
      v13[1] = 0;
      v13[2] = 0;
      v8 = v20;
    }
  }
  else
  {
    if ((v9 & 0x8000000000000000) != 0)
      sub_2240336DC();
    v10 = (char *)operator new(v21 - v20);
    v11 = &v10[v9];
    memcpy(v10, v8, v9);
    *(_BYTE *)a3 = v6;
    *(_BYTE *)(a3 + 8) = v7;
    v13 = (_QWORD *)(a3 + 16);
    v12 = *(void **)(a3 + 16);
    if (v12)
      goto LABEL_4;
  }
  *(_QWORD *)(a3 + 16) = v10;
  *(_QWORD *)(a3 + 24) = v11;
  *(_QWORD *)(a3 + 32) = v11;
  if (v8)
  {
    v21 = v8;
    operator delete(v8);
  }
}

void sub_223BCAF10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  void *v18;

  if (__p)
  {
    operator delete(__p);
    v18 = a16;
    if (!a16)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v18 = a16;
    if (!a16)
      goto LABEL_3;
  }
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

void sub_223BCAF5C(int a1, uint64_t a2, uint64_t a3)
{
  char v4;
  _BYTE *v5;
  _BYTE *v6;
  void *v7;
  __int16 v8;
  int v9;
  uint64_t v10;
  char v11;
  __int16 v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  switch(a1)
  {
    case 0:
      LOBYTE(v17) = 0;
      sub_22454FFAC(a2, &v17);
      v4 = v17;
      v5 = operator new(1uLL);
      *v5 = v4;
      v6 = v5 + 1;
      *(_BYTE *)(a3 + 8) = 0;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 1:
      LOWORD(v17) = 0;
      sub_224550448(a2, &v17);
      v8 = v17;
      v5 = operator new(2uLL);
      *(_WORD *)v5 = v8;
      v6 = v5 + 2;
      *(_BYTE *)(a3 + 8) = 1;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 2:
      LODWORD(v17) = 0;
      sub_2245508F0(a2, &v17);
      v9 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v9;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 2;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 3:
      v17 = 0;
      sub_224550D98(a2, &v17);
      v10 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v10;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 3;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 5:
      LOBYTE(v17) = 0;
      sub_22454FD64(a2, &v17);
      v11 = v17;
      v5 = operator new(1uLL);
      *v5 = v11;
      v6 = v5 + 1;
      *(_BYTE *)(a3 + 8) = 5;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 6:
      LOWORD(v17) = 0;
      sub_2245501F4(a2, &v17);
      v12 = v17;
      v5 = operator new(2uLL);
      *(_WORD *)v5 = v12;
      v6 = v5 + 2;
      *(_BYTE *)(a3 + 8) = 6;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 7:
      LODWORD(v17) = 0;
      sub_22455069C(a2, &v17);
      v13 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v13;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 7;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 8:
      v17 = 0;
      sub_224550B44(a2, &v17);
      v14 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v14;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 8;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 11:
      LODWORD(v17) = 0;
      sub_224551268(a2, &v17);
      v15 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v15;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 11;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 12:
      v17 = 0;
      sub_2245514BC(a2, &v17);
      v16 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v16;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 12;
      v7 = *(void **)(a3 + 16);
      if (v7)
      {
LABEL_21:
        *(_QWORD *)(a3 + 24) = v7;
        operator delete(v7);
      }
LABEL_22:
      *(_QWORD *)(a3 + 16) = v5;
      *(_QWORD *)(a3 + 24) = v6;
      *(_QWORD *)(a3 + 32) = v6;
      return;
    default:
      sub_22454B274(a1);
  }
}

void sub_223BCB224(int a1, uint64_t a2, uint64_t a3)
{
  char v4;
  _BYTE *v5;
  _BYTE *v6;
  void *v7;
  __int16 v8;
  int v9;
  uint64_t v10;
  char v11;
  __int16 v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  switch(a1)
  {
    case 0:
      LOBYTE(v17) = 0;
      sub_22454FFAC(a2, &v17);
      v4 = v17;
      v5 = operator new(1uLL);
      *v5 = v4;
      v6 = v5 + 1;
      *(_BYTE *)(a3 + 8) = 0;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 1:
      LOWORD(v17) = 0;
      sub_224550448(a2, &v17);
      v8 = v17;
      v5 = operator new(2uLL);
      *(_WORD *)v5 = v8;
      v6 = v5 + 2;
      *(_BYTE *)(a3 + 8) = 1;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 2:
      LODWORD(v17) = 0;
      sub_2245508F0(a2, &v17);
      v9 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v9;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 2;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 3:
      v17 = 0;
      sub_224550D98(a2, &v17);
      v10 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v10;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 3;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 5:
      LOBYTE(v17) = 0;
      sub_22454FD64(a2, &v17);
      v11 = v17;
      v5 = operator new(1uLL);
      *v5 = v11;
      v6 = v5 + 1;
      *(_BYTE *)(a3 + 8) = 5;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 6:
      LOWORD(v17) = 0;
      sub_2245501F4(a2, &v17);
      v12 = v17;
      v5 = operator new(2uLL);
      *(_WORD *)v5 = v12;
      v6 = v5 + 2;
      *(_BYTE *)(a3 + 8) = 6;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 7:
      LODWORD(v17) = 0;
      sub_22455069C(a2, &v17);
      v13 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v13;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 7;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 8:
      v17 = 0;
      sub_224550B44(a2, &v17);
      v14 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v14;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 8;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 11:
      LODWORD(v17) = 0;
      sub_224551268(a2, &v17);
      v15 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v15;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 11;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 12:
      v17 = 0;
      sub_2245514BC(a2, &v17);
      v16 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v16;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 12;
      v7 = *(void **)(a3 + 16);
      if (v7)
      {
LABEL_21:
        *(_QWORD *)(a3 + 24) = v7;
        operator delete(v7);
      }
LABEL_22:
      *(_QWORD *)(a3 + 16) = v5;
      *(_QWORD *)(a3 + 24) = v6;
      *(_QWORD *)(a3 + 32) = v6;
      return;
    default:
      sub_22454B274(a1);
  }
}

uint64_t sub_223BCB4EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _OWORD *v6;
  std::__shared_weak_count *v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  __int128 v17;

  if (a1 != a2)
  {
    for (i = a1; i != a2; i += 24)
    {
      sub_2231B9338(&v15, i + 8);
      sub_2231B9338(&v17, (uint64_t)&v15);
      v6 = *(_OWORD **)(a3 + 8);
      if ((unint64_t)v6 >= *(_QWORD *)(a3 + 16))
      {
        v8 = sub_2231B9448((char **)a3, (uint64_t)&v17);
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
        *(_QWORD *)(a3 + 8) = v8;
        if (!v9)
          goto LABEL_11;
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
          v7 = v16;
          if (v16)
          {
LABEL_12:
            v12 = (unint64_t *)&v7->__shared_owners_;
            do
              v13 = __ldaxr(v12);
            while (__stlxr(v13 - 1, v12));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
        }
        else
        {
LABEL_11:
          v7 = v16;
          if (v16)
            goto LABEL_12;
        }
      }
      else
      {
        *v6 = v17;
        v17 = 0uLL;
        *(_QWORD *)(a3 + 8) = v6 + 1;
        v7 = v16;
        if (v16)
          goto LABEL_12;
      }
    }
  }
  return a3;
}

void sub_223BCB624(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va1);
  sub_223197300((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BCB640(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223197300((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BCB654(uint64_t a1, uint64_t a2)
{
  int v4;
  _DWORD *v5;
  unsigned int v6;
  unsigned int v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  void *v49;
  __int128 v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  char v60;
  char v61;
  char v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  __int128 v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  char *v76;
  char *v77;
  void *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  void *__p[2];
  _DWORD *v88;
  __int128 v89;
  __int128 v90;
  _DWORD *v91;
  _DWORD *v92;
  _DWORD *v93;
  __int128 v94;
  _DWORD *v95;

  LOWORD(v90) = 0;
  sub_224550448(a1, &v90);
  v4 = (unsigned __int16)v90;
  *(_WORD *)a2 = v90;
  switch(v4)
  {
    case 0:
      LOBYTE(v90) = 7;
      BYTE8(v90) = 7;
      v5 = operator new(4uLL);
      v91 = v5;
      *v5 = 0;
      v92 = v5 + 1;
      v93 = v5 + 1;
      LODWORD(v94) = 2;
      sub_2245508F0(a1, &v94);
      v6 = v94;
      if (v94 >= 2)
        v7 = 2;
      else
        v7 = v94;
      if (v7 < 2)
      {
        sub_223BCADD8((uint64_t)&v94, a1, (uint64_t)&v90);
      }
      else
      {
        LOBYTE(v94) = 0;
        sub_22454FFAC(a1, &v94);
        LOBYTE(v90) = v94;
        sub_223BCAF5C(v94, a1, (uint64_t)&v90);
      }
      if (v6 < 2 || *(_BYTE *)(a1 + 131))
        goto LABEL_71;
      while (2)
      {
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) == 0)
        {
          sub_2245523C0(a1, (uint64_t)&v94);
          if (SHIBYTE(v95) < 0)
          {
            if (*((_QWORD *)&v94 + 1) != 1 || *(unsigned __int8 *)(a1 + 72) != *(unsigned __int8 *)v94)
            {
LABEL_88:
              v60 = 1;
              if ((SHIBYTE(v95) & 0x80000000) == 0)
                goto LABEL_89;
              goto LABEL_101;
            }
          }
          else if (SHIBYTE(v95) != 1 || *(unsigned __int8 *)(a1 + 72) != v94)
          {
            goto LABEL_88;
          }
          v60 = 0;
          if ((SHIBYTE(v95) & 0x80000000) == 0)
          {
LABEL_89:
            if (*(_BYTE *)(a1 + 131))
              v61 = 0;
            else
              v61 = v60;
            if ((v61 & 1) == 0)
              break;
            continue;
          }
LABEL_101:
          operator delete((void *)v94);
          if (*(_BYTE *)(a1 + 131))
            v62 = 0;
          else
            v62 = v60;
          if ((v62 & 1) == 0)
            break;
          continue;
        }
        break;
      }
LABEL_71:
      sub_224532630((uint64_t)&v94, (uint64_t)&v90 + 8);
      v89 = v94;
      sub_2231B844C(__p, (uint64_t)&v89);
      v50 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      v51 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v50;
      if (v51)
      {
        p_shared_owners = (unint64_t *)&v51->__shared_owners_;
        do
          v53 = __ldaxr(p_shared_owners);
        while (__stlxr(v53 - 1, p_shared_owners));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v54 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v55 = (unint64_t *)((char *)__p[1] + 8);
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      v57 = (std::__shared_weak_count *)*((_QWORD *)&v89 + 1);
      if (*((_QWORD *)&v89 + 1))
      {
        v58 = (unint64_t *)(*((_QWORD *)&v89 + 1) + 8);
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
      v49 = v91;
      if (!v91)
        return;
      v92 = v91;
      goto LABEL_157;
    case 1:
      v94 = 0uLL;
      v95 = 0;
      ++*(_QWORD *)(a1 + 80);
      if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
      {
        *(_BYTE *)(a1 + 132) = 1;
      }
      else
      {
        sub_2245523C0(a1, (uint64_t)&v90);
        v38 = *(_QWORD *)(a1 + 104);
        v94 = v90;
        v95 = v91;
        *(_QWORD *)(a1 + 104) = v38 + 1;
      }
      sub_224527BAC((uint64_t)&v94, (CFStringRef *)__p);
      sub_2231B855C(&v90, (uint64_t)__p);
      v39 = v90;
      v90 = 0uLL;
      v40 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v39;
      if (v40)
      {
        v41 = (unint64_t *)&v40->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      v43 = (std::__shared_weak_count *)*((_QWORD *)&v90 + 1);
      if (*((_QWORD *)&v90 + 1))
      {
        v44 = (unint64_t *)(*((_QWORD *)&v90 + 1) + 8);
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      v46 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v47 = (unint64_t *)((char *)__p[1] + 8);
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      if ((SHIBYTE(v95) & 0x80000000) == 0)
        return;
      v49 = (void *)v94;
      goto LABEL_157;
    case 2:
      LOBYTE(__p[0]) = 0;
      sub_224551710(a1, __p);
      sub_22452795C(__p, (std::__shared_weak_count_vtbl **)&v94);
      sub_2231B866C(&v90, (uint64_t)&v94);
      v8 = v90;
      v90 = 0uLL;
      v9 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v8;
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v12 = (std::__shared_weak_count *)*((_QWORD *)&v90 + 1);
      if (*((_QWORD *)&v90 + 1))
      {
        v13 = (unint64_t *)(*((_QWORD *)&v90 + 1) + 8);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v15 = (std::__shared_weak_count *)*((_QWORD *)&v94 + 1);
      if (*((_QWORD *)&v94 + 1))
      {
        v16 = (unint64_t *)(*((_QWORD *)&v94 + 1) + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
          goto LABEL_41;
      }
      return;
    case 3:
      v94 = 0uLL;
      v95 = 0;
      *(_QWORD *)&v90 = 0;
      sub_224550D98(a1, &v90);
      v30 = *((_QWORD *)&v94 + 1);
      v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v94 + 1) - v94) >> 3);
      v32 = v90 - v31;
      if ((unint64_t)v90 > v31)
      {
        sub_2231BA090((uint64_t *)&v94, v32);
        v34 = *((_QWORD *)&v94 + 1);
        v33 = v94;
        v35 = *((_QWORD *)&v94 + 1) - v94;
        if (*((_QWORD *)&v94 + 1) != (_QWORD)v94)
          goto LABEL_47;
LABEL_118:
        v37 = v34;
        goto LABEL_119;
      }
      if ((unint64_t)v90 < v31)
      {
        v34 = v94 + 24 * v90;
        while (v30 != v34)
        {
          v63 = *(std::__shared_weak_count **)(v30 - 8);
          if (v63)
          {
            v64 = (unint64_t *)&v63->__shared_owners_;
            do
              v65 = __ldaxr(v64);
            while (__stlxr(v65 - 1, v64));
            if (!v65)
            {
              ((void (*)(std::__shared_weak_count *, unint64_t))v63->__on_zero_shared)(v63, v32);
              std::__shared_weak_count::__release_weak(v63);
            }
          }
          v30 -= 24;
        }
        *((_QWORD *)&v94 + 1) = v34;
        v33 = v94;
        v35 = v34 - v94;
        if (v34 != (_QWORD)v94)
          goto LABEL_47;
        goto LABEL_118;
      }
      v34 = *((_QWORD *)&v94 + 1);
      v33 = v94;
      v35 = *((_QWORD *)&v94 + 1) - v94;
      if (*((_QWORD *)&v94 + 1) == (_QWORD)v94)
        goto LABEL_118;
LABEL_47:
      v36 = 24 * (v35 / 24);
      do
      {
        LODWORD(__p[0]) = 1;
        sub_2245508F0(a1, __p);
        sub_223BCB654(a1, v33, LODWORD(__p[0]));
        v33 += 24;
        v36 -= 24;
      }
      while (v36);
      v37 = *((_QWORD *)&v94 + 1);
      v34 = v94;
LABEL_119:
      v90 = 0uLL;
      v91 = 0;
      sub_2231B90C8((uint64_t)&v90, 0xAAAAAAAAAAAAAAABLL * ((v37 - v34) >> 3));
      sub_223BCC0F4(v94, *((uint64_t *)&v94 + 1), (uint64_t)&v90);
      *(_OWORD *)__p = v90;
      v88 = v91;
      sub_2231B9590((uint64_t *)__p, (CFMutableArrayRef *)&v89);
      sub_2231B877C(&v90, (uint64_t)&v89);
      v66 = v90;
      v90 = 0uLL;
      v67 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v66;
      if (v67)
      {
        v68 = (unint64_t *)&v67->__shared_owners_;
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      v70 = (std::__shared_weak_count *)*((_QWORD *)&v90 + 1);
      if (*((_QWORD *)&v90 + 1))
      {
        v71 = (unint64_t *)(*((_QWORD *)&v90 + 1) + 8);
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      v73 = (std::__shared_weak_count *)*((_QWORD *)&v89 + 1);
      if (*((_QWORD *)&v89 + 1))
      {
        v74 = (unint64_t *)(*((_QWORD *)&v89 + 1) + 8);
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      v76 = (char *)__p[0];
      if (__p[0])
      {
        v77 = (char *)__p[1];
        v78 = __p[0];
        if (__p[1] != __p[0])
        {
          do
          {
            v79 = (std::__shared_weak_count *)*((_QWORD *)v77 - 1);
            if (v79)
            {
              v80 = (unint64_t *)&v79->__shared_owners_;
              do
                v81 = __ldaxr(v80);
              while (__stlxr(v81 - 1, v80));
              if (!v81)
              {
                ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                std::__shared_weak_count::__release_weak(v79);
              }
            }
            v77 -= 16;
          }
          while (v77 != v76);
          v78 = __p[0];
        }
        __p[1] = v76;
        operator delete(v78);
      }
      v82 = v94;
      if ((_QWORD)v94)
      {
        v83 = *((_QWORD *)&v94 + 1);
        v49 = (void *)v94;
        if (*((_QWORD *)&v94 + 1) != (_QWORD)v94)
        {
          do
          {
            v84 = *(std::__shared_weak_count **)(v83 - 8);
            if (v84)
            {
              v85 = (unint64_t *)&v84->__shared_owners_;
              do
                v86 = __ldaxr(v85);
              while (__stlxr(v86 - 1, v85));
              if (!v86)
              {
                ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                std::__shared_weak_count::__release_weak(v84);
              }
            }
            v83 -= 24;
          }
          while (v83 != v82);
          v49 = (void *)v94;
        }
        *((_QWORD *)&v94 + 1) = v82;
LABEL_157:
        operator delete(v49);
      }
      return;
    case 4:
      *((_QWORD *)&v90 + 1) = 0;
      v91 = 0;
      *(_QWORD *)&v90 = (char *)&v90 + 8;
      sub_224530B6C(&v90, &v94);
      *(_OWORD *)__p = v94;
      sub_22323DF84((uint64_t)&v90, *((char **)&v90 + 1));
      LODWORD(v90) = 1;
      sub_2245508F0(a1, &v90);
      sub_223BCC25C(a1, __p, v90);
      sub_22319ED0C(&v94, (uint64_t)__p);
      sub_2231B8924(&v90, (uint64_t)&v94);
      v18 = v90;
      v90 = 0uLL;
      v19 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v18;
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = (std::__shared_weak_count *)*((_QWORD *)&v90 + 1);
      if (*((_QWORD *)&v90 + 1))
      {
        v23 = (unint64_t *)(*((_QWORD *)&v90 + 1) + 8);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      v25 = (std::__shared_weak_count *)*((_QWORD *)&v94 + 1);
      if (*((_QWORD *)&v94 + 1))
      {
        v26 = (unint64_t *)(*((_QWORD *)&v94 + 1) + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      v15 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v28 = (unint64_t *)((char *)__p[1] + 8);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
LABEL_41:
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      return;
    default:
      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Foundation/FoundationIO/include/Kit/FoundationIO/DictionaryRefIO.h", 250, (uint64_t)"", 0, (uint64_t)"invalid value type identifier", 29, (void (*)(void **))sub_22457406C);
      abort();
  }
}

void sub_223BCBFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;

  sub_223167354((uint64_t)&a13);
  sub_2231B888C(&a9);
  sub_2231A62F0((void **)(v13 - 80));
  _Unwind_Resume(a1);
}

void sub_223BCBFDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  sub_2231B888C((void **)va);
  sub_2231A62F0((void **)(v7 - 80));
  _Unwind_Resume(a1);
}

void sub_223BCBFFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18)
{
  sub_223167354((uint64_t)&a13);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_223BCC0F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _OWORD *v6;
  std::__shared_weak_count *v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  __int128 v17;

  if (a1 != a2)
  {
    for (i = a1; i != a2; i += 24)
    {
      sub_2231B9338(&v15, i + 8);
      sub_2231B9338(&v17, (uint64_t)&v15);
      v6 = *(_OWORD **)(a3 + 8);
      if ((unint64_t)v6 >= *(_QWORD *)(a3 + 16))
      {
        v8 = sub_2231B9448((char **)a3, (uint64_t)&v17);
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
        *(_QWORD *)(a3 + 8) = v8;
        if (!v9)
          goto LABEL_11;
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
          v7 = v16;
          if (v16)
          {
LABEL_12:
            v12 = (unint64_t *)&v7->__shared_owners_;
            do
              v13 = __ldaxr(v12);
            while (__stlxr(v13 - 1, v12));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
        }
        else
        {
LABEL_11:
          v7 = v16;
          if (v16)
            goto LABEL_12;
        }
      }
      else
      {
        *v6 = v17;
        v17 = 0uLL;
        *(_QWORD *)(a3 + 8) = v6 + 1;
        v7 = v16;
        if (v16)
          goto LABEL_12;
      }
    }
  }
  return a3;
}

void sub_223BCC22C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va1);
  sub_223197300((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BCC248(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223197300((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BCC25C(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  int64_t v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  void **v27;
  void **v28;
  void *v29;
  __int128 v30;
  void *v31[2];
  void *__p[2];
  __int128 v33;
  int v34;

  *(_OWORD *)__p = 0u;
  v33 = 0u;
  *(_OWORD *)v31 = 0u;
  sub_223BC5A8C(a1, (char **)v31);
  *(_QWORD *)&v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - (unint64_t)__p[1]) >> 3);
  sub_224550D98(a1, &v30);
  v4 = (char *)v33;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - (unint64_t)__p[1]) >> 3);
  v6 = v30 - v5;
  if ((unint64_t)v30 > v5)
  {
    sub_2231BA090((uint64_t *)&__p[1], v6);
    v7 = (char *)__p[1];
    v8 = v33 - (unint64_t)__p[1];
    if ((void *)v33 == __p[1])
      goto LABEL_18;
    goto LABEL_16;
  }
  if ((unint64_t)v30 >= v5)
  {
    v7 = (char *)__p[1];
    v8 = v33 - (unint64_t)__p[1];
    if ((void *)v33 == __p[1])
      goto LABEL_18;
    goto LABEL_16;
  }
  v9 = (char *)__p[1] + 24 * v30;
  while (v4 != v9)
  {
    v10 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *, unint64_t))v10->__on_zero_shared)(v10, v6);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v4 -= 24;
  }
  *(_QWORD *)&v33 = v9;
  v7 = (char *)__p[1];
  v8 = v9 - (char *)__p[1];
  if (v9 != __p[1])
  {
LABEL_16:
    v13 = 24 * (v8 / 24);
    do
    {
      v34 = 1;
      sub_2245508F0(a1, &v34);
      sub_223BCB654(a1, (uint64_t)v7);
      v7 += 24;
      v13 -= 24;
    }
    while (v13);
  }
LABEL_18:
  sub_2245182E4((uint64_t *)v31, (void ***)&v30);
  v14 = v30;
  v30 = 0uLL;
  v15 = *(std::__shared_weak_count **)(a2 + 8);
  *(_OWORD *)a2 = v14;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (char *)__p[1];
  if (__p[1])
  {
    v22 = (char *)v33;
    v23 = __p[1];
    if ((void *)v33 != __p[1])
    {
      do
      {
        v24 = (std::__shared_weak_count *)*((_QWORD *)v22 - 1);
        if (v24)
        {
          v25 = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        v22 -= 24;
      }
      while (v22 != v21);
      v23 = __p[1];
    }
    *(_QWORD *)&v33 = v21;
    operator delete(v23);
  }
  v27 = (void **)v31[0];
  if (v31[0])
  {
    v28 = (void **)v31[1];
    v29 = v31[0];
    if (v31[1] != v31[0])
    {
      do
      {
        if (*((char *)v28 - 1) < 0)
          operator delete(*(v28 - 3));
        v28 -= 3;
      }
      while (v28 != v27);
      v29 = v31[0];
    }
    v31[1] = v27;
    operator delete(v29);
  }
}

void sub_223BCC514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2231A6210((void **)va);
  _Unwind_Resume(a1);
}

void sub_223BCC528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2231A6210((void **)va);
  _Unwind_Resume(a1);
}

void sub_223BCC53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2231A6210((void **)va);
  _Unwind_Resume(a1);
}

void sub_223BCC550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2231A6210((void **)va);
  _Unwind_Resume(a1);
}

void sub_223BCC564(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unsigned int v5;
  unsigned int v6;
  char v7;
  char v8;
  void *__p[2];
  char v10;

  LODWORD(__p[0]) = 2;
  sub_2245508F0(a2, __p);
  v5 = __p[0];
  if (LODWORD(__p[0]) >= 2)
    v6 = 2;
  else
    v6 = __p[0];
  if (v6 < 2)
  {
    sub_223BCC6CC((uint64_t)__p, a2, (uint64_t)a3);
    if (v5 < 2)
      return;
  }
  else
  {
    sub_224551268(a2, a3);
    sub_224551268(a2, a3 + 1);
    sub_224551268(a2, a3 + 2);
    sub_224551268(a2, a3 + 3);
    sub_2245508F0(a2, a3 + 4);
    sub_2245508F0(a2, a3 + 5);
    if (v5 < 2)
      return;
  }
  if (!*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_2245523C0(a2, (uint64_t)__p);
      if (v10 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_21:
          v8 = 0;
          if (v10 < 0)
            goto LABEL_24;
          goto LABEL_10;
        }
      }
      else if (v10 == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_21;
      }
      v8 = 1;
      if (v10 < 0)
LABEL_24:
        operator delete(__p[0]);
LABEL_10:
      if (*(_BYTE *)(a2 + 131))
        v7 = 0;
      else
        v7 = v8;
    }
    while ((v7 & 1) != 0);
  }
}

void sub_223BCC6CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  float32x2_t v7;
  float32x2_t *v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v16;
  float32x2_t v17;
  int32x2_t v18;
  int8x16_t v19;
  int8x16_t *v20;
  uint64_t v21;
  char *v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  int8x16_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  int8x16_t *v36;
  std::__shared_weak_count *v37;

  v33 = 0;
  v34 = 0;
  v35 = 0;
  v5 = (char *)operator new(0x78uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24EC6CCC0;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24EC20868;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 56) = v6;
  *(int32x4_t *)(v5 + 72) = v6;
  *(int32x4_t *)(v5 + 88) = v6;
  *((_DWORD *)v5 + 26) = 2143289344;
  *((_QWORD *)v5 + 14) = 0;
  v37 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24EC207B8;
  v36 = (int8x16_t *)(v5 + 24);
  sub_224551268(a2, &v33);
  sub_224551268(a2, (_DWORD *)&v33 + 1);
  sub_224551268(a2, &v34);
  sub_224551268(a2, (_DWORD *)&v34 + 1);
  sub_2245508F0(a2, &v35);
  sub_2245508F0(a2, (_DWORD *)&v35 + 1);
  v7 = v35;
  v8 = (float32x2_t *)v36;
  v9 = v33;
  v10 = v34;
  __asm { FMOV            V2.2S, #1.0 }
  v16 = vdiv_f32(_D2, v33);
  v17 = vmul_f32(v16, vneg_f32(v34));
  v18 = vzip1_s32((int32x2_t)v33, (int32x2_t)v34);
  v19.i64[0] = v18.u32[0];
  v19.i64[1] = v18.u32[1];
  v36[1] = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)v33, (int32x2_t)v34), 0x20uLL), v19);
  v8[4] = v16;
  v8[5] = v17;
  v8[6].i32[0] = v9.i32[0];
  v8[7] = 0;
  v8[6].i32[1] = 0;
  v8[8].i32[0] = v9.i32[1];
  v8[8].i32[1] = 0;
  v8[9] = v10;
  v8[10].i32[0] = 1065353216;
  v8[11] = v7;
  v20 = v36;
  v32 = v36[1];
  v21 = v36[5].i64[1];
  v22 = (char *)operator new(0x78uLL);
  *((_QWORD *)v22 + 1) = 0;
  *((_QWORD *)v22 + 2) = 0;
  *(_QWORD *)v22 = &off_24EC6CE00;
  v23 = v20[1];
  *((_QWORD *)v22 + 4) = &off_24EC20868;
  *(int8x16_t *)(v22 + 40) = v23;
  *(int8x16_t *)(v22 + 56) = v20[2];
  v24 = v20[3];
  v25 = v20[4];
  *((_DWORD *)v22 + 26) = v20[5].i32[0];
  *(int8x16_t *)(v22 + 88) = v25;
  *(int8x16_t *)(v22 + 72) = v24;
  *((_QWORD *)v22 + 3) = &off_24EC207B8;
  *((_QWORD *)v22 + 14) = v21;
  *(int8x16_t *)a3 = v32;
  *(_QWORD *)(a3 + 16) = v21;
  *(_QWORD *)(a3 + 24) = v22 + 24;
  v26 = *(std::__shared_weak_count **)(a3 + 32);
  *(_QWORD *)(a3 + 32) = v22;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v37;
  if (v37)
  {
    v30 = (unint64_t *)&v37->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_223BCC910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_22365B530((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BCC924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_22365B530((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BCC938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_22365B530((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BCC94C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_22365B530((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BCC960(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v6;
  _BYTE *v7;
  _BYTE *v8;
  unint64_t v9;
  _BYTE *v10;
  char *v11;
  char *v12;
  unint64_t v13;
  char *v14;
  _BYTE *v15;
  _BYTE *v16;
  unint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  _BYTE *v20;
  unint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  _BYTE *v24;
  unint64_t v25;
  _BYTE *v26;
  char *v27;
  char *v28;
  unint64_t v29;
  char *v30;
  _BYTE *v31;
  _BYTE *v32;
  unint64_t v33;
  _BYTE *v34;
  unint64_t v35;

  sub_224551710(a1, (_BYTE *)a2);
  sub_224551710(a1, (_BYTE *)(a2 + 1));
  sub_22455069C(a1, (_DWORD *)(a2 + 4));
  v35 = 0;
  sub_224550B44(a1, &v35);
  *(_QWORD *)(a2 + 8) = v35;
  sub_22455069C(a1, (_DWORD *)(a2 + 16));
  if (a3 >= 2)
  {
    LODWORD(v35) = 2;
    sub_2245508F0(a1, &v35);
    v6 = v35;
    v35 = (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 4;
    sub_224550D98(a1, &v35);
    v8 = *(_BYTE **)(a2 + 24);
    v7 = *(_BYTE **)(a2 + 32);
    v9 = (v7 - v8) >> 4;
    if (v35 <= v9)
    {
      if (v35 < v9)
      {
        v7 = &v8[16 * v35];
        *(_QWORD *)(a2 + 32) = v7;
      }
    }
    else
    {
      sub_2232C68D0((char **)(a2 + 24), v35 - v9);
      v8 = *(_BYTE **)(a2 + 24);
      v7 = *(_BYTE **)(a2 + 32);
    }
    if (v7 != v8)
    {
      v10 = v7;
      do
      {
        sub_22454FFAC(a1, v8);
        sub_22454FFAC(a1, v8 + 1);
        sub_22454FFAC(a1, v8 + 2);
        sub_22454FFAC(a1, v8 + 3);
        sub_22454FFAC(a1, v8 + 4);
        sub_22454FFAC(a1, v8 + 5);
        sub_22454FFAC(a1, v8 + 6);
        sub_22454FFAC(a1, v8 + 7);
        sub_22454FFAC(a1, v8 + 8);
        sub_22454FFAC(a1, v8 + 9);
        sub_22454FFAC(a1, v8 + 10);
        sub_22454FFAC(a1, v8 + 11);
        sub_22454FFAC(a1, v8 + 12);
        sub_22454FFAC(a1, v8 + 13);
        sub_22454FFAC(a1, v8 + 14);
        sub_22454FFAC(a1, v8 + 15);
        v8 += 16;
      }
      while (v8 != v10);
    }
    v35 = (uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 6;
    sub_224550D98(a1, &v35);
    v12 = *(char **)(a2 + 48);
    v11 = *(char **)(a2 + 56);
    v13 = (v11 - v12) >> 6;
    if (v35 <= v13)
    {
      if (v35 < v13)
      {
        v11 = &v12[64 * v35];
        *(_QWORD *)(a2 + 56) = v11;
      }
    }
    else
    {
      sub_2232C69F8((char **)(a2 + 48), v35 - v13);
      v12 = *(char **)(a2 + 48);
      v11 = *(char **)(a2 + 56);
    }
    if (v11 != v12)
    {
      v14 = v11;
      do
      {
        sub_224551268(a1, v12);
        sub_224551268(a1, (_DWORD *)v12 + 1);
        sub_224551268(a1, (_DWORD *)v12 + 2);
        sub_224551268(a1, (_DWORD *)v12 + 3);
        sub_224551268(a1, (_DWORD *)v12 + 4);
        sub_224551268(a1, (_DWORD *)v12 + 5);
        sub_224551268(a1, (_DWORD *)v12 + 6);
        sub_224551268(a1, (_DWORD *)v12 + 7);
        sub_224551268(a1, (_DWORD *)v12 + 8);
        sub_224551268(a1, (_DWORD *)v12 + 9);
        sub_224551268(a1, (_DWORD *)v12 + 10);
        sub_224551268(a1, (_DWORD *)v12 + 11);
        sub_224551268(a1, (_DWORD *)v12 + 12);
        sub_224551268(a1, (_DWORD *)v12 + 13);
        sub_224551268(a1, (_DWORD *)v12 + 14);
        sub_224551268(a1, (_DWORD *)v12 + 15);
        v12 += 64;
      }
      while (v12 != v14);
    }
    v35 = (uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 4;
    sub_224550D98(a1, &v35);
    v16 = *(_BYTE **)(a2 + 72);
    v15 = *(_BYTE **)(a2 + 80);
    v17 = (v15 - v16) >> 4;
    if (v35 <= v17)
    {
      if (v35 < v17)
      {
        v15 = &v16[16 * v35];
        *(_QWORD *)(a2 + 80) = v15;
      }
    }
    else
    {
      sub_2232C68D0((char **)(a2 + 72), v35 - v17);
      v16 = *(_BYTE **)(a2 + 72);
      v15 = *(_BYTE **)(a2 + 80);
    }
    if (v15 != v16)
    {
      v18 = v15;
      do
      {
        sub_22454FFAC(a1, v16);
        sub_22454FFAC(a1, v16 + 1);
        sub_22454FFAC(a1, v16 + 2);
        sub_22454FFAC(a1, v16 + 3);
        sub_22454FFAC(a1, v16 + 4);
        sub_22454FFAC(a1, v16 + 5);
        sub_22454FFAC(a1, v16 + 6);
        sub_22454FFAC(a1, v16 + 7);
        sub_22454FFAC(a1, v16 + 8);
        sub_22454FFAC(a1, v16 + 9);
        sub_22454FFAC(a1, v16 + 10);
        sub_22454FFAC(a1, v16 + 11);
        sub_22454FFAC(a1, v16 + 12);
        sub_22454FFAC(a1, v16 + 13);
        sub_22454FFAC(a1, v16 + 14);
        sub_22454FFAC(a1, v16 + 15);
        v16 += 16;
      }
      while (v16 != v18);
    }
    v35 = (uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 4;
    sub_224550D98(a1, &v35);
    v20 = *(_BYTE **)(a2 + 96);
    v19 = *(_BYTE **)(a2 + 104);
    v21 = (v19 - v20) >> 4;
    if (v35 <= v21)
    {
      if (v35 < v21)
      {
        v19 = &v20[16 * v35];
        *(_QWORD *)(a2 + 104) = v19;
      }
    }
    else
    {
      sub_2232C68D0((char **)(a2 + 96), v35 - v21);
      v20 = *(_BYTE **)(a2 + 96);
      v19 = *(_BYTE **)(a2 + 104);
    }
    if (v19 != v20)
    {
      v22 = v19;
      do
      {
        sub_22454FFAC(a1, v20);
        sub_22454FFAC(a1, v20 + 1);
        sub_22454FFAC(a1, v20 + 2);
        sub_22454FFAC(a1, v20 + 3);
        sub_22454FFAC(a1, v20 + 4);
        sub_22454FFAC(a1, v20 + 5);
        sub_22454FFAC(a1, v20 + 6);
        sub_22454FFAC(a1, v20 + 7);
        sub_22454FFAC(a1, v20 + 8);
        sub_22454FFAC(a1, v20 + 9);
        sub_22454FFAC(a1, v20 + 10);
        sub_22454FFAC(a1, v20 + 11);
        sub_22454FFAC(a1, v20 + 12);
        sub_22454FFAC(a1, v20 + 13);
        sub_22454FFAC(a1, v20 + 14);
        sub_22454FFAC(a1, v20 + 15);
        v20 += 16;
      }
      while (v20 != v22);
    }
    if (v6 >= 2)
    {
      v35 = (uint64_t)(*(_QWORD *)(a2 + 128) - *(_QWORD *)(a2 + 120)) >> 4;
      sub_224550D98(a1, &v35);
      v24 = *(_BYTE **)(a2 + 120);
      v23 = *(_BYTE **)(a2 + 128);
      v25 = (v23 - v24) >> 4;
      if (v35 <= v25)
      {
        if (v35 < v25)
        {
          v23 = &v24[16 * v35];
          *(_QWORD *)(a2 + 128) = v23;
        }
      }
      else
      {
        sub_2232C68D0((char **)(a2 + 120), v35 - v25);
        v24 = *(_BYTE **)(a2 + 120);
        v23 = *(_BYTE **)(a2 + 128);
      }
      if (v23 != v24)
      {
        v26 = v23;
        do
        {
          sub_22454FFAC(a1, v24);
          sub_22454FFAC(a1, v24 + 1);
          sub_22454FFAC(a1, v24 + 2);
          sub_22454FFAC(a1, v24 + 3);
          sub_22454FFAC(a1, v24 + 4);
          sub_22454FFAC(a1, v24 + 5);
          sub_22454FFAC(a1, v24 + 6);
          sub_22454FFAC(a1, v24 + 7);
          sub_22454FFAC(a1, v24 + 8);
          sub_22454FFAC(a1, v24 + 9);
          sub_22454FFAC(a1, v24 + 10);
          sub_22454FFAC(a1, v24 + 11);
          sub_22454FFAC(a1, v24 + 12);
          sub_22454FFAC(a1, v24 + 13);
          sub_22454FFAC(a1, v24 + 14);
          sub_22454FFAC(a1, v24 + 15);
          v24 += 16;
        }
        while (v24 != v26);
      }
      v35 = (uint64_t)(*(_QWORD *)(a2 + 152) - *(_QWORD *)(a2 + 144)) >> 6;
      sub_224550D98(a1, &v35);
      v28 = *(char **)(a2 + 144);
      v27 = *(char **)(a2 + 152);
      v29 = (v27 - v28) >> 6;
      if (v35 <= v29)
      {
        if (v35 < v29)
        {
          v27 = &v28[64 * v35];
          *(_QWORD *)(a2 + 152) = v27;
        }
      }
      else
      {
        sub_2232C69F8((char **)(a2 + 144), v35 - v29);
        v28 = *(char **)(a2 + 144);
        v27 = *(char **)(a2 + 152);
      }
      if (v27 != v28)
      {
        v30 = v27;
        do
        {
          sub_224551268(a1, v28);
          sub_224551268(a1, (_DWORD *)v28 + 1);
          sub_224551268(a1, (_DWORD *)v28 + 2);
          sub_224551268(a1, (_DWORD *)v28 + 3);
          sub_224551268(a1, (_DWORD *)v28 + 4);
          sub_224551268(a1, (_DWORD *)v28 + 5);
          sub_224551268(a1, (_DWORD *)v28 + 6);
          sub_224551268(a1, (_DWORD *)v28 + 7);
          sub_224551268(a1, (_DWORD *)v28 + 8);
          sub_224551268(a1, (_DWORD *)v28 + 9);
          sub_224551268(a1, (_DWORD *)v28 + 10);
          sub_224551268(a1, (_DWORD *)v28 + 11);
          sub_224551268(a1, (_DWORD *)v28 + 12);
          sub_224551268(a1, (_DWORD *)v28 + 13);
          sub_224551268(a1, (_DWORD *)v28 + 14);
          sub_224551268(a1, (_DWORD *)v28 + 15);
          v28 += 64;
        }
        while (v28 != v30);
      }
      v35 = (uint64_t)(*(_QWORD *)(a2 + 176) - *(_QWORD *)(a2 + 168)) >> 4;
      sub_224550D98(a1, &v35);
      v32 = *(_BYTE **)(a2 + 168);
      v31 = *(_BYTE **)(a2 + 176);
      v33 = (v31 - v32) >> 4;
      if (v35 <= v33)
      {
        if (v35 < v33)
        {
          v31 = &v32[16 * v35];
          *(_QWORD *)(a2 + 176) = v31;
        }
      }
      else
      {
        sub_2232C68D0((char **)(a2 + 168), v35 - v33);
        v32 = *(_BYTE **)(a2 + 168);
        v31 = *(_BYTE **)(a2 + 176);
      }
      if (v31 != v32)
      {
        v34 = v31;
        do
        {
          sub_22454FFAC(a1, v32);
          sub_22454FFAC(a1, v32 + 1);
          sub_22454FFAC(a1, v32 + 2);
          sub_22454FFAC(a1, v32 + 3);
          sub_22454FFAC(a1, v32 + 4);
          sub_22454FFAC(a1, v32 + 5);
          sub_22454FFAC(a1, v32 + 6);
          sub_22454FFAC(a1, v32 + 7);
          sub_22454FFAC(a1, v32 + 8);
          sub_22454FFAC(a1, v32 + 9);
          sub_22454FFAC(a1, v32 + 10);
          sub_22454FFAC(a1, v32 + 11);
          sub_22454FFAC(a1, v32 + 12);
          sub_22454FFAC(a1, v32 + 13);
          sub_22454FFAC(a1, v32 + 14);
          sub_22454FFAC(a1, v32 + 15);
          v32 += 16;
        }
        while (v32 != v34);
      }
    }
    if (a3 != 2)
    {
      LOBYTE(v35) = 0;
      sub_22454FFAC(a1, &v35);
      *(_BYTE *)(a2 + 192) = v35;
      if (a3 >= 4)
        sub_224551710(a1, (_BYTE *)(a2 + 2));
    }
  }
}

void sub_223BCD288(uint64_t a1, uint64_t a2, int a3)
{
  char *v5;
  char *v6;
  void *v7;
  char *v8;
  void *v9;
  void *v10;
  void *__p;
  char *v12;
  uint64_t v13;
  int v14;

  if (a3 == 1)
  {
    __p = 0;
    v12 = 0;
    v13 = 0;
    v14 = 1;
    sub_2245508F0(a1, &v14);
    sub_223BCD36C(a1, &__p);
    v5 = (char *)__p;
    if (__p)
    {
      v6 = v12;
      v7 = __p;
      if (v12 != __p)
      {
        v8 = v12;
        do
        {
          v10 = (void *)*((_QWORD *)v8 - 3);
          v8 -= 24;
          v9 = v10;
          if (v10)
          {
            *((_QWORD *)v6 - 2) = v9;
            operator delete(v9);
          }
          v6 = v8;
        }
        while (v8 != v5);
        v7 = __p;
      }
      v12 = v5;
      operator delete(v7);
    }
  }
  LODWORD(__p) = 1;
  sub_2245508F0(a1, &__p);
  sub_223BCD36C(a1, (_QWORD *)(a2 + 8));
}

void sub_223BCD358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_22317C838(&a9);
  _Unwind_Resume(a1);
}

void sub_223BCD36C(uint64_t a1, _QWORD *a2)
{
  char **v4;
  unint64_t v5;
  char **v6;
  uint64_t v7;
  _QWORD *v8;
  char **v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  int v18;

  v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3);
  sub_224550D98(a1, &v16);
  v4 = (char **)a2[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v4 - *a2) >> 3);
  if (v16 > v5)
  {
    sub_2232C7FD8((uint64_t)a2, v16 - v5);
    v8 = a2;
    v6 = (char **)*a2;
    v7 = v8[1];
    if ((char **)v7 == v6)
      return;
    goto LABEL_15;
  }
  if (v16 >= v5)
  {
    v7 = a2[1];
    v6 = (char **)*a2;
    if (v4 == v6)
      return;
    goto LABEL_15;
  }
  v7 = *a2 + 24 * v16;
  if (v4 != (char **)v7)
  {
    v9 = (char **)a2[1];
    do
    {
      v11 = *(v9 - 3);
      v9 -= 3;
      v10 = v11;
      if (v11)
      {
        *(v4 - 2) = v10;
        operator delete(v10);
      }
      v4 = v9;
    }
    while (v9 != (char **)v7);
  }
  a2[1] = v7;
  v6 = (char **)*a2;
  if ((char **)v7 != v6)
  {
    do
    {
LABEL_15:
      LODWORD(v17) = 1;
      sub_2245508F0(a1, &v17);
      v17 = (v6[1] - *v6) >> 5;
      sub_224550D98(a1, &v17);
      v13 = *v6;
      v12 = v6[1];
      v14 = (v12 - *v6) >> 5;
      if (v17 <= v14)
      {
        if (v17 < v14)
        {
          v12 = &v13[32 * v17];
          v6[1] = v12;
        }
      }
      else
      {
        sub_2231B6534(v6, v17 - v14);
        v13 = *v6;
        v12 = v6[1];
      }
      if (v12 != v13)
      {
        v15 = v12;
        do
        {
          v18 = 1;
          sub_2245508F0(a1, &v18);
          sub_224551268(a1, v13);
          sub_224551268(a1, (_DWORD *)v13 + 1);
          sub_224551268(a1, (_DWORD *)v13 + 2);
          sub_2245514BC(a1, (_QWORD *)v13 + 2);
          v18 = 1;
          sub_2245508F0(a1, &v18);
          sub_22455069C(a1, (_DWORD *)v13 + 6);
          v13 += 32;
        }
        while (v13 != v15);
      }
      v6 += 3;
    }
    while (v6 != (char **)v7);
  }
}

void sub_223BCD54C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  float *v6;
  float v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  unsigned int v14;
  char v15;
  _OWORD v16[4];

  v15 = 0;
  sub_22454FFAC(a1, &v15);
  LODWORD(v4) = *(unsigned __int8 *)(a2 + 128);
  if (v15)
  {
    if (!*(_BYTE *)(a2 + 128))
    {
      v5 = 0;
      *(_OWORD *)(a2 + 32) = 0u;
      *(_OWORD *)(a2 + 48) = 0u;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      v6 = (float *)v16;
      do
      {
        if ((_DWORD)v4 == HIDWORD(v5))
          v7 = 1.0;
        else
          v7 = 0.0;
        *v6++ = v7;
        v8 = (v5 + 1);
        v9 = v5 & 0xFFFFFFFF00000000;
        v10 = v8 | v9;
        v11 = v9 + 0x100000000;
        if ((int)v4 >= 3)
          v4 = v11;
        else
          v4 = v10;
        v5 = v4;
      }
      while (v4 != 0x400000000);
      v12 = v16[1];
      *(_OWORD *)(a2 + 64) = v16[0];
      *(_OWORD *)(a2 + 80) = v12;
      v13 = v16[3];
      *(_OWORD *)(a2 + 96) = v16[2];
      *(_OWORD *)(a2 + 112) = v13;
      *(_BYTE *)(a2 + 128) = 1;
    }
    LODWORD(v16[0]) = 2;
    sub_2245508F0(a1, v16);
    v14 = v16[0];
    sub_224551268(a1, (_DWORD *)a2);
    sub_224551268(a1, (_DWORD *)(a2 + 4));
    sub_224551268(a1, (_DWORD *)(a2 + 8));
    sub_224551268(a1, (_DWORD *)(a2 + 12));
    sub_224551268(a1, (_DWORD *)(a2 + 16));
    sub_224551268(a1, (_DWORD *)(a2 + 20));
    sub_224551268(a1, (_DWORD *)(a2 + 24));
    sub_224551268(a1, (_DWORD *)(a2 + 28));
    sub_224551268(a1, (_DWORD *)(a2 + 32));
    sub_224551268(a1, (_DWORD *)(a2 + 36));
    sub_224551268(a1, (_DWORD *)(a2 + 40));
    sub_224551268(a1, (_DWORD *)(a2 + 44));
    sub_224551268(a1, (_DWORD *)(a2 + 48));
    sub_224551268(a1, (_DWORD *)(a2 + 52));
    sub_224551268(a1, (_DWORD *)(a2 + 56));
    sub_224551268(a1, (_DWORD *)(a2 + 60));
    if (v14 >= 2)
    {
      sub_224551268(a1, (_DWORD *)(a2 + 64));
      sub_224551268(a1, (_DWORD *)(a2 + 68));
      sub_224551268(a1, (_DWORD *)(a2 + 72));
      sub_224551268(a1, (_DWORD *)(a2 + 76));
      sub_224551268(a1, (_DWORD *)(a2 + 80));
      sub_224551268(a1, (_DWORD *)(a2 + 84));
      sub_224551268(a1, (_DWORD *)(a2 + 88));
      sub_224551268(a1, (_DWORD *)(a2 + 92));
      sub_224551268(a1, (_DWORD *)(a2 + 96));
      sub_224551268(a1, (_DWORD *)(a2 + 100));
      sub_224551268(a1, (_DWORD *)(a2 + 104));
      sub_224551268(a1, (_DWORD *)(a2 + 108));
      sub_224551268(a1, (_DWORD *)(a2 + 112));
      sub_224551268(a1, (_DWORD *)(a2 + 116));
      sub_224551268(a1, (_DWORD *)(a2 + 120));
      sub_224551268(a1, (_DWORD *)(a2 + 124));
    }
  }
  else if (*(_BYTE *)(a2 + 128))
  {
    *(_BYTE *)(a2 + 128) = 0;
  }
}

void sub_223BCD7C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;

  v14 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  sub_224550D98(a1, &v14);
  v4 = *(_QWORD *)(a2 + 8);
  v5 = 0x86BCA1AF286BCA1BLL * ((v4 - *(_QWORD *)a2) >> 4);
  if (v14 > v5)
  {
    sub_2232C879C((char **)a2, v14 - v5);
    v7 = *(char **)a2;
    v6 = *(_QWORD *)(a2 + 8);
    if (v6 == *(_QWORD *)a2)
      return;
    goto LABEL_19;
  }
  if (v14 >= v5)
  {
    v6 = *(_QWORD *)(a2 + 8);
    v7 = *(char **)a2;
    if (v6 == *(_QWORD *)a2)
      return;
    goto LABEL_19;
  }
  v6 = *(_QWORD *)a2 + 304 * v14;
  while (v4 != v6)
  {
    v9 = *(_QWORD *)(v4 - 160);
    if (v9)
    {
      v10 = *(_QWORD *)(v4 - 152);
      v8 = *(void **)(v4 - 160);
      if (v10 != v9)
      {
        v11 = *(_QWORD *)(v4 - 152);
        do
        {
          v13 = *(void **)(v11 - 24);
          v11 -= 24;
          v12 = v13;
          if (v13)
          {
            *(_QWORD *)(v10 - 16) = v12;
            operator delete(v12);
          }
          v10 = v11;
        }
        while (v11 != v9);
        v8 = *(void **)(v4 - 160);
      }
      *(_QWORD *)(v4 - 152) = v9;
      operator delete(v8);
    }
    v4 -= 304;
  }
  *(_QWORD *)(a2 + 8) = v6;
  v7 = *(char **)a2;
  if (v6 != *(_QWORD *)a2)
  {
    do
    {
LABEL_19:
      LODWORD(v15) = 1;
      sub_2245508F0(a1, &v15);
      v15 = 0;
      sub_224550B44(a1, &v15);
      *(_QWORD *)v7 = v15;
      sub_2245514BC(a1, (_QWORD *)v7 + 1);
      sub_2245514BC(a1, (_QWORD *)v7 + 2);
      sub_2245514BC(a1, (_QWORD *)v7 + 3);
      sub_2245514BC(a1, (_QWORD *)v7 + 4);
      sub_2245514BC(a1, (_QWORD *)v7 + 5);
      sub_2245514BC(a1, (_QWORD *)v7 + 6);
      sub_2245514BC(a1, (_QWORD *)v7 + 7);
      sub_2245514BC(a1, (_QWORD *)v7 + 8);
      sub_2245514BC(a1, (_QWORD *)v7 + 9);
      sub_2245514BC(a1, (_QWORD *)v7 + 10);
      sub_2245514BC(a1, (_QWORD *)v7 + 11);
      sub_2245514BC(a1, (_QWORD *)v7 + 12);
      sub_2245514BC(a1, (_QWORD *)v7 + 13);
      sub_2245514BC(a1, (_QWORD *)v7 + 14);
      sub_2245514BC(a1, (_QWORD *)v7 + 15);
      sub_2245514BC(a1, (_QWORD *)v7 + 16);
      LODWORD(v15) = 2;
      sub_2245508F0(a1, &v15);
      sub_223BCD288(a1, (uint64_t)(v7 + 136), v15);
      sub_223BCD54C(a1, (uint64_t)(v7 + 168));
      v7 += 304;
    }
    while (v7 != (char *)v6);
  }
}

void sub_223BCDA14(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  unsigned int v18;
  std::logic_error *exception;
  char v20;
  uint64_t v21[27];
  _BYTE v22[8];
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  char v34;
  __int128 v35;
  uint64_t v36;
  unsigned __int8 v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_223B89234(a1 + 16, (uint64_t)v21);
    sub_223B87C9C((uint64_t)v22, v21);
    v6 = *(unsigned int *)(a1 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_223BB47F0(v4, (uint64_t)v22);
        if (!v37)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24EC5FFB8[v6])(&v20, v4);
    }
    *(_BYTE *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 192) = -1;
    *(_OWORD *)(a1 + 24) = v23;
    *(_BYTE *)(a1 + 64) = 0;
    if (v26)
    {
      *(_OWORD *)(a1 + 40) = v24;
      *(_QWORD *)(a1 + 56) = v25;
      v25 = 0;
      v24 = 0uLL;
      *(_BYTE *)(a1 + 64) = 1;
    }
    *(_BYTE *)(a1 + 96) = 0;
    *(_OWORD *)(a1 + 72) = v27;
    *(_QWORD *)(a1 + 88) = v28;
    *(_BYTE *)(a1 + 120) = 0;
    if (v31)
    {
      *(_OWORD *)(a1 + 96) = v29;
      *(_QWORD *)(a1 + 112) = v30;
      v30 = 0;
      v29 = 0uLL;
      *(_BYTE *)(a1 + 120) = 1;
    }
    *(_BYTE *)(a1 + 128) = 0;
    *(_BYTE *)(a1 + 152) = 0;
    if (v34)
    {
      *(_OWORD *)(a1 + 128) = v32;
      *(_QWORD *)(a1 + 144) = v33;
      v33 = 0;
      v32 = 0uLL;
      *(_BYTE *)(a1 + 152) = 1;
    }
    *(_BYTE *)(a1 + 160) = 0;
    *(_BYTE *)(a1 + 184) = 0;
    v8 = v37;
    if (v37)
    {
      *(_OWORD *)(a1 + 160) = v35;
      *(_QWORD *)(a1 + 176) = v36;
      v36 = 0;
      v35 = 0uLL;
      *(_BYTE *)(a1 + 184) = 1;
    }
    *(_DWORD *)(a1 + 192) = 0;
    if (!v8)
      goto LABEL_46;
LABEL_22:
    v9 = v35;
    if (!(_QWORD)v35)
      goto LABEL_46;
    v10 = *((_QWORD *)&v35 + 1);
    v11 = (void *)v35;
    if (*((_QWORD *)&v35 + 1) == (_QWORD)v35)
      goto LABEL_45;
    do
    {
      if (*(char *)(v10 - 1) < 0)
        operator delete(*(void **)(v10 - 24));
      v10 -= 24;
    }
    while (v10 != v9);
LABEL_44:
    v11 = (void *)v35;
LABEL_45:
    *((_QWORD *)&v35 + 1) = v9;
    operator delete(v11);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_22316DD70();
  sub_223B8944C(a1 + 16, (uint64_t)v21);
  sub_223B87C9C((uint64_t)v22, v21);
  v7 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24EC5FFB8[v7])(&v20, v4);
LABEL_29:
    *(_BYTE *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 192) = -1;
    *(_OWORD *)(a1 + 24) = v23;
    *(_BYTE *)(a1 + 64) = 0;
    if (v26)
    {
      *(_OWORD *)(a1 + 40) = v24;
      *(_QWORD *)(a1 + 56) = v25;
      v25 = 0;
      v24 = 0uLL;
      *(_BYTE *)(a1 + 64) = 1;
    }
    *(_BYTE *)(a1 + 96) = 0;
    *(_OWORD *)(a1 + 72) = v27;
    *(_QWORD *)(a1 + 88) = v28;
    *(_BYTE *)(a1 + 120) = 0;
    if (v31)
    {
      *(_OWORD *)(a1 + 96) = v29;
      *(_QWORD *)(a1 + 112) = v30;
      v30 = 0;
      v29 = 0uLL;
      *(_BYTE *)(a1 + 120) = 1;
    }
    *(_BYTE *)(a1 + 128) = 0;
    *(_BYTE *)(a1 + 152) = 0;
    if (v34)
    {
      *(_OWORD *)(a1 + 128) = v32;
      *(_QWORD *)(a1 + 144) = v33;
      v33 = 0;
      v32 = 0uLL;
      *(_BYTE *)(a1 + 152) = 1;
    }
    *(_BYTE *)(a1 + 160) = 0;
    *(_BYTE *)(a1 + 184) = 0;
    v12 = v37;
    if (v37)
    {
      *(_OWORD *)(a1 + 160) = v35;
      *(_QWORD *)(a1 + 176) = v36;
      v36 = 0;
      v35 = 0uLL;
      *(_BYTE *)(a1 + 184) = 1;
    }
    *(_DWORD *)(a1 + 192) = 0;
    if (!v12)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_223BB47F0(v4, (uint64_t)v22);
  if (v37)
  {
LABEL_38:
    v9 = v35;
    if (!(_QWORD)v35)
      goto LABEL_46;
    v13 = *((_QWORD *)&v35 + 1);
    v11 = (void *)v35;
    if (*((_QWORD *)&v35 + 1) == (_QWORD)v35)
      goto LABEL_45;
    do
    {
      if (*(char *)(v13 - 1) < 0)
        operator delete(*(void **)(v13 - 24));
      v13 -= 24;
    }
    while (v13 != v9);
    goto LABEL_44;
  }
LABEL_46:
  if (v34 && SHIBYTE(v33) < 0)
    operator delete((void *)v32);
  if (v31 && SHIBYTE(v30) < 0)
    operator delete((void *)v29);
  if (v26 && SHIBYTE(v25) < 0)
    operator delete((void *)v24);
  sub_2231AD66C((uint64_t)v21);
  if (*(_DWORD *)(a1 + 192))
    sub_22316DD70();
LABEL_56:
  sub_223BCDEF0((uint64_t)v21, a2, v4);
  v14 = a2[6];
  v15 = a2[7];
  v16 = v15 >= v14;
  v17 = v15 - v14;
  if (!v16)
    v17 = 0;
  if (v17 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  v18 = *(_DWORD *)(a2[3] + v14);
  a2[6] = v14 + 4;
  sub_223BCE97C(a2, a1 + 200, v18);
}

void sub_223BCDE94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_223BCDEF0(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  std::logic_error *exception;
  char v14;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 >= 3)
    sub_2244FFA6C(a2);
  if (v9 >= 6)
    v10 = 6;
  else
    v10 = v9;
  if (v10 < 3)
  {
    sub_223BCE004((uint64_t)&v14, a2, a3, v10);
    if (v9 < 3)
      return;
  }
  else
  {
    sub_223BCE214(a2, a3, v10);
    if (v9 < 3)
      return;
  }
  v11 = a2[12];
  v12 = a2[9];
  a2[6] = *(_QWORD *)(v11 - 8) + *(_QWORD *)(v12 - 8) + 8;
  a2[9] = v12 - 8;
  a2[12] = v11 - 8;
}

void sub_223BCDFF0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BCE004(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int a4)
{
  void **v7;
  void **v8;
  void *v9;
  _BYTE v10[24];
  __int128 v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  void *v16;
  char v17;
  char v18;
  void *v19;
  char v20;
  char v21;
  void *__p;
  void **v23;
  char v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v25 = 0;
  BYTE8(v25) = 0;
  LOBYTE(v26) = 0;
  v28 = 0;
  sub_223BCE2CC((uint64_t)v10, a2, (uint64_t)&v25);
  if (a4 >= 2)
    sub_223BCE57C(a2, (uint64_t)&v26);
  *(_OWORD *)&v10[8] = v25;
  LOBYTE(v11) = 0;
  v13 = 0;
  if (v28)
  {
    if (SHIBYTE(v27) < 0)
    {
      sub_223197FA4(&v11, (void *)v26, *((unint64_t *)&v26 + 1));
    }
    else
    {
      v11 = v26;
      v12 = v27;
    }
    v13 = 1;
  }
  v14 = 0;
  v15 = 0;
  LOBYTE(v16) = 0;
  v18 = 0;
  LOBYTE(v19) = 0;
  v21 = 0;
  LOBYTE(__p) = 0;
  v24 = 0;
  sub_223BB47F0(a3, (uint64_t)v10);
  if (v24)
  {
    v7 = (void **)__p;
    if (__p)
    {
      v8 = v23;
      v9 = __p;
      if (v23 != __p)
      {
        do
        {
          if (*((char *)v8 - 1) < 0)
            operator delete(*(v8 - 3));
          v8 -= 3;
        }
        while (v8 != v7);
        v9 = __p;
      }
      v23 = v7;
      operator delete(v9);
    }
  }
  if (v21 && v20 < 0)
    operator delete(v19);
  if (v18 && v17 < 0)
    operator delete(v16);
  if (v13 && SHIBYTE(v12) < 0)
    operator delete((void *)v11);
  if (v28)
  {
    if (SHIBYTE(v27) < 0)
      operator delete((void *)v26);
  }
}

void sub_223BCE1D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  uint64_t v18;

  if (a18 && a17 < 0)
    operator delete(__p);
  if (*(_BYTE *)(v18 - 64))
  {
    if (*(char *)(v18 - 65) < 0)
      operator delete(*(void **)(v18 - 88));
  }
  _Unwind_Resume(exception_object);
}

void sub_223BCE214(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  char v6;

  sub_223BCE2CC((uint64_t)&v6, a1, a2 + 8);
  sub_223BCE57C(a1, a2 + 24);
  if (a3 >= 4)
  {
    sub_223BCE64C(a1, a2 + 56);
    if (a3 == 5)
    {
      sub_223BCE57C(a1, a2 + 80);
    }
    else if (a3 >= 6)
    {
      sub_223BCE57C(a1, a2 + 80);
      sub_223BCE57C(a1, a2 + 112);
      sub_223BCE710(a1, a2 + 144);
    }
  }
}

_QWORD *sub_223BCE2CC(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  char v13;
  std::logic_error *exception;
  uint64_t v15;
  char v16;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    v15 = 0;
    v16 = 0;
    result = sub_223BCE4A8(a2, (uint64_t)&v15);
    v13 = v16;
    *(_QWORD *)a3 = v15;
    *(_BYTE *)(a3 + 8) = v13;
  }
  else
  {
    sub_2244FFA6C(a2);
    result = sub_223BCE3D4(a2, a3);
    v11 = a2[12];
    v12 = a2[9];
    a2[6] = *(_QWORD *)(v11 - 8) + *(_QWORD *)(v12 - 8) + 8;
    a2[9] = v12 - 8;
    a2[12] = v11 - 8;
  }
  return result;
}

void sub_223BCE3C0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_223BCE3D4(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7
    || (*(_QWORD *)a2 = *(_QWORD *)(result[3] + v2), v6 = result[6], v7 = result[7], result[6] = v6 + 8, v7 <= v6 + 8))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  v8 = *(_BYTE *)(result[3] + v6 + 8);
  result[6] = v6 + 9;
  *(_BYTE *)(a2 + 8) = v8;
  return result;
}

void sub_223BCE480(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BCE494(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_223BCE4A8(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7
    || (*(_QWORD *)a2 = *(_QWORD *)(result[3] + v2), v6 = result[6], v7 = result[7], result[6] = v6 + 8, v7 <= v6 + 8))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  v8 = *(_BYTE *)(result[3] + v6 + 8);
  result[6] = v6 + 9;
  *(_BYTE *)(a2 + 8) = v8;
  return result;
}

void sub_223BCE554(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BCE568(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BCE57C(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  int v4;
  std::logic_error *exception;

  v2 = a1[6];
  if (a1[7] <= v2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  v4 = *(unsigned __int8 *)(a1[3] + v2);
  a1[6] = v2 + 1;
  if (v4)
  {
    if (!*(_BYTE *)(a2 + 24))
    {
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_BYTE *)(a2 + 24) = 1;
    }
    sub_2244FFDBC(a1, a2);
  }
  else if (*(_BYTE *)(a2 + 24))
  {
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(_BYTE *)(a2 + 24) = 0;
  }
}

void sub_223BCE638(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_223BCE64C(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  int v3;
  std::logic_error *exception;
  char v5;

  v2 = result[6];
  if (result[7] <= v2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  v3 = *(unsigned __int8 *)(result[3] + v2);
  result[6] = v2 + 1;
  if (v3)
  {
    if (!*(_BYTE *)(a2 + 16))
    {
      *(_QWORD *)a2 = 0;
      *(_BYTE *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 16) = 1;
    }
    return sub_223BCE2CC((uint64_t)&v5, result, a2);
  }
  else if (*(_BYTE *)(a2 + 16))
  {
    *(_BYTE *)(a2 + 16) = 0;
  }
  return result;
}

void sub_223BCE6FC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BCE710(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  int v4;
  void **v5;
  void **v6;
  void **v7;
  std::logic_error *exception;

  v2 = a1[6];
  if (a1[7] <= v2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  v4 = *(unsigned __int8 *)(a1[3] + v2);
  a1[6] = v2 + 1;
  if (v4)
  {
    if (!*(_BYTE *)(a2 + 24))
    {
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_BYTE *)(a2 + 24) = 1;
    }
    sub_223BCE828(a1, a2);
  }
  else if (*(_BYTE *)(a2 + 24))
  {
    v5 = *(void ***)a2;
    if (*(_QWORD *)a2)
    {
      v6 = *(void ***)(a2 + 8);
      v7 = *(void ***)a2;
      if (v6 != v5)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = *(void ***)a2;
      }
      *(_QWORD *)(a2 + 8) = v5;
      operator delete(v7);
    }
    *(_BYTE *)(a2 + 24) = 0;
  }
}

void sub_223BCE814(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BCE828(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::logic_error *exception;

  v3 = a1[6];
  v2 = a1[7];
  v4 = v2 >= v3;
  v5 = v2 - v3;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  v8 = *(_QWORD *)(a1[3] + v3);
  a1[6] = v3 + 8;
  v9 = *(_QWORD *)(a2 + 8);
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v9 - *(_QWORD *)a2) >> 3);
  if (v8 > v10)
  {
    sub_2231B744C((char **)a2, v8 - v10);
    v13 = a2;
    v11 = *(char **)a2;
    v12 = *(char **)(v13 + 8);
    v14 = v12 - v11;
    if (v12 == v11)
      return;
    goto LABEL_16;
  }
  if (v8 >= v10)
  {
    v11 = *(char **)a2;
    v14 = v9 - *(_QWORD *)a2;
    if (v9 == *(_QWORD *)a2)
      return;
    goto LABEL_16;
  }
  v15 = *(_QWORD *)a2 + 24 * v8;
  while (v9 != v15)
  {
    if (*(char *)(v9 - 1) < 0)
      operator delete(*(void **)(v9 - 24));
    v9 -= 24;
  }
  *(_QWORD *)(a2 + 8) = v15;
  v11 = *(char **)a2;
  v14 = v15 - (_QWORD)v11;
  if ((char *)v15 != v11)
  {
LABEL_16:
    v16 = 24 * (v14 / 24);
    do
    {
      sub_2244FFDBC(a1, (uint64_t)v11);
      v11 += 24;
      v16 -= 24;
    }
    while (v16);
  }
}

void sub_223BCE968(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BCE97C(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  char *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  int v17;
  uint64_t v18;
  void *v19;
  __int16 v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  char *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  void *v41;
  __int16 v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  char *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  void *v63;
  __int16 v64;
  unint64_t v65;
  unint64_t v66;
  int v67;
  char v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  int v89;
  unint64_t v90;
  unint64_t v91;
  unsigned int v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  char *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  __int16 v110;
  unint64_t v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unsigned int v141;
  char *v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  int v146;
  uint64_t v147;
  void *v148;
  __int16 v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unsigned int v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  int v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  void **v176;
  int v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  char *v182;
  char *v183;
  unint64_t v184;
  void *v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  int v190;
  unint64_t v191;
  _OWORD *v192;
  unint64_t v193;
  __int128 *v194;
  __int128 v195;
  __int128 v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  int v200;
  char v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  __int128 *v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  uint64_t v228;
  unint64_t v229;
  int v230;
  char **v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  char *v235;
  char *v236;
  uint64_t v237;
  char *v238;
  char *v239;
  char *v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  uint64_t v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  int v249;
  unint64_t v250;
  char v251;
  char *v252;
  char *v253;
  void *v254;
  char *v255;
  char *v256;
  void *v257;
  char *v258;
  unint64_t v259;
  int v260;
  _OWORD *v261;
  uint64_t v262;
  uint64_t v263;
  void *v264;
  uint64_t v265;
  void *v266;
  void *v267;
  unint64_t v268;
  unint64_t v269;
  unint64_t v270;
  std::logic_error *exception;
  std::logic_error *v272;
  std::logic_error *v273;
  std::logic_error *v274;
  std::logic_error *v275;
  std::logic_error *v276;
  std::logic_error *v277;
  std::logic_error *v278;
  std::logic_error *v279;
  std::logic_error *v280;
  std::logic_error *v281;
  std::logic_error *v282;
  std::logic_error *v283;
  std::logic_error *v284;
  std::logic_error *v285;
  std::logic_error *v286;
  std::logic_error *v287;
  std::logic_error *v288;
  std::logic_error *v289;
  std::logic_error *v290;
  std::logic_error *v291;
  std::logic_error *v292;
  std::logic_error *v293;
  std::logic_error *v294;
  void *v295[2];
  std::__shared_weak_count *v296;
  _BYTE v297[16];
  std::__shared_weak_count *v298;
  void *v299;
  char *v300;
  std::__shared_weak_count *v301;
  uint64_t v302;
  uint64_t v303;
  void *v304;
  int v305;
  __int16 v306;
  char v307;
  _QWORD v308[2];
  std::__shared_weak_count *v309;
  uint64_t v310;
  int v311;
  uint64_t v312;
  int v313;
  __int16 v314;
  __int128 *v315;
  __int128 v316;
  std::__shared_weak_count *v317;
  void *v318;
  void *v319;
  int v320;
  void *v321;
  void *v322;
  int v323;
  void *v324;
  void *v325;
  void *v326;
  void *v327;
  void *v328;
  void *v329;
  void *v330;
  void *v331;
  void *v332;
  void *v333;
  char v334;
  __int128 v335;
  std::__shared_weak_count *v336;
  void *v337;
  _BYTE v338[12];
  void *v339;
  void *v340;
  int v341;
  void *v342;
  void *v343;
  void *v344;
  void *v345;
  void *v346;
  void *v347;
  void *v348;
  void *v349;
  void *__p;
  void *v351;
  char v352;
  char v353;
  uint64_t v354;

  v354 = *MEMORY[0x24BDAC8D0];
  v3 = a1[6];
  v4 = a1[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  v10 = a2 + 8;
  v11 = *(_DWORD *)(a1[3] + v3);
  a1[6] = v3 + 4;
  v12 = v11 - 2;
  if (v11 <= 2)
  {
    LOBYTE(v316) = 0;
    LOBYTE(v322) = 0;
    sub_223BD14AC(a1, (uint64_t)&v316);
    if ((_BYTE)v322)
    {
      v299 = &off_24EC1F8C8;
      v13 = (char *)*((_QWORD *)&v316 + 1);
      v14 = v317;
      if (v317)
      {
        p_shared_owners = (unint64_t *)&v317->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
        v17 = v320;
        v19 = v318;
        v18 = (uint64_t)v319;
        v20 = (__int16)v321;
        do
          v21 = __ldxr(p_shared_owners);
        while (__stxr(v21 + 1, p_shared_owners));
        do
          v22 = __ldxr(p_shared_owners);
        while (__stxr(v22 + 1, p_shared_owners));
      }
      else
      {
        v17 = v320;
        v19 = v318;
        v18 = (uint64_t)v319;
        v20 = (__int16)v321;
      }
      v300 = v13;
      v301 = v14;
      v302 = v18;
      LODWORD(v303) = 4 * v17;
      v304 = v19;
      v305 = 4;
      v306 = v20;
      if (v14)
      {
        v23 = (unint64_t *)&v14->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
        do
          v25 = __ldaxr(v23);
        while (__stlxr(v25 - 1, v23));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      BYTE8(v335) = 0;
      LOBYTE(v337) = 0;
      v338[0] = 0;
      LOBYTE(v339) = 0;
      LOBYTE(v340) = 1;
      v341 = 0;
      sub_22432B21C((uint64_t)&v299, 3u, (uint64_t)v308);
      sub_2232C1348(v10, (uint64_t)v308);
      v26 = v309;
      if (v309)
      {
        v27 = (unint64_t *)&v309->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v29 = v301;
      if (v301)
      {
        v30 = (unint64_t *)&v301->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      if ((_BYTE)v322)
      {
        *(_QWORD *)&v316 = &off_24EC27198;
        v32 = v317;
        if (v317)
        {
          v33 = (unint64_t *)&v317->__shared_owners_;
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
      }
    }
  }
  else
  {
    sub_223BD1308(a1, a2 + 8);
    if (v11 >= 5)
    {
      sub_223BD1308(a1, a2 + 72);
      goto LABEL_82;
    }
  }
  LOBYTE(v316) = 0;
  LOBYTE(v322) = 0;
  sub_223BD14AC(a1, (uint64_t)&v316);
  if ((_BYTE)v322)
  {
    v299 = &off_24EC1F8C8;
    v35 = (char *)*((_QWORD *)&v316 + 1);
    v36 = v317;
    if (v317)
    {
      v37 = (unint64_t *)&v317->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
      v39 = v320;
      v41 = v318;
      v40 = (uint64_t)v319;
      v42 = (__int16)v321;
      do
        v43 = __ldxr(v37);
      while (__stxr(v43 + 1, v37));
      do
        v44 = __ldxr(v37);
      while (__stxr(v44 + 1, v37));
    }
    else
    {
      v39 = v320;
      v41 = v318;
      v40 = (uint64_t)v319;
      v42 = (__int16)v321;
    }
    v300 = v35;
    v301 = v36;
    v302 = v40;
    LODWORD(v303) = 4 * v39;
    v304 = v41;
    v305 = 4;
    v306 = v42;
    if (v36)
    {
      v45 = (unint64_t *)&v36->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
      do
        v47 = __ldaxr(v45);
      while (__stlxr(v47 - 1, v45));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    BYTE8(v335) = 0;
    LOBYTE(v337) = 0;
    v338[0] = 0;
    LOBYTE(v339) = 0;
    LOBYTE(v340) = 1;
    v341 = 0;
    sub_22432B21C((uint64_t)&v299, 3u, (uint64_t)v308);
    sub_2232C1348(a2 + 72, (uint64_t)v308);
    v48 = v309;
    if (v309)
    {
      v49 = (unint64_t *)&v309->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    v51 = v301;
    if (!v301)
      goto LABEL_66;
    v52 = (unint64_t *)&v301->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
      if (!(_BYTE)v322)
        goto LABEL_81;
    }
    else
    {
LABEL_66:
      if (!(_BYTE)v322)
        goto LABEL_81;
    }
    *(_QWORD *)&v316 = &off_24EC27198;
    v54 = v317;
    if (v317)
    {
      v55 = (unint64_t *)&v317->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
        if (v11 < 4)
          goto LABEL_72;
LABEL_82:
        LOBYTE(v335) = 0;
        LOBYTE(v345) = 0;
        sub_223BD1650(a1, (uint64_t)&v335);
        v67 = v345;
        if ((_BYTE)v345)
        {
          sub_22416C400((uint64_t)&v335, (uint64_t)v297);
          *(_QWORD *)&v316 = &off_24EC28F30;
          sub_2232C2C00((uint64_t)v297, (uint64_t *)&v316 + 1);
          v68 = 1;
        }
        else
        {
          v68 = 0;
          LOBYTE(v316) = 0;
        }
        LOBYTE(v325) = v68;
        sub_2232C33D4(a2 + 136, (uint64_t)&v316);
        if (!(_BYTE)v325)
          goto LABEL_90;
        *(_QWORD *)&v316 = &off_24EC28F30;
        v69 = v317;
        if (!v317)
          goto LABEL_90;
        v70 = (unint64_t *)&v317->__shared_owners_;
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
          if (!v67)
            goto LABEL_95;
        }
        else
        {
LABEL_90:
          if (!v67)
            goto LABEL_95;
        }
        v72 = v298;
        if (v298)
        {
          v73 = (unint64_t *)&v298->__shared_owners_;
          do
            v74 = __ldaxr(v73);
          while (__stlxr(v74 - 1, v73));
          if (!v74)
          {
            ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
            std::__shared_weak_count::__release_weak(v72);
            if (!(_BYTE)v345)
              goto LABEL_127;
            goto LABEL_96;
          }
        }
LABEL_95:
        if (!(_BYTE)v345)
          goto LABEL_127;
LABEL_96:
        if ((_DWORD)v344 != -1)
          ((void (*)(__int128 *, _BYTE *))off_24EC5FFD0[v344])(&v316, v338);
        goto LABEL_127;
      }
    }
  }
LABEL_81:
  if (v11 >= 4)
    goto LABEL_82;
LABEL_72:
  LOBYTE(v335) = 0;
  LOBYTE(v343) = 0;
  sub_223BD0FC0(a1, (uint64_t)&v335);
  if ((_BYTE)v343)
  {
    v299 = &off_24EC1F8C8;
    v57 = (char *)*((_QWORD *)&v335 + 1);
    v58 = v336;
    if (v336)
    {
      v59 = (unint64_t *)&v336->__shared_owners_;
      do
        v60 = __ldxr(v59);
      while (__stxr(v60 + 1, v59));
      v61 = *(_QWORD *)&v338[4];
      v62 = HIDWORD(v339);
      v63 = v337;
      v64 = (__int16)v342;
      do
        v65 = __ldxr(v59);
      while (__stxr(v65 + 1, v59));
      do
        v66 = __ldxr(v59);
      while (__stxr(v66 + 1, v59));
    }
    else
    {
      v61 = *(_QWORD *)&v338[4];
      v62 = HIDWORD(v339);
      v63 = v337;
      v64 = (__int16)v342;
    }
    v300 = v57;
    v301 = v58;
    v302 = v61;
    LODWORD(v303) = 4 * v62;
    v304 = v63;
    v305 = 32;
    v306 = v64;
    if (v58)
    {
      v75 = (unint64_t *)&v58->__shared_owners_;
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
      do
        v77 = __ldaxr(v75);
      while (__stlxr(v77 - 1, v75));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    BYTE8(v316) = 0;
    LOBYTE(v318) = 0;
    LOBYTE(v319) = 0;
    LOBYTE(v321) = 0;
    LOBYTE(v322) = 1;
    v323 = 0;
    sub_22432B21C((uint64_t)&v299, 0x1Fu, (uint64_t)v308);
    sub_2232C1620(a2 + 136, (uint64_t)v308);
    v78 = v309;
    if (v309)
    {
      v79 = (unint64_t *)&v309->__shared_owners_;
      do
        v80 = __ldaxr(v79);
      while (__stlxr(v80 - 1, v79));
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
    v81 = v301;
    if (v301)
    {
      v82 = (unint64_t *)&v301->__shared_owners_;
      do
        v83 = __ldaxr(v82);
      while (__stlxr(v83 - 1, v82));
      if (!v83)
      {
        ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
        std::__shared_weak_count::__release_weak(v81);
      }
    }
    if ((_BYTE)v343)
    {
      *(_QWORD *)&v335 = &off_24EC26EB0;
      v84 = v336;
      if (v336)
      {
        v85 = (unint64_t *)&v336->__shared_owners_;
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
    }
  }
LABEL_127:
  v88 = a1[6];
  v87 = a1[7];
  if (v87 <= v88)
  {
    v272 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(v272, "Not enough data to read");
    __cxa_throw(v272, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  v89 = *(unsigned __int8 *)(a1[3] + v88);
  v90 = v88 + 1;
  a1[6] = v90;
  if (!v89)
  {
    sub_2232C39E0(a2 + 224);
    goto LABEL_206;
  }
  if (!*(_BYTE *)(a2 + 496))
  {
    sub_2232C39E0(a2 + 224);
    *(_OWORD *)(a2 + 464) = 0u;
    *(_OWORD *)(a2 + 480) = 0u;
    *(_OWORD *)(a2 + 432) = 0u;
    *(_OWORD *)(a2 + 448) = 0u;
    *(_OWORD *)(a2 + 400) = 0u;
    *(_OWORD *)(a2 + 416) = 0u;
    *(_OWORD *)(a2 + 368) = 0u;
    *(_OWORD *)(a2 + 384) = 0u;
    *(_OWORD *)(a2 + 336) = 0u;
    *(_OWORD *)(a2 + 352) = 0u;
    *(_OWORD *)(a2 + 304) = 0u;
    *(_OWORD *)(a2 + 320) = 0u;
    *(_OWORD *)(a2 + 272) = 0u;
    *(_OWORD *)(a2 + 288) = 0u;
    *(_OWORD *)(a2 + 240) = 0u;
    *(_OWORD *)(a2 + 256) = 0u;
    *(_OWORD *)(a2 + 224) = 0u;
    sub_2232C3AB8(a2 + 224);
    *(_BYTE *)(a2 + 496) = 1;
    v90 = a1[6];
    v87 = a1[7];
  }
  v5 = v87 >= v90;
  v91 = v87 - v90;
  if (!v5)
    v91 = 0;
  if (v91 <= 3)
  {
    v280 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(v280, "Not enough data to read");
    __cxa_throw(v280, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  v92 = *(_DWORD *)(a1[3] + v90);
  a1[6] = v90 + 4;
  if (v92 <= 1)
  {
    LOBYTE(v299) = 0;
    v307 = 0;
    *(_QWORD *)&v316 = &off_24EC1F958;
    sub_2231B3FDC((uint64_t)&v316 + 8);
    sub_22416BD7C((uint64_t)&v335, (uint64_t)&v316, 0);
    v93 = v317;
    if (v317)
    {
      v94 = (unint64_t *)&v317->__shared_owners_;
      do
        v95 = __ldaxr(v94);
      while (__stlxr(v95 - 1, v94));
      if (!v95)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    LODWORD(v337) = 0;
    sub_223BD17F8((uint64_t)&v316, a1, (uint64_t)&v335);
    sub_22416C400((uint64_t)&v335, (uint64_t)v308);
    *(_QWORD *)&v316 = &off_24EC28BC8;
    sub_2232C1E78((uint64_t)v308, (uint64_t *)&v316 + 1);
    LOBYTE(v322) = 1;
    sub_2232C264C((uint64_t)&v299, (uint64_t)&v316);
    if ((_BYTE)v322)
    {
      *(_QWORD *)&v316 = &off_24EC28BC8;
      v96 = v317;
      if (v317)
      {
        v97 = (unint64_t *)&v317->__shared_owners_;
        do
          v98 = __ldaxr(v97);
        while (__stlxr(v98 - 1, v97));
        if (!v98)
        {
          ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
          std::__shared_weak_count::__release_weak(v96);
        }
      }
    }
    v99 = v309;
    if (!v309)
      goto LABEL_150;
    v100 = (unint64_t *)&v309->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
      v102 = v344;
      if ((_DWORD)v344 == -1)
        goto LABEL_152;
    }
    else
    {
LABEL_150:
      v102 = v344;
      if ((_DWORD)v344 == -1)
      {
LABEL_152:
        v308[0] = &off_24EC1F8C8;
        v103 = v300;
        v104 = v301;
        if (v301)
        {
          v105 = (unint64_t *)&v301->__shared_owners_;
          do
            v106 = __ldxr(v105);
          while (__stxr(v106 + 1, v105));
          v107 = HIDWORD(v304);
          v109 = v302;
          v108 = v303;
          v110 = v305;
          do
            v111 = __ldxr(v105);
          while (__stxr(v111 + 1, v105));
          do
            v112 = __ldxr(v105);
          while (__stxr(v112 + 1, v105));
        }
        else
        {
          v107 = HIDWORD(v304);
          v109 = v302;
          v108 = v303;
          v110 = v305;
        }
        v308[1] = v103;
        v309 = v104;
        v310 = v108;
        v311 = 4 * v107;
        v312 = v109;
        v313 = 4;
        v314 = v110;
        if (v104)
        {
          v123 = (unint64_t *)&v104->__shared_owners_;
          do
            v124 = __ldaxr(v123);
          while (__stlxr(v124 - 1, v123));
          if (!v124)
          {
            ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
            std::__shared_weak_count::__release_weak(v104);
          }
          do
            v125 = __ldaxr(v123);
          while (__stlxr(v125 - 1, v123));
          if (!v125)
          {
            ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
            std::__shared_weak_count::__release_weak(v104);
          }
        }
        BYTE8(v335) = 0;
        LOBYTE(v337) = 0;
        v338[0] = 0;
        LOBYTE(v339) = 0;
        LOBYTE(v340) = 1;
        v341 = 0;
        sub_22432B21C((uint64_t)v308, 3u, (uint64_t)&v316);
        sub_2232C1348(a2 + 224, (uint64_t)&v316);
        v126 = v317;
        if (v317)
        {
          v127 = (unint64_t *)&v317->__shared_owners_;
          do
            v128 = __ldaxr(v127);
          while (__stlxr(v128 - 1, v127));
          if (!v128)
          {
            ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
            std::__shared_weak_count::__release_weak(v126);
          }
        }
        v129 = v309;
        if (v309)
        {
          v130 = (unint64_t *)&v309->__shared_owners_;
          do
            v131 = __ldaxr(v130);
          while (__stlxr(v131 - 1, v130));
          if (!v131)
          {
            ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
            std::__shared_weak_count::__release_weak(v129);
          }
        }
        if (v307)
        {
          v299 = &off_24EC27198;
          v132 = v301;
          if (v301)
          {
            v133 = (unint64_t *)&v301->__shared_owners_;
            do
              v134 = __ldaxr(v133);
            while (__stlxr(v134 - 1, v133));
            if (!v134)
            {
              ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
              std::__shared_weak_count::__release_weak(v132);
            }
          }
        }
        goto LABEL_205;
      }
    }
    ((void (*)(__int128 *, _BYTE *))off_24EC5FFD0[v102])(&v316, v338);
    goto LABEL_152;
  }
  *(_QWORD *)&v316 = &off_24EC1F958;
  sub_2231B3FDC((uint64_t)&v316 + 8);
  sub_22416BD7C((uint64_t)&v335, (uint64_t)&v316, 0);
  v113 = v317;
  if (v317)
  {
    v114 = (unint64_t *)&v317->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  LODWORD(v337) = 0;
  sub_223BD17F8((uint64_t)&v316, a1, (uint64_t)&v335);
  sub_22416C400((uint64_t)&v335, (uint64_t)v308);
  *(_QWORD *)&v316 = &off_24EC21040;
  sub_2232C1A28((uint64_t)v308, (uint64_t *)&v316 + 1);
  LOBYTE(v322) = 1;
  sub_2232C1C50(a2 + 224, (uint64_t)&v316);
  if ((_BYTE)v322)
  {
    *(_QWORD *)&v316 = &off_24EC21040;
    v116 = v317;
    if (v317)
    {
      v117 = (unint64_t *)&v317->__shared_owners_;
      do
        v118 = __ldaxr(v117);
      while (__stlxr(v118 - 1, v117));
      if (!v118)
      {
        ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
        std::__shared_weak_count::__release_weak(v116);
      }
    }
  }
  v119 = v309;
  if (v309)
  {
    v120 = (unint64_t *)&v309->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
      v122 = v344;
      if ((_DWORD)v344 == -1)
        goto LABEL_205;
      goto LABEL_176;
    }
  }
  v122 = v344;
  if ((_DWORD)v344 != -1)
LABEL_176:
    ((void (*)(__int128 *, _BYTE *))off_24EC5FFD0[v122])(&v316, v338);
LABEL_205:
  sub_223BD17F8((uint64_t)&v335, a1, a2 + 288);
  sub_223BD17F8((uint64_t)&v335, a1, a2 + 392);
LABEL_206:
  if (v12 <= 3)
  {
    LOBYTE(v335) = 0;
    LOBYTE(v340) = 0;
    sub_223BD1308(a1, (uint64_t)&v335);
    if ((_BYTE)v340)
    {
      *(_QWORD *)&v335 = &off_24EC21328;
      v135 = v336;
      if (v336)
      {
        v136 = (unint64_t *)&v336->__shared_owners_;
        do
          v137 = __ldaxr(v136);
        while (__stlxr(v137 - 1, v136));
        if (!v137)
        {
          ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
          std::__shared_weak_count::__release_weak(v135);
        }
      }
    }
  }
  v138 = a1[6];
  v139 = a1[7];
  v5 = v139 >= v138;
  v140 = v139 - v138;
  if (!v5)
    v140 = 0;
  if (v140 <= 3)
  {
    v273 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(v273, "Not enough data to read");
    __cxa_throw(v273, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  v141 = *(_DWORD *)(a1[3] + v138);
  a1[6] = v138 + 4;
  sub_223BD1164(a1, a2 + 504);
  if (v141 >= 2)
  {
    sub_223BD1308(a1, a2 + 568);
    goto LABEL_295;
  }
  LOBYTE(v316) = 0;
  LOBYTE(v322) = 0;
  sub_223BD14AC(a1, (uint64_t)&v316);
  if (!(_BYTE)v322)
    goto LABEL_295;
  v299 = &off_24EC1F8C8;
  v142 = (char *)*((_QWORD *)&v316 + 1);
  v143 = v317;
  if (v317)
  {
    v144 = (unint64_t *)&v317->__shared_owners_;
    do
      v145 = __ldxr(v144);
    while (__stxr(v145 + 1, v144));
    v146 = v320;
    v148 = v318;
    v147 = (uint64_t)v319;
    v149 = (__int16)v321;
    do
      v150 = __ldxr(v144);
    while (__stxr(v150 + 1, v144));
    do
      v151 = __ldxr(v144);
    while (__stxr(v151 + 1, v144));
  }
  else
  {
    v146 = v320;
    v148 = v318;
    v147 = (uint64_t)v319;
    v149 = (__int16)v321;
  }
  v300 = v142;
  v301 = v143;
  v302 = v147;
  LODWORD(v303) = 4 * v146;
  v304 = v148;
  v305 = 4;
  v306 = v149;
  if (v143)
  {
    v152 = (unint64_t *)&v143->__shared_owners_;
    do
      v153 = __ldaxr(v152);
    while (__stlxr(v153 - 1, v152));
    if (!v153)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
    do
      v154 = __ldaxr(v152);
    while (__stlxr(v154 - 1, v152));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  BYTE8(v335) = 0;
  LOBYTE(v337) = 0;
  v338[0] = 0;
  LOBYTE(v339) = 0;
  LOBYTE(v340) = 1;
  v341 = 0;
  sub_22432B21C((uint64_t)&v299, 3u, (uint64_t)v308);
  sub_2232C1348(a2 + 568, (uint64_t)v308);
  v155 = v309;
  if (v309)
  {
    v156 = (unint64_t *)&v309->__shared_owners_;
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
  }
  v158 = v301;
  if (!v301)
    goto LABEL_483;
  v159 = (unint64_t *)&v301->__shared_owners_;
  do
    v160 = __ldaxr(v159);
  while (__stlxr(v160 - 1, v159));
  if (!v160)
  {
    ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
    std::__shared_weak_count::__release_weak(v158);
    if (!(_BYTE)v322)
      goto LABEL_295;
  }
  else
  {
LABEL_483:
    if (!(_BYTE)v322)
      goto LABEL_295;
  }
  *(_QWORD *)&v316 = &off_24EC27198;
  v161 = v317;
  if (!v317)
    goto LABEL_295;
  v162 = (unint64_t *)&v317->__shared_owners_;
  do
    v163 = __ldaxr(v162);
  while (__stlxr(v163 - 1, v162));
  if (v163)
  {
LABEL_295:
    v164 = a2 + 632;
    if (a3 <= 4)
      goto LABEL_296;
    goto LABEL_250;
  }
  ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
  std::__shared_weak_count::__release_weak(v161);
  v164 = a2 + 632;
  if (a3 <= 4)
  {
LABEL_296:
    sub_223BD0FC0(a1, v164);
    goto LABEL_297;
  }
LABEL_250:
  v165 = a1[6];
  v166 = a1[7];
  v5 = v166 >= v165;
  v167 = v166 - v165;
  if (!v5)
    v167 = 0;
  if (v167 <= 3)
  {
    v282 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(v282, "Not enough data to read");
    __cxa_throw(v282, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  v168 = *(_DWORD *)(a1[3] + v165);
  a1[6] = v165 + 4;
  sub_223BD0FC0(a1, v164);
  v169 = a1[7];
  v170 = a1[6];
  if (v169 <= v170)
  {
    v283 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(v283, "Not enough data to read");
    __cxa_throw(v283, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  v171 = a1[3];
  v172 = *(unsigned __int8 *)(v171 + v170);
  v173 = v170 + 1;
  a1[6] = v173;
  if (v172)
  {
    if (!*(_BYTE *)(a2 + 724))
    {
      *(_DWORD *)(a2 + 720) = 0;
      *(_BYTE *)(a2 + 724) = 1;
    }
    v5 = v169 >= v173;
    v174 = v169 - v173;
    if (!v5)
      v174 = 0;
    if (v174 <= 3)
    {
      v284 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_223198268(v284, "Not enough data to read");
      __cxa_throw(v284, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
    }
    *(_DWORD *)(a2 + 720) = *(_DWORD *)(v171 + v173);
    v173 = a1[6] + 4;
    a1[6] = v173;
  }
  else if (*(_BYTE *)(a2 + 724))
  {
    *(_BYTE *)(a2 + 724) = 0;
  }
  if (v168 >= 2)
  {
    v175 = a1[7];
    if (v175 <= v173)
    {
      v285 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_223198268(v285, "Not enough data to read");
      __cxa_throw(v285, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
    }
    v176 = (void **)(a2 + 728);
    v177 = *(unsigned __int8 *)(a1[3] + v173);
    v178 = v173 + 1;
    a1[6] = v178;
    if (v177)
    {
      if (!*(_BYTE *)(a2 + 752))
      {
        *v176 = 0;
        *(_QWORD *)(a2 + 736) = 0;
        *(_QWORD *)(a2 + 744) = 0;
        *(_BYTE *)(a2 + 752) = 1;
        v178 = a1[6];
        v175 = a1[7];
      }
      v179 = v175 - v178;
      if (v175 < v178)
        v179 = 0;
      if (v179 <= 7)
      {
        v287 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_223198268(v287, "Not enough data to read");
        __cxa_throw(v287, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
      }
      v180 = *(_QWORD *)(a1[3] + v178);
      v181 = v178 + 8;
      a1[6] = v181;
      v182 = *(char **)(a2 + 736);
      v183 = *(char **)(a2 + 728);
      v184 = (v182 - v183) >> 1;
      if (v180 <= v184)
      {
        if (v180 < v184)
        {
          v182 = &v183[2 * v180];
          *(_QWORD *)(a2 + 736) = v182;
        }
      }
      else
      {
        sub_2232C5090(a2 + 728, v180 - v184);
        v183 = *(char **)(a2 + 728);
        v182 = *(char **)(a2 + 736);
        v181 = a1[6];
        v175 = a1[7];
      }
      v186 = v182 - v183;
      v187 = v175 - v181;
      if (v175 < v181)
        v187 = 0;
      if (v187 < v186)
      {
        v288 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_223198268(v288, "Not enough data to read span");
        __cxa_throw(v288, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
      }
      memcpy(v183, (const void *)(a1[3] + v181), v182 - v183);
      a1[6] += v186;
    }
    else if (*(_BYTE *)(a2 + 752))
    {
      v185 = *v176;
      if (*v176)
      {
        *(_QWORD *)(a2 + 736) = v185;
        operator delete(v185);
      }
      *(_BYTE *)(a2 + 752) = 0;
    }
    sub_223BD274C(a1, a2 + 760);
    sub_223BD274C(a1, a2 + 768);
    if (v168 != 2)
    {
      sub_223BD274C(a1, a2 + 776);
      if (v168 >= 4)
      {
        sub_223BD2844(a1, a2 + 784);
        if (v168 != 4)
        {
          v188 = a1[6];
          v189 = a1[7];
          if (v189 <= v188)
          {
            v293 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_223198268(v293, "Not enough data to read");
            __cxa_throw(v293, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
          }
          v190 = *(unsigned __int8 *)(a1[3] + v188);
          v191 = v188 + 1;
          a1[6] = v188 + 1;
          if (v190)
          {
            v192 = (_OWORD *)(a2 + 800);
            if (!*(_BYTE *)(a2 + 836))
            {
              *(_DWORD *)(a2 + 832) = 0;
              *v192 = 0u;
              *(_OWORD *)(a2 + 816) = 0u;
              *(_BYTE *)(a2 + 836) = 1;
              v191 = a1[6];
              v189 = a1[7];
            }
            v5 = v189 >= v191;
            v193 = v189 - v191;
            if (!v5)
              v193 = 0;
            if (v193 <= 0x23)
            {
              v294 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              sub_223198268(v294, "Not enough data to read span");
              __cxa_throw(v294, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
            }
            v194 = (__int128 *)(a1[3] + v191);
            v195 = *v194;
            v196 = v194[1];
            *(_DWORD *)(a2 + 832) = *((_DWORD *)v194 + 8);
            *v192 = v195;
            *(_OWORD *)(a2 + 816) = v196;
            a1[6] += 36;
          }
          else if (*(_BYTE *)(a2 + 836))
          {
            *(_BYTE *)(a2 + 836) = 0;
          }
        }
      }
    }
  }
LABEL_297:
  sub_223BD1164(a1, a2 + 840);
  v197 = a1[6];
  v198 = a1[7];
  v5 = v198 >= v197;
  v199 = v198 - v197;
  if (!v5)
    v199 = 0;
  if (v199 <= 3)
  {
    v274 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(v274, "Not enough data to read");
    __cxa_throw(v274, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  a1[6] = v197 + 4;
  LOBYTE(v335) = 0;
  LOBYTE(v345) = 0;
  sub_223BD1650(a1, (uint64_t)&v335);
  v200 = v345;
  if ((_BYTE)v345)
  {
    sub_22416C400((uint64_t)&v335, (uint64_t)v308);
    *(_QWORD *)&v316 = &off_24EC28A18;
    sub_2232C59F4((uint64_t)v308, (uint64_t *)&v316 + 1);
    v201 = 1;
  }
  else
  {
    v201 = 0;
    LOBYTE(v316) = 0;
  }
  LOBYTE(v325) = v201;
  sub_2232C5C1C(a2 + 904, (uint64_t)&v316);
  if (!(_BYTE)v325)
    goto LABEL_308;
  *(_QWORD *)&v316 = &off_24EC28A18;
  v202 = v317;
  if (!v317)
    goto LABEL_308;
  v203 = (unint64_t *)&v317->__shared_owners_;
  do
    v204 = __ldaxr(v203);
  while (__stlxr(v204 - 1, v203));
  if (!v204)
  {
    ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
    std::__shared_weak_count::__release_weak(v202);
    if (!v200)
      goto LABEL_313;
  }
  else
  {
LABEL_308:
    if (!v200)
      goto LABEL_313;
  }
  v205 = v309;
  if (v309)
  {
    v206 = (unint64_t *)&v309->__shared_owners_;
    do
      v207 = __ldaxr(v206);
    while (__stlxr(v207 - 1, v206));
    if (!v207)
    {
      ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
      std::__shared_weak_count::__release_weak(v205);
      if (!(_BYTE)v345)
        goto LABEL_316;
      goto LABEL_314;
    }
  }
LABEL_313:
  if (!(_BYTE)v345)
    goto LABEL_316;
LABEL_314:
  if ((_DWORD)v344 != -1)
    ((void (*)(__int128 *, _BYTE *))off_24EC5FFD0[v344])(&v316, v338);
LABEL_316:
  sub_223BD0FC0(a1, a2 + 992);
  v208 = a1[6];
  if (a1[7] <= v208)
  {
    v275 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(v275, "Not enough data to read");
    __cxa_throw(v275, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  *(_BYTE *)(a2 + 1080) = *(_BYTE *)(a1[3] + v208);
  v209 = a1[7];
  v210 = a1[6] + 1;
  a1[6] = v210;
  v5 = v209 >= v210;
  v211 = v209 - v210;
  if (!v5)
    v211 = 0;
  if (v211 <= 0xB)
  {
    v276 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(v276, "Not enough data to read span");
    __cxa_throw(v276, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  v212 = a1[3] + v210;
  v213 = *(_QWORD *)v212;
  *(_DWORD *)(a2 + 1092) = *(_DWORD *)(v212 + 8);
  *(_QWORD *)(a2 + 1084) = v213;
  v214 = a1[6];
  v215 = a1[7];
  a1[6] = v214 + 12;
  v5 = v215 >= v214 + 12;
  v216 = v215 - (v214 + 12);
  if (!v5)
    v216 = 0;
  if (v216 <= 7)
  {
    v277 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(v277, "Not enough data to read");
    __cxa_throw(v277, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  v217 = *(_QWORD *)(a1[3] + v214 + 12);
  a1[6] = v214 + 20;
  *(_QWORD *)(a2 + 1136) = v217;
  sub_223BD5AE8((uint64_t)&v335, a1, (_QWORD *)(a2 + 1144));
  v218 = a1[7];
  v219 = a1[6];
  v5 = v218 >= v219;
  v220 = v218 - v219;
  if (!v5)
    v220 = 0;
  if (v220 <= 0x7F)
  {
    v278 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(v278, "Not enough data to read span");
    __cxa_throw(v278, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  v221 = (__int128 *)(a1[3] + v219);
  v222 = *v221;
  v223 = v221[1];
  v224 = v221[2];
  *(_OWORD *)(a2 + 1232) = v221[3];
  *(_OWORD *)(a2 + 1216) = v224;
  *(_OWORD *)(a2 + 1200) = v223;
  *(_OWORD *)(a2 + 1184) = v222;
  v225 = v221[4];
  v226 = v221[5];
  v227 = v221[6];
  *(_OWORD *)(a2 + 1296) = v221[7];
  *(_OWORD *)(a2 + 1280) = v227;
  *(_OWORD *)(a2 + 1264) = v226;
  *(_OWORD *)(a2 + 1248) = v225;
  v228 = a1[6];
  v229 = v228 + 128;
  a1[6] = v228 + 128;
  if (a3 == 1)
  {
    LOBYTE(v335) = 0;
    v353 = 0;
    sub_223BD6078(a1, (uint64_t)&v335);
    if (v353)
    {
      v230 = *(unsigned __int8 *)(a2 + 1512);
      *(_OWORD *)(a2 + 1312) = v335;
      *(_DWORD *)(a2 + 1328) = (_DWORD)v336;
      v231 = (char **)(a2 + 1336);
      if (v230)
      {
        sub_2232C6B24(v231, (char **)&v337);
        *(_BYTE *)(a2 + 1504) = v352;
        if (!v353)
          goto LABEL_430;
LABEL_376:
        if (__p)
        {
          v351 = __p;
          operator delete(__p);
        }
        if (v348)
        {
          v349 = v348;
          operator delete(v348);
        }
        if (v346)
        {
          v347 = v346;
          operator delete(v346);
        }
        if (v344)
        {
          v345 = v344;
          operator delete(v344);
        }
        if (v342)
        {
          v343 = v342;
          operator delete(v342);
        }
        if (v339)
        {
          v340 = v339;
          operator delete(v339);
        }
        if (v337)
        {
          *(_QWORD *)v338 = v337;
          operator delete(v337);
        }
        goto LABEL_430;
      }
      sub_2232C6D24(v231, (uint64_t)&v337);
      v251 = v352;
      *(_BYTE *)(a2 + 1512) = 1;
      *(_BYTE *)(a2 + 1504) = v251;
      if (v353)
        goto LABEL_376;
    }
LABEL_430:
    v259 = a1[6];
    if (a1[7] <= v259)
    {
      v281 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_223198268(v281, "Not enough data to read");
      __cxa_throw(v281, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
    }
    v260 = *(unsigned __int8 *)(a1[3] + v259);
    a1[6] = v259 + 1;
    if (v260)
    {
      v261 = (_OWORD *)(a2 + 1096);
      if (!*(_BYTE *)(a2 + 1128))
      {
        *v261 = 0u;
        *(_OWORD *)(a2 + 1112) = 0u;
        *(_BYTE *)(a2 + 1128) = 1;
      }
      sub_223BD675C(a1, (uint64_t)v261);
    }
    else if (*(_BYTE *)(a2 + 1128))
    {
      v262 = *(_QWORD *)(a2 + 1104);
      if (v262)
      {
        v263 = *(_QWORD *)(a2 + 1112);
        v264 = *(void **)(a2 + 1104);
        if (v263 != v262)
        {
          v265 = *(_QWORD *)(a2 + 1112);
          do
          {
            v267 = *(void **)(v265 - 24);
            v265 -= 24;
            v266 = v267;
            if (v267)
            {
              *(_QWORD *)(v263 - 16) = v266;
              operator delete(v266);
            }
            v263 = v265;
          }
          while (v265 != v262);
          v264 = *(void **)(a2 + 1104);
        }
        *(_QWORD *)(a2 + 1112) = v262;
        operator delete(v264);
      }
      *(_BYTE *)(a2 + 1128) = 0;
    }
    goto LABEL_447;
  }
  if (a3 > 6)
  {
    sub_223BD6078(a1, a2 + 1312);
  }
  else
  {
    v299 = 0;
    v300 = 0;
    v301 = 0;
    v232 = a1[7];
    v5 = v232 >= v229;
    v233 = v232 - v229;
    if (!v5)
      v233 = 0;
    if (v233 <= 7)
    {
      v286 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v286, "Not enough data to read");
      v286->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
      __cxa_throw(v286, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
    }
    v234 = *(_QWORD *)(a1[3] + v229);
    a1[6] = v228 + 136;
    if (v234)
    {
      sub_2232C71E0((uint64_t *)&v299, v234);
      v235 = (char *)v299;
      v236 = v300;
      if (v300 != v299)
      {
        v237 = 200 * ((v300 - (_BYTE *)v299) / 200);
        do
        {
          sub_223BD6158(a1, (uint64_t)v235);
          v235 += 200;
          v237 -= 200;
        }
        while (v237);
        v235 = (char *)v299;
        v236 = v300;
      }
      if (v235 != v236)
      {
        v316 = 0uLL;
        v317 = 0;
        sub_2232C7578((uint64_t *)&v316, 0x8F5C28F5C28F5C29 * ((v236 - v235) >> 3));
        v238 = (char *)v299;
        v239 = v300;
        v315 = &v316;
        if (v299 != v300)
        {
          do
          {
            LOBYTE(v335) = *v238;
            *(_WORD *)((char *)&v335 + 1) = *(_WORD *)(v238 + 1);
            DWORD1(v335) = *((_DWORD *)v238 + 1);
            *((_QWORD *)&v335 + 1) = *((_QWORD *)v238 + 1);
            LODWORD(v336) = *((_DWORD *)v238 + 4);
            v240 = v238 + 24;
            sub_223C7574C((char ***)v238 + 3, (uint64_t)&v337);
            v352 = v240[168];
            sub_2232C77CC((uint64_t **)&v315, (uint64_t)&v335);
            if (__p)
            {
              v351 = __p;
              operator delete(__p);
            }
            if (v348)
            {
              v349 = v348;
              operator delete(v348);
            }
            if (v346)
            {
              v347 = v346;
              operator delete(v346);
            }
            if (v344)
            {
              v345 = v344;
              operator delete(v344);
            }
            if (v342)
            {
              v343 = v342;
              operator delete(v342);
            }
            if (v339)
            {
              v340 = v339;
              operator delete(v339);
            }
            if (v337)
            {
              *(_QWORD *)v338 = v337;
              operator delete(v337);
            }
            v238 = v240 + 176;
          }
          while (v240 + 176 != v239);
        }
        *(_OWORD *)v295 = v316;
        v296 = v317;
        sub_223C2A714((uint64_t *)v295, (uint64_t)&v316);
        LOBYTE(v335) = v316;
        *(_WORD *)((char *)&v335 + 1) = *(_WORD *)((char *)&v316 + 1);
        DWORD1(v335) = DWORD1(v316);
        *((_QWORD *)&v335 + 1) = *((_QWORD *)&v316 + 1);
        LODWORD(v336) = (_DWORD)v317;
        sub_223C75208((uint64_t)&v337, (char **)&v318);
        v352 = v334;
        sub_2232C0648(a2 + 1312, &v335);
        if (__p)
        {
          v351 = __p;
          operator delete(__p);
        }
        if (v348)
        {
          v349 = v348;
          operator delete(v348);
        }
        if (v346)
        {
          v347 = v346;
          operator delete(v346);
        }
        if (v344)
        {
          v345 = v344;
          operator delete(v344);
        }
        if (v342)
        {
          v343 = v342;
          operator delete(v342);
        }
        if (v339)
        {
          v340 = v339;
          operator delete(v339);
        }
        if (v337)
        {
          *(_QWORD *)v338 = v337;
          operator delete(v337);
        }
        if (v332)
        {
          v333 = v332;
          operator delete(v332);
        }
        if (v330)
        {
          v331 = v330;
          operator delete(v330);
        }
        if (v328)
        {
          v329 = v328;
          operator delete(v328);
        }
        if (v326)
        {
          v327 = v326;
          operator delete(v326);
        }
        if (v324)
        {
          v325 = v324;
          operator delete(v324);
        }
        if (v321)
        {
          v322 = v321;
          operator delete(v321);
        }
        if (v318)
        {
          v319 = v318;
          operator delete(v318);
        }
        v252 = (char *)v295[0];
        if (v295[0])
        {
          v253 = (char *)v295[1];
          v254 = v295[0];
          if (v295[1] != v295[0])
          {
            do
            {
              v255 = v253 - 200;
              sub_223255CAC((uint64_t)(v253 - 176));
              v253 = v255;
            }
            while (v255 != v252);
            v254 = v295[0];
          }
          v295[1] = v252;
          operator delete(v254);
        }
        v236 = (char *)v299;
      }
      if (v236)
      {
        v256 = v300;
        v257 = v236;
        if (v300 != v236)
        {
          do
          {
            v258 = v256 - 200;
            sub_223255CAC((uint64_t)(v256 - 176));
            v256 = v258;
          }
          while (v258 != v236);
          v257 = v299;
        }
        v300 = v236;
        operator delete(v257);
      }
    }
    if (a3 <= 3)
      goto LABEL_430;
    if (a3 <= 4)
    {
LABEL_447:
      v268 = a1[6];
      v269 = a1[7];
      v5 = v269 >= v268;
      v270 = v269 - v268;
      if (!v5)
        v270 = 0;
      if (v270 <= 3)
      {
        v279 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_223198268(v279, "Not enough data to read");
        __cxa_throw(v279, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
      }
      a1[6] = v268 + 4;
      sub_223BD6C90(a1, a2 + 1520);
      if (a3 >= 3)
        sub_223BD6ECC(a1, a2 + 1656);
      return;
    }
  }
  sub_223BD6C90(a1, a2 + 1520);
  sub_223BD6ECC(a1, a2 + 1656);
  if (a3 >= 6)
  {
    v242 = a1[6];
    v241 = a1[7];
    v243 = v241 - v242;
    if (v241 < v242)
      v243 = 0;
    if (v243 <= 3)
    {
      v289 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_223198268(v289, "Not enough data to read");
      __cxa_throw(v289, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
    }
    v244 = v242 + 4;
    a1[6] = v244;
    if (v241 <= v244)
    {
      v290 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_223198268(v290, "Not enough data to read");
      __cxa_throw(v290, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
    }
    *(_BYTE *)(a2 + 1680) = *(_BYTE *)(a1[3] + v244);
    v245 = a1[6];
    v246 = v245 + 1;
    a1[6] = v245 + 1;
    if (a3 >= 8)
    {
      v247 = a1[7];
      if (v247 <= v246)
      {
        v291 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_223198268(v291, "Not enough data to read");
        __cxa_throw(v291, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
      }
      v248 = a1[3];
      v249 = *(unsigned __int8 *)(v248 + v246);
      v250 = v245 + 2;
      a1[6] = v250;
      if (v249)
      {
        if (!*(_BYTE *)(a2 + 1682))
          *(_WORD *)(a2 + 1681) = 256;
        if (v247 <= v250)
        {
          v292 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          sub_223198268(v292, "Not enough data to read");
          __cxa_throw(v292, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
        }
        *(_BYTE *)(a2 + 1681) = *(_BYTE *)(v248 + v250);
        ++a1[6];
      }
      else if (*(_BYTE *)(a2 + 1682))
      {
        *(_BYTE *)(a2 + 1682) = 0;
      }
    }
  }
}

void sub_223BD097C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD0990(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD09A4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD09B8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD09CC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD09E0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD09F4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD0A08(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD0A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  uint64_t v20;
  uint64_t v21;

  sub_223255CAC(v21);
  sub_223255CAC(v20);
  sub_2232C0794(&a9);
  sub_2232C0794(&a20);
  _Unwind_Resume(a1);
}

void sub_223BD0A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  sub_2232C0794(&a9);
  sub_2232C0794(&a20);
  _Unwind_Resume(a1);
}

void sub_223BD0A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37)
{
  sub_2232C0794(&a37);
  sub_2232C0794(&a20);
  _Unwind_Resume(a1);
}

void sub_223BD0F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37)
{
  uint64_t v37;

  sub_223255CAC(v37);
  sub_2232C0794(&a37);
  sub_2232C0794(&a20);
  _Unwind_Resume(a1);
}

void sub_223BD0FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_2232C0794((void **)va);
  _Unwind_Resume(a1);
}

void sub_223BD0FC0(_QWORD *a1, uint64_t a2)
{
  int v3;
  char v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE v11[16];
  std::__shared_weak_count *v12;
  uint64_t (**v13)();
  uint64_t v14;
  std::__shared_weak_count *v15;
  char v16;
  _BYTE v17[32];
  uint64_t v18;
  int v19;
  unsigned __int8 v20;

  v17[0] = 0;
  v20 = 0;
  sub_223BD1650(a1, (uint64_t)v17);
  v3 = v20;
  if (v20)
  {
    sub_22416C400((uint64_t)v17, (uint64_t)v11);
    v13 = &off_24EC28D40;
    sub_2232C495C((uint64_t)v11, &v14);
    v4 = 1;
  }
  else
  {
    v4 = 0;
    LOBYTE(v13) = 0;
  }
  v16 = v4;
  sub_2232C4B84(a2, (uint64_t)&v13);
  if (v16)
  {
    v13 = &off_24EC28D40;
    v5 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  if (!v3)
    goto LABEL_15;
  v8 = v12;
  if (!v12)
    goto LABEL_15;
  v9 = (unint64_t *)&v12->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v20)
      return;
  }
  else
  {
LABEL_15:
    if (!v20)
      return;
  }
  if (v19 != -1)
    ((void (*)(uint64_t (***)(), uint64_t *))off_24EC5FFD0[v19])(&v13, &v18);
}

void sub_223BD110C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_22319B358((uint64_t)va);
  sub_2232C17E0(v2 - 144);
  _Unwind_Resume(a1);
}

void sub_223BD1164(_QWORD *a1, uint64_t a2)
{
  int v3;
  char v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE v11[16];
  std::__shared_weak_count *v12;
  uint64_t (**v13)();
  uint64_t v14;
  std::__shared_weak_count *v15;
  char v16;
  _BYTE v17[32];
  uint64_t v18;
  int v19;
  unsigned __int8 v20;

  v17[0] = 0;
  v20 = 0;
  sub_223BD1650(a1, (uint64_t)v17);
  v3 = v20;
  if (v20)
  {
    sub_22416C400((uint64_t)v17, (uint64_t)v11);
    v13 = &off_24EC29028;
    sub_2232C529C((uint64_t)v11, &v14);
    v4 = 1;
  }
  else
  {
    v4 = 0;
    LOBYTE(v13) = 0;
  }
  v16 = v4;
  sub_2232C5628(a2, (uint64_t)&v13);
  if (v16)
  {
    v13 = &off_24EC29028;
    v5 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  if (!v3)
    goto LABEL_15;
  v8 = v12;
  if (!v12)
    goto LABEL_15;
  v9 = (unint64_t *)&v12->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v20)
      return;
  }
  else
  {
LABEL_15:
    if (!v20)
      return;
  }
  if (v19 != -1)
    ((void (*)(uint64_t (***)(), uint64_t *))off_24EC5FFD0[v19])(&v13, &v18);
}

void sub_223BD12B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  sub_22319B358((uint64_t)&a9);
  sub_2232C17E0((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_223BD1308(_QWORD *a1, uint64_t a2)
{
  int v3;
  char v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE v11[16];
  std::__shared_weak_count *v12;
  uint64_t (**v13)();
  uint64_t v14;
  std::__shared_weak_count *v15;
  char v16;
  _BYTE v17[32];
  uint64_t v18;
  int v19;
  unsigned __int8 v20;

  v17[0] = 0;
  v20 = 0;
  sub_223BD1650(a1, (uint64_t)v17);
  v3 = v20;
  if (v20)
  {
    sub_22416C400((uint64_t)v17, (uint64_t)v11);
    v13 = &off_24EC21040;
    sub_2232C1A28((uint64_t)v11, &v14);
    v4 = 1;
  }
  else
  {
    v4 = 0;
    LOBYTE(v13) = 0;
  }
  v16 = v4;
  sub_2232C1C50(a2, (uint64_t)&v13);
  if (v16)
  {
    v13 = &off_24EC21040;
    v5 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  if (!v3)
    goto LABEL_15;
  v8 = v12;
  if (!v12)
    goto LABEL_15;
  v9 = (unint64_t *)&v12->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v20)
      return;
  }
  else
  {
LABEL_15:
    if (!v20)
      return;
  }
  if (v19 != -1)
    ((void (*)(uint64_t (***)(), uint64_t *))off_24EC5FFD0[v19])(&v13, &v18);
}

void sub_223BD1454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  sub_22319B358((uint64_t)&a9);
  sub_2232C17E0((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_223BD14AC(_QWORD *a1, uint64_t a2)
{
  int v3;
  char v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE v11[16];
  std::__shared_weak_count *v12;
  uint64_t (**v13)();
  uint64_t v14;
  std::__shared_weak_count *v15;
  char v16;
  _BYTE v17[32];
  uint64_t v18;
  int v19;
  unsigned __int8 v20;

  v17[0] = 0;
  v20 = 0;
  sub_223BD1650(a1, (uint64_t)v17);
  v3 = v20;
  if (v20)
  {
    sub_22416C400((uint64_t)v17, (uint64_t)v11);
    v13 = &off_24EC28BC8;
    sub_2232C1E78((uint64_t)v11, &v14);
    v4 = 1;
  }
  else
  {
    v4 = 0;
    LOBYTE(v13) = 0;
  }
  v16 = v4;
  sub_2232C264C(a2, (uint64_t)&v13);
  if (v16)
  {
    v13 = &off_24EC28BC8;
    v5 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  if (!v3)
    goto LABEL_15;
  v8 = v12;
  if (!v12)
    goto LABEL_15;
  v9 = (unint64_t *)&v12->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v20)
      return;
  }
  else
  {
LABEL_15:
    if (!v20)
      return;
  }
  if (v19 != -1)
    ((void (*)(uint64_t (***)(), uint64_t *))off_24EC5FFD0[v19])(&v13, &v18);
}

void sub_223BD15F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  sub_22319B358((uint64_t)&a9);
  sub_2232C17E0((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_223BD1650(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::logic_error *exception;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;

  v2 = a1[6];
  if (a1[7] <= v2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  v5 = *(unsigned __int8 *)(a1[3] + v2);
  a1[6] = v2 + 1;
  if (v5)
  {
    if (!*(_BYTE *)(a2 + 104))
    {
      v11 = &off_24EC1F958;
      sub_2231B3FDC((uint64_t)&v12);
      sub_22416BD7C(a2, (uint64_t)&v11, 0);
      v6 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      *(_DWORD *)(a2 + 24) = 0;
      *(_BYTE *)(a2 + 104) = 1;
    }
    sub_223BD17F8((uint64_t)&v11, a1, a2);
  }
  else if (*(_BYTE *)(a2 + 104))
  {
    v9 = *(unsigned int *)(a2 + 96);
    if ((_DWORD)v9 != -1)
      ((void (*)(uint64_t (***)(), uint64_t))off_24EC5FFD0[v9])(&v11, a2 + 32);
    *(_DWORD *)(a2 + 96) = -1;
    *(_BYTE *)(a2 + 104) = 0;
  }
}

void sub_223BD17A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_223BD17F8(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;
  char v13;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_223BD18EC((uint64_t)&v13, a2, a3);
  }
  else
  {
    sub_2244FFA6C(a2);
    sub_223BD1B64(a2, a3);
    v10 = a2[12];
    v11 = a2[9];
    a2[6] = *(_QWORD *)(v10 - 8) + *(_QWORD *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_223BD18D8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD18EC(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[28];
  _BYTE v11[64];
  int v12;
  __int16 v13;
  __int128 v14;
  int v15;
  _BYTE v16[64];
  unsigned int v17;
  char v18;
  uint64_t v19;

  *(_QWORD *)v10 = &off_24EC1F958;
  sub_2231B3FDC((uint64_t)&v10[8]);
  sub_22416B680((uint64_t)&v13, (uint64_t)v10, 0);
  v5 = *(std::__shared_weak_count **)&v10[16];
  if (*(_QWORD *)&v10[16])
  {
    v6 = (unint64_t *)(*(_QWORD *)&v10[16] + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v15 = 0;
  sub_223BD23F8(a2, (uint64_t)&v13);
  *(_WORD *)v10 = v13;
  *(_OWORD *)&v10[8] = v14;
  v8 = v17;
  *(_DWORD *)&v10[24] = v15;
  v11[0] = 0;
  v12 = -1;
  if (v17 == -1)
  {
    *(_OWORD *)a3 = *(_OWORD *)v10;
    *(_OWORD *)(a3 + 12) = *(_OWORD *)&v10[12];
    v9 = *(unsigned int *)(a3 + 96);
    if ((_DWORD)v9 != -1)
    {
      ((void (*)(uint64_t *, uint64_t))off_24EC5FFD0[v9])(&v19, a3 + 32);
      *(_DWORD *)(a3 + 96) = -1;
    }
  }
  else
  {
    ((void (*)(char *, _BYTE *, _BYTE *))off_24EC60008[v17])(&v18, v11, v16);
    v12 = v8;
    *(_OWORD *)a3 = *(_OWORD *)v10;
    *(_OWORD *)(a3 + 12) = *(_OWORD *)&v10[12];
    v19 = a3 + 32;
    ((void (*)(uint64_t *))off_24EC60018[v8])(&v19);
  }
  if (v12 != -1)
    ((void (*)(uint64_t *, _BYTE *))off_24EC5FFD0[v12])(&v19, v11);
  if (v17 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_24EC5FFD0[v17])(v10, v16);
}

void sub_223BD1AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  sub_22319A588((uint64_t)&a9);
  sub_2231B55F0((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_223BD1ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, ...)
{
  uint64_t v14;
  uint64_t v15;
  va_list va;

  va_start(va, a14);
  if (a14 != -1)
    ((void (*)(uint64_t, uint64_t))off_24EC5FFD0[a14])(v15 - 56, v14);
  sub_2231B55F0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BD1B20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_223BD1B64(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  __int16 v8;
  uint64_t *v9;
  uint64_t v10;
  std::logic_error *exception;
  _BYTE v12[8];
  __int128 v13;
  __int128 v14;
  _BYTE v15[22];
  char v16;

  v2 = a1[6];
  v3 = a1[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  v8 = *(_WORD *)(a1[3] + v2);
  a1[6] = v2 + 2;
  *(_WORD *)a2 = v8;
  v9 = (uint64_t *)(a2 + 8);
  sub_223BD1E74((uint64_t)v12, a1, (_QWORD *)(a2 + 8));
  if (*(_WORD *)a2 == 1)
  {
    sub_22416B404(v9, *(_DWORD *)(a2 + 24));
    v10 = *(unsigned int *)(a2 + 96);
    if ((_DWORD)v10 != -1)
      ((void (*)(char *, uint64_t))off_24EC6D660[v10])(&v16, a2 + 32);
    *(_QWORD *)(a2 + 32) = &off_24EC1F958;
    *(_OWORD *)(a2 + 40) = v13;
    *(_OWORD *)(a2 + 56) = v14;
    *(_OWORD *)(a2 + 72) = *(_OWORD *)v15;
    *(_QWORD *)(a2 + 86) = *(_QWORD *)&v15[14];
    *(_DWORD *)(a2 + 96) = 1;
    sub_22416E278(a1, a2 + 32);
  }
  else
  {
    sub_223BD1CC4(a1, (unsigned __int16 *)a2);
  }
}

void sub_223BD1CB0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223BD1CC4(_QWORD *a1, unsigned __int16 *a2)
{
  int v4;
  uint64_t v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD v14[10];
  char v15;
  _QWORD v16[21];
  _BYTE v17[8];
  __int128 v18;
  __int128 v19;
  _BYTE v20[22];
  char v21;

  v4 = sub_22416E0BC(*a2);
  sub_223BD2124((uint64_t)v14, a1);
  sub_2231B3838(v16, v4, (uint64_t)v17);
  v5 = *((unsigned int *)a2 + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_14;
  if ((_DWORD)v5 != 1)
  {
    ((void (*)(char *, unsigned __int16 *))off_24EC5FFD0[v5])(&v21, a2 + 16);
LABEL_14:
    *((_QWORD *)a2 + 4) = &off_24EC1F958;
    *(_OWORD *)(a2 + 20) = v18;
    v18 = 0uLL;
    *(_OWORD *)(a2 + 28) = v19;
    *(_OWORD *)(a2 + 36) = *(_OWORD *)v20;
    *(_QWORD *)(a2 + 43) = *(_QWORD *)&v20[14];
    *((_DWORD *)a2 + 24) = 1;
    goto LABEL_15;
  }
  v6 = v18;
  v18 = 0uLL;
  v7 = (std::__shared_weak_count *)*((_QWORD *)a2 + 6);
  *(_OWORD *)(a2 + 20) = v6;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_OWORD *)(a2 + 28) = v19;
  *(_OWORD *)(a2 + 36) = *(_OWORD *)v20;
  *(_QWORD *)(a2 + 43) = *(_QWORD *)&v20[14];
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
LABEL_15:
  std::istream::~istream();
  v14[0] = MEMORY[0x24BEDB848] + 16;
  if (v15 < 0)
    operator delete((void *)v14[8]);
  return std::streambuf::~streambuf();
}

void sub_223BD1E60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2231B394C((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_223BD1E74(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  double result;
  uint64_t v11;
  uint64_t v12;
  std::logic_error *exception;
  __int128 v14;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    v14 = 1uLL;
    sub_223BD204C(a2, &v14);
    result = *(double *)&v14;
    *(_OWORD *)a3 = v14;
  }
  else
  {
    sub_2244FFA6C(a2);
    sub_223BD1F74(a2, a3);
    v11 = a2[12];
    v12 = a2[9];
    a2[6] = *(_QWORD *)(v11 - 8) + *(_QWORD *)(v12 - 8) + 8;
    a2[9] = v12 - 8;
    a2[12] = v11 - 8;
  }
  return result;
}

void sub_223BD1F60(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_223BD1F74(_QWORD *result, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  std::logic_error *exception;

  v3 = result[6];
  v2 = result[7];
  v4 = v2 - v3;
  if (v2 < v3)
    v4 = 0;
  if (v4 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(exception, "Not enough data to read");
    goto LABEL_10;
  }
  v5 = result[3];
  v6 = *(_QWORD *)(v5 + v3);
  v7 = v3 + 8;
  result[6] = v7;
  *a2 = v6;
  v8 = v2 >= v7;
  v9 = v2 - v7;
  if (!v8)
    v9 = 0;
  if (v9 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(exception, "Not enough data to read span");
LABEL_10:
    __cxa_throw(exception, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  a2[1] = *(_QWORD *)(v5 + v7);
  result[6] += 8;
  return result;
}

void sub_223BD2024(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD2038(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_223BD204C(_QWORD *result, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  std::logic_error *exception;

  v3 = result[6];
  v2 = result[7];
  v4 = v2 - v3;
  if (v2 < v3)
    v4 = 0;
  if (v4 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(exception, "Not enough data to read");
    goto LABEL_10;
  }
  v5 = result[3];
  v6 = *(_QWORD *)(v5 + v3);
  v7 = v3 + 8;
  result[6] = v7;
  *a2 = v6;
  v8 = v2 >= v7;
  v9 = v2 - v7;
  if (!v8)
    v9 = 0;
  if (v9 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(exception, "Not enough data to read span");
LABEL_10:
    __cxa_throw(exception, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  a2[1] = *(_QWORD *)(v5 + v7);
  result[6] += 8;
  return result;
}

void sub_223BD20FC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD2110(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223BD2124(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  void **v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  std::string::size_type v11;
  std::string *p_dst;
  unint64_t v13;
  unint64_t v14;
  std::string::size_type v15;
  std::logic_error *exception;
  std::logic_error *v18;
  std::string __dst;

  v4 = std::streambuf::basic_streambuf();
  *(_QWORD *)v4 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(v4 + 64) = 0u;
  v5 = (void **)(v4 + 64);
  v6 = MEMORY[0x24BEDB820];
  *(_OWORD *)(v4 + 80) = 0u;
  *(_QWORD *)(v4 + 104) = v6 + 24;
  *(_DWORD *)(v4 + 96) = 24;
  *(_QWORD *)(v4 + 120) = v6 + 64;
  *(_QWORD *)(v4 + 112) = 0;
  std::ios_base::init((std::ios_base *)(v4 + 120), (void *)a1);
  *(_QWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = -1;
  v7 = a2[6];
  v8 = a2[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  v11 = *(_QWORD *)(a2[3] + v7);
  a2[6] = v7 + 8;
  memset(&__dst, 0, sizeof(__dst));
  if (v11 && (std::string::append(&__dst, v11, 0), SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0))
  {
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if (!__dst.__r_.__value_.__r.__words[0])
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      p_dst = 0;
    }
  }
  else
  {
    p_dst = &__dst;
  }
  v13 = a2[6];
  v14 = a2[7];
  v9 = v14 >= v13;
  v15 = v14 - v13;
  if (!v9)
    v15 = 0;
  if (v15 < v11)
  {
    v18 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v18, "Not enough data to read binary blob");
    v18->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(v18, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  memcpy(p_dst, (const void *)(a2[3] + v13), v11);
  a2[6] += v11;
  if (*(char *)(a1 + 87) < 0)
    operator delete(*v5);
  *(std::string *)v5 = __dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
  __dst.__r_.__value_.__s.__data_[0] = 0;
  sub_2231B5488(a1);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return a1;
}

void sub_223BD2358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  std::istream::~istream();
  sub_2231A01E4(v15);
  _Unwind_Resume(a1);
}

void sub_223BD23F8(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  __int16 v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  std::logic_error *exception;
  __int128 v12;
  __int128 v13;
  _BYTE v14[22];
  char v15;

  v2 = a1[6];
  v3 = a1[7];
  v4 = v3 - v2;
  if (v3 < v2)
    v4 = 0;
  if (v4 <= 1)
    goto LABEL_12;
  v7 = *(_WORD *)(a1[3] + v2);
  a1[6] = v2 + 2;
  *(_WORD *)a2 = v7;
  v8 = v3 >= v2 + 2;
  v9 = v3 - (v2 + 2);
  if (!v8)
    v9 = 0;
  if (v9 <= 3)
  {
LABEL_12:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  a1[6] = v2 + 6;
  sub_223BD204C(a1, (_QWORD *)(a2 + 8));
  if (*(_WORD *)a2 == 1)
  {
    sub_22416B268((uint64_t *)(a2 + 8), *(_DWORD *)(a2 + 24));
    v10 = *(unsigned int *)(a2 + 96);
    if ((_DWORD)v10 != -1)
      ((void (*)(char *, uint64_t))off_24EC6D660[v10])(&v15, a2 + 32);
    *(_QWORD *)(a2 + 32) = &off_24EC1F958;
    *(_OWORD *)(a2 + 40) = v12;
    *(_OWORD *)(a2 + 56) = v13;
    *(_OWORD *)(a2 + 72) = *(_OWORD *)v14;
    *(_QWORD *)(a2 + 86) = *(_QWORD *)&v14[14];
    *(_DWORD *)(a2 + 96) = 1;
    sub_22416E278(a1, a2 + 32);
  }
  else
  {
    sub_223BD259C(a1, (unsigned __int16 *)a2);
  }
}

void sub_223BD2574(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD2588(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223BD259C(_QWORD *a1, unsigned __int16 *a2)
{
  int v4;
  uint64_t v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD v14[10];
  char v15;
  _QWORD v16[21];
  _BYTE v17[8];
  __int128 v18;
  __int128 v19;
  _BYTE v20[22];
  char v21;

  v4 = sub_22416E0BC(*a2);
  sub_223BD2124((uint64_t)v14, a1);
  sub_2231B3838(v16, v4, (uint64_t)v17);
  v5 = *((unsigned int *)a2 + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_14;
  if ((_DWORD)v5 != 1)
  {
    ((void (*)(char *, unsigned __int16 *))off_24EC5FFD0[v5])(&v21, a2 + 16);
LABEL_14:
    *((_QWORD *)a2 + 4) = &off_24EC1F958;
    *(_OWORD *)(a2 + 20) = v18;
    v18 = 0uLL;
    *(_OWORD *)(a2 + 28) = v19;
    *(_OWORD *)(a2 + 36) = *(_OWORD *)v20;
    *(_QWORD *)(a2 + 43) = *(_QWORD *)&v20[14];
    *((_DWORD *)a2 + 24) = 1;
    goto LABEL_15;
  }
  v6 = v18;
  v18 = 0uLL;
  v7 = (std::__shared_weak_count *)*((_QWORD *)a2 + 6);
  *(_OWORD *)(a2 + 20) = v6;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_OWORD *)(a2 + 28) = v19;
  *(_OWORD *)(a2 + 36) = *(_OWORD *)v20;
  *(_QWORD *)(a2 + 43) = *(_QWORD *)&v20[14];
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
LABEL_15:
  std::istream::~istream();
  v14[0] = MEMORY[0x24BEDB848] + 16;
  if (v15 < 0)
    operator delete((void *)v14[8]);
  return std::streambuf::~streambuf();
}

void sub_223BD2738(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2231B394C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_223BD274C(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  std::logic_error *exception;

  v3 = result[6];
  v2 = result[7];
  if (v2 <= v3)
    goto LABEL_12;
  v4 = result[3];
  v5 = *(unsigned __int8 *)(v4 + v3);
  v6 = v3 + 1;
  result[6] = v6;
  if (v5)
  {
    if (!*(_BYTE *)(a2 + 4))
    {
      *(_DWORD *)a2 = 0;
      *(_BYTE *)(a2 + 4) = 1;
    }
    v7 = v2 >= v6;
    v8 = v2 - v6;
    if (!v7)
      v8 = 0;
    if (v8 > 3)
    {
      *(_DWORD *)a2 = *(_DWORD *)(v4 + v6);
      result[6] += 4;
      return result;
    }
LABEL_12:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  if (*(_BYTE *)(a2 + 4))
    *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void sub_223BD281C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD2830(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD2844(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  std::logic_error *exception;
  char v12;

  v2 = a1[6];
  v3 = a1[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  v8 = *(_DWORD *)(a1[3] + v2);
  a1[6] = v2 + 4;
  if (v8 <= 1)
  {
    sub_223BD2938((uint64_t)&v12, a1, a2);
  }
  else
  {
    sub_2244FFA6C(a1);
    sub_223BD2AC0(a1, a2);
    v9 = a1[12];
    v10 = a1[9];
    a1[6] = *(_QWORD *)(v9 - 8) + *(_QWORD *)(v10 - 8) + 8;
    a1[9] = v10 - 8;
    a1[12] = v9 - 8;
  }
}

void sub_223BD2924(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD2938(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;

  *((_QWORD *)&v16 + 1) = 0;
  v17 = 0;
  *(_QWORD *)&v16 = (char *)&v16 + 8;
  sub_224530B6C(&v16, &v18);
  v15 = v18;
  sub_22323DF84((uint64_t)&v16, *((char **)&v16 + 1));
  sub_223BD5754(a2, (uint64_t)&v15);
  sub_224518820(&v16, (uint64_t)&v15);
  v5 = v16;
  v16 = 0uLL;
  v6 = *(std::__shared_weak_count **)(a3 + 8);
  *(_OWORD *)a3 = v5;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_223BD2A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223BD2A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223BD2AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, char *a12)
{
  sub_22323DF84((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

void sub_223BD2AC0(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void **v29;
  void **v30;
  void *v31;
  std::logic_error *exception;
  void *v33[2];
  void *__p[2];
  __int128 v35;
  __int128 v36;

  *(_OWORD *)__p = 0u;
  v35 = 0u;
  *(_OWORD *)v33 = 0u;
  sub_223BCE828(a1, (uint64_t)v33);
  v5 = a1[6];
  v4 = a1[7];
  v6 = v4 >= v5;
  v7 = v4 - v5;
  if (!v6)
    v7 = 0;
  if (v7 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  v8 = *(_QWORD *)(a1[3] + v5);
  a1[6] = v5 + 8;
  v9 = (char *)v35;
  v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (unint64_t)__p[1]) >> 3);
  v11 = v8 - v10;
  if (v8 <= v10)
  {
    if (v8 >= v10)
    {
      v12 = (char *)v35;
    }
    else
    {
      v12 = (char *)__p[1] + 24 * v8;
      while (v9 != v12)
      {
        v13 = (std::__shared_weak_count *)*((_QWORD *)v9 - 1);
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(p_shared_owners);
          while (__stlxr(v15 - 1, p_shared_owners));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v13->__on_zero_shared)(v13, v11);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        v9 -= 24;
      }
      *(_QWORD *)&v35 = v12;
    }
  }
  else
  {
    sub_2231B7814((uint64_t *)&__p[1], v11);
    v12 = (char *)v35;
  }
  *(_QWORD *)&v36 = 0xAAAAAAAAAAAAAAABLL * ((v12 - (char *)__p[1]) >> 3);
  *((void **)&v36 + 1) = __p[1];
  sub_223BD2F5C(a1, &v36);
  sub_22451907C((uint64_t *)v33, (void ***)&v36);
  v16 = v36;
  v36 = 0uLL;
  v17 = *(std::__shared_weak_count **)(a2 + 8);
  *(_OWORD *)a2 = v16;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
  if (*((_QWORD *)&v36 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = (char *)__p[1];
  if (__p[1])
  {
    v24 = (char *)v35;
    v25 = __p[1];
    if ((void *)v35 != __p[1])
    {
      do
      {
        v26 = (std::__shared_weak_count *)*((_QWORD *)v24 - 1);
        if (v26)
        {
          v27 = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        v24 -= 24;
      }
      while (v24 != v23);
      v25 = __p[1];
    }
    *(_QWORD *)&v35 = v23;
    operator delete(v25);
  }
  v29 = (void **)v33[0];
  if (v33[0])
  {
    v30 = (void **)v33[1];
    v31 = v33[0];
    if (v33[1] != v33[0])
    {
      do
      {
        if (*((char *)v30 - 1) < 0)
          operator delete(*(v30 - 3));
        v30 -= 3;
      }
      while (v30 != v29);
      v31 = v33[0];
    }
    v33[1] = v29;
    operator delete(v31);
  }
}

void sub_223BD2D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;

  __cxa_free_exception(v9);
  sub_2231A6210(&a9);
  _Unwind_Resume(a1);
}

void sub_223BD2D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_2231A6210(&a9);
  _Unwind_Resume(a1);
}

void sub_223BD2DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_2231A6210(&a9);
  _Unwind_Resume(a1);
}

void sub_223BD2DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_2231A6210(&a9);
  _Unwind_Resume(a1);
}

void sub_223BD2DCC(_QWORD *a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  std::logic_error *exception;
  char v23;

  v3 = a1[6];
  v2 = a1[7];
  v4 = v2 >= v3;
  v5 = v2 - v3;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  v8 = *(_QWORD *)(a1[3] + v3);
  a1[6] = v3 + 8;
  v9 = *a2;
  v10 = a2[1];
  v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - *a2) >> 3);
  v12 = v8 - v11;
  if (v8 > v11)
  {
    sub_2231B7814(a2, v12);
    v15 = a2;
    v13 = *a2;
    v14 = v15[1];
    v16 = v14 - v13;
    if (v14 == v13)
      return;
    goto LABEL_19;
  }
  if (v8 >= v11)
  {
    v13 = *a2;
    v16 = v10 - v13;
    if (v10 == v13)
      return;
    goto LABEL_19;
  }
  v17 = v9 + 24 * v8;
  while (v10 != v17)
  {
    v18 = *(std::__shared_weak_count **)(v10 - 8);
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *, unint64_t))v18->__on_zero_shared)(v18, v12);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v10 -= 24;
  }
  a2[1] = v17;
  v13 = *a2;
  v16 = v17 - v13;
  if (v17 != v13)
  {
LABEL_19:
    v21 = 24 * (v16 / 24);
    do
    {
      sub_223BD3074((uint64_t)&v23, a1, v13);
      v13 += 24;
      v21 -= 24;
    }
    while (v21);
  }
}

void sub_223BD2F48(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD2F5C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  unsigned int v11;
  std::logic_error *exception;
  char v13;

  if (*a2)
  {
    v3 = a2[1];
    v4 = 24 * *a2;
    do
    {
      while (1)
      {
        v7 = a1[6];
        v8 = a1[7];
        v9 = v8 >= v7;
        v10 = v8 - v7;
        if (!v9)
          v10 = 0;
        if (v10 <= 3)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          sub_223198268(exception, "Not enough data to read");
          __cxa_throw(exception, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
        }
        v11 = *(_DWORD *)(a1[3] + v7);
        a1[6] = v7 + 4;
        if (v11 <= 1)
          break;
        sub_2244FFA6C(a1);
        sub_223BD3320(a1, v3);
        v5 = a1[12];
        v6 = a1[9];
        a1[6] = *(_QWORD *)(v5 - 8) + *(_QWORD *)(v6 - 8) + 8;
        a1[9] = v6 - 8;
        a1[12] = v5 - 8;
        v3 += 24;
        v4 -= 24;
        if (!v4)
          return;
      }
      sub_223BD3168((uint64_t)&v13, a1, v3);
      v3 += 24;
      v4 -= 24;
    }
    while (v4);
  }
}

void sub_223BD3060(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD3074(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;
  char v13;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_223BD3168((uint64_t)&v13, a2, a3);
  }
  else
  {
    sub_2244FFA6C(a2);
    sub_223BD3320(a2, a3, 2);
    v10 = a2[12];
    v11 = a2[9];
    a2[6] = *(_QWORD *)(v10 - 8) + *(_QWORD *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_223BD3154(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD3168(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  __int16 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  __int16 v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  v20 = 0;
  v21 = 0;
  sub_223BD4B80(a2, (uint64_t)&v19);
  v4 = v19;
  sub_2231B9338(&v22, (uint64_t)&v20);
  sub_2231B9338(&v18, (uint64_t)&v22);
  v5 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  *(_WORD *)a3 = v4;
  v8 = v18;
  v18 = 0uLL;
  v9 = *(std::__shared_weak_count **)(a3 + 16);
  *(_OWORD *)(a3 + 8) = v8;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v21;
  if (v21)
  {
    v16 = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_223BD32DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va1);
  sub_223197300((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BD32F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_223197300((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BD330C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_223197300((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BD3320(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v7;
  int v8;
  unint64_t v9;
  _DWORD *v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  __int128 v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  __int128 v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  char *v63;
  char *v64;
  void *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  char *v69;
  char *v70;
  void *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::logic_error *exception;
  void *v76[2];
  void *v77;
  void *v78[2];
  uint64_t v79;
  __int128 v80;
  void *v81[2];
  void *__p;
  void *v83;
  _DWORD *v84;

  v2 = a1[6];
  v3 = a1[7];
  v4 = v3 - v2;
  if (v3 < v2)
    v4 = 0;
  if (v4 <= 1)
  {
LABEL_113:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  v7 = a1[3];
  v8 = *(unsigned __int16 *)(v7 + v2);
  v9 = v2 + 2;
  a1[6] = v2 + 2;
  *(_WORD *)a2 = v8;
  switch(v8)
  {
    case 0:
      LOBYTE(v81[0]) = 7;
      LOBYTE(v81[1]) = 7;
      v10 = operator new(4uLL);
      __p = v10;
      *v10 = 0;
      v83 = v10 + 1;
      v84 = v10 + 1;
      sub_223BD3BF0((uint64_t)v78, a1, v81);
      sub_224532630((uint64_t)v78, (uint64_t)&v81[1]);
      v80 = *(_OWORD *)v78;
      sub_2231B844C(v76, (uint64_t)&v80);
      v11 = *(_OWORD *)v76;
      v76[0] = 0;
      v76[1] = 0;
      v12 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v11;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v15 = (std::__shared_weak_count *)v76[1];
      if (v76[1])
      {
        v16 = (unint64_t *)((char *)v76[1] + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v18 = (std::__shared_weak_count *)*((_QWORD *)&v80 + 1);
      if (*((_QWORD *)&v80 + 1))
      {
        v19 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v83 = __p;
        operator delete(__p);
      }
      return;
    case 1:
      v81[0] = 0;
      v81[1] = 0;
      __p = 0;
      sub_2244FFDBC(a1, (uint64_t)v81);
      sub_224527BAC((uint64_t)v81, (CFStringRef *)v76);
      sub_2231B855C(v78, (uint64_t)v76);
      v34 = *(_OWORD *)v78;
      v78[0] = 0;
      v78[1] = 0;
      v35 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v34;
      if (v35)
      {
        v36 = (unint64_t *)&v35->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      v38 = (std::__shared_weak_count *)v78[1];
      if (v78[1])
      {
        v39 = (unint64_t *)((char *)v78[1] + 8);
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      v41 = (std::__shared_weak_count *)v76[1];
      if (v76[1])
      {
        v42 = (unint64_t *)((char *)v76[1] + 8);
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      if (SHIBYTE(__p) < 0)
        operator delete(v81[0]);
      return;
    case 2:
      if (v3 <= v9)
        goto LABEL_113;
      LOBYTE(v76[0]) = *(_BYTE *)(v7 + v9);
      a1[6] = v2 + 3;
      sub_22452795C(v76, (std::__shared_weak_count_vtbl **)v78);
      sub_2231B866C(v81, (uint64_t)v78);
      v44 = *(_OWORD *)v81;
      v81[0] = 0;
      v81[1] = 0;
      v45 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v44;
      if (v45)
      {
        v46 = (unint64_t *)&v45->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      v48 = (std::__shared_weak_count *)v81[1];
      if (v81[1])
      {
        v49 = (unint64_t *)((char *)v81[1] + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v31 = (std::__shared_weak_count *)v78[1];
      if (v78[1])
      {
        v51 = (unint64_t *)((char *)v78[1] + 8);
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
LABEL_74:
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      return;
    case 3:
      v78[0] = 0;
      v78[1] = 0;
      v79 = 0;
      sub_223BD2DCC(a1, (uint64_t *)v78);
      v81[1] = 0;
      __p = 0;
      v81[0] = 0;
      sub_2231B90C8((uint64_t)v81, 0xAAAAAAAAAAAAAAABLL * (((char *)v78[1] - (char *)v78[0]) >> 3));
      sub_223BD4A18((uint64_t)v78[0], (uint64_t)v78[1], (uint64_t)v81);
      *(_OWORD *)v76 = *(_OWORD *)v81;
      v77 = __p;
      sub_2231B9590((uint64_t *)v76, (CFMutableArrayRef *)&v80);
      sub_2231B877C(v81, (uint64_t)&v80);
      v53 = *(_OWORD *)v81;
      v81[0] = 0;
      v81[1] = 0;
      v54 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v53;
      if (v54)
      {
        v55 = (unint64_t *)&v54->__shared_owners_;
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      v57 = (std::__shared_weak_count *)v81[1];
      if (v81[1])
      {
        v58 = (unint64_t *)((char *)v81[1] + 8);
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
      v60 = (std::__shared_weak_count *)*((_QWORD *)&v80 + 1);
      if (*((_QWORD *)&v80 + 1))
      {
        v61 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      v63 = (char *)v76[0];
      if (v76[0])
      {
        v64 = (char *)v76[1];
        v65 = v76[0];
        if (v76[1] != v76[0])
        {
          do
          {
            v66 = (std::__shared_weak_count *)*((_QWORD *)v64 - 1);
            if (v66)
            {
              v67 = (unint64_t *)&v66->__shared_owners_;
              do
                v68 = __ldaxr(v67);
              while (__stlxr(v68 - 1, v67));
              if (!v68)
              {
                ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                std::__shared_weak_count::__release_weak(v66);
              }
            }
            v64 -= 16;
          }
          while (v64 != v63);
          v65 = v76[0];
        }
        v76[1] = v63;
        operator delete(v65);
      }
      v69 = (char *)v78[0];
      if (v78[0])
      {
        v70 = (char *)v78[1];
        v71 = v78[0];
        if (v78[1] != v78[0])
        {
          do
          {
            v72 = (std::__shared_weak_count *)*((_QWORD *)v70 - 1);
            if (v72)
            {
              v73 = (unint64_t *)&v72->__shared_owners_;
              do
                v74 = __ldaxr(v73);
              while (__stlxr(v74 - 1, v73));
              if (!v74)
              {
                ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                std::__shared_weak_count::__release_weak(v72);
              }
            }
            v70 -= 24;
          }
          while (v70 != v69);
          v71 = v78[0];
        }
        v78[1] = v69;
        operator delete(v71);
      }
      return;
    case 4:
      v81[1] = 0;
      __p = 0;
      v81[0] = &v81[1];
      sub_224530B6C(v81, v78);
      *(_OWORD *)v76 = *(_OWORD *)v78;
      sub_22323DF84((uint64_t)v81, (char *)v81[1]);
      sub_223BD2844(a1, v76);
      sub_22319ED0C(v78, (uint64_t)v76);
      sub_2231B8924(v81, (uint64_t)v78);
      v21 = *(_OWORD *)v81;
      v81[0] = 0;
      v81[1] = 0;
      v22 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v21;
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      v25 = (std::__shared_weak_count *)v81[1];
      if (v81[1])
      {
        v26 = (unint64_t *)((char *)v81[1] + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      v28 = (std::__shared_weak_count *)v78[1];
      if (v78[1])
      {
        v29 = (unint64_t *)((char *)v78[1] + 8);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      v31 = (std::__shared_weak_count *)v76[1];
      if (v76[1])
      {
        v32 = (unint64_t *)((char *)v76[1] + 8);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
          goto LABEL_74;
      }
      return;
    default:
      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Foundation/FoundationIO/include/Kit/FoundationIO/DictionaryRefIO.h", 250, (uint64_t)"", 0, (uint64_t)"invalid value type identifier", 29, (void (*)(void **))sub_22457406C);
      abort();
  }
}

void sub_223BD3A84(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD3A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  sub_223167354((uint64_t)&a17);
  sub_2231B888C(&a9);
  sub_2231A62F0(&a13);
  _Unwind_Resume(a1);
}

void sub_223BD3ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  sub_2231B888C(&a9);
  sub_2231A62F0(&a13);
  _Unwind_Resume(a1);
}

void sub_223BD3AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, void *);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_2231B888C((void **)va1);
  sub_2231A62F0((void **)va);
  _Unwind_Resume(a1);
}

void sub_223BD3AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_2231A62F0((void **)va);
  _Unwind_Resume(a1);
}

void sub_223BD3B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BD3B20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25)
{
  sub_223167354((uint64_t)&a9);
  if (a24 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_223BD3BDC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD3BF0(uint64_t a1, _QWORD *a2, _BYTE *a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  std::logic_error *exception;
  char v15;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
    goto LABEL_8;
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 > 1)
  {
    sub_2244FFA6C(a2);
    v10 = a2[6];
    if (a2[7] > v10)
    {
      v11 = *(unsigned __int8 *)(a2[3] + v10);
      a2[6] = v10 + 1;
      *a3 = v11;
      sub_223BD3F18(v11, a2, (uint64_t)a3);
      v12 = a2[12];
      v13 = a2[9];
      a2[6] = *(_QWORD *)(v12 - 8) + *(_QWORD *)(v13 - 8) + 8;
      a2[9] = v13 - 8;
      a2[12] = v12 - 8;
      return;
    }
LABEL_8:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  sub_223BD3D30((uint64_t)&v15, a2, (uint64_t)a3);
}

void sub_223BD3D08(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD3D1C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD3D30(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  char *v5;
  unint64_t v6;
  int v7;
  char v8;
  char v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  void *v14;
  _QWORD *v15;
  std::logic_error *exception;
  char v17[8];
  char v18;
  char *v19;
  char *v20;
  _DWORD *v21;

  v17[0] = 7;
  v18 = 7;
  v5 = (char *)operator new(4uLL);
  v19 = v5;
  *(_DWORD *)v5 = 0;
  v20 = v5 + 4;
  v21 = v5 + 4;
  v6 = a2[6];
  if (a2[7] <= v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  v7 = *(unsigned __int8 *)(a2[3] + v6);
  a2[6] = v6 + 1;
  v17[0] = v7;
  sub_223BD4498(v7, a2, (uint64_t)v17);
  v8 = v17[0];
  v9 = v18;
  v10 = v19;
  v11 = v20 - v19;
  if (v20 == v19)
  {
    v13 = 0;
    v12 = 0;
    *(_BYTE *)a3 = v17[0];
    *(_BYTE *)(a3 + 8) = v9;
    v15 = (_QWORD *)(a3 + 16);
    v14 = *(void **)(a3 + 16);
    if (v14)
    {
LABEL_5:
      *(_QWORD *)(a3 + 24) = v14;
      operator delete(v14);
      *v15 = 0;
      v15[1] = 0;
      v15[2] = 0;
      v10 = v19;
    }
  }
  else
  {
    if ((v11 & 0x8000000000000000) != 0)
      sub_2240336DC();
    v12 = (char *)operator new(v20 - v19);
    v13 = &v12[v11];
    memcpy(v12, v10, v11);
    *(_BYTE *)a3 = v8;
    *(_BYTE *)(a3 + 8) = v9;
    v15 = (_QWORD *)(a3 + 16);
    v14 = *(void **)(a3 + 16);
    if (v14)
      goto LABEL_5;
  }
  *(_QWORD *)(a3 + 16) = v12;
  *(_QWORD *)(a3 + 24) = v13;
  *(_QWORD *)(a3 + 32) = v13;
  if (v10)
  {
    v20 = v10;
    operator delete(v10);
  }
}

void sub_223BD3EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  void *v17;

  __cxa_free_exception(v17);
  if (!__p)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223BD3F18(int a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v4;
  char v5;
  _BYTE *v6;
  void *v7;
  _QWORD *v8;
  _BYTE *v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  __int16 v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __int16 v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  std::logic_error *exception;

  switch(a1)
  {
    case 0:
      v4 = a2[6];
      if (a2[7] <= v4)
        goto LABEL_54;
      v5 = *(_BYTE *)(a2[3] + v4);
      a2[6] = v4 + 1;
      v6 = operator new(1uLL);
      *v6 = v5;
      v8 = (_QWORD *)(a3 + 16);
      v7 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 0;
      if (v7)
        goto LABEL_4;
      goto LABEL_5;
    case 1:
      v10 = a2[6];
      v11 = a2[7];
      v12 = v11 >= v10;
      v13 = v11 - v10;
      if (!v12)
        v13 = 0;
      if (v13 <= 1)
        goto LABEL_54;
      v14 = *(_WORD *)(a2[3] + v10);
      a2[6] = v10 + 2;
      v6 = operator new(2uLL);
      *(_WORD *)v6 = v14;
      v8 = (_QWORD *)(a3 + 16);
      v15 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 1;
      if (!v15)
        goto LABEL_29;
      goto LABEL_28;
    case 2:
      v16 = a2[6];
      v17 = a2[7];
      v12 = v17 >= v16;
      v18 = v17 - v16;
      if (!v12)
        v18 = 0;
      if (v18 <= 3)
        goto LABEL_54;
      v19 = *(_DWORD *)(a2[3] + v16);
      a2[6] = v16 + 4;
      v6 = operator new(4uLL);
      *(_DWORD *)v6 = v19;
      v8 = (_QWORD *)(a3 + 16);
      v20 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 2;
      if (!v20)
        goto LABEL_41;
      goto LABEL_40;
    case 3:
      v21 = a2[6];
      v22 = a2[7];
      v12 = v22 >= v21;
      v23 = v22 - v21;
      if (!v12)
        v23 = 0;
      if (v23 <= 7)
        goto LABEL_54;
      v24 = *(_QWORD *)(a2[3] + v21);
      a2[6] = v21 + 8;
      v6 = operator new(8uLL);
      *(_QWORD *)v6 = v24;
      v8 = (_QWORD *)(a3 + 16);
      v25 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 3;
      if (!v25)
        goto LABEL_35;
      goto LABEL_34;
    case 5:
      v26 = a2[6];
      if (a2[7] <= v26)
        goto LABEL_54;
      v27 = *(_BYTE *)(a2[3] + v26);
      a2[6] = v26 + 1;
      v6 = operator new(1uLL);
      *v6 = v27;
      v8 = (_QWORD *)(a3 + 16);
      v7 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 5;
      if (!v7)
        goto LABEL_5;
LABEL_4:
      *(_QWORD *)(a3 + 24) = v7;
      operator delete(v7);
      *v8 = 0;
      v8[1] = 0;
      v8[2] = 0;
LABEL_5:
      v9 = v6 + 1;
      break;
    case 6:
      v28 = a2[6];
      v29 = a2[7];
      v12 = v29 >= v28;
      v30 = v29 - v28;
      if (!v12)
        v30 = 0;
      if (v30 <= 1)
        goto LABEL_54;
      v31 = *(_WORD *)(a2[3] + v28);
      a2[6] = v28 + 2;
      v6 = operator new(2uLL);
      *(_WORD *)v6 = v31;
      v8 = (_QWORD *)(a3 + 16);
      v15 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 6;
      if (v15)
      {
LABEL_28:
        *(_QWORD *)(a3 + 24) = v15;
        operator delete(v15);
        *v8 = 0;
        v8[1] = 0;
        v8[2] = 0;
      }
LABEL_29:
      v9 = v6 + 2;
      break;
    case 7:
      v44 = a2[6];
      v45 = a2[7];
      v12 = v45 >= v44;
      v46 = v45 - v44;
      if (!v12)
        v46 = 0;
      if (v46 <= 3)
        goto LABEL_54;
      v47 = *(_DWORD *)(a2[3] + v44);
      a2[6] = v44 + 4;
      v6 = operator new(4uLL);
      *(_DWORD *)v6 = v47;
      v8 = (_QWORD *)(a3 + 16);
      v20 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 7;
      if (!v20)
        goto LABEL_41;
      goto LABEL_40;
    case 8:
      v32 = a2[6];
      v33 = a2[7];
      v12 = v33 >= v32;
      v34 = v33 - v32;
      if (!v12)
        v34 = 0;
      if (v34 <= 7)
        goto LABEL_54;
      v35 = *(_QWORD *)(a2[3] + v32);
      a2[6] = v32 + 8;
      v6 = operator new(8uLL);
      *(_QWORD *)v6 = v35;
      v8 = (_QWORD *)(a3 + 16);
      v25 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 8;
      if (v25)
        goto LABEL_34;
      goto LABEL_35;
    case 11:
      v36 = a2[6];
      v37 = a2[7];
      v12 = v37 >= v36;
      v38 = v37 - v36;
      if (!v12)
        v38 = 0;
      if (v38 <= 3)
        goto LABEL_54;
      v39 = *(_DWORD *)(a2[3] + v36);
      a2[6] = v36 + 4;
      v6 = operator new(4uLL);
      *(_DWORD *)v6 = v39;
      v8 = (_QWORD *)(a3 + 16);
      v20 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 11;
      if (v20)
      {
LABEL_40:
        *(_QWORD *)(a3 + 24) = v20;
        operator delete(v20);
        *v8 = 0;
        v8[1] = 0;
        v8[2] = 0;
      }
LABEL_41:
      v9 = v6 + 4;
      break;
    case 12:
      v40 = a2[6];
      v41 = a2[7];
      v12 = v41 >= v40;
      v42 = v41 - v40;
      if (!v12)
        v42 = 0;
      if (v42 <= 7)
      {
LABEL_54:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_223198268(exception, "Not enough data to read");
        __cxa_throw(exception, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
      }
      v43 = *(_QWORD *)(a2[3] + v40);
      a2[6] = v40 + 8;
      v6 = operator new(8uLL);
      *(_QWORD *)v6 = v43;
      v8 = (_QWORD *)(a3 + 16);
      v25 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 12;
      if (v25)
      {
LABEL_34:
        *(_QWORD *)(a3 + 24) = v25;
        operator delete(v25);
        *v8 = 0;
        v8[1] = 0;
        v8[2] = 0;
      }
LABEL_35:
      v9 = v6 + 8;
      break;
    default:
      sub_22454B274(a1);
  }
  *v8 = v6;
  *(_QWORD *)(a3 + 24) = v9;
  *(_QWORD *)(a3 + 32) = v9;
}

void sub_223BD43D0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD43E4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD43F8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD440C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD4420(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD4434(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD4448(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD445C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD4470(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD4484(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD4498(int a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v4;
  char v5;
  _BYTE *v6;
  void *v7;
  _QWORD *v8;
  _BYTE *v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  __int16 v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __int16 v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  std::logic_error *exception;

  switch(a1)
  {
    case 0:
      v4 = a2[6];
      if (a2[7] <= v4)
        goto LABEL_54;
      v5 = *(_BYTE *)(a2[3] + v4);
      a2[6] = v4 + 1;
      v6 = operator new(1uLL);
      *v6 = v5;
      v8 = (_QWORD *)(a3 + 16);
      v7 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 0;
      if (v7)
        goto LABEL_4;
      goto LABEL_5;
    case 1:
      v10 = a2[6];
      v11 = a2[7];
      v12 = v11 >= v10;
      v13 = v11 - v10;
      if (!v12)
        v13 = 0;
      if (v13 <= 1)
        goto LABEL_54;
      v14 = *(_WORD *)(a2[3] + v10);
      a2[6] = v10 + 2;
      v6 = operator new(2uLL);
      *(_WORD *)v6 = v14;
      v8 = (_QWORD *)(a3 + 16);
      v15 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 1;
      if (!v15)
        goto LABEL_29;
      goto LABEL_28;
    case 2:
      v16 = a2[6];
      v17 = a2[7];
      v12 = v17 >= v16;
      v18 = v17 - v16;
      if (!v12)
        v18 = 0;
      if (v18 <= 3)
        goto LABEL_54;
      v19 = *(_DWORD *)(a2[3] + v16);
      a2[6] = v16 + 4;
      v6 = operator new(4uLL);
      *(_DWORD *)v6 = v19;
      v8 = (_QWORD *)(a3 + 16);
      v20 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 2;
      if (!v20)
        goto LABEL_41;
      goto LABEL_40;
    case 3:
      v21 = a2[6];
      v22 = a2[7];
      v12 = v22 >= v21;
      v23 = v22 - v21;
      if (!v12)
        v23 = 0;
      if (v23 <= 7)
        goto LABEL_54;
      v24 = *(_QWORD *)(a2[3] + v21);
      a2[6] = v21 + 8;
      v6 = operator new(8uLL);
      *(_QWORD *)v6 = v24;
      v8 = (_QWORD *)(a3 + 16);
      v25 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 3;
      if (!v25)
        goto LABEL_35;
      goto LABEL_34;
    case 5:
      v26 = a2[6];
      if (a2[7] <= v26)
        goto LABEL_54;
      v27 = *(_BYTE *)(a2[3] + v26);
      a2[6] = v26 + 1;
      v6 = operator new(1uLL);
      *v6 = v27;
      v8 = (_QWORD *)(a3 + 16);
      v7 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 5;
      if (!v7)
        goto LABEL_5;
LABEL_4:
      *(_QWORD *)(a3 + 24) = v7;
      operator delete(v7);
      *v8 = 0;
      v8[1] = 0;
      v8[2] = 0;
LABEL_5:
      v9 = v6 + 1;
      break;
    case 6:
      v28 = a2[6];
      v29 = a2[7];
      v12 = v29 >= v28;
      v30 = v29 - v28;
      if (!v12)
        v30 = 0;
      if (v30 <= 1)
        goto LABEL_54;
      v31 = *(_WORD *)(a2[3] + v28);
      a2[6] = v28 + 2;
      v6 = operator new(2uLL);
      *(_WORD *)v6 = v31;
      v8 = (_QWORD *)(a3 + 16);
      v15 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 6;
      if (v15)
      {
LABEL_28:
        *(_QWORD *)(a3 + 24) = v15;
        operator delete(v15);
        *v8 = 0;
        v8[1] = 0;
        v8[2] = 0;
      }
LABEL_29:
      v9 = v6 + 2;
      break;
    case 7:
      v44 = a2[6];
      v45 = a2[7];
      v12 = v45 >= v44;
      v46 = v45 - v44;
      if (!v12)
        v46 = 0;
      if (v46 <= 3)
        goto LABEL_54;
      v47 = *(_DWORD *)(a2[3] + v44);
      a2[6] = v44 + 4;
      v6 = operator new(4uLL);
      *(_DWORD *)v6 = v47;
      v8 = (_QWORD *)(a3 + 16);
      v20 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 7;
      if (!v20)
        goto LABEL_41;
      goto LABEL_40;
    case 8:
      v32 = a2[6];
      v33 = a2[7];
      v12 = v33 >= v32;
      v34 = v33 - v32;
      if (!v12)
        v34 = 0;
      if (v34 <= 7)
        goto LABEL_54;
      v35 = *(_QWORD *)(a2[3] + v32);
      a2[6] = v32 + 8;
      v6 = operator new(8uLL);
      *(_QWORD *)v6 = v35;
      v8 = (_QWORD *)(a3 + 16);
      v25 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 8;
      if (v25)
        goto LABEL_34;
      goto LABEL_35;
    case 11:
      v36 = a2[6];
      v37 = a2[7];
      v12 = v37 >= v36;
      v38 = v37 - v36;
      if (!v12)
        v38 = 0;
      if (v38 <= 3)
        goto LABEL_54;
      v39 = *(_DWORD *)(a2[3] + v36);
      a2[6] = v36 + 4;
      v6 = operator new(4uLL);
      *(_DWORD *)v6 = v39;
      v8 = (_QWORD *)(a3 + 16);
      v20 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 11;
      if (v20)
      {
LABEL_40:
        *(_QWORD *)(a3 + 24) = v20;
        operator delete(v20);
        *v8 = 0;
        v8[1] = 0;
        v8[2] = 0;
      }
LABEL_41:
      v9 = v6 + 4;
      break;
    case 12:
      v40 = a2[6];
      v41 = a2[7];
      v12 = v41 >= v40;
      v42 = v41 - v40;
      if (!v12)
        v42 = 0;
      if (v42 <= 7)
      {
LABEL_54:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_223198268(exception, "Not enough data to read");
        __cxa_throw(exception, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
      }
      v43 = *(_QWORD *)(a2[3] + v40);
      a2[6] = v40 + 8;
      v6 = operator new(8uLL);
      *(_QWORD *)v6 = v43;
      v8 = (_QWORD *)(a3 + 16);
      v25 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 12;
      if (v25)
      {
LABEL_34:
        *(_QWORD *)(a3 + 24) = v25;
        operator delete(v25);
        *v8 = 0;
        v8[1] = 0;
        v8[2] = 0;
      }
LABEL_35:
      v9 = v6 + 8;
      break;
    default:
      sub_22454B274(a1);
  }
  *v8 = v6;
  *(_QWORD *)(a3 + 24) = v9;
  *(_QWORD *)(a3 + 32) = v9;
}

void sub_223BD4950(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD4964(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD4978(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD498C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD49A0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD49B4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD49C8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD49DC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD49F0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD4A04(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223BD4A18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _OWORD *v6;
  std::__shared_weak_count *v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  __int128 v17;

  if (a1 != a2)
  {
    for (i = a1; i != a2; i += 24)
    {
      sub_2231B9338(&v15, i + 8);
      sub_2231B9338(&v17, (uint64_t)&v15);
      v6 = *(_OWORD **)(a3 + 8);
      if ((unint64_t)v6 >= *(_QWORD *)(a3 + 16))
      {
        v8 = sub_2231B9448((char **)a3, (uint64_t)&v17);
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
        *(_QWORD *)(a3 + 8) = v8;
        if (!v9)
          goto LABEL_11;
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
          v7 = v16;
          if (v16)
          {
LABEL_12:
            v12 = (unint64_t *)&v7->__shared_owners_;
            do
              v13 = __ldaxr(v12);
            while (__stlxr(v13 - 1, v12));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
        }
        else
        {
LABEL_11:
          v7 = v16;
          if (v16)
            goto LABEL_12;
        }
      }
      else
      {
        *v6 = v17;
        v17 = 0uLL;
        *(_QWORD *)(a3 + 8) = v6 + 1;
        v7 = v16;
        if (v16)
          goto LABEL_12;
      }
    }
  }
  return a3;
}

void sub_223BD4B50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va1);
  sub_223197300((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BD4B6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223197300((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BD4B80(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v7;
  int v8;
  unint64_t v9;
  _DWORD *v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  unint64_t v24;
  uint64_t v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __int128 v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  _BYTE *v50;
  char *v51;
  int64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  __int128 v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  __int128 v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  char *v78;
  char *v79;
  void *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  char *v84;
  char *v85;
  void *v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::logic_error *v90;
  std::logic_error *exception;
  std::logic_error *v92;
  void *v93[2];
  void *v94;
  void *v95[2];
  uint64_t v96;
  __int128 v97;
  void *v98[2];
  void *__p;
  void *v100;
  _DWORD *v101;

  v2 = a1[6];
  v3 = a1[7];
  v4 = v3 - v2;
  if (v3 < v2)
    v4 = 0;
  if (v4 <= 1)
  {
LABEL_131:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  v7 = a1[3];
  v8 = *(unsigned __int16 *)(v7 + v2);
  v9 = v2 + 2;
  a1[6] = v2 + 2;
  *(_WORD *)a2 = v8;
  switch(v8)
  {
    case 0:
      LOBYTE(v98[0]) = 7;
      LOBYTE(v98[1]) = 7;
      v10 = operator new(4uLL);
      __p = v10;
      *v10 = 0;
      v100 = v10 + 1;
      v101 = v10 + 1;
      sub_223BD3BF0((uint64_t)v95, a1, v98);
      sub_224532630((uint64_t)v95, (uint64_t)&v98[1]);
      v97 = *(_OWORD *)v95;
      sub_2231B844C(v93, (uint64_t)&v97);
      v11 = *(_OWORD *)v93;
      v93[0] = 0;
      v93[1] = 0;
      v12 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v11;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v15 = (std::__shared_weak_count *)v93[1];
      if (v93[1])
      {
        v16 = (unint64_t *)((char *)v93[1] + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v18 = (std::__shared_weak_count *)*((_QWORD *)&v97 + 1);
      if (*((_QWORD *)&v97 + 1))
      {
        v19 = (unint64_t *)(*((_QWORD *)&v97 + 1) + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v100 = __p;
        operator delete(__p);
      }
      return;
    case 1:
      v98[0] = 0;
      v98[1] = 0;
      __p = 0;
      sub_2244FFDBC(a1, (uint64_t)v98);
      sub_224527BAC((uint64_t)v98, (CFStringRef *)v93);
      sub_2231B855C(v95, (uint64_t)v93);
      v58 = *(_OWORD *)v95;
      v95[0] = 0;
      v95[1] = 0;
      v59 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v58;
      if (v59)
      {
        v60 = (unint64_t *)&v59->__shared_owners_;
        do
          v61 = __ldaxr(v60);
        while (__stlxr(v61 - 1, v60));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
      }
      v62 = (std::__shared_weak_count *)v95[1];
      if (v95[1])
      {
        v63 = (unint64_t *)((char *)v95[1] + 8);
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
      }
      v65 = (std::__shared_weak_count *)v93[1];
      if (v93[1])
      {
        v66 = (unint64_t *)((char *)v93[1] + 8);
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      if (SHIBYTE(__p) < 0)
        operator delete(v98[0]);
      return;
    case 2:
      if (v3 <= v9)
        goto LABEL_131;
      LOBYTE(v93[0]) = *(_BYTE *)(v7 + v9);
      a1[6] = v2 + 3;
      sub_22452795C(v93, (std::__shared_weak_count_vtbl **)v95);
      sub_2231B866C(v98, (uint64_t)v95);
      v39 = *(_OWORD *)v98;
      v98[0] = 0;
      v98[1] = 0;
      v40 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v39;
      if (v40)
      {
        v41 = (unint64_t *)&v40->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      v43 = (std::__shared_weak_count *)v98[1];
      if (v98[1])
      {
        v44 = (unint64_t *)((char *)v98[1] + 8);
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      v36 = (std::__shared_weak_count *)v95[1];
      if (v95[1])
      {
        v46 = (unint64_t *)((char *)v95[1] + 8);
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
LABEL_60:
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      return;
    case 3:
      v95[0] = 0;
      v95[1] = 0;
      v96 = 0;
      v23 = v3 >= v9;
      v48 = v3 - v9;
      if (!v23)
        v48 = 0;
      if (v48 <= 7)
      {
        v90 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v90, "Not enough data to read");
        goto LABEL_130;
      }
      v49 = *(_QWORD *)(v7 + v9);
      a1[6] = v2 + 10;
      if (v49)
      {
        sub_2231BA090((uint64_t *)v95, v49);
        v51 = (char *)v95[0];
        v50 = v95[1];
        if (v95[1] != v95[0])
        {
          v52 = 24 * (((char *)v95[1] - (char *)v95[0]) / 24);
          while (1)
          {
            v53 = a1[6];
            v54 = a1[7];
            v23 = v54 >= v53;
            v55 = v54 - v53;
            if (!v23)
              v55 = 0;
            if (v55 <= 3)
              break;
            v56 = *(unsigned int *)(a1[3] + v53);
            a1[6] = v53 + 4;
            sub_223BD4B80(a1, v51, v56);
            v51 += 24;
            v52 -= 24;
            if (!v52)
            {
              v50 = v95[0];
              v57 = v95[1];
              goto LABEL_91;
            }
          }
          v90 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v90, "Not enough data to read");
LABEL_130:
          v90->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
          __cxa_throw(v90, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
        }
        v57 = v95[1];
      }
      else
      {
        v50 = 0;
        v57 = 0;
      }
LABEL_91:
      v98[0] = 0;
      v98[1] = 0;
      __p = 0;
      sub_2231B90C8((uint64_t)v98, 0xAAAAAAAAAAAAAAABLL * ((v57 - v50) >> 3));
      sub_223BD55EC((uint64_t)v95[0], (uint64_t)v95[1], (uint64_t)v98);
      *(_OWORD *)v93 = *(_OWORD *)v98;
      v94 = __p;
      sub_2231B9590((uint64_t *)v93, (CFMutableArrayRef *)&v97);
      sub_2231B877C(v98, (uint64_t)&v97);
      v68 = *(_OWORD *)v98;
      v98[0] = 0;
      v98[1] = 0;
      v69 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v68;
      if (v69)
      {
        v70 = (unint64_t *)&v69->__shared_owners_;
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }
      v72 = (std::__shared_weak_count *)v98[1];
      if (v98[1])
      {
        v73 = (unint64_t *)((char *)v98[1] + 8);
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 - 1, v73));
        if (!v74)
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
      }
      v75 = (std::__shared_weak_count *)*((_QWORD *)&v97 + 1);
      if (*((_QWORD *)&v97 + 1))
      {
        v76 = (unint64_t *)(*((_QWORD *)&v97 + 1) + 8);
        do
          v77 = __ldaxr(v76);
        while (__stlxr(v77 - 1, v76));
        if (!v77)
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
      }
      v78 = (char *)v93[0];
      if (v93[0])
      {
        v79 = (char *)v93[1];
        v80 = v93[0];
        if (v93[1] != v93[0])
        {
          do
          {
            v81 = (std::__shared_weak_count *)*((_QWORD *)v79 - 1);
            if (v81)
            {
              v82 = (unint64_t *)&v81->__shared_owners_;
              do
                v83 = __ldaxr(v82);
              while (__stlxr(v83 - 1, v82));
              if (!v83)
              {
                ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                std::__shared_weak_count::__release_weak(v81);
              }
            }
            v79 -= 16;
          }
          while (v79 != v78);
          v80 = v93[0];
        }
        v93[1] = v78;
        operator delete(v80);
      }
      v84 = (char *)v95[0];
      if (v95[0])
      {
        v85 = (char *)v95[1];
        v86 = v95[0];
        if (v95[1] != v95[0])
        {
          do
          {
            v87 = (std::__shared_weak_count *)*((_QWORD *)v85 - 1);
            if (v87)
            {
              v88 = (unint64_t *)&v87->__shared_owners_;
              do
                v89 = __ldaxr(v88);
              while (__stlxr(v89 - 1, v88));
              if (!v89)
              {
                ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                std::__shared_weak_count::__release_weak(v87);
              }
            }
            v85 -= 24;
          }
          while (v85 != v84);
          v86 = v95[0];
        }
        v95[1] = v84;
        operator delete(v86);
      }
      return;
    case 4:
      v98[1] = 0;
      __p = 0;
      v98[0] = &v98[1];
      sub_224530B6C(v98, v95);
      *(_OWORD *)v93 = *(_OWORD *)v95;
      sub_22323DF84((uint64_t)v98, (char *)v98[1]);
      v21 = a1[6];
      v22 = a1[7];
      v23 = v22 >= v21;
      v24 = v22 - v21;
      if (!v23)
        v24 = 0;
      if (v24 <= 3)
      {
        v92 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v92, "Not enough data to read");
        v92->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
        __cxa_throw(v92, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
      }
      v25 = *(unsigned int *)(a1[3] + v21);
      a1[6] = v21 + 4;
      sub_223BD5754(a1, v93, v25);
      sub_22319ED0C(v95, (uint64_t)v93);
      sub_2231B8924(v98, (uint64_t)v95);
      v26 = *(_OWORD *)v98;
      v98[0] = 0;
      v98[1] = 0;
      v27 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v26;
      if (v27)
      {
        v28 = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v30 = (std::__shared_weak_count *)v98[1];
      if (v98[1])
      {
        v31 = (unint64_t *)((char *)v98[1] + 8);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      v33 = (std::__shared_weak_count *)v95[1];
      if (v95[1])
      {
        v34 = (unint64_t *)((char *)v95[1] + 8);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v36 = (std::__shared_weak_count *)v93[1];
      if (v93[1])
      {
        v37 = (unint64_t *)((char *)v93[1] + 8);
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
          goto LABEL_60;
      }
      return;
    default:
      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Foundation/FoundationIO/include/Kit/FoundationIO/DictionaryRefIO.h", 250, (uint64_t)"", 0, (uint64_t)"invalid value type identifier", 29, (void (*)(void **))sub_22457406C);
      abort();
  }
}

void sub_223BD5444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  __cxa_free_exception(v9);
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223BD5460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25)
{
  void *v25;

  __cxa_free_exception(v25);
  sub_2231A62F0(&a13);
  _Unwind_Resume(a1);
}

void sub_223BD55C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_2231A62F0((void **)va);
  _Unwind_Resume(a1);
}

void sub_223BD55D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_2231A62F0((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223BD55EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _OWORD *v6;
  std::__shared_weak_count *v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  __int128 v17;

  if (a1 != a2)
  {
    for (i = a1; i != a2; i += 24)
    {
      sub_2231B9338(&v15, i + 8);
      sub_2231B9338(&v17, (uint64_t)&v15);
      v6 = *(_OWORD **)(a3 + 8);
      if ((unint64_t)v6 >= *(_QWORD *)(a3 + 16))
      {
        v8 = sub_2231B9448((char **)a3, (uint64_t)&v17);
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
        *(_QWORD *)(a3 + 8) = v8;
        if (!v9)
          goto LABEL_11;
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
          v7 = v16;
          if (v16)
          {
LABEL_12:
            v12 = (unint64_t *)&v7->__shared_owners_;
            do
              v13 = __ldaxr(v12);
            while (__stlxr(v13 - 1, v12));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
        }
        else
        {
LABEL_11:
          v7 = v16;
          if (v16)
            goto LABEL_12;
        }
      }
      else
      {
        *v6 = v17;
        v17 = 0uLL;
        *(_QWORD *)(a3 + 8) = v6 + 1;
        v7 = v16;
        if (v16)
          goto LABEL_12;
      }
    }
  }
  return a3;
}

void sub_223BD5724(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va1);
  sub_223197300((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BD5740(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223197300((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BD5754(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  int64_t v13;
  char *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  char *v29;
  char *v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  void **v35;
  void **v36;
  void *v37;
  std::logic_error *exception;
  __int128 v39;
  void *v40[2];
  void *__p[2];
  __int128 v42;

  *(_OWORD *)__p = 0u;
  v42 = 0u;
  *(_OWORD *)v40 = 0u;
  sub_223BCE828(a1, (uint64_t)v40);
  v5 = a1[6];
  v4 = a1[7];
  v6 = v4 >= v5;
  v7 = v4 - v5;
  if (!v6)
    v7 = 0;
  if (v7 <= 7)
    goto LABEL_54;
  v8 = *(_QWORD *)(a1[3] + v5);
  a1[6] = v5 + 8;
  v9 = (char *)v42;
  v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42 - (unint64_t)__p[1]) >> 3);
  v11 = v8 - v10;
  if (v8 > v10)
  {
    sub_2231BA090((uint64_t *)&__p[1], v11);
    v12 = (char *)__p[1];
    v13 = v42 - (unint64_t)__p[1];
    if ((void *)v42 == __p[1])
      goto LABEL_24;
    goto LABEL_19;
  }
  if (v8 >= v10)
  {
    v12 = (char *)__p[1];
    v13 = v42 - (unint64_t)__p[1];
    if ((void *)v42 == __p[1])
      goto LABEL_24;
    goto LABEL_19;
  }
  v14 = (char *)__p[1] + 24 * v8;
  while (v9 != v14)
  {
    v15 = (std::__shared_weak_count *)*((_QWORD *)v9 - 1);
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *, unint64_t))v15->__on_zero_shared)(v15, v11);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v9 -= 24;
  }
  *(_QWORD *)&v42 = v14;
  v12 = (char *)__p[1];
  v13 = v14 - (char *)__p[1];
  if (v14 != __p[1])
  {
LABEL_19:
    v18 = 24 * (v13 / 24);
    while (1)
    {
      v19 = a1[6];
      v20 = a1[7];
      v6 = v20 >= v19;
      v21 = v20 - v19;
      if (!v6)
        v21 = 0;
      if (v21 <= 3)
        break;
      a1[6] = v19 + 4;
      sub_223BD4B80(a1, (uint64_t)v12);
      v12 += 24;
      v18 -= 24;
      if (!v18)
        goto LABEL_24;
    }
LABEL_54:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
LABEL_24:
  sub_2245182E4((uint64_t *)v40, (void ***)&v39);
  v22 = v39;
  v39 = 0uLL;
  v23 = *(std::__shared_weak_count **)(a2 + 8);
  *(_OWORD *)a2 = v22;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = (char *)__p[1];
  if (__p[1])
  {
    v30 = (char *)v42;
    v31 = __p[1];
    if ((void *)v42 != __p[1])
    {
      do
      {
        v32 = (std::__shared_weak_count *)*((_QWORD *)v30 - 1);
        if (v32)
        {
          v33 = (unint64_t *)&v32->__shared_owners_;
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        v30 -= 24;
      }
      while (v30 != v29);
      v31 = __p[1];
    }
    *(_QWORD *)&v42 = v29;
    operator delete(v31);
  }
  v35 = (void **)v40[0];
  if (v40[0])
  {
    v36 = (void **)v40[1];
    v37 = v40[0];
    if (v40[1] != v40[0])
    {
      do
      {
        if (*((char *)v36 - 1) < 0)
          operator delete(*(v36 - 3));
        v36 -= 3;
      }
      while (v36 != v35);
      v37 = v40[0];
    }
    v40[1] = v35;
    operator delete(v37);
  }
}

void sub_223BD5A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;

  __cxa_free_exception(v11);
  sub_2231A6210(&a11);
  _Unwind_Resume(a1);
}

void sub_223BD5AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2231A6210((void **)va);
  _Unwind_Resume(a1);
}

void sub_223BD5AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2231A6210((void **)va);
  _Unwind_Resume(a1);
}

void sub_223BD5AE8(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;
  char v13;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_223BD5BDC((uint64_t)&v13, a2, (uint64_t)a3);
  }
  else
  {
    sub_2244FFA6C(a2);
    sub_223BD5E08(a2, a3);
    v10 = a2[12];
    v11 = a2[9];
    a2[6] = *(_QWORD *)(v10 - 8) + *(_QWORD *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_223BD5BC8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD5BDC(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  float32x2_t v7;
  float32x2_t *v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v16;
  float32x2_t v17;
  int32x2_t v18;
  int8x16_t v19;
  int8x16_t *v20;
  uint64_t v21;
  char *v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  int8x16_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  int8x16_t *v36;
  std::__shared_weak_count *v37;

  v33 = 0;
  v34 = 0;
  v35 = 0;
  v5 = (char *)operator new(0x78uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24EC6CCC0;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24EC20868;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 56) = v6;
  *(int32x4_t *)(v5 + 72) = v6;
  *(int32x4_t *)(v5 + 88) = v6;
  *((_DWORD *)v5 + 26) = 2143289344;
  *((_QWORD *)v5 + 14) = 0;
  v37 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24EC207B8;
  v36 = (int8x16_t *)(v5 + 24);
  sub_223BD5F40(a2, &v33);
  v7 = v35;
  v8 = (float32x2_t *)v36;
  v9 = v33;
  v10 = v34;
  __asm { FMOV            V2.2S, #1.0 }
  v16 = vdiv_f32(_D2, v33);
  v17 = vmul_f32(v16, vneg_f32(v34));
  v18 = vzip1_s32((int32x2_t)v33, (int32x2_t)v34);
  v19.i64[0] = v18.u32[0];
  v19.i64[1] = v18.u32[1];
  v36[1] = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)v33, (int32x2_t)v34), 0x20uLL), v19);
  v8[4] = v16;
  v8[5] = v17;
  v8[6].i32[0] = v9.i32[0];
  v8[7] = 0;
  v8[6].i32[1] = 0;
  v8[8].i32[0] = v9.i32[1];
  v8[8].i32[1] = 0;
  v8[9] = v10;
  v8[10].i32[0] = 1065353216;
  v8[11] = v7;
  v20 = v36;
  v32 = v36[1];
  v21 = v36[5].i64[1];
  v22 = (char *)operator new(0x78uLL);
  *((_QWORD *)v22 + 1) = 0;
  *((_QWORD *)v22 + 2) = 0;
  *(_QWORD *)v22 = &off_24EC6CE00;
  v23 = v20[1];
  *((_QWORD *)v22 + 4) = &off_24EC20868;
  *(int8x16_t *)(v22 + 40) = v23;
  *(int8x16_t *)(v22 + 56) = v20[2];
  v24 = v20[3];
  v25 = v20[4];
  *((_DWORD *)v22 + 26) = v20[5].i32[0];
  *(int8x16_t *)(v22 + 88) = v25;
  *(int8x16_t *)(v22 + 72) = v24;
  *((_QWORD *)v22 + 3) = &off_24EC207B8;
  *((_QWORD *)v22 + 14) = v21;
  *(int8x16_t *)a3 = v32;
  *(_QWORD *)(a3 + 16) = v21;
  *(_QWORD *)(a3 + 24) = v22 + 24;
  v26 = *(std::__shared_weak_count **)(a3 + 32);
  *(_QWORD *)(a3 + 32) = v22;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v37;
  if (v37)
  {
    v30 = (unint64_t *)&v37->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_223BD5DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_22365B530((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BD5DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_22365B530((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_223BD5E08(_QWORD *result, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
    goto LABEL_11;
  *a2 = *(_QWORD *)(result[3] + v2);
  v6 = result[7];
  v7 = result[6] + 8;
  result[6] = v7;
  v4 = v6 >= v7;
  v8 = v6 - v7;
  if (!v4)
    v8 = 0;
  if (v8 <= 7)
    goto LABEL_11;
  a2[1] = *(_QWORD *)(result[3] + v7);
  v9 = result[7];
  v10 = result[6] + 8;
  result[6] = v10;
  v4 = v9 >= v10;
  v11 = v9 - v10;
  if (!v4)
    v11 = 0;
  if (v11 <= 7)
  {
LABEL_11:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  a2[2] = *(_QWORD *)(result[3] + v10);
  result[6] += 8;
  return result;
}

void sub_223BD5F04(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD5F18(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD5F2C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_223BD5F40(_QWORD *result, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
    goto LABEL_11;
  *a2 = *(_QWORD *)(result[3] + v2);
  v6 = result[7];
  v7 = result[6] + 8;
  result[6] = v7;
  v4 = v6 >= v7;
  v8 = v6 - v7;
  if (!v4)
    v8 = 0;
  if (v8 <= 7)
    goto LABEL_11;
  a2[1] = *(_QWORD *)(result[3] + v7);
  v9 = result[7];
  v10 = result[6] + 8;
  result[6] = v10;
  v4 = v9 >= v10;
  v11 = v9 - v10;
  if (!v4)
    v11 = 0;
  if (v11 <= 7)
  {
LABEL_11:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  a2[2] = *(_QWORD *)(result[3] + v10);
  result[6] += 8;
  return result;
}

void sub_223BD603C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD6050(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD6064(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD6078(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  int v4;
  std::logic_error *exception;

  v2 = a1[6];
  if (a1[7] <= v2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  v4 = *(unsigned __int8 *)(a1[3] + v2);
  a1[6] = v2 + 1;
  if (v4)
  {
    if (!*(_BYTE *)(a2 + 200))
    {
      *(_QWORD *)(a2 + 192) = 0;
      *(_OWORD *)(a2 + 160) = 0u;
      *(_OWORD *)(a2 + 176) = 0u;
      *(_OWORD *)(a2 + 128) = 0u;
      *(_OWORD *)(a2 + 144) = 0u;
      *(_OWORD *)(a2 + 96) = 0u;
      *(_OWORD *)(a2 + 112) = 0u;
      *(_OWORD *)(a2 + 64) = 0u;
      *(_OWORD *)(a2 + 80) = 0u;
      *(_OWORD *)(a2 + 32) = 0u;
      *(_OWORD *)(a2 + 48) = 0u;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      *(_BYTE *)(a2 + 200) = 1;
    }
    sub_223BD6158(a1, a2);
  }
  else if (*(_BYTE *)(a2 + 200))
  {
    sub_223255CAC(a2 + 24);
    *(_BYTE *)(a2 + 200) = 0;
  }
}

void sub_223BD6144(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD6158(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  std::logic_error *exception;

  v3 = a1[6];
  v2 = a1[7];
  v4 = v2 - v3;
  if (v2 < v3)
    v4 = 0;
  if (v4 <= 3)
    goto LABEL_27;
  v6 = a1[3];
  v7 = *(_DWORD *)(v6 + v3);
  v8 = v3 + 4;
  a1[6] = v8;
  if (v2 <= v8)
    goto LABEL_27;
  *(_BYTE *)a2 = *(_BYTE *)(v6 + v8);
  v10 = a1[7];
  v11 = a1[6] + 1;
  a1[6] = v11;
  if (v10 <= v11)
    goto LABEL_27;
  *(_BYTE *)(a2 + 1) = *(_BYTE *)(a1[3] + v11);
  v12 = a1[7];
  v13 = a1[6] + 1;
  a1[6] = v13;
  v14 = v12 >= v13;
  v15 = v12 - v13;
  if (!v14)
    v15 = 0;
  if (v15 <= 3)
    goto LABEL_27;
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a1[3] + v13);
  v16 = a1[6];
  v17 = a1[7];
  a1[6] = v16 + 4;
  v18 = v17 - (v16 + 4);
  if (v17 < v16 + 4)
    v18 = 0;
  if (v18 <= 7)
    goto LABEL_27;
  v19 = a1[3];
  v20 = *(_QWORD *)(v19 + v16 + 4);
  v21 = v16 + 12;
  a1[6] = v21;
  *(_QWORD *)(a2 + 8) = v20;
  v14 = v17 >= v21;
  v22 = v17 - v21;
  if (!v14)
    v22 = 0;
  if (v22 <= 3)
    goto LABEL_27;
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(v19 + v21);
  v23 = a1[6];
  v24 = v23 + 4;
  a1[6] = v23 + 4;
  if (v7 < 2)
    return;
  v25 = a1[7];
  v14 = v25 >= v24;
  v26 = v25 - v24;
  if (!v14)
    v26 = 0;
  if (v26 <= 3)
    goto LABEL_27;
  v27 = *(_DWORD *)(a1[3] + v24);
  a1[6] = v23 + 8;
  sub_223BD64E8(a1, (__n128 **)(a2 + 24));
  sub_223BD661C(a1, (char **)(a2 + 48));
  sub_223BD64E8(a1, (__n128 **)(a2 + 72));
  sub_223BD64E8(a1, (__n128 **)(a2 + 96));
  if (v27 >= 2)
  {
    sub_223BD64E8(a1, (__n128 **)(a2 + 120));
    sub_223BD661C(a1, (char **)(a2 + 144));
    sub_223BD64E8(a1, (__n128 **)(a2 + 168));
  }
  if (v7 != 2)
  {
    v29 = a1[6];
    v28 = a1[7];
    if (v28 > v29)
    {
      v30 = a1[3];
      v31 = *(_BYTE *)(v30 + v29);
      v32 = v29 + 1;
      a1[6] = v32;
      *(_BYTE *)(a2 + 192) = v31;
      if (v7 < 4)
        return;
      if (v28 > v32)
      {
        *(_BYTE *)(a2 + 2) = *(_BYTE *)(v30 + v32);
        ++a1[6];
        return;
      }
    }
LABEL_27:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
}

void sub_223BD6434(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD6448(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD645C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD6470(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD6484(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD6498(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD64AC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD64C0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD64D4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__n128 sub_223BD64E8(_QWORD *a1, __n128 **a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v8;
  __n128 *v9;
  __n128 *v10;
  unint64_t v11;
  __n128 result;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  std::logic_error *exception;

  v2 = a1[6];
  v3 = a1[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(exception, "Not enough data to read");
    goto LABEL_16;
  }
  v8 = *(_QWORD *)(a1[3] + v2);
  a1[6] = v2 + 8;
  v9 = *a2;
  v10 = a2[1];
  v11 = v10 - *a2;
  if (v8 <= v11)
  {
    if (v8 < v11)
    {
      v10 = &v9[v8];
      a2[1] = v10;
    }
  }
  else
  {
    sub_2232C68D0((char **)a2, v8 - v11);
    v9 = *a2;
    v10 = a2[1];
  }
  if (v10 != v9)
  {
    v13 = a1[6];
    v14 = 16 * (v10 - v9);
    while (1)
    {
      v15 = a1[7];
      v4 = v15 >= v13;
      v16 = v15 - v13;
      if (!v4)
        v16 = 0;
      if (v16 <= 0xF)
        break;
      result = *(__n128 *)(a1[3] + v13);
      *v9++ = result;
      v13 = a1[6] + 16;
      a1[6] = v13;
      v14 -= 16;
      if (!v14)
        return result;
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(exception, "Not enough data to read span");
LABEL_16:
    __cxa_throw(exception, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  return result;
}

void sub_223BD65F4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD6608(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__n128 sub_223BD661C(_QWORD *a1, char **a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  __n128 result;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  std::logic_error *exception;

  v2 = a1[6];
  v3 = a1[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(exception, "Not enough data to read");
    goto LABEL_16;
  }
  v8 = *(_QWORD *)(a1[3] + v2);
  a1[6] = v2 + 8;
  v9 = *a2;
  v10 = a2[1];
  v11 = (v10 - *a2) >> 6;
  if (v8 <= v11)
  {
    if (v8 < v11)
    {
      v10 = &v9[64 * v8];
      a2[1] = v10;
    }
  }
  else
  {
    sub_2232C69F8(a2, v8 - v11);
    v9 = *a2;
    v10 = a2[1];
  }
  if (v10 != v9)
  {
    v13 = a1[6];
    v14 = (v10 - v9) >> 6 << 6;
    while (1)
    {
      v15 = a1[7];
      v4 = v15 >= v13;
      v16 = v15 - v13;
      if (!v4)
        v16 = 0;
      if (v16 <= 0x3F)
        break;
      v17 = a1[3] + v13;
      result = *(__n128 *)v17;
      v18 = *(_OWORD *)(v17 + 16);
      v19 = *(_OWORD *)(v17 + 48);
      *((_OWORD *)v9 + 2) = *(_OWORD *)(v17 + 32);
      *((_OWORD *)v9 + 3) = v19;
      *(__n128 *)v9 = result;
      *((_OWORD *)v9 + 1) = v18;
      v9 += 64;
      v13 = a1[6] + 64;
      a1[6] = v13;
      v14 -= 64;
      if (!v14)
        return result;
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(exception, "Not enough data to read span");
LABEL_16:
    __cxa_throw(exception, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  return result;
}

void sub_223BD6734(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD6748(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD675C(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  int v8;
  char *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  void *v14;
  std::logic_error *exception;
  void *__p;
  char *v17;
  uint64_t v18;

  v2 = a1[6];
  v3 = a1[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  v8 = *(_DWORD *)(a1[3] + v2);
  a1[6] = v2 + 4;
  if (v8 == 1)
  {
    __p = 0;
    v17 = 0;
    v18 = 0;
    sub_223BD687C(a1, &__p);
    v9 = (char *)__p;
    if (__p)
    {
      v10 = v17;
      v11 = __p;
      if (v17 != __p)
      {
        v12 = v17;
        do
        {
          v14 = (void *)*((_QWORD *)v12 - 3);
          v12 -= 24;
          v13 = v14;
          if (v14)
          {
            *((_QWORD *)v10 - 2) = v13;
            operator delete(v13);
          }
          v10 = v12;
        }
        while (v12 != v9);
        v11 = __p;
      }
      v17 = v9;
      operator delete(v11);
    }
  }
  sub_223BD687C(a1, (_QWORD *)(a2 + 8));
}

void sub_223BD6854(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD6868(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22317C838((void **)va);
  _Unwind_Resume(a1);
}

void sub_223BD687C(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v6;
  unint64_t v7;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char **v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  std::logic_error *exception;

  v2 = a1[6];
  v3 = a1[7];
  v4 = v3 - v2;
  if (v3 < v2)
    v4 = 0;
  if (v4 <= 3)
    goto LABEL_52;
  a1[6] = v2 + 4;
  v6 = v3 >= v2 + 4;
  v7 = v3 - (v2 + 4);
  if (!v6)
    v7 = 0;
  if (v7 <= 7)
  {
LABEL_52:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(exception, "Not enough data to read");
    goto LABEL_53;
  }
  v9 = *(_QWORD *)(a1[3] + v2 + 4);
  a1[6] = v2 + 12;
  v10 = a2[1];
  v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - *a2) >> 3);
  if (v9 > v11)
  {
    sub_2232C7FD8((uint64_t)a2, v9 - v11);
    v14 = a2;
    v12 = (char **)*a2;
    v13 = v14[1];
    if ((char **)v13 != v12)
      goto LABEL_21;
    return;
  }
  if (v9 < v11)
  {
    v13 = *a2 + 24 * v9;
    if (v10 != v13)
    {
      v15 = a2[1];
      do
      {
        v17 = *(void **)(v15 - 24);
        v15 -= 24;
        v16 = v17;
        if (v17)
        {
          *(_QWORD *)(v10 - 16) = v16;
          operator delete(v16);
        }
        v10 = v15;
      }
      while (v15 != v13);
    }
    a2[1] = v13;
    v12 = (char **)*a2;
    if ((char **)v13 == v12)
      return;
    while (1)
    {
LABEL_21:
      v18 = a1[6];
      v19 = a1[7];
      v20 = v19 - v18;
      if (v19 < v18)
        v20 = 0;
      if (v20 <= 3)
        goto LABEL_52;
      a1[6] = v18 + 4;
      v6 = v19 >= v18 + 4;
      v21 = v19 - (v18 + 4);
      if (!v6)
        v21 = 0;
      if (v21 <= 7)
        goto LABEL_52;
      v22 = *(_QWORD *)(a1[3] + v18 + 4);
      a1[6] = v18 + 12;
      v23 = *v12;
      v24 = v12[1];
      v25 = (v24 - *v12) >> 5;
      if (v22 <= v25)
      {
        if (v22 < v25)
        {
          v24 = &v23[32 * v22];
          v12[1] = v24;
        }
      }
      else
      {
        sub_2231B6534(v12, v22 - v25);
        v23 = *v12;
        v24 = v12[1];
      }
      if (v24 != v23)
        break;
LABEL_20:
      v12 += 3;
      if (v12 == (char **)v13)
        return;
    }
    v26 = a1[6];
    while (1)
    {
      v27 = a1[7];
      v28 = v27 - v26;
      if (v27 < v26)
        v28 = 0;
      if (v28 <= 3)
        goto LABEL_52;
      v29 = a1[3];
      v30 = v26 + 4;
      a1[6] = v30;
      v6 = v27 >= v30;
      v31 = v27 - v30;
      if (!v6)
        v31 = 0;
      if (v31 <= 0xB)
        break;
      v32 = (uint64_t *)(v29 + v30);
      v33 = *v32;
      *((_DWORD *)v23 + 2) = *((_DWORD *)v32 + 2);
      *(_QWORD *)v23 = v33;
      v34 = a1[7];
      v35 = a1[6] + 12;
      a1[6] = v35;
      v6 = v34 >= v35;
      v36 = v34 - v35;
      if (!v6)
        v36 = 0;
      if (v36 <= 7)
        goto LABEL_52;
      *((_QWORD *)v23 + 2) = *(_QWORD *)(a1[3] + v35);
      v37 = a1[6];
      v38 = a1[7];
      a1[6] = v37 + 8;
      v39 = v38 - (v37 + 8);
      if (v38 < v37 + 8)
        v39 = 0;
      if (v39 <= 3)
        goto LABEL_52;
      v40 = v37 + 12;
      a1[6] = v40;
      v6 = v38 >= v40;
      v41 = v38 - v40;
      if (!v6)
        v41 = 0;
      if (v41 <= 3)
        goto LABEL_52;
      *((_DWORD *)v23 + 6) = *(_DWORD *)(a1[3] + v40);
      v26 = a1[6] + 4;
      a1[6] = v26;
      v23 += 32;
      if (v23 == v24)
        goto LABEL_20;
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(exception, "Not enough data to read span");
LABEL_53:
    __cxa_throw(exception, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  v13 = a2[1];
  v12 = (char **)*a2;
  if (v10 != *a2)
    goto LABEL_21;
}

void sub_223BD6BDC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD6BF0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD6C04(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD6C18(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD6C2C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD6C40(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD6C54(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD6C68(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD6C7C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_223BD6C90(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  float *v8;
  float v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __int128 *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  std::logic_error *exception;
  _OWORD v33[4];

  v3 = result[6];
  v2 = result[7];
  if (v2 <= v3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(exception, "Not enough data to read");
    goto LABEL_30;
  }
  v4 = *(unsigned __int8 *)(result[3] + v3);
  v5 = v3 + 1;
  result[6] = v5;
  if (v4)
  {
    if (!*(_BYTE *)(a2 + 128))
    {
      LODWORD(v6) = 0;
      v7 = 0;
      *(_OWORD *)(a2 + 32) = 0u;
      *(_OWORD *)(a2 + 48) = 0u;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      v8 = (float *)v33;
      do
      {
        if ((_DWORD)v6 == HIDWORD(v7))
          v9 = 1.0;
        else
          v9 = 0.0;
        *v8++ = v9;
        v10 = (v7 + 1);
        v11 = v7 & 0xFFFFFFFF00000000;
        v12 = v10 | v11;
        v13 = v11 + 0x100000000;
        if ((int)v6 >= 3)
          v6 = v13;
        else
          v6 = v12;
        v7 = v6;
      }
      while (v6 != 0x400000000);
      v14 = v33[1];
      *(_OWORD *)(a2 + 64) = v33[0];
      *(_OWORD *)(a2 + 80) = v14;
      v15 = v33[3];
      *(_OWORD *)(a2 + 96) = v33[2];
      *(_OWORD *)(a2 + 112) = v15;
      *(_BYTE *)(a2 + 128) = 1;
      v5 = result[6];
      v2 = result[7];
    }
    v16 = v2 - v5;
    if (v2 < v5)
      v16 = 0;
    if (v16 <= 3)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_223198268(exception, "Not enough data to read");
    }
    else
    {
      v17 = result[3];
      v18 = *(_DWORD *)(v17 + v5);
      v19 = v5 + 4;
      result[6] = v19;
      v20 = v2 >= v19;
      v21 = v2 - v19;
      if (!v20)
        v21 = 0;
      if (v21 > 0x3F)
      {
        v22 = *(_OWORD *)(v17 + v19);
        v23 = *(_OWORD *)(v17 + v19 + 16);
        v24 = *(_OWORD *)(v17 + v19 + 48);
        *(_OWORD *)(a2 + 32) = *(_OWORD *)(v17 + v19 + 32);
        *(_OWORD *)(a2 + 48) = v24;
        *(_OWORD *)a2 = v22;
        *(_OWORD *)(a2 + 16) = v23;
        v25 = result[6] + 64;
        result[6] = v25;
        if (v18 < 2)
          return result;
        v26 = result[7];
        v20 = v26 >= v25;
        v27 = v26 - v25;
        if (!v20)
          v27 = 0;
        if (v27 > 0x3F)
        {
          v28 = (__int128 *)(result[3] + v25);
          v29 = *v28;
          v30 = v28[1];
          v31 = v28[3];
          *(_OWORD *)(a2 + 96) = v28[2];
          *(_OWORD *)(a2 + 112) = v31;
          *(_OWORD *)(a2 + 64) = v29;
          *(_OWORD *)(a2 + 80) = v30;
          result[6] += 64;
          return result;
        }
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_223198268(exception, "Not enough data to read span");
    }
LABEL_30:
    __cxa_throw(exception, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  if (*(_BYTE *)(a2 + 128))
    *(_BYTE *)(a2 + 128) = 0;
  return result;
}

void sub_223BD6E7C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD6E90(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD6EA4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD6EB8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD6ECC(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  std::logic_error *exception;

  v3 = a1[6];
  v2 = a1[7];
  v4 = v2 >= v3;
  v5 = v2 - v3;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
  {
LABEL_37:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(exception, "Not enough data to read");
    goto LABEL_36;
  }
  v8 = *(_QWORD *)(a1[3] + v3);
  a1[6] = v3 + 8;
  v9 = *(_QWORD *)(a2 + 8);
  v10 = 0x86BCA1AF286BCA1BLL * ((v9 - *(_QWORD *)a2) >> 4);
  if (v8 > v10)
  {
    sub_2232C879C((char **)a2, v8 - v10);
    v13 = a2;
    v11 = *(char **)a2;
    v12 = *(_QWORD *)(v13 + 8);
    if ((char *)v12 != v11)
      goto LABEL_22;
    return;
  }
  if (v8 < v10)
  {
    v12 = *(_QWORD *)a2 + 304 * v8;
    while (v9 != v12)
    {
      v15 = *(_QWORD *)(v9 - 160);
      if (v15)
      {
        v16 = *(_QWORD *)(v9 - 152);
        v14 = *(void **)(v9 - 160);
        if (v16 != v15)
        {
          v17 = *(_QWORD *)(v9 - 152);
          do
          {
            v19 = *(void **)(v17 - 24);
            v17 -= 24;
            v18 = v19;
            if (v19)
            {
              *(_QWORD *)(v16 - 16) = v18;
              operator delete(v18);
            }
            v16 = v17;
          }
          while (v17 != v15);
          v14 = *(void **)(v9 - 160);
        }
        *(_QWORD *)(v9 - 152) = v15;
        operator delete(v14);
      }
      v9 -= 304;
    }
    *(_QWORD *)(a2 + 8) = v12;
    v11 = *(char **)a2;
    if ((char *)v12 == v11)
      return;
    while (1)
    {
LABEL_22:
      v21 = a1[6];
      v20 = a1[7];
      v22 = v20 - v21;
      if (v20 < v21)
        v22 = 0;
      if (v22 <= 3)
        goto LABEL_37;
      v23 = a1[3];
      a1[6] = v21 + 4;
      v24 = v20 - (v21 + 4);
      if (v20 < v21 + 4)
        v24 = 0;
      if (v24 <= 7)
        goto LABEL_37;
      v25 = *(_QWORD *)(v23 + v21 + 4);
      v26 = v21 + 12;
      a1[6] = v26;
      *(_QWORD *)v11 = v25;
      v4 = v20 >= v26;
      v27 = v20 - v26;
      if (!v4)
        v27 = 0;
      if (v27 <= 0x7F)
        break;
      v28 = *(_OWORD *)(v23 + v26);
      v29 = *(_OWORD *)(v23 + v26 + 16);
      v30 = *(_OWORD *)(v23 + v26 + 32);
      *(_OWORD *)(v11 + 56) = *(_OWORD *)(v23 + v26 + 48);
      *(_OWORD *)(v11 + 40) = v30;
      *(_OWORD *)(v11 + 24) = v29;
      *(_OWORD *)(v11 + 8) = v28;
      v31 = *(_OWORD *)(v23 + v26 + 64);
      v32 = *(_OWORD *)(v23 + v26 + 80);
      v33 = *(_OWORD *)(v23 + v26 + 96);
      *(_OWORD *)(v11 + 120) = *(_OWORD *)(v23 + v26 + 112);
      *(_OWORD *)(v11 + 104) = v33;
      *(_OWORD *)(v11 + 88) = v32;
      *(_OWORD *)(v11 + 72) = v31;
      a1[6] += 128;
      sub_223BD675C(a1, (uint64_t)(v11 + 136));
      sub_223BD6C90(a1, (uint64_t)(v11 + 168));
      v11 += 304;
      if (v11 == (char *)v12)
        return;
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(exception, "Not enough data to read span");
LABEL_36:
    __cxa_throw(exception, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  v12 = *(_QWORD *)(a2 + 8);
  v11 = *(char **)a2;
  if (v9 != *(_QWORD *)a2)
    goto LABEL_22;
}

void sub_223BD7124(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD7138(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD714C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD7160(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223BD7174(int *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v4;
  int v7;
  int v9;
  unsigned int v10;
  __int128 *v11;
  unsigned int v12;
  char v13;

  v4 = a4;
  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 3)
    {
      v9 = 0;
      goto LABEL_15;
    }
    v12 = 3;
    (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v12);
    if (v12 >= 7)
    {
      v10 = v12;
      v11 = sub_223BD7294();
      sub_22455C3A8((std::string *)v11, v10, 6u);
    }
    v7 = *a1;
  }
  v9 = 0;
  if (v4 >= 3 && v7 >= 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v9 = 1;
  }
  if (v4 >= 6)
    a4 = 6;
  else
    a4 = v4;
  if (a4 < 3)
  {
LABEL_15:
    sub_223BD7864((uint64_t)&v13, a2, a3, a4);
    if (!v9)
      return;
    goto LABEL_16;
  }
  sub_223BD7AD8(a2, a3, a4);
  if (!v9)
    return;
LABEL_16:
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
}

__int128 *sub_223BD7294()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578EA58);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578EA58))
    return &xmmword_25578EA40;
  v2 = sub_223BD7370();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&xmmword_25578EA40, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25578EA50 = v2->__r_.__value_.__r.__words[2];
    xmmword_25578EA40 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578EA40, &dword_22314D000);
  __cxa_guard_release(&qword_25578EA58);
  return &xmmword_25578EA40;
}

void sub_223BD7358(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578EA58);
  _Unwind_Resume(a1);
}

std::string *sub_223BD7370()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578EA78);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578EA78))
    return &stru_25578EA60;
  sub_223BD7588((uint64_t)__p);
  sub_223BD7460((char *)__p, &stru_25578EA60);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578EA60, &dword_22314D000);
  __cxa_guard_release(&qword_25578EA78);
  return &stru_25578EA60;
}

void sub_223BD7420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25578EA78);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25578EA78);
  _Unwind_Resume(a1);
}

void sub_223BD7460(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_223BD776C();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_22319BD1C(&__p, (uint64_t)__dst, 1uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_223BD755C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_22319BB48(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223BD7588(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25578EAB8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25578EAB8))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::DataInfoSample<6>]", qword_25578EAA0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578EAA0, &dword_22314D000);
    __cxa_guard_release(&qword_25578EAB8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25578EAD8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25578EAD8))
  {
    v5 = sub_2231A38CC(qword_25578EAA0, "<", 0);
    sub_2231A37C8(qword_25578EAA0, 0, v5, qword_25578EAC0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578EAC0, &dword_22314D000);
    __cxa_guard_release(&qword_25578EAD8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25578EAF8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25578EAF8))
  {
    sub_224573040((uint64_t)qword_25578EAC0, (uint64_t)&xmmword_25578EAE0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578EAE0, &dword_22314D000);
    __cxa_guard_release(&qword_25578EAF8);
  }
  if (byte_25578EAF7 < 0)
  {
    sub_223197FA4((_BYTE *)a1, (void *)xmmword_25578EAE0, *((unint64_t *)&xmmword_25578EAE0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25578EAE0;
    *(_QWORD *)(a1 + 16) = unk_25578EAF0;
  }
}

void sub_223BD7724(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578EAF8);
  _Unwind_Resume(a1);
}

void sub_223BD773C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578EAD8);
  _Unwind_Resume(a1);
}

void sub_223BD7754(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578EAB8);
  _Unwind_Resume(a1);
}

std::string *sub_223BD776C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578EA98);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578EA98))
    return &stru_25578EA80;
  sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = 6U]", __p);
  sub_22457326C((uint64_t)__p, &stru_25578EA80);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578EA80, &dword_22314D000);
  __cxa_guard_release(&qword_25578EA98);
  return &stru_25578EA80;
}

void sub_223BD7824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25578EA98);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25578EA98);
  _Unwind_Resume(a1);
}

void sub_223BD7864(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  void **v7;
  void **v8;
  void *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  void *v17;
  char v18;
  char v19;
  void *v20;
  char v21;
  char v22;
  void *__p;
  void **v24;
  char v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v26 = 0;
  BYTE8(v26) = 0;
  LOBYTE(v27) = 0;
  v29 = 0;
  v10 = *(_QWORD *)(a2 + 8);
  sub_223BD8120((int *)&v10, (_BYTE *)a2, (uint64_t)&v26);
  if (a4 >= 2)
  {
    LOBYTE(v10) = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 80))(a2, &v10);
    if ((_BYTE)v10)
    {
      if (!v29)
      {
        v27 = 0uLL;
        v28 = 0;
        v29 = 1;
      }
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 144))(a2, &v27);
    }
    else if (v29)
    {
      if (SHIBYTE(v28) < 0)
        operator delete((void *)v27);
      v29 = 0;
    }
  }
  v11 = v26;
  LOBYTE(v12) = 0;
  v14 = 0;
  if (v29)
  {
    if (SHIBYTE(v28) < 0)
    {
      sub_223197FA4(&v12, (void *)v27, *((unint64_t *)&v27 + 1));
    }
    else
    {
      v12 = v27;
      v13 = v28;
    }
    v14 = 1;
  }
  v15 = 0;
  v16 = 0;
  LOBYTE(v17) = 0;
  v19 = 0;
  LOBYTE(v20) = 0;
  v22 = 0;
  LOBYTE(__p) = 0;
  v25 = 0;
  sub_223BB47F0(a3, (uint64_t)&v10);
  if (v25)
  {
    v7 = (void **)__p;
    if (__p)
    {
      v8 = v24;
      v9 = __p;
      if (v24 != __p)
      {
        do
        {
          if (*((char *)v8 - 1) < 0)
            operator delete(*(v8 - 3));
          v8 -= 3;
        }
        while (v8 != v7);
        v9 = __p;
      }
      v24 = v7;
      operator delete(v9);
    }
  }
  if (v22 && v21 < 0)
    operator delete(v20);
  if (v19 && v18 < 0)
    operator delete(v17);
  if (v14 && SHIBYTE(v13) < 0)
    operator delete((void *)v12);
  if (v29)
  {
    if (SHIBYTE(v28) < 0)
      operator delete((void *)v27);
  }
}

void sub_223BD7A94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  uint64_t v18;

  if (a18 && a17 < 0)
    operator delete(__p);
  if (*(_BYTE *)(v18 - 64))
  {
    if (*(char *)(v18 - 65) < 0)
      operator delete(*(void **)(v18 - 88));
  }
  _Unwind_Resume(exception_object);
}

void sub_223BD7AD8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v6;
  void **v7;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  void **v12;
  void **v13;
  void *v14;
  void **v15;
  void **v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void **v21;
  void **v22;
  void *v23;
  void *v24[2];
  uint64_t v25;
  void *v26[2];
  uint64_t v27;
  char v28;
  void *__p[2];
  uint64_t v30;
  char v31;

  __p[0] = *(void **)(a1 + 8);
  sub_223BD8120((int *)__p, (_BYTE *)a1, a2 + 8);
  v6 = (void **)(a2 + 24);
  LOBYTE(__p[0]) = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 80))(a1, __p);
  if (LOBYTE(__p[0]))
  {
    if (!*(_BYTE *)(a2 + 48))
    {
      *v6 = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      *(_BYTE *)(a2 + 48) = 1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 24);
  }
  else if (*(_BYTE *)(a2 + 48))
  {
    if (*(char *)(a2 + 47) < 0)
      operator delete(*v6);
    *(_BYTE *)(a2 + 48) = 0;
  }
  if (a3 >= 4)
  {
    LOBYTE(v26[0]) = 0;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 80))(a1, v26);
    if (LOBYTE(v26[0]))
    {
      if (!*(_BYTE *)(a2 + 72))
      {
        *(_QWORD *)(a2 + 56) = 0;
        *(_BYTE *)(a2 + 64) = 0;
        *(_BYTE *)(a2 + 72) = 1;
      }
      __p[0] = *(void **)(a1 + 8);
      sub_223BD8120((int *)__p, (_BYTE *)a1, a2 + 56);
    }
    else if (*(_BYTE *)(a2 + 72))
    {
      *(_BYTE *)(a2 + 72) = 0;
    }
    if (a3 == 5)
    {
      v7 = (void **)(a2 + 80);
      LOBYTE(__p[0]) = 0;
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 80))(a1, __p);
      if (LOBYTE(__p[0]))
      {
        if (!*(_BYTE *)(a2 + 104))
        {
          *v7 = 0;
          *(_QWORD *)(a2 + 88) = 0;
          *(_QWORD *)(a2 + 96) = 0;
          *(_BYTE *)(a2 + 104) = 1;
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 80);
      }
      else if (*(_BYTE *)(a2 + 104))
      {
        if (*(char *)(a2 + 103) < 0)
          operator delete(*v7);
        *(_BYTE *)(a2 + 104) = 0;
      }
    }
    else if (a3 >= 6)
    {
      v8 = (void **)(a2 + 80);
      if ((*(_BYTE *)(a1 + 12) & 4) != 0)
      {
        LOBYTE(__p[0]) = 0;
        (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 80))(a1, __p);
        if (LOBYTE(__p[0]))
        {
          if (!*(_BYTE *)(a2 + 104))
          {
            *v8 = 0;
            *(_QWORD *)(a2 + 88) = 0;
            *(_QWORD *)(a2 + 96) = 0;
            *(_BYTE *)(a2 + 104) = 1;
          }
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 80);
        }
        else
        {
          if (*(_BYTE *)(a2 + 104))
          {
            if (*(char *)(a2 + 103) < 0)
              operator delete(*v8);
            *(_BYTE *)(a2 + 104) = 0;
          }
          (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 280))(a1, v26);
        }
        v10 = (void **)(a2 + 112);
        LOBYTE(__p[0]) = 0;
        (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 80))(a1, __p);
        if (LOBYTE(__p[0]))
        {
          if (!*(_BYTE *)(a2 + 136))
          {
            *v10 = 0;
            *(_QWORD *)(a2 + 120) = 0;
            *(_QWORD *)(a2 + 128) = 0;
            *(_BYTE *)(a2 + 136) = 1;
          }
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 112);
        }
        else
        {
          if (*(_BYTE *)(a2 + 136))
          {
            if (*(char *)(a2 + 135) < 0)
              operator delete(*v10);
            *(_BYTE *)(a2 + 136) = 0;
          }
          (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 280))(a1, v26);
        }
        LOBYTE(__p[0]) = 0;
        v31 = 0;
        LOBYTE(v26[0]) = 0;
        (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 80))(a1, v26);
        if (LOBYTE(v26[0]))
        {
          if (!v31)
          {
            __p[0] = 0;
            __p[1] = 0;
            v30 = 0;
            v31 = 1;
          }
          (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 144))(a1, __p);
        }
        else
        {
          if (v31)
          {
            if (SHIBYTE(v30) < 0)
              operator delete(__p[0]);
            v31 = 0;
          }
          (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 280))(a1, v24);
        }
        if (v31)
        {
          sub_223BB50EC((char *)__p, (uint64_t)v24);
          *(_OWORD *)v26 = *(_OWORD *)v24;
          v27 = v25;
          v24[1] = 0;
          v25 = 0;
          v24[0] = 0;
          v28 = 1;
          sub_223BB4A04(a2 + 144, (uint64_t)v26);
          if (v28)
          {
            v15 = (void **)v26[0];
            if (v26[0])
            {
              v16 = (void **)v26[1];
              v17 = v26[0];
              if (v26[1] != v26[0])
              {
                do
                {
                  if (*((char *)v16 - 1) < 0)
                    operator delete(*(v16 - 3));
                  v16 -= 3;
                }
                while (v16 != v15);
                v17 = v26[0];
              }
              v26[1] = v15;
              operator delete(v17);
            }
          }
          v21 = (void **)v24[0];
          if (v24[0])
          {
            v22 = (void **)v24[1];
            v23 = v24[0];
            if (v24[1] != v24[0])
            {
              do
              {
                if (*((char *)v22 - 1) < 0)
                  operator delete(*(v22 - 3));
                v22 -= 3;
              }
              while (v22 != v21);
              v23 = v24[0];
            }
            v24[1] = v21;
            operator delete(v23);
          }
        }
        else if (*(_BYTE *)(a2 + 168))
        {
          v18 = *(_QWORD *)(a2 + 144);
          if (v18)
          {
            v19 = *(_QWORD *)(a2 + 152);
            v20 = *(void **)(a2 + 144);
            if (v19 != v18)
            {
              do
              {
                if (*(char *)(v19 - 1) < 0)
                  operator delete(*(void **)(v19 - 24));
                v19 -= 24;
              }
              while (v19 != v18);
              v20 = *(void **)(a2 + 144);
            }
            *(_QWORD *)(a2 + 152) = v18;
            operator delete(v20);
          }
          *(_BYTE *)(a2 + 168) = 0;
        }
        if (v31 && SHIBYTE(v30) < 0)
          operator delete(__p[0]);
      }
      else
      {
        LOBYTE(__p[0]) = 0;
        (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 80))(a1, __p);
        if (LOBYTE(__p[0]))
        {
          if (!*(_BYTE *)(a2 + 104))
          {
            *v8 = 0;
            *(_QWORD *)(a2 + 88) = 0;
            *(_QWORD *)(a2 + 96) = 0;
            *(_BYTE *)(a2 + 104) = 1;
          }
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 80);
        }
        else if (*(_BYTE *)(a2 + 104))
        {
          if (*(char *)(a2 + 103) < 0)
            operator delete(*v8);
          *(_BYTE *)(a2 + 104) = 0;
        }
        v9 = (void **)(a2 + 112);
        LOBYTE(__p[0]) = 0;
        (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 80))(a1, __p);
        if (LOBYTE(__p[0]))
        {
          if (!*(_BYTE *)(a2 + 136))
          {
            *v9 = 0;
            *(_QWORD *)(a2 + 120) = 0;
            *(_QWORD *)(a2 + 128) = 0;
            *(_BYTE *)(a2 + 136) = 1;
          }
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 112);
        }
        else if (*(_BYTE *)(a2 + 136))
        {
          if (*(char *)(a2 + 135) < 0)
            operator delete(*v9);
          *(_BYTE *)(a2 + 136) = 0;
        }
        v11 = (void **)(a2 + 144);
        LOBYTE(__p[0]) = 0;
        (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 80))(a1, __p);
        if (LOBYTE(__p[0]))
        {
          if (!*(_BYTE *)(a2 + 168))
          {
            *v11 = 0;
            *(_QWORD *)(a2 + 152) = 0;
            *(_QWORD *)(a2 + 160) = 0;
            *(_BYTE *)(a2 + 168) = 1;
          }
          sub_223BD8570(a1, (char **)(a2 + 144));
        }
        else if (*(_BYTE *)(a2 + 168))
        {
          v12 = (void **)*v11;
          if (*v11)
          {
            v13 = *(void ***)(a2 + 152);
            v14 = *v11;
            if (v13 != v12)
            {
              do
              {
                if (*((char *)v13 - 1) < 0)
                  operator delete(*(v13 - 3));
                v13 -= 3;
              }
              while (v13 != v12);
              v14 = *v11;
            }
            *(_QWORD *)(a2 + 152) = v12;
            operator delete(v14);
          }
          *(_BYTE *)(a2 + 168) = 0;
        }
      }
    }
  }
}

void sub_223BD80F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a23)
  {
    if (a22 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_223BD8120(int *a1, _BYTE *a2, uint64_t a3)
{
  char v6;
  _BYTE *v7;
  char v8;
  char *v9;

  LODWORD(v7) = 2;
  (*(void (**)(_BYTE *, _BYTE **))(*(_QWORD *)a2 + 104))(a2, &v7);
  if (*a1 < 1)
  {
    if (v7 < 2)
    {
      v7 = 0;
      v8 = 0;
      (*(void (**)(_BYTE *, _BYTE **))(*(_QWORD *)a2 + 72))(a2, &v7);
      v9 = &v8;
      sub_223BD83BC(a2, &v9);
      v6 = v8;
      *(_QWORD *)a3 = v7;
      *(_BYTE *)(a3 + 8) = v6;
    }
    else
    {
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 72))(a2, a3);
      v7 = (_BYTE *)(a3 + 8);
      sub_223BD83BC(a2, &v7);
    }
  }
  else
  {
    sub_223BD822C(a1, a2, a3, v7);
  }
}

void sub_223BD822C(int *a1, _BYTE *a2, uint64_t a3, unsigned int a4)
{
  int v7;
  unsigned int v9;
  char v10;
  unsigned int v11;
  __int128 *v12;
  _BYTE *v13;
  char v14;
  char *v15;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    LODWORD(v13) = 2;
    (*(void (**)(_BYTE *, _BYTE **))(*(_QWORD *)a2 + 104))(a2, &v13);
    if (v13 >= 3)
    {
      v11 = v13;
      v12 = sub_223BB58E4();
      sub_22455C3A8((std::string *)v12, v11, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 >= 1)
  {
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 16))(a2);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 72))(a2, a3);
    v13 = (_BYTE *)(a3 + 8);
    sub_223BD83BC(a2, &v13);
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 24))(a2);
    return;
  }
LABEL_8:
  if (a4 >= 2)
    v9 = 2;
  else
    v9 = a4;
  if (v9 <= 1)
  {
    v13 = 0;
    v14 = 0;
    (*(void (**)(_BYTE *, _BYTE **))(*(_QWORD *)a2 + 72))(a2, &v13);
    v15 = &v14;
    sub_223BD83BC(a2, &v15);
    v10 = v14;
    *(_QWORD *)a3 = v13;
    *(_BYTE *)(a3 + 8) = v10;
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 72))(a2, a3);
    v13 = (_BYTE *)(a3 + 8);
    sub_223BD83BC(a2, &v13);
  }
}

void sub_223BD83BC(_BYTE *a1, _BYTE **a2)
{
  int v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  uint64_t v13;
  char v14;
  uint64_t v15;

  if ((a1[12] & 2) != 0)
  {
    __p[0] = 0;
    __p[1] = 0;
    v13 = 0;
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 144))(a1, __p);
    v3 = SHIBYTE(v13);
    v4 = (char *)__p[0];
    v5 = operator new();
    v6 = v5;
    if (v3 >= 0)
      v7 = (char *)__p;
    else
      v7 = v4;
    sub_22456E918(v5, v7);
    v15 = v6;
    v14 = 0;
    sub_224504EE8((uint64_t *)v6, &v14);
    v8 = v14;
    v9 = MEMORY[0x24BEDB7F0];
    v10 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v6 = *MEMORY[0x24BEDB7F0];
    v11 = *(_QWORD *)(v9 + 72);
    *(_QWORD *)(v6 + *(_QWORD *)(v10 - 24)) = *(_QWORD *)(v9 + 64);
    *(_QWORD *)(v6 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v6 + 16) = v11;
    if (*(char *)(v6 + 111) < 0)
      operator delete(*(void **)(v6 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v6 + 128);
    MEMORY[0x227684CE8](v6, 0x10B2C40EED050F3);
    **a2 = v8;
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
  }
  else
  {
    LOBYTE(__p[0]) = 0;
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 80))(a1, __p);
    **a2 = __p[0];
  }
}

void sub_223BD8524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  sub_22456E764(&a17);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223BD8570(uint64_t a1, char **a2)
{
  char *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  char **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v12 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 120))(a1, &v12);
  v4 = a2[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3);
  if (v12 > v5)
  {
    sub_2231B744C(a2, v12 - v5);
    v8 = a2;
    v6 = *a2;
    v7 = v8[1];
    v9 = v7 - v6;
    if (v7 == v6)
      return;
    goto LABEL_13;
  }
  if (v12 >= v5)
  {
    v6 = *a2;
    v9 = v4 - v6;
    if (v4 == v6)
      return;
    goto LABEL_13;
  }
  v10 = (uint64_t)&(*a2)[24 * v12];
  while (v4 != (char *)v10)
  {
    if (*(v4 - 1) < 0)
      operator delete(*((void **)v4 - 3));
    v4 -= 24;
  }
  a2[1] = (char *)v10;
  v6 = *a2;
  v9 = v10 - (_QWORD)v6;
  if ((char *)v10 != v6)
  {
LABEL_13:
    v11 = 24 * (v9 / 24);
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)a1 + 144))(a1, v6);
      v6 += 24;
      v11 -= 24;
    }
    while (v11);
  }
}

void sub_223BD8694(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  unsigned int v6;
  unsigned int v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  int v12;
  uint64_t v13;
  void *v14;
  __int16 v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  char *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  void *v36;
  __int16 v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  char *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  void *v58;
  __int16 v59;
  unint64_t v60;
  unint64_t v61;
  int v62;
  char v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  int v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  char *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  __int16 v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  unsigned int v137;
  char *v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  int v142;
  uint64_t v143;
  void *v144;
  __int16 v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t *v148;
  unint64_t v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  uint64_t v160;
  unsigned int v161;
  void **v162;
  uint64_t v163;
  void *v164;
  int v165;
  char v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  int v173;
  char **v174;
  char *v175;
  unint64_t v176;
  char *v177;
  char *v178;
  int64_t v179;
  char *v180;
  char v181;
  uint64_t v182;
  char *v183;
  char *v184;
  char *v185;
  char *v186;
  char *v187;
  void *v188;
  char *v189;
  char *v190;
  void *v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  void *v195;
  uint64_t v196;
  void *v197;
  void *v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  float *v205;
  float v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  __int128 v211;
  __int128 v212;
  uint64_t *v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  void *v223;
  void *v224;
  unint64_t v225;
  unint64_t v226;
  float *v227;
  float v228;
  uint64_t v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t v232;
  __int128 v233;
  __int128 v234;
  uint64_t v235;
  int v236;
  uint64_t v237;
  _OWORD *v238;
  void *v239[2];
  std::__shared_weak_count *v240;
  _BYTE v241[16];
  std::__shared_weak_count *v242;
  void *v243;
  char *v244;
  std::__shared_weak_count *v245;
  uint64_t v246;
  uint64_t v247;
  void *v248;
  int v249;
  __int16 v250;
  char v251;
  _QWORD v252[2];
  std::__shared_weak_count *v253;
  uint64_t v254;
  int v255;
  uint64_t v256;
  int v257;
  __int16 v258;
  __int128 *v259;
  __int128 v260;
  std::__shared_weak_count *v261;
  void *v262;
  void *v263;
  int v264;
  void *v265;
  void *v266;
  int v267;
  void *v268;
  void *v269;
  void *v270;
  void *v271;
  void *v272;
  void *v273;
  void *v274;
  void *v275;
  void *v276;
  void *v277;
  char v278;
  __int128 v279;
  void *v280[2];
  __int128 v281;
  void *v282[2];
  void *v283[2];
  __int128 v284;
  void *v285[2];
  void *v286[2];
  __int128 v287;
  void *v288[2];
  void *__p[2];
  __int128 v290;
  uint64_t v291;
  char v292;
  uint64_t v293;

  v293 = *MEMORY[0x24BDAC8D0];
  LODWORD(v279) = 6;
  (*(void (**)(_QWORD *, __int128 *))(*a1 + 104))(a1, &v279);
  v6 = v279;
  v7 = v279 - 2;
  if (v279 <= 2)
  {
    LOBYTE(v260) = 0;
    LOBYTE(v266) = 0;
    sub_223BDB4A0(a1, (uint64_t)&v260);
    if ((_BYTE)v266)
    {
      v243 = &off_24EC1F8C8;
      v8 = (char *)*((_QWORD *)&v260 + 1);
      v9 = v261;
      if (v261)
      {
        p_shared_owners = (unint64_t *)&v261->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
        v12 = v264;
        v14 = v262;
        v13 = (uint64_t)v263;
        v15 = (__int16)v265;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
        do
          v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
      }
      else
      {
        v12 = v264;
        v14 = v262;
        v13 = (uint64_t)v263;
        v15 = (__int16)v265;
      }
      v244 = v8;
      v245 = v9;
      v246 = v13;
      LODWORD(v247) = 4 * v12;
      v248 = v14;
      v249 = 4;
      v250 = v15;
      if (v9)
      {
        v18 = (unint64_t *)&v9->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        do
          v20 = __ldaxr(v18);
        while (__stlxr(v20 - 1, v18));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      BYTE8(v279) = 0;
      LOBYTE(v280[1]) = 0;
      LOBYTE(v281) = 0;
      LOBYTE(v282[0]) = 0;
      LOBYTE(v282[1]) = 1;
      LODWORD(v283[0]) = 0;
      sub_22432B21C((uint64_t)&v243, 3u, (uint64_t)v252);
      sub_2232C1348(a2 + 8, (uint64_t)v252);
      v21 = v253;
      if (v253)
      {
        v22 = (unint64_t *)&v253->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      v24 = v245;
      if (v245)
      {
        v25 = (unint64_t *)&v245->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      if ((_BYTE)v266)
      {
        *(_QWORD *)&v260 = &off_24EC27198;
        v27 = v261;
        if (v261)
        {
          v28 = (unint64_t *)&v261->__shared_owners_;
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
      }
    }
  }
  else
  {
    sub_223BDB2FC(a1, a2 + 8);
    if (v6 >= 5)
    {
      sub_223BDB2FC(a1, a2 + 72);
      goto LABEL_79;
    }
  }
  LOBYTE(v260) = 0;
  LOBYTE(v266) = 0;
  sub_223BDB4A0(a1, (uint64_t)&v260);
  if ((_BYTE)v266)
  {
    v243 = &off_24EC1F8C8;
    v30 = (char *)*((_QWORD *)&v260 + 1);
    v31 = v261;
    if (v261)
    {
      v32 = (unint64_t *)&v261->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
      v34 = v264;
      v36 = v262;
      v35 = (uint64_t)v263;
      v37 = (__int16)v265;
      do
        v38 = __ldxr(v32);
      while (__stxr(v38 + 1, v32));
      do
        v39 = __ldxr(v32);
      while (__stxr(v39 + 1, v32));
    }
    else
    {
      v34 = v264;
      v36 = v262;
      v35 = (uint64_t)v263;
      v37 = (__int16)v265;
    }
    v244 = v30;
    v245 = v31;
    v246 = v35;
    LODWORD(v247) = 4 * v34;
    v248 = v36;
    v249 = 4;
    v250 = v37;
    if (v31)
    {
      v40 = (unint64_t *)&v31->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
      do
        v42 = __ldaxr(v40);
      while (__stlxr(v42 - 1, v40));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    BYTE8(v279) = 0;
    LOBYTE(v280[1]) = 0;
    LOBYTE(v281) = 0;
    LOBYTE(v282[0]) = 0;
    LOBYTE(v282[1]) = 1;
    LODWORD(v283[0]) = 0;
    sub_22432B21C((uint64_t)&v243, 3u, (uint64_t)v252);
    sub_2232C1348(a2 + 72, (uint64_t)v252);
    v43 = v253;
    if (v253)
    {
      v44 = (unint64_t *)&v253->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    v46 = v245;
    if (!v245)
      goto LABEL_63;
    v47 = (unint64_t *)&v245->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
      if (!(_BYTE)v266)
        goto LABEL_78;
    }
    else
    {
LABEL_63:
      if (!(_BYTE)v266)
        goto LABEL_78;
    }
    *(_QWORD *)&v260 = &off_24EC27198;
    v49 = v261;
    if (v261)
    {
      v50 = (unint64_t *)&v261->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
        if (v6 < 4)
          goto LABEL_69;
LABEL_79:
        LOBYTE(v279) = 0;
        LOBYTE(v285[1]) = 0;
        sub_223BDB644(a1, (uint64_t)&v279);
        v62 = LOBYTE(v285[1]);
        if (LOBYTE(v285[1]))
        {
          sub_22416C400((uint64_t)&v279, (uint64_t)v241);
          *(_QWORD *)&v260 = &off_24EC28F30;
          sub_2232C2C00((uint64_t)v241, (uint64_t *)&v260 + 1);
          v63 = 1;
        }
        else
        {
          v63 = 0;
          LOBYTE(v260) = 0;
        }
        LOBYTE(v269) = v63;
        sub_2232C33D4(a2 + 136, (uint64_t)&v260);
        if (!(_BYTE)v269)
          goto LABEL_87;
        *(_QWORD *)&v260 = &off_24EC28F30;
        v64 = v261;
        if (!v261)
          goto LABEL_87;
        v65 = (unint64_t *)&v261->__shared_owners_;
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
          if (!v62)
            goto LABEL_92;
        }
        else
        {
LABEL_87:
          if (!v62)
            goto LABEL_92;
        }
        v67 = v242;
        if (v242)
        {
          v68 = (unint64_t *)&v242->__shared_owners_;
          do
            v69 = __ldaxr(v68);
          while (__stlxr(v69 - 1, v68));
          if (!v69)
          {
            ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
            std::__shared_weak_count::__release_weak(v67);
            if (!LOBYTE(v285[1]))
              goto LABEL_124;
            goto LABEL_93;
          }
        }
LABEL_92:
        if (!LOBYTE(v285[1]))
          goto LABEL_124;
LABEL_93:
        if (LODWORD(v285[0]) != -1)
          ((void (*)(__int128 *, __int128 *))off_24EC5FFD0[LODWORD(v285[0])])(&v260, &v281);
        goto LABEL_124;
      }
    }
  }
LABEL_78:
  if (v6 >= 4)
    goto LABEL_79;
LABEL_69:
  LOBYTE(v279) = 0;
  LOBYTE(v284) = 0;
  sub_223BDAFB4(a1, (uint64_t)&v279);
  if ((_BYTE)v284)
  {
    v243 = &off_24EC1F8C8;
    v52 = (char *)*((_QWORD *)&v279 + 1);
    v53 = (std::__shared_weak_count *)v280[0];
    if (v280[0])
    {
      v54 = (unint64_t *)((char *)v280[0] + 8);
      do
        v55 = __ldxr(v54);
      while (__stxr(v55 + 1, v54));
      v56 = *(_QWORD *)((char *)&v281 + 4);
      v57 = HIDWORD(v282[0]);
      v58 = v280[1];
      v59 = (__int16)v283[1];
      do
        v60 = __ldxr(v54);
      while (__stxr(v60 + 1, v54));
      do
        v61 = __ldxr(v54);
      while (__stxr(v61 + 1, v54));
    }
    else
    {
      v56 = *(_QWORD *)((char *)&v281 + 4);
      v57 = HIDWORD(v282[0]);
      v58 = v280[1];
      v59 = (__int16)v283[1];
    }
    v244 = v52;
    v245 = v53;
    v246 = v56;
    LODWORD(v247) = 4 * v57;
    v248 = v58;
    v249 = 32;
    v250 = v59;
    if (v53)
    {
      v70 = (unint64_t *)&v53->__shared_owners_;
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
      do
        v72 = __ldaxr(v70);
      while (__stlxr(v72 - 1, v70));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    BYTE8(v260) = 0;
    LOBYTE(v262) = 0;
    LOBYTE(v263) = 0;
    LOBYTE(v265) = 0;
    LOBYTE(v266) = 1;
    v267 = 0;
    sub_22432B21C((uint64_t)&v243, 0x1Fu, (uint64_t)v252);
    sub_2232C1620(a2 + 136, (uint64_t)v252);
    v73 = v253;
    if (v253)
    {
      v74 = (unint64_t *)&v253->__shared_owners_;
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }
    v76 = v245;
    if (v245)
    {
      v77 = (unint64_t *)&v245->__shared_owners_;
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
    if ((_BYTE)v284)
    {
      *(_QWORD *)&v279 = &off_24EC26EB0;
      v79 = (std::__shared_weak_count *)v280[0];
      if (v280[0])
      {
        v80 = (unint64_t *)((char *)v280[0] + 8);
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 - 1, v80));
        if (!v81)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
    }
  }
LABEL_124:
  LOBYTE(v239[0]) = 0;
  (*(void (**)(_QWORD *, void **))(*a1 + 80))(a1, v239);
  if (LOBYTE(v239[0]))
  {
    if (!*(_BYTE *)(a2 + 496))
    {
      sub_2232C39E0(a2 + 224);
      *(_OWORD *)(a2 + 464) = 0u;
      *(_OWORD *)(a2 + 480) = 0u;
      *(_OWORD *)(a2 + 432) = 0u;
      *(_OWORD *)(a2 + 448) = 0u;
      *(_OWORD *)(a2 + 400) = 0u;
      *(_OWORD *)(a2 + 416) = 0u;
      *(_OWORD *)(a2 + 368) = 0u;
      *(_OWORD *)(a2 + 384) = 0u;
      *(_OWORD *)(a2 + 336) = 0u;
      *(_OWORD *)(a2 + 352) = 0u;
      *(_OWORD *)(a2 + 304) = 0u;
      *(_OWORD *)(a2 + 320) = 0u;
      *(_OWORD *)(a2 + 272) = 0u;
      *(_OWORD *)(a2 + 288) = 0u;
      *(_OWORD *)(a2 + 240) = 0u;
      *(_OWORD *)(a2 + 256) = 0u;
      *(_OWORD *)(a2 + 224) = 0u;
      sub_2232C3AB8(a2 + 224);
      *(_BYTE *)(a2 + 496) = 1;
    }
    LODWORD(v279) = 2;
    (*(void (**)(_QWORD *, __int128 *))(*a1 + 104))(a1, &v279);
    if (v279 <= 1)
    {
      LOBYTE(v243) = 0;
      v251 = 0;
      *(_QWORD *)&v260 = &off_24EC1F958;
      sub_2231B3FDC((uint64_t)&v260 + 8);
      sub_22416BD7C((uint64_t)&v279, (uint64_t)&v260, 0);
      v82 = v261;
      if (v261)
      {
        v83 = (unint64_t *)&v261->__shared_owners_;
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
          std::__shared_weak_count::__release_weak(v82);
        }
      }
      LODWORD(v280[1]) = 0;
      v85 = *a1;
      *(_QWORD *)&v260 = a1[1];
      v86 = v260;
      LODWORD(v252[0]) = 2;
      (*(void (**)(_QWORD *, _QWORD *))(v85 + 104))(a1, v252);
      if (v86 < 1)
      {
        if (LODWORD(v252[0]) < 2)
          sub_223BDB94C((uint64_t)v252, a1, (uint64_t)&v279);
        else
          sub_223BDBBC4((uint64_t)a1, (uint64_t)&v279);
      }
      else
      {
        sub_223BDB820((int *)&v260, a1, (uint64_t)&v279, v252[0]);
      }
      sub_22416C400((uint64_t)&v279, (uint64_t)v252);
      *(_QWORD *)&v260 = &off_24EC28BC8;
      sub_2232C1E78((uint64_t)v252, (uint64_t *)&v260 + 1);
      LOBYTE(v266) = 1;
      sub_2232C264C((uint64_t)&v243, (uint64_t)&v260);
      if ((_BYTE)v266)
      {
        *(_QWORD *)&v260 = &off_24EC28BC8;
        v92 = v261;
        if (v261)
        {
          v93 = (unint64_t *)&v261->__shared_owners_;
          do
            v94 = __ldaxr(v93);
          while (__stlxr(v94 - 1, v93));
          if (!v94)
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
          }
        }
      }
      v95 = v253;
      if (!v253)
        goto LABEL_158;
      v96 = (unint64_t *)&v253->__shared_owners_;
      do
        v97 = __ldaxr(v96);
      while (__stlxr(v97 - 1, v96));
      if (!v97)
      {
        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
        std::__shared_weak_count::__release_weak(v95);
        v98 = LODWORD(v285[0]);
        if (LODWORD(v285[0]) == -1)
          goto LABEL_160;
      }
      else
      {
LABEL_158:
        v98 = LODWORD(v285[0]);
        if (LODWORD(v285[0]) == -1)
        {
LABEL_160:
          v252[0] = &off_24EC1F8C8;
          v99 = v244;
          v100 = v245;
          if (v245)
          {
            v101 = (unint64_t *)&v245->__shared_owners_;
            do
              v102 = __ldxr(v101);
            while (__stxr(v102 + 1, v101));
            v103 = HIDWORD(v248);
            v105 = v246;
            v104 = v247;
            v106 = v249;
            do
              v107 = __ldxr(v101);
            while (__stxr(v107 + 1, v101));
            do
              v108 = __ldxr(v101);
            while (__stxr(v108 + 1, v101));
          }
          else
          {
            v103 = HIDWORD(v248);
            v105 = v246;
            v104 = v247;
            v106 = v249;
          }
          v252[1] = v99;
          v253 = v100;
          v254 = v104;
          v255 = 4 * v103;
          v256 = v105;
          v257 = 4;
          v258 = v106;
          if (v100)
          {
            v109 = (unint64_t *)&v100->__shared_owners_;
            do
              v110 = __ldaxr(v109);
            while (__stlxr(v110 - 1, v109));
            if (!v110)
            {
              ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
              std::__shared_weak_count::__release_weak(v100);
            }
            do
              v111 = __ldaxr(v109);
            while (__stlxr(v111 - 1, v109));
            if (!v111)
            {
              ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
              std::__shared_weak_count::__release_weak(v100);
            }
          }
          BYTE8(v279) = 0;
          LOBYTE(v280[1]) = 0;
          LOBYTE(v281) = 0;
          LOBYTE(v282[0]) = 0;
          LOBYTE(v282[1]) = 1;
          LODWORD(v283[0]) = 0;
          sub_22432B21C((uint64_t)v252, 3u, (uint64_t)&v260);
          sub_2232C1348(a2 + 224, (uint64_t)&v260);
          v112 = v261;
          if (v261)
          {
            v113 = (unint64_t *)&v261->__shared_owners_;
            do
              v114 = __ldaxr(v113);
            while (__stlxr(v114 - 1, v113));
            if (!v114)
            {
              ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
              std::__shared_weak_count::__release_weak(v112);
            }
          }
          v115 = v253;
          if (v253)
          {
            v116 = (unint64_t *)&v253->__shared_owners_;
            do
              v117 = __ldaxr(v116);
            while (__stlxr(v117 - 1, v116));
            if (!v117)
            {
              ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
              std::__shared_weak_count::__release_weak(v115);
            }
          }
          if (v251)
          {
            v243 = &off_24EC27198;
            v118 = v245;
            if (v245)
            {
              v119 = (unint64_t *)&v245->__shared_owners_;
              do
                v120 = __ldaxr(v119);
              while (__stlxr(v120 - 1, v119));
              if (!v120)
              {
                ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                std::__shared_weak_count::__release_weak(v118);
              }
            }
          }
          goto LABEL_207;
        }
      }
      ((void (*)(__int128 *, __int128 *))off_24EC5FFD0[v98])(&v260, &v281);
      goto LABEL_160;
    }
    *(_QWORD *)&v260 = &off_24EC1F958;
    sub_2231B3FDC((uint64_t)&v260 + 8);
    sub_22416BD7C((uint64_t)&v279, (uint64_t)&v260, 0);
    v87 = v261;
    if (v261)
    {
      v88 = (unint64_t *)&v261->__shared_owners_;
      do
        v89 = __ldaxr(v88);
      while (__stlxr(v89 - 1, v88));
      if (!v89)
      {
        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
        std::__shared_weak_count::__release_weak(v87);
      }
    }
    LODWORD(v280[1]) = 0;
    v90 = *a1;
    *(_QWORD *)&v260 = a1[1];
    v91 = v260;
    LODWORD(v252[0]) = 2;
    (*(void (**)(_QWORD *, _QWORD *))(v90 + 104))(a1, v252);
    if (v91 < 1)
    {
      if (LODWORD(v252[0]) < 2)
        sub_223BDB94C((uint64_t)v252, a1, (uint64_t)&v279);
      else
        sub_223BDBBC4((uint64_t)a1, (uint64_t)&v279);
    }
    else
    {
      sub_223BDB820((int *)&v260, a1, (uint64_t)&v279, v252[0]);
    }
    sub_22416C400((uint64_t)&v279, (uint64_t)v252);
    *(_QWORD *)&v260 = &off_24EC21040;
    sub_2232C1A28((uint64_t)v252, (uint64_t *)&v260 + 1);
    LOBYTE(v266) = 1;
    sub_2232C1C50(a2 + 224, (uint64_t)&v260);
    if ((_BYTE)v266)
    {
      *(_QWORD *)&v260 = &off_24EC21040;
      v121 = v261;
      if (v261)
      {
        v122 = (unint64_t *)&v261->__shared_owners_;
        do
          v123 = __ldaxr(v122);
        while (__stlxr(v123 - 1, v122));
        if (!v123)
        {
          ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
          std::__shared_weak_count::__release_weak(v121);
        }
      }
    }
    v124 = v253;
    if (!v253)
      goto LABEL_205;
    v125 = (unint64_t *)&v253->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
      v127 = LODWORD(v285[0]);
      if (LODWORD(v285[0]) == -1)
        goto LABEL_207;
    }
    else
    {
LABEL_205:
      v127 = LODWORD(v285[0]);
      if (LODWORD(v285[0]) == -1)
      {
LABEL_207:
        v128 = *a1;
        *(_QWORD *)&v279 = a1[1];
        v129 = v279;
        LODWORD(v260) = 2;
        (*(void (**)(_QWORD *, __int128 *))(v128 + 104))(a1, &v260);
        v130 = a2 + 288;
        if (v129 < 1)
        {
          if (v260 < 2)
            sub_223BDB94C((uint64_t)&v260, a1, v130);
          else
            sub_223BDBBC4((uint64_t)a1, a2 + 288);
        }
        else
        {
          sub_223BDB820((int *)&v279, a1, v130, v260);
        }
        v131 = *a1;
        *(_QWORD *)&v279 = a1[1];
        v132 = v279;
        LODWORD(v260) = 2;
        (*(void (**)(_QWORD *, __int128 *))(v131 + 104))(a1, &v260);
        v133 = a2 + 392;
        if (v132 < 1)
        {
          if (v260 < 2)
            sub_223BDB94C((uint64_t)&v260, a1, v133);
          else
            sub_223BDBBC4((uint64_t)a1, a2 + 392);
        }
        else
        {
          sub_223BDB820((int *)&v279, a1, v133, v260);
        }
        goto LABEL_217;
      }
    }
    ((void (*)(__int128 *, __int128 *))off_24EC5FFD0[v127])(&v260, &v281);
    goto LABEL_207;
  }
  sub_2232C39E0(a2 + 224);
LABEL_217:
  if (v7 <= 3)
  {
    LOBYTE(v279) = 0;
    LOBYTE(v282[1]) = 0;
    sub_223BDB2FC(a1, (uint64_t)&v279);
    if (LOBYTE(v282[1]))
    {
      *(_QWORD *)&v279 = &off_24EC21328;
      v134 = (std::__shared_weak_count *)v280[0];
      if (v280[0])
      {
        v135 = (unint64_t *)((char *)v280[0] + 8);
        do
          v136 = __ldaxr(v135);
        while (__stlxr(v136 - 1, v135));
        if (!v136)
        {
          ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
          std::__shared_weak_count::__release_weak(v134);
        }
      }
    }
  }
  LODWORD(v279) = 2;
  (*(void (**)(_QWORD *, __int128 *))(*a1 + 104))(a1, &v279);
  v137 = v279;
  sub_223BDB158(a1, a2 + 504);
  if (v137 >= 2)
  {
    sub_223BDB2FC(a1, a2 + 568);
    goto LABEL_275;
  }
  LOBYTE(v260) = 0;
  LOBYTE(v266) = 0;
  sub_223BDB4A0(a1, (uint64_t)&v260);
  if (!(_BYTE)v266)
    goto LABEL_275;
  v243 = &off_24EC1F8C8;
  v138 = (char *)*((_QWORD *)&v260 + 1);
  v139 = v261;
  if (v261)
  {
    v140 = (unint64_t *)&v261->__shared_owners_;
    do
      v141 = __ldxr(v140);
    while (__stxr(v141 + 1, v140));
    v142 = v264;
    v144 = v262;
    v143 = (uint64_t)v263;
    v145 = (__int16)v265;
    do
      v146 = __ldxr(v140);
    while (__stxr(v146 + 1, v140));
    do
      v147 = __ldxr(v140);
    while (__stxr(v147 + 1, v140));
  }
  else
  {
    v142 = v264;
    v144 = v262;
    v143 = (uint64_t)v263;
    v145 = (__int16)v265;
  }
  v244 = v138;
  v245 = v139;
  v246 = v143;
  LODWORD(v247) = 4 * v142;
  v248 = v144;
  v249 = 4;
  v250 = v145;
  if (v139)
  {
    v148 = (unint64_t *)&v139->__shared_owners_;
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
    do
      v150 = __ldaxr(v148);
    while (__stlxr(v150 - 1, v148));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  BYTE8(v279) = 0;
  LOBYTE(v280[1]) = 0;
  LOBYTE(v281) = 0;
  LOBYTE(v282[0]) = 0;
  LOBYTE(v282[1]) = 1;
  LODWORD(v283[0]) = 0;
  sub_22432B21C((uint64_t)&v243, 3u, (uint64_t)v252);
  sub_2232C1348(a2 + 568, (uint64_t)v252);
  v151 = v253;
  if (v253)
  {
    v152 = (unint64_t *)&v253->__shared_owners_;
    do
      v153 = __ldaxr(v152);
    while (__stlxr(v153 - 1, v152));
    if (!v153)
    {
      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
      std::__shared_weak_count::__release_weak(v151);
    }
  }
  v154 = v245;
  if (!v245)
    goto LABEL_515;
  v155 = (unint64_t *)&v245->__shared_owners_;
  do
    v156 = __ldaxr(v155);
  while (__stlxr(v156 - 1, v155));
  if (!v156)
  {
    ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
    std::__shared_weak_count::__release_weak(v154);
    if (!(_BYTE)v266)
      goto LABEL_275;
  }
  else
  {
LABEL_515:
    if (!(_BYTE)v266)
      goto LABEL_275;
  }
  *(_QWORD *)&v260 = &off_24EC27198;
  v157 = v261;
  if (!v261)
    goto LABEL_275;
  v158 = (unint64_t *)&v261->__shared_owners_;
  do
    v159 = __ldaxr(v158);
  while (__stlxr(v159 - 1, v158));
  if (v159)
  {
LABEL_275:
    v160 = a2 + 632;
    if (a3 <= 4)
      goto LABEL_276;
    goto LABEL_258;
  }
  ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
  std::__shared_weak_count::__release_weak(v157);
  v160 = a2 + 632;
  if (a3 <= 4)
  {
LABEL_276:
    sub_223BDAFB4(a1, v160);
    goto LABEL_277;
  }
LABEL_258:
  LODWORD(v279) = 5;
  (*(void (**)(_QWORD *, __int128 *))(*a1 + 104))(a1, &v279);
  v161 = v279;
  sub_223BDAFB4(a1, v160);
  LOBYTE(v279) = 0;
  (*(void (**)(_QWORD *, __int128 *))(*a1 + 80))(a1, &v279);
  if ((_BYTE)v279)
  {
    if (!*(_BYTE *)(a2 + 724))
    {
      *(_DWORD *)(a2 + 720) = 0;
      *(_BYTE *)(a2 + 724) = 1;
    }
    (*(void (**)(_QWORD *, uint64_t))(*a1 + 128))(a1, a2 + 720);
  }
  else if (*(_BYTE *)(a2 + 724))
  {
    *(_BYTE *)(a2 + 724) = 0;
  }
  if (v161 >= 2)
  {
    LOBYTE(v260) = 0;
    (*(void (**)(_QWORD *, __int128 *))(*a1 + 80))(a1, &v260);
    v162 = (void **)(a2 + 728);
    if ((_BYTE)v260)
    {
      if (*(_BYTE *)(a2 + 752))
      {
        v163 = (uint64_t)(*(_QWORD *)(a2 + 736) - *(_QWORD *)(a2 + 728)) >> 1;
      }
      else
      {
        v163 = 0;
        *v162 = 0;
        *(_QWORD *)(a2 + 736) = 0;
        *(_QWORD *)(a2 + 744) = 0;
        *(_BYTE *)(a2 + 752) = 1;
      }
      *(_QWORD *)&v279 = v163;
      (*(void (**)(_QWORD *, __int128 *))(*a1 + 120))(a1, &v279);
      v199 = *(_QWORD *)(a2 + 736);
      v200 = *(_QWORD *)(a2 + 728);
      v201 = (v199 - v200) >> 1;
      if ((unint64_t)v279 <= v201)
      {
        if ((unint64_t)v279 < v201)
        {
          v199 = v200 + 2 * v279;
          *(_QWORD *)(a2 + 736) = v199;
        }
      }
      else
      {
        sub_2232C5090(a2 + 728, v279 - v201);
        v200 = *(_QWORD *)(a2 + 728);
        v199 = *(_QWORD *)(a2 + 736);
      }
      if (v199 != v200)
      {
        v202 = 2 * ((v199 - v200) >> 1);
        do
        {
          (*(void (**)(_QWORD *, uint64_t))(*a1 + 96))(a1, v200);
          v200 += 2;
          v202 -= 2;
        }
        while (v202);
      }
    }
    else if (*(_BYTE *)(a2 + 752))
    {
      v164 = *v162;
      if (*v162)
      {
        *(_QWORD *)(a2 + 736) = v164;
        operator delete(v164);
      }
      *(_BYTE *)(a2 + 752) = 0;
    }
    LOBYTE(v279) = 0;
    (*(void (**)(_QWORD *, __int128 *))(*a1 + 80))(a1, &v279);
    if ((_BYTE)v279)
    {
      if (!*(_BYTE *)(a2 + 764))
      {
        *(_DWORD *)(a2 + 760) = 0;
        *(_BYTE *)(a2 + 764) = 1;
      }
      (*(void (**)(_QWORD *, uint64_t))(*a1 + 104))(a1, a2 + 760);
    }
    else if (*(_BYTE *)(a2 + 764))
    {
      *(_BYTE *)(a2 + 764) = 0;
    }
    LOBYTE(v279) = 0;
    (*(void (**)(_QWORD *, __int128 *))(*a1 + 80))(a1, &v279);
    if ((_BYTE)v279)
    {
      if (!*(_BYTE *)(a2 + 772))
      {
        *(_DWORD *)(a2 + 768) = 0;
        *(_BYTE *)(a2 + 772) = 1;
      }
      (*(void (**)(_QWORD *, uint64_t))(*a1 + 104))(a1, a2 + 768);
    }
    else if (*(_BYTE *)(a2 + 772))
    {
      *(_BYTE *)(a2 + 772) = 0;
    }
    if (v161 >= 3)
    {
      LOBYTE(v279) = 0;
      (*(void (**)(_QWORD *, __int128 *))(*a1 + 80))(a1, &v279);
      if ((_BYTE)v279)
      {
        if (!*(_BYTE *)(a2 + 780))
        {
          *(_DWORD *)(a2 + 776) = 0;
          *(_BYTE *)(a2 + 780) = 1;
        }
        (*(void (**)(_QWORD *, uint64_t))(*a1 + 104))(a1, a2 + 776);
      }
      else if (*(_BYTE *)(a2 + 780))
      {
        *(_BYTE *)(a2 + 780) = 0;
      }
      if (v161 >= 4)
      {
        v235 = *a1;
        *(_QWORD *)&v279 = a1[1];
        v236 = v279;
        LODWORD(v260) = 2;
        (*(void (**)(_QWORD *, __int128 *))(v235 + 104))(a1, &v260);
        v237 = a2 + 784;
        if (v236 < 1)
        {
          if (v260 < 2)
            sub_223BDCE68((uint64_t)&v260, (uint64_t)a1, v237);
          else
            sub_223BDCFF0(a1, a2 + 784);
        }
        else
        {
          sub_223BDC98C((int *)&v279, a1, v237, v260);
        }
        if (v161 >= 5)
        {
          LOBYTE(v279) = 0;
          (*(void (**)(_QWORD *, __int128 *))(*a1 + 80))(a1, &v279);
          if ((_BYTE)v279)
          {
            v238 = (_OWORD *)(a2 + 800);
            if (!*(_BYTE *)(a2 + 836))
            {
              *(_DWORD *)(a2 + 832) = 0;
              *v238 = 0u;
              *(_OWORD *)(a2 + 816) = 0u;
              *(_BYTE *)(a2 + 836) = 1;
            }
            (*(void (**)(_QWORD *, _OWORD *))(*a1 + 128))(a1, v238);
            (*(void (**)(_QWORD *, uint64_t))(*a1 + 128))(a1, a2 + 804);
            (*(void (**)(_QWORD *, uint64_t))(*a1 + 128))(a1, a2 + 808);
            (*(void (**)(_QWORD *, uint64_t))(*a1 + 128))(a1, a2 + 812);
            (*(void (**)(_QWORD *, uint64_t))(*a1 + 128))(a1, a2 + 816);
            (*(void (**)(_QWORD *, uint64_t))(*a1 + 128))(a1, a2 + 820);
            (*(void (**)(_QWORD *, uint64_t))(*a1 + 128))(a1, a2 + 824);
            (*(void (**)(_QWORD *, uint64_t))(*a1 + 128))(a1, a2 + 828);
            (*(void (**)(_QWORD *, uint64_t))(*a1 + 128))(a1, a2 + 832);
          }
          else if (*(_BYTE *)(a2 + 836))
          {
            *(_BYTE *)(a2 + 836) = 0;
          }
        }
      }
    }
  }
LABEL_277:
  sub_223BDB158(a1, a2 + 840);
  LODWORD(v279) = 1;
  (*(void (**)(_QWORD *, __int128 *))(*a1 + 104))(a1, &v279);
  LOBYTE(v279) = 0;
  LOBYTE(v285[1]) = 0;
  sub_223BDB644(a1, (uint64_t)&v279);
  v165 = LOBYTE(v285[1]);
  if (LOBYTE(v285[1]))
  {
    sub_22416C400((uint64_t)&v279, (uint64_t)v252);
    *(_QWORD *)&v260 = &off_24EC28A18;
    sub_2232C59F4((uint64_t)v252, (uint64_t *)&v260 + 1);
    v166 = 1;
  }
  else
  {
    v166 = 0;
    LOBYTE(v260) = 0;
  }
  LOBYTE(v269) = v166;
  sub_2232C5C1C(a2 + 904, (uint64_t)&v260);
  if (!(_BYTE)v269)
    goto LABEL_285;
  *(_QWORD *)&v260 = &off_24EC28A18;
  v167 = v261;
  if (!v261)
    goto LABEL_285;
  v168 = (unint64_t *)&v261->__shared_owners_;
  do
    v169 = __ldaxr(v168);
  while (__stlxr(v169 - 1, v168));
  if (!v169)
  {
    ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
    std::__shared_weak_count::__release_weak(v167);
    if (!v165)
      goto LABEL_290;
  }
  else
  {
LABEL_285:
    if (!v165)
      goto LABEL_290;
  }
  v170 = v253;
  if (v253)
  {
    v171 = (unint64_t *)&v253->__shared_owners_;
    do
      v172 = __ldaxr(v171);
    while (__stlxr(v172 - 1, v171));
    if (!v172)
    {
      ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
      std::__shared_weak_count::__release_weak(v170);
      if (!LOBYTE(v285[1]))
        goto LABEL_293;
      goto LABEL_291;
    }
  }
LABEL_290:
  if (!LOBYTE(v285[1]))
    goto LABEL_293;
LABEL_291:
  if (LODWORD(v285[0]) != -1)
    ((void (*)(__int128 *, __int128 *))off_24EC5FFD0[LODWORD(v285[0])])(&v260, &v281);
LABEL_293:
  sub_223BDAFB4(a1, a2 + 992);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 80))(a1, a2 + 1080);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 128))(a1, a2 + 1084);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 128))(a1, a2 + 1088);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 128))(a1, a2 + 1092);
  *(_QWORD *)&v279 = 0;
  (*(void (**)(_QWORD *, __int128 *))(*a1 + 72))(a1, &v279);
  *(_QWORD *)(a2 + 1136) = v279;
  *(_QWORD *)&v279 = a1[1];
  sub_223BE040C((int *)&v279, (uint64_t)a1, a2 + 1144);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 136))(a1, a2 + 1184);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 136))(a1, a2 + 1192);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 136))(a1, a2 + 1200);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 136))(a1, a2 + 1208);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 136))(a1, a2 + 1216);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 136))(a1, a2 + 1224);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 136))(a1, a2 + 1232);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 136))(a1, a2 + 1240);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 136))(a1, a2 + 1248);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 136))(a1, a2 + 1256);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 136))(a1, a2 + 1264);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 136))(a1, a2 + 1272);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 136))(a1, a2 + 1280);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 136))(a1, a2 + 1288);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 136))(a1, a2 + 1296);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 136))(a1, a2 + 1304);
  if (a3 == 1)
  {
    LOBYTE(v279) = 0;
    v292 = 0;
    LOBYTE(v243) = 0;
    (*(void (**)(_QWORD *, void **))(*a1 + 80))(a1, &v243);
    if ((_BYTE)v243)
    {
      if (!v292)
      {
        v291 = 0;
        *(_OWORD *)__p = 0u;
        v290 = 0u;
        v287 = 0u;
        *(_OWORD *)v288 = 0u;
        *(_OWORD *)v285 = 0u;
        *(_OWORD *)v286 = 0u;
        *(_OWORD *)v283 = 0u;
        v284 = 0u;
        v281 = 0u;
        *(_OWORD *)v282 = 0u;
        v279 = 0u;
        *(_OWORD *)v280 = 0u;
        v292 = 1;
      }
      LODWORD(v260) = 4;
      (*(void (**)(_QWORD *, __int128 *))(*a1 + 104))(a1, &v260);
      sub_223BE101C((uint64_t)a1, (uint64_t)&v279, v260);
      if (!v292)
        goto LABEL_398;
      v173 = *(unsigned __int8 *)(a2 + 1512);
      *(_OWORD *)(a2 + 1312) = v279;
      *(_DWORD *)(a2 + 1328) = v280[0];
      v174 = (char **)(a2 + 1336);
      if (v173)
      {
        sub_2232C6B24(v174, (char **)&v280[1]);
        *(_BYTE *)(a2 + 1504) = v291;
        if (!v292)
          goto LABEL_398;
      }
      else
      {
        sub_2232C6D24(v174, (uint64_t)&v280[1]);
        v181 = v291;
        *(_BYTE *)(a2 + 1512) = 1;
        *(_BYTE *)(a2 + 1504) = v181;
        if (!v292)
          goto LABEL_398;
      }
    }
    else if (!v292)
    {
LABEL_398:
      LOBYTE(v260) = 0;
      (*(void (**)(_QWORD *, __int128 *))(*a1 + 80))(a1, &v260);
      if ((_BYTE)v260)
      {
        if (!*(_BYTE *)(a2 + 1128))
        {
          *(_OWORD *)(a2 + 1096) = 0u;
          *(_OWORD *)(a2 + 1112) = 0u;
          *(_BYTE *)(a2 + 1128) = 1;
        }
        LODWORD(v279) = 2;
        (*(void (**)(_QWORD *, __int128 *))(*a1 + 104))(a1, &v279);
        sub_223BE1478((uint64_t)a1, a2 + 1096, v279);
      }
      else if (*(_BYTE *)(a2 + 1128))
      {
        v193 = *(_QWORD *)(a2 + 1104);
        if (v193)
        {
          v194 = *(_QWORD *)(a2 + 1112);
          v195 = *(void **)(a2 + 1104);
          if (v194 != v193)
          {
            v196 = *(_QWORD *)(a2 + 1112);
            do
            {
              v198 = *(void **)(v196 - 24);
              v196 -= 24;
              v197 = v198;
              if (v198)
              {
                *(_QWORD *)(v194 - 16) = v197;
                operator delete(v197);
              }
              v194 = v196;
            }
            while (v196 != v193);
            v195 = *(void **)(a2 + 1104);
          }
          *(_QWORD *)(a2 + 1112) = v193;
          operator delete(v195);
        }
        *(_BYTE *)(a2 + 1128) = 0;
      }
      goto LABEL_439;
    }
    if (__p[1])
    {
      *(void **)&v290 = __p[1];
      operator delete(__p[1]);
    }
    if (v288[0])
    {
      v288[1] = v288[0];
      operator delete(v288[0]);
    }
    if (v286[1])
    {
      *(void **)&v287 = v286[1];
      operator delete(v286[1]);
    }
    if (v285[0])
    {
      v285[1] = v285[0];
      operator delete(v285[0]);
    }
    if (v283[1])
    {
      *(void **)&v284 = v283[1];
      operator delete(v283[1]);
    }
    if (v282[0])
    {
      v282[1] = v282[0];
      operator delete(v282[0]);
    }
    if (v280[1])
    {
      *(void **)&v281 = v280[1];
      operator delete(v280[1]);
    }
    goto LABEL_398;
  }
  if (a3 > 6)
  {
    LOBYTE(v260) = 0;
    (*(void (**)(_QWORD *, __int128 *))(*a1 + 80))(a1, &v260);
    if ((_BYTE)v260)
    {
      if (!*(_BYTE *)(a2 + 1512))
      {
        *(_QWORD *)(a2 + 1504) = 0;
        *(_OWORD *)(a2 + 1472) = 0u;
        *(_OWORD *)(a2 + 1488) = 0u;
        *(_OWORD *)(a2 + 1440) = 0u;
        *(_OWORD *)(a2 + 1456) = 0u;
        *(_OWORD *)(a2 + 1408) = 0u;
        *(_OWORD *)(a2 + 1424) = 0u;
        *(_OWORD *)(a2 + 1376) = 0u;
        *(_OWORD *)(a2 + 1392) = 0u;
        *(_OWORD *)(a2 + 1344) = 0u;
        *(_OWORD *)(a2 + 1360) = 0u;
        *(_OWORD *)(a2 + 1312) = 0u;
        *(_OWORD *)(a2 + 1328) = 0u;
        *(_BYTE *)(a2 + 1512) = 1;
      }
      LODWORD(v279) = 4;
      (*(void (**)(_QWORD *, __int128 *))(*a1 + 104))(a1, &v279);
      sub_223BE101C((uint64_t)a1, a2 + 1312, v279);
    }
    else if (*(_BYTE *)(a2 + 1512))
    {
      sub_223255CAC(a2 + 1336);
      *(_BYTE *)(a2 + 1512) = 0;
    }
    goto LABEL_440;
  }
  v243 = 0;
  v244 = 0;
  v245 = 0;
  *(_QWORD *)&v279 = 0;
  (*(void (**)(_QWORD *, __int128 *))(*a1 + 120))(a1, &v279);
  v175 = v244;
  v176 = 0x8F5C28F5C28F5C29 * ((v244 - (_BYTE *)v243) >> 3);
  if ((unint64_t)v279 > v176)
  {
    sub_2232C71E0((uint64_t *)&v243, v279 - v176);
    v177 = (char *)v243;
    v178 = v244;
    v179 = v244 - (_BYTE *)v243;
    if (v244 == v243)
      goto LABEL_392;
    goto LABEL_338;
  }
  if ((unint64_t)v279 < v176)
  {
    v178 = (char *)v243 + 200 * v279;
    if (v244 != v178)
    {
      do
      {
        v180 = v175 - 200;
        sub_223255CAC((uint64_t)(v175 - 176));
        v175 = v180;
      }
      while (v180 != v178);
    }
    v244 = v178;
    v177 = (char *)v243;
    v179 = v178 - (_BYTE *)v243;
    if (v178 == v243)
      goto LABEL_392;
    goto LABEL_338;
  }
  v178 = v244;
  v177 = (char *)v243;
  v179 = v244 - (_BYTE *)v243;
  if (v244 != v243)
  {
LABEL_338:
    v182 = 200 * (v179 / 200);
    do
    {
      LODWORD(v260) = 4;
      (*(void (**)(_QWORD *, __int128 *))(*a1 + 104))(a1, &v260);
      sub_223BE101C((uint64_t)a1, (uint64_t)v177, v260);
      v177 += 200;
      v182 -= 200;
    }
    while (v182);
    v178 = v244;
    if (v243 != v244)
    {
      v260 = 0uLL;
      v261 = 0;
      sub_2232C7578((uint64_t *)&v260, 0x8F5C28F5C28F5C29 * ((v244 - (_BYTE *)v243) >> 3));
      v183 = (char *)v243;
      v184 = v244;
      v259 = &v260;
      if (v243 != v244)
      {
        do
        {
          LOBYTE(v279) = *v183;
          *(_WORD *)((char *)&v279 + 1) = *(_WORD *)(v183 + 1);
          DWORD1(v279) = *((_DWORD *)v183 + 1);
          *((_QWORD *)&v279 + 1) = *((_QWORD *)v183 + 1);
          LODWORD(v280[0]) = *((_DWORD *)v183 + 4);
          v185 = v183 + 24;
          sub_223C7574C((char ***)v183 + 3, (uint64_t)&v280[1]);
          LOBYTE(v291) = v185[168];
          sub_2232C77CC((uint64_t **)&v259, (uint64_t)&v279);
          if (__p[1])
          {
            *(void **)&v290 = __p[1];
            operator delete(__p[1]);
          }
          if (v288[0])
          {
            v288[1] = v288[0];
            operator delete(v288[0]);
          }
          if (v286[1])
          {
            *(void **)&v287 = v286[1];
            operator delete(v286[1]);
          }
          if (v285[0])
          {
            v285[1] = v285[0];
            operator delete(v285[0]);
          }
          if (v283[1])
          {
            *(void **)&v284 = v283[1];
            operator delete(v283[1]);
          }
          if (v282[0])
          {
            v282[1] = v282[0];
            operator delete(v282[0]);
          }
          if (v280[1])
          {
            *(void **)&v281 = v280[1];
            operator delete(v280[1]);
          }
          v183 = v185 + 176;
        }
        while (v185 + 176 != v184);
      }
      *(_OWORD *)v239 = v260;
      v240 = v261;
      sub_223C2A714((uint64_t *)v239, (uint64_t)&v260);
      LOBYTE(v279) = v260;
      *(_WORD *)((char *)&v279 + 1) = *(_WORD *)((char *)&v260 + 1);
      DWORD1(v279) = DWORD1(v260);
      *((_QWORD *)&v279 + 1) = *((_QWORD *)&v260 + 1);
      LODWORD(v280[0]) = (_DWORD)v261;
      sub_223C75208((uint64_t)&v280[1], (char **)&v262);
      LOBYTE(v291) = v278;
      sub_2232C0648(a2 + 1312, &v279);
      if (__p[1])
      {
        *(void **)&v290 = __p[1];
        operator delete(__p[1]);
      }
      if (v288[0])
      {
        v288[1] = v288[0];
        operator delete(v288[0]);
      }
      if (v286[1])
      {
        *(void **)&v287 = v286[1];
        operator delete(v286[1]);
      }
      if (v285[0])
      {
        v285[1] = v285[0];
        operator delete(v285[0]);
      }
      if (v283[1])
      {
        *(void **)&v284 = v283[1];
        operator delete(v283[1]);
      }
      if (v282[0])
      {
        v282[1] = v282[0];
        operator delete(v282[0]);
      }
      if (v280[1])
      {
        *(void **)&v281 = v280[1];
        operator delete(v280[1]);
      }
      if (v276)
      {
        v277 = v276;
        operator delete(v276);
      }
      if (v274)
      {
        v275 = v274;
        operator delete(v274);
      }
      if (v272)
      {
        v273 = v272;
        operator delete(v272);
      }
      if (v270)
      {
        v271 = v270;
        operator delete(v270);
      }
      if (v268)
      {
        v269 = v268;
        operator delete(v268);
      }
      if (v265)
      {
        v266 = v265;
        operator delete(v265);
      }
      if (v262)
      {
        v263 = v262;
        operator delete(v262);
      }
      v186 = (char *)v239[0];
      if (v239[0])
      {
        v187 = (char *)v239[1];
        v188 = v239[0];
        if (v239[1] != v239[0])
        {
          do
          {
            v189 = v187 - 200;
            sub_223255CAC((uint64_t)(v187 - 176));
            v187 = v189;
          }
          while (v189 != v186);
          v188 = v239[0];
        }
        v239[1] = v186;
        operator delete(v188);
      }
      v178 = (char *)v243;
    }
  }
LABEL_392:
  if (v178)
  {
    v190 = v244;
    v191 = v178;
    if (v244 != v178)
    {
      do
      {
        v192 = v190 - 200;
        sub_223255CAC((uint64_t)(v190 - 176));
        v190 = v192;
      }
      while (v192 != v178);
      v191 = v243;
    }
    v244 = v178;
    operator delete(v191);
  }
  if (a3 <= 3)
    goto LABEL_398;
  if (a3 <= 4)
  {
LABEL_439:
    LODWORD(v279) = 0;
    (*(void (**)(_QWORD *, __int128 *))(*a1 + 104))(a1, &v279);
  }
LABEL_440:
  LOBYTE(v260) = 0;
  (*(void (**)(_QWORD *, __int128 *))(*a1 + 80))(a1, &v260);
  LODWORD(v203) = *(unsigned __int8 *)(a2 + 1648);
  if ((_BYTE)v260)
  {
    if (!*(_BYTE *)(a2 + 1648))
    {
      v204 = 0;
      *(_OWORD *)(a2 + 1552) = 0u;
      *(_OWORD *)(a2 + 1568) = 0u;
      *(_OWORD *)(a2 + 1520) = 0u;
      *(_OWORD *)(a2 + 1536) = 0u;
      v205 = (float *)&v279;
      do
      {
        if ((_DWORD)v203 == HIDWORD(v204))
          v206 = 1.0;
        else
          v206 = 0.0;
        *v205++ = v206;
        v207 = (v204 + 1);
        v208 = v204 & 0xFFFFFFFF00000000;
        v209 = v207 | v208;
        v210 = v208 + 0x100000000;
        if ((int)v203 >= 3)
          v203 = v210;
        else
          v203 = v209;
        v204 = v203;
      }
      while (v203 != 0x400000000);
      v211 = *(_OWORD *)v280;
      *(_OWORD *)(a2 + 1584) = v279;
      *(_OWORD *)(a2 + 1600) = v211;
      v212 = *(_OWORD *)v282;
      *(_OWORD *)(a2 + 1616) = v281;
      *(_OWORD *)(a2 + 1632) = v212;
      *(_BYTE *)(a2 + 1648) = 1;
    }
    LODWORD(v279) = 2;
    (*(void (**)(_QWORD *, __int128 *))(*a1 + 104))(a1, &v279);
    sub_223BB29E4((uint64_t)a1, a2 + 1520, v279);
  }
  else if (*(_BYTE *)(a2 + 1648))
  {
    *(_BYTE *)(a2 + 1648) = 0;
  }
  if (a3 >= 3)
  {
    *(_QWORD *)&v260 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(_QWORD *)(a2 + 1664) - *(_QWORD *)(a2 + 1656)) >> 4);
    (*(void (**)(_QWORD *, __int128 *))(*a1 + 120))(a1, &v260);
    v213 = (uint64_t *)(a2 + 1656);
    v214 = *(_QWORD *)(a2 + 1664);
    v215 = *(_QWORD *)(a2 + 1656);
    v216 = 0x86BCA1AF286BCA1BLL * ((v214 - v215) >> 4);
    if ((unint64_t)v260 <= v216)
    {
      if ((unint64_t)v260 >= v216)
      {
        v217 = *(_QWORD *)(a2 + 1664);
        v218 = *v213;
        if (v217 == *v213)
          goto LABEL_489;
      }
      else
      {
        v217 = v215 + 304 * v260;
        while (v214 != v217)
        {
          v220 = *(_QWORD *)(v214 - 160);
          if (v220)
          {
            v221 = *(_QWORD *)(v214 - 152);
            v219 = *(void **)(v214 - 160);
            if (v221 != v220)
            {
              v222 = *(_QWORD *)(v214 - 152);
              do
              {
                v224 = *(void **)(v222 - 24);
                v222 -= 24;
                v223 = v224;
                if (v224)
                {
                  *(_QWORD *)(v221 - 16) = v223;
                  operator delete(v223);
                }
                v221 = v222;
              }
              while (v222 != v220);
              v219 = *(void **)(v214 - 160);
            }
            *(_QWORD *)(v214 - 152) = v220;
            operator delete(v219);
          }
          v214 -= 304;
        }
        *(_QWORD *)(a2 + 1664) = v217;
        v218 = *v213;
        if (v217 == *v213)
          goto LABEL_489;
      }
    }
    else
    {
      sub_2232C879C((char **)(a2 + 1656), v260 - v216);
      v217 = *(_QWORD *)(a2 + 1664);
      v218 = *v213;
      if (v217 == *v213)
      {
LABEL_489:
        if (a3 >= 6)
        {
          LODWORD(v279) = 1;
          (*(void (**)(_QWORD *, __int128 *))(*a1 + 104))(a1, &v279);
          (*(void (**)(_QWORD *, uint64_t))(*a1 + 80))(a1, a2 + 1680);
          if (a3 >= 8)
          {
            LOBYTE(v279) = 0;
            (*(void (**)(_QWORD *, __int128 *))(*a1 + 80))(a1, &v279);
            if ((_BYTE)v279)
            {
              if (!*(_BYTE *)(a2 + 1682))
                *(_WORD *)(a2 + 1681) = 256;
              (*(void (**)(_QWORD *, uint64_t))(*a1 + 32))(a1, a2 + 1681);
            }
            else if (*(_BYTE *)(a2 + 1682))
            {
              *(_BYTE *)(a2 + 1682) = 0;
            }
          }
        }
        return;
      }
    }
    do
    {
      LODWORD(v279) = 1;
      (*(void (**)(_QWORD *, __int128 *))(*a1 + 104))(a1, &v279);
      *(_QWORD *)&v279 = 0;
      (*(void (**)(_QWORD *, __int128 *))(*a1 + 72))(a1, &v279);
      *(_QWORD *)v218 = v279;
      (*(void (**)(_QWORD *, uint64_t))(*a1 + 136))(a1, v218 + 8);
      (*(void (**)(_QWORD *, uint64_t))(*a1 + 136))(a1, v218 + 16);
      (*(void (**)(_QWORD *, uint64_t))(*a1 + 136))(a1, v218 + 24);
      (*(void (**)(_QWORD *, uint64_t))(*a1 + 136))(a1, v218 + 32);
      (*(void (**)(_QWORD *, uint64_t))(*a1 + 136))(a1, v218 + 40);
      (*(void (**)(_QWORD *, uint64_t))(*a1 + 136))(a1, v218 + 48);
      (*(void (**)(_QWORD *, uint64_t))(*a1 + 136))(a1, v218 + 56);
      (*(void (**)(_QWORD *, uint64_t))(*a1 + 136))(a1, v218 + 64);
      (*(void (**)(_QWORD *, uint64_t))(*a1 + 136))(a1, v218 + 72);
      (*(void (**)(_QWORD *, uint64_t))(*a1 + 136))(a1, v218 + 80);
      (*(void (**)(_QWORD *, uint64_t))(*a1 + 136))(a1, v218 + 88);
      (*(void (**)(_QWORD *, uint64_t))(*a1 + 136))(a1, v218 + 96);
      (*(void (**)(_QWORD *, uint64_t))(*a1 + 136))(a1, v218 + 104);
      (*(void (**)(_QWORD *, uint64_t))(*a1 + 136))(a1, v218 + 112);
      (*(void (**)(_QWORD *, uint64_t))(*a1 + 136))(a1, v218 + 120);
      (*(void (**)(_QWORD *, uint64_t))(*a1 + 136))(a1, v218 + 128);
      LODWORD(v279) = 2;
      (*(void (**)(_QWORD *, __int128 *))(*a1 + 104))(a1, &v279);
      sub_223BE1478((uint64_t)a1, v218 + 136, v279);
      LOBYTE(v243) = 0;
      (*(void (**)(_QWORD *, void **))(*a1 + 80))(a1, &v243);
      LODWORD(v225) = *(unsigned __int8 *)(v218 + 296);
      if ((_BYTE)v243)
      {
        if (!*(_BYTE *)(v218 + 296))
        {
          v226 = 0;
          *(_OWORD *)(v218 + 200) = 0u;
          *(_OWORD *)(v218 + 216) = 0u;
          v227 = (float *)&v279;
          *(_OWORD *)(v218 + 168) = 0u;
          *(_OWORD *)(v218 + 184) = 0u;
          do
          {
            if ((_DWORD)v225 == HIDWORD(v226))
              v228 = 1.0;
            else
              v228 = 0.0;
            *v227++ = v228;
            v229 = (v226 + 1);
            v230 = v226 & 0xFFFFFFFF00000000;
            v231 = v229 | v230;
            v232 = v230 + 0x100000000;
            if ((int)v225 >= 3)
              v225 = v232;
            else
              v225 = v231;
            v226 = v225;
          }
          while (v225 != 0x400000000);
          v233 = *(_OWORD *)v280;
          *(_OWORD *)(v218 + 232) = v279;
          *(_OWORD *)(v218 + 248) = v233;
          v234 = *(_OWORD *)v282;
          *(_OWORD *)(v218 + 264) = v281;
          *(_OWORD *)(v218 + 280) = v234;
          *(_BYTE *)(v218 + 296) = 1;
        }
        LODWORD(v279) = 2;
        (*(void (**)(_QWORD *, __int128 *))(*a1 + 104))(a1, &v279);
        sub_223BB29E4((uint64_t)a1, v218 + 168, v279);
      }
      else if (*(_BYTE *)(v218 + 296))
      {
        *(_BYTE *)(v218 + 296) = 0;
      }
      v218 += 304;
    }
    while (v218 != v217);
    goto LABEL_489;
  }
}

void sub_223BDAB6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  uint64_t v20;
  uint64_t v21;

  sub_223255CAC(v21);
  sub_223255CAC(v20);
  sub_2232C0794(&a9);
  sub_2232C0794(&a20);
  _Unwind_Resume(a1);
}

void sub_223BDABA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  sub_2232C0794(&a9);
  sub_2232C0794(&a20);
  _Unwind_Resume(a1);
}

void sub_223BDABBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37)
{
  sub_2232C0794(&a37);
  sub_2232C0794(&a20);
  _Unwind_Resume(a1);
}

void sub_223BDAF94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_2232C0794((void **)va);
  _Unwind_Resume(a1);
}

void sub_223BDAFB4(_QWORD *a1, uint64_t a2)
{
  int v3;
  char v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE v11[16];
  std::__shared_weak_count *v12;
  uint64_t (**v13)();
  uint64_t v14;
  std::__shared_weak_count *v15;
  char v16;
  _BYTE v17[32];
  uint64_t v18;
  int v19;
  unsigned __int8 v20;

  v17[0] = 0;
  v20 = 0;
  sub_223BDB644(a1, (uint64_t)v17);
  v3 = v20;
  if (v20)
  {
    sub_22416C400((uint64_t)v17, (uint64_t)v11);
    v13 = &off_24EC28D40;
    sub_2232C495C((uint64_t)v11, &v14);
    v4 = 1;
  }
  else
  {
    v4 = 0;
    LOBYTE(v13) = 0;
  }
  v16 = v4;
  sub_2232C4B84(a2, (uint64_t)&v13);
  if (v16)
  {
    v13 = &off_24EC28D40;
    v5 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  if (!v3)
    goto LABEL_15;
  v8 = v12;
  if (!v12)
    goto LABEL_15;
  v9 = (unint64_t *)&v12->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v20)
      return;
  }
  else
  {
LABEL_15:
    if (!v20)
      return;
  }
  if (v19 != -1)
    ((void (*)(uint64_t (***)(), uint64_t *))off_24EC5FFD0[v19])(&v13, &v18);
}

void sub_223BDB100(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_22319B358((uint64_t)va);
  sub_2232C17E0(v2 - 144);
  _Unwind_Resume(a1);
}

void sub_223BDB158(_QWORD *a1, uint64_t a2)
{
  int v3;
  char v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE v11[16];
  std::__shared_weak_count *v12;
  uint64_t (**v13)();
  uint64_t v14;
  std::__shared_weak_count *v15;
  char v16;
  _BYTE v17[32];
  uint64_t v18;
  int v19;
  unsigned __int8 v20;

  v17[0] = 0;
  v20 = 0;
  sub_223BDB644(a1, (uint64_t)v17);
  v3 = v20;
  if (v20)
  {
    sub_22416C400((uint64_t)v17, (uint64_t)v11);
    v13 = &off_24EC29028;
    sub_2232C529C((uint64_t)v11, &v14);
    v4 = 1;
  }
  else
  {
    v4 = 0;
    LOBYTE(v13) = 0;
  }
  v16 = v4;
  sub_2232C5628(a2, (uint64_t)&v13);
  if (v16)
  {
    v13 = &off_24EC29028;
    v5 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  if (!v3)
    goto LABEL_15;
  v8 = v12;
  if (!v12)
    goto LABEL_15;
  v9 = (unint64_t *)&v12->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v20)
      return;
  }
  else
  {
LABEL_15:
    if (!v20)
      return;
  }
  if (v19 != -1)
    ((void (*)(uint64_t (***)(), uint64_t *))off_24EC5FFD0[v19])(&v13, &v18);
}

void sub_223BDB2A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  sub_22319B358((uint64_t)&a9);
  sub_2232C17E0((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_223BDB2FC(_QWORD *a1, uint64_t a2)
{
  int v3;
  char v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE v11[16];
  std::__shared_weak_count *v12;
  uint64_t (**v13)();
  uint64_t v14;
  std::__shared_weak_count *v15;
  char v16;
  _BYTE v17[32];
  uint64_t v18;
  int v19;
  unsigned __int8 v20;

  v17[0] = 0;
  v20 = 0;
  sub_223BDB644(a1, (uint64_t)v17);
  v3 = v20;
  if (v20)
  {
    sub_22416C400((uint64_t)v17, (uint64_t)v11);
    v13 = &off_24EC21040;
    sub_2232C1A28((uint64_t)v11, &v14);
    v4 = 1;
  }
  else
  {
    v4 = 0;
    LOBYTE(v13) = 0;
  }
  v16 = v4;
  sub_2232C1C50(a2, (uint64_t)&v13);
  if (v16)
  {
    v13 = &off_24EC21040;
    v5 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  if (!v3)
    goto LABEL_15;
  v8 = v12;
  if (!v12)
    goto LABEL_15;
  v9 = (unint64_t *)&v12->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v20)
      return;
  }
  else
  {
LABEL_15:
    if (!v20)
      return;
  }
  if (v19 != -1)
    ((void (*)(uint64_t (***)(), uint64_t *))off_24EC5FFD0[v19])(&v13, &v18);
}

void sub_223BDB448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  sub_22319B358((uint64_t)&a9);
  sub_2232C17E0((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_223BDB4A0(_QWORD *a1, uint64_t a2)
{
  int v3;
  char v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE v11[16];
  std::__shared_weak_count *v12;
  uint64_t (**v13)();
  uint64_t v14;
  std::__shared_weak_count *v15;
  char v16;
  _BYTE v17[32];
  uint64_t v18;
  int v19;
  unsigned __int8 v20;

  v17[0] = 0;
  v20 = 0;
  sub_223BDB644(a1, (uint64_t)v17);
  v3 = v20;
  if (v20)
  {
    sub_22416C400((uint64_t)v17, (uint64_t)v11);
    v13 = &off_24EC28BC8;
    sub_2232C1E78((uint64_t)v11, &v14);
    v4 = 1;
  }
  else
  {
    v4 = 0;
    LOBYTE(v13) = 0;
  }
  v16 = v4;
  sub_2232C264C(a2, (uint64_t)&v13);
  if (v16)
  {
    v13 = &off_24EC28BC8;
    v5 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  if (!v3)
    goto LABEL_15;
  v8 = v12;
  if (!v12)
    goto LABEL_15;
  v9 = (unint64_t *)&v12->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v20)
      return;
  }
  else
  {
LABEL_15:
    if (!v20)
      return;
  }
  if (v19 != -1)
    ((void (*)(uint64_t (***)(), uint64_t *))off_24EC5FFD0[v19])(&v13, &v18);
}

void sub_223BDB5EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  sub_22319B358((uint64_t)&a9);
  sub_2232C17E0((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_223BDB644(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  uint64_t (**v12)();
  uint64_t v13;
  std::__shared_weak_count *v14;

  v10 = 0;
  (*(void (**)(_QWORD *, char *))(*a1 + 80))(a1, &v10);
  if (v10)
  {
    if (!*(_BYTE *)(a2 + 104))
    {
      v12 = &off_24EC1F958;
      sub_2231B3FDC((uint64_t)&v13);
      sub_22416BD7C(a2, (uint64_t)&v12, 0);
      v4 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      *(_DWORD *)(a2 + 24) = 0;
      *(_BYTE *)(a2 + 104) = 1;
    }
    v7 = *a1;
    v12 = (uint64_t (**)())a1[1];
    v8 = (int)v12;
    v11 = 2;
    (*(void (**)(_QWORD *, unsigned int *))(v7 + 104))(a1, &v11);
    if (v8 < 1)
    {
      if (v11 < 2)
        sub_223BDB94C((uint64_t)&v11, a1, a2);
      else
        sub_223BDBBC4((uint64_t)a1, a2);
    }
    else
    {
      sub_223BDB820((int *)&v12, a1, a2, v11);
    }
  }
  else if (*(_BYTE *)(a2 + 104))
  {
    v9 = *(unsigned int *)(a2 + 96);
    if ((_DWORD)v9 != -1)
      ((void (*)(uint64_t (***)(), uint64_t))off_24EC5FFD0[v9])(&v12, a2 + 32);
    *(_DWORD *)(a2 + 96) = -1;
    *(_BYTE *)(a2 + 104) = 0;
  }
}

void sub_223BDB7DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  unint64_t *p_shared_owners;
  unint64_t v15;

  if (a13)
  {
    p_shared_owners = (unint64_t *)&a13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
      std::__shared_weak_count::__release_weak(a13);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_223BDB820(int *a1, _BYTE *a2, uint64_t a3, unsigned int a4)
{
  int v7;
  unsigned int v9;
  unsigned int v10;
  __int128 *v11;
  unsigned int v12;
  char v13;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    v12 = 2;
    (*(void (**)(_BYTE *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v12);
    if (v12 >= 3)
    {
      v10 = v12;
      v11 = sub_223BB9C9C();
      sub_22455C3A8((std::string *)v11, v10, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 > 0)
  {
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 16))(a2);
    sub_223BDBBC4((uint64_t)a2, a3);
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 24))(a2);
    return;
  }
LABEL_8:
  if (a4 >= 2)
    v9 = 2;
  else
    v9 = a4;
  if (v9 <= 1)
    sub_223BDB94C((uint64_t)&v13, a2, a3);
  else
    sub_223BDBBC4((uint64_t)a2, a3);
}

void sub_223BDB94C(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[28];
  _BYTE v11[64];
  int v12;
  __int16 v13;
  __int128 v14;
  int v15;
  _BYTE v16[64];
  unsigned int v17;
  char v18;
  uint64_t v19;

  *(_QWORD *)v10 = &off_24EC1F958;
  sub_2231B3FDC((uint64_t)&v10[8]);
  sub_22416B680((uint64_t)&v13, (uint64_t)v10, 0);
  v5 = *(std::__shared_weak_count **)&v10[16];
  if (*(_QWORD *)&v10[16])
  {
    v6 = (unint64_t *)(*(_QWORD *)&v10[16] + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v15 = 0;
  sub_223BDC680(a2, (uint64_t)&v13);
  *(_WORD *)v10 = v13;
  *(_OWORD *)&v10[8] = v14;
  v8 = v17;
  *(_DWORD *)&v10[24] = v15;
  v11[0] = 0;
  v12 = -1;
  if (v17 == -1)
  {
    *(_OWORD *)a3 = *(_OWORD *)v10;
    *(_OWORD *)(a3 + 12) = *(_OWORD *)&v10[12];
    v9 = *(unsigned int *)(a3 + 96);
    if ((_DWORD)v9 != -1)
    {
      ((void (*)(uint64_t *, uint64_t))off_24EC5FFD0[v9])(&v19, a3 + 32);
      *(_DWORD *)(a3 + 96) = -1;
    }
  }
  else
  {
    ((void (*)(char *, _BYTE *, _BYTE *))off_24EC60008[v17])(&v18, v11, v16);
    v12 = v8;
    *(_OWORD *)a3 = *(_OWORD *)v10;
    *(_OWORD *)(a3 + 12) = *(_OWORD *)&v10[12];
    v19 = a3 + 32;
    ((void (*)(uint64_t *))off_24EC60018[v8])(&v19);
  }
  if (v12 != -1)
    ((void (*)(uint64_t *, _BYTE *))off_24EC5FFD0[v12])(&v19, v11);
  if (v17 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_24EC5FFD0[v17])(v10, v16);
}

void sub_223BDBB20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  sub_22319A588((uint64_t)&a9);
  sub_2231B55F0((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_223BDBB3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, ...)
{
  uint64_t v14;
  uint64_t v15;
  va_list va;

  va_start(va, a14);
  if (a14 != -1)
    ((void (*)(uint64_t, uint64_t))off_24EC5FFD0[a14])(v15 - 56, v14);
  sub_2231B55F0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BDBB80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_223BDBBC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD v8[5];
  _BYTE v9[22];

  v8[0] = a2;
  sub_223BDBF5C((_BYTE *)a1, (_WORD **)v8);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  LODWORD(v8[0]) = 2;
  (*(void (**)(uint64_t, _QWORD *))(v4 + 104))(a1, v8);
  if ((int)v6 >= 1)
  {
    sub_223BDC110((int *)&v6, (_BYTE *)a1, (_OWORD *)(a2 + 8), v8[0]);
    if (*(_WORD *)a2 == 1)
      goto LABEL_8;
LABEL_6:
    sub_223BDBDAC(a1, (unsigned __int16 *)a2);
    return;
  }
  if (LODWORD(v8[0]) < 2)
  {
    *(_OWORD *)v8 = 1uLL;
    v7 = v8;
    sub_223BDC2D0((_BYTE *)a1, &v7);
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 104))(a1, &v8[1]);
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a1 + 104))(a1, (unint64_t)v8 | 0xC);
    *(_OWORD *)(a2 + 8) = *(_OWORD *)v8;
    if (*(_WORD *)a2 != 1)
      goto LABEL_6;
  }
  else
  {
    v8[0] = a2 + 8;
    sub_223BDC2D0((_BYTE *)a1, (_QWORD **)v8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, a2 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, a2 + 20);
    if (*(_WORD *)a2 != 1)
      goto LABEL_6;
  }
LABEL_8:
  sub_22416B404((uint64_t *)(a2 + 8), *(_DWORD *)(a2 + 24));
  v5 = *(unsigned int *)(a2 + 96);
  if ((_DWORD)v5 != -1)
    ((void (*)(_QWORD **, uint64_t))off_24EC6D660[v5])(&v7, a2 + 32);
  *(_QWORD *)(a2 + 32) = &off_24EC1F958;
  *(_OWORD *)(a2 + 40) = *(_OWORD *)&v8[1];
  *(_OWORD *)(a2 + 56) = *(_OWORD *)&v8[3];
  *(_OWORD *)(a2 + 72) = *(_OWORD *)v9;
  *(_QWORD *)(a2 + 86) = *(_QWORD *)&v9[14];
  *(_DWORD *)(a2 + 96) = 1;
  sub_22416E278((const void *)a1, a2 + 32);
}

uint64_t sub_223BDBDAC(uint64_t a1, unsigned __int16 *a2)
{
  int v4;
  uint64_t v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD v14[10];
  char v15;
  _QWORD v16[21];
  _BYTE v17[8];
  __int128 v18;
  __int128 v19;
  _BYTE v20[22];
  char v21;

  v4 = sub_22416E0BC(*a2);
  sub_223BDC480((uint64_t)v14, a1);
  sub_2231B3838(v16, v4, (uint64_t)v17);
  v5 = *((unsigned int *)a2 + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_14;
  if ((_DWORD)v5 != 1)
  {
    ((void (*)(char *, unsigned __int16 *))off_24EC5FFD0[v5])(&v21, a2 + 16);
LABEL_14:
    *((_QWORD *)a2 + 4) = &off_24EC1F958;
    *(_OWORD *)(a2 + 20) = v18;
    v18 = 0uLL;
    *(_OWORD *)(a2 + 28) = v19;
    *(_OWORD *)(a2 + 36) = *(_OWORD *)v20;
    *(_QWORD *)(a2 + 43) = *(_QWORD *)&v20[14];
    *((_DWORD *)a2 + 24) = 1;
    goto LABEL_15;
  }
  v6 = v18;
  v18 = 0uLL;
  v7 = (std::__shared_weak_count *)*((_QWORD *)a2 + 6);
  *(_OWORD *)(a2 + 20) = v6;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_OWORD *)(a2 + 28) = v19;
  *(_OWORD *)(a2 + 36) = *(_OWORD *)v20;
  *(_QWORD *)(a2 + 43) = *(_QWORD *)&v20[14];
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
LABEL_15:
  std::istream::~istream();
  v14[0] = MEMORY[0x24BEDB848] + 16;
  if (v15 < 0)
    operator delete((void *)v14[8]);
  return std::streambuf::~streambuf();
}

void sub_223BDBF48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2231B394C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BDBF5C(_BYTE *a1, _WORD **a2)
{
  int v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  uint64_t v13;
  __int16 v14;
  uint64_t v15;

  if ((a1[12] & 2) != 0)
  {
    __p[0] = 0;
    __p[1] = 0;
    v13 = 0;
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 144))(a1, __p);
    v3 = SHIBYTE(v13);
    v4 = (char *)__p[0];
    v5 = operator new();
    v6 = v5;
    if (v3 >= 0)
      v7 = (char *)__p;
    else
      v7 = v4;
    sub_22456E918(v5, v7);
    v15 = v6;
    v14 = 0;
    sub_22416D4C8((uint64_t *)v6, &v14);
    v8 = v14;
    v9 = MEMORY[0x24BEDB7F0];
    v10 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v6 = *MEMORY[0x24BEDB7F0];
    v11 = *(_QWORD *)(v9 + 72);
    *(_QWORD *)(v6 + *(_QWORD *)(v10 - 24)) = *(_QWORD *)(v9 + 64);
    *(_QWORD *)(v6 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v6 + 16) = v11;
    if (*(char *)(v6 + 111) < 0)
      operator delete(*(void **)(v6 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v6 + 128);
    MEMORY[0x227684CE8](v6, 0x10B2C40EED050F3);
    **a2 = v8;
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
  }
  else
  {
    LOWORD(__p[0]) = 0;
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 96))(a1, __p);
    **a2 = __p[0];
  }
}

void sub_223BDC0C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  sub_22456E764(&a17);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

double sub_223BDC110(int *a1, _BYTE *a2, _OWORD *a3, unsigned int a4)
{
  int v7;
  double result;
  unsigned int v10;
  unsigned int v11;
  __int128 *v12;
  __int128 v13;
  __int128 *v14;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    LODWORD(v13) = 2;
    (*(void (**)(_BYTE *, __int128 *))(*(_QWORD *)a2 + 104))(a2, &v13);
    if (v13 >= 3)
    {
      v11 = v13;
      v12 = sub_223BBAE20();
      sub_22455C3A8((std::string *)v12, v11, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 > 0)
  {
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 16))(a2);
    *(_QWORD *)&v13 = a3;
    sub_223BDC2D0(a2, (_QWORD **)&v13);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 104))(a2, (uint64_t)a3 + 8);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 104))(a2, (uint64_t)a3 + 12);
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 24))(a2);
    return result;
  }
LABEL_8:
  if (a4 >= 2)
    v10 = 2;
  else
    v10 = a4;
  if (v10 < 2)
  {
    v13 = 1uLL;
    v14 = &v13;
    sub_223BDC2D0(a2, (_QWORD **)&v14);
    (*(void (**)(_BYTE *, char *))(*(_QWORD *)a2 + 104))(a2, (char *)&v13 + 8);
    (*(void (**)(_BYTE *, unint64_t))(*(_QWORD *)a2 + 104))(a2, (unint64_t)&v13 | 0xC);
    result = *(double *)&v13;
    *a3 = v13;
  }
  else
  {
    *(_QWORD *)&v13 = a3;
    sub_223BDC2D0(a2, (_QWORD **)&v13);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 104))(a2, (uint64_t)a3 + 8);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 104))(a2, (uint64_t)a3 + 12);
  }
  return result;
}

void sub_223BDC2D0(_BYTE *a1, _QWORD **a2)
{
  int v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  uint64_t v13;
  _QWORD v14[2];

  if ((a1[12] & 2) != 0)
  {
    __p[0] = 0;
    __p[1] = 0;
    v13 = 0;
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 144))(a1, __p);
    v3 = SHIBYTE(v13);
    v4 = (char *)__p[0];
    v5 = operator new();
    v6 = v5;
    if (v3 >= 0)
      v7 = (char *)__p;
    else
      v7 = v4;
    sub_22456E918(v5, v7);
    v14[0] = 0;
    v14[1] = v6;
    sub_22416DB34((uint64_t *)v6, v14);
    v8 = v14[0];
    v9 = MEMORY[0x24BEDB7F0];
    v10 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v6 = *MEMORY[0x24BEDB7F0];
    v11 = *(_QWORD *)(v9 + 72);
    *(_QWORD *)(v6 + *(_QWORD *)(v10 - 24)) = *(_QWORD *)(v9 + 64);
    *(_QWORD *)(v6 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v6 + 16) = v11;
    if (*(char *)(v6 + 111) < 0)
      operator delete(*(void **)(v6 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v6 + 128);
    MEMORY[0x227684CE8](v6, 0x10B2C40EED050F3);
    **a2 = v8;
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
  }
  else
  {
    __p[0] = 0;
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 120))(a1, __p);
    **a2 = __p[0];
  }
}

void sub_223BDC434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  sub_22456E764(&a17);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_223BDC480(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void **v5;
  uint64_t v6;
  std::string::size_type v7;
  std::string *v8;
  _QWORD v10[2];
  std::string v11;
  std::string::size_type __n;

  v4 = std::streambuf::basic_streambuf();
  *(_QWORD *)v4 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(v4 + 64) = 0u;
  v5 = (void **)(v4 + 64);
  v6 = MEMORY[0x24BEDB820];
  *(_OWORD *)(v4 + 80) = 0u;
  *(_QWORD *)(v4 + 104) = v6 + 24;
  *(_DWORD *)(v4 + 96) = 24;
  *(_QWORD *)(v4 + 120) = v6 + 64;
  *(_QWORD *)(v4 + 112) = 0;
  std::ios_base::init((std::ios_base *)(v4 + 120), (void *)a1);
  *(_QWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = -1;
  __n = 0;
  (*(void (**)(uint64_t, std::string::size_type *))(*(_QWORD *)a2 + 120))(a2, &__n);
  memset(&v11, 0, sizeof(v11));
  if (!__n)
  {
    v7 = 0;
    goto LABEL_8;
  }
  std::string::append(&v11, __n, 0);
  v7 = __n;
  if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_8:
    v8 = &v11;
    goto LABEL_9;
  }
  v8 = (std::string *)v11.__r_.__value_.__r.__words[0];
  if (!v11.__r_.__value_.__r.__words[0] && __n)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v8 = 0;
  }
LABEL_9:
  v10[0] = v7;
  v10[1] = v8;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 272))(a2, v10);
  if (*(char *)(a1 + 87) < 0)
    operator delete(*v5);
  *(std::string *)v5 = v11;
  *((_BYTE *)&v11.__r_.__value_.__s + 23) = 0;
  v11.__r_.__value_.__s.__data_[0] = 0;
  sub_2231B5488(a1);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_223BDC614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  if (a16 < 0)
    operator delete(__p);
  std::istream::~istream();
  sub_2231A01E4(v16);
  _Unwind_Resume(a1);
}

void sub_223BDC680(_BYTE *a1, uint64_t a2)
{
  uint64_t v4;
  _WORD *v5;
  __int128 v6;
  __int128 v7;
  _BYTE v8[22];
  char v9;

  v5 = (_WORD *)a2;
  sub_223BDBF5C(a1, &v5);
  LODWORD(v5) = 1;
  (*(void (**)(_BYTE *, _WORD **))(*(_QWORD *)a1 + 104))(a1, &v5);
  v5 = (_WORD *)(a2 + 8);
  sub_223BDC2D0(a1, (_QWORD **)&v5);
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 104))(a1, a2 + 16);
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 104))(a1, a2 + 20);
  if (*(_WORD *)a2 == 1)
  {
    sub_22416B268((uint64_t *)(a2 + 8), *(_DWORD *)(a2 + 24));
    v4 = *(unsigned int *)(a2 + 96);
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, uint64_t))off_24EC6D660[v4])(&v9, a2 + 32);
    *(_QWORD *)(a2 + 32) = &off_24EC1F958;
    *(_OWORD *)(a2 + 40) = v6;
    *(_OWORD *)(a2 + 56) = v7;
    *(_OWORD *)(a2 + 72) = *(_OWORD *)v8;
    *(_QWORD *)(a2 + 86) = *(_QWORD *)&v8[14];
    *(_DWORD *)(a2 + 96) = 1;
    sub_22416E278(a1, a2 + 32);
  }
  else
  {
    sub_223BDC7DC((uint64_t)a1, (unsigned __int16 *)a2);
  }
}

uint64_t sub_223BDC7DC(uint64_t a1, unsigned __int16 *a2)
{
  int v4;
  uint64_t v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD v14[10];
  char v15;
  _QWORD v16[21];
  _BYTE v17[8];
  __int128 v18;
  __int128 v19;
  _BYTE v20[22];
  char v21;

  v4 = sub_22416E0BC(*a2);
  sub_223BDC480((uint64_t)v14, a1);
  sub_2231B3838(v16, v4, (uint64_t)v17);
  v5 = *((unsigned int *)a2 + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_14;
  if ((_DWORD)v5 != 1)
  {
    ((void (*)(char *, unsigned __int16 *))off_24EC5FFD0[v5])(&v21, a2 + 16);
LABEL_14:
    *((_QWORD *)a2 + 4) = &off_24EC1F958;
    *(_OWORD *)(a2 + 20) = v18;
    v18 = 0uLL;
    *(_OWORD *)(a2 + 28) = v19;
    *(_OWORD *)(a2 + 36) = *(_OWORD *)v20;
    *(_QWORD *)(a2 + 43) = *(_QWORD *)&v20[14];
    *((_DWORD *)a2 + 24) = 1;
    goto LABEL_15;
  }
  v6 = v18;
  v18 = 0uLL;
  v7 = (std::__shared_weak_count *)*((_QWORD *)a2 + 6);
  *(_OWORD *)(a2 + 20) = v6;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_OWORD *)(a2 + 28) = v19;
  *(_OWORD *)(a2 + 36) = *(_OWORD *)v20;
  *(_QWORD *)(a2 + 43) = *(_QWORD *)&v20[14];
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
LABEL_15:
  std::istream::~istream();
  v14[0] = MEMORY[0x24BEDB848] + 16;
  if (v15 < 0)
    operator delete((void *)v14[8]);
  return std::streambuf::~streambuf();
}

void sub_223BDC978(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2231B394C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BDC98C(int *a1, _QWORD *a2, uint64_t a3, unsigned int a4)
{
  int v7;
  unsigned int v9;
  unsigned int v10;
  __int128 *v11;
  unsigned int v12;
  char v13;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    v12 = 2;
    (*(void (**)(_QWORD *, unsigned int *))(*a2 + 104))(a2, &v12);
    if (v12 >= 3)
    {
      v10 = v12;
      v11 = sub_223BDCAB8();
      sub_22455C3A8((std::string *)v11, v10, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 > 0)
  {
    (*(void (**)(_QWORD *))(*a2 + 16))(a2);
    sub_223BDCFF0(a2, a3);
    (*(void (**)(_QWORD *))(*a2 + 24))(a2);
    return;
  }
LABEL_8:
  if (a4 >= 2)
    v9 = 2;
  else
    v9 = a4;
  if (v9 <= 1)
    sub_223BDCE68((uint64_t)&v13, (uint64_t)a2, a3);
  else
    sub_223BDCFF0(a2, a3);
}

__int128 *sub_223BDCAB8()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578EE38);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578EE38))
    return &xmmword_25578EE20;
  v2 = sub_223BDCB94();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&xmmword_25578EE20, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25578EE30 = v2->__r_.__value_.__r.__words[2];
    xmmword_25578EE20 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578EE20, &dword_22314D000);
  __cxa_guard_release(&qword_25578EE38);
  return &xmmword_25578EE20;
}

void sub_223BDCB7C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578EE38);
  _Unwind_Resume(a1);
}

std::string *sub_223BDCB94()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578EE58);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578EE58))
    return &stru_25578EE40;
  sub_223BDCC84((uint64_t)__p);
  sub_2232A0AA8((char *)__p, &stru_25578EE40);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578EE40, &dword_22314D000);
  __cxa_guard_release(&qword_25578EE58);
  return &stru_25578EE40;
}

void sub_223BDCC44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25578EE58);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25578EE58);
  _Unwind_Resume(a1);
}

void sub_223BDCC84(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25578EE78);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25578EE78))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cfio::DictionaryRefSample<>]", qword_25578EE60);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578EE60, &dword_22314D000);
    __cxa_guard_release(&qword_25578EE78);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25578EE98);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25578EE98))
  {
    v5 = sub_2231A38CC(qword_25578EE60, "<", 0);
    sub_2231A37C8(qword_25578EE60, 0, v5, qword_25578EE80);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578EE80, &dword_22314D000);
    __cxa_guard_release(&qword_25578EE98);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25578EEB8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25578EEB8))
  {
    sub_224573040((uint64_t)qword_25578EE80, (uint64_t)&xmmword_25578EEA0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578EEA0, &dword_22314D000);
    __cxa_guard_release(&qword_25578EEB8);
  }
  if (byte_25578EEB7 < 0)
  {
    sub_223197FA4((_BYTE *)a1, (void *)xmmword_25578EEA0, *((unint64_t *)&xmmword_25578EEA0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25578EEA0;
    *(_QWORD *)(a1 + 16) = unk_25578EEB0;
  }
}

void sub_223BDCE20(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578EEB8);
  _Unwind_Resume(a1);
}

void sub_223BDCE38(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578EE98);
  _Unwind_Resume(a1);
}

void sub_223BDCE50(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578EE78);
  _Unwind_Resume(a1);
}

void sub_223BDCE68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;

  *((_QWORD *)&v16 + 1) = 0;
  v17 = 0;
  *(_QWORD *)&v16 = (char *)&v16 + 8;
  sub_224530B6C(&v16, &v18);
  v15 = v18;
  sub_22323DF84((uint64_t)&v16, *((char **)&v16 + 1));
  sub_223BE00F4(a2, (uint64_t)&v15);
  sub_224518820(&v16, (uint64_t)&v15);
  v5 = v16;
  v16 = 0uLL;
  v6 = *(std::__shared_weak_count **)(a3 + 8);
  *(_OWORD *)a3 = v5;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_223BDCFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223BDCFC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223BDCFD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, char *a12)
{
  sub_22323DF84((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

void sub_223BDCFF0(_QWORD *a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  _WORD *v7;
  int64_t v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void **v29;
  void **v30;
  void *v31;
  void *v32[2];
  void *__p[2];
  __int128 v34;
  unint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t *v38;
  int *v39;
  int v40;
  char v41;

  *(_OWORD *)__p = 0u;
  v34 = 0u;
  *(_OWORD *)v32 = 0u;
  sub_223BD8570((uint64_t)a1, (char **)v32);
  v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - (unint64_t)__p[1]) >> 3);
  (*(void (**)(_QWORD *, unint64_t *))(*a1 + 120))(a1, &v35);
  v4 = (char *)v34;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - (unint64_t)__p[1]) >> 3);
  v6 = v35 - v5;
  if (v35 > v5)
  {
    sub_2231B7814((uint64_t *)&__p[1], v6);
    v7 = __p[1];
    v8 = v34 - (unint64_t)__p[1];
    if ((void *)v34 == __p[1])
      goto LABEL_23;
    goto LABEL_16;
  }
  if (v35 >= v5)
  {
    v7 = __p[1];
    v8 = v34 - (unint64_t)__p[1];
    if ((void *)v34 == __p[1])
      goto LABEL_23;
    goto LABEL_16;
  }
  v9 = (char *)__p[1] + 24 * v35;
  while (v4 != v9)
  {
    v10 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *, unint64_t))v10->__on_zero_shared)(v10, v6);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v4 -= 24;
  }
  *(_QWORD *)&v34 = v9;
  v7 = __p[1];
  v8 = v9 - (char *)__p[1];
  if (v9 != __p[1])
  {
LABEL_16:
    v13 = 24 * (v8 / 24);
    do
    {
      v14 = *a1;
      v36 = a1[1];
      v40 = 0;
      LODWORD(v37) = 2;
      (*(void (**)(_QWORD *, __int128 *))(v14 + 104))(a1, &v37);
      v15 = v37;
      v40 = v37;
      *(_QWORD *)&v37 = a1;
      *((_QWORD *)&v37 + 1) = v7;
      v38 = &v36;
      v39 = &v40;
      if ((int)v36 >= 1)
      {
        sub_223BDD51C((uint64_t)&v37);
      }
      else if (v15 < 2)
      {
        sub_223BDDB1C((uint64_t)&v41, (uint64_t)a1, (uint64_t)v7);
      }
      else
      {
        sub_223BDDCD4((uint64_t)a1, v7);
      }
      v7 += 12;
      v13 -= 24;
    }
    while (v13);
  }
LABEL_23:
  sub_22451907C((uint64_t *)v32, (void ***)&v37);
  v16 = v37;
  v37 = 0uLL;
  v17 = *(std::__shared_weak_count **)(a2 + 8);
  *(_OWORD *)a2 = v16;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
  if (*((_QWORD *)&v37 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = (char *)__p[1];
  if (__p[1])
  {
    v24 = (char *)v34;
    v25 = __p[1];
    if ((void *)v34 != __p[1])
    {
      do
      {
        v26 = (std::__shared_weak_count *)*((_QWORD *)v24 - 1);
        if (v26)
        {
          v27 = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        v24 -= 24;
      }
      while (v24 != v23);
      v25 = __p[1];
    }
    *(_QWORD *)&v34 = v23;
    operator delete(v25);
  }
  v29 = (void **)v32[0];
  if (v32[0])
  {
    v30 = (void **)v32[1];
    v31 = v32[0];
    if (v32[1] != v32[0])
    {
      do
      {
        if (*((char *)v30 - 1) < 0)
          operator delete(*(v30 - 3));
        v30 -= 3;
      }
      while (v30 != v29);
      v31 = v32[0];
    }
    v32[1] = v29;
    operator delete(v31);
  }
}

void sub_223BDD318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_2231A6210(&a9);
  _Unwind_Resume(a1);
}

void sub_223BDD32C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_2231A6210(&a9);
  _Unwind_Resume(a1);
}

void sub_223BDD340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_2231A6210(&a9);
  _Unwind_Resume(a1);
}

void sub_223BDD354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_2231A6210(&a9);
  _Unwind_Resume(a1);
}

void sub_223BDD368(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;

  v17 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  (*(void (**)(_QWORD *, unint64_t *))(*a1 + 120))(a1, &v17);
  v4 = a2[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3);
  v6 = v17 - v5;
  if (v17 > v5)
  {
    sub_2231B7814(a2, v6);
    v9 = a2;
    v7 = *a2;
    v8 = v9[1];
    v10 = v8 - v7;
    if (v8 == v7)
      return;
    goto LABEL_16;
  }
  if (v17 >= v5)
  {
    v7 = *a2;
    v10 = v4 - v7;
    if (v4 == v7)
      return;
    goto LABEL_16;
  }
  v11 = *a2 + 24 * v17;
  while (v4 != v11)
  {
    v12 = *(std::__shared_weak_count **)(v4 - 8);
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *, unint64_t))v12->__on_zero_shared)(v12, v6);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v4 -= 24;
  }
  a2[1] = v11;
  v7 = *a2;
  v10 = v11 - v7;
  if (v11 != v7)
  {
LABEL_16:
    v15 = 24 * (v10 / 24);
    do
    {
      v16 = *a1;
      v18 = a1[1];
      v19 = 2;
      (*(void (**)(_QWORD *, unsigned int *))(v16 + 104))(a1, &v19);
      if ((int)v18 >= 1)
      {
        sub_223BDD640((int *)&v18, (uint64_t)a1, v7, v19);
      }
      else if (v19 < 2)
      {
        sub_223BDDB1C((uint64_t)&v19, (uint64_t)a1, v7);
      }
      else
      {
        sub_223BDDCD4(a1, v7, v19);
      }
      v7 += 24;
      v15 -= 24;
    }
    while (v15);
  }
}

void sub_223BDD51C(uint64_t a1)
{
  uint64_t v1;
  _WORD *v2;
  int *v3;
  unsigned int v4;
  int v5;
  unsigned int v7;
  unsigned int v8;
  __int128 *v9;
  char v10;
  unsigned int v11;

  v1 = *(_QWORD *)a1;
  v2 = *(_WORD **)(a1 + 8);
  v3 = *(int **)(a1 + 16);
  v4 = **(_DWORD **)(a1 + 24);
  v5 = *v3;
  if (*v3 == 2)
  {
    if (v4 < 2)
      goto LABEL_9;
    v11 = 2;
    (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)v1 + 104))(v1, &v11);
    if (v11 >= 3)
    {
      v8 = v11;
      v9 = sub_223BDD76C();
      sub_22455C3A8((std::string *)v9, v8, 2u);
    }
    v5 = *v3;
  }
  if (v5 >= 1 && v4 > 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
    sub_223BDDCD4(v1, v2);
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
    return;
  }
LABEL_9:
  if (v4 >= 2)
    v7 = 2;
  else
    v7 = v4;
  if (v7 <= 1)
    sub_223BDDB1C((uint64_t)&v10, v1, (uint64_t)v2);
  else
    sub_223BDDCD4(v1, v2);
}

void sub_223BDD640(int *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v7;
  unsigned int v9;
  unsigned int v10;
  __int128 *v11;
  unsigned int v12;
  char v13;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    v12 = 2;
    (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v12);
    if (v12 >= 3)
    {
      v10 = v12;
      v11 = sub_223BDD76C();
      sub_22455C3A8((std::string *)v11, v10, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 > 0)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    sub_223BDDCD4(a2, a3, 2);
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    return;
  }
LABEL_8:
  if (a4 >= 2)
    v9 = 2;
  else
    v9 = a4;
  if (v9 <= 1)
    sub_223BDDB1C((uint64_t)&v13, a2, a3);
  else
    sub_223BDDCD4(a2, a3, 2);
}

__int128 *sub_223BDD76C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578ED98);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578ED98))
    return &xmmword_25578ED80;
  v2 = sub_223BDD848();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&xmmword_25578ED80, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25578ED90 = v2->__r_.__value_.__r.__words[2];
    xmmword_25578ED80 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578ED80, &dword_22314D000);
  __cxa_guard_release(&qword_25578ED98);
  return &xmmword_25578ED80;
}

void sub_223BDD830(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578ED98);
  _Unwind_Resume(a1);
}

std::string *sub_223BDD848()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578EDB8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578EDB8))
    return &stru_25578EDA0;
  sub_223BDD938((uint64_t)__p);
  sub_2232A0AA8((char *)__p, &stru_25578EDA0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578EDA0, &dword_22314D000);
  __cxa_guard_release(&qword_25578EDB8);
  return &stru_25578EDA0;
}

void sub_223BDD8F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25578EDB8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25578EDB8);
  _Unwind_Resume(a1);
}

void sub_223BDD938(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25578EDD8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25578EDD8))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cfio::DictionaryValueSample<>]", qword_25578EDC0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578EDC0, &dword_22314D000);
    __cxa_guard_release(&qword_25578EDD8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25578EDF8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25578EDF8))
  {
    v5 = sub_2231A38CC(qword_25578EDC0, "<", 0);
    sub_2231A37C8(qword_25578EDC0, 0, v5, qword_25578EDE0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578EDE0, &dword_22314D000);
    __cxa_guard_release(&qword_25578EDF8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25578EE18);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25578EE18))
  {
    sub_224573040((uint64_t)qword_25578EDE0, (uint64_t)&xmmword_25578EE00);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578EE00, &dword_22314D000);
    __cxa_guard_release(&qword_25578EE18);
  }
  if (byte_25578EE17 < 0)
  {
    sub_223197FA4((_BYTE *)a1, (void *)xmmword_25578EE00, *((unint64_t *)&xmmword_25578EE00 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25578EE00;
    *(_QWORD *)(a1 + 16) = unk_25578EE10;
  }
}

void sub_223BDDAD4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578EE18);
  _Unwind_Resume(a1);
}

void sub_223BDDAEC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578EDF8);
  _Unwind_Resume(a1);
}

void sub_223BDDB04(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578EDD8);
  _Unwind_Resume(a1);
}

void sub_223BDDB1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  __int16 v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  v20 = 0;
  v21 = 0;
  sub_223BDF5AC(a2, (uint64_t)&v19);
  v4 = v19;
  sub_2231B9338(&v22, (uint64_t)&v20);
  sub_2231B9338(&v18, (uint64_t)&v22);
  v5 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  *(_WORD *)a3 = v4;
  v8 = v18;
  v18 = 0uLL;
  v9 = *(std::__shared_weak_count **)(a3 + 16);
  *(_OWORD *)(a3 + 8) = v8;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v21;
  if (v21)
  {
    v16 = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_223BDDC90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va1);
  sub_223197300((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BDDCAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_223197300((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BDDCC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_223197300((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BDDCD4(uint64_t a1, _WORD *a2)
{
  _DWORD *v4;
  uint64_t v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  char *v36;
  char *v37;
  void *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  char *v44;
  char *v45;
  void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  __int128 v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  void *v71[2];
  void *v72;
  void *v73[2];
  uint64_t v74;
  __int128 v75;
  void *__p[2];
  void *v77;
  void *v78;
  _DWORD *v79;

  __p[0] = a2;
  sub_223BDE5E0((_BYTE *)a1, (_WORD **)__p);
  switch(*a2)
  {
    case 0:
      LOBYTE(__p[0]) = 7;
      LOBYTE(__p[1]) = 7;
      v4 = operator new(4uLL);
      v77 = v4;
      *v4 = 0;
      v78 = v4 + 1;
      v79 = v4 + 1;
      v5 = *(_QWORD *)a1;
      v71[0] = *(void **)(a1 + 8);
      LODWORD(v73[0]) = 2;
      (*(void (**)(uint64_t, void **))(v5 + 104))(a1, v73);
      if (SLODWORD(v71[0]) < 1)
      {
        if (LODWORD(v73[0]) < 2)
        {
          sub_223BDEADC((uint64_t)v73, (_BYTE *)a1, (uint64_t)__p);
        }
        else
        {
          v73[0] = __p;
          sub_223BDEF78((_BYTE *)a1, (_BYTE **)v73);
          sub_223BDEC60(LOBYTE(__p[0]), a1, (uint64_t)__p);
        }
      }
      else
      {
        sub_223BDE794((int *)v71, (_BYTE *)a1, __p, v73[0]);
      }
      sub_224532630((uint64_t)v73, (uint64_t)&__p[1]);
      v75 = *(_OWORD *)v73;
      sub_2231B844C(v71, (uint64_t)&v75);
      v50 = *(_OWORD *)v71;
      v71[0] = 0;
      v71[1] = 0;
      v51 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
      *(_OWORD *)(a2 + 4) = v50;
      if (v51)
      {
        p_shared_owners = (unint64_t *)&v51->__shared_owners_;
        do
          v53 = __ldaxr(p_shared_owners);
        while (__stlxr(v53 - 1, p_shared_owners));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v54 = (std::__shared_weak_count *)v71[1];
      if (v71[1])
      {
        v55 = (unint64_t *)((char *)v71[1] + 8);
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      v57 = (std::__shared_weak_count *)*((_QWORD *)&v75 + 1);
      if (*((_QWORD *)&v75 + 1))
      {
        v58 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
      if (v77)
      {
        v78 = v77;
        operator delete(v77);
      }
      return;
    case 1:
      __p[0] = 0;
      __p[1] = 0;
      v77 = 0;
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 144))(a1, __p);
      sub_224527BAC((uint64_t)__p, (CFStringRef *)v71);
      sub_2231B855C(v73, (uint64_t)v71);
      v6 = *(_OWORD *)v73;
      v73[0] = 0;
      v73[1] = 0;
      v7 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
      *(_OWORD *)(a2 + 4) = v6;
      if (v7)
      {
        v8 = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v10 = (std::__shared_weak_count *)v73[1];
      if (v73[1])
      {
        v11 = (unint64_t *)((char *)v73[1] + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v13 = (std::__shared_weak_count *)v71[1];
      if (v71[1])
      {
        v14 = (unint64_t *)((char *)v71[1] + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      if (SHIBYTE(v77) < 0)
        operator delete(__p[0]);
      return;
    case 2:
      LOBYTE(v71[0]) = 0;
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 32))(a1, v71);
      sub_22452795C(v71, (std::__shared_weak_count_vtbl **)v73);
      sub_2231B866C(__p, (uint64_t)v73);
      v16 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      v17 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
      *(_OWORD *)(a2 + 4) = v16;
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      v20 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v21 = (unint64_t *)((char *)__p[1] + 8);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v23 = (std::__shared_weak_count *)v73[1];
      if (!v73[1])
        return;
      v24 = (unint64_t *)((char *)v73[1] + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      break;
    case 3:
      v73[0] = 0;
      v73[1] = 0;
      v74 = 0;
      sub_223BDD368((_QWORD *)a1, (uint64_t *)v73);
      __p[1] = 0;
      v77 = 0;
      __p[0] = 0;
      sub_2231B90C8((uint64_t)__p, 0xAAAAAAAAAAAAAAABLL * (((char *)v73[1] - (char *)v73[0]) >> 3));
      sub_223BDF444((uint64_t)v73[0], (uint64_t)v73[1], (uint64_t)__p);
      *(_OWORD *)v71 = *(_OWORD *)__p;
      v72 = v77;
      sub_2231B9590((uint64_t *)v71, (CFMutableArrayRef *)&v75);
      sub_2231B877C(__p, (uint64_t)&v75);
      v26 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      v27 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
      *(_OWORD *)(a2 + 4) = v26;
      if (v27)
      {
        v28 = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v30 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v31 = (unint64_t *)((char *)__p[1] + 8);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      v33 = (std::__shared_weak_count *)*((_QWORD *)&v75 + 1);
      if (*((_QWORD *)&v75 + 1))
      {
        v34 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v36 = (char *)v71[0];
      if (v71[0])
      {
        v37 = (char *)v71[1];
        v38 = v71[0];
        if (v71[1] != v71[0])
        {
          do
          {
            v39 = (std::__shared_weak_count *)*((_QWORD *)v37 - 1);
            if (v39)
            {
              v40 = (unint64_t *)&v39->__shared_owners_;
              do
                v41 = __ldaxr(v40);
              while (__stlxr(v41 - 1, v40));
              if (!v41)
              {
                ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                std::__shared_weak_count::__release_weak(v39);
              }
            }
            v37 -= 16;
          }
          while (v37 != v36);
          v38 = v71[0];
        }
        v71[1] = v36;
        operator delete(v38);
      }
      v44 = (char *)v73[0];
      if (v73[0])
      {
        v45 = (char *)v73[1];
        v46 = v73[0];
        if (v73[1] != v73[0])
        {
          do
          {
            v47 = (std::__shared_weak_count *)*((_QWORD *)v45 - 1);
            if (v47)
            {
              v48 = (unint64_t *)&v47->__shared_owners_;
              do
                v49 = __ldaxr(v48);
              while (__stlxr(v49 - 1, v48));
              if (!v49)
              {
                ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                std::__shared_weak_count::__release_weak(v47);
              }
            }
            v45 -= 24;
          }
          while (v45 != v44);
          v46 = v73[0];
        }
        v73[1] = v44;
        operator delete(v46);
      }
      return;
    case 4:
      __p[1] = 0;
      v77 = 0;
      __p[0] = &__p[1];
      sub_224530B6C(__p, v73);
      *(_OWORD *)v71 = *(_OWORD *)v73;
      sub_22323DF84((uint64_t)__p, (char *)__p[1]);
      v42 = *(_QWORD *)a1;
      __p[0] = *(void **)(a1 + 8);
      v43 = (int)__p[0];
      LODWORD(v73[0]) = 2;
      (*(void (**)(uint64_t, void **))(v42 + 104))(a1, v73);
      if (v43 < 1)
      {
        if (LODWORD(v73[0]) < 2)
          sub_223BDCE68((uint64_t)v73, a1, (uint64_t)v71);
        else
          sub_223BDCFF0(a1, v71, LODWORD(v73[0]));
      }
      else
      {
        sub_223BDC98C(__p, a1, v71, LODWORD(v73[0]));
      }
      sub_22319ED0C(v73, (uint64_t)v71);
      sub_2231B8924(__p, (uint64_t)v73);
      v60 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      v61 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
      *(_OWORD *)(a2 + 4) = v60;
      if (v61)
      {
        v62 = (unint64_t *)&v61->__shared_owners_;
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      v64 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v65 = (unint64_t *)((char *)__p[1] + 8);
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      v67 = (std::__shared_weak_count *)v73[1];
      if (v73[1])
      {
        v68 = (unint64_t *)((char *)v73[1] + 8);
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      v23 = (std::__shared_weak_count *)v71[1];
      if (!v71[1])
        return;
      v70 = (unint64_t *)((char *)v71[1] + 8);
      do
        v25 = __ldaxr(v70);
      while (__stlxr(v25 - 1, v70));
      break;
    default:
      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Foundation/FoundationIO/include/Kit/FoundationIO/DictionaryRefIO.h", 250, (uint64_t)"", 0, (uint64_t)"invalid value type identifier", 29, (void (*)(void **))sub_22457406C);
      abort();
  }
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
}

void sub_223BDE4A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  sub_223167354((uint64_t)&a13);
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223BDE4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223BDE4D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *a19, uint64_t a20,void *__p,uint64_t a22)
{
  sub_223167354((uint64_t)&a17);
  if (!__p)
    _Unwind_Resume(a1);
  a22 = (uint64_t)__p;
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223BDE5E0(_BYTE *a1, _WORD **a2)
{
  int v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  uint64_t v13;
  __int16 v14;
  uint64_t v15;

  if ((a1[12] & 2) != 0)
  {
    __p[0] = 0;
    __p[1] = 0;
    v13 = 0;
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 144))(a1, __p);
    v3 = SHIBYTE(v13);
    v4 = (char *)__p[0];
    v5 = operator new();
    v6 = v5;
    if (v3 >= 0)
      v7 = (char *)__p;
    else
      v7 = v4;
    sub_22456E918(v5, v7);
    v15 = v6;
    v14 = 0;
    sub_2245199E4((uint64_t *)v6, &v14);
    v8 = v14;
    v9 = MEMORY[0x24BEDB7F0];
    v10 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v6 = *MEMORY[0x24BEDB7F0];
    v11 = *(_QWORD *)(v9 + 72);
    *(_QWORD *)(v6 + *(_QWORD *)(v10 - 24)) = *(_QWORD *)(v9 + 64);
    *(_QWORD *)(v6 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v6 + 16) = v11;
    if (*(char *)(v6 + 111) < 0)
      operator delete(*(void **)(v6 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v6 + 128);
    MEMORY[0x227684CE8](v6, 0x10B2C40EED050F3);
    **a2 = v8;
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
  }
  else
  {
    LOWORD(__p[0]) = 0;
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 96))(a1, __p);
    **a2 = __p[0];
  }
}

void sub_223BDE748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  sub_22456E764(&a17);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223BDE794(int *a1, _BYTE *a2, _BYTE *a3, unsigned int a4)
{
  int v7;
  unsigned int v9;
  unsigned int v10;
  __int128 *v11;
  unsigned int v12;
  char v13;
  _BYTE *v14;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    v12 = 2;
    (*(void (**)(_BYTE *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v12);
    if (v12 >= 3)
    {
      v10 = v12;
      v11 = sub_223BDE8E0();
      sub_22455C3A8((std::string *)v11, v10, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 >= 1)
  {
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 16))(a2);
    v14 = a3;
    sub_223BDEF78(a2, &v14);
    sub_223BDEC60(*a3, (uint64_t)a2, (uint64_t)a3);
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 24))(a2);
    return;
  }
LABEL_8:
  if (a4 >= 2)
    v9 = 2;
  else
    v9 = a4;
  if (v9 <= 1)
  {
    sub_223BDEADC((uint64_t)&v13, a2, (uint64_t)a3);
  }
  else
  {
    v14 = a3;
    sub_223BDEF78(a2, &v14);
    sub_223BDEC60(*a3, (uint64_t)a2, (uint64_t)a3);
  }
}

__int128 *sub_223BDE8E0()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578EC78);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578EC78))
    return &xmmword_25578EC60;
  v2 = (char *)sub_223BDE9BC();
  if (v2[23] < 0)
  {
    sub_223197FA4(&xmmword_25578EC60, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_25578EC70 = *((_QWORD *)v2 + 2);
    xmmword_25578EC60 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578EC60, &dword_22314D000);
  __cxa_guard_release(&qword_25578EC78);
  return &xmmword_25578EC60;
}

void sub_223BDE9A4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578EC78);
  _Unwind_Resume(a1);
}

void *sub_223BDE9BC()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_25578EC98);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578EC98))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::commonio::NumberSample]", qword_25578EC80);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578EC80, &dword_22314D000);
    __cxa_guard_release(&qword_25578EC98);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_25578ECB8);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_25578ECB8))
    return &unk_25578ECA0;
  sub_224573040((uint64_t)qword_25578EC80, (uint64_t)&unk_25578ECA0);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_25578ECA0, &dword_22314D000);
  __cxa_guard_release(&qword_25578ECB8);
  return &unk_25578ECA0;
}

void sub_223BDEAAC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578ECB8);
  _Unwind_Resume(a1);
}

void sub_223BDEAC4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578EC98);
  _Unwind_Resume(a1);
}

void sub_223BDEADC(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  char *v5;
  unsigned __int8 v6;
  char v7;
  char *v8;
  size_t v9;
  char *v10;
  char *v11;
  void *v12;
  _QWORD *v13;
  unsigned __int8 *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19[8];
  char v20;
  char *v21;
  char *v22;
  _DWORD *v23;

  v19[0] = 7;
  v20 = 7;
  v5 = (char *)operator new(4uLL);
  v21 = v5;
  *(_DWORD *)v5 = 0;
  v22 = v5 + 4;
  v23 = v5 + 4;
  v14 = v19;
  sub_223BDEF78(a2, &v14);
  sub_223BDF12C(v19[0], (uint64_t)a2, (uint64_t)v19);
  v6 = v19[0];
  LOBYTE(v14) = v19[0];
  v7 = v20;
  v15 = v20;
  v17 = 0;
  v18 = 0;
  v16 = 0;
  v8 = v21;
  v9 = v22 - v21;
  if (v22 == v21)
  {
    v11 = 0;
    v10 = 0;
    *(_BYTE *)a3 = v19[0];
    *(_BYTE *)(a3 + 8) = v7;
    v13 = (_QWORD *)(a3 + 16);
    v12 = *(void **)(a3 + 16);
    if (v12)
    {
LABEL_4:
      *(_QWORD *)(a3 + 24) = v12;
      operator delete(v12);
      *v13 = 0;
      v13[1] = 0;
      v13[2] = 0;
      v8 = v21;
    }
  }
  else
  {
    if ((v9 & 0x8000000000000000) != 0)
      sub_2240336DC();
    v10 = (char *)operator new(v22 - v21);
    v11 = &v10[v9];
    memcpy(v10, v8, v9);
    *(_BYTE *)a3 = v6;
    *(_BYTE *)(a3 + 8) = v7;
    v13 = (_QWORD *)(a3 + 16);
    v12 = *(void **)(a3 + 16);
    if (v12)
      goto LABEL_4;
  }
  *(_QWORD *)(a3 + 16) = v10;
  *(_QWORD *)(a3 + 24) = v11;
  *(_QWORD *)(a3 + 32) = v11;
  if (v8)
  {
    v22 = v8;
    operator delete(v8);
  }
}

void sub_223BDEC14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  void *v18;

  if (__p)
  {
    operator delete(__p);
    v18 = a16;
    if (!a16)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v18 = a16;
    if (!a16)
      goto LABEL_3;
  }
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

void sub_223BDEC60(int a1, uint64_t a2, uint64_t a3)
{
  char v4;
  _BYTE *v5;
  _BYTE *v6;
  void *v7;
  __int16 v8;
  int v9;
  uint64_t v10;
  char v11;
  __int16 v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  switch(a1)
  {
    case 0:
      LOBYTE(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 80))(a2, &v17);
      v4 = v17;
      v5 = operator new(1uLL);
      *v5 = v4;
      v6 = v5 + 1;
      *(_BYTE *)(a3 + 8) = 0;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 1:
      LOWORD(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 96))(a2, &v17);
      v8 = v17;
      v5 = operator new(2uLL);
      *(_WORD *)v5 = v8;
      v6 = v5 + 2;
      *(_BYTE *)(a3 + 8) = 1;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 2:
      LODWORD(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v17);
      v9 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v9;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 2;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 3:
      v17 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 120))(a2, &v17);
      v10 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v10;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 3;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 5:
      LOBYTE(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 88))(a2, &v17);
      v11 = v17;
      v5 = operator new(1uLL);
      *v5 = v11;
      v6 = v5 + 1;
      *(_BYTE *)(a3 + 8) = 5;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 6:
      LOWORD(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 48))(a2, &v17);
      v12 = v17;
      v5 = operator new(2uLL);
      *(_WORD *)v5 = v12;
      v6 = v5 + 2;
      *(_BYTE *)(a3 + 8) = 6;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 7:
      LODWORD(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 56))(a2, &v17);
      v13 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v13;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 7;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 8:
      v17 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 72))(a2, &v17);
      v14 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v14;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 8;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 11:
      LODWORD(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 128))(a2, &v17);
      v15 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v15;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 11;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 12:
      v17 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 136))(a2, &v17);
      v16 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v16;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 12;
      v7 = *(void **)(a3 + 16);
      if (v7)
      {
LABEL_21:
        *(_QWORD *)(a3 + 24) = v7;
        operator delete(v7);
      }
LABEL_22:
      *(_QWORD *)(a3 + 16) = v5;
      *(_QWORD *)(a3 + 24) = v6;
      *(_QWORD *)(a3 + 32) = v6;
      return;
    default:
      sub_22454B274(a1);
  }
}

void sub_223BDEF78(_BYTE *a1, _BYTE **a2)
{
  int v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  uint64_t v13;
  char v14;
  uint64_t v15;

  if ((a1[12] & 2) != 0)
  {
    __p[0] = 0;
    __p[1] = 0;
    v13 = 0;
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 144))(a1, __p);
    v3 = SHIBYTE(v13);
    v4 = (char *)__p[0];
    v5 = operator new();
    v6 = v5;
    if (v3 >= 0)
      v7 = (char *)__p;
    else
      v7 = v4;
    sub_22456E918(v5, v7);
    v15 = v6;
    v14 = 0;
    sub_22454B5A4((uint64_t *)v6, &v14);
    v8 = v14;
    v9 = MEMORY[0x24BEDB7F0];
    v10 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v6 = *MEMORY[0x24BEDB7F0];
    v11 = *(_QWORD *)(v9 + 72);
    *(_QWORD *)(v6 + *(_QWORD *)(v10 - 24)) = *(_QWORD *)(v9 + 64);
    *(_QWORD *)(v6 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v6 + 16) = v11;
    if (*(char *)(v6 + 111) < 0)
      operator delete(*(void **)(v6 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v6 + 128);
    MEMORY[0x227684CE8](v6, 0x10B2C40EED050F3);
    **a2 = v8;
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
  }
  else
  {
    LOBYTE(__p[0]) = 0;
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 80))(a1, __p);
    **a2 = __p[0];
  }
}

void sub_223BDF0E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  sub_22456E764(&a17);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223BDF12C(int a1, uint64_t a2, uint64_t a3)
{
  char v4;
  _BYTE *v5;
  _BYTE *v6;
  void *v7;
  __int16 v8;
  int v9;
  uint64_t v10;
  char v11;
  __int16 v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  switch(a1)
  {
    case 0:
      LOBYTE(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 80))(a2, &v17);
      v4 = v17;
      v5 = operator new(1uLL);
      *v5 = v4;
      v6 = v5 + 1;
      *(_BYTE *)(a3 + 8) = 0;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 1:
      LOWORD(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 96))(a2, &v17);
      v8 = v17;
      v5 = operator new(2uLL);
      *(_WORD *)v5 = v8;
      v6 = v5 + 2;
      *(_BYTE *)(a3 + 8) = 1;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 2:
      LODWORD(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v17);
      v9 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v9;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 2;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 3:
      v17 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 120))(a2, &v17);
      v10 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v10;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 3;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 5:
      LOBYTE(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 88))(a2, &v17);
      v11 = v17;
      v5 = operator new(1uLL);
      *v5 = v11;
      v6 = v5 + 1;
      *(_BYTE *)(a3 + 8) = 5;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 6:
      LOWORD(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 48))(a2, &v17);
      v12 = v17;
      v5 = operator new(2uLL);
      *(_WORD *)v5 = v12;
      v6 = v5 + 2;
      *(_BYTE *)(a3 + 8) = 6;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 7:
      LODWORD(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 56))(a2, &v17);
      v13 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v13;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 7;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 8:
      v17 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 72))(a2, &v17);
      v14 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v14;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 8;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 11:
      LODWORD(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 128))(a2, &v17);
      v15 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v15;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 11;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 12:
      v17 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 136))(a2, &v17);
      v16 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v16;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 12;
      v7 = *(void **)(a3 + 16);
      if (v7)
      {
LABEL_21:
        *(_QWORD *)(a3 + 24) = v7;
        operator delete(v7);
      }
LABEL_22:
      *(_QWORD *)(a3 + 16) = v5;
      *(_QWORD *)(a3 + 24) = v6;
      *(_QWORD *)(a3 + 32) = v6;
      return;
    default:
      sub_22454B274(a1);
  }
}

uint64_t sub_223BDF444(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _OWORD *v6;
  std::__shared_weak_count *v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  __int128 v17;

  if (a1 != a2)
  {
    for (i = a1; i != a2; i += 24)
    {
      sub_2231B9338(&v15, i + 8);
      sub_2231B9338(&v17, (uint64_t)&v15);
      v6 = *(_OWORD **)(a3 + 8);
      if ((unint64_t)v6 >= *(_QWORD *)(a3 + 16))
      {
        v8 = sub_2231B9448((char **)a3, (uint64_t)&v17);
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
        *(_QWORD *)(a3 + 8) = v8;
        if (!v9)
          goto LABEL_11;
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
          v7 = v16;
          if (v16)
          {
LABEL_12:
            v12 = (unint64_t *)&v7->__shared_owners_;
            do
              v13 = __ldaxr(v12);
            while (__stlxr(v13 - 1, v12));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
        }
        else
        {
LABEL_11:
          v7 = v16;
          if (v16)
            goto LABEL_12;
        }
      }
      else
      {
        *v6 = v17;
        v17 = 0uLL;
        *(_QWORD *)(a3 + 8) = v6 + 1;
        v7 = v16;
        if (v16)
          goto LABEL_12;
      }
    }
  }
  return a3;
}

void sub_223BDF57C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va1);
  sub_223197300((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BDF598(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223197300((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BDF5AC(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void *v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  __int128 v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  char *v53;
  char *v54;
  void *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  __int128 v64;
  std::__shared_weak_count *v65;
  unint64_t *p_shared_owners;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  void *__p[2];
  void *v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  void *v80;
  void *v81;
  _DWORD *v82;

  *(_QWORD *)&v79 = a2;
  sub_223BDE5E0((_BYTE *)a1, (_WORD **)&v79);
  switch(*(_WORD *)a2)
  {
    case 0:
      LOBYTE(v79) = 7;
      BYTE8(v79) = 7;
      v4 = operator new(4uLL);
      v80 = v4;
      *v4 = 0;
      v81 = v4 + 1;
      v82 = v4 + 1;
      v5 = *(_QWORD *)a1;
      __p[0] = *(void **)(a1 + 8);
      LODWORD(v76) = 2;
      (*(void (**)(uint64_t, __int128 *))(v5 + 104))(a1, &v76);
      if (SLODWORD(__p[0]) < 1)
      {
        if (v76 < 2)
        {
          sub_223BDEADC((uint64_t)&v76, (_BYTE *)a1, (uint64_t)&v79);
        }
        else
        {
          *(_QWORD *)&v76 = &v79;
          sub_223BDEF78((_BYTE *)a1, (_BYTE **)&v76);
          sub_223BDEC60(v79, a1, (uint64_t)&v79);
        }
      }
      else
      {
        sub_223BDE794((int *)__p, (_BYTE *)a1, &v79, v76);
      }
      sub_224532630((uint64_t)&v76, (uint64_t)&v79 + 8);
      v78 = v76;
      sub_2231B844C(__p, (uint64_t)&v78);
      v64 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      v65 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v64;
      if (v65)
      {
        p_shared_owners = (unint64_t *)&v65->__shared_owners_;
        do
          v67 = __ldaxr(p_shared_owners);
        while (__stlxr(v67 - 1, p_shared_owners));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      v68 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v69 = (unint64_t *)((char *)__p[1] + 8);
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
      }
      v71 = (std::__shared_weak_count *)*((_QWORD *)&v78 + 1);
      if (*((_QWORD *)&v78 + 1))
      {
        v72 = (unint64_t *)(*((_QWORD *)&v78 + 1) + 8);
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
      }
      v16 = v80;
      if (!v80)
        return;
      v81 = v80;
      goto LABEL_120;
    case 1:
      v79 = 0uLL;
      v80 = 0;
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 144))(a1, &v79);
      sub_224527BAC((uint64_t)&v79, (CFStringRef *)__p);
      sub_2231B855C(&v76, (uint64_t)__p);
      v6 = v76;
      v76 = 0uLL;
      v7 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v6;
      if (v7)
      {
        v8 = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v10 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
      if (*((_QWORD *)&v76 + 1))
      {
        v11 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v13 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v14 = (unint64_t *)((char *)__p[1] + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      if ((SHIBYTE(v80) & 0x80000000) == 0)
        return;
      v16 = (void *)v79;
      goto LABEL_120;
    case 2:
      LOBYTE(__p[0]) = 0;
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 32))(a1, __p);
      sub_22452795C(__p, (std::__shared_weak_count_vtbl **)&v76);
      sub_2231B866C(&v79, (uint64_t)&v76);
      v17 = v79;
      v79 = 0uLL;
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v17;
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
      if (*((_QWORD *)&v79 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      v24 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
      if (!*((_QWORD *)&v76 + 1))
        return;
      v25 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      goto LABEL_58;
    case 3:
      v76 = 0uLL;
      v77 = 0;
      *(_QWORD *)&v79 = 0;
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 120))(a1, &v79);
      if ((_QWORD)v79)
      {
        sub_2231BA090((uint64_t *)&v76, v79);
        v28 = *((_QWORD *)&v76 + 1);
        v27 = v76;
        v29 = *((_QWORD *)&v76 + 1) - v76;
        if (*((_QWORD *)&v76 + 1) != (_QWORD)v76)
          goto LABEL_37;
LABEL_64:
        v31 = v28;
        goto LABEL_65;
      }
      v28 = *((_QWORD *)&v76 + 1);
      v27 = v76;
      v29 = *((_QWORD *)&v76 + 1) - v76;
      if (*((_QWORD *)&v76 + 1) == (_QWORD)v76)
        goto LABEL_64;
LABEL_37:
      v30 = 24 * (v29 / 24);
      do
      {
        LODWORD(__p[0]) = 1;
        (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 104))(a1, __p);
        sub_223BDF5AC(a1, v27, LODWORD(__p[0]));
        v27 += 24;
        v30 -= 24;
      }
      while (v30);
      v31 = *((_QWORD *)&v76 + 1);
      v28 = v76;
LABEL_65:
      v79 = 0uLL;
      v80 = 0;
      sub_2231B90C8((uint64_t)&v79, 0xAAAAAAAAAAAAAAABLL * ((v31 - v28) >> 3));
      sub_223BDFF8C(v76, *((uint64_t *)&v76 + 1), (uint64_t)&v79);
      *(_OWORD *)__p = v79;
      v75 = v80;
      sub_2231B9590((uint64_t *)__p, (CFMutableArrayRef *)&v78);
      sub_2231B877C(&v79, (uint64_t)&v78);
      v43 = v79;
      v79 = 0uLL;
      v44 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v43;
      if (v44)
      {
        v45 = (unint64_t *)&v44->__shared_owners_;
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
      v47 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
      if (*((_QWORD *)&v79 + 1))
      {
        v48 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
      v50 = (std::__shared_weak_count *)*((_QWORD *)&v78 + 1);
      if (*((_QWORD *)&v78 + 1))
      {
        v51 = (unint64_t *)(*((_QWORD *)&v78 + 1) + 8);
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      v53 = (char *)__p[0];
      if (__p[0])
      {
        v54 = (char *)__p[1];
        v55 = __p[0];
        if (__p[1] != __p[0])
        {
          do
          {
            v56 = (std::__shared_weak_count *)*((_QWORD *)v54 - 1);
            if (v56)
            {
              v57 = (unint64_t *)&v56->__shared_owners_;
              do
                v58 = __ldaxr(v57);
              while (__stlxr(v58 - 1, v57));
              if (!v58)
              {
                ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                std::__shared_weak_count::__release_weak(v56);
              }
            }
            v54 -= 16;
          }
          while (v54 != v53);
          v55 = __p[0];
        }
        __p[1] = v53;
        operator delete(v55);
      }
      v59 = v76;
      if ((_QWORD)v76)
      {
        v60 = *((_QWORD *)&v76 + 1);
        v16 = (void *)v76;
        if (*((_QWORD *)&v76 + 1) != (_QWORD)v76)
        {
          do
          {
            v61 = *(std::__shared_weak_count **)(v60 - 8);
            if (v61)
            {
              v62 = (unint64_t *)&v61->__shared_owners_;
              do
                v63 = __ldaxr(v62);
              while (__stlxr(v63 - 1, v62));
              if (!v63)
              {
                ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                std::__shared_weak_count::__release_weak(v61);
              }
            }
            v60 -= 24;
          }
          while (v60 != v59);
          v16 = (void *)v76;
        }
        *((_QWORD *)&v76 + 1) = v59;
LABEL_120:
        operator delete(v16);
      }
      return;
    case 4:
      *((_QWORD *)&v79 + 1) = 0;
      v80 = 0;
      *(_QWORD *)&v79 = (char *)&v79 + 8;
      sub_224530B6C(&v79, &v76);
      *(_OWORD *)__p = v76;
      sub_22323DF84((uint64_t)&v79, *((char **)&v79 + 1));
      LODWORD(v79) = 1;
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 104))(a1, &v79);
      sub_223BE00F4(a1, __p, v79);
      sub_22319ED0C(&v76, (uint64_t)__p);
      sub_2231B8924(&v79, (uint64_t)&v76);
      v32 = v79;
      v79 = 0uLL;
      v33 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v32;
      if (v33)
      {
        v34 = (unint64_t *)&v33->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v36 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
      if (*((_QWORD *)&v79 + 1))
      {
        v37 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      v39 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
      if (*((_QWORD *)&v76 + 1))
      {
        v40 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v24 = (std::__shared_weak_count *)__p[1];
      if (!__p[1])
        return;
      v42 = (unint64_t *)((char *)__p[1] + 8);
      do
        v26 = __ldaxr(v42);
      while (__stlxr(v26 - 1, v42));
LABEL_58:
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
      return;
    default:
      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Foundation/FoundationIO/include/Kit/FoundationIO/DictionaryRefIO.h", 250, (uint64_t)"", 0, (uint64_t)"invalid value type identifier", 29, (void (*)(void **))sub_22457406C);
      abort();
  }
}

void sub_223BDFE48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *a19, uint64_t a20,void *__p,uint64_t a22)
{
  sub_223167354((uint64_t)&a17);
  if (__p)
  {
    a22 = (uint64_t)__p;
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_223BDFF8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _OWORD *v6;
  std::__shared_weak_count *v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  __int128 v17;

  if (a1 != a2)
  {
    for (i = a1; i != a2; i += 24)
    {
      sub_2231B9338(&v15, i + 8);
      sub_2231B9338(&v17, (uint64_t)&v15);
      v6 = *(_OWORD **)(a3 + 8);
      if ((unint64_t)v6 >= *(_QWORD *)(a3 + 16))
      {
        v8 = sub_2231B9448((char **)a3, (uint64_t)&v17);
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
        *(_QWORD *)(a3 + 8) = v8;
        if (!v9)
          goto LABEL_11;
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
          v7 = v16;
          if (v16)
          {
LABEL_12:
            v12 = (unint64_t *)&v7->__shared_owners_;
            do
              v13 = __ldaxr(v12);
            while (__stlxr(v13 - 1, v12));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
        }
        else
        {
LABEL_11:
          v7 = v16;
          if (v16)
            goto LABEL_12;
        }
      }
      else
      {
        *v6 = v17;
        v17 = 0uLL;
        *(_QWORD *)(a3 + 8) = v6 + 1;
        v7 = v16;
        if (v16)
          goto LABEL_12;
      }
    }
  }
  return a3;
}

void sub_223BE00C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va1);
  sub_223197300((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BE00E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223197300((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BE00F4(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  int64_t v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  void **v27;
  void **v28;
  void *v29;
  __int128 v30;
  void *v31[2];
  void *__p[2];
  __int128 v33;
  int v34;

  *(_OWORD *)__p = 0u;
  v33 = 0u;
  *(_OWORD *)v31 = 0u;
  sub_223BD8570(a1, (char **)v31);
  *(_QWORD *)&v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - (unint64_t)__p[1]) >> 3);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 120))(a1, &v30);
  v4 = (char *)v33;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - (unint64_t)__p[1]) >> 3);
  v6 = v30 - v5;
  if ((unint64_t)v30 > v5)
  {
    sub_2231BA090((uint64_t *)&__p[1], v6);
    v7 = (char *)__p[1];
    v8 = v33 - (unint64_t)__p[1];
    if ((void *)v33 == __p[1])
      goto LABEL_18;
    goto LABEL_16;
  }
  if ((unint64_t)v30 >= v5)
  {
    v7 = (char *)__p[1];
    v8 = v33 - (unint64_t)__p[1];
    if ((void *)v33 == __p[1])
      goto LABEL_18;
    goto LABEL_16;
  }
  v9 = (char *)__p[1] + 24 * v30;
  while (v4 != v9)
  {
    v10 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *, unint64_t))v10->__on_zero_shared)(v10, v6);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v4 -= 24;
  }
  *(_QWORD *)&v33 = v9;
  v7 = (char *)__p[1];
  v8 = v9 - (char *)__p[1];
  if (v9 != __p[1])
  {
LABEL_16:
    v13 = 24 * (v8 / 24);
    do
    {
      v34 = 1;
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 104))(a1, &v34);
      sub_223BDF5AC(a1, (uint64_t)v7);
      v7 += 24;
      v13 -= 24;
    }
    while (v13);
  }
LABEL_18:
  sub_2245182E4((uint64_t *)v31, (void ***)&v30);
  v14 = v30;
  v30 = 0uLL;
  v15 = *(std::__shared_weak_count **)(a2 + 8);
  *(_OWORD *)a2 = v14;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (char *)__p[1];
  if (__p[1])
  {
    v22 = (char *)v33;
    v23 = __p[1];
    if ((void *)v33 != __p[1])
    {
      do
      {
        v24 = (std::__shared_weak_count *)*((_QWORD *)v22 - 1);
        if (v24)
        {
          v25 = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        v22 -= 24;
      }
      while (v22 != v21);
      v23 = __p[1];
    }
    *(_QWORD *)&v33 = v21;
    operator delete(v23);
  }
  v27 = (void **)v31[0];
  if (v31[0])
  {
    v28 = (void **)v31[1];
    v29 = v31[0];
    if (v31[1] != v31[0])
    {
      do
      {
        if (*((char *)v28 - 1) < 0)
          operator delete(*(v28 - 3));
        v28 -= 3;
      }
      while (v28 != v27);
      v29 = v31[0];
    }
    v31[1] = v27;
    operator delete(v29);
  }
}

void sub_223BE03BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2231A6210((void **)va);
  _Unwind_Resume(a1);
}

void sub_223BE03D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2231A6210((void **)va);
  _Unwind_Resume(a1);
}

void sub_223BE03E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2231A6210((void **)va);
  _Unwind_Resume(a1);
}

void sub_223BE03F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2231A6210((void **)va);
  _Unwind_Resume(a1);
}

void sub_223BE040C(int *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  char v7;

  v6 = 2;
  (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v6);
  if (*a1 < 1)
  {
    if (v6 < 2)
    {
      sub_223BE0D80((uint64_t)&v7, a2, a3);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 8);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 12);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 16);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 20);
    }
  }
  else
  {
    sub_223BE0534(a1, a2, a3, v6);
  }
}

void sub_223BE0534(int *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v7;
  int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 *v12;
  unsigned int v13;
  char v14;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    v13 = 2;
    (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v13);
    if (v13 >= 3)
    {
      v11 = v13;
      v12 = sub_223BE06B4();
      sub_22455C3A8((std::string *)v12, v11, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 >= 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v9 = 1;
    goto LABEL_13;
  }
LABEL_8:
  if (a4 >= 2)
    v10 = 2;
  else
    v10 = a4;
  if (v10 <= 1)
  {
    sub_223BE0D80((uint64_t)&v14, a2, a3);
    return;
  }
  v9 = 0;
LABEL_13:
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 12);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 20);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
}

__int128 *sub_223BE06B4()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578ECD8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578ECD8))
    return &xmmword_25578ECC0;
  v2 = sub_223BE0790();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&xmmword_25578ECC0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25578ECD0 = v2->__r_.__value_.__r.__words[2];
    xmmword_25578ECC0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578ECC0, &dword_22314D000);
  __cxa_guard_release(&qword_25578ECD8);
  return &xmmword_25578ECC0;
}

void sub_223BE0778(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578ECD8);
  _Unwind_Resume(a1);
}

std::string *sub_223BE0790()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578ECF8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578ECF8))
    return &stru_25578ECE0;
  sub_223BE0AA4((uint64_t)__p);
  sub_223BE0880((char *)__p, &stru_25578ECE0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578ECE0, &dword_22314D000);
  __cxa_guard_release(&qword_25578ECF8);
  return &stru_25578ECE0;
}

void sub_223BE0840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25578ECF8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25578ECF8);
  _Unwind_Resume(a1);
}

void sub_223BE0880(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *v15[2];
  uint64_t v16;
  __int128 v17;
  std::string::size_type v18;
  __int128 v19;
  std::string::size_type v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)v15 = *(_OWORD *)"float32";
  v16 = 0x700000000000000;
  v4 = sub_223BE0C88();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&v17, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v18 = v4->__r_.__value_.__r.__words[2];
    v17 = v5;
  }
  v6 = sub_2232A0DB4();
  if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&v19, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
  }
  else
  {
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v20 = v6->__r_.__value_.__r.__words[2];
    v19 = v7;
  }
  sub_22319BD1C(&__p, (uint64_t)v15, 3uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if (SHIBYTE(v20) < 0)
  {
    operator delete((void *)v19);
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
LABEL_17:
      if ((SHIBYTE(v16) & 0x80000000) == 0)
        return;
LABEL_21:
      operator delete(v15[0]);
      return;
    }
  }
  else if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_21;
}

void sub_223BE0A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48(&a10);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a18 & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(a1);
LABEL_7:
      operator delete(a13);
      goto LABEL_8;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a18 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

void sub_223BE0A7C()
{
  uint64_t v0;
  uint64_t v1;

  while (1)
  {
    if (*(char *)(v0 - 1) < 0)
      operator delete(*(void **)(v0 - 24));
    v0 -= 24;
    if (v0 == v1)
      JUMPOUT(0x223BE0A74);
  }
}

void sub_223BE0AA4(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25578ED38);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25578ED38))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::camio::PinholeCameraSample<float, cv3d::kit::cam::PixelOrigin::Center>]", qword_25578ED20);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578ED20, &dword_22314D000);
    __cxa_guard_release(&qword_25578ED38);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25578ED58);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25578ED58))
  {
    v5 = sub_2231A38CC(qword_25578ED20, "<", 0);
    sub_2231A37C8(qword_25578ED20, 0, v5, qword_25578ED40);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578ED40, &dword_22314D000);
    __cxa_guard_release(&qword_25578ED58);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25578ED78);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25578ED78))
  {
    sub_224573040((uint64_t)qword_25578ED40, (uint64_t)&xmmword_25578ED60);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578ED60, &dword_22314D000);
    __cxa_guard_release(&qword_25578ED78);
  }
  if (byte_25578ED77 < 0)
  {
    sub_223197FA4((_BYTE *)a1, (void *)xmmword_25578ED60, *((unint64_t *)&xmmword_25578ED60 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25578ED60;
    *(_QWORD *)(a1 + 16) = unk_25578ED70;
  }
}

void sub_223BE0C40(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578ED78);
  _Unwind_Resume(a1);
}

void sub_223BE0C58(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578ED58);
  _Unwind_Resume(a1);
}

void sub_223BE0C70(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578ED38);
  _Unwind_Resume(a1);
}

std::string *sub_223BE0C88()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578ED18);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578ED18))
    return &stru_25578ED00;
  sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cam::PixelOrigin::Center]", __p);
  sub_22457326C((uint64_t)__p, &stru_25578ED00);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578ED00, &dword_22314D000);
  __cxa_guard_release(&qword_25578ED18);
  return &stru_25578ED00;
}

void sub_223BE0D40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25578ED18);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25578ED18);
  _Unwind_Resume(a1);
}

void sub_223BE0D80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  float32x2_t v7;
  float32x2_t *v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v16;
  float32x2_t v17;
  int32x2_t v18;
  int8x16_t v19;
  int8x16_t *v20;
  uint64_t v21;
  char *v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  int8x16_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  int8x16_t *v36;
  std::__shared_weak_count *v37;

  v33 = 0;
  v34 = 0;
  v35 = 0;
  v5 = (char *)operator new(0x78uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24EC6CCC0;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24EC20868;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 56) = v6;
  *(int32x4_t *)(v5 + 72) = v6;
  *(int32x4_t *)(v5 + 88) = v6;
  *((_DWORD *)v5 + 26) = 2143289344;
  *((_QWORD *)v5 + 14) = 0;
  v37 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24EC207B8;
  v36 = (int8x16_t *)(v5 + 24);
  (*(void (**)(uint64_t, float32x2_t *))(*(_QWORD *)a2 + 128))(a2, &v33);
  (*(void (**)(uint64_t, __int32 *))(*(_QWORD *)a2 + 128))(a2, (__int32 *)&v33 + 1);
  (*(void (**)(uint64_t, float32x2_t *))(*(_QWORD *)a2 + 128))(a2, &v34);
  (*(void (**)(uint64_t, __int32 *))(*(_QWORD *)a2 + 128))(a2, (__int32 *)&v34 + 1);
  (*(void (**)(uint64_t, float32x2_t *))(*(_QWORD *)a2 + 104))(a2, &v35);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 104))(a2, (char *)&v35 + 4);
  v7 = v35;
  v8 = (float32x2_t *)v36;
  v9 = v33;
  v10 = v34;
  __asm { FMOV            V2.2S, #1.0 }
  v16 = vdiv_f32(_D2, v33);
  v17 = vmul_f32(v16, vneg_f32(v34));
  v18 = vzip1_s32((int32x2_t)v33, (int32x2_t)v34);
  v19.i64[0] = v18.u32[0];
  v19.i64[1] = v18.u32[1];
  v36[1] = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)v33, (int32x2_t)v34), 0x20uLL), v19);
  v8[4] = v16;
  v8[5] = v17;
  v8[6].i32[0] = v9.i32[0];
  v8[7] = 0;
  v8[6].i32[1] = 0;
  v8[8].i32[0] = v9.i32[1];
  v8[8].i32[1] = 0;
  v8[9] = v10;
  v8[10].i32[0] = 1065353216;
  v8[11] = v7;
  v20 = v36;
  v32 = v36[1];
  v21 = v36[5].i64[1];
  v22 = (char *)operator new(0x78uLL);
  *((_QWORD *)v22 + 1) = 0;
  *((_QWORD *)v22 + 2) = 0;
  *(_QWORD *)v22 = &off_24EC6CE00;
  v23 = v20[1];
  *((_QWORD *)v22 + 4) = &off_24EC20868;
  *(int8x16_t *)(v22 + 40) = v23;
  *(int8x16_t *)(v22 + 56) = v20[2];
  v24 = v20[3];
  v25 = v20[4];
  *((_DWORD *)v22 + 26) = v20[5].i32[0];
  *(int8x16_t *)(v22 + 88) = v25;
  *(int8x16_t *)(v22 + 72) = v24;
  *((_QWORD *)v22 + 3) = &off_24EC207B8;
  *((_QWORD *)v22 + 14) = v21;
  *(int8x16_t *)a3 = v32;
  *(_QWORD *)(a3 + 16) = v21;
  *(_QWORD *)(a3 + 24) = v22 + 24;
  v26 = *(std::__shared_weak_count **)(a3 + 32);
  *(_QWORD *)(a3 + 32) = v22;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v37;
  if (v37)
  {
    v30 = (unint64_t *)&v37->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_223BE0FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_22365B530((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BE1008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_22365B530((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223BE101C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t result;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, a2 + 1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2 + 4);
  v30 = 0;
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 72))(a1, &v30);
  *(_QWORD *)(a2 + 8) = v30;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2 + 16);
  if (a3 < 2)
    return result;
  LODWORD(v30) = 2;
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 104))(a1, &v30);
  v7 = v30;
  v30 = (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 4;
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 120))(a1, &v30);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = (uint64_t)(v9 - v8) >> 4;
  if (v30 <= v10)
  {
    if (v30 < v10)
    {
      v9 = v8 + 16 * v30;
      *(_QWORD *)(a2 + 32) = v9;
    }
  }
  else
  {
    sub_2232C68D0((char **)(a2 + 24), v30 - v10);
    v8 = *(_QWORD *)(a2 + 24);
    v9 = *(_QWORD *)(a2 + 32);
  }
  sub_223BB26EC(a1, (uint64_t)(v9 - v8) >> 4, v8);
  v30 = (uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 6;
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 120))(a1, &v30);
  v11 = *(_QWORD *)(a2 + 48);
  v12 = *(_QWORD *)(a2 + 56);
  v13 = (uint64_t)(v12 - v11) >> 6;
  if (v30 <= v13)
  {
    if (v30 < v13)
    {
      v12 = v11 + (v30 << 6);
      *(_QWORD *)(a2 + 56) = v12;
    }
  }
  else
  {
    sub_2232C69F8((char **)(a2 + 48), v30 - v13);
    v11 = *(_QWORD *)(a2 + 48);
    v12 = *(_QWORD *)(a2 + 56);
  }
  sub_223BB2868(a1, (uint64_t)(v12 - v11) >> 6, v11);
  v30 = (uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 4;
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 120))(a1, &v30);
  v14 = *(_QWORD *)(a2 + 72);
  v15 = *(_QWORD *)(a2 + 80);
  v16 = (uint64_t)(v15 - v14) >> 4;
  if (v30 <= v16)
  {
    if (v30 < v16)
    {
      v15 = v14 + 16 * v30;
      *(_QWORD *)(a2 + 80) = v15;
    }
  }
  else
  {
    sub_2232C68D0((char **)(a2 + 72), v30 - v16);
    v14 = *(_QWORD *)(a2 + 72);
    v15 = *(_QWORD *)(a2 + 80);
  }
  sub_223BB26EC(a1, (uint64_t)(v15 - v14) >> 4, v14);
  v30 = (uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 4;
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 120))(a1, &v30);
  v17 = v30;
  v18 = *(_QWORD *)(a2 + 96);
  v19 = *(_QWORD *)(a2 + 104);
  v20 = (v19 - v18) >> 4;
  if (v30 > v20)
  {
    sub_2232C68D0((char **)(a2 + 96), v30 - v20);
    result = sub_223BB26EC(a1, (uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 4, *(_QWORD *)(a2 + 96));
    if (v7 >= 2)
      goto LABEL_23;
LABEL_20:
    if (a3 == 2)
      return result;
    goto LABEL_36;
  }
  if (v30 >= v20)
  {
    result = sub_223BB26EC(a1, (v19 - v18) >> 4, v18);
    if (v7 >= 2)
      goto LABEL_23;
    goto LABEL_20;
  }
  *(_QWORD *)(a2 + 104) = v18 + 16 * v30;
  result = sub_223BB26EC(a1, (uint64_t)(16 * v17) >> 4, v18);
  if (v7 < 2)
    goto LABEL_20;
LABEL_23:
  v30 = (uint64_t)(*(_QWORD *)(a2 + 128) - *(_QWORD *)(a2 + 120)) >> 4;
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 120))(a1, &v30);
  v21 = *(_QWORD *)(a2 + 120);
  v22 = *(_QWORD *)(a2 + 128);
  v23 = (uint64_t)(v22 - v21) >> 4;
  if (v30 <= v23)
  {
    if (v30 < v23)
    {
      v22 = v21 + 16 * v30;
      *(_QWORD *)(a2 + 128) = v22;
    }
  }
  else
  {
    sub_2232C68D0((char **)(a2 + 120), v30 - v23);
    v21 = *(_QWORD *)(a2 + 120);
    v22 = *(_QWORD *)(a2 + 128);
  }
  sub_223BB26EC(a1, (uint64_t)(v22 - v21) >> 4, v21);
  v30 = (uint64_t)(*(_QWORD *)(a2 + 152) - *(_QWORD *)(a2 + 144)) >> 6;
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 120))(a1, &v30);
  v24 = *(_QWORD *)(a2 + 144);
  v25 = *(_QWORD *)(a2 + 152);
  v26 = (uint64_t)(v25 - v24) >> 6;
  if (v30 <= v26)
  {
    if (v30 < v26)
    {
      v25 = v24 + (v30 << 6);
      *(_QWORD *)(a2 + 152) = v25;
    }
  }
  else
  {
    sub_2232C69F8((char **)(a2 + 144), v30 - v26);
    v24 = *(_QWORD *)(a2 + 144);
    v25 = *(_QWORD *)(a2 + 152);
  }
  sub_223BB2868(a1, (uint64_t)(v25 - v24) >> 6, v24);
  v30 = (uint64_t)(*(_QWORD *)(a2 + 176) - *(_QWORD *)(a2 + 168)) >> 4;
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 120))(a1, &v30);
  v27 = *(_QWORD *)(a2 + 168);
  v28 = *(_QWORD *)(a2 + 176);
  v29 = (uint64_t)(v28 - v27) >> 4;
  if (v30 <= v29)
  {
    if (v30 < v29)
    {
      v28 = v27 + 16 * v30;
      *(_QWORD *)(a2 + 176) = v28;
    }
  }
  else
  {
    sub_2232C68D0((char **)(a2 + 168), v30 - v29);
    v27 = *(_QWORD *)(a2 + 168);
    v28 = *(_QWORD *)(a2 + 176);
  }
  result = sub_223BB26EC(a1, (uint64_t)(v28 - v27) >> 4, v27);
  if (a3 != 2)
  {
LABEL_36:
    LOBYTE(v30) = 0;
    result = (*(uint64_t (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 80))(a1, &v30);
    *(_BYTE *)(a2 + 192) = v30;
    if (a3 >= 4)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, a2 + 2);
  }
  return result;
}

void sub_223BE1478(uint64_t a1, uint64_t a2, int a3)
{
  char *v5;
  char *v6;
  void *v7;
  char *v8;
  void *v9;
  void *v10;
  void *__p;
  char *v12;
  uint64_t v13;
  int v14;

  if (a3 == 1)
  {
    __p = 0;
    v12 = 0;
    v13 = 0;
    v14 = 1;
    (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 104))(a1, &v14);
    sub_223BE156C(a1, &__p);
    v5 = (char *)__p;
    if (__p)
    {
      v6 = v12;
      v7 = __p;
      if (v12 != __p)
      {
        v8 = v12;
        do
        {
          v10 = (void *)*((_QWORD *)v8 - 3);
          v8 -= 24;
          v9 = v10;
          if (v10)
          {
            *((_QWORD *)v6 - 2) = v9;
            operator delete(v9);
          }
          v6 = v8;
        }
        while (v8 != v5);
        v7 = __p;
      }
      v12 = v5;
      operator delete(v7);
    }
  }
  LODWORD(__p) = 1;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 104))(a1, &__p);
  sub_223BE156C(a1, (_QWORD *)(a2 + 8));
}

void sub_223BE1558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_22317C838(&a9);
  _Unwind_Resume(a1);
}

void sub_223BE156C(uint64_t a1, _QWORD *a2)
{
  char **v4;
  unint64_t v5;
  char **v6;
  uint64_t v7;
  _QWORD *v8;
  char **v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  int v19;

  v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3);
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 120))(a1, &v17);
  v4 = (char **)a2[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v4 - *a2) >> 3);
  if (v17 > v5)
  {
    sub_2232C7FD8((uint64_t)a2, v17 - v5);
    v8 = a2;
    v6 = (char **)*a2;
    v7 = v8[1];
    if ((char **)v7 == v6)
      return;
    goto LABEL_15;
  }
  if (v17 >= v5)
  {
    v7 = a2[1];
    v6 = (char **)*a2;
    if (v4 == v6)
      return;
    goto LABEL_15;
  }
  v7 = *a2 + 24 * v17;
  if (v4 != (char **)v7)
  {
    v9 = (char **)a2[1];
    do
    {
      v11 = *(v9 - 3);
      v9 -= 3;
      v10 = v11;
      if (v11)
      {
        *(v4 - 2) = v10;
        operator delete(v10);
      }
      v4 = v9;
    }
    while (v9 != (char **)v7);
  }
  a2[1] = v7;
  v6 = (char **)*a2;
  if ((char **)v7 != v6)
  {
    do
    {
LABEL_15:
      LODWORD(v18) = 1;
      (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 104))(a1, &v18);
      v18 = (v6[1] - *v6) >> 5;
      (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 120))(a1, &v18);
      v13 = *v6;
      v12 = v6[1];
      v14 = (v12 - *v6) >> 5;
      if (v18 <= v14)
      {
        if (v18 < v14)
        {
          v12 = &v13[32 * v18];
          v6[1] = v12;
        }
      }
      else
      {
        sub_2231B6534(v6, v18 - v14);
        v13 = *v6;
        v12 = v6[1];
      }
      if (v12 != v13)
      {
        v15 = v12;
        do
        {
          v19 = 1;
          (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 104))(a1, &v19);
          (*(void (**)(uint64_t, char *))(*(_QWORD *)a1 + 128))(a1, v13);
          (*(void (**)(uint64_t, char *))(*(_QWORD *)a1 + 128))(a1, v13 + 4);
          (*(void (**)(uint64_t, char *))(*(_QWORD *)a1 + 128))(a1, v13 + 8);
          v16 = v13 + 16;
          (*(void (**)(uint64_t, char *))(*(_QWORD *)a1 + 136))(a1, v16);
          v19 = 1;
          (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 104))(a1, &v19);
          (*(void (**)(uint64_t, char *))(*(_QWORD *)a1 + 56))(a1, v16 + 8);
          v13 = v16 + 16;
        }
        while (v13 != v15);
      }
      v6 += 3;
    }
    while (v6 != (char **)v7);
  }
}

void sub_223BE17B0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC60038;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223BE17C0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC60038;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223BE17F0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_223BE1800(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24EC60088;
  *(_QWORD *)(a1 + 8) = &unk_24EC600E8;
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24EC5FFB8[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_223BE1868(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24EC60088;
  *(_QWORD *)(a1 + 8) = &unk_24EC600E8;
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24EC5FFB8[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x227684CE8](a1, 0x10B3C407CADD898);
}

uint64_t sub_223BE18E4()
{
  return 1;
}

uint64_t sub_223BE18EC()
{
  return 0;
}

uint64_t sub_223BE18F4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_223BE1900(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

uint64_t sub_223BE190C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  float32x4_t v9;
  float32x4_t v10;
  unsigned __int128 v11;
  _QWORD *v12;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  __int128 v22;
  _BYTE v23[208];
  uint64_t (**v24)();
  __int128 v25;
  uint64_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  unsigned __int128 v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  char v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 216);
  v21 = *(float64x2_t *)(a1 + 336);
  v22 = *(_OWORD *)(a1 + 200);
  v19 = *(float64x2_t *)(a1 + 304);
  v20 = *(float64x2_t *)(a1 + 320);
  v17 = *(float64x2_t *)(a1 + 272);
  v18 = *(float64x2_t *)(a1 + 288);
  v15 = *(float64x2_t *)(a1 + 240);
  v16 = *(float64x2_t *)(a1 + 256);
  v14 = *(float64x2_t *)(a1 + 224);
  v5 = a1 + 16;
  v6 = *(_DWORD *)(a1 + 192);
  if (v6 == 2)
  {
    sub_223B8944C(v5, (uint64_t)v23);
  }
  else if (v6 == 1)
  {
    sub_223B89234(v5, (uint64_t)v23);
  }
  else
  {
    if (v6)
      sub_22316DD70();
    sub_223B8901C(v5, (uint64_t)v23);
  }
  v24 = &off_24EC2B900;
  v25 = v22;
  v26 = v4;
  v27 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v14), v15);
  v28 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v16), v17);
  v29 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v18), v19);
  v30 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v20), v21);
  sub_2231AB0FC((uint64_t)&v31, (uint64_t)v23);
  v24 = &off_24EC2B880;
  v7 = operator new();
  v8 = v7;
  *(_QWORD *)v7 = &off_24EC2B900;
  *(_OWORD *)(v7 + 8) = v25;
  *(_QWORD *)(v7 + 24) = v26;
  v9 = v28;
  *(float32x4_t *)(v7 + 32) = v27;
  *(float32x4_t *)(v7 + 48) = v9;
  v10 = v30;
  *(float32x4_t *)(v7 + 64) = v29;
  *(float32x4_t *)(v7 + 80) = v10;
  *(_OWORD *)(v7 + 96) = v31;
  *(_BYTE *)(v7 + 112) = 0;
  *(_BYTE *)(v7 + 136) = 0;
  if (v34)
  {
    *(_OWORD *)(v7 + 112) = v32;
    *(_QWORD *)(v7 + 128) = v33;
    v33 = 0;
    v32 = 0uLL;
    *(_BYTE *)(v7 + 136) = 1;
  }
  *(_BYTE *)(v7 + 144) = 0;
  *(_BYTE *)(v7 + 168) = 0;
  if (v37)
  {
    *(_OWORD *)(v7 + 144) = v35;
    *(_QWORD *)(v7 + 160) = v36;
    v36 = 0;
    v35 = 0uLL;
    *(_BYTE *)(v7 + 168) = 1;
  }
  *(_BYTE *)(v7 + 208) = 0;
  *(_OWORD *)(v7 + 176) = v38;
  *(_QWORD *)(v7 + 192) = v39;
  *(_BYTE *)(v7 + 256) = 0;
  if (v43)
  {
    *(_OWORD *)(v7 + 208) = v40;
    *(_QWORD *)(v7 + 224) = v41;
    v41 = 0;
    v40 = 0uLL;
    do
      v11 = __ldaxp(&v42);
    while (__stlxp(v11, &v42));
    *(_OWORD *)(v7 + 240) = v11;
    *(_BYTE *)(v7 + 256) = 1;
  }
  *(_BYTE *)(v7 + 272) = 0;
  *(_BYTE *)(v7 + 296) = 0;
  if (v46)
  {
    *(_OWORD *)(v7 + 272) = v44;
    *(_QWORD *)(v7 + 288) = v45;
    v45 = 0;
    v44 = 0uLL;
    *(_BYTE *)(v7 + 296) = 1;
  }
  *(_QWORD *)v7 = &off_24EC2B880;
  *a2 = &off_24EC6A3B8;
  a2[1] = v7;
  v12 = (_QWORD *)operator new();
  *v12 = &off_24EC6A4B0;
  v12[1] = 0;
  v12[2] = 0;
  v12[3] = v8;
  a2[2] = v12;
  v24 = &off_24EC2B900;
  sub_2231AD66C((uint64_t)&v31);
  return sub_2231AD66C((uint64_t)v23);
}

void sub_223BE1BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;
  uint64_t v28;

  (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  sub_2231AD66C(v27);
  sub_2231AD66C((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_223BE1C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_2231AD66C((uint64_t)&a27);
  _Unwind_Resume(a1);
}

BOOL sub_223BE1C4C(uint64_t a1, void *lpsrc)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  int v6;
  _BOOL8 v7;
  uint64_t v8;
  int v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  _QWORD v19[5];
  unsigned __int8 **v20;
  _QWORD v21[5];
  unsigned __int8 **v22;
  char v23;
  _BYTE v24[16];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[16];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[6];

  v35[5] = *MEMORY[0x24BDAC8D0];
  v3 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24EC6A430, (const struct __class_type_info *)&unk_24EC60158, 0);
  if (v3)
  {
    v4 = v3;
    v5 = a1 + 16;
    v6 = *(_DWORD *)(a1 + 192);
    if (v6 == 2)
    {
      sub_223B8944C(v5, (uint64_t)v30);
    }
    else if (v6 == 1)
    {
      sub_223B89234(v5, (uint64_t)v30);
    }
    else
    {
      if (v6)
        sub_22316DD70();
      sub_223B8901C(v5, (uint64_t)v30);
    }
    v8 = (uint64_t)(v4 + 4);
    v9 = v4[48];
    if (v9 == 2)
    {
      sub_223B8944C(v8, (uint64_t)v24);
    }
    else if (v9 == 1)
    {
      sub_223B89234(v8, (uint64_t)v24);
    }
    else
    {
      if (v9)
        sub_22316DD70();
      sub_223B8901C(v8, (uint64_t)v24);
    }
    v21[0] = v30;
    v21[1] = &v31;
    v21[2] = &v32;
    v21[3] = &v33;
    v21[4] = &v34;
    v22 = (unsigned __int8 **)v35;
    v19[0] = v24;
    v19[1] = &v25;
    v19[2] = &v26;
    v19[3] = &v27;
    v19[4] = &v28;
    v20 = (unsigned __int8 **)&v29;
    if (!sub_224123BEC((uint64_t)&v23, v21, v19))
      goto LABEL_35;
    if (*((_BYTE *)v22 + 24) && *((_BYTE *)v20 + 24))
    {
      v10 = *v22;
      v11 = v22[1];
      v12 = *v20;
      if (v11 - *v22 != v20[1] - *v20)
        goto LABEL_35;
      if (v10 != v11)
      {
        while (sub_224122C08(v10, v12))
        {
          v10 += 96;
          v12 += 96;
          if (v10 == v11)
            goto LABEL_24;
        }
        goto LABEL_35;
      }
    }
    else if ((*((_BYTE *)v22 + 24) != 0) != (*((_BYTE *)v20 + 24) != 0))
    {
      goto LABEL_35;
    }
LABEL_24:
    v13 = *(_QWORD *)(a1 + 200) == *((_QWORD *)v4 + 25) && *(_QWORD *)(a1 + 208) == *((_QWORD *)v4 + 26);
    if (v13 && *(_QWORD *)(a1 + 216) == *((_QWORD *)v4 + 27))
    {
      v14 = 0;
      v15 = a1 + 224;
      do
      {
        v16 = *(double *)(v15 + v14 * 4);
        v17 = *(double *)&v4[v14 + 56];
        v7 = v16 == v17;
        if (v16 != v17)
          break;
        v13 = v14 == 30;
        v14 += 2;
      }
      while (!v13);
      goto LABEL_36;
    }
LABEL_35:
    v7 = 0;
LABEL_36:
    sub_2231AD66C((uint64_t)v24);
    sub_2231AD66C((uint64_t)v30);
    return v7;
  }
  return 0;
}

void sub_223BE1EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_2231AD66C((uint64_t)&a23);
  sub_2231AD66C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_223BE1EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_2231AD66C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_223BE1ED4(uint64_t a1, uint64_t (***a2)())
{
  sub_223BE21E0(a2, a1);
}

double sub_223BE1EE4(uint64_t a1, uint64_t (***a2)())
{
  return sub_223BE3C40(a2, a1);
}

uint64_t sub_223BE1EF4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = result;
  *(_QWORD *)(result - 8) = off_24EC60088;
  *(_QWORD *)result = &unk_24EC600E8;
  v2 = *(unsigned int *)(result + 184);
  if ((_DWORD)v2 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_24EC5FFB8[v2])(&v3, result + 8);
  *(_DWORD *)(v1 + 184) = -1;
  return result;
}

uint64_t sub_223BE1F5C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  *(_QWORD *)(a1 - 8) = off_24EC60088;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24EC600E8;
  v3 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_24EC5FFB8[v3])(&v5, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x227684CE8](v2, 0x10B3C407CADD898);
}

void sub_223BE1FE0(uint64_t a1, uint64_t (***a2)())
{
  sub_223BE21E0(a2, a1 - 8);
}

double sub_223BE1FF0(uint64_t a1, uint64_t (***a2)())
{
  return sub_223BE3C40(a2, a1 - 8);
}

uint64_t sub_223BE2000(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string v11;
  uint64_t v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  uint64_t *v17;

  v12 = a1;
  v13 = (std::string *)"{";
  v14 = a1;
  v15 = (std::string *)"{";
  v16 = (std::string *)"{";
  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2 == -1)
    goto LABEL_13;
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  ((void (*)(std::string *, uint64_t))off_24EC5FFE0[v2])(&v11, a1);
  std::to_string(&v11, *a2);
  v12 = a1;
  v13 = &v11;
  v14 = a1;
  v15 = &v11;
  v16 = &v11;
  v5 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v5 == -1)
    sub_22316DD70();
  v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_24EC5FF70[v5])(&v17, a1);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  for (i = 1; i != 16; ++i)
  {
    v12 = a1;
    v13 = (std::string *)",";
    v14 = a1;
    v15 = (std::string *)",";
    v16 = (std::string *)",";
    v7 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v7 == -1)
      goto LABEL_13;
    v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
    ((void (*)(std::string *, uint64_t))off_24EC5FFE0[v7])(&v11, a1);
    std::to_string(&v11, a2[i]);
    v12 = a1;
    v13 = &v11;
    v14 = a1;
    v15 = &v11;
    v16 = &v11;
    v8 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v8 == -1)
      sub_22316DD70();
    v17 = &v12;
    ((void (*)(uint64_t **, uint64_t))off_24EC5FF70[v8])(&v17, a1);
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v11.__r_.__value_.__l.__data_);
  }
  v12 = a1;
  v13 = (std::string *)"}";
  v14 = a1;
  v15 = (std::string *)"}";
  v16 = (std::string *)"}";
  v9 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v9 == -1)
LABEL_13:
    sub_22316DD70();
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  return ((uint64_t (*)(std::string *, uint64_t))off_24EC5FFE0[v9])(&v11, a1);
}

void sub_223BE21BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223BE21E0(uint64_t (***a1)(), uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  unsigned __int8 *v18;
  int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int *v25;
  int v26;
  int v27;
  BOOL v28;
  unsigned __int8 *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  int v41;
  _QWORD *v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  unsigned __int8 *v48;
  int v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  int *v55;
  int v56;
  int v57;
  BOOL v58;
  unsigned __int8 *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  size_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t i;
  int v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  char v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t j;
  _QWORD *v93;
  char v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  unint64_t v105[2];

  v105[1] = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24EC79080, (const struct __class_type_info *)&unk_24EC605E8, 0);
  if (v4)
  {
    v5 = (uint64_t)v4;
    v6 = *(_DWORD *)(a2 + 192);
    switch(v6)
    {
      case 2:
        if (*(unsigned __int8 *)v4[5] <= 1u)
        {
          v13 = *((unsigned __int8 *)v4 + 88);
          v4[9] = "info";
          v4[10] = 4;
          if (!v13)
            *((_BYTE *)v4 + 88) = 1;
        }
        sub_22454024C((uint64_t)v4);
        *(_QWORD *)&v96 = "version";
        *((_QWORD *)&v96 + 1) = 7;
        LODWORD(v97) = 4;
        if (**(unsigned __int8 **)(v5 + 40) <= 1u)
        {
          v14 = *(unsigned __int8 *)(v5 + 88);
          *(_QWORD *)(v5 + 72) = "version";
          *(_QWORD *)(v5 + 80) = 7;
          if (!v14)
            *(_BYTE *)(v5 + 88) = 1;
        }
        sub_224542048(v5, &v97);
        sub_223B8F208(v5, a2 + 16, v97);
        goto LABEL_32;
      case 1:
        if (*(unsigned __int8 *)v4[5] <= 1u)
        {
          v15 = *((unsigned __int8 *)v4 + 88);
          v4[9] = "info";
          v4[10] = 4;
          if (!v15)
            *((_BYTE *)v4 + 88) = 1;
        }
        sub_22454024C((uint64_t)v4);
        *(_QWORD *)&v96 = "version";
        *((_QWORD *)&v96 + 1) = 7;
        LODWORD(v97) = 5;
        if (**(unsigned __int8 **)(v5 + 40) <= 1u)
        {
          v16 = *(unsigned __int8 *)(v5 + 88);
          *(_QWORD *)(v5 + 72) = "version";
          *(_QWORD *)(v5 + 80) = 7;
          if (!v16)
            *(_BYTE *)(v5 + 88) = 1;
        }
        sub_224542048(v5, &v97);
        sub_223B8E898(v5, a2 + 16, v97);
        goto LABEL_32;
      case 0:
        if (*(unsigned __int8 *)v4[5] <= 1u)
        {
          v7 = *((unsigned __int8 *)v4 + 88);
          v4[9] = "info";
          v4[10] = 4;
          if (!v7)
            *((_BYTE *)v4 + 88) = 1;
        }
        sub_22454024C((uint64_t)v4);
        *(_QWORD *)&v96 = "version";
        *((_QWORD *)&v96 + 1) = 7;
        LODWORD(v97) = 6;
        if (**(unsigned __int8 **)(v5 + 40) <= 1u)
        {
          v8 = *(unsigned __int8 *)(v5 + 88);
          *(_QWORD *)(v5 + 72) = "version";
          *(_QWORD *)(v5 + 80) = 7;
          if (!v8)
            *(_BYTE *)(v5 + 88) = 1;
        }
        sub_224542048(v5, &v97);
        sub_223B8D388(v5, a2 + 16, v97);
LABEL_32:
        v17 = *(_QWORD *)(v5 + 56);
        v18 = *(unsigned __int8 **)(v17 - 8);
        *(_QWORD *)(v5 + 40) = v18;
        *(_QWORD *)(v5 + 56) = v17 - 8;
        if (*(_BYTE *)(v5 + 88))
          *(_BYTE *)(v5 + 88) = 0;
        if (*v18 <= 1u)
        {
          *(_QWORD *)(v5 + 72) = "value";
          *(_QWORD *)(v5 + 80) = 5;
          *(_BYTE *)(v5 + 88) = 1;
        }
        sub_22454024C(v5);
        *(_QWORD *)&v96 = "version";
        *((_QWORD *)&v96 + 1) = 7;
        LODWORD(v97) = 1;
        if (**(unsigned __int8 **)(v5 + 40) <= 1u)
        {
          v19 = *(unsigned __int8 *)(v5 + 88);
          *(_QWORD *)(v5 + 72) = "version";
          *(_QWORD *)(v5 + 80) = 7;
          if (!v19)
            *(_BYTE *)(v5 + 88) = 1;
        }
        sub_224542048(v5, &v97);
        v20 = *(_OWORD *)(a2 + 296);
        v21 = *(_OWORD *)(a2 + 328);
        v103 = *(_OWORD *)(a2 + 312);
        v104 = v21;
        v105[0] = *(_QWORD *)(a2 + 344);
        v22 = *(_OWORD *)(a2 + 248);
        v98 = *(_OWORD *)(a2 + 232);
        v99 = v22;
        v23 = *(_OWORD *)(a2 + 280);
        v100 = *(_OWORD *)(a2 + 264);
        v101 = v23;
        v102 = v20;
        v24 = *(_OWORD *)(a2 + 216);
        v96 = *(_OWORD *)(a2 + 200);
        v97 = v24;
        *(_QWORD *)&v95 = 16;
        *((_QWORD *)&v95 + 1) = &v96;
        sub_2245403C8(v5, (size_t *)&v95);
        if (!*(_BYTE *)(v5 + 88)
          || *(_QWORD *)(v5 + 80) != 7
          || ((v25 = *(int **)(v5 + 72), v26 = *v25, v27 = *(int *)((char *)v25 + 3), v26 == *(_DWORD *)"version")
            ? (v28 = v27 == *(_DWORD *)"sion")
            : (v28 = 0),
              !v28))
        {
          LOBYTE(v95) = 5;
          *((_QWORD *)&v95 + 1) = v97;
          v29 = (unsigned __int8 *)sub_22453FEA0(v5);
          v30 = *v29;
          *v29 = v95;
          LOBYTE(v95) = v30;
          v31 = *((_QWORD *)v29 + 1);
          *((_QWORD *)v29 + 1) = *((_QWORD *)&v95 + 1);
          *((_QWORD *)&v95 + 1) = v31;
          sub_22345337C((void ***)&v95 + 1, v30);
        }
        *(_QWORD *)&v95 = 16;
        *((_QWORD *)&v95 + 1) = (char *)&v97 + 8;
        sub_224543B18(v5, &v95);
LABEL_47:
        v32 = *(_QWORD *)(v5 + 56);
        *(_QWORD *)(v5 + 40) = *(_QWORD *)(v32 - 8);
        *(_QWORD *)(v5 + 56) = v32 - 8;
        if (*(_BYTE *)(v5 + 88))
          *(_BYTE *)(v5 + 88) = 0;
        return;
    }
LABEL_147:
    sub_22316DD70();
  }
  v9 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24EC79080, (const struct __class_type_info *)&unk_24EC1FC00, 0);
  if (v9)
  {
    v10 = (uint64_t)v9;
    v11 = *(_DWORD *)(a2 + 192);
    if (v11 == 2)
    {
      v37 = v9[3];
      if (*(_BYTE *)(v37 + 40))
      {
        *(_QWORD *)&v96 = v37 + 16;
        sub_22455A7EC((uint64_t **)&v96, 4u);
      }
      else
      {
        LOBYTE(v96) = 4;
        std::ostream::write();
      }
      sub_224555278(*(_QWORD *)(v10 + 24));
      sub_223B979A0(v10, a2 + 16, 4u);
    }
    else if (v11 == 1)
    {
      v38 = v9[3];
      if (*(_BYTE *)(v38 + 40))
      {
        *(_QWORD *)&v96 = v38 + 16;
        sub_22455A7EC((uint64_t **)&v96, 5u);
      }
      else
      {
        LOBYTE(v96) = 5;
        std::ostream::write();
      }
      sub_224555278(*(_QWORD *)(v10 + 24));
      sub_223B97884(v10, a2 + 16, 5u);
    }
    else
    {
      if (v11)
        goto LABEL_147;
      v12 = v9[3];
      if (*(_BYTE *)(v12 + 40))
      {
        *(_QWORD *)&v96 = v12 + 16;
        sub_22455A7EC((uint64_t **)&v96, 6u);
      }
      else
      {
        LOBYTE(v96) = 6;
        std::ostream::write();
      }
      sub_224555278(*(_QWORD *)(v10 + 24));
      sub_223B970F8(v10, a2 + 16, 6u);
    }
    v62 = *(_QWORD *)(v10 + 24);
    v63 = *(_QWORD *)(*(_QWORD *)(v62 + 88) - 8);
    sub_224554D6C((uint64_t *)(v62 + 48), *(_QWORD *)(v62 + 16) - v63 - 9);
    v64 = *(_QWORD *)(v62 + 48);
    if (v64)
      memmove((void *)(*(_QWORD *)(v62 + 24) + v63), *(const void **)(v62 + 56), v64);
    *(_QWORD *)(v62 + 48) = 0;
    v65 = *(_QWORD *)(v62 + 80);
    v66 = *(_QWORD *)(v62 + 88) - 8;
    *(_QWORD *)(v62 + 88) = v66;
    if (v65 == v66)
    {
      std::ostream::write();
      if (*(_BYTE *)(v62 + 40))
      {
        free(*(void **)(v62 + 24));
        *(_BYTE *)(v62 + 40) = 0;
      }
    }
    v67 = *(_QWORD *)(v10 + 24);
    if (*(_BYTE *)(v67 + 40))
    {
      *(_QWORD *)&v96 = v67 + 16;
      sub_22455A7EC((uint64_t **)&v96, 1u);
    }
    else
    {
      LOBYTE(v96) = 1;
      std::ostream::write();
    }
    v68 = *(_OWORD *)(a2 + 280);
    v100 = *(_OWORD *)(a2 + 264);
    v101 = v68;
    v69 = *(_OWORD *)(a2 + 248);
    v98 = *(_OWORD *)(a2 + 232);
    v99 = v69;
    v105[0] = *(_QWORD *)(a2 + 344);
    v70 = *(_OWORD *)(a2 + 328);
    v71 = *(_OWORD *)(a2 + 296);
    v103 = *(_OWORD *)(a2 + 312);
    v104 = v70;
    v102 = v71;
    v72 = *(_OWORD *)(a2 + 216);
    v96 = *(_OWORD *)(a2 + 200);
    v97 = v72;
    v73 = *(_QWORD *)(v10 + 24);
    if (*(_BYTE *)(v73 + 40))
    {
      *(_QWORD *)&v95 = v73 + 16;
      sub_224559C04((uint64_t **)&v95, v96);
      sub_224559C04((uint64_t **)&v95, SBYTE1(v96));
      sub_224559C04((uint64_t **)&v95, SBYTE2(v96));
      sub_224559C04((uint64_t **)&v95, SBYTE3(v96));
      sub_224559C04((uint64_t **)&v95, SBYTE4(v96));
      sub_224559C04((uint64_t **)&v95, SBYTE5(v96));
      sub_224559C04((uint64_t **)&v95, SBYTE6(v96));
      sub_224559C04((uint64_t **)&v95, SBYTE7(v96));
      sub_224559C04((uint64_t **)&v95, SBYTE8(v96));
      sub_224559C04((uint64_t **)&v95, SBYTE9(v96));
      sub_224559C04((uint64_t **)&v95, SBYTE10(v96));
      sub_224559C04((uint64_t **)&v95, SBYTE11(v96));
      sub_224559C04((uint64_t **)&v95, SBYTE12(v96));
      sub_224559C04((uint64_t **)&v95, SBYTE13(v96));
      sub_224559C04((uint64_t **)&v95, SBYTE14(v96));
      sub_224559C04((uint64_t **)&v95, SHIBYTE(v96));
    }
    else
    {
      for (i = 0; i != 16; ++i)
      {
        v76 = *((char *)&v96 + i);
        if (v76 < 0)
        {
          LOBYTE(v95) = -52;
          BYTE1(v95) = v76;
        }
        else
        {
          LOBYTE(v95) = *((_BYTE *)&v96 + i);
        }
        std::ostream::write();
      }
    }
    v74 = *(_QWORD *)(v10 + 24);
    if (*(_BYTE *)(v74 + 40))
    {
      *(_QWORD *)&v95 = v74 + 16;
      sub_22455AB50((uint64_t **)&v95, v97);
    }
    else
    {
      sub_22455B08C();
    }
    v77 = *(_QWORD *)(v10 + 24);
    if (*(_BYTE *)(v77 + 40))
    {
      *(_QWORD *)&v95 = v77 + 16;
      sub_22455B6A8((uint64_t)&v94, (uint64_t **)&v95, (unint64_t *)&v97 + 1);
      sub_22455B6A8((uint64_t)&v94, (uint64_t **)&v95, (unint64_t *)&v98);
      sub_22455B6A8((uint64_t)&v94, (uint64_t **)&v95, (unint64_t *)&v98 + 1);
      sub_22455B6A8((uint64_t)&v94, (uint64_t **)&v95, (unint64_t *)&v99);
      sub_22455B6A8((uint64_t)&v94, (uint64_t **)&v95, (unint64_t *)&v99 + 1);
      sub_22455B6A8((uint64_t)&v94, (uint64_t **)&v95, (unint64_t *)&v100);
      sub_22455B6A8((uint64_t)&v94, (uint64_t **)&v95, (unint64_t *)&v100 + 1);
      sub_22455B6A8((uint64_t)&v94, (uint64_t **)&v95, (unint64_t *)&v101);
      sub_22455B6A8((uint64_t)&v94, (uint64_t **)&v95, (unint64_t *)&v101 + 1);
      sub_22455B6A8((uint64_t)&v94, (uint64_t **)&v95, (unint64_t *)&v102);
      sub_22455B6A8((uint64_t)&v94, (uint64_t **)&v95, (unint64_t *)&v102 + 1);
      sub_22455B6A8((uint64_t)&v94, (uint64_t **)&v95, (unint64_t *)&v103);
      sub_22455B6A8((uint64_t)&v94, (uint64_t **)&v95, (unint64_t *)&v103 + 1);
      sub_22455B6A8((uint64_t)&v94, (uint64_t **)&v95, (unint64_t *)&v104);
      sub_22455B6A8((uint64_t)&v94, (uint64_t **)&v95, (unint64_t *)&v104 + 1);
      sub_22455B6A8((uint64_t)&v94, (uint64_t **)&v95, v105);
    }
    else
    {
      *(_QWORD *)((char *)&v95 + 1) = bswap64(*((unint64_t *)&v97 + 1));
      LOBYTE(v95) = -53;
      std::ostream::write();
      LOBYTE(v95) = -53;
      *(_QWORD *)((char *)&v95 + 1) = bswap64(v98);
      std::ostream::write();
      LOBYTE(v95) = -53;
      *(_QWORD *)((char *)&v95 + 1) = bswap64(*((unint64_t *)&v98 + 1));
      std::ostream::write();
      LOBYTE(v95) = -53;
      *(_QWORD *)((char *)&v95 + 1) = bswap64(v99);
      std::ostream::write();
      LOBYTE(v95) = -53;
      *(_QWORD *)((char *)&v95 + 1) = bswap64(*((unint64_t *)&v99 + 1));
      std::ostream::write();
      LOBYTE(v95) = -53;
      *(_QWORD *)((char *)&v95 + 1) = bswap64(v100);
      std::ostream::write();
      LOBYTE(v95) = -53;
      *(_QWORD *)((char *)&v95 + 1) = bswap64(*((unint64_t *)&v100 + 1));
      std::ostream::write();
      LOBYTE(v95) = -53;
      *(_QWORD *)((char *)&v95 + 1) = bswap64(v101);
      std::ostream::write();
      LOBYTE(v95) = -53;
      *(_QWORD *)((char *)&v95 + 1) = bswap64(*((unint64_t *)&v101 + 1));
      std::ostream::write();
      LOBYTE(v95) = -53;
      *(_QWORD *)((char *)&v95 + 1) = bswap64(v102);
      std::ostream::write();
      LOBYTE(v95) = -53;
      *(_QWORD *)((char *)&v95 + 1) = bswap64(*((unint64_t *)&v102 + 1));
      std::ostream::write();
      LOBYTE(v95) = -53;
      *(_QWORD *)((char *)&v95 + 1) = bswap64(v103);
      std::ostream::write();
      LOBYTE(v95) = -53;
      *(_QWORD *)((char *)&v95 + 1) = bswap64(*((unint64_t *)&v103 + 1));
      std::ostream::write();
      LOBYTE(v95) = -53;
      *(_QWORD *)((char *)&v95 + 1) = bswap64(v104);
      std::ostream::write();
      LOBYTE(v95) = -53;
      *(_QWORD *)((char *)&v95 + 1) = bswap64(*((unint64_t *)&v104 + 1));
      std::ostream::write();
      LOBYTE(v95) = -53;
      *(_QWORD *)((char *)&v95 + 1) = bswap64(v105[0]);
      std::ostream::write();
    }
  }
  else
  {
    v33 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24EC79080, (const struct __class_type_info *)&unk_24EC60670, 0);
    if (v33)
    {
      v5 = (uint64_t)v33;
      v34 = *(_DWORD *)(a2 + 192);
      if (v34 == 2)
      {
        if (*(unsigned __int8 *)v33[5] <= 1u)
        {
          v43 = *((unsigned __int8 *)v33 + 88);
          v33[9] = "info";
          v33[10] = 4;
          if (!v43)
            *((_BYTE *)v33 + 88) = 1;
        }
        sub_22453FAE0((uint64_t)v33);
        *(_QWORD *)&v96 = "version";
        *((_QWORD *)&v96 + 1) = 7;
        LODWORD(v97) = 4;
        if (**(unsigned __int8 **)(v5 + 40) <= 1u)
        {
          v44 = *(unsigned __int8 *)(v5 + 88);
          *(_QWORD *)(v5 + 72) = "version";
          *(_QWORD *)(v5 + 80) = 7;
          if (!v44)
            *(_BYTE *)(v5 + 88) = 1;
        }
        sub_224540500(v5, &v97);
        sub_223B9970C(v5, a2 + 16, v97);
      }
      else if (v34 == 1)
      {
        if (*(unsigned __int8 *)v33[5] <= 1u)
        {
          v45 = *((unsigned __int8 *)v33 + 88);
          v33[9] = "info";
          v33[10] = 4;
          if (!v45)
            *((_BYTE *)v33 + 88) = 1;
        }
        sub_22453FAE0((uint64_t)v33);
        *(_QWORD *)&v96 = "version";
        *((_QWORD *)&v96 + 1) = 7;
        LODWORD(v97) = 5;
        if (**(unsigned __int8 **)(v5 + 40) <= 1u)
        {
          v46 = *(unsigned __int8 *)(v5 + 88);
          *(_QWORD *)(v5 + 72) = "version";
          *(_QWORD *)(v5 + 80) = 7;
          if (!v46)
            *(_BYTE *)(v5 + 88) = 1;
        }
        sub_224540500(v5, &v97);
        sub_223B98FC8(v5, a2 + 16, v97);
      }
      else
      {
        if (v34)
          goto LABEL_147;
        if (*(unsigned __int8 *)v33[5] <= 1u)
        {
          v35 = *((unsigned __int8 *)v33 + 88);
          v33[9] = "info";
          v33[10] = 4;
          if (!v35)
            *((_BYTE *)v33 + 88) = 1;
        }
        sub_22453FAE0((uint64_t)v33);
        *(_QWORD *)&v96 = "version";
        *((_QWORD *)&v96 + 1) = 7;
        LODWORD(v97) = 6;
        if (**(unsigned __int8 **)(v5 + 40) <= 1u)
        {
          v36 = *(unsigned __int8 *)(v5 + 88);
          *(_QWORD *)(v5 + 72) = "version";
          *(_QWORD *)(v5 + 80) = 7;
          if (!v36)
            *(_BYTE *)(v5 + 88) = 1;
        }
        sub_224540500(v5, &v97);
        sub_223B98294(v5, a2 + 16, v97);
      }
      v47 = *(_QWORD *)(v5 + 56);
      v48 = *(unsigned __int8 **)(v47 - 8);
      *(_QWORD *)(v5 + 40) = v48;
      *(_QWORD *)(v5 + 56) = v47 - 8;
      if (*(_BYTE *)(v5 + 88))
        *(_BYTE *)(v5 + 88) = 0;
      if (*v48 <= 1u)
      {
        *(_QWORD *)(v5 + 72) = "value";
        *(_QWORD *)(v5 + 80) = 5;
        *(_BYTE *)(v5 + 88) = 1;
      }
      sub_22453FAE0(v5);
      *(_QWORD *)&v96 = "version";
      *((_QWORD *)&v96 + 1) = 7;
      LODWORD(v97) = 1;
      if (**(unsigned __int8 **)(v5 + 40) <= 1u)
      {
        v49 = *(unsigned __int8 *)(v5 + 88);
        *(_QWORD *)(v5 + 72) = "version";
        *(_QWORD *)(v5 + 80) = 7;
        if (!v49)
          *(_BYTE *)(v5 + 88) = 1;
      }
      sub_224540500(v5, &v97);
      v50 = *(_OWORD *)(a2 + 296);
      v51 = *(_OWORD *)(a2 + 328);
      v103 = *(_OWORD *)(a2 + 312);
      v104 = v51;
      v105[0] = *(_QWORD *)(a2 + 344);
      v52 = *(_OWORD *)(a2 + 248);
      v98 = *(_OWORD *)(a2 + 232);
      v99 = v52;
      v53 = *(_OWORD *)(a2 + 280);
      v100 = *(_OWORD *)(a2 + 264);
      v101 = v53;
      v102 = v50;
      v54 = *(_OWORD *)(a2 + 216);
      v96 = *(_OWORD *)(a2 + 200);
      v97 = v54;
      *(_QWORD *)&v95 = 16;
      *((_QWORD *)&v95 + 1) = &v96;
      sub_22453FC5C(v5, (size_t *)&v95);
      if (!*(_BYTE *)(v5 + 88)
        || *(_QWORD *)(v5 + 80) != 7
        || ((v55 = *(int **)(v5 + 72), v56 = *v55, v57 = *(int *)((char *)v55 + 3), v56 == *(_DWORD *)"version")
          ? (v58 = v57 == *(_DWORD *)"sion")
          : (v58 = 0),
            !v58))
      {
        LOBYTE(v95) = 5;
        *((_QWORD *)&v95 + 1) = v97;
        v59 = (unsigned __int8 *)sub_22453F8B8(v5);
        v60 = *v59;
        *v59 = v95;
        LOBYTE(v95) = v60;
        v61 = *((_QWORD *)v59 + 1);
        *((_QWORD *)v59 + 1) = *((_QWORD *)&v95 + 1);
        *((_QWORD *)&v95 + 1) = v61;
        sub_223454278((uint64_t *)&v95 + 1, v60);
      }
      *(_QWORD *)&v95 = 16;
      *((_QWORD *)&v95 + 1) = (char *)&v97 + 8;
      sub_224541B78(v5, &v95);
      goto LABEL_47;
    }
    v39 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24EC79080, (const struct __class_type_info *)&unk_24EC606B8, 0);
    if (v39)
    {
      v40 = (uint64_t)v39;
      v41 = *(_DWORD *)(a2 + 192);
      if (v41 == 2)
      {
        if (v39[5])
        {
          v78 = (_QWORD *)v39[3];
          LOBYTE(v96) = *(_BYTE *)(v40 + 32);
          sub_2231813E8(v78, (uint64_t)&v96, 1);
        }
        std::ostream::operator<<();
        ++*(_QWORD *)(v40 + 40);
        sub_223BA081C(v40, a2 + 16, 4u);
      }
      else if (v41 == 1)
      {
        if (v39[5])
        {
          v79 = (_QWORD *)v39[3];
          LOBYTE(v96) = *(_BYTE *)(v40 + 32);
          sub_2231813E8(v79, (uint64_t)&v96, 1);
        }
        std::ostream::operator<<();
        ++*(_QWORD *)(v40 + 40);
        sub_223BA0278(v40, a2 + 16, 5u);
      }
      else
      {
        if (v41)
          goto LABEL_147;
        if (v39[5])
        {
          v42 = (_QWORD *)v39[3];
          LOBYTE(v96) = *(_BYTE *)(v40 + 32);
          sub_2231813E8(v42, (uint64_t)&v96, 1);
        }
        std::ostream::operator<<();
        ++*(_QWORD *)(v40 + 40);
        sub_223B9FBAC(v40, a2 + 16, 6u);
      }
      v80 = *(_BYTE *)(v40 + 34);
      if (*(_QWORD *)(v40 + 40))
      {
        v81 = *(_QWORD **)(v40 + 24);
        LOBYTE(v96) = *(_BYTE *)(v40 + 32);
        sub_2231813E8(v81, (uint64_t)&v96, 1);
      }
      v82 = *(_QWORD **)(v40 + 24);
      LOBYTE(v96) = v80;
      sub_2231813E8(v82, (uint64_t)&v96, 1);
      v83 = *(_QWORD *)(v40 + 40);
      *(_QWORD *)(v40 + 40) = v83 + 1;
      if (v83 != -1)
      {
        v84 = *(_QWORD **)(v40 + 24);
        LOBYTE(v96) = *(_BYTE *)(v40 + 32);
        sub_2231813E8(v84, (uint64_t)&v96, 1);
      }
      std::ostream::operator<<();
      ++*(_QWORD *)(v40 + 40);
      v85 = *(_OWORD *)(a2 + 296);
      v86 = *(_OWORD *)(a2 + 328);
      v103 = *(_OWORD *)(a2 + 312);
      v104 = v86;
      v105[0] = *(_QWORD *)(a2 + 344);
      v87 = *(_OWORD *)(a2 + 248);
      v98 = *(_OWORD *)(a2 + 232);
      v99 = v87;
      v88 = *(_OWORD *)(a2 + 280);
      v100 = *(_OWORD *)(a2 + 264);
      v101 = v88;
      v102 = v85;
      v89 = *(_OWORD *)(a2 + 216);
      v96 = *(_OWORD *)(a2 + 200);
      v97 = v89;
      sub_22454F564(v40, (unsigned __int8 *)&v96);
      sub_22454F564(v40, (unsigned __int8 *)&v96 + 1);
      sub_22454F564(v40, (unsigned __int8 *)&v96 + 2);
      sub_22454F564(v40, (unsigned __int8 *)&v96 + 3);
      sub_22454F564(v40, (unsigned __int8 *)&v96 + 4);
      sub_22454F564(v40, (unsigned __int8 *)&v96 + 5);
      sub_22454F564(v40, (unsigned __int8 *)&v96 + 6);
      sub_22454F564(v40, (unsigned __int8 *)&v96 + 7);
      sub_22454F564(v40, (unsigned __int8 *)&v96 + 8);
      sub_22454F564(v40, (unsigned __int8 *)((unint64_t)&v96 | 9));
      sub_22454F564(v40, (unsigned __int8 *)((unint64_t)&v96 | 0xA));
      sub_22454F564(v40, (unsigned __int8 *)((unint64_t)&v96 | 0xB));
      sub_22454F564(v40, (unsigned __int8 *)((unint64_t)&v96 | 0xC));
      sub_22454F564(v40, (unsigned __int8 *)((unint64_t)&v96 | 0xD));
      sub_22454F564(v40, (unsigned __int8 *)((unint64_t)&v96 | 0xE));
      sub_22454F564(v40, (unsigned __int8 *)((unint64_t)&v96 | 0xF));
      if (*(_QWORD *)(v40 + 40))
      {
        v90 = *(_QWORD **)(v40 + 24);
        LOBYTE(v95) = *(_BYTE *)(v40 + 32);
        sub_2231813E8(v90, (uint64_t)&v95, 1);
      }
      std::ostream::operator<<();
      v91 = *(_QWORD *)(v40 + 40) + 1;
      *(_QWORD *)(v40 + 40) = v91;
      for (j = 24; j != 152; j += 8)
      {
        if (v91)
        {
          v93 = *(_QWORD **)(v40 + 24);
          LOBYTE(v95) = *(_BYTE *)(v40 + 32);
          sub_2231813E8(v93, (uint64_t)&v95, 1);
        }
        *(_QWORD *)(*(_QWORD *)(v40 + 24) + *(_QWORD *)(**(_QWORD **)(v40 + 24) - 24) + 16) = 17;
        std::ostream::operator<<();
        v91 = *(_QWORD *)(v40 + 40) + 1;
        *(_QWORD *)(v40 + 40) = v91;
      }
    }
    else if (*a1 == &off_24EC776C0)
    {
      sub_223BE3758(a2, (uint64_t)a1);
    }
    else
    {
      sub_223BE3464(a2, a1);
    }
  }
}

void sub_223BE3430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 a11)
{
  uint64_t *v11;

  sub_223454278(v11, a11);
  _Unwind_Resume(a1);
}

void sub_223BE3448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 a11)
{
  void ***v11;

  sub_22345337C(v11, a11);
  _Unwind_Resume(a1);
}

uint64_t sub_223BE3464(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD v17[9];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    v8 = a2[2];
    LODWORD(v17[0]) = 4;
    (*(void (**)(_DWORD *, _OWORD *))(*(_QWORD *)a2 + 104))(a2, v17);
    v9 = v17[0];
    if (v8 < 1)
    {
      sub_223BACE24((uint64_t)a2, v4, v17[0]);
    }
    else
    {
      if (v8 == 2)
      {
        LODWORD(v17[0]) = 3;
        (*(void (**)(_DWORD *, _OWORD *))(*(_QWORD *)a2 + 104))(a2, v17);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_223BACE24((uint64_t)a2, v4, v9);
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
    }
  }
  else if (v5 == 1)
  {
    v10 = a2[2];
    LODWORD(v17[0]) = 5;
    (*(void (**)(_DWORD *, _OWORD *))(*(_QWORD *)a2 + 104))(a2, v17);
    v11 = v17[0];
    if (v10 < 1)
    {
      sub_223BAC79C((uint64_t)a2, v4, v17[0]);
    }
    else
    {
      if (v10 == 2)
      {
        LODWORD(v17[0]) = 3;
        (*(void (**)(_DWORD *, _OWORD *))(*(_QWORD *)a2 + 104))(a2, v17);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_223BAC79C((uint64_t)a2, v4, v11);
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
    }
  }
  else
  {
    if (v5)
      sub_22316DD70();
    v6 = a2[2];
    LODWORD(v17[0]) = 6;
    (*(void (**)(_DWORD *, _OWORD *))(*(_QWORD *)a2 + 104))(a2, v17);
    v7 = v17[0];
    if (v6 < 1)
    {
      sub_223BABEC8((uint64_t)a2, v4, v17[0]);
    }
    else
    {
      if (v6 == 2)
      {
        LODWORD(v17[0]) = 3;
        (*(void (**)(_DWORD *, _OWORD *))(*(_QWORD *)a2 + 104))(a2, v17);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_223BABEC8((uint64_t)a2, v4, v7);
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
    }
  }
  LODWORD(v17[0]) = 1;
  (*(void (**)(_DWORD *, _OWORD *))(*(_QWORD *)a2 + 104))(a2, v17);
  v12 = *(_OWORD *)(a1 + 312);
  v17[6] = *(_OWORD *)(a1 + 296);
  v17[7] = v12;
  v17[8] = *(_OWORD *)(a1 + 328);
  v18 = *(_QWORD *)(a1 + 344);
  v13 = *(_OWORD *)(a1 + 248);
  v17[2] = *(_OWORD *)(a1 + 232);
  v17[3] = v13;
  v14 = *(_OWORD *)(a1 + 280);
  v17[4] = *(_OWORD *)(a1 + 264);
  v17[5] = v14;
  v15 = *(_OWORD *)(a1 + 216);
  v17[0] = *(_OWORD *)(a1 + 200);
  v17[1] = v15;
  return sub_223BE3984((uint64_t)a2, (uint64_t)v17);
}

char *sub_223BE3758(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v16;
  __int128 __src;
  _OWORD v18[8];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    LODWORD(__src) = 4;
    sub_224501B60(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&__src + 4, 4);
    v7 = __src;
    sub_2244FF590((_QWORD *)a2);
    sub_223BA6918(a2, v4, v7);
  }
  else if (v5 == 1)
  {
    LODWORD(__src) = 5;
    sub_224501B60(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&__src + 4, 4);
    v8 = __src;
    sub_2244FF590((_QWORD *)a2);
    sub_223BA67FC(a2, v4, v8);
  }
  else
  {
    if (v5)
      sub_22316DD70();
    LODWORD(__src) = 6;
    sub_224501B60(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&__src + 4, 4);
    v6 = __src;
    sub_2244FF590((_QWORD *)a2);
    sub_223BA5FAC(a2, v4, v6);
  }
  v10 = *(_QWORD *)(a2 + 24);
  v9 = a2 + 24;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 32) - 8) + v10 + 10) = *(_QWORD *)(v9 + 8)
                                                                  - (*(_QWORD *)(*(_QWORD *)(v9 + 32) - 8)
                                                                   + v10)
                                                                  - 18;
  *(_QWORD *)(v9 + 32) -= 8;
  LODWORD(__src) = 1;
  sub_224501B60(v9, *(char **)(v9 + 8), (char *)&__src, (char *)&__src + 4, 4);
  v11 = *(_OWORD *)(a1 + 312);
  v18[5] = *(_OWORD *)(a1 + 296);
  v18[6] = v11;
  v18[7] = *(_OWORD *)(a1 + 328);
  v19 = *(_QWORD *)(a1 + 344);
  v12 = *(_OWORD *)(a1 + 248);
  v18[1] = *(_OWORD *)(a1 + 232);
  v18[2] = v12;
  v13 = *(_OWORD *)(a1 + 280);
  v18[3] = *(_OWORD *)(a1 + 264);
  v18[4] = v13;
  v14 = *(_OWORD *)(a1 + 216);
  __src = *(_OWORD *)(a1 + 200);
  v18[0] = v14;
  sub_224501B60(v9, *(char **)(v9 + 8), (char *)&__src, (char *)v18, 16);
  v16 = *(_QWORD *)&v18[0];
  sub_224501B60(v9, *(char **)(v9 + 8), (char *)&v16, (char *)&__src, 8);
  return sub_224501B60(v9, *(char **)(v9 + 8), (char *)v18 + 8, (char *)&v20, 128);
}

uint64_t sub_223BE3984(uint64_t a1, uint64_t a2)
{
  uint64_t v5;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2 + 1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2 + 2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2 + 3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2 + 4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2 + 5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2 + 6);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2 + 7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2 + 8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2 + 9);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2 + 10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2 + 11);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2 + 12);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2 + 13);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2 + 14);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2 + 15);
  v5 = *(_QWORD *)(a2 + 16);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 72))(a1, &v5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 32);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 40);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 56);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 64);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 72);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 88);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 96);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 104);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 112);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 120);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 128);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 136);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 144);
}

double sub_223BE3C40(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  void *v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  char *v39;
  char *v40;
  _QWORD *v41;
  char *v42;
  unint64_t v43;
  double result;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  int v90;
  char *v91;
  char *v92;
  char *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  unsigned int v110;
  char v111;
  char v112;
  _QWORD *exception;
  _QWORD *v114;
  char v115;
  void *__p;
  uint64_t v117;
  char v118;
  _BYTE v119[8];
  __int128 v120;
  __int128 v121;
  uint64_t v122;
  char v123;
  __int128 v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  char v128;
  __int128 v129;
  uint64_t v130;
  char v131;
  __int128 v132;
  uint64_t v133;
  unsigned __int8 v134;
  uint64_t v135;

  v135 = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24EC79068, (const struct __class_type_info *)&unk_24EC60740, 0);
  if (v4)
  {
    v5 = (uint64_t)v4;
    v6 = *(_DWORD *)(a2 + 192);
    switch(v6)
    {
      case 0:
LABEL_73:
        v36 = *(unsigned __int8 *)(v5 + 104);
        *(_QWORD *)(v5 + 88) = "info";
        *(_QWORD *)(v5 + 96) = 4;
        if (!v36)
          *(_BYTE *)(v5 + 104) = 1;
        sub_223BB4B40(v5, a2 + 16);
        v37 = *(unsigned __int8 *)(v5 + 104);
        *(_QWORD *)(v5 + 88) = "value";
        *(_QWORD *)(v5 + 96) = 5;
        if (!v37)
          *(_BYTE *)(v5 + 104) = 1;
        sub_224544628(v5);
        v38 = *(unsigned __int8 *)(v5 + 104);
        *(_QWORD *)(v5 + 88) = "version";
        *(_QWORD *)(v5 + 96) = 7;
        if (!v38)
          *(_BYTE *)(v5 + 104) = 1;
        v39 = (char *)sub_2245448E0((uint64_t *)v5);
        ++*(_QWORD *)(v5 + 112);
        __p = 0;
        sub_22451CAD4(v39, &__p);
        if (HIDWORD(__p))
        {
          exception = __cxa_allocate_exception(8uLL);
          *exception = &off_24EC7AC38;
          __cxa_throw(exception, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
        }
        __p = (void *)16;
        v117 = a2 + 200;
        v40 = (char *)sub_2245448E0((uint64_t *)v5);
        v41 = (_QWORD *)(v5 + 112);
        ++*(_QWORD *)(v5 + 112);
        sub_2245449F8(v40, (uint64_t)&__p);
        v42 = (char *)sub_2245448E0((uint64_t *)v5);
        ++*(_QWORD *)(v5 + 112);
        __p = 0;
        sub_22451CC1C(v42, &__p);
        *(_QWORD *)(a2 + 216) = __p;
        v43 = sub_2245448E0((uint64_t *)v5);
        ++*(_QWORD *)(v5 + 112);
        sub_224545FAC(v43, (double *)(a2 + 224));
LABEL_81:
        v45 = *(_QWORD *)(v5 + 48);
        *(_QWORD *)(v5 + 32) = *(_QWORD *)(v45 - 8);
        v46 = *(_QWORD *)(v5 + 72);
        *v41 = *(_QWORD *)(v46 - 8);
        *(_QWORD *)(v5 + 48) = v45 - 8;
        *(_QWORD *)(v5 + 72) = v46 - 8;
        return result;
      case 1:
        sub_223B89234(a2 + 16, (uint64_t)&__p);
        sub_223B87C9C((uint64_t)v119, (uint64_t *)&__p);
        v7 = *(unsigned int *)(a2 + 192);
        if ((_DWORD)v7 != -1)
        {
          if (!(_DWORD)v7)
          {
            sub_223BB47F0(a2 + 16, (uint64_t)v119);
            if (!v134)
              goto LABEL_63;
            goto LABEL_39;
          }
          ((void (*)(char *, uint64_t))off_24EC5FFB8[v7])(&v115, a2 + 16);
        }
        *(_BYTE *)(a2 + 40) = 0;
        *(_DWORD *)(a2 + 192) = -1;
        *(_OWORD *)(a2 + 24) = v120;
        *(_BYTE *)(a2 + 64) = 0;
        if (v123)
        {
          v20 = v122;
          *(_OWORD *)(a2 + 40) = v121;
          *(_QWORD *)(a2 + 56) = v20;
          v121 = 0uLL;
          v122 = 0;
          *(_BYTE *)(a2 + 64) = 1;
        }
        v21 = v125;
        v22 = v124;
        *(_BYTE *)(a2 + 96) = 0;
        *(_OWORD *)(a2 + 72) = v22;
        *(_QWORD *)(a2 + 88) = v21;
        *(_BYTE *)(a2 + 120) = 0;
        if (v128)
        {
          v23 = v127;
          *(_OWORD *)(a2 + 96) = v126;
          *(_QWORD *)(a2 + 112) = v23;
          v126 = 0uLL;
          v127 = 0;
          *(_BYTE *)(a2 + 120) = 1;
        }
        *(_BYTE *)(a2 + 128) = 0;
        *(_BYTE *)(a2 + 152) = 0;
        if (v131)
        {
          v24 = v130;
          *(_OWORD *)(a2 + 128) = v129;
          *(_QWORD *)(a2 + 144) = v24;
          v129 = 0uLL;
          v130 = 0;
          *(_BYTE *)(a2 + 152) = 1;
        }
        *(_BYTE *)(a2 + 160) = 0;
        *(_BYTE *)(a2 + 184) = 0;
        v25 = v134;
        if (v134)
        {
          *(_OWORD *)(a2 + 160) = v132;
          *(_QWORD *)(a2 + 176) = v133;
          v132 = 0uLL;
          v133 = 0;
          *(_BYTE *)(a2 + 184) = 1;
        }
        *(_DWORD *)(a2 + 192) = 0;
        if (!v25)
          goto LABEL_63;
LABEL_39:
        v26 = v132;
        if (!(_QWORD)v132)
          goto LABEL_63;
        v27 = *((_QWORD *)&v132 + 1);
        v28 = (void *)v132;
        if (*((_QWORD *)&v132 + 1) == (_QWORD)v132)
          goto LABEL_62;
        do
        {
          if (*(char *)(v27 - 1) < 0)
            operator delete(*(void **)(v27 - 24));
          v27 -= 24;
        }
        while (v27 != v26);
LABEL_61:
        v28 = (void *)v132;
LABEL_62:
        *((_QWORD *)&v132 + 1) = v26;
        operator delete(v28);
        goto LABEL_63;
      case 2:
        sub_223B8944C(a2 + 16, (uint64_t)&__p);
        sub_223B87C9C((uint64_t)v119, (uint64_t *)&__p);
        v13 = *(unsigned int *)(a2 + 192);
        if ((_DWORD)v13 != -1)
        {
          if (!(_DWORD)v13)
          {
            sub_223BB47F0(a2 + 16, (uint64_t)v119);
            if (!v134)
            {
LABEL_63:
              if (v131 && SHIBYTE(v130) < 0)
                operator delete((void *)v129);
              if (v128 && SHIBYTE(v127) < 0)
                operator delete((void *)v126);
              if (v123 && SHIBYTE(v122) < 0)
                operator delete((void *)v121);
              sub_2231AD66C((uint64_t)&__p);
              if (*(_DWORD *)(a2 + 192))
                sub_22316DD70();
              goto LABEL_73;
            }
            goto LABEL_55;
          }
          ((void (*)(char *, uint64_t))off_24EC5FFB8[v13])(&v115, a2 + 16);
        }
        *(_BYTE *)(a2 + 40) = 0;
        *(_DWORD *)(a2 + 192) = -1;
        *(_OWORD *)(a2 + 24) = v120;
        *(_BYTE *)(a2 + 64) = 0;
        if (v123)
        {
          v29 = v122;
          *(_OWORD *)(a2 + 40) = v121;
          *(_QWORD *)(a2 + 56) = v29;
          v121 = 0uLL;
          v122 = 0;
          *(_BYTE *)(a2 + 64) = 1;
        }
        v30 = v125;
        v31 = v124;
        *(_BYTE *)(a2 + 96) = 0;
        *(_OWORD *)(a2 + 72) = v31;
        *(_QWORD *)(a2 + 88) = v30;
        *(_BYTE *)(a2 + 120) = 0;
        if (v128)
        {
          v32 = v127;
          *(_OWORD *)(a2 + 96) = v126;
          *(_QWORD *)(a2 + 112) = v32;
          v126 = 0uLL;
          v127 = 0;
          *(_BYTE *)(a2 + 120) = 1;
        }
        *(_BYTE *)(a2 + 128) = 0;
        *(_BYTE *)(a2 + 152) = 0;
        if (v131)
        {
          v33 = v130;
          *(_OWORD *)(a2 + 128) = v129;
          *(_QWORD *)(a2 + 144) = v33;
          v129 = 0uLL;
          v130 = 0;
          *(_BYTE *)(a2 + 152) = 1;
        }
        *(_BYTE *)(a2 + 160) = 0;
        *(_BYTE *)(a2 + 184) = 0;
        v34 = v134;
        if (v134)
        {
          *(_OWORD *)(a2 + 160) = v132;
          *(_QWORD *)(a2 + 176) = v133;
          v132 = 0uLL;
          v133 = 0;
          *(_BYTE *)(a2 + 184) = 1;
        }
        *(_DWORD *)(a2 + 192) = 0;
        if (!v34)
          goto LABEL_63;
LABEL_55:
        v26 = v132;
        if (!(_QWORD)v132)
          goto LABEL_63;
        v35 = *((_QWORD *)&v132 + 1);
        v28 = (void *)v132;
        if (*((_QWORD *)&v132 + 1) == (_QWORD)v132)
          goto LABEL_62;
        do
        {
          if (*(char *)(v35 - 1) < 0)
            operator delete(*(void **)(v35 - 24));
          v35 -= 24;
        }
        while (v35 != v26);
        goto LABEL_61;
    }
LABEL_272:
    sub_22316DD70();
  }
  v8 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24EC79068, (const struct __class_type_info *)&unk_24EC20CC0, 0);
  if (v8)
  {
    v9 = v8;
    v10 = *(_DWORD *)(a2 + 192);
    if (!v10)
    {
LABEL_138:
      sub_223BBD12C((uint64_t)&__p, v9, a2 + 16);
      LODWORD(__p) = 1;
      v69 = v9[6];
      v68 = v9 + 6;
      sub_224554038(v69, &__p);
      v70 = *v68;
      sub_224553CF0(*v68, (_BYTE *)(a2 + 200));
      sub_224553CF0(v70, (_BYTE *)(a2 + 201));
      sub_224553CF0(v70, (_BYTE *)(a2 + 202));
      sub_224553CF0(v70, (_BYTE *)(a2 + 203));
      sub_224553CF0(v70, (_BYTE *)(a2 + 204));
      sub_224553CF0(v70, (_BYTE *)(a2 + 205));
      sub_224553CF0(v70, (_BYTE *)(a2 + 206));
      sub_224553CF0(v70, (_BYTE *)(a2 + 207));
      sub_224553CF0(v70, (_BYTE *)(a2 + 208));
      sub_224553CF0(v70, (_BYTE *)(a2 + 209));
      sub_224553CF0(v70, (_BYTE *)(a2 + 210));
      sub_224553CF0(v70, (_BYTE *)(a2 + 211));
      sub_224553CF0(v70, (_BYTE *)(a2 + 212));
      sub_224553CF0(v70, (_BYTE *)(a2 + 213));
      sub_224553CF0(v70, (_BYTE *)(a2 + 214));
      sub_224553CF0(v70, (_BYTE *)(a2 + 215));
      __p = 0;
      sub_2245542F8(*v68, &__p);
      *(_QWORD *)(a2 + 216) = __p;
      v71 = *v68;
      sub_224554604(v71, (double *)(a2 + 224));
      sub_224554604(v71, (double *)(a2 + 232));
      sub_224554604(v71, (double *)(a2 + 240));
      sub_224554604(v71, (double *)(a2 + 248));
      sub_224554604(v71, (double *)(a2 + 256));
      sub_224554604(v71, (double *)(a2 + 264));
      sub_224554604(v71, (double *)(a2 + 272));
      sub_224554604(v71, (double *)(a2 + 280));
      sub_224554604(v71, (double *)(a2 + 288));
      sub_224554604(v71, (double *)(a2 + 296));
      sub_224554604(v71, (double *)(a2 + 304));
      sub_224554604(v71, (double *)(a2 + 312));
      sub_224554604(v71, (double *)(a2 + 320));
      sub_224554604(v71, (double *)(a2 + 328));
      sub_224554604(v71, (double *)(a2 + 336));
      sub_224554604(v71, (double *)(a2 + 344));
      return result;
    }
    if (v10 == 1)
    {
      sub_223B89234(a2 + 16, (uint64_t)&__p);
      sub_223B87C9C((uint64_t)v119, (uint64_t *)&__p);
      v11 = *(unsigned int *)(a2 + 192);
      if ((_DWORD)v11 != -1)
      {
        if (!(_DWORD)v11)
        {
          sub_223BB47F0(a2 + 16, (uint64_t)v119);
          v12 = v134;
LABEL_102:
          if (!v12)
            goto LABEL_128;
          v59 = v132;
          if (!(_QWORD)v132)
            goto LABEL_128;
          v60 = *((_QWORD *)&v132 + 1);
          v61 = (void *)v132;
          if (*((_QWORD *)&v132 + 1) == (_QWORD)v132)
          {
LABEL_127:
            *((_QWORD *)&v132 + 1) = v59;
            operator delete(v61);
LABEL_128:
            if (v131 && SHIBYTE(v130) < 0)
              operator delete((void *)v129);
            if (v128 && SHIBYTE(v127) < 0)
              operator delete((void *)v126);
            if (v123 && SHIBYTE(v122) < 0)
              operator delete((void *)v121);
            sub_2231AD66C((uint64_t)&__p);
            if (*(_DWORD *)(a2 + 192))
              sub_22316DD70();
            goto LABEL_138;
          }
          do
          {
            if (*(char *)(v60 - 1) < 0)
              operator delete(*(void **)(v60 - 24));
            v60 -= 24;
          }
          while (v60 != v59);
LABEL_126:
          v61 = (void *)v132;
          goto LABEL_127;
        }
        ((void (*)(char *, uint64_t))off_24EC5FFB8[v11])(&v115, a2 + 16);
      }
      *(_BYTE *)(a2 + 40) = 0;
      *(_DWORD *)(a2 + 192) = -1;
      *(_OWORD *)(a2 + 24) = v120;
      *(_BYTE *)(a2 + 64) = 0;
      if (v123)
      {
        v54 = v122;
        *(_OWORD *)(a2 + 40) = v121;
        *(_QWORD *)(a2 + 56) = v54;
        v121 = 0uLL;
        v122 = 0;
        *(_BYTE *)(a2 + 64) = 1;
      }
      v55 = v125;
      v56 = v124;
      *(_BYTE *)(a2 + 96) = 0;
      *(_OWORD *)(a2 + 72) = v56;
      *(_QWORD *)(a2 + 88) = v55;
      *(_BYTE *)(a2 + 120) = 0;
      if (v128)
      {
        v57 = v127;
        *(_OWORD *)(a2 + 96) = v126;
        *(_QWORD *)(a2 + 112) = v57;
        v126 = 0uLL;
        v127 = 0;
        *(_BYTE *)(a2 + 120) = 1;
      }
      *(_BYTE *)(a2 + 128) = 0;
      *(_BYTE *)(a2 + 152) = 0;
      if (v131)
      {
        v58 = v130;
        *(_OWORD *)(a2 + 128) = v129;
        *(_QWORD *)(a2 + 144) = v58;
        v129 = 0uLL;
        v130 = 0;
        *(_BYTE *)(a2 + 152) = 1;
      }
      *(_BYTE *)(a2 + 160) = 0;
      *(_BYTE *)(a2 + 184) = 0;
      v12 = v134;
      if (v134)
      {
        *(_OWORD *)(a2 + 160) = v132;
        *(_QWORD *)(a2 + 176) = v133;
        v132 = 0uLL;
        v133 = 0;
        *(_BYTE *)(a2 + 184) = 1;
      }
      *(_DWORD *)(a2 + 192) = 0;
      goto LABEL_102;
    }
    if (v10 != 2)
      goto LABEL_272;
    sub_223B8944C(a2 + 16, (uint64_t)&__p);
    sub_223B87C9C((uint64_t)v119, (uint64_t *)&__p);
    v18 = *(unsigned int *)(a2 + 192);
    if ((_DWORD)v18 != -1)
    {
      if (!(_DWORD)v18)
      {
        sub_223BB47F0(a2 + 16, (uint64_t)v119);
        v19 = v134;
LABEL_119:
        if (!v19)
          goto LABEL_128;
        v59 = v132;
        if (!(_QWORD)v132)
          goto LABEL_128;
        v67 = *((_QWORD *)&v132 + 1);
        v61 = (void *)v132;
        if (*((_QWORD *)&v132 + 1) == (_QWORD)v132)
          goto LABEL_127;
        do
        {
          if (*(char *)(v67 - 1) < 0)
            operator delete(*(void **)(v67 - 24));
          v67 -= 24;
        }
        while (v67 != v59);
        goto LABEL_126;
      }
      ((void (*)(char *, uint64_t))off_24EC5FFB8[v18])(&v115, a2 + 16);
    }
    *(_BYTE *)(a2 + 40) = 0;
    *(_DWORD *)(a2 + 192) = -1;
    *(_OWORD *)(a2 + 24) = v120;
    *(_BYTE *)(a2 + 64) = 0;
    if (v123)
    {
      v62 = v122;
      *(_OWORD *)(a2 + 40) = v121;
      *(_QWORD *)(a2 + 56) = v62;
      v121 = 0uLL;
      v122 = 0;
      *(_BYTE *)(a2 + 64) = 1;
    }
    v63 = v125;
    v64 = v124;
    *(_BYTE *)(a2 + 96) = 0;
    *(_OWORD *)(a2 + 72) = v64;
    *(_QWORD *)(a2 + 88) = v63;
    *(_BYTE *)(a2 + 120) = 0;
    if (v128)
    {
      v65 = v127;
      *(_OWORD *)(a2 + 96) = v126;
      *(_QWORD *)(a2 + 112) = v65;
      v126 = 0uLL;
      v127 = 0;
      *(_BYTE *)(a2 + 120) = 1;
    }
    *(_BYTE *)(a2 + 128) = 0;
    *(_BYTE *)(a2 + 152) = 0;
    if (v131)
    {
      v66 = v130;
      *(_OWORD *)(a2 + 128) = v129;
      *(_QWORD *)(a2 + 144) = v66;
      v129 = 0uLL;
      v130 = 0;
      *(_BYTE *)(a2 + 152) = 1;
    }
    *(_BYTE *)(a2 + 160) = 0;
    *(_BYTE *)(a2 + 184) = 0;
    v19 = v134;
    if (v134)
    {
      *(_OWORD *)(a2 + 160) = v132;
      *(_QWORD *)(a2 + 176) = v133;
      v132 = 0uLL;
      v133 = 0;
      *(_BYTE *)(a2 + 184) = 1;
    }
    *(_DWORD *)(a2 + 192) = 0;
    goto LABEL_119;
  }
  v14 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24EC79068, (const struct __class_type_info *)&unk_24EC607C8, 0);
  if (v14)
  {
    v5 = (uint64_t)v14;
    v15 = *(_DWORD *)(a2 + 192);
    if (!v15)
    {
LABEL_191:
      v88 = *(unsigned __int8 *)(v5 + 104);
      *(_QWORD *)(v5 + 88) = "info";
      *(_QWORD *)(v5 + 96) = 4;
      if (!v88)
        *(_BYTE *)(v5 + 104) = 1;
      sub_223BBD758(v5, a2 + 16);
      v89 = *(unsigned __int8 *)(v5 + 104);
      *(_QWORD *)(v5 + 88) = "value";
      *(_QWORD *)(v5 + 96) = 5;
      if (!v89)
        *(_BYTE *)(v5 + 104) = 1;
      sub_224544138(v5);
      v90 = *(unsigned __int8 *)(v5 + 104);
      *(_QWORD *)(v5 + 88) = "version";
      *(_QWORD *)(v5 + 96) = 7;
      if (!v90)
        *(_BYTE *)(v5 + 104) = 1;
      v91 = (char *)sub_2245443F0((uint64_t *)v5);
      ++*(_QWORD *)(v5 + 112);
      __p = 0;
      sub_22451C444(v91, &__p);
      if (HIDWORD(__p))
      {
        v114 = __cxa_allocate_exception(8uLL);
        *v114 = &off_24EC7AC38;
        __cxa_throw(v114, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
      }
      __p = (void *)16;
      v117 = a2 + 200;
      v92 = (char *)sub_2245443F0((uint64_t *)v5);
      v41 = (_QWORD *)(v5 + 112);
      ++*(_QWORD *)(v5 + 112);
      sub_224544508(v92, (uint64_t)&__p);
      v93 = (char *)sub_2245443F0((uint64_t *)v5);
      ++*(_QWORD *)(v5 + 112);
      __p = 0;
      sub_22451C58C(v93, &__p);
      *(_QWORD *)(a2 + 216) = __p;
      v94 = sub_2245443F0((uint64_t *)v5);
      ++*(_QWORD *)(v5 + 112);
      sub_224545370(v94, (double *)(a2 + 224));
      goto LABEL_81;
    }
    if (v15 == 1)
    {
      sub_223B89234(a2 + 16, (uint64_t)&__p);
      sub_223B87C9C((uint64_t)v119, (uint64_t *)&__p);
      v16 = *(unsigned int *)(a2 + 192);
      if ((_DWORD)v16 != -1)
      {
        if (!(_DWORD)v16)
        {
          sub_223BB47F0(a2 + 16, (uint64_t)v119);
          v17 = v134;
LABEL_155:
          if (!v17)
            goto LABEL_181;
          v79 = v132;
          if (!(_QWORD)v132)
            goto LABEL_181;
          v80 = *((_QWORD *)&v132 + 1);
          v81 = (void *)v132;
          if (*((_QWORD *)&v132 + 1) == (_QWORD)v132)
          {
LABEL_180:
            *((_QWORD *)&v132 + 1) = v79;
            operator delete(v81);
LABEL_181:
            if (v131 && SHIBYTE(v130) < 0)
              operator delete((void *)v129);
            if (v128 && SHIBYTE(v127) < 0)
              operator delete((void *)v126);
            if (v123 && SHIBYTE(v122) < 0)
              operator delete((void *)v121);
            sub_2231AD66C((uint64_t)&__p);
            if (*(_DWORD *)(a2 + 192))
              sub_22316DD70();
            goto LABEL_191;
          }
          do
          {
            if (*(char *)(v80 - 1) < 0)
              operator delete(*(void **)(v80 - 24));
            v80 -= 24;
          }
          while (v80 != v79);
LABEL_179:
          v81 = (void *)v132;
          goto LABEL_180;
        }
        ((void (*)(char *, uint64_t))off_24EC5FFB8[v16])(&v115, a2 + 16);
      }
      *(_BYTE *)(a2 + 40) = 0;
      *(_DWORD *)(a2 + 192) = -1;
      *(_OWORD *)(a2 + 24) = v120;
      *(_BYTE *)(a2 + 64) = 0;
      if (v123)
      {
        v74 = v122;
        *(_OWORD *)(a2 + 40) = v121;
        *(_QWORD *)(a2 + 56) = v74;
        v121 = 0uLL;
        v122 = 0;
        *(_BYTE *)(a2 + 64) = 1;
      }
      v75 = v125;
      v76 = v124;
      *(_BYTE *)(a2 + 96) = 0;
      *(_OWORD *)(a2 + 72) = v76;
      *(_QWORD *)(a2 + 88) = v75;
      *(_BYTE *)(a2 + 120) = 0;
      if (v128)
      {
        v77 = v127;
        *(_OWORD *)(a2 + 96) = v126;
        *(_QWORD *)(a2 + 112) = v77;
        v126 = 0uLL;
        v127 = 0;
        *(_BYTE *)(a2 + 120) = 1;
      }
      *(_BYTE *)(a2 + 128) = 0;
      *(_BYTE *)(a2 + 152) = 0;
      if (v131)
      {
        v78 = v130;
        *(_OWORD *)(a2 + 128) = v129;
        *(_QWORD *)(a2 + 144) = v78;
        v129 = 0uLL;
        v130 = 0;
        *(_BYTE *)(a2 + 152) = 1;
      }
      *(_BYTE *)(a2 + 160) = 0;
      *(_BYTE *)(a2 + 184) = 0;
      v17 = v134;
      if (v134)
      {
        *(_OWORD *)(a2 + 160) = v132;
        *(_QWORD *)(a2 + 176) = v133;
        v132 = 0uLL;
        v133 = 0;
        *(_BYTE *)(a2 + 184) = 1;
      }
      *(_DWORD *)(a2 + 192) = 0;
      goto LABEL_155;
    }
    if (v15 != 2)
      goto LABEL_272;
    sub_223B8944C(a2 + 16, (uint64_t)&__p);
    sub_223B87C9C((uint64_t)v119, (uint64_t *)&__p);
    v52 = *(unsigned int *)(a2 + 192);
    if ((_DWORD)v52 != -1)
    {
      if (!(_DWORD)v52)
      {
        sub_223BB47F0(a2 + 16, (uint64_t)v119);
        v53 = v134;
LABEL_172:
        if (!v53)
          goto LABEL_181;
        v79 = v132;
        if (!(_QWORD)v132)
          goto LABEL_181;
        v87 = *((_QWORD *)&v132 + 1);
        v81 = (void *)v132;
        if (*((_QWORD *)&v132 + 1) == (_QWORD)v132)
          goto LABEL_180;
        do
        {
          if (*(char *)(v87 - 1) < 0)
            operator delete(*(void **)(v87 - 24));
          v87 -= 24;
        }
        while (v87 != v79);
        goto LABEL_179;
      }
      ((void (*)(char *, uint64_t))off_24EC5FFB8[v52])(&v115, a2 + 16);
    }
    *(_BYTE *)(a2 + 40) = 0;
    *(_DWORD *)(a2 + 192) = -1;
    *(_OWORD *)(a2 + 24) = v120;
    *(_BYTE *)(a2 + 64) = 0;
    if (v123)
    {
      v82 = v122;
      *(_OWORD *)(a2 + 40) = v121;
      *(_QWORD *)(a2 + 56) = v82;
      v121 = 0uLL;
      v122 = 0;
      *(_BYTE *)(a2 + 64) = 1;
    }
    v83 = v125;
    v84 = v124;
    *(_BYTE *)(a2 + 96) = 0;
    *(_OWORD *)(a2 + 72) = v84;
    *(_QWORD *)(a2 + 88) = v83;
    *(_BYTE *)(a2 + 120) = 0;
    if (v128)
    {
      v85 = v127;
      *(_OWORD *)(a2 + 96) = v126;
      *(_QWORD *)(a2 + 112) = v85;
      v126 = 0uLL;
      v127 = 0;
      *(_BYTE *)(a2 + 120) = 1;
    }
    *(_BYTE *)(a2 + 128) = 0;
    *(_BYTE *)(a2 + 152) = 0;
    if (v131)
    {
      v86 = v130;
      *(_OWORD *)(a2 + 128) = v129;
      *(_QWORD *)(a2 + 144) = v86;
      v129 = 0uLL;
      v130 = 0;
      *(_BYTE *)(a2 + 152) = 1;
    }
    *(_BYTE *)(a2 + 160) = 0;
    *(_BYTE *)(a2 + 184) = 0;
    v53 = v134;
    if (v134)
    {
      *(_OWORD *)(a2 + 160) = v132;
      *(_QWORD *)(a2 + 176) = v133;
      v132 = 0uLL;
      v133 = 0;
      *(_BYTE *)(a2 + 184) = 1;
    }
    *(_DWORD *)(a2 + 192) = 0;
    goto LABEL_172;
  }
  v47 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24EC79068, (const struct __class_type_info *)&unk_24EC60800, 0);
  if (v47)
  {
    v48 = (uint64_t)v47;
    v49 = *(_DWORD *)(a2 + 192);
    if (!v49)
      goto LABEL_246;
    if (v49 == 1)
    {
      sub_223B89234(a2 + 16, (uint64_t)&__p);
      sub_223B87C9C((uint64_t)v119, (uint64_t *)&__p);
      v50 = *(unsigned int *)(a2 + 192);
      if ((_DWORD)v50 != -1)
      {
        if (!(_DWORD)v50)
        {
          sub_223BB47F0(a2 + 16, (uint64_t)v119);
          v51 = v134;
LABEL_210:
          if (!v51)
            goto LABEL_236;
          v100 = v132;
          if (!(_QWORD)v132)
            goto LABEL_236;
          v101 = *((_QWORD *)&v132 + 1);
          v102 = (void *)v132;
          if (*((_QWORD *)&v132 + 1) == (_QWORD)v132)
          {
LABEL_235:
            *((_QWORD *)&v132 + 1) = v100;
            operator delete(v102);
LABEL_236:
            if (v131 && SHIBYTE(v130) < 0)
              operator delete((void *)v129);
            if (v128 && SHIBYTE(v127) < 0)
              operator delete((void *)v126);
            if (v123 && SHIBYTE(v122) < 0)
              operator delete((void *)v121);
            sub_2231AD66C((uint64_t)&__p);
            if (*(_DWORD *)(a2 + 192))
              sub_22316DD70();
LABEL_246:
            LODWORD(__p) = 6;
            sub_2245508F0(v48, &__p);
            v109 = __p;
            if (__p >= 6)
              v110 = 6;
            else
              v110 = __p;
            if (v110 < 3)
              sub_223BC4F50((uint64_t)&__p, v48, a2 + 16, v110);
            else
              sub_223BC5140(v48, a2 + 16, v110);
            if (v109 < 3 || *(_BYTE *)(v48 + 131))
            {
LABEL_254:
              LODWORD(__p) = 1;
              sub_2245508F0(v48, &__p);
              sub_22454FFAC(v48, (_BYTE *)(a2 + 200));
              sub_22454FFAC(v48, (_BYTE *)(a2 + 201));
              sub_22454FFAC(v48, (_BYTE *)(a2 + 202));
              sub_22454FFAC(v48, (_BYTE *)(a2 + 203));
              sub_22454FFAC(v48, (_BYTE *)(a2 + 204));
              sub_22454FFAC(v48, (_BYTE *)(a2 + 205));
              sub_22454FFAC(v48, (_BYTE *)(a2 + 206));
              sub_22454FFAC(v48, (_BYTE *)(a2 + 207));
              sub_22454FFAC(v48, (_BYTE *)(a2 + 208));
              sub_22454FFAC(v48, (_BYTE *)(a2 + 209));
              sub_22454FFAC(v48, (_BYTE *)(a2 + 210));
              sub_22454FFAC(v48, (_BYTE *)(a2 + 211));
              sub_22454FFAC(v48, (_BYTE *)(a2 + 212));
              sub_22454FFAC(v48, (_BYTE *)(a2 + 213));
              sub_22454FFAC(v48, (_BYTE *)(a2 + 214));
              sub_22454FFAC(v48, (_BYTE *)(a2 + 215));
              __p = 0;
              sub_224550B44(v48, &__p);
              *(_QWORD *)(a2 + 216) = __p;
              sub_2245514BC(v48, (_QWORD *)(a2 + 224));
              sub_2245514BC(v48, (_QWORD *)(a2 + 232));
              sub_2245514BC(v48, (_QWORD *)(a2 + 240));
              sub_2245514BC(v48, (_QWORD *)(a2 + 248));
              sub_2245514BC(v48, (_QWORD *)(a2 + 256));
              sub_2245514BC(v48, (_QWORD *)(a2 + 264));
              sub_2245514BC(v48, (_QWORD *)(a2 + 272));
              sub_2245514BC(v48, (_QWORD *)(a2 + 280));
              sub_2245514BC(v48, (_QWORD *)(a2 + 288));
              sub_2245514BC(v48, (_QWORD *)(a2 + 296));
              sub_2245514BC(v48, (_QWORD *)(a2 + 304));
              sub_2245514BC(v48, (_QWORD *)(a2 + 312));
              sub_2245514BC(v48, (_QWORD *)(a2 + 320));
              sub_2245514BC(v48, (_QWORD *)(a2 + 328));
              sub_2245514BC(v48, (_QWORD *)(a2 + 336));
              sub_2245514BC(v48, (_QWORD *)(a2 + 344));
              return result;
            }
            while (1)
            {
              if ((*(_BYTE *)(*(_QWORD *)(v48 + 16) + *(_QWORD *)(**(_QWORD **)(v48 + 16) - 24) + 32) & 2) != 0)
                goto LABEL_254;
              sub_2245523C0(v48, (uint64_t)&__p);
              if (v118 < 0)
              {
                if (v117 != 1 || *(unsigned __int8 *)(v48 + 72) != *(unsigned __int8 *)__p)
                {
LABEL_267:
                  v112 = 1;
                  goto LABEL_268;
                }
              }
              else if (v118 != 1 || *(unsigned __int8 *)(v48 + 72) != __p)
              {
                goto LABEL_267;
              }
              v112 = 0;
LABEL_268:
              if (v118 < 0)
                operator delete(__p);
              if (*(_BYTE *)(v48 + 131))
                v111 = 0;
              else
                v111 = v112;
              if ((v111 & 1) == 0)
                goto LABEL_254;
            }
          }
          do
          {
            if (*(char *)(v101 - 1) < 0)
              operator delete(*(void **)(v101 - 24));
            v101 -= 24;
          }
          while (v101 != v100);
LABEL_234:
          v102 = (void *)v132;
          goto LABEL_235;
        }
        ((void (*)(char *, uint64_t))off_24EC5FFB8[v50])(&v115, a2 + 16);
      }
      *(_BYTE *)(a2 + 40) = 0;
      *(_DWORD *)(a2 + 192) = -1;
      *(_OWORD *)(a2 + 24) = v120;
      *(_BYTE *)(a2 + 64) = 0;
      if (v123)
      {
        v95 = v122;
        *(_OWORD *)(a2 + 40) = v121;
        *(_QWORD *)(a2 + 56) = v95;
        v121 = 0uLL;
        v122 = 0;
        *(_BYTE *)(a2 + 64) = 1;
      }
      v96 = v125;
      v97 = v124;
      *(_BYTE *)(a2 + 96) = 0;
      *(_OWORD *)(a2 + 72) = v97;
      *(_QWORD *)(a2 + 88) = v96;
      *(_BYTE *)(a2 + 120) = 0;
      if (v128)
      {
        v98 = v127;
        *(_OWORD *)(a2 + 96) = v126;
        *(_QWORD *)(a2 + 112) = v98;
        v126 = 0uLL;
        v127 = 0;
        *(_BYTE *)(a2 + 120) = 1;
      }
      *(_BYTE *)(a2 + 128) = 0;
      *(_BYTE *)(a2 + 152) = 0;
      if (v131)
      {
        v99 = v130;
        *(_OWORD *)(a2 + 128) = v129;
        *(_QWORD *)(a2 + 144) = v99;
        v129 = 0uLL;
        v130 = 0;
        *(_BYTE *)(a2 + 152) = 1;
      }
      *(_BYTE *)(a2 + 160) = 0;
      *(_BYTE *)(a2 + 184) = 0;
      v51 = v134;
      if (v134)
      {
        *(_OWORD *)(a2 + 160) = v132;
        *(_QWORD *)(a2 + 176) = v133;
        v132 = 0uLL;
        v133 = 0;
        *(_BYTE *)(a2 + 184) = 1;
      }
      *(_DWORD *)(a2 + 192) = 0;
      goto LABEL_210;
    }
    if (v49 != 2)
      goto LABEL_272;
    sub_223B8944C(a2 + 16, (uint64_t)&__p);
    sub_223B87C9C((uint64_t)v119, (uint64_t *)&__p);
    v72 = *(unsigned int *)(a2 + 192);
    if ((_DWORD)v72 != -1)
    {
      if (!(_DWORD)v72)
      {
        sub_223BB47F0(a2 + 16, (uint64_t)v119);
        v73 = v134;
LABEL_227:
        if (!v73)
          goto LABEL_236;
        v100 = v132;
        if (!(_QWORD)v132)
          goto LABEL_236;
        v108 = *((_QWORD *)&v132 + 1);
        v102 = (void *)v132;
        if (*((_QWORD *)&v132 + 1) == (_QWORD)v132)
          goto LABEL_235;
        do
        {
          if (*(char *)(v108 - 1) < 0)
            operator delete(*(void **)(v108 - 24));
          v108 -= 24;
        }
        while (v108 != v100);
        goto LABEL_234;
      }
      ((void (*)(char *, uint64_t))off_24EC5FFB8[v72])(&v115, a2 + 16);
    }
    *(_BYTE *)(a2 + 40) = 0;
    *(_DWORD *)(a2 + 192) = -1;
    *(_OWORD *)(a2 + 24) = v120;
    *(_BYTE *)(a2 + 64) = 0;
    if (v123)
    {
      v103 = v122;
      *(_OWORD *)(a2 + 40) = v121;
      *(_QWORD *)(a2 + 56) = v103;
      v121 = 0uLL;
      v122 = 0;
      *(_BYTE *)(a2 + 64) = 1;
    }
    v104 = v125;
    v105 = v124;
    *(_BYTE *)(a2 + 96) = 0;
    *(_OWORD *)(a2 + 72) = v105;
    *(_QWORD *)(a2 + 88) = v104;
    *(_BYTE *)(a2 + 120) = 0;
    if (v128)
    {
      v106 = v127;
      *(_OWORD *)(a2 + 96) = v126;
      *(_QWORD *)(a2 + 112) = v106;
      v126 = 0uLL;
      v127 = 0;
      *(_BYTE *)(a2 + 120) = 1;
    }
    *(_BYTE *)(a2 + 128) = 0;
    *(_BYTE *)(a2 + 152) = 0;
    if (v131)
    {
      v107 = v130;
      *(_OWORD *)(a2 + 128) = v129;
      *(_QWORD *)(a2 + 144) = v107;
      v129 = 0uLL;
      v130 = 0;
      *(_BYTE *)(a2 + 152) = 1;
    }
    *(_BYTE *)(a2 + 160) = 0;
    *(_BYTE *)(a2 + 184) = 0;
    v73 = v134;
    if (v134)
    {
      *(_OWORD *)(a2 + 160) = v132;
      *(_QWORD *)(a2 + 176) = v133;
      v132 = 0uLL;
      v133 = 0;
      *(_BYTE *)(a2 + 184) = 1;
    }
    *(_DWORD *)(a2 + 192) = 0;
    goto LABEL_227;
  }
  if (*a1 == &off_24EC77900)
    *(_QWORD *)&result = sub_223BE5B7C(a2, a1).n128_u64[0];
  else
    sub_223BE53FC(a2, a1);
  return result;
}

