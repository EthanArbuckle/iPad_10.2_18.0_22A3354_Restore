__int16 sub_22321A314@<H0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int i;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _WORD *v21;
  __int16 *v22;
  __int128 *v23;
  _OWORD *v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  __int16 v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _WORD *v33;
  __int16 *v34;
  __int128 *v35;
  _OWORD *v36;
  unint64_t v37;
  __int128 v38;
  __int16 v39;

  v5 = a5;
  v6 = a4;
  v9 = a1[6];
  v10 = a1[7];
  v11 = a1[3] | (unint64_t)(v9 << 32);
  v12 = a1[4] | (unint64_t)(v10 << 32);
  *(_QWORD *)a2 = a4;
  *(_QWORD *)(a2 + 8) = v11;
  *(_DWORD *)(a2 + 16) = v9;
  *(_QWORD *)(a2 + 24) = a5;
  *(_QWORD *)(a2 + 32) = v12;
  *(_DWORD *)(a2 + 40) = v10;
  v13 = a1[8];
  if (v13)
  {
    for (i = 0; i < v13; ++i)
    {
      *(_QWORD *)a2 = v6;
      *(_QWORD *)(a2 + 24) = v5;
      v16 = *a3;
      if (v6 || !v16)
      {
        v17 = v5;
        if (!v16)
          goto LABEL_4;
      }
      else
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_33;
        }
        v17 = *(_QWORD *)(a2 + 24);
      }
      v18 = (v16 - 1) & 0x7FFFFFFFFFFFFFFFLL;
      if (v18 < 0xF || (unint64_t)(v17 - v6) < 0x20)
      {
        v21 = (_WORD *)v17;
        v22 = (__int16 *)v6;
      }
      else
      {
        v19 = v18 + 1;
        v20 = (v18 + 1) & 0xFFFFFFFFFFFFFFF0;
        v21 = (_WORD *)(v17 + 2 * v20);
        v22 = (__int16 *)(v6 + 2 * v20);
        v23 = (__int128 *)(v6 + 16);
        v24 = (_OWORD *)(v17 + 16);
        v25 = v20;
        do
        {
          v26 = *(v23 - 1);
          v27 = *v23;
          *(v24 - 1) = v26;
          *v24 = v27;
          v23 += 2;
          v24 += 2;
          v25 -= 16;
        }
        while (v25);
        if (v19 == v20)
          goto LABEL_3;
      }
      do
      {
        v28 = *v22++;
        LOWORD(v26) = v28;
        *v21++ = v28;
      }
      while (v22 != (__int16 *)(v6 + 2 * v16));
LABEL_3:
      v13 = a1[8];
LABEL_4:
      v6 += 2 * a1[9];
      v5 += 2 * a1[10];
    }
  }
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 24) = v5;
  v29 = *a3;
  if (v6 || !v29)
  {
    if (!v29)
      return v26;
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
LABEL_33:
      abort();
    }
    v5 = *(_QWORD *)(a2 + 24);
  }
  v30 = (v29 - 1) & 0x7FFFFFFFFFFFFFFFLL;
  if (v30 < 0xF || (unint64_t)(v5 - v6) < 0x20)
  {
    v33 = (_WORD *)v5;
    v34 = (__int16 *)v6;
    do
    {
LABEL_31:
      v39 = *v34++;
      LOWORD(v26) = v39;
      *v33++ = v39;
    }
    while (v34 != (__int16 *)(v6 + 2 * v29));
    return v26;
  }
  v31 = v30 + 1;
  v32 = (v30 + 1) & 0xFFFFFFFFFFFFFFF0;
  v33 = (_WORD *)(v5 + 2 * v32);
  v34 = (__int16 *)(v6 + 2 * v32);
  v35 = (__int128 *)(v6 + 16);
  v36 = (_OWORD *)(v5 + 16);
  v37 = v32;
  do
  {
    v26 = *(v35 - 1);
    v38 = *v35;
    *(v36 - 1) = v26;
    *v36 = v38;
    v35 += 2;
    v36 += 2;
    v37 -= 16;
  }
  while (v37);
  if (v31 != v32)
    goto LABEL_31;
  return v26;
}

double sub_22321A564(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  BOOL v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  double result;
  uint64_t v15;
  int v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  _OWORD v22[2];

  v4 = *(_DWORD *)(a2 + 8);
  v3 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 16);
  if (v4)
    v6 = v3 == 0;
  else
    v6 = 1;
  if (!v6 && v5 != 0)
  {
    v16 = v4 - 1;
    v9 = *(unsigned int *)(a2 + 24);
    v10 = *(unsigned int *)(a3 + 24);
    v17 = *(unsigned int *)(a2 + 20) | ((unint64_t)*(unsigned int *)(a3 + 20) << 32);
    v15 = 0;
    v18 = v3 - 1;
    v19 = v9 | (v10 << 32);
    v21 = *(unsigned int *)(a2 + 28) | ((unint64_t)*(unsigned int *)(a3 + 28) << 32);
    v11 = *(_QWORD *)a2;
    v12 = *(_QWORD *)a3;
    memset(v22, 0, sizeof(v22));
    v20 = v5 - 1;
    if (v5 != 1)
    {
      v13 = 0;
      do
      {
        sub_22321A650(&v15, v22, a1, v11, v12);
        v11 += 2 * v21;
        v12 += 2 * HIDWORD(v21);
        ++v13;
      }
      while (v13 < v20);
    }
    *(_QWORD *)&result = sub_22321A650(&v15, v22, a1, v11, v12);
  }
  return result;
}

__int16 sub_22321A650@<H0>(_DWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v9;
  unsigned int i;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _WORD *v17;
  __int16 *v18;
  __int128 *v19;
  _OWORD *v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int16 v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _WORD *v29;
  __int16 *v30;
  __int128 *v31;
  _OWORD *v32;
  unint64_t v33;
  __int128 v34;
  __int16 v35;

  v5 = a5;
  v6 = a4;
  *a2 = a4;
  a2[2] = a5;
  v9 = a1[5];
  if (v9)
  {
    for (i = 0; i < v9; ++i)
    {
      *a2 = v6;
      a2[2] = v5;
      v12 = *a3;
      if (v6 || !v12)
      {
        v13 = v5;
        if (!v12)
          goto LABEL_4;
      }
      else
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_33;
        }
        v13 = a2[2];
      }
      v14 = (v12 - 1) & 0x7FFFFFFFFFFFFFFFLL;
      if (v14 < 0xF || (unint64_t)(v13 - v6) < 0x20)
      {
        v17 = (_WORD *)v13;
        v18 = (__int16 *)v6;
      }
      else
      {
        v15 = v14 + 1;
        v16 = (v14 + 1) & 0xFFFFFFFFFFFFFFF0;
        v17 = (_WORD *)(v13 + 2 * v16);
        v18 = (__int16 *)(v6 + 2 * v16);
        v19 = (__int128 *)(v6 + 16);
        v20 = (_OWORD *)(v13 + 16);
        v21 = v16;
        do
        {
          v22 = *(v19 - 1);
          v23 = *v19;
          *(v20 - 1) = v22;
          *v20 = v23;
          v19 += 2;
          v20 += 2;
          v21 -= 16;
        }
        while (v21);
        if (v15 == v16)
          goto LABEL_3;
      }
      do
      {
        v24 = *v18++;
        LOWORD(v22) = v24;
        *v17++ = v24;
      }
      while (v18 != (__int16 *)(v6 + 2 * v12));
LABEL_3:
      v9 = a1[5];
LABEL_4:
      v6 += 2 * a1[6];
      v5 += 2 * a1[7];
    }
  }
  *a2 = v6;
  a2[2] = v5;
  v25 = *a3;
  if (v6 || !v25)
  {
    if (!v25)
      return v22;
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
LABEL_33:
      abort();
    }
    v5 = a2[2];
  }
  v26 = (v25 - 1) & 0x7FFFFFFFFFFFFFFFLL;
  if (v26 < 0xF || (unint64_t)(v5 - v6) < 0x20)
  {
    v29 = (_WORD *)v5;
    v30 = (__int16 *)v6;
    do
    {
LABEL_31:
      v35 = *v30++;
      LOWORD(v22) = v35;
      *v29++ = v35;
    }
    while (v30 != (__int16 *)(v6 + 2 * v25));
    return v22;
  }
  v27 = v26 + 1;
  v28 = (v26 + 1) & 0xFFFFFFFFFFFFFFF0;
  v29 = (_WORD *)(v5 + 2 * v28);
  v30 = (__int16 *)(v6 + 2 * v28);
  v31 = (__int128 *)(v6 + 16);
  v32 = (_OWORD *)(v5 + 16);
  v33 = v28;
  do
  {
    v22 = *(v31 - 1);
    v34 = *v31;
    *(v32 - 1) = v22;
    *v32 = v34;
    v31 += 2;
    v32 += 2;
    v33 -= 16;
  }
  while (v33);
  if (v27 != v28)
    goto LABEL_31;
  return v22;
}

__int16 sub_22321A888@<H0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>)
{
  int v3;
  int v4;
  BOOL v5;
  int v7;
  _WORD *v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _WORD *v16;
  _WORD *v17;
  _WORD *v18;
  _WORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  __int16 result;

  v3 = *(_DWORD *)(a2 + 12);
  v4 = *(_DWORD *)(a2 + 16);
  if (*(_DWORD *)(a2 + 8))
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = v3 - 1;
    v8 = *(_WORD **)a2;
    v9 = *(_WORD **)a3;
    v10 = 2 * *(unsigned int *)(a2 + 24);
    v11 = 2 * *(unsigned int *)(a3 + 24);
    v12 = v4 - 1;
    if (v12)
    {
      v13 = *(unsigned int *)(a3 + 28);
      v14 = *(unsigned int *)(a2 + 28);
      if (v7)
      {
        v15 = 0;
        v16 = v9 + 2;
        v17 = v8 + 2;
        do
        {
          v18 = v17;
          v19 = v16;
          v20 = v7;
          do
          {
            *(v19 - 2) = *(v18 - 2);
            *(v19 - 1) = *(v18 - 1);
            *v19 = *v18;
            v19[1] = v18[1];
            v19 = (_WORD *)((char *)v19 + v11);
            v18 = (_WORD *)((char *)v18 + v10);
            --v20;
          }
          while (v20);
          *(v19 - 2) = *(v18 - 2);
          *(v19 - 1) = *(v18 - 1);
          *v19 = *v18;
          v19[1] = v18[1];
          v8 += v14;
          v9 += v13;
          ++v15;
          v16 += v13;
          v17 += v14;
        }
        while (v15 != v12);
      }
      else
      {
        v21 = 2 * v13;
        v22 = 2 * v14;
        do
        {
          *v9 = *v8;
          v9[1] = v8[1];
          v9[2] = v8[2];
          v9[3] = v8[3];
          v9 = (_WORD *)((char *)v9 + v21);
          v8 = (_WORD *)((char *)v8 + v22);
          --v12;
        }
        while (v12);
      }
    }
    for (; v7; --v7)
    {
      *v9 = *v8;
      v9[1] = v8[1];
      v9[2] = v8[2];
      v9[3] = v8[3];
      v8 = (_WORD *)((char *)v8 + v10);
      v9 = (_WORD *)((char *)v9 + v11);
    }
    *v9 = *v8;
    v9[1] = v8[1];
    v9[2] = v8[2];
    result = v8[3];
    v9[3] = result;
  }
  return result;
}

uint64_t sub_22321A9F0(uint64_t a1, uint64_t a2, _BOOL8 a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6)
    goto LABEL_18;
  v7 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v7)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (v10)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v11 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v11)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    v6 = *(_QWORD *)(a1 + 8);
    v11 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v11)
      goto LABEL_14;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldxr(v12);
  while (__stxr(v13 + 1, v12));
  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 - 1, v12));
  if (v14)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
    goto LABEL_18;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (*(_BYTE *)(a1 + 73))
  {
LABEL_15:
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v6 + 96))(&v23, v6, 0);
    v16 = *(_QWORD *)(a2 + 8);
    v15 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v15)
      goto LABEL_23;
    goto LABEL_19;
  }
LABEL_18:
  v23 = 0;
  v16 = *(_QWORD *)(a2 + 8);
  v15 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v15)
    goto LABEL_23;
LABEL_19:
  v17 = (unint64_t *)&v15->__shared_owners_;
  do
    v18 = __ldxr(v17);
  while (__stxr(v18 + 1, v17));
  do
    v19 = __ldaxr(v17);
  while (__stlxr(v19 - 1, v17));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (!v16)
      goto LABEL_28;
    goto LABEL_24;
  }
LABEL_23:
  if (!v16)
    goto LABEL_28;
LABEL_24:
  if (*(_BYTE *)(a2 + 129))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 96))(&v22, *(_QWORD *)(a2 + 8), 1);
    if (!*(_DWORD *)(a1 + 32))
      goto LABEL_32;
    goto LABEL_29;
  }
LABEL_28:
  v22 = 0;
  if (!*(_DWORD *)(a1 + 32))
    goto LABEL_32;
LABEL_29:
  if (*(_DWORD *)(a1 + 36) && *(_DWORD *)(a1 + 40))
    sub_22321AC44(a3, a1, a2);
LABEL_32:
  v20 = v22;
  v22 = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  result = v23;
  v23 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_22321ABE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_22321AC44(_BOOL8 result, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  BOOL v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unsigned int i;
  uint64_t v21;
  int v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  _OWORD v28[2];

  v4 = *(_DWORD *)(a2 + 32);
  v3 = *(_DWORD *)(a2 + 36);
  v5 = *(_DWORD *)(a2 + 40);
  if (v4)
    v6 = v3 == 0;
  else
    v6 = 1;
  if (!v6 && v5 != 0)
  {
    v10 = result;
    v22 = v4 - 1;
    v11 = *(unsigned int *)(a2 + 48);
    v12 = *(unsigned int *)(a3 + 104);
    v23 = *(unsigned int *)(a2 + 44) | ((unint64_t)*(unsigned int *)(a3 + 100) << 32);
    v21 = 0;
    v24 = v3 - 1;
    v25 = v11 | (v12 << 32);
    v26 = v5 - 1;
    v27 = *(unsigned int *)(a2 + 52) | ((unint64_t)*(unsigned int *)(a3 + 108) << 32);
    v13 = *(unint64_t **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v13)
    {
      v14 = *(_QWORD *)(a2 + 8);
      v15 = *(std::__shared_weak_count **)(a2 + 16);
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v14 + 88))(v14, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v13 = *(unint64_t **)(a2 + 24);
    }
    v19 = *(unint64_t **)(a3 + 32);
    if (*(_BYTE *)(a3 + 128) && v19)
    {
      (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(a3 + 8) + 88))(*(_QWORD *)(a3 + 8), 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
      v19 = *(unint64_t **)(a3 + 32);
    }
    memset(v28, 0, sizeof(v28));
    if (v26)
    {
      for (i = 0; i < v26; ++i)
      {
        sub_22321ADE4((_BOOL8)&v21, (unint64_t **)v28, v10, v13, v19);
        v13 = (unint64_t *)((char *)v13 + 2 * v27);
        v19 = (unint64_t *)((char *)v19 + HIDWORD(v27));
      }
    }
    return sub_22321ADE4((_BOOL8)&v21, (unint64_t **)v28, v10, v13, v19);
  }
  return result;
}

BOOL sub_22321ADE4(_BOOL8 result, unint64_t **a2, uint64_t a3, unint64_t *a4, unint64_t *a5)
{
  unint64_t *v5;
  unint64_t *v6;
  _DWORD *v8;
  int v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  BOOL v15;
  char *v16;
  char v17;
  char v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char v25;
  char v26;
  char v27;

  v5 = a5;
  v6 = a4;
  *a2 = a4;
  a2[2] = a5;
  if (*(_DWORD *)(result + 20))
  {
    v8 = (_DWORD *)result;
    v9 = 0;
    do
    {
      *a2 = v6;
      a2[2] = v5;
      v10 = v5;
      if (!v6)
      {
        result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
        if (result)
          goto LABEL_24;
        v10 = a2[2];
      }
      v11 = *v6;
      if (*v6 <= BYTE6(*v6))
        v11 = HIWORD(*v6);
      v12 = v11 >> 8;
      v13 = BYTE1(v11);
      v14 = (char *)&unk_2245C4318 + 2 * v12 + v13;
      v15 = v13 >= 0x1A;
      v16 = (char *)&unk_2245C4315;
      if (!v15)
        v16 = v14;
      v17 = *v16;
      v18 = v16[1];
      v19 = v16[2];
      if (!v10)
      {
        result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
        if (result)
          goto LABEL_24;
      }
      *(_BYTE *)v10 = v17;
      *((_BYTE *)v10 + 1) = v18;
      *((_BYTE *)v10 + 2) = v19;
      v6 = (unint64_t *)((char *)v6 + 2 * v8[6]);
      v5 = (unint64_t *)((char *)v5 + v8[7]);
    }
    while (++v9 < v8[5]);
  }
  *a2 = v6;
  a2[2] = v5;
  if (!v6)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
    if (result)
      goto LABEL_24;
    v5 = a2[2];
  }
  v20 = *v6;
  if (*v6 <= BYTE6(*v6))
    v20 = HIWORD(*v6);
  v21 = v20 >> 8;
  v22 = BYTE1(v20);
  v23 = (char *)&unk_2245C4318 + 2 * v21 + v22;
  v15 = v22 >= 0x1A;
  v24 = (char *)&unk_2245C4315;
  if (!v15)
    v24 = v23;
  v25 = *v24;
  v26 = v24[1];
  v27 = v24[2];
  if (!v5)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
    if (result)
LABEL_24:
      abort();
  }
  *(_BYTE *)v5 = v25;
  *((_BYTE *)v5 + 1) = v26;
  *((_BYTE *)v5 + 2) = v27;
  return result;
}

uint64_t sub_22321B00C@<X0>(_DWORD *a1@<X0>, _DWORD *a2@<X1>, _WORD *a3@<X8>)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  __int16 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  sub_22321B174(a1, a2, &v14);
  v15 = v14;
  if (v14)
  {
    v4 = (std::__shared_weak_count *)operator new();
    v5 = v14;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC21890;
    v4->__shared_owners_ = 0;
    v4->__shared_weak_owners_ = 0;
    v4[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  }
  else
  {
    v4 = 0;
  }
  v16 = v4;
  v14 = 0;
  sub_22449BE50((uint64_t)a3, &v15, 0);
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a3 + 104))(*(_QWORD *)a3);
  v7 = v6;
  if ((v6 & 0xFFFFFF) <= 0x10000)
    v7 = 0;
  v8 = v6 & 0xFF00;
  if ((v6 & 0xFF0000) == 0)
    v8 = 0;
  a3[36] = v8 & 0xFF00 | v7;
  v9 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    v13 = sub_224485C9C(result);
    return MEMORY[0x227684CE8](v13, 0x1091C406A8758A4);
  }
  return result;
}

void sub_22321B120(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2231C2088((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_22321B134(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  sub_223167354(v2);
  sub_223167354((uint64_t)va1);
  sub_2231C2088((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_22321B158(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va1);
  sub_2231C2088((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_22321B174@<X0>(_DWORD *a1@<X0>, _DWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  _BYTE v6[8];
  _OWORD v7[2];
  _QWORD v8[6];

  v8[5] = &off_24EC217B0;
  sub_224498E7C(a1, a2, (uint64_t)v6);
  v4 = operator new();
  *(_QWORD *)v4 = &off_24EC217F8;
  *(_OWORD *)(v4 + 8) = v7[0];
  *(_OWORD *)(v4 + 20) = *(_OWORD *)((char *)v7 + 12);
  sub_2244E32B8((__n128 *)(v4 + 40), (__n128 *)v8);
  *(_OWORD *)(v4 + 64) = *(_OWORD *)&v8[3];
  *a3 = v4;
  return sub_224485C9C((uint64_t)v6);
}

void sub_22321B21C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  v4 = nullsub_30(v2);
  MEMORY[0x227684CE8](v4, 0x1091C406A8758A4);
  sub_224485C9C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22321B24C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_224485C9C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_22321B260(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, __int128 *a5)
{
  uint64_t *v10;
  void *__p[2];
  uint64_t v13;
  char v14;
  _QWORD v15[3];

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v10 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    *(_OWORD *)__p = *(_OWORD *)a4;
    v13 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    v14 = 1;
    sub_22321B368(a3, (__int128 *)__p, a5, v15);
    sub_2231AA5A4(a1, v10, (uint64_t)v15);
    sub_2241231D8((uint64_t)v15);
    if (v14)
    {
      if (SHIBYTE(v13) < 0)
        operator delete(__p[0]);
    }
  }
  return a1;
}

void sub_22321B334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17)
{
  sub_2241231D8((uint64_t)&a17);
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_22321B368@<X0>(_QWORD *a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t (**v10)();
  _QWORD v11[2];
  __int128 v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  __int128 v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v10 = &off_24EC77E40;
  v11[0] = sub_224504D68();
  v11[1] = v8;
  LOBYTE(v12) = 0;
  v14 = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v12 = *a2;
    v13 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v14 = 1;
  }
  v15 = 0;
  v16 = 0;
  v17 = *a3;
  v18 = 1;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  sub_22321B4A0(a1, (uint64_t)v11, a4);
  sub_2231AD66C((uint64_t)v11);
  return nullsub_661(&v10);
}

void sub_22321B470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_2231AD66C((uint64_t)&a11);
  nullsub_661(&a9);
  _Unwind_Resume(a1);
}

void sub_22321B48C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_661(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_22321B4A0@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  v6 = (_QWORD *)operator new();
  sub_22321B574(v6, a1, a2);
  v8 = v6;
  sub_224123150(a3, (uint64_t *)&v8);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_22321B524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, uint64_t a10)
{
  uint64_t v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  sub_2231C35FC(&a9);
  _Unwind_Resume(a1);
}

void sub_22321B550(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10F3C4035895BD5);
  _Unwind_Resume(a1);
}

_QWORD *sub_22321B574(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t (**v9)();
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;

  v9 = &off_24EC219D8;
  sub_22321B65C(a2, (uint64_t)&v10);
  sub_2231C3728(a1, (uint64_t)&v9, a3);
  v9 = &off_24EC219D8;
  nullsub_30(&v12);
  v5 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  nullsub_30(&v9);
  *a1 = &off_24EC6A528;
  return a1;
}

void sub_22321B634(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2231C37EC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_22321B648(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nullsub_30(va);
  _Unwind_Resume(a1);
}

void sub_22321B65C(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _BYTE v15[12];
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v3 = a1[1];
  v4 = (std::__shared_weak_count *)a1[2];
  v18 = v3;
  v19 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v16 = v3;
    v17 = v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  else
  {
    v16 = v3;
    v17 = 0;
  }
  v8 = a1[4];
  sub_2244E0B74((uint64_t)v15, 2, (uint64_t)(a1 + 8), 2, (uint64_t)(a1 + 9), 4);
  sub_2231C7084(a2, &v16, (uint64_t)v15, v8, 4);
  nullsub_30(v15);
  v9 = v17;
  if (v17)
  {
    v10 = (unint64_t *)&v17->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v19;
  if (v19)
  {
    v13 = (unint64_t *)&v19->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_22321B77C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  nullsub_30(&a10);
  sub_223167354((uint64_t)&a12);
  sub_223167354((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_22321B7A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL sub_22321B7BC(uint64_t a1, const void *a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  CFMutableDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  CFMutableArrayRef v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  _BOOL8 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  CFMutableArrayRef v21;
  std::__shared_weak_count *v22;

  v7 = *(CFMutableDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if (v7)
        goto LABEL_7;
      return 0;
    }
  }
  if (!v7)
    return 0;
LABEL_7:
  sub_22321B920(a3, &v21);
  v12 = v21;
  v11 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v16 = v12 != 0;
      if (!v12)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  v16 = v12 != 0;
  if (v12)
LABEL_13:
    sub_22452C43C((CFMutableDictionaryRef *)a1, a2, v21);
LABEL_14:
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return v16;
}

void sub_22321B90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22321B920(uint64_t a1@<X0>, CFMutableArrayRef *a2@<X8>)
{
  std::__shared_weak_count *v4;
  CFMutableArrayRef v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *value;
  std::__shared_weak_count *v22;
  CFMutableArrayRef theArray[2];

  sub_2245281EC((std::__shared_weak_count_vtbl **)theArray);
  v5 = theArray[0];
  v4 = (std::__shared_weak_count *)theArray[1];
  if (theArray[1])
  {
    v6 = (unint64_t *)((char *)theArray[1] + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    do
      v8 = __ldaxr(v6);
    while (__stlxr(v8 - 1, v6));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if (!v5)
        goto LABEL_26;
      goto LABEL_7;
    }
  }
  if (v5)
  {
LABEL_7:
    v9 = 0;
    while (1)
    {
      sub_224527780(&value, a1 + 4 * v9);
      v11 = value;
      v10 = v22;
      if (!v22)
        goto LABEL_13;
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
        if (v11)
        {
LABEL_14:
          j__CFArrayAppendValue(theArray[0], value);
          v15 = v22;
          if (v22)
            goto LABEL_18;
          goto LABEL_22;
        }
      }
      else
      {
LABEL_13:
        if (v11)
          goto LABEL_14;
      }
      *a2 = 0;
      a2[1] = 0;
      v15 = v22;
      if (v22)
      {
LABEL_18:
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
LABEL_22:
      if (!v11)
        goto LABEL_27;
      if (++v9 == 9)
      {
        *(_OWORD *)a2 = *(_OWORD *)theArray;
        a2 = theArray;
        break;
      }
    }
  }
LABEL_26:
  *a2 = 0;
  a2[1] = 0;
LABEL_27:
  v18 = (std::__shared_weak_count *)theArray[1];
  if (theArray[1])
  {
    v19 = (unint64_t *)((char *)theArray[1] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_22321BAD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  if (a12)
  {
    v15 = (unint64_t *)&a12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_22321BB5C(uint64_t a1, const void *a2, char *a3)
{
  std::__shared_weak_count *v6;
  CFMutableDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  const void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  _BOOL8 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  const void *v21;
  std::__shared_weak_count *v22;
  char v23;

  v7 = *(CFMutableDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if (v7)
        goto LABEL_7;
      return 0;
    }
  }
  if (!v7)
    return 0;
LABEL_7:
  v23 = *a3;
  sub_224527368(&v21, &v23);
  v12 = v21;
  v11 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v16 = v12 != 0;
      if (!v12)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  v16 = v12 != 0;
  if (v12)
LABEL_13:
    sub_22452C43C((CFMutableDictionaryRef *)a1, a2, v21);
LABEL_14:
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return v16;
}

void sub_22321BCB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_22321BCC8(uint64_t a1, const void *a2, char *a3)
{
  std::__shared_weak_count *v6;
  CFMutableDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  const void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  _BOOL8 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  const void *v21;
  std::__shared_weak_count *v22;
  char v23;

  v7 = *(CFMutableDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if (v7)
        goto LABEL_7;
      return 0;
    }
  }
  if (!v7)
    return 0;
LABEL_7:
  v23 = *a3;
  sub_224527368(&v21, &v23);
  v12 = v21;
  v11 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v16 = v12 != 0;
      if (!v12)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  v16 = v12 != 0;
  if (v12)
LABEL_13:
    sub_22452C43C((CFMutableDictionaryRef *)a1, a2, v21);
LABEL_14:
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return v16;
}

void sub_22321BE20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_22321BE34(uint64_t a1, const void *a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  CFMutableDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  CFMutableArrayRef v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  _BOOL8 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  CFMutableArrayRef v21;
  std::__shared_weak_count *v22;

  v7 = *(CFMutableDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if (v7)
        goto LABEL_7;
      return 0;
    }
  }
  if (!v7)
    return 0;
LABEL_7:
  sub_22321BF98(a3, &v21);
  v12 = v21;
  v11 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v16 = v12 != 0;
      if (!v12)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  v16 = v12 != 0;
  if (v12)
LABEL_13:
    sub_22452C43C((CFMutableDictionaryRef *)a1, a2, v21);
LABEL_14:
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return v16;
}

void sub_22321BF84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22321BF98(uint64_t a1@<X0>, CFMutableArrayRef *a2@<X8>)
{
  std::__shared_weak_count *v4;
  CFMutableArrayRef v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  void *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  void *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  void *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  void *value;
  std::__shared_weak_count *v37;
  CFMutableArrayRef theArray[2];

  sub_2245281EC((std::__shared_weak_count_vtbl **)theArray);
  v5 = theArray[0];
  v4 = (std::__shared_weak_count *)theArray[1];
  if (theArray[1])
  {
    v6 = (unint64_t *)((char *)theArray[1] + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    do
      v8 = __ldaxr(v6);
    while (__stlxr(v8 - 1, v6));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if (v5)
        goto LABEL_7;
LABEL_57:
      *a2 = 0;
      a2[1] = 0;
      goto LABEL_58;
    }
  }
  if (!v5)
    goto LABEL_57;
LABEL_7:
  sub_224527780(&value, a1);
  v10 = value;
  v9 = v37;
  if (!v37)
    goto LABEL_12;
  p_shared_owners = (unint64_t *)&v37->__shared_owners_;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (v13)
  {
LABEL_12:
    if (v10)
      goto LABEL_13;
LABEL_18:
    *a2 = 0;
    a2[1] = 0;
    v14 = v37;
    if (!v37)
      goto LABEL_22;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!v10)
    goto LABEL_18;
LABEL_13:
  j__CFArrayAppendValue(theArray[0], value);
  v14 = v37;
  if (!v37)
    goto LABEL_22;
LABEL_19:
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (v16)
  {
LABEL_22:
    if (!v10)
      goto LABEL_58;
    goto LABEL_23;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if (!v10)
    goto LABEL_58;
LABEL_23:
  sub_224527780(&value, a1 + 4);
  v18 = value;
  v17 = v37;
  if (!v37)
    goto LABEL_28;
  v19 = (unint64_t *)&v37->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    if (v18)
    {
LABEL_29:
      j__CFArrayAppendValue(theArray[0], value);
      v22 = v37;
      if (!v37)
        goto LABEL_38;
      goto LABEL_35;
    }
  }
  else
  {
LABEL_28:
    if (v18)
      goto LABEL_29;
  }
  *a2 = 0;
  a2[1] = 0;
  v22 = v37;
  if (!v37)
    goto LABEL_38;
LABEL_35:
  v23 = (unint64_t *)&v22->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (v24)
  {
LABEL_38:
    if (!v18)
      goto LABEL_58;
LABEL_39:
    sub_224527780(&value, a1 + 8);
    v26 = value;
    v25 = v37;
    if (!v37)
      goto LABEL_44;
    v27 = (unint64_t *)&v37->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
    do
      v29 = __ldaxr(v27);
    while (__stlxr(v29 - 1, v27));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
      if (v26)
      {
LABEL_45:
        j__CFArrayAppendValue(theArray[0], value);
        v30 = v37;
        if (!v37)
          goto LABEL_55;
        goto LABEL_51;
      }
    }
    else
    {
LABEL_44:
      if (v26)
        goto LABEL_45;
    }
    *a2 = 0;
    a2[1] = 0;
    v30 = v37;
    if (!v37)
    {
LABEL_55:
      if (!v26)
        goto LABEL_58;
      *(_OWORD *)a2 = *(_OWORD *)theArray;
      a2 = theArray;
      goto LABEL_57;
    }
LABEL_51:
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
    goto LABEL_55;
  }
  ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
  std::__shared_weak_count::__release_weak(v22);
  if (v18)
    goto LABEL_39;
LABEL_58:
  v33 = (std::__shared_weak_count *)theArray[1];
  if (theArray[1])
  {
    v34 = (unint64_t *)((char *)theArray[1] + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
}

void sub_22321C2AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  if (a12)
  {
    v15 = (unint64_t *)&a12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22321C330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  uint64_t *v10;
  void *__p[2];
  uint64_t v13;
  char v14;
  _QWORD v15[3];

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v10 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    *(_OWORD *)__p = *(_OWORD *)a4;
    v13 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    v14 = 1;
    sub_22321C438(a3, (__int128 *)__p, a5, v15);
    sub_2231AA5A4(a1, v10, (uint64_t)v15);
    sub_2241231D8((uint64_t)v15);
    if (v14)
    {
      if (SHIBYTE(v13) < 0)
        operator delete(__p[0]);
    }
  }
  return a1;
}

void sub_22321C404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17)
{
  sub_2241231D8((uint64_t)&a17);
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_22321C438@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t (**v10)();
  _QWORD v11[2];
  __int128 v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  __int128 v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v10 = &off_24EC77E40;
  v11[0] = sub_224504D68();
  v11[1] = v8;
  LOBYTE(v12) = 0;
  v14 = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v12 = *a2;
    v13 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v14 = 1;
  }
  v15 = 0;
  v16 = 0;
  v17 = *a3;
  v18 = 1;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  sub_22321C570(a1, (uint64_t)v11, a4);
  sub_2231AD66C((uint64_t)v11);
  return nullsub_661(&v10);
}

void sub_22321C540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_2231AD66C((uint64_t)&a11);
  nullsub_661(&a9);
  _Unwind_Resume(a1);
}

void sub_22321C55C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_661(&a9);
  _Unwind_Resume(a1);
}

void sub_22321C570(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;

  sub_22319ED0C(&v14, a1);
  v5 = operator new();
  v16 = v14;
  v14 = 0uLL;
  sub_224017004(v5, &v16, a2);
  v15 = v5;
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = v15;
  v15 = 0;
  *(_QWORD *)&v16 = v9;
  sub_224123150(a3, (uint64_t *)&v16);
  v10 = v16;
  *(_QWORD *)&v16 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v15 = 0;
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_22321C694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12, uint64_t a13)
{
  uint64_t v14;

  v14 = a13;
  a13 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  sub_2231ADE28(&a12);
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22321C6C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;

  sub_223167354((uint64_t)&a13);
  MEMORY[0x227684CE8](v13, 0x10B3C40E92279A6);
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22321C6FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22321C710(void *__p)
{
  operator delete(__p);
}

void sub_22321C720()
{
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22321C728(uint64_t a1, uint64_t a2)
{
  return a2;
}

void sub_22321C74C()
{
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22321C758()
{
  uint64_t v0;

  return nullsub_30(v0);
}

uint64_t sub_22321C760()
{
  uint64_t v0;

  return nullsub_30(v0);
}

uint64_t sub_22321C768()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 16))(v0);
}

void sub_22321C78C()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 8) = 0;
}

uint64_t sub_22321C798(uint64_t a1)
{
  return a1 + 8;
}

void *sub_22321C7A4@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  void *result;
  int v5;
  void *v6;
  int v7;
  void *v8;
  void *v9;
  int v10;
  BOOL v11;
  float v12;
  float v13;
  float v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  int v20;
  int v21;
  _QWORD v22[150];

  result = (void *)sub_223223C50(a2);
  switch(a1)
  {
    case 3:
      if (*(_BYTE *)(a2 + 560))
        *(_BYTE *)(a2 + 560) = 0;
      sub_223FF9E20(3, (uint64_t)v22);
      v5 = *(unsigned __int8 *)(a2 + 880);
      result = memcpy((void *)(a2 + 568), v22, 0x138uLL);
      if (!v5)
        *(_BYTE *)(a2 + 880) = 1;
      return result;
    case 5:
      sub_223FFAFD8(5, (uint64_t)v22);
      v6 = (void *)(a2 + 280);
      if (*(_BYTE *)(a2 + 560))
      {
        result = memcpy(v6, v22, 0x111uLL);
        if (!*(_BYTE *)(a2 + 880))
          return result;
      }
      else
      {
        result = memcpy(v6, v22, 0x118uLL);
        *(_BYTE *)(a2 + 560) = 1;
        if (!*(_BYTE *)(a2 + 880))
          return result;
      }
      *(_BYTE *)(a2 + 880) = 0;
      return result;
    case 6:
      sub_22321C7A4(v22, 5);
      sub_22321CEE0(a2, (uint64_t)v22);
      sub_223223FC0((uint64_t)v22);
      sub_223FF9E20(3, (uint64_t)v22);
      v7 = *(unsigned __int8 *)(a2 + 880);
      result = memcpy((void *)(a2 + 568), v22, 0x138uLL);
      if (!v7)
        *(_BYTE *)(a2 + 880) = 1;
      *(_BYTE *)(a2 + 976) = 0;
      *(_DWORD *)(a2 + 88) = 1041918200;
      return result;
    case 7:
      sub_223FFAFD8(7, (uint64_t)v22);
      v8 = (void *)(a2 + 280);
      if (*(_BYTE *)(a2 + 560))
        return memcpy(v8, v22, 0x111uLL);
      result = memcpy(v8, v22, 0x118uLL);
      *(_BYTE *)(a2 + 560) = 1;
      return result;
    case 12:
      sub_223FFAFD8(12, (uint64_t)v22);
      v9 = (void *)(a2 + 280);
      if (*(_BYTE *)(a2 + 560))
      {
        memcpy(v9, v22, 0x111uLL);
      }
      else
      {
        memcpy(v9, v22, 0x118uLL);
        *(_BYTE *)(a2 + 560) = 1;
      }
      sub_223FF9E20(12, (uint64_t)v22);
      v19 = *(unsigned __int8 *)(a2 + 880);
      result = memcpy((void *)(a2 + 568), v22, 0x138uLL);
      if (!v19)
        *(_BYTE *)(a2 + 880) = 1;
      *(_DWORD *)(a2 + 88) = 1041918200;
      goto LABEL_54;
    case 13:
      sub_22321C7A4(v22, 12);
      sub_22321CEE0(a2, (uint64_t)v22);
      result = (void *)sub_223223FC0((uint64_t)v22);
      *(_DWORD *)(a2 + 88) = 1059481190;
      return result;
    case 15:
      sub_22321C7A4(v22, 12);
      sub_22321CEE0(a2, (uint64_t)v22);
      sub_223223FC0((uint64_t)v22);
      v10 = *(unsigned __int8 *)(a2 + 968);
      *(_OWORD *)(a2 + 888) = xmmword_2245C43C0;
      *(_BYTE *)(a2 + 904) = 1;
      *(_DWORD *)(a2 + 908) = 0;
      *(_BYTE *)(a2 + 912) = 2;
      *(_QWORD *)(a2 + 920) = 0;
      *(_BYTE *)(a2 + 928) = 0;
      *(_BYTE *)(a2 + 936) = 0;
      *(_BYTE *)(a2 + 944) = 0;
      *(_BYTE *)(a2 + 952) = 0;
      *(_BYTE *)(a2 + 960) = 1;
      *(_DWORD *)(a2 + 964) = 1062417203;
      if (!v10)
        *(_BYTE *)(a2 + 968) = 1;
      *(_BYTE *)(a2 + 9) = 1;
      v11 = *MEMORY[0x24BE05F58] > 0x7641AE7uLL;
      v12 = 0.76;
      if (*MEMORY[0x24BE05F58] > 0x7641AE7uLL)
        v12 = 0.8;
      v13 = 0.775;
      if (*MEMORY[0x24BE05F58] > 0x7641AE7uLL)
        v13 = 0.825;
      *(float *)(a2 + 88) = v12;
      if (v11)
        v14 = 0.001;
      else
        v14 = 0.0005;
      *(float *)(a2 + 964) = v13;
      *(float *)(a2 + 892) = v14;
      sub_223FFAFD8(15, (uint64_t)v22);
      v15 = (void *)(a2 + 280);
      if (*(_BYTE *)(a2 + 560))
      {
        memcpy(v15, v22, 0x111uLL);
      }
      else
      {
        memcpy(v15, v22, 0x118uLL);
        *(_BYTE *)(a2 + 560) = 1;
      }
      *(_BYTE *)(a2 + 28) = 1;
      sub_223FF9E20(15, (uint64_t)v22);
      v21 = *(unsigned __int8 *)(a2 + 880);
      memcpy((void *)(a2 + 568), v22, 0x138uLL);
      if (!v21)
        *(_BYTE *)(a2 + 880) = 1;
      *(_BYTE *)(a2 + 8) = 1;
      *(_BYTE *)(a2 + 16) = 1;
      *(_BYTE *)(a2 + 44) = 1;
      *(_BYTE *)(a2 + 92) = sub_224002A88((unsigned __int8 *)(a2 + 92), 4u);
      *(_BYTE *)(a2 + 92) = sub_224002A88((unsigned __int8 *)(a2 + 92), 0x10u);
      *(_BYTE *)(a2 + 92) = sub_224002A88((unsigned __int8 *)(a2 + 92), 1u);
      result = (void *)sub_224002A88((unsigned __int8 *)(a2 + 92), 0x20u);
      *(_BYTE *)(a2 + 92) = (_BYTE)result;
      return result;
    case 16:
      sub_223FFAFD8(16, (uint64_t)v22);
      v17 = (void *)(a2 + 280);
      if (*(_BYTE *)(a2 + 560))
      {
        result = memcpy(v17, v22, 0x111uLL);
        if (!*(_BYTE *)(a2 + 880))
          return result;
      }
      else
      {
        result = memcpy(v17, v22, 0x118uLL);
        *(_BYTE *)(a2 + 560) = 1;
        if (!*(_BYTE *)(a2 + 880))
          return result;
      }
      *(_BYTE *)(a2 + 880) = 0;
      return result;
    case 17:
      sub_22321C7A4(v22, 15);
      sub_22321CEE0(a2, (uint64_t)v22);
      result = (void *)sub_223223FC0((uint64_t)v22);
      if (*(_BYTE *)(a2 + 968))
        *(_BYTE *)(a2 + 968) = 0;
      return result;
    case 19:
      sub_223FFAFD8(19, (uint64_t)v22);
      v18 = (void *)(a2 + 280);
      if (*(_BYTE *)(a2 + 560))
      {
        memcpy(v18, v22, 0x111uLL);
      }
      else
      {
        memcpy(v18, v22, 0x118uLL);
        *(_BYTE *)(a2 + 560) = 1;
      }
      sub_223FF9E20(19, (uint64_t)v22);
      goto LABEL_51;
    case 20:
      sub_223FFAFD8(20, (uint64_t)v22);
      v16 = (void *)(a2 + 280);
      if (*(_BYTE *)(a2 + 560))
      {
        memcpy(v16, v22, 0x111uLL);
      }
      else
      {
        memcpy(v16, v22, 0x118uLL);
        *(_BYTE *)(a2 + 560) = 1;
      }
      sub_223FF9E20(20, (uint64_t)v22);
LABEL_51:
      v20 = *(unsigned __int8 *)(a2 + 880);
      result = memcpy((void *)(a2 + 568), v22, 0x138uLL);
      if (!v20)
        *(_BYTE *)(a2 + 880) = 1;
      *(_WORD *)(a2 + 8) = 0;
LABEL_54:
      *(_BYTE *)(a2 + 976) = 1;
      return result;
    default:
      return result;
  }
}

void sub_22321CD78(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223223FC0(v1);
  _Unwind_Resume(a1);
}

void sub_22321CD8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223223FC0(v1);
  _Unwind_Resume(a1);
}

void sub_22321CDA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223223FC0(v1);
  _Unwind_Resume(a1);
}

void sub_22321CDB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223223FC0(v1);
  _Unwind_Resume(a1);
}

void sub_22321CDC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223223FC0(v1);
  _Unwind_Resume(a1);
}

void sub_22321CDDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223223FC0(v1);
  _Unwind_Resume(a1);
}

void sub_22321CDF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223223FC0(v1);
  _Unwind_Resume(a1);
}

void sub_22321CE04(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223223FC0(v1);
  _Unwind_Resume(a1);
}

void sub_22321CE18(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223223FC0(v1);
  _Unwind_Resume(a1);
}

void sub_22321CE2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223223FC0(v1);
  _Unwind_Resume(a1);
}

void sub_22321CE40(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223223FC0(v1);
  _Unwind_Resume(a1);
}

void sub_22321CE54(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223223FC0(v1);
  _Unwind_Resume(a1);
}

void sub_22321CE68(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223223FC0(v1);
  _Unwind_Resume(a1);
}

void sub_22321CE7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223223FC0(v1);
  _Unwind_Resume(a1);
}

void sub_22321CE90(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223223FC0(v1);
  _Unwind_Resume(a1);
}

void sub_22321CEA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223223FC0(v1);
  _Unwind_Resume(a1);
}

void sub_22321CEB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223223FC0(v1);
  _Unwind_Resume(a1);
}

void sub_22321CECC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223223FC0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_22321CEE0(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  __int128 *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  __int128 v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  __int128 *v34;
  __int128 v35;
  void **v36;
  __int128 v37;
  void **v38;
  __int128 v39;
  void **v40;
  __int128 v41;
  void **v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;

  v4 = (_OWORD *)(a1 + 984);
  v5 = (__int128 *)(a2 + 984);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_OWORD *)(a2 + 8);
  v7 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v7;
  *(_OWORD *)(a1 + 8) = v6;
  v8 = a1 + 48;
  v9 = (__int128 *)(a2 + 48);
  if (*(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)(a2 + 72))
  {
    if (*(_BYTE *)(a1 + 72))
    {
      if (*(char *)(a1 + 71) < 0)
        operator delete(*(void **)v8);
      v10 = *v9;
      *(_QWORD *)(v8 + 16) = *((_QWORD *)v9 + 2);
      *(_OWORD *)v8 = v10;
      *(_BYTE *)(a2 + 71) = 0;
      *(_BYTE *)(a2 + 48) = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 72))
  {
    if (*(char *)(a1 + 71) < 0)
      operator delete(*(void **)v8);
    *(_BYTE *)(a1 + 72) = 0;
  }
  else
  {
    v11 = *v9;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)v8 = v11;
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)v9 = 0;
    *(_BYTE *)(a1 + 72) = 1;
  }
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  v12 = *(_OWORD *)(a2 + 88);
  v13 = *(_OWORD *)(a2 + 104);
  v14 = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 134) = *(_QWORD *)(a2 + 134);
  *(_OWORD *)(a1 + 120) = v14;
  *(_OWORD *)(a1 + 104) = v13;
  *(_OWORD *)(a1 + 88) = v12;
  v15 = *(_OWORD *)(a2 + 144);
  v16 = *(_OWORD *)(a2 + 160);
  v17 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v17;
  *(_OWORD *)(a1 + 144) = v15;
  *(_OWORD *)(a1 + 160) = v16;
  v18 = *(_OWORD *)(a2 + 208);
  v19 = *(_OWORD *)(a2 + 224);
  v20 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v20;
  *(_OWORD *)(a1 + 208) = v18;
  *(_OWORD *)(a1 + 224) = v19;
  *(_BYTE *)(a1 + 272) = *(_BYTE *)(a2 + 272);
  memcpy((void *)(a1 + 280), (const void *)(a2 + 280), 0x2B9uLL);
  v21 = *v5;
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  v22 = *(std::__shared_weak_count **)(a1 + 992);
  *v4 = v21;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v5[1];
  *((_QWORD *)v5 + 2) = 0;
  *((_QWORD *)v5 + 3) = 0;
  v26 = *(std::__shared_weak_count **)(a1 + 1008);
  v4[1] = v25;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v5[2];
  *((_QWORD *)v5 + 4) = 0;
  *((_QWORD *)v5 + 5) = 0;
  v30 = *(std::__shared_weak_count **)(a1 + 1024);
  v4[2] = v29;
  if (!v30)
    goto LABEL_25;
  v31 = (unint64_t *)&v30->__shared_owners_;
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (v32)
  {
LABEL_25:
    v33 = a1 + 1032;
    v34 = (__int128 *)(a2 + 1032);
    if ((*(char *)(a1 + 1055) & 0x80000000) == 0)
      goto LABEL_27;
    goto LABEL_26;
  }
  ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
  std::__shared_weak_count::__release_weak(v30);
  v33 = a1 + 1032;
  v34 = (__int128 *)(a2 + 1032);
  if (*(char *)(a1 + 1055) < 0)
LABEL_26:
    operator delete(*(void **)v33);
LABEL_27:
  v35 = *v34;
  *(_QWORD *)(v33 + 16) = *((_QWORD *)v34 + 2);
  *(_OWORD *)v33 = v35;
  *(_BYTE *)(a2 + 1055) = 0;
  *(_BYTE *)(a2 + 1032) = 0;
  v36 = (void **)(a1 + 1056);
  if (*(char *)(a1 + 1079) < 0)
    operator delete(*v36);
  v37 = *(_OWORD *)(a2 + 1056);
  *(_QWORD *)(a1 + 1072) = *(_QWORD *)(a2 + 1072);
  *(_OWORD *)v36 = v37;
  *(_BYTE *)(a2 + 1079) = 0;
  *(_BYTE *)(a2 + 1056) = 0;
  v38 = (void **)(a1 + 1080);
  if (*(char *)(a1 + 1103) < 0)
    operator delete(*v38);
  v39 = *(_OWORD *)(a2 + 1080);
  *(_QWORD *)(a1 + 1096) = *(_QWORD *)(a2 + 1096);
  *(_OWORD *)v38 = v39;
  *(_BYTE *)(a2 + 1103) = 0;
  *(_BYTE *)(a2 + 1080) = 0;
  v40 = (void **)(a1 + 1104);
  if (*(char *)(a1 + 1127) < 0)
    operator delete(*v40);
  v41 = *(_OWORD *)(a2 + 1104);
  *(_QWORD *)(a1 + 1120) = *(_QWORD *)(a2 + 1120);
  *(_OWORD *)v40 = v41;
  *(_BYTE *)(a2 + 1127) = 0;
  *(_BYTE *)(a2 + 1104) = 0;
  v42 = (void **)(a1 + 1128);
  if (*(char *)(a1 + 1151) < 0)
    operator delete(*v42);
  v43 = *(_OWORD *)(a2 + 1128);
  *(_QWORD *)(a1 + 1144) = *(_QWORD *)(a2 + 1144);
  *(_OWORD *)v42 = v43;
  *(_BYTE *)(a2 + 1151) = 0;
  *(_BYTE *)(a2 + 1128) = 0;
  v44 = *(_QWORD *)(a2 + 1152);
  *(_DWORD *)(a1 + 1160) = *(_DWORD *)(a2 + 1160);
  *(_QWORD *)(a1 + 1152) = v44;
  v45 = *(_OWORD *)(a2 + 1168);
  *(_OWORD *)(a1 + 1181) = *(_OWORD *)(a2 + 1181);
  *(_OWORD *)(a1 + 1168) = v45;
  return a1;
}

uint64_t sub_22321D218(uint64_t a1, unsigned int a2)
{
  *(_BYTE *)(a1 + 92) = sub_224002A88((unsigned __int8 *)(a1 + 92), a2);
  return 1;
}

BOOL sub_22321D244(uint64_t a1, char a2)
{
  return (*(_BYTE *)(a1 + 92) & a2) != 0;
}

uint64_t sub_22321D254(uint64_t a1, int a2)
{
  *(_BYTE *)(a1 + 92) = sub_224002A94((unsigned __int8 *)(a1 + 92), a2);
  return 1;
}

void sub_22321D280(uint64_t a1, uint64_t a2)
{
  char *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  unsigned __int8 *v8;
  char v9;
  char *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned __int8 *v14;
  char v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  char *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  char *v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  char *v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  char *v271;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  unint64_t v274;
  std::__shared_weak_count *v275;
  unint64_t *v276;
  unint64_t v277;
  std::__shared_weak_count *v278;
  unint64_t *v279;
  unint64_t v280;
  std::__shared_weak_count *v281;
  unint64_t *v282;
  unint64_t v283;
  char *v284;
  std::__shared_weak_count *v285;
  unint64_t *v286;
  unint64_t v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  std::__shared_weak_count *v291;
  unint64_t *v292;
  unint64_t v293;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  std::__shared_weak_count *v297;
  unint64_t *v298;
  unint64_t v299;
  std::__shared_weak_count *v300;
  unint64_t *v301;
  unint64_t v302;
  std::__shared_weak_count *v303;
  unint64_t *v304;
  unint64_t v305;
  std::__shared_weak_count *v306;
  unint64_t *v307;
  unint64_t v308;
  std::__shared_weak_count *v309;
  unint64_t *v310;
  unint64_t v311;
  std::__shared_weak_count *v312;
  unint64_t *v313;
  unint64_t v314;
  char *v315;
  std::__shared_weak_count *v316;
  unint64_t *v317;
  unint64_t v318;
  std::__shared_weak_count *v319;
  unint64_t *v320;
  unint64_t v321;
  std::__shared_weak_count *v322;
  unint64_t *v323;
  unint64_t v324;
  std::__shared_weak_count *v325;
  unint64_t *v326;
  unint64_t v327;
  std::__shared_weak_count *v328;
  unint64_t *v329;
  unint64_t v330;
  uint64_t v331;
  std::__shared_weak_count *v332;
  uint64_t v333;
  std::__shared_weak_count *v334;
  uint64_t v335;
  std::__shared_weak_count *v336;
  uint64_t v337;
  std::__shared_weak_count *v338;
  uint64_t v339;
  std::__shared_weak_count *v340;
  uint64_t v341;
  std::__shared_weak_count *v342;
  uint64_t v343;
  std::__shared_weak_count *v344;
  uint64_t v345;
  std::__shared_weak_count *v346;
  uint64_t v347;
  std::__shared_weak_count *v348;
  uint64_t v349;
  std::__shared_weak_count *v350;
  uint64_t v351;
  std::__shared_weak_count *v352;
  uint64_t v353;
  std::__shared_weak_count *v354;
  uint64_t v355;
  std::__shared_weak_count *v356;
  uint64_t v357;
  std::__shared_weak_count *v358;
  uint64_t v359;
  std::__shared_weak_count *v360;
  uint64_t v361;
  std::__shared_weak_count *v362;
  uint64_t v363;
  std::__shared_weak_count *v364;
  uint64_t v365;
  std::__shared_weak_count *v366;
  uint64_t v367;
  std::__shared_weak_count *v368;
  uint64_t v369;
  std::__shared_weak_count *v370;
  uint64_t v371;
  std::__shared_weak_count *v372;
  uint64_t v373;
  std::__shared_weak_count *v374;
  uint64_t v375;
  std::__shared_weak_count *v376;
  uint64_t v377;
  std::__shared_weak_count *v378;
  uint64_t v379;
  std::__shared_weak_count *v380;
  uint64_t v381;
  std::__shared_weak_count *v382;
  uint64_t v383;
  std::__shared_weak_count *v384;
  uint64_t v385;
  std::__shared_weak_count *v386;
  uint64_t v387;
  std::__shared_weak_count *v388;
  uint64_t v389;
  std::__shared_weak_count *v390;
  uint64_t v391;
  std::__shared_weak_count *v392;
  uint64_t v393;
  std::__shared_weak_count *v394;
  uint64_t v395;
  std::__shared_weak_count *v396;
  uint64_t v397;
  std::__shared_weak_count *v398;
  uint64_t v399;
  std::__shared_weak_count *v400;
  uint64_t v401;
  std::__shared_weak_count *v402;
  uint64_t v403;
  std::__shared_weak_count *v404;
  uint64_t v405;
  std::__shared_weak_count *v406;
  uint64_t v407;
  std::__shared_weak_count *v408;
  uint64_t v409;
  std::__shared_weak_count *v410;
  uint64_t v411;
  std::__shared_weak_count *v412;
  uint64_t v413;
  std::__shared_weak_count *v414;
  uint64_t v415;
  std::__shared_weak_count *v416;
  uint64_t v417;
  std::__shared_weak_count *v418;
  uint64_t v419;
  std::__shared_weak_count *v420;
  uint64_t v421;
  std::__shared_weak_count *v422;
  uint64_t v423;
  std::__shared_weak_count *v424;
  uint64_t v425;
  std::__shared_weak_count *v426;
  uint64_t v427;
  std::__shared_weak_count *v428;
  uint64_t v429;
  std::__shared_weak_count *v430;
  uint64_t v431;
  std::__shared_weak_count *v432;
  uint64_t v433;
  std::__shared_weak_count *v434;
  uint64_t v435;
  std::__shared_weak_count *v436;
  uint64_t v437;
  std::__shared_weak_count *v438;
  uint64_t v439;
  std::__shared_weak_count *v440;
  uint64_t v441;
  std::__shared_weak_count *v442;
  uint64_t v443;
  std::__shared_weak_count *v444;
  uint64_t v445;
  std::__shared_weak_count *v446;
  uint64_t v447;
  std::__shared_weak_count *v448;
  uint64_t v449;
  std::__shared_weak_count *v450;
  uint64_t v451;
  std::__shared_weak_count *v452;
  uint64_t v453;
  std::__shared_weak_count *v454;
  uint64_t v455;
  std::__shared_weak_count *v456;
  uint64_t v457;
  std::__shared_weak_count *v458;
  uint64_t v459;
  std::__shared_weak_count *v460;
  uint64_t v461;
  std::__shared_weak_count *v462;
  uint64_t v463;
  std::__shared_weak_count *v464;
  uint64_t v465;
  std::__shared_weak_count *v466;
  uint64_t v467;
  std::__shared_weak_count *v468;
  uint64_t v469;
  std::__shared_weak_count *v470;
  uint64_t v471;
  std::__shared_weak_count *v472;
  uint64_t v473;
  std::__shared_weak_count *v474;
  uint64_t v475;
  std::__shared_weak_count *v476;
  uint64_t v477;
  std::__shared_weak_count *v478;
  uint64_t v479;
  std::__shared_weak_count *v480;
  uint64_t v481;
  std::__shared_weak_count *v482;
  uint64_t v483;
  std::__shared_weak_count *v484;
  uint64_t v485;
  std::__shared_weak_count *v486;
  uint64_t v487;
  std::__shared_weak_count *v488;
  uint64_t v489;
  std::__shared_weak_count *v490;
  uint64_t v491;
  std::__shared_weak_count *v492;
  uint64_t v493;
  std::__shared_weak_count *v494;
  uint64_t v495;
  std::__shared_weak_count *v496;
  uint64_t v497;
  std::__shared_weak_count *v498;
  uint64_t v499;
  std::__shared_weak_count *v500;
  uint64_t v501;
  std::__shared_weak_count *v502;
  uint64_t v503;
  std::__shared_weak_count *v504;
  uint64_t v505;
  std::__shared_weak_count *v506;
  uint64_t v507;
  std::__shared_weak_count *v508;
  uint64_t v509;
  std::__shared_weak_count *v510;
  uint64_t v511;
  std::__shared_weak_count *v512;
  uint64_t v513;
  std::__shared_weak_count *v514;
  uint64_t v515;
  std::__shared_weak_count *v516;
  uint64_t v517;
  std::__shared_weak_count *v518;
  uint64_t v519;
  std::__shared_weak_count *v520;
  uint64_t v521;
  std::__shared_weak_count *v522;
  uint64_t v523;
  std::__shared_weak_count *v524;
  const char *v525;
  uint64_t v526;
  void *v527;
  __int128 v528;
  __int128 v529;
  unsigned __int8 v530[10];

  *(_WORD *)v530 = 0;
  sub_22319ED0C(&v529, a2);
  v4 = (char *)operator new(0x30uLL);
  v528 = xmmword_2245C43D0;
  strcpy(v4, "com.apple.recon3d.mapping.attribute_mask.color");
  v525 = "enable_attribute";
  v526 = 16;
  v527 = v4;
  sub_223CB4A64((uint64_t)&v529, (uint64_t)&v527, (uint64_t)v530, &v525);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v529 + 1);
  if (*((_QWORD *)&v529 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v529 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v530[1])
  {
    v8 = (unsigned __int8 *)(a1 + 92);
    if (v530[0])
      v9 = sub_224002A88(v8, 4u);
    else
      v9 = sub_224002A94(v8, 4);
    *(_BYTE *)(a1 + 92) = v9;
  }
  *(_WORD *)v530 = 0;
  sub_22319ED0C(&v529, a2);
  v10 = (char *)operator new(0x38uLL);
  v528 = xmmword_2245C43E0;
  strcpy(v10, "com.apple.recon3d.mapping.attribute_mask.scene_type");
  v525 = "enable_attribute";
  v526 = 16;
  v527 = v10;
  sub_223CB4A64((uint64_t)&v529, (uint64_t)&v527, (uint64_t)v530, &v525);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v529 + 1);
  if (*((_QWORD *)&v529 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v529 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v530[1])
  {
    v14 = (unsigned __int8 *)(a1 + 92);
    if (v530[0])
      v15 = sub_224002A88(v14, 0x20u);
    else
      v15 = sub_224002A94(v14, 32);
    *(_BYTE *)(a1 + 92) = v15;
  }
  sub_22319ED0C(&v523, a2);
  v527 = operator new(0x28uLL);
  v528 = xmmword_2245B9440;
  strcpy((char *)v527, "com.apple.recon3d.mapping.min_lux_level");
  *(_QWORD *)&v529 = "common.mapping.lux_level_range.min";
  *((_QWORD *)&v529 + 1) = 34;
  sub_223CB9080((uint64_t)&v523, (uint64_t)&v527, a1 + 108, (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v16 = v524;
  if (v524)
  {
    p_shared_owners = (unint64_t *)&v524->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  sub_22319ED0C(&v521, a2);
  v527 = operator new(0x28uLL);
  v528 = xmmword_2245B9440;
  strcpy((char *)v527, "com.apple.recon3d.mapping.max_lux_level");
  *(_QWORD *)&v529 = "common.mapping.lux_level_range.max";
  *((_QWORD *)&v529 + 1) = 34;
  sub_223CB9080((uint64_t)&v521, (uint64_t)&v527, a1 + 116, (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v19 = v522;
  if (v522)
  {
    v20 = (unint64_t *)&v522->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  sub_22319ED0C(&v519, a2);
  v527 = operator new(0x30uLL);
  v528 = xmmword_2245C43D0;
  strcpy((char *)v527, "com.apple.recon3d.mapping.min_depth_confidence");
  *(_QWORD *)&v529 = "common.mapping.min_depth_confidence";
  *((_QWORD *)&v529 + 1) = 35;
  sub_223CAE210((uint64_t)&v519, (uint64_t)&v527, (float *)(a1 + 88), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v22 = v520;
  if (v520)
  {
    v23 = (unint64_t *)&v520->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  sub_22319ED0C(&v517, a2);
  v527 = operator new(0x30uLL);
  v528 = xmmword_2245C43F0;
  strcpy((char *)v527, "com.apple.recon3d.semantic.ego_hands_masking");
  *(_QWORD *)&v529 = "common.semantic.ego_hands_masking";
  *((_QWORD *)&v529 + 1) = 33;
  sub_223CA7ACC((uint64_t)&v517, (uint64_t)&v527, (_BYTE *)(a1 + 9), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v25 = v518;
  if (v518)
  {
    v26 = (unint64_t *)&v518->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  sub_22319ED0C(&v515, a2);
  v527 = operator new(0x40uLL);
  v528 = xmmword_2245C4400;
  strcpy((char *)v527, "com.apple.recon3d.semantic.handheld_dynamic_object_range");
  *(_QWORD *)&v529 = "common.semantic.handheld_dynamic_object_range";
  *((_QWORD *)&v529 + 1) = 45;
  sub_223CAE210((uint64_t)&v515, (uint64_t)&v527, (float *)(a1 + 12), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v28 = v516;
  if (v516)
  {
    v29 = (unint64_t *)&v516->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (!*(_BYTE *)(a1 + 880))
    goto LABEL_358;
  sub_22319ED0C(&v513, a2);
  v527 = operator new(0x28uLL);
  v528 = xmmword_2245B9440;
  strcpy((char *)v527, "com.apple.recon3d.keyframing.cpu_engine");
  *(_QWORD *)&v529 = "keyframing->cpu_engine";
  *((_QWORD *)&v529 + 1) = 22;
  sub_223CA7ACC((uint64_t)&v513, (uint64_t)&v527, (_BYTE *)(a1 + 760), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v31 = v514;
  if (v514)
  {
    v32 = (unint64_t *)&v514->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  *(_WORD *)v530 = 0;
  sub_22319ED0C(&v529, a2);
  v34 = (char *)operator new(0x30uLL);
  v528 = xmmword_2245C43F0;
  strcpy(v34, "com.apple.recon3d.keyframing.creation.preset");
  v525 = "opt_type";
  v526 = 8;
  v527 = v34;
  sub_223CB268C((uint64_t)&v529, (uint64_t)&v527, (uint64_t)v530, &v525);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v35 = (std::__shared_weak_count *)*((_QWORD *)&v529 + 1);
  if (*((_QWORD *)&v529 + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&v529 + 1) + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (v530[1])
    *(_BYTE *)(a1 + 640) = v530[0];
  sub_22319ED0C(&v511, a2);
  v527 = operator new(0x40uLL);
  v528 = xmmword_2245C4410;
  strcpy((char *)v527, "com.apple.recon3d.keyframing.creation.max_interframe_dist");
  *(_QWORD *)&v529 = "keyframing->creation.max_interframe_dist";
  *((_QWORD *)&v529 + 1) = 40;
  sub_223CAE210((uint64_t)&v511, (uint64_t)&v527, (float *)(a1 + 644), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v38 = v512;
  if (v512)
  {
    v39 = (unint64_t *)&v512->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  sub_22319ED0C(&v509, a2);
  v527 = operator new(0x40uLL);
  v528 = xmmword_2245C4420;
  strcpy((char *)v527, "com.apple.recon3d.keyframing.creation.min_percentage_new_voxels");
  *(_QWORD *)&v529 = "keyframing->creation.min_percentage_new_voxels";
  *((_QWORD *)&v529 + 1) = 46;
  sub_223CAE210((uint64_t)&v509, (uint64_t)&v527, (float *)(a1 + 668), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v41 = v510;
  if (v510)
  {
    v42 = (unint64_t *)&v510->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  sub_22319ED0C(&v507, a2);
  v527 = operator new(0x38uLL);
  v528 = xmmword_2245C4430;
  strcpy((char *)v527, "com.apple.recon3d.keyframing.fusion.max_color_weight");
  *(_QWORD *)&v529 = "keyframing->fusion.max_color_weight";
  *((_QWORD *)&v529 + 1) = 35;
  sub_223CAE210((uint64_t)&v507, (uint64_t)&v527, (float *)(a1 + 592), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v44 = v508;
  if (v508)
  {
    v45 = (unint64_t *)&v508->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  sub_22319ED0C(&v505, a2);
  v527 = operator new(0x40uLL);
  v528 = xmmword_2245C4440;
  strcpy((char *)v527, "com.apple.recon3d.keyframing.fusion.integrate_when_stationary");
  *(_QWORD *)&v529 = "keyframing->fusion.integrate_when_stationary";
  *((_QWORD *)&v529 + 1) = 44;
  sub_223CA7ACC((uint64_t)&v505, (uint64_t)&v527, (_BYTE *)(a1 + 596), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v47 = v506;
  if (v506)
  {
    v48 = (unint64_t *)&v506->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  sub_22319ED0C(&v503, a2);
  v527 = operator new(0x40uLL);
  v528 = xmmword_2245C4440;
  strcpy((char *)v527, "com.apple.recon3d.keyframing.fusion.num_keyframes_integration");
  *(_QWORD *)&v529 = "keyframing->fusion.num_keyframes_integration";
  *((_QWORD *)&v529 + 1) = 44;
  sub_223CAC04C((uint64_t)&v503, (uint64_t)&v527, (unsigned int *)(a1 + 568), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v50 = v504;
  if (v504)
  {
    v51 = (unint64_t *)&v504->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  sub_22319ED0C(&v501, a2);
  v527 = operator new(0x50uLL);
  v528 = xmmword_2245C4450;
  strcpy((char *)v527, "com.apple.recon3d.keyframing.fusion.num_keyframes_integration_scene_change");
  *(_QWORD *)&v529 = "keyframing->fusion.num_keyframes_integration_scene_change";
  *((_QWORD *)&v529 + 1) = 57;
  sub_223CAC04C((uint64_t)&v501, (uint64_t)&v527, (unsigned int *)(a1 + 580), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v53 = v502;
  if (v502)
  {
    v54 = (unint64_t *)&v502->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  sub_22319ED0C(&v499, a2);
  v527 = operator new(0x40uLL);
  v528 = xmmword_2245C4460;
  strcpy((char *)v527, "com.apple.recon3d.keyframing.fusion.num_pixels_scene_change");
  *(_QWORD *)&v529 = "keyframing->fusion.num_pixels_scene_change";
  *((_QWORD *)&v529 + 1) = 42;
  sub_223CB9080((uint64_t)&v499, (uint64_t)&v527, a1 + 572, (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v56 = v500;
  if (v500)
  {
    v57 = (unint64_t *)&v500->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  sub_22319ED0C(&v497, a2);
  v527 = operator new(0x40uLL);
  v528 = xmmword_2245C4470;
  strcpy((char *)v527, "com.apple.recon3d.keyframing.lighting_change_detection.use_gpu");
  *(_QWORD *)&v529 = "keyframing->lighting_change_detection.use_gpu";
  *((_QWORD *)&v529 + 1) = 45;
  sub_223CA7ACC((uint64_t)&v497, (uint64_t)&v527, (_BYTE *)(a1 + 789), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v59 = v498;
  if (v498)
  {
    v60 = (unint64_t *)&v498->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  sub_22319ED0C(&v495, a2);
  v527 = operator new(0x58uLL);
  v528 = xmmword_2245C4480;
  strcpy((char *)v527, "com.apple.recon3d.keyframing.lighting_change_detection.estimate_lighting_changes");
  *(_QWORD *)&v529 = "keyframing->lighting_change_detection.estimate_lighting_changes";
  *((_QWORD *)&v529 + 1) = 63;
  sub_223CA7ACC((uint64_t)&v495, (uint64_t)&v527, (_BYTE *)(a1 + 788), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v62 = v496;
  if (v496)
  {
    v63 = (unint64_t *)&v496->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  sub_22319ED0C(&v493, a2);
  v527 = operator new(0x58uLL);
  v528 = xmmword_2245C4490;
  strcpy((char *)v527, "com.apple.recon3d.keyframing.lighting_change_detection.min_image_usage_percentage");
  *(_QWORD *)&v529 = "keyframing->lighting_change_detection.min_image_usage_percentage";
  *((_QWORD *)&v529 + 1) = 64;
  sub_223CAE210((uint64_t)&v493, (uint64_t)&v527, (float *)(a1 + 792), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v65 = v494;
  if (v494)
  {
    v66 = (unint64_t *)&v494->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  sub_22319ED0C(&v491, a2);
  v527 = operator new(0x58uLL);
  v528 = xmmword_2245C4490;
  strcpy((char *)v527, "com.apple.recon3d.keyframing.lighting_change_detection.scale_difference_threshold");
  *(_QWORD *)&v529 = "keyframing->lighting_change_detection.scale_difference_threshold";
  *((_QWORD *)&v529 + 1) = 64;
  sub_223CAE210((uint64_t)&v491, (uint64_t)&v527, (float *)(a1 + 796), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v68 = v492;
  if (v492)
  {
    v69 = (unint64_t *)&v492->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  sub_22319ED0C(&v489, a2);
  v527 = operator new(0x38uLL);
  v528 = xmmword_2245C44A0;
  strcpy((char *)v527, "com.apple.recon3d.keyframing.memory.max_memory_kb");
  *(_QWORD *)&v529 = "keyframing->memory.max_memory_kb";
  *((_QWORD *)&v529 + 1) = 32;
  sub_223CAE210((uint64_t)&v489, (uint64_t)&v527, (float *)(a1 + 624), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v71 = v490;
  if (v490)
  {
    v72 = (unint64_t *)&v490->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  sub_22319ED0C(&v487, a2);
  v527 = operator new(0x40uLL);
  v528 = xmmword_2245C44B0;
  strcpy((char *)v527, "com.apple.recon3d.keyframing.memory.max_num_load_per_frame");
  *(_QWORD *)&v529 = "keyframing->memory.max_num_load_per_frame";
  *((_QWORD *)&v529 + 1) = 41;
  sub_223CAC04C((uint64_t)&v487, (uint64_t)&v527, (unsigned int *)(a1 + 628), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v74 = v488;
  if (v488)
  {
    v75 = (unint64_t *)&v488->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  sub_22319ED0C(&v485, a2);
  v527 = operator new(0x30uLL);
  v528 = xmmword_2245C43D0;
  strcpy((char *)v527, "com.apple.recon3d.keyframing.memory.save_color");
  *(_QWORD *)&v529 = "keyframing->memory.save_color";
  *((_QWORD *)&v529 + 1) = 29;
  sub_223CA7ACC((uint64_t)&v485, (uint64_t)&v527, (_BYTE *)(a1 + 632), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v77 = v486;
  if (v486)
  {
    v78 = (unint64_t *)&v486->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  sub_22319ED0C(&v483, a2);
  v527 = operator new(0x40uLL);
  v528 = xmmword_2245C44B0;
  strcpy((char *)v527, "com.apple.recon3d.keyframing.memory.rate_throttle_distance");
  *(_QWORD *)&v529 = "keyframing->memory.rate_throttle_distance";
  *((_QWORD *)&v529 + 1) = 41;
  sub_223CAE210((uint64_t)&v483, (uint64_t)&v527, (float *)(a1 + 636), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v80 = v484;
  if (v484)
  {
    v81 = (unint64_t *)&v484->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  sub_22319ED0C(&v481, a2);
  v527 = operator new(0x40uLL);
  v528 = xmmword_2245C44B0;
  strcpy((char *)v527, "com.apple.recon3d.keyframing.pruning.max_num_files_on_disk");
  *(_QWORD *)&v529 = "keyframing->pruning.max_num_files_on_disk";
  *((_QWORD *)&v529 + 1) = 41;
  sub_223CAC04C((uint64_t)&v481, (uint64_t)&v527, (unsigned int *)(a1 + 692), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v83 = v482;
  if (v482)
  {
    v84 = (unint64_t *)&v482->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  sub_22319ED0C(&v479, a2);
  v527 = operator new(0x38uLL);
  v528 = xmmword_2245C4430;
  strcpy((char *)v527, "com.apple.recon3d.keyframing.pruning.force_max_limit");
  *(_QWORD *)&v529 = "keyframing->pruning.force_max_limit";
  *((_QWORD *)&v529 + 1) = 35;
  sub_223CA7ACC((uint64_t)&v479, (uint64_t)&v527, (_BYTE *)(a1 + 701), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v86 = v480;
  if (v480)
  {
    v87 = (unint64_t *)&v480->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  sub_22319ED0C(&v477, a2);
  v527 = operator new(0x40uLL);
  v528 = xmmword_2245C4420;
  strcpy((char *)v527, "com.apple.recon3d.keyframing.pruning.max_keyframe_safety_buffer");
  *(_QWORD *)&v529 = "keyframing->pruning.max_keyframe_safety_buffer";
  *((_QWORD *)&v529 + 1) = 46;
  sub_223CAC04C((uint64_t)&v477, (uint64_t)&v527, (unsigned int *)(a1 + 712), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v89 = v478;
  if (v478)
  {
    v90 = (unint64_t *)&v478->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  sub_22319ED0C(&v475, a2);
  v527 = operator new(0x40uLL);
  v528 = xmmword_2245C44B0;
  strcpy((char *)v527, "com.apple.recon3d.keyframing.publishing.always_publish_new");
  *(_QWORD *)&v529 = "keyframing->publishing.always_publish_new";
  *((_QWORD *)&v529 + 1) = 41;
  sub_223CA7ACC((uint64_t)&v475, (uint64_t)&v527, (_BYTE *)(a1 + 600), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v92 = v476;
  if (v476)
  {
    v93 = (unint64_t *)&v476->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  sub_22319ED0C(&v473, a2);
  v527 = operator new(0x48uLL);
  v528 = xmmword_2245C44C0;
  strcpy((char *)v527, "com.apple.recon3d.keyframing.publishing.min_publish_updates_period");
  *(_QWORD *)&v529 = "keyframing->publishing.min_publish_updates_period";
  *((_QWORD *)&v529 + 1) = 49;
  sub_223CB04A4((uint64_t)&v473, (uint64_t)&v527, (uint64_t *)(a1 + 608), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v95 = v474;
  if (v474)
  {
    v96 = (unint64_t *)&v474->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  sub_22319ED0C(&v471, a2);
  v527 = operator new(0x48uLL);
  v528 = xmmword_2245C44D0;
  strcpy((char *)v527, "com.apple.recon3d.keyframing.publishing.min_process_frame_period");
  *(_QWORD *)&v529 = "keyframing->publishing.min_process_frame_period";
  *((_QWORD *)&v529 + 1) = 47;
  sub_223CB04A4((uint64_t)&v471, (uint64_t)&v527, (uint64_t *)(a1 + 616), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v98 = v472;
  if (v472)
  {
    v99 = (unint64_t *)&v472->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  sub_22319ED0C(&v469, a2);
  v527 = operator new(0x40uLL);
  v528 = xmmword_2245C44B0;
  strcpy((char *)v527, "com.apple.recon3d.keyframing.redundancy.remove_relocalized");
  *(_QWORD *)&v529 = "keyframing->redundancy.remove_relocalized";
  *((_QWORD *)&v529 + 1) = 41;
  sub_223CA7ACC((uint64_t)&v469, (uint64_t)&v527, (_BYTE *)(a1 + 780), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v101 = v470;
  if (v470)
  {
    v102 = (unint64_t *)&v470->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  sub_22319ED0C(&v467, a2);
  v527 = operator new(0x40uLL);
  v528 = xmmword_2245C4420;
  strcpy((char *)v527, "com.apple.recon3d.keyframing.redundancy.location_map_voxel_size");
  *(_QWORD *)&v529 = "keyframing->redundancy.location_map_voxel_size";
  *((_QWORD *)&v529 + 1) = 46;
  sub_223CAE210((uint64_t)&v467, (uint64_t)&v527, (float *)(a1 + 784), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v104 = v468;
  if (v468)
  {
    v105 = (unint64_t *)&v468->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  sub_22319ED0C(&v465, a2);
  v527 = operator new(0x30uLL);
  v528 = xmmword_2245C43F0;
  strcpy((char *)v527, "com.apple.recon3d.keyframing.depth_range_far");
  *(_QWORD *)&v529 = "keyframing->depth_range.far";
  *((_QWORD *)&v529 + 1) = 27;
  sub_223CAE210((uint64_t)&v465, (uint64_t)&v527, (float *)(a1 + 804), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v107 = v466;
  if (v466)
  {
    v108 = (unint64_t *)&v466->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  sub_22319ED0C(&v463, a2);
  v527 = operator new(0x30uLL);
  v528 = xmmword_2245C44E0;
  strcpy((char *)v527, "com.apple.recon3d.keyframing.depth_range_near");
  *(_QWORD *)&v529 = "keyframing->depth_range.near";
  *((_QWORD *)&v529 + 1) = 28;
  sub_223CAE210((uint64_t)&v463, (uint64_t)&v527, (float *)(a1 + 800), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v110 = v464;
  if (v464)
  {
    v111 = (unint64_t *)&v464->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  sub_22319ED0C(&v461, a2);
  v527 = operator new(0x38uLL);
  v528 = xmmword_2245C44F0;
  strcpy((char *)v527, "com.apple.recon3d.keyframing.min_shapshot_period");
  *(_QWORD *)&v529 = "keyframing->snapshot.min_time_since_update_create_to_snapshot";
  *((_QWORD *)&v529 + 1) = 61;
  sub_223CB04A4((uint64_t)&v461, (uint64_t)&v527, (uint64_t *)(a1 + 728), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v113 = v462;
  if (v462)
  {
    v114 = (unint64_t *)&v462->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  sub_22319ED0C(&v459, a2);
  v527 = operator new(0x48uLL);
  v528 = xmmword_2245C4500;
  strcpy((char *)v527, "com.apple.recon3d.keyframing.debug.keyframe_to_point_cloud_stride");
  *(_QWORD *)&v529 = "keyframing->debug.keyframe_to_point_cloud_stride";
  *((_QWORD *)&v529 + 1) = 48;
  sub_223CAC04C((uint64_t)&v459, (uint64_t)&v527, (unsigned int *)(a1 + 808), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v116 = v460;
  if (v460)
  {
    v117 = (unint64_t *)&v460->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  sub_22319ED0C(&v457, a2);
  v527 = operator new(0x38uLL);
  v528 = xmmword_2245C4510;
  strcpy((char *)v527, "com.apple.recon3d.keyframing.enable_observation_store");
  *(_QWORD *)&v529 = "keyframing->observation_store.enable_observation_store";
  *((_QWORD *)&v529 + 1) = 54;
  sub_223CA7ACC((uint64_t)&v457, (uint64_t)&v527, (_BYTE *)(a1 + 816), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v119 = v458;
  if (v458)
  {
    v120 = (unint64_t *)&v458->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  sub_22319ED0C(&v455, a2);
  v527 = operator new(0x40uLL);
  v528 = xmmword_2245C4440;
  strcpy((char *)v527, "com.apple.recon3d.keyframing.enable_room_boundary_computation");
  *(_QWORD *)&v529 = "keyframing->observation_store.enable_room_boundary_computation";
  *((_QWORD *)&v529 + 1) = 62;
  sub_223CA7ACC((uint64_t)&v455, (uint64_t)&v527, (_BYTE *)(a1 + 828), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v122 = v456;
  if (v456)
  {
    v123 = (unint64_t *)&v456->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  sub_22319ED0C(&v453, a2);
  v527 = operator new(0x38uLL);
  v528 = xmmword_2245C4520;
  strcpy((char *)v527, "com.apple.recon3d.keyframing.occupancy_voxel_resolution");
  *(_QWORD *)&v529 = "keyframing->observation_store.voxel_resolution";
  *((_QWORD *)&v529 + 1) = 46;
  sub_223CAE210((uint64_t)&v453, (uint64_t)&v527, (float *)(a1 + 820), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v125 = v454;
  if (v454)
  {
    v126 = (unint64_t *)&v454->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  sub_22319ED0C(&v451, a2);
  v527 = operator new(0x38uLL);
  v528 = xmmword_2245C4510;
  strcpy((char *)v527, "com.apple.recon3d.keyframing.occupancy_block_capacity");
  *(_QWORD *)&v529 = "keyframing->observation_store.maximum_block_capacity";
  *((_QWORD *)&v529 + 1) = 52;
  sub_223CAC04C((uint64_t)&v451, (uint64_t)&v527, (unsigned int *)(a1 + 824), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v128 = v452;
  if (v452)
  {
    v129 = (unint64_t *)&v452->__shared_owners_;
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  sub_22319ED0C(&v449, a2);
  v527 = operator new(0x38uLL);
  v528 = xmmword_2245C44F0;
  strcpy((char *)v527, "com.apple.recon3d.keyframing.occupancy_max_depth");
  *(_QWORD *)&v529 = "keyframing->observation_store.max_depth";
  *((_QWORD *)&v529 + 1) = 39;
  sub_223CAE210((uint64_t)&v449, (uint64_t)&v527, (float *)(a1 + 832), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v131 = v450;
  if (v450)
  {
    v132 = (unint64_t *)&v450->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  sub_22319ED0C(&v447, a2);
  v527 = operator new(0x40uLL);
  v528 = xmmword_2245C4400;
  strcpy((char *)v527, "com.apple.recon3d.keyframing.occupancy_downsample_factor");
  *(_QWORD *)&v529 = "keyframing->observation_store.occupancy_downsample_factor";
  *((_QWORD *)&v529 + 1) = 57;
  sub_223CAC04C((uint64_t)&v447, (uint64_t)&v527, (unsigned int *)(a1 + 836), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v134 = v448;
  if (v448)
  {
    v135 = (unint64_t *)&v448->__shared_owners_;
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  sub_22319ED0C(&v445, a2);
  v527 = operator new(0x40uLL);
  v528 = xmmword_2245C4410;
  strcpy((char *)v527, "com.apple.recon3d.keyframing.clustering_downsample_factor");
  *(_QWORD *)&v529 = "keyframing->observation_store.clustering_downsample_factor";
  *((_QWORD *)&v529 + 1) = 58;
  sub_223CAC04C((uint64_t)&v445, (uint64_t)&v527, (unsigned int *)(a1 + 840), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v137 = v446;
  if (v446)
  {
    v138 = (unint64_t *)&v446->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  sub_22319ED0C(&v443, a2);
  v527 = operator new(0x40uLL);
  v528 = xmmword_2245C4410;
  strcpy((char *)v527, "com.apple.recon3d.keyframing.min_clustering_update_period");
  *(_QWORD *)&v529 = "keyframing->observation_store.min_clustering_update_period";
  *((_QWORD *)&v529 + 1) = 58;
  sub_223CB04A4((uint64_t)&v443, (uint64_t)&v527, (uint64_t *)(a1 + 848), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v140 = v444;
  if (v444)
  {
    v141 = (unint64_t *)&v444->__shared_owners_;
    do
      v142 = __ldaxr(v141);
    while (__stlxr(v142 - 1, v141));
    if (!v142)
    {
      ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
      std::__shared_weak_count::__release_weak(v140);
    }
  }
  sub_22319ED0C(&v441, a2);
  v527 = operator new(0x40uLL);
  v528 = xmmword_2245C44B0;
  strcpy((char *)v527, "com.apple.recon3d.keyframing.boundary_simplification_level");
  *(_QWORD *)&v529 = "keyframing->observation_store.boundary_simplification_level";
  *((_QWORD *)&v529 + 1) = 59;
  sub_223CAC04C((uint64_t)&v441, (uint64_t)&v527, (unsigned int *)(a1 + 856), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v143 = v442;
  if (v442)
  {
    v144 = (unint64_t *)&v442->__shared_owners_;
    do
      v145 = __ldaxr(v144);
    while (__stlxr(v145 - 1, v144));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  sub_22319ED0C(&v439, a2);
  v527 = operator new(0x40uLL);
  v528 = xmmword_2245C44B0;
  strcpy((char *)v527, "com.apple.recon3d.keyframing.clustering_incremental_radius");
  *(_QWORD *)&v529 = "keyframing->observation_store.clustering_incremental_radius";
  *((_QWORD *)&v529 + 1) = 59;
  sub_223CA9E88((uint64_t)&v439, (uint64_t)&v527, (int *)(a1 + 860), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v146 = v440;
  if (v440)
  {
    v147 = (unint64_t *)&v440->__shared_owners_;
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  *(_WORD *)v530 = 0;
  sub_22319ED0C(&v529, a2);
  v149 = (char *)operator new(0x38uLL);
  v528 = xmmword_2245C43E0;
  strcpy(v149, "com.apple.recon3d.keyframing.depth_correction_flags");
  v525 = "opt_type";
  v526 = 8;
  v527 = v149;
  sub_223CB268C((uint64_t)&v529, (uint64_t)&v527, (uint64_t)v530, &v525);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v150 = (std::__shared_weak_count *)*((_QWORD *)&v529 + 1);
  if (*((_QWORD *)&v529 + 1))
  {
    v151 = (unint64_t *)(*((_QWORD *)&v529 + 1) + 8);
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
  if (v530[1])
    *(_BYTE *)(a1 + 864) = v530[0];
  sub_22319ED0C(&v437, a2);
  v527 = operator new(0x40uLL);
  v528 = xmmword_2245C44B0;
  strcpy((char *)v527, "com.apple.recon3d.keyframing.clustering_observation_height");
  *(_QWORD *)&v529 = "keyframing->observation_store.clustering_observation_height";
  *((_QWORD *)&v529 + 1) = 59;
  sub_223CAE210((uint64_t)&v437, (uint64_t)&v527, (float *)(a1 + 868), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v153 = v438;
  if (v438)
  {
    v154 = (unint64_t *)&v438->__shared_owners_;
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
      std::__shared_weak_count::__release_weak(v153);
    }
  }
  sub_22319ED0C(&v435, a2);
  v527 = operator new(0x38uLL);
  v528 = xmmword_2245C4520;
  strcpy((char *)v527, "com.apple.recon3d.keyframing.max_kf_distance_to_process");
  *(_QWORD *)&v529 = "keyframing->observation_store.max_kf_distance_to_process";
  *((_QWORD *)&v529 + 1) = 56;
  sub_223CAE210((uint64_t)&v435, (uint64_t)&v527, (float *)(a1 + 872), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v156 = v436;
  if (!v436)
    goto LABEL_358;
  v157 = (unint64_t *)&v436->__shared_owners_;
  do
    v158 = __ldaxr(v157);
  while (__stlxr(v158 - 1, v157));
  if (!v158)
  {
    ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
    std::__shared_weak_count::__release_weak(v156);
    if (!*(_BYTE *)(a1 + 560))
      goto LABEL_674;
  }
  else
  {
LABEL_358:
    if (!*(_BYTE *)(a1 + 560))
      goto LABEL_674;
  }
  sub_22319ED0C(&v433, a2);
  v527 = operator new(0x28uLL);
  v528 = xmmword_2245B8D20;
  strcpy((char *)v527, "com.apple.recon3d.meshing.num_buckets");
  *(_QWORD *)&v529 = "meshing->block_table_config.num_buckets";
  *((_QWORD *)&v529 + 1) = 39;
  sub_223CAC04C((uint64_t)&v433, (uint64_t)&v527, (unsigned int *)(a1 + 368), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v159 = v434;
  if (v434)
  {
    v160 = (unint64_t *)&v434->__shared_owners_;
    do
      v161 = __ldaxr(v160);
    while (__stlxr(v161 - 1, v160));
    if (!v161)
    {
      ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
      std::__shared_weak_count::__release_weak(v159);
    }
  }
  sub_22319ED0C(&v431, a2);
  v527 = operator new(0x30uLL);
  v528 = xmmword_2245C4530;
  strcpy((char *)v527, "com.apple.recon3d.meshing.use_custom_size");
  *(_QWORD *)&v529 = "meshing->block_table_config.use_custom_size";
  *((_QWORD *)&v529 + 1) = 43;
  sub_223CA7ACC((uint64_t)&v431, (uint64_t)&v527, (_BYTE *)(a1 + 372), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v162 = v432;
  if (v432)
  {
    v163 = (unint64_t *)&v432->__shared_owners_;
    do
      v164 = __ldaxr(v163);
    while (__stlxr(v164 - 1, v163));
    if (!v164)
    {
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
    }
  }
  sub_22319ED0C(&v429, a2);
  v527 = operator new(0x30uLL);
  v528 = xmmword_2245C4530;
  strcpy((char *)v527, "com.apple.recon3d.meshing.depth_range_far");
  *(_QWORD *)&v529 = "meshing->depth_range.far";
  *((_QWORD *)&v529 + 1) = 24;
  sub_223CAE210((uint64_t)&v429, (uint64_t)&v527, (float *)(a1 + 380), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v165 = v430;
  if (v430)
  {
    v166 = (unint64_t *)&v430->__shared_owners_;
    do
      v167 = __ldaxr(v166);
    while (__stlxr(v167 - 1, v166));
    if (!v167)
    {
      ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
      std::__shared_weak_count::__release_weak(v165);
    }
  }
  sub_22319ED0C(&v427, a2);
  v527 = operator new(0x30uLL);
  v528 = xmmword_2245B9450;
  strcpy((char *)v527, "com.apple.recon3d.meshing.depth_range_near");
  *(_QWORD *)&v529 = "meshing->depth_range.near";
  *((_QWORD *)&v529 + 1) = 25;
  sub_223CAE210((uint64_t)&v427, (uint64_t)&v527, (float *)(a1 + 376), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v168 = v428;
  if (v428)
  {
    v169 = (unint64_t *)&v428->__shared_owners_;
    do
      v170 = __ldaxr(v169);
    while (__stlxr(v170 - 1, v169));
    if (!v170)
    {
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
    }
  }
  sub_22319ED0C(&v425, a2);
  v527 = operator new(0x30uLL);
  v528 = xmmword_2245C4540;
  strcpy((char *)v527, "com.apple.recon3d.meshing.sdf_config.voxel_size");
  *(_QWORD *)&v529 = "meshing->sdf_config->voxel_size";
  *((_QWORD *)&v529 + 1) = 31;
  sub_223CAE210((uint64_t)&v425, (uint64_t)&v527, (float *)(a1 + 288), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v171 = v426;
  if (v426)
  {
    v172 = (unint64_t *)&v426->__shared_owners_;
    do
      v173 = __ldaxr(v172);
    while (__stlxr(v173 - 1, v172));
    if (!v173)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
  }
  sub_22319ED0C(&v423, a2);
  v527 = operator new(0x40uLL);
  v528 = xmmword_2245C4460;
  strcpy((char *)v527, "com.apple.recon3d.meshing.sdf_config.coarse_voxel_threshold");
  *(_QWORD *)&v529 = "meshing->sdf_config->coarse_voxel_threshold";
  *((_QWORD *)&v529 + 1) = 43;
  sub_223CAE210((uint64_t)&v423, (uint64_t)&v527, (float *)(a1 + 300), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v174 = v424;
  if (v424)
  {
    v175 = (unint64_t *)&v424->__shared_owners_;
    do
      v176 = __ldaxr(v175);
    while (__stlxr(v176 - 1, v175));
    if (!v176)
    {
      ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
      std::__shared_weak_count::__release_weak(v174);
    }
  }
  sub_22319ED0C(&v421, a2);
  v527 = operator new(0x38uLL);
  v528 = xmmword_2245C43E0;
  strcpy((char *)v527, "com.apple.recon3d.meshing.sdf_config.min_face_count");
  *(_QWORD *)&v529 = "meshing->sdf_config->min_face_count";
  *((_QWORD *)&v529 + 1) = 35;
  sub_223CAC04C((uint64_t)&v421, (uint64_t)&v527, (unsigned int *)(a1 + 312), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v177 = v422;
  if (v422)
  {
    v178 = (unint64_t *)&v422->__shared_owners_;
    do
      v179 = __ldaxr(v178);
    while (__stlxr(v179 - 1, v178));
    if (!v179)
    {
      ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
      std::__shared_weak_count::__release_weak(v177);
    }
  }
  sub_22319ED0C(&v419, a2);
  v527 = operator new(0x48uLL);
  v528 = xmmword_2245C4550;
  strcpy((char *)v527, "com.apple.recon3d.meshing.sdf_config.no_ray_trace_for_carving_blocks");
  *(_QWORD *)&v529 = "meshing->sdf_config->no_ray_trace_for_carving_blocks";
  *((_QWORD *)&v529 + 1) = 52;
  sub_223CA7ACC((uint64_t)&v419, (uint64_t)&v527, (_BYTE *)(a1 + 305), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v180 = v420;
  if (v420)
  {
    v181 = (unint64_t *)&v420->__shared_owners_;
    do
      v182 = __ldaxr(v181);
    while (__stlxr(v182 - 1, v181));
    if (!v182)
    {
      ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
      std::__shared_weak_count::__release_weak(v180);
    }
  }
  sub_22319ED0C(&v417, a2);
  v527 = operator new(0x38uLL);
  v528 = xmmword_2245C4430;
  strcpy((char *)v527, "com.apple.recon3d.meshing.sdf_config.remove_sky_mesh");
  *(_QWORD *)&v529 = "meshing->sdf_config->remove_sky_mesh";
  *((_QWORD *)&v529 + 1) = 36;
  sub_223CA7ACC((uint64_t)&v417, (uint64_t)&v527, (_BYTE *)(a1 + 304), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v183 = v418;
  if (v418)
  {
    v184 = (unint64_t *)&v418->__shared_owners_;
    do
      v185 = __ldaxr(v184);
    while (__stlxr(v185 - 1, v184));
    if (!v185)
    {
      ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
      std::__shared_weak_count::__release_weak(v183);
    }
  }
  *(_WORD *)v530 = 0;
  sub_22319ED0C(&v529, a2);
  v186 = (char *)operator new(0x38uLL);
  v528 = xmmword_2245C4430;
  strcpy(v186, "com.apple.recon3d.meshing.sdf_config.confidence_type");
  v525 = "opt_type";
  v526 = 8;
  v527 = v186;
  sub_223CB268C((uint64_t)&v529, (uint64_t)&v527, (uint64_t)v530, &v525);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v187 = (std::__shared_weak_count *)*((_QWORD *)&v529 + 1);
  if (*((_QWORD *)&v529 + 1))
  {
    v188 = (unint64_t *)(*((_QWORD *)&v529 + 1) + 8);
    do
      v189 = __ldaxr(v188);
    while (__stlxr(v189 - 1, v188));
    if (!v189)
    {
      ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
      std::__shared_weak_count::__release_weak(v187);
    }
  }
  if (v530[1])
    *(_DWORD *)(a1 + 316) = v530[0];
  sub_22319ED0C(&v415, a2);
  v527 = operator new(0x40uLL);
  v528 = xmmword_2245C4420;
  strcpy((char *)v527, "com.apple.recon3d.meshing.sdf_config.conservative_space_carving");
  *(_QWORD *)&v529 = "meshing->sdf_config->conservative_space_carving";
  *((_QWORD *)&v529 + 1) = 47;
  sub_223CA7ACC((uint64_t)&v415, (uint64_t)&v527, (_BYTE *)(a1 + 320), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v190 = v416;
  if (v416)
  {
    v191 = (unint64_t *)&v416->__shared_owners_;
    do
      v192 = __ldaxr(v191);
    while (__stlxr(v192 - 1, v191));
    if (!v192)
    {
      ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
      std::__shared_weak_count::__release_weak(v190);
    }
  }
  sub_22319ED0C(&v413, a2);
  v527 = operator new(0x40uLL);
  v528 = xmmword_2245C44B0;
  strcpy((char *)v527, "com.apple.recon3d.meshing.sdf_config.instant_space_carving");
  *(_QWORD *)&v529 = "meshing->sdf_config->instant_space_carving";
  *((_QWORD *)&v529 + 1) = 42;
  sub_223CA7ACC((uint64_t)&v413, (uint64_t)&v527, (_BYTE *)(a1 + 323), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v193 = v414;
  if (v414)
  {
    v194 = (unint64_t *)&v414->__shared_owners_;
    do
      v195 = __ldaxr(v194);
    while (__stlxr(v195 - 1, v194));
    if (!v195)
    {
      ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
      std::__shared_weak_count::__release_weak(v193);
    }
  }
  sub_22319ED0C(&v411, a2);
  v527 = operator new(0x40uLL);
  v528 = xmmword_2245C4440;
  strcpy((char *)v527, "com.apple.recon3d.meshing.sdf_config.flattened_marching_cubes");
  *(_QWORD *)&v529 = "meshing->sdf_config->flattened_marching_cubes";
  *((_QWORD *)&v529 + 1) = 45;
  sub_223CA7ACC((uint64_t)&v411, (uint64_t)&v527, (_BYTE *)(a1 + 324), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v196 = v412;
  if (v412)
  {
    v197 = (unint64_t *)&v412->__shared_owners_;
    do
      v198 = __ldaxr(v197);
    while (__stlxr(v198 - 1, v197));
    if (!v198)
    {
      ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
      std::__shared_weak_count::__release_weak(v196);
    }
  }
  sub_22319ED0C(&v409, a2);
  v527 = operator new(0x40uLL);
  v528 = xmmword_2245C4400;
  strcpy((char *)v527, "com.apple.recon3d.meshing.sdf_config.integrate_kf_planes");
  *(_QWORD *)&v529 = "meshing->sdf_config->integrate_kf_planes";
  *((_QWORD *)&v529 + 1) = 40;
  sub_223CA7ACC((uint64_t)&v409, (uint64_t)&v527, (_BYTE *)(a1 + 325), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v199 = v410;
  if (v410)
  {
    v200 = (unint64_t *)&v410->__shared_owners_;
    do
      v201 = __ldaxr(v200);
    while (__stlxr(v201 - 1, v200));
    if (!v201)
    {
      ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
      std::__shared_weak_count::__release_weak(v199);
    }
  }
  sub_22319ED0C(&v407, a2);
  v527 = operator new(0x38uLL);
  v528 = xmmword_2245C43E0;
  strcpy((char *)v527, "com.apple.recon3d.meshing.sdf_config.render_normals");
  *(_QWORD *)&v529 = "meshing->sdf_config->render_normals";
  *((_QWORD *)&v529 + 1) = 35;
  sub_223CA7ACC((uint64_t)&v407, (uint64_t)&v527, (_BYTE *)(a1 + 322), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v202 = v408;
  if (v408)
  {
    v203 = (unint64_t *)&v408->__shared_owners_;
    do
      v204 = __ldaxr(v203);
    while (__stlxr(v204 - 1, v203));
    if (!v204)
    {
      ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
      std::__shared_weak_count::__release_weak(v202);
    }
  }
  sub_22319ED0C(&v405, a2);
  v527 = operator new(0x48uLL);
  v528 = xmmword_2245C4560;
  strcpy((char *)v527, "com.apple.recon3d.meshing.preprocessing.boost_monitor_confidence_zfar");
  *(_QWORD *)&v529 = "meshing->preprocessing.boost_laptop_monitor_confidence_zfar";
  *((_QWORD *)&v529 + 1) = 59;
  sub_223CAE210((uint64_t)&v405, (uint64_t)&v527, (float *)(a1 + 392), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v205 = v406;
  if (v406)
  {
    v206 = (unint64_t *)&v406->__shared_owners_;
    do
      v207 = __ldaxr(v206);
    while (__stlxr(v207 - 1, v206));
    if (!v207)
    {
      ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
      std::__shared_weak_count::__release_weak(v205);
    }
  }
  sub_22319ED0C(&v403, a2);
  v527 = operator new(0x48uLL);
  v528 = xmmword_2245C4500;
  strcpy((char *)v527, "com.apple.recon3d.meshing.preprocessing.process_active_depth_mask");
  *(_QWORD *)&v529 = "meshing->preprocessing.process_active_depth_mask";
  *((_QWORD *)&v529 + 1) = 48;
  sub_223CA7ACC((uint64_t)&v403, (uint64_t)&v527, (_BYTE *)(a1 + 396), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v208 = v404;
  if (v404)
  {
    v209 = (unint64_t *)&v404->__shared_owners_;
    do
      v210 = __ldaxr(v209);
    while (__stlxr(v210 - 1, v209));
    if (!v210)
    {
      ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
      std::__shared_weak_count::__release_weak(v208);
    }
  }
  sub_22319ED0C(&v401, a2);
  v527 = operator new(0x40uLL);
  v528 = xmmword_2245C4410;
  strcpy((char *)v527, "com.apple.recon3d.meshing.preprocessing.process_semantics");
  *(_QWORD *)&v529 = "meshing->preprocessing.process_semantics";
  *((_QWORD *)&v529 + 1) = 40;
  sub_223CA7ACC((uint64_t)&v401, (uint64_t)&v527, (_BYTE *)(a1 + 397), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v211 = v402;
  if (v402)
  {
    v212 = (unint64_t *)&v402->__shared_owners_;
    do
      v213 = __ldaxr(v212);
    while (__stlxr(v213 - 1, v212));
    if (!v213)
    {
      ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
      std::__shared_weak_count::__release_weak(v211);
    }
  }
  sub_22319ED0C(&v399, a2);
  v527 = operator new(0x40uLL);
  v528 = xmmword_2245C4460;
  strcpy((char *)v527, "com.apple.recon3d.meshing.mesh_plane_harmony_config.enabled");
  *(_QWORD *)&v529 = "meshing->mesh_plane_harmony.enabled";
  *((_QWORD *)&v529 + 1) = 35;
  sub_223CA7ACC((uint64_t)&v399, (uint64_t)&v527, (_BYTE *)(a1 + 400), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v214 = v400;
  if (v400)
  {
    v215 = (unint64_t *)&v400->__shared_owners_;
    do
      v216 = __ldaxr(v215);
    while (__stlxr(v216 - 1, v215));
    if (!v216)
    {
      ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
      std::__shared_weak_count::__release_weak(v214);
    }
  }
  sub_22319ED0C(&v397, a2);
  v527 = operator new(0x68uLL);
  v528 = xmmword_2245C4570;
  strcpy((char *)v527, "com.apple.recon3d.meshing.keyframing_adaptor_config.enable_axes_aligned_generic_global_reference_system");
  *(_QWORD *)&v529 = "meshing->keyframing_adaptor_config.enable_axes_aligned_generic_global_reference_system";
  *((_QWORD *)&v529 + 1) = 86;
  sub_223CA7ACC((uint64_t)&v397, (uint64_t)&v527, (_BYTE *)(a1 + 496), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v217 = v398;
  if (v398)
  {
    v218 = (unint64_t *)&v398->__shared_owners_;
    do
      v219 = __ldaxr(v218);
    while (__stlxr(v219 - 1, v218));
    if (!v219)
    {
      ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
      std::__shared_weak_count::__release_weak(v217);
    }
  }
  sub_22319ED0C(&v395, a2);
  v527 = operator new(0x50uLL);
  v528 = xmmword_2245C4580;
  strcpy((char *)v527, "com.apple.recon3d.meshing.keyframing_adaptor_config.semantic_novelty_threshold");
  *(_QWORD *)&v529 = "meshing->keyframing_adaptor_config.semantic_novelty_threshold";
  *((_QWORD *)&v529 + 1) = 61;
  sub_223CAE210((uint64_t)&v395, (uint64_t)&v527, (float *)(a1 + 500), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v220 = v396;
  if (v396)
  {
    v221 = (unint64_t *)&v396->__shared_owners_;
    do
      v222 = __ldaxr(v221);
    while (__stlxr(v222 - 1, v221));
    if (!v222)
    {
      ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
      std::__shared_weak_count::__release_weak(v220);
    }
  }
  sub_22319ED0C(&v393, a2);
  v527 = operator new(0x48uLL);
  v528 = xmmword_2245C4590;
  strcpy((char *)v527, "com.apple.recon3d.meshing.keyframing_adaptor_config.head_carving_radius");
  *(_QWORD *)&v529 = "meshing->keyframing_adaptor_config.head_carving_radius";
  *((_QWORD *)&v529 + 1) = 54;
  sub_223CBB338((uint64_t)&v393, (uint64_t)&v527, a1 + 516, (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v223 = v394;
  if (v394)
  {
    v224 = (unint64_t *)&v394->__shared_owners_;
    do
      v225 = __ldaxr(v224);
    while (__stlxr(v225 - 1, v224));
    if (!v225)
    {
      ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
      std::__shared_weak_count::__release_weak(v223);
    }
  }
  sub_22319ED0C(&v391, a2);
  v527 = operator new(0x50uLL);
  v528 = xmmword_2245C45A0;
  strcpy((char *)v527, "com.apple.recon3d.meshing.keyframing_adaptor_config.enable_rawframe_integration");
  *(_QWORD *)&v529 = "meshing->keyframing_adaptor_config.enable_rawframe_integration";
  *((_QWORD *)&v529 + 1) = 62;
  sub_223CA7ACC((uint64_t)&v391, (uint64_t)&v527, (_BYTE *)(a1 + 498), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v226 = v392;
  if (v392)
  {
    v227 = (unint64_t *)&v392->__shared_owners_;
    do
      v228 = __ldaxr(v227);
    while (__stlxr(v228 - 1, v227));
    if (!v228)
    {
      ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
      std::__shared_weak_count::__release_weak(v226);
    }
  }
  sub_22319ED0C(&v389, a2);
  v527 = operator new(0x58uLL);
  v528 = xmmword_2245C45B0;
  strcpy((char *)v527, "com.apple.recon3d.meshing.keyframing_adaptor_config.enable_content_update_integration");
  *(_QWORD *)&v529 = "meshing->keyframing_adaptor_config.enable_content_update_integration";
  *((_QWORD *)&v529 + 1) = 68;
  sub_223CA7ACC((uint64_t)&v389, (uint64_t)&v527, (_BYTE *)(a1 + 499), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v229 = v390;
  if (v390)
  {
    v230 = (unint64_t *)&v390->__shared_owners_;
    do
      v231 = __ldaxr(v230);
    while (__stlxr(v231 - 1, v230));
    if (!v231)
    {
      ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
      std::__shared_weak_count::__release_weak(v229);
    }
  }
  sub_22319ED0C(&v387, a2);
  v527 = operator new(0x60uLL);
  v528 = xmmword_2245C45C0;
  strcpy((char *)v527, "com.apple.recon3d.meshing.keyframing_adaptor_config.cluster_meshing.enable_cluster_recon");
  *(_QWORD *)&v529 = "meshing->keyframing_adaptor_config.cluster_meshing.enable_cluster_recon";
  *((_QWORD *)&v529 + 1) = 71;
  sub_223CA7ACC((uint64_t)&v387, (uint64_t)&v527, (_BYTE *)(a1 + 524), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v232 = v388;
  if (v388)
  {
    v233 = (unint64_t *)&v388->__shared_owners_;
    do
      v234 = __ldaxr(v233);
    while (__stlxr(v234 - 1, v233));
    if (!v234)
    {
      ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
      std::__shared_weak_count::__release_weak(v232);
    }
  }
  sub_22319ED0C(&v385, a2);
  v527 = operator new(0x68uLL);
  v528 = xmmword_2245C4570;
  strcpy((char *)v527, "com.apple.recon3d.meshing.keyframing_adaptor_config.cluster_meshing.avoid_meshing_outside_room_boundary");
  *(_QWORD *)&v529 = "meshing->keyframing_adaptor_config.cluster_meshing.avoid_meshing_outside_room_boundary";
  *((_QWORD *)&v529 + 1) = 86;
  sub_223CA7ACC((uint64_t)&v385, (uint64_t)&v527, (_BYTE *)(a1 + 525), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v235 = v386;
  if (v386)
  {
    v236 = (unint64_t *)&v386->__shared_owners_;
    do
      v237 = __ldaxr(v236);
    while (__stlxr(v237 - 1, v236));
    if (!v237)
    {
      ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
      std::__shared_weak_count::__release_weak(v235);
    }
  }
  sub_22319ED0C(&v383, a2);
  v527 = operator new(0x70uLL);
  v528 = xmmword_2245C45D0;
  strcpy((char *)v527, "com.apple.recon3d.meshing.keyframing_adaptor_config.cluster_meshing.exclude_keyframes_outside_room_boundary");
  *(_QWORD *)&v529 = "meshing->keyframing_adaptor_config.cluster_meshing.exclude_keyframes_outside_room_boundary";
  *((_QWORD *)&v529 + 1) = 90;
  sub_223CA7ACC((uint64_t)&v383, (uint64_t)&v527, (_BYTE *)(a1 + 526), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v238 = v384;
  if (v384)
  {
    v239 = (unint64_t *)&v384->__shared_owners_;
    do
      v240 = __ldaxr(v239);
    while (__stlxr(v240 - 1, v239));
    if (!v240)
    {
      ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
      std::__shared_weak_count::__release_weak(v238);
    }
  }
  sub_22319ED0C(&v381, a2);
  v527 = operator new(0x70uLL);
  v528 = xmmword_2245C45E0;
  strcpy((char *)v527, "com.apple.recon3d.meshing.keyframing_adaptor_config.cluster_meshing.mesh_clusters_not_containing_keyframes");
  *(_QWORD *)&v529 = "meshing->keyframing_adaptor_config.cluster_meshing.mesh_clusters_not_containing_keyframes";
  *((_QWORD *)&v529 + 1) = 89;
  sub_223CA7ACC((uint64_t)&v381, (uint64_t)&v527, (_BYTE *)(a1 + 527), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v241 = v382;
  if (v382)
  {
    v242 = (unint64_t *)&v382->__shared_owners_;
    do
      v243 = __ldaxr(v242);
    while (__stlxr(v243 - 1, v242));
    if (!v243)
    {
      ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
      std::__shared_weak_count::__release_weak(v241);
    }
  }
  sub_22319ED0C(&v379, a2);
  v527 = operator new(0x60uLL);
  v528 = xmmword_2245C45F0;
  strcpy((char *)v527, "com.apple.recon3d.meshing.keyframing_adaptor_config.cluster_meshing.memory_optimization_factor");
  *(_QWORD *)&v529 = "meshing->keyframing_adaptor_config.cluster_meshing.memory_optimization_factor";
  *((_QWORD *)&v529 + 1) = 77;
  sub_223CAC04C((uint64_t)&v379, (uint64_t)&v527, (unsigned int *)(a1 + 528), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v244 = v380;
  if (v380)
  {
    v245 = (unint64_t *)&v380->__shared_owners_;
    do
      v246 = __ldaxr(v245);
    while (__stlxr(v246 - 1, v245));
    if (!v246)
    {
      ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
      std::__shared_weak_count::__release_weak(v244);
    }
  }
  sub_22319ED0C(&v377, a2);
  v527 = operator new(0x58uLL);
  v528 = xmmword_2245C4600;
  strcpy((char *)v527, "com.apple.recon3d.meshing.keyframing_adaptor_config.dynamic_object_carving_threshold");
  *(_QWORD *)&v529 = "meshing->keyframing_adaptor_config.dynamic_object_carving_threshold";
  *((_QWORD *)&v529 + 1) = 67;
  sub_223CBB338((uint64_t)&v377, (uint64_t)&v527, a1 + 532, (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v247 = v378;
  if (v378)
  {
    v248 = (unint64_t *)&v378->__shared_owners_;
    do
      v249 = __ldaxr(v248);
    while (__stlxr(v249 - 1, v248));
    if (!v249)
    {
      ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
      std::__shared_weak_count::__release_weak(v247);
    }
  }
  sub_22319ED0C(&v375, a2);
  v527 = operator new(0x60uLL);
  v528 = xmmword_2245C4610;
  strcpy((char *)v527, "com.apple.recon3d.meshing.keyframing_adaptor_config.keyframe_integration_distance_threshold");
  *(_QWORD *)&v529 = "meshing->keyframing_adaptor_config.keyframe_integration_distance_threshold";
  *((_QWORD *)&v529 + 1) = 74;
  sub_223CBB338((uint64_t)&v375, (uint64_t)&v527, a1 + 540, (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v250 = v376;
  if (v376)
  {
    v251 = (unint64_t *)&v376->__shared_owners_;
    do
      v252 = __ldaxr(v251);
    while (__stlxr(v252 - 1, v251));
    if (!v252)
    {
      ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
      std::__shared_weak_count::__release_weak(v250);
    }
  }
  sub_22319ED0C(&v373, a2);
  v527 = operator new(0x48uLL);
  v528 = xmmword_2245C4500;
  strcpy((char *)v527, "com.apple.recon3d.occupancy.prr_material_label_mode_switch_period");
  *(_QWORD *)&v529 = "meshing->rsl_config.material_label_mode_switch_period";
  *((_QWORD *)&v529 + 1) = 53;
  sub_223CAE210((uint64_t)&v373, (uint64_t)&v527, (float *)(a1 + 440), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v253 = v374;
  if (v374)
  {
    v254 = (unint64_t *)&v374->__shared_owners_;
    do
      v255 = __ldaxr(v254);
    while (__stlxr(v255 - 1, v254));
    if (!v255)
    {
      ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
      std::__shared_weak_count::__release_weak(v253);
    }
  }
  sub_22319ED0C(&v371, a2);
  v527 = operator new(0x40uLL);
  v528 = xmmword_2245C4420;
  strcpy((char *)v527, "com.apple.recon3d.occupancy.prr_material_label_to_switch_source");
  *(_QWORD *)&v529 = "meshing->rsl_config.material_label_to_switch_source";
  *((_QWORD *)&v529 + 1) = 51;
  sub_223CA9E88((uint64_t)&v371, (uint64_t)&v527, (int *)(a1 + 444), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v256 = v372;
  if (v372)
  {
    v257 = (unint64_t *)&v372->__shared_owners_;
    do
      v258 = __ldaxr(v257);
    while (__stlxr(v258 - 1, v257));
    if (!v258)
    {
      ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
      std::__shared_weak_count::__release_weak(v256);
    }
  }
  sub_22319ED0C(&v369, a2);
  v527 = operator new(0x40uLL);
  v528 = xmmword_2245C4420;
  strcpy((char *)v527, "com.apple.recon3d.occupancy.prr_material_label_to_switch_target");
  *(_QWORD *)&v529 = "meshing->rsl_config.material_label_to_switch_target";
  *((_QWORD *)&v529 + 1) = 51;
  sub_223CA9E88((uint64_t)&v369, (uint64_t)&v527, (int *)(a1 + 448), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v259 = v370;
  if (v370)
  {
    v260 = (unint64_t *)&v370->__shared_owners_;
    do
      v261 = __ldaxr(v260);
    while (__stlxr(v261 - 1, v260));
    if (!v261)
    {
      ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
      std::__shared_weak_count::__release_weak(v259);
    }
  }
  sub_22319ED0C(&v367, a2);
  v527 = operator new(0x38uLL);
  v528 = xmmword_2245C4510;
  strcpy((char *)v527, "com.apple.recon3d.occupancy.use_low_confidence_jasper");
  *(_QWORD *)&v529 = "meshing->occupancy_by_proximity_config.use_low_confidence_jasper_for_occupancy_mapping";
  *((_QWORD *)&v529 + 1) = 86;
  sub_223CA7ACC((uint64_t)&v367, (uint64_t)&v527, (_BYTE *)(a1 + 486), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v262 = v368;
  if (v368)
  {
    v263 = (unint64_t *)&v368->__shared_owners_;
    do
      v264 = __ldaxr(v263);
    while (__stlxr(v264 - 1, v263));
    if (!v264)
    {
      ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
      std::__shared_weak_count::__release_weak(v262);
    }
  }
  sub_22319ED0C(&v365, a2);
  v527 = operator new(0x50uLL);
  v528 = xmmword_2245C4620;
  strcpy((char *)v527, "com.apple.recon3d.occupancy.differentiate_distant_jasper_in_change_tracking");
  *(_QWORD *)&v529 = "meshing->occupancy_by_proximity_config.differentiate_distant_jasper_in_change_tracking";
  *((_QWORD *)&v529 + 1) = 86;
  sub_223CA7ACC((uint64_t)&v365, (uint64_t)&v527, (_BYTE *)(a1 + 487), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v265 = v366;
  if (v366)
  {
    v266 = (unint64_t *)&v366->__shared_owners_;
    do
      v267 = __ldaxr(v266);
    while (__stlxr(v267 - 1, v266));
    if (!v267)
    {
      ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
      std::__shared_weak_count::__release_weak(v265);
    }
  }
  sub_22319ED0C(&v363, a2);
  v527 = operator new(0x38uLL);
  v528 = xmmword_2245C4520;
  strcpy((char *)v527, "com.apple.recon3d.occupancy.use_prr_incremental_updates");
  *(_QWORD *)&v529 = "meshing->rsl_config.use_incremental_updates";
  *((_QWORD *)&v529 + 1) = 43;
  sub_223CA7ACC((uint64_t)&v363, (uint64_t)&v527, (_BYTE *)(a1 + 452), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v268 = v364;
  if (v364)
  {
    v269 = (unint64_t *)&v364->__shared_owners_;
    do
      v270 = __ldaxr(v269);
    while (__stlxr(v270 - 1, v269));
    if (!v270)
    {
      ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
      std::__shared_weak_count::__release_weak(v268);
    }
  }
  *(_WORD *)v530 = 0;
  sub_22319ED0C(&v529, a2);
  v271 = (char *)operator new(0x38uLL);
  v528 = xmmword_2245C43E0;
  strcpy(v271, "com.apple.recon3d.occupancy.prr_indoor_outdoor_mode");
  v525 = "opt_type";
  v526 = 8;
  v527 = v271;
  sub_223CB268C((uint64_t)&v529, (uint64_t)&v527, (uint64_t)v530, &v525);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v272 = (std::__shared_weak_count *)*((_QWORD *)&v529 + 1);
  if (*((_QWORD *)&v529 + 1))
  {
    v273 = (unint64_t *)(*((_QWORD *)&v529 + 1) + 8);
    do
      v274 = __ldaxr(v273);
    while (__stlxr(v274 - 1, v273));
    if (!v274)
    {
      ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
      std::__shared_weak_count::__release_weak(v272);
    }
  }
  if (v530[1])
    *(_BYTE *)(a1 + 453) = v530[0];
  sub_22319ED0C(&v361, a2);
  v527 = operator new(0x30uLL);
  v528 = xmmword_2245C4530;
  strcpy((char *)v527, "com.apple.recon3d.occupancy.update_period");
  *(_QWORD *)&v529 = "meshing->occupancy_by_proximity_config.occupancy_update_period";
  *((_QWORD *)&v529 + 1) = 62;
  sub_223CB04A4((uint64_t)&v361, (uint64_t)&v527, (uint64_t *)(a1 + 488), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v275 = v362;
  if (v362)
  {
    v276 = (unint64_t *)&v362->__shared_owners_;
    do
      v277 = __ldaxr(v276);
    while (__stlxr(v277 - 1, v276));
    if (!v277)
    {
      ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
      std::__shared_weak_count::__release_weak(v275);
    }
  }
  sub_22319ED0C(&v359, a2);
  v527 = operator new(0x38uLL);
  v528 = xmmword_2245C4630;
  strcpy((char *)v527, "com.apple.recon3d.occupancy.nominal_required_area_sq_m");
  *(_QWORD *)&v529 = "meshing->occupancy_by_proximity_config.nominal_required_area_sq_m";
  *((_QWORD *)&v529 + 1) = 65;
  sub_223CAE210((uint64_t)&v359, (uint64_t)&v527, (float *)(a1 + 480), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v278 = v360;
  if (v360)
  {
    v279 = (unint64_t *)&v360->__shared_owners_;
    do
      v280 = __ldaxr(v279);
    while (__stlxr(v280 - 1, v279));
    if (!v280)
    {
      ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
      std::__shared_weak_count::__release_weak(v278);
    }
  }
  sub_22319ED0C(&v357, a2);
  v527 = operator new(0x38uLL);
  v528 = xmmword_2245C4430;
  strcpy((char *)v527, "com.apple.recon3d.extra.enable_local_mesh_transforms");
  *(_QWORD *)&v529 = "meshing->extra.enable_local_mesh_transforms";
  *((_QWORD *)&v529 + 1) = 43;
  sub_223CA7ACC((uint64_t)&v357, (uint64_t)&v527, (_BYTE *)(a1 + 549), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v281 = v358;
  if (v358)
  {
    v282 = (unint64_t *)&v358->__shared_owners_;
    do
      v283 = __ldaxr(v282);
    while (__stlxr(v283 - 1, v282));
    if (!v283)
    {
      ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
      std::__shared_weak_count::__release_weak(v281);
    }
  }
  *(_WORD *)v530 = 0;
  sub_22319ED0C(&v529, a2);
  v284 = (char *)operator new(0x30uLL);
  v528 = xmmword_2245C4540;
  strcpy(v284, "com.apple.recon3d.extra.mirror_correction_flags");
  v525 = "opt_type";
  v526 = 8;
  v527 = v284;
  sub_223CB268C((uint64_t)&v529, (uint64_t)&v527, (uint64_t)v530, &v525);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v285 = (std::__shared_weak_count *)*((_QWORD *)&v529 + 1);
  if (*((_QWORD *)&v529 + 1))
  {
    v286 = (unint64_t *)(*((_QWORD *)&v529 + 1) + 8);
    do
      v287 = __ldaxr(v286);
    while (__stlxr(v287 - 1, v286));
    if (!v287)
    {
      ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
      std::__shared_weak_count::__release_weak(v285);
    }
  }
  if (v530[1])
    *(_BYTE *)(a1 + 550) = v530[0];
  sub_22319ED0C(&v355, a2);
  v527 = operator new(0x48uLL);
  v528 = xmmword_2245C4500;
  strcpy((char *)v527, "com.apple.recon3d.extra.use_kfos_and_room_boundaries_in_occupancy");
  *(_QWORD *)&v529 = "meshing->extra.use_kfos_and_room_boundaries_in_occupancy";
  *((_QWORD *)&v529 + 1) = 56;
  sub_223CA7ACC((uint64_t)&v355, (uint64_t)&v527, (_BYTE *)(a1 + 551), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v288 = v356;
  if (v356)
  {
    v289 = (unint64_t *)&v356->__shared_owners_;
    do
      v290 = __ldaxr(v289);
    while (__stlxr(v290 - 1, v289));
    if (!v290)
    {
      ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
      std::__shared_weak_count::__release_weak(v288);
    }
  }
  sub_22319ED0C(&v353, a2);
  v527 = operator new(0x38uLL);
  v528 = xmmword_2245C43E0;
  strcpy((char *)v527, "com.apple.recon3d.extra.use_room_boundaries_for_prr");
  *(_QWORD *)&v529 = "meshing->extra.use_room_boundaries_for_prr";
  *((_QWORD *)&v529 + 1) = 42;
  sub_223CA7ACC((uint64_t)&v353, (uint64_t)&v527, (_BYTE *)(a1 + 552), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v291 = v354;
  if (v354)
  {
    v292 = (unint64_t *)&v354->__shared_owners_;
    do
      v293 = __ldaxr(v292);
    while (__stlxr(v293 - 1, v292));
    if (!v293)
    {
      ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
      std::__shared_weak_count::__release_weak(v291);
    }
  }
  if (!*(_BYTE *)(a1 + 968))
    goto LABEL_716;
LABEL_674:
  sub_22319ED0C(&v351, a2);
  v527 = operator new(0x38uLL);
  v528 = xmmword_2245C4430;
  strcpy((char *)v527, "com.apple.recon3d.kfplanes.semantic_labels_to_ignore");
  *(_QWORD *)&v529 = "plane_detection->semantic_labels_to_ignore";
  *((_QWORD *)&v529 + 1) = 42;
  sub_223CBD638((uint64_t)&v351, (uint64_t)&v527, a1 + 944, &v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v294 = v352;
  if (v352)
  {
    v295 = (unint64_t *)&v352->__shared_owners_;
    do
      v296 = __ldaxr(v295);
    while (__stlxr(v296 - 1, v295));
    if (!v296)
    {
      ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
      std::__shared_weak_count::__release_weak(v294);
    }
  }
  sub_22319ED0C(&v349, a2);
  v527 = operator new(0x38uLL);
  v528 = xmmword_2245C4430;
  strcpy((char *)v527, "com.apple.recon3d.kfplanes.process_active_depth_mask");
  *(_QWORD *)&v529 = "plane_detection->process_active_depth_mask";
  *((_QWORD *)&v529 + 1) = 42;
  sub_223CA7ACC((uint64_t)&v349, (uint64_t)&v527, (_BYTE *)(a1 + 960), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v297 = v350;
  if (v350)
  {
    v298 = (unint64_t *)&v350->__shared_owners_;
    do
      v299 = __ldaxr(v298);
    while (__stlxr(v299 - 1, v298));
    if (!v299)
    {
      ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
      std::__shared_weak_count::__release_weak(v297);
    }
  }
  sub_22319ED0C(&v347, a2);
  v527 = operator new(0x30uLL);
  v528 = xmmword_2245C4540;
  strcpy((char *)v527, "com.apple.recon3d.kfplanes.min_depth_confidence");
  *(_QWORD *)&v529 = "plane_detection->min_depth_confidence";
  *((_QWORD *)&v529 + 1) = 37;
  sub_223CAE210((uint64_t)&v347, (uint64_t)&v527, (float *)(a1 + 964), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v300 = v348;
  if (v348)
  {
    v301 = (unint64_t *)&v348->__shared_owners_;
    do
      v302 = __ldaxr(v301);
    while (__stlxr(v302 - 1, v301));
    if (!v302)
    {
      ((void (*)(std::__shared_weak_count *))v300->__on_zero_shared)(v300);
      std::__shared_weak_count::__release_weak(v300);
    }
  }
  sub_22319ED0C(&v345, a2);
  v527 = operator new(0x30uLL);
  v528 = xmmword_2245C43D0;
  strcpy((char *)v527, "com.apple.recon3d.kfplanes.plane_fit_threshold");
  *(_QWORD *)&v529 = "plane_detection->plane_fit_threshold";
  *((_QWORD *)&v529 + 1) = 36;
  sub_223CAE210((uint64_t)&v345, (uint64_t)&v527, (float *)(a1 + 888), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v303 = v346;
  if (v346)
  {
    v304 = (unint64_t *)&v346->__shared_owners_;
    do
      v305 = __ldaxr(v304);
    while (__stlxr(v305 - 1, v304));
    if (!v305)
    {
      ((void (*)(std::__shared_weak_count *))v303->__on_zero_shared)(v303);
      std::__shared_weak_count::__release_weak(v303);
    }
  }
  sub_22319ED0C(&v343, a2);
  v527 = operator new(0x38uLL);
  v528 = xmmword_2245C4630;
  strcpy((char *)v527, "com.apple.recon3d.kfplanes.plane_fit_threshold_slanted");
  *(_QWORD *)&v529 = "plane_detection->plane_fit_threshold_slanted";
  *((_QWORD *)&v529 + 1) = 44;
  sub_223CAE210((uint64_t)&v343, (uint64_t)&v527, (float *)(a1 + 892), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v306 = v344;
  if (v344)
  {
    v307 = (unint64_t *)&v344->__shared_owners_;
    do
      v308 = __ldaxr(v307);
    while (__stlxr(v308 - 1, v307));
    if (!v308)
    {
      ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
      std::__shared_weak_count::__release_weak(v306);
    }
  }
  sub_22319ED0C(&v341, a2);
  v527 = operator new(0x28uLL);
  v528 = xmmword_2245C4640;
  strcpy((char *)v527, "com.apple.recon3d.kfplanes.max_depth");
  *(_QWORD *)&v529 = "plane_detection->depth_range.far";
  *((_QWORD *)&v529 + 1) = 32;
  sub_223CAE210((uint64_t)&v341, (uint64_t)&v527, (float *)(a1 + 900), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v309 = v342;
  if (!v342)
    goto LABEL_716;
  v310 = (unint64_t *)&v342->__shared_owners_;
  do
    v311 = __ldaxr(v310);
  while (__stlxr(v311 - 1, v310));
  if (!v311)
  {
    ((void (*)(std::__shared_weak_count *))v309->__on_zero_shared)(v309);
    std::__shared_weak_count::__release_weak(v309);
    if (!*(_BYTE *)(a1 + 1196))
      goto LABEL_723;
  }
  else
  {
LABEL_716:
    if (!*(_BYTE *)(a1 + 1196))
      goto LABEL_723;
  }
  sub_22319ED0C(&v339, a2);
  sub_2232231D0((_BYTE *)(a1 + 1168), (uint64_t)&v339);
  v312 = v340;
  if (v340)
  {
    v313 = (unint64_t *)&v340->__shared_owners_;
    do
      v314 = __ldaxr(v313);
    while (__stlxr(v314 - 1, v313));
    if (!v314)
    {
      ((void (*)(std::__shared_weak_count *))v312->__on_zero_shared)(v312);
      std::__shared_weak_count::__release_weak(v312);
    }
  }
LABEL_723:
  *(_WORD *)v530 = 0;
  sub_22319ED0C(&v529, a2);
  v315 = (char *)operator new(0x30uLL);
  v528 = xmmword_2245C43F0;
  strcpy(v315, "com.apple.recon3d.visibility_map.filter_type");
  v525 = "opt_type";
  v526 = 8;
  v527 = v315;
  sub_223CB268C((uint64_t)&v529, (uint64_t)&v527, (uint64_t)v530, &v525);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v316 = (std::__shared_weak_count *)*((_QWORD *)&v529 + 1);
  if (*((_QWORD *)&v529 + 1))
  {
    v317 = (unint64_t *)(*((_QWORD *)&v529 + 1) + 8);
    do
      v318 = __ldaxr(v317);
    while (__stlxr(v318 - 1, v317));
    if (!v318)
    {
      ((void (*)(std::__shared_weak_count *))v316->__on_zero_shared)(v316);
      std::__shared_weak_count::__release_weak(v316);
    }
  }
  if (v530[1])
    *(_BYTE *)(a1 + 24) = v530[0];
  sub_22319ED0C(&v337, a2);
  v527 = operator new(0x30uLL);
  v528 = xmmword_2245C4540;
  strcpy((char *)v527, "com.apple.recon3d.monitoring.max_event_distance");
  *(_QWORD *)&v529 = "common.monitoring.max_event_distance";
  *((_QWORD *)&v529 + 1) = 36;
  sub_223CAE210((uint64_t)&v337, (uint64_t)&v527, (float *)(a1 + 32), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v319 = v338;
  if (v338)
  {
    v320 = (unint64_t *)&v338->__shared_owners_;
    do
      v321 = __ldaxr(v320);
    while (__stlxr(v321 - 1, v320));
    if (!v321)
    {
      ((void (*)(std::__shared_weak_count *))v319->__on_zero_shared)(v319);
      std::__shared_weak_count::__release_weak(v319);
    }
  }
  sub_22319ED0C(&v335, a2);
  v527 = operator new(0x30uLL);
  v528 = xmmword_2245C4530;
  strcpy((char *)v527, "com.apple.recon3d.monitoring.strobe_after");
  *(_QWORD *)&v529 = "common.monitoring.strobe_after";
  *((_QWORD *)&v529 + 1) = 30;
  sub_223CAC04C((uint64_t)&v335, (uint64_t)&v527, (unsigned int *)(a1 + 36), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v322 = v336;
  if (v336)
  {
    v323 = (unint64_t *)&v336->__shared_owners_;
    do
      v324 = __ldaxr(v323);
    while (__stlxr(v324 - 1, v323));
    if (!v324)
    {
      ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
      std::__shared_weak_count::__release_weak(v322);
    }
  }
  sub_22319ED0C(&v333, a2);
  v527 = operator new(0x30uLL);
  v528 = xmmword_2245C43D0;
  strcpy((char *)v527, "com.apple.recon3d.monitoring.request_occupancy");
  *(_QWORD *)&v529 = "common.monitoring.request_occupancy";
  *((_QWORD *)&v529 + 1) = 35;
  sub_223CA7ACC((uint64_t)&v333, (uint64_t)&v527, (_BYTE *)(a1 + 40), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v325 = v334;
  if (v334)
  {
    v326 = (unint64_t *)&v334->__shared_owners_;
    do
      v327 = __ldaxr(v326);
    while (__stlxr(v327 - 1, v326));
    if (!v327)
    {
      ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
      std::__shared_weak_count::__release_weak(v325);
    }
  }
  sub_22319ED0C(&v331, a2);
  v527 = operator new(0x38uLL);
  v528 = xmmword_2245C44F0;
  strcpy((char *)v527, "com.apple.recon3d.session.allow_failure_snapshot");
  *(_QWORD *)&v529 = "common.persistence.allow_failure_snapshot";
  *((_QWORD *)&v529 + 1) = 41;
  sub_223CA7ACC((uint64_t)&v331, (uint64_t)&v527, (_BYTE *)(a1 + 81), (const char **)&v529);
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  v328 = v332;
  if (v332)
  {
    v329 = (unint64_t *)&v332->__shared_owners_;
    do
      v330 = __ldaxr(v329);
    while (__stlxr(v330 - 1, v329));
    if (!v330)
    {
      ((void (*)(std::__shared_weak_count *))v328->__on_zero_shared)(v328);
      std::__shared_weak_count::__release_weak(v328);
    }
  }
}

void sub_223221C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  sub_223167354((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_223221C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  uint64_t v38;

  if (*(char *)(v38 - 113) < 0)
    operator delete(*(void **)(v38 - 136));
  sub_223167354((uint64_t)&a38);
  _Unwind_Resume(a1);
}

void sub_223221C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  sub_223167354((uint64_t)&a38);
  _Unwind_Resume(a1);
}

void sub_223221C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v40;

  if (*(char *)(v40 - 113) < 0)
    operator delete(*(void **)(v40 - 136));
  sub_223167354((uint64_t)&a40);
  _Unwind_Resume(a1);
}

void sub_223221CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  sub_223167354((uint64_t)&a40);
  _Unwind_Resume(a1);
}

void sub_223221CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  uint64_t v42;

  if (*(char *)(v42 - 113) < 0)
    operator delete(*(void **)(v42 - 136));
  sub_223167354((uint64_t)&a42);
  _Unwind_Resume(a1);
}

void sub_223221CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  sub_223167354((uint64_t)&a42);
  _Unwind_Resume(a1);
}

void sub_223221D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  uint64_t v44;

  if (*(char *)(v44 - 113) < 0)
    operator delete(*(void **)(v44 - 136));
  sub_223167354((uint64_t)&a44);
  _Unwind_Resume(a1);
}

void sub_223221D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  sub_223167354((uint64_t)&a44);
  _Unwind_Resume(a1);
}

void sub_223221D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  uint64_t v46;

  if (*(char *)(v46 - 113) < 0)
    operator delete(*(void **)(v46 - 136));
  sub_223167354((uint64_t)&a46);
  _Unwind_Resume(a1);
}

void sub_223221D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  sub_223167354((uint64_t)&a46);
  _Unwind_Resume(a1);
}

void sub_223221D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  uint64_t v48;

  if (*(char *)(v48 - 113) < 0)
    operator delete(*(void **)(v48 - 136));
  sub_223167354((uint64_t)&a48);
  _Unwind_Resume(a1);
}

void sub_223221D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  sub_223167354((uint64_t)&a48);
  _Unwind_Resume(a1);
}

void sub_223221DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  uint64_t v50;

  if (*(char *)(v50 - 113) < 0)
    operator delete(*(void **)(v50 - 136));
  sub_223167354((uint64_t)&a50);
  _Unwind_Resume(a1);
}

void sub_223221DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  sub_223167354((uint64_t)&a50);
  _Unwind_Resume(a1);
}

void sub_223221DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  uint64_t v52;

  if (*(char *)(v52 - 113) < 0)
    operator delete(*(void **)(v52 - 136));
  sub_223167354((uint64_t)&a52);
  _Unwind_Resume(a1);
}

void sub_223221E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  sub_223167354((uint64_t)&a52);
  _Unwind_Resume(a1);
}

void sub_223221E20(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 113) < 0)
  {
    operator delete(*(void **)(v1 - 136));
    sub_223167354(v1 - 112);
    _Unwind_Resume(a1);
  }
  sub_223167354(v1 - 112);
  _Unwind_Resume(a1);
}

void sub_2232231D0(_BYTE *a1, uint64_t a2)
{
  char *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  char *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  char *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  const char *v62;
  uint64_t v63;
  void *v64;
  __int128 v65;
  uint64_t v66;
  std::__shared_weak_count *v67;

  sub_22319ED0C(&v66, a2);
  v4 = (char *)operator new(0x38uLL);
  v65 = xmmword_2245C44A0;
  strcpy(v4, "com.apple.recon3d.scenequery.verification.enabled");
  v62 = "config.verification_config.enabled";
  v63 = 34;
  v64 = v4;
  sub_223CA7ACC((uint64_t)&v66, (uint64_t)&v64, a1 + 4, &v62);
  if (SHIBYTE(v65) < 0)
    operator delete(v64);
  v5 = v67;
  if (v67)
  {
    p_shared_owners = (unint64_t *)&v67->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_22319ED0C(&v60, a2);
  v8 = (char *)operator new(0x40uLL);
  v65 = xmmword_2245C4440;
  strcpy(v8, "com.apple.recon3d.scenequery.verification.log_failure_verbose");
  v62 = "config.verification_config.log_failure_verbose";
  v63 = 46;
  v64 = v8;
  sub_223CA7ACC((uint64_t)&v60, (uint64_t)&v64, a1 + 5, &v62);
  if (SHIBYTE(v65) < 0)
    operator delete(v64);
  v9 = v61;
  if (v61)
  {
    v10 = (unint64_t *)&v61->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  sub_22319ED0C(&v58, a2);
  v12 = (char *)operator new(0x38uLL);
  v65 = xmmword_2245C4630;
  strcpy(v12, "com.apple.recon3d.scenequery.verification.assert_valid");
  v62 = "config.verification_config.assert_valid";
  v63 = 39;
  v64 = v12;
  sub_223CA7ACC((uint64_t)&v58, (uint64_t)&v64, a1 + 6, &v62);
  if (SHIBYTE(v65) < 0)
    operator delete(v64);
  v13 = v59;
  if (v59)
  {
    v14 = (unint64_t *)&v59->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_22319ED0C(&v56, a2);
  v64 = operator new(0x50uLL);
  v65 = xmmword_2245C4450;
  strcpy((char *)v64, "com.apple.recon3d.scenequery.verification.kfseg_lookup_missing_gp_is_error");
  v62 = "config.verification_config.kfseg_lookup_missing_gp_is_error";
  v63 = 59;
  sub_223CA7ACC((uint64_t)&v56, (uint64_t)&v64, a1 + 7, &v62);
  if (SHIBYTE(v65) < 0)
    operator delete(v64);
  v16 = v57;
  if (v57)
  {
    v17 = (unint64_t *)&v57->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  sub_22319ED0C(&v54, a2);
  v19 = (char *)operator new(0x40uLL);
  v65 = xmmword_2245C4440;
  strcpy(v19, "com.apple.recon3d.scenequery.verification.verify_kfseg_labels");
  v62 = "config.verification_config.verify_kfseg_labels";
  v63 = 46;
  v64 = v19;
  sub_223CA7ACC((uint64_t)&v54, (uint64_t)&v64, a1 + 8, &v62);
  if (SHIBYTE(v65) < 0)
    operator delete(v64);
  v20 = v55;
  if (v55)
  {
    v21 = (unint64_t *)&v55->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  sub_22319ED0C(&v52, a2);
  v23 = (char *)operator new(0x40uLL);
  v65 = xmmword_2245C44B0;
  strcpy(v23, "com.apple.recon3d.scenequery.roomplaneassociations.enabled");
  v62 = "config.room_plane_associations.enabled";
  v63 = 38;
  v64 = v23;
  sub_223CA7ACC((uint64_t)&v52, (uint64_t)&v64, a1 + 12, &v62);
  if (SHIBYTE(v65) < 0)
    operator delete(v64);
  v24 = v53;
  if (v53)
  {
    v25 = (unint64_t *)&v53->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  sub_22319ED0C(&v50, a2);
  v64 = operator new(0x60uLL);
  v65 = xmmword_2245B9410;
  strcpy((char *)v64, "com.apple.recon3d.scenequery.roomplaneassociations.exclude_keyframes_outside_room_boundary");
  v62 = "config.room_plane_associations.exclude_keyframes_outside_room_boundary";
  v63 = 70;
  sub_223CA7ACC((uint64_t)&v50, (uint64_t)&v64, a1 + 13, &v62);
  if (SHIBYTE(v65) < 0)
    operator delete(v64);
  v27 = v51;
  if (v51)
  {
    v28 = (unint64_t *)&v51->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  sub_22319ED0C(&v48, a2);
  v64 = operator new(0x58uLL);
  v65 = xmmword_2245C4650;
  strcpy((char *)v64, "com.apple.recon3d.scenequery.roomplaneassociations.exclude_planes_outside_room_boundary");
  v62 = "config.room_plane_associations.exclude_planes_outside_room_boundary";
  v63 = 67;
  sub_223CA7ACC((uint64_t)&v48, (uint64_t)&v64, a1 + 14, &v62);
  if (SHIBYTE(v65) < 0)
    operator delete(v64);
  v30 = v49;
  if (v49)
  {
    v31 = (unint64_t *)&v49->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  sub_22319ED0C(&v46, a2);
  v64 = operator new(0x48uLL);
  v65 = xmmword_2245C4590;
  strcpy((char *)v64, "com.apple.recon3d.scenequery.roomplaneassociations.consider_other_rooms");
  v62 = "config.room_plane_associations.consider_other_rooms";
  v63 = 51;
  sub_223CA7ACC((uint64_t)&v46, (uint64_t)&v64, a1 + 15, &v62);
  if (SHIBYTE(v65) < 0)
    operator delete(v64);
  v33 = v47;
  if (v47)
  {
    v34 = (unint64_t *)&v47->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  sub_22319ED0C(&v44, a2);
  v64 = operator new(0x50uLL);
  v65 = xmmword_2245C4620;
  strcpy((char *)v64, "com.apple.recon3d.scenequery.roomplaneassociations.consider_secondary_rooms");
  v62 = "config.room_plane_associations.consider_secondary_rooms";
  v63 = 55;
  sub_223CA7ACC((uint64_t)&v44, (uint64_t)&v64, a1 + 16, &v62);
  if (SHIBYTE(v65) < 0)
    operator delete(v64);
  v36 = v45;
  if (v45)
  {
    v37 = (unint64_t *)&v45->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  sub_22319ED0C(&v42, a2);
  v64 = operator new(0x58uLL);
  v65 = xmmword_2245C4600;
  strcpy((char *)v64, "com.apple.recon3d.scenequery.roomplaneassociations.approximate_room_boundary_overlap");
  v62 = "config.room_plane_associations.approximate_room_boundary_overlap";
  v63 = 64;
  sub_223CA7ACC((uint64_t)&v42, (uint64_t)&v64, a1 + 17, &v62);
  if (SHIBYTE(v65) < 0)
    operator delete(v64);
  v39 = v43;
  if (v43)
  {
    v40 = (unint64_t *)&v43->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
}

void sub_2232239F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  if (*(char *)(v4 - 65) < 0)
    operator delete(*(void **)(v4 - 88));
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223223A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  if (*(char *)(v6 - 65) < 0)
    operator delete(*(void **)(v6 - 88));
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223223A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223223A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  if (*(char *)(v8 - 65) < 0)
    operator delete(*(void **)(v8 - 88));
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223223A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223223A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);
  if (*(char *)(v10 - 65) < 0)
    operator delete(*(void **)(v10 - 88));
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223223AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223223AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  va_list va;

  va_start(va, a12);
  if (*(char *)(v12 - 65) < 0)
    operator delete(*(void **)(v12 - 88));
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223223AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223223B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v14;
  va_list va;

  va_start(va, a14);
  if (*(char *)(v14 - 65) < 0)
    operator delete(*(void **)(v14 - 88));
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223223B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223223B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v16;
  va_list va;

  va_start(va, a16);
  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223223B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223223B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;

  if (*(char *)(v26 - 65) < 0)
    operator delete(*(void **)(v26 - 88));
  sub_223167354((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_223223B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_223167354((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_223223BA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 65) < 0)
    operator delete(*(void **)(v1 - 88));
  sub_223167354(v1 - 136);
  _Unwind_Resume(a1);
}

void sub_223223BCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1 - 136);
  _Unwind_Resume(a1);
}

void sub_223223BE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 65) < 0)
    operator delete(*(void **)(v1 - 88));
  sub_223167354(v1 - 120);
  _Unwind_Resume(a1);
}

void sub_223223C04(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1 - 120);
  _Unwind_Resume(a1);
}

void sub_223223C18(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 65) < 0)
    operator delete(*(void **)(v1 - 88));
  sub_223167354(v1 - 64);
  _Unwind_Resume(a1);
}

void sub_223223C3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1 - 64);
  _Unwind_Resume(a1);
}

uint64_t sub_223223C50(uint64_t a1)
{
  char *v7;
  char *v8;

  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 0;
  strcpy((char *)(a1 + 12), "333?");
  *(_DWORD *)(a1 + 20) = 1084227584;
  *(_BYTE *)(a1 + 24) = 2;
  *(_WORD *)(a1 + 28) = 256;
  *(_QWORD *)(a1 + 32) = 0x340E00000;
  *(_WORD *)(a1 + 40) = 257;
  *(_BYTE *)(a1 + 72) = 0;
  *(_WORD *)(a1 + 80) = 256;
  *(_DWORD *)(a1 + 44) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 88) = 1041918801;
  *(_BYTE *)(a1 + 92) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 116) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 124) = 0;
  *(_QWORD *)(a1 + 128) = 0x3F80000000000002;
  *(_DWORD *)(a1 + 136) = 400;
  *(_WORD *)(a1 + 140) = 257;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_DWORD *)(a1 + 144) = 1065353216;
  *(_DWORD *)(a1 + 164) = 1065353216;
  *(_DWORD *)(a1 + 184) = 1065353216;
  *(_OWORD *)(a1 + 228) = 0u;
  *(_OWORD *)(a1 + 244) = 0u;
  *(_OWORD *)(a1 + 212) = 0u;
  *(_QWORD *)(a1 + 260) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(a1 + 204) = _D1;
  *(_DWORD *)(a1 + 228) = 1065353216;
  *(_DWORD *)(a1 + 248) = 1065353216;
  *(_DWORD *)(a1 + 268) = 1065353216;
  *(_BYTE *)(a1 + 272) = 1;
  *(_BYTE *)(a1 + 280) = 0;
  *(_BYTE *)(a1 + 560) = 0;
  *(_BYTE *)(a1 + 568) = 0;
  *(_BYTE *)(a1 + 880) = 0;
  *(_BYTE *)(a1 + 888) = 0;
  *(_BYTE *)(a1 + 968) = 0;
  *(_BYTE *)(a1 + 976) = 0;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_BYTE *)(a1 + 1055) = 11;
  strcpy((char *)(a1 + 1032), "FrameBundle");
  v7 = (char *)operator new(0x20uLL);
  *(_QWORD *)(a1 + 1056) = v7;
  *(_QWORD *)(a1 + 1072) = 0x8000000000000020;
  *(_QWORD *)(a1 + 1064) = 24;
  strcpy(v7, "KeyframeEngineResultSync");
  v8 = (char *)operator new(0x20uLL);
  *(_QWORD *)(a1 + 1080) = v8;
  *(_OWORD *)(a1 + 1088) = xmmword_2245B9420;
  strcpy(v8, "ProcessFrameBundleResult");
  *(_BYTE *)(a1 + 1127) = 20;
  strcpy((char *)(a1 + 1104), "PlaneDetectionReturn");
  *(_BYTE *)(a1 + 1151) = 13;
  strcpy((char *)(a1 + 1128), "MeshingReturn");
  *(_QWORD *)(a1 + 1152) = 50;
  *(_DWORD *)(a1 + 1160) = 1114636288;
  *(_BYTE *)(a1 + 1168) = 0;
  *(_BYTE *)(a1 + 1196) = 0;
  return a1;
}

void sub_223223E8C(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  void *v3;
  void **v4;
  void *v5;

  v5 = v3;
  operator delete(v5);
  if (*(char *)(v1 + 1055) < 0)
    operator delete(*v4);
  sub_223223EDC(v2);
  if (*(_BYTE *)(v1 + 72))
  {
    if (*(char *)(v1 + 71) < 0)
      operator delete(*(void **)(v1 + 48));
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_223223EDC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[3];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[3];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[1];
  if (!v8)
    return a1;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

uint64_t sub_223223FC0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  if (*(char *)(a1 + 1151) < 0)
  {
    operator delete(*(void **)(a1 + 1128));
    if ((*(char *)(a1 + 1127) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 1103) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(char *)(a1 + 1127) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 1104));
  if ((*(char *)(a1 + 1103) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 1079) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*(void **)(a1 + 1080));
  if ((*(char *)(a1 + 1079) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(a1 + 1055) & 0x80000000) == 0)
      goto LABEL_6;
LABEL_12:
    operator delete(*(void **)(a1 + 1032));
    v2 = *(std::__shared_weak_count **)(a1 + 1024);
    if (!v2)
      goto LABEL_16;
    goto LABEL_13;
  }
LABEL_11:
  operator delete(*(void **)(a1 + 1056));
  if (*(char *)(a1 + 1055) < 0)
    goto LABEL_12;
LABEL_6:
  v2 = *(std::__shared_weak_count **)(a1 + 1024);
  if (!v2)
    goto LABEL_16;
LABEL_13:
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_16:
    v5 = *(std::__shared_weak_count **)(a1 + 1008);
    if (!v5)
      goto LABEL_22;
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 1008);
  if (!v5)
    goto LABEL_22;
LABEL_17:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_22:
  v8 = *(std::__shared_weak_count **)(a1 + 992);
  if (!v8)
    goto LABEL_26;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!*(_BYTE *)(a1 + 72))
      return a1;
  }
  else
  {
LABEL_26:
    if (!*(_BYTE *)(a1 + 72))
      return a1;
  }
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 48));
  return a1;
}

void sub_223224144(std::__shared_weak_count_vtbl **a1@<X8>)
{
  id v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count_vtbl *v18;
  void *__p[2];
  char v20;

  v2 = objc_alloc(MEMORY[0x24BDBCF50]);
  v20 = 14;
  strcpy((char *)__p, "Recon3D Domain");
  objc_msgSend_stringWithUTF8String_(MEMORY[0x24BDD17C8], v3, (uint64_t)__p, v4, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = (void *)objc_msgSend_initWithSuiteName_(v2, v8, (uint64_t)v7, v9, v10, v11);

  if (v20 < 0)
    operator delete(__p[0]);
  v18 = (std::__shared_weak_count_vtbl *)objc_msgSend_dictionaryRepresentation(v12, v13, v14, v15, v16, v17);
  sub_224528A88(a1, v18, 1);

}

void sub_2232241FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_223224234(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  if (*(_BYTE *)(result + 16))
  {
    v2 = *(std::__shared_weak_count **)(result + 8);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        return v1;
      }
    }
  }
  return result;
}

void sub_2232242A8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2232242CC(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    j__CFRelease(v1);
}

uint64_t sub_2232242EC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIP14__CFDictionaryEC1ES4_EUlS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIP14__CFDictionaryEC1ES4_EUlS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIP14__CFDictionaryEC1ES4_EUlS4_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIP14__CFDictionaryEC1ES4_EUlS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_22322435C(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  std::__shared_weak_count_vtbl *v37;
  std::__shared_weak_count *v38;
  uint64_t v39[34];

  v3 = a1;
  if (v3)
  {
    sub_2232245E4((uint64_t)v39, v3);
    v4 = (std::__shared_weak_count_vtbl *)v3;
    v37 = v4;
    v5 = (std::__shared_weak_count *)operator new();
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC25950;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = v4;
    v38 = v5;
    sub_223225340(&v14, v39);
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)a2 = v14;
    *(_QWORD *)(a2 + 24) = v16;
    *(_QWORD *)(a2 + 48) = v18;
    *(_QWORD *)(a2 + 72) = v20;
    *(_QWORD *)(a2 + 96) = v22;
    *(_QWORD *)(a2 + 120) = v24;
    v8 = v28;
    *(_QWORD *)(a2 + 144) = v26;
    *(_QWORD *)(a2 + 168) = v8;
    v9 = v32;
    *(_QWORD *)(a2 + 192) = v30;
    *(_QWORD *)(a2 + 216) = v9;
    v10 = v36;
    *(_QWORD *)(a2 + 240) = v34;
    *(_OWORD *)(a2 + 8) = v15;
    v15 = 0uLL;
    *(_OWORD *)(a2 + 32) = v17;
    v16 = 0;
    v17 = 0uLL;
    v18 = 0;
    *(_OWORD *)(a2 + 56) = v19;
    v19 = 0uLL;
    *(_OWORD *)(a2 + 80) = v21;
    v20 = 0;
    v21 = 0uLL;
    v22 = 0;
    *(_OWORD *)(a2 + 104) = v23;
    v23 = 0uLL;
    *(_OWORD *)(a2 + 128) = v25;
    v24 = 0;
    v25 = 0uLL;
    v26 = 0;
    *(_OWORD *)(a2 + 152) = v27;
    v27 = 0uLL;
    *(_OWORD *)(a2 + 176) = v29;
    v28 = 0;
    v29 = 0uLL;
    v30 = 0;
    *(_OWORD *)(a2 + 200) = v31;
    v31 = 0uLL;
    *(_OWORD *)(a2 + 224) = v33;
    v32 = 0;
    v33 = 0uLL;
    v34 = 0;
    *(_OWORD *)(a2 + 248) = v35;
    v35 = 0uLL;
    v36 = 0;
    *(_QWORD *)(a2 + 264) = v10;
    *(_QWORD *)(a2 + 272) = v4;
    *(_QWORD *)(a2 + 280) = v5;
    v11 = v38;
    sub_223167284(&v14);
    *(_BYTE *)(a2 + 288) = 1;
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    sub_223167284(v39);
  }
  else
  {
    *(_QWORD *)(a2 + 288) = 0;
    *(_OWORD *)(a2 + 256) = 0u;
    *(_OWORD *)(a2 + 272) = 0u;
    *(_OWORD *)(a2 + 224) = 0u;
    *(_OWORD *)(a2 + 240) = 0u;
    *(_OWORD *)(a2 + 192) = 0u;
    *(_OWORD *)(a2 + 208) = 0u;
    *(_OWORD *)(a2 + 160) = 0u;
    *(_OWORD *)(a2 + 176) = 0u;
    *(_OWORD *)(a2 + 128) = 0u;
    *(_OWORD *)(a2 + 144) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 112) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }

}

void sub_223224590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45)
{
  void *v45;

  sub_223167354((uint64_t)&a43);
  sub_223167284(&a45);

  _Unwind_Resume(a1);
}

void sub_2232245D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2232245E4(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const void *v27;
  size_t v28;
  char *v29;
  char *v30;
  void *v31;
  _QWORD *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const void *v44;
  char *v45;
  char *v46;
  void *v47;
  _QWORD *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const void *v60;
  char *v61;
  char *v62;
  void *v63;
  _QWORD *v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  const void *v76;
  char *v77;
  char *v78;
  void *v79;
  _QWORD *v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  const void *v92;
  char *v93;
  char *v94;
  void *v95;
  _QWORD *v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  const void *v108;
  char *v109;
  char *v110;
  void *v111;
  _QWORD *v112;
  const char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  const void *v124;
  size_t v125;
  char *v126;
  char *v127;
  void *v128;
  _QWORD *v129;
  const char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  const char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  const void *v141;
  char *v142;
  char *v143;
  void *v144;
  _QWORD *v145;
  const char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  const char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  const void *v157;
  char *v158;
  char *v159;
  void *v160;
  _QWORD *v161;
  const char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  const char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  const void *v173;
  char *v174;
  char *v175;
  void *v176;
  _QWORD *v177;
  const char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  const void *v184;
  char *v185;
  char *v186;
  void *v187;
  _QWORD *v188;
  id v189;

  v3 = a2;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  v189 = v3;
  v9 = objc_msgSend_length(v3, v4, v5, v6, v7, v8);
  v10 = v9;
  *(_QWORD *)a1 = v9;
  if (!objc_msgSend_points(v189, v11, v12, v13, v14, v15)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/AppleDepth/src/JasperPointCloudObjc.mm", 49, (uint64_t)"cloud.points", 12, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
LABEL_124:
    abort();
  }
  v21 = objc_msgSend_points(v189, v16, v17, v18, v19, v20);
  v27 = (const void *)v21;
  if (!v9 || v21)
  {
    v28 = 16 * v9;
    if (!v9)
    {
      v30 = 0;
      v29 = 0;
      v32 = (_QWORD *)(a1 + 8);
      v31 = *(void **)(a1 + 8);
      if (!v31)
        goto LABEL_11;
      goto LABEL_10;
    }
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v28 = 16 * v9;
  }
  if (v9 < 0)
    sub_22316E078();
  v29 = (char *)operator new(v28);
  v30 = &v29[16 * v9];
  memcpy(v29, v27, v28);
  v32 = (_QWORD *)(a1 + 8);
  v31 = *(void **)(a1 + 8);
  if (v31)
  {
LABEL_10:
    *(_QWORD *)(a1 + 16) = v31;
    operator delete(v31);
    *v32 = 0;
    v32[1] = 0;
    v32[2] = 0;
  }
LABEL_11:
  *(_QWORD *)(a1 + 8) = v29;
  *(_QWORD *)(a1 + 16) = v30;
  *(_QWORD *)(a1 + 24) = v30;
  if (!objc_msgSend_undistortedCameraPixels(v189, v22, v23, v24, v25, v26)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/AppleDepth/src/JasperPointCloudObjc.mm", 51, (uint64_t)"cloud.undistortedCameraPixels", 29, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_124;
  }
  v38 = objc_msgSend_undistortedCameraPixels(v189, v33, v34, v35, v36, v37);
  v44 = (const void *)v38;
  if (!v9 || v38)
  {
    if (!v9)
    {
      v46 = 0;
      v45 = 0;
      v48 = (_QWORD *)(a1 + 32);
      v47 = *(void **)(a1 + 32);
      if (!v47)
        goto LABEL_20;
      goto LABEL_19;
    }
  }
  else if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v45 = (char *)operator new(v28);
  v46 = &v45[16 * v9];
  memcpy(v45, v44, v28);
  v48 = (_QWORD *)(a1 + 32);
  v47 = *(void **)(a1 + 32);
  if (v47)
  {
LABEL_19:
    *(_QWORD *)(a1 + 40) = v47;
    operator delete(v47);
    *v48 = 0;
    v48[1] = 0;
    v48[2] = 0;
  }
LABEL_20:
  *(_QWORD *)(a1 + 32) = v45;
  *(_QWORD *)(a1 + 40) = v46;
  *(_QWORD *)(a1 + 48) = v46;
  if (!objc_msgSend_cameraPixels(v189, v39, v40, v41, v42, v43)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/AppleDepth/src/JasperPointCloudObjc.mm", 54, (uint64_t)"cloud.cameraPixels", 18, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_124;
  }
  v54 = objc_msgSend_cameraPixels(v189, v49, v50, v51, v52, v53);
  v60 = (const void *)v54;
  if (!v9 || v54)
  {
    if (!v9)
    {
      v62 = 0;
      v61 = 0;
      v64 = (_QWORD *)(a1 + 56);
      v63 = *(void **)(a1 + 56);
      if (!v63)
        goto LABEL_29;
      goto LABEL_28;
    }
  }
  else if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v61 = (char *)operator new(v28);
  v62 = &v61[16 * v9];
  memcpy(v61, v60, v28);
  v64 = (_QWORD *)(a1 + 56);
  v63 = *(void **)(a1 + 56);
  if (v63)
  {
LABEL_28:
    *(_QWORD *)(a1 + 64) = v63;
    operator delete(v63);
    *v64 = 0;
    v64[1] = 0;
    v64[2] = 0;
  }
LABEL_29:
  *(_QWORD *)(a1 + 56) = v61;
  *(_QWORD *)(a1 + 64) = v62;
  *(_QWORD *)(a1 + 72) = v62;
  if (!objc_msgSend_echoIds(v189, v55, v56, v57, v58, v59)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/AppleDepth/src/JasperPointCloudObjc.mm", 56, (uint64_t)"cloud.echoIds", 13, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_124;
  }
  v70 = objc_msgSend_echoIds(v189, v65, v66, v67, v68, v69);
  v76 = (const void *)v70;
  if (!v9 || v70)
  {
    if (!v9)
    {
      v78 = 0;
      v77 = 0;
      v80 = (_QWORD *)(a1 + 80);
      v79 = *(void **)(a1 + 80);
      if (!v79)
        goto LABEL_38;
      goto LABEL_37;
    }
  }
  else if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v77 = (char *)operator new(v9);
  v78 = &v77[v9];
  memcpy(v77, v76, v9);
  v80 = (_QWORD *)(a1 + 80);
  v79 = *(void **)(a1 + 80);
  if (v79)
  {
LABEL_37:
    *(_QWORD *)(a1 + 88) = v79;
    operator delete(v79);
    *v80 = 0;
    v80[1] = 0;
    v80[2] = 0;
  }
LABEL_38:
  *(_QWORD *)(a1 + 80) = v77;
  *(_QWORD *)(a1 + 88) = v78;
  *(_QWORD *)(a1 + 96) = v78;
  if (!objc_msgSend_bankIds(v189, v71, v72, v73, v74, v75)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/AppleDepth/src/JasperPointCloudObjc.mm", 58, (uint64_t)"cloud.bankIds", 13, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_124;
  }
  v86 = objc_msgSend_bankIds(v189, v81, v82, v83, v84, v85);
  v92 = (const void *)v86;
  if (!v9 || v86)
  {
    if (!v9)
    {
      v94 = 0;
      v93 = 0;
      v96 = (_QWORD *)(a1 + 104);
      v95 = *(void **)(a1 + 104);
      if (!v95)
        goto LABEL_47;
      goto LABEL_46;
    }
  }
  else if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v93 = (char *)operator new(v9);
  v94 = &v93[v9];
  memcpy(v93, v92, v9);
  v96 = (_QWORD *)(a1 + 104);
  v95 = *(void **)(a1 + 104);
  if (v95)
  {
LABEL_46:
    *(_QWORD *)(a1 + 112) = v95;
    operator delete(v95);
    *v96 = 0;
    v96[1] = 0;
    v96[2] = 0;
  }
LABEL_47:
  *(_QWORD *)(a1 + 104) = v93;
  *(_QWORD *)(a1 + 112) = v94;
  *(_QWORD *)(a1 + 120) = v94;
  if (!objc_msgSend_spotIds(v189, v87, v88, v89, v90, v91)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/AppleDepth/src/JasperPointCloudObjc.mm", 60, (uint64_t)"cloud.spotIds", 13, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_124;
  }
  v102 = objc_msgSend_spotIds(v189, v97, v98, v99, v100, v101);
  v108 = (const void *)v102;
  if (!v9 || v102)
  {
    if (!v9)
    {
      v110 = 0;
      v109 = 0;
      v112 = (_QWORD *)(a1 + 128);
      v111 = *(void **)(a1 + 128);
      if (!v111)
        goto LABEL_56;
      goto LABEL_55;
    }
  }
  else if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v109 = (char *)operator new(v9);
  v110 = &v109[v9];
  memcpy(v109, v108, v9);
  v112 = (_QWORD *)(a1 + 128);
  v111 = *(void **)(a1 + 128);
  if (v111)
  {
LABEL_55:
    *(_QWORD *)(a1 + 136) = v111;
    operator delete(v111);
    *v112 = 0;
    v112[1] = 0;
    v112[2] = 0;
  }
LABEL_56:
  *(_QWORD *)(a1 + 128) = v109;
  *(_QWORD *)(a1 + 136) = v110;
  *(_QWORD *)(a1 + 144) = v110;
  if (!objc_msgSend_confidences(v189, v103, v104, v105, v106, v107)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/AppleDepth/src/JasperPointCloudObjc.mm", 62, (uint64_t)"cloud.confidences", 17, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_124;
  }
  v118 = objc_msgSend_confidences(v189, v113, v114, v115, v116, v117);
  v124 = (const void *)v118;
  if (!v9 || v118)
  {
    if (!v9)
    {
      v127 = 0;
      v126 = 0;
      v125 = 0;
      v129 = (_QWORD *)(a1 + 152);
      v128 = *(void **)(a1 + 152);
      if (!v128)
        goto LABEL_65;
      goto LABEL_64;
    }
  }
  else if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v125 = 4 * v9;
  v126 = (char *)operator new(v125);
  v127 = &v126[v125];
  memcpy(v126, v124, v125);
  v129 = (_QWORD *)(a1 + 152);
  v128 = *(void **)(a1 + 152);
  if (v128)
  {
LABEL_64:
    *(_QWORD *)(a1 + 160) = v128;
    operator delete(v128);
    *v129 = 0;
    v129[1] = 0;
    v129[2] = 0;
  }
LABEL_65:
  *(_QWORD *)(a1 + 152) = v126;
  *(_QWORD *)(a1 + 160) = v127;
  *(_QWORD *)(a1 + 168) = v127;
  if (!objc_msgSend_signalToNoiseRatios(v189, v119, v120, v121, v122, v123)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/AppleDepth/src/JasperPointCloudObjc.mm", 64, (uint64_t)"cloud.signalToNoiseRatios", 25, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_124;
  }
  v135 = objc_msgSend_signalToNoiseRatios(v189, v130, v131, v132, v133, v134);
  v141 = (const void *)v135;
  if (!v9 || v135)
  {
    if (!v9)
    {
      v143 = 0;
      v142 = 0;
      v145 = (_QWORD *)(a1 + 176);
      v144 = *(void **)(a1 + 176);
      if (!v144)
        goto LABEL_74;
      goto LABEL_73;
    }
  }
  else if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v142 = (char *)operator new(v125);
  v143 = &v142[4 * v9];
  memcpy(v142, v141, v125);
  v145 = (_QWORD *)(a1 + 176);
  v144 = *(void **)(a1 + 176);
  if (v144)
  {
LABEL_73:
    *(_QWORD *)(a1 + 184) = v144;
    operator delete(v144);
    *v145 = 0;
    v145[1] = 0;
    v145[2] = 0;
  }
LABEL_74:
  *(_QWORD *)(a1 + 176) = v142;
  *(_QWORD *)(a1 + 184) = v143;
  *(_QWORD *)(a1 + 192) = v143;
  if (!objc_msgSend_intensities(v189, v136, v137, v138, v139, v140)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/AppleDepth/src/JasperPointCloudObjc.mm", 66, (uint64_t)"cloud.intensities", 17, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_124;
  }
  v151 = objc_msgSend_intensities(v189, v146, v147, v148, v149, v150);
  v157 = (const void *)v151;
  if (!v9 || v151)
  {
    if (!v9)
    {
      v159 = 0;
      v158 = 0;
      v161 = (_QWORD *)(a1 + 200);
      v160 = *(void **)(a1 + 200);
      if (!v160)
        goto LABEL_83;
      goto LABEL_82;
    }
  }
  else if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v158 = (char *)operator new(v125);
  v159 = &v158[4 * v9];
  memcpy(v158, v157, v125);
  v161 = (_QWORD *)(a1 + 200);
  v160 = *(void **)(a1 + 200);
  if (v160)
  {
LABEL_82:
    *(_QWORD *)(a1 + 208) = v160;
    operator delete(v160);
    *v161 = 0;
    v161[1] = 0;
    v161[2] = 0;
  }
LABEL_83:
  *(_QWORD *)(a1 + 200) = v158;
  *(_QWORD *)(a1 + 208) = v159;
  *(_QWORD *)(a1 + 216) = v159;
  if (!objc_msgSend_euclideanDistances(v189, v152, v153, v154, v155, v156)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/AppleDepth/src/JasperPointCloudObjc.mm", 68, (uint64_t)"cloud.euclideanDistances", 24, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_124;
  }
  v167 = objc_msgSend_euclideanDistances(v189, v162, v163, v164, v165, v166);
  v173 = (const void *)v167;
  if (!v9 || v167)
  {
    if (!v9)
    {
      v175 = 0;
      v174 = 0;
      v177 = (_QWORD *)(a1 + 224);
      v176 = *(void **)(a1 + 224);
      if (!v176)
        goto LABEL_92;
      goto LABEL_91;
    }
  }
  else if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v174 = (char *)operator new(v125);
  v175 = &v174[4 * v9];
  memcpy(v174, v173, v125);
  v177 = (_QWORD *)(a1 + 224);
  v176 = *(void **)(a1 + 224);
  if (v176)
  {
LABEL_91:
    *(_QWORD *)(a1 + 232) = v176;
    operator delete(v176);
    *v177 = 0;
    v177[1] = 0;
    v177[2] = 0;
  }
LABEL_92:
  *(_QWORD *)(a1 + 224) = v174;
  *(_QWORD *)(a1 + 232) = v175;
  *(_QWORD *)(a1 + 240) = v175;
  if (!objc_msgSend_flags(v189, v168, v169, v170, v171, v172)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/AppleDepth/src/JasperPointCloudObjc.mm", 70, (uint64_t)"cloud.flags", 11, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_124;
  }
  v183 = objc_msgSend_flags(v189, v178, v179, v180, v181, v182);
  v184 = (const void *)v183;
  if (!v9 || v183)
  {
    if (!v9)
    {
      v186 = 0;
      v185 = 0;
      v188 = (_QWORD *)(a1 + 248);
      v187 = *(void **)(a1 + 248);
      if (!v187)
        goto LABEL_101;
      goto LABEL_100;
    }
  }
  else if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v185 = (char *)operator new(v125);
  v186 = &v185[4 * v10];
  memcpy(v185, v184, v125);
  v188 = (_QWORD *)(a1 + 248);
  v187 = *(void **)(a1 + 248);
  if (v187)
  {
LABEL_100:
    *(_QWORD *)(a1 + 256) = v187;
    operator delete(v187);
    *v188 = 0;
    v188[1] = 0;
    v188[2] = 0;
  }
LABEL_101:
  *(_QWORD *)(a1 + 248) = v185;
  *(_QWORD *)(a1 + 256) = v186;
  *(_QWORD *)(a1 + 264) = v186;

}

void sub_2232250CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, void *__p, uint64_t a11)
{
  _QWORD *v11;

  sub_223167284(v11);

  _Unwind_Resume(a1);
}

void sub_223225168(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30[34];

  v3 = a1;
  if (v3)
  {
    sub_2232245E4((uint64_t)v30, v3);
    sub_223225340(&v7, v30);
    *(_QWORD *)a2 = v7;
    *(_QWORD *)(a2 + 24) = v9;
    *(_QWORD *)(a2 + 48) = v11;
    *(_QWORD *)(a2 + 72) = v13;
    *(_QWORD *)(a2 + 96) = v15;
    *(_QWORD *)(a2 + 120) = v17;
    v4 = v21;
    *(_QWORD *)(a2 + 144) = v19;
    *(_QWORD *)(a2 + 168) = v4;
    v5 = v25;
    *(_QWORD *)(a2 + 192) = v23;
    *(_QWORD *)(a2 + 216) = v5;
    v6 = v29;
    *(_QWORD *)(a2 + 240) = v27;
    *(_OWORD *)(a2 + 8) = v8;
    v8 = 0uLL;
    *(_OWORD *)(a2 + 32) = v10;
    v9 = 0;
    v10 = 0uLL;
    v11 = 0;
    *(_OWORD *)(a2 + 56) = v12;
    v12 = 0uLL;
    *(_OWORD *)(a2 + 80) = v14;
    v13 = 0;
    v14 = 0uLL;
    v15 = 0;
    *(_OWORD *)(a2 + 104) = v16;
    v16 = 0uLL;
    *(_OWORD *)(a2 + 128) = v18;
    v17 = 0;
    v18 = 0uLL;
    v19 = 0;
    *(_OWORD *)(a2 + 152) = v20;
    v20 = 0uLL;
    *(_OWORD *)(a2 + 176) = v22;
    v21 = 0;
    v22 = 0uLL;
    v23 = 0;
    *(_OWORD *)(a2 + 200) = v24;
    v24 = 0uLL;
    *(_OWORD *)(a2 + 224) = v26;
    v25 = 0;
    v26 = 0uLL;
    v27 = 0;
    *(_OWORD *)(a2 + 248) = v28;
    v28 = 0uLL;
    v29 = 0;
    *(_QWORD *)(a2 + 272) = 0;
    *(_QWORD *)(a2 + 280) = 0;
    *(_QWORD *)(a2 + 264) = v6;
    sub_223167284(&v7);
    *(_BYTE *)(a2 + 288) = 0;
    sub_223167284(v30);

  }
  else
  {
    *(_QWORD *)(a2 + 288) = 0;
    *(_OWORD *)(a2 + 256) = 0u;
    *(_OWORD *)(a2 + 272) = 0u;
    *(_OWORD *)(a2 + 224) = 0u;
    *(_OWORD *)(a2 + 240) = 0u;
    *(_OWORD *)(a2 + 192) = 0u;
    *(_OWORD *)(a2 + 208) = 0u;
    *(_OWORD *)(a2 + 160) = 0u;
    *(_OWORD *)(a2 + 176) = 0u;
    *(_OWORD *)(a2 + 128) = 0u;
    *(_OWORD *)(a2 + 144) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 112) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;

  }
}

void sub_223225318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  void *v43;

  sub_223167284(&a43);

  _Unwind_Resume(a1);
}

void sub_223225330(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *sub_223225340(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  char *v14;
  _BYTE *v15;
  _BYTE *v16;
  int64_t v17;
  char *v18;
  char *v19;
  _BYTE *v20;
  _BYTE *v21;
  size_t v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  size_t v27;
  char *v28;
  char *v29;
  _BYTE *v30;
  _BYTE *v31;
  size_t v32;
  char *v33;
  char *v34;
  _BYTE *v35;
  _BYTE *v36;
  int64_t v37;
  char *v38;
  char *v39;
  _BYTE *v40;
  _BYTE *v41;
  int64_t v42;
  char *v43;
  char *v44;
  _BYTE *v45;
  _BYTE *v46;
  int64_t v47;
  char *v48;
  char *v49;
  _BYTE *v50;
  _BYTE *v51;
  int64_t v52;
  char *v53;
  char *v54;
  _BYTE *v55;
  _BYTE *v56;
  int64_t v57;
  char *v58;
  char *v59;

  v4 = *a2;
  a1[1] = 0;
  *a1 = v4;
  a1[2] = 0;
  a1[3] = 0;
  v6 = (_BYTE *)a2[1];
  v5 = (_BYTE *)a2[2];
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0)
      sub_22316E078();
    v8 = (char *)operator new(v5 - v6);
    a1[1] = v8;
    a1[2] = v8;
    v9 = &v8[16 * (v7 >> 4)];
    a1[3] = v9;
    memcpy(v8, v6, v7);
    a1[2] = v9;
  }
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = 0;
  v11 = (_BYTE *)a2[4];
  v10 = (_BYTE *)a2[5];
  v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0)
      sub_22316E078();
    v13 = (char *)operator new(v10 - v11);
    a1[4] = v13;
    a1[5] = v13;
    v14 = &v13[16 * (v12 >> 4)];
    a1[6] = v14;
    memcpy(v13, v11, v12);
    a1[5] = v14;
  }
  a1[7] = 0;
  a1[8] = 0;
  a1[9] = 0;
  v16 = (_BYTE *)a2[7];
  v15 = (_BYTE *)a2[8];
  v17 = v15 - v16;
  if (v15 != v16)
  {
    if (v17 < 0)
      sub_22316E078();
    v18 = (char *)operator new(v15 - v16);
    a1[7] = v18;
    a1[8] = v18;
    v19 = &v18[16 * (v17 >> 4)];
    a1[9] = v19;
    memcpy(v18, v16, v17);
    a1[8] = v19;
  }
  a1[10] = 0;
  a1[11] = 0;
  a1[12] = 0;
  v21 = (_BYTE *)a2[10];
  v20 = (_BYTE *)a2[11];
  v22 = v20 - v21;
  if (v20 != v21)
  {
    if ((v22 & 0x8000000000000000) != 0)
      sub_22316E078();
    v23 = (char *)operator new(v20 - v21);
    a1[10] = v23;
    a1[11] = v23;
    v24 = &v23[v22];
    a1[12] = &v23[v22];
    memcpy(v23, v21, v22);
    a1[11] = v24;
  }
  a1[13] = 0;
  a1[14] = 0;
  a1[15] = 0;
  v26 = (_BYTE *)a2[13];
  v25 = (_BYTE *)a2[14];
  v27 = v25 - v26;
  if (v25 != v26)
  {
    if ((v27 & 0x8000000000000000) != 0)
      sub_22316E078();
    v28 = (char *)operator new(v25 - v26);
    a1[13] = v28;
    a1[14] = v28;
    v29 = &v28[v27];
    a1[15] = &v28[v27];
    memcpy(v28, v26, v27);
    a1[14] = v29;
  }
  a1[16] = 0;
  a1[17] = 0;
  a1[18] = 0;
  v31 = (_BYTE *)a2[16];
  v30 = (_BYTE *)a2[17];
  v32 = v30 - v31;
  if (v30 != v31)
  {
    if ((v32 & 0x8000000000000000) != 0)
      sub_22316E078();
    v33 = (char *)operator new(v30 - v31);
    a1[16] = v33;
    a1[17] = v33;
    v34 = &v33[v32];
    a1[18] = &v33[v32];
    memcpy(v33, v31, v32);
    a1[17] = v34;
  }
  a1[19] = 0;
  a1[20] = 0;
  a1[21] = 0;
  v36 = (_BYTE *)a2[19];
  v35 = (_BYTE *)a2[20];
  v37 = v35 - v36;
  if (v35 != v36)
  {
    if (v37 < 0)
      sub_22316E078();
    v38 = (char *)operator new(v35 - v36);
    a1[19] = v38;
    a1[20] = v38;
    v39 = &v38[4 * (v37 >> 2)];
    a1[21] = v39;
    memcpy(v38, v36, v37);
    a1[20] = v39;
  }
  a1[22] = 0;
  a1[23] = 0;
  a1[24] = 0;
  v41 = (_BYTE *)a2[22];
  v40 = (_BYTE *)a2[23];
  v42 = v40 - v41;
  if (v40 != v41)
  {
    if (v42 < 0)
      sub_22316E078();
    v43 = (char *)operator new(v40 - v41);
    a1[22] = v43;
    a1[23] = v43;
    v44 = &v43[4 * (v42 >> 2)];
    a1[24] = v44;
    memcpy(v43, v41, v42);
    a1[23] = v44;
  }
  a1[25] = 0;
  a1[26] = 0;
  a1[27] = 0;
  v46 = (_BYTE *)a2[25];
  v45 = (_BYTE *)a2[26];
  v47 = v45 - v46;
  if (v45 != v46)
  {
    if (v47 < 0)
      sub_22316E078();
    v48 = (char *)operator new(v45 - v46);
    a1[25] = v48;
    a1[26] = v48;
    v49 = &v48[4 * (v47 >> 2)];
    a1[27] = v49;
    memcpy(v48, v46, v47);
    a1[26] = v49;
  }
  a1[28] = 0;
  a1[29] = 0;
  a1[30] = 0;
  v51 = (_BYTE *)a2[28];
  v50 = (_BYTE *)a2[29];
  v52 = v50 - v51;
  if (v50 != v51)
  {
    if (v52 < 0)
      sub_22316E078();
    v53 = (char *)operator new(v50 - v51);
    a1[28] = v53;
    a1[29] = v53;
    v54 = &v53[4 * (v52 >> 2)];
    a1[30] = v54;
    memcpy(v53, v51, v52);
    a1[29] = v54;
  }
  a1[31] = 0;
  a1[32] = 0;
  a1[33] = 0;
  v56 = (_BYTE *)a2[31];
  v55 = (_BYTE *)a2[32];
  v57 = v55 - v56;
  if (v55 != v56)
  {
    if (v57 < 0)
      sub_22316E078();
    v58 = (char *)operator new(v55 - v56);
    a1[31] = v58;
    a1[32] = v58;
    v59 = &v58[4 * (v57 >> 2)];
    a1[33] = v59;
    memcpy(v58, v56, v57);
    a1[32] = v59;
  }
  return a1;
}

void sub_22322570C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, void **a13, void **a14)
{
  void **v14;
  void **v15;
  void **v16;
  _QWORD *v17;
  void **v18;
  void **v19;
  void **v20;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;

  v22 = *v14;
  if (*v14)
  {
    v17[32] = v22;
    operator delete(v22);
    v23 = *v16;
    if (!*v16)
    {
LABEL_3:
      v24 = *v15;
      if (!*v15)
        goto LABEL_4;
      goto LABEL_20;
    }
  }
  else
  {
    v23 = *v16;
    if (!*v16)
      goto LABEL_3;
  }
  v17[29] = v23;
  operator delete(v23);
  v24 = *v15;
  if (!*v15)
  {
LABEL_4:
    v25 = *v20;
    if (!*v20)
      goto LABEL_5;
    goto LABEL_21;
  }
LABEL_20:
  v17[26] = v24;
  operator delete(v24);
  v25 = *v20;
  if (!*v20)
  {
LABEL_5:
    v26 = *v19;
    if (!*v19)
      goto LABEL_6;
    goto LABEL_22;
  }
LABEL_21:
  v17[23] = v25;
  operator delete(v25);
  v26 = *v19;
  if (!*v19)
  {
LABEL_6:
    v27 = *v18;
    if (!*v18)
      goto LABEL_7;
    goto LABEL_23;
  }
LABEL_22:
  v17[20] = v26;
  operator delete(v26);
  v27 = *v18;
  if (!*v18)
  {
LABEL_7:
    v28 = *a10;
    if (!*a10)
      goto LABEL_9;
    goto LABEL_8;
  }
LABEL_23:
  v17[17] = v27;
  operator delete(v27);
  v28 = *a10;
  if (!*a10)
  {
LABEL_9:
    v29 = *a11;
    if (*a11)
    {
      v17[11] = v29;
      operator delete(v29);
    }
    v30 = *a12;
    if (*a12)
    {
      v17[8] = v30;
      operator delete(v30);
    }
    v31 = *a13;
    if (*a13)
    {
      v17[5] = v31;
      operator delete(v31);
    }
    v32 = *a14;
    if (*a14)
    {
      v17[2] = v32;
      operator delete(v32);
    }
    _Unwind_Resume(exception_object);
  }
LABEL_8:
  v17[14] = v28;
  operator delete(v28);
  goto LABEL_9;
}

void sub_223225864()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x223225754);
  JUMPOUT(0x22322574CLL);
}

void sub_223225874()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x223225768);
  JUMPOUT(0x223225760);
}

void sub_223225884()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x22322577CLL);
  JUMPOUT(0x223225774);
}

void sub_223225894()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x223225790);
  JUMPOUT(0x223225788);
}

void sub_2232258A4()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x2232257A4);
  JUMPOUT(0x22322579CLL);
}

void sub_2232258B8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2232258DC(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 24));
}

uint64_t sub_2232258F8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11apple_depth23MakeJasperPointCloudRefEPK18ADJasperPointCloudE3$_0")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11apple_depth23MakeJasperPointCloudRefEPK18ADJasperPointCloudE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11apple_depth23MakeJasperPointCloudRefEPK18ADJasperPointCloudE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11apple_depth23MakeJasperPointCloudRefEPK18ADJasperPointCloudE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_QWORD *sub_223225968(_QWORD *a1)
{
  id v2;
  _QWORD *v3;

  v2 = objc_alloc_init(MEMORY[0x24BDDD4D8]);
  v3 = operator new(0x20uLL);
  v3[1] = 0;
  v3[2] = 0;
  *v3 = &off_24EC259A0;
  *a1 = sub_223228280(v3 + 3, v2, 0);
  a1[1] = v3;
  return a1;
}

void sub_2232259CC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_2232259E4(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v7 = (void *)MEMORY[0x24BDBCF48];
  v8 = (void *)MEMORY[0x24BDD17C8];
  if (*(char *)(a2 + 23) >= 0)
    v9 = a2;
  else
    v9 = *(_QWORD *)a2;
  v10 = objc_msgSend_defaultCStringEncoding(MEMORY[0x24BDD17C8], (const char *)a2, a3, a4, a5, a6);
  v14 = objc_msgSend_stringWithCString_encoding_(v8, v11, v9, v10, v12, v13);
  v19 = objc_msgSend_fileURLWithPath_(v7, v15, v14, v16, v17, v18);
  return MEMORY[0x24BEDD108](**a1, sel_setUrl_, v19, v20, v21, v22);
}

_QWORD *sub_223225A58(_QWORD *a1, void ***a2, uint64_t **a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  const void *v8;
  _QWORD *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  _QWORD *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  CFTypeRef cf;

  *a1 = 0;
  a1[1] = 0;
  cf = 0;
  v8 = (const void *)objc_msgSend_newBinaryArchiveWithDescriptor_error_(**a2, (const char *)a2, **a3, (uint64_t)&cf, a5, a6);
  v9 = operator new(0x20uLL);
  v9[1] = 0;
  v9[2] = 0;
  *v9 = &off_24EC259F0;
  v10 = sub_223228280(v9 + 3, v8, 0);
  v11 = (std::__shared_weak_count *)a1[1];
  *a1 = v10;
  a1[1] = v9;
  if (!v11)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (!a4)
      return a1;
  }
  else
  {
LABEL_5:
    if (!a4)
      return a1;
  }
  v14 = (std::__shared_weak_count *)operator new(0x20uLL);
  v14->__shared_owners_ = 0;
  v15 = (unint64_t *)&v14->__shared_owners_;
  v14->__shared_weak_owners_ = 0;
  v14->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC25A40;
  v16 = sub_223228280(&v14[1].__vftable, cf, 1);
  do
    v17 = __ldxr(v15);
  while (__stxr(v17 + 1, v15));
  v18 = (std::__shared_weak_count *)a4[1];
  *a4 = v16;
  a4[1] = v14;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  do
    v21 = __ldaxr(v15);
  while (__stlxr(v21 - 1, v15));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  return a1;
}

void sub_223225BD0(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  void *v4;

  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v4);
  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_223225C08(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_223225C1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

BOOL sub_223225C34(_QWORD *a1)
{
  return *a1 && *(_QWORD *)*a1 != 0;
}

void sub_223225C54(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC259A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223225C64(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC259A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

const void **sub_223225C94(uint64_t a1)
{
  return sub_2232282B4((const void **)(a1 + 24));
}

void sub_223225CA0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC259F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223225CB0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC259F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

const void **sub_223225CE0(uint64_t a1)
{
  return sub_2232282B4((const void **)(a1 + 24));
}

void sub_223225CEC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC25A40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223225CFC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC25A40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

const void **sub_223225D2C(uint64_t a1)
{
  return sub_2232282B4((const void **)(a1 + 24));
}

void sub_223225D38(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC25A90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223225D48(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC25A90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

const void **sub_223225D78(uint64_t a1)
{
  return sub_2232282B4((const void **)(a1 + 24));
}

_QWORD *sub_223225D84(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const void *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v13;
  std::__shared_weak_count *v14;

  v7 = (const void *)objc_msgSend_blitCommandEncoder(**(void ***)(a2 + 8), (const char *)a2, a3, a4, a5, a6);
  v8 = (std::__shared_weak_count *)operator new(0x20uLL);
  v8->__shared_owners_ = 0;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC25B20;
  v13 = sub_223228280(&v8[1].__vftable, v7, 1);
  v14 = v8;
  sub_223226C7C(a1, (uint64_t *)&v13);
  v9 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *a1 = &off_24EC25AE0;
  return a1;
}

void sub_223225E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_223167354((uint64_t)&a11);
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223225E98(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_223225EB8(uint64_t a1, const char *a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t **a7, unsigned int a8, unsigned int a9, uint64_t a10)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v10 = **(void ***)(a1 + 8);
  v11 = **(_QWORD **)a2;
  v12 = *(unsigned int *)(a5 + 8);
  *(_QWORD *)&v13 = *(_QWORD *)a5;
  *((_QWORD *)&v13 + 1) = HIDWORD(*(_QWORD *)a5);
  v22 = v13;
  v23 = v12;
  v14 = *(unsigned int *)(a6 + 8);
  *(_QWORD *)&v13 = *(_QWORD *)a6;
  *((_QWORD *)&v13 + 1) = HIDWORD(*(_QWORD *)a6);
  v20 = v13;
  v21 = v14;
  v15 = **a7;
  v16 = *(unsigned int *)(a10 + 8);
  *(_QWORD *)&v13 = *(_QWORD *)a10;
  *((_QWORD *)&v13 + 1) = HIDWORD(*(_QWORD *)a10);
  v18 = v13;
  v19 = v16;
  return objc_msgSend_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin_(v10, a2, v11, a3, a4, (uint64_t)&v22, &v20, v15, a8, a9, &v18);
}

uint64_t sub_223225F60(uint64_t a1, const char *a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, _QWORD **a7, unsigned int a8, unsigned int a9, unsigned int a10)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v10 = **(void ***)(a1 + 8);
  v11 = **(_QWORD **)a2;
  v12 = *(unsigned int *)(a5 + 8);
  *(_QWORD *)&v13 = *(_QWORD *)a5;
  *((_QWORD *)&v13 + 1) = HIDWORD(*(_QWORD *)a5);
  v18 = v13;
  v19 = v12;
  v14 = *(unsigned int *)(a6 + 8);
  *(_QWORD *)&v13 = *(_QWORD *)a6;
  *((_QWORD *)&v13 + 1) = HIDWORD(*(_QWORD *)a6);
  v16 = v13;
  v17 = v14;
  return objc_msgSend_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toBuffer_destinationOffset_destinationBytesPerRow_destinationBytesPerImage_(v10, a2, v11, a3, a4, (uint64_t)&v18, &v16, **a7, a8, a9, a10);
}

uint64_t sub_223225FEC(uint64_t a1, _QWORD **a2, unsigned int *a3, uint64_t a4)
{
  return MEMORY[0x24BEDD108](**(_QWORD **)(a1 + 8), sel_fillBuffer_range_value_, **a2, *a3, a3[1], a4);
}

void sub_223226010(_QWORD *a1)
{
  sub_223226D74(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223226034(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC25B20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223226044(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC25B20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

const void **sub_223226074(uint64_t a1)
{
  return sub_2232282B4((const void **)(a1 + 24));
}

_QWORD *sub_223226080(_QWORD *a1, void ***a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  const void *v7;
  _QWORD *v8;

  v7 = (const void *)objc_msgSend_newBufferWithLength_options_(**a2, (const char *)a2, a3, a4, a5, a6);
  v8 = operator new(0x20uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_24EC25BA0;
  *a1 = sub_223228280(v8 + 3, v7, 0);
  a1[1] = v8;
  return a1;
}

void sub_2232260EC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

_QWORD *sub_223226104(_QWORD *a1, void ***a2, uint64_t a3, unsigned int a4, unsigned int a5, _QWORD *a6)
{
  _QWORD *v10;
  void *v11;
  _QWORD *v12;
  const char *v13;
  const void *v14;
  _QWORD *v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  const void *v20;
  _QWORD *v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD v29[4];
  _BYTE v30[24];
  _BYTE *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  *a1 = 0;
  a1[1] = 0;
  v10 = (_QWORD *)a6[3];
  v11 = **a2;
  if (!v10)
  {
    v14 = (const void *)objc_msgSend_newBufferWithBytesNoCopy_length_options_deallocator_(**a2, (const char *)a2, a3, a4, a5, 0);
    v15 = operator new(0x20uLL);
    v15[1] = 0;
    v15[2] = 0;
    *v15 = &off_24EC25BA0;
    v16 = sub_223228280(v15 + 3, v14, 0);
    v17 = (std::__shared_weak_count *)a1[1];
    *a1 = v16;
    a1[1] = v15;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    return a1;
  }
  v29[0] = MEMORY[0x24BDAC760];
  v29[1] = 3321888768;
  v29[2] = sub_2232263C8;
  v29[3] = &unk_24EC25B60;
  v12 = v30;
  if (v10 == a6)
  {
    v31 = v30;
    (*(void (**)(_QWORD *, _BYTE *))(*a6 + 24))(a6, v30);
  }
  else
  {
    v31 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v10 + 16))(v10);
  }
  v20 = (const void *)objc_msgSend_newBufferWithBytesNoCopy_length_options_deallocator_(v11, v13, a3, a4, a5, (uint64_t)v29);
  v21 = operator new(0x20uLL);
  v21[1] = 0;
  v21[2] = 0;
  *v21 = &off_24EC25BA0;
  v22 = sub_223228280(v21 + 3, v20, 0);
  v23 = (std::__shared_weak_count *)a1[1];
  *a1 = v22;
  a1[1] = v21;
  if (!v23)
    goto LABEL_14;
  v24 = (unint64_t *)&v23->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (v25)
  {
LABEL_14:
    v26 = v31;
    if (v31 != v30)
      goto LABEL_15;
LABEL_18:
    v27 = 4;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
  std::__shared_weak_count::__release_weak(v23);
  v26 = v31;
  if (v31 == v30)
    goto LABEL_18;
LABEL_15:
  if (v26)
  {
    v27 = 5;
    v12 = v26;
LABEL_19:
    (*(void (**)(_QWORD *))(*v12 + 8 * v27))(v12);
  }
  return a1;
}

void sub_223226330(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  void *v4;

  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v4);
  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_223226350(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void **sub_2232263C8(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v13;
  int v14;
  uint64_t v15;

  sub_223227930((uint64_t *)&v13);
  v15 = a2;
  v14 = a3;
  v6 = *(_QWORD *)(a1 + 56);
  if (!v6)
    sub_223198474();
  (*(void (**)(uint64_t, uint64_t *, int *))(*(_QWORD *)v6 + 48))(v6, &v15, &v14);
  return sub_22322797C(&v13, v7, v8, v9, v10, v11);
}

void sub_223226438(_Unwind_Exception *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_22322797C((void **)va, a2, a3, a4, a5, a6);
  _Unwind_Resume(a1);
}

uint64_t sub_22322644C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a2 + 56);
  if (result)
  {
    if (result == a2 + 32)
    {
      *(_QWORD *)(a1 + 56) = a1 + 32;
      return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 56) + 24))(*(_QWORD *)(a2 + 56), a1 + 32);
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      *(_QWORD *)(a1 + 56) = result;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 56) = 0;
  }
  return result;
}

uint64_t sub_2232264C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 + 32;
  result = *(_QWORD *)(a1 + 56);
  if (result == v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

_QWORD *sub_2232264FC(_QWORD *a1, void ***a2, uint64_t a3, unsigned int a4, unsigned int a5, _QWORD *a6)
{
  return sub_223226104(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_223226504(void ***a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_length(**a1, a2, a3, a4, a5, a6);
}

uint64_t sub_223226520(void ***a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_contents(**a1, a2, a3, a4, a5, a6);
}

void sub_22322652C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC25BA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22322653C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC25BA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

const void **sub_22322656C(uint64_t a1)
{
  return sub_2232282B4((const void **)(a1 + 24));
}

uint64_t sub_223226578(uint64_t a1, void ***a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const void *v7;
  _QWORD *v8;

  v7 = (const void *)objc_msgSend_commandBuffer(**a2, (const char *)a2, a3, a4, a5, a6);
  v8 = operator new(0x20uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_24EC25C20;
  *(_QWORD *)(a1 + 8) = sub_223228280(v8 + 3, v7, 1);
  *(_QWORD *)(a1 + 16) = v8;
  return a1;
}

void sub_2232265DC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_2232265F4(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  const void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;

  v8 = (const void *)objc_msgSend_device(**(void ***)(a1 + 8), a2, a3, a4, a5, a6);
  v9 = (std::__shared_weak_count *)operator new(0x20uLL);
  v9->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v9->__shared_weak_owners_ = 0;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC25A90;
  *a7 = sub_223228280(&v9[1].__vftable, v8, 1);
  a7[1] = v9;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void sub_2232266A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_2232266BC(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  const void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;

  v8 = (const void *)objc_msgSend_commandQueue(**(void ***)(a1 + 8), a2, a3, a4, a5, a6);
  v9 = (std::__shared_weak_count *)operator new(0x20uLL);
  v9->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v9->__shared_weak_owners_ = 0;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC25C70;
  *a7 = sub_223228280(&v9[1].__vftable, v8, 1);
  a7[1] = v9;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void sub_22322676C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_223226784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*(char *)(a2 + 23) >= 0)
    v7 = objc_msgSend_stringWithUTF8String_(MEMORY[0x24BDD17C8], (const char *)a2, a2, a4, a5, a6);
  else
    v7 = objc_msgSend_stringWithUTF8String_(MEMORY[0x24BDD17C8], (const char *)a2, *(_QWORD *)a2, a4, a5, a6);
  return MEMORY[0x24BEDD108](**(_QWORD **)(a1 + 8), sel_setLabel_, v7, v8, v9, v10);
}

uint64_t sub_2232267C8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = objc_msgSend_commitAndWaitUntilSubmitted(**(void ***)(a1 + 8), a2, a3, a4, a5, a6);
  if ((result & 1) == 0)
  {
    objc_msgSend_commit(**(void ***)(a1 + 8), v8, v9, v10, v11, v12);
    return MEMORY[0x24BEDD108](**(_QWORD **)(a1 + 8), sel_waitUntilScheduled, v13, v14, v15, v16);
  }
  return result;
}

uint64_t sub_223226814(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a2 + 56);
  if (result)
  {
    if (result == a2 + 32)
    {
      *(_QWORD *)(a1 + 56) = a1 + 32;
      return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 56) + 24))(*(_QWORD *)(a2 + 56), a1 + 32);
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      *(_QWORD *)(a1 + 56) = result;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 56) = 0;
  }
  return result;
}

uint64_t sub_223226888(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 + 32;
  result = *(_QWORD *)(a1 + 56);
  if (result == v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

uint64_t sub_2232268C4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  _QWORD *v7;
  const char *v8;
  uint64_t result;
  uint64_t v10;
  _QWORD v11[4];
  _BYTE v12[24];
  _BYTE *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v6 = **(void ***)(a1 + 8);
  v11[0] = MEMORY[0x24BDAC760];
  v11[1] = 3321888768;
  v11[2] = sub_223226A28;
  v11[3] = &unk_24EC25BE0;
  v7 = v12;
  v8 = (const char *)*((_QWORD *)a2 + 3);
  if (v8)
  {
    if (v8 == a2)
    {
      v13 = v12;
      (*(void (**)(const char *, _BYTE *))(*(_QWORD *)a2 + 24))(a2, v12);
    }
    else
    {
      v13 = (_BYTE *)(*(uint64_t (**)(const char *))(*(_QWORD *)v8 + 16))(v8);
    }
  }
  else
  {
    v13 = 0;
  }
  result = objc_msgSend_addCompletedHandler_(v6, a2, (uint64_t)v11, a4, a5, a6);
  if (v13 == v12)
  {
    v10 = 4;
  }
  else
  {
    if (!v13)
      return result;
    v10 = 5;
    v7 = v13;
  }
  return (*(uint64_t (**)(_QWORD *))(*v7 + 8 * v10))(v7);
}

void sub_2232269D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;

  if (a17 == v17)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 32))(v17);
    _Unwind_Resume(exception_object);
  }
  if (!a17)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t))(*(_QWORD *)a17 + 40))(a17);
  _Unwind_Resume(exception_object);
}

void **sub_223226A28(uint64_t a1, const void *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD v18[2];
  std::__shared_weak_count *v19;
  void *v20;

  sub_223227930((uint64_t *)&v20);
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC25C20;
  v18[1] = sub_223228280(&v4[1].__vftable, a2, 1);
  v19 = v4;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  v8 = *(_QWORD *)(a1 + 56);
  if (!v8)
    sub_223198474();
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v8 + 48))(v8, v18);
  v14 = v19;
  if (v19)
  {
    v15 = (unint64_t *)&v19->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  return sub_22322797C(&v20, v9, v10, v11, v12, v13);
}

void sub_223226B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  std::__shared_weak_count *v12;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  std::__shared_weak_count::~__shared_weak_count(v12);
  operator delete(v14);
  sub_22322797C(&a12, v15, v16, v17, v18, v19);
  _Unwind_Resume(a1);
}

void sub_223226B50(_Unwind_Exception *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_22322797C((void **)va, a2, a3, a4, a5, a6);
  _Unwind_Resume(a1);
}

void sub_223226B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_223197300((uint64_t)&a9);
  sub_22322797C(&a12, v13, v14, v15, v16, v17);
  _Unwind_Resume(a1);
}

uint64_t sub_223226B80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x24BEDD108](**(_QWORD **)(a1 + 8), sel_kernelStartTime, a3, a4, a5, a6);
}

uint64_t sub_223226B8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x24BEDD108](**(_QWORD **)(a1 + 8), sel_kernelEndTime, a3, a4, a5, a6);
}

uint64_t sub_223226B98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x24BEDD108](**(_QWORD **)(a1 + 8), sel_GPUStartTime, a3, a4, a5, a6);
}

uint64_t sub_223226BA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x24BEDD108](**(_QWORD **)(a1 + 8), sel_GPUEndTime, a3, a4, a5, a6);
}

uint64_t sub_223226BB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x24BEDD108](**(_QWORD **)(a1 + 8), sel_waitUntilCompleted, a3, a4, a5, a6);
}

uint64_t sub_223226BBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_223225EB0(a2, a1);
}

uint64_t sub_223226BC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_223228418(a3, a1, a2);
}

uint64_t sub_223226BD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_223227124(a2, a1);
}

void sub_223226BE4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC25C20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223226BF4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC25C20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

const void **sub_223226C24(uint64_t a1)
{
  return sub_2232282B4((const void **)(a1 + 24));
}

void sub_223226C30(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC25C70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223226C40(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC25C70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

const void **sub_223226C70(uint64_t a1)
{
  return sub_2232282B4((const void **)(a1 + 24));
}

_QWORD *sub_223226C7C(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *a2;
  v2 = a2[1];
  *result = off_24EC25CC0;
  result[1] = v3;
  result[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_223226CAC(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  const void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;

  v8 = (const void *)objc_msgSend_device(**(void ***)(a1 + 8), a2, a3, a4, a5, a6);
  v9 = (std::__shared_weak_count *)operator new(0x20uLL);
  v9->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v9->__shared_weak_owners_ = 0;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC25A90;
  *a7 = sub_223228280(&v9[1].__vftable, v8, 1);
  a7[1] = v9;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void sub_223226D5C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

_QWORD *sub_223226D74(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = off_24EC25CC0;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_223226DF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x24BEDD108](**(_QWORD **)(a1 + 8), sel_endEncoding, a3, a4, a5, a6);
}

_QWORD *sub_223226DFC(_QWORD *a1, void ***a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const void *v7;
  _QWORD *v8;

  v7 = (const void *)objc_msgSend_newCommandQueue(**a2, (const char *)a2, a3, a4, a5, a6);
  v8 = operator new(0x20uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_24EC25C70;
  *a1 = sub_223228280(v8 + 3, v7, 0);
  a1[1] = v8;
  return a1;
}

void sub_223226E60(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_223226E78(void ***a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  const void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;

  v8 = (const void *)objc_msgSend_device(**a1, a2, a3, a4, a5, a6);
  v9 = (std::__shared_weak_count *)operator new(0x20uLL);
  v9->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v9->__shared_weak_owners_ = 0;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC25A90;
  *a7 = sub_223228280(&v9[1].__vftable, v8, 1);
  a7[1] = v9;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void sub_223226F28(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_223226F40@<X0>(void ***a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  return sub_223226578(a6, a1, a2, a3, a4, a5);
}

_QWORD *sub_223226F4C(_QWORD *result, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = result;
  result[1] = 0;
  result[2] = 0;
  *result = &off_24EC25CF8;
  v3 = *a2;
  v4 = a2[1];
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v7 = (std::__shared_weak_count *)result[2];
    result[1] = v3;
    result[2] = v4;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        return v2;
      }
    }
  }
  else
  {
    result[1] = v3;
    result[2] = 0;
  }
  return result;
}

_QWORD *sub_223226FF8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const void *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v13;
  std::__shared_weak_count *v14;

  v7 = (const void *)objc_msgSend_computeCommandEncoder(**(void ***)(a2 + 8), (const char *)a2, a3, a4, a5, a6);
  v8 = (std::__shared_weak_count *)operator new(0x20uLL);
  v8->__shared_owners_ = 0;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC25D38;
  v13 = sub_223228280(&v8[1].__vftable, v7, 1);
  v14 = v8;
  sub_223226C7C(a1, (uint64_t *)&v13);
  v9 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *a1 = &off_24EC25CF8;
  return a1;
}

void sub_2232270F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_223167354((uint64_t)&a11);
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22322710C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_22322712C(uint64_t a1, _QWORD **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x24BEDD108](**(_QWORD **)(a1 + 8), sel_setComputePipelineState_, **a2, a4, a5, a6);
}

uint64_t sub_223227140(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x24BEDD108](**(_QWORD **)(a1 + 8), sel_setBytes_length_atIndex_, a2, a3, a4, a6);
}

uint64_t sub_22322715C(uint64_t a1, _QWORD **a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x24BEDD108](**(_QWORD **)(a1 + 8), sel_setBuffer_offset_atIndex_, **a2, a3, a4, a6);
}

uint64_t sub_223227180(uint64_t a1, _QWORD **a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x24BEDD108](**(_QWORD **)(a1 + 8), sel_setTexture_atIndex_, **a2, a3, a5, a6);
}

uint64_t sub_22322719C(uint64_t a1, _QWORD **a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x24BEDD108](**(_QWORD **)(a1 + 8), sel_setSamplerState_atIndex_, **a2, a4, a5, a6);
}

uint64_t sub_2232271B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int128 v9;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  v6 = *(unsigned int *)(a2 + 8);
  v7 = *(unsigned int *)(a3 + 8);
  v8 = **(void ***)(a1 + 8);
  *(_QWORD *)&v9 = *(_QWORD *)a2;
  *((_QWORD *)&v9 + 1) = HIDWORD(*(_QWORD *)a2);
  v13 = v9;
  v14 = v6;
  *(_QWORD *)&v9 = *(_QWORD *)a3;
  *((_QWORD *)&v9 + 1) = HIDWORD(*(_QWORD *)a3);
  v11 = v9;
  v12 = v7;
  return objc_msgSend_dispatchThreadgroups_threadsPerThreadgroup_(v8, (const char *)a2, (uint64_t)&v13, (uint64_t)&v11, a5, a6);
}

void sub_22322720C(_QWORD *a1)
{
  sub_223226D74(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223227230(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC25D38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223227240(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC25D38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

const void **sub_223227270(uint64_t a1)
{
  return sub_2232282B4((const void **)(a1 + 24));
}

_QWORD *sub_22322727C(_QWORD *a1)
{
  id v2;
  _QWORD *v3;

  v2 = objc_alloc_init(MEMORY[0x24BDDD550]);
  v3 = operator new(0x20uLL);
  v3[1] = 0;
  v3[2] = 0;
  *v3 = &off_24EC25D88;
  *a1 = sub_223228280(v3 + 3, v2, 0);
  a1[1] = v3;
  return a1;
}

void sub_2232272E0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_2232272F8(_QWORD **a1, _QWORD **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x24BEDD108](**a1, sel_setComputeFunction_, **a2, a4, a5, a6);
}

uint64_t sub_22322730C(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x24BEDD108](**a1, sel_setThreadGroupSizeIsMultipleOfThreadExecutionWidth_, a2, a4, a5, a6);
}

uint64_t sub_22322731C(_QWORD **a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = (void *)objc_msgSend_array(MEMORY[0x24BDBCE30], a2, a3, a4, a5, a6);
  v13 = objc_msgSend_arrayByAddingObject_(v8, v9, **(_QWORD **)a2, v10, v11, v12);
  return MEMORY[0x24BEDD108](**a1, sel_setBinaryArchives_, v13, v14, v15, v16);
}

_QWORD *sub_223227360(_QWORD *a1, void ***a2, uint64_t **a3, unsigned int a4, _QWORD *a5)
{
  const void *v7;
  _QWORD *v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  const void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  _QWORD *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  const void *v23;

  *a1 = 0;
  a1[1] = 0;
  v23 = 0;
  v7 = (const void *)objc_msgSend_newComputePipelineStateWithDescriptor_options_reflection_error_(**a2, (const char *)a2, **a3, a4, 0, (uint64_t)&v23);
  v8 = operator new(0x20uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_24EC25E28;
  v9 = sub_223228280(v8 + 3, v7, 0);
  v10 = (std::__shared_weak_count *)a1[1];
  *a1 = v9;
  a1[1] = v8;
  if (!v10)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (!a5)
      return a1;
  }
  else
  {
LABEL_5:
    if (!a5)
      return a1;
  }
  v13 = v23;
  if (v23)
  {
    v14 = (std::__shared_weak_count *)operator new(0x20uLL);
    v14->__shared_owners_ = 0;
    v15 = (unint64_t *)&v14->__shared_owners_;
    v14->__shared_weak_owners_ = 0;
    v14->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC25A40;
    v16 = sub_223228280(&v14[1].__vftable, v13, 1);
    do
      v17 = __ldxr(v15);
    while (__stxr(v17 + 1, v15));
    v18 = (std::__shared_weak_count *)a5[1];
    *a5 = v16;
    a5[1] = v14;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    do
      v21 = __ldaxr(v15);
    while (__stlxr(v21 - 1, v15));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  return a1;
}

void sub_2232274E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  void *v4;

  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v4);
  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_223227520(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_223227534(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_223227548(_QWORD *a1, void ***a2, uint64_t **a3, unsigned int a4, _QWORD *a5)
{
  return sub_223227360(a1, a2, a3, a4, a5);
}

uint64_t sub_223227550(void ***a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_maxTotalThreadsPerThreadgroup(**a1, a2, a3, a4, a5, a6);
}

uint64_t sub_22322756C(void ***a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_threadExecutionWidth(**a1, a2, a3, a4, a5, a6);
}

void sub_223227588(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC25D88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223227598(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC25D88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

const void **sub_2232275C8(uint64_t a1)
{
  return sub_2232282B4((const void **)(a1 + 24));
}

void sub_2232275D4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC25DD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2232275E4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC25DD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

const void **sub_223227614(uint64_t a1)
{
  return sub_2232282B4((const void **)(a1 + 24));
}

void sub_223227620(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC25E28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223227630(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC25E28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

const void **sub_223227660(uint64_t a1)
{
  return sub_2232282B4((const void **)(a1 + 24));
}

uint64_t sub_22322766C@<X0>(void *a1@<X0>, const char *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, _BYTE *a6@<X8>)
{
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  _BYTE *v20;
  _OWORD *v21;
  __int128 *v22;
  __int128 v23;
  char v24;

  v8 = objc_msgSend_cStringUsingEncoding_(a1, a2, 4, a3, a4, a5);
  result = objc_msgSend_length(a1, v9, v10, v11, v12, v13);
  v15 = result;
  v16 = result;
  if (result >= 0x17uLL)
  {
    if ((result | 7) == 0x17)
      v17 = (result & 0xFFFFFFF8) + 8;
    else
      v17 = result | 7;
    result = (uint64_t)operator new(v17 + 1);
    *((_QWORD *)a6 + 1) = v16;
    *((_QWORD *)a6 + 2) = v17 - 0x7FFFFFFFFFFFFFFFLL;
    *(_QWORD *)a6 = result;
    a6 = (_BYTE *)result;
    if (v16 < 0x20)
      goto LABEL_14;
  }
  else
  {
    a6[23] = result;
    if (!(_DWORD)result)
      goto LABEL_17;
    if (result < 0x20uLL)
      goto LABEL_14;
  }
  if ((unint64_t)&a6[-v8] < 0x20)
  {
LABEL_14:
    v19 = (char *)v8;
    v20 = a6;
LABEL_15:
    a6 = v20;
    do
    {
      v24 = *v19++;
      *a6++ = v24;
    }
    while (v19 != (char *)(v8 + v16));
    goto LABEL_17;
  }
  v18 = v16 - (v15 & 0x1F);
  v19 = (char *)(v8 + v18);
  v20 = &a6[v18];
  v21 = a6 + 16;
  v22 = (__int128 *)(v8 + 16);
  do
  {
    v23 = *v22;
    *(v21 - 1) = *(v22 - 1);
    *v21 = v23;
    v21 += 2;
    v22 += 2;
    v18 -= 32;
  }
  while (v18);
  a6 = v20;
  if ((v15 & 0x1F) != 0)
    goto LABEL_15;
LABEL_17:
  *a6 = 0;
  return result;
}

_QWORD *sub_223227778(_QWORD *a1)
{
  id v2;
  _QWORD *v3;

  v2 = objc_alloc_init(MEMORY[0x24BDDD590]);
  v3 = operator new(0x20uLL);
  v3[1] = 0;
  v3[2] = 0;
  *v3 = &off_24EC25E78;
  *a1 = sub_223228280(v3 + 3, v2, 0);
  a1[1] = v3;
  return a1;
}

void sub_2232277DC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_2232277F4(_QWORD **a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x24BEDD108](**a1, sel_setDepthCompareFunction_, a2, a4, a5, a6);
}

uint64_t sub_223227804(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x24BEDD108](**a1, sel_setDepthWriteEnabled_, a2, a4, a5, a6);
}

_QWORD *sub_223227814(_QWORD *a1, void ***a2, uint64_t **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const void *v7;
  _QWORD *v8;

  v7 = (const void *)objc_msgSend_newDepthStencilStateWithDescriptor_(**a2, (const char *)a2, **a3, a4, a5, a6);
  v8 = operator new(0x20uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_24EC25EC8;
  *a1 = sub_223228280(v8 + 3, v7, 0);
  a1[1] = v8;
  return a1;
}

void sub_223227880(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_223227898(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC25E78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2232278A8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC25E78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

const void **sub_2232278D8(uint64_t a1)
{
  return sub_2232282B4((const void **)(a1 + 24));
}

void sub_2232278E4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC25EC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2232278F4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC25EC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

const void **sub_223227924(uint64_t a1)
{
  return sub_2232282B4((const void **)(a1 + 24));
}

uint64_t *sub_223227930(uint64_t *a1)
{
  _QWORD *v2;

  *a1 = objc_opt_new();
  v2 = (_QWORD *)off_255792BA8();
  ++*v2;
  return a1;
}

void **sub_22322797C(void **a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v7;

  objc_msgSend_drain(*a1, a2, a3, a4, a5, a6);
  v7 = (_QWORD *)off_255792BA8();
  --*v7;
  return a1;
}

void sub_2232279C4(_QWORD *a1@<X8>)
{
  id v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;

  v2 = MTLCreateSystemDefaultDevice();
  v3 = (std::__shared_weak_count *)operator new(0x20uLL);
  v3->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC25A90;
  *a1 = sub_223228280(&v3[1].__vftable, v2, 1);
  a1[1] = v3;
  do
    v5 = __ldxr(p_shared_owners);
  while (__stxr(v5 + 1, p_shared_owners));
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_223227A6C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_223227A84(_QWORD *a1@<X8>)
{
  id v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = MTLCreateSystemDefaultDevice();
  v3 = (std::__shared_weak_count *)operator new(0x20uLL);
  v3->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC25A90;
  v10 = sub_223228280(&v3[1].__vftable, v2, 1);
  v11 = v3;
  do
    v5 = __ldxr(p_shared_owners);
  while (__stxr(v5 + 1, p_shared_owners));
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  sub_223227BC8(a1, &v10, 1uLL);
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_223227B9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223227BB0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

_QWORD *sub_223227BC8(_QWORD *a1, _QWORD *a2, unint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >> 60)
      sub_22316E078();
    v5 = 2 * a3;
    v6 = operator new(16 * a3);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    v7 = &a2[v5];
    do
    {
      v8 = a2[1];
      *v6 = *a2;
      v6[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v6 += 2;
    }
    while (a2 != v7);
    a1[1] = v6;
  }
  return a1;
}

void sub_223227C6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)v1)
    sub_224574B20((void **)(v1 + 8), *(char **)v1, (void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223227C90@<X0>(void ***a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _BYTE *a7@<X8>)
{
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v8 = (void *)objc_msgSend_name(**a1, a2, a3, a4, a5, a6);
  return sub_22322766C(v8, v9, v10, v11, v12, a7);
}

uint64_t sub_223227CBC(_QWORD **a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x24BEDD108](**a1, sel_supportsFamily_, a2, a4, a5, a6);
}

_QWORD *sub_223227CCC(_QWORD *result)
{
  *result = 0;
  result[1] = 0;
  return result;
}

void ***sub_223227CD4@<X0>(void ***result@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (*result)
  {
    v8 = (void *)objc_msgSend_localizedDescription(**result, a2, a3, a4, a5, a6);
    return (void ***)sub_22322766C(v8, v9, v10, v11, v12, (_BYTE *)a7);
  }
  else
  {
    *(_QWORD *)a7 = 0;
    *(_QWORD *)(a7 + 8) = 0;
    *(_QWORD *)(a7 + 16) = 0;
  }
  return result;
}

_QWORD *sub_223227D18(_QWORD *a1, void ***a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v8;
  void *v9;
  void *v10;
  int v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  const void *v31;
  _QWORD *v32;
  _QWORD *v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  _QWORD *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  CFTypeRef cf;

  v8 = operator new(0x20uLL);
  v8[2] = 0;
  v8[3] = 0;
  *v8 = &off_24EC25F18;
  v8[1] = 0;
  *a1 = sub_223228278(v8 + 3);
  a1[1] = v8;
  cf = 0;
  v9 = (void *)MEMORY[0x24BDBCF48];
  v10 = (void *)MEMORY[0x24BDD17C8];
  v11 = *(char *)(a3 + 23);
  v12 = *(_QWORD *)a3;
  v19 = objc_msgSend_defaultCStringEncoding(MEMORY[0x24BDD17C8], v13, v14, v15, v16, v17);
  if (v11 >= 0)
    v22 = objc_msgSend_stringWithCString_encoding_(v10, v18, a3, v19, v20, v21);
  else
    v22 = objc_msgSend_stringWithCString_encoding_(v10, v18, v12, v19, v20, v21);
  v27 = objc_msgSend_fileURLWithPath_(v9, v23, v22, v24, v25, v26);
  v31 = (const void *)objc_msgSend_newLibraryWithURL_error_(**a2, v28, v27, (uint64_t)&cf, v29, v30);
  v32 = operator new(0x20uLL);
  v32[2] = 0;
  *v32 = &off_24EC25F18;
  v32[1] = 0;
  v33 = sub_223228280(v32 + 3, v31, 0);
  v34 = (std::__shared_weak_count *)a1[1];
  *a1 = v33;
  a1[1] = v32;
  if (!v34)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v34->__shared_owners_;
  do
    v36 = __ldaxr(p_shared_owners);
  while (__stlxr(v36 - 1, p_shared_owners));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
    if (!a4)
      return a1;
  }
  else
  {
LABEL_8:
    if (!a4)
      return a1;
  }
  v37 = (std::__shared_weak_count *)operator new(0x20uLL);
  v37->__shared_owners_ = 0;
  v38 = (unint64_t *)&v37->__shared_owners_;
  v37->__shared_weak_owners_ = 0;
  v37->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC25A40;
  v39 = sub_223228280(&v37[1].__vftable, cf, 1);
  do
    v40 = __ldxr(v38);
  while (__stxr(v40 + 1, v38));
  v41 = (std::__shared_weak_count *)a4[1];
  *a4 = v39;
  a4[1] = v37;
  if (v41)
  {
    v42 = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  do
    v44 = __ldaxr(v38);
  while (__stlxr(v44 - 1, v38));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
  return a1;
}

void sub_223227F04(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  void *v4;

  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v4);
  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_223227F3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_223227F50(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_223227F64(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_223227F7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_223227F94(char **a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;

  v2 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_22316E078();
    v4 = a1[1];
    v5 = 24 * a2;
    v6 = (char *)operator new(24 * a2);
    v7 = &v6[v5];
    v8 = &v6[24 * ((v4 - v2) / 24)];
    if (v4 == v2)
    {
      *a1 = v8;
      a1[1] = v8;
      a1[2] = v7;
      if (v2)
LABEL_13:
        operator delete(v2);
    }
    else
    {
      v9 = &v6[24 * ((v4 - v2) / 24)];
      do
      {
        v10 = *(_OWORD *)(v4 - 24);
        *((_QWORD *)v9 - 1) = *((_QWORD *)v4 - 1);
        *(_OWORD *)(v9 - 24) = v10;
        v9 -= 24;
        *((_QWORD *)v4 - 2) = 0;
        *((_QWORD *)v4 - 1) = 0;
        *((_QWORD *)v4 - 3) = 0;
        v4 -= 24;
      }
      while (v4 != v2);
      v11 = *a1;
      v2 = a1[1];
      *a1 = v9;
      a1[1] = v8;
      a1[2] = v7;
      if (v2 != v11)
      {
        do
        {
          if (*(v2 - 1) < 0)
            operator delete(*((void **)v2 - 3));
          v2 -= 24;
        }
        while (v2 != v11);
        v2 = v11;
      }
      if (v2)
        goto LABEL_13;
    }
  }
}

void sub_2232280C8(void ***a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, _QWORD *a6@<X8>)
{
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;

  if (*(char *)(a2 + 23) >= 0)
    v8 = objc_msgSend_stringWithUTF8String_(MEMORY[0x24BDD17C8], (const char *)a2, a2, a3, a4, a5);
  else
    v8 = objc_msgSend_stringWithUTF8String_(MEMORY[0x24BDD17C8], (const char *)a2, *(_QWORD *)a2, a3, a4, a5);
  v13 = (const void *)objc_msgSend_newFunctionWithName_(**a1, v9, v8, v10, v11, v12);
  v14 = (std::__shared_weak_count *)operator new(0x20uLL);
  v14->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  v14->__shared_weak_owners_ = 0;
  v14->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC25DD8;
  *a6 = sub_223228280(&v14[1].__vftable, v13, 0);
  a6[1] = v14;
  do
    v16 = __ldxr(p_shared_owners);
  while (__stxr(v16 + 1, p_shared_owners));
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
}

void sub_22322819C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_2232281B4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_2232281B4(a1, *(_QWORD *)a2);
    sub_2232281B4(a1, *(_QWORD *)(a2 + 8));
    if (*(char *)(a2 + 79) < 0)
    {
      operator delete(*(void **)(a2 + 56));
      if ((*(char *)(a2 + 55) & 0x80000000) == 0)
        goto LABEL_4;
    }
    else if ((*(char *)(a2 + 55) & 0x80000000) == 0)
    {
LABEL_4:
      operator delete((void *)a2);
      return;
    }
    operator delete(*(void **)(a2 + 32));
    operator delete((void *)a2);
  }
}

void sub_22322822C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC25F18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22322823C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC25F18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

const void **sub_22322826C(uint64_t a1)
{
  return sub_2232282B4((const void **)(a1 + 24));
}

_QWORD *sub_223228278(_QWORD *result)
{
  *result = 0;
  return result;
}

_QWORD *sub_223228280(_QWORD *a1, CFTypeRef cf, int a3)
{
  *a1 = cf;
  if (cf && a3)
    CFRetain(cf);
  return a1;
}

const void **sub_2232282B4(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

_QWORD *sub_2232282E4(_QWORD *a1, uint64_t a2, uint64_t **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const void *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v13;
  std::__shared_weak_count *v14;

  v7 = (const void *)objc_msgSend_renderCommandEncoderWithDescriptor_(**(void ***)(a2 + 8), (const char *)a2, **a3, a4, a5, a6);
  v8 = (std::__shared_weak_count *)operator new(0x20uLL);
  v8->__shared_owners_ = 0;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC25FA8;
  v13 = sub_223228280(&v8[1].__vftable, v7, 1);
  v14 = v8;
  sub_223226C7C(a1, (uint64_t *)&v13);
  v9 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *a1 = &off_24EC25F68;
  return a1;
}

void sub_2232283E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_223167354((uint64_t)&a11);
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223228400(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_223228420(uint64_t a1, _QWORD **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x24BEDD108](**(_QWORD **)(a1 + 8), sel_setRenderPipelineState_, **a2, a4, a5, a6);
}

uint64_t sub_223228434(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x24BEDD108](**(_QWORD **)(a1 + 8), sel_setVertexBytes_length_atIndex_, a2, a3, a4, a6);
}

uint64_t sub_223228450(uint64_t a1, _QWORD **a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x24BEDD108](**(_QWORD **)(a1 + 8), sel_setVertexBuffer_offset_atIndex_, **a2, a3, a4, a6);
}

uint64_t sub_223228474(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x24BEDD108](**(_QWORD **)(a1 + 8), sel_setFrontFacingWinding_, a2, a4, a5, a6);
}

uint64_t sub_223228484(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x24BEDD108](**(_QWORD **)(a1 + 8), sel_setCullMode_, a2, a4, a5, a6);
}

uint64_t sub_223228494(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x24BEDD108](**(_QWORD **)(a1 + 8), sel_setTriangleFillMode_, a2, a4, a5, a6);
}

uint64_t sub_2232284A4(uint64_t a1, _QWORD **a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x24BEDD108](**(_QWORD **)(a1 + 8), sel_setFragmentBuffer_offset_atIndex_, **a2, a3, a4, a6);
}

uint64_t sub_2232284C8(uint64_t a1, _QWORD **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x24BEDD108](**(_QWORD **)(a1 + 8), sel_setDepthStencilState_, **a2, a4, a5, a6);
}

uint64_t sub_2232284DC(uint64_t a1, int a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x24BEDD108](**(_QWORD **)(a1 + 8), sel_drawPrimitives_vertexStart_vertexCount_, a2, a3, a4, a6);
}

uint64_t sub_2232284FC(uint64_t a1, int a2, unsigned int a3, int a4, _QWORD **a5)
{
  return MEMORY[0x24BEDD108](**(_QWORD **)(a1 + 8), sel_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_, a2, a3, a4, **a5);
}

void sub_223228534(_QWORD *a1)
{
  sub_223226D74(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223228558(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC25FA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223228568(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC25FA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

const void **sub_223228598(uint64_t a1)
{
  return sub_2232282B4((const void **)(a1 + 24));
}

uint64_t sub_2232285A4(_QWORD **a1, _QWORD **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x24BEDD108](**a1, sel_setTexture_, **a2, a4, a5, a6);
}

uint64_t sub_2232285B8(_QWORD **a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x24BEDD108](**a1, sel_setLoadAction_, a2, a4, a5, a6);
}

uint64_t sub_2232285C8(_QWORD **a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x24BEDD108](**a1, sel_setStoreAction_, a2, a4, a5, a6);
}

uint64_t sub_2232285D8(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x24BEDD108](**a1, sel_setClearColor_, a3, a4, a5, a6);
}

uint64_t sub_2232285EC(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x24BEDD108](**a1, sel_setClearDepth_, a3, a4, a5, a6);
}

_QWORD *sub_2232285F8(_QWORD *a1)
{
  id v2;
  _QWORD *v3;

  v2 = objc_alloc_init(MEMORY[0x24BDDD690]);
  v3 = operator new(0x20uLL);
  v3[1] = 0;
  v3[2] = 0;
  *v3 = &off_24EC260E8;
  *a1 = sub_223228280(v3 + 3, v2, 0);
  a1[1] = v3;
  return a1;
}

void sub_22322865C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_223228674(void ***a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  unsigned int v7;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  v7 = a2;
  v9 = (void *)objc_msgSend_colorAttachments(**a1, a2, a3, a4, a5, a6);
  v14 = (const void *)objc_msgSend_objectAtIndexedSubscript_(v9, v10, v7, v11, v12, v13);
  v15 = (std::__shared_weak_count *)operator new(0x20uLL);
  v15->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v15->__shared_owners_;
  v15->__shared_weak_owners_ = 0;
  v15->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC26048;
  v17 = sub_223228280(&v15[1].__vftable, v14, 1);
  do
    v18 = __ldxr(p_shared_owners);
  while (__stxr(v18 + 1, p_shared_owners));
  *a7 = v17;
  a7[1] = v15;
  do
    v19 = __ldxr(p_shared_owners);
  while (__stxr(v19 + 1, p_shared_owners));
  do
    v20 = __ldaxr(p_shared_owners);
  while (__stlxr(v20 - 1, p_shared_owners));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  do
    v21 = __ldaxr(p_shared_owners);
  while (__stlxr(v21 - 1, p_shared_owners));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
}

void sub_22322876C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_223228784(void ***a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  const void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v8 = (const void *)objc_msgSend_depthAttachment(**a1, a2, a3, a4, a5, a6);
  v9 = (std::__shared_weak_count *)operator new(0x20uLL);
  v9->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v9->__shared_weak_owners_ = 0;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC26098;
  v11 = sub_223228280(&v9[1].__vftable, v8, 1);
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  *a7 = v11;
  a7[1] = v9;
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void sub_223228870(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_223228888(_QWORD **a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x24BEDD108](**a1, sel_setRenderTargetArrayLength_, a2, a4, a5, a6);
}

void sub_223228898(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC25FF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2232288A8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC25FF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

const void **sub_2232288D8(uint64_t a1)
{
  return sub_2232282B4((const void **)(a1 + 24));
}

void sub_2232288E4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC26048;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2232288F4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC26048;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

const void **sub_223228924(uint64_t a1)
{
  return sub_2232282B4((const void **)(a1 + 24));
}

void sub_223228930(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC26098;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223228940(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC26098;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

const void **sub_223228970(uint64_t a1)
{
  return sub_2232282B4((const void **)(a1 + 24));
}

void sub_22322897C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC260E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22322898C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC260E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

const void **sub_2232289BC(uint64_t a1)
{
  return sub_2232282B4((const void **)(a1 + 24));
}

uint64_t sub_2232289C8(_QWORD **a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x24BEDD108](**a1, sel_setPixelFormat_, a2, a4, a5, a6);
}

uint64_t sub_2232289D8(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x24BEDD108](**a1, sel_setBlendingEnabled_, a2, a4, a5, a6);
}

uint64_t sub_2232289E8(_QWORD **a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x24BEDD108](**a1, sel_setSourceRGBBlendFactor_, a2, a4, a5, a6);
}

uint64_t sub_2232289F8(_QWORD **a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x24BEDD108](**a1, sel_setDestinationRGBBlendFactor_, a2, a4, a5, a6);
}

uint64_t sub_223228A08(_QWORD **a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x24BEDD108](**a1, sel_setRgbBlendOperation_, a2, a4, a5, a6);
}

uint64_t sub_223228A18(_QWORD **a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x24BEDD108](**a1, sel_setSourceAlphaBlendFactor_, a2, a4, a5, a6);
}

uint64_t sub_223228A28(_QWORD **a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x24BEDD108](**a1, sel_setDestinationAlphaBlendFactor_, a2, a4, a5, a6);
}

uint64_t sub_223228A38(_QWORD **a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x24BEDD108](**a1, sel_setAlphaBlendOperation_, a2, a4, a5, a6);
}

_QWORD *sub_223228A48(_QWORD *a1)
{
  id v2;
  _QWORD *v3;

  v2 = objc_alloc_init(MEMORY[0x24BDDD6B8]);
  v3 = operator new(0x20uLL);
  v3[1] = 0;
  v3[2] = 0;
  *v3 = &off_24EC26188;
  *a1 = sub_223228280(v3 + 3, v2, 0);
  a1[1] = v3;
  return a1;
}

void sub_223228AAC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_223228AC4(void ***a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  unsigned int v7;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t v18;

  v7 = a2;
  v9 = (void *)objc_msgSend_colorAttachments(**a1, a2, a3, a4, a5, a6);
  v14 = (const void *)objc_msgSend_objectAtIndexedSubscript_(v9, v10, v7, v11, v12, v13);
  v15 = (std::__shared_weak_count *)operator new(0x20uLL);
  v15->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v15->__shared_owners_;
  v15->__shared_weak_owners_ = 0;
  v15->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC26138;
  *a7 = sub_223228280(&v15[1].__vftable, v14, 1);
  a7[1] = v15;
  do
    v17 = __ldxr(p_shared_owners);
  while (__stxr(v17 + 1, p_shared_owners));
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
}

void sub_223228B80(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_223228B98(_QWORD **a1, _QWORD **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x24BEDD108](**a1, sel_setVertexFunction_, **a2, a4, a5, a6);
}

uint64_t sub_223228BAC(_QWORD **a1, _QWORD **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x24BEDD108](**a1, sel_setFragmentFunction_, **a2, a4, a5, a6);
}

uint64_t sub_223228BC0(_QWORD **a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x24BEDD108](**a1, sel_setRasterSampleCount_, a2, a4, a5, a6);
}

uint64_t sub_223228BD0(_QWORD **a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x24BEDD108](**a1, sel_setDepthAttachmentPixelFormat_, a2, a4, a5, a6);
}

_QWORD *sub_223228BE0(_QWORD *a1, void ***a2, uint64_t **a3, unsigned int a4, _QWORD *a5)
{
  const void *v7;
  _QWORD *v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  const void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  _QWORD *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  const void *v23;

  *a1 = 0;
  a1[1] = 0;
  v23 = 0;
  v7 = (const void *)objc_msgSend_newRenderPipelineStateWithDescriptor_options_reflection_error_(**a2, (const char *)a2, **a3, a4, 0, (uint64_t)&v23);
  v8 = operator new(0x20uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_24EC261D8;
  v9 = sub_223228280(v8 + 3, v7, 0);
  v10 = (std::__shared_weak_count *)a1[1];
  *a1 = v9;
  a1[1] = v8;
  if (!v10)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (!a5)
      return a1;
  }
  else
  {
LABEL_5:
    if (!a5)
      return a1;
  }
  v13 = v23;
  if (v23)
  {
    v14 = (std::__shared_weak_count *)operator new(0x20uLL);
    v14->__shared_owners_ = 0;
    v15 = (unint64_t *)&v14->__shared_owners_;
    v14->__shared_weak_owners_ = 0;
    v14->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC25A40;
    v16 = sub_223228280(&v14[1].__vftable, v13, 1);
    do
      v17 = __ldxr(v15);
    while (__stxr(v17 + 1, v15));
    v18 = (std::__shared_weak_count *)a5[1];
    *a5 = v16;
    a5[1] = v14;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    do
      v21 = __ldaxr(v15);
    while (__stlxr(v21 - 1, v15));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  return a1;
}

void sub_223228D68(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  void *v4;

  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v4);
  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_223228DA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_223228DB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_223228DC8(_QWORD *a1, void ***a2, uint64_t **a3, unsigned int a4, _QWORD *a5)
{
  return sub_223228BE0(a1, a2, a3, a4, a5);
}

void sub_223228DD0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC26138;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223228DE0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC26138;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

const void **sub_223228E10(uint64_t a1)
{
  return sub_2232282B4((const void **)(a1 + 24));
}

void sub_223228E1C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC26188;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223228E2C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC26188;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

const void **sub_223228E5C(uint64_t a1)
{
  return sub_2232282B4((const void **)(a1 + 24));
}

void sub_223228E68(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC261D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223228E78(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC261D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

const void **sub_223228EA8(uint64_t a1)
{
  return sub_2232282B4((const void **)(a1 + 24));
}

_QWORD *sub_223228EB4(_QWORD *a1)
{
  id v2;
  _QWORD *v3;

  v2 = objc_alloc_init(MEMORY[0x24BDDD6F0]);
  v3 = operator new(0x20uLL);
  v3[1] = 0;
  v3[2] = 0;
  *v3 = &off_24EC26228;
  *a1 = sub_223228280(v3 + 3, v2, 0);
  a1[1] = v3;
  return a1;
}

void sub_223228F18(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_223228F30(_QWORD **a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x24BEDD108](**a1, sel_setMinFilter_, a2, a4, a5, a6);
}

uint64_t sub_223228F40(_QWORD **a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x24BEDD108](**a1, sel_setMagFilter_, a2, a4, a5, a6);
}

uint64_t sub_223228F50(_QWORD **a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x24BEDD108](**a1, sel_setSAddressMode_, a2, a4, a5, a6);
}

uint64_t sub_223228F60(_QWORD **a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x24BEDD108](**a1, sel_setTAddressMode_, a2, a4, a5, a6);
}

uint64_t sub_223228F70(_QWORD **a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x24BEDD108](**a1, sel_setRAddressMode_, a2, a4, a5, a6);
}

uint64_t sub_223228F80(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x24BEDD108](**a1, sel_setNormalizedCoordinates_, a2, a4, a5, a6);
}

_QWORD *sub_223228F90(_QWORD *a1, void ***a2, uint64_t **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const void *v7;
  _QWORD *v8;

  v7 = (const void *)objc_msgSend_newSamplerStateWithDescriptor_(**a2, (const char *)a2, **a3, a4, a5, a6);
  v8 = operator new(0x20uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_24EC26278;
  *a1 = sub_223228280(v8 + 3, v7, 0);
  a1[1] = v8;
  return a1;
}

void sub_223228FFC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_223229014(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC26228;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223229024(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC26228;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

const void **sub_223229054(uint64_t a1)
{
  return sub_2232282B4((const void **)(a1 + 24));
}

void sub_223229060(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC26278;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223229070(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC26278;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

const void **sub_2232290A0(uint64_t a1)
{
  return sub_2232282B4((const void **)(a1 + 24));
}

void sub_2232290AC(unsigned int a1@<W0>, const char *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  const void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;

  v6 = (const void *)objc_msgSend_texture2DDescriptorWithPixelFormat_width_height_mipmapped_(MEMORY[0x24BDDD740], a2, a1, a2, a3, a4);
  v7 = (std::__shared_weak_count *)operator new(0x20uLL);
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC262C8;
  *a5 = sub_223228280(&v7[1].__vftable, v6, 1);
  a5[1] = v7;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_223229170(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_223229188(_QWORD **a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x24BEDD108](**a1, sel_setStorageMode_, a2, a4, a5, a6);
}

uint64_t sub_223229198(_QWORD **a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x24BEDD108](**a1, sel_setUsage_, a2, a4, a5, a6);
}

_QWORD *sub_2232291A8(_QWORD *a1)
{
  _QWORD *v2;

  v2 = operator new(0x20uLL);
  v2[2] = 0;
  v2[3] = 0;
  *v2 = &off_24EC25FF8;
  v2[1] = 0;
  *a1 = sub_223228278(v2 + 3);
  a1[1] = v2;
  return a1;
}

void sub_2232291F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

_QWORD *sub_223229208(_QWORD *a1, void ***a2, uint64_t **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const void *v7;
  _QWORD *v8;

  v7 = (const void *)objc_msgSend_newTextureWithDescriptor_(**a2, (const char *)a2, **a3, a4, a5, a6);
  v8 = operator new(0x20uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_24EC25FF8;
  *a1 = sub_223228280(v8 + 3, v7, 0);
  a1[1] = v8;
  return a1;
}

void sub_223229274(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

_QWORD *sub_22322928C(_QWORD *a1, void ***a2, uint64_t **a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  const void *v7;
  _QWORD *v8;

  v7 = (const void *)objc_msgSend_newTextureWithDescriptor_iosurface_plane_(**a2, (const char *)a2, **a3, a4, a5, a6);
  v8 = operator new(0x20uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_24EC25FF8;
  *a1 = sub_223228280(v8 + 3, v7, 0);
  a1[1] = v8;
  return a1;
}

void sub_2232292FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_223229314(void ***a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_width(**a1, a2, a3, a4, a5, a6);
}

uint64_t sub_223229330(void ***a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_height(**a1, a2, a3, a4, a5, a6);
}

uint64_t sub_22322934C(void ***a1, const char *a2, unsigned int a3, _QWORD *a4, unsigned int a5)
{
  void *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  _OWORD v10[3];

  v5 = **a1;
  v6 = a4[1];
  *(_QWORD *)&v7 = *a4;
  *((_QWORD *)&v7 + 1) = HIDWORD(*a4);
  v8 = v7;
  *(_QWORD *)&v7 = v6;
  *((_QWORD *)&v7 + 1) = HIDWORD(v6);
  v10[0] = v8;
  v10[1] = v7;
  *(_QWORD *)&v8 = a4[2];
  *(_QWORD *)&v7 = v8;
  *((_QWORD *)&v7 + 1) = DWORD1(v8);
  v10[2] = v7;
  return objc_msgSend_getBytes_bytesPerRow_fromRegion_mipmapLevel_(v5, a2, (uint64_t)a2, a3, (uint64_t)v10, a5);
}

uint64_t sub_2232293A0(void ***a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5)
{
  void *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  _OWORD v10[3];

  v5 = **a1;
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)&v7 = *(_QWORD *)a2;
  *((_QWORD *)&v7 + 1) = HIDWORD(*(_QWORD *)a2);
  v8 = v7;
  *(_QWORD *)&v7 = v6;
  *((_QWORD *)&v7 + 1) = HIDWORD(v6);
  v10[0] = v8;
  v10[1] = v7;
  *(_QWORD *)&v8 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)&v7 = v8;
  *((_QWORD *)&v7 + 1) = DWORD1(v8);
  v10[2] = v7;
  return objc_msgSend_replaceRegion_mipmapLevel_withBytes_bytesPerRow_(v5, (const char *)a2, (uint64_t)v10, a3, a4, a5);
}

uint64_t sub_2232293F4(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x24BEDD108](**a1, sel_iosurface, a3, a4, a5, a6);
}

void sub_223229400(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC262C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223229410(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC262C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

const void **sub_223229440(uint64_t a1)
{
  return sub_2232282B4((const void **)(a1 + 24));
}

unint64_t sub_22322944C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t i;

  v3 = ((a2 >> 7) ^ 0x13701D) & a3;
  v4 = 0;
  for (i = *(_QWORD *)(a1 + v3) & (~*(_QWORD *)(a1 + v3) << 7) & 0x8080808080808080;
        !i;
        i = *(_QWORD *)(a1 + v3) & (~*(_QWORD *)(a1 + v3) << 7) & 0x8080808080808080)
  {
    v4 += 8;
    v3 = (v4 + v3) & a3;
  }
  return (v3 + (__clz(__rbit64(i)) >> 3)) & a3;
}

unint64_t sub_2232294A8(unint64_t result, uint64_t a2)
{
  unint64_t v2;
  _DWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  int8x16_t *v7;
  int8x16_t v8;
  int8x16_t v9;
  uint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int v13;

  v2 = result + a2;
  if (a2 >= 1)
  {
    v3 = (_DWORD *)(result + 8);
    if (v2 > result + 8)
      v3 = (_DWORD *)(result + a2);
    v4 = (unint64_t)v3 + ~result;
    v5 = (unint64_t *)result;
    if (v4 < 0x18)
      goto LABEL_12;
    v6 = (v4 >> 3) + 1;
    v5 = (unint64_t *)(result + 8 * (v6 & 0x3FFFFFFFFFFFFFFCLL));
    v7 = (int8x16_t *)(result + 16);
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v11 = vandq_s8(v7[-1], v8);
      v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      *v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_12:
      do
      {
        *v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while ((unint64_t)v5 < v2);
    }
  }
  v13 = *(_DWORD *)result;
  *(_DWORD *)(v2 + 4) = *(_DWORD *)(result + 3);
  *(_DWORD *)(v2 + 1) = v13;
  *(_BYTE *)v2 = -1;
  return result;
}

void sub_22322956C(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t (***a3)()@<X2>, uint64_t a4@<X8>)
{
  void *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  id v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::string::size_type v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  void *v29;
  void **v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  void *v35[2];
  uint64_t v36;
  void *__dst[2];
  char v38;
  char v39;
  void *v40;
  char v41;
  void *__p;
  char v43;
  char v44;
  char v45;
  __int128 v46;
  std::string v47[5];
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  char v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  char v57;
  char v58;
  __n128 v59;
  void **v60;
  void *v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  objc_msgSend_dataWithPropertyList_format_options_error_(MEMORY[0x24BDD1770], (const char *)a2, *a1, 200, 0, 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (*a3 == off_24EC719E0)
  {
    v15 = objc_retainAutorelease(v7);
    v21 = objc_msgSend_bytes(v15, v16, v17, v18, v19, v20);
    v27 = objc_msgSend_length(v15, v22, v23, v24, v25, v26);
    v47[0].__r_.__value_.__r.__words[0] = v27;
    v47[0].__r_.__value_.__l.__size_ = v21;
    if (v21)
      v28 = 1;
    else
      v28 = v27 == 0;
    if (!v28
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_223229CE0((size_t *)v47, v35);
    sub_223FF1D00(&v59, (__n128 *)v35);
    sub_223167354((uint64_t)v35);
    sub_223229B78((uint64_t)a3, a2, (uint64_t)&v48);
    sub_2242AFF7C((uint64_t)&v48, (uint64_t *)&v59);
    if (SBYTE7(v49) < 0)
      operator delete((void *)v48);
    sub_223167354((uint64_t)&v59);
    goto LABEL_16;
  }
  sub_224532F3C(&v46, a2, 0);
  if ((objc_msgSend_writeToURL_atomically_(v8, v9, v46, 1, v10, v11) & 1) != 0)
  {
    v12 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
    if (*((_QWORD *)&v46 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
LABEL_16:
    *(_BYTE *)(a4 + 120) = 1;
    goto LABEL_17;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    sub_223197FA4(v35, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v35 = *(_OWORD *)a2;
    v36 = *(_QWORD *)(a2 + 16);
  }
  v59.n128_u64[0] = (unint64_t)"Failed to write plist to: ";
  v59.n128_u64[1] = 26;
  v29 = (void *)HIBYTE(v36);
  v30 = v35;
  if (v36 < 0)
  {
    v30 = (void **)v35[0];
    v29 = v35[1];
  }
  v60 = v30;
  v61 = v29;
  sub_2231A9820((uint64_t)&v59, (uint64_t)&v62, 0, 0, v47);
  sub_22456A884(__dst, (__int128 *)v47);
  v45 = 1;
  sub_2231A958C(5u, (__int128 *)__dst, (uint64_t)&v48);
  *(_OWORD *)a4 = v48;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (!v58)
  {
    *(_BYTE *)(a4 + 120) = 0;
    goto LABEL_38;
  }
  *(_BYTE *)(a4 + 40) = 0;
  if (v51)
  {
    *(_OWORD *)(a4 + 16) = v49;
    *(_QWORD *)(a4 + 32) = v50;
    v50 = 0;
    v49 = 0uLL;
    *(_BYTE *)(a4 + 40) = 1;
  }
  *(_BYTE *)(a4 + 48) = 0;
  *(_BYTE *)(a4 + 104) = 0;
  if (!v57)
  {
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (!v51)
      goto LABEL_38;
    goto LABEL_36;
  }
  v31 = v54;
  *(_QWORD *)(a4 + 64) = v53;
  *(_OWORD *)(a4 + 48) = v52;
  v52 = 0uLL;
  *(_QWORD *)(a4 + 72) = v31;
  *(_OWORD *)(a4 + 80) = v55;
  *(_QWORD *)(a4 + 96) = v56;
  v56 = 0;
  v53 = 0;
  v55 = 0uLL;
  *(_BYTE *)(a4 + 104) = 1;
  *(_BYTE *)(a4 + 112) = 1;
  *(_BYTE *)(a4 + 120) = 0;
  if (SHIBYTE(v56) < 0)
  {
    operator delete((void *)v55);
    if ((SHIBYTE(v53) & 0x80000000) == 0)
    {
LABEL_29:
      if (!v51)
        goto LABEL_38;
      goto LABEL_36;
    }
  }
  else if ((SHIBYTE(v53) & 0x80000000) == 0)
  {
    goto LABEL_29;
  }
  operator delete((void *)v52);
  if (!v51)
    goto LABEL_38;
LABEL_36:
  if (SHIBYTE(v50) < 0)
    operator delete((void *)v49);
LABEL_38:
  if (v45)
  {
    if (v44)
    {
      if (v43 < 0)
        operator delete(__p);
      if (v41 < 0)
        operator delete(v40);
    }
    if (v39 && v38 < 0)
      operator delete(__dst[0]);
  }
  if ((SHIBYTE(v47[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v36) & 0x80000000) == 0)
      goto LABEL_49;
LABEL_52:
    operator delete(v35[0]);
    v32 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
    if (!*((_QWORD *)&v46 + 1))
      goto LABEL_17;
    goto LABEL_53;
  }
  operator delete(v47[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(v36) < 0)
    goto LABEL_52;
LABEL_49:
  v32 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
  if (!*((_QWORD *)&v46 + 1))
    goto LABEL_17;
LABEL_53:
  p_shared_owners = (unint64_t *)&v32->__shared_owners_;
  do
    v34 = __ldaxr(p_shared_owners);
  while (__stlxr(v34 - 1, p_shared_owners));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
LABEL_17:

}

void sub_2232299A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,__int128 __p,int a31,__int16 a32,char a33,char a34,char __dst,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  void *v47;

  sub_223167354((uint64_t)&a28);

  _Unwind_Resume(a1);
}

void sub_223229B78(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::string __p;
  _QWORD v7[6];

  memset(&__p, 0, sizeof(__p));
  sub_2231816F0(&__p, (std::string *)"/", (std::string *)"");
  sub_2242AFF14(a1, (uint64_t)&__p, v7);
  sub_2242B07C4((uint64_t)v7, a2, a3);
  sub_2242B072C((uint64_t)v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_223229C14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_2242B072C((uint64_t)&a16);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223229C44(const char *a1@<X0>, uint64_t *a2@<X1>, std::string *a3@<X8>)
{
  size_t v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD v8[4];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8[0] = a1;
  v5 = strlen(a1);
  v6 = *((unsigned __int8 *)a2 + 23);
  if ((v6 & 0x80u) == 0)
    v7 = a2;
  else
    v7 = (uint64_t *)*a2;
  if ((v6 & 0x80u) != 0)
    v6 = a2[1];
  v8[1] = v5;
  v8[2] = v7;
  v8[3] = v6;
  sub_2231A9820((uint64_t)v8, (uint64_t)&v9, 0, 0, a3);
}

void sub_223229CE0(size_t *a1@<X0>, _QWORD *a2@<X8>)
{
  const void *v3;
  size_t v4;
  void *v5;

  v4 = *a1;
  v3 = (const void *)a1[1];
  if (*a1)
  {
    if ((v4 & 0x8000000000000000) != 0)
      sub_22316E078();
    v5 = operator new(v4);
    memcpy(v5, v3, v4);
  }
  else
  {
    v5 = 0;
  }
  sub_2242B4ACC(a2);
  if (v5)
    operator delete(v5);
}

void sub_223229D8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  if (v11)
    operator delete(v11);
  _Unwind_Resume(exception_object);
}

void sub_223229DB8()
{
  sub_224573EE0((uint64_t)sub_22322AD80);
  sub_224573CCC((uint64_t)sub_22322AD80, 0);
}

void *sub_223229DE8(uint64_t a1)
{
  const char *v1;
  uint64_t v2;
  void *result;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  id v8;
  std::__shared_weak_count *v9;

  if (!*(_BYTE *)(a1 + 32))
    sub_224574BB0();
  v1 = *(const char **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  sub_22319ED0C(&v8, a1 + 16);
  result = sub_22322A04C(v1, v2, &v8);
  v4 = result;
  v5 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      return v4;
    }
  }
  return result;
}

void sub_223229E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223229E9C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  if (*(_BYTE *)(result + 32))
  {
    v2 = *(std::__shared_weak_count **)(result + 24);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        return v1;
      }
    }
  }
  return result;
}

std::__shared_weak_count_vtbl **sub_223229F0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, std::__shared_weak_count_vtbl **a3@<X2>, uint64_t a4@<X8>)
{
  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = a2;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 32) = 0;
  return sub_223229F54(a4 + 16, a3);
}

void sub_223229F40(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223229E9C(v1);
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl **sub_223229F54(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count_vtbl **result;
  __int128 v11;

  if (*(_BYTE *)(a1 + 16))
  {
    sub_224528A88((std::__shared_weak_count_vtbl **)&v11, *a2, 1);
    v3 = v11;
    v11 = 0uLL;
    v4 = *(std::__shared_weak_count **)(a1 + 8);
    *(_OWORD *)a1 = v3;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
    if (!*((_QWORD *)&v11 + 1))
      return (std::__shared_weak_count_vtbl **)a1;
    v8 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      return (std::__shared_weak_count_vtbl **)a1;
    }
    else
    {
      return (std::__shared_weak_count_vtbl **)a1;
    }
  }
  else
  {
    result = sub_224528A88((std::__shared_weak_count_vtbl **)a1, *a2, 1);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return result;
}

void *sub_22322A04C(const char *a1, uint64_t a2, id *a3)
{
  id v4;
  const char *v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  unsigned int v13;
  size_t v14;
  void *v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  const void *v22;
  size_t v23;
  unsigned __int8 v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  size_t v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  const char *v43;
  size_t v44;
  NSObject *v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  void **v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  os_log_type_t v53;
  NSObject *v54;
  NSObject *v55;
  size_t v56;
  std::__shared_weak_count_vtbl *v57;
  std::__shared_weak_count *v58;
  size_t v59;
  size_t v60;
  _QWORD *p_dst;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  std::__shared_weak_count *v66;
  unint64_t *p_shared_owners;
  unint64_t v68;
  void *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  const char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  id v112;
  const char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  const char *v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  uint64_t v123;
  const char *v124;
  char *__s;
  int v126;
  id v127;
  uint64_t *v128[3];
  int v129;
  const char *v130;
  int v131;
  const char *v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  uint64_t v135;
  id v136;
  _QWORD v137[4];
  __int128 v138;
  std::__shared_weak_count *v139;
  char *v140;
  std::__shared_weak_count *v141;
  _QWORD *__dst;
  __int128 v143;
  _BYTE v144[24];
  __int128 v145;
  void *v146[2];
  unint64_t v147;
  char v148;
  uint64_t v149;

  v149 = *MEMORY[0x24BDAC8D0];
  v4 = *a3;
  v136 = 0;
  objc_msgSend_dataWithPropertyList_format_options_error_(MEMORY[0x24BDD1770], v5, (uint64_t)v4, 200, 0, (uint64_t)&v136);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = v136;
  if (!v6)
  {
    v20 = atomic_load((unsigned __int8 *)&qword_2557892F0);
    if ((v20 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
    {
      __cxa_atexit((void (*)(void *))sub_2231A8A28, &unk_255789280, &dword_22314D000);
      __cxa_guard_release(&qword_2557892F0);
    }
    v21 = atomic_load((unsigned __int8 *)&qword_2540CA6B8);
    if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_2540CA6B8))
    {
      sub_22455F53C(v128);
      sub_223174DE4(v144, "cv3d.recon.state_capture");
      sub_2232300E0(v128, (uint64_t)v144, &qword_2540CA6B0);
      if ((v144[23] & 0x80000000) != 0)
        operator delete(*(void **)v144);
      __cxa_guard_release(&qword_2540CA6B8);
    }
    if (*(char *)(qword_2540CA6B0 + 39) < 0)
    {
      v22 = *(const void **)(qword_2540CA6B0 + 16);
      v23 = *(_QWORD *)(qword_2540CA6B0 + 24);
    }
    else
    {
      v22 = (const void *)(qword_2540CA6B0 + 16);
      v23 = *(unsigned __int8 *)(qword_2540CA6B0 + 39);
    }
    sub_223195728((uint64_t)&unk_255789280, v22, v23, "Error serializing dictionary into data for State Data: %s", 0x39uLL);
    v24 = atomic_load((unsigned __int8 *)&qword_2540CA6C8);
    if ((v24 & 1) == 0 && __cxa_guard_acquire(&qword_2540CA6C8))
    {
      sub_22455F53C(v128);
      sub_223174DE4(v144, "cv3dapi.recon3d");
      sub_2232300E0(v128, (uint64_t)v144, &qword_2540CA6C0);
      if ((v144[23] & 0x80000000) != 0)
        operator delete(*(void **)v144);
      __cxa_guard_release(&qword_2540CA6C8);
    }
    v135 = qword_2540CA6C0;
    if (**(int **)(qword_2540CA6C0 + 56) > 5)
      goto LABEL_126;
    v25 = *(unsigned __int8 *)(qword_2540CA6C0 + 72);
    v26 = sub_22455F97C(&v135);
    v27 = v26;
    if (!v25 && !v26)
      goto LABEL_126;
    v128[0] = &v135;
    v128[1] = (uint64_t *)std::chrono::steady_clock::now().__d_.__rep_;
    v128[2] = (uint64_t *)std::chrono::system_clock::now().__d_.__rep_;
    v129 = 5;
    v130 = "unknown file";
    v131 = 71;
    v133 = 0;
    v134 = 0;
    v132 = "unknown function";
    objc_msgSend_description(v12, v28, v29, v30, v31, v32);
    v127 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    __s = (char *)objc_msgSend_UTF8String(v127, v33, v34, v35, v36, v37);
    v38 = *v128[0];
    v39 = (const char *)(*v128[0] + 16);
    v123 = *v128[0];
    v124 = v39;
    if (*(char *)(*v128[0] + 39) < 0)
    {
      v39 = *(const char **)(v38 + 16);
      v40 = *(_QWORD *)(v38 + 24);
      v42 = atomic_load((unsigned __int8 *)&qword_255788F58);
      v126 = v25;
      if ((v42 & 1) != 0)
        goto LABEL_17;
    }
    else
    {
      v40 = *(unsigned __int8 *)(*v128[0] + 39);
      v41 = atomic_load((unsigned __int8 *)&qword_255788F58);
      v126 = v25;
      if ((v41 & 1) != 0)
        goto LABEL_17;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)v144);
      sub_223199C58("com.apple.cv3d", (unint64_t)v144, &xmmword_255788F40);
      if ((_BYTE)v145 && (v144[23] & 0x80000000) != 0)
        operator delete(*(void **)v144);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
      v25 = v126;
    }
LABEL_17:
    if (byte_255788F57 >= 0)
      v43 = (const char *)&xmmword_255788F40;
    else
      v43 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v44 = byte_255788F57;
    else
      v44 = *((_QWORD *)&xmmword_255788F40 + 1);
    v45 = os_log_create(v43, v39);
    *(_QWORD *)v144 = v45;

    v46 = &v144[8];
    if (v44 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v44 >= 0x17)
    {
      v47 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v44 | 7) != 0x17)
        v47 = v44 | 7;
      v48 = v47 + 1;
      v46 = operator new(v47 + 1);
      *(_QWORD *)&v144[16] = v44;
      *(_QWORD *)&v145 = v48 | 0x8000000000000000;
      *(_QWORD *)&v144[8] = v46;
      v25 = v126;
    }
    else
    {
      BYTE7(v145) = v44;
      if (!v44)
      {
LABEL_31:
        v46[v44] = 0;
        BYTE8(v145) = 1;
        v49 = v146;
        if (v40 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v40 >= 0x17)
        {
          v50 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v40 | 7) != 0x17)
            v50 = v40 | 7;
          v51 = v50 + 1;
          v49 = (void **)operator new(v50 + 1);
          v146[1] = (void *)v40;
          v147 = v51 | 0x8000000000000000;
          v146[0] = v49;
          v25 = v126;
        }
        else
        {
          HIBYTE(v147) = v40;
          if (!v40)
            goto LABEL_39;
        }
        memmove(v49, v39, v40);
LABEL_39:
        *((_BYTE *)v49 + v40) = 0;
        v148 = 1;
        v52 = objc_retainAutorelease(*(id *)v144);
        if (v148 && SHIBYTE(v147) < 0)
          operator delete(v146[0]);
        if (BYTE8(v145) && SBYTE7(v145) < 0)
          operator delete(*(void **)&v144[8]);

        v53 = sub_22455F7B4(5u);
        v54 = v52;
        v55 = v54;
        if (!v27 || !*(_QWORD *)(v27 + 8))
        {
          os_log_type_enabled(v54, v53);
          *(_DWORD *)v144 = 136315138;
          *(_QWORD *)&v144[4] = __s;
          v62 = (void *)_os_log_send_and_compose_impl();
          if (v62)
            free(v62);
          goto LABEL_119;
        }
        v56 = _os_log_pack_size();
        v57 = (std::__shared_weak_count_vtbl *)operator new(v56, (std::align_val_t)8uLL);
        v58 = (std::__shared_weak_count *)operator new();
        v58->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
        v58->__shared_owners_ = 0;
        v58->__shared_weak_owners_ = 0;
        v58[1].__vftable = v57;
        *(_QWORD *)&v138 = v57;
        *((_QWORD *)&v138 + 1) = v57;
        v140 = 0;
        v141 = 0;
        v139 = v58;
        v59 = strlen(__s);
        if (v59 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        v60 = v59;
        if (v59 >= 0x17)
        {
          v63 = (v59 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v59 | 7) != 0x17)
            v63 = v59 | 7;
          v64 = v63 + 1;
          p_dst = operator new(v63 + 1);
          *(_QWORD *)&v143 = v60;
          *((_QWORD *)&v143 + 1) = v64 | 0x8000000000000000;
          __dst = p_dst;
        }
        else
        {
          HIBYTE(v143) = v59;
          p_dst = &__dst;
          if (!v59)
          {
LABEL_57:
            *((_BYTE *)p_dst + v60) = 0;
            v137[1] = __dst;
            v137[2] = v143;
            *(_QWORD *)((char *)&v137[2] + 7) = *(_QWORD *)((char *)&v143 + 7);
            v137[0] = off_24EC1FA48;
            HIBYTE(v137[3]) = HIBYTE(v143);
            v65 = operator new(0x38uLL);
            v65[1] = 0;
            v65[2] = 0;
            *v65 = &off_24EC1F9F8;
            v65[3] = off_24EC1FA48;
            *((_OWORD *)v65 + 2) = *(_OWORD *)&v137[1];
            v65[6] = v137[3];
            memset(&v137[1], 0, 24);
            v66 = v141;
            v140 = (char *)(v65 + 3);
            v141 = (std::__shared_weak_count *)v65;
            if (v66)
            {
              p_shared_owners = (unint64_t *)&v66->__shared_owners_;
              do
                v68 = __ldaxr(p_shared_owners);
              while (__stlxr(v68 - 1, p_shared_owners));
              if (!v68)
              {
                ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                std::__shared_weak_count::__release_weak(v66);
              }
            }
            if (SHIBYTE(v137[3]) < 0)
              operator delete((void *)v137[1]);
            nullsub_30(v137);
            *(_OWORD *)v144 = v138;
            v69 = v140;
            *(_QWORD *)&v144[16] = v139;
            if (v139)
            {
              v70 = (unint64_t *)&v139->__shared_owners_;
              do
                v71 = __ldxr(v70);
              while (__stxr(v71 + 1, v70));
            }
            v72 = v141;
            *(_QWORD *)&v145 = v69;
            *((_QWORD *)&v145 + 1) = v141;
            if (v141)
            {
              v73 = (unint64_t *)&v141->__shared_owners_;
              do
                v74 = __ldxr(v73);
              while (__stxr(v74 + 1, v73));
              v146[0] = v69;
              do
                v75 = __ldaxr(v73);
              while (__stlxr(v75 - 1, v73));
              if (!v75)
              {
                ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                std::__shared_weak_count::__release_weak(v72);
              }
            }
            else
            {
              v146[0] = v69;
            }
            v76 = v139;
            if (v139)
            {
              v77 = (unint64_t *)&v139->__shared_owners_;
              do
                v78 = __ldaxr(v77);
              while (__stlxr(v78 - 1, v77));
              if (!v78)
              {
                ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                std::__shared_weak_count::__release_weak(v76);
              }
            }
            v79 = *(_QWORD *)v144;
            if (*((char *)v146[0] + 31) >= 0)
              v80 = (char *)v146[0] + 8;
            else
              v80 = (char *)*((_QWORD *)v146[0] + 1);
            v81 = _os_log_pack_fill();
            *(_DWORD *)v81 = 136315138;
            *(_QWORD *)(v81 + 4) = v80;
            v82 = operator new();
            v83 = *(unsigned __int8 *)(v123 + 39);
            v84 = *(const char **)(v123 + 16);
            v85 = *(_QWORD *)(v123 + 24);
            v86 = v145;
            *(_OWORD *)(v82 + 8) = *(_OWORD *)&v144[8];
            if ((v83 & 0x80u) != 0)
              v83 = v85;
            else
              v84 = v124;
            *(_QWORD *)v82 = v79;
            *(_QWORD *)&v144[8] = 0;
            *(_QWORD *)&v144[16] = 0;
            *(_OWORD *)(v82 + 24) = v86;
            v145 = 0uLL;
            *(_QWORD *)(v82 + 40) = v84;
            *(_QWORD *)(v82 + 48) = v83;
            *(_BYTE *)(v82 + 56) = v53;
            v137[0] = 0;
            *(_QWORD *)&v138 = v82;
            (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v27 + 8) + 40))(*(_QWORD *)(v27 + 8), &v138);
            v87 = v138;
            *(_QWORD *)&v138 = 0;
            v25 = v126;
            if (v87)
            {
              v88 = *(std::__shared_weak_count **)(v87 + 32);
              if (v88)
              {
                v89 = (unint64_t *)&v88->__shared_owners_;
                do
                  v90 = __ldaxr(v89);
                while (__stlxr(v90 - 1, v89));
                if (!v90)
                {
                  ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                  std::__shared_weak_count::__release_weak(v88);
                }
              }
              v91 = *(std::__shared_weak_count **)(v87 + 16);
              if (v91)
              {
                v92 = (unint64_t *)&v91->__shared_owners_;
                do
                  v93 = __ldaxr(v92);
                while (__stlxr(v93 - 1, v92));
                if (!v93)
                {
                  ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                  std::__shared_weak_count::__release_weak(v91);
                }
              }
              MEMORY[0x227684CE8](v87, 0x10F0C40B62ED6C6);
              v94 = v137[0];
              v137[0] = 0;
              if (v94)
              {
                v95 = *(std::__shared_weak_count **)(v94 + 32);
                if (v95)
                {
                  v96 = (unint64_t *)&v95->__shared_owners_;
                  do
                    v97 = __ldaxr(v96);
                  while (__stlxr(v97 - 1, v96));
                  if (!v97)
                  {
                    ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                    std::__shared_weak_count::__release_weak(v95);
                  }
                }
                v98 = *(std::__shared_weak_count **)(v94 + 16);
                if (v98)
                {
                  v99 = (unint64_t *)&v98->__shared_owners_;
                  do
                    v100 = __ldaxr(v99);
                  while (__stlxr(v100 - 1, v99));
                  if (!v100)
                  {
                    ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                    std::__shared_weak_count::__release_weak(v98);
                  }
                }
                MEMORY[0x227684CE8](v94, 0x10F0C40B62ED6C6);
              }
            }
            v101 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
            if (*((_QWORD *)&v145 + 1))
            {
              v102 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
              do
                v103 = __ldaxr(v102);
              while (__stlxr(v103 - 1, v102));
              if (!v103)
              {
                ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                std::__shared_weak_count::__release_weak(v101);
              }
            }
            v104 = *(std::__shared_weak_count **)&v144[16];
            if (*(_QWORD *)&v144[16])
            {
              v105 = (unint64_t *)(*(_QWORD *)&v144[16] + 8);
              do
                v106 = __ldaxr(v105);
              while (__stlxr(v106 - 1, v105));
              if (!v106)
              {
                ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                std::__shared_weak_count::__release_weak(v104);
              }
            }
LABEL_119:

            if (v25)
            {
              objc_msgSend_description(v12, v107, v108, v109, v110, v111);
              v112 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
              v118 = (const char *)objc_msgSend_UTF8String(v112, v113, v114, v115, v116, v117);
              sub_22322C138((uint64_t)v128, "Error serializing dictionary into data for State Data: %s", v118);

              sub_223182C08((uint64_t)v128);
            }
            sub_223182C08((uint64_t)v128);
            v119 = v134;
            if (v134)
            {
              v120 = (unint64_t *)&v134->__shared_owners_;
              do
                v121 = __ldaxr(v120);
              while (__stlxr(v121 - 1, v120));
              if (!v121)
              {
                ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                std::__shared_weak_count::__release_weak(v119);
              }
            }
LABEL_126:
            v16 = 0;
            goto LABEL_127;
          }
        }
        memcpy(p_dst, __s, v60);
        goto LABEL_57;
      }
    }
    memmove(v46, v43, v44);
    goto LABEL_31;
  }
  v13 = objc_msgSend_length(v6, v7, v8, v9, v10, v11);
  v14 = v13 + 200;
  v15 = malloc_type_malloc(v14, 0x5EB51EE0uLL);
  v16 = v15;
  if (v15)
  {
    bzero(v15, v14);
    *(_DWORD *)v16 = 1;
    *((_DWORD *)v16 + 1) = v13;
    strncpy((char *)v16 + 136, a1, 0x40uLL);
    objc_msgSend_getBytes_length_(v6, v17, (uint64_t)v16 + 200, v13, v18, v19);
  }
LABEL_127:

  return v16;
}

void sub_22322ABCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, ...)
{
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  va_list va;

  va_start(va, a8);
  if (*(_BYTE *)(v11 - 152))
  {
    if (*(char *)(v11 - 153) < 0)
      operator delete(*(void **)(v11 - 176));
  }
  __cxa_guard_abort(&qword_255788F58);

  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22322AD80()
{
  std::chrono::nanoseconds __ns;

  __ns.__rep_ = 500000000;
  std::this_thread::sleep_for (&__ns);
}

uint64_t sub_22322ADAC(CVPixelBufferRef *a1, uint64_t a2)
{
  uint64_t v4;
  signed int PixelFormatType;
  unsigned int Width;
  unsigned int Height;
  unsigned int v8;
  void *v10;
  void *v11;
  int v12;
  int8x16_t v13;
  uint64_t v14;
  int8x16_t v15;
  uint64_t v16;
  void *v17;
  int8x16_t v18;
  uint64_t v19;
  int8x16_t v20;
  uint64_t v21;
  int v22;
  vImagePixelCount width_high;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  int v30;
  char *v31;
  char *v32;
  char *v33;
  int v34;
  int v35;
  char *v36;
  __int16 v37;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  void *v42;
  vImage_Buffer v43;
  vImage_Buffer size;

  if (!CVPixelBufferLockBaseAddress(*a1, 1uLL))
  {
    PixelFormatType = CVPixelBufferGetPixelFormatType(*a1);
    Width = CVPixelBufferGetWidth(*a1);
    Height = CVPixelBufferGetHeight(*a1);
    v8 = Height;
    if (*(_DWORD *)(a2 + 8) >= Width && *(_DWORD *)(a2 + 12) >= Height)
    {
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = Width | ((unint64_t)Height << 32);
      v4 = 0;
      if (PixelFormatType <= 875704437)
        goto LABEL_21;
    }
    else
    {
      v10 = *(void **)(a2 + 24);
      if (v10)
      {
        free(v10);
        *(_QWORD *)(a2 + 24) = 0;
      }
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = Width | ((unint64_t)v8 << 32);
      *(_QWORD *)(a2 + 16) = ((unint64_t)(((3 * Width + 15) & 0xFFFFFFF0) >> 4) << 36) | 3;
      size.data = (void *)(((3 * Width + 15) & 0xFFFFFFF0) * (unint64_t)v8);
      if (size.data)
        v11 = malloc_type_malloc((size_t)size.data, 0xAE2F145AuLL);
      else
        v11 = 0;
      *(_QWORD *)(a2 + 24) = v11;
      v4 = 0;
      if (PixelFormatType <= 875704437)
      {
LABEL_21:
        if (PixelFormatType <= 846624120)
        {
          if (PixelFormatType == 24)
          {
            sub_22322B530(*a1, &size);
            if (size.rowBytes)
            {
              v22 = size.width;
              width_high = HIDWORD(size.width);
              v24 = (HIDWORD(size.height) * HIDWORD(size.width));
              if ((_DWORD)v24)
              {
                v25 = 0;
                v26 = 0;
                v28 = *(_QWORD *)(a2 + 16);
                v27 = *(_QWORD *)(a2 + 24);
                v29 = *(_DWORD *)(a2 + 8);
                v30 = size.height;
                v31 = (char *)size.data + size.rowBytes;
                v32 = (char *)size.data + size.rowBytes + v24;
                if (v27)
                  v33 = (char *)(v27 + *(_QWORD *)a2);
                else
                  v33 = 0;
                do
                {
                  v36 = v33;
                  if (v33 != v31)
                  {
                    v37 = *(_WORD *)v31;
                    v33[2] = v31[2];
                    *(_WORD *)v33 = v37;
                    v36 = v31;
                  }
                  v31 = &v36[v22];
                  v34 = v26 + 1;
                  if (v26 + 1 == v30)
                    v26 = 0;
                  else
                    ++v26;
                  if (v34 == v30)
                    v31 = &v31[width_high - (v34 * v22)];
                  v33 += v28;
                  v35 = v25 + 1;
                  if (v25 + 1 == v29)
                    v25 = 0;
                  else
                    ++v25;
                  if (v35 == v29)
                    v33 = &v33[HIDWORD(v28) - (v35 * v28)];
                }
                while (v31 != v32);
              }
            }
            goto LABEL_56;
          }
          if (PixelFormatType == 32)
          {
            sub_22322B640(*a1, &v39);
            v15.i64[0] = v40;
            v15.i64[1] = HIDWORD(v40);
            *(int8x16_t *)&size.height = vextq_s8(v15, v15, 8uLL);
            size.rowBytes = HIDWORD(v41);
            v43.data = *(void **)(a2 + 24);
            v16 = *(_QWORD *)(a2 + 8);
            v15.i64[0] = v16;
            v15.i64[1] = HIDWORD(v16);
            *(int8x16_t *)&v43.height = vextq_s8(v15, v15, 8uLL);
            v43.rowBytes = *(unsigned int *)(a2 + 20);
            size.data = v42;
            vImageConvert_ARGB8888toRGB888(&size, &v43, 0);
            goto LABEL_56;
          }
          goto LABEL_57;
        }
        if (PixelFormatType != 846624121)
        {
          v12 = 875704422;
LABEL_27:
          if (PixelFormatType != v12)
            goto LABEL_57;
          goto LABEL_28;
        }
        goto LABEL_28;
      }
    }
    if (PixelFormatType > 1380401728)
    {
      if (PixelFormatType == 1380401729)
      {
        sub_22322B640(*a1, &v39);
        v20.i64[0] = v40;
        v20.i64[1] = HIDWORD(v40);
        *(int8x16_t *)&size.height = vextq_s8(v20, v20, 8uLL);
        size.rowBytes = HIDWORD(v41);
        v43.data = *(void **)(a2 + 24);
        v21 = *(_QWORD *)(a2 + 8);
        v20.i64[0] = v21;
        v20.i64[1] = HIDWORD(v21);
        *(int8x16_t *)&v43.height = vextq_s8(v20, v20, 8uLL);
        v43.rowBytes = *(unsigned int *)(a2 + 20);
        size.data = v42;
        vImageConvert_RGBA8888toRGB888(&size, &v43, 0);
        goto LABEL_56;
      }
      if (PixelFormatType == 2037741158)
        goto LABEL_28;
      v12 = 2037741171;
      goto LABEL_27;
    }
    if (PixelFormatType != 875704438)
    {
      if (PixelFormatType == 1111970369)
      {
        sub_22322B640(*a1, &v39);
        v13.i64[0] = v40;
        v13.i64[1] = HIDWORD(v40);
        *(int8x16_t *)&size.height = vextq_s8(v13, v13, 8uLL);
        size.rowBytes = HIDWORD(v41);
        v43.data = *(void **)(a2 + 24);
        v14 = *(_QWORD *)(a2 + 8);
        v13.i64[0] = v14;
        v13.i64[1] = HIDWORD(v14);
        *(int8x16_t *)&v43.height = vextq_s8(v13, v13, 8uLL);
        v43.rowBytes = *(unsigned int *)(a2 + 20);
        size.data = v42;
        vImageConvert_BGRA8888toRGB888(&size, &v43, 0);
LABEL_56:
        v4 = 1;
      }
LABEL_57:
      CVPixelBufferUnlockBaseAddress(*a1, 1uLL);
      return v4;
    }
LABEL_28:
    v40 = 0;
    v41 = 0;
    v42 = 0;
    if (v8 | Width)
    {
      v39 = 0;
      v40 = Width | ((unint64_t)v8 << 32);
      v41 = ((unint64_t)(((4 * Width + 15) & 0xFFFFFFF0) >> 4) << 36) | 4;
      size.data = (void *)(((4 * Width + 15) & 0xFFFFFFF0) * (unint64_t)v8);
      if (size.data)
        v17 = malloc_type_malloc((size_t)size.data, 0xAE2F145AuLL);
      else
        v17 = 0;
      v42 = v17;
    }
    else
    {
      v39 = 0;
      v40 = Width | ((unint64_t)v8 << 32);
    }
    sub_22322B750(*a1, (uint64_t)&v39, 1);
    v18.i64[0] = v40;
    v18.i64[1] = HIDWORD(v40);
    *(int8x16_t *)&size.height = vextq_s8(v18, v18, 8uLL);
    size.rowBytes = HIDWORD(v41);
    v43.data = *(void **)(a2 + 24);
    v19 = *(_QWORD *)(a2 + 8);
    v18.i64[0] = v19;
    v18.i64[1] = HIDWORD(v19);
    *(int8x16_t *)&v43.height = vextq_s8(v18, v18, 8uLL);
    v43.rowBytes = *(unsigned int *)(a2 + 20);
    size.data = v42;
    vImageConvert_ARGB8888toRGB888(&size, &v43, 0);
    if (v42)
      free(v42);
    goto LABEL_56;
  }
  return 0;
}

void sub_22322B248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  if (a12)
    free(a12);
  _Unwind_Resume(exception_object);
}

uint64_t sub_22322B260(OSType pixelFormat, uint64_t a2)
{
  const __CFDictionary *v3;
  const __CFDictionary *v4;
  const __CFArray *Value;
  const __CFArray *v6;
  CFIndex Count;
  uint64_t v8;
  const void *v9;
  const void *v10;
  const __CFDictionary *ValueAtIndex;
  const __CFNumber *v12;
  const __CFNumber *v13;
  uint64_t v14;
  const __CFNumber *v15;
  const __CFNumber *v16;
  const __CFDictionary *v17;
  const __CFNumber *v18;
  const __CFNumber *v19;
  const __CFDictionary *v20;
  const __CFNumber *v21;
  const __CFNumber *v22;
  uint64_t v24;
  int v25;
  uint64_t valuePtr;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v27 = 0;
  valuePtr = 0;
  v25 = 0;
  v24 = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  v3 = CVPixelFormatDescriptionCreateWithPixelFormatType((CFAllocatorRef)*MEMORY[0x24BDBD240], pixelFormat);
  if (!v3)
    return 4294960636;
  v4 = v3;
  Value = (const __CFArray *)CFDictionaryGetValue(v3, (const void *)*MEMORY[0x24BDC5790]);
  if (Value)
  {
    v6 = Value;
    Count = CFArrayGetCount(Value);
    if (Count < 1)
    {
      v14 = 0;
    }
    else
    {
      if (Count >= 3)
        v8 = 3;
      else
        v8 = Count;
      v9 = (const void *)*MEMORY[0x24BDC5728];
      v10 = (const void *)*MEMORY[0x24BDC5718];
      LODWORD(valuePtr) = 1;
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v6, 0);
      v12 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, v9);
      if (v12)
        CFNumberGetValue(v12, kCFNumberIntType, &valuePtr);
      v13 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, v10);
      if (v13)
      {
        CFNumberGetValue(v13, kCFNumberIntType, &v24);
        v14 = 0;
      }
      else
      {
        v14 = 4294960636;
      }
      *(_DWORD *)a2 = ((int)v24 / (int)valuePtr) >> 3;
      if (v8 != 1)
      {
        HIDWORD(valuePtr) = 1;
        v17 = (const __CFDictionary *)CFArrayGetValueAtIndex(v6, 1);
        v18 = (const __CFNumber *)CFDictionaryGetValue(v17, v9);
        if (v18)
          CFNumberGetValue(v18, kCFNumberIntType, (char *)&valuePtr + 4);
        v19 = (const __CFNumber *)CFDictionaryGetValue(v17, v10);
        if (v19)
          CFNumberGetValue(v19, kCFNumberIntType, (char *)&v24 + 4);
        else
          v14 = 4294960636;
        *(_DWORD *)(a2 + 4) = (SHIDWORD(v24) / SHIDWORD(valuePtr)) >> 3;
        if (v8 != 2)
        {
          v27 = 1;
          v20 = (const __CFDictionary *)CFArrayGetValueAtIndex(v6, 2);
          v21 = (const __CFNumber *)CFDictionaryGetValue(v20, v9);
          if (v21)
            CFNumberGetValue(v21, kCFNumberIntType, &v27);
          v22 = (const __CFNumber *)CFDictionaryGetValue(v20, v10);
          if (v22)
            CFNumberGetValue(v22, kCFNumberIntType, &v25);
          else
            v14 = 4294960636;
          *(_DWORD *)(a2 + 8) = (v25 / v27) >> 3;
        }
      }
    }
  }
  else
  {
    LODWORD(valuePtr) = 1;
    v15 = (const __CFNumber *)CFDictionaryGetValue(v4, (const void *)*MEMORY[0x24BDC5728]);
    if (v15)
      CFNumberGetValue(v15, kCFNumberIntType, &valuePtr);
    v16 = (const __CFNumber *)CFDictionaryGetValue(v4, (const void *)*MEMORY[0x24BDC5718]);
    if (v16)
    {
      CFNumberGetValue(v16, kCFNumberIntType, &v24);
      v14 = 0;
    }
    else
    {
      v14 = 4294960636;
    }
    *(_DWORD *)a2 = ((int)v24 / (int)valuePtr) >> 3;
  }
  CFRelease(v4);
  return v14;
}

size_t sub_22322B530@<X0>(__CVBuffer *a1@<X0>, _QWORD *a2@<X8>)
{
  OSType PixelFormatType;
  uint64_t PlaneCount;
  size_t v6;
  size_t BytesPerRow;
  void *BaseAddress;
  unsigned int Width;
  size_t result;
  size_t v11;
  _QWORD v12[3];
  _DWORD v13[3];
  _DWORD v14[3];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  sub_22322B260(PixelFormatType, (uint64_t)v14);
  PlaneCount = CVPixelBufferGetPlaneCount(a1);
  if (PlaneCount)
  {
    v6 = 0;
    memset(v12, 0, sizeof(v12));
    do
    {
      v12[v6] = CVPixelBufferGetBaseAddressOfPlane(a1, v6);
      v13[v6] = CVPixelBufferGetBytesPerRowOfPlane(a1, v6);
      ++v6;
    }
    while (PlaneCount != v6);
    BytesPerRow = v13[0];
    BaseAddress = (void *)v12[0];
  }
  else
  {
    BaseAddress = CVPixelBufferGetBaseAddress(a1);
    BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  }
  Width = CVPixelBufferGetWidth(a1);
  result = CVPixelBufferGetHeight(a1);
  v11 = v14[0] | (BytesPerRow << 32);
  *a2 = 0;
  a2[1] = Width | ((unint64_t)result << 32);
  a2[2] = v11;
  a2[3] = BaseAddress;
  return result;
}

size_t sub_22322B640@<X0>(__CVBuffer *a1@<X0>, _QWORD *a2@<X8>)
{
  OSType PixelFormatType;
  uint64_t PlaneCount;
  size_t v6;
  size_t BytesPerRow;
  void *BaseAddress;
  unsigned int Width;
  size_t result;
  size_t v11;
  _QWORD v12[3];
  _DWORD v13[3];
  _DWORD v14[3];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  sub_22322B260(PixelFormatType, (uint64_t)v14);
  PlaneCount = CVPixelBufferGetPlaneCount(a1);
  if (PlaneCount)
  {
    v6 = 0;
    memset(v12, 0, sizeof(v12));
    do
    {
      v12[v6] = CVPixelBufferGetBaseAddressOfPlane(a1, v6);
      v13[v6] = CVPixelBufferGetBytesPerRowOfPlane(a1, v6);
      ++v6;
    }
    while (PlaneCount != v6);
    BytesPerRow = v13[0];
    BaseAddress = (void *)v12[0];
  }
  else
  {
    BaseAddress = CVPixelBufferGetBaseAddress(a1);
    BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  }
  Width = CVPixelBufferGetWidth(a1);
  result = CVPixelBufferGetHeight(a1);
  v11 = v14[0] | (BytesPerRow << 32);
  *a2 = 0;
  a2[1] = Width | ((unint64_t)result << 32);
  a2[2] = v11;
  a2[3] = BaseAddress;
  return result;
}

uint64_t sub_22322B750(__CVBuffer *a1, uint64_t a2, int a3)
{
  signed int PixelFormatType;
  unsigned int Width;
  unsigned int Height;
  unsigned int v9;
  uint64_t v11;
  const vImage_YpCbCrToARGBMatrix **v12;
  const vImage_YpCbCrToARGBMatrix *v13;
  __int128 *v14;
  __int128 *v15;
  __int128 v16;
  size_t v17;
  __int128 v18;
  size_t v19;
  size_t v21;
  vImage_Buffer v22;
  vImage_Buffer srcCbCr;
  vImage_Buffer srcYp;
  vImage_YpCbCrPixelRange pixelRange;
  uint8_t permuteMap[4];
  vImage_YpCbCrToARGB outInfo;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
    Width = CVPixelBufferGetWidth(a1);
    Height = CVPixelBufferGetHeight(a1);
    v9 = Height;
    if (*(_DWORD *)(a2 + 8) >= Width && *(_DWORD *)(a2 + 12) >= Height)
    {
      v12 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x24BDB3BC0];
      if (!a3)
        v12 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x24BDB3BB8];
      v13 = *v12;
      *(_DWORD *)permuteMap = 50462976;
      v11 = 4294960636;
      if (PixelFormatType <= 875704437)
      {
        if (PixelFormatType == 846624121)
        {
          pixelRange = *(vImage_YpCbCrPixelRange *)ymmword_2245C51A0;
          if (!vImageConvert_YpCbCrToARGB_GenerateConversion(v13, &pixelRange, &outInfo, kvImage422CbYpCrYp8, kvImageARGB8888, 0))
          {
            srcYp.data = CVPixelBufferGetBaseAddress(a1);
            srcYp.height = v9;
            srcYp.width = Width;
            srcYp.rowBytes = CVPixelBufferGetBytesPerRow(a1);
            srcCbCr.data = *(void **)(a2 + 24);
            srcCbCr.height = v9;
            v21 = *(unsigned int *)(a2 + 20);
            srcCbCr.width = Width;
            srcCbCr.rowBytes = v21;
            if (srcYp.data)
            {
              if (!vImageConvert_422CbYpCrYp8ToARGB8888(&srcYp, &srcCbCr, &outInfo, permuteMap, 0xFFu, 0))
                return 0;
            }
          }
          return 4294960636;
        }
        if (PixelFormatType != 875704422)
          return v11;
        v15 = &xmmword_2245C51C0;
      }
      else
      {
        if (PixelFormatType != 875704438)
        {
          if (PixelFormatType == 2037741158)
          {
            v14 = &xmmword_2245C51C0;
          }
          else
          {
            if (PixelFormatType != 2037741171)
              return v11;
            v14 = (__int128 *)ymmword_2245C51A0;
          }
          v18 = v14[1];
          *(_OWORD *)&pixelRange.Yp_bias = *v14;
          *(_OWORD *)&pixelRange.YpMax = v18;
          if (!vImageConvert_YpCbCrToARGB_GenerateConversion(v13, &pixelRange, &outInfo, kvImage422YpCbYpCr8, kvImageARGB8888, 0))
          {
            srcYp.data = CVPixelBufferGetBaseAddress(a1);
            srcYp.height = v9;
            srcYp.width = Width;
            srcYp.rowBytes = CVPixelBufferGetBytesPerRow(a1);
            srcCbCr.data = *(void **)(a2 + 24);
            srcCbCr.height = v9;
            v19 = *(unsigned int *)(a2 + 20);
            srcCbCr.width = Width;
            srcCbCr.rowBytes = v19;
            if (srcYp.data)
            {
              if (!vImageConvert_422YpCbYpCr8ToARGB8888(&srcYp, &srcCbCr, &outInfo, permuteMap, 0xFFu, 0))
                return 0;
            }
          }
          return 4294960636;
        }
        v15 = (__int128 *)ymmword_2245C51A0;
      }
      v16 = v15[1];
      *(_OWORD *)&pixelRange.Yp_bias = *v15;
      *(_OWORD *)&pixelRange.YpMax = v16;
      if (!vImageConvert_YpCbCrToARGB_GenerateConversion(v13, &pixelRange, &outInfo, kvImage420Yp8_CbCr8, kvImageARGB8888, 0))
      {
        srcYp.data = CVPixelBufferGetBaseAddressOfPlane(a1, 0);
        srcYp.height = v9;
        srcYp.width = Width;
        srcYp.rowBytes = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
        srcCbCr.data = CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
        srcCbCr.height = v9;
        srcCbCr.width = Width;
        srcCbCr.rowBytes = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
        v22.data = *(void **)(a2 + 24);
        v22.height = v9;
        v17 = *(unsigned int *)(a2 + 20);
        v22.width = Width;
        v22.rowBytes = v17;
        if (srcYp.data)
        {
          if (!vImageConvert_420Yp8_CbCr8ToARGB8888(&srcYp, &srcCbCr, &v22, &outInfo, permuteMap, 0xFFu, 0))
            return 0;
        }
      }
      return 4294960636;
    }
  }
  return 4294960635;
}

float sub_22322BAAC(uint64_t a1)
{
  const float *v1;
  int8x16_t v2;
  int8x16_t v3;
  int8x16_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  int8x16_t v11;
  float32x2x2_t v13;

  v1 = (const float *)a1;
  v13 = vld2_f32(v1);
  v1 += 4;
  v2 = *(int8x16_t *)v1;
  v3 = *(int8x16_t *)(a1 + 32);
  v4 = *(int8x16_t *)(a1 + 48);
  v5 = (float32x4_t)vextq_s8(v3, v3, 8uLL);
  v6 = (float32x4_t)vextq_s8(v4, v4, 0xCuLL);
  v7 = (float32x4_t)vextq_s8(v3, v3, 0xCuLL);
  v8 = (float32x4_t)vextq_s8(v4, v4, 8uLL);
  v9 = (float32x4_t)vextq_s8(v4, v4, 4uLL);
  v10 = (float32x4_t)vextq_s8(v3, v3, 4uLL);
  v11 = (int8x16_t)vmlaq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v2, v2, 8uLL), vmlaq_f32(vmulq_f32(v6, vnegq_f32(v10)), v9, v7)), vmlaq_f32(vmulq_f32(v8, vnegq_f32(v7)), v6, v5), (float32x4_t)vextq_s8(v2, v2, 4uLL)), vmlaq_f32(vmulq_f32(v9, vnegq_f32(v5)), v8, v10), (float32x4_t)vextq_s8(v2, v2, 0xCuLL));
  v2.i64[0] = vextq_s8(v11, v11, 8uLL).u64[0];
  return vaddv_f32(vsub_f32(vmul_f32(v13.val[0], (float32x2_t)vzip1_s32(*(int32x2_t *)v11.i8, *(int32x2_t *)v2.i8)), vmul_f32(v13.val[1], (float32x2_t)vzip2_s32(*(int32x2_t *)v11.i8, *(int32x2_t *)v2.i8))));
}

__n128 sub_22322BB30@<Q0>(simd_float2x2 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = (__n128)__invert_f2(*a1);
  *a2 = result;
  return result;
}

void sub_22322BB5C(simd_double2x2 *a1@<X0>, simd_double2x2 *a2@<X8>)
{
  *a2 = __invert_d2(*a1);
}

__n128 sub_22322BB84@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>, simd_float3x3 a3@<0:Q0, 16:Q1, 32:Q2>)
{
  simd_float3x3 v4;

  a3.columns[2].i64[0] = *(_QWORD *)(a1 + 24);
  a3.columns[2].i32[2] = *(_DWORD *)(a1 + 32);
  a3.columns[1] = *(simd_float3 *)(a1 + 12);
  a3.columns[0] = *(simd_float3 *)a1;
  v4 = __invert_f3(a3);
  v4.columns[0].i32[3] = v4.columns[1].i32[0];
  *(simd_float3 *)a2 = v4.columns[0];
  *(int8x16_t *)(a2 + 16) = vextq_s8(vextq_s8((int8x16_t)v4.columns[1], (int8x16_t)v4.columns[1], 0xCuLL), (int8x16_t)v4.columns[2], 8uLL);
  *(_DWORD *)(a2 + 32) = v4.columns[2].i32[2];
  return (__n128)v4.columns[0];
}

double sub_22322BBD0@<D0>(uint64_t a1@<X8>)
{
  double result;

  __invert_d3();
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  return result;
}

void sub_22322BC80(simd_float4x4 *a1@<X0>, simd_float4x4 *a2@<X8>)
{
  *a2 = __invert_f4(*a1);
}

void sub_22322BCB0(int a1, int a2, int a3, int a4, int a5, const float *a6, int __lda, float *__B, float a9, float a10, int __ldb, float *__C, int __ldc)
{
  CBLAS_TRANSPOSE v17;
  CBLAS_TRANSPOSE v18;
  uint64_t v19;

  if (a1)
    v17 = CblasTrans;
  else
    v17 = CblasNoTrans;
  if (a2)
    v18 = CblasTrans;
  else
    v18 = CblasNoTrans;
  v19 = 1;
  sub_223166574(&v19, CblasColMajor, v17, v18, a3, a4, a5, a6, a9, a10, __lda, __B, __ldb, __C, __ldc);
}

uint64_t sub_22322BD28()
{
  return cblas_sgemv_NEWLAPACK();
}

uint64_t sub_22322BD7C()
{
  return sgesvd_NEWLAPACK();
}

void sub_22322BDE0(_QWORD *a1@<X8>)
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CA6D8);
  if ((v2 & 1) != 0 || !__cxa_guard_acquire(&qword_2540CA6D8))
  {
    *a1 = qword_2540CA6D0;
  }
  else
  {
    sub_22322BE68();
    __cxa_guard_release(&qword_2540CA6D8);
    *a1 = qword_2540CA6D0;
  }
}

void sub_22322BE50(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CA6D8);
  _Unwind_Resume(a1);
}

void sub_22322BE68()
{
  void *__p[2];
  char v1;
  uint64_t *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  sub_223230654(&qword_2540CA6D0);
  v4 = (_QWORD *)qword_2540CA6D0;
  sub_2232300D0(&v4, &v5);
  v2 = (uint64_t *)qword_2540CA6D0;
  v1 = 7;
  strcpy((char *)__p, "cv3dapi");
  sub_2232300E0(&v2, (uint64_t)__p, (uint64_t *)&v3);
  if (v1 < 0)
    operator delete(__p[0]);
  sub_22322F09C((uint64_t)v5);
  sub_22322F3AC(v5, 6);
  sub_22322F3AC(v3, 6);
}

void sub_22322BF18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_22322BF34(uint64_t a1, int a2)
{
  return ((uint64_t (*)(void))((char *)sub_22322BF50 + 4 * byte_2245C51E0[a2 - 1]))();
}

_QWORD *sub_22322BF50(_QWORD *a1)
{
  return sub_2231813E8(a1, (uint64_t)"TRACE", 5);
}

_QWORD *sub_22322BF60(_QWORD *a1)
{
  return sub_2231813E8(a1, (uint64_t)"DEBUG", 5);
}

_QWORD *sub_22322BF70(_QWORD *a1)
{
  return sub_2231813E8(a1, (uint64_t)"INFO", 4);
}

_QWORD *sub_22322BF80(_QWORD *a1)
{
  return sub_2231813E8(a1, (uint64_t)"WARN", 4);
}

_QWORD *sub_22322BF90(_QWORD *a1)
{
  return sub_2231813E8(a1, (uint64_t)"ERROR", 5);
}

_QWORD *sub_22322BFA0(_QWORD *a1)
{
  return sub_2231813E8(a1, (uint64_t)"FATAL", 5);
}

uint64_t *sub_22322BFB0(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  void *v4;
  char *v5;
  uint64_t v6;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 56));
    v3 = *(char **)(v2 + 32);
    if (v3)
    {
      do
      {
        v5 = *(char **)v3;
        v6 = *((_QWORD *)v3 + 5);
        *((_QWORD *)v3 + 5) = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
        if (v3[39] < 0)
          operator delete(*((void **)v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5);
    }
    v4 = *(void **)(v2 + 16);
    *(_QWORD *)(v2 + 16) = 0;
    if (v4)
      operator delete(v4);
    sub_22322C068((uint64_t *)(v2 + 8));
    JUMPOUT(0x227684CE8);
  }
  return result;
}

uint64_t *sub_22322C068(uint64_t *a1)
{
  uint64_t v2;
  char *v3;
  void *v4;
  char *v6;
  uint64_t v7;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 56));
    v3 = *(char **)(v2 + 32);
    if (v3)
    {
      do
      {
        v6 = *(char **)v3;
        v7 = *((_QWORD *)v3 + 5);
        *((_QWORD *)v3 + 5) = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        if (v3[39] < 0)
          operator delete(*((void **)v3 + 2));
        operator delete(v3);
        v3 = v6;
      }
      while (v6);
    }
    v4 = *(void **)(v2 + 16);
    *(_QWORD *)(v2 + 16) = 0;
    if (v4)
      operator delete(v4);
    sub_22322C068(v2 + 8);
    MEMORY[0x227684CE8](v2, 0x10A0C400EF86968);
  }
  return a1;
}

uint64_t sub_22322C11C(uint64_t result, char a2)
{
  *(_QWORD *)result = off_24EC26328;
  *(_BYTE *)(result + 8) = a2;
  return result;
}

uint64_t sub_22322C138(uint64_t a1, char *__format, ...)
{
  uint64_t v3;
  char *v4;
  unsigned int v5;
  size_t v6;
  _QWORD *v7;
  size_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  BOOL v12;
  size_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char v22;
  _QWORD *v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  __int128 v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  va_list *p_dst;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  va_list *v38;
  uint64_t v39;
  _QWORD *v40;
  void *v41;
  uint64_t v44;
  _QWORD *v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  uint64_t v49;
  va_list __dst;
  size_t v51;
  int64_t v52;
  _QWORD *v53;
  char __str[512];
  uint64_t v55;
  va_list va;

  va_start(va, __format);
  v3 = a1;
  v55 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1 + 56))
  {
    v44 = operator new();
    sub_223195210(v44);
    v45 = (_QWORD *)operator new();
    *v45 = &unk_24EC267E0;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v44;
    v46 = *(std::__shared_weak_count **)(a1 + 64);
    *(_QWORD *)(a1 + 56) = v44;
    *(_QWORD *)(a1 + 64) = v45;
    v3 = a1;
    if (v46)
    {
      p_shared_owners = (unint64_t *)&v46->__shared_owners_;
      do
        v48 = __ldaxr(p_shared_owners);
      while (__stlxr(v48 - 1, p_shared_owners));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
  }
  v53 = 0;
  va_copy(__dst, va);
  v4 = __str;
  v5 = vsnprintf(__str, 0x200uLL, __format, va);
  v6 = v5;
  if (v5 >= 0x200)
  {
    v49 = v3;
    v7 = 0;
    v8 = 512;
    while (1)
    {
      if ((int)v5 > 0)
        v8 = v6 + 1;
      else
        v8 *= 4;
      if (!v7)
      {
        v23 = (_QWORD *)operator new();
        v7 = v23;
        *v23 = 0;
        v23[1] = 0;
        v23[2] = 0;
        if (v8)
        {
          if ((v8 & 0x8000000000000000) != 0)
            sub_22316E078();
          v9 = (char *)operator new(v8);
          *v7 = v9;
          v7[2] = &v9[v8];
          bzero(v9, v8);
          v7[1] = &v9[v8];
          v53 = v7;
          v12 = 1;
        }
        else
        {
          v9 = 0;
          v53 = v23;
          v12 = 1;
        }
LABEL_28:
        if (!v12)
          v7[1] = &v9[v8];
        goto LABEL_31;
      }
      v9 = (char *)*v7;
      v10 = (char *)v7[1];
      v11 = (unint64_t)&v10[-*v7];
      v12 = v8 >= v11;
      v13 = v8 - v11;
      if (v8 <= v11)
        goto LABEL_28;
      v14 = v7[2];
      if (v14 - (uint64_t)v10 < v13)
        break;
      bzero(v10, v13);
      v7[1] = &v10[v13];
LABEL_31:
      v7 = v53;
      v4 = (char *)*v53;
      va_copy(__dst, va);
      v5 = vsnprintf(v4, v8, __format, va);
      v6 = v5;
      if ((v5 & 0x80000000) == 0 && v8 > v5)
      {
        v3 = v49;
        goto LABEL_46;
      }
    }
    if ((v8 & 0x8000000000000000) != 0)
      sub_22316E078();
    v15 = v14 - (_QWORD)v9;
    v16 = 2 * v15;
    if (2 * v15 <= v8)
      v16 = v8;
    if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
      v17 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    v18 = (char *)operator new(v17);
    v19 = &v18[v11];
    bzero(&v18[v11], v13);
    if (v10 == v9)
    {
LABEL_23:
      *v7 = v19;
      v7[1] = &v18[v8];
      v7[2] = &v18[v17];
      if (v9)
        operator delete(v9);
      goto LABEL_31;
    }
    if (v11 < 8 || (unint64_t)(v9 - v18) < 0x20)
    {
      v20 = v10;
      goto LABEL_20;
    }
    if (v11 >= 0x20)
    {
      v24 = v11 & 0xFFFFFFFFFFFFFFE0;
      v25 = &v18[v11 - 16];
      v26 = v10 - 16;
      v27 = v11 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v28 = *(_OWORD *)v26;
        *((_OWORD *)v25 - 1) = *((_OWORD *)v26 - 1);
        *(_OWORD *)v25 = v28;
        v25 -= 32;
        v26 -= 32;
        v27 -= 32;
      }
      while (v27);
      if (v11 == v24)
        goto LABEL_22;
      if ((v11 & 0x18) == 0)
      {
        v19 -= v24;
        v20 = &v10[-v24];
LABEL_20:
        v21 = v19 - 1;
        do
        {
          v22 = *--v20;
          *v21-- = v22;
        }
        while (v20 != v9);
LABEL_22:
        v19 = v18;
        goto LABEL_23;
      }
    }
    else
    {
      v24 = 0;
    }
    v20 = &v10[-(v11 & 0xFFFFFFFFFFFFFFF8)];
    v19 -= v11 & 0xFFFFFFFFFFFFFFF8;
    v29 = &v18[&v10[-v24] - v9 - 8];
    v30 = &v10[-v24 - 8];
    v31 = v24 - (v11 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v32 = *(_QWORD *)v30;
      v30 -= 8;
      *(_QWORD *)v29 = v32;
      v29 -= 8;
      v31 += 8;
    }
    while (v31);
    if (v11 == (v11 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_22;
    goto LABEL_20;
  }
LABEL_46:
  v33 = *(_QWORD *)(v3 + 56);
  if (v5 >= 0x17)
  {
    v35 = v3;
    v36 = (v6 & 0xFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v36 = v6 | 7;
    v37 = v36 + 1;
    p_dst = (va_list *)operator new(v36 + 1);
    v51 = v6;
    v52 = v37 | 0x8000000000000000;
    __dst = (va_list)p_dst;
    v3 = v35;
    goto LABEL_52;
  }
  HIBYTE(v52) = v5;
  p_dst = &__dst;
  if (v5)
LABEL_52:
    memmove(p_dst, v4, v6);
  *((_BYTE *)p_dst + v6) = 0;
  if (v52 >= 0)
    v38 = &__dst;
  else
    v38 = (va_list *)__dst;
  if (v52 >= 0)
    v39 = HIBYTE(v52);
  else
    v39 = v51;
  sub_2231813E8((_QWORD *)(v33 + 16), (uint64_t)v38, v39);
  if (SHIBYTE(v52) < 0)
    operator delete(__dst);
  v40 = v53;
  if (v53)
  {
    v41 = (void *)*v53;
    if (*v53)
    {
      v53[1] = v41;
      operator delete(v41);
    }
    MEMORY[0x227684CE8](v40, 0x10C402FEFCB83);
  }
  return v3;
}

void sub_22322C5B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_22322C5D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10B3C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_22322C5F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_22322C6AC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_22322C608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  if (a16 < 0)
  {
    operator delete(__p);
    sub_22322C6AC(&a17);
    _Unwind_Resume(a1);
  }
  sub_22322C6AC(&a17);
  _Unwind_Resume(a1);
}

uint64_t *sub_22322C6AC(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x227684CE8](v2, 0x10C402FEFCB83);
  }
  return a1;
}

uint64_t sub_22322C700(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;

  if (*((char *)a2 + 23) < 0)
  {
    sub_223197FA4((_BYTE *)a1, *(void **)a2, *((_QWORD *)a2 + 1));
    v5 = a1 + 24;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v4;
    v5 = a1 + 24;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      v6 = *(__int128 *)((char *)a2 + 24);
      *(_QWORD *)(v5 + 16) = *((_QWORD *)a2 + 5);
      *(_OWORD *)v5 = v6;
      goto LABEL_6;
    }
  }
  sub_223197FA4((_BYTE *)v5, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
LABEL_6:
  v7 = *((_QWORD *)a2 + 6);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v9 = *((_QWORD *)a2 + 7);
  v8 = *((_QWORD *)a2 + 8);
  if (v8 != v9)
  {
    if (0xCCCCCCCCCCCCCCCDLL * ((v8 - v9) >> 4) >= 0x333333333333334)
      sub_22316E078();
    v10 = (char *)operator new(v8 - v9);
    v11 = 0;
    *(_QWORD *)(a1 + 56) = v10;
    *(_QWORD *)(a1 + 64) = v10;
    *(_QWORD *)(a1 + 72) = &v10[16 * ((v8 - v9) >> 4)];
    do
    {
      sub_22322C700(&v10[v11], v9 + v11);
      v11 += 80;
    }
    while (v9 + v11 != v8);
    *(_QWORD *)(a1 + 64) = &v10[v11];
  }
  return a1;
}

void sub_22322C83C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if ((*(char *)(v1 + 23) & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_22322C8B4(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 64);
    v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        v3 = sub_22322C8B4(v3 - 80);
      while ((void *)v3 != v2);
      v4 = *(void **)(a1 + 56);
    }
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v4);
  }
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_22322C944(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  _DWORD *v7;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD v18[2];

  v5 = *a2;
  *(_QWORD *)a1 = &off_24EC26358;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 39) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v6 = (_QWORD *)operator new();
  v7 = (_DWORD *)operator new();
  *v7 = 3;
  *v6 = v7;
  v8 = (_QWORD *)operator new();
  v8[1] = 0;
  v9 = v8 + 1;
  *v8 = &off_24EC26740;
  v8[2] = 0;
  v8[3] = v7;
  v6[1] = v8;
  *(_QWORD *)(a1 + 56) = *v6;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 64) = v8;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  *(_BYTE *)(a1 + 72) = 0;
  v11 = operator new();
  *(_QWORD *)(v11 + 48) = 0;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 40) = v11 + 48;
  *(_DWORD *)(v11 + 32) = 1065353216;
  *(_OWORD *)v11 = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_QWORD *)(v11 + 56) = 0;
  *(_QWORD *)(v11 + 64) = 850045863;
  *(_OWORD *)(v11 + 72) = 0u;
  *(_OWORD *)(v11 + 88) = 0u;
  *(_OWORD *)(v11 + 104) = 0u;
  *(_QWORD *)(v11 + 144) = 0;
  *(_QWORD *)(v11 + 152) = 0;
  *(_QWORD *)(v11 + 136) = 0;
  *(_QWORD *)(v11 + 120) = 0;
  *(_QWORD *)(v11 + 128) = v11 + 136;
  *(_QWORD *)(a1 + 80) = v11;
  v12 = *(_QWORD **)a3;
  v13 = *(_QWORD **)(a3 + 8);
  while (v12 != v13)
  {
    v14 = (std::__shared_weak_count *)v12[1];
    v18[0] = *v12;
    v18[1] = v14;
    *v12 = 0;
    v12[1] = 0;
    sub_22322CBA4(a1, v18, 0);
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v12 += 2;
  }
  return a1;
}

void sub_22322CB14(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  sub_223167354(v3);
  sub_22322CD68(v2);
  if (*(char *)(v1 + 39) < 0)
    operator delete(*(void **)(v1 + 16));
  _Unwind_Resume(a1);
}

uint64_t sub_22322CBA4(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t **v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char v10;
  char v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v29;
  __int128 v30;
  std::__shared_weak_count *v31;

  v6 = (uint64_t **)(*(_QWORD *)(a1 + 80) + 40);
  v7 = (std::__shared_weak_count *)a2[1];
  *(_QWORD *)&v30 = *a2;
  *((_QWORD *)&v30 + 1) = v30;
  v31 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  sub_22323E084(v6, &v30);
  v11 = v10;
  v12 = v31;
  if (!v31)
    goto LABEL_8;
  v13 = (unint64_t *)&v31->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if ((v11 & 1) == 0)
      return v11 & 1;
  }
  else
  {
LABEL_8:
    if ((v10 & 1) == 0)
      return v11 & 1;
  }
  v15 = *(_QWORD *)(a1 + 80);
  v16 = a2[1];
  *(_QWORD *)&v29 = *a2;
  *((_QWORD *)&v29 + 1) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  *(_BYTE *)(a1 + 72) = sub_22322EAA4(v15, &v29, a3);
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
  if (*((_QWORD *)&v29 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = *a2;
  v23 = (std::__shared_weak_count *)a2[1];
  *(_QWORD *)&v30 = v22;
  *((_QWORD *)&v30 + 1) = v23;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  sub_22322ECB8((uint64_t)&v30, a1);
  if (v23)
  {
    v26 = (unint64_t *)&v23->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  return v11 & 1;
}

void sub_22322CD2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22322CD40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22322CD54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_223197300((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_22322CD68(uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    MEMORY[0x227684CE8](v2, 0x30C40EEE2E2AFLL);
  }
  return a1;
}

uint64_t sub_22322CDEC(uint64_t a1, uint64_t *a2, __int128 *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;

  v8 = *a2;
  *(_QWORD *)a1 = &off_24EC26358;
  *(_QWORD *)(a1 + 8) = v8;
  if (*((char *)a3 + 23) < 0)
  {
    sub_223197FA4((_BYTE *)(a1 + 16), *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v9 = *a3;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 16) = v9;
  }
  v10 = *a4;
  v11 = *(_QWORD *)(*a4 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(*a4 + 56);
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_BYTE *)(a1 + 72) = 0;
  v14 = *a5;
  if (*a5)
  {
    *a5 = 0;
  }
  else
  {
    v14 = operator new();
    *(_QWORD *)(v14 + 48) = 0;
    *(_QWORD *)(v14 + 32) = 0;
    *(_QWORD *)(v14 + 40) = v14 + 48;
    *(_DWORD *)(v14 + 32) = 1065353216;
    *(_OWORD *)v14 = 0u;
    *(_OWORD *)(v14 + 16) = 0u;
    *(_QWORD *)(v14 + 56) = 0;
    *(_QWORD *)(v14 + 64) = 850045863;
    *(_OWORD *)(v14 + 72) = 0u;
    *(_OWORD *)(v14 + 88) = 0u;
    *(_OWORD *)(v14 + 104) = 0u;
    *(_QWORD *)(v14 + 144) = 0;
    *(_QWORD *)(v14 + 152) = 0;
    *(_QWORD *)(v14 + 136) = 0;
    *(_QWORD *)(v14 + 120) = 0;
    *(_QWORD *)(v14 + 128) = v14 + 136;
  }
  *(_QWORD *)(a1 + 80) = v14;
  return a1;
}

void sub_22322CF0C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  uint64_t *v4;

  sub_223167354(v3);
  sub_22322CD68(v4);
  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

uint64_t sub_22322CF38(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)a1 = &off_24EC26358;
  sub_22323C204((uint64_t *)(a1 + 80), 0);
  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    if (!v5)
      goto LABEL_12;
  }
  else
  {
LABEL_5:
    v5 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    if (!v5)
      goto LABEL_12;
  }
  v6 = *(std::__shared_weak_count **)(v5 + 8);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  MEMORY[0x227684CE8](v5, 0x30C40EEE2E2AFLL);
LABEL_12:
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_22322D040(uint64_t a1)
{
  sub_22322CF38(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22322D064(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v6;
  std::mutex *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t *v13;
  __int128 v14;
  _QWORD *v15;
  _OWORD *v16;
  __int128 v17;
  char *v18;
  std::string::size_type size;
  void **v20;
  std::string::size_type v21;
  char *v22;
  void *v23;
  int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  char *v28;
  char *v29;
  char *v30;
  void **v31;
  void **v32;
  void *v33;
  _QWORD *v34;
  char **v35;
  _QWORD *v36;
  void *v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  void *v45;
  uint64_t v46;
  uint64_t *v47;
  char *v48;
  unsigned __int8 *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  void *v56;
  void *v57[2];
  void *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t *v62;
  void *v63;
  unint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  int v67;
  std::string v68;
  void *__p[2];
  uint64_t v70;
  void *v71[2];
  void *v72[2];
  int v73;
  void *v74;
  char v75;
  uint64_t v76;
  char *v77;
  char *v78;
  unint64_t v79;
  __int128 __dst;
  void *v81;

  v6 = *a1;
  v7 = (std::mutex *)(*a1 + 7);
  std::mutex::lock(v7);
  v8 = *(unsigned __int8 *)(a2 + 23);
  if ((v8 & 0x80u) == 0)
    v9 = (_BYTE *)a2;
  else
    v9 = *(_BYTE **)a2;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a2 + 8);
  if (!v8)
    goto LABEL_15;
  v10 = 0;
  v11 = v6 + 2;
  while (v9[v10] == 46)
  {
    if (v8 == ++v10)
      goto LABEL_15;
  }
  if (v10 == -1)
  {
LABEL_15:
    *a3 = **a1;
  }
  else
  {
    if (sub_22322D8FC((_QWORD *)a2))
    {
      if (*(char *)(a2 + 23) < 0)
      {
        sub_223197FA4(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        __dst = *(_OWORD *)a2;
        v81 = *(void **)(a2 + 16);
      }
    }
    else
    {
      sub_22322DB88(a2, &__dst);
    }
    v12 = sub_22323E270(v11, (uint64_t)&__dst);
    if (v12)
    {
      *a3 = v12[5];
      if (SHIBYTE(v81) < 0)
LABEL_103:
        operator delete((void *)__dst);
    }
    else
    {
      v13 = (uint64_t *)operator new();
      *v13 = **a1;
      v57[0] = 0;
      v57[1] = 0;
      v58 = 0;
      v77 = 0;
      v78 = 0;
      v79 = 0;
      sub_22322E364((uint64_t)v71, &__dst, 24);
      __p[0] = 0;
      __p[1] = 0;
      v70 = 0;
      memset(&v68, 0, sizeof(v68));
      while (1)
      {
        v15 = sub_22322E508(v71, (uint64_t)__p, 0x2Eu);
        if ((*((_BYTE *)v15 + *(_QWORD *)(*v15 - 24) + 32) & 5) != 0)
          break;
        v16 = v57[1];
        if (v57[1] >= v58)
        {
          v18 = sub_22323C290((char **)v57, (uint64_t)__p);
        }
        else
        {
          if (SHIBYTE(v70) < 0)
          {
            sub_223197FA4((_BYTE *)v57[1], __p[0], (unint64_t)__p[1]);
          }
          else
          {
            v17 = *(_OWORD *)__p;
            *((_QWORD *)v57[1] + 2) = v70;
            *v16 = v17;
          }
          v18 = (char *)v16 + 24;
        }
        v57[1] = v18;
        size = HIBYTE(v68.__r_.__value_.__r.__words[2]);
        if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v68.__r_.__value_.__l.__size_;
        if (size)
          std::string::append(&v68, ".", 1uLL);
        if (v70 >= 0)
          v20 = __p;
        else
          v20 = (void **)__p[0];
        if (v70 >= 0)
          v21 = HIBYTE(v70);
        else
          v21 = (std::string::size_type)__p[1];
        std::string::append(&v68, (const std::string::value_type *)v20, v21);
        v22 = v78;
        if ((unint64_t)v78 < v79)
        {
          if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
          {
            sub_223197FA4(v78, v68.__r_.__value_.__l.__data_, v68.__r_.__value_.__l.__size_);
          }
          else
          {
            v14 = *(_OWORD *)&v68.__r_.__value_.__l.__data_;
            *((_QWORD *)v78 + 2) = *((_QWORD *)&v68.__r_.__value_.__l + 2);
            *(_OWORD *)v22 = v14;
          }
          v78 = v22 + 24;
        }
        else
        {
          v78 = sub_22323C290(&v77, (uint64_t)&v68);
        }
      }
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v68.__r_.__value_.__l.__data_);
      if (SHIBYTE(v70) < 0)
        operator delete(__p[0]);
      v71[0] = *(void **)MEMORY[0x24BEDB7F0];
      v23 = *(void **)(MEMORY[0x24BEDB7F0] + 72);
      *(void **)((char *)v71 + *((_QWORD *)v71[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
      v72[0] = v23;
      v72[1] = (void *)(MEMORY[0x24BEDB848] + 16);
      if (v75 < 0)
        operator delete(v74);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x227684BE0](&v76);
      v24 = ((int)v78 - (int)v77) / 24 + 1;
      v25 = 24 * (((int)v78 - (int)v77) / 24) - 24;
      while (--v24 > 0)
      {
        v26 = sub_22323E270(v11, (uint64_t)&v77[v25]);
        v25 -= 24;
        if (v26)
        {
          v27 = (uint64_t *)operator new();
          *v27 = v26[5];
          MEMORY[0x227684CE8](v13, 0x60C4044C4A2DFLL);
          v13 = v27;
          break;
        }
      }
      v28 = v77;
      if (v77)
      {
        v29 = v78;
        v30 = v77;
        if (v78 != v77)
        {
          do
          {
            if (*(v29 - 1) < 0)
              operator delete(*((void **)v29 - 3));
            v29 -= 24;
          }
          while (v29 != v28);
          v30 = v77;
        }
        v78 = v28;
        operator delete(v30);
      }
      v31 = (void **)v57[0];
      if (v57[0])
      {
        v32 = (void **)v57[1];
        v33 = v57[0];
        if (v57[1] != v57[0])
        {
          do
          {
            if (*((char *)v32 - 1) < 0)
              operator delete(*(v32 - 3));
            v32 -= 3;
          }
          while (v32 != v31);
          v33 = v57[0];
        }
        v57[1] = v31;
        operator delete(v33);
      }
      *(_OWORD *)v71 = 0u;
      *(_OWORD *)v72 = 0u;
      v73 = 1065353216;
      v34 = *(_QWORD **)(*(_QWORD *)(*v13 + 80) + 16);
      if (v34)
      {
        do
        {
          while (1)
          {
            v35 = (char **)v34[2];
            if (sub_22322E68C((char *)&__dst, v35 + 2))
              break;
            v34 = (_QWORD *)*v34;
            if (!v34)
              goto LABEL_79;
          }
          v57[0] = v35;
          sub_22323E49C((uint64_t)v71, (uint64_t *)v57, v57);
          v36 = (_QWORD *)*v34;
          sub_2231AFBB8(*(_QWORD **)(*v13 + 80), v34, (uint64_t)v57);
          v37 = v57[0];
          v57[0] = 0;
          if (v37)
            operator delete(v37);
          v34 = v36;
        }
        while (v36);
      }
LABEL_79:
      v38 = operator new();
      sub_22323E7F4((uint64_t)&v63, (uint64_t)v71);
      v39 = v63;
      v40 = v64;
      v63 = 0;
      v64 = 0;
      *(_QWORD *)v38 = v39;
      *(_QWORD *)(v38 + 8) = v40;
      v41 = v65;
      v42 = v66;
      *(_QWORD *)(v38 + 16) = v65;
      *(_QWORD *)(v38 + 24) = v42;
      *(_DWORD *)(v38 + 32) = v67;
      if (v42)
      {
        v43 = v41[1];
        if ((v40 & (v40 - 1)) != 0)
        {
          if (v43 >= v40)
            v43 %= v40;
        }
        else
        {
          v43 &= v40 - 1;
        }
        v41 = 0;
        v39[v43] = v38 + 16;
        v65 = 0;
        v66 = 0;
      }
      *(_QWORD *)(v38 + 48) = 0;
      *(_QWORD *)(v38 + 40) = v38 + 48;
      *(_QWORD *)(v38 + 56) = 0;
      *(_QWORD *)(v38 + 64) = 850045863;
      *(_OWORD *)(v38 + 72) = 0u;
      *(_OWORD *)(v38 + 88) = 0u;
      *(_OWORD *)(v38 + 104) = 0u;
      *(_QWORD *)(v38 + 144) = 0;
      *(_QWORD *)(v38 + 152) = 0;
      *(_QWORD *)(v38 + 136) = 0;
      *(_QWORD *)(v38 + 120) = 0;
      *(_QWORD *)(v38 + 128) = v38 + 136;
      v77 = (char *)v38;
      if (v41)
      {
        do
        {
          v44 = (_QWORD *)*v41;
          operator delete(v41);
          v41 = v44;
        }
        while (v44);
      }
      v45 = v63;
      v63 = 0;
      if (v45)
        operator delete(v45);
      v46 = operator new();
      v47 = *a1;
      v61 = *v13;
      v62 = v47;
      v48 = v77;
      v77 = 0;
      v60 = v48;
      sub_22322CDEC(v46, (uint64_t *)&v62, &__dst, &v61, (uint64_t *)&v60);
      sub_22323C204((uint64_t *)&v60, 0);
      if (SHIBYTE(v81) < 0)
      {
        sub_223197FA4(v57, (void *)__dst, *((unint64_t *)&__dst + 1));
      }
      else
      {
        *(_OWORD *)v57 = __dst;
        v58 = v81;
      }
      v59 = v46;
      v49 = sub_22323EC8C((uint64_t)v11, (uint64_t)v57, (__int128 *)v57);
      v50 = v59;
      v59 = 0;
      if (v50)
        (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
      if (SHIBYTE(v58) < 0)
        operator delete(v57[0]);
      v51 = *((_QWORD *)v49 + 5);
      v52 = *(_QWORD *)(*v13 + 80);
      v57[0] = (void *)v51;
      sub_22323E49C(v52, (uint64_t *)v57, v57);
      v53 = v72[0];
      if (v72[0])
      {
        do
        {
          *(_QWORD *)(v53[2] + 40) = v51;
          v53 = (_QWORD *)*v53;
        }
        while (v53);
      }
      *(_BYTE *)(v51 + 72) = sub_22322E870(*(_QWORD *)(v51 + 80), *v13);
      *a3 = v51;
      sub_22323C204((uint64_t *)&v77, 0);
      v54 = v72[0];
      if (v72[0])
      {
        do
        {
          v55 = (_QWORD *)*v54;
          operator delete(v54);
          v54 = v55;
        }
        while (v55);
      }
      v56 = v71[0];
      v71[0] = 0;
      if (v56)
        operator delete(v56);
      MEMORY[0x227684CE8](v13, 0x60C4044C4A2DFLL);
      if (SHIBYTE(v81) < 0)
        goto LABEL_103;
    }
  }
  std::mutex::unlock(v7);
}

void sub_22322D784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  std::mutex *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  sub_22323C204((uint64_t *)(v36 - 136), 0);
  sub_22322E828((uint64_t)&a33);
  MEMORY[0x227684CE8](v34, 0x60C4044C4A2DFLL);
  if (*(char *)(v36 - 89) < 0)
    operator delete(*(void **)(v36 - 112));
  std::mutex::unlock(v33);
  _Unwind_Resume(a1);
}

BOOL sub_22322D8FC(_QWORD *__s)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  int v11;
  char *v12;
  void *v13;
  char *v14;
  unsigned __int8 v16;
  int v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  size_t v21;
  char *v22;

  v2 = *((unsigned __int8 *)__s + 23);
  if (*((char *)__s + 23) < 0)
  {
    v4 = __s[1];
    if (v4)
    {
      v3 = (_QWORD *)*__s;
      goto LABEL_6;
    }
    return 1;
  }
  if (!*((_BYTE *)__s + 23))
    return 1;
  v3 = __s;
  v4 = *((unsigned __int8 *)__s + 23);
LABEL_6:
  v5 = 0;
  while (*((_BYTE *)v3 + v5) != 46)
  {
    if (v4 == ++v5)
      goto LABEL_12;
  }
  if (v4 != v5 && !v5)
    return 0;
LABEL_12:
  v7 = (_QWORD *)*__s;
  v6 = __s[1];
  if ((v2 & 0x80u) == 0)
    v8 = __s;
  else
    v8 = (_QWORD *)*__s;
  if ((v2 & 0x80u) == 0)
    v9 = *((unsigned __int8 *)__s + 23);
  else
    v9 = __s[1];
  v10 = (char *)v8 - 1;
  while (v9)
  {
    v11 = v10[v9--];
    if (v11 == 46)
    {
      if ((v2 & 0x80) == 0)
        goto LABEL_22;
      goto LABEL_25;
    }
  }
  v9 = -1;
  if ((v2 & 0x80) == 0)
  {
LABEL_22:
    v7 = __s;
    v6 = *((unsigned __int8 *)__s + 23);
    if (v9 == v2 - 1)
      return 0;
    goto LABEL_27;
  }
LABEL_25:
  if (v9 == v6 - 1)
    return 0;
LABEL_27:
  if (v6 >= 2)
  {
    v12 = (char *)v7 + v6;
    v13 = v7;
    do
    {
      v14 = (char *)memchr(v13, 46, v6 - 1);
      if (!v14)
        break;
      if (*(_WORD *)v14 == 11822)
      {
        if (v14 == v12 || v14 - (char *)v7 == -1)
          break;
        return 0;
      }
      v13 = v14 + 1;
      v6 = v12 - (_BYTE *)v13;
    }
    while (v12 - (_BYTE *)v13 >= 2);
  }
  v16 = atomic_load((unsigned __int8 *)qword_2540CA6E0);
  if ((v16 & 1) == 0 && __cxa_guard_acquire(qword_2540CA6E0))
  {
    sub_223174DE4(&qword_2540CA7C0, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_.");
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2540CA7C0, &dword_22314D000);
    __cxa_guard_release(qword_2540CA6E0);
  }
  v17 = *((char *)__s + 23);
  if (v17 >= 0)
    v18 = (char *)__s;
  else
    v18 = (char *)*__s;
  if (v17 >= 0)
    v19 = *((unsigned __int8 *)__s + 23);
  else
    v19 = __s[1];
  if (byte_2540CA7D7 >= 0)
    v20 = &qword_2540CA7C0;
  else
    v20 = (uint64_t *)qword_2540CA7C0;
  if (byte_2540CA7D7 >= 0)
    v21 = byte_2540CA7D7;
  else
    v21 = qword_2540CA7C8;
  if (!v19)
    return 1;
  v22 = v18;
  if (v21)
  {
    while (memchr(v20, *v22, v21))
    {
      ++v22;
      if (!--v19)
        return 1;
    }
  }
  return v22 - v18 == -1;
}

void sub_22322DB70(_Unwind_Exception *a1)
{
  __cxa_guard_abort(qword_2540CA6E0);
  _Unwind_Resume(a1);
}

void sub_22322DB88(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  __int128 *p_dst;
  char *v10;
  uint64_t v11;
  __int128 *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  __int128 *v16;
  uint64_t v17;
  char *v18;
  int v19;
  uint64_t v20;
  __int128 *v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  __int128 *v26;
  char *v27;
  __int128 *v28;
  uint64_t v29;
  __int128 v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  __int128 v39;
  char *v40;
  uint64_t v41;
  void **v42;
  char *i;
  __int128 v44;
  uint64_t v45;
  void **v46;
  uint64_t v47;
  size_t v48;
  unint64_t v49;
  const void *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  char *v54;
  char *v55;
  void *__p[2];
  uint64_t v57;
  _QWORD v58[2];
  uint64_t v59;
  uint64_t v60;
  const void *v61;
  uint64_t v62;
  const void *v63;
  unint64_t v64;
  void *v65;
  char v66;
  unint64_t v67;
  int v68;
  _BYTE v69[152];
  char *v70;
  char *v71;
  unint64_t v72;
  __int128 __dst;
  uint64_t v74;

  if (sub_22322D8FC((_QWORD *)a1))
  {
    if (*(char *)(a1 + 23) < 0)
    {
      sub_223197FA4(a2, *(void **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)a2 = *(_OWORD *)a1;
      a2[2] = *(_QWORD *)(a1 + 16);
    }
    return;
  }
  if (*(char *)(a1 + 23) < 0)
  {
    sub_223197FA4(&__dst, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    __dst = *(_OWORD *)a1;
    v74 = *(_QWORD *)(a1 + 16);
  }
  v4 = 1;
LABEL_9:
  v5 = HIBYTE(v74);
  v6 = *((_QWORD *)&__dst + 1);
  v7 = (__int128 *)__dst;
  if (v74 >= 0)
    v8 = HIBYTE(v74);
  else
    v8 = *((_QWORD *)&__dst + 1);
  if (v74 >= 0)
    p_dst = &__dst;
  else
    p_dst = (__int128 *)__dst;
  if (v8 < 2)
  {
    v4 = v8;
  }
  else
  {
    v10 = (char *)p_dst + v8;
    v11 = v8;
    v12 = p_dst;
    do
    {
      v13 = (char *)memchr(v12, 46, v11 - 1);
      if (!v13)
        break;
      if (*(_WORD *)v13 == 11822)
      {
        if (v13 == v10)
          break;
        v14 = v13 - (char *)p_dst;
        if (v13 - (char *)p_dst == -1)
          break;
        if (v8 < v14)
          sub_2231A39C0();
        sub_22323D254(&__dst, v14, 1uLL);
        goto LABEL_9;
      }
      v12 = (__int128 *)(v13 + 1);
      v11 = v10 - (char *)v12;
    }
    while (v10 - (char *)v12 >= 2);
  }
  if (v4)
  {
    v15 = 0;
    while (*((_BYTE *)p_dst + v15) != 46)
    {
      if (v8 == ++v15)
        goto LABEL_34;
    }
    if (v8 != v15 && !v15)
    {
      sub_22323D254(&__dst, 0, 1uLL);
      v5 = HIBYTE(v74);
      v6 = *((_QWORD *)&__dst + 1);
      v7 = (__int128 *)__dst;
    }
  }
LABEL_34:
  if ((v5 & 0x80u) == 0)
    v16 = &__dst;
  else
    v16 = v7;
  if ((v5 & 0x80u) == 0)
    v17 = v5;
  else
    v17 = v6;
  v18 = (char *)v16 - 1;
  do
  {
    if (!v17)
    {
      v17 = -1;
      if ((v5 & 0x80) != 0)
        goto LABEL_47;
LABEL_44:
      v6 = v5;
      if (v17 == v5 - 1)
      {
LABEL_48:
        sub_22323D254(&__dst, v6, 1uLL);
        LODWORD(v5) = HIBYTE(v74);
        if (SHIBYTE(v74) < 0)
          goto LABEL_51;
      }
      if (!(_DWORD)v5)
        goto LABEL_57;
      v20 = v5;
      v21 = &__dst;
LABEL_53:
      v22 = (__int128 *)((char *)v21 + v20);
      v23 = v20 - 1;
      while (!sub_22323D2E4(*(char *)v21))
      {
        v21 = (__int128 *)((char *)v21 + 1);
        --v23;
        if (v21 == v22)
          goto LABEL_66;
      }
      if (v21 == v22 || (__int128 *)((char *)v21 + 1) == v22)
      {
        v22 = v21;
      }
      else
      {
        v24 = 1;
        v22 = v21;
        do
        {
          if (!sub_22323D2E4(*((char *)v21 + v24)))
          {
            *(_BYTE *)v22 = *((_BYTE *)v21 + v24);
            v22 = (__int128 *)((char *)v22 + 1);
          }
          ++v24;
          --v23;
        }
        while (v23);
      }
LABEL_66:
      v25 = HIBYTE(v74);
      v26 = (__int128 *)__dst;
      v27 = (char *)(__dst + *((_QWORD *)&__dst + 1));
      v28 = &__dst;
      if (v74 < 0)
      {
        v25 = *((_QWORD *)&__dst + 1);
        v28 = (__int128 *)__dst;
      }
      else
      {
        v27 = (char *)&__dst + HIBYTE(v74);
      }
      v29 = (char *)v22 - (char *)v28;
      if (v25 < (char *)v22 - (char *)v28)
        sub_2231A39C0();
      if (v27 - (char *)v22 == -1)
      {
        if (SHIBYTE(v74) < 0)
        {
          *((_QWORD *)&__dst + 1) = (char *)v22 - (char *)v28;
        }
        else
        {
          HIBYTE(v74) = v29 & 0x7F;
          v26 = &__dst;
        }
        *((_BYTE *)v26 + v29) = 0;
      }
      else
      {
        sub_22323D254(&__dst, v29, v27 - (char *)v22);
      }
      v70 = 0;
      v71 = 0;
      v72 = 0;
      sub_22322E364((uint64_t)v58, &__dst, 24);
      __p[0] = 0;
      __p[1] = 0;
      v57 = 0;
      while (1)
      {
        v31 = sub_22322E508(v58, (uint64_t)__p, 0x2Eu);
        if ((*((_BYTE *)v31 + *(_QWORD *)(*v31 - 24) + 32) & 5) != 0)
          break;
        v32 = v71;
        if ((unint64_t)v71 < v72)
        {
          if (SHIBYTE(v57) < 0)
          {
            sub_223197FA4(v71, __p[0], (unint64_t)__p[1]);
          }
          else
          {
            v30 = *(_OWORD *)__p;
            *((_QWORD *)v71 + 2) = v57;
            *(_OWORD *)v32 = v30;
          }
          v71 = v32 + 24;
        }
        else
        {
          v71 = sub_22323C290(&v70, (uint64_t)__p);
        }
      }
      if (SHIBYTE(v57) < 0)
        operator delete(__p[0]);
      v33 = *MEMORY[0x24BEDB7F0];
      v58[0] = v33;
      v35 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
      v34 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      *(_QWORD *)((char *)v58 + *(_QWORD *)(v33 - 24)) = v35;
      v59 = v34;
      v60 = MEMORY[0x24BEDB848] + 16;
      if (v66 < 0)
        operator delete(v65);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x227684BE0](v69);
      v36 = HIBYTE(v74);
      if (v74 < 0)
        v36 = *((_QWORD *)&__dst + 1);
      if (!v36)
      {
        *((_BYTE *)a2 + 23) = 1;
        *(_WORD *)a2 = 95;
        v40 = v70;
        if (!v70)
          goto LABEL_148;
        goto LABEL_141;
      }
      sub_223195210((uint64_t)v58);
      v37 = v70;
      v38 = v71;
      if (v70 != v71)
      {
        if (v70[23] < 0)
        {
          sub_223197FA4(__p, *(void **)v70, *((_QWORD *)v70 + 1));
        }
        else
        {
          v39 = *(_OWORD *)v70;
          v57 = *((_QWORD *)v70 + 2);
          *(_OWORD *)__p = v39;
        }
        if (v57 >= 0)
          v41 = HIBYTE(v57);
        else
          v41 = (uint64_t)__p[1];
        if (v41)
        {
          if (v57 >= 0)
            v42 = __p;
          else
            v42 = (void **)__p[0];
          sub_2231813E8(&v59, (uint64_t)v42, v41);
        }
        else
        {
          sub_2231813E8(&v59, (uint64_t)"_", 1);
        }
        if (SHIBYTE(v57) < 0)
          operator delete(__p[0]);
        for (i = v37 + 24; i != v38; i += 24)
        {
          if (i[23] < 0)
          {
            sub_223197FA4(__p, *(void **)i, *((_QWORD *)i + 1));
          }
          else
          {
            v44 = *(_OWORD *)i;
            v57 = *((_QWORD *)i + 2);
            *(_OWORD *)__p = v44;
          }
          sub_2231813E8(&v59, (uint64_t)".", 1);
          if (v57 >= 0)
            v45 = HIBYTE(v57);
          else
            v45 = (uint64_t)__p[1];
          if (v45)
          {
            if (v57 >= 0)
              v46 = __p;
            else
              v46 = (void **)__p[0];
            sub_2231813E8(&v59, (uint64_t)v46, v45);
          }
          else
          {
            sub_2231813E8(&v59, (uint64_t)"_", 1);
          }
          if (SHIBYTE(v57) < 0)
            operator delete(__p[0]);
        }
      }
      if ((v68 & 0x10) != 0)
      {
        v49 = v67;
        v47 = v34;
        if (v67 < v64)
        {
          v67 = v64;
          v49 = v64;
        }
        v50 = v63;
        v48 = v49 - (_QWORD)v63;
        if (v49 - (unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8)
          goto LABEL_152;
      }
      else
      {
        v47 = v34;
        if ((v68 & 8) == 0)
        {
          v48 = 0;
          *((_BYTE *)a2 + 23) = 0;
          goto LABEL_138;
        }
        v50 = v61;
        v48 = v62 - (_QWORD)v61;
        if ((unint64_t)(v62 - (_QWORD)v61) >= 0x7FFFFFFFFFFFFFF8)
LABEL_152:
          sub_22316DBC0();
      }
      if (v48 >= 0x17)
      {
        v51 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v48 | 7) != 0x17)
          v51 = v48 | 7;
        v52 = v51 + 1;
        v53 = operator new(v51 + 1);
        a2[1] = v48;
        a2[2] = v52 | 0x8000000000000000;
        *a2 = v53;
        a2 = v53;
      }
      else
      {
        *((_BYTE *)a2 + 23) = v48;
        if (!v48)
        {
LABEL_138:
          *((_BYTE *)a2 + v48) = 0;
          v58[0] = v33;
          *(_QWORD *)((char *)v58 + *(_QWORD *)(v33 - 24)) = v35;
          v59 = v47;
          v60 = MEMORY[0x24BEDB848] + 16;
          if (v66 < 0)
            operator delete(v65);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x227684BE0](v69);
          v40 = v70;
          if (!v70)
          {
LABEL_148:
            if (v74 < 0)
              goto LABEL_149;
            return;
          }
LABEL_141:
          v54 = v71;
          v55 = v40;
          if (v71 != v40)
          {
            do
            {
              if (*(v54 - 1) < 0)
                operator delete(*((void **)v54 - 3));
              v54 -= 24;
            }
            while (v54 != v40);
            v55 = v70;
          }
          v71 = v40;
          operator delete(v55);
          goto LABEL_148;
        }
      }
      memmove(a2, v50, v48);
      goto LABEL_138;
    }
    v19 = v18[v17--];
  }
  while (v19 != 46);
  if ((v5 & 0x80) == 0)
    goto LABEL_44;
LABEL_47:
  if (v17 == v6 - 1)
    goto LABEL_48;
LABEL_51:
  v20 = *((_QWORD *)&__dst + 1);
  if (*((_QWORD *)&__dst + 1))
  {
    v21 = (__int128 *)__dst;
    goto LABEL_53;
  }
LABEL_57:
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  if ((v5 & 0x80) != 0)
LABEL_149:
    operator delete((void *)__dst);
}

void sub_22322E2D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  uint64_t v18;

  sub_223195348((uint64_t)&a18);
  sub_22319BB48((void **)(v18 - 136));
  if (*(char *)(v18 - 89) < 0)
    operator delete(*(void **)(v18 - 112));
  _Unwind_Resume(a1);
}

uint64_t sub_22322E364(uint64_t a1, __int128 *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::ios_base *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v6 = MEMORY[0x24BEDB858];
  v7 = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 16) = v6 + 64;
  v8 = a1 + 16;
  v9 = a1 + 24;
  v10 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v11 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v12 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v12;
  *(_QWORD *)(a1 + 8) = 0;
  v13 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v13, (void *)(a1 + 24));
  v13[1].__vftable = 0;
  v13[1].__fmtflags_ = -1;
  v14 = v10[4];
  v15 = v10[5];
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v8 + *(_QWORD *)(v14 - 24)) = v15;
  v16 = v10[1];
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + *(_QWORD *)(v16 - 24)) = v10[6];
  *(_QWORD *)a1 = v6 + 24;
  *(_QWORD *)(a1 + 128) = v7;
  *(_QWORD *)(a1 + 16) = v6 + 64;
  std::streambuf::basic_streambuf();
  v17 = MEMORY[0x24BEDB848];
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 24) = v17 + 16;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = a3;
  if ((__int128 *)(a1 + 88) != a2)
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_22319C3F4((_QWORD *)(a1 + 88), *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v18 = *a2;
      *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 2);
      *(_OWORD *)(a1 + 88) = v18;
    }
  }
  sub_2231B5488(v9);
  return a1;
}

void sub_22322E4B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::iostream::~basic_iostream();
  MEMORY[0x227684BE0](a10);
  _Unwind_Resume(a1);
}

_QWORD *sub_22322E508(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  int v9;
  char v11;

  MEMORY[0x227684550](&v11, a1, 1);
  if (!v11)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v8 = (_BYTE *)v7[3];
    if (v8 != (_BYTE *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7);
    if ((_DWORD)v7 == -1)
      break;
LABEL_9:
    if (v7 == a3)
    {
      v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(_QWORD *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6)
    v9 = 2;
  else
    v9 = 6;
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_22322E634(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x22322E600);
  }
  __cxa_rethrow();
}

void sub_22322E678(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_22322E68C(char *a1, char **a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;
  char *v7;
  char *v8;
  int64_t v9;
  char *v10;
  int v11;
  int64_t v12;
  char *v13;
  int64_t v14;
  uint64_t v15;

  v2 = *((char *)a2 + 23);
  if (v2 >= 0)
    v3 = *((unsigned __int8 *)a2 + 23);
  else
    v3 = (unint64_t)a2[1];
  v4 = a1[23];
  if (a1[23] < 0)
  {
    v5 = *((_QWORD *)a1 + 1);
    if (v3 <= v5)
      return 0;
  }
  else
  {
    v5 = a1[23];
    if (v3 <= v4)
      return 0;
  }
  if (!v5)
    return 1;
  if (v2 >= 0)
    v7 = (char *)a2;
  else
    v7 = *a2;
  if ((v4 & 0x80u) == 0)
    v8 = a1;
  else
    v8 = *(char **)a1;
  if ((v4 & 0x80u) == 0)
    v9 = a1[23];
  else
    v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    if ((uint64_t)v3 >= v9)
    {
      v10 = &v7[v3];
      v11 = *v8;
      v12 = v3;
      v13 = v7;
      while (1)
      {
        v14 = v12 - v9;
        if (v14 == -1)
          break;
        result = (uint64_t)memchr(v13, v11, v14 + 1);
        if (!result)
          return result;
        v15 = result;
        result = memcmp((const void *)result, v8, v9);
        if (!(_DWORD)result)
        {
          if ((char *)v15 == v10 || (char *)v15 != v7)
            return result;
          goto LABEL_30;
        }
        result = 0;
        v13 = (char *)(v15 + 1);
        v12 = (int64_t)&v10[-v15 - 1];
        if (v12 < v9)
          return result;
      }
    }
    return 0;
  }
LABEL_30:
  if (v7[v9] != 46 || v3 <= v9 + 1)
    return 0;
  while (v7[v9 + 1] == 46)
  {
    result = 0;
    if (v3 - 1 == ++v9)
      return result;
  }
  return v9 != -2;
}

uint64_t sub_22322E828(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

BOOL sub_22322E870(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  std::mutex *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _BOOL8 v18;
  __int128 v20;
  std::mutex *v21;

  v4 = (std::mutex *)(*(_QWORD *)(a2 + 80) + 64);
  std::mutex::lock(v4);
  v5 = (std::mutex *)(a1 + 64);
  v21 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  v6 = *(_QWORD *)(a2 + 80);
  v7 = *(_QWORD **)(v6 + 128);
  v8 = (_QWORD *)(v6 + 136);
  if (v7 != (_QWORD *)(v6 + 136))
  {
    while (1)
    {
      v9 = v7[6];
      *(_QWORD *)&v20 = v7[5];
      *((_QWORD *)&v20 + 1) = v9;
      if (v9)
      {
        v10 = (unint64_t *)(v9 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      sub_22322EAA4(a1, &v20, (uint64_t)&v21);
      v12 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
      if (!*((_QWORD *)&v20 + 1))
        goto LABEL_11;
      v13 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
        v15 = (_QWORD *)v7[1];
        if (!v15)
        {
          do
          {
LABEL_15:
            v16 = (_QWORD *)v7[2];
            v17 = *v16 == (_QWORD)v7;
            v7 = v16;
          }
          while (!v17);
          goto LABEL_3;
        }
      }
      else
      {
LABEL_11:
        v15 = (_QWORD *)v7[1];
        if (!v15)
          goto LABEL_15;
      }
      do
      {
        v16 = v15;
        v15 = (_QWORD *)*v15;
      }
      while (v15);
LABEL_3:
      v7 = v16;
      if (v16 == v8)
      {
        v5 = v21;
        break;
      }
    }
  }
  v18 = *(_QWORD *)(a1 + 152) != 0;
  std::mutex::unlock(v5);
  std::mutex::unlock(v4);
  return v18;
}

void sub_22322E9B0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_22322E9C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::mutex *a12)
{
  std::mutex *v12;

  sub_223167354((uint64_t)&a10);
  std::mutex::unlock(a12);
  std::mutex::unlock(v12);
  _Unwind_Resume(a1);
}

uint64_t sub_22322E9E8(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD v9[2];
  std::mutex *v10;

  v10 = (std::mutex *)(*(_QWORD *)(a1 + 80) + 64);
  std::mutex::lock(v10);
  v4 = (std::__shared_weak_count *)a2[1];
  v9[0] = *a2;
  v9[1] = v4;
  *a2 = 0;
  a2[1] = 0;
  v5 = sub_22322CBA4(a1, v9, (uint64_t)&v10);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  std::mutex::unlock(v10);
  return v5;
}

void sub_22322EA88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::mutex *a12)
{
  sub_223167354((uint64_t)&a10);
  std::mutex::unlock(a12);
  _Unwind_Resume(a1);
}

BOOL sub_22322EAA4(uint64_t a1, __int128 *a2, uint64_t a3)
{
  __int128 v5;
  uint64_t **v6;
  char v7;
  char v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::mutex *v13;
  __int128 v14;
  uint64_t **v15;
  char v16;
  char v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v22;
  __int128 v23;

  if (a3)
  {
    v5 = *a2;
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    v22 = v5;
    v23 = v5;
    v6 = sub_22323E084((uint64_t **)(a1 + 128), (__int128 *)&v22);
    v8 = v7;
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if (v8 && *((_BYTE *)v6[4] + 8))
      ++*(_QWORD *)(a1 + 152);
    v12 = *(_QWORD *)(a1 + 152);
  }
  else
  {
    v13 = (std::mutex *)(a1 + 64);
    std::mutex::lock((std::mutex *)(a1 + 64));
    v14 = *a2;
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    v22 = v14;
    v23 = v14;
    v15 = sub_22323E084((uint64_t **)(a1 + 128), (__int128 *)&v22);
    v17 = v16;
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (v17 && *((_BYTE *)v15[4] + 8))
      ++*(_QWORD *)(a1 + 152);
    v12 = *(_QWORD *)(a1 + 152);
    std::mutex::unlock(v13);
  }
  return v12 != 0;
}

void sub_22322EC78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  std::mutex *v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_223197300((uint64_t)va1);
  sub_223167354((uint64_t)va);
  std::mutex::unlock(v4);
  _Unwind_Resume(a1);
}

void sub_22322EC9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_223197300((uint64_t)va1);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_22322ECB8(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;

  v2 = *(_QWORD **)(*(_QWORD *)(a2 + 80) + 16);
  if (v2)
  {
    v3 = (_QWORD *)result;
    do
    {
      v4 = v2[2];
      v5 = v3[1];
      v6 = *(_QWORD *)(v4 + 80);
      *(_QWORD *)&v12 = *v3;
      *((_QWORD *)&v12 + 1) = v5;
      if (v5)
      {
        v7 = (unint64_t *)(v5 + 8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
      *(_BYTE *)(v4 + 72) = sub_22322EAA4(v6, &v12, 0);
      v9 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
      if (*((_QWORD *)&v12 + 1))
      {
        v10 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      result = sub_22322ECB8(v3, v2[2]);
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
  return result;
}

void sub_22322ED7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
    sub_224574BEC(a10);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_22322ED94(uint64_t a1, unint64_t a2)
{
  std::mutex *v4;
  uint64_t *v5;
  std::mutex *v7;

  v4 = (std::mutex *)(*(_QWORD *)(a1 + 8) + 56);
  std::mutex::lock(v4);
  v7 = (std::mutex *)(*(_QWORD *)(a1 + 80) + 64);
  std::mutex::lock(v7);
  v5 = sub_22322EE3C(a1, a2, (uint64_t)&v7);
  std::mutex::unlock(v7);
  std::mutex::unlock(v4);
  return v5;
}

void sub_22322EE0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10)
{
  std::mutex *v10;

  std::mutex::unlock(a10);
  std::mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_22322EE28(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_22322EE3C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t *result;
  uint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  BOOL v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::mutex *v22;
  unint64_t v23;

  v4 = *(_QWORD **)(a1 + 80);
  result = (uint64_t *)v4[6];
  if (result)
  {
    v8 = v4 + 6;
    v9 = (_QWORD *)v4[6];
    do
    {
      v10 = v9[4];
      v11 = v10 >= a2;
      if (v10 >= a2)
        v12 = v9;
      else
        v12 = v9 + 1;
      if (v11)
        v8 = v9;
      v9 = (_QWORD *)*v12;
    }
    while (*v12);
    if (v8 == v4 + 6)
    {
      return 0;
    }
    else if (v8[4] <= a2)
    {
      v13 = (uint64_t *)v8[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
      else
      {
        v15 = v8;
        do
        {
          v14 = (uint64_t *)v15[2];
          v16 = *v14 == (_QWORD)v15;
          v15 = v14;
        }
        while (!v16);
      }
      if ((uint64_t *)v4[5] == v8)
        v4[5] = v14;
      --v4[7];
      sub_2231AFE60(result, v8);
      v17 = (std::__shared_weak_count *)v8[6];
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      operator delete(v8);
      v20 = *(_QWORD *)(a1 + 80);
      if (a3)
      {
        sub_22323C464(*(_QWORD **)(a1 + 80), a2);
        v21 = *(_QWORD *)(v20 + 152);
      }
      else
      {
        v22 = (std::mutex *)(v20 + 64);
        std::mutex::lock((std::mutex *)(v20 + 64));
        sub_22323C464((_QWORD *)v20, a2);
        v21 = *(_QWORD *)(v20 + 152);
        std::mutex::unlock(v22);
      }
      *(_BYTE *)(a1 + 72) = v21 != 0;
      v23 = a2;
      sub_22322F000((uint64_t)&v23, a1);
      return (uint64_t *)1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_22322EFEC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_22322F000(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  std::mutex *v7;
  uint64_t v8;

  v2 = *(_QWORD **)(*(_QWORD *)(a2 + 80) + 16);
  if (v2)
  {
    v3 = (unint64_t *)result;
    do
    {
      v4 = v2[2];
      v5 = *v3;
      v6 = *(_QWORD *)(v4 + 80);
      v7 = (std::mutex *)(v6 + 64);
      std::mutex::lock((std::mutex *)(v6 + 64));
      sub_22323C464((_QWORD *)v6, v5);
      v8 = *(_QWORD *)(v6 + 152);
      std::mutex::unlock(v7);
      *(_BYTE *)(v4 + 72) = v8 != 0;
      result = sub_22322F000(v3, v2[2]);
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
  return result;
}

void sub_22322F088(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_22322F09C(uint64_t a1)
{
  std::mutex *v2;
  uint64_t v3;
  std::mutex *v4;

  v2 = (std::mutex *)(*(_QWORD *)(a1 + 8) + 56);
  std::mutex::lock(v2);
  v4 = (std::mutex *)(*(_QWORD *)(a1 + 80) + 64);
  std::mutex::lock(v4);
  while (1)
  {
    v3 = *(_QWORD *)(a1 + 80);
    if (!*(_QWORD *)(v3 + 56))
      break;
    sub_22322EE3C(a1, *(_QWORD *)(*(_QWORD *)(v3 + 40) + 32), (uint64_t)&v4);
  }
  std::mutex::unlock(v4);
  std::mutex::unlock(v2);
}

void sub_22322F114(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_22322F128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10)
{
  std::mutex *v10;

  std::mutex::unlock(a10);
  std::mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_22322F144(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::mutex *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;

  v4 = (std::mutex *)(*(_QWORD *)(a1 + 80) + 64);
  std::mutex::lock(v4);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_2231B90C8((uint64_t)a2, *(_QWORD *)(*(_QWORD *)(a1 + 80) + 56));
  v5 = *(_QWORD *)(a1 + 80);
  v6 = *(_QWORD **)(v5 + 40);
  v7 = (_QWORD *)(v5 + 48);
  if (v6 != (_QWORD *)(v5 + 48))
  {
    v8 = (_QWORD *)a2[1];
    do
    {
      if ((unint64_t)v8 >= a2[2])
      {
        v8 = sub_22323C584((uint64_t)a2, (__int128 *)(v6 + 5));
      }
      else
      {
        v9 = v6[6];
        *v8 = v6[5];
        v8[1] = v9;
        if (v9)
        {
          v10 = (unint64_t *)(v9 + 8);
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
        }
        v8 += 2;
      }
      a2[1] = v8;
      v12 = (_QWORD *)v6[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v6[2];
          v14 = *v13 == (_QWORD)v6;
          v6 = v13;
        }
        while (!v14);
      }
      v6 = v13;
    }
    while (v13 != v7);
  }
  std::mutex::unlock(v4);
}

void sub_22322F234(_Unwind_Exception *a1)
{
  std::mutex *v1;
  void **v2;

  sub_2231B888C(v2);
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_22322F254(uint64_t a1, const char *a2, int a3, unint64_t a4)
{
  std::mutex *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  const char *v20;
  _QWORD *v21;
  _QWORD *v22;
  BOOL v23;

  v8 = (std::mutex *)(*(_QWORD *)(a1 + 80) + 64);
  std::mutex::lock(v8);
  v9 = *(_QWORD *)(a1 + 80);
  v10 = v9 + 128;
  v11 = 40;
  if (a3)
    v11 = 128;
  else
    v10 = v9 + 40;
  if (!a4)
    goto LABEL_28;
  v12 = *(_QWORD **)(v10 + 8);
  if (!v12)
    goto LABEL_28;
  v13 = (_QWORD *)(v10 + 8);
  do
  {
    v14 = v12[4];
    v15 = v14 >= a4;
    if (v14 >= a4)
      v16 = v12;
    else
      v16 = v12 + 1;
    if (v15)
      v13 = v12;
    v12 = (_QWORD *)*v16;
  }
  while (*v16);
  if (v13 == (_QWORD *)(v10 + 8) || (v17 = v13[4], v17 > a4))
  {
LABEL_28:
    if (!a2)
      goto LABEL_30;
    v18 = *(_QWORD **)(v9 + v11);
    v19 = (_QWORD *)(v10 + 8);
    if (v18 == (_QWORD *)(v10 + 8))
      goto LABEL_30;
    while (1)
    {
      v20 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v18[4] + 24))(v18[4]);
      if (v20 == a2 || !strcmp(v20, a2))
        break;
      v21 = (_QWORD *)v18[1];
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (_QWORD *)v18[2];
          v23 = *v22 == (_QWORD)v18;
          v18 = v22;
        }
        while (!v23);
      }
      v18 = v22;
      if (v22 == v19)
        goto LABEL_30;
    }
    if (v18 == v19)
LABEL_30:
      v17 = 0;
    else
      v17 = v18[4];
  }
  std::mutex::unlock(v8);
  return v17;
}

void sub_22322F398(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_22322F3AC(_QWORD *a1, int a2)
{
  _DWORD **v3;
  std::mutex *v5;
  uint64_t *v6;
  std::__shared_weak_count_vtbl *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  char v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t i;
  void **v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  char *v40;
  unint64_t v41;
  unint64_t v42;
  void **v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  void *v47;
  void *__p[2];
  __int128 v49;
  __int128 v50;

  v3 = (_DWORD **)a1[6];
  if (v3)
  {
    **v3 = a2;
    return;
  }
  v5 = (std::mutex *)(a1[1] + 56);
  std::mutex::lock(v5);
  v6 = (uint64_t *)operator new();
  v7 = (std::__shared_weak_count_vtbl *)operator new();
  LODWORD(v7->~__shared_weak_count) = a2;
  *v6 = (uint64_t)v7;
  v8 = (std::__shared_weak_count *)operator new();
  v8->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC26740;
  v8->__shared_owners_ = 0;
  v8->__shared_weak_owners_ = 0;
  v8[1].__vftable = v7;
  v6[1] = (uint64_t)v8;
  v9 = a1[6];
  a1[6] = v6;
  if (!v9)
  {
    v13 = *v6;
    goto LABEL_13;
  }
  v10 = *(std::__shared_weak_count **)(v9 + 8);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  MEMORY[0x227684CE8](v9, 0x30C40EEE2E2AFLL);
  v13 = *(_QWORD *)a1[6];
  v8 = *(std::__shared_weak_count **)(a1[6] + 8);
  if (v8)
  {
LABEL_13:
    v16 = (unint64_t *)&v8->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    do
      v18 = __ldxr(v16);
    while (__stxr(v18 + 1, v16));
    v14 = 0;
    v15 = (std::__shared_weak_count *)a1[8];
    a1[7] = v13;
    a1[8] = v8;
    if (!v15)
      goto LABEL_21;
    goto LABEL_17;
  }
  v14 = 1;
  v15 = (std::__shared_weak_count *)a1[8];
  a1[7] = v13;
  a1[8] = 0;
  if (!v15)
    goto LABEL_21;
LABEL_17:
  v19 = (unint64_t *)&v15->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
LABEL_21:
  if ((v14 & 1) == 0)
  {
    v21 = (unint64_t *)&v8->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v23 = *(_QWORD **)(a1[10] + 16);
  *(_OWORD *)__p = 0u;
  v49 = 0u;
  v50 = 0u;
  v24 = 0;
  if (v23)
  {
    v25 = v23;
    do
    {
      ++v24;
      v25 = (_QWORD *)*v25;
    }
    while (v25);
  }
  sub_22323F110(__p, v23, v24);
  i = *((_QWORD *)&v50 + 1);
  if (*((_QWORD *)&v50 + 1))
  {
    v27 = (void **)__p[1];
    v28 = v50;
    while (1)
    {
      v29 = *(uint64_t *)((char *)v27 + ((v28 >> 6) & 0x3FFFFFFFFFFFFF8));
      v30 = v28 & 0x1FF;
      v31 = *(_QWORD **)(v29 + 8 * v30);
      if (!v31[6])
      {
        v33 = a1[7];
        v32 = a1[8];
        if (v32)
        {
          v34 = (unint64_t *)(v32 + 8);
          do
            v35 = __ldxr(v34);
          while (__stxr(v35 + 1, v34));
        }
        v36 = (std::__shared_weak_count *)v31[8];
        v31[7] = v33;
        v31[8] = v32;
        if (!v36)
          goto LABEL_42;
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
          v39 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v29 + 8 * v30) + 80) + 16);
          for (i = *((_QWORD *)&v50 + 1); v39; v39 = (_QWORD *)*v39)
          {
LABEL_47:
            v40 = (char *)__p[1];
            if ((void *)v49 == __p[1])
              v41 = 0;
            else
              v41 = (((_QWORD)v49 - (unint64_t)__p[1]) << 6) - 1;
            v42 = v50 + i;
            if (v41 == v42)
            {
              sub_22323C6E4((uint64_t)__p);
              v40 = (char *)__p[1];
              v42 = *((_QWORD *)&v50 + 1) + v50;
            }
            *(_QWORD *)(*(_QWORD *)&v40[(v42 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v42 & 0x1FF)) = v39[2];
            i = ++*((_QWORD *)&v50 + 1);
          }
        }
        else
        {
LABEL_42:
          v39 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v29 + 8 * v30) + 80) + 16);
          i = *((_QWORD *)&v50 + 1);
          if (v39)
            goto LABEL_47;
        }
      }
      v27 = (void **)__p[1];
      --i;
      v28 = v50 + 1;
      *(_QWORD *)&v50 = v28;
      *((_QWORD *)&v50 + 1) = i;
      if (v28 >= 0x400)
      {
        operator delete(*(void **)__p[1]);
        v27 = (void **)((char *)__p[1] + 8);
        v28 = v50 - 512;
        __p[1] = (char *)__p[1] + 8;
        *(_QWORD *)&v50 = v50 - 512;
        i = *((_QWORD *)&v50 + 1);
      }
      if (!i)
        goto LABEL_53;
    }
  }
  v27 = (void **)__p[1];
LABEL_53:
  v43 = (void **)v49;
  *((_QWORD *)&v50 + 1) = 0;
  v44 = v49 - (_QWORD)v27;
  if ((_QWORD)v49 - (_QWORD)v27 >= 0x11uLL)
  {
    do
    {
      operator delete(*v27);
      v43 = (void **)v49;
      v27 = (void **)((char *)__p[1] + 8);
      __p[1] = v27;
      v44 = v49 - (_QWORD)v27;
    }
    while ((_QWORD)v49 - (_QWORD)v27 > 0x10uLL);
  }
  v45 = v44 >> 3;
  if (v45 == 1)
  {
    v46 = 256;
  }
  else
  {
    if (v45 != 2)
      goto LABEL_60;
    v46 = 512;
  }
  *(_QWORD *)&v50 = v46;
LABEL_60:
  if (v27 != v43)
  {
    do
    {
      v47 = *v27++;
      operator delete(v47);
    }
    while (v27 != v43);
    if ((void *)v49 != __p[1])
      *(_QWORD *)&v49 = v49 + (((unint64_t)__p[1] - v49 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (__p[0])
    operator delete(__p[0]);
  std::mutex::unlock(v5);
}

void sub_22322F7F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11)
{
  std::mutex *v11;
  void *v13;

  if (a11 == a10)
  {
    v13 = __p;
    if (!__p)
      goto LABEL_3;
  }
  else
  {
    v13 = __p;
    if (!__p)
    {
LABEL_3:
      std::mutex::unlock(v11);
      _Unwind_Resume(a1);
    }
  }
  operator delete(v13);
  std::mutex::unlock(v11);
  _Unwind_Resume(a1);
}

void sub_22322F84C(_Unwind_Exception *a1)
{
  std::mutex *v1;
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x227684CE8](v3, 0x1000C4052888210);
  MEMORY[0x227684CE8](v2, 0x30C40EEE2E2AFLL);
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_22322F898(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_22322F8AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  sub_22323FBC0((uint64_t)&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_22322F8C8(_QWORD *a1)
{
  std::mutex *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t i;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  void **v35;
  void **v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void *v41;
  void *__p[2];
  __int128 v43;
  __int128 v44;

  if (a1[6])
  {
    if (!a1[5])
      return 0;
    v2 = (std::mutex *)(a1[1] + 56);
    std::mutex::lock(v2);
    v3 = a1[5];
    v5 = *(_QWORD *)(v3 + 56);
    v4 = *(_QWORD *)(v3 + 64);
    if (v4)
    {
      v6 = (unint64_t *)(v4 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    v8 = (std::__shared_weak_count *)a1[8];
    a1[7] = v5;
    a1[8] = v4;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = *(_QWORD **)(a1[10] + 16);
    *(_OWORD *)__p = 0u;
    v43 = 0u;
    v44 = 0u;
    v12 = 0;
    if (v11)
    {
      v13 = v11;
      do
      {
        ++v12;
        v13 = (_QWORD *)*v13;
      }
      while (v13);
    }
    sub_22323F110(__p, v11, v12);
    i = *((_QWORD *)&v44 + 1);
    if (*((_QWORD *)&v44 + 1))
    {
      v15 = (char *)__p[1];
      v16 = v44;
      do
      {
        v17 = *(_QWORD *)&v15[(v16 >> 6) & 0x3FFFFFFFFFFFFF8];
        v18 = v16 & 0x1FF;
        v19 = *(_QWORD **)(v17 + 8 * v18);
        if (!v19[6])
        {
          v21 = a1[7];
          v20 = a1[8];
          if (v20)
          {
            v22 = (unint64_t *)(v20 + 8);
            do
              v23 = __ldxr(v22);
            while (__stxr(v23 + 1, v22));
          }
          v24 = (std::__shared_weak_count *)v19[8];
          v19[7] = v21;
          v19[8] = v20;
          if (!v24)
            goto LABEL_27;
          v25 = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
            v27 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v17 + 8 * v18) + 80) + 16);
            for (i = *((_QWORD *)&v44 + 1); v27; v27 = (_QWORD *)*v27)
            {
LABEL_32:
              v28 = (char *)__p[1];
              if ((void *)v43 == __p[1])
                v29 = 0;
              else
                v29 = (((_QWORD)v43 - (unint64_t)__p[1]) << 6) - 1;
              v30 = v44 + i;
              if (v29 == v30)
              {
                sub_22323C6E4((uint64_t)__p);
                v28 = (char *)__p[1];
                v30 = *((_QWORD *)&v44 + 1) + v44;
              }
              *(_QWORD *)(*(_QWORD *)&v28[(v30 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v30 & 0x1FF)) = v27[2];
              i = ++*((_QWORD *)&v44 + 1);
            }
          }
          else
          {
LABEL_27:
            v27 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v17 + 8 * v18) + 80) + 16);
            i = *((_QWORD *)&v44 + 1);
            if (v27)
              goto LABEL_32;
          }
        }
        v15 = (char *)__p[1];
        --i;
        v16 = v44 + 1;
        *(_QWORD *)&v44 = v16;
        *((_QWORD *)&v44 + 1) = i;
        if (v16 >= 0x400)
        {
          operator delete(*(void **)__p[1]);
          v15 = (char *)__p[1] + 8;
          v16 = v44 - 512;
          __p[1] = (char *)__p[1] + 8;
          *(_QWORD *)&v44 = v44 - 512;
          i = *((_QWORD *)&v44 + 1);
        }
      }
      while (i);
    }
    v31 = a1[6];
    a1[6] = 0;
    if (v31)
    {
      v32 = *(std::__shared_weak_count **)(v31 + 8);
      if (v32)
      {
        v33 = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      MEMORY[0x227684CE8](v31, 0x30C40EEE2E2AFLL);
    }
    v35 = (void **)__p[1];
    v36 = (void **)v43;
    *((_QWORD *)&v44 + 1) = 0;
    v37 = v43 - (unint64_t)__p[1];
    if ((unint64_t)v43 - (unint64_t)__p[1] >= 0x11)
    {
      do
      {
        operator delete(*v35);
        v36 = (void **)v43;
        v35 = (void **)((char *)__p[1] + 8);
        __p[1] = v35;
        v37 = v43 - (_QWORD)v35;
      }
      while ((_QWORD)v43 - (_QWORD)v35 > 0x10uLL);
    }
    v38 = v37 >> 3;
    if (v38 == 1)
    {
      v39 = 256;
    }
    else
    {
      if (v38 != 2)
        goto LABEL_52;
      v39 = 512;
    }
    *(_QWORD *)&v44 = v39;
LABEL_52:
    if (v35 != v36)
    {
      do
      {
        v41 = *v35++;
        operator delete(v41);
      }
      while (v35 != v36);
      if ((void *)v43 != __p[1])
        *(_QWORD *)&v43 = v43 + (((unint64_t)__p[1] - v43 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
    if (__p[0])
      operator delete(__p[0]);
    std::mutex::unlock(v2);
  }
  return 1;
}

void sub_22322FC40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11)
{
  std::mutex *v11;
  void *v13;

  if (a11 == a10)
  {
    v13 = __p;
    if (!__p)
      goto LABEL_3;
  }
  else
  {
    v13 = __p;
    if (!__p)
    {
LABEL_3:
      std::mutex::unlock(v11);
      _Unwind_Resume(a1);
    }
  }
  operator delete(v13);
  std::mutex::unlock(v11);
  _Unwind_Resume(a1);
}

void sub_22322FC98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  sub_22323FBC0((uint64_t)&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

void sub_22322FCB4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::mutex *v4;

  v4 = (std::mutex *)(*(_QWORD *)(a1 + 8) + 56);
  std::mutex::lock(v4);
  sub_22322FD10(a1, a2);
  std::mutex::unlock(v4);
}

void sub_22322FCFC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_22322FD10(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _DWORD **v4;
  unsigned int v5;
  const char *v6;
  size_t v7;
  size_t v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _QWORD *v14;
  _QWORD *i;
  void *v16;
  unint64_t v17;
  __int128 v18;
  _BYTE *v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  v4 = *(_DWORD ***)(a1 + 48);
  if (v4)
  {
    v5 = **v4 - 1;
    if (v5 > 5)
    {
      v6 = "{error}";
      v7 = strlen("{error}");
      if (v7 >= 0x7FFFFFFFFFFFFFF8)
        goto LABEL_31;
    }
    else
    {
      v6 = off_24EC26CE0[v5];
      v7 = strlen(v6);
      if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_31:
        sub_22316DBC0();
    }
  }
  else
  {
    v6 = "NONE";
    v7 = strlen("NONE");
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_31;
  }
  v8 = v7;
  if (v7 >= 0x17)
  {
    v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v11 = v7 | 7;
    v12 = v11 + 1;
    v9 = (__int128 *)operator new(v11 + 1);
    *((_QWORD *)&v21 + 1) = v8;
    v22 = v12 | 0x8000000000000000;
    *(_QWORD *)&v21 = v9;
LABEL_13:
    memcpy(v9, v6, v8);
    *((_BYTE *)v9 + v8) = 0;
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 56);
    if ((*(char *)(a1 + 39) & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_14;
  }
  HIBYTE(v22) = v7;
  v9 = &v21;
  if (v7)
    goto LABEL_13;
  LOBYTE(v21) = 0;
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 56);
  if ((*(char *)(a1 + 39) & 0x80000000) == 0)
  {
LABEL_9:
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 16);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 32);
    goto LABEL_15;
  }
LABEL_14:
  sub_223197FA4((_BYTE *)a2, *(void **)(a1 + 16), *(_QWORD *)(a1 + 24));
LABEL_15:
  v13 = (_BYTE *)(a2 + 24);
  if (SHIBYTE(v22) < 0)
  {
    v16 = (void *)v21;
    sub_223197FA4(v13, (void *)v21, *((unint64_t *)&v21 + 1));
    *(_QWORD *)(a2 + 56) = 0;
    v14 = (_QWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 48) = v10;
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 72) = 0;
    operator delete(v16);
    for (i = *(_QWORD **)(*(_QWORD *)(a1 + 80) + 16); i; i = (_QWORD *)*i)
    {
LABEL_21:
      while (1)
      {
        sub_22322FD10(&v21, i[2]);
        v17 = *(_QWORD *)(a2 + 64);
        if (v17 < *(_QWORD *)(a2 + 72))
          break;
        *(_QWORD *)(a2 + 64) = sub_22323CFC4(v14, (uint64_t)&v21);
        sub_22322C8B4((uint64_t)&v21);
        i = (_QWORD *)*i;
        if (!i)
          return;
      }
      if (SHIBYTE(v22) < 0)
      {
        sub_223197FA4(*(_BYTE **)(a2 + 64), (void *)v21, *((unint64_t *)&v21 + 1));
      }
      else
      {
        v18 = v21;
        *(_QWORD *)(v17 + 16) = v22;
        *(_OWORD *)v17 = v18;
      }
      v19 = (_BYTE *)(v17 + 24);
      if (SHIBYTE(v24) < 0)
      {
        sub_223197FA4(v19, (void *)v23, *((unint64_t *)&v23 + 1));
      }
      else
      {
        v20 = v23;
        *(_QWORD *)(v17 + 40) = v24;
        *(_OWORD *)v19 = v20;
      }
      *(_QWORD *)(v17 + 48) = v25;
      *(_QWORD *)(v17 + 56) = 0;
      *(_QWORD *)(v17 + 64) = 0;
      *(_QWORD *)(v17 + 72) = 0;
      *(_OWORD *)(v17 + 56) = v26;
      *(_QWORD *)(v17 + 72) = v27;
      v26 = 0uLL;
      v27 = 0;
      *(_QWORD *)(a2 + 64) = v17 + 80;
      *(_QWORD *)(a2 + 64) = v17 + 80;
      sub_22322C8B4((uint64_t)&v21);
    }
  }
  else
  {
    *(_OWORD *)v13 = v21;
    *(_QWORD *)(a2 + 40) = v22;
    *(_QWORD *)(a2 + 56) = 0;
    v14 = (_QWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 48) = v10;
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 72) = 0;
    i = *(_QWORD **)(*(_QWORD *)(a1 + 80) + 16);
    if (i)
      goto LABEL_21;
  }
}

void sub_22322FFB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (*(char *)(v14 + 23) < 0)
  {
    operator delete(*(void **)v14);
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_22322FFF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  if (*(char *)(v10 + 23) < 0)
    operator delete(*(void **)v10);
  *(_QWORD *)(v9 + 64) = v10;
  sub_22322C8B4((uint64_t)&a9);
  sub_22322C8B4(v9);
  JUMPOUT(0x223230034);
}

uint64_t sub_22323003C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  v2 = *(_QWORD *)(result + 80);
  v3 = *(_QWORD **)(v2 + 128);
  v4 = (_QWORD *)(v2 + 136);
  if (v3 != (_QWORD *)(v2 + 136))
  {
    do
    {
      result = v3[5];
      if (*(_BYTE *)(result + 8))
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, a2);
      v6 = (_QWORD *)v3[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v3[2];
          v8 = *v7 == (_QWORD)v3;
          v3 = v7;
        }
        while (!v8);
      }
      v3 = v7;
    }
    while (v7 != v4);
  }
  return result;
}

_QWORD **sub_2232300D0@<X0>(_QWORD **result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = **result;
  return result;
}

void sub_2232300E0(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;

  v3 = *a1;
  sub_22322D064(&v3, a2, a3);
}

void sub_223230108(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _BYTE *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  void *__p;
  char *v23;
  uint64_t v24[2];
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_DWORD *)(v2 + 48) = 1065353216;
  *(_QWORD *)(v2 + 56) = 850045863;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_QWORD *)(v2 + 112) = 0;
  v3 = operator new();
  sub_223230490();
  *(_BYTE *)(v3 + 8) = 1;
  *(_QWORD *)v3 = &off_24EC26430;
  v4 = (_QWORD *)operator new();
  *v4 = off_24EC26378;
  v5 = v4 + 1;
  if (byte_2540CA8BF < 0)
  {
    sub_223197FA4(v5, (void *)xmmword_2540CA8A8, *((unint64_t *)&xmmword_2540CA8A8 + 1));
  }
  else
  {
    *(_OWORD *)v5 = xmmword_2540CA8A8;
    v4[3] = unk_2540CA8B8;
  }
  *(_QWORD *)(v3 + 16) = v4;
  *(_DWORD *)(v3 + 24) = 63;
  v24[1] = v3;
  v6 = (std::__shared_weak_count *)operator new();
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC26830;
  v6->__shared_weak_owners_ = 0;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  v25 = v6;
  v8 = operator new();
  v24[0] = v2;
  v26 = v3;
  v27 = v6;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  sub_223230590(&__p, &v26, 1uLL);
  sub_22322C944(v8, v24, (uint64_t)&__p);
  v10 = (char *)__p;
  if (__p)
  {
    v11 = v23;
    v12 = __p;
    if (v23 != __p)
    {
      do
      {
        v13 = (std::__shared_weak_count *)*((_QWORD *)v11 - 1);
        if (v13)
        {
          v14 = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        v11 -= 16;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v23 = v10;
    operator delete(v12);
  }
  v16 = v27;
  if (v27)
  {
    v17 = (unint64_t *)&v27->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  *(_QWORD *)v2 = v8;
  sub_22322BFB0((uint64_t *)(v2 + 8), v2);
  *a1 = v2;
  v19 = v25;
  if (v25)
  {
    v20 = (unint64_t *)&v25->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_2232303D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x227684CE8](v1, 0x1093C402D7449D9);
  MEMORY[0x227684CE8](v2, 0x10A1C40503A8522);
  _Unwind_Resume(a1);
}

_QWORD *sub_223230490()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)qword_2540CA700);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(qword_2540CA700))
    return &qword_2540CA8A0;
  sub_223174DE4(__p, "%d [%t] %p %c: %m%n");
  sub_223230694(&qword_2540CA8A0, (__int128 *)__p);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))sub_22323073C, &qword_2540CA8A0, &dword_22314D000);
  __cxa_guard_release(qword_2540CA700);
  return &qword_2540CA8A0;
}

void sub_223230544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(qword_2540CA700);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(qword_2540CA700);
  _Unwind_Resume(a1);
}

_DWORD *sub_223230584(_DWORD *result, _DWORD *a2)
{
  *result = *a2;
  return result;
}

_QWORD *sub_223230590(_QWORD *a1, _QWORD *a2, unint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >> 60)
      sub_22316E078();
    v5 = 2 * a3;
    v6 = operator new(16 * a3);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    v7 = &a2[v5];
    do
    {
      v8 = a2[1];
      *v6 = *a2;
      v6[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v6 += 2;
    }
    while (a2 != v7);
    a1[1] = v6;
  }
  return a1;
}

void sub_223230634(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)v1)
    sub_224574B20((void **)(v1 + 8), *(char **)v1, (void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223230658@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 48))(&v4);
  *a2 = v4;
  return result;
}

_QWORD *sub_223230694(_QWORD *a1, __int128 *a2)
{
  _QWORD *v3;
  __int128 v4;
  unsigned __int8 v5;
  unsigned __int8 v7;

  *a1 = off_24EC26378;
  v3 = a1 + 1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_223197FA4(v3, *(void **)a2, *((_QWORD *)a2 + 1));
    v7 = atomic_load((unsigned __int8 *)&qword_2540CA720);
    if ((v7 & 1) != 0)
      return a1;
  }
  else
  {
    v4 = *a2;
    v3[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
    v5 = atomic_load((unsigned __int8 *)&qword_2540CA720);
    if ((v5 & 1) != 0)
      return a1;
  }
  if (!__cxa_guard_acquire(&qword_2540CA720))
    return a1;
  qword_2540CA718 = std::chrono::steady_clock::now().__d_.__rep_;
  __cxa_guard_release(&qword_2540CA720);
  return a1;
}

uint64_t sub_22323073C(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  *(_QWORD *)result = off_24EC26378;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void sub_223230788(uint64_t a1)
{
  *(_QWORD *)a1 = off_24EC26378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x227684CE8);
}

char *sub_2232307D4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_255792C60);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255792C60))
    return aPatternlayout;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], aPatternlayout, &dword_22314D000);
  __cxa_guard_release(&qword_255792C60);
  return aPatternlayout;
}

uint64_t sub_223230844(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  tm *v5;
  size_t v6;
  size_t v7;
  size_t v8;
  void **p_dst;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void **v13;
  uint64_t v14;
  _QWORD *v15;
  void **__dst;
  size_t v18;
  int64_t v19;
  tm __t;
  time_t v21;
  char __s[24];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v3 = *a2 / 1000 % 1000;
  if (v3 >= 0)
    v4 = *a2 / 1000 % 1000;
  else
    v4 = v3 + 1000;
  *(_QWORD *)&__t.tm_sec = *a2 - 1000 * v4;
  v21 = std::chrono::system_clock::to_time_t((const std::chrono::system_clock::time_point *)&__t);
  v5 = localtime_r(&v21, &__t);
  strcpy(__s, "yyyy.mm.dd.HH-MM.SS.fff");
  v6 = strlen(__s);
  strftime(__s, v6, "%Y-%m-%d %H:%M:%S", v5);
  v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    p_dst = (void **)operator new(v10 + 1);
    v18 = v8;
    v19 = v11 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_11;
  }
  HIBYTE(v19) = v7;
  p_dst = (void **)&__dst;
  if (v7)
LABEL_11:
    memcpy(p_dst, __s, v8);
  v12 = (_QWORD *)(a1 + 16);
  *((_BYTE *)p_dst + v8) = 0;
  if (v19 >= 0)
    v13 = (void **)&__dst;
  else
    v13 = __dst;
  if (v19 >= 0)
    v14 = HIBYTE(v19);
  else
    v14 = v18;
  v15 = sub_2231813E8(v12, (uint64_t)v13, v14);
  sub_2231813E8(v15, (uint64_t)",", 1);
  if (SHIBYTE(v19) < 0)
  {
    operator delete(__dst);
    if (v4 <= 9)
      goto LABEL_20;
  }
  else if (v4 <= 9)
  {
LABEL_20:
    sub_2231813E8(v12, (uint64_t)"00", 2);
    return std::ostream::operator<<();
  }
  if (v4 <= 0x63)
    sub_2231813E8(v12, (uint64_t)"0", 1);
  return std::ostream::operator<<();
}

void sub_223230A5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_223230A84()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_255792C60);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255792C60))
    return aPatternlayout;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], aPatternlayout, &dword_22314D000);
  __cxa_guard_release(&qword_255792C60);
  return aPatternlayout;
}

void sub_223230AF4(int a1, void **a2)
{
  unsigned __int8 v2;
  void **v3;
  int v4;
  void *v5[2];
  uint64_t v6;
  void *__p[2];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_2540CA710);
  if ((v2 & 1) == 0)
  {
    v3 = a2;
    v4 = __cxa_guard_acquire(&qword_2540CA710);
    a2 = v3;
    if (v4)
    {
      sub_2232307D4();
      if (byte_25578AC2F < 0)
      {
        sub_223197FA4(v5, *(void **)aPatternlayout, *(unint64_t *)&aPatternlayout[8]);
      }
      else
      {
        *(_OWORD *)v5 = *(_OWORD *)aPatternlayout;
        v6 = unk_25578AC28;
      }
      v8 = 0x700000000000000;
      *(_OWORD *)__p = *(_OWORD *)"ILayout";
      sub_22319BD1C(qword_2540CA7D8, (uint64_t)v5, 2uLL);
      if (SHIBYTE(v8) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v6) < 0)
        operator delete(v5[0]);
      __cxa_atexit((void (*)(void *))sub_22319BB48, qword_2540CA7D8, &dword_22314D000);
      __cxa_guard_release(&qword_2540CA710);
      a2 = v3;
    }
  }
  if (a2 != (void **)qword_2540CA7D8)
    sub_22323D3F4(a2, (void **)qword_2540CA7D8[0], unk_2540CA7E0, 0xAAAAAAAAAAAAAAABLL * ((unk_2540CA7E0 - qword_2540CA7D8[0]) >> 3));
}

void sub_223230C54(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CA710);
  _Unwind_Resume(a1);
}

void sub_223230C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      __cxa_guard_abort(&qword_2540CA710);
      _Unwind_Resume(a1);
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  __cxa_guard_abort(&qword_2540CA710);
  _Unwind_Resume(a1);
}

_BYTE *sub_223230CC4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _BYTE *result;

  v4 = (_QWORD *)operator new();
  *v4 = off_24EC26378;
  result = v4 + 1;
  if (*(char *)(a1 + 31) < 0)
  {
    result = sub_223197FA4(result, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)(a1 + 8);
    v4[3] = *(_QWORD *)(a1 + 24);
  }
  *a2 = v4;
  return result;
}

void sub_223230D50(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x1093C402D7449D9);
  _Unwind_Resume(a1);
}

uint64_t sub_223230D74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  size_t v10;
  int v11;
  uint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unsigned __int8 v18;
  const char *v19;
  uint64_t v20;
  int v21;
  size_t v22;
  void **p_dst;
  unint64_t v24;
  unint64_t v25;
  const void *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void **v30;
  uint64_t v31;
  size_t v32;
  unint64_t v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  _QWORD v41[2];
  _QWORD v42[3];
  const void *v43;
  uint64_t v44;
  const void *v45;
  unint64_t v46;
  void *__p;
  char v48;
  unint64_t v49;
  int v50;
  uint64_t v51;
  void **__dst;
  size_t v53;
  int64_t v54;

  sub_223195210((uint64_t)v41);
  if (*(char *)(a1 + 31) < 0)
  {
    v5 = *(_QWORD *)(a1 + 16);
    if (v5 < 2)
      goto LABEL_65;
    goto LABEL_5;
  }
  v5 = *(unsigned __int8 *)(a1 + 31);
  if (v5 >= 2)
  {
LABEL_5:
    v6 = 0;
    v7 = (_QWORD *)(a1 + 8);
    v8 = 1;
    while (1)
    {
      if (*(char *)(a1 + 31) < 0)
      {
        v11 = *(char *)(a1 + 31);
        if (*(_BYTE *)(*v7 + v6) != 37)
        {
LABEL_21:
          v16 = a1 + 8;
          if (v11 < 0)
            v16 = *v7;
          LOBYTE(__dst) = *(_BYTE *)(v16 + v6);
          sub_2231813E8(v42, (uint64_t)&__dst, 1);
          v8 = v6;
          goto LABEL_8;
        }
      }
      else
      {
        v11 = *(char *)(a1 + 31);
        if (*((_BYTE *)v7 + v6) != 37)
          goto LABEL_21;
      }
      v12 = a1 + 8;
      if (v11 < 0)
        v12 = *v7;
      v13 = (_BYTE *)(v12 + v8);
      if (v5 <= v8 + 1)
        v14 = v8 + 1;
      else
        v14 = v5;
      while (2)
      {
        switch(*v13)
        {
          case '%':
            v19 = "%";
            goto LABEL_33;
          case 'F':
            v9 = *(char **)(a2 + 32);
            v17 = strrchr(v9, 47);
            if (v17)
            {
              v9 = v17 + 1;
            }
            else
            {
              v27 = strrchr(v9, 92);
              if (v27)
                v9 = v27 + 1;
            }
            goto LABEL_7;
          case 'L':
            std::ostream::operator<<();
            goto LABEL_8;
          case 'c':
            v9 = *(char **)a2;
            goto LABEL_7;
          case 'd':
            sub_223230844((uint64_t)v41, (_QWORD *)(a2 + 16));
            goto LABEL_8;
          case 'f':
            v9 = *(char **)(a2 + 48);
            goto LABEL_7;
          case 'm':
            v20 = *(_QWORD *)(a2 + 56);
            v21 = *(_DWORD *)(v20 + 120);
            if ((v21 & 0x10) != 0)
            {
              v24 = *(_QWORD *)(v20 + 112);
              v25 = *(_QWORD *)(v20 + 72);
              if (v24 < v25)
              {
                *(_QWORD *)(v20 + 112) = v25;
                v24 = v25;
              }
              v26 = *(const void **)(v20 + 64);
              v22 = v24 - (_QWORD)v26;
              if (v24 - (unint64_t)v26 > 0x7FFFFFFFFFFFFFF7)
LABEL_83:
                sub_22316DBC0();
            }
            else
            {
              if ((v21 & 8) == 0)
              {
                v22 = 0;
                HIBYTE(v54) = 0;
                p_dst = (void **)&__dst;
                goto LABEL_55;
              }
              v26 = *(const void **)(v20 + 40);
              v22 = *(_QWORD *)(v20 + 56) - (_QWORD)v26;
              if (v22 > 0x7FFFFFFFFFFFFFF7)
                goto LABEL_83;
            }
            if (v22 >= 0x17)
            {
              v28 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v22 | 7) != 0x17)
                v28 = v22 | 7;
              v29 = v28 + 1;
              p_dst = (void **)operator new(v28 + 1);
              v53 = v22;
              v54 = v29 | 0x8000000000000000;
              __dst = p_dst;
LABEL_54:
              memmove(p_dst, v26, v22);
              goto LABEL_55;
            }
            HIBYTE(v54) = v22;
            p_dst = (void **)&__dst;
            if (v22)
              goto LABEL_54;
LABEL_55:
            *((_BYTE *)p_dst + v22) = 0;
            if (v54 >= 0)
              v30 = (void **)&__dst;
            else
              v30 = __dst;
            if (v54 >= 0)
              v31 = HIBYTE(v54);
            else
              v31 = v53;
            sub_2231813E8(v42, (uint64_t)v30, v31);
            if (SHIBYTE(v54) < 0)
              operator delete(__dst);
LABEL_8:
            v6 = v8 + 1;
            v8 += 2;
            if (v8 >= v5)
              goto LABEL_65;
            break;
          case 'n':
            v19 = "\n";
LABEL_33:
            sub_2231813E8(v42, (uint64_t)v19, 1);
            goto LABEL_8;
          case 'p':
            v9 = off_24EC263B0[*(unsigned int *)(a2 + 24)];
LABEL_7:
            v10 = strlen(v9);
            sub_2231813E8(v42, (uint64_t)v9, v10);
            goto LABEL_8;
          case 'r':
            v18 = atomic_load((unsigned __int8 *)&qword_2540CA720);
            if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_2540CA720))
            {
              qword_2540CA718 = std::chrono::steady_clock::now().__d_.__rep_;
              __cxa_guard_release(&qword_2540CA720);
            }
            std::ostream::operator<<();
            goto LABEL_8;
          case 't':
            pthread_self();
            std::ostream::operator<<();
            goto LABEL_8;
          default:
            v15 = a1 + 8;
            if (*(char *)(a1 + 31) < 0)
              v15 = *v7;
            v13 = (_BYTE *)(v15 + v8++ + 1);
            if (v8 < v5)
              continue;
            v8 = v14;
            goto LABEL_8;
        }
        break;
      }
    }
  }
LABEL_65:
  if ((v50 & 0x10) != 0)
  {
    v33 = v49;
    if (v49 < v46)
    {
      v49 = v46;
      v33 = v46;
    }
    v34 = v45;
    v32 = v33 - (_QWORD)v45;
    if (v33 - (unint64_t)v45 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_82;
  }
  else
  {
    if ((v50 & 8) == 0)
    {
      v32 = 0;
      a3[23] = 0;
      goto LABEL_78;
    }
    v34 = v43;
    v32 = v44 - (_QWORD)v43;
    if ((unint64_t)(v44 - (_QWORD)v43) > 0x7FFFFFFFFFFFFFF7)
LABEL_82:
      sub_22316DBC0();
  }
  if (v32 >= 0x17)
  {
    v35 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v32 | 7) != 0x17)
      v35 = v32 | 7;
    v36 = v35 + 1;
    v37 = operator new(v35 + 1);
    *((_QWORD *)a3 + 1) = v32;
    *((_QWORD *)a3 + 2) = v36 | 0x8000000000000000;
    *(_QWORD *)a3 = v37;
    a3 = v37;
    goto LABEL_77;
  }
  a3[23] = v32;
  if (v32)
LABEL_77:
    memmove(a3, v34, v32);
LABEL_78:
  a3[v32] = 0;
  v41[0] = *MEMORY[0x24BEDB7F0];
  v38 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v41 + *(_QWORD *)(v41[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v42[0] = v38;
  v42[1] = MEMORY[0x24BEDB848] + 16;
  if (v48 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x227684BE0](&v51);
}

void sub_2232312D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_223195348((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223231320(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  *(_QWORD *)result = off_24EC263F8;
  *(_QWORD *)(result + 8) = off_24EC26378;
  if (*(char *)(result + 39) < 0)
  {
    operator delete(*(void **)(result + 16));
    return v1;
  }
  return result;
}

void sub_223231374(uint64_t a1)
{
  *(_QWORD *)a1 = off_24EC263F8;
  *(_QWORD *)(a1 + 8) = off_24EC26378;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2232313C8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)(a1 + 8) + 48))(&v4, a1 + 8);
  *a2 = v4;
  return result;
}

uint64_t sub_223231404(uint64_t a1, _DWORD *a2)
{
  _QWORD *v4;
  _BYTE *v5;

  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = &off_24EC26430;
  v4 = (_QWORD *)operator new();
  sub_223230490();
  *v4 = off_24EC26378;
  v5 = v4 + 1;
  if (byte_2540CA8BF < 0)
  {
    sub_223197FA4(v5, (void *)xmmword_2540CA8A8, *((unint64_t *)&xmmword_2540CA8A8 + 1));
  }
  else
  {
    *(_OWORD *)v5 = xmmword_2540CA8A8;
    v4[3] = unk_2540CA8B8;
  }
  *(_QWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 24) = *a2;
  return a1;
}

void sub_2232314B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x1093C402D7449D9);
  _Unwind_Resume(a1);
}

_QWORD *sub_2232314DC(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24EC26430;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_223231520(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24EC26430;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

const char *sub_223231574()
{
  return "ConsoleAppender";
}

void sub_223231580(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3;
  int v4;
  unsigned __int8 v5;
  void *v6;
  uint64_t v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  void *p_p;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  int v14;
  void *__p;
  uint64_t v16;
  unsigned __int8 v17;

  if (((1 << (*(_DWORD *)(a2 + 24) - 1)) | *(_DWORD *)(a1 + 24)) == *(_DWORD *)(a1 + 24))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_2540CA728);
    if ((v3 & 1) == 0)
    {
      v13 = a1;
      v14 = __cxa_guard_acquire(&qword_2540CA728);
      a1 = v13;
      if (v14)
      {
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDB380], &stru_25578AC30, &dword_22314D000);
        __cxa_guard_release(&qword_2540CA728);
        a1 = v13;
      }
    }
    (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 40))(&__p, *(_QWORD *)(a1 + 16), a2);
    std::mutex::lock(&stru_25578AC30);
    v4 = *(_DWORD *)(a2 + 24);
    if ((v4 - 1) < 3)
    {
      v9 = atomic_load((unsigned __int8 *)&qword_2540CA730);
      if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_2540CA730))
      {
        qword_2540CA7B0 = MEMORY[0x24BEDB318];
        qword_2540CA7B8 = MEMORY[0x24BEDB310];
        __cxa_guard_release(&qword_2540CA730);
      }
      if ((v17 & 0x80u) == 0)
        p_p = &__p;
      else
        p_p = __p;
      if ((v17 & 0x80u) == 0)
        v11 = v17;
      else
        v11 = v16;
      sub_2231813E8((_QWORD *)qword_2540CA7B0, (uint64_t)p_p, v11);
      v12 = atomic_load((unsigned __int8 *)&qword_2540CA730);
      if ((v12 & 1) != 0)
        goto LABEL_22;
    }
    else
    {
      if ((v4 - 4) >= 3)
        goto LABEL_23;
      v5 = atomic_load((unsigned __int8 *)&qword_2540CA730);
      if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_2540CA730))
      {
        qword_2540CA7B0 = MEMORY[0x24BEDB318];
        qword_2540CA7B8 = MEMORY[0x24BEDB310];
        __cxa_guard_release(&qword_2540CA730);
      }
      if ((v17 & 0x80u) == 0)
        v6 = &__p;
      else
        v6 = __p;
      if ((v17 & 0x80u) == 0)
        v7 = v17;
      else
        v7 = v16;
      sub_2231813E8((_QWORD *)qword_2540CA7B8, (uint64_t)v6, v7);
      v8 = atomic_load((unsigned __int8 *)&qword_2540CA730);
      if ((v8 & 1) != 0)
      {
LABEL_22:
        std::ostream::flush();
LABEL_23:
        std::mutex::unlock(&stru_25578AC30);
        if ((char)v17 < 0)
          operator delete(__p);
        return;
      }
    }
    if (__cxa_guard_acquire(&qword_2540CA730))
    {
      qword_2540CA7B0 = MEMORY[0x24BEDB318];
      qword_2540CA7B8 = MEMORY[0x24BEDB310];
      __cxa_guard_release(&qword_2540CA730);
    }
    goto LABEL_22;
  }
}

void sub_2232317BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2232317EC(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _BYTE *v4;
  _QWORD *v5;

  *a1 = &off_24EC26460;
  v2 = operator new();
  *(_BYTE *)(v2 + 8) = 1;
  *(_QWORD *)v2 = &off_24EC26430;
  v3 = (_QWORD *)operator new();
  sub_223230490();
  *v3 = off_24EC26378;
  v4 = v3 + 1;
  if (byte_2540CA8BF < 0)
  {
    sub_223197FA4(v4, (void *)xmmword_2540CA8A8, *((unint64_t *)&xmmword_2540CA8A8 + 1));
  }
  else
  {
    *(_OWORD *)v4 = xmmword_2540CA8A8;
    v3[3] = unk_2540CA8B8;
  }
  *(_QWORD *)(v2 + 16) = v3;
  *(_DWORD *)(v2 + 24) = 63;
  a1[1] = v2;
  v5 = (_QWORD *)operator new();
  *v5 = &off_24EC26830;
  v5[1] = 0;
  v5[2] = 0;
  v5[3] = v2;
  a1[2] = v5;
  return a1;
}

void sub_2232318F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_223231910(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10A1C40503A8522);
  _Unwind_Resume(a1);
}

_QWORD *sub_223231954(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24EC26460;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2232319C8(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24EC26460;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223231A3C@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 16);
  *a2 = *(_QWORD *)(result + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

_QWORD *sub_223231A60(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24EC264A0;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_223231AD4(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24EC264A0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223231B48(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24EC264C0;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_223231BBC(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24EC264C0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

void sub_223231C34()
{
  JUMPOUT(0x227684CE8);
}

uint64_t *sub_223231C48()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CA740);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2540CA740))
    return &qword_2540CA738;
  qword_2540CA738 = (uint64_t)&off_24EC264E0;
  __cxa_guard_release(&qword_2540CA740);
  return &qword_2540CA738;
}

uint64_t sub_223231CA8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v4;
  int v5;
  uint64_t v7;
  _QWORD v8[2];
  _QWORD v9[51];
  _QWORD v10[20];

  v10[19] = *MEMORY[0x24BDAC8D0];
  sub_223231DE8(v8);
  if ((*((_BYTE *)&v9[2] + *(_QWORD *)(v8[0] - 24)) & 1) != 0)
  {
    v4 = 0;
    v5 = 2;
  }
  else if (v9[15])
  {
    std::istream::tellg();
    v4 = v7 & ~(v7 >> 63);
    v5 = 0;
    if ((*((_BYTE *)&v9[2] + *(_QWORD *)(v8[0] - 24)) & 5) != 0)
      *a3 = 3;
  }
  else
  {
    v4 = 0;
    v5 = 1;
  }
  *a3 = v5;
  v8[0] = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x2276844FC](v9);
  std::istream::~istream();
  MEMORY[0x227684BE0](v10);
  return v4;
}

void sub_223231DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_223231F0C(&a26);
  _Unwind_Resume(a1);
}

_QWORD *sub_223231DE8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x24BEDB838];
  v3 = MEMORY[0x24BEDB838] + 64;
  a1[53] = MEMORY[0x24BEDB838] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x2276844F0](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_223231EC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x227684BE0](v1 + 424);
  _Unwind_Resume(a1);
}

_QWORD *sub_223231F0C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB7E0];
  v3 = *MEMORY[0x24BEDB7E0];
  *a1 = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x2276844FC](a1 + 2);
  std::istream::~istream();
  MEMORY[0x227684BE0](a1 + 53);
  return a1;
}

void sub_223231F64(std::__shared_weak_count_vtbl **a1@<X3>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;

  v4 = (std::__shared_weak_count_vtbl *)operator new();
  sub_2232321A8(v4);
  v5 = (std::__shared_weak_count *)operator new();
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_24EC26A40;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = v4;
  if (!v4[3].~__shared_weak_count_0)
  {
    *a2 = 0;
    a2[1] = 0;
    v13 = v5;
    if (!v5)
      return;
    goto LABEL_13;
  }
  *a1 = v4;
  v7 = (_QWORD *)operator new();
  v8 = v7;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  *v7 = &off_24EC264C0;
  v7[1] = v4;
  v7[2] = v5;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  *a2 = v7;
  v11 = (_QWORD *)operator new();
  *v11 = &off_24EC26A90;
  v11[1] = 0;
  v11[2] = 0;
  v11[3] = v8;
  a2[1] = v11;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  v13 = v5;
  if (v5)
  {
LABEL_13:
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_223232128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  sub_223167354((uint64_t)&a9);
  sub_223167354((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_223232154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223232168(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_223232184(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10F1C4067547207);
  _Unwind_Resume(a1);
}

_QWORD *sub_2232321A8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x24BEDB840];
  v3 = MEMORY[0x24BEDB840] + 64;
  a1[52] = MEMORY[0x24BEDB840] + 64;
  v4 = a1 + 1;
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 1);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[52] = v3;
  MEMORY[0x2276844F0](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_223232284(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x227684BE0](v1 + 416);
  _Unwind_Resume(a1);
}

void sub_2232322C8(std::__shared_weak_count_vtbl **a1@<X2>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;

  v4 = (std::__shared_weak_count_vtbl *)operator new();
  sub_223231DE8(v4);
  v5 = (std::__shared_weak_count *)operator new();
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_24EC26AE0;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = v4;
  if (!v4[3].__on_zero_shared)
  {
    *a2 = 0;
    a2[1] = 0;
    v13 = v5;
    if (!v5)
      return;
    goto LABEL_13;
  }
  *a1 = v4;
  v7 = (_QWORD *)operator new();
  v8 = v7;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  *v7 = &off_24EC264A0;
  v7[1] = v4;
  v7[2] = v5;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  *a2 = v7;
  v11 = (_QWORD *)operator new();
  *v11 = &off_24EC26B30;
  v11[1] = 0;
  v11[2] = 0;
  v11[3] = v8;
  a2[1] = v11;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  v13 = v5;
  if (v5)
  {
LABEL_13:
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_223232480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  sub_223167354((uint64_t)&a9);
  sub_223167354((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_2232324AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232324C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_2232324DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10F1C40A09425BCLL);
  _Unwind_Resume(a1);
}

BOOL sub_223232500(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const std::__fs::filesystem::path *v3;
  const std::__fs::filesystem::path *v4;
  int v5;

  if (*(char *)(a2 + 23) >= 0)
    v3 = (const std::__fs::filesystem::path *)a2;
  else
    v3 = *(const std::__fs::filesystem::path **)a2;
  if (*(char *)(a3 + 23) >= 0)
    v4 = (const std::__fs::filesystem::path *)a3;
  else
    v4 = *(const std::__fs::filesystem::path **)a3;
  rename(v3, v4, (std::error_code *)a3);
  return v5 == 0;
}

BOOL sub_22323253C(uint64_t a1, uint64_t a2)
{
  const std::__fs::filesystem::path *v2;

  if (*(char *)(a2 + 23) >= 0)
    v2 = (const std::__fs::filesystem::path *)a2;
  else
    v2 = *(const std::__fs::filesystem::path **)a2;
  return !remove(v2, (std::error_code *)a2);
}

uint64_t sub_223232568@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  const void **v2;
  int v4;
  BOOL v5;
  const void *v6;
  size_t v7;
  uint64_t v8;
  size_t v9;
  int v10;
  size_t v11;
  int v12;
  const void *v13;
  size_t v14;
  void **p_dst;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  size_t v22;
  size_t v23;
  void *p_p;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  char v29;
  size_t v30;
  unint64_t v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  void *__p;
  size_t v39;
  int64_t v40;
  void **__dst;
  size_t v42;
  int64_t v43;
  _QWORD v44[2];
  _QWORD v45[3];
  const void *v46;
  uint64_t v47;
  const void *v48;
  unint64_t v49;
  void *v50;
  char v51;
  unint64_t v52;
  int v53;
  uint64_t v54;

  v2 = (const void **)a1;
  v4 = *(char *)(a1 + 23);
  v5 = v4 < 0;
  v6 = *(const void **)a1;
  if (v4 >= 0)
    v6 = (const void *)a1;
  v7 = *(unsigned __int8 *)(a1 + 23);
  if (v5)
    v7 = *(_QWORD *)(a1 + 8);
  v8 = (uint64_t)v6 - 1;
  v9 = v7;
  while (v9)
  {
    v10 = *(unsigned __int8 *)(v8 + v9--);
    if (v10 == 46)
    {
      if (v9 != -1)
        goto LABEL_10;
      break;
    }
  }
  v9 = v7;
LABEL_10:
  sub_223195210((uint64_t)v44);
  v11 = *((unsigned __int8 *)v2 + 23);
  v12 = (char)v11;
  if ((v11 & 0x80u) != 0)
    v11 = (size_t)v2[1];
  if (v12 >= 0)
    v13 = v2;
  else
    v13 = *v2;
  if (v11 >= v9)
    v14 = v9;
  else
    v14 = v11;
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v14 >= 0x17)
  {
    v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v16 = v14 | 7;
    v17 = v16 + 1;
    p_dst = (void **)operator new(v16 + 1);
    v42 = v14;
    v43 = v17 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_25;
  }
  HIBYTE(v43) = v14;
  p_dst = (void **)&__dst;
  if (v14)
LABEL_25:
    memmove(p_dst, v13, v14);
  *((_BYTE *)p_dst + v14) = 0;
  if (v43 >= 0)
    v18 = (void **)&__dst;
  else
    v18 = __dst;
  if (v43 >= 0)
    v19 = HIBYTE(v43);
  else
    v19 = v42;
  v20 = sub_2231813E8(v45, (uint64_t)v18, v19);
  sub_2231813E8(v20, (uint64_t)"_", 1);
  v21 = (_QWORD *)std::ostream::operator<<();
  if ((*((char *)v2 + 23) & 0x80000000) == 0)
  {
    v22 = *((unsigned __int8 *)v2 + 23);
    if (v9 <= v22)
    {
      v23 = v22 - v9;
      if (v22 - v9 <= 0x7FFFFFFFFFFFFFF7)
        goto LABEL_35;
LABEL_55:
      sub_22316DBC0();
    }
LABEL_74:
    sub_2231A39C0();
  }
  v22 = (size_t)v2[1];
  if (v22 < v9)
    goto LABEL_74;
  v2 = (const void **)*v2;
  v23 = v22 - v9;
  if (v22 - v9 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_55;
LABEL_35:
  if (v23 >= 0x17)
  {
    v25 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17)
      v25 = v23 | 7;
    v26 = v25 + 1;
    p_p = operator new(v25 + 1);
    v39 = v23;
    v40 = v26 | 0x8000000000000000;
    __p = p_p;
    goto LABEL_41;
  }
  HIBYTE(v40) = v23;
  p_p = &__p;
  if (v22 != v9)
LABEL_41:
    memmove(p_p, (char *)v2 + v9, v23);
  *((_BYTE *)p_p + v23) = 0;
  if (v40 >= 0)
    v27 = &__p;
  else
    v27 = __p;
  if (v40 >= 0)
    v28 = HIBYTE(v40);
  else
    v28 = v39;
  sub_2231813E8(v21, (uint64_t)v27, v28);
  if (SHIBYTE(v40) < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v43) & 0x80000000) == 0)
    {
LABEL_50:
      v29 = v53;
      if ((v53 & 0x10) == 0)
        goto LABEL_51;
LABEL_58:
      v31 = v52;
      if (v52 < v49)
      {
        v52 = v49;
        v31 = v49;
      }
      v32 = v48;
      v30 = v31 - (_QWORD)v48;
      if (v31 - (unint64_t)v48 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_72;
      goto LABEL_61;
    }
  }
  else if ((SHIBYTE(v43) & 0x80000000) == 0)
  {
    goto LABEL_50;
  }
  operator delete(__dst);
  v29 = v53;
  if ((v53 & 0x10) != 0)
    goto LABEL_58;
LABEL_51:
  if ((v29 & 8) == 0)
  {
    v30 = 0;
    a2[23] = 0;
    goto LABEL_68;
  }
  v32 = v46;
  v30 = v47 - (_QWORD)v46;
  if ((unint64_t)(v47 - (_QWORD)v46) > 0x7FFFFFFFFFFFFFF7)
LABEL_72:
    sub_22316DBC0();
LABEL_61:
  if (v30 >= 0x17)
  {
    v33 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30 | 7) != 0x17)
      v33 = v30 | 7;
    v34 = v33 + 1;
    v35 = operator new(v33 + 1);
    *((_QWORD *)a2 + 1) = v30;
    *((_QWORD *)a2 + 2) = v34 | 0x8000000000000000;
    *(_QWORD *)a2 = v35;
    a2 = v35;
    goto LABEL_67;
  }
  a2[23] = v30;
  if (v30)
LABEL_67:
    memmove(a2, v32, v30);
LABEL_68:
  a2[v30] = 0;
  v44[0] = *MEMORY[0x24BEDB7F0];
  v36 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v44 + *(_QWORD *)(v44[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v45[0] = v36;
  v45[1] = MEMORY[0x24BEDB848] + 16;
  if (v51 < 0)
    operator delete(v50);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x227684BE0](&v54);
}

void sub_223232904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      sub_223195348((uint64_t)&a22);
      _Unwind_Resume(a1);
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  sub_223195348((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t sub_223232998(uint64_t *a1)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 *v17;
  _OWORD *v18;
  unint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  std::mutex *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  std::mutex *v32;
  std::mutex *v33;
  uint64_t v34;
  void *__p[2];
  unint64_t v37;
  std::mutex *v38;
  void *v39[2];
  unint64_t v40;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CA748);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CA748))
  {
    qword_2540CA800 = 0;
    qword_2540CA7F8 = 0;
    qword_2540CA7F0 = (uint64_t)&qword_2540CA7F8;
    __cxa_atexit((void (*)(void *))sub_223232D34, &qword_2540CA7F0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CA748);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2540CA750);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2540CA750))
  {
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDB380], &stru_25578AC70, &dword_22314D000);
    __cxa_guard_release(&qword_2540CA750);
  }
  std::mutex::lock(&stru_25578AC70);
  v4 = *((unsigned __int8 *)a1 + 23);
  if ((v4 & 0x80u) == 0)
    v5 = (uint64_t *)((char *)a1 + v4);
  else
    v5 = (uint64_t *)(*a1 + a1[1]);
  if ((v4 & 0x80u) == 0)
    v6 = a1;
  else
    v6 = (uint64_t *)*a1;
  while (v5 != v6)
  {
    v8 = *((unsigned __int8 *)v5 - 1);
    v5 = (uint64_t *)((char *)v5 - 1);
    v7 = v8;
    if (v8 == 92 || v7 == 47)
    {
      v9 = (uint64_t *)((char *)v5 + 1);
      goto LABEL_14;
    }
  }
  v9 = v6;
LABEL_14:
  if ((v4 & 0x80u) == 0)
    v10 = *((unsigned __int8 *)a1 + 23);
  else
    v10 = a1[1];
  v11 = (char *)v6 + v10;
  v12 = (char *)v6 + v10 - (char *)v9;
  if (v12 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  if (v12 <= 0x16)
  {
    HIBYTE(v40) = (_BYTE)v6 + v10 - (_BYTE)v9;
    v13 = (char *)v39;
    if (v9 != (uint64_t *)v11)
      goto LABEL_20;
LABEL_29:
    v15 = v13;
    goto LABEL_32;
  }
  v21 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v12 | 7) != 0x17)
    v21 = v12 | 7;
  v22 = v21 + 1;
  v13 = (char *)operator new(v21 + 1);
  v39[1] = (void *)((char *)v6 + v10 - (char *)v9);
  v40 = v22 | 0x8000000000000000;
  v39[0] = v13;
  if (v9 == (uint64_t *)v11)
    goto LABEL_29;
LABEL_20:
  v14 = (char *)v6 + v10 - (char *)v9;
  if (v14 < 0x20 || (unint64_t)(v13 - (char *)v9) < 0x20)
  {
    v15 = v13;
    v16 = (char *)v9;
    do
    {
LABEL_31:
      v23 = *v16++;
      *v15++ = v23;
    }
    while (v16 != v11);
    goto LABEL_32;
  }
  v15 = &v13[v14 & 0xFFFFFFFFFFFFFFE0];
  v16 = (char *)v9 + (v14 & 0xFFFFFFFFFFFFFFE0);
  v17 = (__int128 *)(v9 + 2);
  v18 = v13 + 16;
  v19 = v14 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v20 = *v17;
    *(v18 - 1) = *(v17 - 1);
    *v18 = v20;
    v17 += 2;
    v18 += 2;
    v19 -= 32;
  }
  while (v19);
  if (v14 != (v14 & 0xFFFFFFFFFFFFFFE0))
    goto LABEL_31;
LABEL_32:
  *v15 = 0;
  v24 = sub_22324053C((uint64_t)&qword_2540CA7F0, (const void **)v39);
  if (v24 == &qword_2540CA7F8)
  {
    if (SHIBYTE(v40) < 0)
    {
      sub_223197FA4(__p, v39[0], (unint64_t)v39[1]);
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)v39;
      v37 = v40;
    }
    v38 = 0;
    v26 = sub_223240654((uint64_t **)&qword_2540CA7F0, (const void **)__p, (uint64_t)__p);
    v27 = v38;
    v38 = 0;
    if (v27)
    {
      std::mutex::~mutex(v27);
      MEMORY[0x227684CE8](v28, 0x1000C40FA0F61DDLL, v29, v30);
    }
    if (SHIBYTE(v37) < 0)
      operator delete(__p[0]);
    v31 = operator new();
    *(_OWORD *)(v31 + 8) = 0u;
    *(_OWORD *)(v31 + 24) = 0u;
    *(_OWORD *)(v31 + 40) = 0u;
    *(_QWORD *)(v31 + 56) = 0;
    v33 = (std::mutex *)v26[7];
    v25 = v26 + 7;
    v32 = v33;
    *(_QWORD *)v31 = 850045863;
    *v25 = v31;
    if (v33)
    {
      std::mutex::~mutex(v32);
      MEMORY[0x227684CE8]();
    }
  }
  else
  {
    v25 = v24 + 7;
  }
  v34 = *v25;
  if (SHIBYTE(v40) < 0)
    operator delete(v39[0]);
  std::mutex::unlock(&stru_25578AC70);
  return v34;
}

void sub_223232CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    std::mutex::unlock(&stru_25578AC70);
    _Unwind_Resume(a1);
  }
  std::mutex::unlock(&stru_25578AC70);
  _Unwind_Resume(a1);
}

uint64_t sub_223232D34(uint64_t a1)
{
  sub_2232404B8(a1, *(char **)(a1 + 8));
  return a1;
}

uint64_t sub_223232D5C(uint64_t a1)
{
  std::mutex *v2;

  v2 = *(std::mutex **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
  {
    std::mutex::~mutex(v2);
    MEMORY[0x227684CE8]();
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_223232DC0(uint64_t a1)
{
  char v1;
  unsigned int v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  void **v7;
  size_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  __int128 v17;
  unint64_t v18;
  void *v19[2];
  char v20;
  void *__p[2];
  unint64_t v22;

  if (!*(_DWORD *)(a1 + 72))
    goto LABEL_41;
  v3 = 0;
  v4 = a1 + 40;
  do
  {
    LODWORD(v19[0]) = 0;
    sub_223232568(v4, __p);
    (*(void (**)(_QWORD, void **, void **))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), __p, v19);
    if (!LODWORD(v19[0]))
    {
      v5 = 1;
      if ((SHIBYTE(v22) & 0x80000000) == 0)
        goto LABEL_9;
      goto LABEL_8;
    }
    if (LODWORD(v19[0]) == 1)
    {
      v1 = (*(uint64_t (**)(_QWORD, uint64_t, void **))(**(_QWORD **)(a1 + 80) + 40))(*(_QWORD *)(a1 + 80), v4, __p);
      v5 = 0;
      if ((SHIBYTE(v22) & 0x80000000) == 0)
        goto LABEL_9;
LABEL_8:
      operator delete(__p[0]);
      goto LABEL_9;
    }
    v1 = 0;
    v5 = 0;
    if (SHIBYTE(v22) < 0)
      goto LABEL_8;
LABEL_9:
    if ((v5 & 1) == 0)
      return v1 & 1;
    ++v3;
  }
  while (v3 < *(_DWORD *)(a1 + 72));
  v6 = *(_QWORD *)(a1 + 80);
  sub_223232568(v4, v19);
  if (v20 >= 0)
    v7 = v19;
  else
    v7 = (void **)v19[0];
  v8 = strlen((const char *)v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v10 = operator new(v11 + 1);
    __p[1] = v9;
    v22 = v12 | 0x8000000000000000;
    __p[0] = v10;
    goto LABEL_24;
  }
  HIBYTE(v22) = v8;
  v10 = __p;
  if (v8)
LABEL_24:
    memmove(v10, v7, (size_t)v9);
  *((_BYTE *)v9 + (_QWORD)v10) = 0;
  v13 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v6 + 48))(v6, __p);
  if (SHIBYTE(v22) < 0)
  {
    operator delete(__p[0]);
    if (v20 < 0)
      goto LABEL_40;
LABEL_27:
    if ((v13 & 1) != 0)
      goto LABEL_28;
LABEL_41:
    v1 = 0;
  }
  else
  {
    if ((v20 & 0x80000000) == 0)
      goto LABEL_27;
LABEL_40:
    operator delete(v19[0]);
    if ((v13 & 1) == 0)
      goto LABEL_41;
LABEL_28:
    sub_223232568(v4, __p);
    if (*(_DWORD *)(a1 + 72) >= 2u)
    {
      v14 = 0;
      v15 = 1;
      do
      {
        while (1)
        {
          sub_223232568(v4, v19);
          if ((*(unsigned int (**)(_QWORD, void **, void **))(**(_QWORD **)(a1 + 80) + 40))(*(_QWORD *)(a1 + 80), v19, __p))
          {
            ++v14;
            sub_223232568(v4, &v17);
            if (SHIBYTE(v22) < 0)
              operator delete(__p[0]);
            *(_OWORD *)__p = v17;
            v22 = v18;
          }
          if (v20 < 0)
            break;
          if (++v15 >= *(_DWORD *)(a1 + 72))
            goto LABEL_37;
        }
        operator delete(v19[0]);
        ++v15;
      }
      while (v15 < *(_DWORD *)(a1 + 72));
    }
LABEL_37:
    v1 = (*(uint64_t (**)(_QWORD, uint64_t, void **))(**(_QWORD **)(a1 + 80) + 40))(*(_QWORD *)(a1 + 80), v4, __p);
    if (SHIBYTE(v22) < 0)
      operator delete(__p[0]);
  }
  return v1 & 1;
}

void sub_223233098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223233104(uint64_t a1, __int128 *a2, _DWORD *a3)
{
  _QWORD *v6;
  _BYTE *v7;
  __int128 v8;
  _QWORD *v9;

  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_24EC26528;
  *(_QWORD *)(a1 + 16) = sub_223232998((uint64_t *)a2);
  v6 = (_QWORD *)operator new();
  sub_223230490();
  *v6 = off_24EC26378;
  v7 = v6 + 1;
  if (byte_2540CA8BF < 0)
  {
    sub_223197FA4(v7, (void *)xmmword_2540CA8A8, *((unint64_t *)&xmmword_2540CA8A8 + 1));
  }
  else
  {
    *(_OWORD *)v7 = xmmword_2540CA8A8;
    v6[3] = unk_2540CA8B8;
  }
  *(_QWORD *)(a1 + 24) = v6;
  *(_DWORD *)(a1 + 32) = *a3;
  if (*((char *)a2 + 23) < 0)
  {
    sub_223197FA4((_BYTE *)(a1 + 40), *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 40) = v8;
  }
  *(_QWORD *)(a1 + 64) = -1;
  *(_DWORD *)(a1 + 72) = 10;
  v9 = (_QWORD *)operator new();
  *v9 = &off_24EC264E0;
  *(_QWORD *)(a1 + 80) = v9;
  return a1;
}

void sub_22323322C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = 0;
  if (!v3)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

void sub_223233288(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x1093C402D7449D9);
  _Unwind_Resume(a1);
}

uint64_t sub_2232332AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_24EC26528;
  v2 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(char *)(a1 + 63) < 0)
  {
    operator delete(*(void **)(a1 + 40));
    v3 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (!v3)
      return a1;
    goto LABEL_5;
  }
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
LABEL_5:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_223233328(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_24EC26528;
  v2 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(char *)(a1 + 63) < 0)
  {
    operator delete(*(void **)(a1 + 40));
    v3 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (!v3)
      goto LABEL_8;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (!v3)
      goto LABEL_8;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
LABEL_8:
  JUMPOUT(0x227684CE8);
}

void sub_2232333B4(uint64_t a1, uint64_t a2)
{
  std::mutex *v3;
  unint64_t v4;
  void **v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  unsigned int v11;
  __int128 v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;

  if (((1 << (*(_DWORD *)(a2 + 24) - 1)) | *(_DWORD *)(a1 + 32)) == *(_DWORD *)(a1 + 32))
  {
    __p[0] = 0;
    __p[1] = 0;
    v15 = 0;
    (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)(a1 + 24) + 40))(&v12);
    v3 = *(std::mutex **)(a1 + 16);
    *(_OWORD *)__p = v12;
    v15 = v13;
    std::mutex::lock(v3);
    v11 = 0;
    v4 = (*(uint64_t (**)(_QWORD, uint64_t, unsigned int *))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), a1 + 40, &v11);
    if (v11 <= 1)
    {
      if (v4 > *(_QWORD *)(a1 + 64))
        sub_223232DC0(a1);
      v10 = 0;
      (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t, uint64_t, _QWORD **))(**(_QWORD **)(a1 + 80) + 24))(&v12, *(_QWORD *)(a1 + 80), a1 + 40, 1, &v10);
      if ((_QWORD)v12 && (*((_BYTE *)v10 + *(_QWORD *)(*v10 - 24) + 32) & 1) == 0)
      {
        if (v15 >= 0)
          v5 = __p;
        else
          v5 = (void **)__p[0];
        if (v15 >= 0)
          v6 = HIBYTE(v15);
        else
          v6 = (uint64_t)__p[1];
        sub_2231813E8(v10, (uint64_t)v5, v6);
      }
      v7 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
      if (*((_QWORD *)&v12 + 1))
      {
        v8 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    std::mutex::unlock(v3);
    if (SHIBYTE(v15) < 0)
      operator delete(__p[0]);
  }
}

void sub_223233540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::mutex *v20;

  sub_223167354((uint64_t)&a12);
  std::mutex::unlock(v20);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223233588(uint64_t a1, void **a2)
{
  std::mutex *v4;
  char v5;
  __int128 v6;
  void *v7;
  size_t v8;

  v4 = *(std::mutex **)(a1 + 16);
  std::mutex::lock(v4);
  if ((void **)(a1 + 40) != a2)
  {
    v5 = *((_BYTE *)a2 + 23);
    if (*(char *)(a1 + 63) < 0)
    {
      if (v5 >= 0)
        v7 = a2;
      else
        v7 = *a2;
      if (v5 >= 0)
        v8 = *((unsigned __int8 *)a2 + 23);
      else
        v8 = (size_t)a2[1];
      sub_22319C4B8((void **)(a1 + 40), v7, v8);
    }
    else if ((*((_BYTE *)a2 + 23) & 0x80) != 0)
    {
      sub_22319C3F4((_QWORD *)(a1 + 40), *a2, (size_t)a2[1]);
    }
    else
    {
      v6 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 56) = a2[2];
      *(_OWORD *)(a1 + 40) = v6;
    }
  }
  *(_QWORD *)(a1 + 16) = sub_223232998((uint64_t *)(a1 + 40));
  std::mutex::unlock(v4);
}

void sub_223233628(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_22323363C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_223233650(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  int v5;
  void *__p[2];
  char v7;

  *a1 = &off_24EC26558;
  v2 = operator new();
  v7 = 7;
  strcpy((char *)__p, "log.txt");
  v5 = 63;
  sub_223233104(v2, (__int128 *)__p, &v5);
  a1[1] = v2;
  v3 = (_QWORD *)operator new();
  *v3 = &off_24EC26B80;
  v3[1] = 0;
  v3[2] = 0;
  v3[3] = v2;
  a1[2] = v3;
  if (v7 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_22323372C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223233758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x227684CE8](v15, 0x10B3C40EA186015);
  _Unwind_Resume(a1);
}

_QWORD *sub_22323378C(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24EC26558;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_223233800(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24EC26558;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223233874@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 16);
  *a2 = *(_QWORD *)(result + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

char *sub_223233898@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  char v3;
  int64_t v4;
  char *v5;
  char *v6;
  size_t v7;
  char *v8;
  char *v9;
  std::string::size_type v10;

  if (result[23] < 0)
  {
    result = (char *)sub_223197FA4((_BYTE *)a2, *(void **)result, *((_QWORD *)result + 1));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *((_QWORD *)result + 2);
  }
LABEL_4:
  v3 = *(_BYTE *)(a2 + 23);
  if (v3 >= 0)
    v4 = *(unsigned __int8 *)(a2 + 23);
  else
    v4 = *(_QWORD *)(a2 + 8);
  if (v3 >= 0)
    v5 = (char *)a2;
  else
    v5 = *(char **)a2;
  if (v4 >= 1)
  {
    v6 = &v5[v4];
    v7 = v4;
    result = v5;
    do
    {
      result = (char *)memchr(result, 32, v7);
      if (!result)
        break;
      if (*result == 32)
      {
        if (result == v6 || result - v5 == -1)
          return result;
        v8 = v5;
        do
        {
          if (!v4)
            break;
          v9 = (char *)memchr(v8, 32, v4);
          if (!v9)
            break;
          if (*v9 == 32)
            goto LABEL_24;
          v8 = v9 + 1;
          v4 = v6 - v8;
        }
        while (v6 - v8 > 0);
        v9 = v6;
LABEL_24:
        if (v9 == v6)
          v10 = -1;
        else
          v10 = v9 - v5;
        result = (char *)std::string::replace((std::string *)a2, v10, 1uLL, "", 0);
        goto LABEL_4;
      }
      ++result;
      v7 = v6 - result;
    }
    while (v6 - result >= 1);
  }
  return result;
}

void sub_2232339BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

BOOL sub_2232339D8(_DWORD *a1, char *a2, uint64_t a3)
{
  void **v5;
  void **v6;
  char v7;
  int v8;
  __int128 v9;
  std::string::size_type size;
  std::string *p_p;
  size_t v12;
  size_t v14;
  int v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  std::string *v21;
  std::string::size_type v22;
  _QWORD *v23;
  _QWORD *v24;
  const std::locale::facet *v25;
  size_t v26;
  size_t v27;
  _BOOL8 v28;
  void **v30;
  _DWORD *v31;
  std::string __p;
  void *v33;
  void **v34;
  uint64_t v35;
  void *v36[2];
  char v37;
  std::locale v38;

  sub_223233898(a2, (uint64_t)v36);
  v33 = 0;
  v34 = 0;
  v35 = 0;
  sub_223233E98((__int128 *)v36, 0x2Cu, (uint64_t)&v33);
  v6 = (void **)v33;
  v5 = v34;
  if (v33 == v34)
  {
    v28 = 0;
    if (!v33)
      goto LABEL_77;
  }
  else
  {
    v31 = a1;
    v7 = 0;
    v8 = 0;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_223197FA4(&__p, *v6, (unint64_t)v6[1]);
      }
      else
      {
        v9 = *(_OWORD *)v6;
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v6[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (size >= 4)
        v12 = 4;
      else
        v12 = size;
      if (!memcmp(p_p, "NONE", v12) && size == 4)
      {
        v17 = 0;
      }
      else
      {
        if (size >= 5)
          v14 = 5;
        else
          v14 = size;
        if (!memcmp(p_p, "TRACE", v14) && size == 5)
        {
          v17 = 1;
        }
        else if (!memcmp(p_p, "DEBUG", v14) && size == 5)
        {
          v17 = 2;
        }
        else if (!memcmp(p_p, "INFO", v12) && size == 4)
        {
          v17 = 4;
        }
        else if (!memcmp(p_p, "WARN", v12) && size == 4)
        {
          v17 = 8;
        }
        else if (!memcmp(p_p, "ERROR", v14) && size == 5)
        {
          v17 = 16;
        }
        else if (!memcmp(p_p, "FATAL", v14) && size == 5)
        {
          v17 = 32;
        }
        else
        {
          if (size >= 0xE)
            v26 = 14;
          else
            v26 = size;
          if (!memcmp(p_p, "ERROR_TO_FATAL", v26) && size == 14)
          {
            v17 = 48;
          }
          else
          {
            if (size >= 0xD)
              v27 = 13;
            else
              v27 = size;
            if (!memcmp(p_p, "WARN_TO_FATAL", v27) && size == 13)
            {
              v17 = 56;
            }
            else if (!memcmp(p_p, "INFO_TO_FATAL", v27) && size == 13)
            {
              v17 = 60;
            }
            else if (!std::string::compare(&__p, "DEBUG_TO_FATAL"))
            {
              v17 = 62;
            }
            else if (!std::string::compare(&__p, "TRACE_TO_FATAL"))
            {
              v17 = 63;
            }
            else if (!std::string::compare(&__p, "ALL"))
            {
              v17 = 63;
            }
            else
            {
              v7 = 1;
              v17 = 0;
            }
          }
        }
      }
      v18 = sub_22323400C(v7 != 0, a3);
      v19 = sub_2231813E8(v18, (uint64_t)"tlog::Configurator: ", 20);
      v20 = sub_2231813E8(v19, (uint64_t)"Invalid log level filter token ", 31);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &__p;
      else
        v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v22 = __p.__r_.__value_.__l.__size_;
      v23 = sub_2231813E8(v20, (uint64_t)v21, v22);
      v24 = sub_2231813E8(v23, (uint64_t)")", 1);
      std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(_QWORD *)(*v24 - 24)));
      v25 = std::locale::use_facet(&v38, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
      std::locale::~locale(&v38);
      std::ostream::put();
      std::ostream::flush();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v8 |= v17;
      v6 += 3;
    }
    while (v6 != v5);
    *v31 = v8;
    v28 = v7 == 0;
    v6 = (void **)v33;
    if (!v33)
    {
LABEL_77:
      if ((v37 & 0x80000000) == 0)
        return v28;
LABEL_82:
      operator delete(v36[0]);
      return v28;
    }
  }
  v30 = v34;
  if (v34 == v6)
  {
    v34 = v6;
    operator delete(v6);
    if ((v37 & 0x80000000) == 0)
      return v28;
    goto LABEL_82;
  }
  do
  {
    if (*((char *)v30 - 1) < 0)
      operator delete(*(v30 - 3));
    v30 -= 3;
  }
  while (v30 != v6);
  v34 = v6;
  operator delete(v33);
  if (v37 < 0)
    goto LABEL_82;
  return v28;
}

void sub_223233E20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,std::locale a26)
{
  sub_22319BB48(&a17);
  if ((a25 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_223233E98(__int128 *a1, unsigned __int8 a2, uint64_t a3)
{
  __int128 v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  void *__p[2];
  uint64_t v11;
  _QWORD v12[13];
  char v13;
  uint64_t v14;

  sub_22322E364((uint64_t)v12, a1, 24);
  __p[0] = 0;
  __p[1] = 0;
  v11 = 0;
  while (1)
  {
    v6 = sub_22322E508(v12, (uint64_t)__p, a2);
    if ((*((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 32) & 5) != 0)
      break;
    v7 = *(_QWORD *)(a3 + 8);
    if (v7 < *(_QWORD *)(a3 + 16))
    {
      if (SHIBYTE(v11) < 0)
      {
        sub_223197FA4(*(_BYTE **)(a3 + 8), __p[0], (unint64_t)__p[1]);
      }
      else
      {
        v5 = *(_OWORD *)__p;
        *(_QWORD *)(v7 + 16) = v11;
        *(_OWORD *)v7 = v5;
      }
      *(_QWORD *)(a3 + 8) = v7 + 24;
      *(_QWORD *)(a3 + 8) = v7 + 24;
    }
    else
    {
      *(_QWORD *)(a3 + 8) = sub_22323C290((char **)a3, (uint64_t)__p);
    }
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__p[0]);
  v12[0] = *MEMORY[0x24BEDB7F0];
  v8 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v12[2] = v8;
  v12[3] = MEMORY[0x24BEDB848] + 16;
  if (v13 < 0)
    operator delete((void *)v12[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x227684BE0](&v14);
}

void sub_223233FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v15 + 8) = v16;
  if (a14 < 0)
    operator delete(__p);
  sub_223195348((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void *sub_22323400C(int a1, uint64_t a2)
{
  unsigned __int8 v4;

  v4 = atomic_load((unsigned __int8 *)&qword_2540CA758);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2540CA758))
  {
    sub_223195210((uint64_t)&unk_2540CA980);
    __cxa_atexit((void (*)(void *))sub_223195348, &unk_2540CA980, &dword_22314D000);
    __cxa_guard_release(&qword_2540CA758);
  }
  if (byte_2540CA9EF < 0)
    operator delete((void *)qword_2540CA9D8);
  qword_2540CA9D8 = 0;
  byte_2540CA9EF = 0;
  sub_2231B5488((uint64_t)&unk_2540CA998);
  if (a1)
    return (void *)a2;
  else
    return &unk_2540CA990;
}

void sub_2232340C0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CA758);
  _Unwind_Resume(a1);
}

_QWORD *sub_2232340D8(_QWORD *a1)
{
  const std::locale::facet *v2;
  std::locale v4;

  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v2 = std::locale::use_facet(&v4, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_223234154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_223234168(_QWORD *a1, const char *a2, uint64_t a3, const char *a4)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  size_t v9;
  _QWORD *v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  std::locale v16;

  sub_2231813E8(a1, (uint64_t)"tlog::Configurator (line ", 25);
  v6 = (_QWORD *)std::ostream::operator<<();
  v7 = sub_2231813E8(v6, (uint64_t)"): ", 3);
  v8 = sub_2231813E8(v7, (uint64_t)"Invalid expression (unknown left identificator ", 47);
  if (a2[23] < 0)
  {
    if (*((_QWORD *)a2 + 1))
      a2 = *(const char **)a2;
    else
      a2 = "{empty string}";
  }
  else if (!a2[23])
  {
    a2 = "{empty string}";
  }
  v9 = strlen(a2);
  v10 = sub_2231813E8(v8, (uint64_t)a2, v9);
  v11 = sub_2231813E8(v10, (uint64_t)") ", 2);
  if (!a4)
    a4 = "";
  v12 = strlen(a4);
  v13 = sub_2231813E8(v11, (uint64_t)a4, v12);
  std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(_QWORD *)(*v13 - 24)));
  v14 = std::locale::use_facet(&v16, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
  std::locale::~locale(&v16);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_2232342B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_2232342C8(_QWORD *a1, const char *a2, uint64_t a3, const char *a4)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  size_t v9;
  _QWORD *v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  std::locale v16;

  sub_2231813E8(a1, (uint64_t)"tlog::Configurator (line ", 25);
  v6 = (_QWORD *)std::ostream::operator<<();
  v7 = sub_2231813E8(v6, (uint64_t)"): ", 3);
  v8 = sub_2231813E8(v7, (uint64_t)"Invalid expression (unknown right identificator ", 48);
  if (a2[23] < 0)
  {
    if (*((_QWORD *)a2 + 1))
      a2 = *(const char **)a2;
    else
      a2 = "{empty string}";
  }
  else if (!a2[23])
  {
    a2 = "{empty string}";
  }
  v9 = strlen(a2);
  v10 = sub_2231813E8(v8, (uint64_t)a2, v9);
  v11 = sub_2231813E8(v10, (uint64_t)") ", 2);
  if (!a4)
    a4 = "";
  v12 = strlen(a4);
  v13 = sub_2231813E8(v11, (uint64_t)a4, v12);
  std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(_QWORD *)(*v13 - 24)));
  v14 = std::locale::use_facet(&v16, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
  std::locale::~locale(&v16);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_223234414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_223234428(std::string *this, uint64_t *a2)
{
  std::string *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  uint64_t *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    this->__r_.__value_.__l.__size_ = 0;
    v4 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = 0;
    v4 = this;
  }
  v5 = 0;
  v4->__r_.__value_.__s.__data_[0] = 0;
  v6 = *a2;
  v7 = a2[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v7 - *a2) >> 3) >= 3)
  {
    v5 = 0;
    v8 = 2;
    v9 = 1;
    do
    {
      v13 = (uint64_t *)(v6 + 24 * v8);
      v14 = *((char *)v13 + 23);
      if (v14 < 0)
      {
        v15 = v13[1];
        if (v15)
        {
          v13 = (uint64_t *)*v13;
LABEL_19:
          v16 = 0;
          while (1)
          {
            v17 = *((unsigned __int8 *)v13 + v16);
            if (v17 > 0x3F || ((1 << v17) & 0x100002200) == 0)
              break;
            if (v15 == ++v16)
              goto LABEL_13;
          }
          if (v16 != -1)
          {
            if ((v9 & 1) == 0)
            {
              std::string::append(this, ".", 1uLL);
              v6 = *a2;
              LOBYTE(v14) = *(_BYTE *)(*a2 + 24 * v8 + 23);
            }
            v10 = v6 + 24 * v8;
            if ((v14 & 0x80u) == 0)
              v11 = (const std::string::value_type *)v10;
            else
              v11 = *(const std::string::value_type **)v10;
            if ((v14 & 0x80u) == 0)
              v12 = v14;
            else
              v12 = *(_QWORD *)(v10 + 8);
            std::string::append(this, v11, v12);
            v9 = 0;
            v6 = *a2;
            v7 = a2[1];
            v5 = 1;
          }
        }
      }
      else if (*((_BYTE *)v13 + 23))
      {
        v15 = *((unsigned __int8 *)v13 + 23);
        goto LABEL_19;
      }
LABEL_13:
      ++v8;
    }
    while (v8 < 0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 3));
  }
  return v5 & 1;
}

uint64_t sub_223234594(uint64_t **a1, uint64_t a2, uint64_t *a3, uint64_t a4, char *a5, _QWORD *a6)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __darwin_ct_rune_t v18;
  __darwin_ct_rune_t v19;
  __darwin_ct_rune_t v20;
  __darwin_ct_rune_t v21;
  __darwin_ct_rune_t v22;
  __darwin_ct_rune_t v23;
  void **v24;
  int v25;
  unint64_t v26;
  size_t v27;
  size_t v29;
  std::__shared_weak_count *v32;
  int v33;
  uint64_t v34;
  int *v35;
  unint64_t *v36;
  unint64_t *v37;
  uint64_t **v38;
  uint64_t **v39;
  int v40;
  unint64_t v41;
  const void *v42;
  size_t v43;
  __int128 v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  void **v48;
  void *v49;
  std::string v51;
  __int128 __p;
  unint64_t v53;
  uint64_t *v54;
  _QWORD *v55;
  int *v56;
  std::__shared_weak_count *v57;
  void *v58;
  char *v59;
  uint64_t v60;
  std::string v61;

  *((_BYTE *)&v61.__r_.__value_.__s + 23) = 0;
  v61.__r_.__value_.__s.__data_[0] = 0;
  v10 = *a3;
  v11 = *(unsigned __int8 *)(*a3 + 47);
  v12 = (char)v11;
  if ((v11 & 0x80u) != 0)
    v11 = *(_QWORD *)(*a3 + 32);
  if (v11 == 6)
  {
    v16 = *(_QWORD *)(v10 + 24);
    v14 = v10 + 24;
    v15 = v16;
    v17 = (char *)(v12 >= 0 ? v14 : v15);
    v18 = __tolower(*v17);
    if (v18 == __tolower(108))
    {
      v19 = __tolower(v17[1]);
      if (v19 == __tolower(111))
      {
        v20 = __tolower(v17[2]);
        if (v20 == __tolower(103))
        {
          v21 = __tolower(v17[3]);
          if (v21 == __tolower(103))
          {
            v22 = __tolower(v17[4]);
            if (v22 == __tolower(101))
            {
              v23 = __tolower(v17[5]);
              if (v23 == __tolower(114))
                sub_223234428(&v61, a3);
            }
          }
        }
      }
    }
  }
  sub_223233898(a5, (uint64_t)&v51);
  if (a5[23] < 0)
    operator delete(*(void **)a5);
  *(std::string *)a5 = v51;
  v58 = 0;
  v59 = 0;
  v60 = 0;
  sub_223233E98((__int128 *)a5, 0x2Cu, (uint64_t)&v58);
  v24 = (void **)v58;
  if (v58 == v59)
  {
    v34 = 0;
    if (v58)
      goto LABEL_95;
    goto LABEL_102;
  }
  v25 = *((char *)v58 + 23);
  if (v25 >= 0)
    v26 = *((unsigned __int8 *)v58 + 23);
  else
    v26 = *((_QWORD *)v58 + 1);
  if (v25 < 0)
    v24 = *(void ***)v58;
  if (v26 >= 4)
    v27 = 4;
  else
    v27 = v26;
  if (!memcmp(v24, "NONE", v27) && v26 == 4)
  {
    v32 = 0;
    v35 = 0;
  }
  else
  {
    if (v26 >= 5)
      v29 = 5;
    else
      v29 = v26;
    if (!memcmp(v24, "TRACE", v29) && v26 == 5)
    {
      v32 = (std::__shared_weak_count *)operator new(0x20uLL);
      v32->__shared_owners_ = 0;
      v32->__shared_weak_owners_ = 0;
      v32->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC26790;
      v33 = 1;
    }
    else if (!memcmp(v24, "DEBUG", v29) && v26 == 5)
    {
      v32 = (std::__shared_weak_count *)operator new(0x20uLL);
      v32->__shared_owners_ = 0;
      v32->__shared_weak_owners_ = 0;
      v32->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC26790;
      v33 = 2;
    }
    else if (!memcmp(v24, "INFO", v27) && v26 == 4)
    {
      v32 = (std::__shared_weak_count *)operator new(0x20uLL);
      v32->__shared_owners_ = 0;
      v32->__shared_weak_owners_ = 0;
      v32->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC26790;
      v33 = 3;
    }
    else if (!memcmp(v24, "WARN", v27) && v26 == 4)
    {
      v32 = (std::__shared_weak_count *)operator new(0x20uLL);
      v32->__shared_owners_ = 0;
      v32->__shared_weak_owners_ = 0;
      v32->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC26790;
      v33 = 4;
    }
    else if (!memcmp(v24, "ERROR", v29) && v26 == 5)
    {
      v32 = (std::__shared_weak_count *)operator new(0x20uLL);
      v32->__shared_owners_ = 0;
      v32->__shared_weak_owners_ = 0;
      v32->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC26790;
      v33 = 5;
    }
    else
    {
      if (memcmp(v24, "FATAL", v29) || v26 != 5)
      {
        v56 = 0;
        v57 = 0;
        sub_2232342C8(a6, a5, a2, "{requires log level (NONE, TRACE, DEBUG, INFO, WARN, ERROR, FATAL) as first argument}");
        v34 = 0;
        v24 = (void **)v58;
        if (v58)
          goto LABEL_95;
        goto LABEL_102;
      }
      v32 = (std::__shared_weak_count *)operator new(0x20uLL);
      v32->__shared_owners_ = 0;
      v32->__shared_weak_owners_ = 0;
      v32->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC26790;
      v33 = 6;
    }
    LODWORD(v32[1].__vftable) = v33;
    v35 = (int *)&v32[1];
  }
  v56 = v35;
  v57 = v32;
  v54 = *a1;
  sub_22322D064(&v54, (uint64_t)&v61, (uint64_t *)&v55);
  if (v35)
    sub_22322F3AC(v55, *v35);
  else
    sub_22322F8C8(v55);
  v36 = (unint64_t *)v59;
  v37 = (unint64_t *)((char *)v58 + 24);
  if ((char *)v58 + 24 >= v59)
  {
LABEL_87:
    v34 = 1;
    if (v32)
      goto LABEL_90;
    goto LABEL_94;
  }
  v38 = a1 + 14;
  v39 = a1 + 17;
  while (1)
  {
    v40 = *((char *)v37 + 23);
    if (v40 < 0)
      break;
    if (!*((_BYTE *)v37 + 23))
      goto LABEL_89;
    v41 = *((unsigned __int8 *)v37 + 23);
    v42 = v37;
LABEL_70:
    if (v41 >= 5)
      v43 = 5;
    else
      v43 = v41;
    if (!memcmp(v42, "CLEAR", v43) && v41 == 5)
    {
      sub_223240B68(v39, (const void **)&v61.__r_.__value_.__l.__data_, (uint64_t)&v61);
      goto LABEL_64;
    }
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_223197FA4(&v51, v61.__r_.__value_.__l.__data_, v61.__r_.__value_.__l.__size_);
      if ((*((_BYTE *)v37 + 23) & 0x80) == 0)
      {
LABEL_79:
        v45 = *(_OWORD *)v37;
        v53 = v37[2];
        __p = v45;
        goto LABEL_82;
      }
    }
    else
    {
      v51 = v61;
      if ((v40 & 0x80) == 0)
        goto LABEL_79;
    }
    sub_223197FA4(&__p, (void *)*v37, v37[1]);
LABEL_82:
    sub_223240D00(v38, (uint64_t)&v51);
    if (SHIBYTE(v53) < 0)
    {
      operator delete((void *)__p);
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
LABEL_86:
        operator delete(v51.__r_.__value_.__l.__data_);
    }
    else if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    {
      goto LABEL_86;
    }
LABEL_64:
    v37 += 3;
    if (v37 >= v36)
      goto LABEL_87;
  }
  v41 = v37[1];
  if (v41)
  {
    v42 = (const void *)*v37;
    goto LABEL_70;
  }
LABEL_89:
  v34 = 0;
  if (v32)
  {
LABEL_90:
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v47 = __ldaxr(p_shared_owners);
    while (__stlxr(v47 - 1, p_shared_owners));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
LABEL_94:
  v24 = (void **)v58;
  if (v58)
  {
LABEL_95:
    v48 = (void **)v59;
    v49 = v24;
    if (v59 != (char *)v24)
    {
      do
      {
        if (*((char *)v48 - 1) < 0)
          operator delete(*(v48 - 3));
        v48 -= 3;
      }
      while (v48 != v24);
      v49 = v58;
    }
    v59 = (char *)v24;
    operator delete(v49);
  }
LABEL_102:
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
  return v34;
}

void sub_223234B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_223167354((uint64_t)&a20);
  sub_22319BB48(&a22);
  if (a30 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_223234BC4(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

BOOL sub_223234C1C(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4, _QWORD *a5, char *a6, uint64_t a7)
{
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  void **v20;
  uint64_t v21;
  _QWORD *v22;
  __int128 *v23;
  __int128 *v24;
  __int128 v25;
  std::string::size_type size;
  int v27;
  size_t v28;
  std::string::size_type v29;
  std::string *p_p;
  std::string *v31;
  std::string *v32;
  std::string::size_type v33;
  uint64_t v34;
  uint64_t v35;
  std::string::size_type v36;
  std::string::size_type v37;
  __int128 v38;
  int v39;
  size_t v40;
  int v41;
  size_t v42;
  unint64_t v43;
  char *v44;
  std::string *v45;
  char *v46;
  std::string *v47;
  _OWORD *v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  size_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  std::string *v58;
  const std::string::value_type *v59;
  void *v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t *v64;
  __int128 *v65;
  __int128 *v66;
  __int128 v67;
  std::string::size_type v68;
  int v69;
  size_t v70;
  unint64_t v71;
  _BYTE *v72;
  void **v73;
  const std::string::value_type *v74;
  std::string::size_type v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  uint64_t v86;
  unint64_t *p_shared_owners;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  void **v115;
  uint64_t v116;
  _BOOL8 v117;
  void *v118;
  std::string::size_type v119;
  std::string::size_type v120;
  std::string::size_type v121;
  std::string::size_type v122;
  std::string *v123;
  std::string::size_type v124;
  std::string::size_type v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  _QWORD *v131;
  _QWORD *v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  _QWORD *v137;
  _QWORD *v138;
  std::string *v139;
  std::string::size_type v140;
  _QWORD *v141;
  _QWORD *v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  _QWORD *v148;
  const std::locale::facet *v149;
  _QWORD *v150;
  _QWORD *v151;
  _QWORD *v152;
  _QWORD *v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  _QWORD *v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  _QWORD *v164;
  const std::locale::facet *v165;
  _QWORD *v166;
  _QWORD *v167;
  _QWORD *v168;
  _QWORD *v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  _QWORD *v174;
  std::string *v175;
  std::string::size_type v176;
  _QWORD *v177;
  _QWORD *v178;
  uint64_t v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  _QWORD *v184;
  const std::locale::facet *v185;
  char *v186;
  char *v187;
  char *v188;
  std::string::size_type v189;
  std::string::size_type v190;
  void *v191;
  __int128 **v193;
  uint64_t v194;
  _QWORD *v195;
  uint64_t *v196;
  uint64_t *v197;
  char *v198;
  uint64_t *v199;
  uint64_t v200;
  void *v202;
  std::string::size_type v203;
  int64_t v204;
  void *__dst[2];
  int64_t v206;
  std::string v207;
  std::string v208;
  uint64_t v209;
  std::__shared_weak_count *v210;
  uint64_t v211;
  std::__shared_weak_count *v212;
  uint64_t v213;
  std::__shared_weak_count *v214;
  uint64_t v215;
  std::__shared_weak_count *v216;
  std::string __p;
  uint64_t v218;
  std::__shared_weak_count *v219;
  uint64_t v220;
  std::__shared_weak_count *v221;
  std::string v222;
  std::string v223;
  void *v224[2];
  unsigned __int8 v225;
  void *v226[2];
  char v227;
  char *v228;
  char *v229;
  unint64_t v230;
  void **v231;
  uint64_t v232;

  v232 = *MEMORY[0x24BDAC8D0];
  sub_223233898(a6, (uint64_t)v226);
  sub_223235FF8(v226, v224);
  v12 = sub_223240ED0((_QWORD *)(a2 + 48), (uint64_t)v224);
  if (v12)
  {
    sub_223235FF8(a5, &v223);
    v13 = a2 + 160;
    v14 = sub_22324053C(a2 + 160, (const void **)&v223.__r_.__value_.__l.__data_);
    v199 = v12;
    v15 = (uint64_t *)(a2 + 168);
    v16 = sub_22323400C(v15 != v14, a7);
    sub_2231813E8(v16, (uint64_t)"tlog::Configurator (line ", 25);
    v17 = (_QWORD *)std::ostream::operator<<();
    v18 = sub_2231813E8(v17, (uint64_t)"): ", 3);
    v19 = sub_2231813E8(v18, (uint64_t)"Tried to create parameter object ", 33);
    if ((v225 & 0x80u) == 0)
      v20 = v224;
    else
      v20 = (void **)v224[0];
    if ((v225 & 0x80u) == 0)
      v21 = v225;
    else
      v21 = (uint64_t)v224[1];
    v22 = sub_2231813E8(v19, (uint64_t)v20, v21);
    sub_2231813E8(v22, (uint64_t)"But parameter object has already been created before. Second definition ignored.", 80);
    if (v15 != v14)
      goto LABEL_221;
    v194 = v13;
    v196 = v15;
    v197 = v14;
    memset(&v222, 0, sizeof(v222));
    v23 = *a4;
    v24 = a4[1];
    if (*a4 != v24)
    {
      while (1)
      {
        if (*((char *)v23 + 23) < 0)
        {
          sub_223197FA4(&v207, *(void **)v23, *((_QWORD *)v23 + 1));
        }
        else
        {
          v25 = *v23;
          v207.__r_.__value_.__r.__words[2] = *((_QWORD *)v23 + 2);
          *(_OWORD *)&v207.__r_.__value_.__l.__data_ = v25;
        }
        if ((v222.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v222.__r_.__value_.__r.__words[2]);
        else
          size = v222.__r_.__value_.__l.__size_;
        v27 = SHIBYTE(v207.__r_.__value_.__r.__words[2]);
        if ((v207.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v28 = HIBYTE(v207.__r_.__value_.__r.__words[2]);
        else
          v28 = v207.__r_.__value_.__l.__size_;
        if (size)
          v29 = v28 + 1;
        else
          v29 = v28;
        if (v29 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v29 > 0x16)
          break;
        memset(&__p, 0, sizeof(__p));
        p_p = &__p;
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = v29;
        if (size)
          goto LABEL_28;
LABEL_29:
        if (v28)
        {
          if (v27 >= 0)
            v31 = &v207;
          else
            v31 = (std::string *)v207.__r_.__value_.__r.__words[0];
          memmove((char *)p_p + (size != 0), v31, v28);
        }
        p_p->__r_.__value_.__s.__data_[(size != 0) + v28] = 0;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v32 = &__p;
        else
          v32 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v33 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v33 = __p.__r_.__value_.__l.__size_;
        std::string::append(&v222, (const std::string::value_type *)v32, v33);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v207.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_12;
LABEL_42:
          operator delete(v207.__r_.__value_.__l.__data_);
          v23 = (__int128 *)((char *)v23 + 24);
          if (v23 == v24)
            goto LABEL_148;
        }
        else
        {
          if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_42;
LABEL_12:
          v23 = (__int128 *)((char *)v23 + 24);
          if (v23 == v24)
            goto LABEL_148;
        }
      }
      v34 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v29 | 7) != 0x17)
        v34 = v29 | 7;
      v35 = v34 + 1;
      p_p = (std::string *)operator new(v34 + 1);
      __p.__r_.__value_.__l.__size_ = v29;
      __p.__r_.__value_.__r.__words[2] = v35 | 0x8000000000000000;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
      if (!size)
        goto LABEL_29;
LABEL_28:
      memcpy(p_p, ".", size != 0);
      goto LABEL_29;
    }
LABEL_148:
    v82 = (uint64_t *)v199[8];
    if (!v82)
    {
      v231 = 0;
      goto LABEL_327;
    }
    if (v82 == v199 + 5)
    {
      v231 = (void **)&v228;
      (*(void (**)(uint64_t *, char **))(*v82 + 24))(v82, &v228);
      v83 = (uint64_t)v231;
      v15 = v196;
      v14 = v197;
      v84 = v194;
      if (!v231)
        goto LABEL_327;
    }
    else
    {
      v83 = (*(uint64_t (**)(uint64_t *))(*v82 + 16))(v82);
      v231 = (void **)v83;
      v15 = v196;
      v14 = v197;
      v84 = v194;
      if (!v83)
LABEL_327:
        sub_223198474();
    }
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v83 + 48))(&v215);
    v86 = *(_QWORD *)(a3 + 24);
    v85 = *(std::__shared_weak_count **)(a3 + 32);
    v213 = v86;
    v214 = v85;
    if (v85)
    {
      p_shared_owners = (unint64_t *)&v85->__shared_owners_;
      do
        v88 = __ldxr(p_shared_owners);
      while (__stxr(v88 + 1, p_shared_owners));
    }
    if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
      sub_223197FA4(&__p, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
    else
      __p = v222;
    v218 = v215;
    v219 = v216;
    if (v216)
    {
      v89 = (unint64_t *)&v216->__shared_owners_;
      do
        v90 = __ldxr(v89);
      while (__stxr(v90 + 1, v89));
    }
    v220 = v86;
    v221 = v85;
    if (!v85)
      goto LABEL_167;
    v91 = (unint64_t *)&v85->__shared_owners_;
    do
      v92 = __ldxr(v91);
    while (__stxr(v92 + 1, v91));
    do
      v93 = __ldaxr(v91);
    while (__stlxr(v93 - 1, v91));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
      v94 = v216;
      if (!v216)
        goto LABEL_171;
    }
    else
    {
LABEL_167:
      v94 = v216;
      if (!v216)
        goto LABEL_171;
    }
    v95 = (unint64_t *)&v94->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
      if ((SHIBYTE(v223.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_172;
      goto LABEL_178;
    }
LABEL_171:
    if ((SHIBYTE(v223.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_172:
      v207 = v223;
      goto LABEL_179;
    }
LABEL_178:
    sub_223197FA4(&v207, v223.__r_.__value_.__l.__data_, v223.__r_.__value_.__l.__size_);
LABEL_179:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      sub_223197FA4(&v208, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v208 = __p;
    v209 = v218;
    v210 = v219;
    if (v219)
    {
      v99 = (unint64_t *)&v219->__shared_owners_;
      do
        v100 = __ldxr(v99);
      while (__stxr(v100 + 1, v99));
    }
    v211 = v220;
    v212 = v221;
    if (v221)
    {
      v101 = (unint64_t *)&v221->__shared_owners_;
      do
        v102 = __ldxr(v101);
      while (__stxr(v102 + 1, v101));
    }
    sub_2232410FC(v84, (const void **)&v207.__r_.__value_.__l.__data_, (uint64_t)&v207);
    v103 = v212;
    if (v212)
    {
      v104 = (unint64_t *)&v212->__shared_owners_;
      do
        v105 = __ldaxr(v104);
      while (__stlxr(v105 - 1, v104));
      if (!v105)
      {
        ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
        std::__shared_weak_count::__release_weak(v103);
      }
    }
    v106 = v210;
    if (!v210)
      goto LABEL_197;
    v107 = (unint64_t *)&v210->__shared_owners_;
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
      if ((SHIBYTE(v208.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_198:
        if ((SHIBYTE(v207.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_199;
        goto LABEL_203;
      }
    }
    else
    {
LABEL_197:
      if ((SHIBYTE(v208.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_198;
    }
    operator delete(v208.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v207.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_199:
      v109 = v221;
      if (!v221)
        goto LABEL_208;
LABEL_204:
      v110 = (unint64_t *)&v109->__shared_owners_;
      do
        v111 = __ldaxr(v110);
      while (__stlxr(v111 - 1, v110));
      if (!v111)
      {
        ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
        std::__shared_weak_count::__release_weak(v109);
      }
LABEL_208:
      v112 = v219;
      if (!v219)
        goto LABEL_212;
      v113 = (unint64_t *)&v219->__shared_owners_;
      do
        v114 = __ldaxr(v113);
      while (__stlxr(v114 - 1, v113));
      if (!v114)
      {
        ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
        std::__shared_weak_count::__release_weak(v112);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_213:
          v115 = v231;
          if (v231 != (void **)&v228)
          {
LABEL_214:
            if (!v115)
              goto LABEL_220;
            v116 = 5;
LABEL_219:
            (*((void (**)(void))*v115 + v116))();
LABEL_220:
            if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v222.__r_.__value_.__l.__data_);
              v117 = v15 == v14;
              if ((SHIBYTE(v223.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_317;
LABEL_222:
              v118 = (void *)v223.__r_.__value_.__r.__words[0];
              goto LABEL_316;
            }
LABEL_221:
            v117 = v15 == v14;
            if ((SHIBYTE(v223.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_317;
            goto LABEL_222;
          }
LABEL_218:
          v116 = 4;
          v115 = (void **)&v228;
          goto LABEL_219;
        }
      }
      else
      {
LABEL_212:
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_213;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      v115 = v231;
      if (v231 != (void **)&v228)
        goto LABEL_214;
      goto LABEL_218;
    }
LABEL_203:
    operator delete(v207.__r_.__value_.__l.__data_);
    v109 = v221;
    if (!v221)
      goto LABEL_208;
    goto LABEL_204;
  }
  v193 = a4;
  sub_223235FF8(a5, &v207);
  v195 = a5;
  v198 = a6;
  v200 = a7;
  memset(&__p, 0, sizeof(__p));
  sub_223233E98((__int128 *)&v207, 0x2Eu, (uint64_t)&__p);
  v228 = 0;
  v229 = 0;
  v230 = 0;
  *((_BYTE *)&v223.__r_.__value_.__s + 23) = 0;
  v223.__r_.__value_.__s.__data_[0] = 0;
  v37 = __p.__r_.__value_.__l.__size_;
  v36 = __p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0] == __p.__r_.__value_.__l.__size_)
    goto LABEL_107;
  do
  {
    while (1)
    {
      if (*(char *)(v36 + 23) < 0)
      {
        sub_223197FA4(&v222, *(void **)v36, *(_QWORD *)(v36 + 8));
      }
      else
      {
        v38 = *(_OWORD *)v36;
        v222.__r_.__value_.__r.__words[2] = *(_QWORD *)(v36 + 16);
        *(_OWORD *)&v222.__r_.__value_.__l.__data_ = v38;
      }
      v39 = SHIBYTE(v223.__r_.__value_.__r.__words[2]);
      if ((v223.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v40 = HIBYTE(v223.__r_.__value_.__r.__words[2]);
      else
        v40 = v223.__r_.__value_.__l.__size_;
      v41 = SHIBYTE(v222.__r_.__value_.__r.__words[2]);
      if ((v222.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v42 = HIBYTE(v222.__r_.__value_.__r.__words[2]);
      else
        v42 = v222.__r_.__value_.__l.__size_;
      v43 = v42 + v40;
      if (v42 + v40 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v43 <= 0x16)
      {
        __dst[1] = 0;
        v206 = 0;
        __dst[0] = 0;
        v44 = (char *)__dst;
        HIBYTE(v206) = v42 + v40;
        if (!v40)
          goto LABEL_68;
LABEL_64:
        if (v39 >= 0)
          v45 = &v223;
        else
          v45 = (std::string *)v223.__r_.__value_.__r.__words[0];
        memmove(v44, v45, v40);
        goto LABEL_68;
      }
      v50 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v43 | 7) != 0x17)
        v50 = v43 | 7;
      v51 = v50 + 1;
      v44 = (char *)operator new(v50 + 1);
      __dst[1] = (void *)(v42 + v40);
      v206 = v51 | 0x8000000000000000;
      __dst[0] = v44;
      if (v40)
        goto LABEL_64;
LABEL_68:
      v46 = &v44[v40];
      if (v42)
      {
        if (v41 >= 0)
          v47 = &v222;
        else
          v47 = (std::string *)v222.__r_.__value_.__r.__words[0];
        memmove(v46, v47, v42);
      }
      v46[v42] = 0;
      v48 = v229;
      if ((unint64_t)v229 >= v230)
      {
        v229 = sub_22319BED8((void **)&v228, (uint64_t)__dst);
        if (SHIBYTE(v206) < 0)
          operator delete(__dst[0]);
      }
      else
      {
        v49 = *(_OWORD *)__dst;
        *((_QWORD *)v229 + 2) = v206;
        *v48 = v49;
        v229 = (char *)v48 + 24;
      }
      v52 = SHIBYTE(v222.__r_.__value_.__r.__words[2]);
      if ((v222.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v53 = HIBYTE(v222.__r_.__value_.__r.__words[2]);
      else
        v53 = v222.__r_.__value_.__l.__size_;
      v54 = v53 + 1;
      if (v53 + 1 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v54 >= 0x17)
      {
        v56 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v54 | 7) != 0x17)
          v56 = v54 | 7;
        v57 = v56 + 1;
        v55 = (char *)operator new(v56 + 1);
        __dst[1] = (void *)(v53 + 1);
        v206 = v57 | 0x8000000000000000;
        __dst[0] = v55;
      }
      else
      {
        __dst[1] = 0;
        v206 = 0;
        __dst[0] = 0;
        v55 = (char *)__dst;
        HIBYTE(v206) = v53 + 1;
        if (!v53)
          goto LABEL_95;
      }
      v58 = v52 >= 0 ? &v222 : (std::string *)v222.__r_.__value_.__r.__words[0];
      memmove(v55, v58, v53);
LABEL_95:
      *(_WORD *)&v55[v53] = 46;
      v59 = v206 >= 0 ? (const std::string::value_type *)__dst : (const std::string::value_type *)__dst[0];
      v60 = v206 >= 0 ? (void *)HIBYTE(v206) : __dst[1];
      std::string::append(&v223, v59, (std::string::size_type)v60);
      if ((SHIBYTE(v206) & 0x80000000) == 0)
        break;
      operator delete(__dst[0]);
      if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_103;
LABEL_51:
      v36 += 24;
      if (v36 == v37)
        goto LABEL_104;
    }
    if ((SHIBYTE(v222.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_51;
LABEL_103:
    operator delete(v222.__r_.__value_.__l.__data_);
    v36 += 24;
  }
  while (v36 != v37);
LABEL_104:
  v62 = v228;
  v61 = v229;
  if (v229 == v228)
  {
LABEL_107:
    memset(&v222, 0, sizeof(v222));
    v65 = *v193;
    v66 = v193[1];
    if (*v193 == v66)
    {
LABEL_146:
      v78 = v200;
      v79 = (uint64_t)v198;
      v80 = (*(uint64_t (**)(_QWORD, std::string *, char *, uint64_t))(**(_QWORD **)(a3 + 24) + 16))(*(_QWORD *)(a3 + 24), &v222, v198, v200);
      v81 = (uint64_t)v195;
      if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v222.__r_.__value_.__l.__data_);
      goto LABEL_266;
    }
    while (1)
    {
      if (*((char *)v65 + 23) < 0)
      {
        sub_223197FA4(__dst, *(void **)v65, *((_QWORD *)v65 + 1));
      }
      else
      {
        v67 = *v65;
        v206 = *((_QWORD *)v65 + 2);
        *(_OWORD *)__dst = v67;
      }
      if ((v222.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v68 = HIBYTE(v222.__r_.__value_.__r.__words[2]);
      else
        v68 = v222.__r_.__value_.__l.__size_;
      v69 = SHIBYTE(v206);
      if (v206 >= 0)
        v70 = HIBYTE(v206);
      else
        v70 = (size_t)__dst[1];
      if (v68)
        v71 = v70 + 1;
      else
        v71 = v70;
      if (v71 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v71 > 0x16)
        break;
      v203 = 0;
      v204 = 0;
      v202 = 0;
      v72 = &v202;
      HIBYTE(v204) = v71;
      if (v68)
        goto LABEL_126;
LABEL_127:
      if (v70)
      {
        if (v69 >= 0)
          v73 = __dst;
        else
          v73 = (void **)__dst[0];
        memmove(&v72[v68 != 0], v73, v70);
      }
      v72[(v68 != 0) + v70] = 0;
      if (v204 >= 0)
        v74 = (const std::string::value_type *)&v202;
      else
        v74 = (const std::string::value_type *)v202;
      if (v204 >= 0)
        v75 = HIBYTE(v204);
      else
        v75 = v203;
      std::string::append(&v222, v74, v75);
      if (SHIBYTE(v204) < 0)
      {
        operator delete(v202);
        if ((SHIBYTE(v206) & 0x80000000) == 0)
          goto LABEL_110;
LABEL_140:
        operator delete(__dst[0]);
        v65 = (__int128 *)((char *)v65 + 24);
        if (v65 == v66)
          goto LABEL_146;
      }
      else
      {
        if (SHIBYTE(v206) < 0)
          goto LABEL_140;
LABEL_110:
        v65 = (__int128 *)((char *)v65 + 24);
        if (v65 == v66)
          goto LABEL_146;
      }
    }
    v76 = (v71 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v71 | 7) != 0x17)
      v76 = v71 | 7;
    v77 = v76 + 1;
    v72 = operator new(v76 + 1);
    v203 = v71;
    v204 = v77 | 0x8000000000000000;
    v202 = v72;
    if (!v68)
      goto LABEL_127;
LABEL_126:
    memcpy(v72, ".", v68 != 0);
    goto LABEL_127;
  }
  while (1)
  {
    v63 = v61 - 24;
    v64 = sub_22324053C(a2 + 160, (const void **)v61 - 3);
    if ((uint64_t *)(a2 + 168) != v64)
      break;
    v61 -= 24;
    if (v63 == v62)
      goto LABEL_107;
  }
  v97 = v64[10];
  if (*(v61 - 1) < 0)
    v98 = *((_QWORD *)v61 - 2);
  else
    v98 = *(v61 - 1);
  v119 = v98 + 1;
  v120 = HIBYTE(v207.__r_.__value_.__r.__words[2]);
  if ((v207.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v121 = HIBYTE(v207.__r_.__value_.__r.__words[2]);
  else
    v121 = v207.__r_.__value_.__l.__size_;
  v122 = v121 + ~v98;
  v78 = v200;
  if ((SHIBYTE(v207.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v119 <= HIBYTE(v207.__r_.__value_.__r.__words[2]))
    {
      v123 = &v207;
      goto LABEL_234;
    }
LABEL_328:
    sub_2231A39C0();
  }
  v120 = v207.__r_.__value_.__l.__size_;
  if (v207.__r_.__value_.__l.__size_ < v119)
    goto LABEL_328;
  v123 = (std::string *)v207.__r_.__value_.__r.__words[0];
LABEL_234:
  v124 = v120 - v119;
  if (v124 >= v122)
    v125 = v122;
  else
    v125 = v124;
  if (v125 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v125 >= 0x17)
  {
    v127 = (v125 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v125 | 7) != 0x17)
      v127 = v125 | 7;
    v128 = v127 + 1;
    v126 = operator new(v127 + 1);
    v222.__r_.__value_.__l.__size_ = v125;
    v222.__r_.__value_.__r.__words[2] = v128 | 0x8000000000000000;
    v222.__r_.__value_.__r.__words[0] = (std::string::size_type)v126;
    goto LABEL_244;
  }
  *((_BYTE *)&v222.__r_.__value_.__s + 23) = v125;
  v126 = &v222;
  if (v125)
LABEL_244:
    memmove(v126, (char *)v123 + v119, v125);
  *((_BYTE *)v126 + v125) = 0;
  v79 = (uint64_t)v198;
  v80 = (*(uint64_t (**)(uint64_t, std::string *, char *, uint64_t))(*(_QWORD *)v97 + 16))(v97, &v222, v198, v200);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v222.__r_.__value_.__l.__data_);
  v129 = sub_22323400C(v80 == 3, v200);
  sub_2231813E8(v129, (uint64_t)"tlog::Configurator (line ", 25);
  v130 = (_QWORD *)std::ostream::operator<<();
  v131 = sub_2231813E8(v130, (uint64_t)"): ", 3);
  v132 = sub_2231813E8(v131, (uint64_t)"Invalid expression (invalid component '", 39);
  v133 = v198[23];
  if (v133 >= 0)
    v134 = (uint64_t)v198;
  else
    v134 = *(_QWORD *)v198;
  if (v133 >= 0)
    v135 = v198[23];
  else
    v135 = *((_QWORD *)v198 + 1);
  v136 = sub_2231813E8(v132, v134, v135);
  v137 = sub_2231813E8(v136, (uint64_t)"'", 1);
  v138 = sub_2231813E8(v137, (uint64_t)"' for parameter ", 16);
  if ((v207.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v139 = &v207;
  else
    v139 = (std::string *)v207.__r_.__value_.__r.__words[0];
  if ((v207.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v140 = HIBYTE(v207.__r_.__value_.__r.__words[2]);
  else
    v140 = v207.__r_.__value_.__l.__size_;
  v141 = sub_2231813E8(v138, (uint64_t)v139, v140);
  v142 = sub_2231813E8(v141, (uint64_t)" of configurator of type ", 25);
  v143 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 24) + 40))(*(_QWORD *)(a3 + 24));
  v144 = *(char *)(v143 + 23);
  if (v144 >= 0)
    v145 = v143;
  else
    v145 = *(_QWORD *)v143;
  if (v144 >= 0)
    v146 = *(unsigned __int8 *)(v143 + 23);
  else
    v146 = *(_QWORD *)(v143 + 8);
  v147 = sub_2231813E8(v142, v145, v146);
  v148 = sub_2231813E8(v147, (uint64_t)")", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v148 + *(_QWORD *)(*v148 - 24)));
  v149 = std::locale::use_facet((const std::locale *)&v222, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v149->__vftable[2].~facet_0)(v149, 10);
  std::locale::~locale((std::locale *)&v222);
  std::ostream::put();
  v81 = (uint64_t)v195;
  std::ostream::flush();
LABEL_266:
  v150 = sub_22323400C(v80 == 1, v78);
  sub_2231813E8(v150, (uint64_t)"tlog::Configurator (line ", 25);
  v151 = (_QWORD *)std::ostream::operator<<();
  v152 = sub_2231813E8(v151, (uint64_t)"): ", 3);
  v153 = sub_2231813E8(v152, (uint64_t)"Invalid expression (unknown parameter ", 38);
  v154 = *(char *)(v81 + 23);
  if (v154 >= 0)
    v155 = v81;
  else
    v155 = *(_QWORD *)v81;
  if (v154 >= 0)
    v156 = *(unsigned __int8 *)(v81 + 23);
  else
    v156 = *(_QWORD *)(v81 + 8);
  v157 = sub_2231813E8(v153, v155, v156);
  v158 = sub_2231813E8(v157, (uint64_t)"' for configurator of type ", 27);
  v159 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 24) + 40))(*(_QWORD *)(a3 + 24));
  v160 = *(char *)(v159 + 23);
  if (v160 >= 0)
    v161 = v159;
  else
    v161 = *(_QWORD *)v159;
  if (v160 >= 0)
    v162 = *(unsigned __int8 *)(v159 + 23);
  else
    v162 = *(_QWORD *)(v159 + 8);
  v163 = sub_2231813E8(v158, v161, v162);
  v164 = sub_2231813E8(v163, (uint64_t)")", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v164 + *(_QWORD *)(*v164 - 24)));
  v165 = std::locale::use_facet((const std::locale *)&v222, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v165->__vftable[2].~facet_0)(v165, 10);
  std::locale::~locale((std::locale *)&v222);
  std::ostream::put();
  std::ostream::flush();
  v166 = sub_22323400C(v80 == 2, v78);
  sub_2231813E8(v166, (uint64_t)"tlog::Configurator (line ", 25);
  v167 = (_QWORD *)std::ostream::operator<<();
  v168 = sub_2231813E8(v167, (uint64_t)"): ", 3);
  v169 = sub_2231813E8(v168, (uint64_t)"Invalid expression (invalid parameter value '", 45);
  v170 = *(char *)(v79 + 23);
  if (v170 >= 0)
    v171 = v79;
  else
    v171 = *(_QWORD *)v79;
  if (v170 >= 0)
    v172 = *(unsigned __int8 *)(v79 + 23);
  else
    v172 = *(_QWORD *)(v79 + 8);
  v173 = sub_2231813E8(v169, v171, v172);
  v174 = sub_2231813E8(v173, (uint64_t)"' for parameter ", 16);
  if ((v207.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v175 = &v207;
  else
    v175 = (std::string *)v207.__r_.__value_.__r.__words[0];
  if ((v207.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v176 = HIBYTE(v207.__r_.__value_.__r.__words[2]);
  else
    v176 = v207.__r_.__value_.__l.__size_;
  v177 = sub_2231813E8(v174, (uint64_t)v175, v176);
  v178 = sub_2231813E8(v177, (uint64_t)" of configurator of type ", 25);
  v179 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 24) + 40))(*(_QWORD *)(a3 + 24));
  v180 = *(char *)(v179 + 23);
  if (v180 >= 0)
    v181 = v179;
  else
    v181 = *(_QWORD *)v179;
  if (v180 >= 0)
    v182 = *(unsigned __int8 *)(v179 + 23);
  else
    v182 = *(_QWORD *)(v179 + 8);
  v183 = sub_2231813E8(v178, v181, v182);
  v184 = sub_2231813E8(v183, (uint64_t)")", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v184 + *(_QWORD *)(*v184 - 24)));
  v185 = std::locale::use_facet((const std::locale *)&v222, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v185->__vftable[2].~facet_0)(v185, 10);
  std::locale::~locale((std::locale *)&v222);
  std::ostream::put();
  std::ostream::flush();
  v117 = v80 == 0;
  if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v223.__r_.__value_.__l.__data_);
  v186 = v228;
  if (v228)
  {
    v187 = v229;
    v188 = v228;
    if (v229 != v228)
    {
      do
      {
        if (*(v187 - 1) < 0)
          operator delete(*((void **)v187 - 3));
        v187 -= 24;
      }
      while (v187 != v186);
      v188 = v228;
    }
    v229 = v186;
    operator delete(v188);
  }
  v189 = __p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0])
  {
    v190 = __p.__r_.__value_.__l.__size_;
    v191 = (void *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v190 - 1) < 0)
          operator delete(*(void **)(v190 - 24));
        v190 -= 24;
      }
      while (v190 != v189);
      v191 = (void *)__p.__r_.__value_.__r.__words[0];
    }
    __p.__r_.__value_.__l.__size_ = v189;
    operator delete(v191);
  }
  if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0)
  {
    v118 = (void *)v207.__r_.__value_.__r.__words[0];
LABEL_316:
    operator delete(v118);
  }
LABEL_317:
  if ((char)v225 < 0)
  {
    operator delete(v224[0]);
    if ((v227 & 0x80000000) == 0)
      return v117;
LABEL_321:
    operator delete(v226[0]);
    return v117;
  }
  if (v227 < 0)
    goto LABEL_321;
  return v117;
}

void sub_223235D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  uint64_t v51;

  if (*(char *)(v51 - 217) < 0)
  {
    operator delete(*(void **)(v51 - 240));
    if ((*(char *)(v51 - 185) & 0x80000000) == 0)
    {
LABEL_4:
      sub_22319BB48((void **)(v51 - 136));
      sub_22319BB48(&a46);
      if (a34 < 0)
        operator delete(__p);
      if (*(char *)(v51 - 161) < 0)
        operator delete(*(void **)(v51 - 184));
      if (*(char *)(v51 - 137) < 0)
        operator delete(*(void **)(v51 - 160));
      _Unwind_Resume(a1);
    }
  }
  else if ((*(char *)(v51 - 185) & 0x80000000) == 0)
  {
    goto LABEL_4;
  }
  operator delete(*(void **)(v51 - 208));
  goto LABEL_4;
}

void sub_223235FC8()
{
  uint64_t v0;

  if (*(char *)(v0 - 217) < 0)
    JUMPOUT(0x223235FB4);
  JUMPOUT(0x223235F54);
}

void sub_223235FD8()
{
  uint64_t v0;

  if (*(char *)(v0 - 217) < 0)
    JUMPOUT(0x223235FB4);
  JUMPOUT(0x223235F54);
}

_QWORD *sub_223235FF8@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v12;
  BOOL v13;
  _QWORD *v15;
  size_t v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;

  v3 = *((unsigned __int8 *)result + 23);
  v5 = (_QWORD *)*result;
  v4 = result[1];
  if ((v3 & 0x80u) == 0)
    v6 = result;
  else
    v6 = (_QWORD *)*result;
  if ((v3 & 0x80u) == 0)
    v7 = *((unsigned __int8 *)result + 23);
  else
    v7 = result[1];
  if (v7 < 5)
    goto LABEL_52;
  v8 = result;
  v9 = (char *)v6 + v7;
  v10 = v7;
  result = v6;
  while (1)
  {
    result = memchr(result, 116, v10 - 4);
    if (!result)
      goto LABEL_21;
    if (*(_DWORD *)result == 1735355508 && *((_BYTE *)result + 4) == 46)
      break;
    result = (_QWORD *)((char *)result + 1);
    v10 = v9 - (_BYTE *)result;
    if (v9 - (_BYTE *)result < 5)
      goto LABEL_21;
  }
  if (result != (_QWORD *)v9 && result == v6)
  {
    if ((v3 & 0x80) != 0)
    {
      if (v4 < 5)
        goto LABEL_80;
    }
    else
    {
      v4 = v3;
      v5 = v8;
      if (v3 <= 4)
        goto LABEL_80;
    }
    v17 = v4 - 5;
    if (v4 - 5 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (v17 >= 0x17)
      {
        v19 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v17 | 7) != 0x17)
          v19 = v17 | 7;
        v20 = v19 + 1;
        v21 = operator new(v19 + 1);
        a2[1] = v17;
        a2[2] = v20 | 0x8000000000000000;
        *a2 = v21;
        a2 = v21;
        v18 = (char *)v5 + 5;
        goto LABEL_78;
      }
      *((_BYTE *)a2 + 23) = v17;
      if (v4 != 5)
      {
        v18 = (char *)v5 + 5;
LABEL_78:
        result = memmove(a2, v18, v17);
        goto LABEL_79;
      }
      goto LABEL_79;
    }
LABEL_81:
    sub_22316DBC0();
  }
LABEL_21:
  if (v7 < 17)
    goto LABEL_38;
  v12 = v7;
  result = v6;
  while (1)
  {
    result = memchr(result, 111, v12 - 16);
    if (!result)
      goto LABEL_38;
    v13 = *result == 0x636170612E67726FLL && result[1] == 0x6A34676F6C2E6568;
    if (v13 && *((_BYTE *)result + 16) == 46)
      break;
    result = (_QWORD *)((char *)result + 1);
    v12 = v9 - (_BYTE *)result;
    if (v9 - (_BYTE *)result < 17)
      goto LABEL_38;
  }
  if (result == (_QWORD *)v9 || result != v6)
  {
LABEL_38:
    if (v7 >= 6)
    {
      result = v6;
      while (1)
      {
        result = memchr(result, 108, v7 - 5);
        if (!result)
          goto LABEL_52;
        if (*(_DWORD *)result == 879193964 && *((_WORD *)result + 2) == 11882)
          break;
        result = (_QWORD *)((char *)result + 1);
        v7 = v9 - (_BYTE *)result;
        if (v9 - (_BYTE *)result < 6)
          goto LABEL_52;
      }
      if (result != (_QWORD *)v9 && result == v6)
      {
        if ((v3 & 0x80) != 0)
        {
          if (v4 < 6)
            goto LABEL_80;
        }
        else
        {
          v4 = v3;
          v5 = v8;
          if (v3 <= 5)
LABEL_80:
            sub_2231A39C0();
        }
        v17 = v4 - 6;
        if (v4 - 6 <= 0x7FFFFFFFFFFFFFF7)
        {
          if (v17 >= 0x17)
          {
            v25 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v17 | 7) != 0x17)
              v25 = v17 | 7;
            v26 = v25 + 1;
            v27 = operator new(v25 + 1);
            a2[1] = v17;
            a2[2] = v26 | 0x8000000000000000;
            *a2 = v27;
            a2 = v27;
          }
          else
          {
            *((_BYTE *)a2 + 23) = v17;
            if (v4 == 6)
              goto LABEL_79;
          }
          v18 = (char *)v5 + 6;
          goto LABEL_78;
        }
        goto LABEL_81;
      }
    }
LABEL_52:
    *((_BYTE *)a2 + 23) = 0;
    *(_BYTE *)a2 = 0;
    return result;
  }
  if ((v3 & 0x80) != 0)
  {
    v15 = v5;
    if (v4 < 0x11)
      goto LABEL_80;
  }
  else
  {
    v4 = v3;
    v15 = v8;
    if (v3 <= 0x10)
      goto LABEL_80;
  }
  v17 = v4 - 17;
  if (v4 - 17 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_81;
  if (v17 >= 0x17)
  {
    v22 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v22 = v17 | 7;
    v23 = v22 + 1;
    v24 = operator new(v22 + 1);
    a2[1] = v17;
    a2[2] = v23 | 0x8000000000000000;
    *a2 = v24;
    a2 = v24;
    v18 = (char *)v15 + 17;
    goto LABEL_78;
  }
  *((_BYTE *)a2 + 23) = v17;
  if (v4 != 17)
  {
    v18 = (char *)v15 + 17;
    goto LABEL_78;
  }
LABEL_79:
  *((_BYTE *)a2 + v17) = 0;
  return result;
}

uint64_t sub_22323636C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 56);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 56);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_223236440(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

BOOL sub_2232364FC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  void **v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  const std::locale::facet *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  const std::locale::facet *v43;
  int v44;
  void **v45;
  void **v46;
  void *v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  char v50;
  char v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  void **v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  const std::locale::facet *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  void *v74[2];
  uint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  void *v80[2];
  unsigned __int8 v81;
  void *v82[2];
  char v83;
  void *__p[2];
  uint64_t v85;
  _BYTE v86[24];
  _BYTE *v87;
  uint64_t v88;

  v88 = *MEMORY[0x24BDAC8D0];
  v9 = *a3;
  v10 = a3[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v10 - *a3) >> 3) <= 2)
  {
    sub_223234168(a6, (const char *)a4, a2, "{unespected end after appender}");
    return 0;
  }
  if (*(char *)(v9 + 71) < 0)
  {
    sub_223197FA4(__p, *(void **)(v9 + 48), *(_QWORD *)(v9 + 56));
    if (a3[1] - *a3 == 72)
    {
LABEL_5:
      sub_223233898((char *)a5, (uint64_t)v82);
      sub_223235FF8(v82, v80);
      v15 = sub_223241470((_QWORD *)(a1 + 8), (uint64_t)v80);
      v16 = sub_22323400C(v15 == 0, (uint64_t)a6);
      sub_2231813E8(v16, (uint64_t)"tlog::Configurator (line ", 25);
      v17 = (_QWORD *)std::ostream::operator<<();
      v18 = sub_2231813E8(v17, (uint64_t)"): ", 3);
      v19 = sub_2231813E8(v18, (uint64_t)"Invalid expression: Unknown appender '", 38);
      if ((v81 & 0x80u) == 0)
        v20 = v80;
      else
        v20 = (void **)v80[0];
      if ((v81 & 0x80u) == 0)
        v21 = v81;
      else
        v21 = (uint64_t)v80[1];
      v22 = sub_2231813E8(v19, (uint64_t)v20, v21);
      v23 = sub_2231813E8(v22, (uint64_t)"'(", 2);
      v24 = *(char *)(a5 + 23);
      if (v24 >= 0)
        v25 = a5;
      else
        v25 = *(_QWORD *)a5;
      if (v24 >= 0)
        v26 = *(unsigned __int8 *)(a5 + 23);
      else
        v26 = *(_QWORD *)(a5 + 8);
      v27 = sub_2231813E8(v23, v25, v26);
      v28 = sub_2231813E8(v27, (uint64_t)") ", 2);
      std::ios_base::getloc((const std::ios_base *)((char *)v28 + *(_QWORD *)(*v28 - 24)));
      v29 = std::locale::use_facet((const std::locale *)v74, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10);
      std::locale::~locale((std::locale *)v74);
      std::ostream::put();
      std::ostream::flush();
      if (!v15)
      {
        v44 = 1;
        goto LABEL_81;
      }
      v30 = (uint64_t *)v15[8];
      if (!v30)
      {
        v87 = 0;
        goto LABEL_92;
      }
      if (v30 == v15 + 5)
      {
        v87 = v86;
        (*(void (**)(uint64_t *, _BYTE *))(*v30 + 24))(v30, v86);
        v31 = (uint64_t)v87;
        if (!v87)
          goto LABEL_92;
      }
      else
      {
        v31 = (*(uint64_t (**)(uint64_t *))(*v30 + 16))(v30);
        v87 = (_BYTE *)v31;
        if (!v31)
LABEL_92:
          sub_223198474();
      }
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v31 + 48))(&v78);
      if (SHIBYTE(v85) < 0)
      {
        sub_223197FA4(v74, __p[0], (unint64_t)__p[1]);
      }
      else
      {
        *(_OWORD *)v74 = *(_OWORD *)__p;
        v75 = v85;
      }
      v76 = v78;
      v77 = v79;
      if (v79)
      {
        p_shared_owners = (unint64_t *)&v79->__shared_owners_;
        do
          v49 = __ldxr(p_shared_owners);
        while (__stxr(v49 + 1, p_shared_owners));
      }
      sub_22324169C((uint64_t **)(a1 + 88), (const void **)v74, (uint64_t)v74);
      v51 = v50;
      v52 = v77;
      if (v77)
      {
        v53 = (unint64_t *)&v77->__shared_owners_;
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      if (SHIBYTE(v75) < 0)
      {
        operator delete(v74[0]);
        if ((v51 & 1) == 0)
        {
LABEL_56:
          sub_2231813E8(a6, (uint64_t)"tlog::Configurator (line ", 25);
          v55 = (_QWORD *)std::ostream::operator<<();
          v56 = sub_2231813E8(v55, (uint64_t)"): ", 3);
          v57 = sub_2231813E8(v56, (uint64_t)"Invalid expression (console appender ", 37);
          v58 = *(char *)(a5 + 23);
          if (v58 >= 0)
            v59 = a5;
          else
            v59 = *(_QWORD *)a5;
          if (v58 >= 0)
            v60 = *(unsigned __int8 *)(a5 + 23);
          else
            v60 = *(_QWORD *)(a5 + 8);
          v61 = sub_2231813E8(v57, v59, v60);
          v62 = sub_2231813E8(v61, (uint64_t)") with ID '", 11);
          if (v85 >= 0)
            v63 = __p;
          else
            v63 = (void **)__p[0];
          if (v85 >= 0)
            v64 = HIBYTE(v85);
          else
            v64 = (uint64_t)__p[1];
          v65 = sub_2231813E8(v62, (uint64_t)v63, v64);
          v66 = sub_2231813E8(v65, (uint64_t)"' added twice", 13);
          std::ios_base::getloc((const std::ios_base *)((char *)v66 + *(_QWORD *)(*v66 - 24)));
          v67 = std::locale::use_facet((const std::locale *)v74, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v67->__vftable[2].~facet_0)(v67, 10);
          std::locale::~locale((std::locale *)v74);
          std::ostream::put();
          std::ostream::flush();
          v44 = 1;
          v68 = v79;
          if (!v79)
          {
LABEL_76:
            v71 = v87;
            if (v87 == v86)
            {
              v72 = 4;
              v71 = v86;
            }
            else
            {
              if (!v87)
                goto LABEL_81;
              v72 = 5;
            }
            (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_81:
            if ((char)v81 < 0)
            {
              operator delete(v80[0]);
              if ((v83 & 0x80000000) == 0)
                goto LABEL_83;
            }
            else if ((v83 & 0x80000000) == 0)
            {
LABEL_83:
              v11 = v44 == 0;
LABEL_84:
              if ((SHIBYTE(v85) & 0x80000000) == 0)
                return v11;
              goto LABEL_34;
            }
            operator delete(v82[0]);
            goto LABEL_83;
          }
LABEL_72:
          v69 = (unint64_t *)&v68->__shared_owners_;
          do
            v70 = __ldaxr(v69);
          while (__stlxr(v70 - 1, v69));
          if (!v70)
          {
            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
            std::__shared_weak_count::__release_weak(v68);
          }
          goto LABEL_76;
        }
      }
      else if ((v51 & 1) == 0)
      {
        goto LABEL_56;
      }
      v44 = 0;
      v68 = v79;
      if (!v79)
        goto LABEL_76;
      goto LABEL_72;
    }
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(v9 + 48);
    v85 = *(_QWORD *)(v9 + 64);
    if (v10 - v9 == 72)
      goto LABEL_5;
  }
  v32 = sub_22324053C(a1 + 88, (const void **)__p);
  if ((uint64_t *)(a1 + 96) == v32)
  {
    sub_2231813E8(a6, (uint64_t)"tlog::Configurator (line ", 25);
    v35 = (_QWORD *)std::ostream::operator<<();
    v36 = sub_2231813E8(v35, (uint64_t)"): ", 3);
    v37 = sub_2231813E8(v36, (uint64_t)"Invalid expression (unknown appender ", 37);
    v38 = *(char *)(a4 + 23);
    if (v38 >= 0)
      v39 = a4;
    else
      v39 = *(_QWORD *)a4;
    if (v38 >= 0)
      v40 = *(unsigned __int8 *)(a4 + 23);
    else
      v40 = *(_QWORD *)(a4 + 8);
    v41 = sub_2231813E8(v37, v39, v40);
    v42 = sub_2231813E8(v41, (uint64_t)"). Add an appender before accessing its parameters.", 51);
    std::ios_base::getloc((const std::ios_base *)((char *)v42 + *(_QWORD *)(*v42 - 24)));
    v43 = std::locale::use_facet((const std::locale *)v74, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v43->__vftable[2].~facet_0)(v43, 10);
    std::locale::~locale((std::locale *)v74);
    std::ostream::put();
    std::ostream::flush();
LABEL_33:
    v11 = 0;
    if ((SHIBYTE(v85) & 0x80000000) == 0)
      return v11;
    goto LABEL_34;
  }
  v34 = *a3;
  v33 = a3[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v33 - *a3) >> 3) <= 3)
  {
    sub_223234168(a6, (const char *)a4, a2, "{unexpected end after layout identifier}");
    goto LABEL_33;
  }
  v74[0] = 0;
  v74[1] = 0;
  v75 = 0;
  sub_22323DC2C((char *)v74, v34 + 72, v33, 0xAAAAAAAAAAAAAAABLL * ((v33 - (v34 + 72)) >> 3));
  v11 = sub_223234C1C(a2, a1, (uint64_t)(v32 + 4), (__int128 **)v74, (_QWORD *)a4, (char *)a5, (uint64_t)a6);
  v45 = (void **)v74[0];
  if (!v74[0])
    goto LABEL_84;
  v46 = (void **)v74[1];
  v47 = v74[0];
  if (v74[1] != v74[0])
  {
    do
    {
      if (*((char *)v46 - 1) < 0)
        operator delete(*(v46 - 3));
      v46 -= 3;
    }
    while (v46 != v45);
    v47 = v74[0];
  }
  v74[1] = v45;
  operator delete(v47);
  if (SHIBYTE(v85) < 0)
LABEL_34:
    operator delete(__p[0]);
  return v11;
}

void sub_223236BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;
  _QWORD *v36;
  uint64_t v37;

  sub_223167354((uint64_t)&a15);
  v36 = *(_QWORD **)(v34 - 80);
  if (v36 == (_QWORD *)(v34 - 104))
  {
    v37 = 4;
    v36 = (_QWORD *)(v34 - 104);
  }
  else
  {
    if (!v36)
    {
      if ((a22 & 0x80000000) == 0)
        goto LABEL_10;
      goto LABEL_5;
    }
    v37 = 5;
  }
  (*(void (**)(void))(*v36 + 8 * v37))();
  if ((a22 & 0x80000000) == 0)
  {
LABEL_10:
    if (a28 < 0)
    {
LABEL_11:
      operator delete(a23);
      if ((a34 & 0x80000000) == 0)
LABEL_12:
        _Unwind_Resume(a1);
LABEL_7:
      operator delete(a29);
      _Unwind_Resume(a1);
    }
LABEL_6:
    if ((a34 & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_7;
  }
LABEL_5:
  operator delete(__p);
  if (a28 < 0)
    goto LABEL_11;
  goto LABEL_6;
}

uint64_t sub_223236D30(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else
  {
LABEL_5:
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_223236DB0(uint64_t **a1, uint64_t a2, _BYTE **a3, _QWORD *a4)
{
  int v4;
  _BYTE *v5;
  size_t v6;
  _BYTE **v8;
  uint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  uint64_t v15;
  size_t v17;
  void *v18;
  _BYTE *v19;
  size_t v20;
  std::locale::__imp *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  const std::locale::facet *v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  size_t v29;
  size_t v30;
  size_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  std::locale::__imp *locale;
  std::locale::__imp *v36;
  unint64_t v37;
  unint64_t v38;
  std::locale::__imp *v39;
  size_t v40;
  const std::string::value_type *v41;
  size_t v42;
  int v43;
  const char *v44;
  const void *v45;
  unint64_t v46;
  unint64_t v47;
  const void *v48;
  size_t v49;
  uint64_t v50;
  unint64_t v51;
  const void *v52;
  size_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  const std::locale::facet *v58;
  int v59;
  const std::string::value_type *v60;
  std::string::size_type v61;
  std::string *v62;
  __int128 v63;
  std::string *v64;
  __int128 v65;
  void **v66;
  size_t v67;
  int v68;
  std::locale::__imp *v69;
  std::locale::__imp *v70;
  std::locale::__imp *v71;
  std::string v72;
  std::string v73;
  void *__p[2];
  int64_t v75;
  std::locale v76[2];
  unint64_t v77;
  void *v78[2];
  unint64_t v79;
  std::locale __dst[2];
  unint64_t v81;

  v4 = *((char *)a3 + 23);
  if (v4 >= 0)
    v5 = a3;
  else
    v5 = *a3;
  if (v4 >= 0)
    v6 = *((unsigned __int8 *)a3 + 23);
  else
    v6 = (size_t)a3[1];
  if (!v6)
    return 1;
  v8 = a3;
  v11 = 0;
  v12 = &v5[v6];
  while (1)
  {
    v13 = v5[v11];
    if (v13 > 0x3F || ((1 << v13) & 0x100002200) == 0)
      break;
    if (v6 == ++v11)
      return 1;
  }
  if (v11 == -1 || v5[v11] == 35)
    return 1;
  if ((uint64_t)v6 < 1)
    goto LABEL_33;
  v17 = v6;
  v18 = v5;
  while (1)
  {
    v19 = memchr(v18, 61, v17);
    if (!v19)
      goto LABEL_33;
    if (*v19 == 61)
      break;
    v18 = v19 + 1;
    v17 = v12 - (_BYTE *)v18;
    if (v12 - (_BYTE *)v18 < 1)
      goto LABEL_33;
  }
  if (v19 == v12 || (v20 = v19 - v5, v19 - v5 == -1))
  {
LABEL_33:
    sub_2231813E8(a4, (uint64_t)"tlog::Configurator (line ", 25);
    v22 = (_QWORD *)std::ostream::operator<<();
    v23 = sub_2231813E8(v22, (uint64_t)"): ", 3);
    v24 = sub_2231813E8(v23, (uint64_t)"Invalid expression (has to be assignment)", 41);
    std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(_QWORD *)(*v24 - 24)));
    v25 = std::locale::use_facet(__dst, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
    std::locale::~locale(__dst);
    std::ostream::put();
    std::ostream::flush();
    return 0;
  }
  if (v6 >= v20)
    v6 = v19 - v5;
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v6 >= 0x17)
  {
    v26 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v26 = v6 | 7;
    v27 = v26 + 1;
    v21 = (std::locale::__imp *)operator new(v26 + 1);
    __dst[1].__locale_ = (std::locale::__imp *)v6;
    v81 = v27 | 0x8000000000000000;
    __dst[0].__locale_ = v21;
    goto LABEL_37;
  }
  HIBYTE(v81) = v6;
  v21 = (std::locale::__imp *)__dst;
  if (v6)
LABEL_37:
    memmove(v21, v5, v6);
  *((_BYTE *)v21 + v6) = 0;
  if ((*((char *)v8 + 23) & 0x80000000) == 0)
  {
    v28 = *((unsigned __int8 *)v8 + 23);
    if (v20 < v28)
    {
      v29 = v28 + ~v20;
      goto LABEL_43;
    }
LABEL_130:
    sub_2231A39C0();
  }
  v28 = (size_t)v8[1];
  if (v28 <= v20)
    goto LABEL_130;
  v29 = v28 + ~v20;
  v8 = (_BYTE **)*v8;
LABEL_43:
  v30 = v28 - (v20 + 1);
  if (v30 >= v29)
    v31 = v29;
  else
    v31 = v30;
  if (v31 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v31 >= 0x17)
  {
    v33 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v31 | 7) != 0x17)
      v33 = v31 | 7;
    v34 = v33 + 1;
    v32 = operator new(v33 + 1);
    v78[1] = (void *)v31;
    v79 = v34 | 0x8000000000000000;
    v78[0] = v32;
    goto LABEL_53;
  }
  HIBYTE(v79) = v31;
  v32 = v78;
  if (v31)
LABEL_53:
    memmove(v32, (char *)v8 + v20 + 1, v31);
  *((_BYTE *)v32 + v31) = 0;
  sub_223233898((char *)__dst, (uint64_t)v76);
  if (SHIBYTE(v81) < 0)
    operator delete(__dst[0].__locale_);
  v81 = v77;
  *(_OWORD *)&__dst[0].__locale_ = *(_OWORD *)&v76[0].__locale_;
  locale = (std::locale::__imp *)HIBYTE(v77);
  if ((v77 & 0x8000000000000000) != 0)
    locale = __dst[1].__locale_;
  if (locale)
  {
    v76[0].__locale_ = 0;
    v76[1].__locale_ = 0;
    v77 = 0;
    sub_223233E98((__int128 *)__dst, 0x2Eu, (uint64_t)v76);
    v36 = v76[0].__locale_;
    v37 = *((unsigned __int8 *)v76[0].__locale_ + 23);
    v38 = v37;
    v39 = v76[0].__locale_;
    if (*((char *)v76[0].__locale_ + 23) < 0)
    {
      v39 = *(std::locale::__imp **)v76[0].__locale_;
      v38 = *((_QWORD *)v76[0].__locale_ + 1);
    }
    if (v38 >= 4)
      v40 = 4;
    else
      v40 = v38;
    if (memcmp(v39, "tlog", v40) || v38 != 4)
    {
      v41 = (const std::string::value_type *)v36;
      if ((v37 & 0x80) != 0)
      {
        v41 = *(const std::string::value_type **)v36;
        v37 = *((_QWORD *)v36 + 1);
      }
      v42 = v37 >= 5 ? 5 : v37;
      v43 = memcmp(v41, "log4j", v42);
      v44 = "{unexpected token, needs to begin with tlog/log4j}";
      if (v43 || v37 != 5)
      {
LABEL_112:
        sub_223234168(a4, (const char *)__dst, a2, v44);
        goto LABEL_116;
      }
    }
    if (v76[1].__locale_ != v36)
    {
      v45 = (char *)v36 + 24;
      v46 = *((unsigned __int8 *)v36 + 47);
      v47 = v46;
      v48 = (char *)v36 + 24;
      if (*((char *)v36 + 47) < 0)
      {
        v48 = (const void *)*((_QWORD *)v36 + 3);
        v47 = *((_QWORD *)v36 + 4);
      }
      if (v47 >= 0xA)
        v49 = 10;
      else
        v49 = v47;
      if (!memcmp(v48, "rootLogger", v49) && v47 == 10)
        goto LABEL_88;
      v51 = v46;
      v52 = (char *)v36 + 24;
      if ((v46 & 0x80) != 0)
      {
        v52 = (const void *)*((_QWORD *)v36 + 3);
        v51 = *((_QWORD *)v36 + 4);
      }
      v53 = v51 >= 6 ? 6 : v51;
      if (!memcmp(v52, "logger", v53) && v51 == 6)
      {
LABEL_88:
        v54 = sub_223234594(a1, a2, (uint64_t *)v76, v50, (char *)v78, a4);
LABEL_89:
        v15 = v54;
        goto LABEL_117;
      }
      if ((v46 & 0x80) != 0)
      {
        v45 = (const void *)*((_QWORD *)v36 + 3);
        v46 = *((_QWORD *)v36 + 4);
      }
      if (v46 >= 8)
        v67 = 8;
      else
        v67 = v46;
      v68 = memcmp(v45, "appender", v67);
      v44 = "{unknown token after tlog}";
      if (!v68 && v46 == 8)
      {
        v54 = sub_2232364FC((uint64_t)a1, a2, (uint64_t *)v76, (uint64_t)__dst, (uint64_t)v78, a4);
        goto LABEL_89;
      }
      goto LABEL_112;
    }
    v72.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
    *(_OWORD *)&v72.__r_.__value_.__r.__words[1] = xmmword_2245B9430;
    strcpy(v72.__r_.__value_.__l.__data_, "{unexpected end after '");
    v59 = *((char *)v36 + 23);
    if (v59 >= 0)
      v60 = (const std::string::value_type *)v36;
    else
      v60 = *(const std::string::value_type **)v36;
    if (v59 >= 0)
      v61 = *((unsigned __int8 *)v36 + 23);
    else
      v61 = *((_QWORD *)v36 + 1);
    v62 = std::string::append(&v72, v60, v61);
    v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
    v73.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v63;
    v62->__r_.__value_.__l.__size_ = 0;
    v62->__r_.__value_.__r.__words[2] = 0;
    v62->__r_.__value_.__r.__words[0] = 0;
    v64 = std::string::append(&v73, "'}", 2uLL);
    v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
    v75 = v64->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v65;
    v64->__r_.__value_.__l.__size_ = 0;
    v64->__r_.__value_.__r.__words[2] = 0;
    v64->__r_.__value_.__r.__words[0] = 0;
    if (v75 >= 0)
      v66 = __p;
    else
      v66 = (void **)__p[0];
    sub_223234168(a4, (const char *)__dst, a2, (const char *)v66);
    if (SHIBYTE(v75) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_102:
        if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_116:
          v15 = 0;
LABEL_117:
          v69 = v76[0].__locale_;
          if (v76[0].__locale_)
          {
            v70 = v76[1].__locale_;
            v71 = v76[0].__locale_;
            if (v76[1].__locale_ != v76[0].__locale_)
            {
              do
              {
                if (*((char *)v70 - 1) < 0)
                  operator delete(*((void **)v70 - 3));
                v70 = (std::locale::__imp *)((char *)v70 - 24);
              }
              while (v70 != v69);
              v71 = v76[0].__locale_;
            }
            v76[1].__locale_ = v69;
            operator delete(v71);
          }
          goto LABEL_125;
        }
LABEL_115:
        operator delete(v72.__r_.__value_.__l.__data_);
        goto LABEL_116;
      }
    }
    else if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_102;
    }
    operator delete(v73.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_116;
    goto LABEL_115;
  }
  sub_2231813E8(a4, (uint64_t)"tlog::Configurator (line ", 25);
  v55 = (_QWORD *)std::ostream::operator<<();
  v56 = sub_2231813E8(v55, (uint64_t)"): ", 3);
  v57 = sub_2231813E8(v56, (uint64_t)"Invalid expression (left assignment empty)", 42);
  std::ios_base::getloc((const std::ios_base *)((char *)v57 + *(_QWORD *)(*v57 - 24)));
  v58 = std::locale::use_facet(v76, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v58->__vftable[2].~facet_0)(v58, 10);
  std::locale::~locale(v76);
  std::ostream::put();
  std::ostream::flush();
  v15 = 0;
LABEL_125:
  if (SHIBYTE(v79) < 0)
    operator delete(v78[0]);
  if (SHIBYTE(v81) < 0)
    operator delete(__dst[0].__locale_);
  return v15;
}

void sub_22323748C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,std::locale a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;

  if (a28 < 0)
  {
    operator delete(__p);
    if (a21 < 0)
    {
LABEL_5:
      operator delete(a16);
      if ((a15 & 0x80000000) == 0)
      {
LABEL_9:
        sub_22319BB48((void **)&a30.__locale_);
        if (a38 < 0)
        {
          operator delete(a33);
          if ((*(char *)(v38 - 89) & 0x80000000) == 0)
            goto LABEL_11;
        }
        else if ((*(char *)(v38 - 89) & 0x80000000) == 0)
        {
LABEL_11:
          _Unwind_Resume(a1);
        }
        operator delete(*(void **)(v38 - 112));
        _Unwind_Resume(a1);
      }
LABEL_8:
      operator delete(a10);
      goto LABEL_9;
    }
  }
  else if (a21 < 0)
  {
    goto LABEL_5;
  }
  if ((a15 & 0x80000000) == 0)
    goto LABEL_9;
  goto LABEL_8;
}

void sub_22323756C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::locale::~locale((std::locale *)(v1 - 112));
  _Unwind_Resume(a1);
}

uint64_t sub_223237580(uint64_t **a1, char *__s, int *a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7)
{
  size_t v14;
  size_t v15;
  std::locale::__imp *p_dst;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  size_t v20;
  _QWORD *v21;
  const std::locale::facet *v22;
  int v23;
  _QWORD *v24;
  size_t v25;
  _QWORD *v26;
  const std::locale::facet *v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  size_t v34;
  _QWORD *v35;
  const std::locale::facet *v36;
  size_t v37;
  size_t v38;
  std::locale::__imp *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  _QWORD *v43;
  size_t v44;
  _QWORD *v45;
  _QWORD *v46;
  const std::locale::facet *v47;
  _QWORD *v48;
  size_t v49;
  _QWORD *v50;
  _QWORD *v51;
  const std::locale::facet *v52;
  int v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  size_t v58;
  size_t v59;
  std::locale::__imp *v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  std::__shared_weak_count *v64;
  unint64_t *p_shared_owners;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  _QWORD *v70;
  char *v71;
  void *v72;
  char *v73;
  void *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  __int128 *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  const std::locale::facet *v89;
  uint64_t v90;
  std::locale::__imp *locale;
  uint64_t v92;
  _QWORD *v93;
  size_t v94;
  _QWORD *v95;
  _QWORD *v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  void *__p[2];
  void *v103;
  void *v104[2];
  void *v105;
  uint64_t *v106;
  __int128 v107;
  _QWORD *v108;
  __int128 v109;
  _QWORD *v110;
  std::locale __dst;
  size_t v112;
  int64_t v113;
  uint64_t v114;
  uint64_t v115;

  v115 = *MEMORY[0x24BDAC8D0];
  v110 = 0;
  v14 = strlen(__s);
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v15 = v14;
  if (v14 >= 0x17)
  {
    v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v17 = v14 | 7;
    v18 = v17 + 1;
    p_dst = (std::locale::__imp *)operator new(v17 + 1);
    v112 = v15;
    v113 = v18 | 0x8000000000000000;
    __dst.__locale_ = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v113) = v14;
  p_dst = (std::locale::__imp *)&__dst;
  if (v14)
LABEL_8:
    memcpy(p_dst, __s, v15);
  *((_BYTE *)p_dst + v15) = 0;
  (*(void (**)(__int128 *__return_ptr, uint64_t, std::locale *, _QWORD **))(*(_QWORD *)a7 + 32))(&v109, a7, &__dst, &v110);
  if (SHIBYTE(v113) < 0)
  {
    operator delete(__dst.__locale_);
    if ((_QWORD)v109)
      goto LABEL_66;
  }
  else if ((_QWORD)v109)
  {
    goto LABEL_66;
  }
  v19 = sub_2231813E8(a6, (uint64_t)"tlog::Configurator: could not open file ", 40);
  v20 = strlen(__s);
  v21 = sub_2231813E8(v19, (uint64_t)__s, v20);
  std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(_QWORD *)(*v21 - 24)));
  v22 = std::locale::use_facet(&__dst, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
  std::locale::~locale(&__dst);
  std::ostream::put();
  std::ostream::flush();
  v23 = *a3;
  if (!*a3)
    goto LABEL_91;
  if (v23 == 2)
  {
    v28 = sub_2231813E8(a6, (uint64_t)"tlog::Configurator: creating configuration file for logger name '", 65);
    v29 = *((char *)a3 + 31);
    if (v29 >= 0)
      v30 = (uint64_t)(a3 + 2);
    else
      v30 = *((_QWORD *)a3 + 1);
    if (v29 >= 0)
      v31 = *((unsigned __int8 *)a3 + 31);
    else
      v31 = *((_QWORD *)a3 + 2);
    v32 = sub_2231813E8(v28, v30, v31);
    v33 = sub_2231813E8(v32, (uint64_t)"' at ", 5);
    v34 = strlen(__s);
    v35 = sub_2231813E8(v33, (uint64_t)__s, v34);
    std::ios_base::getloc((const std::ios_base *)((char *)v35 + *(_QWORD *)(*v35 - 24)));
    v36 = std::locale::use_facet(&__dst, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v36->__vftable[2].~facet_0)(v36, 10);
    std::locale::~locale(&__dst);
    std::ostream::put();
  }
  else
  {
    if (v23 != 1)
      goto LABEL_25;
    v24 = sub_2231813E8(a6, (uint64_t)"tlog::Configurator: creating example configuration file at ", 59);
    v25 = strlen(__s);
    v26 = sub_2231813E8(v24, (uint64_t)__s, v25);
    std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(_QWORD *)(*v26 - 24)));
    v27 = std::locale::use_facet(&__dst, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
    std::locale::~locale(&__dst);
    std::ostream::put();
  }
  std::ostream::flush();
LABEL_25:
  v108 = 0;
  v37 = strlen(__s);
  if (v37 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v38 = v37;
  if (v37 >= 0x17)
  {
    v40 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v37 | 7) != 0x17)
      v40 = v37 | 7;
    v41 = v40 + 1;
    v39 = (std::locale::__imp *)operator new(v40 + 1);
    v112 = v38;
    v113 = v41 | 0x8000000000000000;
    __dst.__locale_ = v39;
    goto LABEL_32;
  }
  HIBYTE(v113) = v37;
  v39 = (std::locale::__imp *)&__dst;
  if (v37)
LABEL_32:
    memcpy(v39, __s, v38);
  *((_BYTE *)v39 + v38) = 0;
  (*(void (**)(__int128 *__return_ptr, uint64_t, std::locale *, uint64_t, _QWORD **))(*(_QWORD *)a7 + 24))(&v107, a7, &__dst, 1, &v108);
  if (SHIBYTE(v113) < 0)
  {
    operator delete(__dst.__locale_);
    if ((_QWORD)v107)
      goto LABEL_35;
LABEL_39:
    v48 = sub_2231813E8(a6, (uint64_t)"tlog::Configurator: failed to create default configuration file at ", 67);
    v49 = strlen(__s);
    v50 = sub_2231813E8(v48, (uint64_t)__s, v49);
    v51 = sub_2231813E8(v50, (uint64_t)". File could not be opened.", 27);
    std::ios_base::getloc((const std::ios_base *)((char *)v51 + *(_QWORD *)(*v51 - 24)));
    v52 = std::locale::use_facet(&__dst, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v52->__vftable[2].~facet_0)(v52, 10);
    std::locale::~locale(&__dst);
    std::ostream::put();
    goto LABEL_40;
  }
  if (!(_QWORD)v107)
    goto LABEL_39;
LABEL_35:
  v42 = (char *)v108 + *(_QWORD *)(*v108 - 24);
  if ((v42[32] & 5) == 0)
  {
    (*(void (**)(std::locale *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v42 + 5) + 32))(&__dst, *((_QWORD *)v42 + 5), 0, 1, 16);
    if (!v114)
    {
      if (*a3 == 2)
      {
        if (*((char *)a3 + 31) < 0)
          v87 = *((_QWORD *)a3 + 2);
        else
          v87 = *((unsigned __int8 *)a3 + 31);
        v90 = (uint64_t)(a3 + 2);
        if (v87 && sub_22322D8FC((_QWORD *)a3 + 1))
        {
          v54 = (uint64_t)v108;
          sub_223238528(v90, &__dst);
          if (v113 >= 0)
            locale = (std::locale::__imp *)&__dst;
          else
            locale = __dst.__locale_;
          if (v113 >= 0)
            v92 = HIBYTE(v113);
          else
            v92 = v112;
          sub_2231813E8((_QWORD *)v54, (uint64_t)locale, v92);
          if (SHIBYTE(v113) < 0)
          {
            operator delete(__dst.__locale_);
            v53 = 1;
            goto LABEL_41;
          }
          goto LABEL_107;
        }
        v93 = sub_2231813E8(a6, (uint64_t)"tlog::Configurator: failed to generate default configuration file at ", 69);
        v94 = strlen(__s);
        v95 = sub_2231813E8(v93, (uint64_t)__s, v94);
        v96 = sub_2231813E8(v95, (uint64_t)". Invalid default logger name '", 31);
        v97 = *((char *)a3 + 31);
        if (v97 >= 0)
          v98 = (uint64_t)(a3 + 2);
        else
          v98 = *((_QWORD *)a3 + 1);
        if (v97 >= 0)
          v99 = *((unsigned __int8 *)a3 + 31);
        else
          v99 = *((_QWORD *)a3 + 2);
        v100 = sub_2231813E8(v96, v98, v99);
        v101 = sub_2231813E8(v100, (uint64_t)"' (must only consist of letters, numbers and underscores).", 58);
        sub_2232340D8(v101);
      }
      else
      {
        if (*a3 == 1)
        {
          v54 = (uint64_t)v108;
          sub_2232380DC();
          if (byte_2540CA87F >= 0)
            v85 = &xmmword_2540CA868;
          else
            v85 = (__int128 *)xmmword_2540CA868;
          if (byte_2540CA87F >= 0)
            v86 = byte_2540CA87F;
          else
            v86 = *((_QWORD *)&xmmword_2540CA868 + 1);
          sub_2231813E8((_QWORD *)v54, (uint64_t)v85, v86);
LABEL_107:
          v53 = 1;
          goto LABEL_41;
        }
        sub_2231813E8(a6, (uint64_t)"tlog::Configurator: invalid GenerateConfiguration type ", 55);
        v88 = (_QWORD *)std::ostream::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v88 + *(_QWORD *)(*v88 - 24)));
        v89 = std::locale::use_facet(&__dst, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v89->__vftable[2].~facet_0)(v89, 10);
        std::locale::~locale(&__dst);
        std::ostream::put();
        std::ostream::flush();
      }
      v53 = 0;
      v54 = 2;
      goto LABEL_41;
    }
  }
  v43 = sub_2231813E8(a6, (uint64_t)"tlog::Configurator: cannot create default configuration file at ", 64);
  v44 = strlen(__s);
  v45 = sub_2231813E8(v43, (uint64_t)__s, v44);
  v46 = sub_2231813E8(v45, (uint64_t)". File is not empty.", 20);
  std::ios_base::getloc((const std::ios_base *)((char *)v46 + *(_QWORD *)(*v46 - 24)));
  v47 = std::locale::use_facet(&__dst, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v47->__vftable[2].~facet_0)(v47, 10);
  std::locale::~locale(&__dst);
  std::ostream::put();
LABEL_40:
  std::ostream::flush();
  v53 = 0;
  v54 = 1;
LABEL_41:
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v107 + 1);
  if (!*((_QWORD *)&v107 + 1))
    goto LABEL_45;
  v56 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
  do
    v57 = __ldaxr(v56);
  while (__stlxr(v57 - 1, v56));
  if (!v57)
  {
    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
    std::__shared_weak_count::__release_weak(v55);
    if (!v53)
      goto LABEL_92;
  }
  else
  {
LABEL_45:
    if (!v53)
      goto LABEL_92;
  }
  v58 = strlen(__s);
  if (v58 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v59 = v58;
  if (v58 >= 0x17)
  {
    v61 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v58 | 7) != 0x17)
      v61 = v58 | 7;
    v62 = v61 + 1;
    v60 = (std::locale::__imp *)operator new(v61 + 1);
    v112 = v59;
    v113 = v62 | 0x8000000000000000;
    __dst.__locale_ = v60;
  }
  else
  {
    HIBYTE(v113) = v58;
    v60 = (std::locale::__imp *)&__dst;
    if (!v58)
      goto LABEL_54;
  }
  memcpy(v60, __s, v59);
LABEL_54:
  *((_BYTE *)v60 + v59) = 0;
  (*(void (**)(__int128 *__return_ptr, uint64_t, std::locale *, _QWORD **))(*(_QWORD *)a7 + 32))(&v107, a7, &__dst, &v110);
  v63 = v107;
  v107 = 0uLL;
  v64 = (std::__shared_weak_count *)*((_QWORD *)&v109 + 1);
  v109 = v63;
  if (v64)
  {
    p_shared_owners = (unint64_t *)&v64->__shared_owners_;
    do
      v66 = __ldaxr(p_shared_owners);
    while (__stlxr(v66 - 1, p_shared_owners));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v107 + 1);
  if (*((_QWORD *)&v107 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  if ((SHIBYTE(v113) & 0x80000000) == 0)
  {
    if ((_QWORD)v109)
      goto LABEL_66;
LABEL_91:
    v54 = 1;
    goto LABEL_92;
  }
  operator delete(__dst.__locale_);
  if (!(_QWORD)v109)
    goto LABEL_91;
LABEL_66:
  v106 = *a1;
  v70 = v110;
  sub_223241840((uint64_t)v104, a4);
  sub_223241F10((uint64_t)__p, a5);
  v54 = sub_2232389A8(&v106, v70, (uint64_t)v104, (uint64_t)__p, a6);
  v71 = (char *)v103;
  if (v103)
  {
    while (1)
    {
      v75 = *(char **)v71;
      v76 = (char *)*((_QWORD *)v71 + 8);
      if (v76 == v71 + 40)
        break;
      if (v76)
      {
        v77 = 5;
LABEL_77:
        (*(void (**)(void))(*(_QWORD *)v76 + 8 * v77))();
      }
      if (v71[39] < 0)
        operator delete(*((void **)v71 + 2));
      operator delete(v71);
      v71 = v75;
      if (!v75)
        goto LABEL_67;
    }
    v76 = v71 + 40;
    v77 = 4;
    goto LABEL_77;
  }
LABEL_67:
  v72 = __p[0];
  __p[0] = 0;
  if (v72)
    operator delete(v72);
  v73 = (char *)v105;
  if (v105)
  {
    while (1)
    {
      v78 = *(char **)v73;
      v79 = (char *)*((_QWORD *)v73 + 8);
      if (v79 == v73 + 40)
        break;
      if (v79)
      {
        v80 = 5;
LABEL_85:
        (*(void (**)(void))(*(_QWORD *)v79 + 8 * v80))();
      }
      if (v73[39] < 0)
        operator delete(*((void **)v73 + 2));
      operator delete(v73);
      v73 = v78;
      if (!v78)
        goto LABEL_70;
    }
    v79 = v73 + 40;
    v80 = 4;
    goto LABEL_85;
  }
LABEL_70:
  v74 = v104[0];
  v104[0] = 0;
  if (v74)
    operator delete(v74);
LABEL_92:
  v81 = (std::__shared_weak_count *)*((_QWORD *)&v109 + 1);
  if (*((_QWORD *)&v109 + 1))
  {
    v82 = (unint64_t *)(*((_QWORD *)&v109 + 1) + 8);
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  return v54;
}

void sub_223237F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0)
  {
    operator delete(__p);
    sub_223167354((uint64_t)&a21);
    sub_223167354((uint64_t)&a25);
    _Unwind_Resume(a1);
  }
  sub_223167354((uint64_t)&a21);
  sub_223167354((uint64_t)&a25);
  _Unwind_Resume(a1);
}

__int128 *sub_2232380DC()
{
  unsigned __int8 v0;
  const std::string::value_type *v2;
  std::string::size_type v3;
  std::string *v4;
  __int128 v5;
  void **v6;
  std::string::size_type v7;
  std::string *v8;
  __int128 v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  void **v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  std::string *v20;
  __int128 v21;
  void *__p[2];
  unsigned __int8 v23;
  void *v24[2];
  unsigned __int8 v25;
  std::string v26;
  std::string v27;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CA780);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CA780))
  {
    sub_22323A4AC();
    sub_223174DE4(&v26, "# TODO: Remove Console and LogFile appenders from root!\ntlog.rootLogger=INFO, Console, LogFile\n\n");
    sub_22323A73C(&v26, (uint64_t)&qword_2540CA808, &v27);
    sub_22323A698();
    if (byte_2540CA867 >= 0)
      v2 = (const std::string::value_type *)&qword_2540CA850;
    else
      v2 = (const std::string::value_type *)qword_2540CA850;
    if (byte_2540CA867 >= 0)
      v3 = byte_2540CA867;
    else
      v3 = unk_2540CA858;
    v4 = std::string::append(&v27, v2, v3);
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    sub_223174DE4(v24, "\ntlog.logger.myLogger=NONE, Console, LogFile\ntlog.logger.myLogger.mySubLogger=WARN\n\n");
    if ((v25 & 0x80u) == 0)
      v6 = v24;
    else
      v6 = (void **)v24[0];
    if ((v25 & 0x80u) == 0)
      v7 = v25;
    else
      v7 = (std::string::size_type)v24[1];
    v8 = std::string::append(&v28, (const std::string::value_type *)v6, v7);
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    sub_22323A550();
    if (byte_2540CA837 >= 0)
      v10 = (const std::string::value_type *)&qword_2540CA820;
    else
      v10 = (const std::string::value_type *)qword_2540CA820;
    if (byte_2540CA837 >= 0)
      v11 = byte_2540CA837;
    else
      v11 = unk_2540CA828;
    v12 = std::string::append(&v29, v10, v11);
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    sub_223174DE4(__p, "\n");
    if ((v23 & 0x80u) == 0)
      v14 = __p;
    else
      v14 = (void **)__p[0];
    if ((v23 & 0x80u) == 0)
      v15 = v23;
    else
      v15 = (std::string::size_type)__p[1];
    v16 = std::string::append(&v30, (const std::string::value_type *)v14, v15);
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    sub_22323A5F4();
    if (byte_2540CA84F >= 0)
      v18 = (const std::string::value_type *)&qword_2540CA838;
    else
      v18 = (const std::string::value_type *)qword_2540CA838;
    if (byte_2540CA84F >= 0)
      v19 = byte_2540CA84F;
    else
      v19 = unk_2540CA840;
    v20 = std::string::append(&v31, v18, v19);
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    unk_2540CA878 = *((_QWORD *)&v20->__r_.__value_.__l + 2);
    xmmword_2540CA868 = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v31.__r_.__value_.__l.__data_);
      if (((char)v23 & 0x80000000) == 0)
      {
LABEL_36:
        if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_37;
        goto LABEL_45;
      }
    }
    else if (((char)v23 & 0x80000000) == 0)
    {
      goto LABEL_36;
    }
    operator delete(__p[0]);
    if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_37:
      if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_38;
      goto LABEL_46;
    }
LABEL_45:
    operator delete(v30.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_38:
      if (((char)v25 & 0x80000000) == 0)
        goto LABEL_39;
      goto LABEL_47;
    }
LABEL_46:
    operator delete(v29.__r_.__value_.__l.__data_);
    if (((char)v25 & 0x80000000) == 0)
    {
LABEL_39:
      if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_40;
      goto LABEL_48;
    }
LABEL_47:
    operator delete(v24[0]);
    if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_40:
      if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_41;
      goto LABEL_49;
    }
LABEL_48:
    operator delete(v28.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_41:
      if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_42:
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CA868, &dword_22314D000);
        __cxa_guard_release(&qword_2540CA780);
        return &xmmword_2540CA868;
      }
LABEL_50:
      operator delete(v26.__r_.__value_.__l.__data_);
      goto LABEL_42;
    }
LABEL_49:
    operator delete(v27.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_42;
    goto LABEL_50;
  }
  return &xmmword_2540CA868;
}

void sub_2232383A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v45 - 73) & 0x80000000) == 0)
    {
LABEL_3:
      if ((a45 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(char *)(v45 - 73) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v45 - 96));
  if ((a45 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a20 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a40);
  if ((a20 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a38 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a15);
  if ((a38 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a32 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a33);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a26 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(a27);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_8:
    __cxa_guard_abort(&qword_2540CA780);
    _Unwind_Resume(a1);
  }
LABEL_15:
  operator delete(a21);
  __cxa_guard_abort(&qword_2540CA780);
  _Unwind_Resume(a1);
}

uint64_t sub_223238528@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned __int8 v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unsigned __int8 v20;
  uint64_t *v21;
  uint64_t v22;
  size_t v23;
  unint64_t v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  _QWORD v31[2];
  _QWORD v32[3];
  const void *v33;
  uint64_t v34;
  const void *v35;
  unint64_t v36;
  void *__p;
  char v38;
  unint64_t v39;
  int v40;
  uint64_t v41;

  sub_223195210((uint64_t)v31);
  v4 = atomic_load((unsigned __int8 *)&qword_2540CA760);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2540CA760))
  {
    sub_223174DE4(&qword_2540CA808, "# ----------------------------------------\n# Root Logger:\n# ----------------------------------------\n# (Avoid using the root logger in your program directly, but create\n#  a child logger instead, since other libraries may overwrite the\n#  root logger with a conflicting configuration)\n");
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2540CA808, &dword_22314D000);
    __cxa_guard_release(&qword_2540CA760);
  }
  if (byte_2540CA81F >= 0)
    v5 = &qword_2540CA808;
  else
    v5 = (uint64_t *)qword_2540CA808;
  if (byte_2540CA81F >= 0)
    v6 = byte_2540CA81F;
  else
    v6 = unk_2540CA810;
  sub_2231813E8(v32, (uint64_t)v5, v6);
  sub_2231813E8(v32, (uint64_t)"# The 'CLEAR'-token removes the default log appender from the root logger!\ntlog.rootLogger=INFO, CLEAR\n\n", 104);
  v7 = atomic_load((unsigned __int8 *)&qword_2540CA778);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_2540CA778))
  {
    sub_223174DE4(&qword_2540CA850, "# ----------------------------------------\n# Logger Configuration:\n# ----------------------------------------\n# Configure loggers of the hierarchy with:\n#    'tlog.logger.{name}={LogLevel}, [CLEAR], [{Appender}, ..]'\n\n# Level NONE is default for all loggers and makes them use their parent's log level\n# The optional token 'CLEAR' will remove all appenders from the logger if it already exists\n# Every logger will always use all appenders of all it's parents.\n");
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2540CA850, &dword_22314D000);
    __cxa_guard_release(&qword_2540CA778);
  }
  if (byte_2540CA867 >= 0)
    v8 = &qword_2540CA850;
  else
    v8 = (uint64_t *)qword_2540CA850;
  if (byte_2540CA867 >= 0)
    v9 = byte_2540CA867;
  else
    v9 = unk_2540CA858;
  sub_2231813E8(v32, (uint64_t)v8, v9);
  v10 = sub_2231813E8(v32, (uint64_t)"\ntlog.logger.", 13);
  v11 = *(char *)(a1 + 23);
  if (v11 >= 0)
    v12 = a1;
  else
    v12 = *(_QWORD *)a1;
  if (v11 >= 0)
    v13 = *(unsigned __int8 *)(a1 + 23);
  else
    v13 = *(_QWORD *)(a1 + 8);
  v14 = sub_2231813E8(v10, v12, v13);
  sub_2231813E8(v14, (uint64_t)"=INFO, Console, LogFile\n\n", 25);
  v15 = atomic_load((unsigned __int8 *)&qword_2540CA768);
  if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_2540CA768))
  {
    sub_223174DE4(&qword_2540CA820, "# ----------------------------------------\n# Appenders:\n# ----------------------------------------\n# Appenders can have any name and can be used by multiple loggers.\n\n# ConsoleAppender logs to stdout/stderr\ntlog.appender.Console=tlog.ConsoleAppender\ntlog.appender.Console.layout=tlog.PatternLayout\ntlog.appender.Console.levelFilter=ALL\n# Verbose Pattern:\ntlog.appender.Console.layout.conversionPattern=%d [%t] %p %c (%F:%L,%f):%m%n\n# Brief Pattern:\n#tlog.appender.Console.layout.conversionPattern=%r %p %c (%F:%L):%m%n\n\n# FileAppender logs to a log file\ntlog.appender.LogFile=tlog.FileAppender\ntlog.appender.LogFile.filePath=Log.txt\ntlog.appender.LogFile.maxFileSize=1MB\n"
      "tlog.appender.LogFile.maxBackupIndex=10\n"
      "tlog.appender.LogFile.layout=tlog.PatternLayout\n"
      "tlog.appender.LogFile.layout.ConversionPattern=%d [%t] %p %c (%F:%L,%f):%m%n\n"
      "tlog.appender.LogFile.levelFilter=ALL\n");
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2540CA820, &dword_22314D000);
    __cxa_guard_release(&qword_2540CA768);
  }
  if (byte_2540CA837 >= 0)
    v16 = &qword_2540CA820;
  else
    v16 = (uint64_t *)qword_2540CA820;
  if (byte_2540CA837 >= 0)
    v17 = byte_2540CA837;
  else
    v17 = unk_2540CA828;
  v18 = sub_2231813E8(v32, (uint64_t)v16, v17);
  v19 = sub_2231813E8(v18, (uint64_t)"\n", 1);
  v20 = atomic_load((unsigned __int8 *)&qword_2540CA770);
  if ((v20 & 1) == 0 && __cxa_guard_acquire(&qword_2540CA770))
  {
    sub_223174DE4(&qword_2540CA838, "# ----------------------------------------\n# Parameter Cheatsheet:\n# ----------------------------------------\n\n# Log levels:\n# TRACE, DEBUG, INFO, WARN, ERROR, FATAL\n# NONE (default for non-root) will use the closest parent's log level\n\n# Parameter tokens (optional logger parameters after {Log Level}):\n# CLEAR : deletes existing appenders of the logger before adding new ones\n\n# Log level filters (for PatternLayout.levelFilter):\n# TRACE, DEBUG, INFO, WARN, ERROR, FATAL, ALL, NONE,\n# TRACE_TO_FATAL, ... , ERROR_TO_FATAL\n\n# Pattern Format string tokens (for PatternLayout.conversionPattern):\n# %d : local date in ISO 8601 format (YYYY-MM-DD HH:MM:SS,mmm)\n# %r : milliseconds since creation of the first pattern formatter until creation\n"
      "#      of the logging event\n"
      "# %t : thread identification (hash of this_thread::thread_id)\n"
      "# %p : priority (log level)\n"
      "# %c : category of the message (logger name)\n"
      "# %m : log message\n"
      "# %n : system specific line separator\n"
      "# %F : file where the log was requested\n"
      "# %L : line number where the log was requested\n"
      "# %f : function where the log was requested\n"
      "# %% : a single %-sign");
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2540CA838, &dword_22314D000);
    __cxa_guard_release(&qword_2540CA770);
  }
  if (byte_2540CA84F >= 0)
    v21 = &qword_2540CA838;
  else
    v21 = (uint64_t *)qword_2540CA838;
  if (byte_2540CA84F >= 0)
    v22 = byte_2540CA84F;
  else
    v22 = unk_2540CA840;
  sub_2231813E8(v19, (uint64_t)v21, v22);
  if ((v40 & 0x10) != 0)
  {
    v24 = v39;
    if (v39 < v36)
    {
      v39 = v36;
      v24 = v36;
    }
    v25 = v35;
    v23 = v24 - (_QWORD)v35;
    if (v24 - (unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_52;
  }
  else
  {
    if ((v40 & 8) == 0)
    {
      v23 = 0;
      a2[23] = 0;
      goto LABEL_48;
    }
    v25 = v33;
    v23 = v34 - (_QWORD)v33;
    if ((unint64_t)(v34 - (_QWORD)v33) >= 0x7FFFFFFFFFFFFFF8)
LABEL_52:
      sub_22316DBC0();
  }
  if (v23 >= 0x17)
  {
    v26 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17)
      v26 = v23 | 7;
    v27 = v26 + 1;
    v28 = operator new(v26 + 1);
    *((_QWORD *)a2 + 1) = v23;
    *((_QWORD *)a2 + 2) = v27 | 0x8000000000000000;
    *(_QWORD *)a2 = v28;
    a2 = v28;
    goto LABEL_47;
  }
  a2[23] = v23;
  if (v23)
LABEL_47:
    memmove(a2, v25, v23);
LABEL_48:
  a2[v23] = 0;
  v31[0] = *MEMORY[0x24BEDB7F0];
  v29 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v31 + *(_QWORD *)(v31[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v32[0] = v29;
  v32[1] = MEMORY[0x24BEDB848] + 16;
  if (v38 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x227684BE0](&v41);
}

void sub_223238914(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __cxa_guard_abort(&qword_2540CA770);
  sub_223195348((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223238934(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __cxa_guard_abort(&qword_2540CA768);
  sub_223195348((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223238954(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __cxa_guard_abort(&qword_2540CA778);
  sub_223195348((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223238974(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __cxa_guard_abort(&qword_2540CA760);
  sub_223195348((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223238994(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223195348((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2232389A8(uint64_t **a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  unsigned __int8 v9;
  unsigned __int8 v10;
  uint64_t *v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t *v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  const char *v41;
  uint64_t v42;
  _QWORD *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  _QWORD *v48;
  unint64_t v49;
  char *v50;
  unint64_t v51;
  void *v52;
  char *v53;
  void *v54;
  const std::ios_base *v55;
  uint64_t v56;
  int v57;
  std::locale::id *v58;
  const std::locale::facet *v59;
  unsigned __int8 v60;
  _QWORD *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  _QWORD *v68;
  std::locale::id *v69;
  _QWORD *v70;
  _QWORD *v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  const std::locale::facet *v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  const std::locale::facet *v106;
  _QWORD *v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  const std::locale::facet *v122;
  std::locale::__imp *locale;
  _QWORD *v124;
  _QWORD *v125;
  _QWORD *v126;
  std::locale::id *v127;
  uint64_t *v128;
  __int128 *v129;
  size_t v130;
  _QWORD *v131;
  int v132;
  uint64_t *v133;
  size_t v134;
  size_t v135;
  int v136;
  int v137;
  const void *v138;
  size_t v139;
  size_t v140;
  int v141;
  uint64_t v142;
  unint64_t *p_shared_owners;
  unint64_t v144;
  char v145;
  char v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  _QWORD *v150;
  _QWORD *v151;
  _QWORD *v152;
  __int128 *v153;
  uint64_t v154;
  _QWORD *v155;
  _QWORD *v156;
  const char *v157;
  _QWORD *v158;
  _QWORD *v159;
  _QWORD *v160;
  __int128 *v161;
  uint64_t v162;
  _QWORD *v163;
  _QWORD *v164;
  const char *v165;
  size_t v166;
  _QWORD *v167;
  const std::locale::facet *v168;
  _QWORD *v169;
  _QWORD *v170;
  size_t v171;
  _QWORD *v172;
  const std::locale::facet *v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  void *v177;
  char *v178;
  void *v179;
  char *v181;
  char *v182;
  uint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  __int128 *v189;
  __int128 *v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  __int128 *p_dst;
  uint64_t v195;
  uint64_t **v196;
  char v197;
  std::locale::__imp *v199;
  std::__shared_weak_count *v200;
  std::locale v201;
  std::__shared_weak_count *v202;
  uint64_t *v203;
  uint64_t v204;
  uint64_t *v205;
  void *v206[2];
  uint64_t v207;
  void *v208;
  unint64_t v209;
  char *v210;
  uint64_t v211;
  int v212;
  void *v213;
  unint64_t v214;
  void *v215;
  uint64_t v216;
  int v217;
  std::locale v218;
  __int128 __dst;
  uint64_t v220;
  __int128 v221;
  uint64_t v222;
  __int128 __p;
  unint64_t v224;
  _QWORD v225[2];
  int v226;
  _QWORD *v227;
  unint64_t v228;
  _QWORD v229[2];
  int v230;
  _QWORD *v231;
  _QWORD v232[2];
  _QWORD *v233;
  _QWORD v234[2];
  _QWORD *v235;
  _QWORD v236[2];
  _QWORD *v237;
  _QWORD v238[4];
  _QWORD v239[2];
  char *v240;
  _QWORD *v241;
  _QWORD v242[2];
  char *v243;
  _QWORD *v244;
  uint64_t v245;

  v245 = *MEMORY[0x24BDAC8D0];
  v9 = atomic_load((unsigned __int8 *)&qword_2540CA788);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_2540CA788))
  {
    *(_QWORD *)&__dst = &off_24EC26960;
    *(_QWORD *)&v221 = &__dst;
    sub_22323A794((char *)&__p, (__int128 *)"ConsoleAppender", (uint64_t)&__dst);
    v242[0] = &off_24EC26BD0;
    v244 = v242;
    sub_22323A794((char *)&v228, (__int128 *)"FileAppender", (uint64_t)v242);
    v239[0] = &off_24EC26BD0;
    v241 = v239;
    sub_22323A794((char *)&v233, (__int128 *)"RollingFileAppender", (uint64_t)v239);
    sub_22323A83C((uint64_t)&unk_2540CA8E0, (uint64_t)&__p, 3);
    sub_22323A8C0((uint64_t)&v233);
    sub_22323A8C0((uint64_t)&v228);
    sub_22323A8C0((uint64_t)&__p);
    v187 = v241;
    if (v241 == v239)
    {
      v188 = 4;
      v187 = v239;
    }
    else
    {
      if (!v241)
        goto LABEL_328;
      v188 = 5;
    }
    (*(void (**)(void))(*v187 + 8 * v188))();
LABEL_328:
    v192 = v244;
    if (v244 == v242)
    {
      v193 = 4;
      v192 = v242;
    }
    else
    {
      if (!v244)
        goto LABEL_333;
      v193 = 5;
    }
    (*(void (**)(void))(*v192 + 8 * v193))();
LABEL_333:
    p_dst = (__int128 *)v221;
    if ((__int128 *)v221 == &__dst)
    {
      v195 = 4;
      p_dst = &__dst;
    }
    else
    {
      if (!(_QWORD)v221)
      {
LABEL_338:
        __cxa_atexit((void (*)(void *))sub_22323A20C, &unk_2540CA8E0, &dword_22314D000);
        __cxa_guard_release(&qword_2540CA788);
        goto LABEL_2;
      }
      v195 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)p_dst + 8 * v195))();
    goto LABEL_338;
  }
LABEL_2:
  v10 = atomic_load((unsigned __int8 *)&qword_2540CA790);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_2540CA790))
  {
    v189 = (__int128 *)sub_2232307D4();
    *(_QWORD *)&__dst = &off_24EC26880;
    *(_QWORD *)&v221 = &__dst;
    sub_22323A930((char *)&__p, v189, (uint64_t)&__dst);
    sub_22323A9D8((uint64_t)&unk_2540CA908, (uint64_t)&__p, 1);
    sub_22323A8C0((uint64_t)&__p);
    v190 = (__int128 *)v221;
    if ((__int128 *)v221 == &__dst)
    {
      v191 = 4;
      v190 = &__dst;
    }
    else
    {
      if (!(_QWORD)v221)
      {
LABEL_325:
        __cxa_atexit((void (*)(void *))sub_22323A174, &unk_2540CA908, &dword_22314D000);
        __cxa_guard_release(&qword_2540CA790);
        goto LABEL_3;
      }
      v191 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v190 + 8 * v191))();
    goto LABEL_325;
  }
LABEL_3:
  sub_223241840((uint64_t)v242, (uint64_t)&unk_2540CA8E0);
  v11 = *(uint64_t **)(a3 + 16);
  if (v11)
  {
    while (1)
    {
      if (sub_223242564(v242, (uint64_t)(v11 + 2)))
      {
        v30 = sub_2231813E8(a5, (uint64_t)"Appender string configuration generator with component name '", 61);
        v31 = *((char *)v11 + 39);
        if (v31 >= 0)
          v32 = (uint64_t)(v11 + 2);
        else
          v32 = v11[2];
        if (v31 >= 0)
          v33 = *((unsigned __int8 *)v11 + 39);
        else
          v33 = v11[3];
        v34 = sub_2231813E8(v30, v32, v33);
        sub_2231813E8(v34, (uint64_t)"' already exists in the map of available Appender types. Skipping.\n", 67);
        v35 = 2;
        goto LABEL_293;
      }
      v14 = v11[8];
      if (!v14)
        goto LABEL_12;
      if ((uint64_t *)v14 != v11 + 5)
        break;
      *(_QWORD *)&v221 = &__dst;
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v14 + 24))(v14, &__dst);
LABEL_14:
      if (*((char *)v11 + 39) < 0)
      {
        sub_223197FA4(&__p, (void *)v11[2], v11[3]);
      }
      else
      {
        __p = *((_OWORD *)v11 + 1);
        v224 = v11[4];
      }
      v15 = v221;
      if (!(_QWORD)v221)
        goto LABEL_20;
      if ((__int128 *)v221 != &__dst)
      {
        v15 = (*(uint64_t (**)(void))(*(_QWORD *)v221 + 16))();
LABEL_20:
        v227 = (_QWORD *)v15;
        goto LABEL_22;
      }
      v227 = v225;
      (*(void (**)(__int128 *, _QWORD *))(__dst + 24))(&__dst, v225);
LABEL_22:
      sub_223242790((uint64_t)v242, (uint64_t)&__p, (uint64_t)&__p);
      v16 = v227;
      if (v227 == v225)
      {
        v16 = v225;
        v17 = 4;
      }
      else
      {
        if (!v227)
          goto LABEL_27;
        v17 = 5;
      }
      (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_27:
      if (SHIBYTE(v224) < 0)
      {
        operator delete((void *)__p);
        v12 = (__int128 *)v221;
        if ((__int128 *)v221 == &__dst)
        {
LABEL_5:
          v12 = &__dst;
          v13 = 4;
          goto LABEL_6;
        }
      }
      else
      {
        v12 = (__int128 *)v221;
        if ((__int128 *)v221 == &__dst)
          goto LABEL_5;
      }
      if (!v12)
        goto LABEL_7;
      v13 = 5;
LABEL_6:
      (*(void (**)(void))(*(_QWORD *)v12 + 8 * v13))();
LABEL_7:
      v11 = (uint64_t *)*v11;
      if (!v11)
        goto LABEL_33;
    }
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
LABEL_12:
    *(_QWORD *)&v221 = v14;
    goto LABEL_14;
  }
LABEL_33:
  sub_223241F10((uint64_t)v239, (uint64_t)&unk_2540CA908);
  v18 = *(uint64_t **)(a4 + 16);
  if (!v18)
  {
LABEL_64:
    v25 = atomic_load((unsigned __int8 *)qword_2540CA798);
    if ((v25 & 1) == 0 && __cxa_guard_acquire(qword_2540CA798))
    {
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDB380], &stru_25578ACB0, &dword_22314D000);
      __cxa_guard_release(qword_2540CA798);
    }
    std::mutex::lock(&stru_25578ACB0);
    v26 = *a1;
    sub_223241840((uint64_t)&v213, (uint64_t)v242);
    sub_223241F10((uint64_t)&v208, (uint64_t)v239);
    v27 = v213;
    v28 = v214;
    v213 = 0;
    v214 = 0;
    *(_QWORD *)&__p = v26;
    *((_QWORD *)&__p + 1) = v27;
    v224 = v28;
    v225[0] = v215;
    v225[1] = v216;
    v226 = v217;
    if (v216)
    {
      v29 = *((_QWORD *)v215 + 1);
      if ((v28 & (v28 - 1)) != 0)
      {
        if (v29 >= v28)
          v29 %= v28;
      }
      else
      {
        v29 &= v28 - 1;
      }
      v27[v29] = v225;
      v215 = 0;
      v216 = 0;
    }
    v48 = v208;
    v49 = v209;
    v208 = 0;
    v209 = 0;
    v227 = v48;
    v228 = v49;
    v50 = v210;
    v229[0] = v210;
    v229[1] = v211;
    v230 = v212;
    if (v211)
    {
      v51 = *((_QWORD *)v210 + 1);
      if ((v49 & (v49 - 1)) != 0)
      {
        if (v51 >= v49)
          v51 %= v49;
      }
      else
      {
        v51 &= v49 - 1;
      }
      v50 = 0;
      v48[v51] = v229;
      v210 = 0;
      v211 = 0;
    }
    v231 = v232;
    v232[0] = 0;
    v234[0] = 0;
    v234[1] = 0;
    v232[1] = 0;
    v233 = v234;
    v235 = v236;
    v236[0] = 0;
    v238[0] = 0;
    v238[1] = 0;
    v236[1] = 0;
    v237 = v238;
    if (!v50)
    {
LABEL_101:
      v52 = v208;
      v208 = 0;
      if (v52)
        operator delete(v52);
      v53 = (char *)v215;
      if (!v215)
      {
LABEL_104:
        v54 = v213;
        v213 = 0;
        if (v54)
          operator delete(v54);
        v206[0] = 0;
        v206[1] = 0;
        v207 = 0;
        v55 = (const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24));
        if ((v55->__rdstate_ & 2) != 0)
        {
          LOBYTE(v57) = 1;
          v61 = v235;
          if (v235 == v236)
          {
LABEL_128:
            v196 = a1;
            v68 = v237;
            if (v237 != v238)
            {
              v69 = (std::locale::id *)MEMORY[0x24BEDB350];
              do
              {
                v73 = v68[12];
                v74 = v68[10];
                (*(void (**)(std::locale *__return_ptr, uint64_t))(*(_QWORD *)v74 + 24))(&v201, v74);
                v75 = (*(uint64_t (**)(uint64_t, _QWORD *, std::locale::__imp *, _QWORD *))(*(_QWORD *)v73 + 24))(v73, v68 + 7, v201.__locale_, a5);
                v76 = sub_22323400C(v75 == 1, (uint64_t)a5);
                v77 = sub_2231813E8(v76, (uint64_t)"tlog::Configurator: ", 20);
                v78 = sub_2231813E8(v77, (uint64_t)"Invalid expression (unknown parameter ", 38);
                v79 = *((char *)v68 + 55);
                if (v79 >= 0)
                  v80 = (uint64_t)(v68 + 4);
                else
                  v80 = v68[4];
                if (v79 >= 0)
                  v81 = *((unsigned __int8 *)v68 + 55);
                else
                  v81 = v68[5];
                v82 = sub_2231813E8(v78, v80, v81);
                v83 = sub_2231813E8(v82, (uint64_t)"' for configurator of type ", 27);
                v84 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
                v85 = *(char *)(v84 + 23);
                if (v85 >= 0)
                  v86 = v84;
                else
                  v86 = *(_QWORD *)v84;
                if (v85 >= 0)
                  v87 = *(unsigned __int8 *)(v84 + 23);
                else
                  v87 = *(_QWORD *)(v84 + 8);
                v88 = sub_2231813E8(v83, v86, v87);
                v89 = sub_2231813E8(v88, (uint64_t)")", 1);
                std::ios_base::getloc((const std::ios_base *)((char *)v89 + *(_QWORD *)(*v89 - 24)));
                v90 = std::locale::use_facet((const std::locale *)&__dst, v69);
                ((void (*)(const std::locale::facet *, uint64_t))v90->__vftable[2].~facet_0)(v90, 10);
                std::locale::~locale((std::locale *)&__dst);
                std::ostream::put();
                std::ostream::flush();
                v91 = sub_22323400C(v75 == 2, (uint64_t)a5);
                v92 = sub_2231813E8(v91, (uint64_t)"tlog::Configurator: ", 20);
                v93 = sub_2231813E8(v92, (uint64_t)"Invalid expression (invalid parameter object content (", 54);
                v94 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 32))(v74);
                v95 = *(char *)(v94 + 23);
                if (v95 >= 0)
                  v96 = v94;
                else
                  v96 = *(_QWORD *)v94;
                if (v95 >= 0)
                  v97 = *(unsigned __int8 *)(v94 + 23);
                else
                  v97 = *(_QWORD *)(v94 + 8);
                v98 = sub_2231813E8(v93, v96, v97);
                v99 = sub_2231813E8(v98, (uint64_t)") for configurator of type ", 27);
                v100 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
                v101 = *(char *)(v100 + 23);
                if (v101 >= 0)
                  v102 = v100;
                else
                  v102 = *(_QWORD *)v100;
                if (v101 >= 0)
                  v103 = *(unsigned __int8 *)(v100 + 23);
                else
                  v103 = *(_QWORD *)(v100 + 8);
                v104 = sub_2231813E8(v99, v102, v103);
                v105 = sub_2231813E8(v104, (uint64_t)")", 1);
                std::ios_base::getloc((const std::ios_base *)((char *)v105 + *(_QWORD *)(*v105 - 24)));
                v106 = std::locale::use_facet((const std::locale *)&__dst, v69);
                ((void (*)(const std::locale::facet *, uint64_t))v106->__vftable[2].~facet_0)(v106, 10);
                std::locale::~locale((std::locale *)&__dst);
                std::ostream::put();
                std::ostream::flush();
                v107 = sub_22323400C(v75 == 3, (uint64_t)a5);
                v108 = sub_2231813E8(v107, (uint64_t)"tlog::Configurator: ", 20);
                v109 = sub_2231813E8(v108, (uint64_t)"Invalid expression (invalid parameter type (", 44);
                v110 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 32))(v74);
                v111 = *(char *)(v110 + 23);
                if (v111 >= 0)
                  v112 = v110;
                else
                  v112 = *(_QWORD *)v110;
                if (v111 >= 0)
                  v113 = *(unsigned __int8 *)(v110 + 23);
                else
                  v113 = *(_QWORD *)(v110 + 8);
                v114 = sub_2231813E8(v109, v112, v113);
                v115 = sub_2231813E8(v114, (uint64_t)") for configurator of type ", 27);
                v116 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
                v117 = *(char *)(v116 + 23);
                if (v117 >= 0)
                  v118 = v116;
                else
                  v118 = *(_QWORD *)v116;
                if (v117 >= 0)
                  v119 = *(unsigned __int8 *)(v116 + 23);
                else
                  v119 = *(_QWORD *)(v116 + 8);
                v120 = sub_2231813E8(v115, v118, v119);
                v121 = sub_2231813E8(v120, (uint64_t)")", 1);
                std::ios_base::getloc((const std::ios_base *)((char *)v121 + *(_QWORD *)(*v121 - 24)));
                v122 = std::locale::use_facet((const std::locale *)&__dst, v69);
                ((void (*)(const std::locale::facet *, uint64_t))v122->__vftable[2].~facet_0)(v122, 10);
                std::locale::~locale((std::locale *)&__dst);
                std::ostream::put();
                std::ostream::flush();
                locale = v201.__locale_;
                v201.__locale_ = 0;
                if (locale)
                  (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
                v124 = (_QWORD *)v68[1];
                if (v124)
                {
                  do
                  {
                    v125 = v124;
                    v124 = (_QWORD *)*v124;
                  }
                  while (v124);
                }
                else
                {
                  do
                  {
                    v125 = (_QWORD *)v68[2];
                    v72 = *v125 == (_QWORD)v68;
                    v68 = v125;
                  }
                  while (!v72);
                }
                LOBYTE(v57) = (v75 == 0) & v57;
                v68 = v125;
              }
              while (v125 != v238);
            }
            v126 = v233;
            if (v233 != v234)
            {
              v197 = 1;
              v127 = (std::locale::id *)MEMORY[0x24BEDB350];
              do
              {
                if (*((char *)v126 + 55) < 0)
                {
                  sub_223197FA4(&__dst, (void *)v126[4], v126[5]);
                }
                else
                {
                  __dst = *((_OWORD *)v126 + 2);
                  v220 = v126[6];
                }
                if (*((char *)v126 + 79) < 0)
                {
                  sub_223197FA4(&v221, (void *)v126[7], v126[8]);
                }
                else
                {
                  v221 = *(_OWORD *)(v126 + 7);
                  v222 = v126[9];
                }
                v128 = (uint64_t *)v232[0];
                if (!v232[0])
                  goto LABEL_249;
                if (v222 >= 0)
                  v129 = &v221;
                else
                  v129 = (__int128 *)v221;
                if (v222 >= 0)
                  v130 = HIBYTE(v222);
                else
                  v130 = *((_QWORD *)&v221 + 1);
                v131 = v232;
                do
                {
                  while (1)
                  {
                    v132 = *((char *)v128 + 55);
                    v133 = v132 >= 0 ? v128 + 4 : (uint64_t *)v128[4];
                    v134 = v132 >= 0 ? *((unsigned __int8 *)v128 + 55) : v128[5];
                    v135 = v130 >= v134 ? v134 : v130;
                    v136 = memcmp(v133, v129, v135);
                    if (v136)
                      break;
                    if (v134 < v130)
                      goto LABEL_201;
LABEL_199:
                    v131 = v128;
                    v128 = (uint64_t *)*v128;
                    if (!v128)
                      goto LABEL_216;
                  }
                  if ((v136 & 0x80000000) == 0)
                    goto LABEL_199;
LABEL_201:
                  v128 = (uint64_t *)v128[1];
                }
                while (v128);
LABEL_216:
                if (v131 == v232)
                  goto LABEL_249;
                v137 = *((char *)v131 + 55);
                if (v137 >= 0)
                  v138 = v131 + 4;
                else
                  v138 = (const void *)v131[4];
                if (v137 >= 0)
                  v139 = *((unsigned __int8 *)v131 + 55);
                else
                  v139 = v131[5];
                if (v139 >= v130)
                  v140 = v130;
                else
                  v140 = v139;
                v141 = memcmp(v129, v138, v140);
                if (!v141)
                {
                  if (v130 < v139)
                    goto LABEL_249;
LABEL_228:
                  v203 = *v196;
                  sub_22322D064(&v203, (uint64_t)&__dst, &v204);
                  v142 = v204;
                  if (((**(_QWORD **)(v204 + 8) == v204) & v197) == 1)
                  {
                    sub_22322F09C(v204);
                    v197 = 0;
                  }
                  (*(void (**)(std::locale *__return_ptr))(*(_QWORD *)v131[7] + 32))(&v201);
                  v199 = v201.__locale_;
                  v200 = v202;
                  if (v202)
                  {
                    p_shared_owners = (unint64_t *)&v202->__shared_owners_;
                    do
                      v144 = __ldxr(p_shared_owners);
                    while (__stxr(v144 + 1, p_shared_owners));
                  }
                  v145 = sub_22322E9E8(v142, &v199);
                  v146 = v145;
                  v147 = v200;
                  if (!v200)
                    goto LABEL_237;
                  v148 = (unint64_t *)&v200->__shared_owners_;
                  do
                    v149 = __ldaxr(v148);
                  while (__stlxr(v149 - 1, v148));
                  if (!v149)
                  {
                    ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
                    std::__shared_weak_count::__release_weak(v147);
                    if ((v146 & 1) == 0)
                    {
LABEL_238:
                      sub_2231813E8(a5, (uint64_t)"tlog::Configurator (line ", 25);
                      v150 = (_QWORD *)std::ostream::operator<<();
                      v151 = sub_2231813E8(v150, (uint64_t)"): ", 3);
                      v152 = sub_2231813E8(v151, (uint64_t)"Failed to add appender ", 23);
                      if (v222 >= 0)
                        v153 = &v221;
                      else
                        v153 = (__int128 *)v221;
                      if (v222 >= 0)
                        v154 = HIBYTE(v222);
                      else
                        v154 = *((_QWORD *)&v221 + 1);
                      v155 = sub_2231813E8(v152, (uint64_t)v153, v154);
                      v156 = sub_2231813E8(v155, (uint64_t)" for logger ", 12);
                      if (SHIBYTE(v220) < 0)
                      {
                        if (*((_QWORD *)&__dst + 1))
                          v157 = (const char *)__dst;
                        else
                          v157 = "{root}";
                      }
                      else if (HIBYTE(v220))
                      {
                        v157 = (const char *)&__dst;
                      }
                      else
                      {
                        v157 = "{root}";
                      }
                      v171 = strlen(v157);
                      v172 = sub_2231813E8(v156, (uint64_t)v157, v171);
                      std::ios_base::getloc((const std::ios_base *)((char *)v172 + *(_QWORD *)(*v172 - 24)));
                      v173 = std::locale::use_facet(&v218, v127);
                      ((void (*)(const std::locale::facet *, uint64_t))v173->__vftable[2].~facet_0)(v173, 10);
                      std::locale::~locale(&v218);
                      std::ostream::put();
                      std::ostream::flush();
                      LOBYTE(v57) = 0;
                    }
                  }
                  else
                  {
LABEL_237:
                    if ((v145 & 1) == 0)
                      goto LABEL_238;
                  }
                  v174 = v202;
                  if (v202)
                  {
                    v175 = (unint64_t *)&v202->__shared_owners_;
                    do
                      v176 = __ldaxr(v175);
                    while (__stlxr(v176 - 1, v175));
                    if (!v176)
                    {
                      ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
                      std::__shared_weak_count::__release_weak(v174);
                    }
                  }
                  goto LABEL_263;
                }
                if ((v141 & 0x80000000) == 0)
                  goto LABEL_228;
LABEL_249:
                sub_2231813E8(a5, (uint64_t)"tlog::Configurator (line ", 25);
                v158 = (_QWORD *)std::ostream::operator<<();
                v159 = sub_2231813E8(v158, (uint64_t)"): ", 3);
                v160 = sub_2231813E8(v159, (uint64_t)"Unknown appender alias ", 23);
                if (v222 >= 0)
                  v161 = &v221;
                else
                  v161 = (__int128 *)v221;
                if (v222 >= 0)
                  v162 = HIBYTE(v222);
                else
                  v162 = *((_QWORD *)&v221 + 1);
                v163 = sub_2231813E8(v160, (uint64_t)v161, v162);
                v164 = sub_2231813E8(v163, (uint64_t)" for logger ", 12);
                if (SHIBYTE(v220) < 0)
                {
                  if (*((_QWORD *)&__dst + 1))
                    v165 = (const char *)__dst;
                  else
                    v165 = "{root}";
                }
                else if (HIBYTE(v220))
                {
                  v165 = (const char *)&__dst;
                }
                else
                {
                  v165 = "{root}";
                }
                v166 = strlen(v165);
                v167 = sub_2231813E8(v164, (uint64_t)v165, v166);
                std::ios_base::getloc((const std::ios_base *)((char *)v167 + *(_QWORD *)(*v167 - 24)));
                v168 = std::locale::use_facet(&v201, v127);
                ((void (*)(const std::locale::facet *, uint64_t))v168->__vftable[2].~facet_0)(v168, 10);
                std::locale::~locale(&v201);
                std::ostream::put();
                std::ostream::flush();
                LOBYTE(v57) = 0;
LABEL_263:
                if (SHIBYTE(v222) < 0)
                {
                  operator delete((void *)v221);
                  if (SHIBYTE(v220) < 0)
                    goto LABEL_268;
LABEL_265:
                  v169 = (_QWORD *)v126[1];
                  if (!v169)
                    goto LABEL_271;
                  do
                  {
LABEL_269:
                    v170 = v169;
                    v169 = (_QWORD *)*v169;
                  }
                  while (v169);
                }
                else
                {
                  if ((SHIBYTE(v220) & 0x80000000) == 0)
                    goto LABEL_265;
LABEL_268:
                  operator delete((void *)__dst);
                  v169 = (_QWORD *)v126[1];
                  if (v169)
                    goto LABEL_269;
                  do
                  {
LABEL_271:
                    v170 = (_QWORD *)v126[2];
                    v72 = *v170 == (_QWORD)v126;
                    v126 = v170;
                  }
                  while (!v72);
                }
                v126 = v170;
              }
              while (v170 != v234);
            }
            if ((v57 & 1) != 0)
              v35 = 0;
            else
              v35 = 3;
            if (SHIBYTE(v207) < 0)
              operator delete(v206[0]);
            sub_22323DD5C((uint64_t)&__p);
            std::mutex::unlock(&stru_25578ACB0);
            v47 = v240;
            if (!v240)
              goto LABEL_291;
LABEL_306:
            while (1)
            {
              v184 = *(char **)v47;
              v185 = (char *)*((_QWORD *)v47 + 8);
              if (v185 == v47 + 40)
                break;
              if (v185)
              {
                v186 = 5;
LABEL_310:
                (*(void (**)(void))(*(_QWORD *)v185 + 8 * v186))();
              }
              if (v47[39] < 0)
                operator delete(*((void **)v47 + 2));
              operator delete(v47);
              v47 = v184;
              if (!v184)
                goto LABEL_291;
            }
            v185 = v47 + 40;
            v186 = 4;
            goto LABEL_310;
          }
        }
        else
        {
          LODWORD(v56) = -1;
          v57 = 1;
          v58 = (std::locale::id *)MEMORY[0x24BEDB350];
          do
          {
            std::ios_base::getloc(v55);
            v59 = std::locale::use_facet((const std::locale *)&__dst, v58);
            v60 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v59->__vftable[2].~facet_0)(v59, 10);
            std::locale::~locale((std::locale *)&__dst);
            sub_22322E508(a2, (uint64_t)v206, v60);
            v56 = (v56 + 1);
            v57 &= sub_223236DB0((uint64_t **)&__p, v56, (_BYTE **)v206, a5);
            v55 = (const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24));
          }
          while ((v55->__rdstate_ & 2) == 0);
          v61 = v235;
          if (v235 == v236)
            goto LABEL_128;
        }
        do
        {
          v205 = *a1;
          sub_22322D064(&v205, (uint64_t)(v61 + 4), (uint64_t *)&__dst);
          sub_22322F09C(__dst);
          v70 = (_QWORD *)v61[1];
          if (v70)
          {
            do
            {
              v71 = v70;
              v70 = (_QWORD *)*v70;
            }
            while (v70);
          }
          else
          {
            do
            {
              v71 = (_QWORD *)v61[2];
              v72 = *v71 == (_QWORD)v61;
              v61 = v71;
            }
            while (!v72);
          }
          v61 = v71;
        }
        while (v71 != v236);
        goto LABEL_128;
      }
      while (1)
      {
        v65 = *(char **)v53;
        v66 = (char *)*((_QWORD *)v53 + 8);
        if (v66 == v53 + 40)
          break;
        if (v66)
        {
          v67 = 5;
LABEL_124:
          (*(void (**)(void))(*(_QWORD *)v66 + 8 * v67))();
        }
        if (v53[39] < 0)
          operator delete(*((void **)v53 + 2));
        operator delete(v53);
        v53 = v65;
        if (!v65)
          goto LABEL_104;
      }
      v66 = v53 + 40;
      v67 = 4;
      goto LABEL_124;
    }
    while (1)
    {
      v62 = *(char **)v50;
      v63 = (char *)*((_QWORD *)v50 + 8);
      if (v63 == v50 + 40)
        break;
      if (v63)
      {
        v64 = 5;
LABEL_116:
        (*(void (**)(void))(*(_QWORD *)v63 + 8 * v64))();
      }
      if (v50[39] < 0)
        operator delete(*((void **)v50 + 2));
      operator delete(v50);
      v50 = v62;
      if (!v62)
        goto LABEL_101;
    }
    v63 = v50 + 40;
    v64 = 4;
    goto LABEL_116;
  }
  while (!sub_223242564(v242, (uint64_t)(v18 + 2)))
  {
    if (sub_223242BF8(v239, (uint64_t)(v18 + 2)))
    {
      v43 = sub_2231813E8(a5, (uint64_t)"Appender parameter string configuration generator with component name '", 71);
      v44 = *((char *)v18 + 39);
      if (v44 >= 0)
        v45 = (uint64_t)(v18 + 2);
      else
        v45 = v18[2];
      if (v44 >= 0)
        v46 = *((unsigned __int8 *)v18 + 39);
      else
        v46 = v18[3];
      v40 = sub_2231813E8(v43, v45, v46);
      v41 = "' already exists in the map of available Appender parameter types. Aborting.\n";
      v42 = 77;
      goto LABEL_89;
    }
    v21 = v18[8];
    if (!v21)
      goto LABEL_43;
    if ((uint64_t *)v21 != v18 + 5)
    {
      v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
LABEL_43:
      *(_QWORD *)&v221 = v21;
      goto LABEL_45;
    }
    *(_QWORD *)&v221 = &__dst;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v21 + 24))(v21, &__dst);
LABEL_45:
    if (*((char *)v18 + 39) < 0)
    {
      sub_223197FA4(&__p, (void *)v18[2], v18[3]);
    }
    else
    {
      __p = *((_OWORD *)v18 + 1);
      v224 = v18[4];
    }
    v22 = v221;
    if (!(_QWORD)v221)
      goto LABEL_51;
    if ((__int128 *)v221 != &__dst)
    {
      v22 = (*(uint64_t (**)(void))(*(_QWORD *)v221 + 16))();
LABEL_51:
      v227 = (_QWORD *)v22;
      goto LABEL_53;
    }
    v227 = v225;
    (*(void (**)(__int128 *, _QWORD *))(__dst + 24))(&__dst, v225);
LABEL_53:
    sub_223242E24((uint64_t)v239, (uint64_t)&__p, (uint64_t)&__p);
    v23 = v227;
    if (v227 == v225)
    {
      v23 = v225;
      v24 = 4;
    }
    else
    {
      if (!v227)
        goto LABEL_58;
      v24 = 5;
    }
    (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_58:
    if (SHIBYTE(v224) < 0)
    {
      operator delete((void *)__p);
      v19 = (__int128 *)v221;
      if ((__int128 *)v221 == &__dst)
      {
LABEL_35:
        v19 = &__dst;
        v20 = 4;
        goto LABEL_36;
      }
    }
    else
    {
      v19 = (__int128 *)v221;
      if ((__int128 *)v221 == &__dst)
        goto LABEL_35;
    }
    if (!v19)
      goto LABEL_37;
    v20 = 5;
LABEL_36:
    (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_37:
    v18 = (uint64_t *)*v18;
    if (!v18)
      goto LABEL_64;
  }
  v36 = sub_2231813E8(a5, (uint64_t)"Appender parameter string configuration generator with component name '", 71);
  v37 = *((char *)v18 + 39);
  if (v37 >= 0)
    v38 = (uint64_t)(v18 + 2);
  else
    v38 = v18[2];
  if (v37 >= 0)
    v39 = *((unsigned __int8 *)v18 + 39);
  else
    v39 = v18[3];
  v40 = sub_2231813E8(v36, v38, v39);
  v41 = "' already exists in the map of available Appender types. Skipping.\n";
  v42 = 67;
LABEL_89:
  sub_2231813E8(v40, (uint64_t)v41, v42);
  v35 = 2;
  v47 = v240;
  if (v240)
    goto LABEL_306;
LABEL_291:
  v177 = (void *)v239[0];
  v239[0] = 0;
  if (v177)
    operator delete(v177);
LABEL_293:
  v178 = v243;
  if (v243)
  {
    while (1)
    {
      v181 = *(char **)v178;
      v182 = (char *)*((_QWORD *)v178 + 8);
      if (v182 == v178 + 40)
        break;
      if (v182)
      {
        v183 = 5;
LABEL_302:
        (*(void (**)(void))(*(_QWORD *)v182 + 8 * v183))();
      }
      if (v178[39] < 0)
        operator delete(*((void **)v178 + 2));
      operator delete(v178);
      v178 = v181;
      if (!v181)
        goto LABEL_294;
    }
    v182 = v178 + 40;
    v183 = 4;
    goto LABEL_302;
  }
LABEL_294:
  v179 = (void *)v242[0];
  v242[0] = 0;
  if (v179)
    operator delete(v179);
  return v35;
}

void sub_223239D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,char *a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;

  sub_22323A8C0(v41);
  sub_22323A8C0(v42);
  sub_22323A8C0((uint64_t)&a41);
  v45 = *(_QWORD **)(v43 - 160);
  if (v45 == (_QWORD *)(v43 - 184))
  {
    v46 = 4;
    v45 = (_QWORD *)(v43 - 184);
  }
  else
  {
    if (!v45)
      goto LABEL_6;
    v46 = 5;
  }
  (*(void (**)(void))(*v45 + 8 * v46))();
LABEL_6:
  v47 = *(_QWORD **)(v43 - 120);
  if (v47 == (_QWORD *)(v43 - 144))
  {
    v48 = 4;
    v47 = (_QWORD *)(v43 - 144);
  }
  else
  {
    if (!v47)
      goto LABEL_11;
    v48 = 5;
  }
  (*(void (**)(void))(*v47 + 8 * v48))();
LABEL_11:
  v49 = a38;
  if (a38 == &a35)
  {
    v50 = 4;
    v49 = &a35;
  }
  else
  {
    if (!a38)
      goto LABEL_16;
    v50 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v49 + 8 * v50))();
LABEL_16:
  __cxa_guard_abort(&qword_2540CA788);
  _Unwind_Resume(a1);
}

void sub_223239F00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, std::locale a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::locale a37,std::locale a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  uint64_t v52;

  sub_22323A20C((uint64_t)&a32);
  std::mutex::unlock(&stru_25578ACB0);
  sub_22323A174(v52 - 184);
  sub_22323A20C(v52 - 144);
  _Unwind_Resume(a1);
}

uint64_t sub_22323A174(uint64_t a1)
{
  char *v2;
  void *v3;
  char *v5;
  char *v6;
  uint64_t v7;

  v2 = *(char **)(a1 + 16);
  if (v2)
  {
    while (1)
    {
      v5 = *(char **)v2;
      v6 = (char *)*((_QWORD *)v2 + 8);
      if (v6 == v2 + 40)
        break;
      if (v6)
      {
        v7 = 5;
LABEL_10:
        (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
      }
      if (v2[39] < 0)
        operator delete(*((void **)v2 + 2));
      operator delete(v2);
      v2 = v5;
      if (!v5)
        goto LABEL_2;
    }
    v6 = v2 + 40;
    v7 = 4;
    goto LABEL_10;
  }
LABEL_2:
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t sub_22323A20C(uint64_t a1)
{
  char *v2;
  void *v3;
  char *v5;
  char *v6;
  uint64_t v7;

  v2 = *(char **)(a1 + 16);
  if (v2)
  {
    while (1)
    {
      v5 = *(char **)v2;
      v6 = (char *)*((_QWORD *)v2 + 8);
      if (v6 == v2 + 40)
        break;
      if (v6)
      {
        v7 = 5;
LABEL_10:
        (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
      }
      if (v2[39] < 0)
        operator delete(*((void **)v2 + 2));
      operator delete(v2);
      v2 = v5;
      if (!v5)
        goto LABEL_2;
    }
    v6 = v2 + 40;
    v7 = 4;
    goto LABEL_10;
  }
LABEL_2:
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t sub_22323A2A4(uint64_t **a1, char *a2, uint64_t a3, uint64_t a4, _QWORD *a5, int a6, uint64_t a7)
{
  char v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void *__p[2];
  void *v27;
  void *v28[2];
  void *v29;
  int v30;
  void *v31;
  uint64_t v32;
  char v33;
  uint64_t *v34;

  v34 = *a1;
  if (a6)
  {
    v32 = 0;
    v11 = 8;
    v12 = 0x726567676F4C794DLL;
    v13 = 1;
  }
  else
  {
    v13 = 0;
    v11 = 5;
    v12 = 0x7D66666F7BLL;
  }
  v30 = v13;
  v31 = (void *)v12;
  v33 = v11;
  sub_223241840((uint64_t)v28, a3);
  sub_223241F10((uint64_t)__p, a4);
  v14 = sub_223237580(&v34, a2, &v30, (uint64_t)v28, (uint64_t)__p, a5, a7);
  v15 = (char *)v27;
  if (v27)
  {
    while (1)
    {
      v20 = *(char **)v15;
      v21 = (char *)*((_QWORD *)v15 + 8);
      if (v21 == v15 + 40)
        break;
      if (v21)
      {
        v22 = 5;
LABEL_18:
        (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
      }
      if (v15[39] < 0)
        operator delete(*((void **)v15 + 2));
      operator delete(v15);
      v15 = v20;
      if (!v20)
        goto LABEL_5;
    }
    v21 = v15 + 40;
    v22 = 4;
    goto LABEL_18;
  }
LABEL_5:
  v16 = __p[0];
  __p[0] = 0;
  if (v16)
    operator delete(v16);
  v17 = (char *)v29;
  if (v29)
  {
    while (1)
    {
      v23 = *(char **)v17;
      v24 = (char *)*((_QWORD *)v17 + 8);
      if (v24 == v17 + 40)
        break;
      if (v24)
      {
        v25 = 5;
LABEL_26:
        (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
      }
      if (v17[39] < 0)
        operator delete(*((void **)v17 + 2));
      operator delete(v17);
      v17 = v23;
      if (!v23)
        goto LABEL_8;
    }
    v24 = v17 + 40;
    v25 = 4;
    goto LABEL_26;
  }
LABEL_8:
  v18 = v28[0];
  v28[0] = 0;
  if (v18)
    operator delete(v18);
  if (v33 < 0)
    operator delete(v31);
  return v14;
}

void sub_22323A470(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_22323A174((uint64_t)va);
  sub_22323A20C((uint64_t)va1);
  if (*(char *)(v2 - 41) < 0)
    operator delete(*(void **)(v2 - 64));
  _Unwind_Resume(a1);
}

uint64_t *sub_22323A4AC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CA760);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2540CA760))
    return &qword_2540CA808;
  sub_223174DE4(&qword_2540CA808, "# ----------------------------------------\n# Root Logger:\n# ----------------------------------------\n# (Avoid using the root logger in your program directly, but create\n#  a child logger instead, since other libraries may overwrite the\n#  root logger with a conflicting configuration)\n");
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2540CA808, &dword_22314D000);
  __cxa_guard_release(&qword_2540CA760);
  return &qword_2540CA808;
}

void sub_22323A538(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CA760);
  _Unwind_Resume(a1);
}

uint64_t *sub_22323A550()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CA768);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2540CA768))
    return &qword_2540CA820;
  sub_223174DE4(&qword_2540CA820, "# ----------------------------------------\n# Appenders:\n# ----------------------------------------\n# Appenders can have any name and can be used by multiple loggers.\n\n# ConsoleAppender logs to stdout/stderr\ntlog.appender.Console=tlog.ConsoleAppender\ntlog.appender.Console.layout=tlog.PatternLayout\ntlog.appender.Console.levelFilter=ALL\n# Verbose Pattern:\ntlog.appender.Console.layout.conversionPattern=%d [%t] %p %c (%F:%L,%f):%m%n\n# Brief Pattern:\n#tlog.appender.Console.layout.conversionPattern=%r %p %c (%F:%L):%m%n\n\n# FileAppender logs to a log file\ntlog.appender.LogFile=tlog.FileAppender\ntlog.appender.LogFile.filePath=Log.txt\ntlog.appender.LogFile.maxFileSize=1MB\n"
    "tlog.appender.LogFile.maxBackupIndex=10\n"
    "tlog.appender.LogFile.layout=tlog.PatternLayout\n"
    "tlog.appender.LogFile.layout.ConversionPattern=%d [%t] %p %c (%F:%L,%f):%m%n\n"
    "tlog.appender.LogFile.levelFilter=ALL\n");
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2540CA820, &dword_22314D000);
  __cxa_guard_release(&qword_2540CA768);
  return &qword_2540CA820;
}

void sub_22323A5DC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CA768);
  _Unwind_Resume(a1);
}

uint64_t *sub_22323A5F4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CA770);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2540CA770))
    return &qword_2540CA838;
  sub_223174DE4(&qword_2540CA838, "# ----------------------------------------\n# Parameter Cheatsheet:\n# ----------------------------------------\n\n# Log levels:\n# TRACE, DEBUG, INFO, WARN, ERROR, FATAL\n# NONE (default for non-root) will use the closest parent's log level\n\n# Parameter tokens (optional logger parameters after {Log Level}):\n# CLEAR : deletes existing appenders of the logger before adding new ones\n\n# Log level filters (for PatternLayout.levelFilter):\n# TRACE, DEBUG, INFO, WARN, ERROR, FATAL, ALL, NONE,\n# TRACE_TO_FATAL, ... , ERROR_TO_FATAL\n\n# Pattern Format string tokens (for PatternLayout.conversionPattern):\n# %d : local date in ISO 8601 format (YYYY-MM-DD HH:MM:SS,mmm)\n# %r : milliseconds since creation of the first pattern formatter until creation\n"
    "#      of the logging event\n"
    "# %t : thread identification (hash of this_thread::thread_id)\n"
    "# %p : priority (log level)\n"
    "# %c : category of the message (logger name)\n"
    "# %m : log message\n"
    "# %n : system specific line separator\n"
    "# %F : file where the log was requested\n"
    "# %L : line number where the log was requested\n"
    "# %f : function where the log was requested\n"
    "# %% : a single %-sign");
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2540CA838, &dword_22314D000);
  __cxa_guard_release(&qword_2540CA770);
  return &qword_2540CA838;
}

void sub_22323A680(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CA770);
  _Unwind_Resume(a1);
}

uint64_t *sub_22323A698()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CA778);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2540CA778))
    return &qword_2540CA850;
  sub_223174DE4(&qword_2540CA850, "# ----------------------------------------\n# Logger Configuration:\n# ----------------------------------------\n# Configure loggers of the hierarchy with:\n#    'tlog.logger.{name}={LogLevel}, [CLEAR], [{Appender}, ..]'\n\n# Level NONE is default for all loggers and makes them use their parent's log level\n# The optional token 'CLEAR' will remove all appenders from the logger if it already exists\n# Every logger will always use all appenders of all it's parents.\n");
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2540CA850, &dword_22314D000);
  __cxa_guard_release(&qword_2540CA778);
  return &qword_2540CA850;
}

void sub_22323A724(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CA778);
  _Unwind_Resume(a1);
}

__n128 sub_22323A73C@<Q0>(std::string *this@<X1>, uint64_t a2@<X0>, std::string *a3@<X8>)
{
  int v4;
  const std::string::value_type *v5;
  std::string::size_type v6;
  __n128 *v7;
  __n128 result;

  v4 = *(char *)(a2 + 23);
  if (v4 >= 0)
    v5 = (const std::string::value_type *)a2;
  else
    v5 = *(const std::string::value_type **)a2;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  v7 = (__n128 *)std::string::insert(this, 0, v5, v6);
  result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

char *sub_22323A794(char *__dst, __int128 *a2, uint64_t a3)
{
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;

  if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
    v5 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
    v6 = (_QWORD *)(a3 + 24);
    v7 = *(_QWORD *)(a3 + 24);
    if (v7)
      goto LABEL_3;
LABEL_6:
    v6 = __dst + 48;
    goto LABEL_7;
  }
  sub_223197FA4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  v6 = (_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(a3 + 24);
  if (!v7)
    goto LABEL_6;
LABEL_3:
  if (v7 != a3)
  {
    *((_QWORD *)__dst + 6) = v7;
LABEL_7:
    *v6 = 0;
    return __dst;
  }
  *((_QWORD *)__dst + 6) = __dst + 24;
  (*(void (**)(_QWORD))(*(_QWORD *)*v6 + 24))(*v6);
  return __dst;
}

uint64_t sub_22323A83C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 56 * a3;
    do
    {
      sub_223241980(a1, a2, a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_22323A8A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  if (v3)
    sub_224574C4C(v3);
  sub_224574C34((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_22323A8C0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 24);
  v3 = *(_QWORD **)(a1 + 48);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_22323A930(char *__dst, __int128 *a2, uint64_t a3)
{
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;

  if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
    v5 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
    v6 = (_QWORD *)(a3 + 24);
    v7 = *(_QWORD *)(a3 + 24);
    if (v7)
      goto LABEL_3;
LABEL_6:
    v6 = __dst + 48;
    goto LABEL_7;
  }
  sub_223197FA4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  v6 = (_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(a3 + 24);
  if (!v7)
    goto LABEL_6;
LABEL_3:
  if (v7 != a3)
  {
    *((_QWORD *)__dst + 6) = v7;
LABEL_7:
    *v6 = 0;
    return __dst;
  }
  *((_QWORD *)__dst + 6) = __dst + 24;
  (*(void (**)(_QWORD))(*(_QWORD *)*v6 + 24))(*v6);
  return __dst;
}

uint64_t sub_22323A9D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 56 * a3;
    do
    {
      sub_223242050(a1, a2, a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_22323AA3C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  if (v3)
    sub_224574C4C(v3);
  sub_224574C34((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_22323AA5C(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v3;
  int v4;
  char *v7;
  __darwin_ct_rune_t v8;
  __darwin_ct_rune_t v9;
  __darwin_ct_rune_t v10;
  __darwin_ct_rune_t v11;
  __darwin_ct_rune_t v12;
  __darwin_ct_rune_t v13;
  __darwin_ct_rune_t v14;
  __darwin_ct_rune_t v15;
  __darwin_ct_rune_t v16;
  __darwin_ct_rune_t v17;
  __darwin_ct_rune_t v18;
  __darwin_ct_rune_t v19;
  __darwin_ct_rune_t v20;
  __darwin_ct_rune_t v21;
  __darwin_ct_rune_t v22;
  __darwin_ct_rune_t v23;
  __darwin_ct_rune_t v24;
  char v25;
  uint64_t result;
  __int128 v27;
  __int128 *v28;
  size_t v29;

  v3 = *(unsigned __int8 *)(a2 + 23);
  v4 = (char)v3;
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a2 + 8);
  if (v3 != 17)
    return 1;
  v7 = v4 >= 0 ? (char *)a2 : *(char **)a2;
  v8 = __tolower(*v7);
  if (v8 != __tolower(67))
    return 1;
  v9 = __tolower(v7[1]);
  if (v9 != __tolower(111))
    return 1;
  v10 = __tolower(v7[2]);
  if (v10 != __tolower(110))
    return 1;
  v11 = __tolower(v7[3]);
  if (v11 != __tolower(118))
    return 1;
  v12 = __tolower(v7[4]);
  if (v12 != __tolower(101))
    return 1;
  v13 = __tolower(v7[5]);
  if (v13 != __tolower(114))
    return 1;
  v14 = __tolower(v7[6]);
  if (v14 != __tolower(115))
    return 1;
  v15 = __tolower(v7[7]);
  if (v15 != __tolower(105))
    return 1;
  v16 = __tolower(v7[8]);
  if (v16 != __tolower(111))
    return 1;
  v17 = __tolower(v7[9]);
  if (v17 != __tolower(110))
    return 1;
  v18 = __tolower(v7[10]);
  if (v18 != __tolower(80))
    return 1;
  v19 = __tolower(v7[11]);
  if (v19 != __tolower(97))
    return 1;
  v20 = __tolower(v7[12]);
  if (v20 != __tolower(116))
    return 1;
  v21 = __tolower(v7[13]);
  if (v21 != __tolower(116))
    return 1;
  v22 = __tolower(v7[14]);
  if (v22 != __tolower(101))
    return 1;
  v23 = __tolower(v7[15]);
  if (v23 != __tolower(114))
    return 1;
  v24 = __tolower(v7[16]);
  if (v24 != __tolower(110))
    return 1;
  if ((__int128 *)(a1 + 16) == a3)
    return 0;
  v25 = *((_BYTE *)a3 + 23);
  if ((*(char *)(a1 + 39) & 0x80000000) == 0)
  {
    if ((*((_BYTE *)a3 + 23) & 0x80) == 0)
    {
      result = 0;
      v27 = *a3;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a3 + 2);
      *(_OWORD *)(a1 + 16) = v27;
      return result;
    }
    sub_22319C3F4((_QWORD *)(a1 + 16), *(void **)a3, *((_QWORD *)a3 + 1));
    return 0;
  }
  if (v25 >= 0)
    v28 = a3;
  else
    v28 = *(__int128 **)a3;
  if (v25 >= 0)
    v29 = *((unsigned __int8 *)a3 + 23);
  else
    v29 = *((_QWORD *)a3 + 1);
  sub_22319C4B8((void **)(a1 + 16), v28, v29);
  return 0;
}

uint64_t sub_22323AD1C(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  char *v9;
  __darwin_ct_rune_t v10;
  __darwin_ct_rune_t v11;
  __darwin_ct_rune_t v12;
  __darwin_ct_rune_t v13;
  __darwin_ct_rune_t v14;
  __darwin_ct_rune_t v15;
  __darwin_ct_rune_t v16;
  __darwin_ct_rune_t v17;
  __darwin_ct_rune_t v18;
  __darwin_ct_rune_t v19;
  __darwin_ct_rune_t v20;
  _BOOL4 v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  size_t v27;
  _QWORD *v28;
  _QWORD *v29;
  int v30;

  v4 = *(unsigned __int8 *)(a2 + 23);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 8);
  if (v4 != 11)
    return 1;
  v9 = v5 >= 0 ? (char *)a2 : *(char **)a2;
  v10 = __tolower(*v9);
  if (v10 != __tolower(76))
    return 1;
  v11 = __tolower(v9[1]);
  if (v11 != __tolower(101))
    return 1;
  v12 = __tolower(v9[2]);
  if (v12 != __tolower(118))
    return 1;
  v13 = __tolower(v9[3]);
  if (v13 != __tolower(101))
    return 1;
  v14 = __tolower(v9[4]);
  if (v14 != __tolower(108))
    return 1;
  v15 = __tolower(v9[5]);
  if (v15 != __tolower(70))
    return 1;
  v16 = __tolower(v9[6]);
  if (v16 != __tolower(105))
    return 1;
  v17 = __tolower(v9[7]);
  if (v17 != __tolower(108))
    return 1;
  v18 = __tolower(v9[8]);
  if (v18 != __tolower(116))
    return 1;
  v19 = __tolower(v9[9]);
  if (v19 != __tolower(101))
    return 1;
  v20 = __tolower(v9[10]);
  if (v20 != __tolower(114))
    return 1;
  v30 = 63;
  v21 = sub_2232339D8(&v30, a3, a4);
  v22 = sub_22323400C(!v21, a4);
  v23 = sub_2231813E8(v22, (uint64_t)"ConsoleAppenderConfigurator::setParameterValue(): ", 50);
  v24 = sub_2231813E8(v23, (uint64_t)"Invalid expression (unknown right identificator ", 48);
  if (a3[23] < 0)
  {
    if (*((_QWORD *)a3 + 1))
      a3 = *(char **)a3;
    else
      a3 = "{empty string}";
  }
  else if (!a3[23])
  {
    a3 = "{empty string}";
  }
  v27 = strlen(a3);
  v28 = sub_2231813E8(v24, (uint64_t)a3, v27);
  v25 = 2;
  v29 = sub_2231813E8(v28, (uint64_t)") ", 2);
  sub_2231813E8(v29, (uint64_t)"Expected collection of log levels (NONE, TRACE... FATAL) separated by commas or given as 'XXX_TO_FATAL')", 104);
  if (v21)
  {
    v25 = 0;
    *(_DWORD *)(*(_QWORD *)(a1 + 8) + 24) = v30;
  }
  return v25;
}

uint64_t sub_22323AF8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  char *v8;
  __darwin_ct_rune_t v9;
  __darwin_ct_rune_t v10;
  __darwin_ct_rune_t v11;
  __darwin_ct_rune_t v12;
  __darwin_ct_rune_t v13;
  __darwin_ct_rune_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  void **v21;
  void *v22;
  void *__p;
  void **v25;
  uint64_t v26;
  uint64_t v27;

  __p = 0;
  v25 = 0;
  v26 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a3 + 32))(a3, &__p);
  v6 = *(unsigned __int8 *)(a2 + 23);
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a2 + 8);
  if (v6 != 6
    || (v7 >= 0 ? (v8 = (char *)a2) : (v8 = *(char **)a2),
        (v9 = __tolower(*v8), v9 != __tolower(76))
     || (v10 = __tolower(v8[1]), v10 != __tolower(97))
     || (v11 = __tolower(v8[2]), v11 != __tolower(121))
     || (v12 = __tolower(v8[3]), v12 != __tolower(111))
     || (v13 = __tolower(v8[4]), v13 != __tolower(117))
     || (v14 = __tolower(v8[5]), v14 != __tolower(116))))
  {
    v19 = 1;
    v20 = (void **)__p;
    if (!__p)
      return v19;
    goto LABEL_20;
  }
  if (!sub_22323B1B4(a3))
  {
    v19 = 3;
    v20 = (void **)__p;
    if (!__p)
      return v19;
    goto LABEL_20;
  }
  v15 = *(_QWORD *)(a1 + 8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a3 + 48))(&v27, a3);
  v16 = v27;
  v27 = 0;
  v17 = *(_QWORD *)(v15 + 16);
  *(_QWORD *)(v15 + 16) = v16;
  if (v17)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v18 = v27;
    v27 = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = 0;
  v20 = (void **)__p;
  if (__p)
  {
LABEL_20:
    v21 = v25;
    v22 = v20;
    if (v25 != v20)
    {
      do
      {
        if (*((char *)v21 - 1) < 0)
          operator delete(*(v21 - 3));
        v21 -= 3;
      }
      while (v21 != v20);
      v22 = __p;
    }
    v25 = v20;
    operator delete(v22);
  }
  return v19;
}

void sub_22323B178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_22319BB48(&a9);
  _Unwind_Resume(a1);
}

void sub_22323B18C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_22319BB48(&a9);
  _Unwind_Resume(a1);
}

void sub_22323B1A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_22319BB48(&a9);
  _Unwind_Resume(a1);
}

BOOL sub_22323B1B4(uint64_t a1)
{
  unsigned __int8 v1;
  char *v2;
  char *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;
  __darwin_ct_rune_t v9;
  char *v10;
  void **v11;
  void *v12;
  void **v13;
  uint64_t v15;
  int v16;
  void *__p;
  char *v18;
  uint64_t v19;

  v1 = atomic_load((unsigned __int8 *)&qword_25578AD08);
  if ((v1 & 1) == 0)
  {
    v15 = a1;
    v16 = __cxa_guard_acquire(&qword_25578AD08);
    a1 = v15;
    if (v16)
    {
      unk_25578AD00 = 0x700000000000000;
      xmmword_25578ACF0 = *(_OWORD *)"ILayout";
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578ACF0, &dword_22314D000);
      __cxa_guard_release(&qword_25578AD08);
      a1 = v15;
    }
  }
  __p = 0;
  v18 = 0;
  v19 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 32))(a1, &__p);
  v2 = (char *)__p;
  v3 = v18;
  if (__p == v18)
  {
    v11 = (void **)__p;
    v10 = (char *)__p;
    if (__p)
    {
LABEL_23:
      v12 = v2;
      if (v2 != (char *)v11)
      {
        v13 = (void **)v2;
        do
        {
          if (*((char *)v13 - 1) < 0)
            operator delete(*(v13 - 3));
          v13 -= 3;
        }
        while (v13 != v11);
        v12 = __p;
      }
      v18 = (char *)v11;
      operator delete(v12);
    }
  }
  else
  {
    do
    {
      v4 = v2[23];
      if (v4 >= 0)
        v5 = v2[23];
      else
        v5 = *((_QWORD *)v2 + 1);
      v6 = byte_25578AD07;
      if (byte_25578AD07 < 0)
        v6 = *((_QWORD *)&xmmword_25578ACF0 + 1);
      if (v5 == v6)
      {
        if (v4 >= 0)
          v7 = v2;
        else
          v7 = *(char **)v2;
        if (!v5)
        {
LABEL_20:
          v10 = v2;
          v11 = (void **)__p;
          v2 = v18;
          if (__p)
            goto LABEL_23;
          return v10 != v2;
        }
        if (byte_25578AD07 >= 0)
          v8 = &xmmword_25578ACF0;
        else
          v8 = (__int128 *)xmmword_25578ACF0;
        while (1)
        {
          v9 = __tolower(*v7);
          if (v9 != __tolower(*(char *)v8))
            break;
          ++v7;
          v8 = (__int128 *)((char *)v8 + 1);
          if (!--v5)
            goto LABEL_20;
        }
      }
      v2 += 24;
    }
    while (v2 != v3);
    v10 = v3;
    v11 = (void **)__p;
    v2 = v18;
    if (__p)
      goto LABEL_23;
  }
  return v10 != v2;
}

void sub_22323B398(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319BB48((void **)va);
  _Unwind_Resume(a1);
}

void sub_22323B3AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319BB48((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_22323B3C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v8;
  int v9;
  char *v10;
  __darwin_ct_rune_t v11;
  __darwin_ct_rune_t v12;
  __darwin_ct_rune_t v13;
  __darwin_ct_rune_t v14;
  __darwin_ct_rune_t v15;
  __darwin_ct_rune_t v16;
  __darwin_ct_rune_t v17;
  __darwin_ct_rune_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char *v22;
  __darwin_ct_rune_t v23;
  __darwin_ct_rune_t v24;
  __darwin_ct_rune_t v25;
  __darwin_ct_rune_t v26;
  __darwin_ct_rune_t v27;
  __darwin_ct_rune_t v28;
  __darwin_ct_rune_t v29;
  __darwin_ct_rune_t v30;
  __darwin_ct_rune_t v31;
  __darwin_ct_rune_t v32;
  __darwin_ct_rune_t v33;
  uint64_t v34;
  char v35;
  __int128 *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 *p_dst;
  unint64_t v40;
  uint64_t v41;
  int v42;
  char *v43;
  __darwin_ct_rune_t v44;
  __darwin_ct_rune_t v45;
  __darwin_ct_rune_t v46;
  __darwin_ct_rune_t v47;
  __darwin_ct_rune_t v48;
  __darwin_ct_rune_t v49;
  __darwin_ct_rune_t v50;
  __darwin_ct_rune_t v51;
  __darwin_ct_rune_t v52;
  __darwin_ct_rune_t v53;
  __darwin_ct_rune_t v54;
  __darwin_ct_rune_t v55;
  __darwin_ct_rune_t v56;
  __darwin_ct_rune_t v57;
  uint64_t v58;
  int v59;
  std::mutex *v60;
  uint64_t v61;
  int v62;
  char *v63;
  __darwin_ct_rune_t v64;
  __darwin_ct_rune_t v65;
  __darwin_ct_rune_t v66;
  __darwin_ct_rune_t v67;
  __darwin_ct_rune_t v68;
  __darwin_ct_rune_t v69;
  __darwin_ct_rune_t v70;
  __darwin_ct_rune_t v71;
  __darwin_ct_rune_t v72;
  __darwin_ct_rune_t v73;
  __darwin_ct_rune_t v74;
  _BOOL4 v75;
  BOOL v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  char *v81;
  uint64_t v82;
  __int128 *v83;
  char *v84;
  size_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  __int128 *v89;
  char *v90;
  unint64_t v91;
  __int128 *v92;
  char *v93;
  uint64_t v94;
  __int128 *v95;
  char *v96;
  uint64_t v97;
  __int128 *v98;
  char *v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int128 *v105;
  char v106;
  unint64_t v107;
  _QWORD v108[13];
  char v109;
  uint64_t v110;
  __int128 __dst;
  uint64_t v112;

  v5 = (const char *)a3;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_223197FA4(&__dst, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    __dst = *(_OWORD *)a3;
    v112 = *(_QWORD *)(a3 + 16);
  }
  v8 = *(unsigned __int8 *)(a2 + 23);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a2 + 8);
  if (v8 == 8)
  {
    v10 = v9 >= 0 ? (char *)a2 : *(char **)a2;
    v11 = __tolower(*v10);
    if (v11 == __tolower(70))
    {
      v12 = __tolower(v10[1]);
      if (v12 == __tolower(105))
      {
        v13 = __tolower(v10[2]);
        if (v13 == __tolower(108))
        {
          v14 = __tolower(v10[3]);
          if (v14 == __tolower(101))
          {
            v15 = __tolower(v10[4]);
            if (v15 == __tolower(80))
            {
              v16 = __tolower(v10[5]);
              if (v16 == __tolower(97))
              {
                v17 = __tolower(v10[6]);
                if (v17 == __tolower(116))
                {
                  v18 = __tolower(v10[7]);
                  if (v18 == __tolower(104))
                  {
                    sub_223233588(*(_QWORD *)(a1 + 8), (void **)&__dst);
LABEL_19:
                    v19 = 0;
                    goto LABEL_88;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v20 = *(unsigned __int8 *)(a2 + 23);
  v21 = (char)v20;
  if ((v20 & 0x80u) != 0)
    v20 = *(_QWORD *)(a2 + 8);
  if (v20 == 11)
  {
    v22 = v21 >= 0 ? (char *)a2 : *(char **)a2;
    v23 = __tolower(*v22);
    if (v23 == __tolower(77))
    {
      v24 = __tolower(v22[1]);
      if (v24 == __tolower(97))
      {
        v25 = __tolower(v22[2]);
        if (v25 == __tolower(120))
        {
          v26 = __tolower(v22[3]);
          if (v26 == __tolower(70))
          {
            v27 = __tolower(v22[4]);
            if (v27 == __tolower(105))
            {
              v28 = __tolower(v22[5]);
              if (v28 == __tolower(108))
              {
                v29 = __tolower(v22[6]);
                if (v29 == __tolower(101))
                {
                  v30 = __tolower(v22[7]);
                  if (v30 == __tolower(83))
                  {
                    v31 = __tolower(v22[8]);
                    if (v31 == __tolower(105))
                    {
                      v32 = __tolower(v22[9]);
                      if (v32 == __tolower(122))
                      {
                        v33 = __tolower(v22[10]);
                        if (v33 == __tolower(101))
                        {
                          v34 = HIBYTE(v112);
                          v35 = HIBYTE(v112);
                          v37 = *((_QWORD *)&__dst + 1);
                          v36 = (__int128 *)__dst;
                          if (v112 >= 0)
                            v38 = HIBYTE(v112);
                          else
                            v38 = *((_QWORD *)&__dst + 1);
                          if (v112 >= 0)
                            p_dst = &__dst;
                          else
                            p_dst = (__int128 *)__dst;
                          if (v38 >= 2)
                          {
                            v106 = HIBYTE(v112);
                            v105 = (__int128 *)__dst;
                            v81 = (char *)p_dst + v38;
                            v40 = 1;
                            v82 = v38;
                            v83 = p_dst;
                            while (1)
                            {
                              v84 = (char *)memchr(v83, 75, v82 - 1);
                              if (!v84)
                                goto LABEL_115;
                              if (*(_WORD *)v84 == 16971)
                                break;
                              v83 = (__int128 *)(v84 + 1);
                              v82 = v81 - (char *)v83;
                              if (v81 - (char *)v83 < 2)
                                goto LABEL_115;
                            }
                            v40 = 1;
                            if (v84 == v81)
                            {
LABEL_115:
                              v36 = v105;
                              v35 = v106;
                            }
                            else
                            {
                              v36 = v105;
                              v35 = v106;
                              if (v84 - (char *)p_dst != -1)
                              {
                                v88 = v38;
                                v89 = p_dst;
                                do
                                {
                                  if (v88 == 1)
                                    break;
                                  v90 = (char *)memchr(v89, 75, v88 - 1);
                                  if (!v90)
                                    break;
                                  if (*(_WORD *)v90 == 16971)
                                    goto LABEL_110;
                                  v89 = (__int128 *)(v90 + 1);
                                  v88 = v81 - (char *)v89;
                                }
                                while (v81 - (char *)v89 > 1);
                                v90 = (char *)p_dst + v38;
LABEL_110:
                                if (v90 == v81)
                                  v91 = -1;
                                else
                                  v91 = v90 - (char *)p_dst;
                                if (v38 < v91)
                                  goto LABEL_148;
                                sub_22323D254(&__dst, v91, 2uLL);
                                v34 = HIBYTE(v112);
                                v37 = *((_QWORD *)&__dst + 1);
                                v36 = (__int128 *)__dst;
                                v40 = 1024;
                                v35 = HIBYTE(v112);
                              }
                            }
                          }
                          else
                          {
                            v40 = 1;
                          }
                          if (v35 >= 0)
                          {
                            v92 = &__dst;
                          }
                          else
                          {
                            v34 = v37;
                            v92 = v36;
                          }
                          if (v34 < 2)
                            goto LABEL_138;
                          v93 = (char *)v92 + v34;
                          v94 = v34;
                          v95 = v92;
                          while (1)
                          {
                            v96 = (char *)memchr(v95, 77, v94 - 1);
                            if (!v96)
                              goto LABEL_138;
                            if (*(_WORD *)v96 == 16973)
                              break;
                            v95 = (__int128 *)(v96 + 1);
                            v94 = v93 - (char *)v95;
                            if (v93 - (char *)v95 < 2)
                              goto LABEL_138;
                          }
                          if (v96 == v93 || v96 - (char *)v92 == -1)
                            goto LABEL_138;
                          v97 = v34;
                          v98 = v92;
                          do
                          {
                            if (v97 == 1)
                              break;
                            v99 = (char *)memchr(v98, 77, v97 - 1);
                            if (!v99)
                              break;
                            if (*(_WORD *)v99 == 16973)
                              goto LABEL_133;
                            v98 = (__int128 *)(v99 + 1);
                            v97 = v93 - (char *)v98;
                          }
                          while (v93 - (char *)v98 > 1);
                          v99 = (char *)v92 + v34;
LABEL_133:
                          if (v99 == v93)
                            v100 = -1;
                          else
                            v100 = v99 - (char *)v92;
                          if (v34 >= v100)
                          {
                            sub_22323D254(&__dst, v100, 2uLL);
                            v40 = 0x100000;
LABEL_138:
                            sub_22322E364((uint64_t)v108, &__dst, 24);
                            v107 = 0;
                            MEMORY[0x2276845A4](v108, &v107);
                            if (is_mul_ok(v40, v107))
                              v101 = v107 * v40;
                            else
                              v101 = -1;
                            v107 = v101;
                            v102 = *(_QWORD *)(a1 + 8);
                            v60 = *(std::mutex **)(v102 + 16);
                            std::mutex::lock(v60);
                            if (v101)
                              v103 = v101;
                            else
                              v103 = -1;
                            *(_QWORD *)(v102 + 64) = v103;
                            goto LABEL_145;
                          }
LABEL_148:
                          sub_2231A39C0();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v41 = *(unsigned __int8 *)(a2 + 23);
  v42 = (char)v41;
  if ((v41 & 0x80u) != 0)
    v41 = *(_QWORD *)(a2 + 8);
  if (v41 == 14)
  {
    v43 = v42 >= 0 ? (char *)a2 : *(char **)a2;
    v44 = __tolower(*v43);
    if (v44 == __tolower(77))
    {
      v45 = __tolower(v43[1]);
      if (v45 == __tolower(97))
      {
        v46 = __tolower(v43[2]);
        if (v46 == __tolower(120))
        {
          v47 = __tolower(v43[3]);
          if (v47 == __tolower(66))
          {
            v48 = __tolower(v43[4]);
            if (v48 == __tolower(97))
            {
              v49 = __tolower(v43[5]);
              if (v49 == __tolower(99))
              {
                v50 = __tolower(v43[6]);
                if (v50 == __tolower(107))
                {
                  v51 = __tolower(v43[7]);
                  if (v51 == __tolower(117))
                  {
                    v52 = __tolower(v43[8]);
                    if (v52 == __tolower(112))
                    {
                      v53 = __tolower(v43[9]);
                      if (v53 == __tolower(73))
                      {
                        v54 = __tolower(v43[10]);
                        if (v54 == __tolower(110))
                        {
                          v55 = __tolower(v43[11]);
                          if (v55 == __tolower(100))
                          {
                            v56 = __tolower(v43[12]);
                            if (v56 == __tolower(101))
                            {
                              v57 = __tolower(v43[13]);
                              if (v57 == __tolower(120))
                              {
                                sub_22322E364((uint64_t)v108, &__dst, 24);
                                LODWORD(v107) = 0;
                                MEMORY[0x22768458C](v108, &v107);
                                v58 = *(_QWORD *)(a1 + 8);
                                v59 = v107;
                                v60 = *(std::mutex **)(v58 + 16);
                                std::mutex::lock(v60);
                                *(_DWORD *)(v58 + 72) = v59 & ~(v59 >> 31);
LABEL_145:
                                std::mutex::unlock(v60);
                                v108[0] = *MEMORY[0x24BEDB7F0];
                                v104 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                                *(_QWORD *)((char *)v108 + *(_QWORD *)(v108[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                                v108[2] = v104;
                                v108[3] = MEMORY[0x24BEDB848] + 16;
                                if (v109 < 0)
                                  operator delete((void *)v108[11]);
                                std::streambuf::~streambuf();
                                std::iostream::~basic_iostream();
                                MEMORY[0x227684BE0](&v110);
                                goto LABEL_19;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v61 = *(unsigned __int8 *)(a2 + 23);
  v62 = (char)v61;
  if ((v61 & 0x80u) != 0)
    v61 = *(_QWORD *)(a2 + 8);
  if (v61 != 11)
    goto LABEL_87;
  v63 = v62 >= 0 ? (char *)a2 : *(char **)a2;
  v64 = __tolower(*v63);
  if (v64 != __tolower(76))
    goto LABEL_87;
  v65 = __tolower(v63[1]);
  if (v65 != __tolower(101))
    goto LABEL_87;
  v66 = __tolower(v63[2]);
  if (v66 != __tolower(118))
    goto LABEL_87;
  v67 = __tolower(v63[3]);
  if (v67 != __tolower(101))
    goto LABEL_87;
  v68 = __tolower(v63[4]);
  if (v68 == __tolower(108)
    && (v69 = __tolower(v63[5]), v69 == __tolower(70))
    && (v70 = __tolower(v63[6]), v70 == __tolower(105))
    && (v71 = __tolower(v63[7]), v71 == __tolower(108))
    && (v72 = __tolower(v63[8]), v72 == __tolower(116))
    && (v73 = __tolower(v63[9]), v73 == __tolower(101))
    && (v74 = __tolower(v63[10]), v74 == __tolower(114)))
  {
    LODWORD(v108[0]) = 63;
    v75 = sub_2232339D8(v108, (char *)&__dst, a4);
    v76 = v75;
    v77 = sub_22323400C(!v75, a4);
    v78 = sub_2231813E8(v77, (uint64_t)"FileAppenderConfigurator::setParameterValue(): ", 47);
    v79 = sub_2231813E8(v78, (uint64_t)"Invalid expression (unknown right identificator ", 48);
    if (v5[23] < 0)
    {
      if (*((_QWORD *)v5 + 1))
        v5 = *(const char **)v5;
      else
        v5 = "{empty string}";
    }
    else if (!v5[23])
    {
      v5 = "{empty string}";
    }
    v85 = strlen(v5);
    v86 = sub_2231813E8(v79, (uint64_t)v5, v85);
    v87 = sub_2231813E8(v86, (uint64_t)") ", 2);
    sub_2231813E8(v87, (uint64_t)"Expected collection of log levels (NONE, TRACE... FATAL) separated by commas or given as 'XXX_TO_FATAL')", 104);
    if (v76)
    {
      v19 = 0;
      *(_DWORD *)(*(_QWORD *)(a1 + 8) + 32) = v108[0];
    }
    else
    {
      v19 = 2;
    }
  }
  else
  {
LABEL_87:
    v19 = 1;
  }
LABEL_88:
  if (SHIBYTE(v112) < 0)
    operator delete((void *)__dst);
  return v19;
}

void sub_22323BDA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_223195348((uint64_t)va);
  if (*(char *)(v4 - 89) < 0)
    operator delete(*(void **)(v4 - 112));
  _Unwind_Resume(a1);
}

uint64_t sub_22323BDF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  char *v8;
  __darwin_ct_rune_t v9;
  __darwin_ct_rune_t v10;
  __darwin_ct_rune_t v11;
  __darwin_ct_rune_t v12;
  __darwin_ct_rune_t v13;
  __darwin_ct_rune_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  void **v21;
  void *v22;
  void *__p;
  void **v25;
  uint64_t v26;
  uint64_t v27;

  __p = 0;
  v25 = 0;
  v26 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a3 + 32))(a3, &__p);
  v6 = *(unsigned __int8 *)(a2 + 23);
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a2 + 8);
  if (v6 != 6
    || (v7 >= 0 ? (v8 = (char *)a2) : (v8 = *(char **)a2),
        (v9 = __tolower(*v8), v9 != __tolower(76))
     || (v10 = __tolower(v8[1]), v10 != __tolower(97))
     || (v11 = __tolower(v8[2]), v11 != __tolower(121))
     || (v12 = __tolower(v8[3]), v12 != __tolower(111))
     || (v13 = __tolower(v8[4]), v13 != __tolower(117))
     || (v14 = __tolower(v8[5]), v14 != __tolower(116))))
  {
    v19 = 1;
    v20 = (void **)__p;
    if (!__p)
      return v19;
    goto LABEL_20;
  }
  if (!sub_22323B1B4(a3))
  {
    v19 = 3;
    v20 = (void **)__p;
    if (!__p)
      return v19;
    goto LABEL_20;
  }
  v15 = *(_QWORD *)(a1 + 8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a3 + 48))(&v27, a3);
  v16 = v27;
  v27 = 0;
  v17 = *(_QWORD *)(v15 + 24);
  *(_QWORD *)(v15 + 24) = v16;
  if (v17)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v18 = v27;
    v27 = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = 0;
  v20 = (void **)__p;
  if (__p)
  {
LABEL_20:
    v21 = v25;
    v22 = v20;
    if (v25 != v20)
    {
      do
      {
        if (*((char *)v21 - 1) < 0)
          operator delete(*(v21 - 3));
        v21 -= 3;
      }
      while (v21 != v20);
      v22 = __p;
    }
    v25 = v20;
    operator delete(v22);
  }
  return v19;
}

void sub_22323BFE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_22319BB48(&a9);
  _Unwind_Resume(a1);
}

void sub_22323BFF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_22319BB48(&a9);
  _Unwind_Resume(a1);
}

void sub_22323C008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_22319BB48(&a9);
  _Unwind_Resume(a1);
}

const char *sub_22323C01C()
{
  return "";
}

char *sub_22323C028()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_255792C60);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255792C60))
    return aPatternlayout;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], aPatternlayout, &dword_22314D000);
  __cxa_guard_release(&qword_255792C60);
  return aPatternlayout;
}

const char *sub_22323C098()
{
  return "ConsoleAppender";
}

const char *sub_22323C0A4()
{
  return "ConsoleAppender";
}

const char *sub_22323C0B0()
{
  return "FileAppender";
}

const char *sub_22323C0BC()
{
  return "FileAppender";
}

void ***sub_22323C0C8(void ***result)
{
  void ***v1;
  void **v2;
  void *v3;
  uint64_t v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = **result;
    if (v3)
    {
      v4 = (uint64_t)v2[1];
      v5 = **v1;
      if ((void *)v4 != v3)
      {
        do
          v4 = sub_22322C8B4(v4 - 80);
        while ((void *)v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void sub_22323C150(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22323C174(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x227684CE8);
  return result;
}

uint64_t sub_22323C194(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4tlog8LogLevelEE27__shared_ptr_default_deleteIS2_S2_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4tlog8LogLevelEE27__shared_ptr_default_deleteIS2_S2_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4tlog8LogLevelEE27__shared_ptr_default_deleteIS2_S2_EE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4tlog8LogLevelEE27__shared_ptr_default_deleteIS2_S2_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t *sub_22323C204(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    sub_2231F823C(v2 + 128, *(_QWORD **)(v2 + 136));
    std::mutex::~mutex((std::mutex *)(v2 + 64));
    sub_2231F823C(v2 + 40, *(_QWORD **)(v2 + 48));
    v3 = *(_QWORD **)(v2 + 16);
    if (v3)
    {
      do
      {
        v4 = (_QWORD *)*v3;
        operator delete(v3);
        v3 = v4;
      }
      while (v4);
    }
    v5 = *(void **)v2;
    *(_QWORD *)v2 = 0;
    if (v5)
      operator delete(v5);
    JUMPOUT(0x227684CE8);
  }
  return result;
}

char *sub_22323C290(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;
  char *v13;
  void **v14;
  char *v16;
  char *v17;
  char *v18;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v5];
  v16 = v10;
  v17 = v10;
  v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_223197FA4(v10, *(void **)a2, *(_QWORD *)(a2 + 8));
    v3 = *a1;
    v4 = a1[1];
    v10 = v16;
    v11 = v17 + 24;
    if (v4 == *a1)
    {
LABEL_17:
      v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)a2;
    *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 16);
    v11 = v10 + 24;
    if (v4 == v3)
      goto LABEL_17;
  }
  do
  {
    v12 = *(_OWORD *)(v4 - 24);
    *((_QWORD *)v10 - 1) = *((_QWORD *)v4 - 1);
    *(_OWORD *)(v10 - 24) = v12;
    v10 -= 24;
    *((_QWORD *)v4 - 2) = 0;
    *((_QWORD *)v4 - 1) = 0;
    *((_QWORD *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  v13 = *a1;
  v3 = a1[1];
LABEL_18:
  *a1 = v10;
  a1[1] = v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0)
        operator delete(*v14);
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    v3 = v13;
  }
  if (v3)
    operator delete(v3);
  return v11;
}

void sub_22323C450(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319C040((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22323C464(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  BOOL v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;

  v4 = a1 + 17;
  v3 = (uint64_t *)a1[17];
  if (v3)
  {
    v5 = v4;
    v6 = v3;
    do
    {
      v7 = v6[4];
      v8 = v7 >= a2;
      if (v7 >= a2)
        v9 = (uint64_t **)v6;
      else
        v9 = (uint64_t **)(v6 + 1);
      if (v8)
        v5 = v6;
      v6 = *v9;
    }
    while (*v9);
    if (v5 != v4)
    {
      v10 = v5[4];
      if (v10 <= a2)
      {
        if (*(_BYTE *)(v10 + 8))
          --a1[19];
        v11 = (uint64_t *)v5[1];
        if (v11)
        {
          do
          {
            v12 = v11;
            v11 = (uint64_t *)*v11;
          }
          while (v11);
        }
        else
        {
          v13 = v5;
          do
          {
            v12 = (uint64_t *)v13[2];
            v14 = *v12 == (_QWORD)v13;
            v13 = v12;
          }
          while (!v14);
        }
        if ((uint64_t *)a1[16] == v5)
          a1[16] = v12;
        --a1[18];
        sub_2231AFE60(v3, v5);
        v15 = (std::__shared_weak_count *)v5[6];
        if (!v15)
          goto LABEL_27;
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
          operator delete(v5);
        }
        else
        {
LABEL_27:
          operator delete(v5);
        }
      }
    }
  }
}

_OWORD *sub_22323C584(uint64_t a1, __int128 *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  _OWORD *v16;
  __int128 v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = ((uint64_t)v4 - *(_QWORD *)a1) >> 4;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60)
    sub_22316E078();
  v7 = *(_QWORD *)(a1 + 16) - (_QWORD)v3;
  if (v7 >> 3 > v6)
    v6 = v7 >> 3;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0)
    v6 = 0xFFFFFFFFFFFFFFFLL;
  if (v6 >> 60)
    sub_223174E94();
  v9 = 16 * v6;
  v10 = (char *)operator new(16 * v6);
  v11 = &v10[16 * v5];
  v12 = *a2;
  *(_OWORD *)v11 = *a2;
  if (*((_QWORD *)&v12 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v3 = *(_QWORD **)a1;
    v4 = *(_QWORD **)(a1 + 8);
  }
  v15 = &v10[v9];
  v16 = v11 + 16;
  if (v4 == v3)
  {
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v16;
    *(_QWORD *)(a1 + 16) = v15;
    if (!v3)
      return v16;
    goto LABEL_23;
  }
  do
  {
    v17 = *((_OWORD *)v4 - 1);
    v4 -= 2;
    *((_OWORD *)v11 - 1) = v17;
    v11 -= 16;
    *v4 = 0;
    v4[1] = 0;
  }
  while (v4 != v3);
  v18 = *(_QWORD **)a1;
  v3 = *(_QWORD **)(a1 + 8);
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v16;
  *(_QWORD *)(a1 + 16) = v15;
  if (v3 != v18)
  {
    do
    {
      v19 = (std::__shared_weak_count *)*(v3 - 1);
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v3 -= 2;
    }
    while (v3 != v18);
    v3 = v18;
  }
  if (v3)
LABEL_23:
    operator delete(v3);
  return v16;
}

void sub_22323C6E4(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  BOOL v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  size_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  _OWORD *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  _OWORD *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  void *v90;
  void *v91;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v31 = (v5 - v9) >> 2;
      if (v5 == v9)
        v31 = 1;
      if (!(v31 >> 61))
      {
        v32 = v31 >> 2;
        v33 = 8 * v31;
        v34 = (char *)operator new(8 * v31);
        v35 = &v34[8 * v32];
        v36 = &v34[v33];
        v38 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            v74 = &v34[8 * v32];
            v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              v75 = (v39 >> 3) + 1;
              v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              v40 = &v35[v76];
              v7 += v76;
              v77 = (__int128 *)(v6 + 3);
              v78 = v74 + 16;
              v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v40 = &v34[8 * v32];
          }
          do
          {
            v81 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      sub_223174E94();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v91 = operator new(0x1000uLL);
      sub_22323CCA0((char **)a1, &v91);
      return;
    }
    v91 = operator new(0x1000uLL);
    sub_22323CE2C((void **)a1, &v91);
    v41 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v41 + 1);
    v8 = *v41;
    *(_QWORD *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_78;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v42 = (v5 - v9) >> 2;
      if (v5 == v9)
        v42 = 1;
      if (!(v42 >> 61))
      {
        v43 = v42 >> 2;
        v44 = 8 * v42;
        v34 = (char *)operator new(8 * v42);
        v35 = &v34[8 * v43];
        v36 = &v34[v44];
        v45 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            v82 = &v34[8 * v43];
            v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              v83 = (v46 >> 3) + 1;
              v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              v47 = &v35[v84];
              v7 += v84;
              v85 = (__int128 *)(v41 + 3);
              v86 = v82 + 16;
              v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v47 = &v34[8 * v43];
          }
          do
          {
            v89 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_76:
        *(_QWORD *)a1 = v34;
        *(_QWORD *)(a1 + 8) = v35;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_87;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0x1000uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v20 >> 2;
      if (v48 >> 61)
        sub_223174E94();
      v49 = (char *)operator new(8 * v48);
      v27 = &v49[8 * (v48 >> 2)];
      v28 = &v49[8 * v48];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v49;
      *(_QWORD *)v27 = v90;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v30 = v21 + 2;
      if (v21 >= -1)
        v30 = v21 + 1;
      v27 -= 8 * (v30 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    do
    {
LABEL_50:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27)
            v59 = 1;
          else
            v59 = (v28 - v27) >> 2;
          if (v59 >> 61)
            sub_223174E94();
          v60 = (char *)operator new(8 * v59);
          v25 = v60;
          v61 = (v59 + 3) >> 2;
          v53 = &v60[8 * v61];
          v62 = v29 - v27;
          v37 = v29 == v27;
          v29 = v53;
          if (!v37)
          {
            v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            v63 = v62 - 8;
            v64 = &v60[8 * v61];
            v65 = v27;
            if (v63 < 0x38)
              goto LABEL_91;
            v66 = 8 * v61;
            v64 = &v60[8 * v61];
            v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20)
              goto LABEL_91;
            v67 = (v63 >> 3) + 1;
            v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            v64 = &v53[v68];
            v65 = &v27[v68];
            v69 = (__int128 *)(v27 + 16);
            v70 = &v60[v66 + 16];
            v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                v73 = *(_QWORD *)v65;
                v65 += 8;
                *(_QWORD *)v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          v55 = (v28 - v29) >> 3;
          if (v55 >= -1)
            v56 = v55 + 1;
          else
            v56 = v55 + 2;
          v57 = &v29[8 * (v56 >> 1)];
          v53 = &v57[-(v29 - v27)];
          v58 = v29 - v27;
          v37 = v29 == v27;
          v29 = v57;
          if (!v37)
            memmove(v53, v27, v58);
          v25 = v27;
        }
      }
      else
      {
        v53 = v27;
      }
      v54 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v53 - 1) = v54;
      v51 = v53 - 8;
      v27 = v51;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
    goto LABEL_46;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
    goto LABEL_50;
LABEL_45:
  v51 = v27;
LABEL_46:
  v52 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v51;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v52)
    operator delete(v52);
}

void sub_22323CC40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  void *v9;

  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_22323CC5C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_22323CC70(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_22323CC88(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_22323CCA0(char **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  BOOL v19;
  int64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __int128 *v27;
  _OWORD *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  v4 = a1[2];
  if (v4 != a1[3])
    goto LABEL_22;
  v5 = *a1;
  v6 = a1[1];
  if (v6 > *a1)
  {
    v7 = (v6 - *a1) >> 3;
    if (v7 >= -1)
      v8 = v7 + 1;
    else
      v8 = v7 + 2;
    v9 = v8 >> 1;
    v10 = -v9;
    v11 = &v6[-8 * v9];
    v12 = v4 - v6;
    if (v4 != v6)
    {
      memmove(&v6[-8 * v9], a1[1], v4 - v6);
      v4 = a1[1];
    }
    v13 = &v4[8 * v10];
    v4 = &v11[v12];
    a1[1] = v13;
    a1[2] = &v11[v12];
    goto LABEL_22;
  }
  v14 = (v4 - v5) >> 2;
  if (v4 == v5)
    v14 = 1;
  if (v14 >> 61)
    sub_223174E94();
  v15 = v14 >> 2;
  v16 = 8 * v14;
  v17 = (char *)operator new(8 * v14);
  v18 = &v17[8 * v15];
  v20 = v4 - v6;
  v19 = v4 == v6;
  v4 = v18;
  if (!v19)
  {
    v4 = &v18[v20 & 0xFFFFFFFFFFFFFFF8];
    v21 = v20 - 8;
    if ((unint64_t)(v20 - 8) < 0x38)
    {
      v22 = &v17[8 * v15];
      do
      {
LABEL_19:
        v31 = *(_QWORD *)v6;
        v6 += 8;
        *(_QWORD *)v22 = v31;
        v22 += 8;
      }
      while (v22 != v4);
      goto LABEL_20;
    }
    v23 = &v17[8 * v15];
    v22 = v23;
    if ((unint64_t)(v23 - v6) < 0x20)
      goto LABEL_19;
    v24 = (v21 >> 3) + 1;
    v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    v22 = &v18[v25];
    v26 = &v6[v25];
    v27 = (__int128 *)(v6 + 16);
    v28 = v23 + 16;
    v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v30 = *v27;
      *(v28 - 1) = *(v27 - 1);
      *v28 = v30;
      v27 += 2;
      v28 += 2;
      v29 -= 4;
    }
    while (v29);
    v6 = v26;
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_19;
  }
LABEL_20:
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v4;
  a1[3] = &v17[v16];
  if (v5)
  {
    operator delete(v5);
    v4 = a1[2];
  }
LABEL_22:
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void sub_22323CE2C(void **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  _OWORD *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  v4 = (char *)a1[1];
  if (v4 == *a1)
  {
    v7 = a1[2];
    v6 = a1[3];
    if (v7 >= v6)
    {
      v13 = v6 - v4;
      v12 = v13 == 0;
      v14 = v13 >> 2;
      if (v12)
        v14 = 1;
      if (v14 >> 61)
        sub_223174E94();
      v15 = (v14 + 3) >> 2;
      v16 = 8 * v14;
      v17 = (char *)operator new(8 * v14);
      v5 = &v17[8 * v15];
      v18 = v5;
      v19 = v7 - v4;
      if (v7 != v4)
      {
        v18 = &v5[v19 & 0xFFFFFFFFFFFFFFF8];
        v20 = v19 - 8;
        v21 = &v17[8 * v15];
        v22 = v4;
        if (v20 < 0x38)
          goto LABEL_27;
        v23 = &v17[8 * v15];
        v21 = v23;
        v22 = v4;
        if ((unint64_t)(v23 - v4) < 0x20)
          goto LABEL_27;
        v24 = (v20 >> 3) + 1;
        v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        v21 = &v5[v25];
        v22 = &v4[v25];
        v26 = (__int128 *)(v4 + 16);
        v27 = v23 + 16;
        v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v29 = *v26;
          *(v27 - 1) = *(v26 - 1);
          *v27 = v29;
          v26 += 2;
          v27 += 2;
          v28 -= 4;
        }
        while (v28);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_27:
          do
          {
            v30 = *(_QWORD *)v22;
            v22 += 8;
            *(_QWORD *)v21 = v30;
            v21 += 8;
          }
          while (v21 != v18);
        }
      }
      *a1 = v17;
      a1[1] = v5;
      a1[2] = v18;
      a1[3] = &v17[v16];
      if (v4)
      {
        operator delete(v4);
        v5 = (char *)a1[1];
      }
    }
    else
    {
      v8 = (v6 - v7) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v11 = &v7[8 * (v9 >> 1)];
      v5 = &v11[-(v7 - v4)];
      if (v7 != v4)
      {
        memmove(&v11[-(v7 - v4)], v4, v7 - v4);
        v4 = (char *)a1[2];
      }
      a1[1] = v5;
      a1[2] = &v4[8 * v10];
    }
  }
  else
  {
    v5 = (char *)a1[1];
  }
  *((_QWORD *)v5 - 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

uint64_t sub_22323CFC4(_QWORD *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  _BYTE *v7;
  char *v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  uint64_t i;
  void *v13;
  uint64_t v14;
  void *v15;
  char *v17;
  __int128 v18;

  v3 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333)
    sub_22316E078();
  if (0x999999999999999ALL * ((uint64_t)(a1[2] - *a1) >> 4) > v4)
    v4 = 0x999999999999999ALL * ((uint64_t)(a1[2] - *a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[2] - *a1) >> 4) >= 0x199999999999999)
    v6 = 0x333333333333333;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x333333333333333)
      sub_223174E94();
    v7 = operator new(80 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[80 * v3];
  v17 = v8;
  *((_QWORD *)&v18 + 1) = &v7[80 * v6];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_223197FA4(&v7[80 * v3], *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v8 = *(_OWORD *)a2;
    *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  }
  v9 = &v7[80 * v3 + 24];
  if (*(char *)(a2 + 47) < 0)
  {
    sub_223197FA4(v9, *(void **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    *(_OWORD *)v9 = *(_OWORD *)(a2 + 24);
    *(_QWORD *)&v7[80 * v3 + 40] = *(_QWORD *)(a2 + 40);
  }
  v10 = 0;
  v11 = &v7[80 * v3];
  *((_QWORD *)v11 + 6) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v11 + 9) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)&v18 = v11 + 80;
  v13 = (void *)*a1;
  for (i = a1[1]; (void *)(i + v10) != v13; sub_22322C700((uint64_t)&v17[v10], (__int128 *)(v10 + i)))
    v10 -= 80;
  v15 = (void *)*a1;
  v14 = a1[1];
  *a1 = &v17[v10];
  for (*(_OWORD *)(a1 + 1) = v18; (void *)v14 != v15; v14 = sub_22322C8B4(v14 - 80))
    ;
  if (v15)
    operator delete(v15);
  return v18;
}

void sub_22323D19C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  if (*(char *)(v4 + 23) < 0)
  {
    operator delete(*(void **)v4);
    sub_22323D204((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_22323D204((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_22323D204(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 80;
    sub_22322C8B4(i - 80);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_22323D254(_QWORD *result, uint64_t a2, unint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!a3)
    return result;
  v3 = result;
  v4 = *((char *)result + 23);
  if (v4 < 0)
  {
    v6 = (_QWORD *)*result;
    v5 = result[1];
    v7 = v5 - a2;
    if (v5 - a2 >= a3)
      v8 = a3;
    else
      v8 = v5 - a2;
    if (v5 - a2 <= a3)
      goto LABEL_8;
  }
  else
  {
    v5 = *((unsigned __int8 *)result + 23);
    v6 = result;
    v7 = v5 - a2;
    if (v5 - a2 >= a3)
      v8 = a3;
    else
      v8 = *((unsigned __int8 *)result + 23) - a2;
    if (v7 <= a3)
      goto LABEL_8;
  }
  result = memmove((char *)v6 + a2, (char *)v6 + a2 + v8, v7 - v8);
  LOBYTE(v4) = *((_BYTE *)v3 + 23);
LABEL_8:
  v9 = v5 - v8;
  if ((v4 & 0x80) != 0)
    v3[1] = v9;
  else
    *((_BYTE *)v3 + 23) = v9 & 0x7F;
  *((_BYTE *)v6 + v9) = 0;
  return result;
}

BOOL sub_22323D2E4(int __c)
{
  unsigned __int8 v2;
  size_t v3;
  uint64_t *v4;
  _BYTE *v5;

  v2 = atomic_load((unsigned __int8 *)qword_2540CA6E0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(qword_2540CA6E0))
  {
    qword_2540CA7C0 = (uint64_t)operator new(0x48uLL);
    *(_OWORD *)&qword_2540CA7C8 = xmmword_2245C44D0;
    strcpy((char *)qword_2540CA7C0, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_.");
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2540CA7C0, &dword_22314D000);
    __cxa_guard_release(qword_2540CA6E0);
  }
  if (byte_2540CA7D7 >= 0)
    v3 = byte_2540CA7D7;
  else
    v3 = qword_2540CA7C8;
  if (!v3)
    return 1;
  if (byte_2540CA7D7 >= 0)
    v4 = &qword_2540CA7C0;
  else
    v4 = (uint64_t *)qword_2540CA7C0;
  v5 = memchr(v4, __c, v3);
  return !v5 || v5 - (_BYTE *)v4 == -1;
}

void sub_22323D3DC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(qword_2540CA6E0);
  _Unwind_Resume(a1);
}

void sub_22323D3F4(void **a1, void **a2, void **a3, size_t __sz)
{
  void **v6;
  uint64_t v8;
  void **v9;
  void **v10;
  void *v11;
  void **v12;
  void **v13;
  uint64_t v14;
  void *v15;
  size_t v16;
  char v17;
  __int128 v18;
  void **v19;
  void *v20;
  size_t v21;
  char v22;
  __int128 v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  void **v31;
  void **v32;
  uint64_t v33;
  __int128 v34;
  void **v35;
  void **v36;

  v6 = a2;
  v8 = (uint64_t)a1[2];
  v9 = (void **)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)*a1) >> 3) >= __sz)
  {
    v12 = (void **)a1[1];
    if (0xAAAAAAAAAAAAAAABLL * (v12 - v9) >= __sz)
    {
      if (a2 == a3)
      {
        v19 = (void **)*a1;
      }
      else
      {
        v19 = (void **)*a1;
        do
        {
          if (v6 != v9)
          {
            v22 = *((_BYTE *)v6 + 23);
            if (*((char *)v9 + 23) < 0)
            {
              if (v22 >= 0)
                v20 = v6;
              else
                v20 = *v6;
              if (v22 >= 0)
                v21 = *((unsigned __int8 *)v6 + 23);
              else
                v21 = (size_t)v6[1];
              sub_22319C4B8(v9, v20, v21);
            }
            else if ((*((_BYTE *)v6 + 23) & 0x80) != 0)
            {
              sub_22319C3F4(v9, *v6, (size_t)v6[1]);
            }
            else
            {
              v23 = *(_OWORD *)v6;
              v9[2] = v6[2];
              *(_OWORD *)v9 = v23;
            }
          }
          v6 += 3;
          v9 += 3;
          v19 += 3;
        }
        while (v6 != a3);
        v12 = (void **)a1[1];
      }
      while (v12 != v19)
      {
        if (*((char *)v12 - 1) < 0)
          operator delete(*(v12 - 3));
        v12 -= 3;
      }
      a1[1] = v19;
    }
    else
    {
      v13 = &a2[v12 - v9];
      if (v12 != v9)
      {
        v14 = 8 * (v12 - v9);
        do
        {
          if (v6 != v9)
          {
            v17 = *((_BYTE *)v6 + 23);
            if (*((char *)v9 + 23) < 0)
            {
              if (v17 >= 0)
                v15 = v6;
              else
                v15 = *v6;
              if (v17 >= 0)
                v16 = *((unsigned __int8 *)v6 + 23);
              else
                v16 = (size_t)v6[1];
              sub_22319C4B8(v9, v15, v16);
            }
            else if ((*((_BYTE *)v6 + 23) & 0x80) != 0)
            {
              sub_22319C3F4(v9, *v6, (size_t)v6[1]);
            }
            else
            {
              v18 = *(_OWORD *)v6;
              v9[2] = v6[2];
              *(_OWORD *)v9 = v18;
            }
          }
          v6 += 3;
          v9 += 3;
          v14 -= 24;
        }
        while (v14);
        v9 = (void **)a1[1];
      }
      v32 = v9;
      if (v13 != a3)
      {
        v33 = 0;
        do
        {
          v35 = &v9[v33];
          v36 = &v13[v33];
          if (SHIBYTE(v13[v33 + 2]) < 0)
          {
            sub_223197FA4(v35, *v36, (unint64_t)v36[1]);
          }
          else
          {
            v34 = *(_OWORD *)v36;
            v35[2] = v36[2];
            *(_OWORD *)v35 = v34;
          }
          v33 += 3;
        }
        while (&v13[v33] != a3);
        v32 = &v9[v33];
      }
      a1[1] = v32;
    }
  }
  else
  {
    if (v9)
    {
      v10 = (void **)a1[1];
      v11 = *a1;
      if (v10 != v9)
      {
        do
        {
          if (*((char *)v10 - 1) < 0)
            operator delete(*(v10 - 3));
          v10 -= 3;
        }
        while (v10 != v9);
        v11 = *a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_72;
    v24 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v25 = 2 * v24;
    if (2 * v24 <= __sz)
      v25 = __sz;
    v26 = v24 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v25;
    if (v26 > 0xAAAAAAAAAAAAAAALL)
LABEL_72:
      sub_22316E078();
    v27 = 24 * v26;
    v28 = (char *)operator new(24 * v26);
    *a1 = v28;
    a1[1] = v28;
    a1[2] = &v28[v27];
    if (v6 != a3)
    {
      v29 = 0;
      do
      {
        v30 = &v28[v29 * 8];
        v31 = &v6[v29];
        if (SHIBYTE(v6[v29 + 2]) < 0)
        {
          sub_223197FA4(v30, *v31, (unint64_t)v31[1]);
        }
        else
        {
          *(_OWORD *)v30 = *(_OWORD *)v31;
          *((_QWORD *)v30 + 2) = v31[2];
        }
        v29 += 3;
      }
      while (&v6[v29] != a3);
      v28 += v29 * 8;
    }
    a1[1] = v28;
  }
}

unint64_t sub_22323D798(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v23 = *(uint64_t *)((char *)a2 + a3 - 48);
      v24 = *(uint64_t *)((char *)a2 + a3 - 40);
      v25 = *(uint64_t *)((char *)a2 + a3 - 24);
      v27 = *(uint64_t *)((char *)a2 + a3 - 64);
      v26 = *(uint64_t *)((char *)a2 + a3 - 56);
      v28 = *(uint64_t *)((char *)a2 + a3 - 16);
      v29 = *(uint64_t *)((char *)a2 + a3 - 8);
      v30 = v26 + v28;
      v31 = 0x9DDFEA08EB382D69
          * (v25 ^ ((0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))));
      v32 = 0x9DDFEA08EB382D69 * (v31 ^ (v31 >> 47));
      v33 = v27 + a3 + v26 + v23;
      v34 = v33 + v24;
      v35 = __ROR8__(v33, 44) + v27 + a3 + __ROR8__(v24 + v27 + a3 - 0x622015F714C7D297 * (v31 ^ (v31 >> 47)), 21);
      v36 = v26 + v28 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v37 = v36 + v25 + v28;
      v38 = __ROR8__(v37, 44);
      v39 = v37 + v29;
      v40 = v38 + v36 + __ROR8__(v36 + v24 + v29, 21);
      v42 = *a2;
      v41 = a2 + 4;
      v43 = v42 - 0x4B6D499041670D8DLL * v24;
      v44 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v45 = *(v41 - 3);
        v46 = v43 + v34 + v30 + v45;
        v47 = v41[2];
        v48 = v41[3];
        v49 = v41[1];
        v30 = v49 + v34 - 0x4B6D499041670D8DLL * __ROR8__(v30 + v35 + v47, 42);
        v50 = v32 + v39;
        v51 = *(v41 - 2);
        v52 = *(v41 - 1);
        v53 = *(v41 - 4) - 0x4B6D499041670D8DLL * v35;
        v54 = v53 + v39 + v52;
        v55 = v53 + v45 + v51;
        v34 = v55 + v52;
        v56 = __ROR8__(v55, 44) + v53;
        v57 = (0xB492B66FBE98F273 * __ROR8__(v46, 37)) ^ v40;
        v43 = 0xB492B66FBE98F273 * __ROR8__(v50, 33);
        v35 = v56 + __ROR8__(v54 + v57, 21);
        v58 = v43 + v40 + *v41;
        v39 = v58 + v49 + v47 + v48;
        v40 = __ROR8__(v58 + v49 + v47, 44) + v58 + __ROR8__(v30 + v51 + v58 + v48, 21);
        v41 += 8;
        v32 = v57;
        v44 += 64;
      }
      while (v44);
      v59 = v43
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) ^ ((0x9DDFEA08EB382D69 * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) >> 47));
      v60 = 0x9DDFEA08EB382D69
          * (v59 ^ (v57
                  - 0x4B6D499041670D8DLL * (v30 ^ (v30 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) ^ ((0x9DDFEA08EB382D69 * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) ^ ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) >> 47));
    }
    else
    {
      v6 = *(uint64_t *)((char *)a2 + a3 - 16);
      v7 = *a2 - 0x3C5A37A36834CED9 * (v6 + a3);
      v9 = a2[2];
      v8 = a2[3];
      v10 = __ROR8__(v7 + v8, 52);
      v11 = v7 + a2[1];
      v12 = __ROR8__(v11, 7);
      v13 = v11 + v9;
      v14 = *(uint64_t *)((char *)a2 + a3 - 32) + v9;
      v15 = v12 + __ROR8__(*a2 - 0x3C5A37A36834CED9 * (v6 + a3), 37) + v10 + __ROR8__(v13, 31);
      v16 = *(uint64_t *)((char *)a2 + a3 - 24) + v14 + v6;
      v17 = 0xC3A5C85C97CB3127 * (v16 + *(uint64_t *)((char *)a2 + a3 - 8) + v8 + v15)
          - 0x651E95C4D06FBFB1
          * (v13
           + v8
           + __ROR8__(v14, 37)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 24) + v14, 7)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 8) + v8 + v14, 52)
           + __ROR8__(v16, 31));
      return 0x9AE16A3B2F90404FLL
           * ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) ^ ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) >> 47));
    }
  }
  else if (a3 > 0x10)
  {
    v18 = a2[1];
    v19 = 0xB492B66FBE98F273 * *a2;
    v20 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8), 30) + __ROR8__(v19 - v18, 43);
    v21 = v19 + a3 + __ROR8__(v18 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8);
    v22 = 0x9DDFEA08EB382D69 * ((v20 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a2 + a3 - 16)) ^ v21);
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) ^ ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) >> 47));
  }
  else if (a3 < 9)
  {
    if (a3 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a3)
      {
        v63 = (0xC949D7C7509E6557 * (a3 + 4 * *((unsigned __int8 *)a2 + a3 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                       * (*(unsigned __int8 *)a2 | ((unint64_t)*((unsigned __int8 *)a2 + (a3 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v63 ^ (v63 >> 47));
      }
    }
    else
    {
      v61 = *(unsigned int *)((char *)a2 + a3 - 4);
      v62 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)a2) + a3) ^ v61);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) ^ ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) >> 47));
    }
  }
  else
  {
    v3 = *(uint64_t *)((char *)a2 + a3 - 8);
    v4 = __ROR8__(v3 + a3, a3);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) >> 47))) ^ v3;
  }
  return result;
}

void sub_22323DBE4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC26790;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22323DBF4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC26790;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

char *sub_22323DC2C(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  char *v8;
  uint64_t v9;
  __int128 v10;
  __int128 *v11;

  if (a4)
  {
    v5 = result;
    if (a4 >= 0xAAAAAAAAAAAAAABLL)
      sub_22316E078();
    result = (char *)operator new(24 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[24 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = &v8[v9];
        v11 = (__int128 *)(a2 + v9);
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          result = (char *)sub_223197FA4(result, *(void **)v11, *((_QWORD *)v11 + 1));
        }
        else
        {
          v10 = *v11;
          *((_QWORD *)result + 2) = *((_QWORD *)v11 + 2);
          *(_OWORD *)result = v10;
        }
        v9 += 24;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_22323DD0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_22319BE44(&a9);
  _Unwind_Resume(a1);
}

void sub_22323DD20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 24)
  {
    if (*(char *)(v10 + v11 - 1) < 0)
      operator delete(*(void **)(v10 + v11 - 24));
  }
  *(_QWORD *)(v9 + 8) = v10;
  sub_22319BE44(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_22323DD5C(uint64_t a1)
{
  char *v2;
  void *v3;
  char *v4;
  void *v5;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  sub_22323DE94(a1 + 160, *(_QWORD **)(a1 + 168));
  sub_22323DF84(a1 + 136, *(char **)(a1 + 144));
  sub_2232281B4(a1 + 112, *(_QWORD *)(a1 + 120));
  sub_22323DFE4(a1 + 88, *(_QWORD *)(a1 + 96));
  v2 = *(char **)(a1 + 64);
  if (v2)
  {
    while (1)
    {
      v7 = *(char **)v2;
      v8 = (char *)*((_QWORD *)v2 + 8);
      if (v8 == v2 + 40)
        break;
      if (v8)
      {
        v9 = 5;
LABEL_13:
        (*(void (**)(void))(*(_QWORD *)v8 + 8 * v9))();
      }
      if (v2[39] < 0)
        operator delete(*((void **)v2 + 2));
      operator delete(v2);
      v2 = v7;
      if (!v7)
        goto LABEL_2;
    }
    v8 = v2 + 40;
    v9 = 4;
    goto LABEL_13;
  }
LABEL_2:
  v3 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v3)
    operator delete(v3);
  v4 = *(char **)(a1 + 24);
  if (v4)
  {
    while (1)
    {
      v10 = *(char **)v4;
      v11 = (char *)*((_QWORD *)v4 + 8);
      if (v11 == v4 + 40)
        break;
      if (v11)
      {
        v12 = 5;
LABEL_21:
        (*(void (**)(void))(*(_QWORD *)v11 + 8 * v12))();
      }
      if (v4[39] < 0)
        operator delete(*((void **)v4 + 2));
      operator delete(v4);
      v4 = v10;
      if (!v10)
        goto LABEL_5;
    }
    v11 = v4 + 40;
    v12 = 4;
    goto LABEL_21;
  }
LABEL_5:
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

void sub_22323DE94(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  if (a2)
  {
    sub_22323DE94(a1, *a2);
    sub_22323DE94(a1, a2[1]);
    v4 = (std::__shared_weak_count *)a2[13];
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v7 = (std::__shared_weak_count *)a2[11];
    if (!v7)
      goto LABEL_11;
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if ((*((char *)a2 + 79) & 0x80000000) == 0)
      {
LABEL_12:
        if ((*((char *)a2 + 55) & 0x80000000) == 0)
        {
LABEL_13:
          operator delete(a2);
          return;
        }
        goto LABEL_17;
      }
    }
    else
    {
LABEL_11:
      if ((*((char *)a2 + 79) & 0x80000000) == 0)
        goto LABEL_12;
    }
    operator delete((void *)a2[7]);
    if ((*((char *)a2 + 55) & 0x80000000) == 0)
      goto LABEL_13;
LABEL_17:
    operator delete((void *)a2[4]);
    operator delete(a2);
  }
}

void sub_22323DF84(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_22323DF84(a1, *(_QWORD *)a2);
    sub_22323DF84(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

void sub_22323DFE4(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (a2)
  {
    sub_22323DFE4(a1, *(_QWORD *)a2);
    sub_22323DFE4(a1, *(_QWORD *)(a2 + 8));
    v4 = *(std::__shared_weak_count **)(a2 + 64);
    if (!v4)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if ((*(char *)(a2 + 55) & 0x80000000) == 0)
        goto LABEL_7;
    }
    else
    {
LABEL_6:
      if ((*(char *)(a2 + 55) & 0x80000000) == 0)
      {
LABEL_7:
        operator delete((void *)a2);
        return;
      }
    }
    operator delete(*(void **)(a2 + 32));
    operator delete((void *)a2);
  }
}

uint64_t **sub_22323E084(uint64_t **a1, __int128 *a2)
{
  _QWORD *v4;
  void *v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  unint64_t *p_shared_owners;
  unint64_t v16;

  v4 = operator new(0x38uLL);
  v5 = v4;
  v6 = *a2;
  v7 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  v8 = a1 + 1;
  v9 = a1[1];
  *((_OWORD *)v4 + 2) = v6;
  v4[6] = v7;
  if (v9)
  {
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v9;
        v11 = v9[4];
        if ((unint64_t)v6 >= v11)
          break;
        v9 = (uint64_t *)*v9;
        v8 = v10;
        if (!*v10)
          goto LABEL_9;
      }
      if (v11 >= (unint64_t)v6)
        break;
      v9 = (uint64_t *)v9[1];
      if (!v9)
      {
        v8 = v10 + 1;
        goto LABEL_9;
      }
    }
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    operator delete(v5);
    return v10;
  }
  else
  {
    v10 = a1 + 1;
LABEL_9:
    *v4 = 0;
    v4[1] = 0;
    v4[2] = v10;
    *v8 = v4;
    v12 = (uint64_t *)**a1;
    v13 = v4;
    if (v12)
    {
      *a1 = v12;
      v13 = *v8;
    }
    sub_2231A9A8C(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return (uint64_t **)v5;
  }
}

void sub_22323E1B4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22323E1D8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_22323E1F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000002245C56E9)
    return a1 + 24;
  if (((v3 & 0x80000002245C56E9 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000002245C56E9))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000002245C56E9 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t *sub_22323E270(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_22323D798((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v21 == v8)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v17 == v8)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

_QWORD *sub_22323E49C(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  float v18;
  float v19;
  uint64_t v20;
  _QWORD *v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v6 = *a2;
  v7 = HIDWORD(*a2);
  v8 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v7);
  v9 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == v6)
                return v13;
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_23;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == v6)
              return v13;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_23:
  v17 = operator new(0x18uLL);
  *v17 = 0;
  v17[1] = v9;
  v17[2] = *a3;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (v10 && (float)(v19 * (float)v10) >= v18)
  {
    v20 = *(_QWORD *)a1;
    v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v21)
    {
LABEL_26:
      *v17 = *v21;
LABEL_61:
      *v21 = v17;
      goto LABEL_62;
    }
  }
  else
  {
    v22 = 1;
    if (v10 >= 3)
      v22 = (v10 & (v10 - 1)) != 0;
    v23 = v22 | (2 * v10);
    v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v10)
      goto LABEL_37;
    if (prime < v10)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (prime <= v26)
        prime = v26;
      if (prime < v10)
LABEL_37:
        sub_2231B0668(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    v29 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        v3 = v9 % v10;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 % v10));
        if (v21)
          goto LABEL_26;
      }
      else
      {
        v3 = v9;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
        if (v21)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v29 & v9;
      v20 = *(_QWORD *)a1;
      v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v29 & v9));
      if (v21)
        goto LABEL_26;
    }
  }
  *v17 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v17;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*v17)
  {
    v30 = *(_QWORD *)(*v17 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v30 >= v10)
        v30 %= v10;
    }
    else
    {
      v30 &= v10 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v17;
}

void sub_22323E7E0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_22323E7F4(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_2231B0668(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_22323E934(a1, i + 2, i + 2);
  return a1;
}

void sub_22323E90C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22322E828(v1);
  _Unwind_Resume(a1);
}

void sub_22323E920(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22322E828(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_22323E934(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  float v18;
  float v19;
  uint64_t v20;
  _QWORD *v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v6 = *a2;
  v7 = HIDWORD(*a2);
  v8 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v7);
  v9 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == v6)
                return v13;
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_23;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == v6)
              return v13;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_23:
  v17 = operator new(0x18uLL);
  *v17 = 0;
  v17[1] = v9;
  v17[2] = *a3;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (v10 && (float)(v19 * (float)v10) >= v18)
  {
    v20 = *(_QWORD *)a1;
    v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v21)
    {
LABEL_26:
      *v17 = *v21;
LABEL_61:
      *v21 = v17;
      goto LABEL_62;
    }
  }
  else
  {
    v22 = 1;
    if (v10 >= 3)
      v22 = (v10 & (v10 - 1)) != 0;
    v23 = v22 | (2 * v10);
    v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v10)
      goto LABEL_37;
    if (prime < v10)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (prime <= v26)
        prime = v26;
      if (prime < v10)
LABEL_37:
        sub_2231B0668(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    v29 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        v3 = v9 % v10;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 % v10));
        if (v21)
          goto LABEL_26;
      }
      else
      {
        v3 = v9;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
        if (v21)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v29 & v9;
      v20 = *(_QWORD *)a1;
      v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v29 & v9));
      if (v21)
        goto LABEL_26;
    }
  }
  *v17 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v17;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*v17)
  {
    v30 = *(_QWORD *)(*v17 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v30 >= v10)
        v30 %= v10;
    }
    else
    {
      v30 &= v10 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v17;
}

void sub_22323EC78(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_22323EC8C(uint64_t a1, uint64_t a2, __int128 *a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  void **v13;
  unsigned __int8 *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float v30;
  uint64_t v31;
  _QWORD *v32;
  _BOOL8 v33;
  unint64_t v34;
  unint64_t v35;
  size_t prime;
  int8x8_t v37;
  unint64_t v38;
  uint8x8_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD v44[2];
  char v45;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_22323D798((uint64_t)v44, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = (unsigned __int8 *)*v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = *((_QWORD *)v14 + 1);
            if (v21 == v10)
            {
              v22 = v14[39];
              if ((v22 & 0x80u) == 0)
                v23 = v14[39];
              else
                v23 = *((_QWORD *)v14 + 3);
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v14 + 2), v5, *((_QWORD *)v14 + 3)))
                    return v14;
                }
                else
                {
                  if (!v14[39])
                    return v14;
                  v24 = 0;
                  while (v14[v24 + 16] == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = *(unsigned __int8 **)v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = *((_QWORD *)v14 + 1);
          if (v17 == v10)
          {
            v18 = v14[39];
            if ((v18 & 0x80u) == 0)
              v19 = v14[39];
            else
              v19 = *((_QWORD *)v14 + 3);
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v14 + 2), v5, *((_QWORD *)v14 + 3)))
                  return v14;
              }
              else
              {
                if (!v14[39])
                  return v14;
                v20 = 0;
                while (v14[v20 + 16] == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = *(unsigned __int8 **)v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = (_QWORD *)(a1 + 16);
  v14 = (unsigned __int8 *)operator new(0x30uLL);
  v26 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v27 = *((_QWORD *)a3 + 2);
  v28 = *((_QWORD *)a3 + 3);
  *((_QWORD *)a3 + 2) = 0;
  *((_QWORD *)a3 + 3) = 0;
  v44[0] = v14;
  v44[1] = a1 + 16;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v10;
  *((_OWORD *)v14 + 1) = v26;
  *((_QWORD *)v14 + 4) = v27;
  *((_QWORD *)v14 + 5) = v28;
  v45 = 1;
  v29 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v30 = *(float *)(a1 + 32);
  if (v11 && (float)(v30 * (float)v11) >= v29)
  {
    v31 = *(_QWORD *)a1;
    v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v32)
    {
LABEL_54:
      *(_QWORD *)v14 = *v32;
LABEL_89:
      *v32 = v14;
      goto LABEL_90;
    }
  }
  else
  {
    v33 = 1;
    if (v11 >= 3)
      v33 = (v11 & (v11 - 1)) != 0;
    v34 = v33 | (2 * v11);
    v35 = vcvtps_u32_f32(v29 / v30);
    if (v34 <= v35)
      prime = v35;
    else
      prime = v34;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v37 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v37)
      goto LABEL_65;
    if (prime < *(_QWORD *)&v37)
    {
      v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v37 < 3uLL || (v39 = (uint8x8_t)vcnt_s8(v37), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        v38 = std::__next_prime(v38);
      }
      else
      {
        v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2)
          v38 = v40;
      }
      if (prime <= v38)
        prime = v38;
      if (prime < *(_QWORD *)&v37)
LABEL_65:
        sub_2231B0668(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v41 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v31 = *(_QWORD *)a1;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v32)
          goto LABEL_54;
      }
      else
      {
        v3 = v10;
        v31 = *(_QWORD *)a1;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v32)
          goto LABEL_54;
      }
    }
    else
    {
      v3 = v41 & v10;
      v31 = *(_QWORD *)a1;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v41 & v10));
      if (v32)
        goto LABEL_54;
    }
  }
  *(_QWORD *)v14 = *v25;
  *v25 = v14;
  *(_QWORD *)(v31 + 8 * v3) = v25;
  if (*(_QWORD *)v14)
  {
    v42 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v42 >= v11)
        v42 %= v11;
    }
    else
    {
      v42 &= v11 - 1;
    }
    v32 = (_QWORD *)(*(_QWORD *)a1 + 8 * v42);
    goto LABEL_89;
  }
LABEL_90:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_22323F094(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22323F0AC((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_22323F0AC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(_QWORD *)(v2 + 40);
      *(_QWORD *)(v2 + 40) = 0;
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      if (*(char *)(v2 + 39) < 0)
        operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

void sub_22323F110(_QWORD *a1, _QWORD *a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  v6 = a1[1];
  v7 = a1[2];
  if (v7 == v6)
    v8 = 0;
  else
    v8 = ((v7 - v6) << 6) - 1;
  v9 = a1[5];
  v10 = v9 + a1[4];
  v11 = v8 - v10;
  if (a3 > v11)
  {
    sub_22323F268((uint64_t)a1, a3 - v11);
    v9 = a1[5];
    v6 = a1[1];
    v7 = a1[2];
    v10 = a1[4] + v9;
  }
  v12 = (_QWORD *)(v6 + 8 * (v10 >> 9));
  if (v7 == v6)
  {
    v13 = 0;
    if (a3)
      goto LABEL_8;
LABEL_11:
    v16 = v13;
    v15 = v12;
    goto LABEL_23;
  }
  v13 = *v12 + 8 * (v10 & 0x1FF);
  if (!a3)
    goto LABEL_11;
LABEL_8:
  v14 = a3 + ((v13 - *v12) >> 3);
  if (v14 < 1)
  {
    v17 = 511 - v14;
    LOWORD(v14) = ~(511 - v14);
    v15 = &v12[-(v17 >> 9)];
  }
  else
  {
    v15 = &v12[(unint64_t)v14 >> 9];
  }
  v16 = *v15 + 8 * (v14 & 0x1FF);
LABEL_23:
  while (v13 != v16)
  {
    v18 = v16;
    if (v12 != v15)
      v18 = *v12 + 4096;
    if (v13 == v18)
    {
      a1[5] = v9;
      if (v12 == v15)
        return;
    }
    else
    {
      v19 = (_QWORD *)v13;
      do
      {
        *v19++ = a2[2];
        a2 = (_QWORD *)*a2;
      }
      while (v19 != (_QWORD *)v18);
      v9 = a1[5] + ((v18 - v13) >> 3);
      a1[5] = v9;
      if (v12 == v15)
        return;
    }
    v20 = v12[1];
    ++v12;
    v13 = v20;
  }
}

void sub_22323F268(uint64_t a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  BOOL v29;
  int64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 *v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  void *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  unint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  char *v55;
  int64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  _QWORD *v68;
  char *v69;
  _QWORD *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  unint64_t v78;
  char *v79;
  char *v80;
  unint64_t v81;
  int64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 *v90;
  char *v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  char *v101;
  unint64_t v102;
  int64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __int128 *v110;
  char *v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  uint64_t i;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  _QWORD *v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  int64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  int64_t v134;
  unint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  __int128 *v139;
  char *v140;
  uint64_t v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;

  v3 = *(char **)(a1 + 16);
  v4 = (uint64_t)&v3[-*(_QWORD *)(a1 + 8)];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if ((v5 & 0x1FF) != 0)
    v6 = (v5 >> 9) + 1;
  else
    v6 = v5 >> 9;
  v7 = *(_QWORD *)(a1 + 32);
  if (v6 >= v7 >> 9)
    v8 = v7 >> 9;
  else
    v8 = v6;
  if (v6 <= v7 >> 9)
  {
    *(_QWORD *)(a1 + 32) = v7 - (v8 << 9);
    if (!v8)
      return;
    while (1)
    {
      v15 = *(_QWORD **)(a1 + 8);
      v16 = (char *)(v15 + 1);
      v17 = *v15;
      *(_QWORD *)(a1 + 8) = v15 + 1;
      if (v3 == *(char **)(a1 + 24))
      {
        v18 = *(char **)a1;
        if ((unint64_t)v16 <= *(_QWORD *)a1)
        {
          v24 = (v3 - v18) >> 2;
          if (v3 == v18)
            v24 = 1;
          if (v24 >> 61)
            goto LABEL_159;
          v25 = v24 >> 2;
          v26 = 8 * v24;
          v27 = (char *)operator new(8 * v24);
          v28 = &v27[8 * v25];
          v30 = v3 - v16;
          v29 = v3 == v16;
          v3 = v28;
          if (!v29)
          {
            v3 = &v28[v30 & 0xFFFFFFFFFFFFFFF8];
            v31 = v30 - 8;
            if ((unint64_t)(v30 - 8) < 0x38)
            {
              v32 = &v27[8 * v25];
              goto LABEL_39;
            }
            v32 = &v27[8 * v25];
            if ((unint64_t)(v32 - v16) < 0x20)
              goto LABEL_165;
            v33 = (v31 >> 3) + 1;
            v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
            v32 = &v28[v34];
            v16 += v34;
            v35 = (__int128 *)(v15 + 3);
            v36 = &v27[8 * v25 + 16];
            v37 = v33 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v38 = *v35;
              *((_OWORD *)v36 - 1) = *(v35 - 1);
              *(_OWORD *)v36 = v38;
              v35 += 2;
              v36 += 32;
              v37 -= 4;
            }
            while (v37);
            if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_165:
              do
              {
LABEL_39:
                v39 = *(_QWORD *)v16;
                v16 += 8;
                *(_QWORD *)v32 = v39;
                v32 += 8;
              }
              while (v32 != v3);
            }
          }
          *(_QWORD *)a1 = v27;
          *(_QWORD *)(a1 + 8) = v28;
          *(_QWORD *)(a1 + 16) = v3;
          *(_QWORD *)(a1 + 24) = &v27[v26];
          if (v18)
          {
            operator delete(v18);
            v3 = *(char **)(a1 + 16);
          }
          goto LABEL_21;
        }
        v19 = (uint64_t)&v16[-*(_QWORD *)a1] >> 3;
        if (v19 >= -1)
          v20 = v19 + 1;
        else
          v20 = v19 + 2;
        v21 = v20 >> 1;
        v22 = &v16[-8 * (v20 >> 1)];
        v23 = v3 - v16;
        if (v3 != v16)
        {
          memmove(&v16[-8 * (v20 >> 1)], v16, v3 - v16);
          v3 = *(char **)(a1 + 8);
        }
        v14 = &v3[-8 * v21];
        v3 = &v22[v23];
        *(_QWORD *)(a1 + 8) = v14;
        *(_QWORD *)(a1 + 16) = &v22[v23];
      }
LABEL_21:
      *(_QWORD *)v3 = v17;
      v3 = (char *)(*(_QWORD *)(a1 + 16) + 8);
      *(_QWORD *)(a1 + 16) = v3;
      if (!--v8)
        return;
    }
  }
  v9 = v6 - v8;
  v10 = *(_QWORD *)(a1 + 24) - *(_QWORD *)a1;
  v11 = v4 >> 3;
  if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
  {
    if (v9)
    {
      while (*(_QWORD *)(a1 + 24) != *(_QWORD *)(a1 + 16))
      {
        v145 = operator new(0x1000uLL);
        sub_22323CCA0((char **)a1, &v145);
        --v6;
        if (!--v9)
          goto LABEL_134;
      }
      for (i = 0; i != v9; ++i)
      {
        v145 = operator new(0x1000uLL);
        sub_22323CE2C((void **)a1, &v145);
        if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 8)
          v116 = 511;
        else
          v116 = 512;
        v117 = v116 + *(_QWORD *)(a1 + 32);
        *(_QWORD *)(a1 + 32) = v117;
      }
      v8 = v6;
      *(_QWORD *)(a1 + 32) = v117 - (v6 << 9);
      if (!v6)
        return;
    }
    else
    {
LABEL_134:
      *(_QWORD *)(a1 + 32) -= v8 << 9;
      if (!v8)
        return;
    }
    v118 = *(char **)(a1 + 16);
    while (1)
    {
      v120 = *(_QWORD **)(a1 + 8);
      v121 = (char *)(v120 + 1);
      v122 = *v120;
      *(_QWORD *)(a1 + 8) = v120 + 1;
      if (v118 == *(char **)(a1 + 24))
      {
        v123 = *(char **)a1;
        if ((unint64_t)v121 <= *(_QWORD *)a1)
        {
          v129 = (v118 - v123) >> 2;
          if (v118 == v123)
            v129 = 1;
          if (v129 >> 61)
            goto LABEL_159;
          v130 = v129 >> 2;
          v131 = 8 * v129;
          v132 = (char *)operator new(8 * v129);
          v133 = &v132[8 * v130];
          v134 = v118 - v121;
          v29 = v118 == v121;
          v118 = v133;
          if (!v29)
          {
            v118 = &v133[v134 & 0xFFFFFFFFFFFFFFF8];
            v135 = v134 - 8;
            if ((unint64_t)(v134 - 8) < 0x38)
            {
              v136 = &v132[8 * v130];
              goto LABEL_155;
            }
            v136 = &v132[8 * v130];
            if ((unint64_t)(v136 - v121) < 0x20)
              goto LABEL_166;
            v137 = (v135 >> 3) + 1;
            v138 = 8 * (v137 & 0x3FFFFFFFFFFFFFFCLL);
            v136 = &v133[v138];
            v121 += v138;
            v139 = (__int128 *)(v120 + 3);
            v140 = &v132[8 * v130 + 16];
            v141 = v137 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v142 = *v139;
              *((_OWORD *)v140 - 1) = *(v139 - 1);
              *(_OWORD *)v140 = v142;
              v139 += 2;
              v140 += 32;
              v141 -= 4;
            }
            while (v141);
            if (v137 != (v137 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_166:
              do
              {
LABEL_155:
                v143 = *(_QWORD *)v121;
                v121 += 8;
                *(_QWORD *)v136 = v143;
                v136 += 8;
              }
              while (v136 != v118);
            }
          }
          *(_QWORD *)a1 = v132;
          *(_QWORD *)(a1 + 8) = v133;
          *(_QWORD *)(a1 + 16) = v118;
          *(_QWORD *)(a1 + 24) = &v132[v131];
          if (v123)
          {
            operator delete(v123);
            v118 = *(char **)(a1 + 16);
          }
          goto LABEL_137;
        }
        v124 = (uint64_t)&v121[-*(_QWORD *)a1] >> 3;
        if (v124 >= -1)
          v125 = v124 + 1;
        else
          v125 = v124 + 2;
        v126 = v125 >> 1;
        v127 = &v121[-8 * (v125 >> 1)];
        v128 = v118 - v121;
        if (v118 != v121)
        {
          memmove(&v121[-8 * (v125 >> 1)], v121, v118 - v121);
          v118 = *(char **)(a1 + 8);
        }
        v119 = &v118[-8 * v126];
        v118 = &v127[v128];
        *(_QWORD *)(a1 + 8) = v119;
        *(_QWORD *)(a1 + 16) = &v127[v128];
      }
LABEL_137:
      *(_QWORD *)v118 = v122;
      v118 = (char *)(*(_QWORD *)(a1 + 16) + 8);
      *(_QWORD *)(a1 + 16) = v118;
      if (!--v8)
        return;
    }
  }
  if (v10 >> 2 <= v9 + v11)
    v12 = v9 + v11;
  else
    v12 = v10 >> 2;
  if (v12)
  {
    if (v12 >> 61)
LABEL_159:
      sub_223174E94();
    v13 = (char *)operator new(8 * v12);
  }
  else
  {
    v13 = 0;
  }
  v144 = v8 << 9;
  v40 = &v13[8 * (v11 - v8)];
  v41 = &v13[8 * v12];
  v42 = v40;
  v43 = v13;
  do
  {
    v44 = operator new(0x1000uLL);
    if (v42 != v41)
      goto LABEL_49;
    if (v40 > v43)
    {
      v45 = v43;
      v46 = (v40 - v43) >> 3;
      if (v46 >= -1)
        v47 = v46 + 1;
      else
        v47 = v46 + 2;
      v48 = v47 >> 1;
      v49 = &v40[-8 * (v47 >> 1)];
      v50 = v41;
      if (v41 != v40)
      {
        memmove(v49, v40, v41 - v40);
        v50 = v40;
      }
      v42 = &v49[v41 - v40];
      v40 = &v50[-8 * v48];
      v43 = v45;
      goto LABEL_49;
    }
    if (v41 == v43)
      v51 = 1;
    else
      v51 = (v41 - v43) >> 2;
    if (v51 >> 61)
      sub_223174E94();
    v52 = (char *)operator new(8 * v51);
    v53 = v43;
    v54 = v51 >> 2;
    v55 = &v52[8 * (v51 >> 2)];
    v42 = v55;
    v56 = v41 - v40;
    if (v41 != v40)
    {
      v42 = &v55[v56 & 0xFFFFFFFFFFFFFFF8];
      v57 = v56 - 8;
      if (v57 >= 0x38 && (v58 = 8 * v54, (unint64_t)(&v52[8 * v54] - v40) >= 0x20))
      {
        v62 = (v57 >> 3) + 1;
        v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
        v59 = &v55[v63];
        v60 = &v40[v63];
        v64 = (__int128 *)(v40 + 16);
        v65 = &v52[v58 + 16];
        v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v67 = *v64;
          *((_OWORD *)v65 - 1) = *(v64 - 1);
          *(_OWORD *)v65 = v67;
          v64 += 2;
          v65 += 32;
          v66 -= 4;
        }
        while (v66);
        if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_66;
      }
      else
      {
        v59 = &v52[8 * (v51 >> 2)];
        v60 = v40;
      }
      do
      {
        v61 = *(_QWORD *)v60;
        v60 += 8;
        *(_QWORD *)v59 = v61;
        v59 += 8;
      }
      while (v59 != v42);
    }
LABEL_66:
    v41 = &v52[8 * v51];
    if (v53)
      operator delete(v53);
    v40 = &v52[8 * (v51 >> 2)];
    v43 = v52;
LABEL_49:
    *(_QWORD *)v42 = v44;
    v42 += 8;
    --v9;
  }
  while (v9);
  v68 = *(_QWORD **)(a1 + 8);
  if (v8)
  {
    while (1)
    {
      if (v42 == v41)
      {
        if (v40 <= v43)
        {
          if (v41 == v43)
            v78 = 1;
          else
            v78 = (v41 - v43) >> 2;
          if (v78 >> 61)
            sub_223174E94();
          v79 = (char *)operator new(8 * v78);
          v80 = v79;
          v81 = v78 >> 2;
          v69 = &v79[8 * (v78 >> 2)];
          v42 = v69;
          v82 = v41 - v40;
          if (v41 != v40)
          {
            v42 = &v69[v82 & 0xFFFFFFFFFFFFFFF8];
            v83 = v82 - 8;
            if (v83 < 0x38 || (v84 = 8 * v81, (unint64_t)(&v79[8 * v81] - v40) < 0x20))
            {
              v85 = &v79[8 * (v78 >> 2)];
              v86 = v40;
              goto LABEL_96;
            }
            v88 = (v83 >> 3) + 1;
            v89 = 8 * (v88 & 0x3FFFFFFFFFFFFFFCLL);
            v85 = &v69[v89];
            v86 = &v40[v89];
            v90 = (__int128 *)(v40 + 16);
            v91 = &v79[v84 + 16];
            v92 = v88 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v93 = *v90;
              *((_OWORD *)v91 - 1) = *(v90 - 1);
              *(_OWORD *)v91 = v93;
              v90 += 2;
              v91 += 32;
              v92 -= 4;
            }
            while (v92);
            if (v88 != (v88 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_96:
                v87 = *(_QWORD *)v86;
                v86 += 8;
                *(_QWORD *)v85 = v87;
                v85 += 8;
              }
              while (v85 != v42);
            }
          }
          v41 = &v79[8 * v78];
          if (v43)
            operator delete(v43);
          v43 = v80;
          goto LABEL_79;
        }
        v72 = v43;
        v73 = (v40 - v43) >> 3;
        if (v73 >= -1)
          v74 = v73 + 1;
        else
          v74 = v73 + 2;
        v75 = v74 >> 1;
        v76 = &v40[-8 * (v74 >> 1)];
        v77 = v41;
        if (v41 != v40)
        {
          memmove(v76, v40, v41 - v40);
          v77 = v40;
        }
        v42 = &v76[v41 - v40];
        v69 = &v77[-8 * v75];
        v43 = v72;
      }
      else
      {
        v69 = v40;
      }
LABEL_79:
      *(_QWORD *)v42 = *v68;
      v42 += 8;
      v68 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v68;
      v40 = v69;
      if (!--v8)
        goto LABEL_75;
    }
  }
  v69 = v40;
LABEL_75:
  v70 = *(_QWORD **)(a1 + 16);
  if (v70 != v68)
  {
    do
    {
      if (v69 == v43)
      {
        if (v42 >= v41)
        {
          if (v41 == v43)
            v100 = 1;
          else
            v100 = (v41 - v43) >> 2;
          if (v100 >> 61)
            sub_223174E94();
          v101 = (char *)operator new(8 * v100);
          v97 = v101;
          v102 = (v100 + 3) >> 2;
          v69 = &v101[8 * v102];
          v103 = v42 - v43;
          v29 = v42 == v43;
          v42 = v69;
          if (!v29)
          {
            v42 = &v69[v103 & 0xFFFFFFFFFFFFFFF8];
            v104 = v103 - 8;
            v105 = &v101[8 * v102];
            v106 = v43;
            if (v104 < 0x38)
              goto LABEL_167;
            v107 = 8 * v102;
            v105 = &v101[8 * v102];
            v106 = v43;
            if ((unint64_t)(v105 - v43) < 0x20)
              goto LABEL_167;
            v108 = (v104 >> 3) + 1;
            v109 = 8 * (v108 & 0x3FFFFFFFFFFFFFFCLL);
            v105 = &v69[v109];
            v106 = &v43[v109];
            v110 = (__int128 *)(v43 + 16);
            v111 = &v101[v107 + 16];
            v112 = v108 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v113 = *v110;
              *((_OWORD *)v111 - 1) = *(v110 - 1);
              *(_OWORD *)v111 = v113;
              v110 += 2;
              v111 += 32;
              v112 -= 4;
            }
            while (v112);
            if (v108 != (v108 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_167:
              do
              {
                v114 = *(_QWORD *)v106;
                v106 += 8;
                *(_QWORD *)v105 = v114;
                v105 += 8;
              }
              while (v105 != v42);
            }
          }
          v41 = &v101[8 * v100];
          if (v43)
            operator delete(v43);
        }
        else
        {
          v95 = (v41 - v42) >> 3;
          if (v95 >= -1)
            v96 = v95 + 1;
          else
            v96 = v95 + 2;
          v97 = v43;
          v98 = v96 >> 1;
          v69 = &v97[8 * (v96 >> 1)];
          v99 = v97;
          if (v42 != v97)
          {
            memmove(v69, v97, v42 - v97);
            v99 = v42;
          }
          v42 = &v99[8 * v98];
        }
        v43 = v97;
      }
      v94 = *--v70;
      *((_QWORD *)v69 - 1) = v94;
      v69 -= 8;
    }
    while (v70 != *(_QWORD **)(a1 + 8));
  }
  v71 = *(char **)a1;
  *(_QWORD *)a1 = v43;
  *(_QWORD *)(a1 + 8) = v69;
  *(_QWORD *)(a1 + 16) = v42;
  *(_QWORD *)(a1 + 24) = v41;
  *(_QWORD *)(a1 + 32) -= v144;
  if (v71)
    operator delete(v71);
}

void sub_22323FB54(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_22323FBA0()
{
  __cxa_end_catch();
  JUMPOUT(0x22323FBA8);
}

uint64_t sub_22323FBC0(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 512;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_22323FC88(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22323FCAC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_22323FCC4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4tlog15ConsoleAppenderEE27__shared_ptr_default_deleteIS2_S2_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4tlog15ConsoleAppenderEE27__shared_ptr_default_deleteIS2_S2_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4tlog15ConsoleAppenderEE27__shared_ptr_default_deleteIS2_S2_EE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4tlog15ConsoleAppenderEE27__shared_ptr_default_deleteIS2_S2_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_22323FD38()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22323FD4C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24EC26880;
  return result;
}

void sub_22323FD70(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24EC26880;
}

_QWORD *sub_22323FD88@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _BYTE *v3;
  _QWORD *result;

  v2 = (_QWORD *)operator new();
  *v2 = off_24EC263F8;
  sub_223230490();
  v2[1] = off_24EC26378;
  v3 = v2 + 2;
  if (byte_2540CA8BF < 0)
  {
    sub_223197FA4(v3, (void *)xmmword_2540CA8A8, *((unint64_t *)&xmmword_2540CA8A8 + 1));
  }
  else
  {
    *(_OWORD *)v3 = xmmword_2540CA8A8;
    v2[4] = unk_2540CA8B8;
  }
  *a1 = v2;
  result = (_QWORD *)operator new();
  *result = &off_24EC26900;
  result[1] = 0;
  result[2] = 0;
  result[3] = v2;
  a1[1] = result;
  return result;
}

void sub_22323FE48(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_22323FE64(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x1093C402AB95488);
  _Unwind_Resume(a1);
}

uint64_t sub_22323FE88(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4tlog25PatternLayoutConfigurator9GeneratorEvE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4tlog25PatternLayoutConfigurator9GeneratorEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4tlog25PatternLayoutConfigurator9GeneratorEvE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4tlog25PatternLayoutConfigurator9GeneratorEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22323FEF4()
{
  return &unk_24EC26940;
}

void sub_22323FF04(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22323FF28(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_22323FF40(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4tlog22IParameterConfiguratorEE27__shared_ptr_default_deleteIS2_NS1_25PatternL"
                     "ayoutConfiguratorEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4tlog22IParameterConfiguratorEE27__shared_ptr_default_deleteIS2_NS1"
                                "_25PatternLayoutConfiguratorEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4tlog22IParameterConfiguratorEE27__shared_ptr_default_deleteIS2_NS1_25PatternLayoutConfiguratorEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4tlog22IParameterConfiguratorEE27__shared_ptr_default_deleteIS2_NS1_25PatternLayoutConfiguratorEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_22323FFB4()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22323FFC8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24EC26960;
  return result;
}

void sub_22323FFEC(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24EC26960;
}

_QWORD *sub_223240004@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = (_QWORD *)operator new();
  sub_2232317EC(v2);
  *a1 = v2;
  result = (_QWORD *)operator new();
  *result = &off_24EC269E0;
  result[1] = 0;
  result[2] = 0;
  result[3] = v2;
  a1[1] = result;
  return result;
}

void sub_223240070(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_22324008C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

uint64_t sub_2232400B0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4tlog27ConsoleAppenderConfigurator9GeneratorEvE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4tlog27ConsoleAppenderConfigurator9GeneratorEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4tlog27ConsoleAppenderConfigurator9GeneratorEvE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4tlog27ConsoleAppenderConfigurator9GeneratorEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22324011C()
{
  return &unk_24EC26A20;
}

void sub_22324012C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223240150(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_223240168(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4tlog21IAppenderConfiguratorEE27__shared_ptr_default_deleteIS2_NS1_27ConsoleAp"
                     "penderConfiguratorEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4tlog21IAppenderConfiguratorEE27__shared_ptr_default_deleteIS2_NS1_"
                                "27ConsoleAppenderConfiguratorEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4tlog21IAppenderConfiguratorEE27__shared_ptr_default_deleteIS2_NS1_27ConsoleAppenderConfiguratorEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4tlog21IAppenderConfiguratorEE27__shared_ptr_default_deleteIS2_NS1_27ConsoleAppenderConfiguratorEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_2232401DC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223240200(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_223240218(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000002245C5D5CLL)
    return a1 + 24;
  if (((v3 & 0x80000002245C5D5CLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000002245C5D5CLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000002245C5D5CLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void sub_22324029C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232402C0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_2232402D8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4tlog12FileAppender10FileHandleEE27__shared_ptr_default_deleteIS3_NS2_11OFileHandleEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4tlog12FileAppender10FileHandleEE27__shared_ptr_default_deleteIS3_N"
                                "S2_11OFileHandleEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4tlog12FileAppender10FileHandleEE27__shared_ptr_default_deleteIS3_NS2_11OFileHandleEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4tlog12FileAppender10FileHandleEE27__shared_ptr_default_deleteIS3_NS2_11OFileHandleEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_22324034C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223240370(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_223240388(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000002245C5F68)
    return a1 + 24;
  if (((v3 & 0x80000002245C5F68 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000002245C5F68))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000002245C5F68 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void sub_22324040C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223240430(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_223240448(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4tlog12FileAppender10FileHandleEE27__shared_ptr_default_deleteIS3_NS2_11IFileHandleEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4tlog12FileAppender10FileHandleEE27__shared_ptr_default_deleteIS3_N"
                                "S2_11IFileHandleEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4tlog12FileAppender10FileHandleEE27__shared_ptr_default_deleteIS3_NS2_11IFileHandleEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4tlog12FileAppender10FileHandleEE27__shared_ptr_default_deleteIS3_NS2_11IFileHandleEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_2232404B8(uint64_t a1, char *a2)
{
  std::mutex *v4;

  if (a2)
  {
    sub_2232404B8(a1, *(_QWORD *)a2);
    sub_2232404B8(a1, *((_QWORD *)a2 + 1));
    v4 = (std::mutex *)*((_QWORD *)a2 + 7);
    *((_QWORD *)a2 + 7) = 0;
    if (v4)
    {
      std::mutex::~mutex(v4);
      MEMORY[0x227684CE8]();
    }
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

uint64_t *sub_22324053C(uint64_t a1, const void **a2)
{
  uint64_t *v2;
  uint64_t *v3;
  int v4;
  const void *v5;
  size_t v6;
  uint64_t *v7;
  int v8;
  uint64_t *v9;
  size_t v10;
  size_t v11;
  int v12;
  int v13;
  const void *v14;
  size_t v15;
  size_t v16;
  int v17;

  v2 = (uint64_t *)(a1 + 8);
  v3 = *(uint64_t **)(a1 + 8);
  if (!v3)
    return v2;
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = a2;
  else
    v5 = *a2;
  if (v4 >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  v7 = (uint64_t *)(a1 + 8);
  do
  {
    while (1)
    {
      v8 = *((char *)v3 + 55);
      v9 = v8 >= 0 ? v3 + 4 : (uint64_t *)v3[4];
      v10 = v8 >= 0 ? *((unsigned __int8 *)v3 + 55) : v3[5];
      v11 = v6 >= v10 ? v10 : v6;
      v12 = memcmp(v9, v5, v11);
      if (v12)
        break;
      if (v10 >= v6)
        goto LABEL_23;
LABEL_9:
      v3 = (uint64_t *)v3[1];
      if (!v3)
        goto LABEL_24;
    }
    if (v12 < 0)
      goto LABEL_9;
LABEL_23:
    v7 = v3;
    v3 = (uint64_t *)*v3;
  }
  while (v3);
LABEL_24:
  if (v7 == v2)
    return v2;
  v13 = *((char *)v7 + 55);
  if (v13 >= 0)
    v14 = v7 + 4;
  else
    v14 = (const void *)v7[4];
  if (v13 >= 0)
    v15 = *((unsigned __int8 *)v7 + 55);
  else
    v15 = v7[5];
  if (v15 >= v6)
    v16 = v6;
  else
    v16 = v15;
  v17 = memcmp(v5, v14, v16);
  if (v17)
  {
    if ((v17 & 0x80000000) == 0)
      return v7;
    return v2;
  }
  else
  {
    if (v6 < v15)
      return v2;
    return v7;
  }
}

uint64_t *sub_223240654(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  const void *v8;
  size_t v9;
  uint64_t **v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  int v14;
  const void *v15;
  size_t v16;
  size_t v17;
  int v18;
  int v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *((char *)a2 + 23);
    if (v7 >= 0)
      v8 = a2;
    else
      v8 = *a2;
    if (v7 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    while (1)
    {
      v10 = (uint64_t **)v5;
      v13 = (const void *)v5[4];
      v11 = v5 + 4;
      v12 = v13;
      v14 = *((char *)v11 + 23);
      if (v14 >= 0)
        v15 = v11;
      else
        v15 = v12;
      if (v14 >= 0)
        v16 = *((unsigned __int8 *)v11 + 23);
      else
        v16 = v11[1];
      if (v16 >= v9)
        v17 = v9;
      else
        v17 = v16;
      v18 = memcmp(v8, v15, v17);
      if (v18)
      {
        if (v18 < 0)
          goto LABEL_8;
LABEL_22:
        v19 = memcmp(v15, v8, v17);
        if (v19)
        {
          if ((v19 & 0x80000000) == 0)
            return (uint64_t *)v10;
        }
        else if (v16 >= v9)
        {
          return (uint64_t *)v10;
        }
        v5 = v10[1];
        if (!v5)
        {
          v6 = v10 + 1;
LABEL_28:
          v20 = (uint64_t *)operator new(0x40uLL);
          v21 = v20 + 4;
          if (*(char *)(a3 + 23) < 0)
            goto LABEL_31;
LABEL_29:
          *(_OWORD *)v21 = *(_OWORD *)a3;
          v21[2] = *(_QWORD *)(a3 + 16);
          goto LABEL_32;
        }
      }
      else
      {
        if (v9 >= v16)
          goto LABEL_22;
LABEL_8:
        v5 = *v10;
        v6 = v10;
        if (!*v10)
          goto LABEL_28;
      }
    }
  }
  v10 = a1 + 1;
  v20 = (uint64_t *)operator new(0x40uLL);
  v21 = v20 + 4;
  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
    goto LABEL_29;
LABEL_31:
  sub_223197FA4(v21, *(void **)a3, *(_QWORD *)(a3 + 8));
LABEL_32:
  v22 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  v20[7] = v22;
  *v20 = 0;
  v20[1] = 0;
  v20[2] = (uint64_t)v10;
  *v6 = v20;
  v23 = (uint64_t *)**a1;
  v24 = v20;
  if (v23)
  {
    *a1 = v23;
    v24 = *v6;
  }
  sub_2231A9A8C(a1[1], v24);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v20;
}

void sub_2232407E4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2232407FC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223240820(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_223240838(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4tlog12FileAppenderEE27__shared_ptr_default_deleteIS2_S2_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4tlog12FileAppenderEE27__shared_ptr_default_deleteIS2_S2_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4tlog12FileAppenderEE27__shared_ptr_default_deleteIS2_S2_EE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4tlog12FileAppenderEE27__shared_ptr_default_deleteIS2_S2_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_2232408AC()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2232408C0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24EC26BD0;
  return result;
}

void sub_2232408E4(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24EC26BD0;
}

_QWORD *sub_2232408FC@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = (_QWORD *)operator new();
  sub_223233650(v2);
  *a1 = v2;
  result = (_QWORD *)operator new();
  *result = &off_24EC26C40;
  result[1] = 0;
  result[2] = 0;
  result[3] = v2;
  a1[1] = result;
  return result;
}

void sub_223240968(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_223240984(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

uint64_t sub_2232409A8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4tlog24FileAppenderConfigurator9GeneratorEvE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4tlog24FileAppenderConfigurator9GeneratorEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4tlog24FileAppenderConfigurator9GeneratorEvE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4tlog24FileAppenderConfigurator9GeneratorEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223240A14()
{
  return &unk_24EC26C80;
}

void sub_223240A24(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223240A48(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_223240A60(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4tlog21IAppenderConfiguratorEE27__shared_ptr_default_deleteIS2_NS1_24FileAppen"
                     "derConfiguratorEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4tlog21IAppenderConfiguratorEE27__shared_ptr_default_deleteIS2_NS1_"
                                "24FileAppenderConfiguratorEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4tlog21IAppenderConfiguratorEE27__shared_ptr_default_deleteIS2_NS1_24FileAppenderConfiguratorEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4tlog21IAppenderConfiguratorEE27__shared_ptr_default_deleteIS2_NS1_24FileAppenderConfiguratorEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_223240AD0(uint64_t a1)
{
  char *v2;
  void *v3;
  char *v5;
  char *v6;
  uint64_t v7;

  v2 = *(char **)(a1 + 16);
  if (v2)
  {
    while (1)
    {
      v5 = *(char **)v2;
      v6 = (char *)*((_QWORD *)v2 + 8);
      if (v6 == v2 + 40)
        break;
      if (v6)
      {
        v7 = 5;
LABEL_10:
        (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
      }
      if (v2[39] < 0)
        operator delete(*((void **)v2 + 2));
      operator delete(v2);
      v2 = v5;
      if (!v5)
        goto LABEL_2;
    }
    v6 = v2 + 40;
    v7 = 4;
    goto LABEL_10;
  }
LABEL_2:
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t *sub_223240B68(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  const void *v8;
  size_t v9;
  uint64_t **v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  int v14;
  const void *v15;
  size_t v16;
  size_t v17;
  int v18;
  int v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t *v23;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *((char *)a2 + 23);
    if (v7 >= 0)
      v8 = a2;
    else
      v8 = *a2;
    if (v7 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    while (1)
    {
      v10 = (uint64_t **)v5;
      v13 = (const void *)v5[4];
      v11 = v5 + 4;
      v12 = v13;
      v14 = *((char *)v11 + 23);
      if (v14 >= 0)
        v15 = v11;
      else
        v15 = v12;
      if (v14 >= 0)
        v16 = *((unsigned __int8 *)v11 + 23);
      else
        v16 = v11[1];
      if (v16 >= v9)
        v17 = v9;
      else
        v17 = v16;
      v18 = memcmp(v8, v15, v17);
      if (v18)
      {
        if (v18 < 0)
          goto LABEL_8;
LABEL_22:
        v19 = memcmp(v15, v8, v17);
        if (v19)
        {
          if ((v19 & 0x80000000) == 0)
            return (uint64_t *)v10;
        }
        else if (v16 >= v9)
        {
          return (uint64_t *)v10;
        }
        v5 = v10[1];
        if (!v5)
        {
          v6 = v10 + 1;
LABEL_28:
          v20 = (uint64_t *)operator new(0x38uLL);
          v21 = v20 + 4;
          if (*(char *)(a3 + 23) < 0)
            goto LABEL_31;
LABEL_29:
          *(_OWORD *)v21 = *(_OWORD *)a3;
          v21[2] = *(_QWORD *)(a3 + 16);
          goto LABEL_32;
        }
      }
      else
      {
        if (v9 >= v16)
          goto LABEL_22;
LABEL_8:
        v5 = *v10;
        v6 = v10;
        if (!*v10)
          goto LABEL_28;
      }
    }
  }
  v10 = a1 + 1;
  v20 = (uint64_t *)operator new(0x38uLL);
  v21 = v20 + 4;
  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
    goto LABEL_29;
LABEL_31:
  sub_223197FA4(v21, *(void **)a3, *(_QWORD *)(a3 + 8));
LABEL_32:
  *v20 = 0;
  v20[1] = 0;
  v20[2] = (uint64_t)v10;
  *v6 = v20;
  v22 = (uint64_t *)**a1;
  v23 = v20;
  if (v22)
  {
    *a1 = v22;
    v23 = *v6;
  }
  sub_2231A9A8C(a1[1], v23);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v20;
}

void sub_223240CEC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_223240D00(uint64_t **a1, uint64_t a2)
{
  char **v4;
  char *v5;
  char *v6;
  _OWORD *v7;
  char *v8;
  char **v9;
  size_t v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  int v14;
  const void *v15;
  size_t v16;
  size_t v17;
  int v18;
  uint64_t *v19;
  char *v21;

  v4 = (char **)(a1 + 1);
  v5 = (char *)operator new(0x50uLL);
  v6 = v5;
  v21 = v5;
  v7 = v5 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_223197FA4(v5 + 32, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *v7 = *(_OWORD *)a2;
    *((_QWORD *)v5 + 6) = *(_QWORD *)(a2 + 16);
  }
  *(_OWORD *)(v6 + 56) = *(_OWORD *)(a2 + 24);
  *((_QWORD *)v6 + 9) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v8 = *v4;
  v9 = v4;
  if (*v4)
  {
    if (v6[55] >= 0)
    {
      v10 = v6[55];
    }
    else
    {
      v7 = (_OWORD *)*((_QWORD *)v6 + 4);
      v10 = *((_QWORD *)v6 + 5);
    }
    while (1)
    {
      v4 = (char **)v8;
      v13 = (const void *)*((_QWORD *)v8 + 4);
      v11 = v8 + 32;
      v12 = v13;
      v14 = *((char *)v11 + 23);
      if (v14 >= 0)
        v15 = v11;
      else
        v15 = v12;
      if (v14 >= 0)
        v16 = *((unsigned __int8 *)v11 + 23);
      else
        v16 = v11[1];
      if (v16 >= v10)
        v17 = v10;
      else
        v17 = v16;
      v18 = memcmp(v7, v15, v17);
      if (v18)
      {
        if (v18 < 0)
          goto LABEL_8;
LABEL_22:
        v8 = v4[1];
        if (!v8)
        {
          v9 = v4 + 1;
          break;
        }
      }
      else
      {
        if (v10 >= v16)
          goto LABEL_22;
LABEL_8:
        v8 = *v4;
        v9 = v4;
        if (!*v4)
          break;
      }
    }
  }
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = v4;
  *v9 = v6;
  v19 = (uint64_t *)**a1;
  if (v19)
  {
    *a1 = v19;
    v6 = *v9;
  }
  sub_2231A9A8C(a1[1], (uint64_t *)v6);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v21;
}

void sub_223240E54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223240E68((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_223240E68(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      if (*(char *)(v2 + 79) < 0)
      {
        operator delete(*(void **)(v2 + 56));
        if ((*(char *)(v2 + 55) & 0x80000000) == 0)
          goto LABEL_5;
      }
      else if ((*(char *)(v2 + 55) & 0x80000000) == 0)
      {
        goto LABEL_5;
      }
      operator delete(*(void **)(v2 + 32));
    }
LABEL_5:
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t *sub_223240ED0(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_22323D798((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v8 == v21)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v8 == v17)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

uint64_t *sub_2232410FC(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  const void *v8;
  const void *v9;
  uint64_t **v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  const void *v16;
  size_t v17;
  int v18;
  int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v23;

  v6 = (uint64_t **)(a1 + 8);
  v5 = *(uint64_t **)(a1 + 8);
  if (!v5)
  {
    v10 = (uint64_t **)(a1 + 8);
    goto LABEL_29;
  }
  v7 = *((char *)a2 + 23);
  if (v7 >= 0)
    v8 = a2;
  else
    v8 = *a2;
  if (v7 >= 0)
    v9 = (const void *)*((unsigned __int8 *)a2 + 23);
  else
    v9 = a2[1];
  do
  {
    while (1)
    {
      v10 = (uint64_t **)v5;
      v13 = v5[4];
      v11 = v5 + 4;
      v12 = (_QWORD *)v13;
      v14 = *((char *)v11 + 23);
      v15 = v14 >= 0 ? v11 : v12;
      v16 = v14 >= 0 ? (const void *)*((unsigned __int8 *)v11 + 23) : (const void *)v11[1];
      v17 = (size_t)(v16 >= v9 ? v9 : v16);
      v18 = memcmp(v8, v15, v17);
      if (v18)
        break;
      if (v9 >= v16)
        goto LABEL_22;
LABEL_8:
      v5 = *v10;
      v6 = v10;
      if (!*v10)
        goto LABEL_29;
    }
    if (v18 < 0)
      goto LABEL_8;
LABEL_22:
    v19 = memcmp(v15, v8, v17);
    if (v19)
    {
      if ((v19 & 0x80000000) == 0)
        return (uint64_t *)v10;
    }
    else if (v16 >= v9)
    {
      return (uint64_t *)v10;
    }
    v5 = v10[1];
  }
  while (v5);
  v6 = v10 + 1;
LABEL_29:
  sub_223241250(a1, a3, (uint64_t)&v23);
  v20 = v23;
  *v23 = 0;
  v20[1] = 0;
  v20[2] = (uint64_t)v10;
  *v6 = v20;
  v21 = **(_QWORD **)a1;
  if (v21)
  {
    *(_QWORD *)a1 = v21;
    v20 = *v6;
  }
  sub_2231A9A8C(*(uint64_t **)(a1 + 8), v20);
  ++*(_QWORD *)(a1 + 16);
  return v23;
}

_BYTE *sub_223241250@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _BYTE *result;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;

  v5 = a1 + 8;
  v6 = operator new(0x70uLL);
  v7 = v6;
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_223197FA4((_BYTE *)v6 + 32, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *((_OWORD *)v6 + 2) = *(_OWORD *)a2;
    v6[6] = *(_QWORD *)(a2 + 16);
  }
  result = v7 + 7;
  if (*(char *)(a2 + 47) < 0)
  {
    result = sub_223197FA4(result, *(void **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)(a2 + 24);
    v7[9] = *(_QWORD *)(a2 + 40);
  }
  v9 = *(_QWORD *)(a2 + 56);
  v7[10] = *(_QWORD *)(a2 + 48);
  v7[11] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = *(_QWORD *)(a2 + 72);
  v7[12] = *(_QWORD *)(a2 + 64);
  v7[13] = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_223241340(_Unwind_Exception *a1)
{
  _QWORD *v1;
  char *v2;
  uint64_t v3;
  void **v4;

  if (v2[55] < 0)
  {
    operator delete(*v4);
    *v1 = 0;
    sub_223241388(v3, v2);
    _Unwind_Resume(a1);
  }
  *v1 = 0;
  sub_223241388(v3, v2);
  _Unwind_Resume(a1);
}

void sub_223241388(uint64_t a1, char *__p)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = (std::__shared_weak_count *)*((_QWORD *)__p + 13);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v6 = (std::__shared_weak_count *)*((_QWORD *)__p + 11);
    if (!v6)
      goto LABEL_11;
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if ((__p[79] & 0x80000000) == 0)
      {
LABEL_12:
        if ((__p[55] & 0x80000000) == 0)
        {
LABEL_13:
          operator delete(__p);
          return;
        }
        goto LABEL_18;
      }
    }
    else
    {
LABEL_11:
      if ((__p[79] & 0x80000000) == 0)
        goto LABEL_12;
    }
    operator delete(*((void **)__p + 7));
    if ((__p[55] & 0x80000000) == 0)
      goto LABEL_13;
LABEL_18:
    operator delete(*((void **)__p + 4));
    operator delete(__p);
    return;
  }
  if (__p)
    goto LABEL_13;
}

uint64_t *sub_223241470(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_22323D798((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v8 == v21)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v8 == v17)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

uint64_t **sub_22324169C(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  const void *v8;
  size_t v9;
  uint64_t **v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  int v14;
  const void *v15;
  size_t v16;
  size_t v17;
  int v18;
  int v19;
  char *v20;
  char *v21;
  uint64_t *v22;
  uint64_t *v23;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *((char *)a2 + 23);
    if (v7 >= 0)
      v8 = a2;
    else
      v8 = *a2;
    if (v7 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    while (1)
    {
      v10 = (uint64_t **)v5;
      v13 = (const void *)v5[4];
      v11 = v5 + 4;
      v12 = v13;
      v14 = *((char *)v11 + 23);
      if (v14 >= 0)
        v15 = v11;
      else
        v15 = v12;
      if (v14 >= 0)
        v16 = *((unsigned __int8 *)v11 + 23);
      else
        v16 = v11[1];
      if (v16 >= v9)
        v17 = v9;
      else
        v17 = v16;
      v18 = memcmp(v8, v15, v17);
      if (v18)
      {
        if (v18 < 0)
          goto LABEL_8;
LABEL_22:
        v19 = memcmp(v15, v8, v17);
        if (v19)
        {
          if ((v19 & 0x80000000) == 0)
            return v10;
        }
        else if (v16 >= v9)
        {
          return v10;
        }
        v5 = v10[1];
        if (!v5)
        {
          v6 = v10 + 1;
LABEL_28:
          v20 = (char *)operator new(0x48uLL);
          v21 = v20 + 32;
          if (*(char *)(a3 + 23) < 0)
            goto LABEL_31;
LABEL_29:
          *(_OWORD *)v21 = *(_OWORD *)a3;
          *((_QWORD *)v21 + 2) = *(_QWORD *)(a3 + 16);
          goto LABEL_32;
        }
      }
      else
      {
        if (v9 >= v16)
          goto LABEL_22;
LABEL_8:
        v5 = *v10;
        v6 = v10;
        if (!*v10)
          goto LABEL_28;
      }
    }
  }
  v10 = a1 + 1;
  v20 = (char *)operator new(0x48uLL);
  v21 = v20 + 32;
  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
    goto LABEL_29;
LABEL_31:
  sub_223197FA4(v21, *(void **)a3, *(_QWORD *)(a3 + 8));
LABEL_32:
  *(_OWORD *)(v20 + 56) = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)v20 = 0;
  *((_QWORD *)v20 + 1) = 0;
  *((_QWORD *)v20 + 2) = v10;
  *v6 = (uint64_t *)v20;
  v22 = (uint64_t *)**a1;
  v23 = (uint64_t *)v20;
  if (v22)
  {
    *a1 = v22;
    v23 = *v6;
  }
  sub_2231A9A8C(a1[1], v23);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v20;
}

void sub_22324182C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223241840(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_2231B0668(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_223241980(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_223241958(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223240AD0(v1);
  _Unwind_Resume(a1);
}

void sub_22324196C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223240AD0(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_223241980(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  _QWORD *v27;
  _BOOL8 v28;
  unint64_t v29;
  unint64_t v30;
  size_t prime;
  int8x8_t v32;
  unint64_t v33;
  uint8x8_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD v39[3];

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_22323D798((uint64_t)v39, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  sub_223241D9C(a1, v10, a3, (uint64_t)v39);
  v25 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v26 = *(float *)(a1 + 32);
  if (!v11 || (float)(v26 * (float)v11) < v25)
  {
    v28 = 1;
    if (v11 >= 3)
      v28 = (v11 & (v11 - 1)) != 0;
    v29 = v28 | (2 * v11);
    v30 = vcvtps_u32_f32(v25 / v26);
    if (v29 <= v30)
      prime = v30;
    else
      prime = v29;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v32 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v32)
      goto LABEL_65;
    if (prime < *(_QWORD *)&v32)
    {
      v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v32 < 3uLL || (v34 = (uint8x8_t)vcnt_s8(v32), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        v33 = std::__next_prime(v33);
      }
      else
      {
        v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2)
          v33 = v35;
      }
      if (prime <= v33)
        prime = v33;
      if (prime < *(_QWORD *)&v32)
LABEL_65:
        sub_2231B0668(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v36 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v27)
          goto LABEL_54;
      }
      else
      {
        v3 = v10;
        v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v27)
          goto LABEL_54;
      }
    }
    else
    {
      v3 = v36 & v10;
      v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v36 & v10));
      if (v27)
        goto LABEL_54;
    }
LABEL_78:
    *(_QWORD *)v39[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v39[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v39[0])
    {
      v37 = *(_QWORD *)(*(_QWORD *)v39[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v37 >= v11)
          v37 %= v11;
      }
      else
      {
        v37 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v37) = v39[0];
    }
    goto LABEL_89;
  }
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (!v27)
    goto LABEL_78;
LABEL_54:
  *(_QWORD *)v39[0] = *v27;
  *v27 = v39[0];
LABEL_89:
  v14 = (uint64_t *)v39[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_223241D84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223241E94((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223241D9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t result;

  v7 = a1 + 16;
  v8 = operator new(0x48uLL);
  v9 = v8;
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_223197FA4((_BYTE *)v8 + 16, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v8 + 1) = *(_OWORD *)a3;
    v8[4] = *(_QWORD *)(a3 + 16);
  }
  result = *(_QWORD *)(a3 + 48);
  if (result)
  {
    if (result == a3 + 24)
    {
      v9[8] = v9 + 5;
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
      goto LABEL_9;
    }
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  v9[8] = result;
LABEL_9:
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_223241E5C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_223241E94(v1);
  _Unwind_Resume(a1);
}

void sub_223241E70(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v2 + 39) < 0)
    operator delete(*v3);
  sub_223241E94(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_223241E94(uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (!*((_BYTE *)a1 + 16))
    {
LABEL_10:
      operator delete((void *)v2);
      return a1;
    }
    v3 = *(_QWORD **)(v2 + 64);
    if (v3 == (_QWORD *)(v2 + 40))
    {
      v4 = 4;
      v3 = (_QWORD *)(v2 + 40);
    }
    else
    {
      if (!v3)
        goto LABEL_8;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
    if (*(char *)(v2 + 39) < 0)
      operator delete(*(void **)(v2 + 16));
    goto LABEL_10;
  }
  return a1;
}

uint64_t sub_223241F10(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_2231B0668(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_223242050(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_223242028(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223240AD0(v1);
  _Unwind_Resume(a1);
}

void sub_22324203C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223240AD0(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_223242050(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  _QWORD *v27;
  _BOOL8 v28;
  unint64_t v29;
  unint64_t v30;
  size_t prime;
  int8x8_t v32;
  unint64_t v33;
  uint8x8_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD v39[3];

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_22323D798((uint64_t)v39, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  sub_22324246C(a1, v10, a3, (uint64_t)v39);
  v25 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v26 = *(float *)(a1 + 32);
  if (!v11 || (float)(v26 * (float)v11) < v25)
  {
    v28 = 1;
    if (v11 >= 3)
      v28 = (v11 & (v11 - 1)) != 0;
    v29 = v28 | (2 * v11);
    v30 = vcvtps_u32_f32(v25 / v26);
    if (v29 <= v30)
      prime = v30;
    else
      prime = v29;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v32 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v32)
      goto LABEL_65;
    if (prime < *(_QWORD *)&v32)
    {
      v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v32 < 3uLL || (v34 = (uint8x8_t)vcnt_s8(v32), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        v33 = std::__next_prime(v33);
      }
      else
      {
        v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2)
          v33 = v35;
      }
      if (prime <= v33)
        prime = v33;
      if (prime < *(_QWORD *)&v32)
LABEL_65:
        sub_2231B0668(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v36 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v27)
          goto LABEL_54;
      }
      else
      {
        v3 = v10;
        v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v27)
          goto LABEL_54;
      }
    }
    else
    {
      v3 = v36 & v10;
      v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v36 & v10));
      if (v27)
        goto LABEL_54;
    }
LABEL_78:
    *(_QWORD *)v39[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v39[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v39[0])
    {
      v37 = *(_QWORD *)(*(_QWORD *)v39[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v37 >= v11)
          v37 %= v11;
      }
      else
      {
        v37 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v37) = v39[0];
    }
    goto LABEL_89;
  }
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (!v27)
    goto LABEL_78;
LABEL_54:
  *(_QWORD *)v39[0] = *v27;
  *v27 = v39[0];
LABEL_89:
  v14 = (uint64_t *)v39[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_223242454(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223241E94((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_22324246C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t result;

  v7 = a1 + 16;
  v8 = operator new(0x48uLL);
  v9 = v8;
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_223197FA4((_BYTE *)v8 + 16, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v8 + 1) = *(_OWORD *)a3;
    v8[4] = *(_QWORD *)(a3 + 16);
  }
  result = *(_QWORD *)(a3 + 48);
  if (result)
  {
    if (result == a3 + 24)
    {
      v9[8] = v9 + 5;
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
      goto LABEL_9;
    }
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  v9[8] = result;
LABEL_9:
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_22324252C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_223241E94(v1);
  _Unwind_Resume(a1);
}

void sub_223242540(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v2 + 39) < 0)
    operator delete(*v3);
  sub_223241E94(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_223242564(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_22323D798((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v21 == v8)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v17 == v8)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

unsigned __int8 *sub_223242790(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  void **v13;
  unsigned __int8 *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  float v28;
  float v29;
  uint64_t v30;
  _QWORD *v31;
  _BOOL8 v32;
  unint64_t v33;
  unint64_t v34;
  size_t prime;
  int8x8_t v36;
  unint64_t v37;
  uint8x8_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD v43[2];
  char v44;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_22323D798((uint64_t)v43, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = (unsigned __int8 *)*v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = *((_QWORD *)v14 + 1);
            if (v21 == v10)
            {
              v22 = v14[39];
              if ((v22 & 0x80u) == 0)
                v23 = v14[39];
              else
                v23 = *((_QWORD *)v14 + 3);
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v14 + 2), v5, *((_QWORD *)v14 + 3)))
                    return v14;
                }
                else
                {
                  if (!v14[39])
                    return v14;
                  v24 = 0;
                  while (v14[v24 + 16] == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = *(unsigned __int8 **)v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = *((_QWORD *)v14 + 1);
          if (v17 == v10)
          {
            v18 = v14[39];
            if ((v18 & 0x80u) == 0)
              v19 = v14[39];
            else
              v19 = *((_QWORD *)v14 + 3);
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v14 + 2), v5, *((_QWORD *)v14 + 3)))
                  return v14;
              }
              else
              {
                if (!v14[39])
                  return v14;
                v20 = 0;
                while (v14[v20 + 16] == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = *(unsigned __int8 **)v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = (_QWORD *)(a1 + 16);
  v14 = (unsigned __int8 *)operator new(0x48uLL);
  v43[0] = v14;
  v43[1] = a1 + 16;
  v44 = 0;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v10;
  *((_OWORD *)v14 + 1) = *(_OWORD *)a3;
  *((_QWORD *)v14 + 4) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v27 = (_QWORD *)(a3 + 48);
  v26 = *(_QWORD *)(a3 + 48);
  if (v26)
  {
    if (v26 == a3 + 24)
    {
      *((_QWORD *)v14 + 8) = v14 + 40;
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 24))(v26);
      goto LABEL_57;
    }
    *((_QWORD *)v14 + 8) = v26;
  }
  else
  {
    v27 = v14 + 64;
  }
  *v27 = 0;
LABEL_57:
  v44 = 1;
  v28 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v29 = *(float *)(a1 + 32);
  if (v11 && (float)(v29 * (float)v11) >= v28)
  {
    v30 = *(_QWORD *)a1;
    v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v31)
    {
LABEL_60:
      *(_QWORD *)v14 = *v31;
LABEL_95:
      *v31 = v14;
      goto LABEL_96;
    }
  }
  else
  {
    v32 = 1;
    if (v11 >= 3)
      v32 = (v11 & (v11 - 1)) != 0;
    v33 = v32 | (2 * v11);
    v34 = vcvtps_u32_f32(v28 / v29);
    if (v33 <= v34)
      prime = v34;
    else
      prime = v33;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v36 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v36)
      goto LABEL_71;
    if (prime < *(_QWORD *)&v36)
    {
      v37 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v36 < 3uLL || (v38 = (uint8x8_t)vcnt_s8(v36), v38.i16[0] = vaddlv_u8(v38), v38.u32[0] > 1uLL))
      {
        v37 = std::__next_prime(v37);
      }
      else
      {
        v39 = 1 << -(char)__clz(v37 - 1);
        if (v37 >= 2)
          v37 = v39;
      }
      if (prime <= v37)
        prime = v37;
      if (prime < *(_QWORD *)&v36)
LABEL_71:
        sub_2231B0668(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v40 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v30 = *(_QWORD *)a1;
        v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v31)
          goto LABEL_60;
      }
      else
      {
        v3 = v10;
        v30 = *(_QWORD *)a1;
        v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v31)
          goto LABEL_60;
      }
    }
    else
    {
      v3 = v40 & v10;
      v30 = *(_QWORD *)a1;
      v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v40 & v10));
      if (v31)
        goto LABEL_60;
    }
  }
  *(_QWORD *)v14 = *v25;
  *v25 = v14;
  *(_QWORD *)(v30 + 8 * v3) = v25;
  if (*(_QWORD *)v14)
  {
    v41 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v41 >= v11)
        v41 %= v11;
    }
    else
    {
      v41 &= v11 - 1;
    }
    v31 = (_QWORD *)(*(_QWORD *)a1 + 8 * v41);
    goto LABEL_95;
  }
LABEL_96:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_223242BE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223241E94((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_223242BF8(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_22323D798((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v21 == v8)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v17 == v8)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

unsigned __int8 *sub_223242E24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  void **v13;
  unsigned __int8 *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  float v28;
  float v29;
  uint64_t v30;
  _QWORD *v31;
  _BOOL8 v32;
  unint64_t v33;
  unint64_t v34;
  size_t prime;
  int8x8_t v36;
  unint64_t v37;
  uint8x8_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD v43[2];
  char v44;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_22323D798((uint64_t)v43, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = (unsigned __int8 *)*v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = *((_QWORD *)v14 + 1);
            if (v21 == v10)
            {
              v22 = v14[39];
              if ((v22 & 0x80u) == 0)
                v23 = v14[39];
              else
                v23 = *((_QWORD *)v14 + 3);
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v14 + 2), v5, *((_QWORD *)v14 + 3)))
                    return v14;
                }
                else
                {
                  if (!v14[39])
                    return v14;
                  v24 = 0;
                  while (v14[v24 + 16] == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = *(unsigned __int8 **)v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = *((_QWORD *)v14 + 1);
          if (v17 == v10)
          {
            v18 = v14[39];
            if ((v18 & 0x80u) == 0)
              v19 = v14[39];
            else
              v19 = *((_QWORD *)v14 + 3);
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v14 + 2), v5, *((_QWORD *)v14 + 3)))
                  return v14;
              }
              else
              {
                if (!v14[39])
                  return v14;
                v20 = 0;
                while (v14[v20 + 16] == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = *(unsigned __int8 **)v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = (_QWORD *)(a1 + 16);
  v14 = (unsigned __int8 *)operator new(0x48uLL);
  v43[0] = v14;
  v43[1] = a1 + 16;
  v44 = 0;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v10;
  *((_OWORD *)v14 + 1) = *(_OWORD *)a3;
  *((_QWORD *)v14 + 4) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v27 = (_QWORD *)(a3 + 48);
  v26 = *(_QWORD *)(a3 + 48);
  if (v26)
  {
    if (v26 == a3 + 24)
    {
      *((_QWORD *)v14 + 8) = v14 + 40;
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 24))(v26);
      goto LABEL_57;
    }
    *((_QWORD *)v14 + 8) = v26;
  }
  else
  {
    v27 = v14 + 64;
  }
  *v27 = 0;
LABEL_57:
  v44 = 1;
  v28 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v29 = *(float *)(a1 + 32);
  if (v11 && (float)(v29 * (float)v11) >= v28)
  {
    v30 = *(_QWORD *)a1;
    v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v31)
    {
LABEL_60:
      *(_QWORD *)v14 = *v31;
LABEL_95:
      *v31 = v14;
      goto LABEL_96;
    }
  }
  else
  {
    v32 = 1;
    if (v11 >= 3)
      v32 = (v11 & (v11 - 1)) != 0;
    v33 = v32 | (2 * v11);
    v34 = vcvtps_u32_f32(v28 / v29);
    if (v33 <= v34)
      prime = v34;
    else
      prime = v33;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v36 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v36)
      goto LABEL_71;
    if (prime < *(_QWORD *)&v36)
    {
      v37 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v36 < 3uLL || (v38 = (uint8x8_t)vcnt_s8(v36), v38.i16[0] = vaddlv_u8(v38), v38.u32[0] > 1uLL))
      {
        v37 = std::__next_prime(v37);
      }
      else
      {
        v39 = 1 << -(char)__clz(v37 - 1);
        if (v37 >= 2)
          v37 = v39;
      }
      if (prime <= v37)
        prime = v37;
      if (prime < *(_QWORD *)&v36)
LABEL_71:
        sub_2231B0668(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v40 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v30 = *(_QWORD *)a1;
        v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v31)
          goto LABEL_60;
      }
      else
      {
        v3 = v10;
        v30 = *(_QWORD *)a1;
        v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v31)
          goto LABEL_60;
      }
    }
    else
    {
      v3 = v40 & v10;
      v30 = *(_QWORD *)a1;
      v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v40 & v10));
      if (v31)
        goto LABEL_60;
    }
  }
  *(_QWORD *)v14 = *v25;
  *v25 = v14;
  *(_QWORD *)(v30 + 8 * v3) = v25;
  if (*(_QWORD *)v14)
  {
    v41 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v41 >= v11)
        v41 %= v11;
    }
    else
    {
      v41 &= v11 - 1;
    }
    v31 = (_QWORD *)(*(_QWORD *)a1 + 8 * v41);
    goto LABEL_95;
  }
LABEL_96:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_223243274(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223241E94((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_22324328C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC26CA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22324329C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC26CA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232432CC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_2232432DC()
{
  void *v0;

  operator delete(v0);
}

void sub_2232432E4()
{
  uint64_t v0;

  operator delete(*(void **)(v0 + 16));
}

uint64_t sub_2232432EC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(void))(*a1 + 8 * a2))();
}

uint64_t sub_2232432F8()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 64);
}

uint64_t sub_22324330C(uint64_t a1, uint64_t a2)
{
  const void **v2;
  BOOL v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v16;

  v2 = (const void **)(a1 + 8);
  if (*(_DWORD *)a1 != *(_DWORD *)a2)
    return 0;
  if (*(_BYTE *)(a1 + 32))
    v3 = *(_BYTE *)(a2 + 32) == 0;
  else
    v3 = 1;
  if (v3)
    return (*(_BYTE *)(a1 + 32) != 0) == (*(_BYTE *)(a2 + 32) != 0);
  v5 = *(unsigned __int8 *)(a1 + 31);
  if ((v5 & 0x80u) == 0)
    v6 = *(unsigned __int8 *)(a1 + 31);
  else
    v6 = *(_QWORD *)(a1 + 16);
  v7 = *(unsigned __int8 *)(a2 + 31);
  v8 = (char)v7;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a2 + 16);
  if (v6 != v7)
    return 0;
  if (v8 >= 0)
    v9 = (unsigned __int8 *)(a2 + 8);
  else
    v9 = *(unsigned __int8 **)(a2 + 8);
  if ((v5 & 0x80) != 0)
    return memcmp(*v2, v9, *(_QWORD *)(a1 + 16)) == 0;
  if (!*(_BYTE *)(a1 + 31))
    return 1;
  v10 = v5 - 1;
  do
  {
    v12 = *(unsigned __int8 *)v2;
    v2 = (const void **)((char *)v2 + 1);
    v11 = v12;
    v14 = *v9++;
    v13 = v14;
    v16 = v10-- != 0;
    result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

int *sub_223243400()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CAA98);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2540CAA98))
    return &dword_2540CAAA0;
  sub_223243494();
  __cxa_atexit((void (*)(void *))sub_223243684, &dword_2540CAAA0, &dword_22314D000);
  __cxa_guard_release(&qword_2540CAA98);
  return &dword_2540CAAA0;
}

void sub_22324347C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CAA98);
  _Unwind_Resume(a1);
}

double sub_223243494()
{
  const char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  size_t v18;
  void *v19;
  void *v20;
  double result;
  uint64_t v22;
  uint64_t v23;
  void *__p[2];
  unint64_t v25;

  LOBYTE(xmmword_2540CAAA8) = 0;
  byte_2540CAAC0 = 0;
  dword_2540CAAA0 = getpid();
  objc_msgSend_processInfo(MEMORY[0x24BDD1760], v0, v1, v2, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_processName(v5, v6, v7, v8, v9, v10);
  v11 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v17 = (const char *)objc_msgSend_UTF8String(v11, v12, v13, v14, v15, v16);
  v18 = strlen(v17);
  if (v18 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v19 = (void *)v18;
  if (v18 >= 0x17)
  {
    v22 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v22 = v18 | 7;
    v23 = v22 + 1;
    v20 = operator new(v22 + 1);
    __p[1] = v19;
    v25 = v23 | 0x8000000000000000;
    __p[0] = v20;
LABEL_12:
    memmove(v20, v17, (size_t)v19);
    *((_BYTE *)v19 + (_QWORD)v20) = 0;

    if (byte_2540CAAC0)
      goto LABEL_5;
LABEL_13:
    result = *(double *)__p;
    xmmword_2540CAAA8 = *(_OWORD *)__p;
    unk_2540CAAB8 = v25;
    __p[1] = 0;
    v25 = 0;
    __p[0] = 0;
    byte_2540CAAC0 = 1;
    return result;
  }
  HIBYTE(v25) = v18;
  v20 = __p;
  if (v18)
    goto LABEL_12;
  LOBYTE(__p[0]) = 0;

  if (!byte_2540CAAC0)
    goto LABEL_13;
LABEL_5:
  if (byte_2540CAABF < 0)
    operator delete((void *)xmmword_2540CAAA8);
  result = *(double *)__p;
  xmmword_2540CAAA8 = *(_OWORD *)__p;
  unk_2540CAAB8 = v25;
  HIBYTE(v25) = 0;
  LOBYTE(__p[0]) = 0;
  return result;
}

void sub_223243638(_Unwind_Exception *a1)
{
  void *v1;

  if (byte_2540CAAC0)
  {
    if (byte_2540CAABF < 0)
      operator delete((void *)xmmword_2540CAAA8);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_223243684(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(_BYTE *)(result + 32))
  {
    if (*(char *)(result + 31) < 0)
    {
      operator delete(*(void **)(result + 8));
      return v1;
    }
  }
  return result;
}

_QWORD *CV3DPlaneDetectionClippingVolumeCreate()
{
  _QWORD *result;

  result = operator new(0x28uLL, MEMORY[0x24BEDB6B8]);
  if (result)
  {
    result[2] = 0;
    result[3] = 0;
    *((_DWORD *)result + 8) = 1;
    *result = &off_24EC2C0F0;
    result[1] = 0;
  }
  return result;
}

uint64_t CV3DPlaneDetectionClippingVolumeRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 32);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

BOOL CV3DPlaneDetectionClippingVolumeAppendBoundingBox(uint64_t a1, __n128 a2, int8x16_t a3)
{
  __n128 v5;
  int8x8_t v6;

  if (a1)
  {
    a2.n128_u32[3] = a3.i32[0];
    v5 = a2;
    v6 = vext_s8(*(int8x8_t *)a3.i8, (int8x8_t)*(_OWORD *)&vextq_s8(a3, a3, 8uLL), 4uLL);
    sub_223677558((char **)(a1 + 8), (uint64_t *)&v5);
  }
  return a1 != 0;
}

_OWORD *CV3DPlaneDetectionClippingVolumeOptimize(uint64_t a1, CFTypeRef *a2)
{
  _OWORD *result;
  void *v4;
  void *v5;
  const void *v6;
  std::__shared_weak_count *cat;
  unint64_t *v8;
  unint64_t v9;
  char *v10;
  const std::error_category *v11;
  CFErrorRef v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  __int128 v18;
  _QWORD v19[3];
  char v20;
  void *__p;
  __int128 v22;
  CFErrorRef v23;
  std::__shared_weak_count *v24;
  std::error_condition v25;

  if (a1)
  {
    sub_2236776F4((uint64_t *)(a1 + 8), (uint64_t)v19);
    if (v20)
    {
      result = operator new(0x28uLL, MEMORY[0x24BEDB6B8]);
      v4 = (void *)v19[0];
      if (result)
      {
        result[1] = *(_OWORD *)&v19[1];
        *((_DWORD *)result + 8) = 1;
        *(_QWORD *)result = &off_24EC2C0F0;
        *((_QWORD *)result + 1) = v4;
        return result;
      }
LABEL_39:
      if (v4)
      {
        v19[1] = v4;
        v16 = v4;
        goto LABEL_41;
      }
      return 0;
    }
    __p = operator new(0x20uLL);
    v22 = xmmword_2245B8D70;
    strcpy((char *)__p, "Volume cannot be optimized");
    v10 = (char *)operator new(0x80uLL);
    v17 = (uint64_t)v10;
    v18 = xmmword_2245C63F0;
    strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionClippingVolume.cpp");
    if (a2)
    {
      v11 = std::generic_category();
      *(_QWORD *)&v25.__val_ = 45;
      v25.__cat_ = v11;
      sub_2245321DC(&v25, (uint64_t)&__p, &v23);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v12 = v23;
      if (v23)
        CFRetain(v23);
      *a2 = v12;
      v13 = v24;
      if (v24)
      {
        p_shared_owners = (unint64_t *)&v24->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      if ((SHIBYTE(v18) & 0x80000000) == 0)
      {
        if ((SHIBYTE(v22) & 0x80000000) == 0)
          goto LABEL_32;
        goto LABEL_37;
      }
      v10 = (char *)v17;
    }
    operator delete(v10);
    if ((SHIBYTE(v22) & 0x80000000) == 0)
    {
LABEL_32:
      if (!v20)
        return 0;
LABEL_38:
      v4 = (void *)v19[0];
      goto LABEL_39;
    }
LABEL_37:
    operator delete(__p);
    if (!v20)
      return 0;
    goto LABEL_38;
  }
  HIBYTE(v19[2]) = 20;
  strcpy((char *)v19, "Input volume is NULL");
  v5 = operator new(0x80uLL);
  __p = v5;
  v22 = xmmword_2245C63F0;
  strcpy((char *)v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionClippingVolume.cpp");
  if (!a2)
    goto LABEL_17;
  v17 = 22;
  *(_QWORD *)&v18 = std::generic_category();
  sub_2245321DC((const std::error_condition *)&v17, (uint64_t)v19, (CFErrorRef *)&v25);
  if (*a2)
    CFRelease(*a2);
  *a2 = 0;
  v6 = *(const void **)&v25.__val_;
  if (*(_QWORD *)&v25.__val_)
    CFRetain(*(CFTypeRef *)&v25.__val_);
  *a2 = v6;
  cat = (std::__shared_weak_count *)v25.__cat_;
  if (v25.__cat_)
  {
    v8 = (unint64_t *)&v25.__cat_[1];
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))cat->__on_zero_shared)(cat);
      std::__shared_weak_count::__release_weak(cat);
    }
  }
  if (SHIBYTE(v22) < 0)
  {
    v5 = __p;
LABEL_17:
    operator delete(v5);
  }
  if ((SHIBYTE(v19[2]) & 0x80000000) == 0)
    return 0;
  v16 = (void *)v19[0];
LABEL_41:
  operator delete(v16);
  return 0;
}

void sub_223243AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;

  operator delete(v26);
  if (a26 < 0)
    operator delete(__p);
  if (a19)
  {
    if (a13)
      operator delete(a13);
  }
  _Unwind_Resume(a1);
}

BOOL CV3DPlaneDetectionConfigurationEnableDebug(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
  {
    *(_BYTE *)(a1 + 45) = 1;
  }
  else
  {
    __p = operator new(0x20uLL);
    v11 = xmmword_2245B8D50;
    strcpy((char *)__p, "Input configuration is NULL");
    v4 = (char *)operator new(0x88uLL);
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionConfiguration+Private.cpp");
    if (a2)
    {
      *(_QWORD *)&v14.__val_ = 22;
      v14.__cat_ = std::generic_category();
      sub_2245321DC(&v14, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v5;
      v6 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    operator delete(v4);
    if (SHIBYTE(v11) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_223243CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

double CV3DPlaneDetectionConfigurationCreate()
{
  _OWORD *v0;
  double result;

  v0 = operator new(0x38uLL, MEMORY[0x24BEDB6B8]);
  if (v0)
  {
    v0[1] = 0u;
    v0[2] = 0u;
    *((_QWORD *)v0 + 6) = 0;
    *(_QWORD *)&result = 0xF00000003;
    *((_QWORD *)v0 + 1) = 0xF00000003;
    *((_QWORD *)v0 + 2) = 0x3FF0000000000000;
    *((_DWORD *)v0 + 6) = 1063675494;
    *((_QWORD *)v0 + 4) = 24;
    *((_DWORD *)v0 + 10) = 0;
    *((_WORD *)v0 + 22) = 0;
    *((_DWORD *)v0 + 12) = 1;
    *(_QWORD *)v0 = &off_24EC2BC08;
  }
  return result;
}

uint64_t CV3DPlaneDetectionConfigurationRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 48);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

BOOL CV3DPlaneDetectionConfigurationEqualConfigurations(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;

  v2 = a1 + 8;
  if (!a1)
    v2 = 0;
  v3 = *(_DWORD *)v2 == *(_DWORD *)(a2 + 8) && *(_DWORD *)(v2 + 4) == *(_DWORD *)(a2 + 12);
  return v3
      && *(double *)(v2 + 8) == *(double *)(a2 + 16)
      && *(float *)(v2 + 16) == *(float *)(a2 + 24)
      && *(_QWORD *)(v2 + 24) == *(_QWORD *)(a2 + 32)
      && *(unsigned __int8 *)(v2 + 32) == *(unsigned __int8 *)(a2 + 40)
      && *(unsigned __int8 *)(v2 + 33) == *(unsigned __int8 *)(a2 + 41)
      && *(unsigned __int8 *)(v2 + 34) == *(unsigned __int8 *)(a2 + 42)
      && *(unsigned __int8 *)(v2 + 35) == *(unsigned __int8 *)(a2 + 43)
      && *(unsigned __int8 *)(v2 + 36) == *(unsigned __int8 *)(a2 + 44)
      && *(unsigned __int8 *)(v2 + 37) == *(unsigned __int8 *)(a2 + 45);
}

uint64_t CV3DPlaneDetectionConfigurationSetDesiredOrientations(uint64_t a1, unsigned int a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  char *v10;
  CFTypeRef v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  __int128 v16;
  CFTypeRef cf;
  std::__shared_weak_count *v18;
  std::error_condition v19;

  if (a1)
  {
    if (a2 < 5 || a2 == 7)
    {
      *(_DWORD *)(a1 + 8) = a2;
      return 1;
    }
    __p = operator new(0x20uLL);
    v16 = xmmword_2245C6420;
    strcpy((char *)__p, "Desired orientation is invalid");
    v10 = (char *)operator new(0x80uLL);
    strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v19.__val_ = 22;
      v19.__cat_ = std::generic_category();
      sub_2245321DC(&v19, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v11 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v11;
      v12 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    operator delete(v10);
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return 0;
  }
  else
  {
    __p = operator new(0x20uLL);
    v16 = xmmword_2245B8D50;
    strcpy((char *)__p, "Input configuration is NULL");
    v5 = (char *)operator new(0x80uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v19.__val_ = 22;
      v19.__cat_ = std::generic_category();
      sub_2245321DC(&v19, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v18;
      if (v18)
      {
        v8 = (unint64_t *)&v18->__shared_owners_;
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return 0;
  }
  operator delete(__p);
  return 0;
}

void sub_223244130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DPlaneDetectionConfigurationSetDesiredExtent(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  char *v10;
  CFTypeRef v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  __int128 v16;
  CFTypeRef cf;
  std::__shared_weak_count *v18;
  std::error_condition v19;

  if (a1)
  {
    if (a2)
    {
      *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 8);
      return 1;
    }
    __p = operator new(0x20uLL);
    v16 = xmmword_2245C6440;
    strcpy((char *)__p, "Input desired extent is NULL");
    v10 = (char *)operator new(0x80uLL);
    strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v19.__val_ = 22;
      v19.__cat_ = std::generic_category();
      sub_2245321DC(&v19, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v11 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v11;
      v12 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    operator delete(v10);
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return 0;
  }
  else
  {
    __p = operator new(0x20uLL);
    v16 = xmmword_2245B8D50;
    strcpy((char *)__p, "Input configuration is NULL");
    v5 = (char *)operator new(0x80uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v19.__val_ = 22;
      v19.__cat_ = std::generic_category();
      sub_2245321DC(&v19, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v18;
      if (v18)
      {
        v8 = (unint64_t *)&v18->__shared_owners_;
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return 0;
  }
  operator delete(__p);
  return 0;
}

void sub_22324445C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DPlaneDetectionConfigurationSetMinVergenceAngle(uint64_t a1, CFTypeRef *a2, double a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    *(double *)(a1 + 16) = a3;
  }
  else
  {
    __p = operator new(0x20uLL);
    v12 = xmmword_2245B8D50;
    strcpy((char *)__p, "Input configuration is NULL");
    v5 = (char *)operator new(0x80uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionConfiguration.cpp");
    if (a2)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_223244614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DPlaneDetectionConfigurationSetPearlSubsampling(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    *(_QWORD *)(a1 + 32) = a2;
  }
  else
  {
    __p = operator new(0x20uLL);
    v12 = xmmword_2245B8D50;
    strcpy((char *)__p, "Input configuration is NULL");
    v5 = (char *)operator new(0x80uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_2232447C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DPlaneDetectionConfigurationSetDetectionPolicy(uint64_t a1, unsigned int a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  char *v10;
  CFTypeRef v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  __int128 v16;
  CFTypeRef cf;
  std::__shared_weak_count *v18;
  std::error_condition v19;

  if (a1)
  {
    if (a2 < 4)
    {
      *(_BYTE *)(a1 + 40) = a2;
      return 1;
    }
    __p = operator new(0x28uLL);
    v16 = xmmword_2245C6450;
    strcpy((char *)__p, "Plane detection policy is invalid");
    v10 = (char *)operator new(0x80uLL);
    strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v19.__val_ = 22;
      v19.__cat_ = std::generic_category();
      sub_2245321DC(&v19, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v11 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v11;
      v12 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    operator delete(v10);
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return 0;
  }
  else
  {
    __p = operator new(0x20uLL);
    v16 = xmmword_2245B8D50;
    strcpy((char *)__p, "Input configuration is NULL");
    v5 = (char *)operator new(0x80uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v19.__val_ = 22;
      v19.__cat_ = std::generic_category();
      sub_2245321DC(&v19, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v18;
      if (v18)
      {
        v8 = (unint64_t *)&v18->__shared_owners_;
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return 0;
  }
  operator delete(__p);
  return 0;
}

void sub_223244ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DPlaneDetectionConfigurationEnableDeterministicMode(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
  {
    *(_BYTE *)(a1 + 42) = 1;
  }
  else
  {
    __p = operator new(0x20uLL);
    v11 = xmmword_2245B8D50;
    strcpy((char *)__p, "Input configuration is NULL");
    v4 = (char *)operator new(0x80uLL);
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionConfiguration.cpp");
    if (a2)
    {
      *(_QWORD *)&v14.__val_ = 22;
      v14.__cat_ = std::generic_category();
      sub_2245321DC(&v14, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v5;
      v6 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    operator delete(v4);
    if (SHIBYTE(v11) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_223244C98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DPlaneDetectionConfigurationEnableSingleThreaded(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
  {
    *(_BYTE *)(a1 + 43) = 1;
  }
  else
  {
    __p = operator new(0x20uLL);
    v11 = xmmword_2245B8D50;
    strcpy((char *)__p, "Input configuration is NULL");
    v4 = (char *)operator new(0x80uLL);
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionConfiguration.cpp");
    if (a2)
    {
      *(_QWORD *)&v14.__val_ = 22;
      v14.__cat_ = std::generic_category();
      sub_2245321DC(&v14, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v5;
      v6 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    operator delete(v4);
    if (SHIBYTE(v11) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_223244E48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DPlaneDetectionConfigurationEnableLowQosScheduling(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
  {
    *(_BYTE *)(a1 + 44) = 1;
  }
  else
  {
    __p = operator new(0x20uLL);
    v11 = xmmword_2245B8D50;
    strcpy((char *)__p, "Input configuration is NULL");
    v4 = (char *)operator new(0x80uLL);
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionConfiguration.cpp");
    if (a2)
    {
      *(_QWORD *)&v14.__val_ = 22;
      v14.__cat_ = std::generic_category();
      sub_2245321DC(&v14, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v5;
      v6 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    operator delete(v4);
    if (SHIBYTE(v11) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_223244FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DPlaneDetectionConfigurationEnableMLSegmentDetector(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
  {
    *(_BYTE *)(a1 + 41) = 1;
  }
  else
  {
    __p = operator new(0x20uLL);
    v11 = xmmword_2245B8D50;
    strcpy((char *)__p, "Input configuration is NULL");
    v4 = (char *)operator new(0x80uLL);
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionConfiguration.cpp");
    if (a2)
    {
      *(_QWORD *)&v14.__val_ = 22;
      v14.__cat_ = std::generic_category();
      sub_2245321DC(&v14, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v5;
      v6 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    operator delete(v4);
    if (SHIBYTE(v11) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_2232451A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

double CV3DPlaneDetectionExtentTypesCreate()
{
  _QWORD *v0;
  double result;

  v0 = operator new(0x10uLL, MEMORY[0x24BEDB6B8]);
  if (v0)
  {
    *(_QWORD *)&result = 0x100000000;
    v0[1] = 0x100000000;
    *v0 = &off_24EC2BC78;
  }
  return result;
}

uint64_t CV3DPlaneDetectionExtentTypesRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 12);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

BOOL CV3DPlaneDetectionExtentTypesSetAxisAlignedBox(uint64_t a1, CFTypeRef *a2)
{
  return sub_223245254(a1, a2, 1);
}

BOOL sub_223245254(uint64_t a1, CFTypeRef *a2, int a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    *(_DWORD *)(a1 + 8) |= a3;
  }
  else
  {
    __p = operator new(0x20uLL);
    v12 = xmmword_2245B8D00;
    strcpy((char *)__p, "Input extent type is NULL");
    v5 = (char *)operator new(0x78uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionExtentTypes.cpp");
    if (a2)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_2232453CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DPlaneDetectionExtentTypesSetOrientedBox(uint64_t a1, CFTypeRef *a2)
{
  return sub_223245254(a1, a2, 2);
}

BOOL CV3DPlaneDetectionExtentTypesSetConvexHull(uint64_t a1, CFTypeRef *a2)
{
  return sub_223245254(a1, a2, 4);
}

BOOL CV3DPlaneDetectionExtentTypesSetGrid(uint64_t a1, CFTypeRef *a2)
{
  return sub_223245254(a1, a2, 8);
}

BOOL CV3DPlaneDetectionExtentTypesSetAll(uint64_t a1, CFTypeRef *a2)
{
  return sub_223245254(a1, a2, 15);
}

uint64_t CV3DPlaneDetectionSemanticFrameCreate(std::__shared_weak_count_vtbl *cf, std::__shared_weak_count_vtbl *a2, std::__shared_weak_count_vtbl *a3, CFTypeRef *a4, double a5, __n128 a6, __n128 a7, __n128 a8, float32x4_t a9, float32x4_t a10, float32x4_t a11, float32x4_t a12)
{
  uint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  size_t v50;
  size_t v51;
  size_t v52;
  size_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t (**v59)();
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t (**v63)();
  unint64_t *v64;
  char *v65;
  const std::error_category *v66;
  CFErrorRef v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t (**v71)();
  unint64_t *v72;
  const std::error_category *v74;
  CFErrorRef v75;
  unint64_t *v76;
  unint64_t v77;
  char *v78;
  std::__shared_weak_count *v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t *v87;
  std::__shared_weak_count *v88;
  uint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t *v96;
  std::__shared_weak_count *v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  void *__p;
  _BYTE v113[24];
  uint64_t (**v114)();
  __int128 v115;
  uint64_t (**v116)();
  __int128 v117;
  unint64_t v118;
  float64x2_t v119;
  double v120;
  float64x2_t v121;
  double v122;
  float64x2_t v123;
  double v124;
  char v125;
  char v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  uint64_t v135;
  __int128 v136;
  char *v137;
  __int128 v138;
  uint64_t v139;
  __int128 v140;
  uint64_t (**v141)();
  __int128 v142;
  uint64_t (**v143)();
  __int128 v144;
  uint64_t v145;
  __int128 v146;
  CFErrorRef v147;
  std::__shared_weak_count *v148;

  if (!cf)
  {
    __p = operator new(0x20uLL);
    *(_OWORD *)v113 = xmmword_2245C6420;
    strcpy((char *)__p, "Input semantics buffer is NULL");
    v58 = (char *)operator new(0x78uLL);
    v137 = v58;
    v138 = xmmword_2245C6480;
    strcpy(v58, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionFrame.cpp");
    if (a4)
    {
      v145 = 22;
      *(_QWORD *)&v146 = std::generic_category();
      sub_2245321DC((const std::error_condition *)&v145, (uint64_t)&__p, (CFErrorRef *)&v143);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v59 = v143;
      if (v143)
        CFRetain(v143);
      *a4 = v59;
      v60 = (std::__shared_weak_count *)v144;
      if (!(_QWORD)v144)
        goto LABEL_100;
      v61 = (unint64_t *)(v144 + 8);
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      goto LABEL_99;
    }
    goto LABEL_102;
  }
  if (!a2)
  {
    __p = operator new(0x20uLL);
    *(_OWORD *)v113 = xmmword_2245B8EA0;
    strcpy((char *)__p, "Input confidence buffer is NULL");
    v58 = (char *)operator new(0x78uLL);
    v137 = v58;
    v138 = xmmword_2245C6480;
    strcpy(v58, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionFrame.cpp");
    if (a4)
    {
      v145 = 22;
      *(_QWORD *)&v146 = std::generic_category();
      sub_2245321DC((const std::error_condition *)&v145, (uint64_t)&__p, (CFErrorRef *)&v143);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v63 = v143;
      if (v143)
        CFRetain(v143);
      *a4 = v63;
      v60 = (std::__shared_weak_count *)v144;
      if (!(_QWORD)v144)
        goto LABEL_100;
      v64 = (unint64_t *)(v144 + 8);
      do
        v62 = __ldaxr(v64);
      while (__stlxr(v62 - 1, v64));
      goto LABEL_99;
    }
LABEL_102:
    operator delete(v58);
    goto LABEL_103;
  }
  if (a3)
  {
    sub_2242A8B78(&__p, cf, 1, 0);
    v17 = *(uint64_t **)v113;
    v146 = *(_OWORD *)v113;
    if (*(_QWORD *)&v113[8])
    {
      v18 = (unint64_t *)(*(_QWORD *)&v113[8] + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    v145 = (uint64_t)&off_24EC71528;
    if (v17)
    {
      v21 = *v17;
      v20 = (std::__shared_weak_count *)v17[1];
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v23 = __ldxr(p_shared_owners);
        while (__stxr(v23 + 1, p_shared_owners));
        do
          v24 = __ldaxr(p_shared_owners);
        while (__stlxr(v24 - 1, p_shared_owners));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      if (v21)
        sub_2242AE7CC(v146);
    }
    __p = &off_24EC715B8;
    v25 = *(std::__shared_weak_count **)&v113[8];
    if (*(_QWORD *)&v113[8])
    {
      v26 = (unint64_t *)(*(_QWORD *)&v113[8] + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    sub_2242A8B78(&__p, a2, 1, 0);
    v28 = *(uint64_t **)v113;
    v144 = *(_OWORD *)v113;
    if (*(_QWORD *)&v113[8])
    {
      v29 = (unint64_t *)(*(_QWORD *)&v113[8] + 8);
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    v143 = &off_24EC71528;
    if (v28)
    {
      v32 = *v28;
      v31 = (std::__shared_weak_count *)v28[1];
      if (v31)
      {
        v33 = (unint64_t *)&v31->__shared_owners_;
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 1, v33));
        do
          v35 = __ldaxr(v33);
        while (__stlxr(v35 - 1, v33));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      if (v32)
        sub_2242AE7CC(v144);
    }
    __p = &off_24EC715B8;
    v36 = *(std::__shared_weak_count **)&v113[8];
    if (*(_QWORD *)&v113[8])
    {
      v37 = (unint64_t *)(*(_QWORD *)&v113[8] + 8);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    sub_2242A8B78(&__p, a3, 1, 0);
    v39 = *(uint64_t **)v113;
    v142 = *(_OWORD *)v113;
    if (*(_QWORD *)&v113[8])
    {
      v40 = (unint64_t *)(*(_QWORD *)&v113[8] + 8);
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    v141 = &off_24EC71528;
    if (v39)
    {
      v43 = *v39;
      v42 = (std::__shared_weak_count *)v39[1];
      if (v42)
      {
        v44 = (unint64_t *)&v42->__shared_owners_;
        do
          v45 = __ldxr(v44);
        while (__stxr(v45 + 1, v44));
        do
          v46 = __ldaxr(v44);
        while (__stlxr(v46 - 1, v44));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      if (v43)
        sub_2242AE7CC(v142);
    }
    __p = &off_24EC715B8;
    v47 = *(std::__shared_weak_count **)&v113[8];
    if (*(_QWORD *)&v113[8])
    {
      v48 = (unint64_t *)(*(_QWORD *)&v113[8] + 8);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    v50 = sub_2242A9B5C((uint64_t)&v145);
    if (v50 == sub_2242A9B5C((uint64_t)&v143)
      && (v51 = sub_2242A9C94((uint64_t)&v145), v51 == sub_2242A9C94((uint64_t)&v143)))
    {
      v52 = sub_2242A9B5C((uint64_t)&v141);
      if (v52 == sub_2242A9B5C((uint64_t)&v145))
      {
        v53 = sub_2242A9C94((uint64_t)&v141);
        if (v53 == sub_2242A9C94((uint64_t)&v145))
        {
          if (sub_2242A78F0((uint64_t)&v145) == 1278226488)
          {
            if (sub_2242A78F0((uint64_t)&v143) == 1278226534)
            {
              if (sub_2242A78F0((uint64_t)&v141) == 1380410945)
              {
                v54 = sub_2242A9B5C((uint64_t)&v145);
                v55 = sub_2242A9C94((uint64_t)&v145);
                sub_2242A8B78(&v137, cf, 1, 0);
                sub_2242A8B78(&v139, a2, 1, 0);
                sub_2242A8B78(&v135, a3, 1, 0);
                __p = *(void **)&a5;
                *(_QWORD *)v113 = &off_24EC715B8;
                *(_OWORD *)&v113[8] = v138;
                v138 = 0uLL;
                v114 = &off_24EC715B8;
                v115 = v140;
                v140 = 0uLL;
                v116 = &off_24EC715B8;
                v117 = v136;
                v136 = 0uLL;
                v118 = v54 | ((unint64_t)v55 << 32);
                v119 = vcvtq_f64_f32((float32x2_t)a6.n128_u64[0]);
                v120 = a6.n128_f32[2];
                v121 = vcvtq_f64_f32((float32x2_t)a7.n128_u64[0]);
                v123 = vcvtq_f64_f32((float32x2_t)a8.n128_u64[0]);
                v122 = a7.n128_f32[2];
                v124 = a8.n128_f32[2];
                v125 = 0;
                v126 = 0;
                v133 = vcvtq_f64_f32(*(float32x2_t *)a12.f32);
                v134 = vcvt_hight_f64_f32(a12);
                v131 = vcvtq_f64_f32(*(float32x2_t *)a11.f32);
                v132 = vcvt_hight_f64_f32(a11);
                v130 = vcvt_hight_f64_f32(a10);
                v128 = vcvt_hight_f64_f32(a9);
                v129 = vcvtq_f64_f32(*(float32x2_t *)a10.f32);
                v127 = vcvtq_f64_f32(*(float32x2_t *)a9.f32);
                sub_223246338((uint64_t)&__p);
                v57 = v56;
                sub_223246438(&__p);
                sub_2242A8F3C(&v135);
                sub_2242A8F3C(&v139);
                sub_2242A8F3C(&v137);
                goto LABEL_125;
              }
              sub_223174DE4(&__p, "Input normals have invalid format, should be kCVPixelFormatType_Rgba_Float32");
              sub_223174DE4(&v137, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionFrame.cpp");
              sub_223177404(a4, 0x16u, (uint64_t)&__p);
            }
            else
            {
              sub_223174DE4(&__p, "Input confidence has invalid format, should be kCVPixelFormatType_OneComponent32Float");
              sub_223174DE4(&v137, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionFrame.cpp");
              sub_223177404(a4, 0x16u, (uint64_t)&__p);
            }
          }
          else
          {
            sub_223174DE4(&__p, "Input semantics have invalid format, should be kCVPixelFormatType_OneComponent8");
            sub_223174DE4(&v137, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionFrame.cpp");
            sub_223177404(a4, 0x16u, (uint64_t)&__p);
          }
          if (SHIBYTE(v138) < 0)
          {
            v78 = v137;
            goto LABEL_121;
          }
LABEL_122:
          if ((v113[15] & 0x80000000) != 0)
            operator delete(__p);
          v57 = 0;
LABEL_125:
          if ((_QWORD)v142)
          {
            v80 = *(_QWORD *)v142;
            v79 = *(std::__shared_weak_count **)(v142 + 8);
            if (v79)
            {
              v81 = (unint64_t *)&v79->__shared_owners_;
              do
                v82 = __ldxr(v81);
              while (__stxr(v82 + 1, v81));
              do
                v83 = __ldaxr(v81);
              while (__stlxr(v83 - 1, v81));
              if (!v83)
              {
                ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                std::__shared_weak_count::__release_weak(v79);
              }
            }
            if (v80)
              sub_2242AE9A8(v142);
          }
          v141 = &off_24EC715B8;
          v84 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
          if (!*((_QWORD *)&v142 + 1))
            goto LABEL_138;
          v85 = (unint64_t *)(*((_QWORD *)&v142 + 1) + 8);
          do
            v86 = __ldaxr(v85);
          while (__stlxr(v86 - 1, v85));
          if (!v86)
          {
            ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
            std::__shared_weak_count::__release_weak(v84);
            v87 = (uint64_t *)v144;
            if (!(_QWORD)v144)
              goto LABEL_147;
          }
          else
          {
LABEL_138:
            v87 = (uint64_t *)v144;
            if (!(_QWORD)v144)
              goto LABEL_147;
          }
          v89 = *v87;
          v88 = (std::__shared_weak_count *)v87[1];
          if (v88)
          {
            v90 = (unint64_t *)&v88->__shared_owners_;
            do
              v91 = __ldxr(v90);
            while (__stxr(v91 + 1, v90));
            do
              v92 = __ldaxr(v90);
            while (__stlxr(v92 - 1, v90));
            if (!v92)
            {
              ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
              std::__shared_weak_count::__release_weak(v88);
            }
          }
          if (v89)
            sub_2242AE9A8(v144);
LABEL_147:
          v143 = &off_24EC715B8;
          v93 = (std::__shared_weak_count *)*((_QWORD *)&v144 + 1);
          if (!*((_QWORD *)&v144 + 1))
            goto LABEL_151;
          v94 = (unint64_t *)(*((_QWORD *)&v144 + 1) + 8);
          do
            v95 = __ldaxr(v94);
          while (__stlxr(v95 - 1, v94));
          if (!v95)
          {
            ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
            std::__shared_weak_count::__release_weak(v93);
            v96 = (uint64_t *)v146;
            if ((_QWORD)v146)
            {
LABEL_152:
              v98 = *v96;
              v97 = (std::__shared_weak_count *)v96[1];
              if (v97)
              {
                v99 = (unint64_t *)&v97->__shared_owners_;
                do
                  v100 = __ldxr(v99);
                while (__stxr(v100 + 1, v99));
                do
                  v101 = __ldaxr(v99);
                while (__stlxr(v101 - 1, v99));
                if (!v101)
                {
                  ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
                  std::__shared_weak_count::__release_weak(v97);
                }
              }
              if (v98)
                sub_2242AE9A8(v146);
            }
          }
          else
          {
LABEL_151:
            v96 = (uint64_t *)v146;
            if ((_QWORD)v146)
              goto LABEL_152;
          }
          v145 = (uint64_t)&off_24EC715B8;
          v102 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
          if (*((_QWORD *)&v146 + 1))
          {
            v103 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
            do
              v104 = __ldaxr(v103);
            while (__stlxr(v104 - 1, v103));
            if (!v104)
            {
              ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
              std::__shared_weak_count::__release_weak(v102);
            }
          }
          return v57;
        }
      }
      __p = operator new(0x38uLL);
      *(_OWORD *)v113 = xmmword_2245C44A0;
      strcpy((char *)__p, "Depth, normals and semantics don't have same size");
      v65 = (char *)operator new(0x78uLL);
      v137 = v65;
      v138 = xmmword_2245C6480;
      strcpy(v65, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionFrame.cpp");
      if (!a4)
      {
LABEL_120:
        v78 = v65;
LABEL_121:
        operator delete(v78);
        goto LABEL_122;
      }
      v74 = std::generic_category();
      v135 = 22;
      *(_QWORD *)&v136 = v74;
      sub_2245321DC((const std::error_condition *)&v135, (uint64_t)&__p, &v147);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v75 = v147;
      if (v147)
        CFRetain(v147);
      *a4 = v75;
      v68 = v148;
      if (!v148)
        goto LABEL_118;
      v76 = (unint64_t *)&v148->__shared_owners_;
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (v77)
      {
LABEL_118:
        if ((SHIBYTE(v138) & 0x80000000) == 0)
          goto LABEL_122;
        v65 = v137;
        goto LABEL_120;
      }
    }
    else
    {
      __p = operator new(0x38uLL);
      *(_OWORD *)v113 = xmmword_2245C4430;
      strcpy((char *)__p, "Semantics and corresponding confidence size mismatch");
      v65 = (char *)operator new(0x78uLL);
      v137 = v65;
      v138 = xmmword_2245C6480;
      strcpy(v65, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionFrame.cpp");
      if (!a4)
        goto LABEL_120;
      v66 = std::generic_category();
      v135 = 22;
      *(_QWORD *)&v136 = v66;
      sub_2245321DC((const std::error_condition *)&v135, (uint64_t)&__p, &v147);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v67 = v147;
      if (v147)
        CFRetain(v147);
      *a4 = v67;
      v68 = v148;
      if (!v148)
        goto LABEL_118;
      v69 = (unint64_t *)&v148->__shared_owners_;
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (v70)
        goto LABEL_118;
    }
    ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
    std::__shared_weak_count::__release_weak(v68);
    goto LABEL_118;
  }
  __p = operator new(0x20uLL);
  *(_OWORD *)v113 = xmmword_2245B8D50;
  strcpy((char *)__p, "Input normal buffer is NULL");
  v58 = (char *)operator new(0x78uLL);
  v137 = v58;
  v138 = xmmword_2245C6480;
  strcpy(v58, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionFrame.cpp");
  if (!a4)
    goto LABEL_102;
  v145 = 22;
  *(_QWORD *)&v146 = std::generic_category();
  sub_2245321DC((const std::error_condition *)&v145, (uint64_t)&__p, (CFErrorRef *)&v143);
  if (*a4)
    CFRelease(*a4);
  *a4 = 0;
  v71 = v143;
  if (v143)
    CFRetain(v143);
  *a4 = v71;
  v60 = (std::__shared_weak_count *)v144;
  if (!(_QWORD)v144)
    goto LABEL_100;
  v72 = (unint64_t *)(v144 + 8);
  do
    v62 = __ldaxr(v72);
  while (__stlxr(v62 - 1, v72));
LABEL_99:
  if (!v62)
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
    if ((SHIBYTE(v138) & 0x80000000) == 0)
      goto LABEL_103;
    goto LABEL_101;
  }
LABEL_100:
  if (SHIBYTE(v138) < 0)
  {
LABEL_101:
    v58 = v137;
    goto LABEL_102;
  }
LABEL_103:
  if ((v113[15] & 0x80000000) != 0)
    operator delete(__p);
  return 0;
}

void sub_223246114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  _QWORD *v29;
  uint64_t v30;

  sub_2242A8F3C(v29);
  sub_2242A8F3C((_QWORD *)(v30 - 232));
  sub_2242A86B4((_QWORD *)(v30 - 184));
  sub_2242A86B4((_QWORD *)(v30 - 160));
  sub_2242A86B4((_QWORD *)(v30 - 136));
  _Unwind_Resume(a1);
}

__n128 sub_223246338(uint64_t a1)
{
  char *v2;
  __n128 result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v2 = (char *)operator new(0x168uLL, MEMORY[0x24BEDB6B8]);
  if (v2)
  {
    *((_QWORD *)v2 + 1) = *(_QWORD *)a1;
    *((_QWORD *)v2 + 2) = &off_24EC715B8;
    *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *((_QWORD *)v2 + 5) = &off_24EC715B8;
    *((_OWORD *)v2 + 3) = *(_OWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *((_QWORD *)v2 + 8) = &off_24EC715B8;
    *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *((_QWORD *)v2 + 11) = *(_QWORD *)(a1 + 80);
    v4 = *(_OWORD *)(a1 + 88);
    v5 = *(_OWORD *)(a1 + 104);
    v6 = *(_OWORD *)(a1 + 120);
    v7 = *(_OWORD *)(a1 + 136);
    *((_QWORD *)v2 + 20) = *(_QWORD *)(a1 + 152);
    *((_OWORD *)v2 + 8) = v6;
    *((_OWORD *)v2 + 9) = v7;
    *((_OWORD *)v2 + 6) = v4;
    *((_OWORD *)v2 + 7) = v5;
    v2[168] = 0;
    v2[216] = 0;
    if (*(_BYTE *)(a1 + 208))
    {
      v8 = *(_OWORD *)(a1 + 176);
      *(_OWORD *)(v2 + 168) = *(_OWORD *)(a1 + 160);
      *(_OWORD *)(v2 + 184) = v8;
      *(_OWORD *)(v2 + 200) = *(_OWORD *)(a1 + 192);
      v2[216] = 1;
    }
    v9 = *(_OWORD *)(a1 + 232);
    *((_OWORD *)v2 + 14) = *(_OWORD *)(a1 + 216);
    *((_OWORD *)v2 + 15) = v9;
    v10 = *(_OWORD *)(a1 + 296);
    v11 = *(_OWORD *)(a1 + 312);
    v12 = *(_OWORD *)(a1 + 264);
    *((_OWORD *)v2 + 18) = *(_OWORD *)(a1 + 280);
    *((_OWORD *)v2 + 19) = v10;
    v13 = *(_OWORD *)(a1 + 328);
    *((_OWORD *)v2 + 20) = v11;
    *((_OWORD *)v2 + 21) = v13;
    result = *(__n128 *)(a1 + 248);
    *((__n128 *)v2 + 16) = result;
    *((_OWORD *)v2 + 17) = v12;
    *((_DWORD *)v2 + 88) = 1;
    *(_QWORD *)v2 = &off_24EC2BD00;
  }
  return result;
}

_QWORD *sub_223246438(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  a1[7] = &off_24EC715B8;
  v2 = (std::__shared_weak_count *)a1[9];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    a1[4] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[6];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    a1[4] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[6];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  a1[1] = &off_24EC715B8;
  v8 = (std::__shared_weak_count *)a1[3];
  if (!v8)
    return a1;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

uint64_t CV3DPlaneDetectionSemanticFrameRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 352);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DPlaneDetectionDepthAndSemanticFrameCreate(std::__shared_weak_count_vtbl *cf, std::__shared_weak_count_vtbl *a2, std::__shared_weak_count_vtbl *a3, std::__shared_weak_count_vtbl *a4, std::__shared_weak_count_vtbl *a5, CFTypeRef *a6, double a7, __n128 a8, __n128 a9, __n128 a10, float32x4_t a11, float32x4_t a12, float32x4_t a13, float32x4_t a14)
{
  uint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  size_t v65;
  size_t v66;
  size_t v67;
  size_t v68;
  size_t v69;
  size_t v70;
  size_t v71;
  size_t v72;
  void *v73;
  uint64_t (**v74)();
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t (**v78)();
  unint64_t *v79;
  uint64_t (**v80)();
  unint64_t *v81;
  void *v82;
  const std::error_category *v83;
  CFTypeRef v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t (**v88)();
  unint64_t *v89;
  uint64_t v90;
  const std::error_category *v92;
  unint64_t *v93;
  unint64_t v94;
  void *v95;
  uint64_t *v96;
  std::__shared_weak_count *v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  uint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  uint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  uint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  size_t v129;
  size_t v130;
  unsigned int v131;
  unsigned int v132;
  uint64_t v133;
  void *__p;
  _BYTE v142[24];
  uint64_t (**v143)();
  __int128 v144;
  uint64_t (**v145)();
  __int128 v146;
  uint64_t (**v147)();
  __int128 v148;
  uint64_t (**v149)();
  __int128 v150;
  unint64_t v151;
  float64x2_t v152;
  double v153;
  float64x2_t v154;
  double v155;
  float64x2_t v156;
  double v157;
  char v158;
  char v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  CFTypeRef cfa;
  __int128 v169;
  void *v170;
  __int128 v171;
  uint64_t v172;
  __int128 v173;
  void *v174;
  __int128 v175;
  uint64_t v176;
  __int128 v177;
  uint64_t (**v178)();
  __int128 v179;
  uint64_t (**v180)();
  __int128 v181;
  uint64_t (**v182)();
  __int128 v183;
  uint64_t (**v184)();
  __int128 v185;

  if (!cf)
  {
    __p = operator new(0x20uLL);
    *(_OWORD *)v142 = xmmword_2245B8D70;
    strcpy((char *)__p, "Input depth buffer is NULL");
    v73 = operator new(0x78uLL);
    v174 = v73;
    v175 = xmmword_2245C6480;
    strcpy((char *)v73, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionFrame.cpp");
    if (a6)
    {
      v170 = (void *)22;
      *(_QWORD *)&v171 = std::generic_category();
      sub_2245321DC((const std::error_condition *)&v170, (uint64_t)&__p, (CFErrorRef *)&v184);
      if (*a6)
        CFRelease(*a6);
      *a6 = 0;
      v74 = v184;
      if (v184)
        CFRetain(v184);
      *a6 = v74;
      v75 = (std::__shared_weak_count *)v185;
      if (!(_QWORD)v185)
        goto LABEL_134;
      v76 = (unint64_t *)(v185 + 8);
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      goto LABEL_133;
    }
    goto LABEL_136;
  }
  if (!a2)
  {
    __p = operator new(0x28uLL);
    *(_OWORD *)v142 = xmmword_2245B8D20;
    strcpy((char *)__p, "Input depth confidence buffer is NULL");
    v73 = operator new(0x78uLL);
    v174 = v73;
    v175 = xmmword_2245C6480;
    strcpy((char *)v73, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionFrame.cpp");
    if (a6)
    {
      v170 = (void *)22;
      *(_QWORD *)&v171 = std::generic_category();
      sub_2245321DC((const std::error_condition *)&v170, (uint64_t)&__p, (CFErrorRef *)&v184);
      if (*a6)
        CFRelease(*a6);
      *a6 = 0;
      v78 = v184;
      if (v184)
        CFRetain(v184);
      *a6 = v78;
      v75 = (std::__shared_weak_count *)v185;
      if (!(_QWORD)v185)
        goto LABEL_134;
      v79 = (unint64_t *)(v185 + 8);
      do
        v77 = __ldaxr(v79);
      while (__stlxr(v77 - 1, v79));
      goto LABEL_133;
    }
    goto LABEL_136;
  }
  if (!a4)
  {
    __p = operator new(0x20uLL);
    *(_OWORD *)v142 = xmmword_2245C6420;
    strcpy((char *)__p, "Input semantics buffer is NULL");
    v73 = operator new(0x78uLL);
    v174 = v73;
    v175 = xmmword_2245C6480;
    strcpy((char *)v73, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionFrame.cpp");
    if (a6)
    {
      v170 = (void *)22;
      *(_QWORD *)&v171 = std::generic_category();
      sub_2245321DC((const std::error_condition *)&v170, (uint64_t)&__p, (CFErrorRef *)&v184);
      if (*a6)
        CFRelease(*a6);
      *a6 = 0;
      v80 = v184;
      if (v184)
        CFRetain(v184);
      *a6 = v80;
      v75 = (std::__shared_weak_count *)v185;
      if (!(_QWORD)v185)
        goto LABEL_134;
      v81 = (unint64_t *)(v185 + 8);
      do
        v77 = __ldaxr(v81);
      while (__stlxr(v77 - 1, v81));
      goto LABEL_133;
    }
LABEL_136:
    operator delete(v73);
    goto LABEL_137;
  }
  if (a5)
  {
    sub_2242A8B78(&__p, cf, 1, 0);
    v21 = *(uint64_t **)v142;
    v185 = *(_OWORD *)v142;
    if (*(_QWORD *)&v142[8])
    {
      v22 = (unint64_t *)(*(_QWORD *)&v142[8] + 8);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v184 = &off_24EC71528;
    if (v21)
    {
      v25 = *v21;
      v24 = (std::__shared_weak_count *)v21[1];
      if (v24)
      {
        p_shared_owners = (unint64_t *)&v24->__shared_owners_;
        do
          v27 = __ldxr(p_shared_owners);
        while (__stxr(v27 + 1, p_shared_owners));
        do
          v28 = __ldaxr(p_shared_owners);
        while (__stlxr(v28 - 1, p_shared_owners));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      if (v25)
        sub_2242AE7CC(v185);
    }
    __p = &off_24EC715B8;
    v29 = *(std::__shared_weak_count **)&v142[8];
    if (*(_QWORD *)&v142[8])
    {
      v30 = (unint64_t *)(*(_QWORD *)&v142[8] + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    sub_2242A8B78(&__p, a2, 1, 0);
    v32 = *(uint64_t **)v142;
    v183 = *(_OWORD *)v142;
    if (*(_QWORD *)&v142[8])
    {
      v33 = (unint64_t *)(*(_QWORD *)&v142[8] + 8);
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
    v182 = &off_24EC71528;
    if (v32)
    {
      v36 = *v32;
      v35 = (std::__shared_weak_count *)v32[1];
      if (v35)
      {
        v37 = (unint64_t *)&v35->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      if (v36)
        sub_2242AE7CC(v183);
    }
    __p = &off_24EC715B8;
    v40 = *(std::__shared_weak_count **)&v142[8];
    if (*(_QWORD *)&v142[8])
    {
      v41 = (unint64_t *)(*(_QWORD *)&v142[8] + 8);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    sub_2242A8B78(&__p, a4, 1, 0);
    v43 = *(uint64_t **)v142;
    v181 = *(_OWORD *)v142;
    if (*(_QWORD *)&v142[8])
    {
      v44 = (unint64_t *)(*(_QWORD *)&v142[8] + 8);
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    v180 = &off_24EC71528;
    if (v43)
    {
      v47 = *v43;
      v46 = (std::__shared_weak_count *)v43[1];
      if (v46)
      {
        v48 = (unint64_t *)&v46->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
        do
          v50 = __ldaxr(v48);
        while (__stlxr(v50 - 1, v48));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      if (v47)
        sub_2242AE7CC(v181);
    }
    __p = &off_24EC715B8;
    v51 = *(std::__shared_weak_count **)&v142[8];
    if (*(_QWORD *)&v142[8])
    {
      v52 = (unint64_t *)(*(_QWORD *)&v142[8] + 8);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    sub_2242A8B78(&__p, a5, 1, 0);
    v54 = *(uint64_t **)v142;
    v179 = *(_OWORD *)v142;
    if (*(_QWORD *)&v142[8])
    {
      v55 = (unint64_t *)(*(_QWORD *)&v142[8] + 8);
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
    }
    v178 = &off_24EC71528;
    if (v54)
    {
      v58 = *v54;
      v57 = (std::__shared_weak_count *)v54[1];
      if (v57)
      {
        v59 = (unint64_t *)&v57->__shared_owners_;
        do
          v60 = __ldxr(v59);
        while (__stxr(v60 + 1, v59));
        do
          v61 = __ldaxr(v59);
        while (__stlxr(v61 - 1, v59));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
      if (v58)
        sub_2242AE7CC(v179);
    }
    __p = &off_24EC715B8;
    v62 = *(std::__shared_weak_count **)&v142[8];
    if (*(_QWORD *)&v142[8])
    {
      v63 = (unint64_t *)(*(_QWORD *)&v142[8] + 8);
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
    v65 = sub_2242A9B5C((uint64_t)&v184);
    if (v65 == sub_2242A9B5C((uint64_t)&v182)
      && (v66 = sub_2242A9C94((uint64_t)&v184), v66 == sub_2242A9C94((uint64_t)&v182)))
    {
      v67 = sub_2242A9B5C((uint64_t)&v180);
      if (v67 == sub_2242A9B5C((uint64_t)&v178))
      {
        v68 = sub_2242A9C94((uint64_t)&v180);
        if (v68 == sub_2242A9C94((uint64_t)&v178))
        {
          if (sub_2242A78F0((uint64_t)&v184) == 1717855600)
          {
            if (sub_2242A78F0((uint64_t)&v182) == 1717855600)
            {
              if (sub_2242A78F0((uint64_t)&v180) == 1278226488)
              {
                if (sub_2242A78F0((uint64_t)&v178) == 1278226534)
                {
                  if (a3)
                  {
                    sub_2242A8B78(&v174, a3, 1, 0);
                    sub_2242A849C(&__p, (uint64_t)&v174);
                    sub_2242A8F3C(&v174);
                    v69 = sub_2242A9B5C((uint64_t)&v184);
                    if (v69 != sub_2242A9B5C((uint64_t)&v180)
                      || (v70 = sub_2242A9B5C((uint64_t)&v184), v70 != sub_2242A9B5C((uint64_t)&__p))
                      || (v71 = sub_2242A9C94((uint64_t)&v184), v71 != sub_2242A9C94((uint64_t)&v180))
                      || (v72 = sub_2242A9C94((uint64_t)&v184), v72 != sub_2242A9C94((uint64_t)&__p)))
                    {
                      sub_223174DE4(&v174, "Depth, normals and semantics don't have same size");
                      sub_223174DE4(&v170, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionFrame.cpp");
                      sub_223177404(a6, 0x16u, (uint64_t)&v174);
                      if (SHIBYTE(v171) < 0)
                        operator delete(v170);
                      if (SHIBYTE(v175) < 0)
                        operator delete(v174);
                      sub_2242A86B4(&__p);
                      v90 = 0;
                      v96 = (uint64_t *)v179;
                      if (!(_QWORD)v179)
                        goto LABEL_164;
                      goto LABEL_156;
                    }
                    if (sub_2242A78F0((uint64_t)&__p) != 1380410945)
                    {
                      sub_223174DE4(&v174, "Input normals have invalid format, should be kCVPixelFormatType_Rgba_Float32");
                      sub_223174DE4(&v170, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionFrame.cpp");
                      sub_223177404(a6, 0x16u, (uint64_t)&v174);
                      if (SHIBYTE(v171) < 0)
                        operator delete(v170);
                      if (SHIBYTE(v175) < 0)
                        operator delete(v174);
                      sub_2242A86B4(&__p);
                      v90 = 0;
                      v96 = (uint64_t *)v179;
                      if (!(_QWORD)v179)
                        goto LABEL_164;
                      goto LABEL_156;
                    }
                    sub_2242A86B4(&__p);
                    goto LABEL_223;
                  }
                  v129 = sub_2242A9B5C((uint64_t)&v184);
                  if (v129 == sub_2242A9B5C((uint64_t)&v180))
                  {
                    v130 = sub_2242A9C94((uint64_t)&v184);
                    if (v130 == sub_2242A9C94((uint64_t)&v180))
                    {
LABEL_223:
                      v131 = sub_2242A9B5C((uint64_t)&v180);
                      v132 = sub_2242A9C94((uint64_t)&v180);
                      sub_2242A8B78(&v174, a4, 1, 0);
                      sub_2242A8B78(&v176, a5, 1, 0);
                      sub_2242A8B78(&v170, cf, 1, 0);
                      sub_2242A8B78(&v172, a2, 1, 0);
                      sub_2242A8B78(&cfa, a3, 1, 0);
                      __p = *(void **)&a7;
                      *(_QWORD *)v142 = &off_24EC715B8;
                      *(_OWORD *)&v142[8] = v175;
                      v175 = 0uLL;
                      v143 = &off_24EC715B8;
                      v144 = v177;
                      v177 = 0uLL;
                      v145 = &off_24EC715B8;
                      v146 = v169;
                      v169 = 0uLL;
                      v147 = &off_24EC715B8;
                      v148 = v171;
                      v171 = 0uLL;
                      v149 = &off_24EC715B8;
                      v150 = v173;
                      v173 = 0uLL;
                      v151 = v131 | ((unint64_t)v132 << 32);
                      v152 = vcvtq_f64_f32((float32x2_t)a8.n128_u64[0]);
                      v153 = a8.n128_f32[2];
                      v154 = vcvtq_f64_f32((float32x2_t)a9.n128_u64[0]);
                      v156 = vcvtq_f64_f32((float32x2_t)a10.n128_u64[0]);
                      v155 = a9.n128_f32[2];
                      v157 = a10.n128_f32[2];
                      v158 = 0;
                      v159 = 0;
                      v166 = vcvtq_f64_f32(*(float32x2_t *)a14.f32);
                      v167 = vcvt_hight_f64_f32(a14);
                      v164 = vcvtq_f64_f32(*(float32x2_t *)a13.f32);
                      v165 = vcvt_hight_f64_f32(a13);
                      v162 = vcvtq_f64_f32(*(float32x2_t *)a12.f32);
                      v163 = vcvt_hight_f64_f32(a12);
                      v160 = vcvtq_f64_f32(*(float32x2_t *)a11.f32);
                      v161 = vcvt_hight_f64_f32(a11);
                      sub_223247AE0((uint64_t)&__p);
                      v90 = v133;
                      sub_223247BF8(&__p);
                      sub_2242A8F3C(&cfa);
                      sub_2242A8F3C(&v172);
                      sub_2242A8F3C(&v170);
                      sub_2242A8F3C(&v176);
                      sub_2242A8F3C(&v174);
                      v96 = (uint64_t *)v179;
                      if (!(_QWORD)v179)
                      {
LABEL_164:
                        v178 = &off_24EC715B8;
                        v102 = (std::__shared_weak_count *)*((_QWORD *)&v179 + 1);
                        if (*((_QWORD *)&v179 + 1))
                        {
                          v103 = (unint64_t *)(*((_QWORD *)&v179 + 1) + 8);
                          do
                            v104 = __ldaxr(v103);
                          while (__stlxr(v104 - 1, v103));
                          if (!v104)
                          {
                            ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                            std::__shared_weak_count::__release_weak(v102);
                          }
                        }
                        if ((_QWORD)v181)
                        {
                          v106 = *(_QWORD *)v181;
                          v105 = *(std::__shared_weak_count **)(v181 + 8);
                          if (v105)
                          {
                            v107 = (unint64_t *)&v105->__shared_owners_;
                            do
                              v108 = __ldxr(v107);
                            while (__stxr(v108 + 1, v107));
                            do
                              v109 = __ldaxr(v107);
                            while (__stlxr(v109 - 1, v107));
                            if (!v109)
                            {
                              ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                              std::__shared_weak_count::__release_weak(v105);
                            }
                          }
                          if (v106)
                            sub_2242AE9A8(v181);
                        }
                        v180 = &off_24EC715B8;
                        v110 = (std::__shared_weak_count *)*((_QWORD *)&v181 + 1);
                        if (*((_QWORD *)&v181 + 1))
                        {
                          v111 = (unint64_t *)(*((_QWORD *)&v181 + 1) + 8);
                          do
                            v112 = __ldaxr(v111);
                          while (__stlxr(v112 - 1, v111));
                          if (!v112)
                          {
                            ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                            std::__shared_weak_count::__release_weak(v110);
                          }
                        }
                        if ((_QWORD)v183)
                        {
                          v114 = *(_QWORD *)v183;
                          v113 = *(std::__shared_weak_count **)(v183 + 8);
                          if (v113)
                          {
                            v115 = (unint64_t *)&v113->__shared_owners_;
                            do
                              v116 = __ldxr(v115);
                            while (__stxr(v116 + 1, v115));
                            do
                              v117 = __ldaxr(v115);
                            while (__stlxr(v117 - 1, v115));
                            if (!v117)
                            {
                              ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                              std::__shared_weak_count::__release_weak(v113);
                            }
                          }
                          if (v114)
                            sub_2242AE9A8(v183);
                        }
                        v182 = &off_24EC715B8;
                        v118 = (std::__shared_weak_count *)*((_QWORD *)&v183 + 1);
                        if (*((_QWORD *)&v183 + 1))
                        {
                          v119 = (unint64_t *)(*((_QWORD *)&v183 + 1) + 8);
                          do
                            v120 = __ldaxr(v119);
                          while (__stlxr(v120 - 1, v119));
                          if (!v120)
                          {
                            ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                            std::__shared_weak_count::__release_weak(v118);
                          }
                        }
                        if ((_QWORD)v185)
                        {
                          v122 = *(_QWORD *)v185;
                          v121 = *(std::__shared_weak_count **)(v185 + 8);
                          if (v121)
                          {
                            v123 = (unint64_t *)&v121->__shared_owners_;
                            do
                              v124 = __ldxr(v123);
                            while (__stxr(v124 + 1, v123));
                            do
                              v125 = __ldaxr(v123);
                            while (__stlxr(v125 - 1, v123));
                            if (!v125)
                            {
                              ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
                              std::__shared_weak_count::__release_weak(v121);
                            }
                          }
                          if (v122)
                            sub_2242AE9A8(v185);
                        }
                        v184 = &off_24EC715B8;
                        v126 = (std::__shared_weak_count *)*((_QWORD *)&v185 + 1);
                        if (*((_QWORD *)&v185 + 1))
                        {
                          v127 = (unint64_t *)(*((_QWORD *)&v185 + 1) + 8);
                          do
                            v128 = __ldaxr(v127);
                          while (__stlxr(v128 - 1, v127));
                          if (!v128)
                          {
                            ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
                            std::__shared_weak_count::__release_weak(v126);
                          }
                        }
                        return v90;
                      }
LABEL_156:
                      v98 = *v96;
                      v97 = (std::__shared_weak_count *)v96[1];
                      if (v97)
                      {
                        v99 = (unint64_t *)&v97->__shared_owners_;
                        do
                          v100 = __ldxr(v99);
                        while (__stxr(v100 + 1, v99));
                        do
                          v101 = __ldaxr(v99);
                        while (__stlxr(v101 - 1, v99));
                        if (!v101)
                        {
                          ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
                          std::__shared_weak_count::__release_weak(v97);
                        }
                      }
                      if (v98)
                        sub_2242AE9A8(v179);
                      goto LABEL_164;
                    }
                  }
                  sub_223174DE4(&__p, "Depth and semantics don't have same size");
                  sub_223174DE4(&v174, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionFrame.cpp");
                  sub_223177404(a6, 0x16u, (uint64_t)&__p);
                }
                else
                {
                  sub_223174DE4(&__p, "Input semantics confidence has invalid format, should be kCVPixelFormatType_OneComponent32Float");
                  sub_223174DE4(&v174, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionFrame.cpp");
                  sub_223177404(a6, 0x16u, (uint64_t)&__p);
                }
              }
              else
              {
                sub_223174DE4(&__p, "Input semantics have invalid format, should be kCVPixelFormatType_OneComponent8");
                sub_223174DE4(&v174, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionFrame.cpp");
                sub_223177404(a6, 0x16u, (uint64_t)&__p);
              }
            }
            else
            {
              sub_223174DE4(&__p, "Input depth confidence has invalid format, should be kCVPixelFormatType_Depth_Float32");
              sub_223174DE4(&v174, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionFrame.cpp");
              sub_223177404(a6, 0x16u, (uint64_t)&__p);
            }
          }
          else
          {
            sub_223174DE4(&__p, "Input depth has invalid format, should be kCVPixelFormatType_Depth_Float32");
            sub_223174DE4(&v174, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionFrame.cpp");
            sub_223177404(a6, 0x16u, (uint64_t)&__p);
          }
          if ((SHIBYTE(v175) & 0x80000000) == 0)
          {
LABEL_152:
            if ((v142[15] & 0x80000000) != 0)
            {
              operator delete(__p);
              v90 = 0;
              v96 = (uint64_t *)v179;
              if (!(_QWORD)v179)
                goto LABEL_164;
            }
            else
            {
              v90 = 0;
              v96 = (uint64_t *)v179;
              if (!(_QWORD)v179)
                goto LABEL_164;
            }
            goto LABEL_156;
          }
          v95 = v174;
LABEL_151:
          operator delete(v95);
          goto LABEL_152;
        }
      }
      __p = operator new(0x38uLL);
      *(_OWORD *)v142 = xmmword_2245C4430;
      strcpy((char *)__p, "Semantics and corresponding confidence size mismatch");
      v82 = operator new(0x78uLL);
      v174 = v82;
      v175 = xmmword_2245C6480;
      strcpy((char *)v82, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionFrame.cpp");
      if (a6)
      {
        v92 = std::generic_category();
        v170 = (void *)22;
        *(_QWORD *)&v171 = v92;
        sub_2245321DC((const std::error_condition *)&v170, (uint64_t)&__p, (CFErrorRef *)&cfa);
        sub_224532194(&cfa, a6);
        v85 = (std::__shared_weak_count *)v169;
        if (!(_QWORD)v169)
          goto LABEL_148;
        v93 = (unint64_t *)(v169 + 8);
        do
          v94 = __ldaxr(v93);
        while (__stlxr(v94 - 1, v93));
        if (v94)
          goto LABEL_148;
        goto LABEL_124;
      }
    }
    else
    {
      __p = operator new(0x38uLL);
      *(_OWORD *)v142 = xmmword_2245C44F0;
      strcpy((char *)__p, "Depth and corresponding confidence size mismatch");
      v82 = operator new(0x78uLL);
      v174 = v82;
      v175 = xmmword_2245C6480;
      strcpy((char *)v82, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionFrame.cpp");
      if (a6)
      {
        v83 = std::generic_category();
        v170 = (void *)22;
        *(_QWORD *)&v171 = v83;
        sub_2245321DC((const std::error_condition *)&v170, (uint64_t)&__p, (CFErrorRef *)&cfa);
        if (*a6)
          CFRelease(*a6);
        *a6 = 0;
        v84 = cfa;
        if (cfa)
          CFRetain(cfa);
        *a6 = v84;
        v85 = (std::__shared_weak_count *)v169;
        if (!(_QWORD)v169)
          goto LABEL_148;
        v86 = (unint64_t *)(v169 + 8);
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (v87)
          goto LABEL_148;
LABEL_124:
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
LABEL_148:
        if ((SHIBYTE(v175) & 0x80000000) == 0)
          goto LABEL_152;
        v82 = v174;
      }
    }
    v95 = v82;
    goto LABEL_151;
  }
  __p = operator new(0x30uLL);
  *(_OWORD *)v142 = xmmword_2245C4530;
  strcpy((char *)__p, "Input semantics confidence buffer is NULL");
  v73 = operator new(0x78uLL);
  v174 = v73;
  v175 = xmmword_2245C6480;
  strcpy((char *)v73, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionFrame.cpp");
  if (!a6)
    goto LABEL_136;
  v170 = (void *)22;
  *(_QWORD *)&v171 = std::generic_category();
  sub_2245321DC((const std::error_condition *)&v170, (uint64_t)&__p, (CFErrorRef *)&v184);
  if (*a6)
    CFRelease(*a6);
  *a6 = 0;
  v88 = v184;
  if (v184)
    CFRetain(v184);
  *a6 = v88;
  v75 = (std::__shared_weak_count *)v185;
  if (!(_QWORD)v185)
    goto LABEL_134;
  v89 = (unint64_t *)(v185 + 8);
  do
    v77 = __ldaxr(v89);
  while (__stlxr(v77 - 1, v89));
LABEL_133:
  if (!v77)
  {
    ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
    std::__shared_weak_count::__release_weak(v75);
    if ((SHIBYTE(v175) & 0x80000000) == 0)
      goto LABEL_137;
    goto LABEL_135;
  }
LABEL_134:
  if (SHIBYTE(v175) < 0)
  {
LABEL_135:
    v73 = v174;
    goto LABEL_136;
  }
LABEL_137:
  if ((v142[15] & 0x80000000) != 0)
    operator delete(__p);
  return 0;
}

void sub_2232477A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v16;
  va_list va;

  va_start(va, a16);
  if (SLOBYTE(STACK[0x22F]) < 0)
    operator delete((void *)STACK[0x218]);
  if (*(char *)(v16 - 225) < 0)
    operator delete(*(void **)(v16 - 248));
  sub_2242A86B4((void **)va);
  sub_2242A86B4((_QWORD *)(v16 - 200));
  sub_2242A86B4((_QWORD *)(v16 - 176));
  sub_2242A86B4((_QWORD *)(v16 - 152));
  sub_2242A86B4((_QWORD *)(v16 - 128));
  _Unwind_Resume(a1);
}

__n128 sub_223247AE0(uint64_t a1)
{
  char *v2;
  __n128 result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v2 = (char *)operator new(0x198uLL, MEMORY[0x24BEDB6B8]);
  if (v2)
  {
    *((_QWORD *)v2 + 1) = *(_QWORD *)a1;
    *((_QWORD *)v2 + 2) = &off_24EC715B8;
    *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *((_QWORD *)v2 + 5) = &off_24EC715B8;
    *((_OWORD *)v2 + 3) = *(_OWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *((_QWORD *)v2 + 8) = &off_24EC715B8;
    *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *((_QWORD *)v2 + 11) = &off_24EC715B8;
    *((_OWORD *)v2 + 6) = *(_OWORD *)(a1 + 88);
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *((_QWORD *)v2 + 14) = &off_24EC715B8;
    *(_OWORD *)(v2 + 120) = *(_OWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 120) = 0;
    *((_QWORD *)v2 + 17) = *(_QWORD *)(a1 + 128);
    v4 = *(_OWORD *)(a1 + 136);
    v5 = *(_OWORD *)(a1 + 152);
    v6 = *(_OWORD *)(a1 + 168);
    v7 = *(_OWORD *)(a1 + 184);
    *((_QWORD *)v2 + 26) = *(_QWORD *)(a1 + 200);
    *((_OWORD *)v2 + 11) = v6;
    *((_OWORD *)v2 + 12) = v7;
    *((_OWORD *)v2 + 9) = v4;
    *((_OWORD *)v2 + 10) = v5;
    v2[216] = 0;
    v2[264] = 0;
    if (*(_BYTE *)(a1 + 256))
    {
      v8 = *(_OWORD *)(a1 + 224);
      *(_OWORD *)(v2 + 216) = *(_OWORD *)(a1 + 208);
      *(_OWORD *)(v2 + 232) = v8;
      *(_OWORD *)(v2 + 248) = *(_OWORD *)(a1 + 240);
      v2[264] = 1;
    }
    v9 = *(_OWORD *)(a1 + 344);
    *((_OWORD *)v2 + 21) = *(_OWORD *)(a1 + 328);
    *((_OWORD *)v2 + 22) = v9;
    v10 = *(_OWORD *)(a1 + 376);
    *((_OWORD *)v2 + 23) = *(_OWORD *)(a1 + 360);
    *((_OWORD *)v2 + 24) = v10;
    v11 = *(_OWORD *)(a1 + 280);
    *((_OWORD *)v2 + 17) = *(_OWORD *)(a1 + 264);
    *((_OWORD *)v2 + 18) = v11;
    result = *(__n128 *)(a1 + 296);
    v12 = *(_OWORD *)(a1 + 312);
    *((__n128 *)v2 + 19) = result;
    *((_OWORD *)v2 + 20) = v12;
    *((_DWORD *)v2 + 100) = 1;
    *(_QWORD *)v2 = &off_24EC2BD70;
  }
  return result;
}

_QWORD *sub_223247BF8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;

  a1[13] = &off_24EC715B8;
  v2 = (std::__shared_weak_count *)a1[15];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    a1[10] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[12];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    a1[10] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[12];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  a1[7] = &off_24EC715B8;
  v8 = (std::__shared_weak_count *)a1[9];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    a1[4] = &off_24EC715B8;
    v11 = (std::__shared_weak_count *)a1[6];
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    a1[4] = &off_24EC715B8;
    v11 = (std::__shared_weak_count *)a1[6];
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  a1[1] = &off_24EC715B8;
  v14 = (std::__shared_weak_count *)a1[3];
  if (!v14)
    return a1;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (v16)
    return a1;
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  return a1;
}

uint64_t CV3DPlaneDetectionDepthAndSemanticFrameRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 400);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DPlaneDetectionDepthCameraFrameRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 304);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

char *CV3DPlaneDetectionPearlDepthFrameCreate(std::__shared_weak_count_vtbl *cf, CFTypeRef *a2, double a3, __n128 a4, __n128 a5, __n128 a6, float32x4_t a7, float32x4_t a8, float32x4_t a9, float32x4_t a10)
{
  uint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unsigned int v24;
  unsigned int v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  char *v37;
  const void *v38;
  std::__shared_weak_count *cat;
  unint64_t *v40;
  unint64_t v41;
  char *v42;
  const std::error_category *v43;
  CFErrorRef v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  void *__p;
  __int128 v69;
  uint64_t (**v70)();
  uint64_t v71;
  std::__shared_weak_count *v72;
  uint64_t v73;
  __int128 v74;
  uint64_t (**v75)();
  __int128 v76;
  CFErrorRef v77;
  std::__shared_weak_count *v78;
  std::error_condition v79;

  if (cf)
  {
    sub_2242A8B78(&__p, cf, 1, 0);
    v13 = (uint64_t *)v69;
    v76 = v69;
    if (*((_QWORD *)&v69 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v75 = &off_24EC71528;
    if (v13)
    {
      v17 = *v13;
      v16 = (std::__shared_weak_count *)v13[1];
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v19 = __ldxr(p_shared_owners);
        while (__stxr(v19 + 1, p_shared_owners));
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
          if (!v17)
            goto LABEL_13;
          goto LABEL_12;
        }
      }
      if (v17)
LABEL_12:
        sub_2242AE7CC(v76);
    }
LABEL_13:
    __p = &off_24EC715B8;
    v21 = (std::__shared_weak_count *)*((_QWORD *)&v69 + 1);
    if (*((_QWORD *)&v69 + 1))
    {
      v22 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    if (sub_2242A78F0((uint64_t)&v75) == 1717855600)
    {
      v24 = sub_2242A9B5C((uint64_t)&v75);
      v25 = sub_2242A9C94((uint64_t)&v75);
      sub_2242A8B78(&__p, cf, 1, 0);
      sub_2242A8B78(&v70, 0, 1, 0);
      v26 = v69;
      v69 = 0uLL;
      v28 = v71;
      v27 = v72;
      v71 = 0;
      v72 = 0;
      v29 = (char *)operator new(0x150uLL, MEMORY[0x24BEDB6B8]);
      v30 = v29;
      if (v29)
      {
        *((double *)v29 + 1) = a3;
        *((_QWORD *)v29 + 2) = &off_24EC715B8;
        *(_OWORD *)(v29 + 24) = v26;
        *((_QWORD *)v29 + 5) = &off_24EC715B8;
        *((_QWORD *)v29 + 6) = v28;
        *((_QWORD *)v29 + 7) = v27;
        *((_QWORD *)v29 + 8) = v24 | ((unint64_t)v25 << 32);
        *(float64x2_t *)(v29 + 72) = vcvtq_f64_f32((float32x2_t)a4.n128_u64[0]);
        *((double *)v29 + 11) = a4.n128_f32[2];
        *((float64x2_t *)v29 + 6) = vcvtq_f64_f32((float32x2_t)a5.n128_u64[0]);
        *((double *)v29 + 14) = a5.n128_f32[2];
        *(float64x2_t *)(v29 + 120) = vcvtq_f64_f32((float32x2_t)a6.n128_u64[0]);
        *((double *)v29 + 17) = a6.n128_f32[2];
        v29[144] = 0;
        v29[192] = 0;
        *(float64x2_t *)(v29 + 248) = vcvt_hight_f64_f32(a8);
        *(float64x2_t *)(v29 + 216) = vcvt_hight_f64_f32(a7);
        *(float64x2_t *)(v29 + 232) = vcvtq_f64_f32(*(float32x2_t *)a8.f32);
        *(float64x2_t *)(v29 + 200) = vcvtq_f64_f32(*(float32x2_t *)a7.f32);
        *(float64x2_t *)(v29 + 296) = vcvtq_f64_f32(*(float32x2_t *)a10.f32);
        *(float64x2_t *)(v29 + 312) = vcvt_hight_f64_f32(a10);
        *(float64x2_t *)(v29 + 264) = vcvtq_f64_f32(*(float32x2_t *)a9.f32);
        *(float64x2_t *)(v29 + 280) = vcvt_hight_f64_f32(a9);
        *((_DWORD *)v29 + 82) = 1;
        *(_QWORD *)v29 = &off_24EC2BE50;
      }
      else
      {
        if (v27)
        {
          v57 = (unint64_t *)&v27->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        if (*((_QWORD *)&v26 + 1))
        {
          v59 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 - 1, v59));
          if (!v60)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v26 + 1) + 16))(*((_QWORD *)&v26 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v26 + 1));
          }
        }
      }
      v70 = &off_24EC715B8;
      v31 = v72;
      if (v72)
      {
        v32 = (unint64_t *)&v72->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      __p = &off_24EC715B8;
      v34 = (std::__shared_weak_count *)*((_QWORD *)&v69 + 1);
      if (*((_QWORD *)&v69 + 1))
      {
        v35 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      goto LABEL_63;
    }
    __p = operator new(0x50uLL);
    v69 = xmmword_2245C4450;
    strcpy((char *)__p, "Input depth has invalid format, should be kCVPixelFormatType_Depth_Float32");
    v42 = (char *)operator new(0x78uLL);
    v73 = (uint64_t)v42;
    v74 = xmmword_2245C6480;
    strcpy(v42, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionFrame.cpp");
    if (a2)
    {
      v43 = std::generic_category();
      *(_QWORD *)&v79.__val_ = 22;
      v79.__cat_ = v43;
      sub_2245321DC(&v79, (uint64_t)&__p, &v77);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v44 = v77;
      if (v77)
        CFRetain(v77);
      *a2 = v44;
      v45 = v78;
      if (v78)
      {
        v46 = (unint64_t *)&v78->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      if ((SHIBYTE(v74) & 0x80000000) == 0)
        goto LABEL_60;
      v42 = (char *)v73;
    }
    operator delete(v42);
LABEL_60:
    if (SHIBYTE(v69) < 0)
      operator delete(__p);
    v30 = 0;
LABEL_63:
    if ((_QWORD)v76)
    {
      v49 = *(_QWORD *)v76;
      v48 = *(std::__shared_weak_count **)(v76 + 8);
      if (v48)
      {
        v50 = (unint64_t *)&v48->__shared_owners_;
        do
          v51 = __ldxr(v50);
        while (__stxr(v51 + 1, v50));
        do
          v52 = __ldaxr(v50);
        while (__stlxr(v52 - 1, v50));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
          if (!v49)
            goto LABEL_71;
          goto LABEL_70;
        }
      }
      if (v49)
LABEL_70:
        sub_2242AE9A8(v76);
    }
LABEL_71:
    v75 = &off_24EC715B8;
    v53 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
    if (*((_QWORD *)&v76 + 1))
    {
      v54 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    return v30;
  }
  __p = operator new(0x20uLL);
  v69 = xmmword_2245B8D70;
  strcpy((char *)__p, "Input depth buffer is NULL");
  v37 = (char *)operator new(0x78uLL);
  v75 = (uint64_t (**)())v37;
  v76 = xmmword_2245C6480;
  strcpy(v37, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionFrame.cpp");
  if (a2)
  {
    v73 = 22;
    *(_QWORD *)&v74 = std::generic_category();
    sub_2245321DC((const std::error_condition *)&v73, (uint64_t)&__p, (CFErrorRef *)&v79);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v38 = *(const void **)&v79.__val_;
    if (*(_QWORD *)&v79.__val_)
      CFRetain(*(CFTypeRef *)&v79.__val_);
    *a2 = v38;
    cat = (std::__shared_weak_count *)v79.__cat_;
    if (v79.__cat_)
    {
      v40 = (unint64_t *)&v79.__cat_[1];
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))cat->__on_zero_shared)(cat);
        std::__shared_weak_count::__release_weak(cat);
      }
    }
    if ((SHIBYTE(v76) & 0x80000000) == 0)
      goto LABEL_44;
    v37 = (char *)v75;
  }
  operator delete(v37);
LABEL_44:
  if (SHIBYTE(v69) < 0)
    operator delete(__p);
  return 0;
}

void sub_22324845C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  uint64_t v29;

  operator delete(v28);
  if (a28 < 0)
    operator delete(__p);
  sub_2242A86B4((_QWORD *)(v29 - 152));
  _Unwind_Resume(a1);
}

uint64_t CV3DPlaneDetectionPearlDepthFrameRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 328);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

_OWORD *CV3DPlaneDetectionParametersCreate()
{
  _OWORD *v0;
  _OWORD *v1;
  _BYTE v3[24];
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int128 v9;

  v0 = operator new(0xC0uLL, MEMORY[0x24BEDB6B8]);
  v1 = v0;
  if (v0)
  {
    v0[10] = 0u;
    v0[11] = 0u;
    v0[8] = 0u;
    v0[9] = 0u;
    v0[6] = 0u;
    v0[7] = 0u;
    v0[4] = 0u;
    v0[5] = 0u;
    v0[2] = 0u;
    v0[3] = 0u;
    *v0 = 0u;
    v0[1] = 0u;
    v9 = xmmword_2245C6490;
    sub_223FBAC84((uint64_t)v3, (uint64_t)&v9);
    *((_QWORD *)v1 + 2) = &off_24EC64920;
    *(_OWORD *)((char *)v1 + 24) = *(_OWORD *)&v3[8];
    *(_OWORD *)((char *)v1 + 40) = v4;
    *(_OWORD *)((char *)v1 + 56) = v5;
    *((_QWORD *)v1 + 9) = v6;
    *((_DWORD *)v1 + 20) = v7;
    *(_QWORD *)((char *)v1 + 84) = v8;
    *((_QWORD *)v1 + 12) = 0x1E000000280;
    *((_QWORD *)v1 + 13) = 0x43F0000044200000;
    *((_QWORD *)v1 + 14) = 0x3FB999999999999ALL;
    *((_QWORD *)v1 + 15) = 0xA00000003;
    *((_DWORD *)v1 + 32) = 20;
    *((_BYTE *)v1 + 132) = 0;
    *((_DWORD *)v1 + 34) = 1036831949;
    *((_QWORD *)v1 + 18) = 2;
    *(_OWORD *)((char *)v1 + 152) = xmmword_2245C64A0;
    *((_QWORD *)v1 + 21) = 0x3F7C1C5C40900000;
    *((_BYTE *)v1 + 176) = 1;
    *(_QWORD *)((char *)v1 + 180) = 0x140400000;
    *(_QWORD *)v1 = &off_24EC2BEC0;
    *((_QWORD *)v1 + 1) = &off_24EC64998;
  }
  return v1;
}

uint64_t sub_2232486C8(void *a1)
{
  uint64_t v1;

  MEMORY[0x227684CD0](v1, MEMORY[0x24BEDB6B8]);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  return 0;
}

uint64_t CV3DPlaneDetectionParametersRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 184);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DPlaneDetectionParametersEqualParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  _QWORD v5[6];
  _QWORD v6[6];
  char v7;

  if (a1)
    v3 = a1 + 8;
  else
    v3 = 0;
  LODWORD(v6[0]) = 872415232;
  result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v3 + 24))(v3, a2 + 8, v6);
  if ((_DWORD)result)
  {
    v6[0] = v3 + 104;
    v6[1] = v3 + 112;
    v6[2] = v3 + 116;
    v6[3] = v3 + 120;
    v6[4] = v3 + 124;
    v6[5] = v3 + 128;
    v5[0] = a2 + 112;
    v5[1] = a2 + 120;
    v5[2] = a2 + 124;
    v5[3] = a2 + 128;
    v5[4] = a2 + 132;
    v5[5] = a2 + 136;
    return sub_22333F544((uint64_t)&v7, (uint64_t)v6, (uint64_t)v5);
  }
  return result;
}

BOOL CV3DPlaneDetectionParametersSetCamera(uint64_t a1, unsigned int a2, uint64_t a3, double a4, double a5, double a6)
{
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _BYTE v15[8];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _QWORD v22[2];
  __int128 v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    HIDWORD(a4) = HIDWORD(a5);
    *(double *)v22 = a4;
    *(double *)&v22[1] = a6;
    sub_223FBAC84((uint64_t)v15, (uint64_t)v22);
    v9 = v17;
    v10 = v18;
    v23 = v18;
    v11 = v19;
    v12 = v20;
    v13 = v21;
    *(_OWORD *)(a1 + 24) = v16;
    *(_OWORD *)(a1 + 40) = v9;
    *(_OWORD *)(a1 + 56) = v10;
    *(_QWORD *)(a1 + 72) = v11;
    *(_DWORD *)(a1 + 80) = v12;
    *(_QWORD *)(a1 + 84) = v13;
    *(_QWORD *)(a1 + 96) = a2 | (unint64_t)(a3 << 32);
    *(float *)(a1 + 104) = (float)a2;
    *(float *)(a1 + 108) = (float)a3;
  }
  return a1 != 0;
}

BOOL CV3DPlaneDetectionParametersSetMinDetections(uint64_t a1, int a2)
{
  if (a1)
    *(_DWORD *)(a1 + 120) = a2;
  return a1 != 0;
}

BOOL CV3DPlaneDetectionParametersSetMinSupportHorizontal(uint64_t a1, int a2)
{
  if (a1)
    *(_DWORD *)(a1 + 124) = a2;
  return a1 != 0;
}

BOOL CV3DPlaneDetectionParametersSetMinSupportVertical(uint64_t a1, int a2)
{
  if (a1)
    *(_DWORD *)(a1 + 128) = a2;
  return a1 != 0;
}

BOOL CV3DPlaneDetectionParametersSetInverseDepthDetector(uint64_t a1, char a2)
{
  if (a1)
    *(_BYTE *)(a1 + 132) = a2;
  return a1 != 0;
}

uint64_t CV3DPlaneDetectionParametersSetMinimumCellSize(uint64_t a1, float a2)
{
  BOOL v2;
  uint64_t v3;

  v2 = a2 <= 0.0 || a1 == 0;
  v3 = !v2;
  if (!v2)
    *(float *)(a1 + 136) = a2;
  return v3;
}

uint64_t CV3DPlaneDetectionParametersSetPlaneFitThreshold(uint64_t a1, float a2)
{
  BOOL v2;
  uint64_t v3;

  v2 = a2 <= 0.0 || a1 == 0;
  v3 = !v2;
  if (!v2)
    *(float *)(a1 + 152) = a2;
  return v3;
}

uint64_t CV3DPlaneDetectionParametersSetMinDepthConfidence(uint64_t a1, float a2)
{
  BOOL v2;
  uint64_t v3;

  v2 = a2 <= 0.0 || a1 == 0;
  v3 = !v2;
  if (!v2)
    *(float *)(a1 + 160) = a2;
  return v3;
}

uint64_t CV3DPlaneDetectionParametersSetMinNormalDotProduct(uint64_t a1, float a2)
{
  BOOL v2;
  uint64_t v3;

  v2 = a2 <= 0.0 || a1 == 0;
  v3 = !v2;
  if (!v2)
    *(float *)(a1 + 172) = a2;
  return v3;
}

uint64_t CV3DPlaneDetectionParametersSetMinClusterSize(uint64_t a1, unsigned int a2)
{
  BOOL v2;
  uint64_t v3;

  if (a1)
    v2 = a2 == 0;
  else
    v2 = 1;
  v3 = !v2;
  if (!v2)
    *(_QWORD *)(a1 + 144) = a2;
  return v3;
}

_QWORD *CV3DPlaneDetectionPlaneListCopyAndAppendPlane(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  void *v10;
  char *v11;
  void *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count_vtbl *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  uint64_t v28;
  char *v30;
  char *v31;
  std::__shared_weak_count_vtbl *v32;
  unint64_t v33;
  unint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  char v39;
  void *v40;
  void *v41;
  char v42;
  void *__p;
  char *v44;
  char v45;
  uint64_t v46;

  v2 = a1;
  v46 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    if (a2)
    {
      v3 = *(uint64_t **)(a2 + 8);
      v33 = 0;
      v34 = 0;
      v32 = 0;
      sub_22324A664((uint64_t)&v32, *v3, v3[1], 0x34F72C234F72C235 * ((v3[1] - *v3) >> 4));
      v4 = (uint64_t)(v2 + 1);
      v5 = v33;
      if (v33 >= v34)
      {
        v6 = sub_22324A768(&v32, v4);
      }
      else
      {
        sub_223249DC0(v33, v4);
        v6 = v5 + 464;
      }
      v33 = v6;
      v14 = (std::__shared_weak_count *)operator new(0x30uLL);
      v14->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      v14->__shared_weak_owners_ = 0;
      v16 = v34;
      v14[1].__vftable = v32;
      v14->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC26D20;
      v14[1].__shared_owners_ = v6;
      v14[1].__shared_weak_owners_ = v16;
      v33 = 0;
      v34 = 0;
      v32 = 0;
      v17 = operator new(0x20uLL, MEMORY[0x24BEDB6B8]);
      v2 = v17;
      if (v17)
      {
        v17[1] = v14 + 1;
        v17[2] = v14;
        *((_DWORD *)v17 + 6) = 1;
        *v17 = &off_24EC2BFA0;
      }
      else
      {
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      v19 = (unint64_t)v32;
      if (v32)
      {
        v20 = v33;
        v21 = v32;
        if ((std::__shared_weak_count_vtbl *)v33 != v32)
        {
          do
          {
            v20 -= 464;
            sub_22324A5A0(v20);
          }
          while (v20 != v19);
          v21 = v32;
        }
        v33 = v19;
LABEL_45:
        operator delete(v21);
      }
    }
    else
    {
      sub_223249DC0((uint64_t)&v32, (uint64_t)(a1 + 1));
      v7 = (char *)operator new(0x1D0uLL);
      v30 = v7;
      sub_223249DC0((uint64_t)v7, (uint64_t)&v32);
      v31 = v7 + 464;
      if (v45)
      {
        v8 = (char *)__p;
        if (__p)
        {
          v9 = v44;
          v10 = __p;
          if (v44 != __p)
          {
            v11 = v44;
            do
            {
              v13 = (void *)*((_QWORD *)v11 - 3);
              v11 -= 24;
              v12 = v13;
              if (v13)
              {
                *((_QWORD *)v9 - 2) = v12;
                operator delete(v12);
              }
              v9 = v11;
            }
            while (v11 != v8);
            v10 = __p;
          }
          v44 = v8;
          operator delete(v10);
        }
      }
      if (v42 && v40)
      {
        v41 = v40;
        operator delete(v40);
      }
      if (v39 && v37)
      {
        v38 = v37;
        operator delete(v37);
      }
      if (v35)
      {
        v36 = v35;
        operator delete(v35);
      }
      v22 = (std::__shared_weak_count *)operator new(0x30uLL);
      v22->__shared_owners_ = 0;
      v23 = (unint64_t *)&v22->__shared_owners_;
      v22->__shared_weak_owners_ = 0;
      v22->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC26D20;
      v22[1].__vftable = 0;
      v22[1].__shared_owners_ = 0;
      v22[1].__shared_weak_owners_ = 0;
      sub_22324A664((uint64_t)&v22[1], (uint64_t)v7, (uint64_t)(v7 + 464), 1uLL);
      v24 = operator new(0x20uLL, MEMORY[0x24BEDB6B8]);
      v2 = v24;
      if (v24)
      {
        v24[1] = v22 + 1;
        v24[2] = v22;
        do
          v25 = __ldxr(v23);
        while (__stxr(v25 + 1, v23));
        *((_DWORD *)v24 + 6) = 1;
        *v24 = &off_24EC2BFA0;
      }
      do
        v26 = __ldaxr(v23);
      while (__stlxr(v26 - 1, v23));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
      v27 = (std::__shared_weak_count_vtbl *)v30;
      if (v30)
      {
        v28 = (uint64_t)v31;
        if (v31 != v30)
        {
          do
          {
            v28 -= 464;
            sub_22324A5A0(v28);
          }
          while ((char *)v28 != v30);
          v27 = (std::__shared_weak_count_vtbl *)v30;
        }
        v21 = v27;
        goto LABEL_45;
      }
    }
  }
  return v2;
}

void sub_223248CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_223248E48((void **)va);
  _Unwind_Resume(a1);
}

void sub_223248CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_223248E48((void **)va);
  _Unwind_Resume(a1);
}

void sub_223248D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  std::__shared_weak_count *v9;
  void *v11;

  std::__shared_weak_count::~__shared_weak_count(v9);
  operator delete(v11);
  sub_223248E48(&a9);
  _Unwind_Resume(a1);
}

void sub_223248D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_223248E48(&a9);
  _Unwind_Resume(a1);
}

void sub_223248D40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  void *v12;

  operator delete(v12);
  sub_223248D8C((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_223248D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_223248D8C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223248D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_223248E48((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223248D8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  if (*(_BYTE *)(a1 + 448))
  {
    v2 = *(_QWORD *)(a1 + 424);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 432);
      v4 = *(void **)(a1 + 424);
      if (v3 != v2)
      {
        v5 = *(_QWORD *)(a1 + 432);
        do
        {
          v7 = *(void **)(v5 - 24);
          v5 -= 24;
          v6 = v7;
          if (v7)
          {
            *(_QWORD *)(v3 - 16) = v6;
            operator delete(v6);
          }
          v3 = v5;
        }
        while (v5 != v2);
        v4 = *(void **)(a1 + 424);
      }
      *(_QWORD *)(a1 + 432) = v2;
      operator delete(v4);
    }
  }
  if (*(_BYTE *)(a1 + 416))
  {
    v8 = *(void **)(a1 + 392);
    if (v8)
    {
      *(_QWORD *)(a1 + 400) = v8;
      operator delete(v8);
    }
  }
  if (*(_BYTE *)(a1 + 384))
  {
    v9 = *(void **)(a1 + 360);
    if (v9)
    {
      *(_QWORD *)(a1 + 368) = v9;
      operator delete(v9);
    }
  }
  v10 = *(void **)(a1 + 280);
  if (v10)
  {
    *(_QWORD *)(a1 + 288) = v10;
    operator delete(v10);
  }
  return a1;
}

void **sub_223248E48(void **a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v2)
    {
      do
      {
        v3 -= 464;
        sub_22324A5A0(v3);
      }
      while ((void *)v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

double CV3DPlaneDetectionMutablePlaneVectorCreate()
{
  _QWORD *v0;
  double result;

  v0 = operator new(0x28uLL, MEMORY[0x24BEDB6B8]);
  if (v0)
  {
    v0[4] = 0;
    result = 0.0;
    *(_OWORD *)v0 = 0u;
    *((_OWORD *)v0 + 1) = 0u;
    *((_DWORD *)v0 + 8) = 1;
    *v0 = &off_24EC2C010;
  }
  return result;
}

uint64_t CV3DPlaneDetectionPlaneVectorRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 32);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DPlaneDetectionPlaneVectorAppendWithCopy(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *i;
  uint64_t v7;

  if (!a1 || !a2)
    return 0;
  v3 = (_QWORD *)a2[1];
  for (i = (_QWORD *)a2[2]; v3 != i; v3 += 58)
  {
    if (*v3 == *(_QWORD *)(a1 + 8) && v3[1] == *(_QWORD *)(a1 + 16))
      break;
  }
  if (v3 != i)
    return 0;
  v7 = a1 + 8;
  if ((unint64_t)i >= a2[3])
  {
    a2[2] = sub_22324A768(a2 + 1, v7);
  }
  else
  {
    sub_223249DC0(a2[2], v7);
    a2[2] = i + 58;
    a2[2] = i + 58;
  }
  return 1;
}

void sub_223248FDC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

_DWORD *CV3DCreatePlaneDetectionPlaneRef(_DWORD *a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5)
{
  _DWORD *v5;
  unsigned __int8 v6;
  float v7;
  unsigned __int8 v8;
  char v9;
  CFTypeID v10;
  uint64_t v11;
  __n128 v12;
  _DWORD *v13;
  char *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  void *v19;
  int v21;
  __n128 v25;
  CFUUIDBytes v26;
  __int128 v27;
  __n128 v28;
  unint64_t v29;
  __int128 v30;
  __n128 v31;
  __int128 v32;
  __n128 v33;
  char v34;
  int v35;
  char v36;
  char v37;
  int v38;
  uint64_t v39;
  char v40;
  int v41;
  char v42;
  char v43;
  void *v44;
  void *v45;
  uint64_t v46;
  char v47;
  char v48;
  char v49;
  char v50;
  void *v51;
  void *v52;
  char v53;
  void *v54;
  void *v55;
  char v56;
  void *__p;
  char *v58;
  char v59;
  __int16 v60;
  uint64_t v61;

  v5 = a1;
  v61 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    v25 = a4;
    v6 = atomic_load((unsigned __int8 *)&qword_25578F140);
    if ((v6 & 1) == 0)
    {
      v21 = __cxa_guard_acquire(&qword_25578F140);
      a4.n128_u32[2] = v25.n128_u32[2];
      if (v21)
      {
        dword_25578F138 = 1065098332;
        __cxa_guard_release(&qword_25578F140);
        a4.n128_u32[2] = v25.n128_u32[2];
      }
    }
    v7 = a4.n128_f32[2];
    v8 = atomic_load((unsigned __int8 *)&qword_25578F150);
    if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_25578F150))
    {
      dword_25578F148 = 1043452119;
      __cxa_guard_release(&qword_25578F150);
    }
    v27 = 0u;
    v28 = 0u;
    v29 = 0x3F80000000000000;
    if (fabsf(v7) >= *(float *)&dword_25578F138)
      v9 = 1;
    else
      v9 = 2;
    v30 = xmmword_2245C64C8;
    v31 = (__n128)unk_2245C64D8;
    v32 = xmmword_2245C64E8;
    v33 = (__n128)unk_2245C64F8;
    v36 = 0;
    v37 = 0;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v43 = 0;
    v48 = 0;
    v49 = 0;
    v50 = 0;
    LOBYTE(v51) = 0;
    v53 = 0;
    LOBYTE(v54) = 0;
    v56 = 0;
    LOBYTE(__p) = 0;
    v59 = 0;
    v60 = 0;
    v44 = 0;
    v45 = 0;
    v47 = 0;
    v46 = 0;
    v10 = CFUUIDGetTypeID();
    if (CFGetTypeID(v5) != v10)
      sub_22324A974();
    v26 = CFUUIDGetUUIDBytes((CFUUIDRef)v5);
    *(_QWORD *)&v27 = sub_22453331C((uint64_t)&v26);
    *((_QWORD *)&v27 + 1) = v11;
    v12 = a5;
    v12.n128_u32[3] = v25.n128_u32[0];
    v28 = v12;
    v29 = __PAIR64__(LODWORD(v7), v25.n128_u32[1]);
    v30 = (__int128)a2;
    v31 = a3;
    *(_QWORD *)&v32 = v25.n128_u64[0];
    *((_QWORD *)&v32 + 1) = __PAIR64__(v25.n128_u32[3], LODWORD(v7));
    v33 = a5;
    v34 = v9;
    v38 = 0;
    v35 = 1028443341;
    v13 = operator new(0x1D8uLL, MEMORY[0x24BEDB6B8]);
    v5 = v13;
    if (v13)
    {
      sub_223249DC0((uint64_t)(v13 + 2), (uint64_t)&v27);
      v5[117] = 1;
      *(_QWORD *)v5 = &off_24EC2BF30;
    }
    if (v59)
    {
      v14 = (char *)__p;
      if (__p)
      {
        v15 = v58;
        v16 = __p;
        if (v58 != __p)
        {
          v17 = v58;
          do
          {
            v19 = (void *)*((_QWORD *)v17 - 3);
            v17 -= 24;
            v18 = v19;
            if (v19)
            {
              *((_QWORD *)v15 - 2) = v18;
              operator delete(v18);
            }
            v15 = v17;
          }
          while (v17 != v14);
          v16 = __p;
        }
        v58 = v14;
        operator delete(v16);
      }
    }
    if (v56 && v54)
    {
      v55 = v54;
      operator delete(v54);
    }
    if (v53 && v51)
    {
      v52 = v51;
      operator delete(v51);
    }
    if (v44)
    {
      v45 = v44;
      operator delete(v44);
    }
  }
  return v5;
}

void sub_2232492DC(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    MEMORY[0x227684CD0](v2, MEMORY[0x24BEDB6B8]);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (!LOBYTE(STACK[0x210]))
      JUMPOUT(0x2232491F8);
    JUMPOUT(0x2232491ACLL);
  }
  _Unwind_Resume(a1);
}

uint64_t CV3DPlaneDetectionPlaneAppendMergedId(_QWORD *a1, const void *a2)
{
  BOOL v2;
  uint64_t v3;
  CFTypeID v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t *v20;
  char *v21;
  CFUUIDBytes v23;

  if (a1)
    v2 = a2 == 0;
  else
    v2 = 1;
  v3 = !v2;
  if (!v2)
  {
    v6 = CFUUIDGetTypeID();
    if (CFGetTypeID(a2) != v6)
      sub_22324A974();
    v23 = CFUUIDGetUUIDBytes((CFUUIDRef)a2);
    v7 = sub_22453331C((uint64_t)&v23);
    v9 = v7;
    v10 = v8;
    v12 = (uint64_t *)a1[37];
    v11 = a1[38];
    if ((unint64_t)v12 < v11)
    {
      *v12 = v7;
      v12[1] = v8;
      v13 = (uint64_t)(v12 + 2);
LABEL_26:
      a1[37] = v13;
      return v3;
    }
    v14 = (uint64_t *)a1[36];
    v15 = ((char *)v12 - (char *)v14) >> 4;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 60)
      sub_22316E078();
    v17 = v11 - (_QWORD)v14;
    if (v17 >> 3 > v16)
      v16 = v17 >> 3;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
      v18 = 0xFFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 60)
        sub_223174E94();
      v19 = (char *)operator new(16 * v18);
      v20 = (uint64_t *)&v19[16 * v15];
      v21 = &v19[16 * v18];
      *v20 = v9;
      v20[1] = v10;
      v13 = (uint64_t)(v20 + 2);
      if (v12 == v14)
        goto LABEL_24;
    }
    else
    {
      v20 = (uint64_t *)(16 * v15);
      v21 = 0;
      *v20 = v7;
      v20[1] = v8;
      v13 = 16 * v15 + 16;
      if (v12 == v14)
      {
LABEL_24:
        a1[36] = v20;
        a1[37] = v13;
        a1[38] = v21;
        if (v12)
          operator delete(v12);
        goto LABEL_26;
      }
    }
    do
    {
      *((_OWORD *)v20 - 1) = *((_OWORD *)v12 - 1);
      v20 -= 2;
      v12 -= 2;
    }
    while (v12 != v14);
    v12 = (uint64_t *)a1[36];
    goto LABEL_24;
  }
  return v3;
}

BOOL CV3DPlaneDetectionPlaneExtentSetOrientedBoundingBox(uint64_t a1, float32x2_t a2, __n128 a3, float32x2_t a4, float32x2_t a5)
{
  float32x2_t v5;
  float32x2_t v6;
  int8x8_t v7;
  float32x2_t v8;
  float32x2_t v9;
  int8x8_t v10;
  int v11;
  int8x8_t v12;
  int v13;

  if (a1)
  {
    v5 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(a2, (float32x2_t)a3.n128_u64[0]), (int8x8_t)a3.n128_u64[0], (int8x8_t)a2);
    v6 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v5, a4), (int8x8_t)a4, (int8x8_t)v5);
    v7 = vbsl_s8((int8x8_t)vcgt_f32(v6, a5), (int8x8_t)a5, (int8x8_t)v6);
    v8 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)a3.n128_u64[0], a2), (int8x8_t)a3.n128_u64[0], (int8x8_t)a2);
    v9 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(a4, v8), (int8x8_t)a4, (int8x8_t)v8);
    v10 = (int8x8_t)vcgt_f32(a5, v9);
    v11 = *(unsigned __int8 *)(a1 + 364);
    *(double *)(a1 + 332) = *(double *)&a2;
    if (!v11)
      *(_BYTE *)(a1 + 364) = 1;
    v12 = vbsl_s8(v10, (int8x8_t)a5, (int8x8_t)v9);
    *(float32x2_t *)&a3.n128_i8[8] = a4;
    *(__n128 *)(a1 + 340) = a3;
    *(double *)(a1 + 356) = *(double *)&a5;
    v13 = *(unsigned __int8 *)(a1 + 328);
    *(int8x8_t *)(a1 + 312) = v7;
    if (!v13)
      *(_BYTE *)(a1 + 328) = 1;
    *(int8x8_t *)(a1 + 320) = v12;
  }
  return a1 != 0;
}

uint64_t CV3DPlaneDetectionPlaneExtentSetConvexHull(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  float32x2_t *v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;
  __int32 v11;
  __int32 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  float32x2_t *v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  char *v21;
  float32x2_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  float32x2_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  float32x2_t *v35;
  uint64_t v36;
  float32x2_t *__p;
  _QWORD v38[3];

  if (!result)
    return result;
  v5 = result;
  if (!a2 && a3)
    return 0;
  __p = 0;
  if (!a3)
  {
    v30 = 0;
    v10 = 0;
    goto LABEL_44;
  }
  if (a3 >> 61)
    sub_22316E078();
  v36 = result;
  v6 = (float32x2_t *)operator new(8 * a3);
  v7 = 0;
  v8 = (char *)&v6[a3];
  __p = v6;
  v9 = 2 * a3;
  v10 = (char *)v6;
  do
  {
    while (1)
    {
      v11 = *(_DWORD *)(a2 + 4 * v7);
      v12 = *(_DWORD *)(a2 + ((4 * v7) | 4));
      if (v10 >= v8)
        break;
      *(_DWORD *)v10 = v11;
      *((_DWORD *)v10 + 1) = v12;
      v10 += 8;
      v7 += 2;
      if (v7 >= v9)
        goto LABEL_39;
    }
    v13 = (v10 - (char *)v6) >> 3;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61)
      sub_22316E078();
    if ((v8 - (char *)v6) >> 2 > v14)
      v14 = (v8 - (char *)v6) >> 2;
    if ((unint64_t)(v8 - (char *)v6) >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    if (v15)
    {
      if (v15 >> 61)
        sub_223174E94();
      v16 = operator new(8 * v15);
      v17 = (float32x2_t *)&v16[8 * v13];
      v8 = &v16[8 * v15];
      v17->i32[0] = v11;
      v17->i32[1] = v12;
      v18 = (uint64_t)&v17[1];
      v19 = v10 - (char *)v6;
      if (v10 == (char *)v6)
      {
LABEL_25:
        __p = v17;
LABEL_26:
        operator delete(v6);
        goto LABEL_27;
      }
    }
    else
    {
      v16 = 0;
      v17 = (float32x2_t *)(8 * v13);
      v8 = 0;
      v17->i32[0] = v11;
      v17->i32[1] = v12;
      v18 = 8 * v13 + 8;
      v19 = v10 - (char *)v6;
      if (v10 == (char *)v6)
        goto LABEL_25;
    }
    v20 = v19 - 8;
    if (v20 < 0x168)
    {
      v21 = v10;
      goto LABEL_21;
    }
    v23 = (v10 - 8 - (char *)v6) & 0xFFFFFFFFFFFFFFF8;
    if (&v16[v10 - (char *)v6 - 8 - v23] > &v16[v10 - (char *)v6 - 8])
    {
      v21 = v10;
      do
      {
LABEL_21:
        v22 = *(float32x2_t *)(v21 - 8);
        v21 -= 8;
        v17[-1] = v22;
        --v17;
      }
      while (v21 != (char *)v6);
      goto LABEL_22;
    }
    if (&v10[-v23 - 8] > v10 - 8)
    {
      v21 = v10;
      goto LABEL_21;
    }
    if ((unint64_t)((char *)v6 - v16) < 0x20)
    {
      v21 = v10;
      goto LABEL_21;
    }
    v24 = (v20 >> 3) + 1;
    v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    v21 = &v10[-v25];
    v17 = (float32x2_t *)((char *)v17 - v25);
    v26 = &v16[8 * v13 - 16];
    v27 = v10 - 16;
    v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v29 = *(_OWORD *)v27;
      *(v26 - 1) = *((_OWORD *)v27 - 1);
      *v26 = v29;
      v26 -= 2;
      v27 -= 32;
      v28 -= 4;
    }
    while (v28);
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_21;
LABEL_22:
    v6 = __p;
    __p = v17;
    if (v6)
      goto LABEL_26;
LABEL_27:
    v6 = v17;
    v10 = (char *)v18;
    v7 += 2;
  }
  while (v7 < v9);
LABEL_39:
  v30 = __p;
  if (__p)
  {
    v5 = v36;
  }
  else
  {
    v5 = v36;
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v30 = 0;
  }
LABEL_44:
  sub_223FBEADC((v10 - (char *)v30) >> 3, v30, (uint64_t)v38);
  v32 = v38[0];
  v31 = v38[1];
  v33 = v38[2];
  if (*(_BYTE *)(v5 + 392))
  {
    v34 = *(void **)(v5 + 368);
    if (v34)
    {
      *(_QWORD *)(v5 + 376) = v34;
      operator delete(v34);
      *(_QWORD *)(v5 + 368) = 0;
      *(_QWORD *)(v5 + 376) = 0;
      *(_QWORD *)(v5 + 384) = 0;
    }
    *(_QWORD *)(v5 + 368) = v32;
    *(_QWORD *)(v5 + 376) = v31;
    *(_QWORD *)(v5 + 384) = v33;
    v35 = __p;
    if (__p)
LABEL_48:
      operator delete(v35);
  }
  else
  {
    *(_QWORD *)(v5 + 368) = v38[0];
    *(_QWORD *)(v5 + 376) = v31;
    *(_QWORD *)(v5 + 384) = v33;
    *(_BYTE *)(v5 + 392) = 1;
    v35 = __p;
    if (__p)
      goto LABEL_48;
  }
  return 1;
}

void sub_223249870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *CV3DPlaneDetectionPlaneCreateTriangulatedConvexHull(uint64_t a1)
{
  __int16 v1;
  float32x2_t *v2;
  unint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v10[48];
  uint64_t v11;
  int v12;
  char v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  int v19;

  if (!a1 || !*(_BYTE *)(a1 + 392))
    return 0;
  v1 = *(_WORD *)(a1 + 464);
  v2 = *(float32x2_t **)(a1 + 368);
  v3 = (uint64_t)(*(_QWORD *)(a1 + 376) - (_QWORD)v2) >> 3;
  v16 = 0u;
  v17 = 0u;
  v18 = 0;
  v15 = 0u;
  v14 = 1065353216;
  LODWORD(v16) = 1065353216;
  DWORD1(v17) = 1065353216;
  v19 = 1065353216;
  v11 = 0;
  v12 = 0;
  v13 = 1;
  sub_224003F18(v3, v2, (float32x2_t *)&v14, 1, (uint64_t)&v11, v1, (uint64_t)v10, (int8x16_t)0);
  v4 = (std::__shared_weak_count *)operator new(0x198uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F0A0;
  sub_22317FD80((uint64_t)&v4[1], (uint64_t)v10);
  v6 = operator new(0x80uLL, MEMORY[0x24BEDB6B8]);
  v7 = v6;
  if (v6)
  {
    v6[2] = v4;
    *((_BYTE *)v6 + 24) = 0;
    *((_BYTE *)v6 + 88) = 0;
    *((_BYTE *)v6 + 92) = 0;
    *((_BYTE *)v6 + 108) = 0;
    v6[14] = 0;
    *((_DWORD *)v6 + 30) = 1;
    *v6 = &off_24EC1F598;
    v6[1] = v4 + 1;
  }
  else
  {
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  sub_22316F8F4(v10);
  return v7;
}

void sub_2232499F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22316F8F4(&a9);
  _Unwind_Resume(a1);
}

_QWORD *CV3DPlaneDetectionPlaneTriangulatedConvexHull(uint64_t a1)
{
  __int16 v1;
  float32x2_t *v2;
  unint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v10[48];
  uint64_t v11;
  int v12;
  char v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  int v19;

  if (!a1 || !*(_BYTE *)(a1 + 392))
    return 0;
  v1 = *(_WORD *)(a1 + 464);
  v2 = *(float32x2_t **)(a1 + 368);
  v3 = (uint64_t)(*(_QWORD *)(a1 + 376) - (_QWORD)v2) >> 3;
  v16 = 0u;
  v17 = 0u;
  v18 = 0;
  v15 = 0u;
  v14 = 1065353216;
  LODWORD(v16) = 1065353216;
  DWORD1(v17) = 1065353216;
  v19 = 1065353216;
  v11 = 0;
  v12 = 0;
  v13 = 1;
  sub_224003F18(v3, v2, (float32x2_t *)&v14, 1, (uint64_t)&v11, v1, (uint64_t)v10, (int8x16_t)0);
  v4 = (std::__shared_weak_count *)operator new(0x198uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F0A0;
  sub_22317FD80((uint64_t)&v4[1], (uint64_t)v10);
  v6 = operator new(0x80uLL, MEMORY[0x24BEDB6B8]);
  v7 = v6;
  if (v6)
  {
    v6[2] = v4;
    *((_BYTE *)v6 + 24) = 0;
    *((_BYTE *)v6 + 88) = 0;
    *((_BYTE *)v6 + 92) = 0;
    *((_BYTE *)v6 + 108) = 0;
    v6[14] = 0;
    *((_DWORD *)v6 + 30) = 1;
    *v6 = &off_24EC1F598;
    v6[1] = v4 + 1;
  }
  else
  {
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  sub_22316F8F4(v10);
  return v7;
}

void sub_223249B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22316F8F4(&a9);
  _Unwind_Resume(a1);
}

_QWORD *CV3DPlaneDetectionPlaneCreateTriangulatedPolygons(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v7[48];

  if (!a1 || !*(_BYTE *)(a1 + 456))
    return 0;
  sub_22373D744((uint64_t *)(a1 + 432), *(_WORD *)(a1 + 464), (unint64_t *)v7);
  v1 = (std::__shared_weak_count *)operator new(0x198uLL);
  v1->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  v1->__shared_weak_owners_ = 0;
  v1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F0A0;
  sub_22317FD80((uint64_t)&v1[1], (uint64_t)v7);
  v3 = operator new(0x80uLL, MEMORY[0x24BEDB6B8]);
  v4 = v3;
  if (v3)
  {
    v3[2] = v1;
    *((_BYTE *)v3 + 24) = 0;
    *((_BYTE *)v3 + 88) = 0;
    *((_BYTE *)v3 + 92) = 0;
    *((_BYTE *)v3 + 108) = 0;
    v3[14] = 0;
    *((_DWORD *)v3 + 30) = 1;
    *v3 = &off_24EC1F598;
    v3[1] = v1 + 1;
  }
  else
  {
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  sub_22316F8F4(v7);
  return v4;
}

void sub_223249C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22316F8F4(&a9);
  _Unwind_Resume(a1);
}

_QWORD *CV3DPlaneDetectionPlaneTriangulatedPolygons(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v7[48];

  if (!a1 || !*(_BYTE *)(a1 + 456))
    return 0;
  sub_22373D744((uint64_t *)(a1 + 432), *(_WORD *)(a1 + 464), (unint64_t *)v7);
  v1 = (std::__shared_weak_count *)operator new(0x198uLL);
  v1->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  v1->__shared_weak_owners_ = 0;
  v1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F0A0;
  sub_22317FD80((uint64_t)&v1[1], (uint64_t)v7);
  v3 = operator new(0x80uLL, MEMORY[0x24BEDB6B8]);
  v4 = v3;
  if (v3)
  {
    v3[2] = v1;
    *((_BYTE *)v3 + 24) = 0;
    *((_BYTE *)v3 + 88) = 0;
    *((_BYTE *)v3 + 92) = 0;
    *((_BYTE *)v3 + 108) = 0;
    v3[14] = 0;
    *((_DWORD *)v3 + 30) = 1;
    *v3 = &off_24EC1F598;
    v3[1] = v1 + 1;
  }
  else
  {
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  sub_22316F8F4(v7);
  return v4;
}

void sub_223249DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22316F8F4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223249DC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  int64_t v18;
  char *v19;
  char *v20;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 28) = v5;
  v6 = *(_OWORD *)(a2 + 40);
  v7 = *(_OWORD *)(a2 + 56);
  v8 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v8;
  *(_OWORD *)(a1 + 56) = v7;
  *(_OWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  if (*(_BYTE *)(a2 + 216))
  {
    *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
    v9 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = v9;
    v10 = *(_OWORD *)(a2 + 152);
    v11 = *(_OWORD *)(a2 + 168);
    v12 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 184) = v12;
    *(_OWORD *)(a1 + 168) = v11;
    *(_OWORD *)(a1 + 152) = v10;
    *(_BYTE *)(a1 + 216) = 1;
  }
  v13 = *(_OWORD *)(a2 + 224);
  v14 = *(_OWORD *)(a2 + 256);
  v15 = *(_QWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v14;
  *(_OWORD *)(a1 + 224) = v13;
  *(_QWORD *)(a1 + 272) = v15;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  v17 = *(_BYTE **)(a2 + 280);
  v16 = *(_BYTE **)(a2 + 288);
  v18 = v16 - v17;
  if (v16 != v17)
  {
    if (v18 < 0)
      sub_22316E078();
    v19 = (char *)operator new(v16 - v17);
    *(_QWORD *)(a1 + 280) = v19;
    *(_QWORD *)(a1 + 288) = v19;
    v20 = &v19[16 * (v18 >> 4)];
    *(_QWORD *)(a1 + 296) = v20;
    memcpy(v19, v17, v18);
    *(_QWORD *)(a1 + 288) = v20;
  }
  *(_BYTE *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 320) = 0;
  if (*(_BYTE *)(a2 + 320))
  {
    *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
    *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
    *(_BYTE *)(a1 + 320) = 1;
  }
  *(_BYTE *)(a1 + 324) = 0;
  *(_BYTE *)(a1 + 356) = 0;
  if (*(_BYTE *)(a2 + 356))
  {
    *(_QWORD *)(a1 + 324) = *(_QWORD *)(a2 + 324);
    *(_QWORD *)(a1 + 332) = *(_QWORD *)(a2 + 332);
    *(_QWORD *)(a1 + 340) = *(_QWORD *)(a2 + 340);
    *(_QWORD *)(a1 + 348) = *(_QWORD *)(a2 + 348);
    *(_BYTE *)(a1 + 356) = 1;
  }
  sub_22324A06C(a1 + 360, a2 + 360);
  sub_22324A138(a1 + 392, a2 + 392);
  *(_BYTE *)(a1 + 424) = 0;
  *(_BYTE *)(a1 + 448) = 0;
  if (*(_BYTE *)(a2 + 448))
  {
    sub_22324A298((_QWORD *)(a1 + 424), (uint64_t *)(a2 + 424));
    *(_BYTE *)(a1 + 448) = 1;
  }
  *(_WORD *)(a1 + 456) = *(_WORD *)(a2 + 456);
  return a1;
}

void sub_223249FB8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  char *v7;
  char *v8;
  void *v9;
  char *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  if (*(_BYTE *)(v1 + 448))
  {
    v7 = (char *)*v5;
    if (*v5)
    {
      v8 = *(char **)(v1 + 432);
      v9 = *v5;
      if (v8 != v7)
      {
        v10 = *(char **)(v1 + 432);
        do
        {
          v12 = (void *)*((_QWORD *)v10 - 3);
          v10 -= 24;
          v11 = v12;
          if (v12)
          {
            *((_QWORD *)v8 - 2) = v11;
            operator delete(v11);
          }
          v8 = v10;
        }
        while (v10 != v7);
        v9 = *v5;
      }
      *(_QWORD *)(v1 + 432) = v7;
      operator delete(v9);
    }
  }
  if (*(_BYTE *)(v1 + 416))
  {
    v13 = *v4;
    if (*v4)
    {
      *(_QWORD *)(v1 + 400) = v13;
      operator delete(v13);
    }
  }
  if (*(_BYTE *)(v1 + 384))
  {
    v14 = *v3;
    if (*v3)
    {
      *(_QWORD *)(v1 + 368) = v14;
      operator delete(v14);
    }
  }
  v15 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 288) = v15;
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22324A06C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  char *v6;
  size_t v7;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    v4 = *(const void **)a2;
    v3 = *(_QWORD *)(a2 + 8);
    v5 = v3 - *(_QWORD *)a2;
    if (v3 != *(_QWORD *)a2)
    {
      if (v5 < 0)
        sub_22316E078();
      v6 = (char *)operator new(v3 - *(_QWORD *)a2);
      *(_QWORD *)a1 = v6;
      *(_QWORD *)(a1 + 8) = v6;
      *(_QWORD *)(a1 + 16) = &v6[8 * (v5 >> 3)];
      v7 = v5 & 0xFFFFFFFFFFFFFFF8;
      memcpy(v6, v4, v7);
      *(_QWORD *)(a1 + 8) = &v6[v7];
    }
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_22324A104(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  void *v4;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  if (*(_BYTE *)(v1 + 24))
  {
    v4 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v4;
      operator delete(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22324A138(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _OWORD *v14;
  __int128 *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    v4 = *(_QWORD **)a2;
    v3 = *(_QWORD **)(a2 + 8);
    v5 = (uint64_t)v3 - *(_QWORD *)a2;
    if (v3 != *(_QWORD **)a2)
    {
      if (v5 < 0)
        sub_22324A284();
      v6 = operator new((size_t)v3 - *(_QWORD *)a2);
      *(_QWORD *)a1 = v6;
      *(_QWORD *)(a1 + 8) = v6;
      *(_QWORD *)(a1 + 16) = &v6[2 * (v5 >> 4)];
      v7 = v5 - 16;
      if ((unint64_t)(v5 - 16) < 0x90)
        goto LABEL_21;
      v8 = (v7 & 0xFFFFFFFFFFFFFFF0) + 16;
      if (v6 < (_QWORD *)((char *)v4 + v8) && v4 < (_QWORD *)((char *)v6 + v8))
        goto LABEL_21;
      v10 = (v7 >> 4) + 1;
      v11 = 2 * (v10 & 0x1FFFFFFFFFFFFFFCLL);
      v12 = &v4[v11];
      v13 = &v6[v11];
      v14 = v6 + 4;
      v15 = (__int128 *)(v4 + 4);
      v16 = v10 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        v18 = *(v15 - 2);
        v17 = *(v15 - 1);
        v20 = *v15;
        v19 = v15[1];
        v15 += 4;
        *(v14 - 2) = v18;
        *(v14 - 1) = v17;
        *v14 = v20;
        v14[1] = v19;
        v14 += 4;
        v16 -= 4;
      }
      while (v16);
      v4 = v12;
      v6 = v13;
      if (v10 != (v10 & 0x1FFFFFFFFFFFFFFCLL))
      {
LABEL_21:
        do
        {
          *v6 = *v4;
          v6[1] = v4[1];
          v6 += 2;
          v4 += 2;
        }
        while (v4 != v3);
        v13 = v6;
      }
      *(_QWORD *)(a1 + 8) = v13;
    }
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_22324A250(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  void *v4;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  if (*(_BYTE *)(v1 + 24))
  {
    v4 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v4;
      operator delete(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_22324A284()
{
  sub_22316DBD4("vector");
}

_QWORD *sub_22324A298(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  _QWORD *v8;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    if (v7 >= 0xAAAAAAAAAAAAAABLL)
      sub_22324A284();
    v8 = operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[3 * v7];
    a1[1] = sub_22324A3A4(v3, v4, v5, v8);
  }
  return a1;
}

void sub_22324A340(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  char *v4;
  char *v5;
  void *v6;
  char *v7;
  void *v8;
  void *v9;

  v1[1] = v2;
  v4 = (char *)*v1;
  if (*v1)
  {
    v5 = (char *)v1[1];
    v6 = *v1;
    if (v5 != v4)
    {
      v7 = (char *)v1[1];
      do
      {
        v9 = (void *)*((_QWORD *)v7 - 3);
        v7 -= 24;
        v8 = v9;
        if (v9)
        {
          *((_QWORD *)v5 - 2) = v8;
          operator delete(v8);
        }
        v5 = v7;
      }
      while (v7 != v4);
      v6 = *v1;
    }
    v1[1] = v4;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_22324A3A4(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  char *v7;
  size_t v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v10 = *(const void **)v6;
      v9 = *(_QWORD *)(v6 + 8);
      v11 = v9 - *(_QWORD *)v6;
      if (v9 != *(_QWORD *)v6)
      {
        if (v11 < 0)
          sub_22316E078();
        v7 = (char *)operator new(v9 - *(_QWORD *)v6);
        *a4 = v7;
        a4[1] = v7;
        a4[2] = &v7[8 * (v11 >> 3)];
        v8 = v11 & 0xFFFFFFFFFFFFFFF8;
        memcpy(v7, v10, v8);
        a4[1] = &v7[v8];
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_22324A478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22324A4B0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22324A48C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_22324A4B0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_22324A4B0(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    if (v3 != v4)
    {
      v5 = **(_QWORD **)(a1 + 16);
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v4);
    }
  }
  return a1;
}

void ***sub_22324A51C(void ***result)
{
  void ***v1;
  void **v2;
  void *v3;
  uint64_t v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = **result;
    if (v3)
    {
      v4 = (uint64_t)v2[1];
      v5 = **result;
      if ((void *)v4 != v3)
      {
        do
        {
          v4 -= 464;
          sub_22324A5A0(v4);
        }
        while ((void *)v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void sub_22324A5A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  if (*(_BYTE *)(a1 + 448))
  {
    v2 = *(_QWORD *)(a1 + 424);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 432);
      v4 = *(void **)(a1 + 424);
      if (v3 != v2)
      {
        v5 = *(_QWORD *)(a1 + 432);
        do
        {
          v7 = *(void **)(v5 - 24);
          v5 -= 24;
          v6 = v7;
          if (v7)
          {
            *(_QWORD *)(v3 - 16) = v6;
            operator delete(v6);
          }
          v3 = v5;
        }
        while (v5 != v2);
        v4 = *(void **)(a1 + 424);
      }
      *(_QWORD *)(a1 + 432) = v2;
      operator delete(v4);
    }
  }
  if (*(_BYTE *)(a1 + 416))
  {
    v8 = *(void **)(a1 + 392);
    if (v8)
    {
      *(_QWORD *)(a1 + 400) = v8;
      operator delete(v8);
    }
  }
  if (*(_BYTE *)(a1 + 384))
  {
    v9 = *(void **)(a1 + 360);
    if (v9)
    {
      *(_QWORD *)(a1 + 368) = v9;
      operator delete(v9);
    }
  }
  v10 = *(void **)(a1 + 280);
  if (v10)
  {
    *(_QWORD *)(a1 + 288) = v10;
    operator delete(v10);
  }
}

uint64_t sub_22324A664(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;

  if (a4)
  {
    v5 = (_QWORD *)result;
    if (a4 >= 0x8D3DCB08D3DCB1)
      sub_22324A284();
    result = (uint64_t)operator new(464 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = result + 464 * a4;
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = sub_223249DC0(v8 + v9, a2 + v9);
        v9 += 464;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_22324A724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_22324A51C(&a9);
  _Unwind_Resume(a1);
}

void sub_22324A738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 464)
    sub_22324A5A0(v10 - 464 + v11);
  *(_QWORD *)(v9 + 8) = v10;
  sub_22324A51C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_22324A768(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v15;
  __int128 v16;

  v3 = 0x34F72C234F72C235 * ((uint64_t)(a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x8D3DCB08D3DCB0)
    sub_22324A284();
  if (0x69EE58469EE5846ALL * ((uint64_t)(a1[2] - *a1) >> 4) > v4)
    v4 = 0x69EE58469EE5846ALL * ((uint64_t)(a1[2] - *a1) >> 4);
  if ((unint64_t)(0x34F72C234F72C235 * ((uint64_t)(a1[2] - *a1) >> 4)) >= 0x469EE58469EE58)
    v6 = 0x8D3DCB08D3DCB0;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x8D3DCB08D3DCB0)
      sub_223174E94();
    v7 = (char *)operator new(464 * v6);
  }
  else
  {
    v7 = 0;
  }
  v15 = (uint64_t)&v7[464 * v3];
  *((_QWORD *)&v16 + 1) = &v7[464 * v6];
  sub_223249DC0(v15, a2);
  v8 = 0;
  v10 = (void *)*a1;
  for (i = a1[1]; (void *)(i + v8) != v10; sub_223249DC0(v8 + v15, v8 + i))
    v8 -= 464;
  v11 = v15 + v8;
  v12 = (void *)*a1;
  v13 = a1[1];
  *a1 = v11;
  *(_QWORD *)&v16 = v15 + 464;
  *(_OWORD *)(a1 + 1) = v16;
  while ((void *)v13 != v12)
  {
    v13 -= 464;
    sub_22324A5A0(v13);
  }
  if (v12)
    operator delete(v12);
  return v15 + 464;
}

void sub_22324A8E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_22324A924((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_22324A924(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 464;
    sub_22324A5A0(i - 464);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_22324A974()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8E0] + 16;
  __cxa_throw(exception, MEMORY[0x24BEDB740], MEMORY[0x24BEDABA8]);
}

void sub_22324A9A8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC26D20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22324A9B8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC26D20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22324A9E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 != v1)
    {
      do
      {
        v3 -= 464;
        sub_22324A5A0(v3);
      }
      while (v3 != v1);
      v4 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v1;
    operator delete(v4);
  }
}

uint64_t CV3DPlaneDetectionPlaneListRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 24);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DPlaneDetectionPlaneListRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 24);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CV3DPlaneDetectionPlaneListLength(uint64_t result)
{
  if (result)
    return 0x34F72C234F72C235
         * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(result + 8) + 8) - **(_QWORD **)(result + 8)) >> 4);
  return result;
}

uint64_t CV3DPlaneDetectionPlaneAtIndex(uint64_t result, unint64_t a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = **(_QWORD **)(result + 8);
    if (0x34F72C234F72C235 * ((*(_QWORD *)(*(_QWORD *)(result + 8) + 8) - v2) >> 4) <= a2)
    {
      return 0;
    }
    else if (v2)
    {
      return v2 + 464 * a2 - 8;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CV3DPlaneDetectionPlaneVectorLength(uint64_t result)
{
  if (result)
    return 0x34F72C234F72C235 * ((uint64_t)(*(_QWORD *)(result + 16) - *(_QWORD *)(result + 8)) >> 4);
  return result;
}

uint64_t CV3DPlaneDetectionPlaneAt(uint64_t result, unint64_t a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = *(_QWORD *)(result + 8);
    if (0x34F72C234F72C235 * ((*(_QWORD *)(result + 16) - v2) >> 4) <= a2)
    {
      return 0;
    }
    else if (v2)
    {
      return v2 + 464 * a2 - 8;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CV3DPlaneDetectionPlaneRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 468);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

char *CV3DPlaneDetectionPlaneCopy(uint64_t a1)
{
  char *v1;
  char *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  __int128 v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  char v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  char v43;
  __int128 v44;
  __int128 v45;
  char v46;
  __int128 v47;
  uint64_t v48;
  char v49;
  __int128 v50;
  uint64_t v51;
  char v52;
  __int128 __p;
  uint64_t v54;
  unsigned __int8 v55;
  __int16 v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  if (!a1)
    return 0;
  sub_223249DC0((uint64_t)&v18, a1 + 8);
  v1 = (char *)operator new(0x1D8uLL, MEMORY[0x24BEDB6B8]);
  v2 = v1;
  if (v1)
  {
    *(_OWORD *)(v1 + 8) = v18;
    *((_QWORD *)v1 + 3) = v19;
    *((_DWORD *)v1 + 8) = v20;
    *(_QWORD *)(v1 + 36) = v21;
    *((_DWORD *)v1 + 11) = v22;
    v3 = v26;
    *((_OWORD *)v1 + 5) = v25;
    *((_OWORD *)v1 + 6) = v3;
    v4 = v24;
    *((_OWORD *)v1 + 3) = v23;
    *((_OWORD *)v1 + 4) = v4;
    *((_QWORD *)v1 + 14) = v27;
    v1[120] = 0;
    v1[224] = 0;
    if (v35)
    {
      v1[120] = v28;
      v5 = v32;
      *((_OWORD *)v1 + 10) = v31;
      *((_OWORD *)v1 + 11) = v5;
      v6 = v34;
      *((_OWORD *)v1 + 12) = v33;
      *((_OWORD *)v1 + 13) = v6;
      v7 = v30;
      *((_OWORD *)v1 + 8) = v29;
      *((_OWORD *)v1 + 9) = v7;
      v1[224] = 1;
    }
    v8 = v37;
    *(_OWORD *)(v1 + 232) = v36;
    v9 = v41;
    *((_QWORD *)v1 + 35) = v39;
    *(_OWORD *)(v1 + 248) = v8;
    *(_OWORD *)(v1 + 264) = v38;
    *((_OWORD *)v1 + 18) = v40;
    *((_QWORD *)v1 + 38) = v9;
    v41 = 0;
    v40 = 0uLL;
    v1[312] = 0;
    v1[328] = 0;
    if (v43)
    {
      *(_OWORD *)(v1 + 312) = v42;
      v1[328] = 1;
    }
    v1[332] = 0;
    v1[364] = 0;
    if (v46)
    {
      *(_OWORD *)(v1 + 332) = v44;
      *(_OWORD *)(v1 + 348) = v45;
      v1[364] = 1;
    }
    v1[368] = 0;
    v1[392] = 0;
    if (v49)
    {
      *((_OWORD *)v1 + 23) = v47;
      *((_QWORD *)v1 + 48) = v48;
      v48 = 0;
      v47 = 0uLL;
      v1[392] = 1;
    }
    v1[400] = 0;
    v1[424] = 0;
    if (v52)
    {
      *((_OWORD *)v1 + 25) = v50;
      *((_QWORD *)v1 + 52) = v51;
      v51 = 0;
      v50 = 0uLL;
      v1[424] = 1;
    }
    v1[432] = 0;
    v1[456] = 0;
    v10 = v55;
    if (v55)
    {
      *((_OWORD *)v1 + 27) = __p;
      *((_QWORD *)v1 + 56) = v54;
      v54 = 0;
      __p = 0uLL;
      v1[456] = 1;
    }
    *((_WORD *)v1 + 232) = v56;
    *((_DWORD *)v1 + 117) = 1;
    *(_QWORD *)v1 = &off_24EC2BF30;
    if (!v10)
      goto LABEL_27;
    goto LABEL_19;
  }
  if (v55)
  {
LABEL_19:
    v11 = __p;
    if ((_QWORD)__p)
    {
      v12 = *((_QWORD *)&__p + 1);
      v13 = (void *)__p;
      if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
      {
        v14 = *((_QWORD *)&__p + 1);
        do
        {
          v16 = *(void **)(v14 - 24);
          v14 -= 24;
          v15 = v16;
          if (v16)
          {
            *(_QWORD *)(v12 - 16) = v15;
            operator delete(v15);
          }
          v12 = v14;
        }
        while (v14 != v11);
        v13 = (void *)__p;
      }
      *((_QWORD *)&__p + 1) = v11;
      operator delete(v13);
    }
  }
LABEL_27:
  if (v52 && (_QWORD)v50)
  {
    *((_QWORD *)&v50 + 1) = v50;
    operator delete((void *)v50);
  }
  if (v49 && (_QWORD)v47)
  {
    *((_QWORD *)&v47 + 1) = v47;
    operator delete((void *)v47);
  }
  if ((_QWORD)v40)
  {
    *((_QWORD *)&v40 + 1) = v40;
    operator delete((void *)v40);
  }
  return v2;
}

uint64_t CV3DPlaneDetectionPlaneRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 468);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

double CV3DPlaneDetectionPlaneSupport(uint64_t a1)
{
  return *(double *)(a1 + 24);
}

double CV3DPlaneDetectionPlaneNormal(uint64_t a1)
{
  return *(double *)(a1 + 36);
}

__n128 CV3DPlaneDetectionPlaneTransformationToWorld(__n128 *a1)
{
  return a1[3];
}

uint64_t CV3DPlaneDetectionPlaneGetOrientation(uint64_t a1)
{
  unint64_t v1;
  char v2;

  v1 = *(unsigned __int8 *)(a1 + 112);
  if (v1 >= 5)
    v2 = 0;
  else
    v2 = 0x400020100uLL >> (8 * v1);
  return v2 & 7;
}

CFTypeRef CV3DPlaneDetectionPlaneIdentifier(uint64_t a1)
{
  const __CFAllocator *Default;
  std::__shared_weak_count_vtbl *v3;
  CFTypeRef v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  CFTypeRef cf;
  std::__shared_weak_count *v10;

  Default = CFAllocatorGetDefault();
  v3 = (std::__shared_weak_count_vtbl *)CFUUIDCreateFromUUIDBytes(Default, *(CFUUIDBytes *)(a1 + 8));
  sub_224533328((std::__shared_weak_count_vtbl **)&cf, v3, 0);
  v4 = cf;
  if (cf)
    CFRetain(cf);
  v5 = v10;
  if (!v10)
    return v4;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (v7)
    return v4;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return v4;
}

void sub_22324AFB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

CFTypeRef CV3DPlaneDetectionPlaneCopyUUID(uint64_t a1)
{
  const __CFAllocator *Default;
  std::__shared_weak_count_vtbl *v3;
  CFTypeRef v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  CFTypeRef cf;
  std::__shared_weak_count *v10;

  Default = CFAllocatorGetDefault();
  v3 = (std::__shared_weak_count_vtbl *)CFUUIDCreateFromUUIDBytes(Default, *(CFUUIDBytes *)(a1 + 8));
  sub_224533328((std::__shared_weak_count_vtbl **)&cf, v3, 0);
  v4 = cf;
  if (cf)
    CFRetain(cf);
  v5 = v10;
  if (!v10)
    return v4;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (v7)
    return v4;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return v4;
}

void sub_22324B06C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t CV3DPlaneDetectionPlaneAge(uint64_t a1)
{
  return *(unsigned int *)(a1 + 232);
}

__CFArray *CV3DPlaneDetectionPlaneMergedIds(uint64_t a1)
{
  uint64_t v1;
  __CFArray *Mutable;
  CFUUIDBytes *v4;
  CFUUIDBytes *v5;
  const __CFAllocator *Default;
  std::__shared_weak_count_vtbl *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *value;
  std::__shared_weak_count *v13;

  v1 = *(_QWORD *)(a1 + 296) - *(_QWORD *)(a1 + 288);
  if (!v1)
    return 0;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], v1 >> 4, MEMORY[0x24BDBD690]);
  if (Mutable)
  {
    v4 = *(CFUUIDBytes **)(a1 + 288);
    v5 = *(CFUUIDBytes **)(a1 + 296);
    while (v4 != v5)
    {
      Default = CFAllocatorGetDefault();
      v7 = (std::__shared_weak_count_vtbl *)CFUUIDCreateFromUUIDBytes(Default, *v4);
      sub_224533328((std::__shared_weak_count_vtbl **)&value, v7, 0);
      CFArrayAppendValue(Mutable, value);
      v8 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      ++v4;
    }
  }
  return Mutable;
}

void sub_22324B164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double CV3DPlaneDetectionPlaneUncertaintyAlongNormal(uint64_t a1)
{
  return *(float *)(a1 + 116);
}

__n64 CV3DPlaneDetectionPlaneExtentOrientedBoundingBox(uint64_t a1, __n64 *a2)
{
  BOOL v2;
  unint64_t v3;
  __n64 result;

  if (a2)
    v2 = *(_BYTE *)(a1 + 364) == 0;
  else
    v2 = 1;
  if (!v2)
  {
    LODWORD(v3) = *(_DWORD *)(a1 + 332);
    a2->n64_u32[0] = v3;
    HIDWORD(v3) = *(_DWORD *)(a1 + 336);
    a2->n64_u64[0] = v3;
    LODWORD(v3) = *(_DWORD *)(a1 + 340);
    a2[1].n64_u32[0] = v3;
    HIDWORD(v3) = *(_DWORD *)(a1 + 344);
    a2[1].n64_u64[0] = v3;
    LODWORD(v3) = *(_DWORD *)(a1 + 348);
    a2[2].n64_u32[0] = v3;
    HIDWORD(v3) = *(_DWORD *)(a1 + 352);
    a2[2].n64_u64[0] = v3;
    result.n64_u32[0] = *(_DWORD *)(a1 + 356);
    a2[3].n64_u32[0] = result.n64_u32[0];
    result.n64_u32[1] = *(_DWORD *)(a1 + 360);
    a2[3].n64_u64[0] = result.n64_u64[0];
  }
  return result;
}

uint64_t CV3DPlaneDetectionPlaneWasRestored(uint64_t result)
{
  if (result)
    return *(_BYTE *)(result + 256) & 1;
  return result;
}

double CV3DPlaneDetectionSingleShotPlaneSupport(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

double CV3DPlaneDetectionSingleShotPlaneNormal(uint64_t a1)
{
  return *(double *)(a1 + 20);
}

__n128 CV3DPlaneDetectionSingleShotPlaneTransformationToWorld(__n128 *a1)
{
  return a1[2];
}

uint64_t CV3DPlaneDetectionSingleShotPlaneGetOrientation(uint64_t a1)
{
  unint64_t v1;
  char v2;

  v1 = *(unsigned __int8 *)(a1 + 96);
  if (v1 >= 5)
    v2 = 0;
  else
    v2 = 0x400020100uLL >> (8 * v1);
  return v2 & 7;
}

float CV3DPlaneDetectionSingleShotPlaneGetUncertainty(uint64_t a1)
{
  return *(float *)(a1 + 100);
}

char *CV3DPlaneDetectionSingleShotPlaneMergedUUID(char *a1)
{
  char *v1;
  const __CFAllocator *Default;
  std::__shared_weak_count_vtbl *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  CFTypeRef cf;
  std::__shared_weak_count *v9;

  v1 = a1;
  if (!a1)
    return v1;
  if (!a1[168])
    return 0;
  Default = CFAllocatorGetDefault();
  v3 = (std::__shared_weak_count_vtbl *)CFUUIDCreateFromUUIDBytes(Default, *(CFUUIDBytes *)(v1 + 152));
  sub_224533328((std::__shared_weak_count_vtbl **)&cf, v3, 0);
  v1 = (char *)cf;
  if (cf)
    CFRetain(cf);
  v4 = v9;
  if (!v9)
    return v1;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
    return v1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v1;
}

void sub_22324B320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t CV3DPlaneDetectionSingleShotPlaneListRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 32);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DPlaneDetectionSingleShotPlaneListRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 32);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

unint64_t CV3DPlaneDetectionSingleShotPlaneListLength(unint64_t result)
{
  if (result)
    return 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(_QWORD *)(result + 16) - *(_QWORD *)(result + 8)) >> 3);
  return result;
}

uint64_t CV3DPlaneDetectionSingleShotPlaneAtIndex(uint64_t result, unint64_t a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = *(_QWORD *)(result + 8);
    if (0xCF3CF3CF3CF3CF3DLL * ((*(_QWORD *)(result + 16) - v2) >> 3) <= a2)
    {
      return 0;
    }
    else if (v2)
    {
      return v2 + 168 * a2 - 8;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CV3DPlaneDetectionPlaneConvexHull2D(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 392))
    return a1 + 360;
  else
    return 0;
}

uint64_t CV3DPlaneDetectionConvexHullPointsNum(uint64_t result)
{
  if (result)
    return (uint64_t)(*(_QWORD *)(result + 16) - *(_QWORD *)(result + 8)) >> 3;
  return result;
}

uint64_t CV3DPlaneDetectionConvexHullPointsRawPtr(uint64_t result)
{
  if (result)
  {
    if (*(_QWORD *)(result + 8) == *(_QWORD *)(result + 16))
      return 0;
    else
      return *(_QWORD *)(result + 8);
  }
  return result;
}

uint64_t CV3DPlaneDetectionPlaneExtentAlignedBoundingBox(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 328))
      result += 304;
    else
      return 0;
  }
  return result;
}

uint64_t CV3DPlaneDetectionExtentGridLength(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 424))
      return (uint64_t)(*(_QWORD *)(result + 408) - *(_QWORD *)(result + 400)) >> 4;
    else
      return 0;
  }
  return result;
}

uint64_t CV3DPlaneDetectionExtentGridAtIndex(uint64_t result, unint64_t a2)
{
  uint64_t v2;

  if (result)
  {
    if (*(_BYTE *)(result + 424) && (v2 = *(_QWORD *)(result + 400), a2 < (*(_QWORD *)(result + 408) - v2) >> 4))
    {
      if (v2)
        return v2 + 16 * a2 - 8;
      else
        return 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CV3DPlaneDetectionAlignedBoundingBoxMin(uint64_t a1)
{
  if (a1)
    return a1 + 8;
  else
    return 0;
}

uint64_t CV3DPlaneDetectionAlignedBoundingBoxMax(uint64_t a1)
{
  if (a1)
    return a1 + 16;
  else
    return 0;
}

uint64_t CV3DPlaneDetectionPlaneExtentPolygons(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 456))
      result += 424;
    else
      return 0;
  }
  return result;
}

unint64_t CV3DPlaneDetectionPolygonListLength(unint64_t result)
{
  if (result)
    return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(result + 16) - *(_QWORD *)(result + 8)) >> 3);
  return result;
}

uint64_t CV3DPlaneDetectionPolygonAtIndex(uint64_t result, unint64_t a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = *(_QWORD *)(result + 8);
    if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(result + 16) - v2) >> 3) <= a2)
    {
      return 0;
    }
    else if (v2)
    {
      return v2 + 24 * a2 - 8;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CV3DPlaneDetectionPolygonPointsNum(uint64_t result)
{
  if (result)
    return (uint64_t)(*(_QWORD *)(result + 16) - *(_QWORD *)(result + 8)) >> 3;
  return result;
}

uint64_t CV3DPlaneDetectionPolygonPointsRawPtr(uint64_t result)
{
  if (result)
  {
    if (*(_QWORD *)(result + 8) == *(_QWORD *)(result + 16))
      return 0;
    else
      return *(_QWORD *)(result + 8);
  }
  return result;
}

uint64_t CV3DPlaneDetectionSingleShotPlaneExtentPolygons(uint64_t a1)
{
  if (a1)
    return a1 + 96;
  else
    return 0;
}

uint64_t CV3DPlaneDetectionGetSemanticLabelList(uint64_t a1)
{
  if (a1)
    return a1 + 120;
  else
    return 0;
}

uint64_t CV3DPlaneDetectionSemanticLabelListLength(uint64_t result)
{
  if (result)
    return 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(result + 16) - *(_QWORD *)(result + 8)) >> 3);
  return result;
}

uint64_t CV3DPlaneDetectionSemanticLabelAtIndex(uint64_t result, unint64_t a2, _BYTE *a3)
{
  uint64_t v3;

  if (result)
  {
    v3 = *(_QWORD *)(result + 8);
    if (0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(result + 16) - v3) >> 3) <= a2)
    {
      return 0;
    }
    else
    {
      *a3 = *(_BYTE *)(v3 + 104 * a2);
      return 1;
    }
  }
  return result;
}

uint64_t CV3DPlaneDetectionGetSemanticLabel(_BYTE *a1, _BYTE *a2)
{
  uint64_t v2;
  unint64_t v4;

  if (!a1)
    return 0;
  v2 = a1[224];
  if (a1[224])
  {
    if (a2)
    {
      *a2 = a1[120];
      return 1;
    }
    return 0;
  }
  if (!a2 || !a1[465])
    return v2;
  v4 = a1[464];
  if (v4 > 0x25)
    *a2 = 0;
  else
    *a2 = byte_2245D2430[v4];
  return 1;
}

uint64_t CV3DPlaneDetectionGetSemanticProbability(uint64_t result, unsigned int a2, double *a3)
{
  uint64_t v3;
  double v4;

  if (result)
  {
    v3 = result;
    if (*(_BYTE *)(result + 224))
    {
      result = 0;
      if (a2 <= 0xB && a3)
      {
        v4 = *(double *)(v3 + 8 * a2 + 128);
LABEL_11:
        *a3 = v4;
        return 1;
      }
    }
    else
    {
      result = 0;
      if (a2 <= 0xB && a3 && *(_BYTE *)(v3 + 465))
      {
        v4 = 0.0;
        if (*(unsigned __int8 *)(v3 + 464) == a2)
          v4 = 1.0;
        goto LABEL_11;
      }
    }
  }
  return result;
}

uint64_t CV3DPlaneDetectionGetNumSemanticLabels(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 224))
    {
      return 12;
    }
    else if (*(_BYTE *)(result + 465))
    {
      return 12;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

_DWORD *CV3DPlaneDetectionCutIfInside(uint64_t a1, uint64_t a2, float32x2_t *a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7)
{
  _DWORD *v7;
  __int128 v8;
  _DWORD *v9;
  char *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  void *v15;
  _OWORD v17[4];
  float32x2_t v18;
  int v19;
  char v20;
  _BYTE v21[280];
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  char v26;
  void *v27;
  void *v28;
  char v29;
  void *__p;
  char *v31;
  char v32;
  char v33;
  uint64_t v34;

  v7 = 0;
  v34 = *MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    v18.i8[0] = 0;
    v20 = 0;
    if (a3)
    {
      v8 = *(_OWORD *)a3->f32;
      v18 = *a3;
      v19 = DWORD2(v8);
      v20 = 1;
    }
    v17[0] = a4;
    v17[1] = a5;
    v17[2] = a6;
    v17[3] = a7;
    sub_223679190((uint64_t *)(a2 + 8), a1 + 8, (float32x2_t *)v17, &v18, (uint64_t)v21, a4);
    if (v33)
    {
      v9 = operator new(0x1D8uLL, MEMORY[0x24BEDB6B8]);
      v7 = v9;
      if (!v9 || (sub_223249DC0((uint64_t)(v9 + 2), (uint64_t)v21), v7[117] = 1, *(_QWORD *)v7 = &off_24EC2BF30, v33))
      {
        if (v32)
        {
          v10 = (char *)__p;
          if (__p)
          {
            v11 = v31;
            v12 = __p;
            if (v31 != __p)
            {
              v13 = v31;
              do
              {
                v15 = (void *)*((_QWORD *)v13 - 3);
                v13 -= 24;
                v14 = v15;
                if (v15)
                {
                  *((_QWORD *)v11 - 2) = v14;
                  operator delete(v14);
                }
                v11 = v13;
              }
              while (v13 != v10);
              v12 = __p;
            }
            v31 = v10;
            operator delete(v12);
          }
        }
        if (v29 && v27)
        {
          v28 = v27;
          operator delete(v27);
        }
        if (v26 && v24)
        {
          v25 = v24;
          operator delete(v24);
        }
        if (v22)
        {
          v23 = v22;
          operator delete(v22);
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return v7;
}

void sub_22324B884(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    MEMORY[0x227684CD0](v2, MEMORY[0x24BEDB6B8]);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (!LOBYTE(STACK[0x220]))
      JUMPOUT(0x22324B850);
    JUMPOUT(0x22324B7B4);
  }
  _Unwind_Resume(a1);
}

_OWORD *CV3DReconPlaneDetectionStatefulLoggerCreate()
{
  _OWORD *v0;
  _OWORD *v1;
  uint64_t v2;
  _OWORD *v3;
  _OWORD *v4;

  v0 = operator new(0x20uLL, MEMORY[0x24BEDB6B8]);
  v1 = v0;
  if (v0)
  {
    *v0 = 0u;
    v0[1] = 0u;
    v2 = operator new();
    *(_DWORD *)v2 = 1048576000;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_QWORD *)(v2 + 40) = 0;
    v3 = operator new(0x40uLL);
    *(_QWORD *)(v2 + 32) = v3 + 4;
    *(_QWORD *)(v2 + 40) = v3 + 4;
    *v3 = 0u;
    v3[1] = 0u;
    v3[2] = 0u;
    v3[3] = 0u;
    *(_QWORD *)(v2 + 24) = v3;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_QWORD *)(v2 + 96) = 0;
    v4 = operator new(0x40uLL);
    *(_QWORD *)(v2 + 88) = v4 + 4;
    *(_QWORD *)(v2 + 96) = v4 + 4;
    *v4 = 0u;
    v4[1] = 0u;
    v4[2] = 0u;
    v4[3] = 0u;
    *(_QWORD *)(v2 + 80) = v4;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_OWORD *)(v2 + 120) = 0u;
    *((_QWORD *)v1 + 1) = v2;
    *((_QWORD *)v1 + 2) = sub_22379F230;
    *((_DWORD *)v1 + 6) = 1;
    *(_QWORD *)v1 = &off_24EC2BB28;
  }
  return v1;
}

uint64_t sub_22324B9C4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  void *v16;

  *(_QWORD *)(v15 + 32) = v16;
  operator delete(v16);
  MEMORY[0x227684CE8](v15, 0x1080C40C6941FF2);
  MEMORY[0x227684CD0](v14, MEMORY[0x24BEDB6B8]);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  return 0;
}

uint64_t CV3DReconPlaneDetectionStatefulLoggerRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 24);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DReconPlaneDetectionStatefulLoggerPushLogDict(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  std::__shared_weak_count *v5;
  char *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  CFTypeRef v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  CFTypeRef v21;
  unint64_t *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v31;
  std::__shared_weak_count *v32;
  char *v33;
  __int128 v34;
  void *__p;
  __int128 v36;
  CFTypeRef cf;
  std::__shared_weak_count *v38;
  std::error_condition v39;

  if (a1)
  {
    if (a2)
    {
      sub_22319EE1C(&__p, a2);
      v6 = (char *)__p;
      v5 = (std::__shared_weak_count *)v36;
      if ((_QWORD)v36)
      {
        v7 = (unint64_t *)(v36 + 8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
        v9 = (std::__shared_weak_count *)v36;
        if ((_QWORD)v36)
        {
          v10 = (unint64_t *)(v36 + 8);
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 - 1, v10));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        do
          v12 = __ldxr(v7);
        while (__stxr(v12 + 1, v7));
        v33 = v6;
        *(_QWORD *)&v34 = v5;
        do
          v13 = __ldxr(v7);
        while (__stxr(v13 + 1, v7));
        do
          v14 = __ldaxr(v7);
        while (__stlxr(v14 - 1, v7));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        do
          v15 = __ldaxr(v7);
        while (__stlxr(v15 - 1, v7));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      else
      {
        v33 = (char *)__p;
        *(_QWORD *)&v34 = 0;
      }
      sub_22319ED0C(&v31, (uint64_t)&v33);
      v23 = sub_22379EF04((uint64_t *)(a1 + 8), (uint64_t)&v31);
      v24 = v32;
      if (v32)
      {
        p_shared_owners = (unint64_t *)&v32->__shared_owners_;
        do
          v26 = __ldaxr(p_shared_owners);
        while (__stlxr(v26 - 1, p_shared_owners));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      v27 = (std::__shared_weak_count *)v34;
      if ((_QWORD)v34)
      {
        v28 = (unint64_t *)(v34 + 8);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      return v23;
    }
    __p = operator new(0x20uLL);
    v36 = xmmword_2245C6440;
    strcpy((char *)__p, "Input log dictionary is NULL");
    v16 = (char *)operator new(0x78uLL);
    v33 = v16;
    v34 = xmmword_2245C6470;
    strcpy(v16, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionPlaneHelper.cpp");
    if (!a3)
      goto LABEL_40;
    *(_QWORD *)&v39.__val_ = 22;
    v39.__cat_ = std::generic_category();
    sub_2245321DC(&v39, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v21 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v21;
    v18 = v38;
    if (!v38)
      goto LABEL_38;
    v22 = (unint64_t *)&v38->__shared_owners_;
    do
      v20 = __ldaxr(v22);
    while (__stlxr(v20 - 1, v22));
  }
  else
  {
    __p = operator new(0x28uLL);
    v36 = xmmword_2245B8D20;
    strcpy((char *)__p, "Input stateful logger pointer is NULL");
    v16 = (char *)operator new(0x78uLL);
    v33 = v16;
    v34 = xmmword_2245C6470;
    strcpy(v16, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionPlaneHelper.cpp");
    if (!a3)
    {
LABEL_40:
      operator delete(v16);
      goto LABEL_41;
    }
    *(_QWORD *)&v39.__val_ = 22;
    v39.__cat_ = std::generic_category();
    sub_2245321DC(&v39, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v17 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v17;
    v18 = v38;
    if (!v38)
      goto LABEL_38;
    v19 = (unint64_t *)&v38->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
  }
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if ((SHIBYTE(v34) & 0x80000000) == 0)
      goto LABEL_41;
    goto LABEL_39;
  }
LABEL_38:
  if (SHIBYTE(v34) < 0)
  {
LABEL_39:
    v16 = v33;
    goto LABEL_40;
  }
LABEL_41:
  if (SHIBYTE(v36) < 0)
    operator delete(__p);
  return 0;
}

void sub_22324BE40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a19 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t CV3DPlaneDetectionDebugInfo(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  void **v7;
  char *v9;
  CFTypeRef v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  char *v14;
  CFTypeRef v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  CFTypeRef cf;
  std::__shared_weak_count *v20;
  std::error_condition v21;
  void *__p[4];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;

  if (!a1)
  {
    HIBYTE(__p[2]) = 21;
    strcpy((char *)__p, "Input Session is NULL");
    v9 = (char *)operator new(0x80uLL);
    strcpy(v9, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionSession+Private.cpp");
    if (a3)
    {
      *(_QWORD *)&v21.__val_ = 22;
      v21.__cat_ = std::generic_category();
      sub_2245321DC(&v21, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v10 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v10;
      v11 = v20;
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
    operator delete(v9);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return 0;
    goto LABEL_32;
  }
  if (!a2)
  {
    __p[0] = operator new(0x19uLL);
    *(_OWORD *)&__p[1] = xmmword_2245B9430;
    strcpy((char *)__p[0], "Input debugInfo is NULL");
    v14 = (char *)operator new(0x80uLL);
    strcpy(v14, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionSession+Private.cpp");
    if (a3)
    {
      *(_QWORD *)&v21.__val_ = 22;
      v21.__cat_ = std::generic_category();
      sub_2245321DC(&v21, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v15 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v15;
      v16 = v20;
      if (v20)
      {
        v17 = (unint64_t *)&v20->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
    }
    operator delete(v14);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return 0;
LABEL_32:
    operator delete(__p[0]);
    return 0;
  }
  v4 = a2 + 8;
  v5 = sub_223343C14(*(_QWORD *)(a1 + 32));
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v26 = 0u;
  v24 = 0u;
  v25 = 0u;
  v23 = 0u;
  memset(__p, 0, sizeof(__p));
  v32 = xmmword_2245D80EC;
  v33 = *(_OWORD *)algn_2245D80FC;
  v34 = xmmword_2245D810C;
  v31 = 0;
  v35 = unk_2245D811C;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  if (v6)
    v7 = (void **)v5;
  else
    v7 = __p;
  v44 = 0;
  sub_22331B568(v4, (uint64_t)v7);
  sub_223334A68((uint64_t)__p);
  return 1;
}

void sub_22324C208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  operator delete(v22);
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_22324C250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_223334A68((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CV3DPlaneDetectionInitializeVisualLogger(uint64_t a1, char *a2, const char *a3, CFTypeRef *a4)
{
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;
  char __p[22];
  char v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a1)
    return sub_22331C718((int)a1 + 8, a2, a3);
  v13 = 21;
  strcpy(__p, "Input Session is NULL");
  v6 = (char *)operator new(0x80uLL);
  v11 = v6;
  strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionSession+Private.cpp");
  if (a4)
  {
    *(_QWORD *)&v16.__val_ = 22;
    v16.__cat_ = std::generic_category();
    sub_2245321DC(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a4)
      CFRelease(*a4);
    *a4 = 0;
    v7 = cf;
    if (cf)
      CFRetain(cf);
    *a4 = v7;
    v8 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v6 = v11;
  }
  operator delete(v6);
  if (v13 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_22324C3EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *CV3DPlaneDetectionSessionCreateWithConfig(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  BOOL v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  int v10;
  __int128 v11;
  uint64_t *v12;
  uint64_t *v13;
  char *v15;
  const void *v16;
  std::__shared_weak_count *cat;
  unint64_t *v18;
  unint64_t v19;
  const void *v20;
  unint64_t *v21;
  void *v22;
  char *v23;
  CFErrorRef v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  _BYTE __p[32];
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  _BYTE v32[32];
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  CFErrorRef v44;
  std::__shared_weak_count *v45;
  std::error_condition v46;

  if (!a1)
  {
    v32[23] = 20;
    strcpy(v32, "Input params is NULL");
    v15 = (char *)operator new(0x78uLL);
    *(_QWORD *)__p = v15;
    *(_OWORD *)&__p[8] = xmmword_2245C65B0;
    strcpy(v15, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionSession.cpp");
    if (a3)
    {
      v30 = 22;
      *(_QWORD *)&v31 = std::generic_category();
      sub_2245321DC((const std::error_condition *)&v30, (uint64_t)v32, (CFErrorRef *)&v46);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v16 = *(const void **)&v46.__val_;
      if (*(_QWORD *)&v46.__val_)
        CFRetain(*(CFTypeRef *)&v46.__val_);
      *a3 = v16;
      cat = (std::__shared_weak_count *)v46.__cat_;
      if (!v46.__cat_)
        goto LABEL_37;
      v18 = (unint64_t *)&v46.__cat_[1];
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
LABEL_36:
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))cat->__on_zero_shared)(cat);
        std::__shared_weak_count::__release_weak(cat);
        if ((__p[23] & 0x80000000) == 0)
        {
LABEL_40:
          if ((v32[23] & 0x80000000) != 0)
          {
            v22 = *(void **)v32;
LABEL_57:
            operator delete(v22);
          }
          return 0;
        }
        goto LABEL_38;
      }
LABEL_37:
      if ((__p[23] & 0x80000000) == 0)
        goto LABEL_40;
LABEL_38:
      v15 = *(char **)__p;
    }
LABEL_39:
    operator delete(v15);
    goto LABEL_40;
  }
  if (!a2)
  {
    v32[23] = 20;
    strcpy(v32, "Input config is NULL");
    v15 = (char *)operator new(0x78uLL);
    *(_QWORD *)__p = v15;
    *(_OWORD *)&__p[8] = xmmword_2245C65B0;
    strcpy(v15, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionSession.cpp");
    if (a3)
    {
      v30 = 22;
      *(_QWORD *)&v31 = std::generic_category();
      sub_2245321DC((const std::error_condition *)&v30, (uint64_t)v32, (CFErrorRef *)&v46);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v20 = *(const void **)&v46.__val_;
      if (*(_QWORD *)&v46.__val_)
        CFRetain(*(CFTypeRef *)&v46.__val_);
      *a3 = v20;
      cat = (std::__shared_weak_count *)v46.__cat_;
      if (!v46.__cat_)
        goto LABEL_37;
      v21 = (unint64_t *)&v46.__cat_[1];
      do
        v19 = __ldaxr(v21);
      while (__stlxr(v19 - 1, v21));
      goto LABEL_36;
    }
    goto LABEL_39;
  }
  v4 = 0;
  *(_QWORD *)v32 = &off_24EC64998;
  *(_QWORD *)&v32[8] = &off_24EC64920;
  v35 = *(_QWORD *)(a1 + 72);
  v37 = *(_QWORD *)(a1 + 84);
  v5 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)&v32[16] = *(_OWORD *)(a1 + 24);
  v33 = v5;
  v34 = *(_OWORD *)(a1 + 56);
  v36 = *(_DWORD *)(a1 + 80);
  v6 = *(_OWORD *)(a1 + 112);
  v38 = *(_OWORD *)(a1 + 96);
  v39 = v6;
  v7 = *(_OWORD *)(a1 + 128);
  v8 = *(_OWORD *)(a1 + 144);
  v9 = *(_OWORD *)(a1 + 160);
  v43 = *(_QWORD *)(a1 + 176);
  v42 = v9;
  v41 = v8;
  v40 = v7;
  if ((DWORD2(v39) - 6) >= 0xFFFFFFFB && HIDWORD(v39) >= 3)
    v4 = v40 > 2;
  if (*(double *)&v39 == 5.0)
    v10 = 0;
  else
    v10 = -127;
  if (*(double *)&v39 > 5.0)
    v10 = 1;
  if (*(double *)&v39 < 5.0)
    v10 = -1;
  if (v10 == -127 || (v10 & 0x80) == 0 || !v4)
  {
    *(_QWORD *)__p = operator new(0x20uLL);
    *(_OWORD *)&__p[8] = xmmword_2245B9420;
    strcpy(*(char **)__p, "Input params are invalid");
    v23 = (char *)operator new(0x78uLL);
    v30 = (uint64_t)v23;
    v31 = xmmword_2245C65B0;
    strcpy(v23, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v46.__val_ = 22;
      v46.__cat_ = std::generic_category();
      sub_2245321DC(&v46, (uint64_t)__p, &v44);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v24 = v44;
      if (v44)
        CFRetain(v44);
      *a3 = v24;
      v25 = v45;
      if (v45)
      {
        p_shared_owners = (unint64_t *)&v45->__shared_owners_;
        do
          v27 = __ldaxr(p_shared_owners);
        while (__stlxr(v27 - 1, p_shared_owners));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      if ((SHIBYTE(v31) & 0x80000000) == 0)
      {
LABEL_55:
        if ((__p[23] & 0x80000000) != 0)
        {
          v22 = *(void **)__p;
          goto LABEL_57;
        }
        return 0;
      }
      v23 = (char *)v30;
    }
    operator delete(v23);
    goto LABEL_55;
  }
  v11 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)__p = *(_OWORD *)(a2 + 8);
  *(_OWORD *)&__p[16] = v11;
  v29 = *(_QWORD *)(a2 + 40);
  v12 = (uint64_t *)operator new(0x90uLL, MEMORY[0x24BEDB6B8]);
  v13 = v12;
  if (v12)
  {
    sub_223317994(v12 + 1, (float32x2_t *)v32, (uint64_t)&v39, (uint64_t)__p);
    *((_DWORD *)v13 + 34) = 1;
    *v13 = (uint64_t)&off_24EC2C350;
  }
  return v13;
}

void sub_22324C8E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;

  operator delete(v25);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DPlaneDetectionSessionRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 136);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DPlaneDetectionSetConfiguration(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  __int128 v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char *v10;
  CFTypeRef v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  CFTypeRef v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  char *v20;
  __int128 v21;
  CFTypeRef cf;
  std::__shared_weak_count *v23;
  std::error_condition v24;
  void *__p[6];

  if (a1)
  {
    if (a2)
    {
      v5 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)__p = *(_OWORD *)(a2 + 8);
      *(_OWORD *)&__p[2] = v5;
      __p[4] = *(void **)(a2 + 40);
      v6 = sub_2233432E4(*(_QWORD *)(a1 + 32));
      if (LODWORD(__p[0]))
      {
        if ((v6 & 1) == 0)
          sub_223342DCC(*(_QWORD *)(a1 + 32));
        v7 = *(_QWORD *)(a1 + 32);
        (*(void (**)(uint64_t, void **))(*(_QWORD *)(*(_QWORD *)(v7 + 72) + 256) + 16))(*(_QWORD *)(v7 + 72) + 256, __p);
        v8 = *(_QWORD *)(v7 + 72);
        LOBYTE(v20) = sub_2233432E4(v7);
        (*(void (**)(uint64_t, char **))(*(_QWORD *)(v8 + 88) + 16))(v8 + 88, &v20);
        return 1;
      }
      else
      {
        if (v6)
          sub_22334312C(*(_QWORD *)(a1 + 32));
        return 1;
      }
    }
    HIBYTE(__p[2]) = 20;
    strcpy((char *)__p, "Input config is NULL");
    v15 = (char *)operator new(0x78uLL);
    v20 = v15;
    v21 = xmmword_2245C65B0;
    strcpy(v15, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v24.__val_ = 22;
      v24.__cat_ = std::generic_category();
      sub_2245321DC(&v24, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v16 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v16;
      v17 = v23;
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      if ((SHIBYTE(v21) & 0x80000000) == 0)
        goto LABEL_36;
      v15 = v20;
    }
    operator delete(v15);
LABEL_36:
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    return 0;
  }
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "Input Session is NULL");
  v10 = (char *)operator new(0x78uLL);
  v20 = v10;
  v21 = xmmword_2245C65B0;
  strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionSession.cpp");
  if (a3)
  {
    *(_QWORD *)&v24.__val_ = 22;
    v24.__cat_ = std::generic_category();
    sub_2245321DC(&v24, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v11 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v11;
    v12 = v23;
    if (v23)
    {
      v13 = (unint64_t *)&v23->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if ((SHIBYTE(v21) & 0x80000000) == 0)
      goto LABEL_20;
    v10 = v20;
  }
  operator delete(v10);
LABEL_20:
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_22324CD28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  operator delete(v22);
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DPlaneDetectionSessionSetAnchoringFunctors(_QWORD *a1, const void *a2, const void *a3, CFTypeRef *a4)
{
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  char *v24;
  CFTypeRef v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  CFTypeRef v29;
  unint64_t *v30;
  CFTypeRef v31;
  unint64_t *v32;
  std::__shared_weak_count *v33;
  char *v34;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v37;
  std::error_condition v38;

  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        v8 = (std::__shared_weak_count *)operator new(0x20uLL);
        v8->__shared_owners_ = 0;
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        v8->__shared_weak_owners_ = 0;
        v8->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC26D70;
        v8[1].__vftable = (std::__shared_weak_count_vtbl *)_Block_copy(a2);
        v33 = v8;
        v10 = (std::__shared_weak_count *)operator new(0x20uLL);
        v10->__shared_owners_ = 0;
        v11 = (unint64_t *)&v10->__shared_owners_;
        v10->__shared_weak_owners_ = 0;
        v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC26DC0;
        v10[1].__vftable = (std::__shared_weak_count_vtbl *)_Block_copy(a3);
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
        v13 = (std::__shared_weak_count *)a1[12];
        a1[11] = v8 + 1;
        a1[12] = v8;
        if (v13)
        {
          v14 = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        do
          v16 = __ldxr(v11);
        while (__stxr(v16 + 1, v11));
        v17 = (std::__shared_weak_count *)a1[14];
        a1[13] = v10 + 1;
        a1[14] = v10;
        if (v17)
        {
          v18 = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        do
          v20 = __ldaxr(v11);
        while (__stlxr(v20 - 1, v11));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
        if (v33)
        {
          v21 = (unint64_t *)&v33->__shared_owners_;
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        return 1;
      }
      __p[0] = operator new(0x20uLL);
      *(_OWORD *)&__p[1] = xmmword_2245C6440;
      strcpy((char *)__p[0], "RemoveAnchor functor is NULL");
      v24 = (char *)operator new(0x78uLL);
      v34 = v24;
      strcpy(v24, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionSession.cpp");
      if (a4)
      {
        *(_QWORD *)&v38.__val_ = 22;
        v38.__cat_ = std::generic_category();
        sub_2245321DC(&v38, (uint64_t)__p, (CFErrorRef *)&cf);
        if (*a4)
          CFRelease(*a4);
        *a4 = 0;
        v31 = cf;
        if (cf)
          CFRetain(cf);
        *a4 = v31;
        v26 = v37;
        if (!v37)
          goto LABEL_54;
        v32 = (unint64_t *)&v37->__shared_owners_;
        do
          v28 = __ldaxr(v32);
        while (__stlxr(v28 - 1, v32));
LABEL_52:
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
LABEL_54:
        v24 = v34;
      }
    }
    else
    {
      __p[0] = operator new(0x20uLL);
      *(_OWORD *)&__p[1] = xmmword_2245B8D00;
      strcpy((char *)__p[0], "AddAnchor functor is NULL");
      v24 = (char *)operator new(0x78uLL);
      v34 = v24;
      strcpy(v24, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionSession.cpp");
      if (a4)
      {
        *(_QWORD *)&v38.__val_ = 22;
        v38.__cat_ = std::generic_category();
        sub_2245321DC(&v38, (uint64_t)__p, (CFErrorRef *)&cf);
        if (*a4)
          CFRelease(*a4);
        *a4 = 0;
        v29 = cf;
        if (cf)
          CFRetain(cf);
        *a4 = v29;
        v26 = v37;
        if (!v37)
          goto LABEL_54;
        v30 = (unint64_t *)&v37->__shared_owners_;
        do
          v28 = __ldaxr(v30);
        while (__stlxr(v28 - 1, v30));
        goto LABEL_52;
      }
    }
  }
  else
  {
    HIBYTE(__p[2]) = 21;
    strcpy((char *)__p, "Input Session is NULL");
    v24 = (char *)operator new(0x78uLL);
    v34 = v24;
    strcpy(v24, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionSession.cpp");
    if (a4)
    {
      *(_QWORD *)&v38.__val_ = 22;
      v38.__cat_ = std::generic_category();
      sub_2245321DC(&v38, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v25 = cf;
      if (cf)
        CFRetain(cf);
      *a4 = v25;
      v26 = v37;
      if (!v37)
        goto LABEL_54;
      v27 = (unint64_t *)&v37->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      goto LABEL_52;
    }
  }
  operator delete(v24);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_22324D24C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  void *v22;

  operator delete(v22);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DPlaneDetectionSessionRegisterUpdateCallback(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  std::__shared_weak_count *v6;
  unint64_t *v7;
  _QWORD *v8;
  unint64_t v9;
  char *v10;
  CFErrorRef v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  CFErrorRef v15;
  unint64_t *v16;
  _QWORD *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  char *v23;
  __int128 v24;
  char __p[22];
  char v26;
  CFErrorRef v27;
  std::__shared_weak_count *v28;
  std::error_condition v29;

  if (!a1)
  {
    v26 = 21;
    strcpy(__p, "Input Session is NULL");
    v10 = (char *)operator new(0x78uLL);
    v23 = v10;
    v24 = xmmword_2245C65B0;
    strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v29.__val_ = 22;
      v29.__cat_ = std::generic_category();
      sub_2245321DC(&v29, (uint64_t)__p, &v27);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v11 = v27;
      if (v27)
        CFRetain(v27);
      *a3 = v11;
      v12 = v28;
      if (!v28)
        goto LABEL_25;
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
LABEL_24:
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
        if ((SHIBYTE(v24) & 0x80000000) == 0)
          goto LABEL_28;
LABEL_26:
        v10 = v23;
        goto LABEL_27;
      }
LABEL_25:
      if ((SHIBYTE(v24) & 0x80000000) == 0)
      {
LABEL_28:
        if (v26 < 0)
          operator delete(*(void **)__p);
        return 0;
      }
      goto LABEL_26;
    }
LABEL_27:
    operator delete(v10);
    goto LABEL_28;
  }
  if (!a2)
  {
    v26 = 16;
    strcpy(__p, "Callback is NULL");
    v10 = (char *)operator new(0x78uLL);
    v23 = v10;
    v24 = xmmword_2245C65B0;
    strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v29.__val_ = 22;
      v29.__cat_ = std::generic_category();
      sub_2245321DC(&v29, (uint64_t)__p, &v27);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v15 = v27;
      if (v27)
        CFRetain(v27);
      *a3 = v15;
      v12 = v28;
      if (!v28)
        goto LABEL_25;
      v16 = (unint64_t *)&v28->__shared_owners_;
      do
        v14 = __ldaxr(v16);
      while (__stlxr(v14 - 1, v16));
      goto LABEL_24;
    }
    goto LABEL_27;
  }
  v6 = (std::__shared_weak_count *)operator new(0x20uLL);
  v6->__shared_owners_ = 0;
  v7 = (unint64_t *)&v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC26E10;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)_Block_copy(a2);
  v21 = v6 + 1;
  v22 = v6;
  v8 = *(_QWORD **)(a1 + 56);
  if ((unint64_t)v8 >= *(_QWORD *)(a1 + 64))
  {
    v18 = sub_22332FE94(a1 + 48, &v21);
    v6 = v22;
    *(_QWORD *)(a1 + 56) = v18;
    if (!v6)
      return 1;
  }
  else
  {
    *v8 = v6 + 1;
    v8[1] = v6;
    do
      v9 = __ldxr(v7);
    while (__stxr(v9 + 1, v7));
    *(_QWORD *)(a1 + 56) = v8 + 2;
  }
  v19 = (unint64_t *)&v6->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
    return 1;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return 1;
}

void sub_22324D624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DPlaneDetectionSessionSetSingleShotPlanesCallback(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  char *v14;
  CFTypeRef v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  CFTypeRef v19;
  unint64_t *v20;
  char *v21;
  char __p[22];
  char v23;
  CFTypeRef cf;
  std::__shared_weak_count *v25;
  std::error_condition v26;

  if (a1)
  {
    if (a2)
    {
      v6 = (std::__shared_weak_count *)operator new(0x20uLL);
      v6->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      v6->__shared_weak_owners_ = 0;
      v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC26E60;
      v6[1].__vftable = (std::__shared_weak_count_vtbl *)_Block_copy(a2);
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      v9 = *(std::__shared_weak_count **)(a1 + 80);
      *(_QWORD *)(a1 + 72) = v6 + 1;
      *(_QWORD *)(a1 + 80) = v6;
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      return 1;
    }
    v23 = 16;
    strcpy(__p, "Callback is NULL");
    v14 = (char *)operator new(0x78uLL);
    v21 = v14;
    strcpy(v14, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v26.__val_ = 22;
      v26.__cat_ = std::generic_category();
      sub_2245321DC(&v26, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v19 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v19;
      v16 = v25;
      if (!v25)
        goto LABEL_33;
      v20 = (unint64_t *)&v25->__shared_owners_;
      do
        v18 = __ldaxr(v20);
      while (__stlxr(v18 - 1, v20));
LABEL_31:
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
LABEL_33:
      v14 = v21;
    }
  }
  else
  {
    v23 = 21;
    strcpy(__p, "Input Session is NULL");
    v14 = (char *)operator new(0x78uLL);
    v21 = v14;
    strcpy(v14, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v26.__val_ = 22;
      v26.__cat_ = std::generic_category();
      sub_2245321DC(&v26, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v15 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v15;
      v16 = v25;
      if (!v25)
        goto LABEL_33;
      v17 = (unint64_t *)&v25->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      goto LABEL_31;
    }
  }
  operator delete(v14);
  if (v23 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_22324D9A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DPlaneDetectionSessionWait(_QWORD *a1, CFTypeRef *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v12;
  char __p[22];
  char v14;
  CFTypeRef cf;
  std::__shared_weak_count *v16;
  std::error_condition v17;

  if (a1)
  {
    sub_223343014(a1[4]);
    v3 = *(_QWORD *)(*(_QWORD *)(a1[1] + 72) + 72);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 64))(v3);
    v4 = *(_QWORD *)(*(_QWORD *)(a1[2] + 72) + 72);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 64))(v4);
  }
  else
  {
    v14 = 21;
    strcpy(__p, "Input Session is NULL");
    v6 = (char *)operator new(0x78uLL);
    v12 = v6;
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionSession.cpp");
    if (a2)
    {
      *(_QWORD *)&v17.__val_ = 22;
      v17.__cat_ = std::generic_category();
      sub_2245321DC(&v17, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v7;
      v8 = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v6 = v12;
    }
    operator delete(v6);
    if (v14 < 0)
      operator delete(*(void **)__p);
  }
  return a1 != 0;
}

void sub_22324DB98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DPlaneDetectionPushSlamMetadata(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  CFTypeRef v10;
  unint64_t *p_shared_owners;
  char *v12;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a1)
  {
    if (a2)
      return sub_22331A784(a1 + 8, a2);
    __p[0] = operator new(0x20uLL);
    *(_OWORD *)&__p[1] = xmmword_2245B8D50;
    strcpy((char *)__p[0], "Input SLAM metadata is NULL");
    v5 = (char *)operator new(0x78uLL);
    v12 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_2245321DC(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v10 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v10;
      v7 = v15;
      if (!v15)
        goto LABEL_25;
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
LABEL_21:
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
LABEL_25:
      v5 = v12;
    }
  }
  else
  {
    HIBYTE(__p[2]) = 21;
    strcpy((char *)__p, "Input Session is NULL");
    v5 = (char *)operator new(0x78uLL);
    v12 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_2245321DC(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v15;
      if (!v15)
        goto LABEL_25;
      v8 = (unint64_t *)&v15->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      goto LABEL_21;
    }
  }
  operator delete(v5);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_22324DE60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DPlaneDetectionPushSemanticFrame(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v4;
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  CFTypeRef v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  char __p[22];
  char v17;
  CFTypeRef cf;
  std::__shared_weak_count *v19;
  std::error_condition v20;

  if (a1)
  {
    if (a2)
    {
      v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 72) + 592;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, a2 + 8);
      return 1;
    }
    v17 = 19;
    strcpy(__p, "Input frame is NULL");
    v11 = (char *)operator new(0x78uLL);
    strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v20.__val_ = 22;
      v20.__cat_ = std::generic_category();
      sub_2245321DC(&v20, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v12 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v12;
      v13 = v19;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    operator delete(v11);
    if ((v17 & 0x80000000) == 0)
      return 0;
  }
  else
  {
    v17 = 21;
    strcpy(__p, "Input Session is NULL");
    v6 = (char *)operator new(0x78uLL);
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v20.__val_ = 22;
      v20.__cat_ = std::generic_category();
      sub_2245321DC(&v20, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v7;
      v8 = v19;
      if (v19)
      {
        v9 = (unint64_t *)&v19->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    operator delete(v6);
    if ((v17 & 0x80000000) == 0)
      return 0;
  }
  operator delete(*(void **)__p);
  return 0;
}

void sub_22324E18C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DPlaneDetectionPushDepthAndSemanticFrame(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v4;
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  CFTypeRef v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  char __p[22];
  char v17;
  CFTypeRef cf;
  std::__shared_weak_count *v19;
  std::error_condition v20;

  if (a1)
  {
    if (a2)
    {
      v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 72) + 1096;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, a2 + 8);
      return 1;
    }
    v17 = 19;
    strcpy(__p, "Input frame is NULL");
    v11 = (char *)operator new(0x78uLL);
    strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v20.__val_ = 22;
      v20.__cat_ = std::generic_category();
      sub_2245321DC(&v20, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v12 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v12;
      v13 = v19;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    operator delete(v11);
    if ((v17 & 0x80000000) == 0)
      return 0;
  }
  else
  {
    v17 = 21;
    strcpy(__p, "Input Session is NULL");
    v6 = (char *)operator new(0x78uLL);
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v20.__val_ = 22;
      v20.__cat_ = std::generic_category();
      sub_2245321DC(&v20, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v7;
      v8 = v19;
      if (v19)
      {
        v9 = (unint64_t *)&v19->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    operator delete(v6);
    if ((v17 & 0x80000000) == 0)
      return 0;
  }
  operator delete(*(void **)__p);
  return 0;
}

void sub_22324E4B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DPlaneDetectionPushSparseDepthFrame(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v4;
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  CFTypeRef v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  char __p[22];
  char v17;
  CFTypeRef cf;
  std::__shared_weak_count *v19;
  std::error_condition v20;

  if (a1)
  {
    if (a2)
    {
      v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 72) + 928;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, a2 + 8);
      return 1;
    }
    v17 = 19;
    strcpy(__p, "Input frame is NULL");
    v11 = (char *)operator new(0x78uLL);
    strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v20.__val_ = 22;
      v20.__cat_ = std::generic_category();
      sub_2245321DC(&v20, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v12 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v12;
      v13 = v19;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    operator delete(v11);
    if ((v17 & 0x80000000) == 0)
      return 0;
  }
  else
  {
    v17 = 21;
    strcpy(__p, "Input Session is NULL");
    v6 = (char *)operator new(0x78uLL);
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v20.__val_ = 22;
      v20.__cat_ = std::generic_category();
      sub_2245321DC(&v20, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v7;
      v8 = v19;
      if (v19)
      {
        v9 = (unint64_t *)&v19->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    operator delete(v6);
    if ((v17 & 0x80000000) == 0)
      return 0;
  }
  operator delete(*(void **)__p);
  return 0;
}

void sub_22324E7E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DPlaneDetectionPushPearlDepthFrame(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v4;
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  CFTypeRef v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  char __p[22];
  char v17;
  CFTypeRef cf;
  std::__shared_weak_count *v19;
  std::error_condition v20;

  if (a1)
  {
    if (a2)
    {
      v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 72) + 2608;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, a2 + 8);
      return 1;
    }
    v17 = 19;
    strcpy(__p, "Input frame is NULL");
    v11 = (char *)operator new(0x78uLL);
    strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v20.__val_ = 22;
      v20.__cat_ = std::generic_category();
      sub_2245321DC(&v20, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v12 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v12;
      v13 = v19;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    operator delete(v11);
    if ((v17 & 0x80000000) == 0)
      return 0;
  }
  else
  {
    v17 = 21;
    strcpy(__p, "Input Session is NULL");
    v6 = (char *)operator new(0x78uLL);
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v20.__val_ = 22;
      v20.__cat_ = std::generic_category();
      sub_2245321DC(&v20, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v7;
      v8 = v19;
      if (v19)
      {
        v9 = (unint64_t *)&v19->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    operator delete(v6);
    if ((v17 & 0x80000000) == 0)
      return 0;
  }
  operator delete(*(void **)__p);
  return 0;
}

void sub_22324EB10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DPlaneDetectionErasePlaneDetections(uint64_t a1, CFArrayRef theArray, CFTypeRef *a3)
{
  unint64_t Count;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  CFIndex v9;
  void *v10;
  const void *ValueAtIndex;
  const void *v12;
  char *v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  _BYTE *v19;
  _QWORD *v20;
  int64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  char *v33;
  CFTypeRef v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  CFTypeRef v38;
  unint64_t *v39;
  char *v43;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v46;
  std::error_condition v47;

  if (!a1)
  {
    HIBYTE(__p[2]) = 21;
    strcpy((char *)__p, "Input Session is NULL");
    v33 = (char *)operator new(0x78uLL);
    v43 = v33;
    strcpy(v33, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v47.__val_ = 22;
      v47.__cat_ = std::generic_category();
      sub_2245321DC(&v47, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v34 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v34;
      v35 = v46;
      if (!v46)
        goto LABEL_57;
      p_shared_owners = (unint64_t *)&v46->__shared_owners_;
      do
        v37 = __ldaxr(p_shared_owners);
      while (__stlxr(v37 - 1, p_shared_owners));
      goto LABEL_55;
    }
LABEL_58:
    operator delete(v33);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    return 0;
  }
  if (!theArray)
  {
    __p[0] = operator new(0x28uLL);
    *(_OWORD *)&__p[1] = xmmword_2245C65C0;
    strcpy((char *)__p[0], "Input plane detection uuids is NULL");
    v33 = (char *)operator new(0x78uLL);
    v43 = v33;
    strcpy(v33, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v47.__val_ = 22;
      v47.__cat_ = std::generic_category();
      sub_2245321DC(&v47, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v38 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v38;
      v35 = v46;
      if (!v46)
        goto LABEL_57;
      v39 = (unint64_t *)&v46->__shared_owners_;
      do
        v37 = __ldaxr(v39);
      while (__stlxr(v37 - 1, v39));
LABEL_55:
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
LABEL_57:
      v33 = v43;
      goto LABEL_58;
    }
    goto LABEL_58;
  }
  Count = CFArrayGetCount(theArray);
  memset(__p, 0, 24);
  if (Count)
  {
    v5 = Count;
    if (Count >> 61)
      sub_22316E078();
    v6 = 8 * Count;
    v7 = (char *)operator new(8 * Count);
    v8 = &v7[v6];
    __p[0] = v7;
    __p[2] = &v7[v6];
    bzero(v7, 8 * v5);
    v9 = 0;
    __p[1] = v8;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v9);
      v12 = ValueAtIndex;
      if (v8 < __p[2])
      {
        *(_QWORD *)v8 = ValueAtIndex;
        v10 = v8 + 8;
      }
      else
      {
        v13 = (char *)__p[0];
        v14 = v8 - (char *)__p[0];
        v15 = (v8 - (char *)__p[0]) >> 3;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 61)
          sub_22316E078();
        v17 = (char *)__p[2] - (char *)__p[0];
        if (((char *)__p[2] - (char *)__p[0]) >> 2 > v16)
          v16 = v17 >> 2;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
          v18 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
        {
          if (v18 >> 61)
            sub_223174E94();
          v19 = operator new(8 * v18);
          v20 = &v19[8 * v15];
          *v20 = v12;
          v10 = v20 + 1;
          v21 = v8 - v13;
          if (v8 != v13)
          {
LABEL_18:
            v22 = v21 - 8;
            if (v22 < 0x168)
            {
              v23 = v8;
              goto LABEL_20;
            }
            v25 = (v8 - 8 - v13) & 0xFFFFFFFFFFFFFFF8;
            if (&v19[v14 - 8 - v25] > &v19[v14 - 8])
            {
              v23 = v8;
              goto LABEL_20;
            }
            if (&v8[-v25 - 8] > v8 - 8)
            {
              v23 = v8;
              goto LABEL_20;
            }
            if ((unint64_t)(v8 - &v19[v14]) < 0x20)
            {
              v23 = v8;
              goto LABEL_20;
            }
            v26 = (v22 >> 3) + 1;
            v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
            v23 = &v8[-v27];
            v20 = (_QWORD *)((char *)v20 - v27);
            v28 = &v19[8 * v15 - 16];
            v29 = v8 - 16;
            v30 = v26 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v31 = *(_OWORD *)v29;
              *(v28 - 1) = *((_OWORD *)v29 - 1);
              *v28 = v31;
              v28 -= 2;
              v29 -= 32;
              v30 -= 4;
            }
            while (v30);
            if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_20:
                v24 = *((_QWORD *)v23 - 1);
                v23 -= 8;
                *--v20 = v24;
              }
              while (v23 != v13);
            }
            v8 = (char *)__p[0];
            __p[0] = v20;
            __p[2] = &v19[8 * v18];
            if (!v8)
              goto LABEL_7;
LABEL_25:
            operator delete(v8);
            goto LABEL_7;
          }
        }
        else
        {
          v19 = 0;
          v20 = (_QWORD *)(8 * v15);
          *(_QWORD *)(8 * v15) = v12;
          v10 = (void *)(8 * v15 + 8);
          v21 = v8 - v13;
          if (v8 != v13)
            goto LABEL_18;
        }
        __p[0] = v20;
        __p[2] = &v19[8 * v18];
        if (v8)
          goto LABEL_25;
      }
LABEL_7:
      __p[1] = v10;
      ++v9;
      v8 = (char *)v10;
    }
    while (v9 != v5);
  }
  v32 = sub_22331A914(a1 + 8, (const void ***)__p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v32;
}

void sub_22324F020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  void *v22;

  operator delete(v22);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DPlaneDetectionSerialize(uint64_t a1, __CFData *a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  CFTypeRef v10;
  unint64_t *p_shared_owners;
  char *v12;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a1)
  {
    if (a2)
      return sub_22331ACBC(a1 + 8, a2, a3);
    __p[0] = operator new(0x20uLL);
    *(_OWORD *)&__p[1] = xmmword_2245C6420;
    strcpy((char *)__p[0], "Output bytes container is NULL");
    v5 = (char *)operator new(0x78uLL);
    v12 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_2245321DC(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v10 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v10;
      v7 = v15;
      if (!v15)
        goto LABEL_25;
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
LABEL_21:
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
LABEL_25:
      v5 = v12;
    }
  }
  else
  {
    HIBYTE(__p[2]) = 21;
    strcpy((char *)__p, "Input Session is NULL");
    v5 = (char *)operator new(0x78uLL);
    v12 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_2245321DC(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v15;
      if (!v15)
        goto LABEL_25;
      v8 = (unint64_t *)&v15->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      goto LABEL_21;
    }
  }
  operator delete(v5);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_22324F314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DPlaneDetectionLoadMap(uint64_t a1, const __CFData *a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  CFTypeRef v10;
  unint64_t *p_shared_owners;
  char *v12;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a1)
  {
    if (a2)
      return sub_22331B094(a1 + 8, a2, a3);
    __p[0] = operator new(0x20uLL);
    *(_OWORD *)&__p[1] = xmmword_2245B8E30;
    strcpy((char *)__p[0], "Input bytes container is NULL");
    v5 = (char *)operator new(0x78uLL);
    v12 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_2245321DC(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v10 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v10;
      v7 = v15;
      if (!v15)
        goto LABEL_25;
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
LABEL_21:
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
LABEL_25:
      v5 = v12;
    }
  }
  else
  {
    HIBYTE(__p[2]) = 21;
    strcpy((char *)__p, "Input Session is NULL");
    v5 = (char *)operator new(0x78uLL);
    v12 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_2245321DC(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v15;
      if (!v15)
        goto LABEL_25;
      v8 = (unint64_t *)&v15->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      goto LABEL_21;
    }
  }
  operator delete(v5);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_22324F5EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_22324F634(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC26D70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22324F644(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC26D70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22324F674(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    _Block_release(v1);
}

void sub_22324F698(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC26DC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22324F6A8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC26DC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22324F6D8(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    _Block_release(v1);
}

void sub_22324F6FC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC26E10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22324F70C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC26E10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22324F73C(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    _Block_release(v1);
}

void sub_22324F760(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC26E60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22324F770(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC26E60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22324F7A0(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    _Block_release(v1);
}

void *CV3DPlaneDetectionAnchorCreate(const __CFUUID *a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5)
{
  void *v6;
  void *v7;

  v6 = operator new(0x60uLL, MEMORY[0x24BEDB6B8]);
  v7 = v6;
  if (v6)
    sub_223311BC0((uint64_t)v6, a1, a2, a3, a4, a5);
  return v7;
}

uint64_t sub_22324F828(void *a1)
{
  uint64_t v1;

  MEMORY[0x227684CD0](v1, MEMORY[0x24BEDB6B8]);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  return 0;
}

uint64_t CV3DPlaneDetectionAnchorRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 88);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DPlaneDetectionAnchorRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 88);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

double CV3DPlaneDetectionSlamMetadataCreate()
{
  _QWORD *v0;
  double result;

  v0 = operator new(0x128uLL, MEMORY[0x24BEDB6B8]);
  if (v0)
  {
    v0[36] = 0;
    *((_OWORD *)v0 + 16) = 0u;
    *((_OWORD *)v0 + 17) = 0u;
    *((_OWORD *)v0 + 14) = 0u;
    *((_OWORD *)v0 + 15) = 0u;
    *((_OWORD *)v0 + 12) = 0u;
    *((_OWORD *)v0 + 13) = 0u;
    *((_OWORD *)v0 + 10) = 0u;
    *((_OWORD *)v0 + 11) = 0u;
    *((_OWORD *)v0 + 8) = 0u;
    *((_OWORD *)v0 + 9) = 0u;
    *((_OWORD *)v0 + 6) = 0u;
    *((_OWORD *)v0 + 7) = 0u;
    *((_OWORD *)v0 + 4) = 0u;
    *((_OWORD *)v0 + 5) = 0u;
    *((_OWORD *)v0 + 2) = 0u;
    *((_OWORD *)v0 + 3) = 0u;
    *(_OWORD *)v0 = 0u;
    *((_OWORD *)v0 + 1) = 0u;
    *((_OWORD *)v0 + 14) = xmmword_2245C6840;
    *((_OWORD *)v0 + 15) = unk_2245C6850;
    *((_OWORD *)v0 + 16) = xmmword_2245C6860;
    *((_OWORD *)v0 + 17) = unk_2245C6870;
    *((_OWORD *)v0 + 10) = xmmword_2245C6800;
    *((_OWORD *)v0 + 11) = *(_OWORD *)algn_2245C6810;
    result = 0.0;
    *((_OWORD *)v0 + 12) = xmmword_2245C6820;
    *((_OWORD *)v0 + 13) = unk_2245C6830;
    *((_DWORD *)v0 + 72) = 1;
    *v0 = &off_24EC2C290;
  }
  return result;
}

uint64_t CV3DPlaneDetectionSlamMetadataRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 288);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DPlaneDetectionSlamMetadataRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 288);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

BOOL CV3DPlaneDetectionSlamMetadataSetUpdatedAnchors(_QWORD *a1, const __CFArray *a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  char __p[22];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
    return sub_2233104CC(a1, a2, a3);
  v12 = 21;
  strcpy(__p, "Slam metadata is NULL");
  v5 = (char *)operator new(0x80uLL);
  v10 = v5;
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionSlamMetadata.cpp");
  if (a3)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v6;
    v7 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v5 = v10;
  }
  operator delete(v5);
  if (v12 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_22324FB08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DPlaneDetectionSlamMetadataSetPointCloud(_QWORD *a1, uint64_t a2, uint64_t a3, size_t a4, CFTypeRef *a5, double a6, double a7, __n128 a8)
{
  char *v10;
  CFTypeRef v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  char __p[22];
  char v16;
  CFTypeRef cf;
  std::__shared_weak_count *v18;
  std::error_condition v19;

  if (a1)
    return sub_2233108E4(a1, a2, a3, a4, a5, a6, a7, a8);
  v16 = 21;
  strcpy(__p, "Slam metadata is NULL");
  v10 = (char *)operator new(0x80uLL);
  strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionSlamMetadata.cpp");
  if (a5)
  {
    *(_QWORD *)&v19.__val_ = 22;
    v19.__cat_ = std::generic_category();
    sub_2245321DC(&v19, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a5)
      CFRelease(*a5);
    *a5 = 0;
    v11 = cf;
    if (cf)
      CFRetain(cf);
    *a5 = v11;
    v12 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  operator delete(v10);
  if (v16 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_22324FCCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DPlaneDetectionSlamMetadataSetLineCloud(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned int a4, CFTypeRef *a5, double a6, double a7, __n128 a8)
{
  char *v10;
  CFTypeRef v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  char __p[22];
  char v16;
  CFTypeRef cf;
  std::__shared_weak_count *v18;
  std::error_condition v19;

  if (a1)
    return sub_2233110E0(a1, a2, a3, a4, a5, a6, a7, a8);
  v16 = 21;
  strcpy(__p, "Slam metadata is NULL");
  v10 = (char *)operator new(0x80uLL);
  strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionSlamMetadata.cpp");
  if (a5)
  {
    *(_QWORD *)&v19.__val_ = 22;
    v19.__cat_ = std::generic_category();
    sub_2245321DC(&v19, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a5)
      CFRelease(*a5);
    *a5 = 0;
    v11 = cf;
    if (cf)
      CFRetain(cf);
    *a5 = v11;
    v12 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  operator delete(v10);
  if (v16 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_22324FE90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DPlaneDetectionSlamMetadataSetCameraPose(uint64_t a1, CFTypeRef *a2, simd_float4 a3, simd_float4 a4, simd_float4 a5, simd_float4 a6)
{
  char *v8;
  CFTypeRef v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v13;
  char __p[22];
  char v15;
  CFTypeRef cf;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  if (a1)
    return sub_223311B40(a1, a3, a4, a5, a6);
  v15 = 21;
  strcpy(__p, "Slam metadata is NULL");
  v8 = (char *)operator new(0x80uLL);
  v13 = v8;
  strcpy(v8, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionSlamMetadata.cpp");
  if (a2)
  {
    *(_QWORD *)&v18.__val_ = 22;
    v18.__cat_ = std::generic_category();
    sub_2245321DC(&v18, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v9 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v9;
    v10 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v8 = v13;
  }
  operator delete(v8);
  if (v15 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_223250050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DPlaneDetectionSlamMetadataSetTimestamp(uint64_t a1, CFTypeRef *a2, double a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v11;
  char __p[22];
  char v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a1)
  {
    *(double *)(a1 + 48) = a3;
  }
  else
  {
    v13 = 21;
    strcpy(__p, "Slam metadata is NULL");
    v5 = (char *)operator new(0x80uLL);
    v11 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionSlamMetadata.cpp");
    if (a2)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_2245321DC(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v6;
      v7 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v5 = v11;
    }
    operator delete(v5);
    if (v13 < 0)
      operator delete(*(void **)__p);
  }
  return a1 != 0;
}

void sub_2232501EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DPlaneDetectionSlamMetadataSetReinitializeAttempts(uint64_t a1, int a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  char *v10;
  CFTypeRef v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  if (a1)
  {
    if ((a2 & 0x80000000) == 0)
    {
      *(_DWORD *)(a1 + 8) = a2;
      return 1;
    }
    __p[0] = operator new(0x20uLL);
    *(_OWORD *)&__p[1] = xmmword_2245B8E30;
    strcpy((char *)__p[0], "Invalid reinit attempts value");
    v10 = (char *)operator new(0x80uLL);
    strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionSlamMetadata.cpp");
    if (a3)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_2245321DC(&v18, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v11 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v11;
      v12 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    operator delete(v10);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return 0;
  }
  else
  {
    HIBYTE(__p[2]) = 21;
    strcpy((char *)__p, "Slam metadata is NULL");
    v5 = (char *)operator new(0x80uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionSlamMetadata.cpp");
    if (a3)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_2245321DC(&v18, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v17;
      if (v17)
      {
        v8 = (unint64_t *)&v17->__shared_owners_;
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return 0;
  }
  operator delete(__p[0]);
  return 0;
}

void sub_2232504F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DPlaneDetectionSlamMetadataSetInitFinished(uint64_t a1, char a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v11;
  char __p[22];
  char v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a1)
  {
    *(_BYTE *)(a1 + 12) = a2;
  }
  else
  {
    v13 = 21;
    strcpy(__p, "Slam metadata is NULL");
    v5 = (char *)operator new(0x80uLL);
    v11 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionSlamMetadata.cpp");
    if (a3)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_2245321DC(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v5 = v11;
    }
    operator delete(v5);
    if (v13 < 0)
      operator delete(*(void **)__p);
  }
  return a1 != 0;
}

void sub_2232506A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DPlaneDetectionSlamMetadataSetMapSize(uint64_t a1, int a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  char *v10;
  CFTypeRef v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  if (a1)
  {
    if ((a2 & 0x80000000) == 0)
    {
      *(_DWORD *)(a1 + 16) = a2;
      return 1;
    }
    __p[0] = operator new(0x20uLL);
    *(_OWORD *)&__p[1] = xmmword_2245B8D70;
    strcpy((char *)__p[0], "Map size can't be negative");
    v10 = (char *)operator new(0x80uLL);
    strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionSlamMetadata.cpp");
    if (a3)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_2245321DC(&v18, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v11 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v11;
      v12 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    operator delete(v10);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return 0;
  }
  else
  {
    HIBYTE(__p[2]) = 21;
    strcpy((char *)__p, "Slam metadata is NULL");
    v5 = (char *)operator new(0x80uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DPlaneDetectionSlamMetadata.cpp");
    if (a3)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_2245321DC(&v18, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v17;
      if (v17)
      {
        v8 = (unint64_t *)&v17->__shared_owners_;
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return 0;
  }
  operator delete(__p[0]);
  return 0;
}

void sub_2232509AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void *CV3DReconAnchorCreate(const void *a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5)
{
  void *v6;
  void *v7;

  v6 = operator new(0x60uLL, MEMORY[0x24BEDB6B8]);
  v7 = v6;
  if (v6)
    sub_2232B3580((uint64_t)v6, a1, a2, a3, a4, a5);
  return v7;
}

uint64_t sub_223250A58(void *a1)
{
  uint64_t v1;

  MEMORY[0x227684CD0](v1, MEMORY[0x24BEDB6B8]);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  return 0;
}

uint64_t CV3DReconAnchorRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 88);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DReconAnchorRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 88);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

void *CV3DReconFrameBundleCreate(unsigned int a1, uint64_t a2, double a3, float a4, double a5, double a6, __n128 a7, __n128 a8, __n128 a9, __n128 a10)
{
  void *v13;
  void *v14;

  v13 = operator new(0x730uLL, MEMORY[0x24BEDB6B8]);
  v14 = v13;
  if (v13)
    sub_2232B3734((uint64_t)v13, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return v14;
}

void sub_223250B68(void *a1)
{
  uint64_t v1;

  MEMORY[0x227684CD0](v1, MEMORY[0x24BEDB6B8]);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x223250B4CLL);
}

_DWORD *CV3DReconFrameBundleCreateDownsampled(uint64_t a1, CFTypeRef *a2, __n128 a3)
{
  char *v5;
  CFErrorRef v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  CFErrorRef v10;
  unint64_t *p_shared_owners;
  _DWORD *v13;
  _DWORD *v14;
  void *__p[229];
  char *v16;
  __int128 v17;
  CFErrorRef v18;
  std::__shared_weak_count *v19;
  std::error_condition v20;

  if (!a1)
  {
    HIBYTE(__p[2]) = 20;
    strcpy((char *)__p, "Frame bundle is NULL");
    v5 = (char *)operator new(0x70uLL);
    v16 = v5;
    v17 = xmmword_2245B8D30;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconFrameBundle.cpp");
    if (a2)
    {
      *(_QWORD *)&v20.__val_ = 22;
      v20.__cat_ = std::generic_category();
      sub_2245321DC(&v20, (uint64_t)__p, &v18);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v10 = v18;
      if (v18)
        CFRetain(v18);
      *a2 = v10;
      v7 = v19;
      if (!v19)
        goto LABEL_24;
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
LABEL_23:
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        if ((SHIBYTE(v17) & 0x80000000) == 0)
          goto LABEL_27;
LABEL_25:
        v5 = v16;
        goto LABEL_26;
      }
LABEL_24:
      if ((SHIBYTE(v17) & 0x80000000) == 0)
      {
LABEL_27:
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
        return 0;
      }
      goto LABEL_25;
    }
LABEL_26:
    operator delete(v5);
    goto LABEL_27;
  }
  if (a3.n128_f32[0] <= 0.0 || a3.n128_f32[0] > 1.0)
  {
    __p[0] = operator new(0x19uLL);
    *(_OWORD *)&__p[1] = xmmword_2245B9430;
    strcpy((char *)__p[0], "Scale must be in (0, 1]");
    v5 = (char *)operator new(0x70uLL);
    v16 = v5;
    v17 = xmmword_2245B8D30;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconFrameBundle.cpp");
    if (a2)
    {
      *(_QWORD *)&v20.__val_ = 22;
      v20.__cat_ = std::generic_category();
      sub_2245321DC(&v20, (uint64_t)__p, &v18);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v6 = v18;
      if (v18)
        CFRetain(v18);
      *a2 = v6;
      v7 = v19;
      if (!v19)
        goto LABEL_24;
      v8 = (unint64_t *)&v19->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      goto LABEL_23;
    }
    goto LABEL_26;
  }
  sub_223C33A78(a1 + 8, (uint64_t)__p, a3);
  v13 = operator new(0x730uLL, MEMORY[0x24BEDB6B8]);
  v14 = v13;
  if (v13)
  {
    sub_2232568B4((uint64_t)(v13 + 2), (uint64_t)__p);
    v14[458] = 1;
    *(_QWORD *)v14 = &off_24EC28938;
  }
  sub_2232555B8((uint64_t)__p);
  return v14;
}

void sub_223250E50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  operator delete(v14);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_DWORD *CV3DReconFrameBundleCreateFromVisualLoggerFile(std::string *a1, CFTypeRef *a2)
{
  size_t v4;
  unsigned __int8 v5;
  _DWORD *v6;
  _DWORD *v7;
  std::__shared_weak_count *v8;
  char *v10;
  CFErrorRef v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *v15;
  unint64_t *v16;
  unint64_t v17;
  size_t v18;
  int v19;
  void *__p;
  __int128 v21;
  char v22;
  char *v23;
  __int128 v24;
  CFErrorRef v25;
  std::__shared_weak_count *v26;
  std::error_condition v27;

  if (!a1)
  {
    __p = operator new(0x38uLL);
    v21 = xmmword_2245C44A0;
    strcpy((char *)__p, "Cannot load from VisualLogger File - path is NULL");
    v10 = (char *)operator new(0x70uLL);
    v23 = v10;
    v24 = xmmword_2245B8D30;
    strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconFrameBundle.cpp");
    if (a2)
    {
      *(_QWORD *)&v27.__val_ = 22;
      v27.__cat_ = std::generic_category();
      sub_2245321DC(&v27, (uint64_t)&__p, &v25);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v11 = v25;
      if (v25)
        CFRetain(v25);
      *a2 = v11;
      v12 = v26;
      if (v26)
      {
        p_shared_owners = (unint64_t *)&v26->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      if ((SHIBYTE(v24) & 0x80000000) == 0)
        goto LABEL_21;
      v10 = v23;
    }
    operator delete(v10);
LABEL_21:
    if (SHIBYTE(v21) < 0)
      operator delete(__p);
    return 0;
  }
  v4 = strlen((const char *)a1);
  v5 = atomic_load((unsigned __int8 *)&qword_255795348);
  if ((v5 & 1) == 0)
  {
    v18 = v4;
    v19 = __cxa_guard_acquire(&qword_255795348);
    v4 = v18;
    if (v19)
    {
      __cxa_atexit((void (*)(void *))nullsub_599, &off_2540CA630, &dword_22314D000);
      __cxa_guard_release(&qword_255795348);
      v4 = v18;
    }
  }
  sub_2232BAFA0(a1, v4, (uint64_t)&off_2540CA630, (uint64_t)&__p);
  if (v22)
  {
    v6 = operator new(0x730uLL, MEMORY[0x24BEDB6B8]);
    v7 = v6;
    if (v6)
    {
      sub_223257000((uint64_t)(v6 + 2), (uint64_t)&__p);
      v7[458] = 1;
      *(_QWORD *)v7 = &off_24EC28938;
      if (!v22)
        goto LABEL_6;
    }
    goto LABEL_30;
  }
  if (a2)
  {
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v15 = __p;
    if (__p)
      CFRetain(__p);
    v7 = 0;
    *a2 = v15;
    if (!v22)
    {
LABEL_6:
      v8 = (std::__shared_weak_count *)v21;
      if (!(_QWORD)v21)
        return v7;
      goto LABEL_32;
    }
LABEL_30:
    sub_2232555B8((uint64_t)&__p);
    return v7;
  }
  v7 = 0;
  v8 = (std::__shared_weak_count *)v21;
  if (!(_QWORD)v21)
    return v7;
LABEL_32:
  v16 = (unint64_t *)&v8->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (v17)
    return v7;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return v7;
}

void sub_223251180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223251204((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223251194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  operator delete(v14);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_223251204(uint64_t a1)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  if (*(_BYTE *)(a1 + 1824))
  {
    sub_2232555B8(a1);
    return a1;
  }
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v3)
    return a1;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return a1;
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

_DWORD *CV3DReconFrameBundleCreateFromBytes(CFTypeRef cf, CFTypeRef *a2)
{
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *cat;
  unint64_t *v9;
  unint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  char *v13;
  CFErrorRef v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  const void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  char __p[19];
  char v24;
  char v25;
  char *v26;
  __int128 v27;
  CFErrorRef v28;
  std::__shared_weak_count *v29;
  std::error_condition v30;

  if (!cf)
  {
    v24 = 18;
    strcpy(__p, "Data array is NULL");
    v13 = (char *)operator new(0x70uLL);
    v26 = v13;
    v27 = xmmword_2245B8D30;
    strcpy(v13, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconFrameBundle.cpp");
    if (a2)
    {
      *(_QWORD *)&v30.__val_ = 22;
      v30.__cat_ = std::generic_category();
      sub_2245321DC(&v30, (uint64_t)__p, &v28);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v14 = v28;
      if (v28)
        CFRetain(v28);
      *a2 = v14;
      v15 = v29;
      if (v29)
      {
        p_shared_owners = (unint64_t *)&v29->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      if ((SHIBYTE(v27) & 0x80000000) == 0)
        goto LABEL_31;
      v13 = v26;
    }
    operator delete(v13);
LABEL_31:
    if (v24 < 0)
      operator delete(*(void **)__p);
    return 0;
  }
  sub_2245289FC(&v26, cf);
  *(_QWORD *)&v30.__val_ = v26;
  v30.__cat_ = (const std::error_category *)v27;
  if ((_QWORD)v27)
  {
    v3 = (unint64_t *)(v27 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
    v5 = (std::__shared_weak_count *)v27;
    if ((_QWORD)v27)
    {
      v6 = (unint64_t *)(v27 + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  sub_2232BB178((uint64_t)&v30, (uint64_t)__p);
  cat = (std::__shared_weak_count *)v30.__cat_;
  if (!v30.__cat_)
    goto LABEL_14;
  v9 = (unint64_t *)&v30.__cat_[1];
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))cat->__on_zero_shared)(cat);
    std::__shared_weak_count::__release_weak(cat);
    if (v25)
      goto LABEL_15;
  }
  else
  {
LABEL_14:
    if (v25)
    {
LABEL_15:
      v11 = operator new(0x730uLL, MEMORY[0x24BEDB6B8]);
      v12 = v11;
      if (v11)
      {
        sub_223257000((uint64_t)(v11 + 2), (uint64_t)__p);
        v12[458] = 1;
        *(_QWORD *)v12 = &off_24EC28938;
        if (!v25)
          goto LABEL_44;
      }
LABEL_42:
      sub_2232555B8((uint64_t)__p);
      return v12;
    }
  }
  if (!a2)
  {
    v12 = 0;
    goto LABEL_44;
  }
  if (*a2)
    CFRelease(*a2);
  *a2 = 0;
  v19 = *(const void **)__p;
  if (*(_QWORD *)__p)
    CFRetain(*(CFTypeRef *)__p);
  v12 = 0;
  *a2 = v19;
  if (v25)
    goto LABEL_42;
LABEL_44:
  v20 = *(std::__shared_weak_count **)&__p[8];
  if (!*(_QWORD *)&__p[8])
    return v12;
  v21 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (v22)
    return v12;
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  return v12;
}

void sub_22325156C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223251204((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223251580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  operator delete(v14);
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t CV3DReconFrameBundleCopyAsBytes(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  char *v7;
  CFTypeRef v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  const void *v13;
  unint64_t *v14;
  char cf[21];
  char v16;
  CFTypeRef v17;
  std::__shared_weak_count *v18;
  std::error_condition v19;

  if (!a1)
  {
    v16 = 20;
    strcpy(cf, "Frame bundle is NULL");
    v7 = (char *)operator new(0x70uLL);
    strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconFrameBundle.cpp");
    if (a2)
    {
      *(_QWORD *)&v19.__val_ = 22;
      v19.__cat_ = std::generic_category();
      sub_2245321DC(&v19, (uint64_t)cf, (CFErrorRef *)&v17);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v8 = v17;
      if (v17)
        CFRetain(v17);
      *a2 = v8;
      v9 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    operator delete(v7);
    if (v16 < 0)
      operator delete(*(void **)cf);
    return 0;
  }
  sub_2232BB8C8(a1, (uint64_t)cf);
  if (cf[16])
  {
    v3 = *(_QWORD *)cf;
    if (!*(_QWORD *)cf)
      goto LABEL_5;
    CFRetain(*(CFTypeRef *)cf);
    if (cf[16])
      goto LABEL_5;
    goto LABEL_28;
  }
  if (!a2)
  {
    v3 = 0;
    v4 = *(std::__shared_weak_count **)&cf[8];
    if (!*(_QWORD *)&cf[8])
      return v3;
LABEL_31:
    v14 = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(v14);
    while (__stlxr(v6 - 1, v14));
    goto LABEL_33;
  }
  if (*a2)
    CFRelease(*a2);
  *a2 = 0;
  v13 = *(const void **)cf;
  if (*(_QWORD *)cf)
    CFRetain(*(CFTypeRef *)cf);
  v3 = 0;
  *a2 = v13;
  if (!cf[16])
  {
LABEL_28:
    v4 = *(std::__shared_weak_count **)&cf[8];
    if (!*(_QWORD *)&cf[8])
      return v3;
    goto LABEL_31;
  }
LABEL_5:
  v4 = *(std::__shared_weak_count **)&cf[8];
  if (!*(_QWORD *)&cf[8])
    return v3;
  v5 = (unint64_t *)(*(_QWORD *)&cf[8] + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 - 1, v5));
LABEL_33:
  if (v6)
    return v3;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v3;
}

void sub_223251848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_223251898(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v1 = result;
  if (*(_BYTE *)(result + 16))
  {
    v2 = *(std::__shared_weak_count **)(result + 8);
    if (!v2)
      return result;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (v4)
      return result;
LABEL_11:
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    return v1;
  }
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    v5 = (unint64_t *)&v2->__shared_owners_;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
      goto LABEL_11;
  }
  return result;
}

uint64_t CV3DReconFrameBundleRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 1832);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DReconFrameBundleRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 1832);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CV3DReconFrameBundleSetDepthImage(uint64_t a1, std::__shared_weak_count_vtbl *a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  char __p[21];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
    return sub_2232B3894(a1, a2, a3);
  v12 = 20;
  strcpy(__p, "Frame bundle is NULL");
  v5 = (char *)operator new(0x70uLL);
  v10 = v5;
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconFrameBundle.cpp");
  if (a3)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v6;
    v7 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v5 = v10;
  }
  operator delete(v5);
  if (v12 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_223251AF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconFrameBundleSetDepthConfidenceImage(uint64_t a1, std::__shared_weak_count_vtbl *a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  char __p[21];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
    return sub_2232B4644(a1, a2, a3);
  v12 = 20;
  strcpy(__p, "Frame bundle is NULL");
  v5 = (char *)operator new(0x70uLL);
  v10 = v5;
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconFrameBundle.cpp");
  if (a3)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v6;
    v7 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v5 = v10;
  }
  operator delete(v5);
  if (v12 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_223251CB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconFrameBundleSetDepthUncertaintyImage(uint64_t a1, std::__shared_weak_count_vtbl *a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  char __p[21];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
    return sub_2232B501C(a1, a2, a3);
  v12 = 20;
  strcpy(__p, "Frame bundle is NULL");
  v5 = (char *)operator new(0x70uLL);
  v10 = v5;
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconFrameBundle.cpp");
  if (a3)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v6;
    v7 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v5 = v10;
  }
  operator delete(v5);
  if (v12 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_223251E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconFrameBundleSetActiveDepthFoVMask(_QWORD *a1, std::__shared_weak_count_vtbl *a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  char __p[21];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
    return sub_2232B60D8(a1, a2, a3);
  v12 = 20;
  strcpy(__p, "Frame bundle is NULL");
  v5 = (char *)operator new(0x70uLL);
  v10 = v5;
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconFrameBundle.cpp");
  if (a3)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v6;
    v7 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v5 = v10;
  }
  operator delete(v5);
  if (v12 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_223252034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconFrameBundleClearSlamMetadata(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v10;
  char __p[21];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 1616))
    {
      sub_223255CAC(a1 + 1440);
      *(_BYTE *)(a1 + 1616) = 0;
    }
  }
  else
  {
    v12 = 20;
    strcpy(__p, "Frame bundle is NULL");
    v4 = (char *)operator new(0x70uLL);
    v10 = v4;
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconFrameBundle.cpp");
    if (a2)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v5;
      v6 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      v4 = v10;
    }
    operator delete(v4);
    if (v12 < 0)
      operator delete(*(void **)__p);
  }
  return a1 != 0;
}

void sub_2232521DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconFrameBundleAddJasperBundle(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  char *v18;
  char *v19;
  CFTypeRef v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  CFTypeRef v24;
  unint64_t *v25;
  __int128 *v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  char *v41;
  char __p[22];
  char v43;
  CFTypeRef cf;
  std::__shared_weak_count *v45;
  std::error_condition v46;

  if (!a1)
  {
    v43 = 20;
    strcpy(__p, "Frame bundle is NULL");
    v19 = (char *)operator new(0x70uLL);
    v41 = v19;
    strcpy(v19, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconFrameBundle.cpp");
    if (a3)
    {
      *(_QWORD *)&v46.__val_ = 22;
      v46.__cat_ = std::generic_category();
      sub_2245321DC(&v46, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v20 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v20;
      v21 = v45;
      if (!v45)
        goto LABEL_29;
      p_shared_owners = (unint64_t *)&v45->__shared_owners_;
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      goto LABEL_27;
    }
LABEL_30:
    operator delete(v19);
    if (v43 < 0)
      operator delete(*(void **)__p);
    return 0;
  }
  if (!a2)
  {
    v43 = 21;
    strcpy(__p, "Jasper bundle is NULL");
    v19 = (char *)operator new(0x70uLL);
    v41 = v19;
    strcpy(v19, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconFrameBundle.cpp");
    if (a3)
    {
      *(_QWORD *)&v46.__val_ = 22;
      v46.__cat_ = std::generic_category();
      sub_2245321DC(&v46, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v24 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v24;
      v21 = v45;
      if (!v45)
        goto LABEL_29;
      v25 = (unint64_t *)&v45->__shared_owners_;
      do
        v23 = __ldaxr(v25);
      while (__stlxr(v23 - 1, v25));
LABEL_27:
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
LABEL_29:
      v19 = v41;
      goto LABEL_30;
    }
    goto LABEL_30;
  }
  v5 = *(_QWORD *)(a1 + 1792);
  if (v5 >= *(_QWORD *)(a1 + 1800))
  {
    v18 = sub_223C685C8((void **)(a1 + 1784), a2 + 8);
  }
  else
  {
    *(_QWORD *)v5 = *(_QWORD *)(a2 + 8);
    v6 = *(_OWORD *)(a2 + 16);
    v7 = *(_OWORD *)(a2 + 32);
    v8 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(v5 + 56) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(v5 + 40) = v8;
    *(_OWORD *)(v5 + 24) = v7;
    *(_OWORD *)(v5 + 8) = v6;
    *(_QWORD *)(v5 + 72) = *(_QWORD *)(a2 + 80);
    v9 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(v5 + 80) = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    *(_BYTE *)(v5 + 88) = 0;
    *(_BYTE *)(v5 + 216) = 0;
    if (*(_BYTE *)(a2 + 224))
    {
      v12 = *(_OWORD *)(a2 + 96);
      v13 = *(_OWORD *)(a2 + 112);
      v14 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(v5 + 120) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(v5 + 136) = v14;
      *(_OWORD *)(v5 + 88) = v12;
      *(_OWORD *)(v5 + 104) = v13;
      v15 = *(_OWORD *)(a2 + 160);
      v16 = *(_OWORD *)(a2 + 176);
      v17 = *(_OWORD *)(a2 + 192);
      *(_OWORD *)(v5 + 200) = *(_OWORD *)(a2 + 208);
      *(_OWORD *)(v5 + 184) = v17;
      *(_OWORD *)(v5 + 168) = v16;
      *(_OWORD *)(v5 + 152) = v15;
      *(_BYTE *)(v5 + 216) = 1;
    }
    v18 = (char *)(v5 + 224);
  }
  *(_QWORD *)(a1 + 1792) = v18;
  v27 = (__int128 *)(a1 + 1624);
  v28 = v18 - 136;
  if (*(v18 - 8) == *(_BYTE *)(a1 + 1752))
  {
    if (*(v18 - 8))
    {
      v29 = *v27;
      v30 = *(_OWORD *)(a1 + 1640);
      v31 = *(_OWORD *)(a1 + 1672);
      *(_OWORD *)(v18 - 104) = *(_OWORD *)(a1 + 1656);
      *(_OWORD *)(v18 - 88) = v31;
      *(_OWORD *)v28 = v29;
      *(_OWORD *)(v18 - 120) = v30;
      v32 = *(_OWORD *)(a1 + 1688);
      v33 = *(_OWORD *)(a1 + 1704);
      v34 = *(_OWORD *)(a1 + 1720);
      *(_OWORD *)(v18 - 24) = *(_OWORD *)(a1 + 1736);
      *(_OWORD *)(v18 - 40) = v34;
      *(_OWORD *)(v18 - 56) = v33;
      *(_OWORD *)(v18 - 72) = v32;
    }
    return 1;
  }
  if (*(v18 - 8))
  {
    *(v18 - 8) = 0;
    return 1;
  }
  v35 = *v27;
  v36 = *(_OWORD *)(a1 + 1640);
  v37 = *(_OWORD *)(a1 + 1672);
  *(_OWORD *)(v18 - 104) = *(_OWORD *)(a1 + 1656);
  *(_OWORD *)(v18 - 88) = v37;
  *(_OWORD *)v28 = v35;
  *(_OWORD *)(v18 - 120) = v36;
  v38 = *(_OWORD *)(a1 + 1688);
  v39 = *(_OWORD *)(a1 + 1704);
  v40 = *(_OWORD *)(a1 + 1720);
  *(_OWORD *)(v18 - 24) = *(_OWORD *)(a1 + 1736);
  *(_OWORD *)(v18 - 40) = v40;
  *(_OWORD *)(v18 - 56) = v39;
  *(_OWORD *)(v18 - 72) = v38;
  *(v18 - 8) = 1;
  return 1;
}

void sub_2232525C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconFrameBundleSetNormalsImage(uint64_t a1, std::__shared_weak_count_vtbl *a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  char __p[21];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
    return sub_2232B6890(a1, a2, a3);
  v12 = 20;
  strcpy(__p, "Frame bundle is NULL");
  v5 = (char *)operator new(0x70uLL);
  v10 = v5;
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconFrameBundle.cpp");
  if (a3)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v6;
    v7 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v5 = v10;
  }
  operator delete(v5);
  if (v12 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_223252790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconFrameBundleSetSemanticsImage(uint64_t a1, std::__shared_weak_count_vtbl *a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  char __p[21];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
    return sub_2232B70B8(a1, a2, a3);
  v12 = 20;
  strcpy(__p, "Frame bundle is NULL");
  v5 = (char *)operator new(0x70uLL);
  v10 = v5;
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconFrameBundle.cpp");
  if (a3)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v6;
    v7 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v5 = v10;
  }
  operator delete(v5);
  if (v12 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_223252950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconFrameBundleSetSemanticsConfidenceImage(uint64_t a1, std::__shared_weak_count_vtbl *a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  char __p[21];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
    return sub_2232B76F8(a1, a2, a3);
  v12 = 20;
  strcpy(__p, "Frame bundle is NULL");
  v5 = (char *)operator new(0x70uLL);
  v10 = v5;
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconFrameBundle.cpp");
  if (a3)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v6;
    v7 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v5 = v10;
  }
  operator delete(v5);
  if (v12 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_223252B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconFrameBundleSetColorImage(uint64_t a1, std::__shared_weak_count_vtbl *a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  char __p[21];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
    return sub_2232B7EA8(a1, a2, a3);
  v12 = 20;
  strcpy(__p, "Frame bundle is NULL");
  v5 = (char *)operator new(0x70uLL);
  v10 = v5;
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconFrameBundle.cpp");
  if (a3)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v6;
    v7 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v5 = v10;
  }
  operator delete(v5);
  if (v12 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_223252CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconFrameBundleSetCameraMetadata(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  std::__shared_weak_count *v5;
  char *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  CFTypeRef v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  CFTypeRef v21;
  unint64_t *v22;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  char *v34;
  __int128 v35;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v38;
  std::error_condition v39;

  if (a1)
  {
    if (a2)
    {
      sub_22319EE1C(__p, a2);
      v6 = (char *)__p[0];
      v5 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v7 = (unint64_t *)((char *)__p[1] + 8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
        v9 = (std::__shared_weak_count *)__p[1];
        if (__p[1])
        {
          v10 = (unint64_t *)((char *)__p[1] + 8);
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 - 1, v10));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        do
          v12 = __ldxr(v7);
        while (__stxr(v12 + 1, v7));
        v34 = v6;
        *(_QWORD *)&v35 = v5;
        do
          v13 = __ldxr(v7);
        while (__stxr(v13 + 1, v7));
        do
          v14 = __ldaxr(v7);
        while (__stlxr(v14 - 1, v7));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        do
          v15 = __ldaxr(v7);
        while (__stlxr(v15 - 1, v7));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      else
      {
        v34 = (char *)__p[0];
        *(_QWORD *)&v35 = 0;
      }
      sub_2231DD328(__p, (uint64_t)&v34);
      v24 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      v25 = *(std::__shared_weak_count **)(a1 + 528);
      *(_OWORD *)(a1 + 520) = v24;
      if (v25)
      {
        p_shared_owners = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldaxr(p_shared_owners);
        while (__stlxr(v27 - 1, p_shared_owners));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      v28 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v29 = (unint64_t *)((char *)__p[1] + 8);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      v31 = (std::__shared_weak_count *)v35;
      if ((_QWORD)v35)
      {
        v32 = (unint64_t *)(v35 + 8);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      return 1;
    }
    __p[0] = operator new(0x19uLL);
    *(_OWORD *)&__p[1] = xmmword_2245B9430;
    strcpy((char *)__p[0], "Camera metadata is null");
    v16 = (char *)operator new(0x70uLL);
    v34 = v16;
    v35 = xmmword_2245B8D30;
    strcpy(v16, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconFrameBundle.cpp");
    if (!a3)
      goto LABEL_40;
    *(_QWORD *)&v39.__val_ = 22;
    v39.__cat_ = std::generic_category();
    sub_2245321DC(&v39, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v21 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v21;
    v18 = v38;
    if (!v38)
      goto LABEL_38;
    v22 = (unint64_t *)&v38->__shared_owners_;
    do
      v20 = __ldaxr(v22);
    while (__stlxr(v20 - 1, v22));
  }
  else
  {
    HIBYTE(__p[2]) = 20;
    strcpy((char *)__p, "Frame bundle is NULL");
    v16 = (char *)operator new(0x70uLL);
    v34 = v16;
    v35 = xmmword_2245B8D30;
    strcpy(v16, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconFrameBundle.cpp");
    if (!a3)
    {
LABEL_40:
      operator delete(v16);
      goto LABEL_41;
    }
    *(_QWORD *)&v39.__val_ = 22;
    v39.__cat_ = std::generic_category();
    sub_2245321DC(&v39, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v17 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v17;
    v18 = v38;
    if (!v38)
      goto LABEL_38;
    v19 = (unint64_t *)&v38->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
  }
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if ((SHIBYTE(v35) & 0x80000000) == 0)
      goto LABEL_41;
    goto LABEL_39;
  }
LABEL_38:
  if (SHIBYTE(v35) < 0)
  {
LABEL_39:
    v16 = v34;
    goto LABEL_40;
  }
LABEL_41:
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_22325311C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

BOOL CV3DReconFrameBundleSetLuxLevel(uint64_t a1, int a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v11;
  char __p[21];
  char v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a1)
  {
    *(_DWORD *)(a1 + 456) = a2;
    *(_BYTE *)(a1 + 460) = 1;
  }
  else
  {
    v13 = 20;
    strcpy(__p, "Frame bundle is NULL");
    v5 = (char *)operator new(0x70uLL);
    v11 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconFrameBundle.cpp");
    if (a3)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_2245321DC(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v5 = v11;
    }
    operator delete(v5);
    if (v13 < 0)
      operator delete(*(void **)__p);
  }
  return a1 != 0;
}

void sub_2232532DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconFrameBundleSetClippingPointLux(uint64_t a1, CFTypeRef *a2, float a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  char __p[21];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
    return sub_2232B8560(a1, a2, a3);
  v12 = 20;
  strcpy(__p, "Frame bundle is NULL");
  v5 = (char *)operator new(0x70uLL);
  v10 = v5;
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconFrameBundle.cpp");
  if (a2)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v6;
    v7 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v5 = v10;
  }
  operator delete(v5);
  if (v12 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_22325349C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconFrameBundleSetICTMGlobalLUT(uint64_t a1, const void *a2, unsigned int a3, CFTypeRef *a4)
{
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char __p[21];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
    return sub_2232B8728(a1, a2, a3, a4);
  v12 = 20;
  strcpy(__p, "Frame bundle is NULL");
  v6 = (char *)operator new(0x70uLL);
  strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconFrameBundle.cpp");
  if (a4)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a4)
      CFRelease(*a4);
    *a4 = 0;
    v7 = cf;
    if (cf)
      CFRetain(cf);
    *a4 = v7;
    v8 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  operator delete(v6);
  if (v12 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_22325365C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconFrameBundleSetGTCMode(uint64_t a1, int a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v11;
  char __p[21];
  char v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a1)
  {
    *(_DWORD *)(a1 + 504) = a2;
    *(_BYTE *)(a1 + 508) = 1;
  }
  else
  {
    v13 = 20;
    strcpy(__p, "Frame bundle is NULL");
    v5 = (char *)operator new(0x70uLL);
    v11 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconFrameBundle.cpp");
    if (a3)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_2245321DC(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v5 = v11;
    }
    operator delete(v5);
    if (v13 < 0)
      operator delete(*(void **)__p);
  }
  return a1 != 0;
}

void sub_2232537FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconFrameBundleSetDGain(uint64_t a1, int a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v11;
  char __p[21];
  char v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a1)
  {
    *(_DWORD *)(a1 + 512) = a2;
    *(_BYTE *)(a1 + 516) = 1;
  }
  else
  {
    v13 = 20;
    strcpy(__p, "Frame bundle is NULL");
    v5 = (char *)operator new(0x70uLL);
    v11 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconFrameBundle.cpp");
    if (a3)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_2245321DC(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v5 = v11;
    }
    operator delete(v5);
    if (v13 < 0)
      operator delete(*(void **)__p);
  }
  return a1 != 0;
}

void sub_22325399C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconFrameBundleSetAWBICAM(uint64_t a1, CFTypeRef *a2, __n128 a3, int8x16_t a4, int8x16_t a5)
{
  int v6;
  char *v8;
  CFTypeRef v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v14;
  char __p[21];
  char v16;
  CFTypeRef cf;
  std::__shared_weak_count *v18;
  std::error_condition v19;

  if (a1)
  {
    v6 = *(unsigned __int8 *)(a1 + 572);
    a3.n128_u32[3] = a4.i32[0];
    *(__n128 *)(a1 + 536) = a3;
    *(int8x16_t *)(a1 + 552) = vextq_s8(vextq_s8(a4, a4, 0xCuLL), a5, 8uLL);
    *(_DWORD *)(a1 + 568) = a5.i32[2];
    if (!v6)
      *(_BYTE *)(a1 + 572) = 1;
  }
  else
  {
    v16 = 20;
    strcpy(__p, "Frame bundle is NULL");
    v8 = (char *)operator new(0x70uLL);
    v14 = v8;
    strcpy(v8, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconFrameBundle.cpp");
    if (a2)
    {
      *(_QWORD *)&v19.__val_ = 22;
      v19.__cat_ = std::generic_category();
      sub_2245321DC(&v19, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v9 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v9;
      v10 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v8 = v14;
    }
    operator delete(v8);
    if (v16 < 0)
      operator delete(*(void **)__p);
  }
  return a1 != 0;
}

void sub_223253B5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconFrameBundleSetMaterialsImage(uint64_t a1, std::__shared_weak_count_vtbl *a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  char __p[21];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
    return sub_2232B893C(a1, a2, a3);
  v12 = 20;
  strcpy(__p, "Frame bundle is NULL");
  v5 = (char *)operator new(0x70uLL);
  v10 = v5;
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconFrameBundle.cpp");
  if (a3)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v6;
    v7 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v5 = v10;
  }
  operator delete(v5);
  if (v12 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_223253D1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconFrameBundleSetSceneTypeImage(uint64_t a1, std::__shared_weak_count_vtbl *a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  char __p[21];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
    return sub_2232B8DD8(a1, a2, a3);
  v12 = 20;
  strcpy(__p, "Frame bundle is NULL");
  v5 = (char *)operator new(0x70uLL);
  v10 = v5;
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconFrameBundle.cpp");
  if (a3)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v6;
    v7 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v5 = v10;
  }
  operator delete(v5);
  if (v12 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_223253EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconFrameBundleSetSceneTypeProbabilityImage(uint64_t a1, std::__shared_weak_count_vtbl *a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  char __p[21];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
    return sub_2232B9EE4(a1, a2, a3);
  v12 = 20;
  strcpy(__p, "Frame bundle is NULL");
  v5 = (char *)operator new(0x70uLL);
  v10 = v5;
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconFrameBundle.cpp");
  if (a3)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v6;
    v7 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v5 = v10;
  }
  operator delete(v5);
  if (v12 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_22325409C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconFrameBundleSetSceneTypeIndoorOutdoorLabel(uint64_t a1, char a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v11;
  char __p[21];
  char v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a1)
  {
    *(_BYTE *)(a1 + 1224) = a2;
  }
  else
  {
    v13 = 20;
    strcpy(__p, "Frame bundle is NULL");
    v5 = (char *)operator new(0x70uLL);
    v11 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconFrameBundle.cpp");
    if (a3)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_2245321DC(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v5 = v11;
    }
    operator delete(v5);
    if (v13 < 0)
      operator delete(*(void **)__p);
  }
  return a1 != 0;
}

void sub_223254234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconFrameBundleSetSceneTypeIndoorOutdoorProbability(_DWORD *a1, _DWORD *a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  char __p[21];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
    return sub_2232BABE0(a1, a2, a3);
  v12 = 20;
  strcpy(__p, "Frame bundle is NULL");
  v5 = (char *)operator new(0x70uLL);
  v10 = v5;
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconFrameBundle.cpp");
  if (a3)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v6;
    v7 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v5 = v10;
  }
  operator delete(v5);
  if (v12 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_2232543F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconFrameBundleSetMonitoringMode(uint64_t a1, char __val, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  void *v14;
  const std::error_category *v15;
  CFErrorRef v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *v20;
  CFTypeRef cf;
  __int128 v22;
  std::string v23;
  std::string v24;
  void *__p[4];
  CFErrorRef v26;
  std::__shared_weak_count *v27;
  std::error_condition v28;

  if (a1)
  {
    if ((__val - 1) < 2u)
      return sub_2232BADB0(a1, __val, a3);
    std::to_string(&v23, __val);
    v10 = std::string::insert(&v23, 0, "Monitoring mode ", 0x10uLL);
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v12 = std::string::append(&v24, " not known", 0xAuLL);
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    __p[2] = (void *)v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = operator new(0x70uLL);
    cf = v14;
    v22 = xmmword_2245B8D30;
    strcpy((char *)v14, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconFrameBundle.cpp");
    if (a3)
    {
      v15 = std::generic_category();
      *(_QWORD *)&v28.__val_ = 33;
      v28.__cat_ = v15;
      sub_2245321DC(&v28, (uint64_t)__p, &v26);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v16 = v26;
      if (v26)
        CFRetain(v26);
      *a3 = v16;
      v17 = v27;
      if (v27)
      {
        p_shared_owners = (unint64_t *)&v27->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      if ((SHIBYTE(v22) & 0x80000000) == 0)
      {
        if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
          goto LABEL_31;
        goto LABEL_37;
      }
      v14 = (void *)cf;
    }
    operator delete(v14);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
    {
LABEL_31:
      if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_32;
      goto LABEL_38;
    }
LABEL_37:
    operator delete(__p[0]);
    if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_32:
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_39;
      return 0;
    }
LABEL_38:
    operator delete(v24.__r_.__value_.__l.__data_);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_39:
      v20 = (void *)v23.__r_.__value_.__r.__words[0];
      goto LABEL_40;
    }
    return 0;
  }
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "Frame bundle is NULL");
  v5 = (char *)operator new(0x70uLL);
  v24.__r_.__value_.__r.__words[0] = (std::string::size_type)v5;
  *(_OWORD *)&v24.__r_.__value_.__r.__words[1] = xmmword_2245B8D30;
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconFrameBundle.cpp");
  if (!a3)
    goto LABEL_16;
  v23.__r_.__value_.__r.__words[0] = 22;
  v23.__r_.__value_.__l.__size_ = (std::string::size_type)std::generic_category();
  sub_2245321DC((const std::error_condition *)&v23, (uint64_t)__p, (CFErrorRef *)&cf);
  if (*a3)
    CFRelease(*a3);
  *a3 = 0;
  v6 = cf;
  if (cf)
    CFRetain(cf);
  *a3 = v6;
  v7 = (std::__shared_weak_count *)v22;
  if ((_QWORD)v22)
  {
    v8 = (unint64_t *)(v22 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
  {
    v5 = (char *)v24.__r_.__value_.__r.__words[0];
LABEL_16:
    operator delete(v5);
  }
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
    return 0;
  v20 = __p[0];
LABEL_40:
  operator delete(v20);
  return 0;
}

void sub_223254750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;

  operator delete(v30);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a23 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(a1);
LABEL_7:
      operator delete(a12);
      goto LABEL_8;
    }
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a18);
  if ((a17 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

uint64_t CV3DReconFrameBundleAddSlamMetadata(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  int v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t result;
  char *v13;
  CFTypeRef v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  char *v18;
  CFTypeRef v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  char v24;
  char __p[22];
  char v26;
  CFTypeRef cf;
  std::__shared_weak_count *v28;
  std::error_condition v29;

  if (!a1)
  {
    v26 = 20;
    strcpy(__p, "Frame bundle is NULL");
    v13 = (char *)operator new(0x70uLL);
    strcpy(v13, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconFrameBundle.cpp");
    if (a3)
    {
      *(_QWORD *)&v29.__val_ = 22;
      v29.__cat_ = std::generic_category();
      sub_2245321DC(&v29, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v14 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v14;
      v15 = v28;
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
    operator delete(v13);
    if ((v26 & 0x80000000) == 0)
      return 0;
    goto LABEL_39;
  }
  if (!a2)
  {
    v26 = 21;
    strcpy(__p, "SLAM metadata is NULL");
    v18 = (char *)operator new(0x70uLL);
    strcpy(v18, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconFrameBundle.cpp");
    if (a3)
    {
      *(_QWORD *)&v29.__val_ = 22;
      v29.__cat_ = std::generic_category();
      sub_2245321DC(&v29, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v19 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v19;
      v20 = v28;
      if (v28)
      {
        v21 = (unint64_t *)&v28->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
    }
    operator delete(v18);
    if ((v26 & 0x80000000) == 0)
      return 0;
LABEL_39:
    operator delete(*(void **)__p);
    return 0;
  }
  v6 = *(unsigned __int8 *)(a1 + 1616);
  v7 = (_QWORD *)(a1 + 1440);
  if (v6)
  {
    sub_223C285F0((uint64_t)v7, a2 + 32);
    v8 = *(_QWORD *)(a1 + 1424);
    if (v8 <= *(_QWORD *)(a2 + 16))
      v8 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 1424) = v8;
    *(_BYTE *)(a1 + 1416) &= *(_BYTE *)(a2 + 8);
    *(_BYTE *)(a1 + 1417) &= *(_BYTE *)(a2 + 9);
    *(_BYTE *)(a1 + 1418) &= *(_BYTE *)(a2 + 10);
    v9 = *(_DWORD *)(a1 + 1420);
    if (v9 <= *(_DWORD *)(a2 + 12))
      v9 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a1 + 1420) = v9;
    v10 = *(_DWORD *)(a1 + 1432);
    if (v10 <= *(_DWORD *)(a2 + 24))
      v10 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 1432) = v10;
    v11 = *(unsigned __int8 *)(a1 + 1608);
    if (v11 <= *(unsigned __int8 *)(a2 + 200))
      LOBYTE(v11) = *(_BYTE *)(a2 + 200);
    *(_BYTE *)(a1 + 1608) = v11;
    return 1;
  }
  else
  {
    v23 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 1432) = *(_DWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 1416) = v23;
    sub_223258368(v7, a2 + 32);
    v24 = *(_BYTE *)(a2 + 200);
    result = 1;
    *(_BYTE *)(a1 + 1616) = 1;
    *(_BYTE *)(a1 + 1608) = v24;
  }
  return result;
}

void sub_223254BA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconFrameBundleSetIsDeviceWorn(uint64_t a1, __int16 a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v11;
  char __p[21];
  char v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a1)
  {
    *(_WORD *)(a1 + 1808) = a2 | 0x100;
  }
  else
  {
    v13 = 20;
    strcpy(__p, "Frame bundle is NULL");
    v5 = (char *)operator new(0x70uLL);
    v11 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconFrameBundle.cpp");
    if (a3)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_2245321DC(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v5 = v11;
    }
    operator delete(v5);
    if (v13 < 0)
      operator delete(*(void **)__p);
  }
  return a1 != 0;
}

void sub_223254D4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconFrameBundleSetAnalyticsMetadata(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  std::__shared_weak_count *v5;
  char *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  CFTypeRef v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  CFTypeRef v21;
  unint64_t *v22;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  char *v39;
  __int128 v40;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v43;
  std::error_condition v44;

  if (a1)
  {
    if (a2)
    {
      sub_22319EE1C(__p, a2);
      v6 = (char *)__p[0];
      v5 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v7 = (unint64_t *)((char *)__p[1] + 8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
        v9 = (std::__shared_weak_count *)__p[1];
        if (__p[1])
        {
          v10 = (unint64_t *)((char *)__p[1] + 8);
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 - 1, v10));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        do
          v12 = __ldxr(v7);
        while (__stxr(v12 + 1, v7));
        v39 = v6;
        *(_QWORD *)&v40 = v5;
        do
          v13 = __ldxr(v7);
        while (__stxr(v13 + 1, v7));
        do
          v14 = __ldaxr(v7);
        while (__stlxr(v14 - 1, v7));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        do
          v15 = __ldaxr(v7);
        while (__stlxr(v15 - 1, v7));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      else
      {
        v39 = (char *)__p[0];
        *(_QWORD *)&v40 = 0;
      }
      sub_22319ED0C(&v37, (uint64_t)&v39);
      sub_2231DD328(__p, (uint64_t)&v37);
      v24 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      v25 = *(std::__shared_weak_count **)(a1 + 1824);
      *(_OWORD *)(a1 + 1816) = v24;
      if (v25)
      {
        p_shared_owners = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldaxr(p_shared_owners);
        while (__stlxr(v27 - 1, p_shared_owners));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      v28 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v29 = (unint64_t *)((char *)__p[1] + 8);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      v31 = v38;
      if (v38)
      {
        v32 = (unint64_t *)&v38->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      v34 = (std::__shared_weak_count *)v40;
      if ((_QWORD)v40)
      {
        v35 = (unint64_t *)(v40 + 8);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      return 1;
    }
    __p[0] = operator new(0x20uLL);
    *(_OWORD *)&__p[1] = xmmword_2245B8D70;
    strcpy((char *)__p[0], "Analytics metadata is null");
    v16 = (char *)operator new(0x70uLL);
    v39 = v16;
    v40 = xmmword_2245B8D30;
    strcpy(v16, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconFrameBundle.cpp");
    if (!a3)
      goto LABEL_40;
    *(_QWORD *)&v44.__val_ = 22;
    v44.__cat_ = std::generic_category();
    sub_2245321DC(&v44, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v21 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v21;
    v18 = v43;
    if (!v43)
      goto LABEL_38;
    v22 = (unint64_t *)&v43->__shared_owners_;
    do
      v20 = __ldaxr(v22);
    while (__stlxr(v20 - 1, v22));
  }
  else
  {
    HIBYTE(__p[2]) = 20;
    strcpy((char *)__p, "Frame bundle is NULL");
    v16 = (char *)operator new(0x70uLL);
    v39 = v16;
    v40 = xmmword_2245B8D30;
    strcpy(v16, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconFrameBundle.cpp");
    if (!a3)
    {
LABEL_40:
      operator delete(v16);
      goto LABEL_41;
    }
    *(_QWORD *)&v44.__val_ = 22;
    v44.__cat_ = std::generic_category();
    sub_2245321DC(&v44, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v17 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v17;
    v18 = v43;
    if (!v43)
      goto LABEL_38;
    v19 = (unint64_t *)&v43->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
  }
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if ((SHIBYTE(v40) & 0x80000000) == 0)
      goto LABEL_41;
    goto LABEL_39;
  }
LABEL_38:
  if (SHIBYTE(v40) < 0)
  {
LABEL_39:
    v16 = v39;
    goto LABEL_40;
  }
LABEL_41:
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_2232551DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  void *v22;

  operator delete(v22);
  if (a20 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t CV3DReconFrameBundleGetImageWidth(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  char __p[21];
  char v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return *(unsigned int *)(a1 + 1336);
  v11 = 20;
  strcpy(__p, "Frame bundle is NULL");
  v4 = (char *)operator new(0x70uLL);
  v9 = v4;
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconFrameBundle.cpp");
  if (a2)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v4 = v9;
  }
  operator delete(v4);
  if (v11 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_2232553C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconFrameBundleGetImageHeight(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  char __p[21];
  char v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return *(unsigned int *)(a1 + 1340);
  v11 = 20;
  strcpy(__p, "Frame bundle is NULL");
  v4 = (char *)operator new(0x70uLL);
  v9 = v4;
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconFrameBundle.cpp");
  if (a2)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v4 = v9;
  }
  operator delete(v4);
  if (v11 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_22325557C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_2232555B8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  void *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;

  v2 = *(std::__shared_weak_count **)(a1 + 1816);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(char **)(a1 + 1776);
    if (!v5)
      goto LABEL_16;
  }
  else
  {
LABEL_5:
    v5 = *(char **)(a1 + 1776);
    if (!v5)
      goto LABEL_16;
  }
  v6 = *(char **)(a1 + 1784);
  v7 = v5;
  if (v6 != v5)
  {
    do
    {
      v8 = (std::__shared_weak_count *)*((_QWORD *)v6 - 18);
      if (v8)
      {
        v9 = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v6 -= 224;
    }
    while (v6 != v5);
    v7 = *(char **)(a1 + 1776);
  }
  *(_QWORD *)(a1 + 1784) = v5;
  operator delete(v7);
LABEL_16:
  *(_QWORD *)(a1 + 1752) = &off_24EC715B8;
  v11 = *(std::__shared_weak_count **)(a1 + 1768);
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (!*(_BYTE *)(a1 + 1608))
        goto LABEL_22;
      goto LABEL_21;
    }
  }
  if (*(_BYTE *)(a1 + 1608))
LABEL_21:
    sub_223255CAC(a1 + 1432);
LABEL_22:
  *(_QWORD *)(a1 + 1240) = &off_24EC20828;
  if (*(_BYTE *)(a1 + 1208))
  {
    *(_QWORD *)(a1 + 1128) = &off_24EC26EB0;
    v14 = *(std::__shared_weak_count **)(a1 + 1144);
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  if (*(_BYTE *)(a1 + 1120))
  {
    *(_QWORD *)(a1 + 1040) = &off_24EC27290;
    v17 = *(std::__shared_weak_count **)(a1 + 1056);
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  if (*(_BYTE *)(a1 + 1032))
  {
    *(_QWORD *)(a1 + 976) = &off_24EC270A0;
    v20 = *(std::__shared_weak_count **)(a1 + 992);
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  sub_223256254(a1 + 568);
  v23 = *(std::__shared_weak_count **)(a1 + 520);
  if (!v23)
    goto LABEL_44;
  v24 = (unint64_t *)&v23->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    if (!*(_BYTE *)(a1 + 488))
      goto LABEL_47;
  }
  else
  {
LABEL_44:
    if (!*(_BYTE *)(a1 + 488))
      goto LABEL_47;
  }
  v26 = *(void **)(a1 + 464);
  if (v26)
  {
    *(_QWORD *)(a1 + 472) = v26;
    operator delete(v26);
  }
LABEL_47:
  if (*(_BYTE *)(a1 + 440))
  {
    *(_QWORD *)(a1 + 360) = &off_24EC26EB0;
    v27 = *(std::__shared_weak_count **)(a1 + 376);
    if (v27)
    {
      v28 = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
  if (*(_BYTE *)(a1 + 352))
  {
    *(_QWORD *)(a1 + 296) = &off_24EC21328;
    v30 = *(std::__shared_weak_count **)(a1 + 312);
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
  }
  if (!*(_BYTE *)(a1 + 288))
    return sub_2232565CC(a1);
  *(_QWORD *)(a1 + 232) = &off_24EC270A0;
  v33 = *(std::__shared_weak_count **)(a1 + 248);
  if (!v33)
    return sub_2232565CC(a1);
  v34 = (unint64_t *)&v33->__shared_owners_;
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (v35)
    return sub_2232565CC(a1);
  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
  std::__shared_weak_count::__release_weak(v33);
  return sub_2232565CC(a1);
}

void **sub_223255930(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 18);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 224;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_2232559C8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  if (*(_BYTE *)(a1 + 168))
  {
    *(_QWORD *)(a1 + 88) = &off_24EC26EB0;
    v2 = *(std::__shared_weak_count **)(a1 + 104);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  if (!*(_BYTE *)(a1 + 80))
    return a1;
  *(_QWORD *)a1 = &off_24EC27290;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t sub_223255A90(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  if (*(_BYTE *)(result + 56))
  {
    *(_QWORD *)result = &off_24EC270A0;
    v2 = *(std::__shared_weak_count **)(result + 16);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        return v1;
      }
    }
  }
  return result;
}

uint64_t sub_223255B0C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 160);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (!*(_BYTE *)(a1 + 128))
      goto LABEL_8;
  }
  else
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 128))
      goto LABEL_8;
  }
  v5 = *(void **)(a1 + 104);
  if (v5)
  {
    *(_QWORD *)(a1 + 112) = v5;
    operator delete(v5);
  }
LABEL_8:
  if (!*(_BYTE *)(a1 + 80))
    return a1;
  *(_QWORD *)a1 = &off_24EC26EB0;
  v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v6)
    return a1;
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    return a1;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return a1;
}

uint64_t sub_223255BE4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  if (*(_BYTE *)(a1 + 120))
  {
    *(_QWORD *)(a1 + 64) = &off_24EC21328;
    v2 = *(std::__shared_weak_count **)(a1 + 80);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  if (!*(_BYTE *)(a1 + 56))
    return a1;
  *(_QWORD *)a1 = &off_24EC270A0;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t sub_223255CAC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = *(void **)(a1 + 144);
  if (v2)
  {
    *(_QWORD *)(a1 + 152) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 120);
  if (v3)
  {
    *(_QWORD *)(a1 + 128) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(_QWORD *)(a1 + 104) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 72);
  if (v5)
  {
    *(_QWORD *)(a1 + 80) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 48);
  if (v6)
  {
    *(_QWORD *)(a1 + 56) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 24);
  if (v7)
  {
    *(_QWORD *)(a1 + 32) = v7;
    operator delete(v7);
  }
  v8 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v8;
    operator delete(v8);
  }
  return a1;
}

uint64_t sub_223255D3C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  if (*(_BYTE *)(result + 80))
  {
    *(_QWORD *)result = &off_24EC26EB0;
    v2 = *(std::__shared_weak_count **)(result + 16);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        return v1;
      }
    }
  }
  return result;
}

_QWORD *sub_223255DB8(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24EC26EB0;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_223255E2C(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24EC26EB0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223255EA0()
{
  return 32;
}

uint64_t sub_223255EA8(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_223255EB0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_223255EC8(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

_QWORD *sub_223255F44(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24EC27290;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_223255FB8(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24EC27290;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22325602C()
{
  return 25;
}

uint64_t sub_223256034(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_22325603C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_223256050(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

_QWORD *sub_2232560CC(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24EC270A0;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_223256140(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24EC270A0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2232561B4()
{
  return 1;
}

uint64_t sub_2232561BC(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_2232561C4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 44);
  return result;
}

uint64_t sub_2232561D8(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t sub_223256254(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  if (*(_BYTE *)(a1 + 400))
  {
    *(_QWORD *)(a1 + 320) = &off_24EC21518;
    v2 = *(std::__shared_weak_count **)(a1 + 336);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  if (*(_BYTE *)(a1 + 312))
  {
    *(_QWORD *)(a1 + 232) = &off_24EC21518;
    v5 = *(std::__shared_weak_count **)(a1 + 248);
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  if (*(_BYTE *)(a1 + 224))
  {
    *(_QWORD *)(a1 + 144) = &off_24EC21518;
    v8 = *(std::__shared_weak_count **)(a1 + 160);
    if (v8)
    {
      v9 = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (!v11)
    goto LABEL_23;
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (!*(_BYTE *)(a1 + 120))
      goto LABEL_30;
  }
  else
  {
LABEL_23:
    if (!*(_BYTE *)(a1 + 120))
      goto LABEL_30;
  }
  *(_QWORD *)(a1 + 64) = &off_24EC27198;
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
LABEL_30:
  if (!*(_BYTE *)(a1 + 56))
    return a1;
  *(_QWORD *)a1 = &off_24EC21328;
  v17 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v17)
    return a1;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

_QWORD *sub_223256440(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24EC27198;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2232564B4(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24EC27198;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223256528()
{
  return 4;
}

uint64_t sub_223256530(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_223256538@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 44);
  return result;
}

uint64_t sub_223256550(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t sub_2232565CC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (!*(_BYTE *)(a1 + 208))
      goto LABEL_12;
  }
  else
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 208))
      goto LABEL_12;
  }
  *(_QWORD *)(a1 + 128) = &off_24EC26FA8;
  v5 = *(std::__shared_weak_count **)(a1 + 144);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
LABEL_12:
  if (*(_BYTE *)(a1 + 120))
  {
    *(_QWORD *)(a1 + 64) = &off_24EC21328;
    v8 = *(std::__shared_weak_count **)(a1 + 80);
    if (v8)
    {
      v9 = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  if (!*(_BYTE *)(a1 + 56))
    return a1;
  *(_QWORD *)a1 = &off_24EC21328;
  v11 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v11)
    return a1;
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (v13)
    return a1;
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  return a1;
}

_QWORD *sub_223256728(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24EC26FA8;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_22325679C(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24EC26FA8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223256810()
{
  return 31;
}

uint64_t sub_223256818(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_223256820@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_223256838(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t sub_2232568B4(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 56) = 0;
  if (*(_BYTE *)(a2 + 56))
  {
    *(_QWORD *)a1 = &off_24EC21328;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 34) = *(_OWORD *)(a2 + 34);
    *(_OWORD *)(a1 + 24) = v4;
    *(_BYTE *)(a1 + 56) = 1;
  }
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  if (*(_BYTE *)(a2 + 120))
  {
    *(_QWORD *)(a1 + 64) = &off_24EC21328;
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_QWORD *)(a2 + 72) = 0;
    *(_QWORD *)(a2 + 80) = 0;
    v5 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 98) = *(_OWORD *)(a2 + 98);
    *(_OWORD *)(a1 + 88) = v5;
    *(_BYTE *)(a1 + 120) = 1;
  }
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  if (*(_BYTE *)(a2 + 208))
  {
    *(_QWORD *)(a1 + 128) = &off_24EC26FA8;
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_QWORD *)(a2 + 136) = 0;
    *(_QWORD *)(a2 + 144) = 0;
    v6 = *(_OWORD *)(a2 + 152);
    v7 = *(_OWORD *)(a2 + 168);
    v8 = *(_OWORD *)(a2 + 184);
    *(_WORD *)(a1 + 200) = *(_WORD *)(a2 + 200);
    *(_OWORD *)(a1 + 184) = v8;
    *(_OWORD *)(a1 + 168) = v7;
    *(_OWORD *)(a1 + 152) = v6;
    *(_BYTE *)(a1 + 208) = 1;
  }
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_QWORD *)(a2 + 216) = 0;
  *(_QWORD *)(a2 + 224) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 288) = 0;
  if (*(_BYTE *)(a2 + 288))
  {
    *(_QWORD *)(a1 + 232) = &off_24EC270A0;
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_QWORD *)(a2 + 240) = 0;
    *(_QWORD *)(a2 + 248) = 0;
    v9 = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 266) = *(_OWORD *)(a2 + 266);
    *(_OWORD *)(a1 + 256) = v9;
    *(_BYTE *)(a1 + 288) = 1;
  }
  *(_BYTE *)(a1 + 296) = 0;
  *(_BYTE *)(a1 + 352) = 0;
  if (*(_BYTE *)(a2 + 352))
  {
    *(_QWORD *)(a1 + 296) = &off_24EC21328;
    *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
    *(_QWORD *)(a2 + 304) = 0;
    *(_QWORD *)(a2 + 312) = 0;
    v10 = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 330) = *(_OWORD *)(a2 + 330);
    *(_OWORD *)(a1 + 320) = v10;
    *(_BYTE *)(a1 + 352) = 1;
  }
  *(_BYTE *)(a1 + 360) = 0;
  *(_BYTE *)(a1 + 440) = 0;
  if (*(_BYTE *)(a2 + 440))
  {
    *(_QWORD *)(a1 + 360) = &off_24EC26EB0;
    *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
    *(_QWORD *)(a2 + 368) = 0;
    *(_QWORD *)(a2 + 376) = 0;
    v11 = *(_OWORD *)(a2 + 384);
    v12 = *(_OWORD *)(a2 + 400);
    v13 = *(_OWORD *)(a2 + 416);
    *(_WORD *)(a1 + 432) = *(_WORD *)(a2 + 432);
    *(_OWORD *)(a1 + 400) = v12;
    *(_OWORD *)(a1 + 416) = v13;
    *(_OWORD *)(a1 + 384) = v11;
    *(_BYTE *)(a1 + 440) = 1;
  }
  v14 = *(_QWORD *)(a2 + 448);
  *(_QWORD *)(a1 + 453) = *(_QWORD *)(a2 + 453);
  *(_QWORD *)(a1 + 448) = v14;
  *(_BYTE *)(a1 + 464) = 0;
  *(_BYTE *)(a1 + 488) = 0;
  if (*(_BYTE *)(a2 + 488))
  {
    *(_QWORD *)(a1 + 464) = 0;
    *(_QWORD *)(a1 + 472) = 0;
    *(_QWORD *)(a1 + 480) = 0;
    *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
    *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
    *(_QWORD *)(a2 + 464) = 0;
    *(_QWORD *)(a2 + 472) = 0;
    *(_QWORD *)(a2 + 480) = 0;
    *(_BYTE *)(a1 + 488) = 1;
  }
  v15 = *(_QWORD *)(a2 + 496);
  *(_QWORD *)(a1 + 501) = *(_QWORD *)(a2 + 501);
  *(_QWORD *)(a1 + 496) = v15;
  *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 + 512);
  *(_QWORD *)(a2 + 520) = 0;
  *(_QWORD *)(a2 + 512) = 0;
  *(_BYTE *)(a1 + 528) = 0;
  *(_BYTE *)(a1 + 564) = 0;
  if (*(_BYTE *)(a2 + 564))
  {
    v16 = *(_OWORD *)(a2 + 528);
    v17 = *(_OWORD *)(a2 + 544);
    *(_DWORD *)(a1 + 560) = *(_DWORD *)(a2 + 560);
    *(_OWORD *)(a1 + 528) = v16;
    *(_OWORD *)(a1 + 544) = v17;
    *(_BYTE *)(a1 + 564) = 1;
  }
  *(_BYTE *)(a1 + 568) = 0;
  *(_BYTE *)(a1 + 624) = 0;
  if (*(_BYTE *)(a2 + 624))
  {
    *(_QWORD *)(a1 + 568) = &off_24EC21328;
    *(_OWORD *)(a1 + 576) = *(_OWORD *)(a2 + 576);
    *(_QWORD *)(a2 + 584) = 0;
    *(_QWORD *)(a2 + 576) = 0;
    v18 = *(_OWORD *)(a2 + 592);
    *(_OWORD *)(a1 + 602) = *(_OWORD *)(a2 + 602);
    *(_OWORD *)(a1 + 592) = v18;
    *(_BYTE *)(a1 + 624) = 1;
  }
  *(_BYTE *)(a1 + 632) = 0;
  *(_BYTE *)(a1 + 688) = 0;
  if (*(_BYTE *)(a2 + 688))
  {
    *(_QWORD *)(a1 + 632) = &off_24EC27198;
    *(_OWORD *)(a1 + 640) = *(_OWORD *)(a2 + 640);
    *(_QWORD *)(a2 + 648) = 0;
    *(_QWORD *)(a2 + 640) = 0;
    v19 = *(_OWORD *)(a2 + 656);
    *(_OWORD *)(a1 + 666) = *(_OWORD *)(a2 + 666);
    *(_OWORD *)(a1 + 656) = v19;
    *(_BYTE *)(a1 + 688) = 1;
  }
  *(_QWORD *)(a1 + 696) = *(_QWORD *)(a2 + 696);
  *(_QWORD *)(a1 + 704) = *(_QWORD *)(a2 + 704);
  *(_QWORD *)(a2 + 704) = 0;
  *(_QWORD *)(a2 + 696) = 0;
  *(_BYTE *)(a1 + 712) = 0;
  *(_BYTE *)(a1 + 792) = 0;
  if (*(_BYTE *)(a2 + 792))
  {
    *(_QWORD *)(a1 + 712) = &off_24EC21518;
    *(_OWORD *)(a1 + 720) = *(_OWORD *)(a2 + 720);
    *(_QWORD *)(a2 + 728) = 0;
    *(_QWORD *)(a2 + 720) = 0;
    v20 = *(_OWORD *)(a2 + 736);
    v21 = *(_OWORD *)(a2 + 752);
    v22 = *(_OWORD *)(a2 + 768);
    *(_WORD *)(a1 + 784) = *(_WORD *)(a2 + 784);
    *(_OWORD *)(a1 + 752) = v21;
    *(_OWORD *)(a1 + 768) = v22;
    *(_OWORD *)(a1 + 736) = v20;
    *(_BYTE *)(a1 + 792) = 1;
  }
  *(_BYTE *)(a1 + 800) = 0;
  *(_BYTE *)(a1 + 880) = 0;
  if (*(_BYTE *)(a2 + 880))
  {
    *(_QWORD *)(a1 + 800) = &off_24EC21518;
    *(_QWORD *)(a1 + 808) = *(_QWORD *)(a2 + 808);
    *(_QWORD *)(a1 + 816) = *(_QWORD *)(a2 + 816);
    *(_QWORD *)(a2 + 816) = 0;
    *(_QWORD *)(a2 + 808) = 0;
    v23 = *(_OWORD *)(a2 + 824);
    v24 = *(_OWORD *)(a2 + 840);
    v25 = *(_OWORD *)(a2 + 856);
    *(_WORD *)(a1 + 872) = *(_WORD *)(a2 + 872);
    *(_OWORD *)(a1 + 840) = v24;
    *(_OWORD *)(a1 + 856) = v25;
    *(_OWORD *)(a1 + 824) = v23;
    *(_BYTE *)(a1 + 880) = 1;
  }
  *(_BYTE *)(a1 + 888) = 0;
  *(_BYTE *)(a1 + 968) = 0;
  if (*(_BYTE *)(a2 + 968))
  {
    *(_QWORD *)(a1 + 888) = &off_24EC21518;
    *(_OWORD *)(a1 + 896) = *(_OWORD *)(a2 + 896);
    *(_QWORD *)(a2 + 904) = 0;
    *(_QWORD *)(a2 + 896) = 0;
    v26 = *(_OWORD *)(a2 + 912);
    v27 = *(_OWORD *)(a2 + 928);
    v28 = *(_OWORD *)(a2 + 944);
    *(_WORD *)(a1 + 960) = *(_WORD *)(a2 + 960);
    *(_OWORD *)(a1 + 928) = v27;
    *(_OWORD *)(a1 + 944) = v28;
    *(_OWORD *)(a1 + 912) = v26;
    *(_BYTE *)(a1 + 968) = 1;
  }
  *(_BYTE *)(a1 + 976) = 0;
  *(_BYTE *)(a1 + 1032) = 0;
  if (*(_BYTE *)(a2 + 1032))
  {
    *(_QWORD *)(a1 + 976) = &off_24EC270A0;
    *(_QWORD *)(a1 + 984) = *(_QWORD *)(a2 + 984);
    *(_QWORD *)(a1 + 992) = *(_QWORD *)(a2 + 992);
    *(_QWORD *)(a2 + 992) = 0;
    *(_QWORD *)(a2 + 984) = 0;
    v29 = *(_OWORD *)(a2 + 1000);
    *(_OWORD *)(a1 + 1010) = *(_OWORD *)(a2 + 1010);
    *(_OWORD *)(a1 + 1000) = v29;
    *(_BYTE *)(a1 + 1032) = 1;
  }
  *(_BYTE *)(a1 + 1040) = 0;
  *(_BYTE *)(a1 + 1120) = 0;
  if (*(_BYTE *)(a2 + 1120))
  {
    *(_QWORD *)(a1 + 1040) = &off_24EC27290;
    *(_QWORD *)(a1 + 1048) = *(_QWORD *)(a2 + 1048);
    *(_QWORD *)(a1 + 1056) = *(_QWORD *)(a2 + 1056);
    *(_QWORD *)(a2 + 1056) = 0;
    *(_QWORD *)(a2 + 1048) = 0;
    v30 = *(_OWORD *)(a2 + 1064);
    v31 = *(_OWORD *)(a2 + 1080);
    v32 = *(_OWORD *)(a2 + 1096);
    *(_WORD *)(a1 + 1112) = *(_WORD *)(a2 + 1112);
    *(_OWORD *)(a1 + 1096) = v32;
    *(_OWORD *)(a1 + 1080) = v31;
    *(_OWORD *)(a1 + 1064) = v30;
    *(_BYTE *)(a1 + 1120) = 1;
  }
  *(_BYTE *)(a1 + 1128) = 0;
  *(_BYTE *)(a1 + 1208) = 0;
  if (*(_BYTE *)(a2 + 1208))
  {
    *(_QWORD *)(a1 + 1128) = &off_24EC26EB0;
    *(_OWORD *)(a1 + 1136) = *(_OWORD *)(a2 + 1136);
    *(_QWORD *)(a2 + 1144) = 0;
    *(_QWORD *)(a2 + 1136) = 0;
    v33 = *(_OWORD *)(a2 + 1152);
    v34 = *(_OWORD *)(a2 + 1168);
    v35 = *(_OWORD *)(a2 + 1184);
    *(_WORD *)(a1 + 1200) = *(_WORD *)(a2 + 1200);
    *(_OWORD *)(a1 + 1184) = v35;
    *(_OWORD *)(a1 + 1168) = v34;
    *(_OWORD *)(a1 + 1152) = v33;
    *(_BYTE *)(a1 + 1208) = 1;
  }
  *(_OWORD *)(a1 + 1216) = *(_OWORD *)(a2 + 1216);
  *(_QWORD *)(a1 + 1232) = *(_QWORD *)(a2 + 1232);
  *(_QWORD *)(a1 + 1240) = &off_24EC20828;
  *(_QWORD *)(a1 + 1248) = &off_24EC20868;
  *(_QWORD *)(a1 + 1256) = *(_QWORD *)(a2 + 1256);
  *(_QWORD *)(a1 + 1264) = *(_QWORD *)(a2 + 1264);
  *(_OWORD *)(a1 + 1272) = *(_OWORD *)(a2 + 1272);
  v36 = *(_OWORD *)(a2 + 1288);
  v37 = *(_OWORD *)(a2 + 1304);
  *(_DWORD *)(a1 + 1320) = *(_DWORD *)(a2 + 1320);
  *(_OWORD *)(a1 + 1288) = v36;
  *(_OWORD *)(a1 + 1304) = v37;
  *(_QWORD *)(a1 + 1328) = *(_QWORD *)(a2 + 1328);
  *(_QWORD *)(a1 + 1240) = &off_24EC207B8;
  v38 = *(_OWORD *)(a2 + 1336);
  v39 = *(_OWORD *)(a2 + 1352);
  v40 = *(_OWORD *)(a2 + 1384);
  *(_OWORD *)(a1 + 1368) = *(_OWORD *)(a2 + 1368);
  *(_OWORD *)(a1 + 1384) = v40;
  *(_OWORD *)(a1 + 1336) = v38;
  *(_OWORD *)(a1 + 1352) = v39;
  *(_BYTE *)(a1 + 1400) = *(_BYTE *)(a2 + 1400);
  *(_BYTE *)(a1 + 1408) = 0;
  *(_BYTE *)(a1 + 1608) = 0;
  sub_223256EF4(a1 + 1408, (__int128 *)(a2 + 1408));
  *(_BYTE *)(a1 + 1616) = 0;
  *(_BYTE *)(a1 + 1744) = 0;
  if (*(_BYTE *)(a2 + 1744))
  {
    v41 = *(_OWORD *)(a2 + 1616);
    v42 = *(_OWORD *)(a2 + 1632);
    v43 = *(_OWORD *)(a2 + 1664);
    *(_OWORD *)(a1 + 1648) = *(_OWORD *)(a2 + 1648);
    *(_OWORD *)(a1 + 1664) = v43;
    *(_OWORD *)(a1 + 1616) = v41;
    *(_OWORD *)(a1 + 1632) = v42;
    v44 = *(_OWORD *)(a2 + 1680);
    v45 = *(_OWORD *)(a2 + 1696);
    v46 = *(_OWORD *)(a2 + 1712);
    *(_OWORD *)(a1 + 1728) = *(_OWORD *)(a2 + 1728);
    *(_OWORD *)(a1 + 1712) = v46;
    *(_OWORD *)(a1 + 1696) = v45;
    *(_OWORD *)(a1 + 1680) = v44;
    *(_BYTE *)(a1 + 1744) = 1;
  }
  *(_QWORD *)(a1 + 1752) = &off_24EC715B8;
  *(_OWORD *)(a1 + 1760) = *(_OWORD *)(a2 + 1760);
  *(_OWORD *)(a2 + 1760) = 0u;
  *(_QWORD *)(a1 + 1792) = 0;
  *(_OWORD *)(a1 + 1776) = 0u;
  *(_OWORD *)(a1 + 1776) = *(_OWORD *)(a2 + 1776);
  *(_QWORD *)(a1 + 1792) = *(_QWORD *)(a2 + 1792);
  *(_QWORD *)(a2 + 1792) = 0;
  *(_OWORD *)(a2 + 1776) = 0u;
  *(_WORD *)(a1 + 1800) = *(_WORD *)(a2 + 1800);
  *(_OWORD *)(a1 + 1808) = *(_OWORD *)(a2 + 1808);
  *(_OWORD *)(a2 + 1808) = 0u;
  return a1;
}

__n128 sub_223256EF4(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __n128 result;

  if (*((_BYTE *)a2 + 200))
  {
    v2 = *a2;
    *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
    *(_OWORD *)a1 = v2;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 24) = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    *((_QWORD *)a2 + 3) = 0;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_OWORD *)(a1 + 48) = a2[3];
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
    *((_QWORD *)a2 + 6) = 0;
    *((_QWORD *)a2 + 7) = 0;
    *((_QWORD *)a2 + 8) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_OWORD *)(a1 + 72) = *(__int128 *)((char *)a2 + 72);
    *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
    *((_QWORD *)a2 + 9) = 0;
    *((_QWORD *)a2 + 10) = 0;
    *((_QWORD *)a2 + 11) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_OWORD *)(a1 + 96) = a2[6];
    *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
    *((_QWORD *)a2 + 12) = 0;
    *((_QWORD *)a2 + 13) = 0;
    *((_QWORD *)a2 + 14) = 0;
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_OWORD *)(a1 + 120) = *(__int128 *)((char *)a2 + 120);
    *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
    *((_QWORD *)a2 + 15) = 0;
    *((_QWORD *)a2 + 16) = 0;
    *((_QWORD *)a2 + 17) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_OWORD *)(a1 + 144) = a2[9];
    *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
    *((_QWORD *)a2 + 18) = 0;
    *((_QWORD *)a2 + 19) = 0;
    *((_QWORD *)a2 + 20) = 0;
    *(_QWORD *)(a1 + 168) = 0;
    *(_QWORD *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 184) = 0;
    result = *(__n128 *)((char *)a2 + 168);
    *(__n128 *)(a1 + 168) = result;
    *(_QWORD *)(a1 + 184) = *((_QWORD *)a2 + 23);
    *((_QWORD *)a2 + 22) = 0;
    *((_QWORD *)a2 + 23) = 0;
    *((_QWORD *)a2 + 21) = 0;
    *(_BYTE *)(a1 + 192) = *((_BYTE *)a2 + 192);
    *(_BYTE *)(a1 + 200) = 1;
  }
  return result;
}

uint64_t sub_223257000(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  __int16 v9;
  unint64_t v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int16 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;

  v4 = sub_2232573EC(a1, a2);
  sub_22325772C(v4 + 232, a2 + 232);
  sub_223257948(a1 + 360, a2 + 360);
  sub_223257BF8(a1 + 568, a2 + 568);
  *(_BYTE *)(a1 + 976) = 0;
  *(_BYTE *)(a1 + 1032) = 0;
  if (*(_BYTE *)(a2 + 1032))
  {
    *(_QWORD *)(a1 + 976) = &off_24EC270A0;
    v5 = *(_QWORD *)(a2 + 984);
    v6 = *(std::__shared_weak_count **)(a2 + 992);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      v9 = *(_WORD *)(a2 + 1024);
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = *(_OWORD *)(a2 + 1000);
      *(_QWORD *)(a1 + 1016) = *(_QWORD *)(a2 + 1016);
      *(_OWORD *)(a1 + 1000) = v11;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
      *(_QWORD *)(a1 + 984) = v5;
      *(_QWORD *)(a1 + 992) = v6;
      *(_WORD *)(a1 + 1024) = v9;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    else
    {
      v15 = *(_WORD *)(a2 + 1024);
      *(_QWORD *)(a1 + 984) = v5;
      *(_QWORD *)(a1 + 992) = 0;
      v16 = *(_OWORD *)(a2 + 1000);
      *(_QWORD *)(a1 + 1016) = *(_QWORD *)(a2 + 1016);
      *(_OWORD *)(a1 + 1000) = v16;
      *(_WORD *)(a1 + 1024) = v15;
    }
    *(_BYTE *)(a1 + 1032) = 1;
  }
  sub_223258138(a1 + 1040, a2 + 1040);
  *(_QWORD *)(a1 + 1232) = *(_QWORD *)(a2 + 1232);
  *(_QWORD *)(a1 + 1240) = &off_24EC20828;
  *(_QWORD *)(a1 + 1248) = &off_24EC20868;
  *(_QWORD *)(a1 + 1256) = *(_QWORD *)(a2 + 1256);
  *(_QWORD *)(a1 + 1264) = *(_QWORD *)(a2 + 1264);
  *(_OWORD *)(a1 + 1272) = *(_OWORD *)(a2 + 1272);
  v17 = *(_OWORD *)(a2 + 1288);
  v18 = *(_OWORD *)(a2 + 1304);
  *(_DWORD *)(a1 + 1320) = *(_DWORD *)(a2 + 1320);
  *(_OWORD *)(a1 + 1288) = v17;
  *(_OWORD *)(a1 + 1304) = v18;
  *(_QWORD *)(a1 + 1328) = *(_QWORD *)(a2 + 1328);
  *(_QWORD *)(a1 + 1240) = &off_24EC207B8;
  v19 = *(_OWORD *)(a2 + 1336);
  v20 = *(_OWORD *)(a2 + 1352);
  v21 = *(_OWORD *)(a2 + 1384);
  *(_OWORD *)(a1 + 1368) = *(_OWORD *)(a2 + 1368);
  *(_OWORD *)(a1 + 1384) = v21;
  *(_OWORD *)(a1 + 1336) = v19;
  *(_OWORD *)(a1 + 1352) = v20;
  *(_BYTE *)(a1 + 1400) = *(_BYTE *)(a2 + 1400);
  *(_BYTE *)(a1 + 1408) = 0;
  *(_BYTE *)(a1 + 1608) = 0;
  if (*(_BYTE *)(a2 + 1608))
  {
    v22 = *(_OWORD *)(a2 + 1408);
    *(_DWORD *)(a1 + 1424) = *(_DWORD *)(a2 + 1424);
    *(_OWORD *)(a1 + 1408) = v22;
    sub_223258368((_QWORD *)(a1 + 1432), a2 + 1432);
    *(_BYTE *)(a1 + 1600) = *(_BYTE *)(a2 + 1600);
    *(_BYTE *)(a1 + 1608) = 1;
  }
  *(_BYTE *)(a1 + 1616) = 0;
  *(_BYTE *)(a1 + 1744) = 0;
  if (*(_BYTE *)(a2 + 1744))
  {
    v23 = *(_OWORD *)(a2 + 1616);
    v24 = *(_OWORD *)(a2 + 1632);
    v25 = *(_OWORD *)(a2 + 1664);
    *(_OWORD *)(a1 + 1648) = *(_OWORD *)(a2 + 1648);
    *(_OWORD *)(a1 + 1664) = v25;
    *(_OWORD *)(a1 + 1616) = v23;
    *(_OWORD *)(a1 + 1632) = v24;
    v26 = *(_OWORD *)(a2 + 1680);
    v27 = *(_OWORD *)(a2 + 1696);
    v28 = *(_OWORD *)(a2 + 1712);
    *(_OWORD *)(a1 + 1728) = *(_OWORD *)(a2 + 1728);
    *(_OWORD *)(a1 + 1712) = v28;
    *(_OWORD *)(a1 + 1696) = v27;
    *(_OWORD *)(a1 + 1680) = v26;
    *(_BYTE *)(a1 + 1744) = 1;
  }
  *(_QWORD *)(a1 + 1752) = &off_24EC715B8;
  *(_QWORD *)(a1 + 1760) = *(_QWORD *)(a2 + 1760);
  v29 = *(_QWORD *)(a2 + 1768);
  *(_QWORD *)(a1 + 1768) = v29;
  if (v29)
  {
    v30 = (unint64_t *)(v29 + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  *(_QWORD *)(a1 + 1792) = 0;
  *(_OWORD *)(a1 + 1776) = 0u;
  sub_223258700((char *)(a1 + 1776), *(_QWORD *)(a2 + 1776), *(_QWORD *)(a2 + 1784), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 1784) - *(_QWORD *)(a2 + 1776)) >> 5));
  *(_WORD *)(a1 + 1800) = *(_WORD *)(a2 + 1800);
  sub_22319ED0C((_QWORD *)(a1 + 1808), a2 + 1808);
  return a1;
}

void sub_223257330(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_BYTE *)(v1 + 1608))
    sub_223255CAC(v6);
  *(_QWORD *)(v1 + 1240) = v7;
  sub_2232559C8(v5);
  sub_223255A90(v1 + 976);
  sub_223256254(v4);
  sub_223255B0C(v3);
  sub_223255BE4(v2);
  sub_2232565CC(v1);
  _Unwind_Resume(a1);
}

void sub_2232573BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_223255BE4(v2);
  sub_2232565CC(v1);
  _Unwind_Resume(a1);
}

void sub_2232573D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2232565CC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2232573EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int16 v8;
  unint64_t v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int16 v14;
  __int128 v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __int16 v20;
  unint64_t v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __int16 v26;
  __int128 v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  __int16 v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  __int16 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 56) = 0;
  if (*(_BYTE *)(a2 + 56))
  {
    *(_QWORD *)a1 = &off_24EC21328;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(std::__shared_weak_count **)(a2 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v8 = *(_WORD *)(a2 + 48);
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      v10 = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 24) = v10;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      *(_QWORD *)(a1 + 8) = v4;
      *(_QWORD *)(a1 + 16) = v5;
      *(_WORD *)(a1 + 48) = v8;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      v14 = *(_WORD *)(a2 + 48);
      *(_QWORD *)(a1 + 8) = v4;
      *(_QWORD *)(a1 + 16) = 0;
      v15 = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 24) = v15;
      *(_WORD *)(a1 + 48) = v14;
    }
    *(_BYTE *)(a1 + 56) = 1;
  }
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  if (*(_BYTE *)(a2 + 120))
  {
    *(_QWORD *)(a1 + 64) = &off_24EC21328;
    v16 = *(_QWORD *)(a2 + 72);
    v17 = *(std::__shared_weak_count **)(a2 + 80);
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      v20 = *(_WORD *)(a2 + 112);
      do
        v21 = __ldxr(v18);
      while (__stxr(v21 + 1, v18));
      v22 = *(_OWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 88) = v22;
      do
        v23 = __ldxr(v18);
      while (__stxr(v23 + 1, v18));
      *(_QWORD *)(a1 + 72) = v16;
      *(_QWORD *)(a1 + 80) = v17;
      *(_WORD *)(a1 + 112) = v20;
      do
        v24 = __ldaxr(v18);
      while (__stlxr(v24 - 1, v18));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
      do
        v25 = __ldaxr(v18);
      while (__stlxr(v25 - 1, v18));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    else
    {
      v26 = *(_WORD *)(a2 + 112);
      *(_QWORD *)(a1 + 72) = v16;
      *(_QWORD *)(a1 + 80) = 0;
      v27 = *(_OWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 88) = v27;
      *(_WORD *)(a1 + 112) = v26;
    }
    *(_BYTE *)(a1 + 120) = 1;
  }
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  if (*(_BYTE *)(a2 + 208))
  {
    *(_QWORD *)(a1 + 128) = &off_24EC26FA8;
    v28 = *(_QWORD *)(a2 + 136);
    v29 = *(std::__shared_weak_count **)(a2 + 144);
    if (v29)
    {
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      v32 = *(_WORD *)(a2 + 200);
      do
        v33 = __ldxr(v30);
      while (__stxr(v33 + 1, v30));
      v34 = *(_OWORD *)(a2 + 152);
      v35 = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 168) = v35;
      *(_OWORD *)(a1 + 152) = v34;
      do
        v36 = __ldxr(v30);
      while (__stxr(v36 + 1, v30));
      *(_QWORD *)(a1 + 136) = v28;
      *(_QWORD *)(a1 + 144) = v29;
      *(_WORD *)(a1 + 200) = v32;
      do
        v37 = __ldaxr(v30);
      while (__stlxr(v37 - 1, v30));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
      do
        v38 = __ldaxr(v30);
      while (__stlxr(v38 - 1, v30));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    else
    {
      v39 = *(_WORD *)(a2 + 200);
      *(_QWORD *)(a1 + 136) = v28;
      *(_QWORD *)(a1 + 144) = 0;
      v40 = *(_OWORD *)(a2 + 152);
      v41 = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 168) = v41;
      *(_OWORD *)(a1 + 152) = v40;
      *(_WORD *)(a1 + 200) = v39;
    }
    *(_BYTE *)(a1 + 208) = 1;
  }
  v42 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v42;
  if (v42)
  {
    v43 = (unint64_t *)(v42 + 8);
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
  }
  return a1;
}

uint64_t sub_22325772C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int16 v8;
  unint64_t v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int16 v14;
  __int128 v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __int16 v20;
  unint64_t v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __int16 v26;
  __int128 v27;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 56) = 0;
  if (*(_BYTE *)(a2 + 56))
  {
    *(_QWORD *)a1 = &off_24EC270A0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(std::__shared_weak_count **)(a2 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v8 = *(_WORD *)(a2 + 48);
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      v10 = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 24) = v10;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      *(_QWORD *)(a1 + 8) = v4;
      *(_QWORD *)(a1 + 16) = v5;
      *(_WORD *)(a1 + 48) = v8;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      v14 = *(_WORD *)(a2 + 48);
      *(_QWORD *)(a1 + 8) = v4;
      *(_QWORD *)(a1 + 16) = 0;
      v15 = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 24) = v15;
      *(_WORD *)(a1 + 48) = v14;
    }
    *(_BYTE *)(a1 + 56) = 1;
  }
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  if (*(_BYTE *)(a2 + 120))
  {
    *(_QWORD *)(a1 + 64) = &off_24EC21328;
    v16 = *(_QWORD *)(a2 + 72);
    v17 = *(std::__shared_weak_count **)(a2 + 80);
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      v20 = *(_WORD *)(a2 + 112);
      do
        v21 = __ldxr(v18);
      while (__stxr(v21 + 1, v18));
      v22 = *(_OWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 88) = v22;
      do
        v23 = __ldxr(v18);
      while (__stxr(v23 + 1, v18));
      *(_QWORD *)(a1 + 72) = v16;
      *(_QWORD *)(a1 + 80) = v17;
      *(_WORD *)(a1 + 112) = v20;
      do
        v24 = __ldaxr(v18);
      while (__stlxr(v24 - 1, v18));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
      do
        v25 = __ldaxr(v18);
      while (__stlxr(v25 - 1, v18));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    else
    {
      v26 = *(_WORD *)(a2 + 112);
      *(_QWORD *)(a1 + 72) = v16;
      *(_QWORD *)(a1 + 80) = 0;
      v27 = *(_OWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 88) = v27;
      *(_WORD *)(a1 + 112) = v26;
    }
    *(_BYTE *)(a1 + 120) = 1;
  }
  return a1;
}

uint64_t sub_223257948(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int16 v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int16 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 80) = 0;
  if (*(_BYTE *)(a2 + 80))
  {
    *(_QWORD *)a1 = &off_24EC26EB0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(std::__shared_weak_count **)(a2 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v8 = *(_WORD *)(a2 + 72);
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      v10 = *(_OWORD *)(a2 + 24);
      v11 = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 40) = v11;
      *(_OWORD *)(a1 + 24) = v10;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
      *(_QWORD *)(a1 + 8) = v4;
      *(_QWORD *)(a1 + 16) = v5;
      *(_WORD *)(a1 + 72) = v8;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      v15 = *(_WORD *)(a2 + 72);
      *(_QWORD *)(a1 + 8) = v4;
      *(_QWORD *)(a1 + 16) = 0;
      v16 = *(_OWORD *)(a2 + 24);
      v17 = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 40) = v17;
      *(_OWORD *)(a1 + 24) = v16;
      *(_WORD *)(a1 + 72) = v15;
    }
    *(_BYTE *)(a1 + 80) = 1;
  }
  v18 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 93) = *(_QWORD *)(a2 + 93);
  *(_QWORD *)(a1 + 88) = v18;
  sub_223257B24(a1 + 104, a2 + 104);
  v19 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 141) = *(_QWORD *)(a2 + 141);
  *(_QWORD *)(a1 + 136) = v19;
  sub_22319ED0C((_QWORD *)(a1 + 152), a2 + 152);
  *(_BYTE *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 204) = 0;
  if (*(_BYTE *)(a2 + 204))
  {
    v20 = *(_OWORD *)(a2 + 168);
    v21 = *(_OWORD *)(a2 + 184);
    *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 168) = v20;
    *(_OWORD *)(a1 + 184) = v21;
    *(_BYTE *)(a1 + 204) = 1;
  }
  return a1;
}

void sub_223257AE4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  if (*(_BYTE *)(v1 + 128))
  {
    v4 = *v2;
    if (*v2)
    {
      *(_QWORD *)(v1 + 112) = v4;
      operator delete(v4);
      sub_223255D3C(v1);
      _Unwind_Resume(a1);
    }
  }
  sub_223255D3C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223257B24(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;
  char *v7;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    v4 = *(const void **)a2;
    v3 = *(_QWORD *)(a2 + 8);
    v5 = v3 - *(_QWORD *)a2;
    if (v3 != *(_QWORD *)a2)
    {
      if (v5 < 0)
        sub_223257BE4();
      v6 = (char *)operator new(v3 - *(_QWORD *)a2);
      *(_QWORD *)a1 = v6;
      *(_QWORD *)(a1 + 8) = v6;
      v7 = &v6[2 * (v5 >> 1)];
      *(_QWORD *)(a1 + 16) = v7;
      memcpy(v6, v4, v5);
      *(_QWORD *)(a1 + 8) = v7;
    }
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_223257BB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  void *v4;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  if (*(_BYTE *)(v1 + 24))
  {
    v4 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v4;
      operator delete(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_223257BE4()
{
  sub_22316DBD4("vector");
}

uint64_t sub_223257BF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int16 v8;
  unint64_t v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int16 v14;
  __int128 v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __int16 v20;
  unint64_t v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __int16 v26;
  __int128 v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  __int16 v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  __int16 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  __int16 v49;
  unint64_t v50;
  __int128 v51;
  __int128 v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  __int16 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  __int16 v63;
  unint64_t v64;
  __int128 v65;
  __int128 v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  __int16 v70;
  __int128 v71;
  __int128 v72;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 56) = 0;
  if (*(_BYTE *)(a2 + 56))
  {
    *(_QWORD *)a1 = &off_24EC21328;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(std::__shared_weak_count **)(a2 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v8 = *(_WORD *)(a2 + 48);
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      v10 = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 24) = v10;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      *(_QWORD *)(a1 + 8) = v4;
      *(_QWORD *)(a1 + 16) = v5;
      *(_WORD *)(a1 + 48) = v8;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      v14 = *(_WORD *)(a2 + 48);
      *(_QWORD *)(a1 + 8) = v4;
      *(_QWORD *)(a1 + 16) = 0;
      v15 = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 24) = v15;
      *(_WORD *)(a1 + 48) = v14;
    }
    *(_BYTE *)(a1 + 56) = 1;
  }
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  if (*(_BYTE *)(a2 + 120))
  {
    *(_QWORD *)(a1 + 64) = &off_24EC27198;
    v16 = *(_QWORD *)(a2 + 72);
    v17 = *(std::__shared_weak_count **)(a2 + 80);
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      v20 = *(_WORD *)(a2 + 112);
      do
        v21 = __ldxr(v18);
      while (__stxr(v21 + 1, v18));
      v22 = *(_OWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 88) = v22;
      do
        v23 = __ldxr(v18);
      while (__stxr(v23 + 1, v18));
      *(_QWORD *)(a1 + 72) = v16;
      *(_QWORD *)(a1 + 80) = v17;
      *(_WORD *)(a1 + 112) = v20;
      do
        v24 = __ldaxr(v18);
      while (__stlxr(v24 - 1, v18));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
      do
        v25 = __ldaxr(v18);
      while (__stlxr(v25 - 1, v18));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    else
    {
      v26 = *(_WORD *)(a2 + 112);
      *(_QWORD *)(a1 + 72) = v16;
      *(_QWORD *)(a1 + 80) = 0;
      v27 = *(_OWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 88) = v27;
      *(_WORD *)(a1 + 112) = v26;
    }
    *(_BYTE *)(a1 + 120) = 1;
  }
  v28 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v28;
  if (v28)
  {
    v29 = (unint64_t *)(v28 + 8);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  if (*(_BYTE *)(a2 + 224))
  {
    *(_QWORD *)(a1 + 144) = &off_24EC21518;
    v31 = *(_QWORD *)(a2 + 152);
    v32 = *(std::__shared_weak_count **)(a2 + 160);
    if (v32)
    {
      v33 = (unint64_t *)&v32->__shared_owners_;
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
      v35 = *(_WORD *)(a2 + 216);
      do
        v36 = __ldxr(v33);
      while (__stxr(v36 + 1, v33));
      v37 = *(_OWORD *)(a2 + 168);
      v38 = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
      *(_OWORD *)(a1 + 184) = v38;
      *(_OWORD *)(a1 + 168) = v37;
      do
        v39 = __ldxr(v33);
      while (__stxr(v39 + 1, v33));
      *(_QWORD *)(a1 + 152) = v31;
      *(_QWORD *)(a1 + 160) = v32;
      *(_WORD *)(a1 + 216) = v35;
      do
        v40 = __ldaxr(v33);
      while (__stlxr(v40 - 1, v33));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
      do
        v41 = __ldaxr(v33);
      while (__stlxr(v41 - 1, v33));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    else
    {
      v42 = *(_WORD *)(a2 + 216);
      *(_QWORD *)(a1 + 152) = v31;
      *(_QWORD *)(a1 + 160) = 0;
      v43 = *(_OWORD *)(a2 + 168);
      v44 = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
      *(_OWORD *)(a1 + 184) = v44;
      *(_OWORD *)(a1 + 168) = v43;
      *(_WORD *)(a1 + 216) = v42;
    }
    *(_BYTE *)(a1 + 224) = 1;
  }
  *(_BYTE *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 312) = 0;
  if (*(_BYTE *)(a2 + 312))
  {
    *(_QWORD *)(a1 + 232) = &off_24EC21518;
    v45 = *(_QWORD *)(a2 + 240);
    v46 = *(std::__shared_weak_count **)(a2 + 248);
    if (v46)
    {
      v47 = (unint64_t *)&v46->__shared_owners_;
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 + 1, v47));
      v49 = *(_WORD *)(a2 + 304);
      do
        v50 = __ldxr(v47);
      while (__stxr(v50 + 1, v47));
      v51 = *(_OWORD *)(a2 + 256);
      v52 = *(_OWORD *)(a2 + 288);
      *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
      *(_OWORD *)(a1 + 288) = v52;
      *(_OWORD *)(a1 + 256) = v51;
      do
        v53 = __ldxr(v47);
      while (__stxr(v53 + 1, v47));
      *(_QWORD *)(a1 + 240) = v45;
      *(_QWORD *)(a1 + 248) = v46;
      *(_WORD *)(a1 + 304) = v49;
      do
        v54 = __ldaxr(v47);
      while (__stlxr(v54 - 1, v47));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
      do
        v55 = __ldaxr(v47);
      while (__stlxr(v55 - 1, v47));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    else
    {
      v56 = *(_WORD *)(a2 + 304);
      *(_QWORD *)(a1 + 240) = v45;
      *(_QWORD *)(a1 + 248) = 0;
      v57 = *(_OWORD *)(a2 + 256);
      v58 = *(_OWORD *)(a2 + 288);
      *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
      *(_OWORD *)(a1 + 288) = v58;
      *(_OWORD *)(a1 + 256) = v57;
      *(_WORD *)(a1 + 304) = v56;
    }
    *(_BYTE *)(a1 + 312) = 1;
  }
  *(_BYTE *)(a1 + 320) = 0;
  *(_BYTE *)(a1 + 400) = 0;
  if (*(_BYTE *)(a2 + 400))
  {
    *(_QWORD *)(a1 + 320) = &off_24EC21518;
    v59 = *(_QWORD *)(a2 + 328);
    v60 = *(std::__shared_weak_count **)(a2 + 336);
    if (v60)
    {
      v61 = (unint64_t *)&v60->__shared_owners_;
      do
        v62 = __ldxr(v61);
      while (__stxr(v62 + 1, v61));
      v63 = *(_WORD *)(a2 + 392);
      do
        v64 = __ldxr(v61);
      while (__stxr(v64 + 1, v61));
      v65 = *(_OWORD *)(a2 + 344);
      v66 = *(_OWORD *)(a2 + 360);
      *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
      *(_OWORD *)(a1 + 360) = v66;
      *(_OWORD *)(a1 + 344) = v65;
      do
        v67 = __ldxr(v61);
      while (__stxr(v67 + 1, v61));
      *(_QWORD *)(a1 + 328) = v59;
      *(_QWORD *)(a1 + 336) = v60;
      *(_WORD *)(a1 + 392) = v63;
      do
        v68 = __ldaxr(v61);
      while (__stlxr(v68 - 1, v61));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
      do
        v69 = __ldaxr(v61);
      while (__stlxr(v69 - 1, v61));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    else
    {
      v70 = *(_WORD *)(a2 + 392);
      *(_QWORD *)(a1 + 328) = v59;
      *(_QWORD *)(a1 + 336) = 0;
      v71 = *(_OWORD *)(a2 + 344);
      v72 = *(_OWORD *)(a2 + 360);
      *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
      *(_OWORD *)(a1 + 360) = v72;
      *(_OWORD *)(a1 + 344) = v71;
      *(_WORD *)(a1 + 392) = v70;
    }
    *(_BYTE *)(a1 + 400) = 1;
  }
  return a1;
}

uint64_t sub_223258138(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int16 v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int16 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  __int16 v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int16 v29;
  __int128 v30;
  __int128 v31;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 80) = 0;
  if (*(_BYTE *)(a2 + 80))
  {
    *(_QWORD *)a1 = &off_24EC27290;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(std::__shared_weak_count **)(a2 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v8 = *(_WORD *)(a2 + 72);
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      v10 = *(_OWORD *)(a2 + 24);
      v11 = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 40) = v11;
      *(_OWORD *)(a1 + 24) = v10;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
      *(_QWORD *)(a1 + 8) = v4;
      *(_QWORD *)(a1 + 16) = v5;
      *(_WORD *)(a1 + 72) = v8;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      v15 = *(_WORD *)(a2 + 72);
      *(_QWORD *)(a1 + 8) = v4;
      *(_QWORD *)(a1 + 16) = 0;
      v16 = *(_OWORD *)(a2 + 24);
      v17 = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 40) = v17;
      *(_OWORD *)(a1 + 24) = v16;
      *(_WORD *)(a1 + 72) = v15;
    }
    *(_BYTE *)(a1 + 80) = 1;
  }
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  if (*(_BYTE *)(a2 + 168))
  {
    *(_QWORD *)(a1 + 88) = &off_24EC26EB0;
    v18 = *(_QWORD *)(a2 + 96);
    v19 = *(std::__shared_weak_count **)(a2 + 104);
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      v22 = *(_WORD *)(a2 + 160);
      do
        v23 = __ldxr(v20);
      while (__stxr(v23 + 1, v20));
      v24 = *(_OWORD *)(a2 + 112);
      v25 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v25;
      *(_OWORD *)(a1 + 112) = v24;
      do
        v26 = __ldxr(v20);
      while (__stxr(v26 + 1, v20));
      *(_QWORD *)(a1 + 96) = v18;
      *(_QWORD *)(a1 + 104) = v19;
      *(_WORD *)(a1 + 160) = v22;
      do
        v27 = __ldaxr(v20);
      while (__stlxr(v27 - 1, v20));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
      do
        v28 = __ldaxr(v20);
      while (__stlxr(v28 - 1, v20));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    else
    {
      v29 = *(_WORD *)(a2 + 160);
      *(_QWORD *)(a1 + 96) = v18;
      *(_QWORD *)(a1 + 104) = 0;
      v30 = *(_OWORD *)(a2 + 112);
      v31 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v31;
      *(_OWORD *)(a1 + 112) = v30;
      *(_WORD *)(a1 + 160) = v29;
    }
    *(_BYTE *)(a1 + 168) = 1;
  }
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  return a1;
}

_QWORD *sub_223258368(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  _BYTE *v14;
  _BYTE *v15;
  int64_t v16;
  char *v17;
  char *v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  char *v22;
  size_t v23;
  _BYTE *v24;
  _BYTE *v25;
  int64_t v26;
  char *v27;
  char *v28;
  _BYTE *v29;
  _BYTE *v30;
  int64_t v31;
  char *v32;
  char *v33;
  _BYTE *v34;
  _BYTE *v35;
  int64_t v36;
  char *v37;
  char *v38;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (v6 < 0)
      sub_22316E078();
    v7 = (char *)operator new(v4 - *(_QWORD *)a2);
    *a1 = v7;
    a1[1] = v7;
    v8 = &v7[16 * (v6 >> 4)];
    a1[2] = v8;
    memcpy(v7, v5, v6);
    a1[1] = v8;
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  v10 = *(_BYTE **)(a2 + 24);
  v9 = *(_BYTE **)(a2 + 32);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0)
      sub_223257BE4();
    v12 = (char *)operator new(v9 - v10);
    a1[3] = v12;
    a1[4] = v12;
    a1[5] = &v12[64 * (v11 >> 6)];
    v13 = v11 & 0xFFFFFFFFFFFFFFC0;
    memcpy(v12, v10, v13);
    a1[4] = &v12[v13];
  }
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  v15 = *(_BYTE **)(a2 + 48);
  v14 = *(_BYTE **)(a2 + 56);
  v16 = v14 - v15;
  if (v14 != v15)
  {
    if (v16 < 0)
      sub_22316E078();
    v17 = (char *)operator new(v14 - v15);
    a1[6] = v17;
    a1[7] = v17;
    v18 = &v17[16 * (v16 >> 4)];
    a1[8] = v18;
    memcpy(v17, v15, v16);
    a1[7] = v18;
  }
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  v20 = *(_BYTE **)(a2 + 72);
  v19 = *(_BYTE **)(a2 + 80);
  v21 = v19 - v20;
  if (v19 != v20)
  {
    if (v21 < 0)
      sub_223257BE4();
    v22 = (char *)operator new(v19 - v20);
    a1[9] = v22;
    a1[10] = v22;
    a1[11] = &v22[64 * (v21 >> 6)];
    v23 = v21 & 0xFFFFFFFFFFFFFFC0;
    memcpy(v22, v20, v23);
    a1[10] = &v22[v23];
  }
  a1[12] = 0;
  a1[13] = 0;
  a1[14] = 0;
  v25 = *(_BYTE **)(a2 + 96);
  v24 = *(_BYTE **)(a2 + 104);
  v26 = v24 - v25;
  if (v24 != v25)
  {
    if (v26 < 0)
      sub_22316E078();
    v27 = (char *)operator new(v24 - v25);
    a1[12] = v27;
    a1[13] = v27;
    v28 = &v27[16 * (v26 >> 4)];
    a1[14] = v28;
    memcpy(v27, v25, v26);
    a1[13] = v28;
  }
  a1[15] = 0;
  a1[16] = 0;
  a1[17] = 0;
  v30 = *(_BYTE **)(a2 + 120);
  v29 = *(_BYTE **)(a2 + 128);
  v31 = v29 - v30;
  if (v29 != v30)
  {
    if (v31 < 0)
      sub_22316E078();
    v32 = (char *)operator new(v29 - v30);
    a1[15] = v32;
    a1[16] = v32;
    v33 = &v32[16 * (v31 >> 4)];
    a1[17] = v33;
    memcpy(v32, v30, v31);
    a1[16] = v33;
  }
  a1[18] = 0;
  a1[19] = 0;
  a1[20] = 0;
  v35 = *(_BYTE **)(a2 + 144);
  v34 = *(_BYTE **)(a2 + 152);
  v36 = v34 - v35;
  if (v34 != v35)
  {
    if (v36 < 0)
      sub_22316E078();
    v37 = (char *)operator new(v34 - v35);
    a1[18] = v37;
    a1[19] = v37;
    v38 = &v37[16 * (v36 >> 4)];
    a1[20] = v38;
    memcpy(v37, v35, v36);
    a1[19] = v38;
  }
  return a1;
}

void sub_2232585F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  void **v7;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v9 = *v7;
  if (*v7)
  {
    *(_QWORD *)(v1 + 152) = v9;
    operator delete(v9);
    v10 = *v6;
    if (!*v6)
    {
LABEL_3:
      v11 = *v5;
      if (!*v5)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else
  {
    v10 = *v6;
    if (!*v6)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 128) = v10;
  operator delete(v10);
  v11 = *v5;
  if (!*v5)
  {
LABEL_4:
    v12 = *v4;
    if (!*v4)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  *(_QWORD *)(v1 + 104) = v11;
  operator delete(v11);
  v12 = *v4;
  if (!*v4)
  {
LABEL_5:
    v13 = *v3;
    if (!*v3)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  *(_QWORD *)(v1 + 80) = v12;
  operator delete(v12);
  v13 = *v3;
  if (!*v3)
  {
LABEL_6:
    v14 = *v2;
    if (!*v2)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  *(_QWORD *)(v1 + 56) = v13;
  operator delete(v13);
  v14 = *v2;
  if (!*v2)
  {
LABEL_7:
    v15 = *(void **)v1;
    if (!*(_QWORD *)v1)
      goto LABEL_9;
    goto LABEL_8;
  }
LABEL_15:
  *(_QWORD *)(v1 + 32) = v14;
  operator delete(v14);
  v15 = *(void **)v1;
  if (!*(_QWORD *)v1)
LABEL_9:
    _Unwind_Resume(exception_object);
LABEL_8:
  *(_QWORD *)(v1 + 8) = v15;
  operator delete(v15);
  goto LABEL_9;
}

void sub_2232586F0()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x223258634);
  JUMPOUT(0x22325862CLL);
}

char *sub_223258700(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;

  if (a4)
  {
    v5 = result;
    if (a4 >= 0x124924924924925)
      sub_223257BE4();
    result = (char *)operator new(224 * a4);
    *v5 = result;
    v5[1] = result;
    for (v5[2] = &result[224 * a4]; a2 != a3; result += 224)
    {
      *(_QWORD *)result = *(_QWORD *)a2;
      *(_OWORD *)(result + 8) = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(result + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(result + 40) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(result + 56) = *(_OWORD *)(a2 + 56);
      v8 = *(_QWORD *)(a2 + 80);
      *((_QWORD *)result + 9) = *(_QWORD *)(a2 + 72);
      *((_QWORD *)result + 10) = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      result[88] = 0;
      result[216] = 0;
      if (*(_BYTE *)(a2 + 216))
      {
        v11 = *(_OWORD *)(a2 + 104);
        *(_OWORD *)(result + 88) = *(_OWORD *)(a2 + 88);
        *(_OWORD *)(result + 104) = v11;
        v12 = *(_OWORD *)(a2 + 136);
        *(_OWORD *)(result + 120) = *(_OWORD *)(a2 + 120);
        *(_OWORD *)(result + 136) = v12;
        *(_OWORD *)(result + 152) = *(_OWORD *)(a2 + 152);
        *(_OWORD *)(result + 168) = *(_OWORD *)(a2 + 168);
        *(_OWORD *)(result + 184) = *(_OWORD *)(a2 + 184);
        *(_OWORD *)(result + 200) = *(_OWORD *)(a2 + 200);
        result[216] = 1;
      }
      a2 += 224;
    }
    v5[1] = result;
  }
  return result;
}

void sub_223258844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_223258858(&a9);
  _Unwind_Resume(a1);
}

void ***sub_223258858(void ***result)
{
  void ***v1;
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (char *)**result;
    if (v3)
    {
      v4 = (char *)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 18);
          if (v6)
          {
            p_shared_owners = (unint64_t *)&v6->__shared_owners_;
            do
              v8 = __ldaxr(p_shared_owners);
            while (__stlxr(v8 - 1, p_shared_owners));
            if (!v8)
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
          }
          v4 -= 224;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void *CV3DReconJasperBundleCreateFromJasperPointCloud(uint64_t a1, CFTypeRef *a2, double a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7)
{
  unsigned int *v9;
  unsigned int v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  void *v13;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v19;
  CFErrorRef v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *__p;
  __int128 v30;
  CFErrorRef v31;
  std::__shared_weak_count *v32;
  std::error_condition v33;

  if (a1)
  {
    v9 = (unsigned int *)(a1 + 32);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    v11 = (std::__shared_weak_count *)operator new();
    v11->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC27388;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = (std::__shared_weak_count_vtbl *)a1;
    v11[1].__shared_owners_ = (uint64_t)CV3DReconJasperPointCloudRelease;
    v13 = operator new(0xE8uLL, MEMORY[0x24BEDB6B8]);
    v14 = v13;
    if (v13)
    {
      __p = (void *)(a1 + 8);
      *(_QWORD *)&v30 = v11;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
      sub_2232CFCBC((uint64_t)v13, (uint64_t *)&__p, a3, a4, a5, a6, a7);
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    __p = operator new(0x20uLL);
    v30 = xmmword_2245B8D70;
    strcpy((char *)__p, "Jasper point cloud is NULL");
    v19 = (char *)operator new(0x70uLL);
    strcpy(v19, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconJasperBundle.cpp");
    if (a2)
    {
      *(_QWORD *)&v33.__val_ = 22;
      v33.__cat_ = std::generic_category();
      sub_2245321DC(&v33, (uint64_t)&__p, &v31);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v20 = v31;
      if (v31)
        CFRetain(v31);
      *a2 = v20;
      v21 = v32;
      if (v32)
      {
        v22 = (unint64_t *)&v32->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
    operator delete(v19);
    if (SHIBYTE(v30) < 0)
      operator delete(__p);
    return 0;
  }
  return v14;
}

void sub_223258B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;

  operator delete(v25);
  if (a25 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t CV3DReconJasperBundleRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 228);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DReconJasperBundleRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 228);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

void sub_223258C8C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223258CB0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 32))(*(_QWORD *)(a1 + 24));
}

uint64_t sub_223258CCC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "PFvPK25CV3DReconJasperPointCloudE")
    return a1 + 32;
  if (((v3 & (unint64_t)"PFvPK25CV3DReconJasperPointCloudE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "PFvPK25CV3DReconJasperPointCloudE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PFvPK25CV3DReconJasperPointCloudE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 32;
  return 0;
}

uint64_t CV3DReconJasperPointCloudRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 32);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

BOOL CV3DReconSessionHasKeyframingCapability(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  void *__p[2];
  char v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1216) + 56) + 40) != 0;
  v11 = 15;
  strcpy((char *)__p, "Session is NULL");
  v4 = (char *)operator new(0x70uLL);
  v9 = v4;
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
  if (a2)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v4 = v9;
  }
  operator delete(v4);
  if (v11 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_223258EF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionAddOnKeyframeListUpdateCallback(_QWORD *a1, const void *a2, CFTypeRef *a3)
{
  std::__shared_weak_count *v6;
  _BOOL8 result;
  _BOOL8 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  char *v12;
  CFTypeRef v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  CFTypeRef v17;
  unint64_t *v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  char *v21;
  __int128 v22;
  _BYTE __p[24];
  CFTypeRef cf;
  std::__shared_weak_count *v25;
  std::error_condition v26;

  if (a1)
  {
    if (a2)
    {
      v6 = (std::__shared_weak_count *)operator new(0x20uLL);
      v6->__shared_owners_ = 0;
      v6->__shared_weak_owners_ = 0;
      v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC27438;
      v6[1].__vftable = (std::__shared_weak_count_vtbl *)_Block_copy(a2);
      v19 = &v6[1].__vftable;
      v20 = v6;
      result = sub_2232DED20(a1, (uint64_t)&v19, a3);
      v8 = result;
      v9 = v20;
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
          return v8;
        }
      }
      return result;
    }
    *(_QWORD *)__p = operator new(0x30uLL);
    *(_OWORD *)&__p[8] = xmmword_2245C76D0;
    strcpy(*(char **)__p, "Input keyframe list update callback is NULL");
    v12 = (char *)operator new(0x70uLL);
    v21 = v12;
    v22 = xmmword_2245C76C0;
    strcpy(v12, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
    if (!a3)
      goto LABEL_28;
    *(_QWORD *)&v26.__val_ = 22;
    v26.__cat_ = std::generic_category();
    sub_2245321DC(&v26, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v17 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v17;
    v14 = v25;
    if (!v25)
      goto LABEL_26;
    v18 = (unint64_t *)&v25->__shared_owners_;
    do
      v16 = __ldaxr(v18);
    while (__stlxr(v16 - 1, v18));
  }
  else
  {
    __p[23] = 15;
    strcpy(__p, "Session is NULL");
    v12 = (char *)operator new(0x70uLL);
    v21 = v12;
    v22 = xmmword_2245C76C0;
    strcpy(v12, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
    if (!a3)
    {
LABEL_28:
      operator delete(v12);
      goto LABEL_29;
    }
    *(_QWORD *)&v26.__val_ = 22;
    v26.__cat_ = std::generic_category();
    sub_2245321DC(&v26, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v13 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v13;
    v14 = v25;
    if (!v25)
      goto LABEL_26;
    v15 = (unint64_t *)&v25->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
  }
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if ((SHIBYTE(v22) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_27;
  }
LABEL_26:
  if (SHIBYTE(v22) < 0)
  {
LABEL_27:
    v12 = v21;
    goto LABEL_28;
  }
LABEL_29:
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_223259224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconSessionSaveKeyframesToFolder(uint64_t a1, char *__s, CFTypeRef *a3)
{
  size_t v6;
  void *v7;
  void *v8;
  char *v9;
  CFTypeRef v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  size_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *__p[2];
  unint64_t v26;
  CFTypeRef cf;
  std::__shared_weak_count *v28;
  std::error_condition v29;

  if (!a1)
  {
    HIBYTE(v26) = 15;
    strcpy((char *)__p, "Session is NULL");
    v9 = (char *)operator new(0x70uLL);
    strcpy(v9, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
    if (a3)
    {
      *(_QWORD *)&v29.__val_ = 22;
      v29.__cat_ = std::generic_category();
      sub_2245321DC(&v29, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v10 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v10;
      v11 = v28;
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
    operator delete(v9);
    if (SHIBYTE(v26) < 0)
      operator delete(__p[0]);
    return 0;
  }
  v6 = strlen(__s);
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_37;
  v7 = (void *)v6;
  if (v6 >= 0x17)
  {
    v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v14 = v6 | 7;
    v15 = v14 + 1;
    v8 = operator new(v14 + 1);
    __p[1] = v7;
    v26 = v15 | 0x8000000000000000;
    __p[0] = v8;
    goto LABEL_21;
  }
  HIBYTE(v26) = v6;
  v8 = __p;
  if (v6)
LABEL_21:
    memcpy(v8, __s, (size_t)v7);
  *((_BYTE *)v7 + (_QWORD)v8) = 0;
  v16 = sub_2232DF13C(a1, (uint64_t)__p, a3);
  v17 = v16;
  if ((SHIBYTE(v26) & 0x80000000) == 0)
  {
    if (v16)
      goto LABEL_24;
    return 0;
  }
  operator delete(__p[0]);
  if (!v17)
    return 0;
LABEL_24:
  v18 = strlen(__s);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
LABEL_37:
    sub_22316DBC0();
  v19 = (void *)v18;
  if (v18 >= 0x17)
  {
    v22 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v22 = v18 | 7;
    v23 = v22 + 1;
    v20 = operator new(v22 + 1);
    __p[1] = v19;
    v26 = v23 | 0x8000000000000000;
    __p[0] = v20;
    goto LABEL_33;
  }
  HIBYTE(v26) = v18;
  v20 = __p;
  if (v18)
LABEL_33:
    memcpy(v20, __s, (size_t)v19);
  *((_BYTE *)v19 + (_QWORD)v20) = 0;
  v21 = sub_2232DF4D4(a1, (uint64_t)__p, a3);
  if (SHIBYTE(v26) < 0)
    operator delete(__p[0]);
  return v21;
}

void sub_22325953C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *CV3DReconSessionGetAllKeyframes(uint64_t a1, CFTypeRef *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;
  char *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *__p[2];
  char v18;
  char v19;
  char *v20;
  __int128 v21;
  CFTypeRef cf;
  std::__shared_weak_count *v23;
  std::error_condition v24;

  if (!a1)
  {
    v18 = 15;
    strcpy((char *)__p, "Session is NULL");
    v6 = (char *)operator new(0x70uLL);
    v20 = v6;
    v21 = xmmword_2245C76C0;
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
    if (a2)
    {
      *(_QWORD *)&v24.__val_ = 22;
      v24.__cat_ = std::generic_category();
      sub_2245321DC(&v24, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v7;
      v8 = v23;
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      if ((SHIBYTE(v21) & 0x80000000) == 0)
        goto LABEL_19;
      v6 = v20;
    }
    operator delete(v6);
LABEL_19:
    if (v18 < 0)
      operator delete(__p[0]);
    return 0;
  }
  sub_2232DFB60(a1, a2, (uint64_t)__p);
  if (v19)
  {
    v3 = operator new(0x28uLL, MEMORY[0x24BEDB6B8]);
    v4 = v3;
    if (v3)
    {
      sub_223260C0C(v3 + 1, (uint64_t *)__p);
      *((_DWORD *)v4 + 8) = 1;
      *v4 = &unk_24EC1F2A8;
      if (!v19)
        return v4;
    }
    goto LABEL_25;
  }
  if (a2)
    return 0;
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp", 118, (uint64_t)"err", 3, (uint64_t)"GetAllKeyframes should set err", 30, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v4 = 0;
  if (!v19)
    return v4;
LABEL_25:
  v11 = (char *)__p[0];
  if (!__p[0])
    return v4;
  v12 = (char *)__p[1];
  v13 = __p[0];
  if (__p[1] != __p[0])
  {
    do
    {
      v14 = (std::__shared_weak_count *)*((_QWORD *)v12 - 28);
      if (v14)
      {
        v15 = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      v12 -= 248;
    }
    while (v12 != v11);
    v13 = __p[0];
  }
  __p[1] = v11;
  operator delete(v13);
  return v4;
}

void sub_223259814(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22325988C((char **)va);
  _Unwind_Resume(a1);
}

void sub_223259828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

char **sub_22325988C(char **a1)
{
  char *v2;
  char *v3;
  char *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if (*((_BYTE *)a1 + 24))
  {
    v2 = *a1;
    if (*a1)
    {
      v3 = a1[1];
      v4 = *a1;
      if (v3 != v2)
      {
        do
        {
          v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 28);
          if (v5)
          {
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v7 = __ldaxr(p_shared_owners);
            while (__stlxr(v7 - 1, p_shared_owners));
            if (!v7)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
          }
          v3 -= 248;
        }
        while (v3 != v2);
        v4 = *a1;
      }
      a1[1] = v2;
      operator delete(v4);
    }
  }
  return a1;
}

uint64_t CV3DReconKeyframeRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 24);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DReconKeyframeRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 24);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CV3DReconKeyframeCopyUUID(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  const __CFAllocator *Default;
  std::__shared_weak_count_vtbl *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  char *v11;
  CFTypeRef v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  char cf[17];
  char v17;
  CFTypeRef v18;
  std::__shared_weak_count *v19;
  std::error_condition v20;

  if (a1 && (v3 = *(_QWORD *)(a1 + 8)) != 0 && *(_QWORD *)(v3 + 16))
  {
    Default = CFAllocatorGetDefault();
    v5 = (std::__shared_weak_count_vtbl *)CFUUIDCreateFromUUIDBytes(Default, *(CFUUIDBytes *)v3);
    sub_224533328((std::__shared_weak_count_vtbl **)cf, v5, 0);
    v6 = *(_QWORD *)cf;
    if (*(_QWORD *)cf)
      CFRetain(*(CFTypeRef *)cf);
    v7 = *(std::__shared_weak_count **)&cf[8];
    if (!*(_QWORD *)&cf[8])
      return v6;
    v8 = (unint64_t *)(*(_QWORD *)&cf[8] + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      return v6;
    }
    else
    {
      return v6;
    }
  }
  else
  {
    v17 = 16;
    strcpy(cf, "Keyframe is NULL");
    v11 = (char *)operator new(0x70uLL);
    strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
    if (a2)
    {
      *(_QWORD *)&v20.__val_ = 22;
      v20.__cat_ = std::generic_category();
      sub_2245321DC(&v20, (uint64_t)cf, (CFErrorRef *)&v18);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v12 = v18;
      if (v18)
        CFRetain(v18);
      *a2 = v12;
      v13 = v19;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    operator delete(v11);
    if (v17 < 0)
      operator delete(*(void **)cf);
    return 0;
  }
}

void sub_223259B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223259B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconKeyframeGetWidth(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char __p[17];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 16);
      if (v4)
        return (unsigned __int16)sub_2231D020C(v4);
    }
  }
  v12 = 16;
  strcpy(__p, "Keyframe is NULL");
  v6 = (char *)operator new(0x70uLL);
  strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
  if (a2)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v7 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v7;
    v8 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  operator delete(v6);
  if (v12 < 0)
    operator delete(*(void **)__p);
  return 0xFFFFLL;
}

void sub_223259D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconKeyframeGetHeight(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char __p[17];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 16);
      if (v4)
        return (unsigned __int16)sub_2231D0214(v4);
    }
  }
  v12 = 16;
  strcpy(__p, "Keyframe is NULL");
  v6 = (char *)operator new(0x70uLL);
  strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
  if (a2)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v7 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v7;
    v8 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  operator delete(v6);
  if (v12 < 0)
    operator delete(*(void **)__p);
  return 0xFFFFLL;
}

void sub_223259EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

double CV3DReconKeyframeGetIntrinsics(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  uint64_t v4;
  double result;
  char *v11;
  CFTypeRef v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  char __p[17];
  char v17;
  CFTypeRef cf;
  std::__shared_weak_count *v19;
  std::error_condition v20;

  if (a1 && (v3 = *(_QWORD *)(a1 + 8)) != 0 && (v4 = *(_QWORD *)(v3 + 16)) != 0)
  {
    LODWORD(result) = *(_DWORD *)(sub_2231D0224(v4) + 16);
    __asm { FMOV            V2.4S, #1.0 }
  }
  else
  {
    v17 = 16;
    strcpy(__p, "Keyframe is NULL");
    v11 = (char *)operator new(0x70uLL);
    strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
    if (a2)
    {
      *(_QWORD *)&v20.__val_ = 22;
      v20.__cat_ = std::generic_category();
      sub_2245321DC(&v20, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v12 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v12;
      v13 = v19;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    operator delete(v11);
    if (v17 < 0)
      operator delete(*(void **)__p);
    return 0.0;
  }
  return result;
}

void sub_22325A0C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconKeyframeGetUpdateType(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char __p[17];
  char v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (v3)
    {
      if (*(_QWORD *)(v3 + 16))
        return *(unsigned __int8 *)(v3 + 240);
    }
  }
  v11 = 16;
  strcpy(__p, "Keyframe is NULL");
  v5 = (char *)operator new(0x70uLL);
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
  if (a2)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v6;
    v7 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  operator delete(v5);
  if (v11 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_22325A290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

double CV3DReconKeyframeGetCreationTime(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char __p[17];
  char v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (v3)
    {
      if (*(_QWORD *)(v3 + 16))
        return (double)*(uint64_t *)(v3 + 96) / 1000000000.0;
    }
  }
  v11 = 16;
  strcpy(__p, "Keyframe is NULL");
  v5 = (char *)operator new(0x70uLL);
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
  if (a2)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v6;
    v7 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  operator delete(v5);
  if (v11 < 0)
    operator delete(*(void **)__p);
  return NAN;
}

void sub_22325A458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

double CV3DReconKeyframeGetKeyframeToWorldTransform(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  __int128 v4;
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char __p[17];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1 && (v3 = *(_QWORD *)(a1 + 8)) != 0 && *(_QWORD *)(v3 + 16))
  {
    v4 = *(_OWORD *)(v3 + 32);
  }
  else
  {
    v12 = 16;
    strcpy(__p, "Keyframe is NULL");
    v5 = (char *)operator new(0x70uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
    if (a2)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (v12 < 0)
      operator delete(*(void **)__p);
    *(_QWORD *)&v4 = 0;
  }
  return *(double *)&v4;
}

void sub_22325A618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

double CV3DReconKeyframeGetUpdateTime(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char __p[17];
  char v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (v3)
    {
      if (*(_QWORD *)(v3 + 16))
        return (double)*(uint64_t *)(v3 + 104) / 1000000000.0;
    }
  }
  v11 = 16;
  strcpy(__p, "Keyframe is NULL");
  v5 = (char *)operator new(0x70uLL);
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
  if (a2)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v6;
    v7 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  operator delete(v5);
  if (v11 < 0)
    operator delete(*(void **)__p);
  return NAN;
}

void sub_22325A7E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

CVPixelBufferRef CV3DReconKeyframeCreateDepthImage(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v4;
  uint64_t v5;
  __CVBuffer *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  CFTypeRef v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  CVPixelBufferRef v16;
  char *v18;
  CFTypeRef v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v28;
  std::error_condition v29;

  if (!a1 || (v4 = *(_QWORD *)(a1 + 8)) == 0 || (v5 = *(_QWORD *)(v4 + 16)) == 0)
  {
    HIBYTE(__p[2]) = 16;
    strcpy((char *)__p, "Keyframe is NULL");
    v11 = (char *)operator new(0x70uLL);
    strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
    if (a2)
    {
      *(_QWORD *)&v29.__val_ = 22;
      v29.__cat_ = std::generic_category();
      sub_2245321DC(&v29, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v12 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v12;
      v13 = v28;
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    operator delete(v11);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    return 0;
  }
  if (sub_2231D01EC(v5))
  {
    sub_2231D5C48(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16), __p);
    if (__p[1])
    {
      v6 = *(__CVBuffer **)__p[1];
      v7 = (std::__shared_weak_count *)*((_QWORD *)__p[1] + 1);
      if (v7)
      {
        v8 = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
        do
          v10 = __ldaxr(v8);
        while (__stlxr(v10 - 1, v8));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    else
    {
      v6 = 0;
    }
    v16 = CVPixelBufferRetain(v6);
    __p[0] = &off_24EC715B8;
    v23 = (std::__shared_weak_count *)__p[2];
    if (__p[2])
    {
      v24 = (unint64_t *)((char *)__p[2] + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        return v16;
      }
    }
    return v16;
  }
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "Keyframe is empty");
  v18 = (char *)operator new(0x70uLL);
  strcpy(v18, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
  if (a2)
  {
    *(_QWORD *)&v29.__val_ = 22;
    v29.__cat_ = std::generic_category();
    sub_2245321DC(&v29, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v19 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v19;
    v20 = v28;
    if (v28)
    {
      v21 = (unint64_t *)&v28->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  operator delete(v18);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_22325AB84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

CVPixelBufferRef CV3DReconKeyframeCreateDepthConfidenceImage(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v4;
  uint64_t v5;
  __CVBuffer *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  CFTypeRef v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  CVPixelBufferRef v16;
  char *v18;
  CFTypeRef v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v28;
  std::error_condition v29;

  if (!a1 || (v4 = *(_QWORD *)(a1 + 8)) == 0 || (v5 = *(_QWORD *)(v4 + 16)) == 0)
  {
    HIBYTE(__p[2]) = 16;
    strcpy((char *)__p, "Keyframe is NULL");
    v11 = (char *)operator new(0x70uLL);
    strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
    if (a2)
    {
      *(_QWORD *)&v29.__val_ = 22;
      v29.__cat_ = std::generic_category();
      sub_2245321DC(&v29, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v12 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v12;
      v13 = v28;
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    operator delete(v11);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    return 0;
  }
  if (sub_2231D01EC(v5))
  {
    sub_2231D5D8C(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16), __p);
    if (__p[1])
    {
      v6 = *(__CVBuffer **)__p[1];
      v7 = (std::__shared_weak_count *)*((_QWORD *)__p[1] + 1);
      if (v7)
      {
        v8 = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
        do
          v10 = __ldaxr(v8);
        while (__stlxr(v10 - 1, v8));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    else
    {
      v6 = 0;
    }
    v16 = CVPixelBufferRetain(v6);
    __p[0] = &off_24EC715B8;
    v23 = (std::__shared_weak_count *)__p[2];
    if (__p[2])
    {
      v24 = (unint64_t *)((char *)__p[2] + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        return v16;
      }
    }
    return v16;
  }
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "Keyframe is empty");
  v18 = (char *)operator new(0x70uLL);
  strcpy(v18, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
  if (a2)
  {
    *(_QWORD *)&v29.__val_ = 22;
    v29.__cat_ = std::generic_category();
    sub_2245321DC(&v29, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v19 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v19;
    v20 = v28;
    if (v28)
    {
      v21 = (unint64_t *)&v28->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  operator delete(v18);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_22325AF48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

CVPixelBufferRef CV3DReconKeyframeCreateNormalsImage(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v4;
  uint64_t v5;
  __CVBuffer *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  CFTypeRef v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  CVPixelBufferRef v16;
  char *v18;
  CFTypeRef v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v28;
  std::error_condition v29;

  if (!a1 || (v4 = *(_QWORD *)(a1 + 8)) == 0 || (v5 = *(_QWORD *)(v4 + 16)) == 0)
  {
    HIBYTE(__p[2]) = 16;
    strcpy((char *)__p, "Keyframe is NULL");
    v11 = (char *)operator new(0x70uLL);
    strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
    if (a2)
    {
      *(_QWORD *)&v29.__val_ = 22;
      v29.__cat_ = std::generic_category();
      sub_2245321DC(&v29, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v12 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v12;
      v13 = v28;
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    operator delete(v11);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    return 0;
  }
  if (sub_2231D01EC(v5))
  {
    sub_2231D5E68(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16), __p);
    if (__p[1])
    {
      v6 = *(__CVBuffer **)__p[1];
      v7 = (std::__shared_weak_count *)*((_QWORD *)__p[1] + 1);
      if (v7)
      {
        v8 = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
        do
          v10 = __ldaxr(v8);
        while (__stlxr(v10 - 1, v8));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    else
    {
      v6 = 0;
    }
    v16 = CVPixelBufferRetain(v6);
    __p[0] = &off_24EC715B8;
    v23 = (std::__shared_weak_count *)__p[2];
    if (__p[2])
    {
      v24 = (unint64_t *)((char *)__p[2] + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        return v16;
      }
    }
    return v16;
  }
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "Keyframe is empty");
  v18 = (char *)operator new(0x70uLL);
  strcpy(v18, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
  if (a2)
  {
    *(_QWORD *)&v29.__val_ = 22;
    v29.__cat_ = std::generic_category();
    sub_2245321DC(&v29, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v19 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v19;
    v20 = v28;
    if (v28)
    {
      v21 = (unint64_t *)&v28->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  operator delete(v18);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_22325B30C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

CVPixelBufferRef CV3DReconKeyframeCreateColorRgba16fImage(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v4;
  uint64_t v5;
  __CVBuffer *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  CFTypeRef v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  CVPixelBufferRef v16;
  char *v18;
  CFTypeRef v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v28;
  std::error_condition v29;

  if (!a1 || (v4 = *(_QWORD *)(a1 + 8)) == 0 || (v5 = *(_QWORD *)(v4 + 16)) == 0)
  {
    HIBYTE(__p[2]) = 16;
    strcpy((char *)__p, "Keyframe is NULL");
    v11 = (char *)operator new(0x70uLL);
    strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
    if (a2)
    {
      *(_QWORD *)&v29.__val_ = 22;
      v29.__cat_ = std::generic_category();
      sub_2245321DC(&v29, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v12 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v12;
      v13 = v28;
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    operator delete(v11);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    return 0;
  }
  if (sub_2231D01EC(v5))
  {
    sub_2231D5FAC(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16), __p);
    if (__p[1])
    {
      v6 = *(__CVBuffer **)__p[1];
      v7 = (std::__shared_weak_count *)*((_QWORD *)__p[1] + 1);
      if (v7)
      {
        v8 = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
        do
          v10 = __ldaxr(v8);
        while (__stlxr(v10 - 1, v8));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    else
    {
      v6 = 0;
    }
    v16 = CVPixelBufferRetain(v6);
    __p[0] = &off_24EC715B8;
    v23 = (std::__shared_weak_count *)__p[2];
    if (__p[2])
    {
      v24 = (unint64_t *)((char *)__p[2] + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        return v16;
      }
    }
    return v16;
  }
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "Keyframe is empty");
  v18 = (char *)operator new(0x70uLL);
  strcpy(v18, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
  if (a2)
  {
    *(_QWORD *)&v29.__val_ = 22;
    v29.__cat_ = std::generic_category();
    sub_2245321DC(&v29, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v19 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v19;
    v20 = v28;
    if (v28)
    {
      v21 = (unint64_t *)&v28->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  operator delete(v18);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_22325B6D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

CVPixelBufferRef CV3DReconKeyframeCreateSemanticLabelImage(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v4;
  uint64_t v5;
  __CVBuffer *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  CFTypeRef v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  CVPixelBufferRef v16;
  char *v18;
  CFTypeRef v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v28;
  std::error_condition v29;

  if (!a1 || (v4 = *(_QWORD *)(a1 + 8)) == 0 || (v5 = *(_QWORD *)(v4 + 16)) == 0)
  {
    HIBYTE(__p[2]) = 16;
    strcpy((char *)__p, "Keyframe is NULL");
    v11 = (char *)operator new(0x70uLL);
    strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
    if (a2)
    {
      *(_QWORD *)&v29.__val_ = 22;
      v29.__cat_ = std::generic_category();
      sub_2245321DC(&v29, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v12 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v12;
      v13 = v28;
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    operator delete(v11);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    return 0;
  }
  if (sub_2231D01EC(v5))
  {
    sub_2231D6088(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16), __p);
    if (__p[1])
    {
      v6 = *(__CVBuffer **)__p[1];
      v7 = (std::__shared_weak_count *)*((_QWORD *)__p[1] + 1);
      if (v7)
      {
        v8 = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
        do
          v10 = __ldaxr(v8);
        while (__stlxr(v10 - 1, v8));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    else
    {
      v6 = 0;
    }
    v16 = CVPixelBufferRetain(v6);
    __p[0] = &off_24EC715B8;
    v23 = (std::__shared_weak_count *)__p[2];
    if (__p[2])
    {
      v24 = (unint64_t *)((char *)__p[2] + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        return v16;
      }
    }
    return v16;
  }
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "Keyframe is empty");
  v18 = (char *)operator new(0x70uLL);
  strcpy(v18, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
  if (a2)
  {
    *(_QWORD *)&v29.__val_ = 22;
    v29.__cat_ = std::generic_category();
    sub_2245321DC(&v29, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v19 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v19;
    v20 = v28;
    if (v28)
    {
      v21 = (unint64_t *)&v28->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  operator delete(v18);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_22325BA94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

CVPixelBufferRef CV3DReconKeyframeCreateSemanticHistogramImage(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v4;
  uint64_t v5;
  __CVBuffer *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  CFTypeRef v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  CVPixelBufferRef v16;
  char *v18;
  CFTypeRef v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v28;
  std::error_condition v29;

  if (!a1 || (v4 = *(_QWORD *)(a1 + 8)) == 0 || (v5 = *(_QWORD *)(v4 + 16)) == 0)
  {
    HIBYTE(__p[2]) = 16;
    strcpy((char *)__p, "Keyframe is NULL");
    v11 = (char *)operator new(0x70uLL);
    strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
    if (a2)
    {
      *(_QWORD *)&v29.__val_ = 22;
      v29.__cat_ = std::generic_category();
      sub_2245321DC(&v29, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v12 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v12;
      v13 = v28;
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    operator delete(v11);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    return 0;
  }
  if (sub_2231D01EC(v5))
  {
    sub_2231D6088(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16), __p);
    if (__p[1])
    {
      v6 = *(__CVBuffer **)__p[1];
      v7 = (std::__shared_weak_count *)*((_QWORD *)__p[1] + 1);
      if (v7)
      {
        v8 = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
        do
          v10 = __ldaxr(v8);
        while (__stlxr(v10 - 1, v8));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    else
    {
      v6 = 0;
    }
    v16 = CVPixelBufferRetain(v6);
    __p[0] = &off_24EC715B8;
    v23 = (std::__shared_weak_count *)__p[2];
    if (__p[2])
    {
      v24 = (unint64_t *)((char *)__p[2] + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        return v16;
      }
    }
    return v16;
  }
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "Keyframe is empty");
  v18 = (char *)operator new(0x70uLL);
  strcpy(v18, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
  if (a2)
  {
    *(_QWORD *)&v29.__val_ = 22;
    v29.__cat_ = std::generic_category();
    sub_2245321DC(&v29, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v19 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v19;
    v20 = v28;
    if (v28)
    {
      v21 = (unint64_t *)&v28->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  operator delete(v18);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_22325BE58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

CVPixelBufferRef CV3DReconKeyframeCreateMaterialLabelImage(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v4;
  uint64_t v5;
  __CVBuffer *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  CFTypeRef v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  CVPixelBufferRef v16;
  char *v18;
  CFTypeRef v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v28;
  std::error_condition v29;

  if (!a1 || (v4 = *(_QWORD *)(a1 + 8)) == 0 || (v5 = *(_QWORD *)(v4 + 16)) == 0)
  {
    HIBYTE(__p[2]) = 16;
    strcpy((char *)__p, "Keyframe is NULL");
    v11 = (char *)operator new(0x70uLL);
    strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
    if (a2)
    {
      *(_QWORD *)&v29.__val_ = 22;
      v29.__cat_ = std::generic_category();
      sub_2245321DC(&v29, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v12 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v12;
      v13 = v28;
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    operator delete(v11);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    return 0;
  }
  if (sub_2231D01EC(v5))
  {
    sub_2231D61CC(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16), __p);
    if (__p[1])
    {
      v6 = *(__CVBuffer **)__p[1];
      v7 = (std::__shared_weak_count *)*((_QWORD *)__p[1] + 1);
      if (v7)
      {
        v8 = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
        do
          v10 = __ldaxr(v8);
        while (__stlxr(v10 - 1, v8));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    else
    {
      v6 = 0;
    }
    v16 = CVPixelBufferRetain(v6);
    __p[0] = &off_24EC715B8;
    v23 = (std::__shared_weak_count *)__p[2];
    if (__p[2])
    {
      v24 = (unint64_t *)((char *)__p[2] + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        return v16;
      }
    }
    return v16;
  }
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "Keyframe is empty");
  v18 = (char *)operator new(0x70uLL);
  strcpy(v18, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
  if (a2)
  {
    *(_QWORD *)&v29.__val_ = 22;
    v29.__cat_ = std::generic_category();
    sub_2245321DC(&v29, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v19 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v19;
    v20 = v28;
    if (v28)
    {
      v21 = (unint64_t *)&v28->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  operator delete(v18);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_22325C21C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

CVPixelBufferRef CV3DReconKeyframeCreateMaterialHistogramImage(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v4;
  uint64_t v5;
  __CVBuffer *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  CFTypeRef v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  CVPixelBufferRef v16;
  char *v18;
  CFTypeRef v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v28;
  std::error_condition v29;

  if (!a1 || (v4 = *(_QWORD *)(a1 + 8)) == 0 || (v5 = *(_QWORD *)(v4 + 16)) == 0)
  {
    HIBYTE(__p[2]) = 16;
    strcpy((char *)__p, "Keyframe is NULL");
    v11 = (char *)operator new(0x70uLL);
    strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
    if (a2)
    {
      *(_QWORD *)&v29.__val_ = 22;
      v29.__cat_ = std::generic_category();
      sub_2245321DC(&v29, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v12 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v12;
      v13 = v28;
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    operator delete(v11);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    return 0;
  }
  if (sub_2231D01EC(v5))
  {
    sub_2231D61CC(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16), __p);
    if (__p[1])
    {
      v6 = *(__CVBuffer **)__p[1];
      v7 = (std::__shared_weak_count *)*((_QWORD *)__p[1] + 1);
      if (v7)
      {
        v8 = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
        do
          v10 = __ldaxr(v8);
        while (__stlxr(v10 - 1, v8));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    else
    {
      v6 = 0;
    }
    v16 = CVPixelBufferRetain(v6);
    __p[0] = &off_24EC715B8;
    v23 = (std::__shared_weak_count *)__p[2];
    if (__p[2])
    {
      v24 = (unint64_t *)((char *)__p[2] + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        return v16;
      }
    }
    return v16;
  }
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "Keyframe is empty");
  v18 = (char *)operator new(0x70uLL);
  strcpy(v18, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
  if (a2)
  {
    *(_QWORD *)&v29.__val_ = 22;
    v29.__cat_ = std::generic_category();
    sub_2245321DC(&v29, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v19 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v19;
    v20 = v28;
    if (v28)
    {
      v21 = (unint64_t *)&v28->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  operator delete(v18);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_22325C5E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

float CV3DReconKeyframeGetClippingPointLux(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  char *v8;
  CFTypeRef v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  CFTypeRef v13;
  unint64_t *p_shared_owners;
  CFTypeRef v15;
  unint64_t *v16;
  char *v17;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v20;
  std::error_condition v21;

  if (a1 && (v4 = *(_QWORD *)(a1 + 8)) != 0 && (v5 = *(_QWORD *)(v4 + 16)) != 0)
  {
    if (!sub_2231D01EC(v5))
    {
      HIBYTE(__p[2]) = 17;
      strcpy((char *)__p, "Keyframe is empty");
      v8 = (char *)operator new(0x70uLL);
      v17 = v8;
      strcpy(v8, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
      if (!a2)
        goto LABEL_19;
      *(_QWORD *)&v21.__val_ = 22;
      v21.__cat_ = std::generic_category();
      sub_2245321DC(&v21, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v13 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v13;
      v10 = v20;
      if (!v20)
        goto LABEL_17;
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      goto LABEL_15;
    }
    v6 = (_BYTE *)sub_2231D050C(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16));
    if (v6[4])
      return *(float *)v6;
    __p[0] = operator new(0x28uLL);
    *(_OWORD *)&__p[1] = xmmword_2245C65C0;
    strcpy((char *)__p[0], "Clipping point lux is not available");
    v8 = (char *)operator new(0x70uLL);
    v17 = v8;
    strcpy(v8, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
    if (a2)
    {
      *(_QWORD *)&v21.__val_ = 22;
      v21.__cat_ = std::generic_category();
      sub_2245321DC(&v21, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v15 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v15;
      v10 = v20;
      if (!v20)
        goto LABEL_17;
      v16 = (unint64_t *)&v20->__shared_owners_;
      do
        v12 = __ldaxr(v16);
      while (__stlxr(v12 - 1, v16));
LABEL_15:
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
LABEL_17:
      v8 = v17;
    }
  }
  else
  {
    HIBYTE(__p[2]) = 16;
    strcpy((char *)__p, "Keyframe is NULL");
    v8 = (char *)operator new(0x70uLL);
    v17 = v8;
    strcpy(v8, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
    if (a2)
    {
      *(_QWORD *)&v21.__val_ = 22;
      v21.__cat_ = std::generic_category();
      sub_2245321DC(&v21, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v9 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v9;
      v10 = v20;
      if (!v20)
        goto LABEL_17;
      v11 = (unint64_t *)&v20->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      goto LABEL_15;
    }
  }
LABEL_19:
  operator delete(v8);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return -1.0;
}

void sub_22325C9A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__n128 CV3DReconKeyframeGetAWBICAM(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  char *v8;
  CFErrorRef v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  CFErrorRef v14;
  unint64_t *v15;
  CFErrorRef v16;
  unint64_t *v17;
  __int128 v18;
  char *v19;
  void *__p[4];
  CFErrorRef v21;
  std::__shared_weak_count *v22;
  std::error_condition v23;

  v18 = *MEMORY[0x24BDAEDF8];
  if (!a1 || (v4 = *(_QWORD *)(a1 + 8)) == 0 || (v5 = *(_QWORD *)(v4 + 16)) == 0)
  {
    HIBYTE(__p[2]) = 16;
    strcpy((char *)__p, "Keyframe is NULL");
    v8 = (char *)operator new(0x70uLL);
    v19 = v8;
    strcpy(v8, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
    if (!a2)
      goto LABEL_18;
    *(_QWORD *)&v23.__val_ = 22;
    v23.__cat_ = std::generic_category();
    sub_2245321DC(&v23, (uint64_t)__p, &v21);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v9 = v21;
    if (v21)
      CFRetain(v21);
    *a2 = v9;
    v10 = v22;
    if (!v22)
      goto LABEL_17;
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    goto LABEL_15;
  }
  if (sub_2231D01EC(v5))
  {
    v6 = sub_2231D0514(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16));
    if (*(_BYTE *)(v6 + 36))
    {
      *(_QWORD *)&v7 = *(_QWORD *)v6;
      DWORD2(v7) = *(_DWORD *)(v6 + 8);
      return (__n128)v7;
    }
    __p[0] = operator new(0x20uLL);
    *(_OWORD *)&__p[1] = xmmword_2245B8D00;
    strcpy((char *)__p[0], "AWB ICAM is not available");
    v8 = (char *)operator new(0x70uLL);
    v19 = v8;
    strcpy(v8, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
    if (a2)
    {
      *(_QWORD *)&v23.__val_ = 22;
      v23.__cat_ = std::generic_category();
      sub_2245321DC(&v23, (uint64_t)__p, &v21);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v16 = v21;
      if (v21)
        CFRetain(v21);
      *a2 = v16;
      v10 = v22;
      if (!v22)
        goto LABEL_17;
      v17 = (unint64_t *)&v22->__shared_owners_;
      do
        v12 = __ldaxr(v17);
      while (__stlxr(v12 - 1, v17));
LABEL_15:
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
LABEL_17:
      v8 = v19;
    }
  }
  else
  {
    HIBYTE(__p[2]) = 17;
    strcpy((char *)__p, "Keyframe is empty");
    v8 = (char *)operator new(0x70uLL);
    v19 = v8;
    strcpy(v8, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
    if (a2)
    {
      *(_QWORD *)&v23.__val_ = 22;
      v23.__cat_ = std::generic_category();
      sub_2245321DC(&v23, (uint64_t)__p, &v21);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v14 = v21;
      if (v21)
        CFRetain(v21);
      *a2 = v14;
      v10 = v22;
      if (!v22)
        goto LABEL_17;
      v15 = (unint64_t *)&v22->__shared_owners_;
      do
        v12 = __ldaxr(v15);
      while (__stlxr(v12 - 1, v15));
      goto LABEL_15;
    }
  }
LABEL_18:
  operator delete(v8);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return (__n128)v18;
}

void sub_22325CD78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;

  operator delete(v24);
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconKeyframeGetSceneTypeIndoorOutdoorLabel(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  __int128 v7;
  uint64_t v8;
  void *v9;
  char *v10;
  const void *v11;
  std::__shared_weak_count *cat;
  unint64_t *v13;
  unint64_t v14;
  const void *v16;
  unint64_t *v17;
  char *v18;
  const std::error_category *v19;
  CFErrorRef v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  BOOL v24;
  int v25;
  uint64_t v26;
  __int128 v27;
  void *__p[4];
  uint64_t v29;
  void *v30;
  int v31;
  int v32;
  unint64_t v33;
  char *v34;
  __int128 v35;
  CFErrorRef v36;
  std::__shared_weak_count *v37;
  std::error_condition v38;

  if (a1 && (v4 = *(_QWORD *)(a1 + 8)) != 0 && (v5 = *(_QWORD *)(v4 + 16)) != 0)
  {
    if (sub_2231D01EC(v5))
    {
      v6 = (_OWORD *)sub_2231D04FC(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16));
      v7 = *(_OWORD *)((char *)v6 + 12);
      *(_OWORD *)__p = *v6;
      *(_OWORD *)((char *)&__p[1] + 4) = v7;
      sub_223207688((uint64_t)&v29, (uint64_t)(v6 + 2));
      if (LODWORD(__p[0]) && HIDWORD(__p[0]))
      {
        v8 = *(unsigned __int8 *)(*(_QWORD *)(sub_2231D04FC(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16)) + 40) + 164);
        v9 = v30;
        if (!v30)
          return v8;
LABEL_50:
        if (v32)
          v24 = v31 == 0;
        else
          v24 = 1;
        if (v24)
          v25 = 0;
        else
          v25 = v32;
        if (v25 * (((381774871 * (v33 >> 34)) >> 32) >> 2) != -1)
          goto LABEL_59;
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v9 = v30;
        if (v30)
        {
LABEL_59:
          free(v9);
          return v8;
        }
        return v8;
      }
      v34 = (char *)operator new(0x30uLL);
      v35 = xmmword_2245C44E0;
      strcpy(v34, "Scene Indoor Outdoor type label not available");
      v18 = (char *)operator new(0x70uLL);
      v26 = (uint64_t)v18;
      v27 = xmmword_2245C76C0;
      strcpy(v18, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
      if (a2)
      {
        v19 = std::generic_category();
        *(_QWORD *)&v38.__val_ = 22;
        v38.__cat_ = v19;
        sub_2245321DC(&v38, (uint64_t)&v34, &v36);
        if (*a2)
          CFRelease(*a2);
        *a2 = 0;
        v20 = v36;
        if (v36)
          CFRetain(v36);
        *a2 = v20;
        v21 = v37;
        if (v37)
        {
          p_shared_owners = (unint64_t *)&v37->__shared_owners_;
          do
            v23 = __ldaxr(p_shared_owners);
          while (__stlxr(v23 - 1, p_shared_owners));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        if ((SHIBYTE(v27) & 0x80000000) == 0)
        {
LABEL_47:
          if (SHIBYTE(v35) < 0)
            operator delete(v34);
          v8 = 254;
          v9 = v30;
          if (!v30)
            return v8;
          goto LABEL_50;
        }
        v18 = (char *)v26;
      }
      operator delete(v18);
      goto LABEL_47;
    }
    HIBYTE(__p[2]) = 17;
    strcpy((char *)__p, "Keyframe is empty");
    v10 = (char *)operator new(0x70uLL);
    v34 = v10;
    v35 = xmmword_2245C76C0;
    strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
    if (!a2)
      goto LABEL_21;
    v26 = 22;
    *(_QWORD *)&v27 = std::generic_category();
    sub_2245321DC((const std::error_condition *)&v26, (uint64_t)__p, (CFErrorRef *)&v38);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v16 = *(const void **)&v38.__val_;
    if (*(_QWORD *)&v38.__val_)
      CFRetain(*(CFTypeRef *)&v38.__val_);
    *a2 = v16;
    cat = (std::__shared_weak_count *)v38.__cat_;
    if (v38.__cat_)
    {
      v17 = (unint64_t *)&v38.__cat_[1];
      do
        v14 = __ldaxr(v17);
      while (__stlxr(v14 - 1, v17));
      goto LABEL_17;
    }
  }
  else
  {
    HIBYTE(__p[2]) = 16;
    strcpy((char *)__p, "Keyframe is NULL");
    v10 = (char *)operator new(0x70uLL);
    v34 = v10;
    v35 = xmmword_2245C76C0;
    strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
    if (!a2)
    {
LABEL_21:
      operator delete(v10);
      goto LABEL_22;
    }
    v26 = 22;
    *(_QWORD *)&v27 = std::generic_category();
    sub_2245321DC((const std::error_condition *)&v26, (uint64_t)__p, (CFErrorRef *)&v38);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v11 = *(const void **)&v38.__val_;
    if (*(_QWORD *)&v38.__val_)
      CFRetain(*(CFTypeRef *)&v38.__val_);
    *a2 = v11;
    cat = (std::__shared_weak_count *)v38.__cat_;
    if (v38.__cat_)
    {
      v13 = (unint64_t *)&v38.__cat_[1];
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
LABEL_17:
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))cat->__on_zero_shared)(cat);
        std::__shared_weak_count::__release_weak(cat);
      }
    }
  }
  if (SHIBYTE(v35) < 0)
  {
    v10 = v34;
    goto LABEL_21;
  }
LABEL_22:
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return 254;
}

void sub_22325D23C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  void *v13;
  uint64_t v14;

  operator delete(v13);
  if (*(char *)(v14 - 65) < 0)
    operator delete(*(void **)(v14 - 88));
  sub_2231CFA24((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_22325D290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

float CV3DReconKeyframeGetSceneTypeIndoorOutdoorConfidence(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  __int128 v7;
  float v8;
  void *v9;
  void *v10;
  const void *v11;
  std::__shared_weak_count *cat;
  unint64_t *v13;
  unint64_t v14;
  const void *v16;
  unint64_t *v17;
  char *v18;
  const std::error_category *v19;
  CFErrorRef v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  BOOL v24;
  int v25;
  uint64_t v26;
  __int128 v27;
  void *__p[4];
  uint64_t v29;
  void *v30;
  int v31;
  int v32;
  unint64_t v33;
  void *v34;
  __int128 v35;
  CFErrorRef v36;
  std::__shared_weak_count *v37;
  std::error_condition v38;

  if (!a1 || (v4 = *(_QWORD *)(a1 + 8)) == 0 || (v5 = *(_QWORD *)(v4 + 16)) == 0)
  {
    HIBYTE(__p[2]) = 16;
    strcpy((char *)__p, "Keyframe is NULL");
    v10 = operator new(0x70uLL);
    v34 = v10;
    v35 = xmmword_2245C76C0;
    strcpy((char *)v10, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
    if (!a2)
      goto LABEL_21;
    v26 = 22;
    *(_QWORD *)&v27 = std::generic_category();
    sub_2245321DC((const std::error_condition *)&v26, (uint64_t)__p, (CFErrorRef *)&v38);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v11 = *(const void **)&v38.__val_;
    if (*(_QWORD *)&v38.__val_)
      CFRetain(*(CFTypeRef *)&v38.__val_);
    *a2 = v11;
    cat = (std::__shared_weak_count *)v38.__cat_;
    if (!v38.__cat_)
    {
LABEL_19:
      if ((SHIBYTE(v35) & 0x80000000) == 0)
      {
LABEL_22:
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
        return 0.0;
      }
      v10 = v34;
LABEL_21:
      operator delete(v10);
      goto LABEL_22;
    }
    v13 = (unint64_t *)&v38.__cat_[1];
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
LABEL_17:
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))cat->__on_zero_shared)(cat);
      std::__shared_weak_count::__release_weak(cat);
    }
    goto LABEL_19;
  }
  if (!sub_2231D01EC(v5))
  {
    HIBYTE(__p[2]) = 17;
    strcpy((char *)__p, "Keyframe is empty");
    v10 = operator new(0x70uLL);
    v34 = v10;
    v35 = xmmword_2245C76C0;
    strcpy((char *)v10, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
    if (!a2)
      goto LABEL_21;
    v26 = 22;
    *(_QWORD *)&v27 = std::generic_category();
    sub_2245321DC((const std::error_condition *)&v26, (uint64_t)__p, (CFErrorRef *)&v38);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v16 = *(const void **)&v38.__val_;
    if (*(_QWORD *)&v38.__val_)
      CFRetain(*(CFTypeRef *)&v38.__val_);
    *a2 = v16;
    cat = (std::__shared_weak_count *)v38.__cat_;
    if (!v38.__cat_)
      goto LABEL_19;
    v17 = (unint64_t *)&v38.__cat_[1];
    do
      v14 = __ldaxr(v17);
    while (__stlxr(v14 - 1, v17));
    goto LABEL_17;
  }
  v6 = (_OWORD *)sub_2231D04FC(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16));
  v7 = *(_OWORD *)((char *)v6 + 12);
  *(_OWORD *)__p = *v6;
  *(_OWORD *)((char *)&__p[1] + 4) = v7;
  sub_223207688((uint64_t)&v29, (uint64_t)(v6 + 2));
  if (LODWORD(__p[0]) && HIDWORD(__p[0]))
  {
    v8 = *(float *)(*(_QWORD *)(sub_2231D04FC(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16)) + 40) + 136);
    v9 = v30;
    if (!v30)
      return v8;
    goto LABEL_51;
  }
  v34 = operator new(0x30uLL);
  v35 = xmmword_2245C44E0;
  strcpy((char *)v34, "Scene Indoor Outdoor type label not available");
  v18 = (char *)operator new(0x70uLL);
  v26 = (uint64_t)v18;
  v27 = xmmword_2245C76C0;
  strcpy(v18, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
  if (!a2)
    goto LABEL_47;
  v19 = std::generic_category();
  *(_QWORD *)&v38.__val_ = 22;
  v38.__cat_ = v19;
  sub_2245321DC(&v38, (uint64_t)&v34, &v36);
  if (*a2)
    CFRelease(*a2);
  *a2 = 0;
  v20 = v36;
  if (v36)
    CFRetain(v36);
  *a2 = v20;
  v21 = v37;
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (SHIBYTE(v27) < 0)
  {
    v18 = (char *)v26;
LABEL_47:
    operator delete(v18);
  }
  if (SHIBYTE(v35) < 0)
    operator delete(v34);
  v8 = 0.0;
  v9 = v30;
  if (v30)
  {
LABEL_51:
    if (v32)
      v24 = v31 == 0;
    else
      v24 = 1;
    if (v24)
      v25 = 0;
    else
      v25 = v32;
    if (v25 * (((381774871 * (v33 >> 34)) >> 32) >> 2) != -1)
      goto LABEL_60;
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v9 = v30;
    if (v30)
LABEL_60:
      free(v9);
  }
  return v8;
}

void sub_22325D724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;

  operator delete(v27);
  if (a27 < 0)
    operator delete(__p);
  sub_2231CFA24((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_22325D778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconKeyframeGetCameraMetadata(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char __p[17];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 16);
      if (v4)
        return *(_QWORD *)sub_2231D051C(v4);
    }
  }
  v12 = 16;
  strcpy(__p, "Keyframe is NULL");
  v6 = (char *)operator new(0x70uLL);
  strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
  if (a2)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v7 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v7;
    v8 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  operator delete(v6);
  if (v12 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_22325D950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconKeyframeListRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 32);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DReconKeyframeListRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 32);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

unint64_t CV3DReconKeyframeListGetCount(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  char __p[22];
  char v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
  v11 = 21;
  strcpy(__p, "Keyframe list is NULL");
  v4 = (char *)operator new(0x70uLL);
  v9 = v4;
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
  if (a2)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v4 = v9;
  }
  operator delete(v4);
  if (v11 < 0)
    operator delete(*(void **)__p);
  return -1;
}

void sub_22325DB68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

char *CV3DReconKeyframeListCopyKeyframeAtIndex(uint64_t a1, unint64_t a2, CFTypeRef *a3)
{
  char *result;
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  char __p[22];
  char v14;
  CFTypeRef cf;
  std::__shared_weak_count *v16;
  std::error_condition v17;

  if (a1)
  {
    sub_2231761B0(a1, a2, a3, __p);
    result = (char *)operator new(0x20uLL, MEMORY[0x24BEDB6B8]);
    if (result)
    {
      *(_OWORD *)(result + 8) = *(_OWORD *)__p;
      *((_DWORD *)result + 6) = 1;
      *(_QWORD *)result = &unk_24EC1F238;
    }
    else
    {
      v10 = *(std::__shared_weak_count **)&__p[8];
      if (*(_QWORD *)&__p[8])
      {
        v11 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
          return 0;
        }
      }
    }
  }
  else
  {
    v14 = 21;
    strcpy(__p, "Keyframe list is NULL");
    v5 = (char *)operator new(0x70uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
    if (a3)
    {
      *(_QWORD *)&v17.__val_ = 22;
      v17.__cat_ = std::generic_category();
      sub_2245321DC(&v17, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (v14 < 0)
      operator delete(*(void **)__p);
    return 0;
  }
  return result;
}

void sub_22325DD9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconKeyframeListGetKeyframeUUIDAtIndex(uint64_t a1, unint64_t a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  char __p[22];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
    return sub_223175F6C(a1, a2, a3);
  v12 = 21;
  strcpy(__p, "Keyframe list is NULL");
  v5 = (char *)operator new(0x70uLL);
  v10 = v5;
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
  if (a3)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v6;
    v7 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v5 = v10;
  }
  operator delete(v5);
  if (v12 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_22325DF58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

double CV3DReconKeyframeListGetKeyframeToWorldTransformAtIndex(uint64_t a1, unint64_t a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  char __p[22];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
    return sub_22317644C(a1, a2, a3);
  v12 = 21;
  strcpy(__p, "Keyframe list is NULL");
  v5 = (char *)operator new(0x70uLL);
  v10 = v5;
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
  if (a3)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v6;
    v7 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v5 = v10;
  }
  operator delete(v5);
  if (v12 < 0)
    operator delete(*(void **)__p);
  return 0.0;
}

void sub_22325E104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *CV3DReconKeyframeCreatePointCloud(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  char *v11;
  CFErrorRef v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  CFErrorRef v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  char __p[19];
  char v22;
  char *v23;
  __int128 v24;
  CFErrorRef v25;
  std::__shared_weak_count *v26;
  std::error_condition v27;

  if (a1 && (v4 = *(_QWORD *)(a1 + 8)) != 0 && (v5 = *(_QWORD *)(v4 + 16)) != 0)
  {
    if ((_DWORD)a2)
    {
      sub_223CA3918(v5, a2, 0, (uint64_t)__p);
      v6 = (std::__shared_weak_count *)operator new(0x1D8uLL);
      v6->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      v6->__shared_weak_owners_ = 0;
      v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC27488;
      sub_223260DEC(&v6[1].__vftable, (uint64_t)__p);
      v8 = operator new(0x20uLL, MEMORY[0x24BEDB6B8]);
      v9 = v8;
      if (v8)
      {
        v8[1] = v6 + 1;
        v8[2] = v6;
        *((_DWORD *)v8 + 6) = 1;
        *v8 = &off_24EC297A0;
      }
      else
      {
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      sub_22326055C((uint64_t *)__p);
      return v9;
    }
    v22 = 18;
    strcpy(__p, "stride must be > 0");
    v11 = (char *)operator new(0x70uLL);
    v23 = v11;
    v24 = xmmword_2245C76C0;
    strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
    if (!a3)
      goto LABEL_22;
    *(_QWORD *)&v27.__val_ = 22;
    v27.__cat_ = std::generic_category();
    sub_2245321DC(&v27, (uint64_t)__p, &v25);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v17 = v25;
    if (v25)
      CFRetain(v25);
    *a3 = v17;
    v18 = v26;
    if (v26)
    {
      v19 = (unint64_t *)&v26->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  else
  {
    v22 = 16;
    strcpy(__p, "Keyframe is NULL");
    v11 = (char *)operator new(0x70uLL);
    v23 = v11;
    v24 = xmmword_2245C76C0;
    strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
    if (!a3)
    {
LABEL_22:
      operator delete(v11);
      goto LABEL_23;
    }
    *(_QWORD *)&v27.__val_ = 22;
    v27.__cat_ = std::generic_category();
    sub_2245321DC(&v27, (uint64_t)__p, &v25);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v12 = v25;
    if (v25)
      CFRetain(v25);
    *a3 = v12;
    v13 = v26;
    if (v26)
    {
      v14 = (unint64_t *)&v26->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
        if ((SHIBYTE(v24) & 0x80000000) == 0)
          goto LABEL_23;
        goto LABEL_21;
      }
    }
  }
  if (SHIBYTE(v24) < 0)
  {
LABEL_21:
    v11 = v23;
    goto LABEL_22;
  }
LABEL_23:
  if (v22 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_22325E450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  operator delete(v14);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *CV3DReconKeyframeCreatePointCloudWithAttributes(uint64_t a1, uint64_t a2, __int16 a3, CFTypeRef *a4)
{
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  char *v12;
  CFErrorRef v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  CFErrorRef v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  char __p[19];
  char v23;
  char *v24;
  __int128 v25;
  CFErrorRef v26;
  std::__shared_weak_count *v27;
  std::error_condition v28;

  if (a1 && (v5 = *(_QWORD *)(a1 + 8)) != 0 && (v6 = *(_QWORD *)(v5 + 16)) != 0)
  {
    if ((_DWORD)a2)
    {
      sub_223CA3918(v6, a2, a3 | 0x100, (uint64_t)__p);
      v7 = (std::__shared_weak_count *)operator new(0x1D8uLL);
      v7->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      v7->__shared_weak_owners_ = 0;
      v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC27488;
      sub_223260DEC(&v7[1].__vftable, (uint64_t)__p);
      v9 = operator new(0x20uLL, MEMORY[0x24BEDB6B8]);
      v10 = v9;
      if (v9)
      {
        v9[1] = v7 + 1;
        v9[2] = v7;
        *((_DWORD *)v9 + 6) = 1;
        *v9 = &off_24EC297A0;
      }
      else
      {
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      sub_22326055C((uint64_t *)__p);
      return v10;
    }
    v23 = 18;
    strcpy(__p, "stride must be > 0");
    v12 = (char *)operator new(0x70uLL);
    v24 = v12;
    v25 = xmmword_2245C76C0;
    strcpy(v12, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
    if (!a4)
      goto LABEL_22;
    *(_QWORD *)&v28.__val_ = 22;
    v28.__cat_ = std::generic_category();
    sub_2245321DC(&v28, (uint64_t)__p, &v26);
    if (*a4)
      CFRelease(*a4);
    *a4 = 0;
    v18 = v26;
    if (v26)
      CFRetain(v26);
    *a4 = v18;
    v19 = v27;
    if (v27)
    {
      v20 = (unint64_t *)&v27->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  else
  {
    v23 = 16;
    strcpy(__p, "Keyframe is NULL");
    v12 = (char *)operator new(0x70uLL);
    v24 = v12;
    v25 = xmmword_2245C76C0;
    strcpy(v12, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
    if (!a4)
    {
LABEL_22:
      operator delete(v12);
      goto LABEL_23;
    }
    *(_QWORD *)&v28.__val_ = 22;
    v28.__cat_ = std::generic_category();
    sub_2245321DC(&v28, (uint64_t)__p, &v26);
    if (*a4)
      CFRelease(*a4);
    *a4 = 0;
    v13 = v26;
    if (v26)
      CFRetain(v26);
    *a4 = v13;
    v14 = v27;
    if (v27)
    {
      v15 = (unint64_t *)&v27->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        if ((SHIBYTE(v25) & 0x80000000) == 0)
          goto LABEL_23;
        goto LABEL_21;
      }
    }
  }
  if (SHIBYTE(v25) < 0)
  {
LABEL_21:
    v12 = v24;
    goto LABEL_22;
  }
LABEL_23:
  if (v23 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_22325E7C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  operator delete(v14);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconKeyframeHistogramGetVotes(uint64_t result)
{
  return result;
}

uint64_t CV3DReconKeyframeHistogramGetLabel(unsigned int a1)
{
  return a1 >> 8;
}

_QWORD *CV3DReconSessionProcessFrameBundleResultCopyUpdatedKeyframesList(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  char *v7;
  CFTypeRef v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  CFTypeRef v12;
  unint64_t *v13;
  char *v14;
  _BYTE __p[24];
  CFTypeRef cf;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 472))
    {
      v3 = *(_QWORD *)(a1 + 456);
      if (v3)
      {
        v4 = operator new(0x28uLL, MEMORY[0x24BEDB6B8]);
        v5 = v4;
        if (v4)
        {
          sub_223260C0C(v4 + 1, (uint64_t *)(v3 + 1872));
          *((_DWORD *)v5 + 8) = 1;
          *v5 = &unk_24EC1F2A8;
        }
        return v5;
      }
    }
    *(_QWORD *)__p = operator new(0x20uLL);
    *(_OWORD *)&__p[8] = xmmword_2245B8EA0;
    strcpy(*(char **)__p, "Result has no keyframing output");
    v7 = (char *)operator new(0x70uLL);
    v14 = v7;
    strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
    if (a2)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_2245321DC(&v18, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v8 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v8;
      v9 = v17;
      if (!v17)
        goto LABEL_26;
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
LABEL_24:
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
LABEL_26:
      v7 = v14;
    }
  }
  else
  {
    __p[23] = 14;
    strcpy(__p, "Result is NULL");
    v7 = (char *)operator new(0x70uLL);
    v14 = v7;
    strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
    if (a2)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_2245321DC(&v18, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v12 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v12;
      v9 = v17;
      if (!v17)
        goto LABEL_26;
      v13 = (unint64_t *)&v17->__shared_owners_;
      do
        v11 = __ldaxr(v13);
      while (__stlxr(v11 - 1, v13));
      goto LABEL_24;
    }
  }
  operator delete(v7);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_22325EAD4(void *a1)
{
  uint64_t v1;

  MEMORY[0x227684CD0](v1, MEMORY[0x24BEDB6B8]);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x22325EA94);
}

void sub_22325EAFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *CV3DReconSessionProcessFrameBundleResultCopyNearbyKeyframesList(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  char *v7;
  CFTypeRef v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  CFTypeRef v12;
  unint64_t *v13;
  char *v14;
  _BYTE __p[24];
  CFTypeRef cf;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 472))
    {
      v3 = *(_QWORD *)(a1 + 456);
      if (v3)
      {
        v4 = operator new(0x28uLL, MEMORY[0x24BEDB6B8]);
        v5 = v4;
        if (v4)
        {
          sub_223260C0C(v4 + 1, (uint64_t *)(v3 + 2520));
          *((_DWORD *)v5 + 8) = 1;
          *v5 = &unk_24EC1F2A8;
        }
        return v5;
      }
    }
    *(_QWORD *)__p = operator new(0x20uLL);
    *(_OWORD *)&__p[8] = xmmword_2245B8EA0;
    strcpy(*(char **)__p, "Result has no keyframing output");
    v7 = (char *)operator new(0x70uLL);
    v14 = v7;
    strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
    if (a2)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_2245321DC(&v18, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v8 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v8;
      v9 = v17;
      if (!v17)
        goto LABEL_26;
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
LABEL_24:
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
LABEL_26:
      v7 = v14;
    }
  }
  else
  {
    __p[23] = 14;
    strcpy(__p, "Result is NULL");
    v7 = (char *)operator new(0x70uLL);
    v14 = v7;
    strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
    if (a2)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_2245321DC(&v18, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v12 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v12;
      v9 = v17;
      if (!v17)
        goto LABEL_26;
      v13 = (unint64_t *)&v17->__shared_owners_;
      do
        v11 = __ldaxr(v13);
      while (__stlxr(v11 - 1, v13));
      goto LABEL_24;
    }
  }
  operator delete(v7);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_22325EDE8(void *a1)
{
  uint64_t v1;

  MEMORY[0x227684CD0](v1, MEMORY[0x24BEDB6B8]);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x22325EDA8);
}

void sub_22325EE10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_DWORD *CV3DReconSessionProcessFrameBundleResultCopyPlanesUpdate(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  char *v7;
  CFTypeRef v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  CFTypeRef v12;
  unint64_t *v13;
  char *v14;
  void *__p[2];
  char v16;
  CFTypeRef cf;
  std::__shared_weak_count *v18;
  std::error_condition v19;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 496))
    {
      v3 = *(_QWORD *)(a1 + 480);
      if (v3)
      {
        v4 = operator new(0x188uLL, MEMORY[0x24BEDB6B8]);
        v5 = v4;
        if (v4)
        {
          sub_223261020((uint64_t)(v4 + 2), v3);
          v5[96] = 1;
          *(_QWORD *)v5 = &off_24EC29730;
        }
        return v5;
      }
    }
    v16 = 15;
    strcpy((char *)__p, "No plane update");
    v7 = (char *)operator new(0x70uLL);
    v14 = v7;
    strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
    if (a2)
    {
      *(_QWORD *)&v19.__val_ = 22;
      v19.__cat_ = std::generic_category();
      sub_2245321DC(&v19, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v8 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v8;
      v9 = v18;
      if (!v18)
        goto LABEL_26;
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
LABEL_24:
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
LABEL_26:
      v7 = v14;
    }
  }
  else
  {
    v16 = 14;
    strcpy((char *)__p, "Result is NULL");
    v7 = (char *)operator new(0x70uLL);
    v14 = v7;
    strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
    if (a2)
    {
      *(_QWORD *)&v19.__val_ = 22;
      v19.__cat_ = std::generic_category();
      sub_2245321DC(&v19, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v12 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v12;
      v9 = v18;
      if (!v18)
        goto LABEL_26;
      v13 = (unint64_t *)&v18->__shared_owners_;
      do
        v11 = __ldaxr(v13);
      while (__stlxr(v11 - 1, v13));
      goto LABEL_24;
    }
  }
  operator delete(v7);
  if (v16 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_22325F0E8(void *a1)
{
  uint64_t v1;

  MEMORY[0x227684CD0](v1, MEMORY[0x24BEDB6B8]);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x22325F0A8);
}

void sub_22325F110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconSessionProcessFrameBundleResultGetPlanesUpdate(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  CFTypeRef v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  void *__p[2];
  char v16;
  CFTypeRef cf;
  std::__shared_weak_count *v18;
  std::error_condition v19;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 496))
    {
      v3 = *(_QWORD *)(a1 + 480);
      if (v3)
        return v3 - 8;
    }
    v16 = 15;
    strcpy((char *)__p, "No plane update");
    v5 = (char *)operator new(0x70uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
    if (a2)
    {
      *(_QWORD *)&v19.__val_ = 22;
      v19.__cat_ = std::generic_category();
      sub_2245321DC(&v19, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v6;
      v7 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if ((v16 & 0x80000000) == 0)
      return 0;
  }
  else
  {
    v16 = 14;
    strcpy((char *)__p, "Result is NULL");
    v10 = (char *)operator new(0x70uLL);
    strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
    if (a2)
    {
      *(_QWORD *)&v19.__val_ = 22;
      v19.__cat_ = std::generic_category();
      sub_2245321DC(&v19, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v11 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v11;
      v12 = v18;
      if (v18)
      {
        v13 = (unint64_t *)&v18->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    operator delete(v10);
    if ((v16 & 0x80000000) == 0)
      return 0;
  }
  operator delete(__p[0]);
  return 0;
}

void sub_22325F41C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

double CV3DReconSessionProcessFrameBundleGetLastColorInvalidationTimestamp(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  CFTypeRef v10;
  unint64_t *v11;
  char *v12;
  _BYTE __p[24];
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 472))
    {
      v3 = *(_QWORD *)(a1 + 456);
      if (v3)
        return (double)*(uint64_t *)(v3 + 2184) / 1000000000.0;
    }
    *(_QWORD *)__p = operator new(0x20uLL);
    *(_OWORD *)&__p[8] = xmmword_2245B8EA0;
    strcpy(*(char **)__p, "Result has no keyframing output");
    v5 = (char *)operator new(0x70uLL);
    v12 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
    if (a2)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_2245321DC(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v6;
      v7 = v15;
      if (!v15)
        goto LABEL_24;
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
LABEL_22:
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
LABEL_24:
      v5 = v12;
    }
  }
  else
  {
    __p[23] = 14;
    strcpy(__p, "Result is NULL");
    v5 = (char *)operator new(0x70uLL);
    v12 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
    if (a2)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_2245321DC(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v10 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v10;
      v7 = v15;
      if (!v15)
        goto LABEL_24;
      v11 = (unint64_t *)&v15->__shared_owners_;
      do
        v9 = __ldaxr(v11);
      while (__stlxr(v9 - 1, v11));
      goto LABEL_22;
    }
  }
  operator delete(v5);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  return NAN;
}

void sub_22325F6E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void **CV3DReconNVSRelease(unsigned int *a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  void *v11;

  sub_223227930((uint64_t *)&v11);
  if (a1)
  {
    v7 = a1 + 6;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 8))(a1);
  }
  return sub_22322797C(&v11, v2, v3, v4, v5, v6);
}

uint64_t CV3DReconNVSRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 24);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CV3DReconSessionCreateNVS(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v11;
  void *__p[2];
  char v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  v13 = 14;
  strcpy((char *)__p, "SPI deprecated");
  v5 = (char *)operator new(0x70uLL);
  v11 = v5;
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
  if (a4)
  {
    *(_QWORD *)&v16.__val_ = 102;
    v16.__cat_ = std::generic_category();
    sub_2245321DC(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a4)
      CFRelease(*a4);
    *a4 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a4 = v6;
    v7 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v5 = v11;
  }
  operator delete(v5);
  if (v13 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_22325F910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconSessionCreateNVSWithNKeyframes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, CFTypeRef *a5)
{
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v12;
  void *__p[2];
  char v14;
  CFTypeRef cf;
  std::__shared_weak_count *v16;
  std::error_condition v17;

  v14 = 14;
  strcpy((char *)__p, "SPI deprecated");
  v6 = (char *)operator new(0x70uLL);
  v12 = v6;
  strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
  if (a5)
  {
    *(_QWORD *)&v17.__val_ = 102;
    v17.__cat_ = std::generic_category();
    sub_2245321DC(&v17, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a5)
      CFRelease(*a5);
    *a5 = 0;
    v7 = cf;
    if (cf)
      CFRetain(cf);
    *a5 = v7;
    v8 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v6 = v12;
  }
  operator delete(v6);
  if (v14 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_22325FAB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconNVSCopyToCVPixelBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, CFTypeRef *a5)
{
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v12;
  void *__p[2];
  char v14;
  CFTypeRef cf;
  std::__shared_weak_count *v16;
  std::error_condition v17;

  v14 = 14;
  strcpy((char *)__p, "SPI deprecated");
  v6 = (char *)operator new(0x70uLL);
  v12 = v6;
  strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
  if (a5)
  {
    *(_QWORD *)&v17.__val_ = 102;
    v17.__cat_ = std::generic_category();
    sub_2245321DC(&v17, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a5)
      CFRelease(*a5);
    *a5 = 0;
    v7 = cf;
    if (cf)
      CFRetain(cf);
    *a5 = v7;
    v8 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v6 = v12;
  }
  operator delete(v6);
  if (v14 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_22325FC60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *CV3DReconSessionCreateKeyframesOverlappingFrustum(uint64_t a1, CFTypeRef *a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6, float a7, float a8, float a9, float a10)
{
  char *v12;
  CFTypeRef v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *__p[2];
  char v18;
  CFTypeRef cf;
  std::__shared_weak_count *v20;
  std::error_condition v21;

  if (a1)
    return sub_2232DABF4(a1 + 8, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  v18 = 15;
  strcpy((char *)__p, "Session is NULL");
  v12 = (char *)operator new(0x70uLL);
  strcpy(v12, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
  if (a2)
  {
    *(_QWORD *)&v21.__val_ = 22;
    v21.__cat_ = std::generic_category();
    sub_2245321DC(&v21, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v13 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v13;
    v14 = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  operator delete(v12);
  if (v18 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_22325FE20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

CFTypeRef CV3DReconSessionCreateKeyframeUUIDsListForSphere(uint64_t a1, CFTypeRef *a2, __n128 a3, float a4)
{
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p[2];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
    return sub_2232DB000(a1 + 8, a2, a3, a4);
  v12 = 15;
  strcpy((char *)__p, "Session is NULL");
  v6 = (char *)operator new(0x70uLL);
  strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
  if (a2)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v7 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v7;
    v8 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  operator delete(v6);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_22325FFE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

CFTypeRef CV3DReconSessionCreateKeyframeUUIDsListUpdatedAfterTimestamp(uint64_t a1, CFTypeRef *a2, double a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  void *__p[2];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
    return sub_2232DB264(a1 + 8, a2, a3);
  v12 = 15;
  strcpy((char *)__p, "Session is NULL");
  v5 = (char *)operator new(0x70uLL);
  v10 = v5;
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
  if (a2)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v6;
    v7 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v5 = v10;
  }
  operator delete(v5);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_2232601A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *CV3DReconSessionCopyKeyframeFromUUID(uint64_t a1, const __CFUUID *a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  void *__p[2];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
    return sub_2232DB4CC(a1 + 8, a2, a3);
  v12 = 15;
  strcpy((char *)__p, "Session is NULL");
  v5 = (char *)operator new(0x70uLL);
  v10 = v5;
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
  if (a3)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v6;
    v7 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v5 = v10;
  }
  operator delete(v5);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_223260360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconSessionInvalidateKeyframesColor(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  void *__p[2];
  char v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return sub_2232DBA8C(a1 + 8, a2);
  v11 = 15;
  strcpy((char *)__p, "Session is NULL");
  v4 = (char *)operator new(0x70uLL);
  v9 = v4;
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframing.cpp");
  if (a2)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v4 = v9;
  }
  operator delete(v4);
  if (v11 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_223260520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *sub_22326055C(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v45;
  int v46;
  uint64_t *v47;

  v2 = a1[52];
  if (v2)
  {
    a1[53] = v2;
    v3 = (unint64_t)(a1[54] - v2) >> 4;
    v45 = v2;
    v46 = v3;
    v4 = *((unsigned int *)a1 + 111);
    if ((_DWORD)v4 == -1)
      sub_22316DD70();
    v47 = &v45;
    ((void (*)(uint64_t **, uint64_t *))off_24EC273C8[v4])(&v47, a1 + 55);
  }
  v5 = a1[48];
  if (v5)
  {
    a1[49] = v5;
    v6 = (unint64_t)(a1[50] - v5) >> 2;
    v45 = v5;
    v46 = v6;
    v7 = *((unsigned int *)a1 + 103);
    if ((_DWORD)v7 == -1)
      sub_22316DD70();
    v47 = &v45;
    ((void (*)(uint64_t **, uint64_t *))off_24EC273D8[v7])(&v47, a1 + 51);
  }
  v8 = a1[44];
  if (v8)
  {
    a1[45] = v8;
    v9 = *((_DWORD *)a1 + 92) - v8;
    v45 = v8;
    v46 = v9;
    v10 = *((unsigned int *)a1 + 95);
    if ((_DWORD)v10 == -1)
      sub_22316DD70();
    v47 = &v45;
    ((void (*)(uint64_t **, uint64_t *))off_24EC273E8[v10])(&v47, a1 + 47);
  }
  v11 = a1[40];
  if (v11)
  {
    a1[41] = v11;
    v12 = (unint64_t)(a1[42] - v11) >> 2;
    v45 = v11;
    v46 = v12;
    v13 = *((unsigned int *)a1 + 87);
    if ((_DWORD)v13 == -1)
      sub_22316DD70();
    v47 = &v45;
    ((void (*)(uint64_t **, uint64_t *))off_24EC273D8[v13])(&v47, a1 + 43);
  }
  v14 = a1[36];
  if (v14)
  {
    a1[37] = v14;
    v15 = (unint64_t)(a1[38] - v14) >> 2;
    v45 = v14;
    v46 = v15;
    v16 = *((unsigned int *)a1 + 79);
    if ((_DWORD)v16 == -1)
      sub_22316DD70();
    v47 = &v45;
    ((void (*)(uint64_t **, uint64_t *))off_24EC273D8[v16])(&v47, a1 + 39);
  }
  v17 = a1[32];
  if (v17)
  {
    a1[33] = v17;
    v18 = *((_DWORD *)a1 + 68) - v17;
    v45 = v17;
    v46 = v18;
    v19 = *((unsigned int *)a1 + 71);
    if ((_DWORD)v19 == -1)
      sub_22316DD70();
    v47 = &v45;
    ((void (*)(uint64_t **, uint64_t *))off_24EC273E8[v19])(&v47, a1 + 35);
  }
  v20 = a1[28];
  if (v20)
  {
    a1[29] = v20;
    v21 = (unint64_t)(a1[30] - v20) >> 2;
    v45 = v20;
    v46 = v21;
    v22 = *((unsigned int *)a1 + 63);
    if ((_DWORD)v22 == -1)
      sub_22316DD70();
    v47 = &v45;
    ((void (*)(uint64_t **, uint64_t *))off_24EC273D8[v22])(&v47, a1 + 31);
  }
  v23 = a1[24];
  if (v23)
  {
    a1[25] = v23;
    v24 = (unint64_t)(a1[26] - v23) >> 2;
    v45 = v23;
    v46 = v24;
    v25 = *((unsigned int *)a1 + 55);
    if ((_DWORD)v25 == -1)
      sub_22316DD70();
    v47 = &v45;
    ((void (*)(uint64_t **, uint64_t *))off_24EC273D8[v25])(&v47, a1 + 27);
  }
  v26 = a1[20];
  if (v26)
  {
    a1[21] = v26;
    v27 = *((_DWORD *)a1 + 44) - v26;
    v45 = v26;
    v46 = v27;
    v28 = *((unsigned int *)a1 + 47);
    if ((_DWORD)v28 == -1)
      sub_22316DD70();
    v47 = &v45;
    ((void (*)(uint64_t **, uint64_t *))off_24EC273E8[v28])(&v47, a1 + 23);
  }
  v29 = a1[16];
  if (v29)
  {
    a1[17] = v29;
    v30 = -1431655765 * ((unint64_t)(a1[18] - v29) >> 2);
    v45 = v29;
    v46 = v30;
    v31 = *((unsigned int *)a1 + 39);
    if ((_DWORD)v31 == -1)
      sub_22316DD70();
    v47 = &v45;
    ((void (*)(uint64_t **, uint64_t *))off_24EC273F8[v31])(&v47, a1 + 19);
  }
  v32 = a1[12];
  if (v32)
  {
    a1[13] = v32;
    v33 = -1431655765 * ((unint64_t)(a1[14] - v32) >> 2);
    v45 = v32;
    v46 = v33;
    v34 = *((unsigned int *)a1 + 31);
    if ((_DWORD)v34 == -1)
      sub_22316DD70();
    v47 = &v45;
    ((void (*)(uint64_t **, uint64_t *))off_24EC273F8[v34])(&v47, a1 + 15);
  }
  v35 = a1[8];
  if (v35)
  {
    a1[9] = v35;
    v36 = (unint64_t)(a1[10] - v35) >> 2;
    v45 = v35;
    v46 = v36;
    v37 = *((unsigned int *)a1 + 23);
    if ((_DWORD)v37 == -1)
      sub_22316DD70();
    v47 = &v45;
    ((void (*)(uint64_t **, uint64_t *))off_24EC27408[v37])(&v47, a1 + 11);
  }
  v38 = a1[4];
  if (v38)
  {
    a1[5] = v38;
    v39 = (unint64_t)(a1[6] - v38) >> 2;
    v45 = v38;
    v46 = v39;
    v40 = *((unsigned int *)a1 + 15);
    if ((_DWORD)v40 == -1)
      sub_22316DD70();
    v47 = &v45;
    ((void (*)(uint64_t **, uint64_t *))off_24EC27418[v40])(&v47, a1 + 7);
  }
  v41 = *a1;
  if (*a1)
  {
    a1[1] = v41;
    v42 = -1431655765 * ((unint64_t)(a1[2] - v41) >> 2);
    v45 = v41;
    v46 = v42;
    v43 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v43 == -1)
      sub_22316DD70();
    v47 = &v45;
    ((void (*)(uint64_t **, uint64_t *))off_24EC273F8[v43])(&v47, a1 + 3);
  }
  return a1;
}

void sub_223260A34(void ***a1)
{
  operator delete(**a1);
}

uint64_t sub_223260A40(_QWORD **a1)
{
  uint64_t result;

  result = MEMORY[0x2276857A4](*MEMORY[0x24BDAEC58], **a1, 16 * *((unsigned int *)*a1 + 2));
  if ((_DWORD)result)
  {
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Memory/include/Kit/Memory/VMAllocator.hpp", 81, (uint64_t)"", 0, (uint64_t)"Illegal or non-allocated address specified.", 43, (void (*)(void **))sub_22457406C);
    abort();
  }
  return result;
}

void sub_223260AB0(void ***a1)
{
  operator delete(**a1);
}

uint64_t sub_223260ABC(_QWORD **a1)
{
  uint64_t result;

  result = MEMORY[0x2276857A4](*MEMORY[0x24BDAEC58], **a1, 4 * *((unsigned int *)*a1 + 2));
  if ((_DWORD)result)
  {
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Memory/include/Kit/Memory/VMAllocator.hpp", 81, (uint64_t)"", 0, (uint64_t)"Illegal or non-allocated address specified.", 43, (void (*)(void **))sub_22457406C);
    abort();
  }
  return result;
}

void sub_223260B2C(void ***a1)
{
  operator delete(**a1);
}

uint64_t sub_223260B38(_QWORD **a1)
{
  uint64_t result;

  result = MEMORY[0x2276857A4](*MEMORY[0x24BDAEC58], **a1, 4 * *((unsigned int *)*a1 + 2));
  if ((_DWORD)result)
  {
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Memory/include/Kit/Memory/VMAllocator.hpp", 81, (uint64_t)"", 0, (uint64_t)"Illegal or non-allocated address specified.", 43, (void (*)(void **))sub_22457406C);
    abort();
  }
  return result;
}

void sub_223260BA8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC27438;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223260BB8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC27438;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223260BE8(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    _Block_release(v1);
}

_QWORD *sub_223260C0C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  _QWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 != *a2)
  {
    v6 = 0xEF7BDEF7BDEF7BDFLL * (v5 >> 3);
    if (v6 >= 0x108421084210843)
      sub_22316E078();
    v7 = operator new(v5);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[31 * v6];
    do
    {
      *(_OWORD *)v7 = *(_OWORD *)v3;
      v17 = *(_QWORD *)(v3 + 24);
      v7[2] = *(_QWORD *)(v3 + 16);
      v7[3] = v17;
      if (v17)
      {
        v18 = (unint64_t *)(v17 + 8);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      v8 = *(_OWORD *)(v3 + 32);
      v9 = *(_OWORD *)(v3 + 48);
      v10 = *(_OWORD *)(v3 + 80);
      *((_OWORD *)v7 + 4) = *(_OWORD *)(v3 + 64);
      *((_OWORD *)v7 + 5) = v10;
      *((_OWORD *)v7 + 2) = v8;
      *((_OWORD *)v7 + 3) = v9;
      *((_OWORD *)v7 + 6) = *(_OWORD *)(v3 + 96);
      v11 = *(_OWORD *)(v3 + 112);
      v12 = *(_OWORD *)(v3 + 128);
      v13 = *(_OWORD *)(v3 + 160);
      *((_OWORD *)v7 + 9) = *(_OWORD *)(v3 + 144);
      *((_OWORD *)v7 + 10) = v13;
      *((_OWORD *)v7 + 7) = v11;
      *((_OWORD *)v7 + 8) = v12;
      v14 = *(_OWORD *)(v3 + 176);
      v15 = *(_OWORD *)(v3 + 192);
      v16 = *(_OWORD *)(v3 + 224);
      *((_OWORD *)v7 + 13) = *(_OWORD *)(v3 + 208);
      *((_OWORD *)v7 + 14) = v16;
      *((_OWORD *)v7 + 11) = v14;
      *((_OWORD *)v7 + 12) = v15;
      *((_WORD *)v7 + 120) = *(_WORD *)(v3 + 240);
      v3 += 248;
      v7 += 31;
    }
    while (v3 != v4);
    a1[1] = v7;
  }
  return a1;
}

void sub_223260D24(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 28);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 248;
      }
      while (v4 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_223260DA0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC27488;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223260DB0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC27488;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t *sub_223260DE0(uint64_t a1)
{
  return sub_22326055C((uint64_t *)(a1 + 24));
}

__n128 sub_223260DEC(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = *(_QWORD *)(a2 + 56);
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  a1[6] = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  a1[8] = 0;
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = *(_QWORD *)(a2 + 88);
  *((_OWORD *)a1 + 4) = *(_OWORD *)(a2 + 64);
  a1[10] = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  a1[12] = 0;
  a1[13] = 0;
  a1[14] = 0;
  a1[15] = *(_QWORD *)(a2 + 120);
  *((_OWORD *)a1 + 6) = *(_OWORD *)(a2 + 96);
  a1[14] = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  a1[16] = 0;
  a1[17] = 0;
  a1[18] = 0;
  a1[19] = *(_QWORD *)(a2 + 152);
  *((_OWORD *)a1 + 8) = *(_OWORD *)(a2 + 128);
  a1[18] = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  a1[20] = 0;
  a1[21] = 0;
  a1[22] = 0;
  a1[23] = *(_QWORD *)(a2 + 184);
  *((_OWORD *)a1 + 10) = *(_OWORD *)(a2 + 160);
  a1[22] = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  a1[24] = 0;
  a1[25] = 0;
  a1[26] = 0;
  a1[27] = *(_QWORD *)(a2 + 216);
  *((_OWORD *)a1 + 12) = *(_OWORD *)(a2 + 192);
  a1[26] = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a2 + 208) = 0;
  a1[28] = 0;
  a1[29] = 0;
  a1[30] = 0;
  a1[31] = *(_QWORD *)(a2 + 248);
  *((_OWORD *)a1 + 14) = *(_OWORD *)(a2 + 224);
  a1[30] = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a2 + 224) = 0;
  *(_QWORD *)(a2 + 232) = 0;
  *(_QWORD *)(a2 + 240) = 0;
  a1[32] = 0;
  a1[33] = 0;
  a1[34] = 0;
  a1[35] = *(_QWORD *)(a2 + 280);
  *((_OWORD *)a1 + 16) = *(_OWORD *)(a2 + 256);
  a1[34] = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a2 + 256) = 0;
  *(_QWORD *)(a2 + 264) = 0;
  *(_QWORD *)(a2 + 272) = 0;
  a1[36] = 0;
  a1[37] = 0;
  a1[38] = 0;
  a1[39] = *(_QWORD *)(a2 + 312);
  *((_OWORD *)a1 + 18) = *(_OWORD *)(a2 + 288);
  a1[38] = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a2 + 288) = 0;
  *(_QWORD *)(a2 + 296) = 0;
  *(_QWORD *)(a2 + 304) = 0;
  a1[40] = 0;
  a1[41] = 0;
  a1[42] = 0;
  a1[43] = *(_QWORD *)(a2 + 344);
  *((_OWORD *)a1 + 20) = *(_OWORD *)(a2 + 320);
  a1[42] = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a2 + 320) = 0;
  *(_QWORD *)(a2 + 328) = 0;
  *(_QWORD *)(a2 + 336) = 0;
  a1[44] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[47] = *(_QWORD *)(a2 + 376);
  *((_OWORD *)a1 + 22) = *(_OWORD *)(a2 + 352);
  a1[46] = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a2 + 352) = 0;
  *(_QWORD *)(a2 + 360) = 0;
  *(_QWORD *)(a2 + 368) = 0;
  a1[48] = 0;
  a1[49] = 0;
  a1[50] = 0;
  a1[51] = *(_QWORD *)(a2 + 408);
  *((_OWORD *)a1 + 24) = *(_OWORD *)(a2 + 384);
  a1[50] = *(_QWORD *)(a2 + 400);
  *(_QWORD *)(a2 + 384) = 0;
  *(_QWORD *)(a2 + 392) = 0;
  *(_QWORD *)(a2 + 400) = 0;
  a1[52] = 0;
  a1[53] = 0;
  a1[54] = 0;
  a1[55] = *(_QWORD *)(a2 + 440);
  result = *(__n128 *)(a2 + 416);
  *((__n128 *)a1 + 26) = result;
  a1[54] = *(_QWORD *)(a2 + 432);
  *(_QWORD *)(a2 + 416) = 0;
  *(_QWORD *)(a2 + 424) = 0;
  *(_QWORD *)(a2 + 432) = 0;
  return result;
}

uint64_t sub_223261020(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  int64_t v19;
  char *v20;
  char *v21;
  char v22;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  sub_22324A664(a1 + 8, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), 0x34F72C234F72C235 * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 4));
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v5 = *(_BYTE **)(a2 + 32);
  v4 = *(_BYTE **)(a2 + 40);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      sub_22316E078();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a1 + 32) = v7;
    *(_QWORD *)(a1 + 40) = v7;
    v8 = &v7[16 * (v6 >> 4)];
    *(_QWORD *)(a1 + 48) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a1 + 40) = v8;
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v10 = *(_BYTE **)(a2 + 56);
  v9 = *(_BYTE **)(a2 + 64);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0)
      sub_22316E078();
    v12 = (char *)operator new(v9 - v10);
    *(_QWORD *)(a1 + 56) = v12;
    *(_QWORD *)(a1 + 64) = v12;
    v13 = &v12[16 * (v11 >> 4)];
    *(_QWORD *)(a1 + 72) = v13;
    memcpy(v12, v10, v11);
    *(_QWORD *)(a1 + 64) = v13;
  }
  sub_223261304(a1 + 80, a2 + 80);
  v14 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  v18 = *(_BYTE **)(a2 + 136);
  v17 = *(_BYTE **)(a2 + 144);
  v19 = v17 - v18;
  if (v17 != v18)
  {
    if (v19 < 0)
      sub_22316E078();
    v20 = (char *)operator new(v17 - v18);
    *(_QWORD *)(a1 + 136) = v20;
    *(_QWORD *)(a1 + 144) = v20;
    v21 = &v20[16 * (v19 >> 4)];
    *(_QWORD *)(a1 + 152) = v21;
    memcpy(v20, v18, v19);
    *(_QWORD *)(a1 + 144) = v21;
  }
  sub_2232617A8((_QWORD *)(a1 + 160), (uint64_t *)(a2 + 160));
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  sub_2232619D8((_QWORD *)(a1 + 192), (uint64_t *)(a2 + 192));
  v22 = *(_BYTE *)(a2 + 216);
  *(_BYTE *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 216) = v22;
  *(_BYTE *)(a1 + 368) = 0;
  if (*(_BYTE *)(a2 + 368))
  {
    sub_223261BD8(a1 + 224, (uint64_t *)(a2 + 224));
    *(_BYTE *)(a1 + 368) = 1;
  }
  return a1;
}

void sub_223261228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  void **v11;
  uint64_t v12;
  void **v13;
  void **v14;
  uint64_t v15;
  void **v16;
  void **v17;
  void **v18;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  if (*(_BYTE *)(v12 + 368))
  {
    sub_223167354(v12 + 288);
    v20 = *(void **)(v12 + 248);
    if (v20)
    {
      *(_QWORD *)(v12 + 256) = v20;
      operator delete(v20);
    }
    v21 = *v11;
    if (*v11)
    {
      *(_QWORD *)(v12 + 232) = v21;
      operator delete(v21);
    }
  }
  sub_22319A750(v18);
  sub_22319A750(v17);
  v22 = *v16;
  if (*v16)
  {
    *(_QWORD *)(v12 + 144) = v22;
    operator delete(v22);
  }
  sub_223167354(v15);
  sub_223183FF0(a10);
  v23 = *v13;
  if (*v13)
  {
    *(_QWORD *)(v12 + 64) = v23;
    operator delete(v23);
    v24 = *v14;
    if (!*v14)
    {
LABEL_10:
      sub_223248E48(v10);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v24 = *v14;
    if (!*v14)
      goto LABEL_10;
  }
  *(_QWORD *)(v12 + 40) = v24;
  operator delete(v24);
  sub_223248E48(v10);
  _Unwind_Resume(a1);
}

void sub_2232612F4()
{
  _QWORD *v0;

  if (*v0)
    JUMPOUT(0x2232612DCLL);
  JUMPOUT(0x2232612BCLL);
}

uint64_t sub_223261304(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_2231B0668(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_223261444(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_22326141C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223183FF0(v1);
  _Unwind_Resume(a1);
}

void sub_223261430(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223183FF0(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_223261444(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v15;
  _QWORD *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  float v21;
  float v22;
  uint64_t v23;
  _QWORD *v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t prime;
  int8x8_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;

  v7 = sub_22456636C((unsigned __int8 *)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v12[1];
            if (v15 == v7)
            {
              if (v12[2] == *(_QWORD *)a2 && v12[3] == *(_QWORD *)(a2 + 8))
                return v12;
            }
            else if ((v15 & (v9 - 1)) != v3)
            {
              goto LABEL_31;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_31;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == v7)
          {
            if (v12[2] == *(_QWORD *)a2 && v12[3] == *(_QWORD *)(a2 + 8))
              return v12;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_31:
  v17 = (_QWORD *)(a1 + 16);
  v12 = operator new(0x30uLL);
  *v12 = 0;
  v12[1] = v8;
  *((_OWORD *)v12 + 1) = *(_OWORD *)a3;
  v18 = *(_QWORD *)(a3 + 24);
  v12[4] = *(_QWORD *)(a3 + 16);
  v12[5] = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v22 = *(float *)(a1 + 32);
  if (v9 && (float)(v22 * (float)v9) >= v21)
  {
    v23 = *(_QWORD *)a1;
    v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v24)
    {
LABEL_37:
      *v12 = *v24;
LABEL_72:
      *v24 = v12;
      goto LABEL_73;
    }
  }
  else
  {
    v25 = 1;
    if (v9 >= 3)
      v25 = (v9 & (v9 - 1)) != 0;
    v26 = v25 | (2 * v9);
    v27 = vcvtps_u32_f32(v21 / v22);
    if (v26 <= v27)
      prime = v27;
    else
      prime = v26;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v29 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v29)
      goto LABEL_48;
    if (prime < *(_QWORD *)&v29)
    {
      v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v29 < 3uLL || (v31 = (uint8x8_t)vcnt_s8(v29), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        v30 = std::__next_prime(v30);
      }
      else
      {
        v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2)
          v30 = v32;
      }
      if (prime <= v30)
        prime = v30;
      if (prime < *(_QWORD *)&v29)
LABEL_48:
        sub_2231B0668(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    v33 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
      {
        v3 = v8 % v9;
        v23 = *(_QWORD *)a1;
        v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v8 % v9));
        if (v24)
          goto LABEL_37;
      }
      else
      {
        v3 = v8;
        v23 = *(_QWORD *)a1;
        v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
        if (v24)
          goto LABEL_37;
      }
    }
    else
    {
      v3 = v33 & v8;
      v23 = *(_QWORD *)a1;
      v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v33 & v8));
      if (v24)
        goto LABEL_37;
    }
  }
  *v12 = *v17;
  *v17 = v12;
  *(_QWORD *)(v23 + 8 * v3) = v17;
  if (*v12)
  {
    v34 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v34 >= v9)
        v34 %= v9;
    }
    else
    {
      v34 &= v9 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v34);
    goto LABEL_72;
  }
LABEL_73:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_223261794(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2231AFCEC((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_2232617A8(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  char *v8;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    v7 = 0xCCCCCCCCCCCCCCCDLL * (v6 >> 3);
    if (v7 >= 0x666666666666667)
      sub_22316E078();
    v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[40 * v7];
    a1[1] = sub_2232618B0(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_223261850(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  char *v4;
  char *v5;
  void *v6;
  void *v7;

  v1[1] = v2;
  v4 = (char *)*v1;
  if (*v1)
  {
    v5 = (char *)v1[1];
    v6 = *v1;
    if (v5 != v4)
    {
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 3);
        if (v7)
        {
          *((_QWORD *)v5 - 2) = v7;
          operator delete(v7);
        }
        v5 -= 40;
      }
      while (v5 != v4);
      v6 = *v1;
    }
    v1[1] = v4;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2232618B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  char *v7;
  _BYTE *v8;
  _BYTE *v9;
  int64_t v10;
  char *v11;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_OWORD *)a4 = *(_OWORD *)v6;
      *(_QWORD *)(a4 + 24) = 0;
      *(_QWORD *)(a4 + 32) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      v9 = *(_BYTE **)(v6 + 16);
      v8 = *(_BYTE **)(v6 + 24);
      v10 = v8 - v9;
      if (v8 != v9)
      {
        if (0xCCCCCCCCCCCCCCCDLL * (v10 >> 2) >= 0xCCCCCCCCCCCCCCDLL)
          sub_22316E078();
        v11 = (char *)operator new(v10);
        *(_QWORD *)(a4 + 16) = v11;
        *(_QWORD *)(a4 + 24) = v11;
        v7 = &v11[4 * (v10 >> 2)];
        *(_QWORD *)(a4 + 32) = v7;
        memcpy(v11, v9, v10);
        *(_QWORD *)(a4 + 24) = v7;
      }
      a4 += 40;
      v6 += 40;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_2232619B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)(v9 + 16);
  if (v11)
  {
    *(_QWORD *)(v9 + 24) = v11;
    operator delete(v11);
  }
  sub_22319E618((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_2232619D8(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  char *v8;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    v7 = 0xCCCCCCCCCCCCCCCDLL * (v6 >> 3);
    if (v7 >= 0x666666666666667)
      sub_22316E078();
    v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[40 * v7];
    a1[1] = sub_223261AE0(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_223261A80(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  char *v4;
  char *v5;
  void *v6;
  void *v7;

  v1[1] = v2;
  v4 = (char *)*v1;
  if (*v1)
  {
    v5 = (char *)v1[1];
    v6 = *v1;
    if (v5 != v4)
    {
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 3);
        if (v7)
        {
          *((_QWORD *)v5 - 2) = v7;
          operator delete(v7);
        }
        v5 -= 40;
      }
      while (v5 != v4);
      v6 = *v1;
    }
    v1[1] = v4;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223261AE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  char *v7;
  _BYTE *v8;
  _BYTE *v9;
  int64_t v10;
  char *v11;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_OWORD *)a4 = *(_OWORD *)v6;
      *(_QWORD *)(a4 + 24) = 0;
      *(_QWORD *)(a4 + 32) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      v9 = *(_BYTE **)(v6 + 16);
      v8 = *(_BYTE **)(v6 + 24);
      v10 = v8 - v9;
      if (v8 != v9)
      {
        if (v10 < 0)
          sub_22316E078();
        v11 = (char *)operator new(v8 - v9);
        *(_QWORD *)(a4 + 16) = v11;
        *(_QWORD *)(a4 + 24) = v11;
        v7 = &v11[16 * (v10 >> 4)];
        *(_QWORD *)(a4 + 32) = v7;
        memcpy(v11, v9, v10);
        *(_QWORD *)(a4 + 24) = v7;
      }
      a4 += 40;
      v6 += 40;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_223261BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)(v9 + 16);
  if (v11)
  {
    *(_QWORD *)(v9 + 24) = v11;
    operator delete(v11);
  }
  sub_22319E618((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223261BD8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char v22;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    if (v7 > 0xAAAAAAAAAAAAAAALL)
      sub_22316E078();
    v8 = (char *)operator new(v6);
    v9 = 0;
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = &v8[24 * v7];
    do
    {
      v10 = v4 + v9;
      v11 = &v8[v9];
      v12 = *(_QWORD *)(v4 + v9);
      *((_DWORD *)v11 + 2) = *(_DWORD *)(v4 + v9 + 8);
      *(_QWORD *)v11 = v12;
      v13 = *(_QWORD *)(v4 + v9 + 12);
      *((_DWORD *)v11 + 5) = *(_DWORD *)(v4 + v9 + 20);
      *(_QWORD *)(v11 + 12) = v13;
      v9 += 24;
    }
    while (v10 + 24 != v5);
    *(_QWORD *)(a1 + 8) = &v8[v9];
  }
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v14 = a2[3];
  v15 = a2[4];
  v16 = v15 - v14;
  if (v15 != v14)
  {
    v17 = 0xAAAAAAAAAAAAAAABLL * (v16 >> 3);
    if (v17 > 0xAAAAAAAAAAAAAAALL)
      sub_22316E078();
    v18 = (char *)operator new(v16);
    v19 = 0;
    *(_QWORD *)(a1 + 24) = v18;
    *(_QWORD *)(a1 + 32) = v18;
    *(_QWORD *)(a1 + 40) = &v18[24 * v17];
    do
    {
      v20 = v14 + v19;
      v21 = &v18[v19];
      *(_QWORD *)v21 = *(_QWORD *)(v14 + v19);
      *(_OWORD *)(v21 + 8) = *(_OWORD *)(v14 + v19 + 8);
      v19 += 24;
    }
    while (v20 + 24 != v15);
    *(_QWORD *)(a1 + 32) = &v18[v19];
  }
  v22 = *((_BYTE *)a2 + 48);
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 48) = v22;
  *(_QWORD *)(a1 + 56) = &off_24EC24788;
  *(_BYTE *)(a1 + 84) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  sub_22449B750((_QWORD *)(a1 + 64), (uint64_t)(a2 + 8));
  *(_WORD *)(a1 + 136) = *((_WORD *)a2 + 68);
  return a1;
}

void sub_223261D74(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  void *v5;
  void *v6;

  sub_223167354(v3);
  v5 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v5;
    operator delete(v5);
  }
  v6 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

double CV3DReconKeyframingConfigurationCreate()
{
  char *v0;
  double result;

  v0 = (char *)operator new(0x148uLL, MEMORY[0x24BEDB6B8]);
  if (v0)
  {
    *((_QWORD *)v0 + 40) = 0;
    *((_OWORD *)v0 + 18) = 0u;
    *((_OWORD *)v0 + 19) = 0u;
    *((_OWORD *)v0 + 16) = 0u;
    *((_OWORD *)v0 + 17) = 0u;
    *((_OWORD *)v0 + 14) = 0u;
    *((_OWORD *)v0 + 15) = 0u;
    *((_OWORD *)v0 + 12) = 0u;
    *((_OWORD *)v0 + 13) = 0u;
    *((_OWORD *)v0 + 10) = 0u;
    *((_OWORD *)v0 + 11) = 0u;
    *((_OWORD *)v0 + 8) = 0u;
    *((_OWORD *)v0 + 9) = 0u;
    *((_OWORD *)v0 + 6) = 0u;
    *((_OWORD *)v0 + 7) = 0u;
    *((_OWORD *)v0 + 4) = 0u;
    *((_OWORD *)v0 + 5) = 0u;
    *((_OWORD *)v0 + 2) = 0u;
    *((_OWORD *)v0 + 3) = 0u;
    *(_OWORD *)v0 = 0u;
    *((_OWORD *)v0 + 1) = 0u;
    *((_DWORD *)v0 + 2) = 2;
    *((_DWORD *)v0 + 5) = 2;
    __asm { FMOV            V1.2S, #1.0 }
    *((_QWORD *)v0 + 3) = _D1;
    *((_DWORD *)v0 + 8) = 1065353216;
    v0[36] = 1;
    *(_WORD *)(v0 + 41) = 257;
    *((_OWORD *)v0 + 3) = xmmword_2245B95E0;
    *((_QWORD *)v0 + 8) = 0x548960000;
    v0[72] = 1;
    *((_DWORD *)v0 + 19) = 1077936128;
    *(_OWORD *)(v0 + 84) = xmmword_2245B95F0;
    v0[100] = 1;
    v0[104] = 1;
    *((_DWORD *)v0 + 27) = 1045220557;
    *((_QWORD *)v0 + 14) = 0x4000000000000000;
    v0[120] = 1;
    *(_WORD *)(v0 + 129) = 257;
    *(_QWORD *)(v0 + 132) = 0x5000002EELL;
    v0[140] = 1;
    *((_DWORD *)v0 + 38) = 10;
    v0[160] = 2;
    v0[184] = 1;
    *(_QWORD *)(v0 + 188) = 0x23E05A8ACLL;
    *((_DWORD *)v0 + 49) = 1028443341;
    *((_QWORD *)v0 + 26) = 0x43E800000;
    *((_DWORD *)v0 + 56) = 1056964608;
    v0[229] = 1;
    *(_OWORD *)(v0 + 232) = xmmword_2245B9600;
    *((_DWORD *)v0 + 62) = 4;
    *(_QWORD *)(v0 + 260) = 0x2003E75C28FLL;
    v0[268] = 1;
    *((_QWORD *)v0 + 34) = 0x240A00000;
    *((_DWORD *)v0 + 70) = 1;
    *((_QWORD *)v0 + 36) = 0x3FE8000000000000;
    *(_QWORD *)&result = 0x1300000007;
    *((_QWORD *)v0 + 37) = 0x1300000007;
    v0[304] = 24;
    *(_QWORD *)(v0 + 308) = 0x40A0000040000000;
    *((_DWORD *)v0 + 80) = 1;
    *(_QWORD *)v0 = &off_24EC291E0;
  }
  return result;
}

char *CV3DReconKeyframingConfigurationCreateWithPrivatePreset(uint64_t a1, CFTypeRef *a2)
{
  unsigned int v3;
  char v4;
  char *v5;
  char *v6;
  char *v8;
  CFErrorRef v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p[39];
  char *v14;
  __int128 v15;
  CFErrorRef v16;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  if (((0x3761Du >> (a1 - 3)) & 1) != 0)
    v3 = (0x89E6u >> (a1 - 3)) & 1;
  else
    LOBYTE(v3) = 0;
  if ((a1 - 3) <= 0x11)
    v4 = v3;
  else
    v4 = 0;
  if (a1 <= 0x14 && ((1 << a1) & 0x1BB0C8) != 0 || (v4 & 1) != 0)
  {
    sub_223FF9E20(a1, (uint64_t)__p);
    v5 = (char *)operator new(0x148uLL, MEMORY[0x24BEDB6B8]);
    v6 = v5;
    if (v5)
    {
      memcpy(v5 + 8, __p, 0x138uLL);
      *((_DWORD *)v6 + 80) = 1;
      *(_QWORD *)v6 = &off_24EC291E0;
    }
    return v6;
  }
  strcpy((char *)__p, "Unknown session preset");
  HIBYTE(__p[2]) = 22;
  v8 = (char *)operator new(0x80uLL);
  v14 = v8;
  v15 = xmmword_2245C63F0;
  strcpy(v8, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframingConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v18.__val_ = 33;
    v18.__cat_ = std::generic_category();
    sub_2245321DC(&v18, (uint64_t)__p, &v16);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v9 = v16;
    if (v16)
      CFRetain(v16);
    *a2 = v9;
    v10 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    if ((SHIBYTE(v15) & 0x80000000) == 0)
      goto LABEL_26;
    v8 = v14;
  }
  operator delete(v8);
LABEL_26:
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_223262150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  operator delete(v14);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconKeyframingConfigurationRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 320);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DReconKeyframingConfigurationRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 320);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

BOOL CV3DReconKeyframingConfigurationEnableSLAM(uint64_t a1, char a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    *(_BYTE *)(a1 + 104) = a2;
  }
  else
  {
    __p = operator new(0x28uLL);
    v12 = xmmword_2245C77E0;
    strcpy((char *)__p, "Keyframing configuration is NULL");
    v5 = (char *)operator new(0x80uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframingConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_22326233C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconKeyframingConfigurationHasSLAMEnabled(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return *(_BYTE *)(a1 + 104) != 0;
  __p = operator new(0x28uLL);
  v10 = xmmword_2245C77E0;
  strcpy((char *)__p, "Keyframing configuration is NULL");
  v4 = (char *)operator new(0x80uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframingConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0;
}

void sub_223262508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconKeyframingConfigurationEnableSceneTypeOptimization(uint64_t a1, char a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    *(_BYTE *)(a1 + 129) = a2;
  }
  else
  {
    __p = operator new(0x28uLL);
    v12 = xmmword_2245C77E0;
    strcpy((char *)__p, "Keyframing configuration is NULL");
    v5 = (char *)operator new(0x80uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframingConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_2232626AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconKeyframingConfigurationHasSceneTypeOptimizationEnabled(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return *(_BYTE *)(a1 + 129) != 0;
  __p = operator new(0x28uLL);
  v10 = xmmword_2245C77E0;
  strcpy((char *)__p, "Keyframing configuration is NULL");
  v4 = (char *)operator new(0x80uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframingConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0;
}

void sub_223262878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconKeyframingConfigurationEnableCpuKeyframing(uint64_t a1, char a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    *(_BYTE *)(a1 + 200) = a2;
  }
  else
  {
    __p = operator new(0x28uLL);
    v12 = xmmword_2245C77E0;
    strcpy((char *)__p, "Keyframing configuration is NULL");
    v5 = (char *)operator new(0x80uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframingConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_223262A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconKeyframingConfigurationHasCpuKeyframingEnabled(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return *(_BYTE *)(a1 + 200) != 0;
  __p = operator new(0x28uLL);
  v10 = xmmword_2245C77E0;
  strcpy((char *)__p, "Keyframing configuration is NULL");
  v4 = (char *)operator new(0x80uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframingConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0;
}

void sub_223262BE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconKeyframingConfigurationEnableNVSNetwork(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v10;
  void *__p[2];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  v12 = 14;
  strcpy((char *)__p, "SPI deprecated");
  v4 = (char *)operator new(0x80uLL);
  v10 = v4;
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframingConfiguration.cpp");
  if (a3)
  {
    *(_QWORD *)&v15.__val_ = 102;
    v15.__cat_ = std::generic_category();
    sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v5;
    v6 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v4 = v10;
  }
  operator delete(v4);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_223262D98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconKeyframingConfigurationSetKeyframeScale(uint64_t a1, CFTypeRef *a2, float a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    *(float *)(a1 + 24) = a3;
  }
  else
  {
    __p = operator new(0x28uLL);
    v12 = xmmword_2245C77E0;
    strcpy((char *)__p, "Keyframing configuration is NULL");
    v5 = (char *)operator new(0x80uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframingConfiguration.cpp");
    if (a2)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_223262F3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

float CV3DReconKeyframingConfigurationGetKeyframeScale(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return *(float *)(a1 + 24);
  __p = operator new(0x28uLL);
  v10 = xmmword_2245C77E0;
  strcpy((char *)__p, "Keyframing configuration is NULL");
  v4 = (char *)operator new(0x80uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframingConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return NAN;
}

void sub_2232630EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconKeyframingConfigurationSetNumIntegrationKeyframes(uint64_t a1, int a2, CFTypeRef *a3)
{
  BOOL v3;
  uint64_t v4;
  char *v7;
  CFTypeRef v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  __int128 v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a1)
    v3 = a2 == 0;
  else
    v3 = 1;
  v4 = !v3;
  if (!v3)
  {
    *(_DWORD *)(a1 + 8) = a2;
    return v4;
  }
  __p = operator new(0x28uLL);
  v13 = xmmword_2245C77E0;
  strcpy((char *)__p, "Keyframing configuration is NULL");
  v7 = (char *)operator new(0x80uLL);
  strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframingConfiguration.cpp");
  if (a3)
  {
    *(_QWORD *)&v16.__val_ = 22;
    v16.__cat_ = std::generic_category();
    sub_2245321DC(&v16, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v8 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v8;
    v9 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  operator delete(v7);
  if ((SHIBYTE(v13) & 0x80000000) == 0)
    return v4;
  operator delete(__p);
  return v4;
}

void sub_2232632BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconKeyframingConfigurationGetNumIntegrationKeyframes(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return *(unsigned int *)(a1 + 8);
  __p = operator new(0x28uLL);
  v10 = xmmword_2245C77E0;
  strcpy((char *)__p, "Keyframing configuration is NULL");
  v4 = (char *)operator new(0x80uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframingConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0;
}

void sub_223263480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconKeyframingConfigurationSetMinPublishUpdatePeriod(uint64_t a1, CFTypeRef *a2, double a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    *(double *)(a1 + 48) = a3;
  }
  else
  {
    __p = operator new(0x28uLL);
    v12 = xmmword_2245C77E0;
    strcpy((char *)__p, "Keyframing configuration is NULL");
    v5 = (char *)operator new(0x80uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframingConfiguration.cpp");
    if (a2)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_223263624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

double CV3DReconKeyframingConfigurationGetMinPublishUpdatePeriod(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return *(double *)(a1 + 48);
  __p = operator new(0x28uLL);
  v10 = xmmword_2245C77E0;
  strcpy((char *)__p, "Keyframing configuration is NULL");
  v4 = (char *)operator new(0x80uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframingConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return NAN;
}

void sub_2232637D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconKeyframingConfigurationSetMaxMemoryKB(uint64_t a1, CFTypeRef *a2, float a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    *(float *)(a1 + 64) = a3;
  }
  else
  {
    __p = operator new(0x28uLL);
    v12 = xmmword_2245C77E0;
    strcpy((char *)__p, "Keyframing configuration is NULL");
    v5 = (char *)operator new(0x80uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframingConfiguration.cpp");
    if (a2)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_223263978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

float CV3DReconKeyframingConfigurationGetMaxMemoryKB(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return *(float *)(a1 + 64);
  __p = operator new(0x28uLL);
  v10 = xmmword_2245C77E0;
  strcpy((char *)__p, "Keyframing configuration is NULL");
  v4 = (char *)operator new(0x80uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframingConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return NAN;
}

void sub_223263B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconKeyframingConfigurationEnableAutomaticSaveSnapshot(uint64_t a1, char a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    *(_BYTE *)(a1 + 176) = a2;
  }
  else
  {
    __p = operator new(0x28uLL);
    v12 = xmmword_2245C77E0;
    strcpy((char *)__p, "Keyframing configuration is NULL");
    v5 = (char *)operator new(0x80uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframingConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_223263CCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconKeyframingConfigurationHasAutomaticSaveSnapshotEnabled(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return *(_BYTE *)(a1 + 176) != 0;
  __p = operator new(0x28uLL);
  v10 = xmmword_2245C77E0;
  strcpy((char *)__p, "Keyframing configuration is NULL");
  v4 = (char *)operator new(0x80uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframingConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0;
}

void sub_223263E98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

float CV3DReconKeyframingConfigurationGetMinDepthRange(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return *(float *)(a1 + 240);
  __p = operator new(0x28uLL);
  v10 = xmmword_2245C77E0;
  strcpy((char *)__p, "Keyframing configuration is NULL");
  v4 = (char *)operator new(0x80uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframingConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return NAN;
}

void sub_223264048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

float CV3DReconKeyframingConfigurationGetMaxDepthRange(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return *(float *)(a1 + 244);
  __p = operator new(0x28uLL);
  v10 = xmmword_2245C77E0;
  strcpy((char *)__p, "Keyframing configuration is NULL");
  v4 = (char *)operator new(0x80uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframingConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return NAN;
}

void sub_2232641F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconKeyframingConfigurationSetDepthRange(uint64_t a1, CFTypeRef *a2, float a3, float a4)
{
  _BOOL8 v5;
  char *v6;
  CFErrorRef v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  void *v11;
  const std::error_category *v12;
  void **v13;
  char *v14;
  CFErrorRef v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void *__p;
  void *v21[2];
  char v22;
  char v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char *v31;
  __int128 v32;
  CFErrorRef v33;
  std::__shared_weak_count *v34;
  std::error_condition v35;

  if (a1)
  {
    sub_223FFA05C(a1 + 8, (uint64_t)&__p, a3, a4);
    v5 = v30 != 0;
    if (v30)
    {
      sub_22320846C((uint64_t)&__p);
    }
    else
    {
      v11 = __p;
      v12 = (const std::error_category *)v21[0];
      if (v29)
        v13 = &v21[1];
      else
        v13 = (void **)&unk_2246C9618;
      v14 = (char *)operator new(0x80uLL);
      v31 = v14;
      v32 = xmmword_2245C63F0;
      strcpy(v14, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframingConfiguration.cpp");
      *(_QWORD *)&v35.__val_ = v11;
      v35.__cat_ = v12;
      if (a2)
      {
        sub_2245321DC(&v35, (uint64_t)v13, &v33);
        if (*a2)
          CFRelease(*a2);
        *a2 = 0;
        v15 = v33;
        if (v33)
          CFRetain(v33);
        *a2 = v15;
        v16 = v34;
        if (v34)
        {
          p_shared_owners = (unint64_t *)&v34->__shared_owners_;
          do
            v18 = __ldaxr(p_shared_owners);
          while (__stlxr(v18 - 1, p_shared_owners));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        if ((SHIBYTE(v32) & 0x80000000) == 0)
          goto LABEL_36;
        v14 = v31;
      }
      operator delete(v14);
    }
LABEL_36:
    if (!v30 && v29)
    {
      if (v28)
      {
        if (v27 < 0)
          operator delete(v26);
        if (v25 < 0)
          operator delete(v24);
      }
      if (v23 && v22 < 0)
        operator delete(v21[1]);
    }
    return v5;
  }
  __p = operator new(0x28uLL);
  *(_OWORD *)v21 = xmmword_2245C77E0;
  strcpy((char *)__p, "Keyframing configuration is NULL");
  v6 = (char *)operator new(0x80uLL);
  v31 = v6;
  v32 = xmmword_2245C63F0;
  strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframingConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v35.__val_ = 22;
    v35.__cat_ = std::generic_category();
    sub_2245321DC(&v35, (uint64_t)&__p, &v33);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v7 = v33;
    if (v33)
      CFRetain(v33);
    *a2 = v7;
    v8 = v34;
    if (v34)
    {
      v9 = (unint64_t *)&v34->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if ((SHIBYTE(v32) & 0x80000000) == 0)
      goto LABEL_17;
    v6 = v31;
  }
  operator delete(v6);
LABEL_17:
  if (SHIBYTE(v21[1]) < 0)
    operator delete(__p);
  return 0;
}

void sub_223264524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  operator delete(v15);
  sub_223197D38((uint64_t)&__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconKeyframingConfigurationSetMaximumAnchorLimit(uint64_t a1, int a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    *(_DWORD *)(a1 + 144) = a2;
    *(_BYTE *)(a1 + 148) = 1;
  }
  else
  {
    __p = operator new(0x28uLL);
    v12 = xmmword_2245C77E0;
    strcpy((char *)__p, "Keyframing configuration is NULL");
    v5 = (char *)operator new(0x80uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframingConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_223264708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconKeyframingConfigurationGetMaximumAnchorLimit(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  char *v9;
  CFTypeRef v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  __int128 v15;
  CFTypeRef cf;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 148))
      return *(unsigned int *)(a1 + 144);
    __p = operator new(0x40uLL);
    v15 = xmmword_2245C4420;
    strcpy((char *)__p, "Keyframing Config does not have maximum number of keyframes set");
    v9 = (char *)operator new(0x80uLL);
    strcpy(v9, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframingConfiguration.cpp");
    if (a2)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_2245321DC(&v18, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v10 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v10;
      v11 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
    operator delete(v9);
    if ((SHIBYTE(v15) & 0x80000000) == 0)
      return 0;
  }
  else
  {
    __p = operator new(0x28uLL);
    v15 = xmmword_2245C77E0;
    strcpy((char *)__p, "Keyframing configuration is NULL");
    v4 = (char *)operator new(0x80uLL);
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframingConfiguration.cpp");
    if (a2)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_2245321DC(&v18, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v5;
      v6 = v17;
      if (v17)
      {
        v7 = (unint64_t *)&v17->__shared_owners_;
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    operator delete(v4);
    if ((SHIBYTE(v15) & 0x80000000) == 0)
      return 0;
  }
  operator delete(__p);
  return 0;
}

void sub_223264A24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconKeyframingConfigurationEnableRoomBoundaryComputation(uint64_t a1, char a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    *(_BYTE *)(a1 + 256) = a2;
    *(_BYTE *)(a1 + 268) = a2;
  }
  else
  {
    __p = operator new(0x28uLL);
    v12 = xmmword_2245C77E0;
    strcpy((char *)__p, "Keyframing configuration is NULL");
    v5 = (char *)operator new(0x80uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframingConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_223264BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconKeyframingConfigurationHasRoomBoundaryComputationEnabled(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 256))
      return *(_BYTE *)(a1 + 268) != 0;
    return 0;
  }
  __p = operator new(0x28uLL);
  v10 = xmmword_2245C77E0;
  strcpy((char *)__p, "Keyframing configuration is NULL");
  v4 = (char *)operator new(0x80uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconKeyframingConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if ((SHIBYTE(v10) & 0x80000000) == 0)
    return 0;
  operator delete(__p);
  return 0;
}

void sub_223264DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

char *CV3DReconLoggingHandleCreate(CFTypeRef *a1)
{
  char *v2;
  char *v3;
  char *v5;
  const std::error_category *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _BYTE __p[24];
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  sub_22455C98C((uint64_t *)__p);
  v2 = (char *)operator new(0x20uLL, MEMORY[0x24BEDB6B8]);
  v3 = v2;
  if (v2)
  {
    *(_OWORD *)(v2 + 8) = *(_OWORD *)__p;
    *(_QWORD *)__p = 0;
    *(_QWORD *)&__p[8] = 0;
    *((_DWORD *)v2 + 6) = 1;
    *(_QWORD *)v2 = &off_24EC29250;
    sub_22455C510((uint64_t)__p);
    return v3;
  }
  sub_22455C510((uint64_t)__p);
  *(_QWORD *)__p = operator new(0x58uLL);
  *(_OWORD *)&__p[8] = xmmword_2245C77F0;
  strcpy(*(char **)__p, "Error creating logging handle - framework was likely built without logging enabled.");
  v5 = (char *)operator new(0x70uLL);
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconLogging.cpp");
  if (a1)
  {
    v6 = std::generic_category();
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = v6;
    sub_2245321DC(&v14, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a1)
      CFRelease(*a1);
    *a1 = 0;
    v7 = cf;
    if (cf)
      CFRetain(cf);
    *a1 = v7;
    v8 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  operator delete(v5);
  if ((__p[23] & 0x80000000) == 0)
    return v3;
  operator delete(*(void **)__p);
  return 0;
}

void sub_223264FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconLoggingHandleEnable(uint64_t a1, unsigned int a2, CFTypeRef *a3)
{
  int v5;
  char *v7;
  CFTypeRef v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  char *v13;
  char __p[23];
  char v15;
  CFTypeRef cf;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  if (a1)
  {
    if (a2 >= 4
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconLogging.cpp", 67, (uint64_t)"level >= kCV3DReconLoggingLevelDebug && level <= kCV3DReconLoggingLevelError", 76, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    if (a2 - 1 >= 3)
      v5 = 2;
    else
      v5 = (a2 - 1) + 3;
    sub_22455DA58(*(std::recursive_mutex ****)(a1 + 8), v5);
  }
  else
  {
    strcpy(__p, "Logging handle is NULL");
    v15 = 22;
    v7 = (char *)operator new(0x70uLL);
    v13 = v7;
    strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconLogging.cpp");
    if (a3)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_2245321DC(&v18, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v8 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v8;
      v9 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v7 = v13;
    }
    operator delete(v7);
    if (v15 < 0)
      operator delete(*(void **)__p);
  }
  return a1 != 0;
}

void sub_2232651BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconLoggingHandleDisable(uint64_t a1, CFTypeRef *a2)
{
  std::recursive_mutex ***v3;
  std::recursive_mutex *v4;
  std::recursive_mutex **v5;
  std::recursive_mutex **v6;
  char *v8;
  CFTypeRef v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v14;
  __int128 v15;
  char __p[23];
  char v17;
  CFTypeRef cf;
  std::__shared_weak_count *v19;
  std::error_condition v20;

  if (a1)
  {
    v3 = *(std::recursive_mutex ****)(a1 + 8);
    v4 = **v3;
    std::recursive_mutex::lock(v4);
    v5 = *v3;
    *(_QWORD *)__p = (*v3)[10];
    v14 = (char *)v5[12];
    sub_22455E2B8((uint64_t **)__p, (uint64_t *)&v14);
    v6 = *v3;
    if (*((_BYTE *)*v3 + 124))
      *((_BYTE *)v6 + 124) = 0;
    *((_DWORD *)v6 + 28) = 1;
    std::recursive_mutex::unlock(v4);
    return a1 != 0;
  }
  strcpy(__p, "Logging handle is NULL");
  v17 = 22;
  v8 = (char *)operator new(0x70uLL);
  v14 = v8;
  v15 = xmmword_2245C45E0;
  strcpy(v8, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconLogging.cpp");
  if (a2)
  {
    *(_QWORD *)&v20.__val_ = 22;
    v20.__cat_ = std::generic_category();
    sub_2245321DC(&v20, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v9 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v9;
    v10 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    if ((SHIBYTE(v15) & 0x80000000) == 0)
      goto LABEL_18;
    v8 = v14;
  }
  operator delete(v8);
LABEL_18:
  if (v17 < 0)
    operator delete(*(void **)__p);
  return a1 != 0;
}

void sub_22326539C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2232653D8(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconLoggingHandleRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 24);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

BOOL CV3DReconLoggingHandleEnableInternal(uint64_t a1, unsigned int a2, CFTypeRef *a3)
{
  int v5;
  char *v7;
  CFTypeRef v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  char *v13;
  char __p[23];
  char v15;
  CFTypeRef cf;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  if (a1)
  {
    if (a2 >= 4
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconLogging.cpp", 97, (uint64_t)"level >= kCV3DReconLoggingLevelDebug && level <= kCV3DReconLoggingLevelError", 76, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    if (a2 - 1 >= 3)
      v5 = 2;
    else
      v5 = (a2 - 1) + 3;
    sub_22455DCBC(*(std::recursive_mutex ****)(a1 + 8), v5);
  }
  else
  {
    strcpy(__p, "Logging handle is NULL");
    v15 = 22;
    v7 = (char *)operator new(0x70uLL);
    v13 = v7;
    strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconLogging.cpp");
    if (a3)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_2245321DC(&v18, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v8 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v8;
      v9 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v7 = v13;
    }
    operator delete(v7);
    if (v15 < 0)
      operator delete(*(void **)__p);
  }
  return a1 != 0;
}

void sub_2232655CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconLoggingHandleStartLoggingToConsole(uint64_t a1, CFTypeRef *a2)
{
  std::recursive_mutex ***v3;
  std::recursive_mutex *v4;
  char v5;
  char *v7;
  CFTypeRef v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  const std::error_category *v12;
  CFTypeRef v13;
  unint64_t *p_shared_owners;
  uint64_t (**v15)();
  __int128 v16;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v19;
  std::error_condition v20;

  if (a1)
  {
    v3 = *(std::recursive_mutex ****)(a1 + 8);
    v4 = **v3;
    std::recursive_mutex::lock(v4);
    if (*((_DWORD *)*v3 + 28) == 2)
    {
      __p[0] = (*v3)[12];
      v15 = &off_24EC7AAB8;
      v5 = sub_22455F3EC((uint64_t *)__p, (uint64_t)&v15);
      std::recursive_mutex::unlock(v4);
      if ((v5 & 1) != 0)
        return 1;
    }
    else
    {
      std::recursive_mutex::unlock(v4);
    }
    __p[0] = operator new(0x28uLL);
    *(_OWORD *)&__p[1] = xmmword_2245C77E0;
    strcpy((char *)__p[0], "Failed to add appender to logger");
    v7 = (char *)operator new(0x70uLL);
    v15 = (uint64_t (**)())v7;
    v16 = xmmword_2245C45E0;
    strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconLogging.cpp");
    if (!a2)
    {
LABEL_29:
      operator delete(v7);
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
        return 0;
      goto LABEL_30;
    }
    v12 = std::generic_category();
    *(_QWORD *)&v20.__val_ = 22;
    v20.__cat_ = v12;
    sub_2245321DC(&v20, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v13 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v13;
    v9 = v19;
    if (!v19)
      goto LABEL_24;
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
  }
  else
  {
    strcpy((char *)__p, "Logging handle is NULL");
    HIBYTE(__p[2]) = 22;
    v7 = (char *)operator new(0x70uLL);
    v15 = (uint64_t (**)())v7;
    v16 = xmmword_2245C45E0;
    strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconLogging.cpp");
    if (!a2)
      goto LABEL_29;
    *(_QWORD *)&v20.__val_ = 22;
    v20.__cat_ = std::generic_category();
    sub_2245321DC(&v20, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v8 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v8;
    v9 = v19;
    if (!v19)
      goto LABEL_24;
    v10 = (unint64_t *)&v19->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
  }
  if (v11)
  {
LABEL_24:
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (SHIBYTE(v16) < 0)
  {
LABEL_28:
    v7 = (char *)v15;
    goto LABEL_29;
  }
LABEL_25:
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
    return 0;
LABEL_30:
  operator delete(__p[0]);
  return 0;
}

void sub_2232658C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconLoggingHandleStartLoggingToConsoleInternal(uint64_t a1, CFTypeRef *a2)
{
  std::recursive_mutex ***v3;
  std::recursive_mutex *v4;
  char v5;
  char *v7;
  CFTypeRef v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  const std::error_category *v12;
  CFTypeRef v13;
  unint64_t *p_shared_owners;
  uint64_t (**v15)();
  __int128 v16;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v19;
  std::error_condition v20;

  if (a1)
  {
    v3 = *(std::recursive_mutex ****)(a1 + 8);
    v4 = **v3;
    std::recursive_mutex::lock(v4);
    if (*((_DWORD *)*v3 + 29) == 2)
    {
      __p[0] = (*v3)[13];
      v15 = &off_24EC7AAB8;
      v5 = sub_22455F3EC((uint64_t *)__p, (uint64_t)&v15);
      std::recursive_mutex::unlock(v4);
      if ((v5 & 1) != 0)
        return 1;
    }
    else
    {
      std::recursive_mutex::unlock(v4);
    }
    __p[0] = operator new(0x28uLL);
    *(_OWORD *)&__p[1] = xmmword_2245C77E0;
    strcpy((char *)__p[0], "Failed to add appender to logger");
    v7 = (char *)operator new(0x70uLL);
    v15 = (uint64_t (**)())v7;
    v16 = xmmword_2245C45E0;
    strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconLogging.cpp");
    if (!a2)
    {
LABEL_29:
      operator delete(v7);
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
        return 0;
      goto LABEL_30;
    }
    v12 = std::generic_category();
    *(_QWORD *)&v20.__val_ = 22;
    v20.__cat_ = v12;
    sub_2245321DC(&v20, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v13 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v13;
    v9 = v19;
    if (!v19)
      goto LABEL_24;
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
  }
  else
  {
    strcpy((char *)__p, "Logging handle is NULL");
    HIBYTE(__p[2]) = 22;
    v7 = (char *)operator new(0x70uLL);
    v15 = (uint64_t (**)())v7;
    v16 = xmmword_2245C45E0;
    strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconLogging.cpp");
    if (!a2)
      goto LABEL_29;
    *(_QWORD *)&v20.__val_ = 22;
    v20.__cat_ = std::generic_category();
    sub_2245321DC(&v20, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v8 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v8;
    v9 = v19;
    if (!v19)
      goto LABEL_24;
    v10 = (unint64_t *)&v19->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
  }
  if (v11)
  {
LABEL_24:
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (SHIBYTE(v16) < 0)
  {
LABEL_28:
    v7 = (char *)v15;
    goto LABEL_29;
  }
LABEL_25:
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
    return 0;
LABEL_30:
  operator delete(__p[0]);
  return 0;
}

void sub_223265BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconLoggingHandleDisableInternal(uint64_t a1, CFTypeRef *a2)
{
  std::recursive_mutex ***v3;
  std::recursive_mutex *v4;
  std::recursive_mutex **v5;
  std::recursive_mutex **v6;
  char *v8;
  CFTypeRef v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v14;
  __int128 v15;
  char __p[23];
  char v17;
  CFTypeRef cf;
  std::__shared_weak_count *v19;
  std::error_condition v20;

  if (a1)
  {
    v3 = *(std::recursive_mutex ****)(a1 + 8);
    v4 = **v3;
    std::recursive_mutex::lock(v4);
    v5 = *v3;
    *(_QWORD *)__p = (*v3)[10];
    v14 = (char *)v5[13];
    sub_22455E36C((uint64_t **)__p, (uint64_t *)&v14);
    v6 = *v3;
    if (*((_BYTE *)*v3 + 132))
      *((_BYTE *)v6 + 132) = 0;
    *((_DWORD *)v6 + 29) = 1;
    std::recursive_mutex::unlock(v4);
    return a1 != 0;
  }
  strcpy(__p, "Logging handle is NULL");
  v17 = 22;
  v8 = (char *)operator new(0x70uLL);
  v14 = v8;
  v15 = xmmword_2245C45E0;
  strcpy(v8, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconLogging.cpp");
  if (a2)
  {
    *(_QWORD *)&v20.__val_ = 22;
    v20.__cat_ = std::generic_category();
    sub_2245321DC(&v20, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v9 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v9;
    v10 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    if ((SHIBYTE(v15) & 0x80000000) == 0)
      goto LABEL_18;
    v8 = v14;
  }
  operator delete(v8);
LABEL_18:
  if (v17 < 0)
    operator delete(*(void **)__p);
  return a1 != 0;
}

void sub_223265DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223265E20(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconLoggingHandleEnableInternalWithConfigurationFile(uint64_t a1, char *__s, CFTypeRef *a3)
{
  size_t v6;
  void *v7;
  void *v8;
  char *v9;
  CFTypeRef v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  CFTypeRef v14;
  unint64_t *p_shared_owners;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v22;
  std::error_condition v23;

  if (a1)
  {
    if (__s)
    {
      v6 = strlen(__s);
      if (v6 >= 0x7FFFFFFFFFFFFFF8)
        sub_22316DBC0();
      v7 = (void *)v6;
      if (v6 >= 0x17)
      {
        v17 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v6 | 7) != 0x17)
          v17 = v6 | 7;
        v18 = v17 + 1;
        v8 = operator new(v17 + 1);
        __p[1] = v7;
        __p[2] = (void *)(v18 | 0x8000000000000000);
        __p[0] = v8;
      }
      else
      {
        HIBYTE(__p[2]) = v6;
        v8 = __p;
        if (!v6)
          goto LABEL_34;
      }
      memcpy(v8, __s, (size_t)v7);
LABEL_34:
      *((_BYTE *)v7 + (_QWORD)v8) = 0;
      sub_22455DF20(*(std::recursive_mutex ****)(a1 + 8), (char *)__p);
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
      return 1;
    }
    HIBYTE(__p[2]) = 16;
    strcpy((char *)__p, "Filepath is NULL");
    v9 = (char *)operator new(0x70uLL);
    v19 = v9;
    strcpy(v9, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconLogging.cpp");
    if (a3)
    {
      *(_QWORD *)&v23.__val_ = 22;
      v23.__cat_ = std::generic_category();
      sub_2245321DC(&v23, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v14 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v14;
      v11 = v22;
      if (!v22)
        goto LABEL_26;
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
LABEL_24:
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
LABEL_26:
      v9 = v19;
    }
  }
  else
  {
    strcpy((char *)__p, "Logging handle is NULL");
    HIBYTE(__p[2]) = 22;
    v9 = (char *)operator new(0x70uLL);
    v19 = v9;
    strcpy(v9, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconLogging.cpp");
    if (a3)
    {
      *(_QWORD *)&v23.__val_ = 22;
      v23.__cat_ = std::generic_category();
      sub_2245321DC(&v23, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v10 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v10;
      v11 = v22;
      if (!v22)
        goto LABEL_26;
      v12 = (unint64_t *)&v22->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      goto LABEL_24;
    }
  }
  operator delete(v9);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_22326611C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void CV3DReconEmitApiLogToErrorLogStore(const char *a1)
{
  const char *v1;
  size_t v2;
  void *v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *__dst[2];
  unint64_t v8;

  if (a1)
    v1 = a1;
  else
    v1 = "";
  v2 = strlen(v1);
  if (v2 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v3 = (void *)v2;
  if (v2 >= 0x17)
  {
    v5 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17)
      v5 = v2 | 7;
    v6 = v5 + 1;
    v4 = (void **)operator new(v5 + 1);
    __dst[1] = v3;
    v8 = v6 | 0x8000000000000000;
    __dst[0] = v4;
    goto LABEL_11;
  }
  HIBYTE(v8) = v2;
  v4 = __dst;
  if (v2)
LABEL_11:
    memcpy(v4, v1, (size_t)v3);
  *((_BYTE *)v3 + (_QWORD)v4) = 0;
  sub_223FFA380((uint64_t)__dst);
  if (SHIBYTE(v8) < 0)
    operator delete(__dst[0]);
}

void sub_223266248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double CV3DReconMeshingConfigurationCreate()
{
  char *v0;
  double result;

  v0 = (char *)operator new(0x120uLL, MEMORY[0x24BEDB6B8]);
  if (v0)
  {
    *((_OWORD *)v0 + 16) = 0u;
    *((_OWORD *)v0 + 17) = 0u;
    *((_OWORD *)v0 + 14) = 0u;
    *((_OWORD *)v0 + 15) = 0u;
    *((_OWORD *)v0 + 12) = 0u;
    *((_OWORD *)v0 + 13) = 0u;
    *((_OWORD *)v0 + 10) = 0u;
    *((_OWORD *)v0 + 11) = 0u;
    *((_OWORD *)v0 + 8) = 0u;
    *((_OWORD *)v0 + 9) = 0u;
    *((_OWORD *)v0 + 6) = 0u;
    *((_OWORD *)v0 + 7) = 0u;
    *((_OWORD *)v0 + 4) = 0u;
    *((_OWORD *)v0 + 5) = 0u;
    *((_OWORD *)v0 + 2) = 0u;
    *((_OWORD *)v0 + 3) = 0u;
    *(_OWORD *)v0 = 0u;
    *((_OWORD *)v0 + 1) = 0u;
    *((_OWORD *)v0 + 1) = xmmword_2245C7810;
    v0[32] = 1;
    *((_DWORD *)v0 + 9) = 1065353216;
    *((_DWORD *)v0 + 11) = 1;
    v0[51] = 1;
    v0[56] = 1;
    *((_DWORD *)v0 + 24) = 0x20000;
    *((_QWORD *)v0 + 13) = 0x409000003E4CCCCDLL;
    *((_DWORD *)v0 + 29) = 1;
    *(_QWORD *)(v0 + 132) = 0x3D8F5C29BCA3D70ALL;
    v0[153] = 11;
    *((_QWORD *)v0 + 20) = 0x4013000000000000;
    *((_DWORD *)v0 + 42) = 2139095039;
    *(_QWORD *)(v0 + 172) = -1;
    *((_WORD *)v0 + 90) = 769;
    result = 2.00000048;
    *(_OWORD *)(v0 + 196) = xmmword_2245C7820;
    v0[215] = 1;
    *((_QWORD *)v0 + 27) = 0x3FD0000000000000;
    *((_DWORD *)v0 + 57) = 1028443341;
    v0[232] = 1;
    v0[253] = 1;
    v0[255] = 1;
    *(_WORD *)(v0 + 277) = 257;
    *((_DWORD *)v0 + 71) = 1;
    *(_QWORD *)v0 = &off_24EC292C0;
  }
  return result;
}

char *CV3DReconMeshingConfigurationCreateWithPreset(uint64_t a1, CFTypeRef *a2)
{
  char *v2;
  char *v3;
  char *v6;
  CFErrorRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p[35];
  char *v12;
  __int128 v13;
  CFErrorRef v14;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if ((_DWORD)a1 == 5)
  {
    sub_223FFAFD8(a1, (uint64_t)__p);
    v2 = (char *)operator new(0x120uLL, MEMORY[0x24BEDB6B8]);
    v3 = v2;
    if (v2)
    {
      memcpy(v2 + 8, __p, 0x118uLL);
      *((_DWORD *)v3 + 71) = 1;
      *(_QWORD *)v3 = &off_24EC292C0;
    }
    return v3;
  }
  strcpy((char *)__p, "Unknown session preset");
  HIBYTE(__p[2]) = 22;
  v6 = (char *)operator new(0x78uLL);
  v12 = v6;
  v13 = xmmword_2245C6470;
  strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
  if (!a2)
    goto LABEL_16;
  *(_QWORD *)&v16.__val_ = 33;
  v16.__cat_ = std::generic_category();
  sub_2245321DC(&v16, (uint64_t)__p, &v14);
  if (*a2)
    CFRelease(*a2);
  *a2 = 0;
  v7 = v14;
  if (v14)
    CFRetain(v14);
  *a2 = v7;
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      if ((SHIBYTE(v13) & 0x80000000) == 0)
        goto LABEL_17;
      goto LABEL_15;
    }
  }
  if (SHIBYTE(v13) < 0)
  {
LABEL_15:
    v6 = v12;
LABEL_16:
    operator delete(v6);
  }
LABEL_17:
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_22326652C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  operator delete(v14);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconMeshingConfigurationRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 284);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DReconMeshingConfigurationRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 284);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

double CV3DReconMeshingConfigurationGetMinMeshingPeriod(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return *(double *)(a1 + 8);
  __p = operator new(0x20uLL);
  v10 = xmmword_2245B8E30;
  strcpy((char *)__p, "Meshing configuration is NULL");
  v4 = (char *)operator new(0x78uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return NAN;
}

void sub_22326672C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

float CV3DReconMeshingConfigurationGetMaxVoxelWeight(uint64_t a1, CFTypeRef *a2)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
  {
    if (!*(_BYTE *)(a1 + 56)
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/MeshingConfig.cpp", 157, (uint64_t)"HasMapper(MeshingMapperType::Volumetric)", 40, (uint64_t)&unk_2245AD60A, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    return *(float *)(a1 + 20);
  }
  else
  {
    __p = operator new(0x20uLL);
    v11 = xmmword_2245B8E30;
    strcpy((char *)__p, "Meshing configuration is NULL");
    v5 = (char *)operator new(0x78uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
    if (a2)
    {
      *(_QWORD *)&v14.__val_ = 22;
      v14.__cat_ = std::generic_category();
      sub_2245321DC(&v14, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v6;
      v7 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v11) < 0)
      operator delete(__p);
    return NAN;
  }
}

void sub_223266928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

float CV3DReconMeshingConfigurationGetVoxelSize(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 92))
    {
      return *(float *)(a1 + 72);
    }
    else
    {
      if (!*(_BYTE *)(a1 + 56))
      {
        sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/MeshingConfig.cpp", 152, (uint64_t)&unk_2245AD60A, 0, (uint64_t)"No valid meshing mapper exists.", 31, (void (*)(void **))sub_22457406C);
        abort();
      }
      return *(float *)(a1 + 16);
    }
  }
  else
  {
    __p = operator new(0x20uLL);
    v10 = xmmword_2245B8E30;
    strcpy((char *)__p, "Meshing configuration is NULL");
    v4 = (char *)operator new(0x78uLL);
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
    if (a2)
    {
      *(_QWORD *)&v13.__val_ = 22;
      v13.__cat_ = std::generic_category();
      sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v5;
      v6 = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    operator delete(v4);
    if (SHIBYTE(v10) < 0)
      operator delete(__p);
    return NAN;
  }
}

void sub_223266B44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconMeshingConfigurationGetBucketsOrderOfMagnitude(uint64_t a1, CFTypeRef *a2, double a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
  {
    LODWORD(a3) = *(_DWORD *)(a1 + 96);
    return (int)log2((double)*(unint64_t *)&a3);
  }
  else
  {
    __p = operator new(0x20uLL);
    v11 = xmmword_2245B8E30;
    strcpy((char *)__p, "Meshing configuration is NULL");
    v5 = (char *)operator new(0x78uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
    if (a2)
    {
      *(_QWORD *)&v14.__val_ = 22;
      v14.__cat_ = std::generic_category();
      sub_2245321DC(&v14, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v6;
      v7 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v11) < 0)
      operator delete(__p);
    return 255;
  }
}

void sub_223266D1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

float CV3DReconMeshingConfigurationGetTruncationFactor(uint64_t a1, CFTypeRef *a2)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
  {
    if (!*(_BYTE *)(a1 + 56)
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/MeshingConfig.cpp", 162, (uint64_t)"HasMapper(MeshingMapperType::Volumetric)", 40, (uint64_t)&unk_2245AD60A, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    return *(float *)(a1 + 24);
  }
  else
  {
    __p = operator new(0x20uLL);
    v11 = xmmword_2245B8E30;
    strcpy((char *)__p, "Meshing configuration is NULL");
    v5 = (char *)operator new(0x78uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
    if (a2)
    {
      *(_QWORD *)&v14.__val_ = 22;
      v14.__cat_ = std::generic_category();
      sub_2245321DC(&v14, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v6;
      v7 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v11) < 0)
      operator delete(__p);
    return NAN;
  }
}

void sub_223266F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconMeshingConfigurationHasMeshPlaneHarmony(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return *(_BYTE *)(a1 + 128) != 0;
  __p = operator new(0x20uLL);
  v10 = xmmword_2245B8E30;
  strcpy((char *)__p, "Meshing configuration is NULL");
  v4 = (char *)operator new(0x78uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0;
}

void sub_2232670EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconMeshingConfigurationHasSemanticsIntegration(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return *(_BYTE *)(a1 + 113) & 1;
  __p = operator new(0x20uLL);
  v10 = xmmword_2245B8E30;
  strcpy((char *)__p, "Meshing configuration is NULL");
  v4 = (char *)operator new(0x78uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0;
}

void sub_2232672BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconMeshingConfigurationHasColorIntegration(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return (*(unsigned __int8 *)(a1 + 113) >> 2) & 1;
  __p = operator new(0x20uLL);
  v10 = xmmword_2245B8E30;
  strcpy((char *)__p, "Meshing configuration is NULL");
  v4 = (char *)operator new(0x78uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0;
}

void sub_22326748C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconMeshingConfigurationHasMaterialIntegration(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return (*(unsigned __int8 *)(a1 + 113) >> 4) & 1;
  __p = operator new(0x20uLL);
  v10 = xmmword_2245B8E30;
  strcpy((char *)__p, "Meshing configuration is NULL");
  v4 = (char *)operator new(0x78uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0;
}

void sub_22326765C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconMeshingConfigurationSetMinMeshingPeriod(uint64_t a1, CFTypeRef *a2, double a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return sub_223FFBF6C((double *)(a1 + 8), a2, a3);
  __p = operator new(0x20uLL);
  v11 = xmmword_2245B8E30;
  strcpy((char *)__p, "Meshing configuration is NULL");
  v5 = (char *)operator new(0x78uLL);
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v6;
    v7 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  operator delete(v5);
  if (SHIBYTE(v11) < 0)
    operator delete(__p);
  return 0;
}

void sub_223267834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconMeshingConfigurationSetMaxVoxelWeight(uint64_t a1, CFTypeRef *a2, float a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return sub_223FFC484(a1 + 8, a2, a3);
  __p = operator new(0x20uLL);
  v11 = xmmword_2245B8E30;
  strcpy((char *)__p, "Meshing configuration is NULL");
  v5 = (char *)operator new(0x78uLL);
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v6;
    v7 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  operator delete(v5);
  if (SHIBYTE(v11) < 0)
    operator delete(__p);
  return 0;
}

void sub_223267A0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconMeshingConfigurationSetVoxelSize(uint64_t a1, CFTypeRef *a2, float a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return sub_2232CFF8C(a1, a2, a3);
  __p = operator new(0x20uLL);
  v11 = xmmword_2245B8E30;
  strcpy((char *)__p, "Meshing configuration is NULL");
  v5 = (char *)operator new(0x78uLL);
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v6;
    v7 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  operator delete(v5);
  if (SHIBYTE(v11) < 0)
    operator delete(__p);
  return 0;
}

void sub_223267BE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconMeshingConfigurationSetBucketsOrderOfMagnitude(uint64_t a1, int a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return sub_2232D0160(a1, a2, a3);
  __p = operator new(0x20uLL);
  v11 = xmmword_2245B8E30;
  strcpy((char *)__p, "Meshing configuration is NULL");
  v5 = (char *)operator new(0x78uLL);
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
  if (a3)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v6;
    v7 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  operator delete(v5);
  if (SHIBYTE(v11) < 0)
    operator delete(__p);
  return 0;
}

void sub_223267DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconMeshingConfigurationSetTruncationFactor(uint64_t a1, CFTypeRef *a2, float a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return sub_2232D0334(a1, a2, a3);
  __p = operator new(0x20uLL);
  v11 = xmmword_2245B8E30;
  strcpy((char *)__p, "Meshing configuration is NULL");
  v5 = (char *)operator new(0x78uLL);
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v6;
    v7 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  operator delete(v5);
  if (SHIBYTE(v11) < 0)
    operator delete(__p);
  return 0;
}

void sub_223267F88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconMeshingConfigurationEnableMeshPlaneHarmony(uint64_t a1, char a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    *(_BYTE *)(a1 + 128) = a2;
  }
  else
  {
    __p = operator new(0x20uLL);
    v12 = xmmword_2245B8E30;
    strcpy((char *)__p, "Meshing configuration is NULL");
    v5 = (char *)operator new(0x78uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_223268134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconMeshingConfigurationSetSemanticsIntegration(uint64_t a1, char a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    *(_BYTE *)(a1 + 113) = *(_BYTE *)(a1 + 113) & 0xFE | a2;
  }
  else
  {
    __p = operator new(0x20uLL);
    v12 = xmmword_2245B8E30;
    strcpy((char *)__p, "Meshing configuration is NULL");
    v5 = (char *)operator new(0x78uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_2232682EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconMeshingConfigurationSetColorIntegration(uint64_t a1, int a2, CFTypeRef *a3)
{
  char v4;
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  __int128 v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a1)
  {
    if (a2)
      v4 = 4;
    else
      v4 = 0;
    *(_BYTE *)(a1 + 113) = *(_BYTE *)(a1 + 113) & 0xFB | v4;
  }
  else
  {
    __p = operator new(0x20uLL);
    v13 = xmmword_2245B8E30;
    strcpy((char *)__p, "Meshing configuration is NULL");
    v6 = (char *)operator new(0x78uLL);
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_2245321DC(&v16, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v7;
      v8 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    operator delete(v6);
    if (SHIBYTE(v13) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_2232684B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconMeshingConfigurationSetMaterialIntegration(uint64_t a1, int a2, CFTypeRef *a3)
{
  char v4;
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  __int128 v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a1)
  {
    if (a2)
      v4 = 16;
    else
      v4 = 0;
    *(_BYTE *)(a1 + 113) = *(_BYTE *)(a1 + 113) & 0xEF | v4;
  }
  else
  {
    __p = operator new(0x20uLL);
    v13 = xmmword_2245B8E30;
    strcpy((char *)__p, "Meshing configuration is NULL");
    v6 = (char *)operator new(0x78uLL);
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_2245321DC(&v16, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v7;
      v8 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    operator delete(v6);
    if (SHIBYTE(v13) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_223268674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

char *CV3DReconMeshingConfigurationCreateWithPrivatePreset(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  _BYTE __src[280];
  uint64_t v8;
  uint64_t v9;

  if (a1 > 0x14 || ((1 << a1) & 0x1BB0C8) == 0)
    return CV3DReconMeshingConfigurationCreateWithPreset(a1, a2);
  v8 = v2;
  v9 = v3;
  sub_223FFAFD8(a1, (uint64_t)__src);
  v4 = (char *)operator new(0x120uLL, MEMORY[0x24BEDB6B8]);
  v5 = v4;
  if (v4)
  {
    memcpy(v4 + 8, __src, 0x118uLL);
    *((_DWORD *)v5 + 71) = 1;
    *(_QWORD *)v5 = &off_24EC292C0;
  }
  return v5;
}

BOOL CV3DReconMeshingConfigurationHasVolumetricMapper(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return *(_BYTE *)(a1 + 56) != 0;
  __p = operator new(0x20uLL);
  v10 = xmmword_2245B8E30;
  strcpy((char *)__p, "Meshing configuration is NULL");
  v4 = (char *)operator new(0x78uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0;
}

void sub_2232688D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconMeshingConfigurationHasOccupancyMapping(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return *(_BYTE *)(a1 + 144) != 0;
  __p = operator new(0x20uLL);
  v10 = xmmword_2245B8E30;
  strcpy((char *)__p, "Meshing configuration is NULL");
  v4 = (char *)operator new(0x78uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0;
}

void sub_223268AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconMeshingConfigurationHasOccupancyMeshing(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return *(_BYTE *)(a1 + 212) != 0;
  __p = operator new(0x20uLL);
  v10 = xmmword_2245B8E30;
  strcpy((char *)__p, "Meshing configuration is NULL");
  v4 = (char *)operator new(0x78uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0;
}

void sub_223268C7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconMeshingConfigurationHasOccupancyAirMesh(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return *(_BYTE *)(a1 + 213) != 0;
  __p = operator new(0x20uLL);
  v10 = xmmword_2245B8E30;
  strcpy((char *)__p, "Meshing configuration is NULL");
  v4 = (char *)operator new(0x78uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0;
}

void sub_223268E50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconMeshingConfigurationUseLowConfidenceJasperForOccupancyMapping(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return *(_BYTE *)(a1 + 214) != 0;
  __p = operator new(0x20uLL);
  v10 = xmmword_2245B8E30;
  strcpy((char *)__p, "Meshing configuration is NULL");
  v4 = (char *)operator new(0x78uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0;
}

void sub_223269024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconMeshingConfigurationHasSpatialSubdivision(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return *(_BYTE *)(a1 + 184) != 0;
  __p = operator new(0x20uLL);
  v10 = xmmword_2245B8E30;
  strcpy((char *)__p, "Meshing configuration is NULL");
  v4 = (char *)operator new(0x78uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0;
}

void sub_2232691F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconMeshingConfigurationHasOccupancyByProximity(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return *(_BYTE *)(a1 + 192) != 0;
  __p = operator new(0x20uLL);
  v10 = xmmword_2245B8E30;
  strcpy((char *)__p, "Meshing configuration is NULL");
  v4 = (char *)operator new(0x78uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0;
}

void sub_2232693CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

float CV3DReconMeshingConfigurationGetOccupancyByProximityRadius(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return *(float *)(a1 + 196);
  __p = operator new(0x20uLL);
  v10 = xmmword_2245B8E30;
  strcpy((char *)__p, "Meshing configuration is NULL");
  v4 = (char *)operator new(0x78uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0.0;
}

void sub_223269598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

float CV3DReconMeshingConfigurationGetOccupancyByProximityHeightBelowCamera(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return *(float *)(a1 + 204);
  __p = operator new(0x20uLL);
  v10 = xmmword_2245B8E30;
  strcpy((char *)__p, "Meshing configuration is NULL");
  v4 = (char *)operator new(0x78uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0.0;
}

void sub_223269764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

float CV3DReconMeshingConfigurationGetOccupancyByProximityHeightAboveCamera(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return *(float *)(a1 + 200);
  __p = operator new(0x20uLL);
  v10 = xmmword_2245B8E30;
  strcpy((char *)__p, "Meshing configuration is NULL");
  v4 = (char *)operator new(0x78uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0.0;
}

void sub_223269930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconMeshingConfigurationGetOccupancyByProximityMaxResultSize(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return sub_223FFBB64(a1 + 8);
  __p = operator new(0x20uLL);
  v10 = xmmword_2245B8E30;
  strcpy((char *)__p, "Meshing configuration is NULL");
  v4 = (char *)operator new(0x78uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0;
}

void sub_223269B04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconMeshingConfigurationGetNumFusionSamples(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return *(unsigned int *)(a1 + 116);
  __p = operator new(0x20uLL);
  v10 = xmmword_2245B8E30;
  strcpy((char *)__p, "Meshing configuration is NULL");
  v4 = (char *)operator new(0x78uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0xFFFFFFFFLL;
}

void sub_223269CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconMeshingConfigurationEnableOccupancyMapping(uint64_t a1, char a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    *(_BYTE *)(a1 + 144) = a2;
  }
  else
  {
    __p = operator new(0x20uLL);
    v12 = xmmword_2245B8E30;
    strcpy((char *)__p, "Meshing configuration is NULL");
    v5 = (char *)operator new(0x78uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_223269E7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconMeshingConfigurationEnableOccupancyMeshing(uint64_t a1, int a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    *(_BYTE *)(a1 + 212) = a2;
    if (a2)
      *(_BYTE *)(a1 + 144) = 1;
  }
  else
  {
    __p = operator new(0x20uLL);
    v12 = xmmword_2245B8E30;
    strcpy((char *)__p, "Meshing configuration is NULL");
    v5 = (char *)operator new(0x78uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_22326A034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconMeshingConfigurationEnableOccupancyAirMesh(uint64_t a1, char a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    *(_BYTE *)(a1 + 213) = a2;
  }
  else
  {
    __p = operator new(0x20uLL);
    v12 = xmmword_2245B8E30;
    strcpy((char *)__p, "Meshing configuration is NULL");
    v5 = (char *)operator new(0x78uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_22326A1E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconMeshingConfigurationHasReflectivityMapping(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return 0;
  __p = operator new(0x20uLL);
  v10 = xmmword_2245B8E30;
  strcpy((char *)__p, "Meshing configuration is NULL");
  v4 = (char *)operator new(0x78uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if ((SHIBYTE(v10) & 0x80000000) == 0)
    return 0;
  operator delete(__p);
  return 0;
}

void sub_22326A394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconMeshingConfigurationEnableReflectivityMapping(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (!a1)
  {
    __p = operator new(0x20uLL);
    v12 = xmmword_2245B8E30;
    strcpy((char *)__p, "Meshing configuration is NULL");
    v5 = (char *)operator new(0x78uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_22326A538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconMeshingConfigurationEnableSpatialSubdivision(uint64_t a1, int a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    *(_BYTE *)(a1 + 184) = a2;
    if (a2)
      *(_BYTE *)(a1 + 144) = 1;
  }
  else
  {
    __p = operator new(0x20uLL);
    v12 = xmmword_2245B8E30;
    strcpy((char *)__p, "Meshing configuration is NULL");
    v5 = (char *)operator new(0x78uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_22326A6F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconMeshingConfigurationEnableOccupancyByProximity(uint64_t a1, int a2, CFTypeRef *a3, float a4, float a5, float a6)
{
  uint64_t result;
  char *v10;
  CFTypeRef v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  __int128 v16;
  CFTypeRef cf;
  std::__shared_weak_count *v18;
  std::error_condition v19;

  if (a1)
  {
    result = sub_223FFDD3C((float *)(a1 + 8), a3, a4, a5, a6);
    if ((_DWORD)result)
    {
      *(_BYTE *)(a1 + 192) = a2;
      result = 1;
      if (a2)
        *(_BYTE *)(a1 + 144) = 1;
    }
  }
  else
  {
    __p = operator new(0x20uLL);
    v16 = xmmword_2245B8E30;
    strcpy((char *)__p, "Meshing configuration is NULL");
    v10 = (char *)operator new(0x78uLL);
    strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v19.__val_ = 22;
      v19.__cat_ = std::generic_category();
      sub_2245321DC(&v19, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v11 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v11;
      v12 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    operator delete(v10);
    if (SHIBYTE(v16) < 0)
      operator delete(__p);
    return 0;
  }
  return result;
}

void sub_22326A8E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconMeshingConfigurationEnableUseLowConfidenceJasperForOccupancyMapping(uint64_t a1, char a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    *(_BYTE *)(a1 + 214) = a2;
  }
  else
  {
    __p = operator new(0x20uLL);
    v12 = xmmword_2245B8E30;
    strcpy((char *)__p, "Meshing configuration is NULL");
    v5 = (char *)operator new(0x78uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_22326AA8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconMeshingConfigurationSetNumFusionSamples(uint64_t a1, int a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return sub_223FFDB9C(a1 + 8, a2, a3);
  __p = operator new(0x20uLL);
  v11 = xmmword_2245B8E30;
  strcpy((char *)__p, "Meshing configuration is NULL");
  v5 = (char *)operator new(0x78uLL);
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
  if (a3)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v6;
    v7 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  operator delete(v5);
  if (SHIBYTE(v11) < 0)
    operator delete(__p);
  return 0;
}

void sub_22326AC64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconMeshingConfigurationEnablePrimitiveFitting(uint64_t a1, char a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    *(_BYTE *)(a1 + 140) = a2;
  }
  else
  {
    __p = operator new(0x20uLL);
    v12 = xmmword_2245B8E30;
    strcpy((char *)__p, "Meshing configuration is NULL");
    v5 = (char *)operator new(0x78uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_22326AE10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconMeshingConfigurationHasPrimitiveFitting(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return *(_BYTE *)(a1 + 140) != 0;
  __p = operator new(0x20uLL);
  v10 = xmmword_2245B8E30;
  strcpy((char *)__p, "Meshing configuration is NULL");
  v4 = (char *)operator new(0x78uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0;
}

void sub_22326AFE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconMeshingConfigurationHasRoomScanLite(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return *(_BYTE *)(a1 + 152) != 0;
  __p = operator new(0x20uLL);
  v11 = xmmword_2245B8E30;
  strcpy((char *)__p, "Meshing configuration is NULL");
  v5 = (char *)operator new(0x78uLL);
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
  if (a3)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v6;
    v7 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  operator delete(v5);
  if (SHIBYTE(v11) < 0)
    operator delete(__p);
  return 0;
}

void sub_22326B1B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconMeshingConfigurationEnableRoomScanLite(_BYTE *a1, uint64_t a2, int a3, CFTypeRef *a4)
{
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  __int128 v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a1)
  {
    a1[152] = a3;
    if (a3)
    {
      a1[184] = 1;
      a1[144] = 1;
    }
  }
  else
  {
    __p = operator new(0x20uLL);
    v13 = xmmword_2245B8E30;
    strcpy((char *)__p, "Meshing configuration is NULL");
    v6 = (char *)operator new(0x78uLL);
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
    if (a4)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_2245321DC(&v16, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a4 = v7;
      v8 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    operator delete(v6);
    if (SHIBYTE(v13) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_22326B374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconMeshingConfigurationSetRoomScanLitePreset(uint64_t a1, char a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    *(_BYTE *)(a1 + 153) = a2;
  }
  else
  {
    __p = operator new(0x20uLL);
    v12 = xmmword_2245B8E30;
    strcpy((char *)__p, "Meshing configuration is NULL");
    v5 = (char *)operator new(0x78uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_22326B520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconMeshingConfigurationGetRoomScanLitePreset(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return *(unsigned __int8 *)(a1 + 153);
  __p = operator new(0x20uLL);
  v10 = xmmword_2245B8E30;
  strcpy((char *)__p, "Meshing configuration is NULL");
  v4 = (char *)operator new(0x78uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 12;
}

void sub_22326B6EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconMeshingConfigurationSetRoomScanLiteUpdatePeriod(uint64_t a1, CFTypeRef *a2, double a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    *(double *)(a1 + 160) = a3;
  }
  else
  {
    __p = operator new(0x20uLL);
    v12 = xmmword_2245B8E30;
    strcpy((char *)__p, "Meshing configuration is NULL");
    v5 = (char *)operator new(0x78uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
    if (a2)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_22326B898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

double CV3DReconMeshingConfigurationGetRoomScanLiteUpdatePeriod(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return *(double *)(a1 + 160);
  __p = operator new(0x20uLL);
  v10 = xmmword_2245B8E30;
  strcpy((char *)__p, "Meshing configuration is NULL");
  v4 = (char *)operator new(0x78uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return NAN;
}

void sub_22326BA50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconMeshingConfigurationSetRoomScanLiteIncrementalUpdates(uint64_t a1, char a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    *(_BYTE *)(a1 + 180) = a2;
  }
  else
  {
    __p = operator new(0x20uLL);
    v12 = xmmword_2245B8E30;
    strcpy((char *)__p, "Meshing configuration is NULL");
    v5 = (char *)operator new(0x78uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_22326BBFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconMeshingConfigurationGetRoomScanLiteIncrementalUpdates(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return *(_BYTE *)(a1 + 180) != 0;
  __p = operator new(0x20uLL);
  v10 = xmmword_2245B8E30;
  strcpy((char *)__p, "Meshing configuration is NULL");
  v4 = (char *)operator new(0x78uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0;
}

void sub_22326BDD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconMeshingConfigurationHasPerFrameSemantics(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return *(_BYTE *)(a1 + 112) & 1;
  __p = operator new(0x20uLL);
  v10 = xmmword_2245B8E30;
  strcpy((char *)__p, "Meshing configuration is NULL");
  v4 = (char *)operator new(0x78uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0;
}

void sub_22326BFA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconMeshingConfigurationHasPerFrameColor(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return (*(unsigned __int8 *)(a1 + 112) >> 2) & 1;
  __p = operator new(0x20uLL);
  v10 = xmmword_2245B8E30;
  strcpy((char *)__p, "Meshing configuration is NULL");
  v4 = (char *)operator new(0x78uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0;
}

void sub_22326C170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconMeshingConfigurationHasPerFrameMaterial(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return (*(unsigned __int8 *)(a1 + 112) >> 4) & 1;
  __p = operator new(0x20uLL);
  v10 = xmmword_2245B8E30;
  strcpy((char *)__p, "Meshing configuration is NULL");
  v4 = (char *)operator new(0x78uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0;
}

void sub_22326C340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconMeshingConfigurationEnableMeshConfidence(uint64_t a1, char a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    *(_BYTE *)(a1 + 276) = a2;
  }
  else
  {
    __p = operator new(0x20uLL);
    v12 = xmmword_2245B8E30;
    strcpy((char *)__p, "Meshing configuration is NULL");
    v5 = (char *)operator new(0x78uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_22326C4EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconMeshingConfigurationHasMeshConfidence(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return *(_BYTE *)(a1 + 276) != 0;
  __p = operator new(0x20uLL);
  v10 = xmmword_2245B8E30;
  strcpy((char *)__p, "Meshing configuration is NULL");
  v4 = (char *)operator new(0x78uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0;
}

void sub_22326C6C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconMeshingConfigurationEnableMeshingReferenceSystem(uint64_t a1, char a2, CFTypeRef *a3)
{
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  __int128 v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a1)
  {
    if (!*(_BYTE *)(a1 + 56)
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/MeshingConfig.cpp", 565, (uint64_t)"HasMapper(MeshingMapperType::Volumetric)", 40, (uint64_t)&unk_2245AD60A, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    *(_BYTE *)(a1 + 225) = a2;
  }
  else
  {
    __p = operator new(0x20uLL);
    v13 = xmmword_2245B8E30;
    strcpy((char *)__p, "Meshing configuration is NULL");
    v6 = (char *)operator new(0x78uLL);
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_2245321DC(&v16, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v7;
      v8 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    operator delete(v6);
    if (SHIBYTE(v13) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_22326C8B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconMeshingConfigurationHasMeshingReferenceSystem(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return *(_BYTE *)(a1 + 225) != 0;
  __p = operator new(0x20uLL);
  v10 = xmmword_2245B8E30;
  strcpy((char *)__p, "Meshing configuration is NULL");
  v4 = (char *)operator new(0x78uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0;
}

void sub_22326CA84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconMeshingConfigurationEnableKeyVolRawFrameIntegration(uint64_t a1, char a2, CFTypeRef *a3)
{
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  __int128 v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a1)
  {
    if (!*(_BYTE *)(a1 + 56)
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/MeshingConfig.cpp", 570, (uint64_t)"HasMapper(MeshingMapperType::Volumetric)", 40, (uint64_t)&unk_2245AD60A, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    *(_BYTE *)(a1 + 226) = a2;
  }
  else
  {
    __p = operator new(0x20uLL);
    v13 = xmmword_2245B8E30;
    strcpy((char *)__p, "Meshing configuration is NULL");
    v6 = (char *)operator new(0x78uLL);
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_2245321DC(&v16, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v7;
      v8 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    operator delete(v6);
    if (SHIBYTE(v13) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_22326CC74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconMeshingConfigurationHasKeyVolRawFrameIntegration(uint64_t a1, CFTypeRef *a2)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
  {
    if (!*(_BYTE *)(a1 + 56)
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/MeshingConfig.cpp", 231, (uint64_t)"HasMapper(MeshingMapperType::Volumetric)", 40, (uint64_t)&unk_2245AD60A, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    return *(_BYTE *)(a1 + 226) != 0;
  }
  else
  {
    __p = operator new(0x20uLL);
    v11 = xmmword_2245B8E30;
    strcpy((char *)__p, "Meshing configuration is NULL");
    v5 = (char *)operator new(0x78uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
    if (a2)
    {
      *(_QWORD *)&v14.__val_ = 22;
      v14.__cat_ = std::generic_category();
      sub_2245321DC(&v14, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v6;
      v7 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v11) < 0)
      operator delete(__p);
    return 0;
  }
}

void sub_22326CE8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconMeshingConfigurationAddMeshIntegrationAttribute(uint64_t a1, int a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  char *v10;
  CFTypeRef v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  __int128 v16;
  CFTypeRef cf;
  std::__shared_weak_count *v18;
  std::error_condition v19;

  if (a1)
  {
    if (a2 == 1)
    {
      *(_BYTE *)(a1 + 113) |= 1u;
      return 1;
    }
    __p = operator new(0x20uLL);
    v16 = xmmword_2245B8D00;
    strcpy((char *)__p, "Unknown mapping attribute");
    v10 = (char *)operator new(0x78uLL);
    strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v19.__val_ = 22;
      v19.__cat_ = std::generic_category();
      sub_2245321DC(&v19, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v11 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v11;
      v12 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    operator delete(v10);
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return 0;
  }
  else
  {
    __p = operator new(0x20uLL);
    v16 = xmmword_2245B8E30;
    strcpy((char *)__p, "Meshing configuration is NULL");
    v5 = (char *)operator new(0x78uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v19.__val_ = 22;
      v19.__cat_ = std::generic_category();
      sub_2245321DC(&v19, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v18;
      if (v18)
      {
        v8 = (unint64_t *)&v18->__shared_owners_;
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return 0;
  }
  operator delete(__p);
  return 0;
}

void sub_22326D1B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconMeshingConfigurationAddPrivateMeshIntegrationAttribute(uint64_t a1, char a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    *(_BYTE *)(a1 + 113) |= a2;
  }
  else
  {
    __p = operator new(0x20uLL);
    v12 = xmmword_2245B8E30;
    strcpy((char *)__p, "Meshing configuration is NULL");
    v5 = (char *)operator new(0x78uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_22326D374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconMeshingConfigurationRemoveMeshIntegrationAttribute(uint64_t a1, char a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    *(_BYTE *)(a1 + 113) &= ~a2;
  }
  else
  {
    __p = operator new(0x20uLL);
    v12 = xmmword_2245B8E30;
    strcpy((char *)__p, "Meshing configuration is NULL");
    v5 = (char *)operator new(0x78uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_22326D528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconMeshingConfigurationHasMeshIntegrationAttribute(uint64_t a1, char a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return (*(_BYTE *)(a1 + 113) & a2) != 0;
  __p = operator new(0x20uLL);
  v11 = xmmword_2245B8E30;
  strcpy((char *)__p, "Meshing configuration is NULL");
  v5 = (char *)operator new(0x78uLL);
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
  if (a3)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v6;
    v7 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  operator delete(v5);
  if (SHIBYTE(v11) < 0)
    operator delete(__p);
  return 0;
}

void sub_22326D6FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

float CV3DReconMeshingConfigurationGetCoarseVoxelThreshold(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  CFTypeRef v9;
  unint64_t *p_shared_owners;
  char *v11;
  void *__p;
  __int128 v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 56))
      return *(float *)(a1 + 28);
    __p = operator new(0x20uLL);
    v13 = xmmword_2245B8D00;
    strcpy((char *)__p, "SDF configuration is NULL");
    v4 = (char *)operator new(0x78uLL);
    v11 = v4;
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
    if (a2)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_2245321DC(&v16, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v9 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v9;
      v6 = v15;
      if (!v15)
        goto LABEL_23;
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
LABEL_21:
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
LABEL_23:
      v4 = v11;
    }
  }
  else
  {
    __p = operator new(0x20uLL);
    v13 = xmmword_2245B8E30;
    strcpy((char *)__p, "Meshing configuration is NULL");
    v4 = (char *)operator new(0x78uLL);
    v11 = v4;
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
    if (a2)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_2245321DC(&v16, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v5;
      v6 = v15;
      if (!v15)
        goto LABEL_23;
      v7 = (unint64_t *)&v15->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      goto LABEL_21;
    }
  }
  operator delete(v4);
  if (SHIBYTE(v13) < 0)
    operator delete(__p);
  return NAN;
}

void sub_22326D9B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconMeshingConfigurationSetCoarseVoxelThreshold(uint64_t a1, CFTypeRef *a2, float a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return sub_223FFC7B4(a1 + 8, a2, a3);
  __p = operator new(0x20uLL);
  v11 = xmmword_2245B8E30;
  strcpy((char *)__p, "Meshing configuration is NULL");
  v5 = (char *)operator new(0x78uLL);
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v6;
    v7 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  operator delete(v5);
  if (SHIBYTE(v11) < 0)
    operator delete(__p);
  return 0;
}

void sub_22326DB9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

float CV3DReconMeshingConfigurationGetDepthRangeNear(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return *(float *)(a1 + 104);
  __p = operator new(0x20uLL);
  v10 = xmmword_2245B8E30;
  strcpy((char *)__p, "Meshing configuration is NULL");
  v4 = (char *)operator new(0x78uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return NAN;
}

void sub_22326DD54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

float CV3DReconMeshingConfigurationGetDepthRangeFar(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return *(float *)(a1 + 108);
  __p = operator new(0x20uLL);
  v10 = xmmword_2245B8E30;
  strcpy((char *)__p, "Meshing configuration is NULL");
  v4 = (char *)operator new(0x78uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return NAN;
}

void sub_22326DF0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconMeshingConfigurationSetDepthRange(uint64_t a1, CFTypeRef *a2, float a3, float a4)
{
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
    return sub_223FFC170(a1 + 8, a2, a3, a4);
  __p = operator new(0x20uLL);
  v12 = xmmword_2245B8E30;
  strcpy((char *)__p, "Meshing configuration is NULL");
  v6 = (char *)operator new(0x78uLL);
  strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v7 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v7;
    v8 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  operator delete(v6);
  if (SHIBYTE(v12) < 0)
    operator delete(__p);
  return 0;
}

void sub_22326E0E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconMeshingConfigurationEnableClusterMeshing(uint64_t a1, char a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    *(_BYTE *)(a1 + 252) = a2;
  }
  else
  {
    __p = operator new(0x20uLL);
    v12 = xmmword_2245B8E30;
    strcpy((char *)__p, "Meshing configuration is NULL");
    v5 = (char *)operator new(0x78uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_22326E290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconMeshingConfigurationHasClusterMeshing(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return *(_BYTE *)(a1 + 252) != 0;
  __p = operator new(0x20uLL);
  v10 = xmmword_2245B8E30;
  strcpy((char *)__p, "Meshing configuration is NULL");
  v4 = (char *)operator new(0x78uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMeshingConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0;
}

void sub_22326E464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *CV3DReconMonitoringConfigurationCreate()
{
  _QWORD *result;

  result = operator new(0x20uLL, MEMORY[0x24BEDB6B8]);
  if (result)
  {
    result[2] = 0;
    result[3] = 0;
    *((_DWORD *)result + 4) = 3;
    *((_WORD *)result + 10) = 257;
    *((_DWORD *)result + 6) = 1;
    *result = &off_24EC29330;
    result[1] = 0x40E0000000000100;
  }
  return result;
}

uint64_t CV3DReconMonitoringConfigurationRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 24);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DReconMonitoringConfigurationRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 24);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

BOOL CV3DReconMonitoringConfigurationHasUseOccupancyInNoveltyDetection(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
  {
    return *(_BYTE *)(a1 + 9) || *(_BYTE *)(a1 + 20) != 0;
  }
  else
  {
    __p = operator new(0x28uLL);
    v10 = xmmword_2245C77E0;
    strcpy((char *)__p, "Monitoring configuration is NULL");
    v4 = (char *)operator new(0x80uLL);
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMonitoringConfiguration.cpp");
    if (a2)
    {
      *(_QWORD *)&v13.__val_ = 22;
      v13.__cat_ = std::generic_category();
      sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v5;
      v6 = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    operator delete(v4);
    if (SHIBYTE(v10) < 0)
      operator delete(__p);
    return 0;
  }
}

void sub_22326E6EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconMonitoringConfigurationEnableUseOccupancyInNoveltyDetection(uint64_t a1, char a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    *(_BYTE *)(a1 + 20) = a2;
    *(_BYTE *)(a1 + 9) = a2;
  }
  else
  {
    __p = operator new(0x28uLL);
    v12 = xmmword_2245C77E0;
    strcpy((char *)__p, "Monitoring configuration is NULL");
    v5 = (char *)operator new(0x80uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMonitoringConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_22326E894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconMonitoringResultRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 88);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DReconMonitoringResultRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 88);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

BOOL CV3DReconMonitoringResultHasPredictedDepth(uint64_t a1, CFTypeRef *a2)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  char *v9;
  CFTypeRef v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  void *__p;
  __int128 v16;
  CFTypeRef cf;
  std::__shared_weak_count *v18;
  std::error_condition v19;

  if (a1)
  {
    v2 = *(uint64_t **)(a1 + 16);
    if (v2)
    {
      v4 = *v2;
      v3 = (std::__shared_weak_count *)v2[1];
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v6 = __ldxr(p_shared_owners);
        while (__stxr(v6 + 1, p_shared_owners));
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
    }
    else
    {
      v4 = 0;
    }
    return v4 != 0;
  }
  else
  {
    __p = operator new(0x20uLL);
    v16 = xmmword_2245B9420;
    strcpy((char *)__p, "MonitoringResult is NULL");
    v9 = (char *)operator new(0x78uLL);
    strcpy(v9, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMonitoringResult.cpp");
    if (a2)
    {
      *(_QWORD *)&v19.__val_ = 22;
      v19.__cat_ = std::generic_category();
      sub_2245321DC(&v19, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v10 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v10;
      v11 = v18;
      if (v18)
      {
        v12 = (unint64_t *)&v18->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
    operator delete(v9);
    if (SHIBYTE(v16) < 0)
      operator delete(__p);
    return 0;
  }
}

void sub_22326EAF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconMonitoringResultGetPredictedDepth(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  CFTypeRef v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *__p;
  __int128 v18;
  CFTypeRef cf;
  std::__shared_weak_count *v20;
  std::error_condition v21;

  if (!a1)
  {
    __p = operator new(0x20uLL);
    v18 = xmmword_2245B9420;
    strcpy((char *)__p, "MonitoringResult is NULL");
    v8 = (char *)operator new(0x78uLL);
    strcpy(v8, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMonitoringResult.cpp");
    if (a2)
    {
      *(_QWORD *)&v21.__val_ = 22;
      v21.__cat_ = std::generic_category();
      sub_2245321DC(&v21, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v9 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v9;
      v10 = v20;
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
    operator delete(v8);
    if (SHIBYTE(v18) < 0)
      operator delete(__p);
    return 0;
  }
  sub_2232D0774(a1, a2, &__p);
  if ((_QWORD)v18)
  {
    v3 = *(_QWORD *)v18;
    v4 = *(std::__shared_weak_count **)(v18 + 8);
    if (v4)
    {
      v5 = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
      do
        v7 = __ldaxr(v5);
      while (__stlxr(v7 - 1, v5));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  else
  {
    v3 = 0;
  }
  __p = &off_24EC715B8;
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (!*((_QWORD *)&v18 + 1))
    return v3;
  v15 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (v16)
    return v3;
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  return v3;
}

void sub_22326ED54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconMonitoringResultGetInputDepth(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  CFTypeRef v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *__p;
  __int128 v18;
  CFTypeRef cf;
  std::__shared_weak_count *v20;
  std::error_condition v21;

  if (!a1)
  {
    __p = operator new(0x20uLL);
    v18 = xmmword_2245B9420;
    strcpy((char *)__p, "MonitoringResult is NULL");
    v8 = (char *)operator new(0x78uLL);
    strcpy(v8, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMonitoringResult.cpp");
    if (a2)
    {
      *(_QWORD *)&v21.__val_ = 22;
      v21.__cat_ = std::generic_category();
      sub_2245321DC(&v21, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v9 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v9;
      v10 = v20;
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
    operator delete(v8);
    if (SHIBYTE(v18) < 0)
      operator delete(__p);
    return 0;
  }
  sub_2232D09B4(a1, a2, &__p);
  if ((_QWORD)v18)
  {
    v3 = *(_QWORD *)v18;
    v4 = *(std::__shared_weak_count **)(v18 + 8);
    if (v4)
    {
      v5 = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
      do
        v7 = __ldaxr(v5);
      while (__stlxr(v7 - 1, v5));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  else
  {
    v3 = 0;
  }
  __p = &off_24EC715B8;
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (!*((_QWORD *)&v18 + 1))
    return v3;
  v15 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (v16)
    return v3;
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  return v3;
}

void sub_22326EFB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconMonitoringResultGetInputWeight(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  CFTypeRef v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *__p;
  __int128 v18;
  CFTypeRef cf;
  std::__shared_weak_count *v20;
  std::error_condition v21;

  if (!a1)
  {
    __p = operator new(0x20uLL);
    v18 = xmmword_2245B9420;
    strcpy((char *)__p, "MonitoringResult is NULL");
    v8 = (char *)operator new(0x78uLL);
    strcpy(v8, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMonitoringResult.cpp");
    if (a2)
    {
      *(_QWORD *)&v21.__val_ = 22;
      v21.__cat_ = std::generic_category();
      sub_2245321DC(&v21, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v9 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v9;
      v10 = v20;
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
    operator delete(v8);
    if (SHIBYTE(v18) < 0)
      operator delete(__p);
    return 0;
  }
  sub_2232D0BF8(a1, a2, &__p);
  if ((_QWORD)v18)
  {
    v3 = *(_QWORD *)v18;
    v4 = *(std::__shared_weak_count **)(v18 + 8);
    if (v4)
    {
      v5 = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
      do
        v7 = __ldaxr(v5);
      while (__stlxr(v7 - 1, v5));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  else
  {
    v3 = 0;
  }
  __p = &off_24EC715B8;
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (!*((_QWORD *)&v18 + 1))
    return v3;
  v15 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (v16)
    return v3;
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  return v3;
}

void sub_22326F21C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconMonitoringResultGetMonitoringSuggestion(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return *(unsigned __int8 *)(a1 + 85);
  __p = operator new(0x20uLL);
  v10 = xmmword_2245B9420;
  strcpy((char *)__p, "MonitoringResult is NULL");
  v4 = (char *)operator new(0x78uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconMonitoringResult.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0;
}

void sub_22326F3EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconOccupancyAirMeshResultRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 32);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DReconOccupancyAirMeshResultRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 32);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

_QWORD *CV3DReconOccupancyAirMeshResultCopyMeshList(uint64_t a1, CFTypeRef *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  char *v7;
  CFTypeRef v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  __int128 v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a1)
  {
    v3 = operator new(0x28uLL, MEMORY[0x24BEDB6B8]);
    v4 = v3;
    if (v3)
    {
      sub_22326F694(v3 + 1, (uint64_t *)(a1 + 8));
      *((_DWORD *)v4 + 8) = 1;
      *v4 = &unk_24EC1F620;
    }
    return v4;
  }
  else
  {
    __p = operator new(0x20uLL);
    v13 = xmmword_2245C6420;
    strcpy((char *)__p, "OccupancyAirMeshResult is NULL");
    v7 = (char *)operator new(0x78uLL);
    strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconOccupancyAirMesh.cpp");
    if (a2)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_2245321DC(&v16, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v8 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v8;
      v9 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    operator delete(v7);
    if (SHIBYTE(v13) < 0)
      operator delete(__p);
    return 0;
  }
}

void sub_22326F630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_22326F66C(void *a1)
{
  uint64_t v1;

  MEMORY[0x227684CD0](v1, MEMORY[0x24BEDB6B8]);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x22326F614);
}

_QWORD *sub_22326F694(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  char *v7;
  __int128 v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 != *a2)
  {
    v6 = 0xEEEEEEEEEEEEEEEFLL * (v5 >> 3);
    if (v6 >= 0x222222222222223)
      sub_22316E078();
    v7 = (char *)operator new(v5);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[120 * v6];
    do
    {
      *(_OWORD *)v7 = *(_OWORD *)v3;
      v9 = *(_QWORD *)(v3 + 24);
      *((_QWORD *)v7 + 2) = *(_QWORD *)(v3 + 16);
      *((_QWORD *)v7 + 3) = v9;
      if (v9)
      {
        v10 = (unint64_t *)(v9 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      v7[32] = 0;
      v7[96] = 0;
      if (*(_BYTE *)(v3 + 96))
      {
        v12 = *(_OWORD *)(v3 + 32);
        v13 = *(_OWORD *)(v3 + 48);
        v14 = *(_OWORD *)(v3 + 80);
        *((_OWORD *)v7 + 4) = *(_OWORD *)(v3 + 64);
        *((_OWORD *)v7 + 5) = v14;
        *((_OWORD *)v7 + 2) = v12;
        *((_OWORD *)v7 + 3) = v13;
        v7[96] = 1;
      }
      v8 = *(_OWORD *)(v3 + 100);
      v7[116] = *(_BYTE *)(v3 + 116);
      *(_OWORD *)(v7 + 100) = v8;
      v3 += 120;
      v7 += 120;
    }
    while (v3 != v4);
    a1[1] = v7;
  }
  return a1;
}

void sub_22326F79C(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 12);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 120;
      }
      while (v4 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CV3DReconOccupancyByProximityResultRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 96);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DReconOccupancyByProximityResultRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 96);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

CFTypeRef CV3DReconOccupancyByProximityResultSerializeToData(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  char *v8;
  CFTypeRef v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  CFTypeRef cf;
  __int128 v14;
  CFTypeRef v15;
  std::__shared_weak_count *v16;
  std::error_condition v17;

  if (a1)
  {
    sub_2232D1100(a1, &cf);
    v2 = cf;
    if (cf)
      CFRetain(cf);
    v3 = (std::__shared_weak_count *)v14;
    if (!(_QWORD)v14)
      return v2;
    v4 = (unint64_t *)(v14 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      return v2;
    }
    else
    {
      return v2;
    }
  }
  else
  {
    cf = operator new(0x28uLL);
    v14 = xmmword_2245B8D40;
    strcpy((char *)cf, "OccupancyByProximityResult is NULL");
    v8 = (char *)operator new(0x80uLL);
    strcpy(v8, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconOccupancyByProximityResult.cpp");
    if (a2)
    {
      *(_QWORD *)&v17.__val_ = 22;
      v17.__cat_ = std::generic_category();
      sub_2245321DC(&v17, (uint64_t)&cf, (CFErrorRef *)&v15);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v9 = v15;
      if (v15)
        CFRetain(v15);
      *a2 = v9;
      v10 = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
    operator delete(v8);
    if (SHIBYTE(v14) < 0)
      operator delete((void *)cf);
    return 0;
  }
}

void sub_22326FA44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

_DWORD *CV3DReconOccupancyByProximityResultCreateFromData(const __CFData *a1, CFTypeRef *a2)
{
  size_t Length;
  const UInt8 *BytePtr;
  const UInt8 *v6;
  void **p_dst;
  void **v8;
  CFErrorRef v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  void *__p;
  __int128 v19;
  void *v20;
  char v21;
  uint64_t v22;
  void **__dst;
  __int128 v24;
  CFErrorRef v25;
  std::__shared_weak_count *v26;
  std::error_condition v27;

  if (a1)
  {
    Length = CFDataGetLength(a1);
    BytePtr = CFDataGetBytePtr(a1);
    if (Length >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v6 = BytePtr;
    if (Length >= 0x17)
    {
      v14 = (Length & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((Length | 7) != 0x17)
        v14 = Length | 7;
      v15 = v14 + 1;
      p_dst = (void **)operator new(v14 + 1);
      *(_QWORD *)&v24 = Length;
      *((_QWORD *)&v24 + 1) = v15 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v24) = Length;
      p_dst = (void **)&__dst;
      if (!Length)
        goto LABEL_26;
    }
    memmove(p_dst, v6, Length);
LABEL_26:
    *((_BYTE *)p_dst + Length) = 0;
    sub_22326FE80((uint64_t)&__p, (__int128 *)&__dst, 8);
    v16 = operator new(0x68uLL, MEMORY[0x24BEDB6B8]);
    v13 = v16;
    if (v16)
    {
      sub_223FFFAF8((uint64_t)(v16 + 2), (uint64_t)&__p);
      v13[24] = 1;
      *(_QWORD *)v13 = &off_24EC29480;
    }
    __p = (void *)*MEMORY[0x24BEDB7F8];
    *(void **)((char *)&__p + *((_QWORD *)__p - 3)) = *(void **)(MEMORY[0x24BEDB7F8] + 24);
    *((_QWORD *)&v19 + 1) = MEMORY[0x24BEDB848] + 16;
    if (v21 < 0)
      operator delete(v20);
    std::streambuf::~streambuf();
    std::istream::~istream();
    MEMORY[0x227684BE0](&v22);
    if (SHIBYTE(v24) < 0)
      operator delete(__dst);
    return v13;
  }
  __p = operator new(0x28uLL);
  v19 = xmmword_2245B8D40;
  strcpy((char *)__p, "OccupancyByProximityResult is NULL");
  v8 = (void **)operator new(0x80uLL);
  __dst = v8;
  v24 = xmmword_2245C7840;
  strcpy((char *)v8, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconOccupancyByProximityResult.cpp");
  if (a2)
  {
    *(_QWORD *)&v27.__val_ = 22;
    v27.__cat_ = std::generic_category();
    sub_2245321DC(&v27, (uint64_t)&__p, &v25);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v9 = v25;
    if (v25)
      CFRetain(v25);
    *a2 = v9;
    v10 = v26;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    if ((SHIBYTE(v24) & 0x80000000) == 0)
      goto LABEL_19;
    v8 = __dst;
  }
  operator delete(v8);
LABEL_19:
  if (SHIBYTE(v19) < 0)
    operator delete(__p);
  return 0;
}

void sub_22326FD48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  operator delete(v15);
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_22326FE80(uint64_t a1, __int128 *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  __int128 v13;

  v6 = MEMORY[0x24BEDB868];
  v7 = MEMORY[0x24BEDB868] + 64;
  *(_QWORD *)(a1 + 120) = MEMORY[0x24BEDB868] + 64;
  v8 = a1 + 16;
  v9 = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 8);
  v10 = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + *(_QWORD *)(v9 - 24)) = v10;
  *(_QWORD *)(a1 + 8) = 0;
  v11 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v11, (void *)(a1 + 16));
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v6 + 24;
  *(_QWORD *)(a1 + 120) = v7;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x24BEDB848];
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 16) = v12 + 16;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = a3 | 8;
  if ((__int128 *)(a1 + 80) != a2)
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_22319C3F4((_QWORD *)(a1 + 80), *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v13 = *a2;
      *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 2);
      *(_OWORD *)(a1 + 80) = v13;
    }
  }
  sub_2231B5488(v8);
  return a1;
}

void sub_22326FF94(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x227684BE0](v1);
  _Unwind_Resume(a1);
}

double CV3DReconOccupancyByProximityResultGetTimestamp(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return *(double *)(a1 + 88);
  __p = operator new(0x28uLL);
  v10 = xmmword_2245B8D40;
  strcpy((char *)__p, "OccupancyByProximityResult is NULL");
  v4 = (char *)operator new(0x80uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconOccupancyByProximityResult.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0.0;
}

void sub_223270178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconOccupancyByProximityResultGetOccupiedBlockCount(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return *(unsigned int *)(a1 + 32);
  __p = operator new(0x28uLL);
  v10 = xmmword_2245B8D40;
  strcpy((char *)__p, "OccupancyByProximityResult is NULL");
  v4 = (char *)operator new(0x80uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconOccupancyByProximityResult.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0;
}

void sub_223270344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

double CV3DReconOccupancyByProximityResultGetOccupiedBlockCenter(uint64_t a1, unsigned int a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return sub_2232D144C(a1, a2, a3);
  __p = operator new(0x28uLL);
  v11 = xmmword_2245B8D40;
  strcpy((char *)__p, "OccupancyByProximityResult is NULL");
  v5 = (char *)operator new(0x80uLL);
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconOccupancyByProximityResult.cpp");
  if (a3)
  {
    *(_QWORD *)&v14.__val_ = 33;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v6;
    v7 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  operator delete(v5);
  if (SHIBYTE(v11) < 0)
    operator delete(__p);
  return 0.0;
}

void sub_223270518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

float CV3DReconOccupancyByProximityResultGetOccupiedBlockWidth(uint64_t a1, unsigned int a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return sub_2232D1638(a1, a2, a3);
  __p = operator new(0x28uLL);
  v11 = xmmword_2245B8D40;
  strcpy((char *)__p, "OccupancyByProximityResult is NULL");
  v5 = (char *)operator new(0x80uLL);
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconOccupancyByProximityResult.cpp");
  if (a3)
  {
    *(_QWORD *)&v14.__val_ = 33;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v6;
    v7 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  operator delete(v5);
  if (SHIBYTE(v11) < 0)
    operator delete(__p);
  return 0.0;
}

void sub_2232706EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconOccupancyByProximityResultGetOccupiedBlockSemanticLabel(uint64_t a1, unsigned int a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return sub_2232D1820(a1, a2, a3);
  __p = operator new(0x28uLL);
  v11 = xmmword_2245B8D40;
  strcpy((char *)__p, "OccupancyByProximityResult is NULL");
  v5 = (char *)operator new(0x80uLL);
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconOccupancyByProximityResult.cpp");
  if (a3)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v6;
    v7 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  operator delete(v5);
  if (SHIBYTE(v11) < 0)
    operator delete(__p);
  return 254;
}

void sub_2232708C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconOccupancyByProximityResultGetOccupiedBlockFlag(uint64_t a1, unsigned int a2, int a3, CFTypeRef *a4)
{
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
    return sub_2232D1A08(a1, a2, a3, a4);
  __p = operator new(0x28uLL);
  v12 = xmmword_2245B8D40;
  strcpy((char *)__p, "OccupancyByProximityResult is NULL");
  v6 = (char *)operator new(0x80uLL);
  strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconOccupancyByProximityResult.cpp");
  if (a4)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a4)
      CFRelease(*a4);
    *a4 = 0;
    v7 = cf;
    if (cf)
      CFRetain(cf);
    *a4 = v7;
    v8 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  operator delete(v6);
  if (SHIBYTE(v12) < 0)
    operator delete(__p);
  return 0;
}

void sub_223270A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void CV3DReconOccupancyByProximityResultWriteJSONToFile(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  std::ios_base *v10;
  void *v11;
  const void *v12;
  std::__shared_weak_count *cat;
  unint64_t *v14;
  unint64_t v15;
  char *v16;
  CFTypeRef v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  __int128 v22;
  void *__p[4];
  CFTypeRef v24;
  std::__shared_weak_count *v25;
  std::error_condition cf;
  void *v27;
  _OWORD v28[7];
  uint64_t v29;
  _QWORD v30[20];

  v30[19] = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    v5 = MEMORY[0x24BEDB840];
    v6 = MEMORY[0x24BEDB840] + 64;
    v7 = MEMORY[0x24BEDB7E8];
    v8 = *(void **)(MEMORY[0x24BEDB7E8] + 8);
    v9 = *(void **)(MEMORY[0x24BEDB7E8] + 16);
    v30[0] = MEMORY[0x24BEDB840] + 64;
    v27 = v8;
    *(void **)((char *)&v27 + *((_QWORD *)v8 - 3)) = v9;
    v10 = (std::ios_base *)((char *)&v27 + *((_QWORD *)v27 - 3));
    std::ios_base::init(v10, v28);
    v10[1].__vftable = 0;
    v10[1].__fmtflags_ = -1;
    v27 = (void *)(v5 + 24);
    v30[0] = v6;
    MEMORY[0x2276844F0](v28);
    std::ofstream::open();
    if (v29)
    {
      sub_2232D1D5C(a1, &v27, a3);
      std::ostream::flush();
      if (!std::filebuf::close())
        std::ios_base::clear((std::ios_base *)((char *)&v27 + *((_QWORD *)v27 - 3)), *(_DWORD *)((char *)&v28[1] + *((_QWORD *)v27 - 3) + 8) | 4);
LABEL_33:
      v27 = *(void **)v7;
      *(void **)((char *)&v27 + *((_QWORD *)v27 - 3)) = *(void **)(v7 + 24);
      MEMORY[0x2276844FC](v28);
      std::ostream::~ostream();
      MEMORY[0x227684BE0](v30);
      return;
    }
    HIBYTE(__p[2]) = 16;
    strcpy((char *)__p, "Cannot open file");
    v16 = (char *)operator new(0x80uLL);
    v21 = (uint64_t)v16;
    v22 = xmmword_2245C7840;
    strcpy(v16, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconOccupancyByProximityResult.cpp");
    if (a3)
    {
      *(_QWORD *)&cf.__val_ = 5;
      cf.__cat_ = std::generic_category();
      sub_2245321DC(&cf, (uint64_t)__p, (CFErrorRef *)&v24);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v17 = v24;
      if (v24)
        CFRetain(v24);
      *a3 = v17;
      v18 = v25;
      if (v25)
      {
        p_shared_owners = (unint64_t *)&v25->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if ((SHIBYTE(v22) & 0x80000000) == 0)
        goto LABEL_31;
      v16 = (char *)v21;
    }
    operator delete(v16);
LABEL_31:
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    goto LABEL_33;
  }
  v27 = operator new(0x28uLL);
  v28[0] = xmmword_2245B8D40;
  strcpy((char *)v27, "OccupancyByProximityResult is NULL");
  v11 = operator new(0x80uLL);
  __p[0] = v11;
  *(_OWORD *)&__p[1] = xmmword_2245C7840;
  strcpy((char *)v11, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconOccupancyByProximityResult.cpp");
  if (a3)
  {
    v21 = 22;
    *(_QWORD *)&v22 = std::generic_category();
    sub_2245321DC((const std::error_condition *)&v21, (uint64_t)&v27, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v12 = *(const void **)&cf.__val_;
    if (*(_QWORD *)&cf.__val_)
      CFRetain(*(CFTypeRef *)&cf.__val_);
    *a3 = v12;
    cat = (std::__shared_weak_count *)cf.__cat_;
    if (cf.__cat_)
    {
      v14 = (unint64_t *)&cf.__cat_[1];
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))cat->__on_zero_shared)(cat);
        std::__shared_weak_count::__release_weak(cat);
      }
    }
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
    {
      if ((SHIBYTE(v28[0]) & 0x80000000) == 0)
        return;
LABEL_36:
      operator delete(v27);
      return;
    }
    v11 = __p[0];
  }
  operator delete(v11);
  if (SHIBYTE(v28[0]) < 0)
    goto LABEL_36;
}

void sub_223270EC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;

  operator delete(v29);
  if (a18 < 0)
  {
    operator delete(__p);
    sub_22318127C(&a24);
    _Unwind_Resume(a1);
  }
  sub_22318127C(&a24);
  _Unwind_Resume(a1);
}

_QWORD *CV3DReconOccupancyByProximityResultGetMeshList(uint64_t a1, CFTypeRef *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  char *v7;
  CFTypeRef v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  __int128 v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a1)
  {
    v3 = operator new(0x28uLL, MEMORY[0x24BEDB6B8]);
    v4 = v3;
    if (v3)
    {
      sub_22326F694(v3 + 1, (uint64_t *)(a1 + 40));
      *((_DWORD *)v4 + 8) = 1;
      *v4 = &unk_24EC1F620;
    }
    return v4;
  }
  else
  {
    __p = operator new(0x28uLL);
    v13 = xmmword_2245B8D40;
    strcpy((char *)__p, "OccupancyByProximityResult is NULL");
    v7 = (char *)operator new(0x80uLL);
    strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconOccupancyByProximityResult.cpp");
    if (a2)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_2245321DC(&v16, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v8 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v8;
      v9 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    operator delete(v7);
    if (SHIBYTE(v13) < 0)
      operator delete(__p);
    return 0;
  }
}

void sub_22327113C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223271178(void *a1)
{
  uint64_t v1;

  MEMORY[0x227684CD0](v1, MEMORY[0x24BEDB6B8]);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x223271120);
}

uint64_t CV3DReconOccupancyQueryRequestRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 24);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CV3DReconOccupancyQueryRequestRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 24);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DReconOccupancyQueryResultGetWidth(uint64_t result)
{
  if (result)
    return (*(_DWORD *)(result + 16) - *(_DWORD *)(result + 8));
  return result;
}

BOOL CV3DReconOccupancyQueryResultGetHeight(uint64_t a1)
{
  return a1 != 0;
}

uint64_t CV3DReconOccupancyQueryResultGetStride(uint64_t result)
{
  if (result)
    return (*(_DWORD *)(result + 16) - *(_DWORD *)(result + 8));
  return result;
}

uint64_t CV3DReconOccupancyQueryResultGetRawPtr(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 8);
  return result;
}

uint64_t CV3DReconOccupancyQueryRequestSetGranularity(uint64_t a1, char a2, CFTypeRef *a3)
{
  uint64_t v4;
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;
  void *__p[2];
  char v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a1 && (v4 = *(_QWORD *)(a1 + 8)) != 0)
  {
    *(_BYTE *)(v4 + 8) = a2;
    return 1;
  }
  else
  {
    v13 = 13;
    strcpy((char *)__p, "Query is NULL");
    v6 = (char *)operator new(0x78uLL);
    v11 = v6;
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconOccupancyQuery.cpp");
    if (a3)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_2245321DC(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v7;
      v8 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v6 = v11;
    }
    operator delete(v6);
    if (v13 < 0)
      operator delete(__p[0]);
    return 0;
  }
}

void sub_2232713C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconOccupancyQueryRequestGetGranularity(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  void *__p[2];
  char v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 8);
  v11 = 13;
  strcpy((char *)__p, "Query is NULL");
  v4 = (char *)operator new(0x78uLL);
  v9 = v4;
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconOccupancyQuery.cpp");
  if (a2)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v4 = v9;
  }
  operator delete(v4);
  if (v11 < 0)
    operator delete(__p[0]);
  return 3;
}

void sub_223271584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconOccupancyQueryResultRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 32);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CV3DReconOccupancyQueryResultRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 32);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

double CV3DReconPlanesConfigurationCreate()
{
  char *v0;
  double result;

  v0 = (char *)operator new(0x60uLL, MEMORY[0x24BEDB6B8]);
  if (v0)
  {
    *((_OWORD *)v0 + 1) = 0u;
    *((_OWORD *)v0 + 2) = 0u;
    *((_OWORD *)v0 + 4) = 0u;
    *((_OWORD *)v0 + 5) = 0u;
    *((_OWORD *)v0 + 3) = 0u;
    result = -0.00781250172;
    *(_OWORD *)(v0 + 8) = xmmword_2245C43C0;
    v0[24] = 1;
    v0[32] = 2;
    v0[80] = 1;
    *(_QWORD *)(v0 + 84) = 0x13F533333;
    *(_QWORD *)v0 = &off_24EC296C0;
  }
  return result;
}

uint64_t CV3DReconPlanesConfigurationRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 88);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DReconPlanesConfigurationRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 88);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CV3DReconPlanesConfigurationSetDesiredOrientations()
{
  return 1;
}

BOOL CV3DReconPlanesConfigurationSetPlaneFitThreshold(uint64_t a1, CFTypeRef *a2, float a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return sub_2232D2708(a1, a2, a3);
  __p = operator new(0x28uLL);
  v11 = xmmword_2245B8D20;
  strcpy((char *)__p, "Plane detection configuration is NULL");
  v5 = (char *)operator new(0x78uLL);
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPlanesConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v6;
    v7 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  operator delete(v5);
  if (SHIBYTE(v11) < 0)
    operator delete(__p);
  return 0;
}

void sub_223271860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

float CV3DReconPlanesConfigurationGetPlaneFitThreshold(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return *(float *)(a1 + 8);
  __p = operator new(0x28uLL);
  v10 = xmmword_2245B8D20;
  strcpy((char *)__p, "Plane detection configuration is NULL");
  v4 = (char *)operator new(0x78uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPlanesConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0.0;
}

void sub_223271A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconPlanesConfigurationHasPolygonExtents(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return *(_DWORD *)(a1 + 28) != 0;
  __p = operator new(0x28uLL);
  v10 = xmmword_2245B8D20;
  strcpy((char *)__p, "Plane detection configuration is NULL");
  v4 = (char *)operator new(0x78uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPlanesConfiguration.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return 0;
}

void sub_223271C00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconPlanesConfigurationEnablePolygonExtents(uint64_t a1, int a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    *(_DWORD *)(a1 + 28) = a2;
  }
  else
  {
    __p = operator new(0x28uLL);
    v12 = xmmword_2245B8D20;
    strcpy((char *)__p, "Plane detection configuration is NULL");
    v5 = (char *)operator new(0x78uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPlanesConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_223271DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconPlanesConfigurationEnableAttachKeyframesInUpdates()
{
  return 1;
}

BOOL CV3DReconPlanesConfigurationEnableV2Pipeline(uint64_t a1, char a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    *(_BYTE *)(a1 + 56) = a2;
  }
  else
  {
    __p = operator new(0x28uLL);
    v12 = xmmword_2245B8D20;
    strcpy((char *)__p, "Plane detection configuration is NULL");
    v5 = (char *)operator new(0x78uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPlanesConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_223271F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconPointCloudRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 24);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DReconPointCloudRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 24);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

unint64_t CV3DReconPointCloudGetPointsCount(uint64_t a1, CFTypeRef *a2)
{
  _QWORD *v3;
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  char __p[19];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    v3 = *(_QWORD **)(a1 + 8);
    if (v3)
      return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[1] - *v3) >> 2);
  }
  v12 = 18;
  strcpy(__p, "PointCloud is NULL");
  v5 = (char *)operator new(0x70uLL);
  v10 = v5;
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPointCloud.cpp");
  if (a2)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v6;
    v7 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v5 = v10;
  }
  operator delete(v5);
  if (v12 < 0)
    operator delete(*(void **)__p);
  return -1;
}

void sub_223272184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconPointCloudGetPointsRawPtr(uint64_t a1, CFTypeRef *a2)
{
  _QWORD *v3;
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  char __p[19];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1 && (v3 = *(_QWORD **)(a1 + 8)) != 0)
  {
    if (*v3 == v3[1])
      return 0;
    else
      return *v3;
  }
  else
  {
    v12 = 18;
    strcpy(__p, "PointCloud is NULL");
    v5 = (char *)operator new(0x70uLL);
    v10 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPointCloud.cpp");
    if (a2)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v5 = v10;
    }
    operator delete(v5);
    if (v12 < 0)
      operator delete(*(void **)__p);
    return 0;
  }
}

void sub_223272354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconPointCloudGetPixelCoordinateRawPtr(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  char __p[19];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1 && (v3 = *(_QWORD *)(a1 + 8)) != 0)
  {
    if (*(_QWORD *)(v3 + 32) == *(_QWORD *)(v3 + 40))
      return 0;
    else
      return *(_QWORD *)(v3 + 32);
  }
  else
  {
    v12 = 18;
    strcpy(__p, "PointCloud is NULL");
    v5 = (char *)operator new(0x70uLL);
    v10 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPointCloud.cpp");
    if (a2)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v5 = v10;
    }
    operator delete(v5);
    if (v12 < 0)
      operator delete(*(void **)__p);
    return 0;
  }
}

void sub_223272524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconPointCloudGetPointsConfidenceRawPtr(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  char __p[19];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1 && (v3 = *(_QWORD *)(a1 + 8)) != 0)
  {
    if (*(_QWORD *)(v3 + 64) == *(_QWORD *)(v3 + 72))
      return 0;
    else
      return *(_QWORD *)(v3 + 64);
  }
  else
  {
    v12 = 18;
    strcpy(__p, "PointCloud is NULL");
    v5 = (char *)operator new(0x70uLL);
    v10 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPointCloud.cpp");
    if (a2)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v5 = v10;
    }
    operator delete(v5);
    if (v12 < 0)
      operator delete(*(void **)__p);
    return 0;
  }
}

void sub_2232726F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconPointCloudGetColorRawPtr(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  char __p[19];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1 && (v3 = *(_QWORD *)(a1 + 8)) != 0)
  {
    if (*(_QWORD *)(v3 + 96) == *(_QWORD *)(v3 + 104))
      return 0;
    else
      return *(_QWORD *)(v3 + 96);
  }
  else
  {
    v12 = 18;
    strcpy(__p, "PointCloud is NULL");
    v5 = (char *)operator new(0x70uLL);
    v10 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPointCloud.cpp");
    if (a2)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v5 = v10;
    }
    operator delete(v5);
    if (v12 < 0)
      operator delete(*(void **)__p);
    return 0;
  }
}

void sub_2232728C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconPointCloudGetNormalsRawPtr(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  char __p[19];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1 && (v3 = *(_QWORD *)(a1 + 8)) != 0)
  {
    if (*(_QWORD *)(v3 + 128) == *(_QWORD *)(v3 + 136))
      return 0;
    else
      return *(_QWORD *)(v3 + 128);
  }
  else
  {
    v12 = 18;
    strcpy(__p, "PointCloud is NULL");
    v5 = (char *)operator new(0x70uLL);
    v10 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPointCloud.cpp");
    if (a2)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v5 = v10;
    }
    operator delete(v5);
    if (v12 < 0)
      operator delete(*(void **)__p);
    return 0;
  }
}

void sub_223272A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconPointCloudGetSemanticLabelRawPtr(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  char __p[19];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1 && (v3 = *(_QWORD *)(a1 + 8)) != 0)
  {
    if (*(_QWORD *)(v3 + 160) == *(_QWORD *)(v3 + 168))
      return 0;
    else
      return *(_QWORD *)(v3 + 160);
  }
  else
  {
    v12 = 18;
    strcpy(__p, "PointCloud is NULL");
    v5 = (char *)operator new(0x70uLL);
    v10 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPointCloud.cpp");
    if (a2)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v5 = v10;
    }
    operator delete(v5);
    if (v12 < 0)
      operator delete(*(void **)__p);
    return 0;
  }
}

void sub_223272C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconPointCloudGetSemanticHistogramLabelsRawPtr(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  char __p[19];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1 && (v3 = *(_QWORD *)(a1 + 8)) != 0)
  {
    if (*(_QWORD *)(v3 + 192) == *(_QWORD *)(v3 + 200))
      return 0;
    else
      return *(_QWORD *)(v3 + 192);
  }
  else
  {
    v12 = 18;
    strcpy(__p, "PointCloud is NULL");
    v5 = (char *)operator new(0x70uLL);
    v10 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPointCloud.cpp");
    if (a2)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v5 = v10;
    }
    operator delete(v5);
    if (v12 < 0)
      operator delete(*(void **)__p);
    return 0;
  }
}

void sub_223272E34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconPointCloudGetSemanticHistogramVotesRawPtr(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  char __p[19];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1 && (v3 = *(_QWORD *)(a1 + 8)) != 0)
  {
    if (*(_QWORD *)(v3 + 224) == *(_QWORD *)(v3 + 232))
      return 0;
    else
      return *(_QWORD *)(v3 + 224);
  }
  else
  {
    v12 = 18;
    strcpy(__p, "PointCloud is NULL");
    v5 = (char *)operator new(0x70uLL);
    v10 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPointCloud.cpp");
    if (a2)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v5 = v10;
    }
    operator delete(v5);
    if (v12 < 0)
      operator delete(*(void **)__p);
    return 0;
  }
}

void sub_223273004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconPointCloudGetMaterialLabelRawPtr(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  char __p[19];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1 && (v3 = *(_QWORD *)(a1 + 8)) != 0)
  {
    if (*(_QWORD *)(v3 + 256) == *(_QWORD *)(v3 + 264))
      return 0;
    else
      return *(_QWORD *)(v3 + 256);
  }
  else
  {
    v12 = 18;
    strcpy(__p, "PointCloud is NULL");
    v5 = (char *)operator new(0x70uLL);
    v10 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPointCloud.cpp");
    if (a2)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v5 = v10;
    }
    operator delete(v5);
    if (v12 < 0)
      operator delete(*(void **)__p);
    return 0;
  }
}

void sub_2232731D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconPointCloudGetSceneTypeLabelRawPtr(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  char __p[19];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1 && (v3 = *(_QWORD *)(a1 + 8)) != 0)
  {
    if (*(_QWORD *)(v3 + 352) == *(_QWORD *)(v3 + 360))
      return 0;
    else
      return *(_QWORD *)(v3 + 352);
  }
  else
  {
    v12 = 18;
    strcpy(__p, "PointCloud is NULL");
    v5 = (char *)operator new(0x70uLL);
    v10 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPointCloud.cpp");
    if (a2)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v5 = v10;
    }
    operator delete(v5);
    if (v12 < 0)
      operator delete(*(void **)__p);
    return 0;
  }
}

void sub_2232733A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *CV3DReconPointCloudAlignmentConfigCreate()
{
  _QWORD *result;

  result = operator new(0x18uLL, MEMORY[0x24BEDB6B8]);
  if (result)
  {
    result[1] = 0;
    result[2] = 0;
    *((_DWORD *)result + 4) = 1;
    *result = &off_24EC29880;
  }
  return result;
}

uint64_t CV3DReconPointCloudAlignmentConfigRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 16);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DReconPointCloudAlignmentConfigRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 16);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

BOOL CV3DReconPointCloudAlignmentConfigSetVoxelSize(uint64_t a1, CFTypeRef *a2, float a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  void *__p[2];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
    return sub_2232D2AD4(a1, a2, a3);
  v12 = 14;
  strcpy((char *)__p, "Config is NULL");
  v5 = (char *)operator new(0x78uLL);
  v10 = v5;
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPointCloudAlignment.cpp");
  if (a2)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v6;
    v7 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v5 = v10;
  }
  operator delete(v5);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_2232735EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

float CV3DReconPointCloudAlignmentConfigGetVoxelSize(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  void *__p[2];
  char v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return *(float *)(a1 + 12);
  v11 = 14;
  strcpy((char *)__p, "Config is NULL");
  v4 = (char *)operator new(0x78uLL);
  v9 = v4;
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPointCloudAlignment.cpp");
  if (a2)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v4 = v9;
  }
  operator delete(v4);
  if (v11 < 0)
    operator delete(__p[0]);
  return 0.0;
}

void sub_2232737A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconPointCloudAlignmentConfigSetAttributes(uint64_t a1, unsigned int a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  void *__p[2];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
    return sub_2232D2C7C(a1, a2, a3);
  v12 = 14;
  strcpy((char *)__p, "Config is NULL");
  v5 = (char *)operator new(0x78uLL);
  v10 = v5;
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPointCloudAlignment.cpp");
  if (a3)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v6;
    v7 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v5 = v10;
  }
  operator delete(v5);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_22327396C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconPointCloudAlignmentConfigGetAttributes(uint64_t a1, CFTypeRef *a2)
{
  uint64_t result;
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  CFTypeRef v9;
  unint64_t *v10;
  char *v11;
  char __p[19];
  char v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a1)
  {
    result = *(unsigned __int8 *)(a1 + 8);
    if (result < 8)
      return result;
    v13 = 18;
    strcpy(__p, "Unknown Attributes");
    v4 = (char *)operator new(0x78uLL);
    v11 = v4;
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPointCloudAlignment.cpp");
    if (a2)
    {
      *(_QWORD *)&v16.__val_ = 33;
      v16.__cat_ = std::generic_category();
      sub_2245321DC(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v5;
      v6 = v15;
      if (!v15)
        goto LABEL_22;
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
LABEL_20:
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
LABEL_22:
      v4 = v11;
    }
  }
  else
  {
    v13 = 14;
    strcpy(__p, "Config is NULL");
    v4 = (char *)operator new(0x78uLL);
    v11 = v4;
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPointCloudAlignment.cpp");
    if (a2)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_2245321DC(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v9 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v9;
      v6 = v15;
      if (!v15)
        goto LABEL_22;
      v10 = (unint64_t *)&v15->__shared_owners_;
      do
        v8 = __ldaxr(v10);
      while (__stlxr(v8 - 1, v10));
      goto LABEL_20;
    }
  }
  operator delete(v4);
  if (v13 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_223273BF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *CV3DReconSimplifyPointCloud(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t *v5;
  float v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  char *v12;
  CFErrorRef v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  CFErrorRef v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  CFErrorRef v21;
  unint64_t *v22;
  void *__p[48];
  CFErrorRef v25;
  std::__shared_weak_count *v26;
  std::error_condition v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  int v31;

  if (!a1 || (v5 = *(uint64_t **)(a1 + 8)) == 0)
  {
    __p[0] = operator new(0x20uLL);
    *(_OWORD *)&__p[1] = xmmword_2245B8D00;
    strcpy((char *)__p[0], "Input point cloud is NULL");
    v12 = (char *)operator new(0x78uLL);
    v28 = v12;
    v29 = xmmword_2245C7880;
    strcpy(v12, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPointCloudAlignment.cpp");
    if (a3)
    {
      *(_QWORD *)&v27.__val_ = 22;
      v27.__cat_ = std::generic_category();
      sub_2245321DC(&v27, (uint64_t)__p, &v25);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v13 = v25;
      if (v25)
        CFRetain(v25);
      *a3 = v13;
      v14 = v26;
      if (v26)
      {
        p_shared_owners = (unint64_t *)&v26->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
          if (SHIBYTE(v29) < 0)
            goto LABEL_42;
          goto LABEL_44;
        }
      }
      goto LABEL_41;
    }
    goto LABEL_43;
  }
  if (a2)
  {
    v6 = *(float *)(a2 + 12);
    if (v6 > 0.0)
    {
      *(float *)&v28 = 1.0 / v6;
      BYTE4(v28) = *(_BYTE *)(a2 + 8);
      v29 = 0u;
      v30 = 0u;
      v31 = 1065353216;
      sub_223EA845C((uint64_t)&v28, v5, (float32x4_t)0);
      sub_223EA8C60((uint64_t)&v28, (uint64_t)__p);
      sub_223EA8EE8(&v28);
      v7 = (std::__shared_weak_count *)operator new(0x198uLL);
      v7->__shared_owners_ = 0;
      v8 = (unint64_t *)&v7->__shared_owners_;
      v7->__shared_weak_owners_ = 0;
      v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F0A0;
      sub_22317FD80((uint64_t)&v7[1], (uint64_t)__p);
      v9 = operator new(0x80uLL, MEMORY[0x24BEDB6B8]);
      v10 = v9;
      if (v9)
      {
        v9[2] = v7;
        *((_BYTE *)v9 + 24) = 0;
        *((_BYTE *)v9 + 88) = 0;
        *((_BYTE *)v9 + 92) = 0;
        *((_BYTE *)v9 + 108) = 0;
        v9[14] = 0;
        *((_DWORD *)v9 + 30) = 1;
        *v9 = &off_24EC1F598;
        v9[1] = v7 + 1;
      }
      else
      {
        do
          v11 = __ldaxr(v8);
        while (__stlxr(v11 - 1, v8));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      sub_22316F8F4((uint64_t *)__p);
      return v10;
    }
    strcpy((char *)__p, "Voxel size must be > 0");
    HIBYTE(__p[2]) = 22;
    v12 = (char *)operator new(0x78uLL);
    v28 = v12;
    v29 = xmmword_2245C7880;
    strcpy(v12, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPointCloudAlignment.cpp");
    if (!a3)
      goto LABEL_43;
    *(_QWORD *)&v27.__val_ = 33;
    v27.__cat_ = std::generic_category();
    sub_2245321DC(&v27, (uint64_t)__p, &v25);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v21 = v25;
    if (v25)
      CFRetain(v25);
    *a3 = v21;
    v18 = v26;
    if (v26)
    {
      v22 = (unint64_t *)&v26->__shared_owners_;
      do
        v20 = __ldaxr(v22);
      while (__stlxr(v20 - 1, v22));
      goto LABEL_39;
    }
    goto LABEL_41;
  }
  HIBYTE(__p[2]) = 14;
  strcpy((char *)__p, "Config is NULL");
  v12 = (char *)operator new(0x78uLL);
  v28 = v12;
  v29 = xmmword_2245C7880;
  strcpy(v12, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPointCloudAlignment.cpp");
  if (!a3)
  {
LABEL_43:
    operator delete(v12);
    goto LABEL_44;
  }
  *(_QWORD *)&v27.__val_ = 22;
  v27.__cat_ = std::generic_category();
  sub_2245321DC(&v27, (uint64_t)__p, &v25);
  if (*a3)
    CFRelease(*a3);
  *a3 = 0;
  v17 = v25;
  if (v25)
    CFRetain(v25);
  *a3 = v17;
  v18 = v26;
  if (v26)
  {
    v19 = (unint64_t *)&v26->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
LABEL_39:
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
LABEL_41:
  if (SHIBYTE(v29) < 0)
  {
LABEL_42:
    v12 = v28;
    goto LABEL_43;
  }
LABEL_44:
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_2232740A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  operator delete(v14);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__n128 CV3DReconPointCloudAlignment(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t **v5;
  _QWORD *v7;
  float v8;
  uint64_t *v9;
  uint64_t *v10;
  unsigned int v11;
  __n128 result;
  char *v13;
  CFErrorRef v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  CFErrorRef v18;
  unint64_t *v19;
  char *v20;
  CFErrorRef v21;
  unint64_t *v22;
  CFErrorRef v23;
  unint64_t *v24;
  float32x4_t v25;
  __n128 v26;
  void *__p[4];
  std::error_condition v28;
  char *v29;
  __int128 v30;
  CFErrorRef v31;
  std::__shared_weak_count *v32;

  if (!a1 || (v5 = *(uint64_t ***)(a1 + 8)) == 0)
  {
    __p[0] = operator new(0x20uLL);
    *(_OWORD *)&__p[1] = xmmword_2245B8D00;
    strcpy((char *)__p[0], "Input point cloud is NULL");
    v13 = (char *)operator new(0x78uLL);
    v29 = v13;
    v30 = xmmword_2245C7880;
    strcpy(v13, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPointCloudAlignment.cpp");
    if (a4)
    {
      *(_QWORD *)&v28.__val_ = 22;
      v28.__cat_ = std::generic_category();
      sub_2245321DC(&v28, (uint64_t)__p, &v31);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v14 = v31;
      if (v31)
        CFRetain(v31);
      *a4 = v14;
      v15 = v32;
      if (!v32)
        goto LABEL_29;
      p_shared_owners = (unint64_t *)&v32->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      goto LABEL_27;
    }
LABEL_31:
    v20 = v13;
LABEL_32:
    operator delete(v20);
    goto LABEL_33;
  }
  if (!a2 || (v7 = *(_QWORD **)(a2 + 8)) == 0)
  {
    __p[0] = operator new(0x20uLL);
    *(_OWORD *)&__p[1] = xmmword_2245B8D00;
    strcpy((char *)__p[0], "Input point cloud is NULL");
    v13 = (char *)operator new(0x78uLL);
    v29 = v13;
    v30 = xmmword_2245C7880;
    strcpy(v13, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPointCloudAlignment.cpp");
    if (a4)
    {
      *(_QWORD *)&v28.__val_ = 22;
      v28.__cat_ = std::generic_category();
      sub_2245321DC(&v28, (uint64_t)__p, &v31);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v18 = v31;
      if (v31)
        CFRetain(v31);
      *a4 = v18;
      v15 = v32;
      if (!v32)
        goto LABEL_29;
      v19 = (unint64_t *)&v32->__shared_owners_;
      do
        v17 = __ldaxr(v19);
      while (__stlxr(v17 - 1, v19));
      goto LABEL_27;
    }
    goto LABEL_31;
  }
  if (!a3)
  {
    HIBYTE(__p[2]) = 14;
    strcpy((char *)__p, "Config is NULL");
    v13 = (char *)operator new(0x78uLL);
    v29 = v13;
    v30 = xmmword_2245C7880;
    strcpy(v13, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPointCloudAlignment.cpp");
    if (a4)
    {
      *(_QWORD *)&v28.__val_ = 22;
      v28.__cat_ = std::generic_category();
      sub_2245321DC(&v28, (uint64_t)__p, &v31);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v21 = v31;
      if (v31)
        CFRetain(v31);
      *a4 = v21;
      v15 = v32;
      if (!v32)
        goto LABEL_29;
      v22 = (unint64_t *)&v32->__shared_owners_;
      do
        v17 = __ldaxr(v22);
      while (__stlxr(v17 - 1, v22));
      goto LABEL_27;
    }
    goto LABEL_31;
  }
  v8 = *(float *)(a3 + 12);
  if (v8 <= 0.0)
  {
    strcpy((char *)__p, "Voxel size must be > 0");
    HIBYTE(__p[2]) = 22;
    v13 = (char *)operator new(0x78uLL);
    v29 = v13;
    v30 = xmmword_2245C7880;
    strcpy(v13, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPointCloudAlignment.cpp");
    if (a4)
    {
      *(_QWORD *)&v28.__val_ = 33;
      v28.__cat_ = std::generic_category();
      sub_2245321DC(&v28, (uint64_t)__p, &v31);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v23 = v31;
      if (v31)
        CFRetain(v31);
      *a4 = v23;
      v15 = v32;
      if (!v32)
        goto LABEL_29;
      v24 = (unint64_t *)&v32->__shared_owners_;
      do
        v17 = __ldaxr(v24);
      while (__stlxr(v17 - 1, v24));
LABEL_27:
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
LABEL_29:
      if ((SHIBYTE(v30) & 0x80000000) == 0)
      {
LABEL_33:
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
        result.n128_u64[0] = 0;
        return result;
      }
      v13 = v29;
      goto LABEL_31;
    }
    goto LABEL_31;
  }
  v9 = *v5;
  v10 = v5[1];
  v11 = -1431655765 * ((unint64_t)((char *)v10 - (char *)*v5) >> 2);
  if (v11 != -1431655765 * ((v7[1] - *v7) >> 2))
  {
    __p[0] = operator new(0x30uLL);
    *(_OWORD *)&__p[1] = xmmword_2245B9450;
    strcpy((char *)__p[0], "Input point clouds must have the same size");
    v29 = (char *)operator new(0x78uLL);
    v30 = xmmword_2245C7880;
    strcpy(v29, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPointCloudAlignment.cpp");
    sub_223177404(a4, 0x21u, (uint64_t)__p);
    goto LABEL_56;
  }
  if (v11 <= 2)
  {
    sub_223174DE4(__p, "At least 3 points are required for point cloud alignment");
    sub_223174DE4(&v29, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPointCloudAlignment.cpp");
    sub_223177404(a4, 0x21u, (uint64_t)__p);
LABEL_56:
    if ((SHIBYTE(v30) & 0x80000000) == 0)
      goto LABEL_33;
    v20 = v29;
    goto LABEL_32;
  }
  sub_2232747B0(&v29, v9, v10);
  sub_2232747B0(&v28, **(uint64_t ***)(a2 + 8), *(uint64_t **)(*(_QWORD *)(a2 + 8) + 8));
  sub_223ECFC88((uint64_t *)&v29, (uint64_t *)&v28.__val_, (uint64_t)__p, v8, v25);
  result.n128_u64[0] = (unint64_t)__p[0];
  v26 = *(__n128 *)__p;
  if (*(_QWORD *)&v28.__val_)
  {
    v28.__cat_ = *(const std::error_category **)&v28.__val_;
    operator delete(*(void **)&v28.__val_);
    result = v26;
  }
  if (v29)
  {
    *(_QWORD *)&v30 = v29;
    operator delete(v29);
    return v26;
  }
  return result;
}

void sub_223274704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  void *v24;
  void *v25;

  v24 = *(void **)(v22 - 112);
  if (v24)
  {
    *(_QWORD *)(v22 - 104) = v24;
    operator delete(v24);
  }
  v25 = *(void **)(v22 - 88);
  if (v25)
  {
    *(_QWORD *)(v22 - 80) = v25;
    operator delete(v25);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2232747B0(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  int64_t v4;
  unint64_t v5;
  uint64_t *v7;
  _DWORD *v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = (char *)a3 - (char *)a2;
  if (a3 != a2)
  {
    v5 = 0xAAAAAAAAAAAAAAABLL * (v4 >> 2);
    if (v5 >= 0x1555555555555556)
      sub_22316E078();
    v7 = a2;
    v8 = operator new(v4);
    *a1 = v8;
    a1[1] = v8;
    for (a1[2] = &v8[3 * v5]; v7 != a3; v7 = (uint64_t *)((char *)v7 + 12))
    {
      v9 = *v7;
      v8[2] = *((_DWORD *)v7 + 2);
      *(_QWORD *)v8 = v9;
      v8 += 3;
    }
    a1[1] = v8;
  }
  return a1;
}

void sub_22327485C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *CV3DReconExtractFPFH(uint64_t a1, unsigned int a2, CFTypeRef *a3, float a4)
{
  uint64_t *v6;
  void *v7;
  CFTypeRef v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  CFTypeRef v12;
  unint64_t *p_shared_owners;
  CFTypeRef v14;
  unint64_t *v15;
  CFTypeRef v16;
  unint64_t *v17;
  _QWORD *v18;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  _QWORD *v22;
  unint64_t v23;
  void *v24[4];
  CFTypeRef cf;
  std::__shared_weak_count *v26;
  std::error_condition v27;
  _BYTE __p[32];
  int v29;

  if (!a1 || (v6 = *(uint64_t **)(a1 + 8)) == 0)
  {
    *(_QWORD *)__p = operator new(0x20uLL);
    *(_OWORD *)&__p[8] = xmmword_2245B8D00;
    strcpy(*(char **)__p, "Input point cloud is NULL");
    v7 = operator new(0x78uLL);
    v24[0] = v7;
    *(_OWORD *)&v24[1] = xmmword_2245C7880;
    strcpy((char *)v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPointCloudAlignment.cpp");
    if (a3)
    {
      *(_QWORD *)&v27.__val_ = 22;
      v27.__cat_ = std::generic_category();
      sub_2245321DC(&v27, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v12 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v12;
      v9 = v26;
      if (!v26)
        goto LABEL_42;
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
LABEL_41:
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
        if ((SHIBYTE(v24[2]) & 0x80000000) == 0)
          goto LABEL_45;
LABEL_43:
        v7 = v24[0];
        goto LABEL_44;
      }
LABEL_42:
      if ((SHIBYTE(v24[2]) & 0x80000000) == 0)
      {
LABEL_45:
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        return 0;
      }
      goto LABEL_43;
    }
LABEL_44:
    operator delete(v7);
    goto LABEL_45;
  }
  if (a4 <= 0.0)
  {
    *(_QWORD *)__p = operator new(0x20uLL);
    *(_OWORD *)&__p[8] = xmmword_2245B8D00;
    strcpy(*(char **)__p, "Search radius must be > 0");
    v7 = operator new(0x78uLL);
    v24[0] = v7;
    *(_OWORD *)&v24[1] = xmmword_2245C7880;
    strcpy((char *)v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPointCloudAlignment.cpp");
    if (a3)
    {
      *(_QWORD *)&v27.__val_ = 33;
      v27.__cat_ = std::generic_category();
      sub_2245321DC(&v27, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v14 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v14;
      v9 = v26;
      if (!v26)
        goto LABEL_42;
      v15 = (unint64_t *)&v26->__shared_owners_;
      do
        v11 = __ldaxr(v15);
      while (__stlxr(v11 - 1, v15));
      goto LABEL_41;
    }
    goto LABEL_44;
  }
  if (a2 <= 1)
  {
    *(_QWORD *)__p = operator new(0x28uLL);
    *(_OWORD *)&__p[8] = xmmword_2245C77E0;
    strcpy(*(char **)__p, "Number of neighbors must be >= 2");
    v7 = operator new(0x78uLL);
    v24[0] = v7;
    *(_OWORD *)&v24[1] = xmmword_2245C7880;
    strcpy((char *)v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPointCloudAlignment.cpp");
    if (a3)
    {
      *(_QWORD *)&v27.__val_ = 33;
      v27.__cat_ = std::generic_category();
      sub_2245321DC(&v27, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v8 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v8;
      v9 = v26;
      if (!v26)
        goto LABEL_42;
      v10 = (unint64_t *)&v26->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      goto LABEL_41;
    }
    goto LABEL_44;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((v6[1] - *v6) >> 2) <= 2)
  {
    *(_QWORD *)__p = operator new(0x40uLL);
    *(_OWORD *)&__p[8] = xmmword_2245C4400;
    strcpy(*(char **)__p, "At least 3 points are required for point cloud alignment");
    v7 = operator new(0x78uLL);
    v24[0] = v7;
    *(_OWORD *)&v24[1] = xmmword_2245C7880;
    strcpy((char *)v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPointCloudAlignment.cpp");
    if (a3)
    {
      *(_QWORD *)&v27.__val_ = 33;
      v27.__cat_ = std::generic_category();
      sub_2245321DC(&v27, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v16 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v16;
      v9 = v26;
      if (!v26)
        goto LABEL_42;
      v17 = (unint64_t *)&v26->__shared_owners_;
      do
        v11 = __ldaxr(v17);
      while (__stlxr(v11 - 1, v17));
      goto LABEL_41;
    }
    goto LABEL_44;
  }
  *(_OWORD *)__p = xmmword_2245C7890;
  *(_OWORD *)&__p[16] = xmmword_2245C78A0;
  v29 = 1085276160;
  sub_223E9AE7C((float *)__p, v6, a2, v24, a4);
  v20 = (std::__shared_weak_count *)operator new(0x30uLL);
  v20->__shared_owners_ = 0;
  v21 = (unint64_t *)&v20->__shared_owners_;
  v20->__shared_weak_owners_ = 0;
  v20[1].std::__shared_count = *(std::__shared_count *)v24;
  v20->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC274D8;
  v20[1].__shared_weak_owners_ = (uint64_t)v24[2];
  memset(v24, 0, 24);
  v22 = operator new(0x20uLL, MEMORY[0x24BEDB6B8]);
  v18 = v22;
  if (v22)
  {
    v22[1] = v20 + 1;
    v22[2] = v20;
    *((_DWORD *)v22 + 6) = 1;
    *v22 = &off_24EC29810;
  }
  else
  {
    do
      v23 = __ldaxr(v21);
    while (__stlxr(v23 - 1, v21));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (!v24[0])
    return v18;
  v24[1] = v24[0];
  operator delete(v24[0]);
  return v18;
}

void sub_223274DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  operator delete(v22);
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *CV3DReconExtractFPFHFromVoxelizedPointCloud(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t *v5;
  void *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  CFTypeRef v11;
  unint64_t *p_shared_owners;
  CFTypeRef v13;
  unint64_t *v14;
  _QWORD *v15;
  float v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  _QWORD *v20;
  unint64_t v21;
  void *v22[4];
  CFTypeRef cf;
  std::__shared_weak_count *v24;
  std::error_condition v25;
  _BYTE __p[32];
  int v27;

  if (!a1 || (v5 = *(uint64_t **)(a1 + 8)) == 0)
  {
    *(_QWORD *)__p = operator new(0x20uLL);
    *(_OWORD *)&__p[8] = xmmword_2245B8D00;
    strcpy(*(char **)__p, "Input point cloud is NULL");
    v6 = operator new(0x78uLL);
    v22[0] = v6;
    *(_OWORD *)&v22[1] = xmmword_2245C7880;
    strcpy((char *)v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPointCloudAlignment.cpp");
    if (!a3)
      goto LABEL_35;
    *(_QWORD *)&v25.__val_ = 22;
    v25.__cat_ = std::generic_category();
    sub_2245321DC(&v25, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v11 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v11;
    v8 = v24;
    if (!v24)
      goto LABEL_33;
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    goto LABEL_22;
  }
  if (!a2)
  {
    __p[23] = 14;
    strcpy(__p, "Config is NULL");
    v6 = operator new(0x78uLL);
    v22[0] = v6;
    *(_OWORD *)&v22[1] = xmmword_2245C7880;
    strcpy((char *)v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPointCloudAlignment.cpp");
    if (!a3)
      goto LABEL_35;
    *(_QWORD *)&v25.__val_ = 22;
    v25.__cat_ = std::generic_category();
    sub_2245321DC(&v25, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v13 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v13;
    v8 = v24;
    if (!v24)
      goto LABEL_33;
    v14 = (unint64_t *)&v24->__shared_owners_;
    do
      v10 = __ldaxr(v14);
    while (__stlxr(v10 - 1, v14));
    goto LABEL_22;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((v5[1] - *v5) >> 2) <= 2)
  {
    *(_QWORD *)__p = operator new(0x40uLL);
    *(_OWORD *)&__p[8] = xmmword_2245C4400;
    strcpy(*(char **)__p, "At least 3 points are required for point cloud alignment");
    v6 = operator new(0x78uLL);
    v22[0] = v6;
    *(_OWORD *)&v22[1] = xmmword_2245C7880;
    strcpy((char *)v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPointCloudAlignment.cpp");
    if (!a3)
      goto LABEL_35;
    *(_QWORD *)&v25.__val_ = 33;
    v25.__cat_ = std::generic_category();
    sub_2245321DC(&v25, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v7 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v7;
    v8 = v24;
    if (!v24)
    {
LABEL_33:
      if ((SHIBYTE(v22[2]) & 0x80000000) == 0)
      {
LABEL_36:
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        return 0;
      }
      v6 = v22[0];
LABEL_35:
      operator delete(v6);
      goto LABEL_36;
    }
    v9 = (unint64_t *)&v24->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
LABEL_22:
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    goto LABEL_33;
  }
  v17 = *(float *)(a2 + 12) * 5.0;
  *(_OWORD *)__p = xmmword_2245C7890;
  *(_OWORD *)&__p[16] = xmmword_2245C78A0;
  v27 = 1085276160;
  sub_223E9AE7C((float *)__p, v5, 0x64u, v22, v17);
  v18 = (std::__shared_weak_count *)operator new(0x30uLL);
  v18->__shared_owners_ = 0;
  v19 = (unint64_t *)&v18->__shared_owners_;
  v18->__shared_weak_owners_ = 0;
  v18[1].std::__shared_count = *(std::__shared_count *)v22;
  v18->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC274D8;
  v18[1].__shared_weak_owners_ = (uint64_t)v22[2];
  memset(v22, 0, 24);
  v20 = operator new(0x20uLL, MEMORY[0x24BEDB6B8]);
  v15 = v20;
  if (v20)
  {
    v20[1] = v18 + 1;
    v20[2] = v18;
    *((_DWORD *)v20 + 6) = 1;
    *v20 = &off_24EC29810;
  }
  else
  {
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (!v22[0])
    return v15;
  v22[1] = v22[0];
  operator delete(v22[0]);
  return v15;
}

void sub_2232752C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  operator delete(v22);
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconFPFHResultRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 24);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CV3DReconFPFHResultRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 24);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DReconFPFHMatchResultsRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 24);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CV3DReconFPFHMatchResultsRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 24);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DReconFPFHMatchResultsGetCount(uint64_t a1, CFTypeRef *a2)
{
  _QWORD *v3;
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
  {
    v3 = *(_QWORD **)(a1 + 8);
    if (v3)
      return (uint64_t)(v3[1] - *v3) >> 3;
  }
  __p = operator new(0x20uLL);
  v11 = xmmword_2245B8D00;
  strcpy((char *)__p, "FPFH match result is NULL");
  v5 = (char *)operator new(0x78uLL);
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPointCloudAlignment.cpp");
  if (a2)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v6;
    v7 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  operator delete(v5);
  if (SHIBYTE(v11) < 0)
    operator delete(__p);
  return 0;
}

void sub_22327556C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconFPFHMatchResultsGetRawPtr(uint64_t a1, CFTypeRef *a2)
{
  _QWORD *v3;
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1 && (v3 = *(_QWORD **)(a1 + 8)) != 0)
  {
    if (*v3 == v3[1])
      return 0;
    else
      return *v3;
  }
  else
  {
    __p = operator new(0x20uLL);
    v11 = xmmword_2245B8D00;
    strcpy((char *)__p, "FPFH match result is NULL");
    v5 = (char *)operator new(0x78uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPointCloudAlignment.cpp");
    if (a2)
    {
      *(_QWORD *)&v14.__val_ = 22;
      v14.__cat_ = std::generic_category();
      sub_2245321DC(&v14, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v6;
      v7 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v11) < 0)
      operator delete(__p);
    return 0;
  }
}

void sub_223275754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconFPFHMatchResultsGetSourceIndex(uint64_t a1, unsigned int a2, CFTypeRef *a3)
{
  unint64_t Count;
  CFTypeRef v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  char *__p;
  void *v13;
  __int128 v14;
  CFTypeRef cf;
  std::__shared_weak_count *v16;
  std::error_condition v17;

  Count = CV3DReconFPFHMatchResultsGetCount(a1, a3);
  if (*a3)
    return 0xFFFFFFFFLL;
  if (Count > a2)
    return *(unsigned int *)(**(_QWORD **)(a1 + 8) + 8 * a2);
  v13 = operator new(0x28uLL);
  v14 = xmmword_2245C77E0;
  strcpy((char *)v13, "Match index must be < match_size");
  __p = (char *)operator new(0x78uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPointCloudAlignment.cpp");
  *(_QWORD *)&v17.__val_ = 33;
  v17.__cat_ = std::generic_category();
  sub_2245321DC(&v17, (uint64_t)&v13, (CFErrorRef *)&cf);
  if (*a3)
    CFRelease(*a3);
  *a3 = 0;
  v8 = cf;
  if (cf)
    CFRetain(cf);
  *a3 = v8;
  v9 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  operator delete(__p);
  if (SHIBYTE(v14) < 0)
    operator delete(v13);
  return 0xFFFFFFFFLL;
}

void sub_22327595C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconFPFHMatchResultsGetDestinationIndex(uint64_t a1, unsigned int a2, CFTypeRef *a3)
{
  unint64_t Count;
  CFTypeRef v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  char *__p;
  void *v13;
  __int128 v14;
  CFTypeRef cf;
  std::__shared_weak_count *v16;
  std::error_condition v17;

  Count = CV3DReconFPFHMatchResultsGetCount(a1, a3);
  if (*a3)
    return 0xFFFFFFFFLL;
  if (Count > a2)
    return *(unsigned int *)(**(_QWORD **)(a1 + 8) + 8 * a2 + 4);
  v13 = operator new(0x28uLL);
  v14 = xmmword_2245C77E0;
  strcpy((char *)v13, "Match index must be < match_size");
  __p = (char *)operator new(0x78uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPointCloudAlignment.cpp");
  *(_QWORD *)&v17.__val_ = 33;
  v17.__cat_ = std::generic_category();
  sub_2245321DC(&v17, (uint64_t)&v13, (CFErrorRef *)&cf);
  if (*a3)
    CFRelease(*a3);
  *a3 = 0;
  v8 = cf;
  if (cf)
    CFRetain(cf);
  *a3 = v8;
  v9 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  operator delete(__p);
  if (SHIBYTE(v14) < 0)
    operator delete(v13);
  return 0xFFFFFFFFLL;
}

void sub_223275B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *CV3DReconMatchFPFH(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, CFTypeRef *a6)
{
  char Attributes;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  CFTypeRef v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t v21;
  CFTypeRef v22;
  unint64_t *v23;
  char *v24;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 **v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 **v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _QWORD *v35;
  char *v36;
  __int128 v37;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v40;
  std::error_condition v41;

  if (!a1 || !*(_QWORD *)(a1 + 8))
  {
    __p[0] = operator new(0x19uLL);
    *(_OWORD *)&__p[1] = xmmword_2245B9430;
    strcpy((char *)__p[0], "FPFH Descriptor is NULL");
    v16 = (char *)operator new(0x78uLL);
    v36 = v16;
    v37 = xmmword_2245C7880;
    strcpy(v16, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPointCloudAlignment.cpp");
    if (a6)
    {
      *(_QWORD *)&v41.__val_ = 22;
      v41.__cat_ = std::generic_category();
      sub_2245321DC(&v41, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a6)
        CFRelease(*a6);
      *a6 = 0;
      v17 = cf;
      if (cf)
        CFRetain(cf);
      *a6 = v17;
      v18 = v40;
      if (!v40)
        goto LABEL_30;
      p_shared_owners = (unint64_t *)&v40->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
LABEL_29:
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
        if ((SHIBYTE(v37) & 0x80000000) == 0)
        {
LABEL_34:
          if (SHIBYTE(__p[2]) < 0)
            operator delete(__p[0]);
          return 0;
        }
        goto LABEL_31;
      }
LABEL_30:
      if ((SHIBYTE(v37) & 0x80000000) == 0)
        goto LABEL_34;
LABEL_31:
      v16 = v36;
    }
LABEL_32:
    v24 = v16;
LABEL_33:
    operator delete(v24);
    goto LABEL_34;
  }
  if (!a2 || !*(_QWORD *)(a2 + 8))
  {
    __p[0] = operator new(0x19uLL);
    *(_OWORD *)&__p[1] = xmmword_2245B9430;
    strcpy((char *)__p[0], "FPFH Descriptor is NULL");
    v16 = (char *)operator new(0x78uLL);
    v36 = v16;
    v37 = xmmword_2245C7880;
    strcpy(v16, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPointCloudAlignment.cpp");
    if (a6)
    {
      *(_QWORD *)&v41.__val_ = 22;
      v41.__cat_ = std::generic_category();
      sub_2245321DC(&v41, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a6)
        CFRelease(*a6);
      *a6 = 0;
      v22 = cf;
      if (cf)
        CFRetain(cf);
      *a6 = v22;
      v18 = v40;
      if (!v40)
        goto LABEL_30;
      v23 = (unint64_t *)&v40->__shared_owners_;
      do
        v20 = __ldaxr(v23);
      while (__stlxr(v20 - 1, v23));
      goto LABEL_29;
    }
    goto LABEL_32;
  }
  Attributes = CV3DReconPointCloudAlignmentConfigGetAttributes(a5, a6);
  if (*a6)
    return 0;
  if ((Attributes & 1) != 0)
  {
    if (a3 && a4 && (v26 = *(_QWORD *)(a3 + 8)) != 0 && (v27 = *(_QWORD *)(a4 + 8)) != 0)
    {
      v29 = *(_QWORD *)(v26 + 240);
      v30 = *(_QWORD *)(v26 + 248);
      v28 = (unsigned __int8 **)(v26 + 240);
      if (v29 != v30)
      {
        v32 = *(_QWORD *)(v27 + 240);
        v33 = *(_QWORD *)(v27 + 248);
        v31 = (unsigned __int8 **)(v27 + 240);
        if (v32 != v33)
        {
          sub_223E9E120(*(uint64_t **)(a1 + 8), *(_QWORD **)(a2 + 8), v28, v31, (char **)__p);
          v34 = (char *)operator new(0x30uLL);
          *((_QWORD *)v34 + 1) = 0;
          *((_QWORD *)v34 + 2) = 0;
          *(_QWORD *)v34 = &off_24EC27528;
          *(_OWORD *)(v34 + 24) = *(_OWORD *)__p;
          *((void **)v34 + 5) = __p[2];
          memset(__p, 0, 24);
          v36 = v34 + 24;
          *(_QWORD *)&v37 = v34;
          v35 = operator new(0x20uLL, MEMORY[0x24BEDB6B8]);
          v15 = v35;
          if (v35)
          {
            v35[1] = v34 + 24;
            v35[2] = v34;
            v36 = 0;
            *(_QWORD *)&v37 = 0;
            *((_DWORD *)v35 + 6) = 1;
            *v35 = &off_24EC298F0;
          }
          sub_223167354((uint64_t)&v36);
          goto LABEL_49;
        }
      }
      sub_223174DE4(__p, "Semantic labels is empty");
      sub_223174DE4(&v36, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPointCloudAlignment.cpp");
      sub_223177404(a6, 0x21u, (uint64_t)__p);
    }
    else
    {
      __p[0] = operator new(0x20uLL);
      *(_OWORD *)&__p[1] = xmmword_2245B8D00;
      strcpy((char *)__p[0], "Input point cloud is NULL");
      v36 = (char *)operator new(0x78uLL);
      v37 = xmmword_2245C7880;
      strcpy(v36, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPointCloudAlignment.cpp");
      sub_223177404(a6, 0x16u, (uint64_t)__p);
    }
    if ((SHIBYTE(v37) & 0x80000000) == 0)
      goto LABEL_34;
    v24 = v36;
    goto LABEL_33;
  }
  sub_223E9D53C(*(uint64_t **)(a1 + 8), *(_QWORD *)(a2 + 8), (char **)__p);
  v12 = (std::__shared_weak_count *)operator new(0x30uLL);
  v12->__shared_owners_ = 0;
  v13 = (unint64_t *)&v12->__shared_owners_;
  v12->__shared_weak_owners_ = 0;
  v12[1].std::__shared_count = *(std::__shared_count *)__p;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC27528;
  v12[1].__shared_weak_owners_ = (uint64_t)__p[2];
  memset(__p, 0, 24);
  v14 = operator new(0x20uLL, MEMORY[0x24BEDB6B8]);
  v15 = v14;
  if (v14)
  {
    v14[1] = v12 + 1;
    v14[2] = v12;
    *((_DWORD *)v14 + 6) = 1;
    *v14 = &off_24EC298F0;
  }
  else
  {
    do
      v21 = __ldaxr(v13);
    while (__stlxr(v21 - 1, v13));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
LABEL_49:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v15;
}

void sub_2232760A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223276128(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC274D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223276138(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC274D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223276168(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void sub_223276184(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC27528;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223276194(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC27528;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2232761C4(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

_QWORD *CV3DReconPrivacyHandlerCreate()
{
  _QWORD *v0;
  _QWORD *v1;

  v0 = operator new(0xA8uLL, MEMORY[0x24BEDB6B8]);
  v1 = v0;
  if (v0)
  {
    v0[20] = 0;
    *((_OWORD *)v0 + 8) = 0u;
    *((_OWORD *)v0 + 9) = 0u;
    *((_OWORD *)v0 + 6) = 0u;
    *((_OWORD *)v0 + 7) = 0u;
    *((_OWORD *)v0 + 4) = 0u;
    *((_OWORD *)v0 + 5) = 0u;
    *((_OWORD *)v0 + 2) = 0u;
    *((_OWORD *)v0 + 3) = 0u;
    *(_OWORD *)v0 = 0u;
    *((_OWORD *)v0 + 1) = 0u;
    sub_2233C84F4((uint64_t)(v0 + 1));
    *((_DWORD *)v1 + 40) = 1;
    *v1 = &off_24EC29960;
  }
  return v1;
}

uint64_t sub_22327624C(void *a1)
{
  uint64_t v1;

  MEMORY[0x227684CD0](v1, MEMORY[0x24BEDB6B8]);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  return 0;
}

BOOL CV3DReconPrivacyHandlerSetKeyframeDistanceThreshold(uint64_t a1, CFTypeRef *a2, float a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    *(float *)(a1 + 152) = a3;
  }
  else
  {
    __p = operator new(0x19uLL);
    v12 = xmmword_2245B9430;
    strcpy((char *)__p, "Privacy handler is NULL");
    v5 = (char *)operator new(0x78uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPrivacyHandler.cpp");
    if (a2)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_2232763F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconPrivacyHandlerRestrictKeyframeRange(uint64_t a1, char a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    *(_BYTE *)(a1 + 156) = a2;
  }
  else
  {
    __p = operator new(0x19uLL);
    v12 = xmmword_2245B9430;
    strcpy((char *)__p, "Privacy handler is NULL");
    v5 = (char *)operator new(0x78uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPrivacyHandler.cpp");
    if (a3)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  return a1 != 0;
}

void sub_223276598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconPrivacyHandlerRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 160);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DReconPrivacyHandlerRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 160);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CV3DReconPrivacyHandlerAddClient(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *cat;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v20;
  CFTypeRef v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  CFTypeRef v25;
  unint64_t *v26;
  std::error_condition __p[2];
  CFTypeRef cf;
  std::__shared_weak_count *v29;
  std::error_condition uuid;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    if (a2)
    {
      sub_22453351C(__p, a2);
      v5 = *(_QWORD *)&__p[0].__val_;
      uuid = __p[0];
      if (!__p[0].__cat_)
        goto LABEL_15;
      v6 = (unint64_t *)&__p[0].__cat_[1];
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
      cat = (std::__shared_weak_count *)__p[0].__cat_;
      if (!__p[0].__cat_)
        goto LABEL_10;
      v9 = (unint64_t *)&__p[0].__cat_[1];
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))cat->__on_zero_shared)(cat);
        std::__shared_weak_count::__release_weak(cat);
        v5 = *(_QWORD *)&uuid.__val_;
        v11 = (std::__shared_weak_count *)uuid.__cat_;
        if (!uuid.__cat_)
          goto LABEL_15;
      }
      else
      {
LABEL_10:
        v5 = *(_QWORD *)&uuid.__val_;
        v11 = (std::__shared_weak_count *)uuid.__cat_;
        if (!uuid.__cat_)
          goto LABEL_15;
      }
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
        if (!v5)
        {
LABEL_16:
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Foundation/src/UUIDRef.cpp", 61, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B7F0F, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
        }
LABEL_17:
        __p[0] = (std::error_condition)CFUUIDGetUUIDBytes(*(CFUUIDRef *)&uuid.__val_);
        v31 = sub_22453331C((uint64_t)__p);
        *(_QWORD *)&v32 = v15;
        sub_2233C8614(a1 + 8, (unsigned __int8 *)&v31);
        v16 = (std::__shared_weak_count *)uuid.__cat_;
        if (uuid.__cat_)
        {
          v17 = (unint64_t *)&uuid.__cat_[1];
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        return 1;
      }
LABEL_15:
      if (!v5)
        goto LABEL_16;
      goto LABEL_17;
    }
    *((_BYTE *)&__p[1].__val_ + 7) = 17;
    strcpy((char *)__p, "Client ID is NULL");
    v20 = (char *)operator new(0x78uLL);
    v31 = (uint64_t)v20;
    v32 = xmmword_2245C6480;
    strcpy(v20, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPrivacyHandler.cpp");
    if (!a3)
      goto LABEL_43;
    *(_QWORD *)&uuid.__val_ = 22;
    uuid.__cat_ = std::generic_category();
    sub_2245321DC(&uuid, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v25 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v25;
    v22 = v29;
    if (!v29)
      goto LABEL_41;
    v26 = (unint64_t *)&v29->__shared_owners_;
    do
      v24 = __ldaxr(v26);
    while (__stlxr(v24 - 1, v26));
  }
  else
  {
    *(_QWORD *)&__p[0].__val_ = operator new(0x19uLL);
    *(_OWORD *)&__p[0].__cat_ = xmmword_2245B9430;
    strcpy(*(char **)&__p[0].__val_, "Privacy handler is NULL");
    v20 = (char *)operator new(0x78uLL);
    v31 = (uint64_t)v20;
    v32 = xmmword_2245C6480;
    strcpy(v20, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPrivacyHandler.cpp");
    if (!a3)
    {
LABEL_43:
      operator delete(v20);
      goto LABEL_44;
    }
    *(_QWORD *)&uuid.__val_ = 22;
    uuid.__cat_ = std::generic_category();
    sub_2245321DC(&uuid, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v21 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v21;
    v22 = v29;
    if (!v29)
      goto LABEL_41;
    v23 = (unint64_t *)&v29->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
  }
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    if ((SHIBYTE(v32) & 0x80000000) == 0)
      goto LABEL_44;
    goto LABEL_42;
  }
LABEL_41:
  if (SHIBYTE(v32) < 0)
  {
LABEL_42:
    v20 = (char *)v31;
    goto LABEL_43;
  }
LABEL_44:
  if (*((char *)&__p[1].__val_ + 7) < 0)
    operator delete(*(void **)&__p[0].__val_);
  return 0;
}

void sub_223276A08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  void *v16;

  operator delete(v16);
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_223276A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconPrivacyHandlerRemoveClient(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *cat;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v20;
  CFTypeRef v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  CFTypeRef v25;
  unint64_t *v26;
  std::error_condition __p[2];
  CFTypeRef cf;
  std::__shared_weak_count *v29;
  std::error_condition uuid;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    if (a2)
    {
      sub_22453351C(__p, a2);
      v5 = *(_QWORD *)&__p[0].__val_;
      uuid = __p[0];
      if (!__p[0].__cat_)
        goto LABEL_15;
      v6 = (unint64_t *)&__p[0].__cat_[1];
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
      cat = (std::__shared_weak_count *)__p[0].__cat_;
      if (!__p[0].__cat_)
        goto LABEL_10;
      v9 = (unint64_t *)&__p[0].__cat_[1];
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))cat->__on_zero_shared)(cat);
        std::__shared_weak_count::__release_weak(cat);
        v5 = *(_QWORD *)&uuid.__val_;
        v11 = (std::__shared_weak_count *)uuid.__cat_;
        if (!uuid.__cat_)
          goto LABEL_15;
      }
      else
      {
LABEL_10:
        v5 = *(_QWORD *)&uuid.__val_;
        v11 = (std::__shared_weak_count *)uuid.__cat_;
        if (!uuid.__cat_)
          goto LABEL_15;
      }
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
        if (!v5)
        {
LABEL_16:
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Foundation/src/UUIDRef.cpp", 61, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B7F0F, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
        }
LABEL_17:
        __p[0] = (std::error_condition)CFUUIDGetUUIDBytes(*(CFUUIDRef *)&uuid.__val_);
        v31 = sub_22453331C((uint64_t)__p);
        *(_QWORD *)&v32 = v15;
        std::mutex::lock((std::mutex *)(a1 + 32));
        sub_2233C8E9C((unsigned __int8 **)(a1 + 8), (unsigned __int8 *)&v31);
        std::mutex::unlock((std::mutex *)(a1 + 32));
        v16 = (std::__shared_weak_count *)uuid.__cat_;
        if (uuid.__cat_)
        {
          v17 = (unint64_t *)&uuid.__cat_[1];
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        return 1;
      }
LABEL_15:
      if (!v5)
        goto LABEL_16;
      goto LABEL_17;
    }
    *((_BYTE *)&__p[1].__val_ + 7) = 17;
    strcpy((char *)__p, "Client ID is NULL");
    v20 = (char *)operator new(0x78uLL);
    v31 = (uint64_t)v20;
    v32 = xmmword_2245C6480;
    strcpy(v20, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPrivacyHandler.cpp");
    if (!a3)
      goto LABEL_43;
    *(_QWORD *)&uuid.__val_ = 22;
    uuid.__cat_ = std::generic_category();
    sub_2245321DC(&uuid, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v25 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v25;
    v22 = v29;
    if (!v29)
      goto LABEL_41;
    v26 = (unint64_t *)&v29->__shared_owners_;
    do
      v24 = __ldaxr(v26);
    while (__stlxr(v24 - 1, v26));
  }
  else
  {
    *(_QWORD *)&__p[0].__val_ = operator new(0x19uLL);
    *(_OWORD *)&__p[0].__cat_ = xmmword_2245B9430;
    strcpy(*(char **)&__p[0].__val_, "Privacy handler is NULL");
    v20 = (char *)operator new(0x78uLL);
    v31 = (uint64_t)v20;
    v32 = xmmword_2245C6480;
    strcpy(v20, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPrivacyHandler.cpp");
    if (!a3)
    {
LABEL_43:
      operator delete(v20);
      goto LABEL_44;
    }
    *(_QWORD *)&uuid.__val_ = 22;
    uuid.__cat_ = std::generic_category();
    sub_2245321DC(&uuid, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v21 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v21;
    v22 = v29;
    if (!v29)
      goto LABEL_41;
    v23 = (unint64_t *)&v29->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
  }
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    if ((SHIBYTE(v32) & 0x80000000) == 0)
      goto LABEL_44;
    goto LABEL_42;
  }
LABEL_41:
  if (SHIBYTE(v32) < 0)
  {
LABEL_42:
    v20 = (char *)v31;
    goto LABEL_43;
  }
LABEL_44:
  if (*((char *)&__p[1].__val_ + 7) < 0)
    operator delete(*(void **)&__p[0].__val_);
  return 0;
}

void sub_223276E6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_223276EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconPrivacyHandlerActivateClient(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *cat;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  std::mutex *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  char *v25;
  CFTypeRef v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  CFTypeRef v32;
  unint64_t *v33;
  std::error_condition __p[2];
  CFTypeRef cf;
  std::__shared_weak_count *v37;
  std::error_condition uuid;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    *(_QWORD *)&__p[0].__val_ = operator new(0x19uLL);
    *(_OWORD *)&__p[0].__cat_ = xmmword_2245B9430;
    strcpy(*(char **)&__p[0].__val_, "Privacy handler is NULL");
    v25 = (char *)operator new(0x78uLL);
    v39 = (uint64_t)v25;
    v40 = xmmword_2245C6480;
    strcpy(v25, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPrivacyHandler.cpp");
    if (a3)
    {
      *(_QWORD *)&uuid.__val_ = 22;
      uuid.__cat_ = std::generic_category();
      sub_2245321DC(&uuid, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v26 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v26;
      v27 = v37;
      if (!v37)
        goto LABEL_52;
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v29 = __ldaxr(p_shared_owners);
      while (__stlxr(v29 - 1, p_shared_owners));
LABEL_51:
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
        if ((SHIBYTE(v40) & 0x80000000) == 0)
          goto LABEL_55;
LABEL_53:
        v25 = (char *)v39;
        goto LABEL_54;
      }
LABEL_52:
      if ((SHIBYTE(v40) & 0x80000000) == 0)
      {
LABEL_55:
        if (*((char *)&__p[1].__val_ + 7) < 0)
          operator delete(*(void **)&__p[0].__val_);
        return 0;
      }
      goto LABEL_53;
    }
LABEL_54:
    operator delete(v25);
    goto LABEL_55;
  }
  if (!a2)
  {
    *((_BYTE *)&__p[1].__val_ + 7) = 17;
    strcpy((char *)__p, "Client ID is NULL");
    v25 = (char *)operator new(0x78uLL);
    v39 = (uint64_t)v25;
    v40 = xmmword_2245C6480;
    strcpy(v25, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPrivacyHandler.cpp");
    if (a3)
    {
      *(_QWORD *)&uuid.__val_ = 22;
      uuid.__cat_ = std::generic_category();
      sub_2245321DC(&uuid, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v32 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v32;
      v27 = v37;
      if (!v37)
        goto LABEL_52;
      v33 = (unint64_t *)&v37->__shared_owners_;
      do
        v29 = __ldaxr(v33);
      while (__stlxr(v29 - 1, v33));
      goto LABEL_51;
    }
    goto LABEL_54;
  }
  sub_22453351C(__p, a2);
  v5 = *(_QWORD *)&__p[0].__val_;
  uuid = __p[0];
  if (!__p[0].__cat_)
    goto LABEL_15;
  v6 = (unint64_t *)&__p[0].__cat_[1];
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  cat = (std::__shared_weak_count *)__p[0].__cat_;
  if (!__p[0].__cat_)
    goto LABEL_10;
  v9 = (unint64_t *)&__p[0].__cat_[1];
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))cat->__on_zero_shared)(cat);
    std::__shared_weak_count::__release_weak(cat);
    v5 = *(_QWORD *)&uuid.__val_;
    v11 = (std::__shared_weak_count *)uuid.__cat_;
    if (!uuid.__cat_)
      goto LABEL_15;
  }
  else
  {
LABEL_10:
    v5 = *(_QWORD *)&uuid.__val_;
    v11 = (std::__shared_weak_count *)uuid.__cat_;
    if (!uuid.__cat_)
      goto LABEL_15;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldxr(v12);
  while (__stxr(v13 + 1, v12));
  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 - 1, v12));
  if (v14)
  {
LABEL_15:
    if (!v5)
      goto LABEL_16;
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (!v5)
  {
LABEL_16:
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Foundation/src/UUIDRef.cpp", 61, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B7F0F, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
  }
LABEL_17:
  __p[0] = (std::error_condition)CFUUIDGetUUIDBytes(*(CFUUIDRef *)&uuid.__val_);
  v39 = sub_22453331C((uint64_t)__p);
  *(_QWORD *)&v40 = v15;
  v16 = (std::mutex *)(a1 + 32);
  std::mutex::lock((std::mutex *)(a1 + 32));
  v19 = *(_QWORD *)(a1 + 16);
  v17 = a1 + 16;
  v18 = v19;
  if (!v19)
    goto LABEL_38;
  v20 = v17;
  do
  {
    v21 = sub_22319835C((unsigned __int8 *)(v18 + 32), (unsigned __int8 *)&v39);
    if (v21 >= 0)
      v22 = (uint64_t *)v18;
    else
      v22 = (uint64_t *)(v18 + 8);
    if (v21 >= 0)
      v20 = v18;
    v18 = *v22;
  }
  while (*v22);
  if (v20 == v17 || (char)sub_22319835C((unsigned __int8 *)&v39, (unsigned __int8 *)(v20 + 32)) < 0)
  {
LABEL_38:
    v23 = 0;
    std::mutex::unlock(v16);
    v24 = (std::__shared_weak_count *)uuid.__cat_;
    if (!uuid.__cat_)
      return v23;
  }
  else
  {
    v23 = 1;
    *(_BYTE *)(*(_QWORD *)(v20 + 48) + 112) = 1;
    std::mutex::unlock(v16);
    v24 = (std::__shared_weak_count *)uuid.__cat_;
    if (!uuid.__cat_)
      return v23;
  }
  v30 = (unint64_t *)&v24->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  return v23;
}

void sub_223277344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_22327739C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconPrivacyHandlerDeactivateClient(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *cat;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  std::mutex *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  char *v25;
  CFTypeRef v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  CFTypeRef v32;
  unint64_t *v33;
  std::error_condition __p[2];
  CFTypeRef cf;
  std::__shared_weak_count *v37;
  std::error_condition uuid;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    *(_QWORD *)&__p[0].__val_ = operator new(0x19uLL);
    *(_OWORD *)&__p[0].__cat_ = xmmword_2245B9430;
    strcpy(*(char **)&__p[0].__val_, "Privacy handler is NULL");
    v25 = (char *)operator new(0x78uLL);
    v39 = (uint64_t)v25;
    v40 = xmmword_2245C6480;
    strcpy(v25, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPrivacyHandler.cpp");
    if (a3)
    {
      *(_QWORD *)&uuid.__val_ = 22;
      uuid.__cat_ = std::generic_category();
      sub_2245321DC(&uuid, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v26 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v26;
      v27 = v37;
      if (!v37)
        goto LABEL_52;
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v29 = __ldaxr(p_shared_owners);
      while (__stlxr(v29 - 1, p_shared_owners));
LABEL_51:
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
        if ((SHIBYTE(v40) & 0x80000000) == 0)
          goto LABEL_55;
LABEL_53:
        v25 = (char *)v39;
        goto LABEL_54;
      }
LABEL_52:
      if ((SHIBYTE(v40) & 0x80000000) == 0)
      {
LABEL_55:
        if (*((char *)&__p[1].__val_ + 7) < 0)
          operator delete(*(void **)&__p[0].__val_);
        return 0;
      }
      goto LABEL_53;
    }
LABEL_54:
    operator delete(v25);
    goto LABEL_55;
  }
  if (!a2)
  {
    *((_BYTE *)&__p[1].__val_ + 7) = 17;
    strcpy((char *)__p, "Client ID is NULL");
    v25 = (char *)operator new(0x78uLL);
    v39 = (uint64_t)v25;
    v40 = xmmword_2245C6480;
    strcpy(v25, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPrivacyHandler.cpp");
    if (a3)
    {
      *(_QWORD *)&uuid.__val_ = 22;
      uuid.__cat_ = std::generic_category();
      sub_2245321DC(&uuid, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v32 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v32;
      v27 = v37;
      if (!v37)
        goto LABEL_52;
      v33 = (unint64_t *)&v37->__shared_owners_;
      do
        v29 = __ldaxr(v33);
      while (__stlxr(v29 - 1, v33));
      goto LABEL_51;
    }
    goto LABEL_54;
  }
  sub_22453351C(__p, a2);
  v5 = *(_QWORD *)&__p[0].__val_;
  uuid = __p[0];
  if (!__p[0].__cat_)
    goto LABEL_15;
  v6 = (unint64_t *)&__p[0].__cat_[1];
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  cat = (std::__shared_weak_count *)__p[0].__cat_;
  if (!__p[0].__cat_)
    goto LABEL_10;
  v9 = (unint64_t *)&__p[0].__cat_[1];
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))cat->__on_zero_shared)(cat);
    std::__shared_weak_count::__release_weak(cat);
    v5 = *(_QWORD *)&uuid.__val_;
    v11 = (std::__shared_weak_count *)uuid.__cat_;
    if (!uuid.__cat_)
      goto LABEL_15;
  }
  else
  {
LABEL_10:
    v5 = *(_QWORD *)&uuid.__val_;
    v11 = (std::__shared_weak_count *)uuid.__cat_;
    if (!uuid.__cat_)
      goto LABEL_15;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldxr(v12);
  while (__stxr(v13 + 1, v12));
  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 - 1, v12));
  if (v14)
  {
LABEL_15:
    if (!v5)
      goto LABEL_16;
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (!v5)
  {
LABEL_16:
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Foundation/src/UUIDRef.cpp", 61, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B7F0F, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
  }
LABEL_17:
  __p[0] = (std::error_condition)CFUUIDGetUUIDBytes(*(CFUUIDRef *)&uuid.__val_);
  v39 = sub_22453331C((uint64_t)__p);
  *(_QWORD *)&v40 = v15;
  v16 = (std::mutex *)(a1 + 32);
  std::mutex::lock((std::mutex *)(a1 + 32));
  v19 = *(_QWORD *)(a1 + 16);
  v17 = a1 + 16;
  v18 = v19;
  if (!v19)
    goto LABEL_38;
  v20 = v17;
  do
  {
    v21 = sub_22319835C((unsigned __int8 *)(v18 + 32), (unsigned __int8 *)&v39);
    if (v21 >= 0)
      v22 = (uint64_t *)v18;
    else
      v22 = (uint64_t *)(v18 + 8);
    if (v21 >= 0)
      v20 = v18;
    v18 = *v22;
  }
  while (*v22);
  if (v20 == v17 || (char)sub_22319835C((unsigned __int8 *)&v39, (unsigned __int8 *)(v20 + 32)) < 0)
  {
LABEL_38:
    v23 = 0;
    std::mutex::unlock(v16);
    v24 = (std::__shared_weak_count *)uuid.__cat_;
    if (!uuid.__cat_)
      return v23;
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(v20 + 48) + 112) = 0;
    v23 = 1;
    std::mutex::unlock(v16);
    v24 = (std::__shared_weak_count *)uuid.__cat_;
    if (!uuid.__cat_)
      return v23;
  }
  v30 = (unint64_t *)&v24->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  return v23;
}

void sub_22327781C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_223277874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconPrivacyAwareSceneQueryStateUpdateResultRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 32);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DReconPrivacyAwareSceneQueryStateUpdateResultRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 32);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

_QWORD *CV3DReconPrivacyHandlerUpdateActiveClients(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  char *v7;
  CFTypeRef v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  CFTypeRef v12;
  unint64_t *p_shared_owners;
  char *v14;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  if (a1)
  {
    if (a2)
    {
      __p[1] = 0;
      __p[2] = 0;
      __p[0] = &__p[1];
      v4 = operator new(0x28uLL, MEMORY[0x24BEDB6B8]);
      v5 = v4;
      if (v4)
      {
        v4[3] = 0;
        v4[2] = 0;
        *((_DWORD *)v4 + 8) = 1;
        *v4 = &off_24EC299D0;
        v4[1] = v4 + 2;
      }
      sub_223278400((uint64_t)__p, 0);
      return v5;
    }
    HIBYTE(__p[2]) = 20;
    strcpy((char *)__p, "State update is NULL");
    v7 = (char *)operator new(0x78uLL);
    v14 = v7;
    strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPrivacyHandler.cpp");
    if (a3)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_2245321DC(&v18, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v12 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v12;
      v9 = v17;
      if (!v17)
        goto LABEL_25;
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
LABEL_23:
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
LABEL_25:
      v7 = v14;
    }
  }
  else
  {
    __p[0] = operator new(0x19uLL);
    *(_OWORD *)&__p[1] = xmmword_2245B9430;
    strcpy((char *)__p[0], "Privacy handler is NULL");
    v7 = (char *)operator new(0x78uLL);
    v14 = v7;
    strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPrivacyHandler.cpp");
    if (a3)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_2245321DC(&v18, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v8 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v8;
      v9 = v17;
      if (!v17)
        goto LABEL_25;
      v10 = (unint64_t *)&v17->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      goto LABEL_23;
    }
  }
  operator delete(v7);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_223277BA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *CV3DReconPrivacyAwareSceneQueryStateUpdateForClient(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  const __CFUUID *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t *v35;
  unint64_t v36;
  unsigned int v37;
  unsigned int v38;
  _QWORD *result;
  char *v40;
  CFTypeRef v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  char *v45;
  CFTypeRef v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  const __CFUUID *uuid;
  CFUUIDRef uuida;
  CFUUIDRef uuidb;
  std::__shared_weak_count *v72;
  char __p[18];
  char v74;
  CFTypeRef cf;
  std::__shared_weak_count *v76;
  std::error_condition v77;

  if (!a1)
  {
    v74 = 14;
    strcpy(__p, "Result is NULL");
    v40 = (char *)operator new(0x78uLL);
    uuida = (CFUUIDRef)v40;
    strcpy(v40, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPrivacyHandler.cpp");
    if (a3)
    {
      *(_QWORD *)&v77.__val_ = 22;
      v77.__cat_ = std::generic_category();
      sub_2245321DC(&v77, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v41 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v41;
      v42 = v76;
      if (v76)
      {
        p_shared_owners = (unint64_t *)&v76->__shared_owners_;
        do
          v44 = __ldaxr(p_shared_owners);
        while (__stlxr(v44 - 1, p_shared_owners));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      v40 = (char *)uuida;
    }
    operator delete(v40);
    if ((v74 & 0x80000000) == 0)
      return 0;
    goto LABEL_91;
  }
  if (!a2)
  {
    v74 = 17;
    strcpy(__p, "Client ID is NULL");
    v45 = (char *)operator new(0x78uLL);
    uuidb = (CFUUIDRef)v45;
    strcpy(v45, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconPrivacyHandler.cpp");
    if (a3)
    {
      *(_QWORD *)&v77.__val_ = 22;
      v77.__cat_ = std::generic_category();
      sub_2245321DC(&v77, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v46 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v46;
      v47 = v76;
      if (v76)
      {
        v48 = (unint64_t *)&v76->__shared_owners_;
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
      v45 = (char *)uuidb;
    }
    operator delete(v45);
    if ((v74 & 0x80000000) == 0)
      return 0;
LABEL_91:
    operator delete(*(void **)__p);
    return 0;
  }
  sub_22453351C(__p, a2);
  v5 = *(const __CFUUID **)__p;
  uuid = *(const __CFUUID **)__p;
  v72 = *(std::__shared_weak_count **)&__p[8];
  if (!*(_QWORD *)&__p[8])
    goto LABEL_15;
  v6 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  v8 = *(std::__shared_weak_count **)&__p[8];
  if (!*(_QWORD *)&__p[8])
    goto LABEL_10;
  v9 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v5 = uuid;
    v11 = v72;
    if (!v72)
      goto LABEL_15;
  }
  else
  {
LABEL_10:
    v5 = uuid;
    v11 = v72;
    if (!v72)
      goto LABEL_15;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldxr(v12);
  while (__stxr(v13 + 1, v12));
  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 - 1, v12));
  if (v14)
  {
LABEL_15:
    if (v5)
      goto LABEL_17;
    goto LABEL_16;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (v5)
    goto LABEL_17;
LABEL_16:
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Foundation/src/UUIDRef.cpp", 61, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B7F0F, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
LABEL_17:
  *(CFUUIDBytes *)__p = CFUUIDGetUUIDBytes(uuid);
  v15 = sub_22453331C((uint64_t)__p);
  v17 = v16;
  if (v72)
  {
    v18 = (unint64_t *)&v72->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
      v50 = *(uint64_t **)(a1 + 16);
      v21 = (uint64_t *)(a1 + 16);
      v20 = v50;
      if (v50)
        goto LABEL_22;
      return 0;
    }
  }
  v22 = *(uint64_t **)(a1 + 16);
  v21 = (uint64_t *)(a1 + 16);
  v20 = v22;
  if (!v22)
    return 0;
LABEL_22:
  v23 = BYTE1(v15);
  v24 = v15;
  v25 = BYTE2(v15);
  v26 = BYTE3(v15);
  v27 = BYTE4(v15);
  v28 = BYTE5(v15);
  v29 = BYTE6(v15);
  v30 = HIBYTE(v15);
  v31 = v17;
  v32 = BYTE1(v17);
  v33 = BYTE2(v17);
  v34 = BYTE3(v17);
  v35 = v21;
  v36 = HIBYTE(v17);
  do
  {
    v37 = *((unsigned __int8 *)v20 + 32);
    LODWORD(v17) = v24;
    if (v37 != v24)
      goto LABEL_40;
    v37 = *((unsigned __int8 *)v20 + 33);
    LODWORD(v17) = v23;
    if (v37 != v23)
      goto LABEL_40;
    v37 = *((unsigned __int8 *)v20 + 34);
    LODWORD(v17) = v25;
    if (v37 != v25)
      goto LABEL_40;
    v37 = *((unsigned __int8 *)v20 + 35);
    LODWORD(v17) = v26;
    if (v37 != v26)
      goto LABEL_40;
    v37 = *((unsigned __int8 *)v20 + 36);
    LODWORD(v17) = v27;
    if (v37 != v27)
      goto LABEL_40;
    v37 = *((unsigned __int8 *)v20 + 37);
    LODWORD(v17) = v28;
    if (v37 != v28)
      goto LABEL_40;
    v37 = *((unsigned __int8 *)v20 + 38);
    LODWORD(v17) = v29;
    if (v37 != v29)
      goto LABEL_40;
    v37 = *((unsigned __int8 *)v20 + 39);
    LODWORD(v17) = v30;
    if (v37 != (_DWORD)v30)
      goto LABEL_40;
    v37 = *((unsigned __int8 *)v20 + 40);
    LODWORD(v17) = v31;
    if (v37 != v31)
      goto LABEL_40;
    v37 = *((unsigned __int8 *)v20 + 41);
    LODWORD(v17) = v32;
    if (v37 != v32)
      goto LABEL_40;
    v37 = *((unsigned __int8 *)v20 + 42);
    LODWORD(v17) = v33;
    if (v37 != v33)
      goto LABEL_40;
    v37 = *((unsigned __int8 *)v20 + 43);
    LODWORD(v17) = v34;
    if (v37 != v34)
      goto LABEL_40;
    v37 = *((unsigned __int8 *)v20 + 44);
    LODWORD(v17) = BYTE4(v17);
    if (v37 != BYTE4(v17))
      goto LABEL_40;
    v37 = *((unsigned __int8 *)v20 + 45);
    LODWORD(v17) = BYTE5(v17);
    if (v37 == BYTE5(v17)
      && (v37 = *((unsigned __int8 *)v20 + 46), LODWORD(v17) = BYTE6(v17), v37 == BYTE6(v17))
      && (v37 = *((unsigned __int8 *)v20 + 47), LODWORD(v17) = v36, v37 == (_DWORD)v36))
    {
      v35 = v20;
    }
    else
    {
LABEL_40:
      if (v37 < v17)
        ++v20;
      else
        v35 = v20;
    }
    v20 = (uint64_t *)*v20;
  }
  while (v20);
  if (v35 == v21)
    return 0;
  v38 = *((unsigned __int8 *)v35 + 32);
  if (v38 == v24)
  {
    v38 = *((unsigned __int8 *)v35 + 33);
    v24 = v23;
    if (v38 == v23)
    {
      v38 = *((unsigned __int8 *)v35 + 34);
      v24 = v25;
      if (v38 == v25)
      {
        v38 = *((unsigned __int8 *)v35 + 35);
        v24 = v26;
        if (v38 == v26)
        {
          v38 = *((unsigned __int8 *)v35 + 36);
          v24 = v27;
          if (v38 == v27)
          {
            v38 = *((unsigned __int8 *)v35 + 37);
            v24 = v28;
            if (v38 == v28)
            {
              v38 = *((unsigned __int8 *)v35 + 38);
              v24 = v29;
              if (v38 == v29)
              {
                v38 = *((unsigned __int8 *)v35 + 39);
                v24 = v30;
                if (v38 == (_DWORD)v30)
                {
                  v38 = *((unsigned __int8 *)v35 + 40);
                  v24 = v31;
                  if (v38 == v31)
                  {
                    v38 = *((unsigned __int8 *)v35 + 41);
                    v24 = v32;
                    if (v38 == v32)
                    {
                      v38 = *((unsigned __int8 *)v35 + 42);
                      v24 = v33;
                      if (v38 == v33)
                      {
                        v38 = *((unsigned __int8 *)v35 + 43);
                        v24 = v34;
                        if (v38 == v34)
                        {
                          v38 = *((unsigned __int8 *)v35 + 44);
                          v24 = BYTE4(v17);
                          if (v38 == BYTE4(v17))
                          {
                            v38 = *((unsigned __int8 *)v35 + 45);
                            v24 = BYTE5(v17);
                            if (v38 == BYTE5(v17))
                            {
                              v38 = *((unsigned __int8 *)v35 + 46);
                              v24 = BYTE6(v17);
                              if (v38 == BYTE6(v17))
                              {
                                v38 = *((unsigned __int8 *)v35 + 47);
                                v24 = v36;
                                if (v38 == (_DWORD)v36)
                                  goto LABEL_92;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (v24 < v38)
    return 0;
LABEL_92:
  result = operator new(0x78uLL, MEMORY[0x24BEDB6B8]);
  if (result)
  {
    result[1] = v35[6];
    v51 = v35[7];
    result[2] = v51;
    if (v51)
    {
      v52 = (unint64_t *)(v51 + 8);
      do
        v53 = __ldxr(v52);
      while (__stxr(v53 + 1, v52));
    }
    result[3] = v35[8];
    v54 = v35[9];
    result[4] = v54;
    if (v54)
    {
      v55 = (unint64_t *)(v54 + 8);
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
    }
    result[5] = v35[10];
    v57 = v35[11];
    result[6] = v57;
    if (v57)
    {
      v58 = (unint64_t *)(v57 + 8);
      do
        v59 = __ldxr(v58);
      while (__stxr(v59 + 1, v58));
    }
    result[7] = v35[12];
    v60 = v35[13];
    result[8] = v60;
    if (v60)
    {
      v61 = (unint64_t *)(v60 + 8);
      do
        v62 = __ldxr(v61);
      while (__stxr(v62 + 1, v61));
    }
    result[9] = v35[14];
    v63 = v35[15];
    result[10] = v63;
    if (v63)
    {
      v64 = (unint64_t *)(v63 + 8);
      do
        v65 = __ldxr(v64);
      while (__stxr(v65 + 1, v64));
    }
    result[11] = v35[16];
    v66 = v35[17];
    result[12] = v66;
    if (v66)
    {
      v67 = (unint64_t *)(v66 + 8);
      do
        v68 = __ldxr(v67);
      while (__stxr(v68 + 1, v67));
    }
    result[13] = v35[18];
    *((_DWORD *)result + 28) = 1;
    *result = &off_24EC2A078;
  }
  return result;
}

void sub_2232783A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_223278400(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_223278400(a1, *a2);
    sub_223278400(a1, a2[1]);
    sub_2231F4908(a2 + 6);
    operator delete(a2);
  }
}

uint64_t CV3DReconRoomScanLiteResultRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 36);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DReconRoomScanLiteResultRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 36);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

_QWORD *CV3DReconRoomScanLiteResultGetMeshList(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  char *v8;
  CFTypeRef v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  __int128 v14;
  CFTypeRef cf;
  std::__shared_weak_count *v16;
  std::error_condition v17;

  if (a1)
  {
    v4 = operator new(0x28uLL, MEMORY[0x24BEDB6B8]);
    v5 = v4;
    if (v4)
    {
      sub_22326F694(v4 + 1, (uint64_t *)(a1 + 8));
      *((_DWORD *)v5 + 8) = 1;
      *v5 = &unk_24EC1F620;
    }
    return v5;
  }
  else
  {
    __p = operator new(0x20uLL);
    v14 = xmmword_2245B8D70;
    strcpy((char *)__p, "RoomScanLiteResult is NULL");
    v8 = (char *)operator new(0x78uLL);
    strcpy(v8, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconRoomScanLiteResult.cpp");
    if (a3)
    {
      *(_QWORD *)&v17.__val_ = 22;
      v17.__cat_ = std::generic_category();
      sub_2245321DC(&v17, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v9 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v9;
      v10 = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
    operator delete(v8);
    if (SHIBYTE(v14) < 0)
      operator delete(__p);
    return 0;
  }
}

void sub_22327864C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223278688(void *a1)
{
  uint64_t v1;

  MEMORY[0x227684CD0](v1, MEMORY[0x24BEDB6B8]);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x223278630);
}

BOOL CV3DReconRoomScanLiteResultGetIndoorFlag(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return *(_BYTE *)(a1 + 32) != 0;
  __p = operator new(0x20uLL);
  v11 = xmmword_2245B8D70;
  strcpy((char *)__p, "RoomScanLiteResult is NULL");
  v5 = (char *)operator new(0x78uLL);
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconRoomScanLiteResult.cpp");
  if (a3)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v6;
    v7 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  operator delete(v5);
  if (SHIBYTE(v11) < 0)
    operator delete(__p);
  return 1;
}

void sub_223278848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_DWORD *CV3DReconSceneQueryCreateCollisionModelForSphere(float a1)
{
  _DWORD *result;

  result = operator new(0x18uLL, MEMORY[0x24BEDB6B8]);
  if (result)
  {
    result[4] = 1;
    *(_QWORD *)result = &off_24EC29B38;
    *((_QWORD *)result + 1) = LODWORD(a1);
  }
  return result;
}

uint64_t CV3DReconSceneQueryCollisionModelRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 16);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DReconSceneQuerySessionDoesModelCollideWithSceneGeometry(uint64_t a1, uint64_t a2, CFTypeRef *a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7)
{
  char *v9;
  CFErrorRef v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  char *v14;
  CFErrorRef v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  _BYTE __p[32];
  __n128 v20;
  __n128 v21;
  char *v22;
  __int128 v23;
  CFErrorRef v24;
  std::__shared_weak_count *v25;
  std::error_condition v26;

  if (a1)
  {
    if (a2)
    {
      *(__n128 *)__p = a4;
      *(__n128 *)&__p[16] = a5;
      v20 = a6;
      v21 = a7;
      return sub_223425FD8((_QWORD *)(a1 + 8), (unsigned __int32 *)(a2 + 8), (uint64_t)__p);
    }
    __p[23] = 20;
    strcpy(__p, "NULL collision model");
    v14 = (char *)operator new(0x80uLL);
    v22 = v14;
    v23 = xmmword_2245C79F0;
    strcpy(v14, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSceneQuerySession+Collision.cpp");
    if (a3)
    {
      *(_QWORD *)&v26.__val_ = 22;
      v26.__cat_ = std::generic_category();
      sub_2245321DC(&v26, (uint64_t)__p, &v24);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v15 = v24;
      if (v24)
        CFRetain(v24);
      *a3 = v15;
      v16 = v25;
      if (v25)
      {
        p_shared_owners = (unint64_t *)&v25->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      if ((SHIBYTE(v23) & 0x80000000) == 0)
      {
LABEL_30:
        if ((__p[23] & 0x80000000) == 0)
          return 0;
        goto LABEL_35;
      }
      v14 = v22;
    }
    operator delete(v14);
    goto LABEL_30;
  }
  __p[23] = 15;
  strcpy(__p, "Session is NULL");
  v9 = (char *)operator new(0x80uLL);
  v22 = v9;
  v23 = xmmword_2245C79F0;
  strcpy(v9, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSceneQuerySession+Collision.cpp");
  if (a3)
  {
    *(_QWORD *)&v26.__val_ = 22;
    v26.__cat_ = std::generic_category();
    sub_2245321DC(&v26, (uint64_t)__p, &v24);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v10 = v24;
    if (v24)
      CFRetain(v24);
    *a3 = v10;
    v11 = v25;
    if (v25)
    {
      v12 = (unint64_t *)&v25->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if ((SHIBYTE(v23) & 0x80000000) == 0)
    {
      if ((__p[23] & 0x80000000) != 0)
        goto LABEL_35;
      return 0;
    }
    v9 = v22;
  }
  operator delete(v9);
  if ((__p[23] & 0x80000000) == 0)
    return 0;
LABEL_35:
  operator delete(*(void **)__p);
  return 0;
}

void sub_223278BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  operator delete(v14);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *CV3DReconSceneQuerySessionCollisionWithSceneGeometry(uint64_t a1, uint64_t a2, CFTypeRef *a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7)
{
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  char *v13;
  CFErrorRef v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  CFErrorRef v18;
  unint64_t *v19;
  _BYTE v21[32];
  __n128 v22;
  __n128 v23;
  char __p[21];
  char v25;
  uint64_t v26;
  uint64_t v27;
  CFErrorRef v28;
  std::__shared_weak_count *v29;
  std::error_condition v30;

  if (a1)
  {
    if (a2)
    {
      *(__n128 *)v21 = a4;
      *(__n128 *)&v21[16] = a5;
      v22 = a6;
      v23 = a7;
      sub_223425E50((_QWORD *)(a1 + 8), (unsigned __int32 *)(a2 + 8), (uint64_t)v21, (uint64_t)__p);
      if (v26 != v27)
      {
        v8 = (std::__shared_weak_count *)operator new(0x198uLL);
        v8->__shared_owners_ = 0;
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        v8->__shared_weak_owners_ = 0;
        v8->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F0A0;
        sub_22317FD80((uint64_t)&v8[1], (uint64_t)__p);
        v10 = operator new(0x80uLL, MEMORY[0x24BEDB6B8]);
        if (v10)
        {
          v11 = v10;
          v10[2] = v8;
          *((_BYTE *)v10 + 24) = 0;
          *((_BYTE *)v10 + 88) = 0;
          *((_BYTE *)v10 + 92) = 0;
          *((_BYTE *)v10 + 108) = 0;
          v10[14] = 0;
          *((_DWORD *)v10 + 30) = 1;
          *v10 = &off_24EC1F598;
          v10[1] = v8 + 1;
LABEL_10:
          sub_22316F8F4((uint64_t *)__p);
          return v11;
        }
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v11 = 0;
      goto LABEL_10;
    }
    v25 = 20;
    strcpy(__p, "NULL collision model");
    v13 = (char *)operator new(0x80uLL);
    *(_QWORD *)v21 = v13;
    *(_OWORD *)&v21[8] = xmmword_2245C79F0;
    strcpy(v13, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSceneQuerySession+Collision.cpp");
    if (!a3)
      goto LABEL_31;
    *(_QWORD *)&v30.__val_ = 22;
    v30.__cat_ = std::generic_category();
    sub_2245321DC(&v30, (uint64_t)__p, &v28);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v18 = v28;
    if (v28)
      CFRetain(v28);
    *a3 = v18;
    v15 = v29;
    if (!v29)
      goto LABEL_29;
    v19 = (unint64_t *)&v29->__shared_owners_;
    do
      v17 = __ldaxr(v19);
    while (__stlxr(v17 - 1, v19));
  }
  else
  {
    v25 = 15;
    strcpy(__p, "Session is NULL");
    v13 = (char *)operator new(0x80uLL);
    *(_QWORD *)v21 = v13;
    *(_OWORD *)&v21[8] = xmmword_2245C79F0;
    strcpy(v13, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSceneQuerySession+Collision.cpp");
    if (!a3)
    {
LABEL_31:
      operator delete(v13);
      goto LABEL_32;
    }
    *(_QWORD *)&v30.__val_ = 22;
    v30.__cat_ = std::generic_category();
    sub_2245321DC(&v30, (uint64_t)__p, &v28);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v14 = v28;
    if (v28)
      CFRetain(v28);
    *a3 = v14;
    v15 = v29;
    if (!v29)
      goto LABEL_29;
    v16 = (unint64_t *)&v29->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
  }
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if ((v21[23] & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_30;
  }
LABEL_29:
  if ((v21[23] & 0x80000000) != 0)
  {
LABEL_30:
    v13 = *(char **)v21;
    goto LABEL_31;
  }
LABEL_32:
  if (v25 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_223278F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  operator delete(v22);
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__n128 CV3DReconSceneQuerySessionOverlayRequestCreate(int a1, int a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7, int8x16_t a8, int8x16_t a9)
{
  char *v11;
  __n128 result;
  __n128 v13;

  v11 = (char *)operator new(0x80uLL, MEMORY[0x24BEDB6B8]);
  if (v11)
  {
    v13 = a7;
    v13.n128_u32[3] = a8.i32[0];
    *(__n128 *)(v11 + 72) = v13;
    *((_DWORD *)v11 + 26) = a9.i32[2];
    *(int8x16_t *)(v11 + 88) = vextq_s8(vextq_s8(a8, a8, 0xCuLL), a9, 8uLL);
    *(__n128 *)(v11 + 8) = a3;
    *(__n128 *)(v11 + 24) = a4;
    *(__n128 *)(v11 + 40) = a5;
    result = a6;
    *(__n128 *)(v11 + 56) = a6;
    *((_DWORD *)v11 + 27) = a1;
    *((_DWORD *)v11 + 28) = a2;
    *(_QWORD *)(v11 + 116) = 0x141200000;
    *(_QWORD *)v11 = &off_24EC29BA8;
  }
  return result;
}

uint64_t CV3DReconSceneQuerySessionOverlayRequestRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 120);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DReconSceneQuerySessionOverlaySetMaxDepth(uint64_t result, float a2)
{
  if (result)
    *(float *)(result + 116) = a2;
  return result;
}

const void *CV3DReconSceneQuerySessionOverlayPlaneStateOnImage(uint64_t a1, std::__shared_weak_count_vtbl *a2, uint64_t a3, CFTypeRef *a4)
{
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  const void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  char *v18;
  CFTypeRef v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  CFTypeRef v23;
  unint64_t *v24;
  void *v25;
  const std::error_category *v26;
  CFErrorRef v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  CFTypeRef v38;
  unint64_t *v39;
  CFTypeRef cf;
  __int128 v41;
  char __p[23];
  char v43;
  uint64_t (**v44)();
  __int128 v45;
  char *v46[4];
  CFErrorRef v47;
  std::__shared_weak_count *v48;
  std::error_condition v49;

  if (!a1)
  {
    HIBYTE(v46[2]) = 15;
    strcpy((char *)v46, "Session is NULL");
    v18 = (char *)operator new(0x88uLL);
    v44 = (uint64_t (**)())v18;
    v45 = xmmword_2245C7A00;
    strcpy(v18, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSceneQuerySession+OverlayGeneration.cpp");
    if (a4)
    {
      *(_QWORD *)__p = 22;
      *(_QWORD *)&__p[8] = std::generic_category();
      sub_2245321DC((const std::error_condition *)__p, (uint64_t)v46, (CFErrorRef *)&cf);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v19 = cf;
      if (cf)
        CFRetain(cf);
      *a4 = v19;
      v20 = (std::__shared_weak_count *)v41;
      if (!(_QWORD)v41)
        goto LABEL_75;
      v21 = (unint64_t *)(v41 + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
LABEL_74:
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
        if ((SHIBYTE(v45) & 0x80000000) == 0)
          goto LABEL_78;
LABEL_76:
        v18 = (char *)v44;
        goto LABEL_77;
      }
LABEL_75:
      if ((SHIBYTE(v45) & 0x80000000) == 0)
      {
LABEL_78:
        if (SHIBYTE(v46[2]) < 0)
          operator delete(v46[0]);
        return 0;
      }
      goto LABEL_76;
    }
LABEL_77:
    operator delete(v18);
    goto LABEL_78;
  }
  if (!a2)
  {
    HIBYTE(v46[2]) = 19;
    strcpy((char *)v46, "Input image is NULL");
    v18 = (char *)operator new(0x88uLL);
    v44 = (uint64_t (**)())v18;
    v45 = xmmword_2245C7A00;
    strcpy(v18, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSceneQuerySession+OverlayGeneration.cpp");
    if (a4)
    {
      *(_QWORD *)__p = 22;
      *(_QWORD *)&__p[8] = std::generic_category();
      sub_2245321DC((const std::error_condition *)__p, (uint64_t)v46, (CFErrorRef *)&cf);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v23 = cf;
      if (cf)
        CFRetain(cf);
      *a4 = v23;
      v20 = (std::__shared_weak_count *)v41;
      if (!(_QWORD)v41)
        goto LABEL_75;
      v24 = (unint64_t *)(v41 + 8);
      do
        v22 = __ldaxr(v24);
      while (__stlxr(v22 - 1, v24));
      goto LABEL_74;
    }
    goto LABEL_77;
  }
  if (!a3)
  {
    v46[0] = (char *)operator new(0x19uLL);
    *(_OWORD *)&v46[1] = xmmword_2245B9430;
    strcpy(v46[0], "Overlay request is NULL");
    v18 = (char *)operator new(0x88uLL);
    v44 = (uint64_t (**)())v18;
    v45 = xmmword_2245C7A00;
    strcpy(v18, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSceneQuerySession+OverlayGeneration.cpp");
    if (a4)
    {
      *(_QWORD *)__p = 22;
      *(_QWORD *)&__p[8] = std::generic_category();
      sub_2245321DC((const std::error_condition *)__p, (uint64_t)v46, (CFErrorRef *)&cf);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v38 = cf;
      if (cf)
        CFRetain(cf);
      *a4 = v38;
      v20 = (std::__shared_weak_count *)v41;
      if (!(_QWORD)v41)
        goto LABEL_75;
      v39 = (unint64_t *)(v41 + 8);
      do
        v22 = __ldaxr(v39);
      while (__stlxr(v22 - 1, v39));
      goto LABEL_74;
    }
    goto LABEL_77;
  }
  sub_2242A8B78(v46, a2, 1, 1);
  sub_223425AD0(a1 + 8, (uint64_t)v46, a3 + 8, &v44);
  if (!(_QWORD)v45)
    goto LABEL_41;
  v8 = *(_QWORD *)v45;
  v7 = *(std::__shared_weak_count **)(v45 + 8);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (!v8)
  {
LABEL_41:
    strcpy(__p, "Could not render image");
    v43 = 22;
    v25 = operator new(0x88uLL);
    cf = v25;
    v41 = xmmword_2245C7A00;
    strcpy((char *)v25, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSceneQuerySession+OverlayGeneration.cpp");
    if (a4)
    {
      v26 = std::generic_category();
      *(_QWORD *)&v49.__val_ = 22;
      v49.__cat_ = v26;
      sub_2245321DC(&v49, (uint64_t)__p, &v47);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v27 = v47;
      if (v47)
        CFRetain(v47);
      *a4 = v27;
      v28 = v48;
      if (v48)
      {
        v29 = (unint64_t *)&v48->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      if ((SHIBYTE(v41) & 0x80000000) == 0)
        goto LABEL_54;
      v25 = (void *)cf;
    }
    operator delete(v25);
LABEL_54:
    if (v43 < 0)
      operator delete(*(void **)__p);
    goto LABEL_56;
  }
  if (!(_QWORD)v45)
  {
LABEL_56:
    v12 = 0;
    goto LABEL_57;
  }
  v12 = *(const void **)v45;
  v13 = *(std::__shared_weak_count **)(v45 + 8);
  *(_QWORD *)__p = *(_QWORD *)v45;
  *(_QWORD *)&__p[8] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  if (v12)
    CFRetain(v12);
  if (v13)
  {
    v16 = (unint64_t *)&v13->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
LABEL_57:
  v44 = &off_24EC715B8;
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
  if (!*((_QWORD *)&v45 + 1))
    goto LABEL_61;
  v32 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (v33)
  {
LABEL_61:
    v46[0] = (char *)&off_24EC715B8;
    v34 = (std::__shared_weak_count *)v46[2];
    if (v46[2])
      goto LABEL_62;
    return v12;
  }
  ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
  std::__shared_weak_count::__release_weak(v31);
  v46[0] = (char *)&off_24EC715B8;
  v34 = (std::__shared_weak_count *)v46[2];
  if (!v46[2])
    return v12;
LABEL_62:
  v35 = (unint64_t *)&v34->__shared_owners_;
  do
    v36 = __ldaxr(v35);
  while (__stlxr(v36 - 1, v35));
  if (v36)
    return v12;
  ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
  std::__shared_weak_count::__release_weak(v34);
  return v12;
}

void sub_223279698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  sub_223167354((uint64_t)&a13);
  sub_2242A8F3C(&a19);
  sub_2242A8F3C(&__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconRoomAssociationsRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 52);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

std::__shared_weak_count_vtbl *CV3DReconRoomAssociationsCopyRoomId(uint64_t a1)
{
  std::__shared_weak_count_vtbl *v1;
  const __CFAllocator *Default;
  std::__shared_weak_count_vtbl *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count_vtbl *v8[2];

  v1 = (std::__shared_weak_count_vtbl *)a1;
  if (!a1)
    return v1;
  if (!*(_BYTE *)(a1 + 48))
    return 0;
  Default = CFAllocatorGetDefault();
  v3 = (std::__shared_weak_count_vtbl *)CFUUIDCreateFromUUIDBytes(Default, *(CFUUIDBytes *)&v1->~__shared_weak_count_0);
  sub_224533328(v8, v3, 0);
  v1 = v8[0];
  v4 = (std::__shared_weak_count *)v8[1];
  if (v8[0])
    CFRetain(v8[0]);
  if (!v4)
    return v1;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
    return v1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v1;
}

void sub_223279840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

CFTypeRef CV3DReconRoomAssociationsCopyAssociatedUUIDs(uint64_t a1)
{
  CFUUIDBytes **v1;
  uint64_t v2;
  uint64_t v3;
  CFTypeRef v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  CFTypeRef cf;
  std::__shared_weak_count *v10;

  if (!a1)
    return 0;
  if (!*(_BYTE *)(a1 + 48))
    return 0;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v1 = (CFUUIDBytes **)(a1 + 24);
  if (v2 == v3)
    return 0;
  sub_223279DE0(v1, (CFMutableArrayRef *)&cf);
  v4 = cf;
  if (cf)
    CFRetain(cf);
  v5 = v10;
  if (!v10)
    return v4;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (v7)
    return v4;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return v4;
}

void sub_22327990C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *CV3DReconSceneQuerySessionComputeRoomPlaneAssociations(uint64_t a1, CFTypeRef *a2)
{
  char *v2;
  char *v3;
  int v4;
  __int128 v5;
  char *v7;
  CFTypeRef v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  char *v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;
  void *__p[2];
  void *v18[2];
  uint64_t v19;
  unsigned __int8 v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    sub_2234254FC(a1 + 8, (uint64_t)__p);
    v2 = (char *)operator new(0x38uLL, MEMORY[0x24BEDB6B8]);
    v3 = v2;
    if (v2)
    {
      v2[8] = 0;
      v2[48] = 0;
      v4 = v20;
      if (v20)
      {
        v5 = *(_OWORD *)v18;
        *(_OWORD *)(v2 + 8) = *(_OWORD *)__p;
        *(_OWORD *)(v2 + 24) = v5;
        *((_QWORD *)v2 + 5) = v19;
        v18[0] = 0;
        v18[1] = 0;
        v19 = 0;
        v2[48] = 1;
      }
      *((_DWORD *)v2 + 13) = 1;
      *(_QWORD *)v2 = &off_24EC29D68;
      if (!v4)
        return v3;
    }
    else if (!v20)
    {
      return v3;
    }
    if (v18[0])
    {
      v18[1] = v18[0];
      operator delete(v18[0]);
    }
    return v3;
  }
  HIBYTE(v18[0]) = 15;
  strcpy((char *)__p, "Session is NULL");
  v7 = (char *)operator new(0x88uLL);
  v13 = v7;
  strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSceneQuerySession+RoomAssociations.cpp");
  if (a2)
  {
    *(_QWORD *)&v16.__val_ = 22;
    v16.__cat_ = std::generic_category();
    sub_2245321DC(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v8 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v8;
    v9 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v7 = v13;
  }
  operator delete(v7);
  if (SHIBYTE(v18[0]) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_223279B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;

  operator delete(v21);
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

char *CV3DReconSceneQuerySessionComputeRoomMeshAssociations(uint64_t a1, CFTypeRef *a2)
{
  char *v2;
  char *v3;
  int v4;
  __int128 v5;
  char *v7;
  CFTypeRef v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  char *v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;
  void *__p[2];
  void *v18[2];
  uint64_t v19;
  unsigned __int8 v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    sub_22342584C((_QWORD *)(a1 + 8), __p);
    v2 = (char *)operator new(0x38uLL, MEMORY[0x24BEDB6B8]);
    v3 = v2;
    if (v2)
    {
      v2[8] = 0;
      v2[48] = 0;
      v4 = v20;
      if (v20)
      {
        v5 = *(_OWORD *)v18;
        *(_OWORD *)(v2 + 8) = *(_OWORD *)__p;
        *(_OWORD *)(v2 + 24) = v5;
        *((_QWORD *)v2 + 5) = v19;
        v18[0] = 0;
        v18[1] = 0;
        v19 = 0;
        v2[48] = 1;
      }
      *((_DWORD *)v2 + 13) = 1;
      *(_QWORD *)v2 = &off_24EC29D68;
      if (!v4)
        return v3;
    }
    else if (!v20)
    {
      return v3;
    }
    if (v18[0])
    {
      v18[1] = v18[0];
      operator delete(v18[0]);
    }
    return v3;
  }
  HIBYTE(v18[0]) = 15;
  strcpy((char *)__p, "Session is NULL");
  v7 = (char *)operator new(0x88uLL);
  v13 = v7;
  strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSceneQuerySession+RoomAssociations.cpp");
  if (a2)
  {
    *(_QWORD *)&v16.__val_ = 22;
    v16.__cat_ = std::generic_category();
    sub_2245321DC(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v8 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v8;
    v9 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v7 = v13;
  }
  operator delete(v7);
  if (SHIBYTE(v18[0]) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_223279D98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;

  operator delete(v21);
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_223279DE0(CFUUIDBytes **a1@<X0>, CFMutableArrayRef *a2@<X8>)
{
  std::__shared_weak_count_vtbl *Mutable;
  std::__shared_weak_count *v5;
  CFMutableArrayRef v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  CFUUIDBytes *v10;
  CFUUIDBytes *v11;
  const __CFAllocator *Default;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count_vtbl *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  CFMutableArrayRef theArray[2];
  std::__shared_weak_count_vtbl *v25;
  std::__shared_weak_count *v26;

  Mutable = (std::__shared_weak_count_vtbl *)CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  sub_224528230((std::__shared_weak_count_vtbl **)theArray, Mutable, 0);
  v6 = theArray[0];
  v5 = (std::__shared_weak_count *)theArray[1];
  if (!theArray[1])
    goto LABEL_6;
  v7 = (unint64_t *)((char *)theArray[1] + 8);
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  do
    v9 = __ldaxr(v7);
  while (__stlxr(v9 - 1, v7));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (!v6)
      goto LABEL_25;
  }
  else
  {
LABEL_6:
    if (!v6)
      goto LABEL_25;
  }
  v10 = *a1;
  v11 = a1[1];
  if (*a1 != v11)
  {
    do
    {
      Default = CFAllocatorGetDefault();
      v13 = (std::__shared_weak_count_vtbl *)CFUUIDCreateFromUUIDBytes(Default, *v10);
      sub_224533328(&v25, v13, 0);
      v15 = v25;
      v14 = v26;
      if (!v26)
        goto LABEL_13;
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        if (v15)
        {
LABEL_14:
          CFArrayAppendValue(theArray[0], v15);
          if (v14)
            goto LABEL_18;
          goto LABEL_22;
        }
      }
      else
      {
LABEL_13:
        if (v15)
          goto LABEL_14;
      }
      *a2 = 0;
      a2[1] = 0;
      if (v14)
      {
LABEL_18:
        v19 = (unint64_t *)&v14->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
LABEL_22:
      if (!v15)
        goto LABEL_26;
      ++v10;
    }
    while (v10 != v11);
  }
  *(_OWORD *)a2 = *(_OWORD *)theArray;
  a2 = theArray;
LABEL_25:
  *a2 = 0;
  a2[1] = 0;
LABEL_26:
  v21 = (std::__shared_weak_count *)theArray[1];
  if (theArray[1])
  {
    v22 = (unint64_t *)((char *)theArray[1] + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_223279FCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (a10)
  {
    v14 = (unint64_t *)&a10->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

char *CV3DReconSceneQuerySessionGetFloorPlane(uint64_t a1, CFTypeRef *a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  unint64_t v6;
  int8x16_t v7;
  int8x16_t v8;
  double v9;
  char *v10;
  char *v11;
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  char *v22;
  CFTypeRef v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  std::__shared_weak_count *cat;
  unint64_t *v34;
  unint64_t v35;
  _BYTE v37[32];
  __n128 v38;
  __n128 v39;
  CFTypeRef cf;
  std::__shared_weak_count *v41;
  std::error_condition v42;
  void *__p[2];
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  char v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  char v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  char v68;
  __int128 v69;
  __int128 v70;
  char v71;
  __int128 v72;
  uint64_t v73;
  char v74;
  __int128 v75;
  uint64_t v76;
  char v77;
  __int128 v78;
  uint64_t v79;
  unsigned __int8 v80;
  __int16 v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    *(__n128 *)v37 = a3;
    *(__n128 *)&v37[16] = a4;
    v38 = a5;
    v39 = a6;
    sub_223422D2C((uint64_t *)(a1 + 8), (float32x2_t *)v37, &v42);
    if (!*(_QWORD *)&v42.__val_)
    {
      v11 = 0;
LABEL_52:
      cat = (std::__shared_weak_count *)v42.__cat_;
      if (v42.__cat_)
      {
        v34 = (unint64_t *)&v42.__cat_[1];
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))cat->__on_zero_shared)(cat);
          std::__shared_weak_count::__release_weak(cat);
        }
      }
      return v11;
    }
    sub_2236AB8C8(*(uint64_t *)&v42.__val_, (uint64_t)v37, (uint64_t)__p, v6, v7, v8, v9);
    v10 = (char *)operator new(0x1D8uLL, MEMORY[0x24BEDB6B8]);
    v11 = v10;
    if (v10)
    {
      *((_QWORD *)v10 + 3) = v44;
      v12 = v47;
      *((_DWORD *)v10 + 8) = v45;
      *(_QWORD *)(v10 + 36) = v46;
      *(_OWORD *)(v10 + 8) = *(_OWORD *)__p;
      *((_DWORD *)v10 + 11) = v12;
      v13 = v51;
      *((_OWORD *)v10 + 5) = v50;
      *((_OWORD *)v10 + 6) = v13;
      v14 = v49;
      *((_OWORD *)v10 + 3) = v48;
      *((_OWORD *)v10 + 4) = v14;
      *((_QWORD *)v10 + 14) = v52;
      v10[120] = 0;
      v10[224] = 0;
      if (v60)
      {
        v10[120] = v53;
        v15 = v57;
        *((_OWORD *)v10 + 10) = v56;
        *((_OWORD *)v10 + 11) = v15;
        v16 = v59;
        *((_OWORD *)v10 + 12) = v58;
        *((_OWORD *)v10 + 13) = v16;
        v17 = v55;
        *((_OWORD *)v10 + 8) = v54;
        *((_OWORD *)v10 + 9) = v17;
        v10[224] = 1;
      }
      v18 = v62;
      *(_OWORD *)(v10 + 232) = v61;
      v19 = v66;
      *((_QWORD *)v10 + 35) = v64;
      *(_OWORD *)(v10 + 248) = v18;
      *(_OWORD *)(v10 + 264) = v63;
      *((_OWORD *)v10 + 18) = v65;
      *((_QWORD *)v10 + 38) = v19;
      v66 = 0;
      v65 = 0uLL;
      v10[312] = 0;
      v10[328] = 0;
      if (v68)
      {
        *(_OWORD *)(v10 + 312) = v67;
        v10[328] = 1;
      }
      v10[332] = 0;
      v10[364] = 0;
      if (v71)
      {
        *(_OWORD *)(v10 + 332) = v69;
        *(_OWORD *)(v10 + 348) = v70;
        v10[364] = 1;
      }
      v10[368] = 0;
      v10[392] = 0;
      if (v74)
      {
        *((_OWORD *)v10 + 23) = v72;
        *((_QWORD *)v10 + 48) = v73;
        v73 = 0;
        v72 = 0uLL;
        v10[392] = 1;
      }
      v10[400] = 0;
      v10[424] = 0;
      if (v77)
      {
        *((_OWORD *)v10 + 25) = v75;
        *((_QWORD *)v10 + 52) = v76;
        v76 = 0;
        v75 = 0uLL;
        v10[424] = 1;
      }
      v10[432] = 0;
      v10[456] = 0;
      v20 = v80;
      if (v80)
      {
        *((_OWORD *)v10 + 27) = v78;
        *((_QWORD *)v10 + 56) = v79;
        v79 = 0;
        v78 = 0uLL;
        v10[456] = 1;
      }
      *((_WORD *)v10 + 232) = v81;
      *((_DWORD *)v10 + 117) = 1;
      *(_QWORD *)v10 = &off_24EC2BF30;
      if (!v20)
        goto LABEL_44;
    }
    else if (!v80)
    {
LABEL_44:
      if (v77 && (_QWORD)v75)
      {
        *((_QWORD *)&v75 + 1) = v75;
        operator delete((void *)v75);
      }
      if (v74 && (_QWORD)v72)
      {
        *((_QWORD *)&v72 + 1) = v72;
        operator delete((void *)v72);
      }
      if ((_QWORD)v65)
      {
        *((_QWORD *)&v65 + 1) = v65;
        operator delete((void *)v65);
      }
      goto LABEL_52;
    }
    v27 = v78;
    if ((_QWORD)v78)
    {
      v28 = *((_QWORD *)&v78 + 1);
      v29 = (void *)v78;
      if (*((_QWORD *)&v78 + 1) != (_QWORD)v78)
      {
        v30 = *((_QWORD *)&v78 + 1);
        do
        {
          v32 = *(void **)(v30 - 24);
          v30 -= 24;
          v31 = v32;
          if (v32)
          {
            *(_QWORD *)(v28 - 16) = v31;
            operator delete(v31);
          }
          v28 = v30;
        }
        while (v30 != v27);
        v29 = (void *)v78;
      }
      *((_QWORD *)&v78 + 1) = v27;
      operator delete(v29);
    }
    goto LABEL_44;
  }
  HIBYTE(v44) = 15;
  strcpy((char *)__p, "Session is NULL");
  v22 = (char *)operator new(0x78uLL);
  *(_QWORD *)v37 = v22;
  *(_OWORD *)&v37[8] = xmmword_2245B8E20;
  strcpy(v22, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSceneQuerySession.cpp");
  if (a2)
  {
    *(_QWORD *)&v42.__val_ = 22;
    v42.__cat_ = std::generic_category();
    sub_2245321DC(&v42, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v23 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v23;
    v24 = v41;
    if (v41)
    {
      p_shared_owners = (unint64_t *)&v41->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if ((v37[23] & 0x80000000) == 0)
      goto LABEL_31;
    v22 = *(char **)v37;
  }
  operator delete(v22);
LABEL_31:
  if (SHIBYTE(v44) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_22327A4B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;

  operator delete(v27);
  if (a27 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

_QWORD *CV3DReconRaycastRequestCreate(__n128 a1, int32x4_t a2, float a3)
{
  _QWORD *result;
  float32x2_t v5;
  float32x2_t v6;
  int8x16_t v7;
  float32x4_t v8;

  result = operator new(0x30uLL, MEMORY[0x24BEDB6B8]);
  if (result)
  {
    v5 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a2.i8, 1);
    v6 = (float32x2_t)vdupq_laneq_s32(a2, 2).u64[0];
    v5.f32[0] = 1.0
              / sqrtf(vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)a2.i8, *(float32x2_t *)a2.i8), v5, v5), v6, v6).f32[0]);
    v7 = (int8x16_t)vmulq_n_f32((float32x4_t)a2, v5.f32[0]);
    result[1] = a1.n128_u64[0];
    *((_DWORD *)result + 4) = a1.n128_u32[2];
    v8 = vmulq_n_f32((float32x4_t)v7, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(vmul_f32(*(float32x2_t *)a2.i8, v5), *(float32x2_t *)v7.i8), vmul_lane_f32(v5, *(float32x2_t *)a2.i8, 1), *(float32x2_t *)v7.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL), vmul_f32(v6, v5)).f32[0]));
    *((_DWORD *)result + 7) = v8.i32[2];
    *(_QWORD *)((char *)result + 20) = v8.i64[0];
    *((float *)result + 8) = a3;
    *(_QWORD *)((char *)result + 36) = 0x100000003;
    *result = &off_24EC29C18;
  }
  return result;
}

BOOL CV3DReconRaycastRequestSetConsideredGeometry(uint64_t a1, int a2, CFTypeRef *a3)
{
  unsigned int v3;
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  v3 = a2 - 1;
  if ((a2 - 1) >= 3)
  {
    __p = operator new(0x20uLL);
    v12 = xmmword_2245B8EA0;
    strcpy((char *)__p, "Geometry to consider is invalid");
    v5 = (char *)operator new(0x78uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSceneQuerySession.cpp");
    if (a3)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  else
  {
    *(_DWORD *)(a1 + 36) = a2;
  }
  return v3 < 3;
}

void sub_22327A758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconRaycastRequestRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 40);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DReconRaycastResultRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 36);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

double CV3DReconRaycastResultGetIntersection(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  char __p[23];
  char v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return *(double *)(a1 + 8);
  strcpy(__p, "Raycast result is null");
  v11 = 22;
  v4 = (char *)operator new(0x78uLL);
  v9 = v4;
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSceneQuerySession.cpp");
  if (a2)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v4 = v9;
  }
  operator delete(v4);
  if (v11 < 0)
    operator delete(*(void **)__p);
  return 0.0;
}

void sub_22327A974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

double CV3DReconRaycastResultGetNormal(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  char __p[23];
  char v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return *(double *)(a1 + 20);
  strcpy(__p, "Raycast result is null");
  v11 = 22;
  v4 = (char *)operator new(0x78uLL);
  v9 = v4;
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSceneQuerySession.cpp");
  if (a2)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v4 = v9;
  }
  operator delete(v4);
  if (v11 < 0)
    operator delete(*(void **)__p);
  return 0.0;
}

void sub_22327AB3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconRaycastResultGetSemanticLabel(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  char __p[23];
  char v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return *(unsigned __int8 *)(a1 + 33);
  strcpy(__p, "Raycast result is null");
  v11 = 22;
  v4 = (char *)operator new(0x78uLL);
  v9 = v4;
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSceneQuerySession.cpp");
  if (a2)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v4 = v9;
  }
  operator delete(v4);
  if (v11 < 0)
    operator delete(*(void **)__p);
  return 255;
}

void sub_22327ACF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconRaycastResultGetGeometryType(uint64_t a1, CFTypeRef *a2)
{
  unsigned __int8 v2;
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  char __p[23];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    v2 = *(_BYTE *)(a1 + 32);
    if ((v2 + 1) >= 3u)
      return -1;
    return v2;
  }
  else
  {
    strcpy(__p, "Raycast result is null");
    v12 = 22;
    v5 = (char *)operator new(0x78uLL);
    v10 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSceneQuerySession.cpp");
    if (a2)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v5 = v10;
    }
    operator delete(v5);
    if (v12 < 0)
      operator delete(*(void **)__p);
    return 255;
  }
}

void sub_22327AEB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

char *CV3DReconSceneQuerySessionExecuteRaycast(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  CFTypeRef v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  char *result;
  char *v14;
  CFTypeRef v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  _BYTE __p[24];
  CFTypeRef cf;
  std::__shared_weak_count *v21;
  std::error_condition v22;

  if (a1)
  {
    if (a2)
    {
      sub_223423068(a1 + 8, a2 + 8, __p);
      v4 = *(char **)__p;
      if (*(_QWORD *)__p != *(_QWORD *)&__p[8])
      {
        v5 = (char *)operator new(0x28uLL, MEMORY[0x24BEDB6B8]);
        if (v5)
        {
          v6 = v5;
          v7 = *(_QWORD *)v4;
          *((_DWORD *)v5 + 4) = *((_DWORD *)v4 + 2);
          *(_QWORD *)(v5 + 20) = *(_QWORD *)(v4 + 12);
          *((_DWORD *)v5 + 7) = *((_DWORD *)v4 + 5);
          *((_WORD *)v5 + 16) = *((_WORD *)v4 + 12);
          *((_DWORD *)v5 + 9) = 1;
          *(_QWORD *)v5 = &off_24EC29C88;
          *((_QWORD *)v5 + 1) = v7;
LABEL_21:
          *(_QWORD *)&__p[8] = v4;
          operator delete(v4);
          return v6;
        }
      }
      v6 = 0;
      result = 0;
      if (v4)
        goto LABEL_21;
    }
    else
    {
      *(_QWORD *)__p = operator new(0x19uLL);
      *(_OWORD *)&__p[8] = xmmword_2245B9430;
      strcpy(*(char **)__p, "Raycast request is null");
      v14 = (char *)operator new(0x78uLL);
      strcpy(v14, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSceneQuerySession.cpp");
      if (a3)
      {
        *(_QWORD *)&v22.__val_ = 22;
        v22.__cat_ = std::generic_category();
        sub_2245321DC(&v22, (uint64_t)__p, (CFErrorRef *)&cf);
        if (*a3)
          CFRelease(*a3);
        *a3 = 0;
        v15 = cf;
        if (cf)
          CFRetain(cf);
        *a3 = v15;
        v16 = v21;
        if (v21)
        {
          p_shared_owners = (unint64_t *)&v21->__shared_owners_;
          do
            v18 = __ldaxr(p_shared_owners);
          while (__stlxr(v18 - 1, p_shared_owners));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
      }
      operator delete(v14);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      return 0;
    }
  }
  else
  {
    __p[23] = 15;
    strcpy(__p, "Session is NULL");
    v8 = (char *)operator new(0x78uLL);
    strcpy(v8, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSceneQuerySession.cpp");
    if (a3)
    {
      *(_QWORD *)&v22.__val_ = 22;
      v22.__cat_ = std::generic_category();
      sub_2245321DC(&v22, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v9 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v9;
      v10 = v21;
      if (v21)
      {
        v11 = (unint64_t *)&v21->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
    operator delete(v8);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    return 0;
  }
  return result;
}

void sub_22327B248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void CV3DReconSceneQuerySessionLogRaycastResults(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5, CFTypeRef *a6, __n128 a7, __n128 a8, __n128 a9, __n128 a10, double a11, double a12, double a13)
{
  uint32x2_t *v15;
  uint64_t v16;
  uint32x2_t *v17;
  unint64_t v18;
  uint32x2_t *v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  _BYTE *v24;
  uint32x2_t *v25;
  uint32x2_t *v26;
  int64_t v27;
  unint64_t v28;
  uint32x2_t *v29;
  uint32x2_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  uint32x2_t *v35;
  uint64_t v36;
  __int128 v37;
  uint32x2_t *v38;
  char *v40;
  CFTypeRef v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  __int128 v45;
  __int128 v46;
  float32x2_t v48[2];
  __int128 v49;
  __int128 v50;
  std::error_condition v51;
  __int128 v52;
  int v53;
  uint64_t v54;
  _QWORD v55[2];
  _BYTE v56[32];
  __n128 v57;
  __n128 v58;
  CFTypeRef cf[2];
  uint32x2_t *v60[3];
  __int128 v61;
  std::error_condition v62;
  __int128 v63;
  int v64;
  std::error_condition v65;
  __int128 v66;
  int v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    HIBYTE(v60[2]) = 15;
    strcpy((char *)v60, "Session is NULL");
    v40 = (char *)operator new(0x78uLL);
    *(_QWORD *)v56 = v40;
    *(_OWORD *)&v56[8] = xmmword_2245B8E20;
    strcpy(v40, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSceneQuerySession.cpp");
    if (a6)
    {
      *(_QWORD *)&v65.__val_ = 22;
      v65.__cat_ = std::generic_category();
      sub_2245321DC(&v65, (uint64_t)v60, (CFErrorRef *)cf);
      if (*a6)
        CFRelease(*a6);
      *a6 = 0;
      v41 = cf[0];
      if (cf[0])
        CFRetain(cf[0]);
      *a6 = v41;
      v42 = (std::__shared_weak_count *)cf[1];
      if (cf[1])
      {
        v43 = (unint64_t *)((char *)cf[1] + 8);
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      if ((v56[23] & 0x80000000) == 0)
        goto LABEL_49;
      v40 = *(char **)v56;
    }
    operator delete(v40);
LABEL_49:
    if ((SHIBYTE(v60[2]) & 0x80000000) == 0)
      return;
    v38 = v60[0];
    goto LABEL_51;
  }
  DWORD1(v46) = a2;
  *((_QWORD *)&v46 + 1) = a3;
  *(__n128 *)v56 = a7;
  *(__n128 *)&v56[16] = a8;
  v57 = a9;
  v58 = a10;
  HIDWORD(a11) = HIDWORD(a12);
  *(double *)v55 = a11;
  *(double *)&v55[1] = a13;
  sub_223207E58(v60, (int *)v55);
  v45 = *(_OWORD *)&v60[1];
  *(_OWORD *)cf = v61;
  v65 = v62;
  v66 = v63;
  v67 = v64;
  memset(v60, 0, sizeof(v60));
  if (a5)
  {
    v15 = (uint32x2_t *)operator new(8 * a5);
    v16 = 0;
    v60[0] = v15;
    v60[1] = v15;
    v60[2] = &v15[a5];
    while (1)
    {
      v18 = *(unsigned int *)(a4 + 4 * (2 * v16)) | ((unint64_t)*(unsigned int *)(a4 + 4 * ((2 * (_DWORD)v16) | 1u)) << 32);
      if (v15 >= v60[2])
        break;
      *v15 = (uint32x2_t)v18;
      v17 = v15 + 1;
LABEL_5:
      v60[1] = v17;
      ++v16;
      v15 = v17;
      if (v16 == a5)
        goto LABEL_34;
    }
    v19 = v60[0];
    v20 = v15 - v60[0];
    v21 = v20 + 1;
    if ((unint64_t)(v20 + 1) >> 61)
      sub_22316E078();
    v22 = (char *)v60[2] - (char *)v60[0];
    if (((char *)v60[2] - (char *)v60[0]) >> 2 > v21)
      v21 = v22 >> 2;
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
      v23 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v23 = v21;
    if (v23)
    {
      if (v23 >> 61)
        sub_223174E94();
      v24 = operator new(8 * v23);
      v25 = (uint32x2_t *)&v24[8 * v20];
      v26 = (uint32x2_t *)&v24[8 * v23];
      *v25 = (uint32x2_t)v18;
      v17 = v25 + 1;
      v27 = (char *)v15 - (char *)v19;
      if (v15 != v19)
      {
LABEL_16:
        v28 = v27 - 8;
        if (v28 >= 0x168)
        {
          v31 = ((char *)&v15[-1] - (char *)v19) & 0xFFFFFFFFFFFFFFF8;
          if (&v24[(char *)v15 - (char *)v19 - 8 - v31] > &v24[(char *)v15 - (char *)v19 - 8])
          {
            v29 = v15;
          }
          else if ((uint32x2_t *)((char *)&v15[-1] - v31) > &v15[-1])
          {
            v29 = v15;
          }
          else if ((unint64_t)((char *)v19 - v24) >= 0x20)
          {
            v32 = (v28 >> 3) + 1;
            v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
            v29 = &v15[v33 / 0xFFFFFFFFFFFFFFF8];
            v25 = (uint32x2_t *)((char *)v25 - v33);
            v34 = &v24[8 * v20 - 16];
            v35 = v15 - 2;
            v36 = v32 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v37 = *(_OWORD *)v35->i8;
              *(v34 - 1) = *(_OWORD *)v35[-2].i8;
              *v34 = v37;
              v34 -= 2;
              v35 -= 4;
              v36 -= 4;
            }
            while (v36);
            if (v32 == (v32 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_19:
              v15 = v60[0];
              v60[0] = v25;
              v60[1] = v17;
              v60[2] = v26;
              if (!v15)
                goto LABEL_5;
              goto LABEL_23;
            }
          }
          else
          {
            v29 = v15;
          }
        }
        else
        {
          v29 = v15;
        }
        do
        {
          v30 = v29[-1];
          --v29;
          v25[-1] = v30;
          --v25;
        }
        while (v29 != v19);
        goto LABEL_19;
      }
    }
    else
    {
      v24 = 0;
      v25 = (uint32x2_t *)(8 * v20);
      v26 = 0;
      *(_QWORD *)(8 * v20) = v18;
      v17 = (uint32x2_t *)(8 * v20 + 8);
      v27 = (char *)v15 - (char *)v19;
      if (v15 != v19)
        goto LABEL_16;
    }
    v60[0] = v25;
    v60[1] = v17;
    v60[2] = v26;
LABEL_23:
    operator delete(v15);
    goto LABEL_5;
  }
LABEL_34:
  v53 = v67;
  v49 = v45;
  v50 = *(_OWORD *)cf;
  v51 = v65;
  v52 = v66;
  v54 = v46 >> 32;
  v48[0] = (float32x2_t)&off_24EC207B8;
  v48[1] = (float32x2_t)&off_24EC20868;
  sub_223423510(a1 + 8, (float32x2_t *)v56, v48, v60);
  v48[0] = (float32x2_t)&off_24EC20828;
  v38 = v60[0];
  if (v60[0])
  {
    v60[1] = v60[0];
LABEL_51:
    operator delete(v38);
  }
}

void sub_22327B6D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  void *v37;
  uint64_t v38;

  operator delete(v37);
  if (*(char *)(v38 - 201) < 0)
  {
    operator delete(*(void **)(v38 - 224));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t CV3DReconSceneQuerySessionGetNumPlanes(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  void *__p[2];
  char v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return sub_2234252AC((uint64_t **)(a1 + 8));
  v11 = 15;
  strcpy((char *)__p, "Session is NULL");
  v4 = (char *)operator new(0x78uLL);
  v9 = v4;
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSceneQuerySession.cpp");
  if (a2)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v4 = v9;
  }
  operator delete(v4);
  if (v11 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_22327B8E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconSceneQuerySessionGetNumKeyframesPlanes(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  void *__p[2];
  char v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return sub_2234253D4((uint64_t **)(a1 + 8));
  v11 = 15;
  strcpy((char *)__p, "Session is NULL");
  v4 = (char *)operator new(0x78uLL);
  v9 = v4;
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSceneQuerySession.cpp");
  if (a2)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v4 = v9;
  }
  operator delete(v4);
  if (v11 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_22327BAAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_DWORD *CV3DReconSceneQuerySessionCreate()
{
  _DWORD *v5;
  _DWORD *v6;
  int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  __int16 v20;
  uint64_t v21;

  *(_QWORD *)&v19 = 0x7FFFFFFFLL;
  WORD4(v19) = 0;
  HIDWORD(v19) = 16843009;
  v20 = 1;
  v21 = 1048576000;
  v10 = 0u;
  v11 = 0u;
  v12 = 0;
  v9 = 0u;
  v8 = 1065353216;
  LODWORD(v10) = 1065353216;
  DWORD1(v11) = 1065353216;
  v15 = 0u;
  v16 = 0u;
  v14 = 0u;
  v17 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  v13 = _D0;
  LODWORD(v15) = 1065353216;
  DWORD1(v16) = 1065353216;
  v18 = 1065353216;
  v5 = operator new(0xC0uLL, MEMORY[0x24BEDB6B8]);
  v6 = v5;
  if (v5)
  {
    sub_2234213C8((uint64_t)(v5 + 2), &v19, (__int128 *)&v8);
    v6[46] = 1;
    *(_QWORD *)v6 = &off_24EC29EB8;
  }
  return v6;
}

uint64_t sub_22327BBB4(void *a1)
{
  uint64_t v1;

  MEMORY[0x227684CD0](v1, MEMORY[0x24BEDB6B8]);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  return 0;
}

_DWORD *CV3DReconSceneQuerySessionCreateWithConfiguration(uint64_t a1, CFTypeRef *a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  _DWORD *v7;
  _DWORD *v8;
  char *v11;
  CFErrorRef v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _BYTE __p[32];
  __n128 v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  char *v23;
  __int128 v24;
  CFErrorRef v25;
  std::__shared_weak_count *v26;
  std::error_condition v27;

  if (a1)
  {
    *(__n128 *)__p = a3;
    *(__n128 *)&__p[16] = a4;
    v17 = a5;
    v18 = a6;
    v19 = a3;
    v20 = a4;
    v21 = a5;
    v22 = a6;
    v7 = operator new(0xC0uLL, MEMORY[0x24BEDB6B8]);
    v8 = v7;
    if (v7)
    {
      sub_2234213C8((uint64_t)(v7 + 2), (__int128 *)(a1 + 8), (__int128 *)__p);
      v8[46] = 1;
      *(_QWORD *)v8 = &off_24EC29EB8;
    }
    return v8;
  }
  *(_QWORD *)__p = operator new(0x28uLL);
  *(_OWORD *)&__p[8] = xmmword_2245C65C0;
  strcpy(*(char **)__p, "Input session configuration is NULL");
  v11 = (char *)operator new(0x78uLL);
  v23 = v11;
  v24 = xmmword_2245B8E20;
  strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSceneQuerySession.cpp");
  if (a2)
  {
    *(_QWORD *)&v27.__val_ = 22;
    v27.__cat_ = std::generic_category();
    sub_2245321DC(&v27, (uint64_t)__p, &v25);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v12 = v25;
    if (v25)
      CFRetain(v25);
    *a2 = v12;
    v13 = v26;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if ((SHIBYTE(v24) & 0x80000000) == 0)
      goto LABEL_18;
    v11 = v23;
  }
  operator delete(v11);
LABEL_18:
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_22327BDCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  operator delete(v14);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_22327BE08(void *a1)
{
  uint64_t v1;

  MEMORY[0x227684CD0](v1, MEMORY[0x24BEDB6B8]);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x22327BDB0);
}

uint64_t CV3DReconSceneQuerySessionRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 184);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DReconSceneQuerySessionRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 184);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CV3DReconSceneQuerySessionReplaceState(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  char *v10;
  CFTypeRef v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char v16;
  CFTypeRef cf;
  std::__shared_weak_count *v18;
  std::error_condition v19;

  if (a1)
  {
    if (a2)
    {
      sub_223422B68((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
      return 1;
    }
    v16 = 14;
    strcpy((char *)__p, "State is empty");
    v10 = (char *)operator new(0x78uLL);
    strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSceneQuerySession.cpp");
    if (a3)
    {
      *(_QWORD *)&v19.__val_ = 22;
      v19.__cat_ = std::generic_category();
      sub_2245321DC(&v19, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v11 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v11;
      v12 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    operator delete(v10);
    if ((v16 & 0x80000000) == 0)
      return 0;
  }
  else
  {
    v16 = 15;
    strcpy((char *)__p, "Session is NULL");
    v5 = (char *)operator new(0x78uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSceneQuerySession.cpp");
    if (a3)
    {
      *(_QWORD *)&v19.__val_ = 22;
      v19.__cat_ = std::generic_category();
      sub_2245321DC(&v19, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v18;
      if (v18)
      {
        v8 = (unint64_t *)&v18->__shared_owners_;
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if ((v16 & 0x80000000) == 0)
      return 0;
  }
  operator delete(__p[0]);
  return 0;
}

void sub_22327C148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

char *CV3DReconSessionQuerySessionCreateStateSnapshot(uint64_t a1, CFTypeRef *a2)
{
  char *v2;
  char *v3;
  __int128 v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  char *v17;
  CFErrorRef v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *__p[2];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  char *v29;
  __int128 v30;
  CFErrorRef v31;
  std::__shared_weak_count *v32;
  std::error_condition v33;

  if (a1)
  {
    sub_223427F24(*(uint64_t **)(a1 + 8), *(_DWORD *)(a1 + 16), (uint64_t)__p);
    v2 = (char *)operator new(0x50uLL, MEMORY[0x24BEDB6B8]);
    v3 = v2;
    if (v2)
    {
      v4 = v26;
      *(_OWORD *)(v2 + 8) = *(_OWORD *)__p;
      *(_OWORD *)(v2 + 24) = v4;
      v5 = v28;
      *(_OWORD *)(v2 + 40) = v27;
      __p[0] = 0;
      __p[1] = 0;
      v26 = 0uLL;
      v27 = 0uLL;
      *(_OWORD *)(v2 + 56) = v5;
      v28 = 0uLL;
      *((_DWORD *)v2 + 18) = 1;
      *(_QWORD *)v2 = &off_24EC29F98;
    }
    else
    {
      v22 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
      if (*((_QWORD *)&v28 + 1))
      {
        v23 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
    }
    v6 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
    if (*((_QWORD *)&v27 + 1))
    {
      v7 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
    if (*((_QWORD *)&v26 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = (std::__shared_weak_count *)__p[1];
    if (!__p[1])
      return v3;
    v13 = (unint64_t *)((char *)__p[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (v14)
      return v3;
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    return v3;
  }
  BYTE7(v26) = 15;
  strcpy((char *)__p, "Session is NULL");
  v17 = (char *)operator new(0x78uLL);
  v29 = v17;
  v30 = xmmword_2245B8E20;
  strcpy(v17, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSceneQuerySession.cpp");
  if (a2)
  {
    *(_QWORD *)&v33.__val_ = 22;
    v33.__cat_ = std::generic_category();
    sub_2245321DC(&v33, (uint64_t)__p, &v31);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v18 = v31;
    if (v31)
      CFRetain(v31);
    *a2 = v18;
    v19 = v32;
    if (v32)
    {
      p_shared_owners = (unint64_t *)&v32->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if ((SHIBYTE(v30) & 0x80000000) == 0)
      goto LABEL_32;
    v17 = v29;
  }
  operator delete(v17);
LABEL_32:
  if (SBYTE7(v26) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_22327C464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  operator delete(v14);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

double CV3DReconSceneQuerySessionConfigurationCreate()
{
  _OWORD *v0;
  double result;

  v0 = operator new(0x28uLL, MEMORY[0x24BEDB6B8]);
  if (v0)
  {
    *v0 = 0u;
    v0[1] = 0u;
    *((_DWORD *)v0 + 5) = 16843009;
    *((_BYTE *)v0 + 24) = 1;
    *((_DWORD *)v0 + 7) = 1048576000;
    *(_QWORD *)&result = 0x100000000;
    *((_QWORD *)v0 + 4) = 0x100000000;
    *(_QWORD *)v0 = &off_24EC29F28;
  }
  return result;
}

uint64_t CV3DReconSceneQuerySessionConfigurationRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 36);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

BOOL CV3DReconSceneQuerySessionConfigurationProcessPlanesUpdates(uint64_t a1, int a2, CFTypeRef *a3)
{
  return sub_22327C534(a1, 1, a2, a3);
}

BOOL sub_22327C534(uint64_t a1, int a2, int a3, CFTypeRef *a4)
{
  int v5;
  char *v7;
  CFTypeRef v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  char *v13;
  char __p[22];
  char v15;
  CFTypeRef cf;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  if (a1)
  {
    if (a3)
      v5 = *(_DWORD *)(a1 + 8) | a2;
    else
      v5 = *(_DWORD *)(a1 + 8) & (a2 ^ 0x7FFFFFFF);
    *(_DWORD *)(a1 + 8) = v5;
  }
  else
  {
    v15 = 21;
    strcpy(__p, "Configuration is NULL");
    v7 = (char *)operator new(0x88uLL);
    v13 = v7;
    strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSceneQuerySessionConfiguration.cpp");
    if (a4)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_2245321DC(&v18, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v8 = cf;
      if (cf)
        CFRetain(cf);
      *a4 = v8;
      v9 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v7 = v13;
    }
    operator delete(v7);
    if (v15 < 0)
      operator delete(*(void **)__p);
  }
  return a1 != 0;
}

void sub_22327C6B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSceneQuerySessionConfigurationProcessMeshUpdates(uint64_t a1, int a2, CFTypeRef *a3)
{
  return sub_22327C534(a1, 2, a2, a3);
}

BOOL CV3DReconSceneQuerySessionConfigurationProcessKeyframeUpdates(uint64_t a1, int a2, CFTypeRef *a3)
{
  return sub_22327C534(a1, 4, a2, a3);
}

BOOL CV3DReconSceneQuerySessionConfigurationProcessRoomUpdates(uint64_t a1, int a2, CFTypeRef *a3)
{
  return sub_22327C534(a1, 8, a2, a3);
}

BOOL CV3DReconSceneQuerySessionConfigurationProcessAllUpdates(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v10;
  char __p[22];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    *(_DWORD *)(a1 + 8) = 0x7FFFFFFF;
  }
  else
  {
    v12 = 21;
    strcpy(__p, "Configuration is NULL");
    v4 = (char *)operator new(0x88uLL);
    v10 = v4;
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSceneQuerySessionConfiguration.cpp");
    if (a2)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v5;
      v6 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      v4 = v10;
    }
    operator delete(v4);
    if (v12 < 0)
      operator delete(*(void **)__p);
  }
  return a1 != 0;
}

void sub_22327C880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSceneQuerySessionConfigurationEnableSceneRendering(uint64_t a1, char a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v11;
  char __p[22];
  char v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a1)
  {
    *(_BYTE *)(a1 + 17) = a2;
  }
  else
  {
    v13 = 21;
    strcpy(__p, "Configuration is NULL");
    v5 = (char *)operator new(0x88uLL);
    v11 = v5;
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSceneQuerySessionConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_2245321DC(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v5 = v11;
    }
    operator delete(v5);
    if (v13 < 0)
      operator delete(*(void **)__p);
  }
  return a1 != 0;
}

void sub_22327CA1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconSceneQuerySessionConfigurationEnableStateOptimization(uint64_t a1, int a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  char *v10;
  CFTypeRef v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  if (a1)
  {
    if (a2 == 1)
    {
      *(_DWORD *)(a1 + 32) |= 1u;
      return 1;
    }
    __p[0] = operator new(0x20uLL);
    *(_OWORD *)&__p[1] = xmmword_2245B8E30;
    strcpy((char *)__p[0], "State optimization is invalid");
    v10 = (char *)operator new(0x88uLL);
    strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSceneQuerySessionConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_2245321DC(&v18, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v11 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v11;
      v12 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    operator delete(v10);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return 0;
  }
  else
  {
    HIBYTE(__p[2]) = 21;
    strcpy((char *)__p, "Configuration is NULL");
    v5 = (char *)operator new(0x88uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSceneQuerySessionConfiguration.cpp");
    if (a3)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_2245321DC(&v18, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v17;
      if (v17)
      {
        v8 = (unint64_t *)&v17->__shared_owners_;
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return 0;
  }
  operator delete(__p[0]);
  return 0;
}

void sub_22327CD34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconSceneQueryStateRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 72);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DReconSceneQueryStateRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 72);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

_QWORD *CV3DReconSceneQueryStateCreateFromFilteredSubStates(_QWORD *a1, int8x16_t *a2, uint64_t a3, CFTypeRef *a4)
{
  unint64_t v5;
  char v6;
  int8x16_t *v7;
  char *v8;
  CFTypeRef v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  CFTypeRef v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  int8x16_t *v17;
  int8x16_t v18;
  uint64_t v19;
  int8x16_t v20;
  int8x16_t v21;
  __int32 v22;
  uint64_t v23;
  BOOL v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  BOOL v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  BOOL v40;
  _QWORD *result;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  char *v52;
  char __p[21];
  char v54;
  CFTypeRef cf;
  std::__shared_weak_count *v56;
  std::error_condition v57;

  if (a1)
  {
    if (a2 && a3)
    {
      v5 = (a3 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v5 >= 7)
      {
        v15 = v5 + 1;
        v16 = (v5 + 1) & 0x7FFFFFFFFFFFFFF8;
        v7 = (int8x16_t *)((char *)a2 + 4 * v16);
        v17 = a2 + 1;
        v18 = 0uLL;
        v19 = v16;
        v20 = 0uLL;
        do
        {
          v18 = vorrq_s8(v17[-1], v18);
          v20 = vorrq_s8(*v17, v20);
          v17 += 2;
          v19 -= 8;
        }
        while (v19);
        v21 = vorrq_s8(v20, v18);
        *(int8x8_t *)v21.i8 = vorr_s8(*(int8x8_t *)v21.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL));
        v6 = v21.i8[0] | v21.i8[4];
        if (v15 == v16)
          goto LABEL_29;
      }
      else
      {
        v6 = 0;
        v7 = a2;
      }
      do
      {
        v22 = v7->i32[0];
        v7 = (int8x16_t *)((char *)v7 + 4);
        v6 |= v22;
      }
      while (v7 != (int8x16_t *)((char *)a2 + 4 * a3));
LABEL_29:
      v23 = a1[1];
      if (v23)
        v24 = (v6 & 1) == 0;
      else
        v24 = 1;
      if (v24)
      {
        v23 = 0;
        v25 = 0;
      }
      else
      {
        v25 = (std::__shared_weak_count *)a1[2];
        if (v25)
        {
          p_shared_owners = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldxr(p_shared_owners);
          while (__stxr(v27 + 1, p_shared_owners));
        }
      }
      v28 = a1[3];
      if (v28)
        v29 = (v6 & 2) == 0;
      else
        v29 = 1;
      if (v29)
      {
        v28 = 0;
        v30 = 0;
      }
      else
      {
        v30 = (std::__shared_weak_count *)a1[4];
        if (v30)
        {
          v31 = (unint64_t *)&v30->__shared_owners_;
          do
            v32 = __ldxr(v31);
          while (__stxr(v32 + 1, v31));
        }
      }
      v33 = a1[5];
      if (v33)
        v34 = (v6 & 4) == 0;
      else
        v34 = 1;
      if (v34)
      {
        v33 = 0;
        v35 = 0;
      }
      else
      {
        v35 = (std::__shared_weak_count *)a1[6];
        if (v35)
        {
          v36 = (unint64_t *)&v35->__shared_owners_;
          do
            v37 = __ldxr(v36);
          while (__stxr(v37 + 1, v36));
        }
      }
      v38 = a1[7];
      v39 = v6 & 8;
      if (v38)
        v40 = v39 == 0;
      else
        v40 = 1;
      if (v40)
      {
        result = operator new(0x50uLL, MEMORY[0x24BEDB6B8]);
        if (result)
        {
          v42 = 0;
          v38 = 0;
          goto LABEL_76;
        }
      }
      else
      {
        v42 = (std::__shared_weak_count *)a1[8];
        if (v42)
        {
          v43 = (unint64_t *)&v42->__shared_owners_;
          do
            v44 = __ldxr(v43);
          while (__stxr(v44 + 1, v43));
          result = operator new(0x50uLL, MEMORY[0x24BEDB6B8]);
          if (!result)
          {
            do
              v45 = __ldaxr(v43);
            while (__stlxr(v45 - 1, v43));
            if (!v45)
            {
              ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
              std::__shared_weak_count::__release_weak(v42);
            }
            goto LABEL_77;
          }
          goto LABEL_76;
        }
        result = operator new(0x50uLL, MEMORY[0x24BEDB6B8]);
        if (result)
        {
LABEL_76:
          result[2] = v25;
          result[3] = v28;
          result[4] = v30;
          result[5] = v33;
          result[6] = v35;
          result[7] = v38;
          result[8] = v42;
          *((_DWORD *)result + 18) = 1;
          *result = &off_24EC29F98;
          result[1] = v23;
          return result;
        }
      }
LABEL_77:
      if (v35)
      {
        v46 = (unint64_t *)&v35->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      if (v30)
      {
        v48 = (unint64_t *)&v30->__shared_owners_;
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      if (v25)
      {
        v50 = (unint64_t *)&v25->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      return 0;
    }
    v54 = 20;
    strcpy(__p, "No substates desired");
    v8 = (char *)operator new(0x78uLL);
    v52 = v8;
    strcpy(v8, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSceneQueryState.cpp");
    if (a4)
    {
      *(_QWORD *)&v57.__val_ = 22;
      v57.__cat_ = std::generic_category();
      sub_2245321DC(&v57, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v13 = cf;
      if (cf)
        CFRetain(cf);
      *a4 = v13;
      v10 = v56;
      if (!v56)
        goto LABEL_71;
      v14 = (unint64_t *)&v56->__shared_owners_;
      do
        v12 = __ldaxr(v14);
      while (__stlxr(v12 - 1, v14));
LABEL_23:
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
LABEL_71:
      v8 = v52;
    }
  }
  else
  {
    v54 = 13;
    strcpy(__p, "State is NULL");
    v8 = (char *)operator new(0x78uLL);
    v52 = v8;
    strcpy(v8, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSceneQueryState.cpp");
    if (a4)
    {
      *(_QWORD *)&v57.__val_ = 22;
      v57.__cat_ = std::generic_category();
      sub_2245321DC(&v57, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v9 = cf;
      if (cf)
        CFRetain(cf);
      *a4 = v9;
      v10 = v56;
      if (!v56)
        goto LABEL_71;
      v11 = (unint64_t *)&v56->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      goto LABEL_23;
    }
  }
  operator delete(v8);
  if ((v54 & 0x80000000) == 0)
    return 0;
  operator delete(*(void **)__p);
  return 0;
}

void sub_22327D2DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

xpc_object_t CV3DReconSceneQueryStateToXPC(uint64_t a1, CFTypeRef *a2)
{
  std::__shared_weak_count_vtbl *empty;
  xpc_object_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  char *v10;
  CFTypeRef v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  char *v15;
  xpc_object_t object[2];
  char v17;
  CFTypeRef cf;
  std::__shared_weak_count *v19;
  std::error_condition v20;

  if (a1)
  {
    empty = (std::__shared_weak_count_vtbl *)xpc_dictionary_create_empty();
    sub_224564184((std::__shared_weak_count_vtbl **)object, empty, 0);
    sub_223447394((_QWORD **)(a1 + 8), object);
    v4 = object[0];
    if (object[0])
      xpc_retain(object[0]);
    v5 = (std::__shared_weak_count *)object[1];
    if (!object[1])
      return v4;
    v6 = (unint64_t *)((char *)object[1] + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      return v4;
    }
    else
    {
      return v4;
    }
  }
  else
  {
    v17 = 13;
    strcpy((char *)object, "State is NULL");
    v10 = (char *)operator new(0x78uLL);
    v15 = v10;
    strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSceneQueryState.cpp");
    if (a2)
    {
      *(_QWORD *)&v20.__val_ = 22;
      v20.__cat_ = std::generic_category();
      sub_2245321DC(&v20, (uint64_t)object, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v11 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v11;
      v12 = v19;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v10 = v15;
    }
    operator delete(v10);
    if (v17 < 0)
      operator delete(object[0]);
    return 0;
  }
}

void sub_22327D514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

char *CV3DReconSceneQueryStateCreateFromXPC(std::__shared_weak_count_vtbl *a1, CFTypeRef *a2)
{
  char *v2;
  char *v3;
  __int128 v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count_vtbl *v20;
  CFErrorRef v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  void *__p[4];
  __int128 v29;
  __int128 v30;
  std::__shared_weak_count_vtbl *v31;
  __int128 v32;
  CFErrorRef v33;
  std::__shared_weak_count *v34;
  std::error_condition v35;

  if (a1)
  {
    sub_2245646E8(&v31, a1, 1);
    sub_223447A40((xpc_object_t *)&v31, (uint64_t)__p);
    v2 = (char *)operator new(0x50uLL, MEMORY[0x24BEDB6B8]);
    v3 = v2;
    if (v2)
    {
      v4 = *(_OWORD *)&__p[2];
      *(_OWORD *)(v2 + 8) = *(_OWORD *)__p;
      *(_OWORD *)(v2 + 24) = v4;
      v5 = v30;
      *(_OWORD *)(v2 + 40) = v29;
      memset(__p, 0, sizeof(__p));
      v29 = 0uLL;
      *(_OWORD *)(v2 + 56) = v5;
      v30 = 0uLL;
      *((_DWORD *)v2 + 18) = 1;
      *(_QWORD *)v2 = &off_24EC29F98;
    }
    else
    {
      v25 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
      if (*((_QWORD *)&v30 + 1))
      {
        v26 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
    }
    v6 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
    if (*((_QWORD *)&v29 + 1))
    {
      v7 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = (std::__shared_weak_count *)__p[3];
    if (__p[3])
    {
      v10 = (unint64_t *)((char *)__p[3] + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v13 = (unint64_t *)((char *)__p[1] + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = (std::__shared_weak_count *)v32;
    if (!(_QWORD)v32)
      return v3;
    v16 = (unint64_t *)(v32 + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (v17)
      return v3;
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    return v3;
  }
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "XPC state is NULL");
  v20 = (std::__shared_weak_count_vtbl *)operator new(0x78uLL);
  v31 = v20;
  v32 = xmmword_2245B8D60;
  strcpy((char *)v20, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSceneQueryState.cpp");
  if (a2)
  {
    *(_QWORD *)&v35.__val_ = 22;
    v35.__cat_ = std::generic_category();
    sub_2245321DC(&v35, (uint64_t)__p, &v33);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v21 = v33;
    if (v33)
      CFRetain(v33);
    *a2 = v21;
    v22 = v34;
    if (v34)
    {
      p_shared_owners = (unint64_t *)&v34->__shared_owners_;
      do
        v24 = __ldaxr(p_shared_owners);
      while (__stlxr(v24 - 1, p_shared_owners));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    if ((SHIBYTE(v32) & 0x80000000) == 0)
      goto LABEL_37;
    v20 = v31;
  }
  operator delete(v20);
LABEL_37:
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_22327D870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  void *v21;

  operator delete(v21);
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

char *CV3DReconSceneQueryStateApplyIncrementalUpdate(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  char *v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  char *v18;
  CFErrorRef v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  CFErrorRef v23;
  unint64_t *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  void *__p[4];
  __int128 v29;
  __int128 v30;
  char *v31;
  __int128 v32;
  CFErrorRef v33;
  std::__shared_weak_count *v34;
  std::error_condition v35;

  if (!a1)
  {
    HIBYTE(__p[2]) = 13;
    strcpy((char *)__p, "State is NULL");
    v18 = (char *)operator new(0x78uLL);
    v31 = v18;
    v32 = xmmword_2245B8D60;
    strcpy(v18, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSceneQueryState.cpp");
    if (a3)
    {
      *(_QWORD *)&v35.__val_ = 22;
      v35.__cat_ = std::generic_category();
      sub_2245321DC(&v35, (uint64_t)__p, &v33);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v19 = v33;
      if (v33)
        CFRetain(v33);
      *a3 = v19;
      v20 = v34;
      if (!v34)
        goto LABEL_37;
      p_shared_owners = (unint64_t *)&v34->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
LABEL_36:
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
        if ((SHIBYTE(v32) & 0x80000000) == 0)
          goto LABEL_40;
LABEL_38:
        v18 = v31;
        goto LABEL_39;
      }
LABEL_37:
      if ((SHIBYTE(v32) & 0x80000000) == 0)
      {
LABEL_40:
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
        return 0;
      }
      goto LABEL_38;
    }
LABEL_39:
    operator delete(v18);
    goto LABEL_40;
  }
  if (!a2)
  {
    __p[0] = operator new(0x20uLL);
    *(_OWORD *)&__p[1] = xmmword_2245B8D70;
    strcpy((char *)__p[0], "Incremental update is NULL");
    v18 = (char *)operator new(0x78uLL);
    v31 = v18;
    v32 = xmmword_2245B8D60;
    strcpy(v18, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSceneQueryState.cpp");
    if (a3)
    {
      *(_QWORD *)&v35.__val_ = 22;
      v35.__cat_ = std::generic_category();
      sub_2245321DC(&v35, (uint64_t)__p, &v33);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v23 = v33;
      if (v33)
        CFRetain(v33);
      *a3 = v23;
      v20 = v34;
      if (!v34)
        goto LABEL_37;
      v24 = (unint64_t *)&v34->__shared_owners_;
      do
        v22 = __ldaxr(v24);
      while (__stlxr(v22 - 1, v24));
      goto LABEL_36;
    }
    goto LABEL_39;
  }
  sub_22342F4C8((uint64_t *)(a1 + 8), (_QWORD *)(a2 + 8), (uint64_t)__p);
  v4 = (char *)operator new(0x50uLL, MEMORY[0x24BEDB6B8]);
  v5 = v4;
  if (v4)
  {
    v6 = *(_OWORD *)&__p[2];
    *(_OWORD *)(v4 + 8) = *(_OWORD *)__p;
    *(_OWORD *)(v4 + 24) = v6;
    v7 = v30;
    *(_OWORD *)(v4 + 40) = v29;
    memset(__p, 0, sizeof(__p));
    v29 = 0uLL;
    *(_OWORD *)(v4 + 56) = v7;
    v30 = 0uLL;
    *((_DWORD *)v4 + 18) = 1;
    *(_QWORD *)v4 = &off_24EC29F98;
  }
  else
  {
    v25 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
    if (*((_QWORD *)&v30 + 1))
    {
      v26 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
  if (*((_QWORD *)&v29 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)__p[3];
  if (!__p[3])
    goto LABEL_14;
  v12 = (unint64_t *)((char *)__p[3] + 8);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (v13)
  {
LABEL_14:
    v14 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
      goto LABEL_15;
    return v5;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  v14 = (std::__shared_weak_count *)__p[1];
  if (!__p[1])
    return v5;
LABEL_15:
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (v16)
    return v5;
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  return v5;
}

void sub_22327DC98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  operator delete(v14);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconSceneQueryStateUpdateResultRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 112);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DReconSceneQueryStateUpdateResultRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 112);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

double CV3DReconSceneQueryStateUpdateResultTimestamp(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  __int128 v10;
  CFTypeRef cf;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  if (a1)
    return (double)*(uint64_t *)(a1 + 104) / 1000000000.0;
  __p = operator new(0x20uLL);
  v10 = xmmword_2245B8D50;
  strcpy((char *)__p, "State update result is NULL");
  v4 = (char *)operator new(0x78uLL);
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSceneQueryState.cpp");
  if (a2)
  {
    *(_QWORD *)&v13.__val_ = 22;
    v13.__cat_ = std::generic_category();
    sub_2245321DC(&v13, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  operator delete(v4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return NAN;
}

void sub_22327DEB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *CV3DReconSceneQueryCreateStateFromUpdateResult(_QWORD *a1, CFTypeRef *a2)
{
  _QWORD *result;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  char *v17;
  CFTypeRef v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  void *__p;
  __int128 v23;
  CFTypeRef cf;
  std::__shared_weak_count *v25;
  std::error_condition v26;

  if (a1)
  {
    result = operator new(0x50uLL, MEMORY[0x24BEDB6B8]);
    if (result)
    {
      v4 = a1[2];
      result[1] = a1[1];
      result[2] = v4;
      if (v4)
      {
        v5 = (unint64_t *)(v4 + 8);
        do
          v6 = __ldxr(v5);
        while (__stxr(v6 + 1, v5));
      }
      v7 = a1[4];
      result[3] = a1[3];
      result[4] = v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      v10 = a1[6];
      result[5] = a1[5];
      result[6] = v10;
      if (v10)
      {
        v11 = (unint64_t *)(v10 + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      v13 = a1[8];
      result[7] = a1[7];
      result[8] = v13;
      if (v13)
      {
        v14 = (unint64_t *)(v13 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      *((_DWORD *)result + 18) = 1;
      *result = &off_24EC29F98;
    }
  }
  else
  {
    __p = operator new(0x20uLL);
    v23 = xmmword_2245B8D50;
    strcpy((char *)__p, "State update result is NULL");
    v17 = (char *)operator new(0x78uLL);
    strcpy(v17, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSceneQueryState.cpp");
    if (a2)
    {
      *(_QWORD *)&v26.__val_ = 22;
      v26.__cat_ = std::generic_category();
      sub_2245321DC(&v26, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v18 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v18;
      v19 = v25;
      if (v25)
      {
        p_shared_owners = (unint64_t *)&v25->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
    }
    operator delete(v17);
    if (SHIBYTE(v23) < 0)
      operator delete(__p);
    return 0;
  }
  return result;
}

void sub_22327E12C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *CV3DReconSceneQueryCreateIncrementalStateUpdateFromUpdateResult(_QWORD *a1, CFTypeRef *a2)
{
  _QWORD *result;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  char *v11;
  CFTypeRef v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *__p;
  __int128 v17;
  CFTypeRef cf;
  std::__shared_weak_count *v19;
  std::error_condition v20;

  if (a1)
  {
    result = operator new(0x30uLL, MEMORY[0x24BEDB6B8]);
    if (result)
    {
      v4 = a1[10];
      result[1] = a1[9];
      result[2] = v4;
      if (v4)
      {
        v5 = (unint64_t *)(v4 + 8);
        do
          v6 = __ldxr(v5);
        while (__stxr(v6 + 1, v5));
      }
      v7 = a1[12];
      result[3] = a1[11];
      result[4] = v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      *((_DWORD *)result + 10) = 1;
      *result = &off_24EC2A008;
    }
  }
  else
  {
    __p = operator new(0x20uLL);
    v17 = xmmword_2245B8D50;
    strcpy((char *)__p, "State update result is NULL");
    v11 = (char *)operator new(0x78uLL);
    strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSceneQueryState.cpp");
    if (a2)
    {
      *(_QWORD *)&v20.__val_ = 22;
      v20.__cat_ = std::generic_category();
      sub_2245321DC(&v20, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v12 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v12;
      v13 = v19;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    operator delete(v11);
    if (SHIBYTE(v17) < 0)
      operator delete(__p);
    return 0;
  }
  return result;
}

void sub_22327E360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_DWORD *CV3DReconSceneQueryCreatePlaneDetectionUpdateFromUpdateResult(uint64_t a1, CFTypeRef *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  char *v6;
  CFErrorRef v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  CFErrorRef v11;
  unint64_t *p_shared_owners;
  void *__p;
  __int128 v14;
  char *v15;
  __int128 v16;
  CFErrorRef v17;
  std::__shared_weak_count *v18;
  std::error_condition v19;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 72))
    {
      sub_223430DA0(*(_QWORD **)(a1 + 72), (_QWORD *)(a1 + 104), (uint64_t)&__p);
      v3 = operator new(0x188uLL, MEMORY[0x24BEDB6B8]);
      v4 = v3;
      if (v3)
      {
        sub_22327F72C((uint64_t)(v3 + 2), (uint64_t)&__p);
        v4[96] = 1;
        *(_QWORD *)v4 = &off_24EC29730;
      }
      sub_22327F500((uint64_t)&__p);
      return v4;
    }
    __p = operator new(0x30uLL);
    v14 = xmmword_2245C44E0;
    strcpy((char *)__p, "State update incremental plane update is NULL");
    v6 = (char *)operator new(0x78uLL);
    v15 = v6;
    v16 = xmmword_2245B8D60;
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSceneQueryState.cpp");
    if (!a2)
      goto LABEL_26;
    *(_QWORD *)&v19.__val_ = 22;
    v19.__cat_ = std::generic_category();
    sub_2245321DC(&v19, (uint64_t)&__p, &v17);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v11 = v17;
    if (v17)
      CFRetain(v17);
    *a2 = v11;
    v8 = v18;
    if (!v18)
      goto LABEL_24;
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
  }
  else
  {
    __p = operator new(0x20uLL);
    v14 = xmmword_2245B8D50;
    strcpy((char *)__p, "State update result is NULL");
    v6 = (char *)operator new(0x78uLL);
    v15 = v6;
    v16 = xmmword_2245B8D60;
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSceneQueryState.cpp");
    if (!a2)
    {
LABEL_26:
      operator delete(v6);
      goto LABEL_27;
    }
    *(_QWORD *)&v19.__val_ = 22;
    v19.__cat_ = std::generic_category();
    sub_2245321DC(&v19, (uint64_t)&__p, &v17);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v7 = v17;
    if (v17)
      CFRetain(v17);
    *a2 = v7;
    v8 = v18;
    if (!v18)
      goto LABEL_24;
    v9 = (unint64_t *)&v18->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
  }
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      goto LABEL_27;
    goto LABEL_25;
  }
LABEL_24:
  if (SHIBYTE(v16) < 0)
  {
LABEL_25:
    v6 = v15;
    goto LABEL_26;
  }
LABEL_27:
  if (SHIBYTE(v14) < 0)
    operator delete(__p);
  return 0;
}

void sub_22327E670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  operator delete(v14);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_DWORD *CV3DReconSceneQueryCreatePlaneDetectionFullStateFromUpdateResult(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _DWORD *v12;
  _DWORD *v13;
  char *v14;
  CFErrorRef v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  CFErrorRef v19;
  unint64_t *v20;
  void *__p[4];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  int v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[176];
  char *v35;
  __int128 v36;
  CFErrorRef v37;
  std::__shared_weak_count *v38;
  std::error_condition v39;

  if (!a1)
  {
    __p[0] = operator new(0x20uLL);
    *(_OWORD *)&__p[1] = xmmword_2245B8D50;
    strcpy((char *)__p[0], "State update result is NULL");
    v14 = (char *)operator new(0x78uLL);
    v35 = v14;
    v36 = xmmword_2245B8D60;
    strcpy(v14, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSceneQueryState.cpp");
    if (a2)
    {
      *(_QWORD *)&v39.__val_ = 22;
      v39.__cat_ = std::generic_category();
      sub_2245321DC(&v39, (uint64_t)__p, &v37);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v15 = v37;
      if (v37)
        CFRetain(v37);
      *a2 = v15;
      v16 = v38;
      if (!v38)
        goto LABEL_36;
      p_shared_owners = (unint64_t *)&v38->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
LABEL_35:
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
        if ((SHIBYTE(v36) & 0x80000000) == 0)
          goto LABEL_39;
LABEL_37:
        v14 = v35;
        goto LABEL_38;
      }
LABEL_36:
      if ((SHIBYTE(v36) & 0x80000000) == 0)
      {
LABEL_39:
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
        return 0;
      }
      goto LABEL_37;
    }
LABEL_38:
    operator delete(v14);
    goto LABEL_39;
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
  {
    __p[0] = operator new(0x28uLL);
    *(_OWORD *)&__p[1] = xmmword_2245B8D20;
    strcpy((char *)__p[0], "State update full plane state is NULL");
    v14 = (char *)operator new(0x78uLL);
    v35 = v14;
    v36 = xmmword_2245B8D60;
    strcpy(v14, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSceneQueryState.cpp");
    if (a2)
    {
      *(_QWORD *)&v39.__val_ = 22;
      v39.__cat_ = std::generic_category();
      sub_2245321DC(&v39, (uint64_t)__p, &v37);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v19 = v37;
      if (v37)
        CFRetain(v37);
      *a2 = v19;
      v16 = v38;
      if (!v38)
        goto LABEL_36;
      v20 = (unint64_t *)&v38->__shared_owners_;
      do
        v18 = __ldaxr(v20);
      while (__stlxr(v18 - 1, v20));
      goto LABEL_35;
    }
    goto LABEL_38;
  }
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v23 = 0u;
  memset(__p, 0, sizeof(__p));
  v28 = 1065353216;
  v34[168] = 0;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  memset(v34, 0, 25);
  v5 = (_QWORD *)(v4 + 48);
  v6 = *(_QWORD **)(v4 + 40);
  if (v6 != (_QWORD *)(v4 + 48))
  {
    v7 = 0;
    do
    {
      v8 = v6[6];
      if (v7 >= __p[3])
      {
        v7 = (char *)sub_22324A768(&__p[1], v8);
        __p[2] = v7;
        v9 = (_QWORD *)v6[1];
        if (v9)
        {
          do
          {
LABEL_10:
            v10 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
          goto LABEL_5;
        }
      }
      else
      {
        sub_223249DC0((uint64_t)v7, v8);
        v7 += 464;
        __p[2] = v7;
        v9 = (_QWORD *)v6[1];
        if (v9)
          goto LABEL_10;
      }
      do
      {
        v10 = (_QWORD *)v6[2];
        v11 = *v10 == (_QWORD)v6;
        v6 = v10;
      }
      while (!v11);
LABEL_5:
      v6 = v10;
    }
    while (v10 != v5);
  }
  __p[0] = *(void **)(a1 + 104);
  v12 = operator new(0x188uLL, MEMORY[0x24BEDB6B8]);
  v13 = v12;
  if (v12)
  {
    sub_22327F72C((uint64_t)(v12 + 2), (uint64_t)__p);
    v13[96] = 1;
    *(_QWORD *)v13 = &off_24EC29730;
  }
  sub_22327F500((uint64_t)__p);
  return v13;
}

void sub_22327EA80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  operator delete(v14);
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t CV3DReconSceneQueryStateIncrementalUpdateRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 40);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DReconSceneQueryStateIncrementalUpdateRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 40);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

_QWORD *CV3DReconSceneQueryStateIncrementalUpdateCreateFromFilteredSubStates(_QWORD *a1, int8x16_t *a2, uint64_t a3, CFTypeRef *a4)
{
  unint64_t v5;
  char v6;
  int8x16_t *v7;
  char *v8;
  CFTypeRef v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  CFTypeRef v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  int8x16_t *v17;
  int8x16_t v18;
  uint64_t v19;
  int8x16_t v20;
  int8x16_t v21;
  __int32 v22;
  uint64_t v23;
  BOOL v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  BOOL v30;
  _QWORD *result;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  char *v38;
  char __p[21];
  char v40;
  CFTypeRef cf;
  std::__shared_weak_count *v42;
  std::error_condition v43;

  if (!a1)
  {
    v40 = 20;
    strcpy(__p, "State update is NULL");
    v8 = (char *)operator new(0x78uLL);
    v38 = v8;
    strcpy(v8, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSceneQueryState.cpp");
    if (!a4)
      goto LABEL_54;
    *(_QWORD *)&v43.__val_ = 22;
    v43.__cat_ = std::generic_category();
    sub_2245321DC(&v43, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a4)
      CFRelease(*a4);
    *a4 = 0;
    v9 = cf;
    if (cf)
      CFRetain(cf);
    *a4 = v9;
    v10 = v42;
    if (!v42)
      goto LABEL_53;
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    goto LABEL_23;
  }
  if (!a2 || !a3)
  {
    v40 = 20;
    strcpy(__p, "No substates desired");
    v8 = (char *)operator new(0x78uLL);
    v38 = v8;
    strcpy(v8, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSceneQueryState.cpp");
    if (!a4)
      goto LABEL_54;
    *(_QWORD *)&v43.__val_ = 22;
    v43.__cat_ = std::generic_category();
    sub_2245321DC(&v43, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a4)
      CFRelease(*a4);
    *a4 = 0;
    v13 = cf;
    if (cf)
      CFRetain(cf);
    *a4 = v13;
    v10 = v42;
    if (!v42)
    {
LABEL_53:
      v8 = v38;
LABEL_54:
      operator delete(v8);
      if (v40 < 0)
        operator delete(*(void **)__p);
      return 0;
    }
    v14 = (unint64_t *)&v42->__shared_owners_;
    do
      v12 = __ldaxr(v14);
    while (__stlxr(v12 - 1, v14));
LABEL_23:
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    goto LABEL_53;
  }
  v5 = (a3 - 1) & 0x3FFFFFFFFFFFFFFFLL;
  if (v5 >= 7)
  {
    v15 = v5 + 1;
    v16 = (v5 + 1) & 0x7FFFFFFFFFFFFFF8;
    v7 = (int8x16_t *)((char *)a2 + 4 * v16);
    v17 = a2 + 1;
    v18 = 0uLL;
    v19 = v16;
    v20 = 0uLL;
    do
    {
      v18 = vorrq_s8(v17[-1], v18);
      v20 = vorrq_s8(*v17, v20);
      v17 += 2;
      v19 -= 8;
    }
    while (v19);
    v21 = vorrq_s8(v20, v18);
    *(int8x8_t *)v21.i8 = vorr_s8(*(int8x8_t *)v21.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL));
    v6 = v21.i8[0] | v21.i8[4];
    if (v15 == v16)
      goto LABEL_29;
  }
  else
  {
    v6 = 0;
    v7 = a2;
  }
  do
  {
    v22 = v7->i32[0];
    v7 = (int8x16_t *)((char *)v7 + 4);
    v6 |= v22;
  }
  while (v7 != (int8x16_t *)((char *)a2 + 4 * a3));
LABEL_29:
  v23 = a1[1];
  if (v23)
    v24 = (v6 & 1) == 0;
  else
    v24 = 1;
  if (v24)
  {
    v23 = 0;
    v25 = 0;
  }
  else
  {
    v25 = (std::__shared_weak_count *)a1[2];
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
  }
  v28 = a1[3];
  v29 = v6 & 2;
  if (v28)
    v30 = v29 == 0;
  else
    v30 = 1;
  if (v30)
  {
    result = operator new(0x30uLL, MEMORY[0x24BEDB6B8]);
    if (result)
    {
      v32 = 0;
      v28 = 0;
      goto LABEL_58;
    }
LABEL_59:
    if (v25)
    {
      v36 = (unint64_t *)&v25->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    return 0;
  }
  v32 = (std::__shared_weak_count *)a1[4];
  if (!v32)
  {
    result = operator new(0x30uLL, MEMORY[0x24BEDB6B8]);
    if (result)
      goto LABEL_58;
    goto LABEL_59;
  }
  v33 = (unint64_t *)&v32->__shared_owners_;
  do
    v34 = __ldxr(v33);
  while (__stxr(v34 + 1, v33));
  result = operator new(0x30uLL, MEMORY[0x24BEDB6B8]);
  if (!result)
  {
    do
      v35 = __ldaxr(v33);
    while (__stlxr(v35 - 1, v33));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
    goto LABEL_59;
  }
LABEL_58:
  result[2] = v25;
  result[3] = v28;
  result[4] = v32;
  *((_DWORD *)result + 10) = 1;
  *result = &off_24EC2A008;
  result[1] = v23;
  return result;
}

void sub_22327EF8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

xpc_object_t CV3DReconSceneQueryIncrementalUpdateToXPC(uint64_t a1, CFTypeRef *a2)
{
  std::__shared_weak_count_vtbl *empty;
  xpc_object_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  char *v10;
  CFTypeRef v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  xpc_object_t object;
  __int128 v16;
  CFTypeRef cf;
  std::__shared_weak_count *v18;
  std::error_condition v19;

  if (a1)
  {
    empty = (std::__shared_weak_count_vtbl *)xpc_dictionary_create_empty();
    sub_224564184((std::__shared_weak_count_vtbl **)&object, empty, 0);
    sub_223448404((uint64_t *)(a1 + 8), &object);
    v4 = object;
    if (object)
      xpc_retain(object);
    v5 = (std::__shared_weak_count *)v16;
    if (!(_QWORD)v16)
      return v4;
    v6 = (unint64_t *)(v16 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      return v4;
    }
    else
    {
      return v4;
    }
  }
  else
  {
    object = operator new(0x20uLL);
    v16 = xmmword_2245B8D70;
    strcpy((char *)object, "Incremental update is NULL");
    v10 = (char *)operator new(0x78uLL);
    strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSceneQueryState.cpp");
    if (a2)
    {
      *(_QWORD *)&v19.__val_ = 22;
      v19.__cat_ = std::generic_category();
      sub_2245321DC(&v19, (uint64_t)&object, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v11 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v11;
      v12 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    operator delete(v10);
    if (SHIBYTE(v16) < 0)
      operator delete(object);
    return 0;
  }
}

void sub_22327F1D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

char *CV3DReconSceneQueryIncrementalUpdateCreateFromXPC(std::__shared_weak_count_vtbl *a1, CFTypeRef *a2)
{
  char *v2;
  char *v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count_vtbl *v13;
  CFTypeRef v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *__p[5];
  std::__shared_weak_count_vtbl *v22;
  __int128 v23;
  CFTypeRef cf;
  std::__shared_weak_count *v25;
  std::error_condition v26;

  if (a1)
  {
    sub_2245646E8(&v22, a1, 1);
    sub_2234489BC((xpc_object_t *)&v22, (uint64_t)__p);
    v2 = (char *)operator new(0x30uLL, MEMORY[0x24BEDB6B8]);
    v3 = v2;
    if (v2)
    {
      v4 = *(_OWORD *)&__p[2];
      *(_OWORD *)(v2 + 8) = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      *(_OWORD *)(v2 + 24) = v4;
      *(_OWORD *)&__p[2] = 0uLL;
      *((_DWORD *)v2 + 10) = 1;
      *(_QWORD *)v2 = &off_24EC2A008;
    }
    else
    {
      v18 = (std::__shared_weak_count *)__p[3];
      if (__p[3])
      {
        v19 = (unint64_t *)((char *)__p[3] + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
    }
    v5 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v6 = (unint64_t *)((char *)__p[1] + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = (std::__shared_weak_count *)v23;
    if (!(_QWORD)v23)
      return v3;
    v9 = (unint64_t *)(v23 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (v10)
      return v3;
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    return v3;
  }
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "XPC object is NULL");
  v13 = (std::__shared_weak_count_vtbl *)operator new(0x78uLL);
  v22 = v13;
  v23 = xmmword_2245B8D60;
  strcpy((char *)v13, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSceneQueryState.cpp");
  if (a2)
  {
    *(_QWORD *)&v26.__val_ = 22;
    v26.__cat_ = std::generic_category();
    sub_2245321DC(&v26, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v14 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v14;
    v15 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    if ((SHIBYTE(v23) & 0x80000000) == 0)
      goto LABEL_27;
    v13 = v22;
  }
  operator delete(v13);
LABEL_27:
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_22327F4B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_22327F500(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;

  if (*(_BYTE *)(a1 + 368))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 296);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v5 = *(void **)(a1 + 248);
    if (v5)
    {
      *(_QWORD *)(a1 + 256) = v5;
      operator delete(v5);
    }
    v6 = *(void **)(a1 + 224);
    if (v6)
    {
      *(_QWORD *)(a1 + 232) = v6;
      operator delete(v6);
    }
  }
  v7 = *(_QWORD *)(a1 + 192);
  if (v7)
  {
    v8 = *(_QWORD *)(a1 + 200);
    v9 = *(void **)(a1 + 192);
    if (v8 != v7)
    {
      do
      {
        v10 = *(void **)(v8 - 24);
        if (v10)
        {
          *(_QWORD *)(v8 - 16) = v10;
          operator delete(v10);
        }
        v8 -= 40;
      }
      while (v8 != v7);
      v9 = *(void **)(a1 + 192);
    }
    *(_QWORD *)(a1 + 200) = v7;
    operator delete(v9);
  }
  v11 = *(_QWORD *)(a1 + 160);
  if (v11)
  {
    v12 = *(_QWORD *)(a1 + 168);
    v13 = *(void **)(a1 + 160);
    if (v12 != v11)
    {
      do
      {
        v14 = *(void **)(v12 - 24);
        if (v14)
        {
          *(_QWORD *)(v12 - 16) = v14;
          operator delete(v14);
        }
        v12 -= 40;
      }
      while (v12 != v11);
      v13 = *(void **)(a1 + 160);
    }
    *(_QWORD *)(a1 + 168) = v11;
    operator delete(v13);
  }
  v15 = *(void **)(a1 + 136);
  if (v15)
  {
    *(_QWORD *)(a1 + 144) = v15;
    operator delete(v15);
  }
  v16 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v16)
    goto LABEL_33;
  v17 = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    v19 = *(_QWORD **)(a1 + 96);
    if (!v19)
      goto LABEL_34;
  }
  else
  {
LABEL_33:
    v19 = *(_QWORD **)(a1 + 96);
    if (!v19)
      goto LABEL_34;
  }
  do
  {
    v27 = v19;
    v19 = (_QWORD *)*v19;
    v28 = (std::__shared_weak_count *)v27[5];
    if (v28)
    {
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    operator delete(v27);
  }
  while (v19);
LABEL_34:
  v20 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v20)
    operator delete(v20);
  v21 = *(void **)(a1 + 56);
  if (v21)
  {
    *(_QWORD *)(a1 + 64) = v21;
    operator delete(v21);
  }
  v22 = *(void **)(a1 + 32);
  if (v22)
  {
    *(_QWORD *)(a1 + 40) = v22;
    operator delete(v22);
  }
  v23 = *(_QWORD *)(a1 + 8);
  if (v23)
  {
    v24 = *(_QWORD *)(a1 + 16);
    v25 = *(void **)(a1 + 8);
    if (v24 != v23)
    {
      do
      {
        v24 -= 464;
        sub_22324A5A0(v24);
      }
      while (v24 != v23);
      v25 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v23;
    operator delete(v25);
  }
  return a1;
}

__n128 sub_22327F72C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  char v8;
  __int128 v9;
  __int128 v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a2 + 56) = 0u;
  v2 = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a2 + 72) = 0u;
  *(_QWORD *)(a1 + 80) = v2;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = 0;
  v3 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 96) = v3;
  v4 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 104) = v4;
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  if (v4)
  {
    v5 = *(_QWORD *)(v3 + 8);
    v6 = *(_QWORD *)(a1 + 88);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6)
        v5 %= v6;
    }
    else
    {
      v5 &= v6 - 1;
    }
    *(_QWORD *)(v2 + 8 * v5) = a1 + 96;
    *(_QWORD *)(a2 + 96) = 0;
    *(_QWORD *)(a2 + 104) = 0;
  }
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  result = *(__n128 *)(a2 + 192);
  *(__n128 *)(a1 + 192) = result;
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a2 + 208) = 0;
  *(_QWORD *)(a2 + 192) = 0;
  v8 = *(_BYTE *)(a2 + 216);
  *(_BYTE *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 216) = v8;
  *(_BYTE *)(a1 + 368) = 0;
  if (*(_BYTE *)(a2 + 368))
  {
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 240) = 0;
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a2 + 224) = 0;
    *(_QWORD *)(a2 + 232) = 0;
    *(_QWORD *)(a2 + 240) = 0;
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 256) = 0;
    *(_QWORD *)(a1 + 264) = 0;
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    *(_QWORD *)(a2 + 256) = 0;
    *(_QWORD *)(a2 + 264) = 0;
    *(_QWORD *)(a2 + 248) = 0;
    *(_BYTE *)(a1 + 272) = *(_BYTE *)(a2 + 272);
    *(_QWORD *)(a1 + 280) = &off_24EC24788;
    *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
    *(_QWORD *)(a2 + 288) = 0;
    *(_QWORD *)(a2 + 296) = 0;
    result = *(__n128 *)(a2 + 304);
    v9 = *(_OWORD *)(a2 + 320);
    v10 = *(_OWORD *)(a2 + 336);
    *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
    *(_OWORD *)(a1 + 320) = v9;
    *(_OWORD *)(a1 + 336) = v10;
    *(__n128 *)(a1 + 304) = result;
    *(_WORD *)(a1 + 360) = *(_WORD *)(a2 + 360);
    *(_BYTE *)(a1 + 368) = 1;
  }
  return result;
}

_DWORD *CV3DReconSessionCreate()
{
  _DWORD *v0;
  _DWORD *v1;
  uint64_t v8;
  __int16 v9;
  char v10[8];
  int v11;
  char v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  int v16;
  char v17;
  char v18;
  __int16 v19;
  int v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  int v30;
  __int16 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _DWORD v35[9];
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  int v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  char v51[24];
  char *v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  __int128 v56;
  char v57[24];
  char v58[24];
  uint64_t v59;
  int v60;
  char v61;
  char v62;

  v0 = operator new(0x5E0uLL, MEMORY[0x24BEDB6B8]);
  v1 = v0;
  if (v0)
  {
    bzero(v0, 0x5E0uLL);
    v8 = 0;
    v9 = 0;
    strcpy(v10, "333?");
    v11 = 1084227584;
    v12 = 2;
    v13 = 256;
    v14 = 0x340E00000;
    v15 = 257;
    v18 = 0;
    v19 = 256;
    v16 = 0;
    v17 = 0;
    v20 = 1041918801;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0x3F80000000000002;
    v30 = 400;
    v31 = 257;
    v32 = 0u;
    v33 = 0u;
    v34 = 0u;
    *(_OWORD *)v35 = 0u;
    LODWORD(v32) = 1065353216;
    DWORD1(v33) = 1065353216;
    v38 = 0;
    v36 = 0u;
    v37 = 0u;
    *(_OWORD *)&v35[5] = 0u;
    __asm { FMOV            V1.2S, #1.0 }
    *(_QWORD *)&v35[3] = _D1;
    DWORD2(v34) = 1065353216;
    LODWORD(v36) = 1065353216;
    DWORD1(v37) = 1065353216;
    v39 = 1065353216;
    v40 = 1;
    v41 = 0;
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v47 = 0;
    v49 = 0u;
    v50 = 0u;
    v48 = 0u;
    v51[23] = 11;
    strcpy(v51, "FrameBundle");
    v52 = (char *)operator new(0x20uLL);
    v54 = 0x8000000000000020;
    v53 = 24;
    strcpy(v52, "KeyframeEngineResultSync");
    v55 = (char *)operator new(0x20uLL);
    v56 = xmmword_2245B9420;
    strcpy(v55, "ProcessFrameBundleResult");
    v57[23] = 20;
    strcpy(v57, "PlaneDetectionReturn");
    v58[23] = 13;
    strcpy(v58, "MeshingReturn");
    v59 = 50;
    v60 = 1114636288;
    v61 = 0;
    v62 = 0;
    sub_2232D71B0((uint64_t)(v1 + 2), (uint64_t)&v8);
    sub_223223FC0((uint64_t)&v8);
    v1[374] = 1;
    *(_QWORD *)v1 = &off_24EC2B260;
  }
  return v1;
}

uint64_t sub_22327FBB4(void *a1)
{
  uint64_t v1;
  uint64_t v4;

  sub_223223FC0((uint64_t)&v4);
  MEMORY[0x227684CD0](v1, MEMORY[0x24BEDB6B8]);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  return 0;
}

uint64_t CV3DReconSessionCreateWithConfiguration(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v4;
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    v4 = operator new();
    sub_2232D71B0(v4 + 8, a1 + 8);
    *(_DWORD *)(v4 + 1496) = 1;
    *(_QWORD *)v4 = &off_24EC2B260;
    return v4;
  }
  else
  {
    __p = operator new(0x28uLL);
    v12 = xmmword_2245C65C0;
    strcpy((char *)__p, "Input session configuration is NULL");
    v6 = (char *)operator new(0x70uLL);
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (a2)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v7;
      v8 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    operator delete(v6);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
    return 0;
  }
}

void sub_22327FDF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  void *v21;

  operator delete(v21);
  if (a20 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t CV3DReconSessionCreateWithPreset(int a1, CFTypeRef *a2)
{
  uint64_t v3;
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::error_condition v10;
  char *v11;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  char __p[23];
  char v16;

  if (a1 == 5)
  {
    v3 = operator new();
    sub_22321C7A4(5, (uint64_t)__p);
    sub_2232D71B0(v3 + 8, (uint64_t)__p);
    sub_223223FC0((uint64_t)__p);
    *(_DWORD *)(v3 + 1496) = 1;
    *(_QWORD *)v3 = &off_24EC2B260;
    return v3;
  }
  strcpy(__p, "Unknown session preset");
  v16 = 22;
  v4 = (char *)operator new(0x70uLL);
  v11 = v4;
  v12 = xmmword_2245C45E0;
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
  if (!a2)
    goto LABEL_14;
  *(_QWORD *)&v10.__val_ = 33;
  v10.__cat_ = std::generic_category();
  sub_2245321DC(&v10, (uint64_t)__p, (CFErrorRef *)&cf);
  if (*a2)
    CFRelease(*a2);
  *a2 = 0;
  v5 = cf;
  if (cf)
    CFRetain(cf);
  *a2 = v5;
  v6 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if ((SHIBYTE(v12) & 0x80000000) == 0)
        goto LABEL_15;
      goto LABEL_13;
    }
  }
  if (SHIBYTE(v12) < 0)
  {
LABEL_13:
    v4 = v11;
LABEL_14:
    operator delete(v4);
  }
LABEL_15:
  if (v16 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_223280140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;

  operator delete(v28);
  if (a28 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t CV3DReconSessionRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 1496);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CV3DReconSessionRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 1496);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DReconSessionProcessFrameBundleResultRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 512);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CV3DReconSessionProcessFrameBundleResultRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 512);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CV3DReconSessionProcessFrameBundleResultSerialize(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  char *v7;
  CFTypeRef v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v13;
  __int128 cf;
  char v15;
  char v16;
  CFTypeRef v17;
  std::__shared_weak_count *v18;
  std::error_condition v19;

  if (!a1)
  {
    v16 = 14;
    strcpy((char *)&cf, "Result is NULL");
    v7 = (char *)operator new(0x70uLL);
    strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (a2)
    {
      *(_QWORD *)&v19.__val_ = 22;
      v19.__cat_ = std::generic_category();
      sub_2245321DC(&v19, (uint64_t)&cf, (CFErrorRef *)&v17);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v8 = v17;
      if (v17)
        CFRetain(v17);
      *a2 = v8;
      v9 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    operator delete(v7);
    if (v16 < 0)
      operator delete((void *)cf);
    return 0;
  }
  sub_2232E31D4();
  if (v15)
  {
    v3 = cf;
    if ((_QWORD)cf)
      CFRetain((CFTypeRef)cf);
    goto LABEL_5;
  }
  if (!a2)
  {
    v3 = 0;
    v4 = (std::__shared_weak_count *)*((_QWORD *)&cf + 1);
    if (!*((_QWORD *)&cf + 1))
      return v3;
LABEL_31:
    v13 = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(v13);
    while (__stlxr(v6 - 1, v13));
    goto LABEL_33;
  }
  if (*a2)
    CFRelease(*a2);
  *a2 = 0;
  if ((_QWORD)cf)
    CFRetain((CFTypeRef)cf);
  v3 = 0;
  *a2 = (CFTypeRef)cf;
  if (!v15)
  {
    v4 = (std::__shared_weak_count *)*((_QWORD *)&cf + 1);
    if (!*((_QWORD *)&cf + 1))
      return v3;
    goto LABEL_31;
  }
LABEL_5:
  v4 = (std::__shared_weak_count *)*((_QWORD *)&cf + 1);
  if (!*((_QWORD *)&cf + 1))
    return v3;
  v5 = (unint64_t *)(*((_QWORD *)&cf + 1) + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 - 1, v5));
LABEL_33:
  if (v6)
    return v3;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v3;
}

void sub_2232805C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

_BYTE *CV3DReconSessionProcessFrameBundleResultDeserialize(CFTypeRef cf, CFTypeRef *a2)
{
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *cat;
  unint64_t *v9;
  unint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  CFTypeRef v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  const void *v24;
  char *v26;
  __int128 v27;
  CFTypeRef cfa;
  std::__shared_weak_count *v29;
  std::error_condition v30;
  char __p[19];
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  if (cf)
  {
    sub_2245289FC(&v26, cf);
    *(_QWORD *)&v30.__val_ = v26;
    v30.__cat_ = (const std::error_category *)v27;
    if ((_QWORD)v27)
    {
      v3 = (unint64_t *)(v27 + 8);
      do
        v4 = __ldxr(v3);
      while (__stxr(v4 + 1, v3));
      v5 = (std::__shared_weak_count *)v27;
      if ((_QWORD)v27)
      {
        v6 = (unint64_t *)(v27 + 8);
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 - 1, v6));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    sub_2232E2BF4((uint64_t)&v30, (uint64_t)__p);
    cat = (std::__shared_weak_count *)v30.__cat_;
    if (!v30.__cat_)
      goto LABEL_14;
    v9 = (unint64_t *)&v30.__cat_[1];
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))cat->__on_zero_shared)(cat);
      std::__shared_weak_count::__release_weak(cat);
      if (v41)
      {
LABEL_15:
        v11 = operator new(0x208uLL, MEMORY[0x24BEDB6B8]);
        v12 = v11;
        if (v11)
        {
          v11[8] = 0;
          v11[448] = 0;
          if (v33)
          {
            sub_223299E34((uint64_t)(v11 + 8), (uint64_t)__p);
            v12[448] = 1;
          }
          v12[456] = 0;
          v12[472] = 0;
          if (v36)
          {
            v13 = v35;
            *((_QWORD *)v12 + 57) = v34;
            *((_QWORD *)v12 + 58) = v13;
            if (v13)
            {
              v14 = (unint64_t *)(v13 + 8);
              do
                v15 = __ldxr(v14);
              while (__stxr(v15 + 1, v14));
            }
            v12[472] = 1;
          }
          v12[480] = 0;
          v12[496] = 0;
          if (v39)
          {
            v16 = v38;
            *((_QWORD *)v12 + 60) = v37;
            *((_QWORD *)v12 + 61) = v16;
            if (v16)
            {
              v17 = (unint64_t *)(v16 + 8);
              do
                v18 = __ldxr(v17);
              while (__stxr(v18 + 1, v17));
            }
            v12[496] = 1;
          }
          *((_QWORD *)v12 + 63) = v40;
          *((_DWORD *)v12 + 128) = 1;
          *(_QWORD *)v12 = &off_24EC2B280;
        }
LABEL_53:
        sub_2232953B0((uint64_t)__p);
        return v12;
      }
    }
    else
    {
LABEL_14:
      if (v41)
        goto LABEL_15;
    }
    if (a2)
    {
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v24 = *(const void **)__p;
      if (*(_QWORD *)__p)
        CFRetain(*(CFTypeRef *)__p);
      v12 = 0;
      *a2 = v24;
    }
    else
    {
      v12 = 0;
    }
    goto LABEL_53;
  }
  v32 = 18;
  strcpy(__p, "Data array is NULL");
  v19 = (char *)operator new(0x70uLL);
  v26 = v19;
  v27 = xmmword_2245C45E0;
  strcpy(v19, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
  if (a2)
  {
    *(_QWORD *)&v30.__val_ = 22;
    v30.__cat_ = std::generic_category();
    sub_2245321DC(&v30, (uint64_t)__p, (CFErrorRef *)&cfa);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v20 = cfa;
    if (cfa)
      CFRetain(cfa);
    *a2 = v20;
    v21 = v29;
    if (v29)
    {
      p_shared_owners = (unint64_t *)&v29->__shared_owners_;
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    if ((SHIBYTE(v27) & 0x80000000) == 0)
      goto LABEL_42;
    v19 = v26;
  }
  operator delete(v19);
LABEL_42:
  if (v32 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_22328098C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_22328099C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_2232953B0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232809B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  operator delete(v22);
  if (a22 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_2232809EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *CV3DReconSessionProcessFrameBundleResultCopyMeshList(uint64_t a1, CFTypeRef *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  char *v7;
  CFTypeRef v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  CFTypeRef v12;
  unint64_t *p_shared_owners;
  char *v14;
  _BYTE __p[24];
  CFTypeRef cf;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 448))
    {
      v4 = operator new(0x28uLL, MEMORY[0x24BEDB6B8]);
      v5 = v4;
      if (v4)
      {
        sub_22326F694(v4 + 1, (uint64_t *)(a1 + 16));
        *((_DWORD *)v5 + 8) = 1;
        *v5 = &unk_24EC1F620;
      }
      return v5;
    }
    *(_QWORD *)__p = operator new(0x20uLL);
    *(_OWORD *)&__p[8] = xmmword_2245C6440;
    strcpy(*(char **)__p, "Result has no meshing output");
    v7 = (char *)operator new(0x70uLL);
    v14 = v7;
    strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (a2)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_2245321DC(&v18, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v12 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v12;
      v9 = v17;
      if (!v17)
        goto LABEL_25;
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
LABEL_23:
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
LABEL_25:
      v7 = v14;
    }
  }
  else
  {
    __p[23] = 14;
    strcpy(__p, "Result is NULL");
    v7 = (char *)operator new(0x70uLL);
    v14 = v7;
    strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (a2)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_2245321DC(&v18, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v8 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v8;
      v9 = v17;
      if (!v17)
        goto LABEL_25;
      v10 = (unint64_t *)&v17->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      goto LABEL_23;
    }
  }
  operator delete(v7);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_223280CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionProcessFrameBundleResultHasRoomScanLiteResult(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  char *v9;
  CFTypeRef v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _BYTE __p[24];
  CFTypeRef cf;
  std::__shared_weak_count *v16;
  std::error_condition v17;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 448))
      return *(_BYTE *)(a1 + 80) != 0;
    *(_QWORD *)__p = operator new(0x20uLL);
    *(_OWORD *)&__p[8] = xmmword_2245C6440;
    strcpy(*(char **)__p, "Result has no meshing output");
    v9 = (char *)operator new(0x70uLL);
    strcpy(v9, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (a2)
    {
      *(_QWORD *)&v17.__val_ = 22;
      v17.__cat_ = std::generic_category();
      sub_2245321DC(&v17, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v10 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v10;
      v11 = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
    operator delete(v9);
    if ((__p[23] & 0x80000000) == 0)
      return 0;
  }
  else
  {
    __p[23] = 14;
    strcpy(__p, "Result is NULL");
    v4 = (char *)operator new(0x70uLL);
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (a2)
    {
      *(_QWORD *)&v17.__val_ = 22;
      v17.__cat_ = std::generic_category();
      sub_2245321DC(&v17, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v5;
      v6 = v16;
      if (v16)
      {
        v7 = (unint64_t *)&v16->__shared_owners_;
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    operator delete(v4);
    if ((__p[23] & 0x80000000) == 0)
      return 0;
  }
  operator delete(*(void **)__p);
  return 0;
}

void sub_223280FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionProcessFrameBundleResultHasSyntheticRoomScanLiteResult(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  char *v9;
  CFTypeRef v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _BYTE __p[24];
  CFTypeRef cf;
  std::__shared_weak_count *v16;
  std::error_condition v17;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 448))
      return *(_BYTE *)(a1 + 120) != 0;
    *(_QWORD *)__p = operator new(0x20uLL);
    *(_OWORD *)&__p[8] = xmmword_2245C6440;
    strcpy(*(char **)__p, "Result has no meshing output");
    v9 = (char *)operator new(0x70uLL);
    strcpy(v9, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (a2)
    {
      *(_QWORD *)&v17.__val_ = 22;
      v17.__cat_ = std::generic_category();
      sub_2245321DC(&v17, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v10 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v10;
      v11 = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
    operator delete(v9);
    if ((__p[23] & 0x80000000) == 0)
      return 0;
  }
  else
  {
    __p[23] = 14;
    strcpy(__p, "Result is NULL");
    v4 = (char *)operator new(0x70uLL);
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (a2)
    {
      *(_QWORD *)&v17.__val_ = 22;
      v17.__cat_ = std::generic_category();
      sub_2245321DC(&v17, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v5;
      v6 = v16;
      if (v16)
      {
        v7 = (unint64_t *)&v16->__shared_owners_;
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    operator delete(v4);
    if ((__p[23] & 0x80000000) == 0)
      return 0;
  }
  operator delete(*(void **)__p);
  return 0;
}

void sub_2232812F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *CV3DReconSessionProcessFrameBundleResultCopyRoomScanLiteResult(uint64_t a1, CFTypeRef *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  char *v7;
  CFTypeRef v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  CFTypeRef v12;
  unint64_t *v13;
  CFTypeRef v14;
  unint64_t *p_shared_owners;
  char *v16;
  _BYTE __p[24];
  CFTypeRef cf;
  std::__shared_weak_count *v19;
  std::error_condition v20;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 448))
    {
      if (*(_BYTE *)(a1 + 80))
      {
        v4 = operator new(0x28uLL, MEMORY[0x24BEDB6B8]);
        v5 = v4;
        if (v4)
        {
          sub_22326F694(v4 + 1, (uint64_t *)(a1 + 48));
          *((_BYTE *)v5 + 32) = *(_BYTE *)(a1 + 72);
          *((_DWORD *)v5 + 9) = 1;
          *v5 = &off_24EC29AC8;
        }
        return v5;
      }
      *(_QWORD *)__p = operator new(0x30uLL);
      *(_OWORD *)&__p[8] = xmmword_2245C7A50;
      strcpy(*(char **)__p, "MeshingResult has no RoomScanLite output");
      v7 = (char *)operator new(0x70uLL);
      v16 = v7;
      strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
      if (a2)
      {
        *(_QWORD *)&v20.__val_ = 22;
        v20.__cat_ = std::generic_category();
        sub_2245321DC(&v20, (uint64_t)__p, (CFErrorRef *)&cf);
        if (*a2)
          CFRelease(*a2);
        *a2 = 0;
        v14 = cf;
        if (cf)
          CFRetain(cf);
        *a2 = v14;
        v9 = v19;
        if (!v19)
          goto LABEL_35;
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
LABEL_33:
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
LABEL_35:
        v7 = v16;
      }
    }
    else
    {
      *(_QWORD *)__p = operator new(0x20uLL);
      *(_OWORD *)&__p[8] = xmmword_2245C6440;
      strcpy(*(char **)__p, "Result has no meshing output");
      v7 = (char *)operator new(0x70uLL);
      v16 = v7;
      strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
      if (a2)
      {
        *(_QWORD *)&v20.__val_ = 22;
        v20.__cat_ = std::generic_category();
        sub_2245321DC(&v20, (uint64_t)__p, (CFErrorRef *)&cf);
        if (*a2)
          CFRelease(*a2);
        *a2 = 0;
        v12 = cf;
        if (cf)
          CFRetain(cf);
        *a2 = v12;
        v9 = v19;
        if (!v19)
          goto LABEL_35;
        v13 = (unint64_t *)&v19->__shared_owners_;
        do
          v11 = __ldaxr(v13);
        while (__stlxr(v11 - 1, v13));
        goto LABEL_33;
      }
    }
  }
  else
  {
    __p[23] = 14;
    strcpy(__p, "Result is NULL");
    v7 = (char *)operator new(0x70uLL);
    v16 = v7;
    strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (a2)
    {
      *(_QWORD *)&v20.__val_ = 22;
      v20.__cat_ = std::generic_category();
      sub_2245321DC(&v20, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v8 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v8;
      v9 = v19;
      if (!v19)
        goto LABEL_35;
      v10 = (unint64_t *)&v19->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      goto LABEL_33;
    }
  }
  operator delete(v7);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_2232816D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *CV3DReconSessionProcessFrameBundleResultCopySyntheticRoomScanLiteResult(uint64_t a1, CFTypeRef *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  char *v7;
  CFTypeRef v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  CFTypeRef v12;
  unint64_t *v13;
  CFTypeRef v14;
  unint64_t *p_shared_owners;
  char *v16;
  _BYTE __p[24];
  CFTypeRef cf;
  std::__shared_weak_count *v19;
  std::error_condition v20;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 448))
    {
      if (*(_BYTE *)(a1 + 120))
      {
        v4 = operator new(0x28uLL, MEMORY[0x24BEDB6B8]);
        v5 = v4;
        if (v4)
        {
          sub_22326F694(v4 + 1, (uint64_t *)(a1 + 88));
          *((_BYTE *)v5 + 32) = *(_BYTE *)(a1 + 112);
          *((_DWORD *)v5 + 9) = 1;
          *v5 = &off_24EC29AC8;
        }
        return v5;
      }
      *(_QWORD *)__p = operator new(0x38uLL);
      *(_OWORD *)&__p[8] = xmmword_2245C44A0;
      strcpy(*(char **)__p, "MeshingResult has no SyntheticRoomScanLite output");
      v7 = (char *)operator new(0x70uLL);
      v16 = v7;
      strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
      if (a2)
      {
        *(_QWORD *)&v20.__val_ = 22;
        v20.__cat_ = std::generic_category();
        sub_2245321DC(&v20, (uint64_t)__p, (CFErrorRef *)&cf);
        if (*a2)
          CFRelease(*a2);
        *a2 = 0;
        v14 = cf;
        if (cf)
          CFRetain(cf);
        *a2 = v14;
        v9 = v19;
        if (!v19)
          goto LABEL_35;
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
LABEL_33:
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
LABEL_35:
        v7 = v16;
      }
    }
    else
    {
      *(_QWORD *)__p = operator new(0x20uLL);
      *(_OWORD *)&__p[8] = xmmword_2245C6440;
      strcpy(*(char **)__p, "Result has no meshing output");
      v7 = (char *)operator new(0x70uLL);
      v16 = v7;
      strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
      if (a2)
      {
        *(_QWORD *)&v20.__val_ = 22;
        v20.__cat_ = std::generic_category();
        sub_2245321DC(&v20, (uint64_t)__p, (CFErrorRef *)&cf);
        if (*a2)
          CFRelease(*a2);
        *a2 = 0;
        v12 = cf;
        if (cf)
          CFRetain(cf);
        *a2 = v12;
        v9 = v19;
        if (!v19)
          goto LABEL_35;
        v13 = (unint64_t *)&v19->__shared_owners_;
        do
          v11 = __ldaxr(v13);
        while (__stlxr(v11 - 1, v13));
        goto LABEL_33;
      }
    }
  }
  else
  {
    __p[23] = 14;
    strcpy(__p, "Result is NULL");
    v7 = (char *)operator new(0x70uLL);
    v16 = v7;
    strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (a2)
    {
      *(_QWORD *)&v20.__val_ = 22;
      v20.__cat_ = std::generic_category();
      sub_2245321DC(&v20, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v8 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v8;
      v9 = v19;
      if (!v19)
        goto LABEL_35;
      v10 = (unint64_t *)&v19->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      goto LABEL_33;
    }
  }
  operator delete(v7);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_223281AE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionProcessFrameBundleResultHasOccupancyByProximityResult(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  char *v9;
  CFTypeRef v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _BYTE __p[24];
  CFTypeRef cf;
  std::__shared_weak_count *v16;
  std::error_condition v17;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 448))
      return *(_BYTE *)(a1 + 288) != 0;
    *(_QWORD *)__p = operator new(0x20uLL);
    *(_OWORD *)&__p[8] = xmmword_2245C6440;
    strcpy(*(char **)__p, "Result has no meshing output");
    v9 = (char *)operator new(0x70uLL);
    strcpy(v9, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (a2)
    {
      *(_QWORD *)&v17.__val_ = 22;
      v17.__cat_ = std::generic_category();
      sub_2245321DC(&v17, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v10 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v10;
      v11 = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
    operator delete(v9);
    if ((__p[23] & 0x80000000) == 0)
      return 0;
  }
  else
  {
    __p[23] = 14;
    strcpy(__p, "Result is NULL");
    v4 = (char *)operator new(0x70uLL);
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (a2)
    {
      *(_QWORD *)&v17.__val_ = 22;
      v17.__cat_ = std::generic_category();
      sub_2245321DC(&v17, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v5;
      v6 = v16;
      if (v16)
      {
        v7 = (unint64_t *)&v16->__shared_owners_;
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    operator delete(v4);
    if ((__p[23] & 0x80000000) == 0)
      return 0;
  }
  operator delete(*(void **)__p);
  return 0;
}

void sub_223281E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_DWORD *CV3DReconSessionProcessFrameBundleResultCopyOccupancyByProximityResult(uint64_t a1, CFTypeRef *a2)
{
  _DWORD *v4;
  _DWORD *v5;
  char *v7;
  CFTypeRef v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  CFTypeRef v12;
  unint64_t *v13;
  CFTypeRef v14;
  unint64_t *p_shared_owners;
  char *v16;
  _BYTE __p[24];
  CFTypeRef cf;
  std::__shared_weak_count *v19;
  std::error_condition v20;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 448))
    {
      if (*(_BYTE *)(a1 + 288))
      {
        v4 = operator new(0x68uLL, MEMORY[0x24BEDB6B8]);
        v5 = v4;
        if (v4)
        {
          sub_22329A920((uint64_t)(v4 + 2), (uint64_t *)(a1 + 200));
          v5[24] = 1;
          *(_QWORD *)v5 = &off_24EC29480;
        }
        return v5;
      }
      *(_QWORD *)__p = operator new(0x38uLL);
      *(_OWORD *)&__p[8] = xmmword_2245C7A60;
      strcpy(*(char **)__p, "MeshingResult has no occupancy by proximity output");
      v7 = (char *)operator new(0x70uLL);
      v16 = v7;
      strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
      if (a2)
      {
        *(_QWORD *)&v20.__val_ = 22;
        v20.__cat_ = std::generic_category();
        sub_2245321DC(&v20, (uint64_t)__p, (CFErrorRef *)&cf);
        if (*a2)
          CFRelease(*a2);
        *a2 = 0;
        v14 = cf;
        if (cf)
          CFRetain(cf);
        *a2 = v14;
        v9 = v19;
        if (!v19)
          goto LABEL_35;
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
LABEL_33:
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
LABEL_35:
        v7 = v16;
      }
    }
    else
    {
      *(_QWORD *)__p = operator new(0x20uLL);
      *(_OWORD *)&__p[8] = xmmword_2245C6440;
      strcpy(*(char **)__p, "Result has no meshing output");
      v7 = (char *)operator new(0x70uLL);
      v16 = v7;
      strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
      if (a2)
      {
        *(_QWORD *)&v20.__val_ = 22;
        v20.__cat_ = std::generic_category();
        sub_2245321DC(&v20, (uint64_t)__p, (CFErrorRef *)&cf);
        if (*a2)
          CFRelease(*a2);
        *a2 = 0;
        v12 = cf;
        if (cf)
          CFRetain(cf);
        *a2 = v12;
        v9 = v19;
        if (!v19)
          goto LABEL_35;
        v13 = (unint64_t *)&v19->__shared_owners_;
        do
          v11 = __ldaxr(v13);
        while (__stlxr(v11 - 1, v13));
        goto LABEL_33;
      }
    }
  }
  else
  {
    __p[23] = 14;
    strcpy(__p, "Result is NULL");
    v7 = (char *)operator new(0x70uLL);
    v16 = v7;
    strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (a2)
    {
      *(_QWORD *)&v20.__val_ = 22;
      v20.__cat_ = std::generic_category();
      sub_2245321DC(&v20, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v8 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v8;
      v9 = v19;
      if (!v19)
        goto LABEL_35;
      v10 = (unint64_t *)&v19->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      goto LABEL_33;
    }
  }
  operator delete(v7);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_223282204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionProcessFrameBundleResultHasRoomBoundaryResult(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  CFTypeRef v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _BYTE __p[24];
  CFTypeRef cf;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  if (!a1)
  {
    __p[23] = 14;
    strcpy(__p, "Result is NULL");
    v5 = (char *)operator new(0x70uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (a2)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_2245321DC(&v18, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v6;
      v7 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if ((__p[23] & 0x80000000) != 0)
      goto LABEL_28;
    return 0;
  }
  if (*(_BYTE *)(a1 + 472))
  {
    v3 = *(_QWORD *)(a1 + 456);
    if (*(_BYTE *)(v3 + 2512))
      return *(_BYTE *)(v3 + 2504) != 0;
    return 0;
  }
  *(_QWORD *)__p = operator new(0x20uLL);
  *(_OWORD *)&__p[8] = xmmword_2245B8EA0;
  strcpy(*(char **)__p, "Result has no keyframing output");
  v10 = (char *)operator new(0x70uLL);
  strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
  if (a2)
  {
    *(_QWORD *)&v18.__val_ = 22;
    v18.__cat_ = std::generic_category();
    sub_2245321DC(&v18, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v11 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v11;
    v12 = v17;
    if (v17)
    {
      v13 = (unint64_t *)&v17->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  operator delete(v10);
  if ((__p[23] & 0x80000000) == 0)
    return 0;
LABEL_28:
  operator delete(*(void **)__p);
  return 0;
}

void sub_22328253C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *CV3DReconSessionProcessFrameBundleResultCopyRoomBoundaryResult(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char *v11;
  CFTypeRef v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  CFTypeRef v16;
  unint64_t *p_shared_owners;
  CFTypeRef v18;
  unint64_t *v19;
  char *v20;
  _BYTE __p[24];
  CFTypeRef cf;
  std::__shared_weak_count *v23;
  std::error_condition v24;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 472))
    {
      v3 = *(_QWORD *)(a1 + 456);
      if (*(_BYTE *)(v3 + 2512) && *(_BYTE *)(v3 + 2504))
      {
        v4 = operator new(0x90uLL, MEMORY[0x24BEDB6B8]);
        v5 = v4;
        if (v4)
        {
          v4[1] = 0;
          v4[2] = 0;
          v4[3] = 0;
          sub_2231740C8((uint64_t)(v4 + 1), *(_QWORD *)(v3 + 2368), *(_QWORD *)(v3 + 2376), 0x4FA4FA4FA4FA4FA5 * ((uint64_t)(*(_QWORD *)(v3 + 2376) - *(_QWORD *)(v3 + 2368)) >> 3));
          v5[4] = 0;
          v5[5] = 0;
          v5[6] = 0;
          sub_2231740C8((uint64_t)(v5 + 4), *(_QWORD *)(v3 + 2392), *(_QWORD *)(v3 + 2400), 0x4FA4FA4FA4FA4FA5 * ((uint64_t)(*(_QWORD *)(v3 + 2400) - *(_QWORD *)(v3 + 2392)) >> 3));
          v6 = *(_OWORD *)(v3 + 2416);
          v7 = *(_OWORD *)(v3 + 2432);
          v8 = *(_OWORD *)(v3 + 2448);
          *(_OWORD *)(v5 + 13) = *(_OWORD *)(v3 + 2464);
          *(_OWORD *)(v5 + 11) = v8;
          *(_OWORD *)(v5 + 9) = v7;
          *(_OWORD *)(v5 + 7) = v6;
          v9 = *(_OWORD *)(v3 + 2480);
          *((_BYTE *)v5 + 136) = *(_BYTE *)(v3 + 2496);
          *(_OWORD *)(v5 + 15) = v9;
          *((_DWORD *)v5 + 35) = 1;
          *v5 = &off_24EC29A40;
        }
        return v5;
      }
      *(_QWORD *)__p = operator new(0x28uLL);
      *(_OWORD *)&__p[8] = xmmword_2245B8D40;
      strcpy(*(char **)__p, "Result has no room boundary output");
      v11 = (char *)operator new(0x70uLL);
      v20 = v11;
      strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
      if (a2)
      {
        *(_QWORD *)&v24.__val_ = 22;
        v24.__cat_ = std::generic_category();
        sub_2245321DC(&v24, (uint64_t)__p, (CFErrorRef *)&cf);
        if (*a2)
          CFRelease(*a2);
        *a2 = 0;
        v16 = cf;
        if (cf)
          CFRetain(cf);
        *a2 = v16;
        v13 = v23;
        if (!v23)
          goto LABEL_36;
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
LABEL_34:
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
LABEL_36:
        v11 = v20;
      }
    }
    else
    {
      *(_QWORD *)__p = operator new(0x20uLL);
      *(_OWORD *)&__p[8] = xmmword_2245B8EA0;
      strcpy(*(char **)__p, "Result has no keyframing output");
      v11 = (char *)operator new(0x70uLL);
      v20 = v11;
      strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
      if (a2)
      {
        *(_QWORD *)&v24.__val_ = 22;
        v24.__cat_ = std::generic_category();
        sub_2245321DC(&v24, (uint64_t)__p, (CFErrorRef *)&cf);
        if (*a2)
          CFRelease(*a2);
        *a2 = 0;
        v18 = cf;
        if (cf)
          CFRetain(cf);
        *a2 = v18;
        v13 = v23;
        if (!v23)
          goto LABEL_36;
        v19 = (unint64_t *)&v23->__shared_owners_;
        do
          v15 = __ldaxr(v19);
        while (__stlxr(v15 - 1, v19));
        goto LABEL_34;
      }
    }
  }
  else
  {
    __p[23] = 14;
    strcpy(__p, "Result is NULL");
    v11 = (char *)operator new(0x70uLL);
    v20 = v11;
    strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (a2)
    {
      *(_QWORD *)&v24.__val_ = 22;
      v24.__cat_ = std::generic_category();
      sub_2245321DC(&v24, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v12 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v12;
      v13 = v23;
      if (!v23)
        goto LABEL_36;
      v14 = (unint64_t *)&v23->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      goto LABEL_34;
    }
  }
  operator delete(v11);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_223282998(void *a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  v4 = (_QWORD *)*v2;
  if (*v2)
  {
    v5 = *(_QWORD **)(v1 + 16);
    v6 = (_QWORD *)*v2;
    if (v5 != v4)
    {
      do
        v5 = sub_223173E64(v5 - 45);
      while (v5 != v4);
      v6 = (_QWORD *)*v2;
    }
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v6);
  }
  MEMORY[0x227684CD0](v1, MEMORY[0x24BEDB6B8]);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x223282958);
}

void sub_223282A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionProcessFrameBundleResultHasOccupancyAirMeshResult(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  char *v9;
  CFTypeRef v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _BYTE __p[24];
  CFTypeRef cf;
  std::__shared_weak_count *v16;
  std::error_condition v17;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 448))
      return *(_BYTE *)(a1 + 440) != 0;
    *(_QWORD *)__p = operator new(0x20uLL);
    *(_OWORD *)&__p[8] = xmmword_2245C6440;
    strcpy(*(char **)__p, "Result has no meshing output");
    v9 = (char *)operator new(0x70uLL);
    strcpy(v9, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (a2)
    {
      *(_QWORD *)&v17.__val_ = 22;
      v17.__cat_ = std::generic_category();
      sub_2245321DC(&v17, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v10 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v10;
      v11 = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
    operator delete(v9);
    if ((__p[23] & 0x80000000) == 0)
      return 0;
  }
  else
  {
    __p[23] = 14;
    strcpy(__p, "Result is NULL");
    v4 = (char *)operator new(0x70uLL);
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (a2)
    {
      *(_QWORD *)&v17.__val_ = 22;
      v17.__cat_ = std::generic_category();
      sub_2245321DC(&v17, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v5;
      v6 = v16;
      if (v16)
      {
        v7 = (unint64_t *)&v16->__shared_owners_;
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    operator delete(v4);
    if ((__p[23] & 0x80000000) == 0)
      return 0;
  }
  operator delete(*(void **)__p);
  return 0;
}

void sub_223282D1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *CV3DReconSessionProcessFrameBundleResultCopyOccupancyAirMeshResult(uint64_t a1, CFTypeRef *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  char *v7;
  CFTypeRef v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  CFTypeRef v12;
  unint64_t *v13;
  CFTypeRef v14;
  unint64_t *p_shared_owners;
  char *v16;
  _BYTE __p[24];
  CFTypeRef cf;
  std::__shared_weak_count *v19;
  std::error_condition v20;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 448))
    {
      if (*(_BYTE *)(a1 + 440))
      {
        v4 = operator new(0x28uLL, MEMORY[0x24BEDB6B8]);
        v5 = v4;
        if (v4)
        {
          sub_22326F694(v4 + 1, (uint64_t *)(a1 + 416));
          *((_DWORD *)v5 + 8) = 1;
          *v5 = &off_24EC29410;
        }
        return v5;
      }
      *(_QWORD *)__p = operator new(0x30uLL);
      *(_OWORD *)&__p[8] = xmmword_2245C43D0;
      strcpy(*(char **)__p, "MeshingResult has no occupancy air mesh output");
      v7 = (char *)operator new(0x70uLL);
      v16 = v7;
      strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
      if (a2)
      {
        *(_QWORD *)&v20.__val_ = 22;
        v20.__cat_ = std::generic_category();
        sub_2245321DC(&v20, (uint64_t)__p, (CFErrorRef *)&cf);
        if (*a2)
          CFRelease(*a2);
        *a2 = 0;
        v14 = cf;
        if (cf)
          CFRetain(cf);
        *a2 = v14;
        v9 = v19;
        if (!v19)
          goto LABEL_35;
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
LABEL_33:
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
LABEL_35:
        v7 = v16;
      }
    }
    else
    {
      *(_QWORD *)__p = operator new(0x20uLL);
      *(_OWORD *)&__p[8] = xmmword_2245C6440;
      strcpy(*(char **)__p, "Result has no meshing output");
      v7 = (char *)operator new(0x70uLL);
      v16 = v7;
      strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
      if (a2)
      {
        *(_QWORD *)&v20.__val_ = 22;
        v20.__cat_ = std::generic_category();
        sub_2245321DC(&v20, (uint64_t)__p, (CFErrorRef *)&cf);
        if (*a2)
          CFRelease(*a2);
        *a2 = 0;
        v12 = cf;
        if (cf)
          CFRetain(cf);
        *a2 = v12;
        v9 = v19;
        if (!v19)
          goto LABEL_35;
        v13 = (unint64_t *)&v19->__shared_owners_;
        do
          v11 = __ldaxr(v13);
        while (__stlxr(v11 - 1, v13));
        goto LABEL_33;
      }
    }
  }
  else
  {
    __p[23] = 14;
    strcpy(__p, "Result is NULL");
    v7 = (char *)operator new(0x70uLL);
    v16 = v7;
    strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (a2)
    {
      *(_QWORD *)&v20.__val_ = 22;
      v20.__cat_ = std::generic_category();
      sub_2245321DC(&v20, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v8 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v8;
      v9 = v19;
      if (!v19)
        goto LABEL_35;
      v10 = (unint64_t *)&v19->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      goto LABEL_33;
    }
  }
  operator delete(v7);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_2232830F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionProcessFrameBundleResultHasVisibilityMap(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  void *__p[2];
  char v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 448))
      return *(_BYTE *)(a1 + 408) != 0;
    return 0;
  }
  v11 = 14;
  strcpy((char *)__p, "Result is NULL");
  v4 = (char *)operator new(0x70uLL);
  v9 = v4;
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
  if (a2)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v4 = v9;
  }
  operator delete(v4);
  if ((v11 & 0x80000000) == 0)
    return 0;
  operator delete(__p[0]);
  return 0;
}

void sub_2232832FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_DWORD *CV3DReconSessionProcessFrameBundleResultCopyVisibilityMap(uint64_t a1, CFTypeRef *a2)
{
  _DWORD *v4;
  _DWORD *v5;
  char *v7;
  CFTypeRef v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  CFTypeRef v12;
  unint64_t *v13;
  CFTypeRef v14;
  unint64_t *p_shared_owners;
  char *v16;
  _BYTE __p[24];
  CFTypeRef cf;
  std::__shared_weak_count *v19;
  std::error_condition v20;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 448))
    {
      if (*(_BYTE *)(a1 + 408))
      {
        v4 = operator new(0x80uLL, MEMORY[0x24BEDB6B8]);
        v5 = v4;
        if (v4)
        {
          sub_22329AA9C((uint64_t)(v4 + 2), a1 + 296);
          v5[30] = 1;
          *(_QWORD *)v5 = &off_24EC2BB98;
        }
        return v5;
      }
      *(_QWORD *)__p = operator new(0x30uLL);
      *(_OWORD *)&__p[8] = xmmword_2245B9450;
      strcpy(*(char **)__p, "MeshingResult has no visibility map output");
      v7 = (char *)operator new(0x70uLL);
      v16 = v7;
      strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
      if (a2)
      {
        *(_QWORD *)&v20.__val_ = 22;
        v20.__cat_ = std::generic_category();
        sub_2245321DC(&v20, (uint64_t)__p, (CFErrorRef *)&cf);
        if (*a2)
          CFRelease(*a2);
        *a2 = 0;
        v14 = cf;
        if (cf)
          CFRetain(cf);
        *a2 = v14;
        v9 = v19;
        if (!v19)
          goto LABEL_35;
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
LABEL_33:
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
LABEL_35:
        v7 = v16;
      }
    }
    else
    {
      *(_QWORD *)__p = operator new(0x20uLL);
      *(_OWORD *)&__p[8] = xmmword_2245C6440;
      strcpy(*(char **)__p, "Result has no meshing output");
      v7 = (char *)operator new(0x70uLL);
      v16 = v7;
      strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
      if (a2)
      {
        *(_QWORD *)&v20.__val_ = 22;
        v20.__cat_ = std::generic_category();
        sub_2245321DC(&v20, (uint64_t)__p, (CFErrorRef *)&cf);
        if (*a2)
          CFRelease(*a2);
        *a2 = 0;
        v12 = cf;
        if (cf)
          CFRetain(cf);
        *a2 = v12;
        v9 = v19;
        if (!v19)
          goto LABEL_35;
        v13 = (unint64_t *)&v19->__shared_owners_;
        do
          v11 = __ldaxr(v13);
        while (__stlxr(v11 - 1, v13));
        goto LABEL_33;
      }
    }
  }
  else
  {
    __p[23] = 14;
    strcpy(__p, "Result is NULL");
    v7 = (char *)operator new(0x70uLL);
    v16 = v7;
    strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (a2)
    {
      *(_QWORD *)&v20.__val_ = 22;
      v20.__cat_ = std::generic_category();
      sub_2245321DC(&v20, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v8 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v8;
      v9 = v19;
      if (!v19)
        goto LABEL_35;
      v10 = (unint64_t *)&v19->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      goto LABEL_33;
    }
  }
  operator delete(v7);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_2232836C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionProcessFrameBundleResultHasSpatialSubdivisionResult(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  char *v9;
  CFTypeRef v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _BYTE __p[24];
  CFTypeRef cf;
  std::__shared_weak_count *v16;
  std::error_condition v17;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 448))
      return *(_BYTE *)(a1 + 192) != 0;
    *(_QWORD *)__p = operator new(0x20uLL);
    *(_OWORD *)&__p[8] = xmmword_2245C6440;
    strcpy(*(char **)__p, "Result has no meshing output");
    v9 = (char *)operator new(0x70uLL);
    strcpy(v9, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (a2)
    {
      *(_QWORD *)&v17.__val_ = 22;
      v17.__cat_ = std::generic_category();
      sub_2245321DC(&v17, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v10 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v10;
      v11 = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
    operator delete(v9);
    if ((__p[23] & 0x80000000) == 0)
      return 0;
  }
  else
  {
    __p[23] = 14;
    strcpy(__p, "Result is NULL");
    v4 = (char *)operator new(0x70uLL);
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (a2)
    {
      *(_QWORD *)&v17.__val_ = 22;
      v17.__cat_ = std::generic_category();
      sub_2245321DC(&v17, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v5;
      v6 = v16;
      if (v16)
      {
        v7 = (unint64_t *)&v16->__shared_owners_;
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    operator delete(v4);
    if ((__p[23] & 0x80000000) == 0)
      return 0;
  }
  operator delete(*(void **)__p);
  return 0;
}

void sub_223283A08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconSessionProcessFrameBundleResultCopySpatialSubdivisionResult(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  char *v9;
  CFTypeRef v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  char *v14;
  CFTypeRef v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  _BYTE __p[24];
  CFTypeRef cf;
  std::__shared_weak_count *v21;
  std::error_condition v22;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 448))
    {
      if (*(_BYTE *)(a1 + 192))
      {
        sub_22329AC08((uint64_t *)(a1 + 128), (uint64_t *)__p);
        return *(_QWORD *)__p;
      }
      *(_QWORD *)__p = operator new(0x30uLL);
      *(_OWORD *)&__p[8] = xmmword_2245C4540;
      strcpy(*(char **)__p, "MeshingResult has no spatial subdivision output");
      v14 = (char *)operator new(0x70uLL);
      strcpy(v14, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
      if (a2)
      {
        *(_QWORD *)&v22.__val_ = 22;
        v22.__cat_ = std::generic_category();
        sub_2245321DC(&v22, (uint64_t)__p, (CFErrorRef *)&cf);
        if (*a2)
          CFRelease(*a2);
        *a2 = 0;
        v15 = cf;
        if (cf)
          CFRetain(cf);
        *a2 = v15;
        v16 = v21;
        if (v21)
        {
          p_shared_owners = (unint64_t *)&v21->__shared_owners_;
          do
            v18 = __ldaxr(p_shared_owners);
          while (__stlxr(v18 - 1, p_shared_owners));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
      }
      operator delete(v14);
      if ((__p[23] & 0x80000000) == 0)
        return 0;
    }
    else
    {
      *(_QWORD *)__p = operator new(0x20uLL);
      *(_OWORD *)&__p[8] = xmmword_2245C6440;
      strcpy(*(char **)__p, "Result has no meshing output");
      v9 = (char *)operator new(0x70uLL);
      strcpy(v9, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
      if (a2)
      {
        *(_QWORD *)&v22.__val_ = 22;
        v22.__cat_ = std::generic_category();
        sub_2245321DC(&v22, (uint64_t)__p, (CFErrorRef *)&cf);
        if (*a2)
          CFRelease(*a2);
        *a2 = 0;
        v10 = cf;
        if (cf)
          CFRetain(cf);
        *a2 = v10;
        v11 = v21;
        if (v21)
        {
          v12 = (unint64_t *)&v21->__shared_owners_;
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
      }
      operator delete(v9);
      if ((__p[23] & 0x80000000) == 0)
        return 0;
    }
  }
  else
  {
    __p[23] = 14;
    strcpy(__p, "Result is NULL");
    v4 = (char *)operator new(0x70uLL);
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (a2)
    {
      *(_QWORD *)&v22.__val_ = 22;
      v22.__cat_ = std::generic_category();
      sub_2245321DC(&v22, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v5;
      v6 = v21;
      if (v21)
      {
        v7 = (unint64_t *)&v21->__shared_owners_;
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    operator delete(v4);
    if ((__p[23] & 0x80000000) == 0)
      return 0;
  }
  operator delete(*(void **)__p);
  return 0;
}

void sub_223283E58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconSessionProcessFrameBundleResultGetLuxLevel(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  char *v9;
  CFTypeRef v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  char __p[23];
  char v15;
  CFTypeRef cf;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 508))
      return *(unsigned int *)(a1 + 504);
    strcpy(__p, "No lux level available");
    v15 = 22;
    v9 = (char *)operator new(0x70uLL);
    strcpy(v9, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (a2)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_2245321DC(&v18, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v10 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v10;
      v11 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
    operator delete(v9);
    if ((v15 & 0x80000000) == 0)
      return 0;
  }
  else
  {
    v15 = 14;
    strcpy(__p, "Result is NULL");
    v4 = (char *)operator new(0x70uLL);
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (a2)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_2245321DC(&v18, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v5;
      v6 = v17;
      if (v17)
      {
        v7 = (unint64_t *)&v17->__shared_owners_;
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    operator delete(v4);
    if ((v15 & 0x80000000) == 0)
      return 0;
  }
  operator delete(*(void **)__p);
  return 0;
}

void sub_223284158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionProcessFrameBundleResultHasMonitoringResult(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  _BOOL8 v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  char *v15;
  CFErrorRef v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  CFErrorRef v20;
  unint64_t *v21;
  void *__p[5];
  std::__shared_weak_count *v23;
  uint64_t (**v24)();
  std::__shared_weak_count *v25;
  char v26;
  char *v27;
  __int128 v28;
  CFErrorRef v29;
  std::__shared_weak_count *v30;
  std::error_condition v31;

  if (!a1)
  {
    HIBYTE(__p[2]) = 14;
    strcpy((char *)__p, "Result is NULL");
    v15 = (char *)operator new(0x70uLL);
    v27 = v15;
    v28 = xmmword_2245C45E0;
    strcpy(v15, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (a2)
    {
      *(_QWORD *)&v31.__val_ = 22;
      v31.__cat_ = std::generic_category();
      sub_2245321DC(&v31, (uint64_t)__p, &v29);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v16 = v29;
      if (v29)
        CFRetain(v29);
      *a2 = v16;
      v17 = v30;
      if (!v30)
        goto LABEL_38;
      p_shared_owners = (unint64_t *)&v30->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
LABEL_37:
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
        if ((SHIBYTE(v28) & 0x80000000) == 0)
        {
LABEL_41:
          if (SHIBYTE(__p[2]) < 0)
            operator delete(__p[0]);
          return 0;
        }
        goto LABEL_39;
      }
LABEL_38:
      if ((SHIBYTE(v28) & 0x80000000) == 0)
        goto LABEL_41;
LABEL_39:
      v15 = v27;
    }
LABEL_40:
    operator delete(v15);
    goto LABEL_41;
  }
  if (!*(_BYTE *)(a1 + 472))
    return 0;
  v3 = *(_QWORD *)(a1 + 456);
  if (!v3)
  {
    __p[0] = operator new(0x20uLL);
    *(_OWORD *)&__p[1] = xmmword_2245B8EA0;
    strcpy((char *)__p[0], "Result has no keyframing output");
    v15 = (char *)operator new(0x70uLL);
    v27 = v15;
    v28 = xmmword_2245C45E0;
    strcpy(v15, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (a2)
    {
      *(_QWORD *)&v31.__val_ = 22;
      v31.__cat_ = std::generic_category();
      sub_2245321DC(&v31, (uint64_t)__p, &v29);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v20 = v29;
      if (v29)
        CFRetain(v29);
      *a2 = v20;
      v17 = v30;
      if (!v30)
        goto LABEL_38;
      v21 = (unint64_t *)&v30->__shared_owners_;
      do
        v19 = __ldaxr(v21);
      while (__stlxr(v19 - 1, v21));
      goto LABEL_37;
    }
    goto LABEL_40;
  }
  LOBYTE(__p[0]) = 0;
  v26 = 0;
  sub_223295AF8((uint64_t)__p, v3 + 2072);
  v4 = v26 != 0;
  if (!v26)
    return v4;
  v24 = &off_24EC715B8;
  v5 = v25;
  if (v25)
  {
    v6 = (unint64_t *)&v25->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  __p[3] = &off_24EC715B8;
  v8 = v23;
  if (v23)
  {
    v9 = (unint64_t *)&v23->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  __p[0] = &off_24EC715B8;
  v11 = (std::__shared_weak_count *)__p[2];
  if (!__p[2])
    return v4;
  v12 = (unint64_t *)((char *)__p[2] + 8);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (v13)
    return v4;
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  return v4;
}

void sub_223284500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  operator delete(v14);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_22328455C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  if (!*(_BYTE *)(a1 + 80))
    return a1;
  *(_QWORD *)(a1 + 48) = &off_24EC715B8;
  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)(a1 + 24) = &off_24EC715B8;
  v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  *(_QWORD *)a1 = &off_24EC715B8;
  v8 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v8)
    return a1;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

_QWORD *CV3DReconSessionProcessFrameBundleResultCopyMonitoringResult(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  __int128 v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  void *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  char *v17;
  const void *v18;
  std::__shared_weak_count *cat;
  unint64_t *v20;
  unint64_t v21;
  const void *v22;
  unint64_t *v23;
  char *v25;
  const std::error_category *v26;
  CFErrorRef v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  __int128 v41;
  void *__p[5];
  std::__shared_weak_count *v43;
  uint64_t (**v44)();
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  char v48;
  char *v49;
  __int128 v50;
  CFErrorRef v51;
  std::__shared_weak_count *v52;
  std::error_condition v53;

  if (!a1)
  {
    HIBYTE(__p[2]) = 14;
    strcpy((char *)__p, "Result is NULL");
    v17 = (char *)operator new(0x70uLL);
    v49 = v17;
    v50 = xmmword_2245C45E0;
    strcpy(v17, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (a2)
    {
      v40 = 22;
      *(_QWORD *)&v41 = std::generic_category();
      sub_2245321DC((const std::error_condition *)&v40, (uint64_t)__p, (CFErrorRef *)&v53);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v22 = *(const void **)&v53.__val_;
      if (*(_QWORD *)&v53.__val_)
        CFRetain(*(CFTypeRef *)&v53.__val_);
      *a2 = v22;
      cat = (std::__shared_weak_count *)v53.__cat_;
      if (!v53.__cat_)
        goto LABEL_34;
      v23 = (unint64_t *)&v53.__cat_[1];
      do
        v21 = __ldaxr(v23);
      while (__stlxr(v21 - 1, v23));
LABEL_33:
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))cat->__on_zero_shared)(cat);
        std::__shared_weak_count::__release_weak(cat);
        if ((SHIBYTE(v50) & 0x80000000) == 0)
          goto LABEL_37;
LABEL_35:
        v17 = v49;
        goto LABEL_36;
      }
LABEL_34:
      if ((SHIBYTE(v50) & 0x80000000) == 0)
      {
LABEL_37:
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
        return 0;
      }
      goto LABEL_35;
    }
LABEL_36:
    operator delete(v17);
    goto LABEL_37;
  }
  if (!*(_BYTE *)(a1 + 472) || (v3 = *(_QWORD *)(a1 + 456)) == 0)
  {
    __p[0] = operator new(0x20uLL);
    *(_OWORD *)&__p[1] = xmmword_2245B8EA0;
    strcpy((char *)__p[0], "Result has no keyframing output");
    v17 = (char *)operator new(0x70uLL);
    v49 = v17;
    v50 = xmmword_2245C45E0;
    strcpy(v17, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (a2)
    {
      v40 = 22;
      *(_QWORD *)&v41 = std::generic_category();
      sub_2245321DC((const std::error_condition *)&v40, (uint64_t)__p, (CFErrorRef *)&v53);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v18 = *(const void **)&v53.__val_;
      if (*(_QWORD *)&v53.__val_)
        CFRetain(*(CFTypeRef *)&v53.__val_);
      *a2 = v18;
      cat = (std::__shared_weak_count *)v53.__cat_;
      if (!v53.__cat_)
        goto LABEL_34;
      v20 = (unint64_t *)&v53.__cat_[1];
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      goto LABEL_33;
    }
    goto LABEL_36;
  }
  LOBYTE(__p[0]) = 0;
  v48 = 0;
  sub_223295AF8((uint64_t)__p, v3 + 2072);
  if (!v48)
  {
    v49 = (char *)operator new(0x20uLL);
    v50 = xmmword_2245B8EA0;
    strcpy(v49, "Result has no monitoring output");
    v25 = (char *)operator new(0x70uLL);
    v40 = (uint64_t)v25;
    v41 = xmmword_2245C45E0;
    strcpy(v25, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (a2)
    {
      v26 = std::generic_category();
      *(_QWORD *)&v53.__val_ = 22;
      v53.__cat_ = v26;
      sub_2245321DC(&v53, (uint64_t)&v49, &v51);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v27 = v51;
      if (v51)
        CFRetain(v51);
      *a2 = v27;
      v28 = v52;
      if (v52)
      {
        p_shared_owners = (unint64_t *)&v52->__shared_owners_;
        do
          v30 = __ldaxr(p_shared_owners);
        while (__stlxr(v30 - 1, p_shared_owners));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      if ((SHIBYTE(v41) & 0x80000000) == 0)
      {
        if ((SHIBYTE(v50) & 0x80000000) == 0)
          goto LABEL_55;
        goto LABEL_59;
      }
      v25 = (char *)v40;
    }
    operator delete(v25);
    if ((SHIBYTE(v50) & 0x80000000) == 0)
    {
LABEL_55:
      v5 = 0;
      if (v48)
        goto LABEL_60;
      return v5;
    }
LABEL_59:
    operator delete(v49);
    v5 = 0;
    if (v48)
      goto LABEL_60;
    return v5;
  }
  v4 = operator new(0x60uLL, MEMORY[0x24BEDB6B8]);
  v5 = v4;
  if (v4)
  {
    v6 = *(_OWORD *)&__p[1];
    v4[1] = &off_24EC715B8;
    *((_OWORD *)v4 + 1) = v6;
    if (*((_QWORD *)&v6 + 1))
    {
      v7 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v10 = __p[4];
    v9 = v43;
    v4[4] = &off_24EC715B8;
    v4[5] = v10;
    v4[6] = v9;
    if (v9)
    {
      v11 = (unint64_t *)&v9->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    v14 = v45;
    v13 = v46;
    v4[7] = &off_24EC715B8;
    v4[8] = v14;
    v4[9] = v13;
    if (v13)
    {
      v15 = (unint64_t *)&v13->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    v4[10] = v47;
    *((_DWORD *)v4 + 22) = 1;
    *v4 = &off_24EC293A0;
  }
LABEL_60:
  v44 = &off_24EC715B8;
  v31 = v46;
  if (v46)
  {
    v32 = (unint64_t *)&v46->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  __p[3] = &off_24EC715B8;
  v34 = v43;
  if (v43)
  {
    v35 = (unint64_t *)&v43->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  __p[0] = &off_24EC715B8;
  v37 = (std::__shared_weak_count *)__p[2];
  if (!__p[2])
    return v5;
  v38 = (unint64_t *)((char *)__p[2] + 8);
  do
    v39 = __ldaxr(v38);
  while (__stlxr(v39 - 1, v38));
  if (v39)
    return v5;
  ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
  std::__shared_weak_count::__release_weak(v37);
  return v5;
}

void sub_223284B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;
  uint64_t v19;

  operator delete(v18);
  if (*(char *)(v19 - 65) < 0)
    operator delete(*(void **)(v19 - 88));
  sub_22328455C((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void sub_223284BE4()
{
  uint64_t v0;

  sub_223167354(v0 - 48);
  JUMPOUT(0x223284BF4);
}

void sub_223284C00()
{
  JUMPOUT(0x223284C08);
}

BOOL CV3DReconSessionEnable(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v10;
  void *__p[2];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    sub_2236196D0(*(_QWORD *)(*(_QWORD *)(a1 + 1216) + 56));
  }
  else
  {
    v12 = 15;
    strcpy((char *)__p, "Session is NULL");
    v4 = (char *)operator new(0x70uLL);
    v10 = v4;
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (a2)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v5;
      v6 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      v4 = v10;
    }
    operator delete(v4);
    if (v12 < 0)
      operator delete(__p[0]);
  }
  return a1 != 0;
}

void sub_223284D80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionDisable(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v10;
  void *__p[2];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    sub_22360D58C(*(_QWORD *)(*(_QWORD *)(a1 + 1216) + 56));
  }
  else
  {
    v12 = 15;
    strcpy((char *)__p, "Session is NULL");
    v4 = (char *)operator new(0x70uLL);
    v10 = v4;
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (a2)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v5;
      v6 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      v4 = v10;
    }
    operator delete(v4);
    if (v12 < 0)
      operator delete(__p[0]);
  }
  return a1 != 0;
}

void sub_223284F1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionReset(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v10;
  void *__p[2];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    sub_223619294(*(_QWORD **)(*(_QWORD *)(a1 + 1216) + 56));
  }
  else
  {
    v12 = 15;
    strcpy((char *)__p, "Session is NULL");
    v4 = (char *)operator new(0x70uLL);
    v10 = v4;
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (a2)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v5;
      v6 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      v4 = v10;
    }
    operator delete(v4);
    if (v12 < 0)
      operator delete(__p[0]);
  }
  return a1 != 0;
}

void sub_2232850B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionWait(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v10;
  void *__p[2];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1216) + 24))(*(_QWORD *)(a1 + 1216));
  }
  else
  {
    v12 = 15;
    strcpy((char *)__p, "Session is NULL");
    v4 = (char *)operator new(0x70uLL);
    v10 = v4;
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (a2)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v5;
      v6 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      v4 = v10;
    }
    operator delete(v4);
    if (v12 < 0)
      operator delete(__p[0]);
  }
  return a1 != 0;
}

void sub_223285258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionFilesystemAccessGranted(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v10;
  void *__p[2];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
  {
    sub_223619594(*(_QWORD **)(*(_QWORD *)(a1 + 1216) + 56));
  }
  else
  {
    v12 = 15;
    strcpy((char *)__p, "Session is NULL");
    v4 = (char *)operator new(0x70uLL);
    v10 = v4;
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (a2)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v5;
      v6 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      v4 = v10;
    }
    operator delete(v4);
    if (v12 < 0)
      operator delete(__p[0]);
  }
  return a1 != 0;
}

void sub_2232853F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconSessionProcessFrameBundle(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t i;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;
  uint64_t v16;
  char *v18;
  CFTypeRef v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  char *v23;
  CFTypeRef v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  CFTypeRef cf;
  std::__shared_weak_count *v29;
  std::error_condition v30;
  void *__p[202];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE v43[32];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;

  if (!a1)
  {
    HIBYTE(__p[2]) = 15;
    strcpy((char *)__p, "Session is NULL");
    v18 = (char *)operator new(0x70uLL);
    *(_QWORD *)v43 = v18;
    *(_OWORD *)&v43[8] = xmmword_2245C45E0;
    strcpy(v18, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v30.__val_ = 22;
      v30.__cat_ = std::generic_category();
      sub_2245321DC(&v30, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v19 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v19;
      v20 = v29;
      if (v29)
      {
        p_shared_owners = (unint64_t *)&v29->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      if ((v43[23] & 0x80000000) == 0)
      {
        if (SHIBYTE(__p[2]) < 0)
          goto LABEL_42;
        return 0;
      }
      v18 = *(char **)v43;
    }
    operator delete(v18);
    if (SHIBYTE(__p[2]) < 0)
    {
LABEL_42:
      operator delete(__p[0]);
      return 0;
    }
    return 0;
  }
  if (!a2)
  {
    __p[0] = operator new(0x20uLL);
    *(_OWORD *)&__p[1] = xmmword_2245B8D70;
    strcpy((char *)__p[0], "Input frame bundle is NULL");
    v23 = (char *)operator new(0x70uLL);
    *(_QWORD *)v43 = v23;
    *(_OWORD *)&v43[8] = xmmword_2245C45E0;
    strcpy(v23, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v30.__val_ = 22;
      v30.__cat_ = std::generic_category();
      sub_2245321DC(&v30, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v24 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v24;
      v25 = v29;
      if (v29)
      {
        v26 = (unint64_t *)&v29->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      if ((v43[23] & 0x80000000) == 0)
      {
LABEL_37:
        if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
          return 0;
        goto LABEL_42;
      }
      v23 = *(char **)v43;
    }
    operator delete(v23);
    goto LABEL_37;
  }
  sub_223257000((uint64_t)__p, a2 + 8);
  v5 = *(_OWORD *)(a1 + 168);
  *(_OWORD *)v43 = *(_OWORD *)(a1 + 152);
  *(_OWORD *)&v43[16] = v5;
  v6 = *(_OWORD *)(a1 + 200);
  v44 = *(_OWORD *)(a1 + 184);
  v45 = v6;
  v7 = *(_OWORD *)(a1 + 232);
  v46 = *(_OWORD *)(a1 + 216);
  v47 = v7;
  v8 = *(_OWORD *)(a1 + 264);
  v48 = *(_OWORD *)(a1 + 248);
  v49 = v8;
  v35 = v6;
  v34 = v44;
  v33 = v5;
  v32 = *(_OWORD *)v43;
  v36 = *(_OWORD *)(a1 + 216);
  v37 = *(_OWORD *)(a1 + 232);
  v38 = *(_OWORD *)(a1 + 248);
  v39 = *(_OWORD *)(a1 + 264);
  if (!v40)
    v40 = 1;
  v9 = v41;
  for (i = v42; v9 != i; v9 += 224)
  {
    v11 = *(_OWORD *)&v43[16];
    *(_OWORD *)(v9 + 88) = *(_OWORD *)v43;
    *(_OWORD *)(v9 + 104) = v11;
    v12 = v45;
    *(_OWORD *)(v9 + 120) = v44;
    *(_OWORD *)(v9 + 136) = v12;
    v13 = v47;
    *(_OWORD *)(v9 + 152) = v46;
    *(_OWORD *)(v9 + 168) = v13;
    v14 = v49;
    *(_OWORD *)(v9 + 184) = v48;
    v15 = *(unsigned __int8 *)(v9 + 216);
    *(_OWORD *)(v9 + 200) = v14;
    if (!v15)
      *(_BYTE *)(v9 + 216) = 1;
  }
  v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1216) + 56) + 64) + 72);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)(v16 + 88) + 16))(v16 + 88, __p);
  sub_2232555B8((uint64_t)__p);
  return 1;
}

void sub_223285808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a18 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

_BYTE *CV3DReconSessionProcessFrameBundleSync(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v6;
  char *v7;
  CFTypeRef v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  CFTypeRef v12;
  unint64_t *p_shared_owners;
  void *v15;
  char *v16;
  CFTypeRef cf;
  std::__shared_weak_count *v18;
  std::error_condition v19;
  void *__p[24];
  char v21;
  __int128 v22;
  char v23;
  __int128 v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    if (a2)
    {
      sub_2232DA1EC(a1 + 8, a2 + 8, (uint64_t)__p);
      if (v27)
      {
        v4 = operator new(0x208uLL, MEMORY[0x24BEDB6B8]);
        v5 = v4;
        if (v4)
        {
          v4[8] = 0;
          v6 = (uint64_t)(v4 + 8);
          v5[448] = 0;
          if (v21)
          {
            sub_22329ACE4(v6, (uint64_t)__p);
            v5[448] = 1;
          }
          v5[456] = 0;
          v5[472] = 0;
          if (v23)
          {
            *(_OWORD *)(v5 + 456) = v22;
            v22 = 0uLL;
            v5[472] = 1;
          }
          v5[480] = 0;
          v5[496] = 0;
          if (v25)
          {
            *((_OWORD *)v5 + 30) = v24;
            v24 = 0uLL;
            v5[496] = 1;
          }
          *((_QWORD *)v5 + 63) = v26;
          *((_DWORD *)v5 + 128) = 1;
          *(_QWORD *)v5 = &off_24EC2B280;
        }
      }
      else if (a3)
      {
        if (*a3)
          CFRelease(*a3);
        *a3 = 0;
        v15 = __p[0];
        if (__p[0])
          CFRetain(__p[0]);
        v5 = 0;
        *a3 = v15;
      }
      else
      {
        v5 = 0;
      }
      sub_2232953B0((uint64_t)__p);
      return v5;
    }
    __p[0] = operator new(0x20uLL);
    *(_OWORD *)&__p[1] = xmmword_2245B8D70;
    strcpy((char *)__p[0], "Input frame bundle is NULL");
    v7 = (char *)operator new(0x70uLL);
    v16 = v7;
    strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v19.__val_ = 22;
      v19.__cat_ = std::generic_category();
      sub_2245321DC(&v19, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v12 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v12;
      v9 = v18;
      if (!v18)
        goto LABEL_31;
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
LABEL_29:
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
LABEL_31:
      v7 = v16;
    }
  }
  else
  {
    HIBYTE(__p[2]) = 15;
    strcpy((char *)__p, "Session is NULL");
    v7 = (char *)operator new(0x70uLL);
    v16 = v7;
    strcpy(v7, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v19.__val_ = 22;
      v19.__cat_ = std::generic_category();
      sub_2245321DC(&v19, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v8 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v8;
      v9 = v18;
      if (!v18)
        goto LABEL_31;
      v10 = (unint64_t *)&v18->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      goto LABEL_29;
    }
  }
  operator delete(v7);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_223285BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_2232953B0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223285C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;

  operator delete(v21);
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

_OWORD *CV3DReconSessionQueryRoomScanLiteSync(uint64_t a1, CFTypeRef *a2)
{
  _OWORD *result;
  char *v4;
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  const void *v11;
  char *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  CFTypeRef cf;
  std::__shared_weak_count *v20;
  std::error_condition v21;
  _BYTE v22[24];
  char v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    v22[23] = 15;
    strcpy(v22, "Session is NULL");
    v5 = (char *)operator new(0x70uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (a2)
    {
      *(_QWORD *)&v21.__val_ = 22;
      v21.__cat_ = std::generic_category();
      sub_2245321DC(&v21, (uint64_t)v22, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v6;
      v7 = v20;
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if ((v22[23] & 0x80000000) == 0)
      return 0;
    v10 = *(char **)v22;
    goto LABEL_40;
  }
  sub_2232DA444(a1 + 8, (__n128 *)v22);
  if (v24)
  {
    result = operator new(0x28uLL, MEMORY[0x24BEDB6B8]);
    v4 = *(char **)v22;
    if (result)
    {
      result[1] = *(_OWORD *)&v22[8];
      *((_BYTE *)result + 32) = v23;
      *((_DWORD *)result + 9) = 1;
      *(_QWORD *)result = &off_24EC29AC8;
      *((_QWORD *)result + 1) = v4;
      return result;
    }
  }
  else
  {
    if (!a2)
      goto LABEL_33;
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v11 = *(const void **)v22;
    if (*(_QWORD *)v22)
      CFRetain(*(CFTypeRef *)v22);
    *a2 = v11;
    if (!v24)
    {
LABEL_33:
      v16 = *(std::__shared_weak_count **)&v22[8];
      if (*(_QWORD *)&v22[8])
      {
        v17 = (unint64_t *)(*(_QWORD *)&v22[8] + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      return 0;
    }
    v4 = *(char **)v22;
  }
  if (v4)
  {
    v12 = *(char **)&v22[8];
    v10 = v4;
    if (*(char **)&v22[8] != v4)
    {
      do
      {
        v13 = (std::__shared_weak_count *)*((_QWORD *)v12 - 12);
        if (v13)
        {
          v14 = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        v12 -= 120;
      }
      while (v12 != v4);
      v10 = *(char **)v22;
    }
    *(_QWORD *)&v22[8] = v4;
LABEL_40:
    operator delete(v10);
  }
  return 0;
}

void sub_223285F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_223285F60((char **)va);
  _Unwind_Resume(a1);
}

void sub_223285F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  operator delete(v22);
  if (a22 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

char **sub_223285F60(char **result)
{
  char **v1;
  char *v2;
  char *v3;
  char *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = result;
  if (*((_BYTE *)result + 32))
  {
    v2 = *result;
    if (*result)
    {
      v3 = result[1];
      v4 = *result;
      if (v3 != v2)
      {
        do
        {
          v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 12);
          if (v5)
          {
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v7 = __ldaxr(p_shared_owners);
            while (__stlxr(v7 - 1, p_shared_owners));
            if (!v7)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
          }
          v3 -= 120;
        }
        while (v3 != v2);
        v4 = *v1;
      }
      v1[1] = v2;
      operator delete(v4);
      return v1;
    }
  }
  else
  {
    v8 = (std::__shared_weak_count *)result[1];
    if (v8)
    {
      v9 = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
        return v1;
      }
    }
  }
  return result;
}

_OWORD *CV3DReconSessionQuerySyntheticRoomScanLiteSync(uint64_t a1, CFTypeRef *a2)
{
  _OWORD *result;
  char *v4;
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  const void *v11;
  char *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  CFTypeRef cf;
  std::__shared_weak_count *v20;
  std::error_condition v21;
  _BYTE v22[24];
  char v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    v22[23] = 15;
    strcpy(v22, "Session is NULL");
    v5 = (char *)operator new(0x70uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (a2)
    {
      *(_QWORD *)&v21.__val_ = 22;
      v21.__cat_ = std::generic_category();
      sub_2245321DC(&v21, (uint64_t)v22, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v6;
      v7 = v20;
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if ((v22[23] & 0x80000000) == 0)
      return 0;
    v10 = *(char **)v22;
    goto LABEL_40;
  }
  sub_2232DA81C(a1 + 8, (__n128 *)v22);
  if (v24)
  {
    result = operator new(0x28uLL, MEMORY[0x24BEDB6B8]);
    v4 = *(char **)v22;
    if (result)
    {
      result[1] = *(_OWORD *)&v22[8];
      *((_BYTE *)result + 32) = v23;
      *((_DWORD *)result + 9) = 1;
      *(_QWORD *)result = &off_24EC29AC8;
      *((_QWORD *)result + 1) = v4;
      return result;
    }
  }
  else
  {
    if (!a2)
      goto LABEL_33;
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v11 = *(const void **)v22;
    if (*(_QWORD *)v22)
      CFRetain(*(CFTypeRef *)v22);
    *a2 = v11;
    if (!v24)
    {
LABEL_33:
      v16 = *(std::__shared_weak_count **)&v22[8];
      if (*(_QWORD *)&v22[8])
      {
        v17 = (unint64_t *)(*(_QWORD *)&v22[8] + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      return 0;
    }
    v4 = *(char **)v22;
  }
  if (v4)
  {
    v12 = *(char **)&v22[8];
    v10 = v4;
    if (*(char **)&v22[8] != v4)
    {
      do
      {
        v13 = (std::__shared_weak_count *)*((_QWORD *)v12 - 12);
        if (v13)
        {
          v14 = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        v12 -= 120;
      }
      while (v12 != v4);
      v10 = *(char **)v22;
    }
    *(_QWORD *)&v22[8] = v4;
LABEL_40:
    operator delete(v10);
  }
  return 0;
}

void sub_223286304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_223285F60((char **)va);
  _Unwind_Resume(a1);
}

void sub_223286318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  operator delete(v22);
  if (a22 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t CV3DReconSessionOnReplayStart(uint64_t a1, int a2, int a3, CFTypeRef *a4)
{
  uint64_t result;
  uint64_t v8;
  char *v9;
  CFTypeRef v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p[2];
  char v15;
  CFTypeRef cf;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  if (a1)
  {
    if (!a2 || !*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1216) + 56) + 40))
      return 1;
    result = sub_2232DFD3C(a1, a3, a4);
    if ((_DWORD)result && a3)
    {
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 1216) + 56);
      if (*(_QWORD *)(v8 + 16) && *(_BYTE *)(v8 + 1280))
        return sub_2232E0024(a1, a4);
      return 1;
    }
  }
  else
  {
    v15 = 15;
    strcpy((char *)__p, "Session is NULL");
    v9 = (char *)operator new(0x70uLL);
    strcpy(v9, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (a4)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_2245321DC(&v18, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v10 = cf;
      if (cf)
        CFRetain(cf);
      *a4 = v10;
      v11 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
    operator delete(v9);
    if (v15 < 0)
      operator delete(__p[0]);
    return 0;
  }
  return result;
}

void sub_223286540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionOnReplayFinish(uint64_t a1, int a2, CFTypeRef *a3)
{
  uint64_t v4;
  BOOL v5;
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p[2];
  char v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a1)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 1216) + 56);
    if (*(_QWORD *)(v4 + 40) && *(_QWORD *)(v4 + 16) && (*(_BYTE *)(v4 + 1280) ? (v5 = a2 == 0) : (v5 = 1), !v5))
      return sub_2232E0024(a1, a3);
    else
      return 1;
  }
  else
  {
    v13 = 15;
    strcpy((char *)__p, "Session is NULL");
    v6 = (char *)operator new(0x70uLL);
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v16.__val_ = 22;
      v16.__cat_ = std::generic_category();
      sub_2245321DC(&v16, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v7;
      v8 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    operator delete(v6);
    if (v13 < 0)
      operator delete(__p[0]);
    return 0;
  }
}

void sub_223286734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconSessionProcessPlaneList(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  char *v13;
  CFTypeRef v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  char *v18;
  CFTypeRef v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _BYTE __p[24];
  CFTypeRef cf;
  std::__shared_weak_count *v25;
  std::error_condition v26;

  if (!a1)
  {
    __p[23] = 15;
    strcpy(__p, "Session is NULL");
    v13 = (char *)operator new(0x70uLL);
    strcpy(v13, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v26.__val_ = 22;
      v26.__cat_ = std::generic_category();
      sub_2245321DC(&v26, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v14 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v14;
      v15 = v25;
      if (v25)
      {
        p_shared_owners = (unint64_t *)&v25->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
    operator delete(v13);
    if ((__p[23] & 0x80000000) == 0)
      return 0;
    goto LABEL_37;
  }
  if (!a2)
  {
    *(_QWORD *)__p = operator new(0x20uLL);
    *(_OWORD *)&__p[8] = xmmword_2245B9420;
    strcpy(*(char **)__p, "Input plane list is NULL");
    v18 = (char *)operator new(0x70uLL);
    strcpy(v18, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v26.__val_ = 22;
      v26.__cat_ = std::generic_category();
      sub_2245321DC(&v26, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v19 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v19;
      v20 = v25;
      if (v25)
      {
        v21 = (unint64_t *)&v25->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
    }
    operator delete(v18);
    if ((__p[23] & 0x80000000) == 0)
      return 0;
LABEL_37:
    operator delete(*(void **)__p);
    return 0;
  }
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1216) + 56) + 16);
  if (!v4)
    return 1;
  v5 = *(_QWORD *)(v4 + 72) + 1936;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)__p = *(_QWORD *)(a2 + 8);
  *(_QWORD *)&__p[8] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v5 + 16))(v5, __p);
  v9 = *(std::__shared_weak_count **)&__p[8];
  if (!*(_QWORD *)&__p[8])
    return 1;
  v10 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return 1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return 1;
}

void sub_223286AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconSessionSaveMeshesToFolder(uint64_t a1, char *__s, CFTypeRef *a3)
{
  size_t v6;
  void *v7;
  void *v8;
  char *v9;
  CFTypeRef v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  CFTypeRef v14;
  unint64_t *p_shared_owners;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v20;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v23;
  std::error_condition v24;

  if (a1)
  {
    if (__s)
    {
      v6 = strlen(__s);
      if (v6 >= 0x7FFFFFFFFFFFFFF8)
        sub_22316DBC0();
      v7 = (void *)v6;
      if (v6 >= 0x17)
      {
        v17 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v6 | 7) != 0x17)
          v17 = v6 | 7;
        v18 = v17 + 1;
        v8 = operator new(v17 + 1);
        __p[1] = v7;
        __p[2] = (void *)(v18 | 0x8000000000000000);
        __p[0] = v8;
      }
      else
      {
        HIBYTE(__p[2]) = v6;
        v8 = __p;
        if (!v6)
        {
LABEL_34:
          *((_BYTE *)v7 + (_QWORD)v8) = 0;
          v16 = sub_2232DF890(a1, (uint64_t)__p, a3);
          if (SHIBYTE(__p[2]) < 0)
            operator delete(__p[0]);
          return v16;
        }
      }
      memcpy(v8, __s, (size_t)v7);
      goto LABEL_34;
    }
    strcpy((char *)__p, "Input filepath is NULL");
    HIBYTE(__p[2]) = 22;
    v9 = (char *)operator new(0x70uLL);
    v20 = v9;
    strcpy(v9, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v24.__val_ = 22;
      v24.__cat_ = std::generic_category();
      sub_2245321DC(&v24, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v14 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v14;
      v11 = v23;
      if (!v23)
        goto LABEL_26;
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
LABEL_24:
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
LABEL_26:
      v9 = v20;
    }
  }
  else
  {
    HIBYTE(__p[2]) = 15;
    strcpy((char *)__p, "Session is NULL");
    v9 = (char *)operator new(0x70uLL);
    v20 = v9;
    strcpy(v9, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (a3)
    {
      *(_QWORD *)&v24.__val_ = 22;
      v24.__cat_ = std::generic_category();
      sub_2245321DC(&v24, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v10 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v10;
      v11 = v23;
      if (!v23)
        goto LABEL_26;
      v12 = (unint64_t *)&v23->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      goto LABEL_24;
    }
  }
  operator delete(v9);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_223286E04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionSaveSnapshot(uint64_t a1, CFTypeRef *a2)
{
  _BOOL8 v3;
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::string __p;
  char v11;
  char *v12;
  __int128 v13;
  CFTypeRef cf;
  std::__shared_weak_count *v15;
  std::error_condition v16;

  if (a1)
  {
    sub_2232DBE4C(a1, a2, &__p);
    v3 = v11 != 0;
    if (v11)
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    return v3;
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 15;
  strcpy((char *)&__p, "Session is NULL");
  v5 = (char *)operator new(0x70uLL);
  v12 = v5;
  v13 = xmmword_2245C45E0;
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
  if (a2)
  {
    *(_QWORD *)&v16.__val_ = 22;
    v16.__cat_ = std::generic_category();
    sub_2245321DC(&v16, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v6;
    v7 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    if ((SHIBYTE(v13) & 0x80000000) == 0)
      goto LABEL_19;
    v5 = v12;
  }
  operator delete(v5);
LABEL_19:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_223286FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionSaveDiagnosticData(uint64_t a1, int a2, char *a3, CFTypeRef *a4)
{
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  CFTypeRef v11;
  unint64_t *p_shared_owners;
  char *v13;
  char __p[23];
  char v15;
  CFTypeRef cf;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  if (a1)
  {
    if (a3)
      return sub_2232DC900(a1, a2, a3, a4);
    strcpy(__p, "Input filepath is NULL");
    v15 = 22;
    v6 = (char *)operator new(0x70uLL);
    v13 = v6;
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (a4)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_2245321DC(&v18, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v11 = cf;
      if (cf)
        CFRetain(cf);
      *a4 = v11;
      v8 = v17;
      if (!v17)
        goto LABEL_25;
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
LABEL_21:
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
LABEL_25:
      v6 = v13;
    }
  }
  else
  {
    v15 = 15;
    strcpy(__p, "Session is NULL");
    v6 = (char *)operator new(0x70uLL);
    v13 = v6;
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (a4)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_2245321DC(&v18, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a4 = v7;
      v8 = v17;
      if (!v17)
        goto LABEL_25;
      v9 = (unint64_t *)&v17->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      goto LABEL_21;
    }
  }
  operator delete(v6);
  if (v15 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_22328727C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionHasMeshingCapability(uint64_t a1, CFTypeRef *a2)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  void *__p[2];
  char v11;
  CFTypeRef cf;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  if (a1)
    return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1216) + 56) + 16) != 0;
  v11 = 15;
  strcpy((char *)__p, "Session is NULL");
  v4 = (char *)operator new(0x70uLL);
  v9 = v4;
  strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
  if (a2)
  {
    *(_QWORD *)&v14.__val_ = 22;
    v14.__cat_ = std::generic_category();
    sub_2245321DC(&v14, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v5;
    v6 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v4 = v9;
  }
  operator delete(v4);
  if (v11 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_22328744C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionSetMinMeshingPeriod(uint64_t a1, CFTypeRef *a2, double a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  void *__p[2];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
    return sub_2232DCA8C(a1, a2, a3);
  v12 = 15;
  strcpy((char *)__p, "Session is NULL");
  v5 = (char *)operator new(0x70uLL);
  v10 = v5;
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
  if (a2)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v6;
    v7 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v5 = v10;
  }
  operator delete(v5);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_223287608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CV3DReconSessionSetMaxVoxelWeight(uint64_t a1, CFTypeRef *a2, float a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  void *__p[2];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
    return sub_2232DCCFC(a1, a2, a3);
  v12 = 15;
  strcpy((char *)__p, "Session is NULL");
  v5 = (char *)operator new(0x70uLL);
  v10 = v5;
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
  if (a2)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v6;
    v7 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v5 = v10;
  }
  operator delete(v5);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_2232877C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionEnableMeshPlaneHarmony(uint64_t a1, char a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  void *__p[2];
  char v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a1)
    return sub_2232DCFAC(a1, a2, a3);
  v12 = 15;
  strcpy((char *)__p, "Session is NULL");
  v5 = (char *)operator new(0x70uLL);
  v10 = v5;
  strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
  if (a3)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_2245321DC(&v15, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v6;
    v7 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v5 = v10;
  }
  operator delete(v5);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_223287980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionAddOnMeshListUpdateCallback(_QWORD *a1, const void *a2, CFTypeRef *a3)
{
  std::__shared_weak_count *v6;
  _BOOL8 result;
  _BOOL8 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  char *v12;
  CFTypeRef v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  CFTypeRef v17;
  unint64_t *v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  char *v21;
  __int128 v22;
  _BYTE __p[24];
  CFTypeRef cf;
  std::__shared_weak_count *v25;
  std::error_condition v26;

  if (a1)
  {
    if (a2)
    {
      v6 = (std::__shared_weak_count *)operator new(0x20uLL);
      v6->__shared_owners_ = 0;
      v6->__shared_weak_owners_ = 0;
      v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC27700;
      v6[1].__vftable = (std::__shared_weak_count_vtbl *)_Block_copy(a2);
      v19 = &v6[1].__vftable;
      v20 = v6;
      result = sub_2232DD1D8(a1, (uint64_t)&v19, a3);
      v8 = result;
      v9 = v20;
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
          return v8;
        }
      }
      return result;
    }
    *(_QWORD *)__p = operator new(0x28uLL);
    *(_OWORD *)&__p[8] = xmmword_2245B9440;
    strcpy(*(char **)__p, "Input mesh list update callback is NULL");
    v12 = (char *)operator new(0x70uLL);
    v21 = v12;
    v22 = xmmword_2245C45E0;
    strcpy(v12, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (!a3)
      goto LABEL_28;
    *(_QWORD *)&v26.__val_ = 22;
    v26.__cat_ = std::generic_category();
    sub_2245321DC(&v26, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v17 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v17;
    v14 = v25;
    if (!v25)
      goto LABEL_26;
    v18 = (unint64_t *)&v25->__shared_owners_;
    do
      v16 = __ldaxr(v18);
    while (__stlxr(v16 - 1, v18));
  }
  else
  {
    __p[23] = 15;
    strcpy(__p, "Session is NULL");
    v12 = (char *)operator new(0x70uLL);
    v21 = v12;
    v22 = xmmword_2245C45E0;
    strcpy(v12, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (!a3)
    {
LABEL_28:
      operator delete(v12);
      goto LABEL_29;
    }
    *(_QWORD *)&v26.__val_ = 22;
    v26.__cat_ = std::generic_category();
    sub_2245321DC(&v26, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v13 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v13;
    v14 = v25;
    if (!v25)
      goto LABEL_26;
    v15 = (unint64_t *)&v25->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
  }
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if ((SHIBYTE(v22) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_27;
  }
LABEL_26:
  if (SHIBYTE(v22) < 0)
  {
LABEL_27:
    v12 = v21;
    goto LABEL_28;
  }
LABEL_29:
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_223287CB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionAddOnSpatialSubdivisionUpdateCallback(_QWORD *a1, const void *a2, CFTypeRef *a3)
{
  std::__shared_weak_count *v6;
  _BOOL8 result;
  _BOOL8 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  char *v12;
  CFTypeRef v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  CFTypeRef v17;
  unint64_t *v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  char *v21;
  __int128 v22;
  _BYTE __p[24];
  CFTypeRef cf;
  std::__shared_weak_count *v25;
  std::error_condition v26;

  if (a1)
  {
    if (a2)
    {
      v6 = (std::__shared_weak_count *)operator new(0x20uLL);
      v6->__shared_owners_ = 0;
      v6->__shared_weak_owners_ = 0;
      v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC27750;
      v6[1].__vftable = (std::__shared_weak_count_vtbl *)_Block_copy(a2);
      v19 = &v6[1].__vftable;
      v20 = v6;
      result = sub_2232DDE2C(a1, (uint64_t)&v19, a3);
      v8 = result;
      v9 = v20;
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
          return v8;
        }
      }
      return result;
    }
    *(_QWORD *)__p = operator new(0x30uLL);
    *(_OWORD *)&__p[8] = xmmword_2245C76D0;
    strcpy(*(char **)__p, "Spatial subdivision update callback is NULL");
    v12 = (char *)operator new(0x70uLL);
    v21 = v12;
    v22 = xmmword_2245C45E0;
    strcpy(v12, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (!a3)
      goto LABEL_28;
    *(_QWORD *)&v26.__val_ = 22;
    v26.__cat_ = std::generic_category();
    sub_2245321DC(&v26, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v17 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v17;
    v14 = v25;
    if (!v25)
      goto LABEL_26;
    v18 = (unint64_t *)&v25->__shared_owners_;
    do
      v16 = __ldaxr(v18);
    while (__stlxr(v16 - 1, v18));
  }
  else
  {
    __p[23] = 15;
    strcpy(__p, "Session is NULL");
    v12 = (char *)operator new(0x70uLL);
    v21 = v12;
    v22 = xmmword_2245C45E0;
    strcpy(v12, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (!a3)
    {
LABEL_28:
      operator delete(v12);
      goto LABEL_29;
    }
    *(_QWORD *)&v26.__val_ = 22;
    v26.__cat_ = std::generic_category();
    sub_2245321DC(&v26, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v13 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v13;
    v14 = v25;
    if (!v25)
      goto LABEL_26;
    v15 = (unint64_t *)&v25->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
  }
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if ((SHIBYTE(v22) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_27;
  }
LABEL_26:
  if (SHIBYTE(v22) < 0)
  {
LABEL_27:
    v12 = v21;
    goto LABEL_28;
  }
LABEL_29:
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_223288018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL CV3DReconSessionAddOnOccupancyByProximityUpdateCallback(_QWORD *a1, const void *a2, CFTypeRef *a3)
{
  std::__shared_weak_count *v6;
  _BOOL8 result;
  _BOOL8 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  char *v12;
  CFTypeRef v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  CFTypeRef v17;
  unint64_t *v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  char *v21;
  __int128 v22;
  _BYTE __p[24];
  CFTypeRef cf;
  std::__shared_weak_count *v25;
  std::error_condition v26;

  if (a1)
  {
    if (a2)
    {
      v6 = (std::__shared_weak_count *)operator new(0x20uLL);
      v6->__shared_owners_ = 0;
      v6->__shared_weak_owners_ = 0;
      v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC277A0;
      v6[1].__vftable = (std::__shared_weak_count_vtbl *)_Block_copy(a2);
      v19 = &v6[1].__vftable;
      v20 = v6;
      result = sub_2232DE248(a1, (uint64_t)&v19, a3);
      v8 = result;
      v9 = v20;
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
          return v8;
        }
      }
      return result;
    }
    *(_QWORD *)__p = operator new(0x30uLL);
    *(_OWORD *)&__p[8] = xmmword_2245C43D0;
    strcpy(*(char **)__p, "Occupancy by proximity update callback is NULL");
    v12 = (char *)operator new(0x70uLL);
    v21 = v12;
    v22 = xmmword_2245C45E0;
    strcpy(v12, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (!a3)
      goto LABEL_28;
    *(_QWORD *)&v26.__val_ = 22;
    v26.__cat_ = std::generic_category();
    sub_2245321DC(&v26, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v17 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v17;
    v14 = v25;
    if (!v25)
      goto LABEL_26;
    v18 = (unint64_t *)&v25->__shared_owners_;
    do
      v16 = __ldaxr(v18);
    while (__stlxr(v16 - 1, v18));
  }
  else
  {
    __p[23] = 15;
    strcpy(__p, "Session is NULL");
    v12 = (char *)operator new(0x70uLL);
    v21 = v12;
    v22 = xmmword_2245C45E0;
    strcpy(v12, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Recon3D_framework/src/CV3DReconSession.cpp");
    if (!a3)
    {
LABEL_28:
      operator delete(v12);
      goto LABEL_29;
    }
    *(_QWORD *)&v26.__val_ = 22;
    v26.__cat_ = std::generic_category();
    sub_2245321DC(&v26, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v13 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v13;
    v14 = v25;
    if (!v25)
      goto LABEL_26;
    v15 = (unint64_t *)&v25->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
  }
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if ((SHIBYTE(v22) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_27;
  }
LABEL_26:
  if (SHIBYTE(v22) < 0)
  {
LABEL_27:
    v12 = v21;
    goto LABEL_28;
  }
LABEL_29:
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  return 0;
}

