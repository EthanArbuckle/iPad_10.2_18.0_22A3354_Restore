void sub_224101ED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_224101F18(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  int v7;

  v6 = 0;
  sub_224553CF0(a1[6], &v6);
  if (v6)
  {
    if (!*(_BYTE *)(a2 + 40))
    {
      *(_QWORD *)a2 = 0;
      *(_BYTE *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 16) = 0;
      *(_BYTE *)(a2 + 24) = 0;
      *(_BYTE *)(a2 + 32) = 0;
      *(_BYTE *)(a2 + 40) = 1;
    }
    v7 = 1;
    sub_224554038(a1[6], &v7);
    sub_2231B1308(a1 + 2);
    sub_2240DFFEC((uint64_t)a1, a2);
    v4 = a1[4];
    v5 = *(_QWORD *)(v4 - 16) - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2) + *(_QWORD *)(v4 - 8);
    if (v5)
      (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v5);
    a1[4] -= 16;
  }
  else if (*(_BYTE *)(a2 + 40))
  {
    *(_BYTE *)(a2 + 40) = 0;
  }
}

void sub_224102018(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  char v26;
  uint64_t v27[27];
  _BYTE v28[8];
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_223B89234(*a1 + 16, (uint64_t)v27);
    sub_223B87C9C((uint64_t)v28, v27);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_223BB47F0(v4, (uint64_t)v28);
        if (!v43)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v6))(&v26, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v8 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v8;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v34;
    v10 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v11 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v11;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v12 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v12;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v15 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v41;
LABEL_45:
    *((_QWORD *)&v41 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_22316DD70();
  sub_223B8944C(*a1 + 16, (uint64_t)v27);
  sub_223B87C9C((uint64_t)v28, v27);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v7))(&v26, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v17 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v17;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v34;
    v19 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v20 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v20;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v21 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v21;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_223BB47F0(v4, (uint64_t)v28);
  if (v43)
  {
LABEL_38:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v23 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v37 && SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  if (v32 && SHIBYTE(v31) < 0)
    operator delete((void *)v30);
  sub_2231AD66C((uint64_t)v27);
  if (*(_DWORD *)(v3 + 192))
    sub_22316DD70();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_223BBD758(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  sub_2241024C8((uint64_t)v27, a2, v3 + 200);
}

void sub_224102480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2241024C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  char *v6;
  int v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *exception;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  sub_224544138(a2);
  v5 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v5)
    *(_BYTE *)(a2 + 104) = 1;
  v6 = (char *)sub_2245443F0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  *(_QWORD *)&v12 = 0;
  sub_22451C444(v6, &v12);
  if (DWORD1(v12))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24EC7AC38;
    __cxa_throw(exception, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
  }
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "initial_sync_command";
  *(_QWORD *)(a2 + 96) = 20;
  if (v7)
  {
    if (*(_BYTE *)sub_2245443F0((uint64_t *)a2))
    {
LABEL_6:
      *(_QWORD *)&v12 = 0;
      BYTE8(v12) = 0;
      LOBYTE(v13) = 0;
      BYTE8(v13) = 0;
      LOBYTE(v14) = 0;
      v15 = *(_QWORD *)(a2 + 8);
      sub_22410262C(&v15, a2, (uint64_t)&v12);
      v8 = v13;
      *(_OWORD *)(a3 + 8) = v12;
      *(_OWORD *)(a3 + 24) = v8;
      *(_QWORD *)(a3 + 40) = v14;
      *(_BYTE *)(a3 + 48) = 1;
      goto LABEL_10;
    }
  }
  else
  {
    *(_BYTE *)(a2 + 104) = 1;
    if (*(_BYTE *)sub_2245443F0((uint64_t *)a2))
      goto LABEL_6;
  }
  ++*(_QWORD *)(a2 + 112);
  if (*(_BYTE *)(a3 + 48))
    *(_BYTE *)(a3 + 48) = 0;
LABEL_10:
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v9 - 8);
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(a2 + 48) = v9 - 8;
  *(_QWORD *)(a2 + 72) = v10 - 8;
}

void sub_22410262C(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  char *v7;
  int v8;
  char *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *exception;
  __int128 *v14;
  unint64_t v15;

  sub_224544138(a2);
  v6 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v6)
    *(_BYTE *)(a2 + 104) = 1;
  v7 = (char *)sub_2245443F0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v15 = 0;
  sub_22451C444(v7, &v15);
  if (HIDWORD(v15))
    goto LABEL_10;
  if (*a1 != 2)
    goto LABEL_9;
  v8 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "min_version";
  *(_QWORD *)(a2 + 96) = 11;
  if (!v8)
    *(_BYTE *)(a2 + 104) = 1;
  v9 = (char *)sub_2245443F0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v15 = 0;
  sub_22451C444(v9, &v15);
  v10 = v15;
  if (HIDWORD(v15))
  {
LABEL_10:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24EC7AC38;
    __cxa_throw(exception, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
  }
  if (v15 >= 2)
  {
    v14 = sub_2240E2A6C();
    sub_22455C3A8((std::string *)v14, v10, 1u);
  }
LABEL_9:
  sub_2240E09EC(a2, a3);
  v11 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v11 - 8);
  v12 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(a2 + 48) = v11 - 8;
  *(_QWORD *)(a2 + 72) = v12 - 8;
}

void sub_224102790(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  char v27;
  char v28;
  void *__p[2];
  char v30;
  _BYTE v31[8];
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  unsigned __int8 v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_223B89234(*a1 + 16, (uint64_t)__p);
    sub_223B87C9C((uint64_t)v31, (uint64_t *)__p);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_223BB47F0(v4, (uint64_t)v31);
        if (!v46)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v6))(&v28, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v32;
    *(_BYTE *)(v3 + 64) = 0;
    if (v35)
    {
      v8 = v34;
      *(_OWORD *)(v3 + 40) = v33;
      *(_QWORD *)(v3 + 56) = v8;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v37;
    v10 = v36;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v40)
    {
      v11 = v39;
      *(_OWORD *)(v3 + 96) = v38;
      *(_QWORD *)(v3 + 112) = v11;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v43)
    {
      v12 = v42;
      *(_OWORD *)(v3 + 128) = v41;
      *(_QWORD *)(v3 + 144) = v12;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v46;
    if (v46)
    {
      *(_OWORD *)(v3 + 160) = v44;
      *(_QWORD *)(v3 + 176) = v45;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v44;
    if (!(_QWORD)v44)
      goto LABEL_46;
    v15 = *((_QWORD *)&v44 + 1);
    v16 = (void *)v44;
    if (*((_QWORD *)&v44 + 1) == (_QWORD)v44)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v44;
LABEL_45:
    *((_QWORD *)&v44 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_22316DD70();
  sub_223B8944C(*a1 + 16, (uint64_t)__p);
  sub_223B87C9C((uint64_t)v31, (uint64_t *)__p);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v7))(&v28, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v32;
    *(_BYTE *)(v3 + 64) = 0;
    if (v35)
    {
      v17 = v34;
      *(_OWORD *)(v3 + 40) = v33;
      *(_QWORD *)(v3 + 56) = v17;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v37;
    v19 = v36;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v40)
    {
      v20 = v39;
      *(_OWORD *)(v3 + 96) = v38;
      *(_QWORD *)(v3 + 112) = v20;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v43)
    {
      v21 = v42;
      *(_OWORD *)(v3 + 128) = v41;
      *(_QWORD *)(v3 + 144) = v21;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v46;
    if (v46)
    {
      *(_OWORD *)(v3 + 160) = v44;
      *(_QWORD *)(v3 + 176) = v45;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_223BB47F0(v4, (uint64_t)v31);
  if (v46)
  {
LABEL_38:
    v14 = v44;
    if (!(_QWORD)v44)
      goto LABEL_46;
    v23 = *((_QWORD *)&v44 + 1);
    v16 = (void *)v44;
    if (*((_QWORD *)&v44 + 1) == (_QWORD)v44)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v43 && SHIBYTE(v42) < 0)
    operator delete((void *)v41);
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v35 && SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  sub_2231AD66C((uint64_t)__p);
  if (*(_DWORD *)(v3 + 192))
    sub_22316DD70();
LABEL_56:
  LODWORD(__p[0]) = 6;
  sub_2245508F0(a2, __p);
  v24 = __p[0];
  if (LODWORD(__p[0]) >= 6)
    v25 = 6;
  else
    v25 = __p[0];
  if (v25 < 3)
    sub_223BC4F50((uint64_t)__p, a2, v4, v25);
  else
    sub_223BC5140(a2, v4, v25);
  if (v24 >= 3 && !*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        break;
      sub_2245523C0(a2, (uint64_t)__p);
      if (v30 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_76:
          v27 = 0;
          if (v30 < 0)
            goto LABEL_79;
          goto LABEL_65;
        }
      }
      else if (v30 == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_76;
      }
      v27 = 1;
      if (v30 < 0)
LABEL_79:
        operator delete(__p[0]);
LABEL_65:
      if (*(_BYTE *)(a2 + 131))
        v26 = 0;
      else
        v26 = v27;
    }
    while ((v26 & 1) != 0);
  }
  LODWORD(__p[0]) = 1;
  sub_2245508F0(a2, __p);
  sub_224102D04((uint64_t)__p, a2, v3 + 200);
}

void sub_224102CBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_224102D04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  void *__p;
  uint64_t v11;
  char v12;

  v9 = 0;
  sub_22454FFAC(a2, &v9);
  if (v9)
  {
    if (!*(_BYTE *)(a3 + 48))
    {
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 0;
      *(_BYTE *)(a3 + 24) = 0;
      *(_BYTE *)(a3 + 32) = 0;
      *(_BYTE *)(a3 + 40) = 0;
      *(_BYTE *)(a3 + 48) = 1;
    }
    LODWORD(__p) = 1;
    sub_2245508F0(a2, &__p);
    sub_2240E1554(a2, a3 + 8);
    if (!*(_BYTE *)(a2 + 131))
    {
      do
      {
        if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
          break;
        sub_2245523C0(a2, (uint64_t)&__p);
        if (v12 < 0)
        {
          if (v11 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
          {
LABEL_17:
            v6 = 0;
            if (v12 < 0)
              goto LABEL_20;
            goto LABEL_6;
          }
        }
        else if (v12 == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
        {
          goto LABEL_17;
        }
        v6 = 1;
        if (v12 < 0)
LABEL_20:
          operator delete(__p);
LABEL_6:
        if (*(_BYTE *)(a2 + 131))
          v5 = 0;
        else
          v5 = v6;
      }
      while ((v5 & 1) != 0);
    }
  }
  else if (*(_BYTE *)(a3 + 48))
  {
    *(_BYTE *)(a3 + 48) = 0;
  }
  if (!*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_2245523C0(a2, (uint64_t)&__p);
      if (v12 < 0)
      {
        if (v11 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_36:
          v8 = 0;
          if (v12 < 0)
            goto LABEL_39;
          goto LABEL_25;
        }
      }
      else if (v12 == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_36;
      }
      v8 = 1;
      if (v12 < 0)
LABEL_39:
        operator delete(__p);
LABEL_25:
      if (*(_BYTE *)(a2 + 131))
        v7 = 0;
      else
        v7 = v8;
    }
    while ((v7 & 1) != 0);
  }
}

_QWORD *sub_224102EF4(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v25;
  uint64_t v26[27];
  _BYTE v27[8];
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_223B89234(*a1 + 16, (uint64_t)v26);
    sub_223B87C9C((uint64_t)v27, v26);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_223BB47F0(v4, (uint64_t)v27);
        if (!v42)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v6))(&v25, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v28;
    *(_BYTE *)(v3 + 64) = 0;
    if (v31)
    {
      v8 = v30;
      *(_OWORD *)(v3 + 40) = v29;
      *(_QWORD *)(v3 + 56) = v8;
      v29 = 0uLL;
      v30 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v33;
    v10 = v32;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v36)
    {
      v11 = v35;
      *(_OWORD *)(v3 + 96) = v34;
      *(_QWORD *)(v3 + 112) = v11;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v39)
    {
      v12 = v38;
      *(_OWORD *)(v3 + 128) = v37;
      *(_QWORD *)(v3 + 144) = v12;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v42;
    if (v42)
    {
      *(_OWORD *)(v3 + 160) = v40;
      *(_QWORD *)(v3 + 176) = v41;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v40;
    if (!(_QWORD)v40)
      goto LABEL_46;
    v15 = *((_QWORD *)&v40 + 1);
    v16 = (void *)v40;
    if (*((_QWORD *)&v40 + 1) == (_QWORD)v40)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v40;
LABEL_45:
    *((_QWORD *)&v40 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_22316DD70();
  sub_223B8944C(*a1 + 16, (uint64_t)v26);
  sub_223B87C9C((uint64_t)v27, v26);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v7))(&v25, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v28;
    *(_BYTE *)(v3 + 64) = 0;
    if (v31)
    {
      v17 = v30;
      *(_OWORD *)(v3 + 40) = v29;
      *(_QWORD *)(v3 + 56) = v17;
      v29 = 0uLL;
      v30 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v33;
    v19 = v32;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v36)
    {
      v20 = v35;
      *(_OWORD *)(v3 + 96) = v34;
      *(_QWORD *)(v3 + 112) = v20;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v39)
    {
      v21 = v38;
      *(_OWORD *)(v3 + 128) = v37;
      *(_QWORD *)(v3 + 144) = v21;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v42;
    if (v42)
    {
      *(_OWORD *)(v3 + 160) = v40;
      *(_QWORD *)(v3 + 176) = v41;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_223BB47F0(v4, (uint64_t)v27);
  if (v42)
  {
LABEL_38:
    v14 = v40;
    if (!(_QWORD)v40)
      goto LABEL_46;
    v23 = *((_QWORD *)&v40 + 1);
    v16 = (void *)v40;
    if (*((_QWORD *)&v40 + 1) == (_QWORD)v40)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v39 && SHIBYTE(v38) < 0)
    operator delete((void *)v37);
  if (v36 && SHIBYTE(v35) < 0)
    operator delete((void *)v34);
  if (v31 && SHIBYTE(v30) < 0)
    operator delete((void *)v29);
  sub_2231AD66C((uint64_t)v26);
  if (*(_DWORD *)(v3 + 192))
    sub_22316DD70();
LABEL_56:
  sub_223BCDEF0((uint64_t)v26, a2, v4);
  return sub_224103368((uint64_t)v26, a2, v3 + 200);
}

void sub_224103320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_224103368(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  a2[6] = v3 + 4;
  sub_2244FFA6C(a2);
  result = sub_224103420(a2, a3 + 8);
  v10 = a2[12];
  v11 = a2[9];
  a2[6] = *(_QWORD *)(v10 - 8) + *(_QWORD *)(v11 - 8) + 8;
  a2[9] = v11 - 8;
  a2[12] = v10 - 8;
  return result;
}

void sub_22410340C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_224103420(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  int v3;
  std::logic_error *exception;
  char v5;

  v2 = result[6];
  if (result[7] <= v2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  v3 = *(unsigned __int8 *)(result[3] + v2);
  result[6] = v2 + 1;
  if (v3)
  {
    if (!*(_BYTE *)(a2 + 40))
    {
      *(_QWORD *)a2 = 0;
      *(_BYTE *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 16) = 0;
      *(_BYTE *)(a2 + 24) = 0;
      *(_BYTE *)(a2 + 32) = 0;
      *(_BYTE *)(a2 + 40) = 1;
    }
    return sub_2240E1E48((uint64_t)&v5, result, (_QWORD *)a2);
  }
  else if (*(_BYTE *)(a2 + 40))
  {
    *(_BYTE *)(a2 + 40) = 0;
  }
  return result;
}

void sub_2241034DC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2241034F0(int *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t result;
  unsigned int v8;
  __int128 *v9;
  unsigned int v10;
  char v11;
  uint64_t v12;

  v5 = *a1;
  if (*a1 == 2)
  {
    v10 = 1;
    (*(void (**)(_QWORD *, unsigned int *))(*a2 + 104))(a2, &v10);
    if (v10 >= 2)
    {
      v8 = v10;
      v9 = sub_22410360C();
      sub_22455C3A8((std::string *)v9, v8, 1u);
    }
    v5 = *a1;
  }
  if (v5 >= 1)
    (*(void (**)(_QWORD *))(*a2 + 16))(a2);
  v11 = 0;
  result = (*(uint64_t (**)(_QWORD *, char *))(*a2 + 80))(a2, &v11);
  if (v11)
  {
    if (!*(_BYTE *)(a3 + 48))
    {
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 0;
      *(_BYTE *)(a3 + 24) = 0;
      *(_BYTE *)(a3 + 32) = 0;
      *(_BYTE *)(a3 + 40) = 0;
      *(_BYTE *)(a3 + 48) = 1;
    }
    v12 = a2[1];
    result = sub_2240E27AC((int *)&v12, (uint64_t)a2, a3 + 8);
  }
  else if (*(_BYTE *)(a3 + 48))
  {
    *(_BYTE *)(a3 + 48) = 0;
  }
  if (v5 >= 1)
    return (*(uint64_t (**)(_QWORD *))(*a2 + 24))(a2);
  return result;
}

__int128 *sub_22410360C()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578FC10);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578FC10))
    return &xmmword_25578FBF8;
  v2 = (char *)sub_2241036E8();
  if (v2[23] < 0)
  {
    sub_223197FA4(&xmmword_25578FBF8, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_25578FC08 = *((_QWORD *)v2 + 2);
    xmmword_25578FBF8 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578FBF8, &dword_22314D000);
  __cxa_guard_release(&qword_25578FC10);
  return &xmmword_25578FBF8;
}

void sub_2241036D0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578FC10);
  _Unwind_Resume(a1);
}

void *sub_2241036E8()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_25578FC30);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578FC30))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::UpdateSyncConfigurationSample]", qword_25578FC18);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578FC18, &dword_22314D000);
    __cxa_guard_release(&qword_25578FC30);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_25578FC50);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_25578FC50))
    return &unk_25578FC38;
  sub_224573040((uint64_t)qword_25578FC18, (uint64_t)&unk_25578FC38);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_25578FC38, &dword_22314D000);
  __cxa_guard_release(&qword_25578FC50);
  return &unk_25578FC38;
}

void sub_2241037D8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578FC50);
  _Unwind_Resume(a1);
}

void sub_2241037F0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578FC30);
  _Unwind_Resume(a1);
}

uint64_t sub_224103808(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  void **v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;

  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v1 = *a1;
  v2 = a1[1];
  if (*a1 == v2)
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
  }
  else
  {
    v16 = (void **)&v19 + 1;
    do
    {
      if (*((char *)v16 - 1) < 0)
        operator delete(*(v16 - 3));
      ++v1;
      strcpy((char *)v16 - 24, "cv3d.viz");
      *((_BYTE *)v16 - 1) = 8;
      *(_DWORD *)v16 = v1;
      v16 += 4;
    }
    while (v2 != v1);
    v15 = DWORD2(v19);
    v14 = DWORD2(v21);
    v13 = DWORD2(v23);
    v12 = DWORD2(v25);
    v11 = DWORD2(v27);
    v10 = DWORD2(v29);
    v9 = DWORD2(v31);
    v8 = DWORD2(v33);
    v7 = DWORD2(v35);
    v6 = DWORD2(v37);
    v5 = DWORD2(v39);
    v4 = DWORD2(v41);
    v3 = DWORD2(v43);
  }
  xmmword_255795120 = v18;
  qword_255795130 = v19;
  v18 = 0uLL;
  dword_255795138 = v15;
  xmmword_255795140 = v20;
  qword_255795150 = v21;
  *(_QWORD *)&v19 = 0;
  v20 = 0uLL;
  *(_QWORD *)&v21 = 0;
  dword_255795158 = v14;
  qword_255795170 = v23;
  xmmword_255795160 = v22;
  v22 = 0uLL;
  dword_255795178 = v13;
  qword_255795190 = v25;
  xmmword_255795180 = v24;
  *(_QWORD *)&v23 = 0;
  v24 = 0uLL;
  *(_QWORD *)&v25 = 0;
  dword_255795198 = v12;
  qword_2557951B0 = v27;
  xmmword_2557951A0 = v26;
  v26 = 0uLL;
  dword_2557951B8 = v11;
  unk_2557951D0 = v29;
  xmmword_2557951C0 = v28;
  *(_QWORD *)&v27 = 0;
  v28 = 0uLL;
  *(_QWORD *)&v29 = 0;
  dword_2557951D8 = v10;
  qword_2557951F0 = v31;
  xmmword_2557951E0 = v30;
  v30 = 0uLL;
  dword_2557951F8 = v9;
  qword_255795210 = v33;
  xmmword_255795200 = v32;
  *(_QWORD *)&v31 = 0;
  v32 = 0uLL;
  *(_QWORD *)&v33 = 0;
  dword_255795218 = v8;
  qword_255795230 = v35;
  xmmword_255795220 = v34;
  v34 = 0uLL;
  dword_255795238 = v7;
  qword_255795250 = v37;
  xmmword_255795240 = v36;
  *(_QWORD *)&v35 = 0;
  v36 = 0uLL;
  *(_QWORD *)&v37 = 0;
  dword_255795258 = v6;
  qword_255795270 = v39;
  xmmword_255795260 = v38;
  v38 = 0uLL;
  dword_255795278 = v5;
  qword_255795290 = v41;
  xmmword_255795280 = v40;
  *(_QWORD *)&v39 = 0;
  v40 = 0uLL;
  *(_QWORD *)&v41 = 0;
  dword_255795298 = v4;
  qword_2557952B0 = v43;
  xmmword_2557952A0 = v42;
  v42 = 0uLL;
  *(_QWORD *)&v43 = 0;
  dword_2557952B8 = v3;
  return sub_224103AB8((uint64_t)&v18);
}

uint64_t sub_224103AB8(uint64_t a1)
{
  if (*(char *)(a1 + 407) < 0)
  {
    operator delete(*(void **)(a1 + 384));
    if ((*(char *)(a1 + 375) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 343) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((*(char *)(a1 + 375) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 352));
  if ((*(char *)(a1 + 343) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 311) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  operator delete(*(void **)(a1 + 320));
  if ((*(char *)(a1 + 311) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(a1 + 279) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*(void **)(a1 + 288));
  if ((*(char *)(a1 + 279) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a1 + 247) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  operator delete(*(void **)(a1 + 256));
  if ((*(char *)(a1 + 247) & 0x80000000) == 0)
  {
LABEL_7:
    if ((*(char *)(a1 + 215) & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  operator delete(*(void **)(a1 + 224));
  if ((*(char *)(a1 + 215) & 0x80000000) == 0)
  {
LABEL_8:
    if ((*(char *)(a1 + 183) & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  operator delete(*(void **)(a1 + 192));
  if ((*(char *)(a1 + 183) & 0x80000000) == 0)
  {
LABEL_9:
    if ((*(char *)(a1 + 151) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  operator delete(*(void **)(a1 + 160));
  if ((*(char *)(a1 + 151) & 0x80000000) == 0)
  {
LABEL_10:
    if ((*(char *)(a1 + 119) & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  operator delete(*(void **)(a1 + 128));
  if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
LABEL_11:
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  operator delete(*(void **)(a1 + 96));
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
LABEL_12:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_13;
LABEL_26:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
    goto LABEL_27;
  }
LABEL_25:
  operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_26;
LABEL_13:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
LABEL_27:
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_224103C18(uint64_t a1, _QWORD *a2, _QWORD *a3, __int128 *a4, _QWORD *a5)
{
  _QWORD *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v22;

  v10 = (_QWORD *)sub_22322C11C(a1, 1);
  *v10 = &off_24EC693E0;
  v11 = a2[1];
  v10[2] = *a2;
  v10[3] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = a3[1];
  *(_QWORD *)(a1 + 32) = *a3;
  *(_QWORD *)(a1 + 40) = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 16);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  if (*((_BYTE *)a4 + 24))
  {
    if (*((char *)a4 + 23) < 0)
    {
      sub_223197FA4((_BYTE *)(a1 + 48), *(void **)a4, *((_QWORD *)a4 + 1));
    }
    else
    {
      v17 = *a4;
      *(_QWORD *)(a1 + 64) = *((_QWORD *)a4 + 2);
      *(_OWORD *)(a1 + 48) = v17;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 71) = 4;
    strcpy((char *)(a1 + 48), "logs");
  }
  if (*a5)
  {
    v18 = a5[1];
    *(_QWORD *)(a1 + 72) = *a5;
    *(_QWORD *)(a1 + 80) = v18;
    if (v18)
    {
      v19 = (unint64_t *)(v18 + 8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    return a1;
  }
  else
  {
    v22 = operator new(0x20uLL);
    v22[1] = 0;
    v22[2] = 0;
    *v22 = &off_24EC69428;
    v22[3] = &off_24EC77E40;
    *(_QWORD *)(a1 + 72) = v22 + 3;
    *(_QWORD *)(a1 + 80) = v22;
    return a1;
  }
}

void sub_224103D70(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v4;

  v4 = *(std::__shared_weak_count **)(v1 + 40);
  if (!v4)
  {
    sub_223167354(v2);
    nullsub_30(v1);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v4);
  sub_223167354(v2);
  nullsub_30(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_224103DD8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)a1 = &off_24EC693E0;
  v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_6;
LABEL_14:
    operator delete(*(void **)(a1 + 48));
    v5 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v5)
      goto LABEL_8;
    goto LABEL_7;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_14;
LABEL_6:
  v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5)
LABEL_7:
    std::__shared_weak_count::__release_weak(v5);
LABEL_8:
  v6 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v6)
    return nullsub_30(a1);
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    return nullsub_30(a1);
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return nullsub_30(a1);
}

void sub_224103EB8(uint64_t a1)
{
  sub_224103DD8(a1);
  JUMPOUT(0x227684CE8);
}

void sub_224103EDC(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  __int128 *v11;
  const char *v12;
  size_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  size_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  size_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  int v30;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  char *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  _OWORD *v45;
  __int128 v46;
  std::__shared_count v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *p_shared_owners;
  unint64_t v66;
  void *v67[2];
  unint64_t v68;
  int v69;
  void *v70[2];
  unint64_t v71;
  int v72;
  void *v73[2];
  unint64_t v74;
  void *__p[2];
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  uint64_t (**v82)();
  uint64_t v83;
  std::__shared_weak_count *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  uint64_t (**v87)();
  uint64_t v88;
  std::__shared_weak_count *v89;
  char v90;
  char v91;
  char v92;
  char v93;
  char v94;
  char v95;
  char v96;
  char v97;
  char v98;
  uint64_t v99;

  v99 = *MEMORY[0x24BDAC8D0];
  v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v81 = v5;
    if (v5)
    {
      v6 = *(_QWORD *)(a1 + 32);
      v80 = v6;
      if (!v6)
      {
        v9 = v5;
LABEL_95:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v66 = __ldaxr(p_shared_owners);
        while (__stlxr(v66 - 1, p_shared_owners));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      if (*(char *)(a1 + 71) < 0)
      {
        v7 = *(_QWORD *)(a1 + 48);
        v8 = *(_QWORD *)(a1 + 56);
      }
      else
      {
        v7 = a1 + 48;
        v8 = *(unsigned __int8 *)(a1 + 71);
      }
      v10 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16), v7, v8);
      v11 = *(__int128 **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 56))(v10);
      v12 = *(const char **)a2;
      v13 = strlen(*(const char **)a2);
      if (v13 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      v14 = (void *)v13;
      if (v13 >= 0x17)
      {
        v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v13 | 7) != 0x17)
          v16 = v13 | 7;
        v17 = v16 + 1;
        v15 = operator new(v16 + 1);
        v67[1] = v14;
        v68 = v17 | 0x8000000000000000;
        v67[0] = v15;
      }
      else
      {
        HIBYTE(v68) = v13;
        v15 = v67;
        if (!v13)
        {
LABEL_16:
          *((_BYTE *)v14 + (_QWORD)v15) = 0;
          v69 = *(_DWORD *)(a2 + 24);
          v18 = v70;
          v19 = *(const char **)(a2 + 32);
          v20 = strlen(v19);
          if (v20 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          v21 = (void *)v20;
          if (v20 >= 0x17)
          {
            v22 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v20 | 7) != 0x17)
              v22 = v20 | 7;
            v23 = v22 + 1;
            v18 = operator new(v22 + 1);
            v70[1] = v21;
            v71 = v23 | 0x8000000000000000;
            v70[0] = v18;
          }
          else
          {
            HIBYTE(v71) = v20;
            if (!v20)
            {
LABEL_24:
              *((_BYTE *)v21 + (_QWORD)v18) = 0;
              v72 = *(_DWORD *)(a2 + 40) & ~(*(int *)(a2 + 40) >> 31);
              v24 = v73;
              v25 = *(const char **)(a2 + 48);
              v26 = strlen(v25);
              if (v26 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              v27 = (void *)v26;
              if (v26 >= 0x17)
              {
                v32 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v26 | 7) != 0x17)
                  v32 = v26 | 7;
                v33 = v32 + 1;
                v24 = operator new(v32 + 1);
                v73[1] = v27;
                v74 = v33 | 0x8000000000000000;
                v73[0] = v24;
              }
              else
              {
                HIBYTE(v74) = v26;
                if (!v26)
                {
                  LOBYTE(v73[0]) = 0;
                  v28 = __p;
                  v29 = *(_QWORD *)(a2 + 56);
                  v30 = *(_DWORD *)(v29 + 120);
                  if ((v30 & 0x10) == 0)
                    goto LABEL_28;
                  goto LABEL_34;
                }
              }
              memmove(v24, v25, (size_t)v27);
              *((_BYTE *)v27 + (_QWORD)v24) = 0;
              v28 = __p;
              v29 = *(_QWORD *)(a2 + 56);
              v30 = *(_DWORD *)(v29 + 120);
              if ((v30 & 0x10) == 0)
              {
LABEL_28:
                if ((v30 & 8) == 0)
                {
                  v31 = 0;
                  HIBYTE(v76) = 0;
                  goto LABEL_44;
                }
                v36 = *(const void **)(v29 + 40);
                v31 = *(_QWORD *)(v29 + 56) - (_QWORD)v36;
                if (v31 > 0x7FFFFFFFFFFFFFF7)
LABEL_51:
                  sub_22316DBC0();
LABEL_37:
                if (v31 >= 0x17)
                {
                  v37 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v31 | 7) != 0x17)
                    v37 = v31 | 7;
                  v38 = v37 + 1;
                  v28 = operator new(v37 + 1);
                  __p[1] = (void *)v31;
                  v76 = v38 | 0x8000000000000000;
                  __p[0] = v28;
                }
                else
                {
                  HIBYTE(v76) = v31;
                  if (!v31)
                  {
LABEL_44:
                    *((_BYTE *)v28 + v31) = 0;
                    v85 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72));
                    v86 = v39;
                    LOBYTE(v87) = 0;
                    v90 = 0;
                    v91 = 0;
                    v92 = 0;
                    v93 = 0;
                    v94 = 0;
                    v95 = 0;
                    v96 = 0;
                    v97 = 0;
                    v98 = 0;
                    sub_2232A1414((uint64_t)v67, (uint64_t)&v85, &v77);
                    sub_2231AD66C((uint64_t)&v85);
                    v41 = v78;
                    v40 = v79;
                    v82 = &off_24EC6A3B8;
                    v83 = v78;
                    v84 = v79;
                    v78 = 0;
                    v79 = 0;
                    v42 = (char *)operator new(0x50uLL);
                    v43 = (std::__shared_weak_count *)v42;
                    *((_QWORD *)v42 + 1) = 0;
                    v44 = (unint64_t *)(v42 + 8);
                    *((_QWORD *)v42 + 2) = 0;
                    *(_QWORD *)v42 = &off_24EC665F8;
                    v45 = v42 + 24;
                    if (*((char *)v11 + 23) < 0)
                    {
                      sub_223197FA4(v42 + 24, *(void **)v11, *((_QWORD *)v11 + 1));
                    }
                    else
                    {
                      v46 = *v11;
                      *((_QWORD *)v42 + 5) = *((_QWORD *)v11 + 2);
                      *v45 = v46;
                    }
                    LOBYTE(v43[2].__vftable) = 0;
                    LOBYTE(v43[3].__vftable) = 0;
                    if (*((_BYTE *)v11 + 48))
                    {
                      if (*((char *)v11 + 47) < 0)
                      {
                        sub_223197FA4(&v43[2], *((void **)v11 + 3), *((_QWORD *)v11 + 4));
                      }
                      else
                      {
                        v47 = *(std::__shared_count *)((char *)v11 + 24);
                        v43[2].__shared_weak_owners_ = *((_QWORD *)v11 + 5);
                        v43[2].std::__shared_count = v47;
                      }
                      LOBYTE(v43[3].__vftable) = 1;
                    }
                    v83 = 0;
                    v84 = 0;
                    v85 = (uint64_t)v45;
                    v86 = v43;
                    do
                      v48 = __ldxr(v44);
                    while (__stxr(v48 + 1, v44));
                    v87 = &off_24EC6A3B8;
                    v88 = v41;
                    v89 = v40;
                    if (v40)
                    {
                      v49 = (unint64_t *)&v40->__shared_owners_;
                      do
                        v50 = __ldxr(v49);
                      while (__stxr(v50 + 1, v49));
                      do
                        v51 = __ldaxr(v49);
                      while (__stlxr(v51 - 1, v49));
                      if (!v51)
                      {
                        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                        std::__shared_weak_count::__release_weak(v40);
                      }
                    }
                    do
                      v52 = __ldaxr(v44);
                    while (__stlxr(v52 - 1, v44));
                    if (!v52)
                    {
                      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                      std::__shared_weak_count::__release_weak(v43);
                    }
                    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 16))(v6, &v85);
                    v53 = v89;
                    if (v89)
                    {
                      v54 = (unint64_t *)&v89->__shared_owners_;
                      do
                        v55 = __ldaxr(v54);
                      while (__stlxr(v55 - 1, v54));
                      if (!v55)
                      {
                        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                        std::__shared_weak_count::__release_weak(v53);
                      }
                    }
                    v56 = v86;
                    if (v86)
                    {
                      v57 = (unint64_t *)&v86->__shared_owners_;
                      do
                        v58 = __ldaxr(v57);
                      while (__stlxr(v58 - 1, v57));
                      if (!v58)
                      {
                        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                        std::__shared_weak_count::__release_weak(v56);
                      }
                    }
                    v59 = v84;
                    if (v84)
                    {
                      v60 = (unint64_t *)&v84->__shared_owners_;
                      do
                        v61 = __ldaxr(v60);
                      while (__stlxr(v61 - 1, v60));
                      if (!v61)
                      {
                        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                        std::__shared_weak_count::__release_weak(v59);
                      }
                    }
                    v62 = v79;
                    if (v79)
                    {
                      v63 = (unint64_t *)&v79->__shared_owners_;
                      do
                        v64 = __ldaxr(v63);
                      while (__stlxr(v64 - 1, v63));
                      if (!v64)
                      {
                        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                        std::__shared_weak_count::__release_weak(v62);
                      }
                    }
                    if (SHIBYTE(v76) < 0)
                    {
                      operator delete(__p[0]);
                      if ((SHIBYTE(v74) & 0x80000000) == 0)
                      {
LABEL_87:
                        if ((SHIBYTE(v71) & 0x80000000) == 0)
                          goto LABEL_88;
                        goto LABEL_93;
                      }
                    }
                    else if ((SHIBYTE(v74) & 0x80000000) == 0)
                    {
                      goto LABEL_87;
                    }
                    operator delete(v73[0]);
                    if ((SHIBYTE(v71) & 0x80000000) == 0)
                    {
LABEL_88:
                      if ((SHIBYTE(v68) & 0x80000000) == 0)
                        goto LABEL_89;
                      goto LABEL_94;
                    }
LABEL_93:
                    operator delete(v70[0]);
                    if ((SHIBYTE(v68) & 0x80000000) == 0)
                    {
LABEL_89:
                      v9 = v81;
                      if (!v81)
                        return;
                      goto LABEL_95;
                    }
LABEL_94:
                    operator delete(v67[0]);
                    v9 = v81;
                    if (!v81)
                      return;
                    goto LABEL_95;
                  }
                }
                memmove(v28, v36, v31);
                goto LABEL_44;
              }
LABEL_34:
              v34 = *(_QWORD *)(v29 + 112);
              v35 = *(_QWORD *)(v29 + 72);
              if (v34 < v35)
              {
                *(_QWORD *)(v29 + 112) = v35;
                v34 = v35;
              }
              v36 = *(const void **)(v29 + 64);
              v31 = v34 - (_QWORD)v36;
              if (v34 - (unint64_t)v36 > 0x7FFFFFFFFFFFFFF7)
                goto LABEL_51;
              goto LABEL_37;
            }
          }
          memmove(v18, v19, (size_t)v21);
          goto LABEL_24;
        }
      }
      memmove(v15, v12, (size_t)v14);
      goto LABEL_16;
    }
  }
}

void sub_224104564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;
  void **v32;
  void **v33;
  void *v35;

  if (*(_BYTE *)(v31 + 72) && *(char *)(v31 + 71) < 0)
    operator delete(*v33);
  if (*(char *)(v31 + 47) < 0)
    operator delete(*v32);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v31);
  operator delete(v35);
  sub_2241231D8((uint64_t)&a28);
  sub_2241231D8((uint64_t)&a23);
  sub_223293AA0((uint64_t)&a9);
  sub_223167354((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_2241045FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a14 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a14 & 0x80000000) == 0)
  {
LABEL_4:
    sub_223167354((uint64_t)&a35);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a9);
  sub_223167354((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_224104680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_223167354((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_224104694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_223167354((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_2241046A8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC69428;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2241046B8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC69428;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2241046F0(uint64_t a1)
{
  char *v2;
  char *v3;
  std::__shared_weak_count *v4;
  char *v5;
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;

  while (1)
  {
    v3 = *(char **)(a1 + 96);
    v2 = *(char **)(a1 + 104);
    if (v3 == v2)
      break;
    sub_2241047C8(a1, *((_QWORD *)v2 - 2));
  }
  v4 = *(std::__shared_weak_count **)(a1 + 128);
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
    v3 = *(char **)(a1 + 96);
  }
  if (v3)
  {
    v5 = *(char **)(a1 + 104);
    v6 = v3;
    if (v5 != v3)
    {
      do
      {
        v7 = (std::__shared_weak_count *)*((_QWORD *)v5 - 1);
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        v5 -= 16;
      }
      while (v5 != v3);
      v6 = *(char **)(a1 + 96);
    }
    *(_QWORD *)(a1 + 104) = v3;
    operator delete(v6);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 32));
  v10 = *(std::__shared_weak_count **)(a1 + 24);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  return a1;
}

uint64_t sub_2241047C8(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;

  v4 = *(_QWORD **)(a1 + 96);
  v3 = *(_QWORD **)(a1 + 104);
  if (v4 != v3)
  {
    while (*v4 != a2)
    {
      v4 += 2;
      if (v4 == v3)
        return 0;
    }
  }
  if (v4 == v3)
    return 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, a1);
  v5 = v4 + 2;
  v6 = *(_QWORD **)(a1 + 104);
  if (v4 + 2 != v6)
  {
    do
    {
      v7 = *(_OWORD *)v5;
      *v5 = 0;
      v5[1] = 0;
      v8 = (std::__shared_weak_count *)v4[1];
      *(_OWORD *)v4 = v7;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v5 += 2;
      v4 += 2;
    }
    while (v5 != v6);
    v5 = *(_QWORD **)(a1 + 104);
  }
  while (v5 != v4)
  {
    v12 = (std::__shared_weak_count *)*(v5 - 1);
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v5 -= 2;
  }
  *(_QWORD *)(a1 + 104) = v4;
  return 1;
}

uint64_t sub_224104918(uint64_t a1)
{
  return sub_2241046F0(a1 - 8);
}

void sub_224104920(uint64_t a1)
{
  sub_2241046F0(a1);
  JUMPOUT(0x227684CE8);
}

void sub_224104944(uint64_t a1)
{
  sub_2241046F0(a1 - 8);
  JUMPOUT(0x227684CE8);
}

void sub_22410496C(uint64_t **a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  char *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;

  v6 = operator new(0xA0uLL);
  v8 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_24EC695E8;
  v9 = (char *)(v6 + 3);
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
  }
  v6[3] = &off_24EC69478;
  v6[4] = &unk_24EC694B8;
  v6[5] = 0;
  v6[6] = 0;
  v6[7] = 850045863;
  *((_OWORD *)v6 + 4) = 0u;
  *((_OWORD *)v6 + 5) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  *((_OWORD *)v6 + 7) = 0u;
  *((_OWORD *)v6 + 8) = 0u;
  *((_OWORD *)v6 + 9) = 0u;
  if (v7)
  {
    v12 = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v6[18] = v8;
    v6[19] = v7;
    std::__shared_weak_count::__release_weak(v7);
  }
  else
  {
    v6[18] = v8;
    v6[19] = 0;
  }
  *a3 = v9;
  a3[1] = v6;
  v14 = v6 + 2;
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
  v6[5] = v9;
  v6[6] = v6;
  v16 = *a1;
  v17 = a1[1];
  while (v16 != v17)
  {
    v18 = *v16;
    v19 = (std::__shared_weak_count *)v16[1];
    v37 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(p_shared_owners);
      while (__stxr(v21 + 1, p_shared_owners));
      v22 = (_QWORD *)*a3;
      v36 = v19;
      do
        v23 = __ldxr(p_shared_owners);
      while (__stxr(v23 + 1, p_shared_owners));
      v35 = v18;
      v26 = (uint64_t *)v22[12];
      v25 = (uint64_t *)v22[13];
      v24 = (uint64_t)(v22 + 12);
      if (v26 != v25)
      {
LABEL_22:
        while (*v26 != v18)
        {
          v26 += 2;
          if (v26 == v25)
          {
            v26 = v25;
            break;
          }
        }
      }
    }
    else
    {
      v22 = (_QWORD *)*a3;
      v35 = *v16;
      v36 = 0;
      v26 = *(uint64_t **)(*a3 + 96);
      v25 = *(uint64_t **)(*a3 + 104);
      v24 = *a3 + 96;
      if (v26 != v25)
        goto LABEL_22;
    }
    if (v26 == v25)
    {
      if ((unint64_t)v25 >= v22[14])
      {
        v29 = sub_2241055F4(v24, v18, (uint64_t)v19);
        v18 = v35;
      }
      else
      {
        *v25 = v18;
        v25[1] = (uint64_t)v19;
        if (v19)
        {
          v27 = (unint64_t *)&v19->__shared_owners_;
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
        }
        v29 = v25 + 2;
      }
      v22[13] = v29;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v18 + 24))(v18, v22);
      v19 = v36;
      if (!v36)
        goto LABEL_38;
    }
    else if (!v19)
    {
      goto LABEL_38;
    }
    v30 = (unint64_t *)&v19->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
      v32 = v37;
      if (!v37)
        goto LABEL_12;
      goto LABEL_39;
    }
LABEL_38:
    v32 = v37;
    if (!v37)
      goto LABEL_12;
LABEL_39:
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
LABEL_12:
    v16 += 2;
  }
}

void sub_224104BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  sub_223167354((uint64_t)&a9);
  sub_223167354((uint64_t)&a11);
  sub_223167354(v11);
  _Unwind_Resume(a1);
}

BOOL sub_224104BF8(uint64_t a1, uint64_t *a2)
{
  std::mutex *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;

  v4 = (std::mutex *)(a1 + 32);
  std::mutex::lock((std::mutex *)(a1 + 32));
  v6 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = *(uint64_t **)(a1 + 96);
  v10 = *(uint64_t **)(a1 + 104);
  if (v9 != v10)
  {
    while (*v9 != v6)
    {
      v9 += 2;
      if (v9 == v10)
      {
        v9 = *(uint64_t **)(a1 + 104);
        break;
      }
    }
  }
  if (v9 == v10)
  {
    if ((unint64_t)v10 >= *(_QWORD *)(a1 + 112))
    {
      v13 = sub_2241055F4(a1 + 96, v6, (uint64_t)v5);
    }
    else
    {
      *v10 = v6;
      v10[1] = (uint64_t)v5;
      if (v5)
      {
        v11 = (unint64_t *)&v5->__shared_owners_;
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      v13 = v10 + 2;
    }
    *(_QWORD *)(a1 + 104) = v13;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 24))(v6, a1);
  }
  if (v5)
  {
    v14 = (unint64_t *)&v5->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  std::mutex::unlock(v4);
  return v9 == v10;
}

void sub_224104D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  sub_223167354((uint64_t)&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

void sub_224104D48(uint64_t a1, uint64_t **a2)
{
  std::mutex *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t *v20;
  unint64_t v21;

  v4 = (std::mutex *)(a1 + 32);
  std::mutex::lock((std::mutex *)(a1 + 32));
  v5 = *(uint64_t **)(a1 + 96);
  v6 = *(uint64_t **)(a1 + 104);
  while (v6 != v5)
  {
    v6 -= 2;
    v7 = *a2;
    v8 = a2[1];
    if (*a2 != v8)
    {
      while (*v7 != *v6)
      {
        v7 += 2;
        if (v7 == v8)
        {
          v7 = a2[1];
          break;
        }
      }
    }
    if (v7 == v8)
      sub_2241047C8(a1, *v6);
  }
  v9 = *a2;
  v10 = a2[1];
  while (v9 != v10)
  {
    v12 = *v9;
    v11 = (std::__shared_weak_count *)v9[1];
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v16 = *(uint64_t **)(a1 + 96);
    v15 = *(uint64_t **)(a1 + 104);
    if (v16 != v15)
    {
      while (*v16 != v12)
      {
        v16 += 2;
        if (v16 == v15)
        {
          v16 = *(uint64_t **)(a1 + 104);
          break;
        }
      }
    }
    if (v16 == v15)
    {
      if ((unint64_t)v15 >= *(_QWORD *)(a1 + 112))
      {
        v19 = sub_2241055F4(a1 + 96, v12, (uint64_t)v11);
      }
      else
      {
        *v15 = v12;
        v15[1] = (uint64_t)v11;
        if (v11)
        {
          v17 = (unint64_t *)&v11->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        v19 = v15 + 2;
      }
      *(_QWORD *)(a1 + 104) = v19;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 24))(v12, a1);
    }
    if (v11)
    {
      v20 = (unint64_t *)&v11->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v9 += 2;
  }
  std::mutex::unlock(v4);
}

void sub_224104EEC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_224104F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  sub_223167354((uint64_t)&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

std::__shared_weak_count *sub_224104F1C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *result;

  result = *(std::__shared_weak_count **)(a1 + 128);
  if (result && (result = std::__shared_weak_count::lock(result)) != 0)
  {
    *a2 = *(_QWORD *)(a1 + 120);
    a2[1] = result;
  }
  else
  {
    *a2 = 0;
    a2[1] = result;
  }
  return result;
}

std::__shared_weak_count *sub_224104F68@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *result;

  *a2 = 0;
  a2[1] = 0;
  result = *(std::__shared_weak_count **)(a1 + 128);
  if (result)
  {
    result = std::__shared_weak_count::lock(result);
    a2[1] = result;
    if (result)
      *a2 = *(_QWORD *)(a1 + 120);
  }
  return result;
}

std::__shared_weak_count *sub_224104FA8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *result;

  result = *(std::__shared_weak_count **)(a1 + 24);
  if (result && (result = std::__shared_weak_count::lock(result)) != 0)
  {
    *a2 = *(_QWORD *)(a1 + 16);
    a2[1] = result;
  }
  else
  {
    *a2 = 0;
    a2[1] = result;
  }
  return result;
}

uint64_t sub_224104FF4(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  _QWORD *v5;
  _QWORD *i;

  v4 = (std::mutex *)(a1 + 32);
  std::mutex::lock((std::mutex *)(a1 + 32));
  v5 = *(_QWORD **)(a1 + 96);
  for (i = *(_QWORD **)(a1 + 104); v5 != i; v5 += 2)
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 16))(*v5, a2);
  std::mutex::unlock(v4);
  return a1 + 8;
}

void sub_22410506C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_224105080(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  _QWORD *v5;
  _QWORD *i;

  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  v5 = *(_QWORD **)(a1 + 88);
  for (i = *(_QWORD **)(a1 + 96); v5 != i; v5 += 2)
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 16))(*v5, a2);
  std::mutex::unlock(v4);
  return a1;
}

void sub_2241050F4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_224105108(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 24);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_224105170(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_2241051CC(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

void sub_224105234(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22410529C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::mutex *v5;
  _QWORD *v6;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = (std::mutex *)(v4 + 32);
  std::mutex::lock((std::mutex *)(v4 + 32));
  v6 = *(_QWORD **)(v4 + 96);
  for (i = *(_QWORD **)(v4 + 104); v6 != i; v6 += 2)
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v6 + 16))(*v6, a2);
  std::mutex::unlock(v5);
  return a1 + 8;
}

void sub_224105314(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_224105328(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::mutex *v5;
  _QWORD *v6;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = (std::mutex *)(v4 + 32);
  std::mutex::lock((std::mutex *)(v4 + 32));
  v6 = *(_QWORD **)(v4 + 96);
  for (i = *(_QWORD **)(v4 + 104); v6 != i; v6 += 2)
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v6 + 16))(*v6, a2);
  std::mutex::unlock(v5);
  return a1;
}

void sub_2241053A0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL sub_2241053B4(uint64_t a1)
{
  uint64_t v1;
  std::mutex *v2;
  _BOOL8 v3;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = (std::mutex *)(v1 + 32);
  std::mutex::lock((std::mutex *)(v1 + 32));
  v3 = *(_QWORD *)(v1 + 96) == *(_QWORD *)(v1 + 104);
  std::mutex::unlock(v2);
  return v3;
}

std::__shared_weak_count *sub_2241053F4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *result;

  v3 = *(_QWORD *)(a1 + 16);
  result = *(std::__shared_weak_count **)(v3 + 128);
  if (result && (result = std::__shared_weak_count::lock(result)) != 0)
  {
    *a2 = *(_QWORD *)(v3 + 120);
    a2[1] = result;
  }
  else
  {
    *a2 = 0;
    a2[1] = result;
  }
  return result;
}

std::__shared_weak_count *sub_224105440@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  std::__shared_weak_count *result;

  v2 = *(_QWORD *)(a1 + 16);
  *a2 = 0;
  a2[1] = 0;
  result = *(std::__shared_weak_count **)(v2 + 128);
  if (result)
  {
    result = std::__shared_weak_count::lock(result);
    a2[1] = result;
    if (result)
      *a2 = *(_QWORD *)(v2 + 120);
  }
  return result;
}

std::__shared_weak_count *sub_224105480@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *result;

  v3 = *(_QWORD *)(a1 + 16);
  result = *(std::__shared_weak_count **)(v3 + 24);
  if (result && (result = std::__shared_weak_count::lock(result)) != 0)
  {
    *a2 = *(_QWORD *)(v3 + 16);
    a2[1] = result;
  }
  else
  {
    *a2 = 0;
    a2[1] = result;
  }
  return result;
}

_QWORD *sub_2241054D4(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *(_QWORD **)a2;
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (uint64_t)v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD **)a2)
  {
    if (v5 < 0)
      sub_22316E078();
    v6 = operator new((size_t)v4 - *(_QWORD *)a2);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[2 * (v5 >> 4)];
    do
    {
      v7 = v3[1];
      *v6 = *v3;
      v6[1] = v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      v3 += 2;
      v6 += 2;
    }
    while (v3 != v4);
    a1[1] = v6;
  }
  return a1;
}

void sub_224105578(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 16;
      }
      while (v4 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2241055F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v11;
  char *v12;
  char *v13;
  unint64_t *v14;
  unint64_t v15;
  char *v16;
  _QWORD *v17;
  __int128 v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = ((uint64_t)v4 - *(_QWORD *)a1) >> 4;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60)
    sub_22316E078();
  v8 = *(_QWORD *)(a1 + 16) - (_QWORD)v3;
  if (v8 >> 3 > v6)
    v6 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v6 = 0xFFFFFFFFFFFFFFFLL;
  if (v6 >> 60)
    sub_223174E94();
  v11 = 16 * v6;
  v12 = (char *)operator new(16 * v6);
  v13 = &v12[16 * v5];
  *(_QWORD *)v13 = a2;
  *((_QWORD *)v13 + 1) = a3;
  if (a3)
  {
    v14 = (unint64_t *)(a3 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    v3 = *(_QWORD **)a1;
    v4 = *(_QWORD **)(a1 + 8);
  }
  v16 = &v12[v11];
  v17 = v13 + 16;
  if (v4 == v3)
  {
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
  }
  else
  {
    do
    {
      v18 = *((_OWORD *)v4 - 1);
      v4 -= 2;
      *((_OWORD *)v13 - 1) = v18;
      v13 -= 16;
      *v4 = 0;
      v4[1] = 0;
    }
    while (v4 != v3);
    v3 = *(_QWORD **)a1;
    v19 = *(_QWORD **)(a1 + 8);
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    while (v19 != v3)
    {
      v20 = (std::__shared_weak_count *)*(v19 - 1);
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v19 -= 2;
    }
  }
  if (v3)
    operator delete(v3);
  return v17;
}

void sub_224105740(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC695E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_224105750(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC695E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_224105780(uint64_t a1)
{
  return sub_2241046F0(a1 + 24);
}

double sub_224105790@<D0>(char a1@<W1>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  char *v4;
  _QWORD *v5;
  __int128 v6;
  __n128 *v7;
  char *v8;
  __int128 v9;
  const char *v10;
  char *v11;
  char *v12;
  char *v13;

  switch(a1)
  {
    case 0:
      *(_BYTE *)(a2 + 23) = 8;
      strcpy((char *)a2, "no error");
      return a3.n128_f64[0];
    case 1:
      *(_BYTE *)(a2 + 23) = 13;
      strcpy((char *)a2, "unknown error");
      return a3.n128_f64[0];
    case 2:
      v4 = (char *)operator new(0x20uLL);
      *(_QWORD *)a2 = v4;
      *(_OWORD *)(a2 + 8) = xmmword_2245B8D50;
      strcpy(v4, "filesystem operation failed");
      a3.n128_u64[0] = *(_QWORD *)"operation failed";
      return a3.n128_f64[0];
    case 3:
      v5 = operator new(0x20uLL);
      *(_QWORD *)a2 = v5;
      v6 = xmmword_2245B9420;
      v7 = (__n128 *)"caught runtime exception";
      goto LABEL_11;
    case 4:
      *(_BYTE *)(a2 + 23) = 15;
      strcpy((char *)a2, "data is invalid");
      return a3.n128_f64[0];
    case 5:
      *(_BYTE *)(a2 + 23) = 20;
      a3.n128_u64[0] = *(_QWORD *)"timestamp is invalid";
      strcpy((char *)a2, "timestamp is invalid");
      return a3.n128_f64[0];
    case 6:
      v8 = (char *)operator new(0x20uLL);
      *(_QWORD *)a2 = v8;
      v9 = xmmword_2245C6440;
      v10 = "timestamping is inconsistent";
      goto LABEL_15;
    case 7:
      v5 = operator new(0x20uLL);
      *(_QWORD *)a2 = v5;
      v6 = xmmword_2245B9420;
      v7 = (__n128 *)"processing queue is full";
LABEL_11:
      *(_OWORD *)(a2 + 8) = v6;
      a3 = *v7;
      *(__n128 *)v5 = *v7;
      v5[2] = v7[1].n128_u64[0];
      *((_BYTE *)v5 + 24) = 0;
      return a3.n128_f64[0];
    case 8:
      v11 = (char *)operator new(0x40uLL);
      *(_QWORD *)a2 = v11;
      *(_OWORD *)(a2 + 8) = xmmword_2245C4460;
      strcpy(v11, "chosen common I/O format is not supported for the data type");
      a3.n128_u64[0] = *(_QWORD *)"or the data type";
      return a3.n128_f64[0];
    case 9:
      v12 = (char *)operator new(0x28uLL);
      *(_QWORD *)a2 = v12;
      *(_OWORD *)(a2 + 8) = xmmword_2245B8D40;
      a3.n128_u64[0] = *(_QWORD *)"data package unknown to serializer";
      strcpy(v12, "data package unknown to serializer");
      return a3.n128_f64[0];
    case 10:
      v8 = (char *)operator new(0x20uLL);
      *(_QWORD *)a2 = v8;
      v9 = xmmword_2245C6440;
      v10 = "data type unknown to package";
LABEL_15:
      *(_OWORD *)(a2 + 8) = v9;
      *(_OWORD *)v8 = *(_OWORD *)v10;
      a3 = *(__n128 *)(v10 + 12);
      *(__n128 *)(v8 + 12) = a3;
      v8[28] = 0;
      break;
    case 11:
      *(_BYTE *)(a2 + 23) = 19;
      a3.n128_u64[0] = *(_QWORD *)"failed to load data";
      strcpy((char *)a2, "failed to load data");
      break;
    case 12:
      *(_BYTE *)(a2 + 23) = 20;
      a3.n128_u64[0] = *(_QWORD *)"sequence i/o failure";
      strcpy((char *)a2, "sequence i/o failure");
      break;
    case 13:
      v13 = (char *)operator new(0x20uLL);
      *(_QWORD *)a2 = v13;
      *(_OWORD *)(a2 + 8) = xmmword_2245B8EA0;
      strcpy(v13, "unsupported or invalid sequence");
      a3.n128_u64[0] = *(_QWORD *)"invalid sequence";
      break;
    default:
      *(_BYTE *)(a2 + 23) = 18;
      a3.n128_u64[0] = *(_QWORD *)"unknown error code";
      strcpy((char *)a2, "unknown error code");
      break;
  }
  return a3.n128_f64[0];
}

__n128 sub_224105AEC@<Q0>(int a1@<W1>, uint64_t a2@<X8>, __n128 result@<Q0>)
{
  _OWORD *v4;
  __int128 v5;
  const char *v6;
  char *v7;
  __int128 v8;
  const char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;

  switch(a1)
  {
    case 0:
      *(_BYTE *)(a2 + 23) = 8;
      strcpy((char *)a2, "no error");
      return result;
    case 1:
      *(_BYTE *)(a2 + 23) = 13;
      strcpy((char *)a2, "unknown error");
      return result;
    case 2:
      v4 = operator new(0x28uLL);
      *(_QWORD *)a2 = v4;
      v5 = xmmword_2245C77E0;
      v6 = "server Receive() threw exception";
      goto LABEL_19;
    case 3:
      *(_BYTE *)(a2 + 23) = 19;
      result.n128_u64[0] = *(_QWORD *)"server send failure";
      strcpy((char *)a2, "server send failure");
      return result;
    case 4:
      v7 = (char *)operator new(0x20uLL);
      *(_QWORD *)a2 = v7;
      v8 = xmmword_2245B8D00;
      v9 = "server can't reach client";
      goto LABEL_12;
    case 5:
      v10 = (char *)operator new(0x30uLL);
      *(_QWORD *)a2 = v10;
      *(_OWORD *)(a2 + 8) = xmmword_2245C4540;
      strcpy(v10, "server cannot serialize data of unknown package");
      result.n128_u64[0] = *(_QWORD *)" unknown package";
      return result;
    case 6:
      v11 = (char *)operator new(0x40uLL);
      *(_QWORD *)a2 = v11;
      *(_OWORD *)(a2 + 8) = xmmword_2245C4410;
      strcpy(v11, "server cannot serialize package data of unknown data type");
      result.n128_u64[0] = *(_QWORD *)"nknown data type";
      return result;
    case 7:
      v12 = (char *)operator new(0x20uLL);
      *(_QWORD *)a2 = v12;
      *(_OWORD *)(a2 + 8) = xmmword_2245B8D50;
      strcpy(v12, "server serialization failed");
      result.n128_u64[0] = *(_QWORD *)"alization failed";
      return result;
    case 8:
      v4 = operator new(0x28uLL);
      *(_QWORD *)a2 = v4;
      v5 = xmmword_2245C77E0;
      v6 = "client Receive() threw exception";
LABEL_19:
      *(_OWORD *)(a2 + 8) = v5;
      result = *(__n128 *)v6;
      v14 = *((_OWORD *)v6 + 1);
      *v4 = *(_OWORD *)v6;
      v4[1] = v14;
      *((_BYTE *)v4 + 32) = 0;
      return result;
    case 9:
      *(_BYTE *)(a2 + 23) = 19;
      result.n128_u64[0] = *(_QWORD *)"client send failure";
      strcpy((char *)a2, "client send failure");
      return result;
    case 10:
      v7 = (char *)operator new(0x20uLL);
      *(_QWORD *)a2 = v7;
      v8 = xmmword_2245B8D00;
      v9 = "client can't reach server";
LABEL_12:
      *(_OWORD *)(a2 + 8) = v8;
      *(_OWORD *)v7 = *(_OWORD *)v9;
      result = *(__n128 *)(v9 + 9);
      *(__n128 *)(v7 + 9) = result;
      v7[25] = 0;
      break;
    case 11:
      v13 = (char *)operator new(0x28uLL);
      *(_QWORD *)a2 = v13;
      *(_OWORD *)(a2 + 8) = xmmword_2245C4640;
      result.n128_u64[0] = *(_QWORD *)"client does not have syncing enabled";
      strcpy(v13, "client does not have syncing enabled");
      break;
    case 12:
      *(_BYTE *)(a2 + 23) = 7;
      strcpy((char *)a2, "timeout");
      break;
    case 13:
      *(_BYTE *)(a2 + 23) = 15;
      strcpy((char *)a2, "invalid peer ID");
      break;
    case 15:
      *(_BYTE *)(a2 + 23) = 19;
      result.n128_u64[0] = *(_QWORD *)"configuration issue";
      strcpy((char *)a2, "configuration issue");
      break;
    default:
      *(_BYTE *)(a2 + 23) = 18;
      result.n128_u64[0] = *(_QWORD *)"unknown error code";
      strcpy((char *)a2, "unknown error code");
      break;
  }
  return result;
}

void sub_224105E6C(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  void *v4[2];
  uint64_t v5;
  void *__p[2];
  uint64_t v7;
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  char v13;
  char v14;

  sub_224105FAC("ignoring data of timestamp ", a1, (uint64_t)"; exporter is exporting only the first encountered timestamp, which was '",
    a2,
    (uint64_t)"'");
  if (SHIBYTE(v5) < 0)
  {
    sub_223197FA4(__p, v4[0], (unint64_t)v4[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v4;
    v7 = v5;
  }
  v8 = 1;
  LOBYTE(v9) = 0;
  v13 = 0;
  v14 = 1;
  sub_224018FF0(5u, (__int128 *)__p, a3);
  if (!v14)
    goto LABEL_11;
  if (v13)
  {
    if ((v12 & 0x80000000) == 0)
    {
      if ((v10 & 0x80000000) == 0)
        goto LABEL_8;
LABEL_14:
      operator delete(v9);
      if (!v8)
        goto LABEL_11;
      goto LABEL_9;
    }
    operator delete(v11);
    if (v10 < 0)
      goto LABEL_14;
  }
LABEL_8:
  if (!v8)
    goto LABEL_11;
LABEL_9:
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
LABEL_11:
  if (SHIBYTE(v5) < 0)
    operator delete(v4[0]);
}

void sub_224105F80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_224105FAC(char *__s, uint64_t *a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5)
{
  uint64_t result;
  char v10;
  char v11;
  _DWORD v12[6];
  int v13;
  _QWORD **v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v13 = 0;
  sub_223627500(v12, __s);
  sub_224107E10((uint64_t)&v11, (uint64_t)v12, a2);
  v14 = (_QWORD **)v12;
  v15 = a3;
  v16 = v12;
  v17 = a3;
  v18 = a3;
  if (v13 == -1)
    sub_22316DD70();
  v19 = &v14;
  ((void (*)(_QWORD **, _DWORD *))off_24EC69730[v13])(&v19, v12);
  sub_223B8DE00((uint64_t)&v10, (uint64_t)v12, a4);
  v14 = (_QWORD **)v12;
  v15 = a5;
  v16 = v12;
  v17 = a5;
  v18 = a5;
  if (v13 == -1)
    sub_22316DD70();
  v19 = &v14;
  ((void (*)(_QWORD **, _DWORD *))off_24EC69748[v13])(&v19, v12);
  if (v13 == -1)
    sub_22316DD70();
  v14 = &v19;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24EC69760[v13])(&v14, v12);
  if (v13 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24EC696E8[v13])(&v14, v12);
  return result;
}

void sub_224106108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22410611C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_224106130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_224106144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_224106158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22410616C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_224106180(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  void *v5[2];
  uint64_t v6;
  void *__p[2];
  uint64_t v8;
  char v9;
  void *v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  char v15;

  v4 = -*a2;
  sub_2241062D0("received data of timestamp ", a1, (std::string::size_type)" ", &v4, (std::string::size_type)" before newest timestamp");
  if (SHIBYTE(v6) < 0)
  {
    sub_223197FA4(__p, v5[0], (unint64_t)v5[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v5;
    v8 = v6;
  }
  v9 = 1;
  LOBYTE(v10) = 0;
  v14 = 0;
  v15 = 1;
  sub_224018FF0(6u, (__int128 *)__p, a3);
  if (!v15)
    goto LABEL_11;
  if (v14)
  {
    if ((v13 & 0x80000000) == 0)
    {
      if ((v11 & 0x80000000) == 0)
        goto LABEL_8;
LABEL_14:
      operator delete(v10);
      if (!v9)
        goto LABEL_11;
      goto LABEL_9;
    }
    operator delete(v12);
    if (v11 < 0)
      goto LABEL_14;
  }
LABEL_8:
  if (!v9)
    goto LABEL_11;
LABEL_9:
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
LABEL_11:
  if (SHIBYTE(v6) < 0)
    operator delete(v5[0]);
}

void sub_2241062A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2241062D0(char *__s, uint64_t *a2, std::string::size_type a3, uint64_t *a4, std::string::size_type a5)
{
  const std::string::value_type *v9;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  uint64_t result;
  char v14;
  _DWORD v15[6];
  int v16;
  void *__p[2];
  std::string::size_type v18;
  std::string v19;
  void **v20;
  void **v21;
  void *v22[2];
  unsigned __int8 v23;
  uint64_t v24;
  std::string v25;

  v16 = 0;
  sub_223627500(v15, __s);
  sub_224107E10((uint64_t)&v14, (uint64_t)v15, a2);
  v19.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
  v19.__r_.__value_.__l.__size_ = a3;
  v19.__r_.__value_.__r.__words[2] = (std::string::size_type)v15;
  v20 = (void **)a3;
  v21 = (void **)a3;
  if (v16 == -1)
    sub_22316DD70();
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
  ((void (*)(std::string *, _DWORD *))off_24EC69748[v16])(&v25, v15);
  v24 = *a4;
  sub_223302758(&v24);
  std::string::push_back(&v25, 32);
  v19 = v25;
  memset(&v25, 0, sizeof(v25));
  sub_22456DDD0(1, 1000, v22);
  if ((v23 & 0x80u) == 0)
    v9 = (const std::string::value_type *)v22;
  else
    v9 = (const std::string::value_type *)v22[0];
  if ((v23 & 0x80u) == 0)
    v10 = v23;
  else
    v10 = (std::string::size_type)v22[1];
  v11 = std::string::append(&v19, v9, v10);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v18 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (((char)v23 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_10;
LABEL_20:
    operator delete(v19.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_21;
  }
  operator delete(v22[0]);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_20;
LABEL_10:
  if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_11;
LABEL_21:
  operator delete(v25.__r_.__value_.__l.__data_);
LABEL_11:
  v19.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
  v19.__r_.__value_.__l.__size_ = (std::string::size_type)__p;
  v19.__r_.__value_.__r.__words[2] = (std::string::size_type)v15;
  v20 = __p;
  v21 = __p;
  if (v16 == -1)
    sub_22316DD70();
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
  ((void (*)(std::string *, _DWORD *))off_24EC69718[v16])(&v25, v15);
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
  v19.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
  v19.__r_.__value_.__l.__size_ = a5;
  v19.__r_.__value_.__r.__words[2] = (std::string::size_type)v15;
  v20 = (void **)a5;
  v21 = (void **)a5;
  if (v16 == -1)
    sub_22316DD70();
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
  ((void (*)(std::string *, _DWORD *))off_24EC69778[v16])(&v25, v15);
  if (v16 == -1)
    sub_22316DD70();
  v19.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
  result = ((uint64_t (*)(std::string *, _DWORD *))off_24EC69760[v16])(&v19, v15);
  if (v16 != -1)
    return ((uint64_t (*)(std::string *, _DWORD *))off_24EC696E8[v16])(&v19, v15);
  return result;
}

void sub_224106540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;
  uint64_t v28;

  if (*(char *)(v28 - 81) < 0)
  {
    operator delete(*(void **)(v28 - 104));
    if ((a27 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v28 - 49) & 0x80000000) == 0)
      {
LABEL_8:
        sub_22319B964((uint64_t)&a11);
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(*(void **)(v27 + 8));
      sub_22319B964((uint64_t)&a11);
      _Unwind_Resume(a1);
    }
  }
  else if ((a27 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((*(char *)(v28 - 49) & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

void sub_224106604(uint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7;
  _DWORD *v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  void *v12;
  std::string *v13;
  uint64_t v14;
  std::string v15;
  std::string __p;
  char v17;
  void *v18;
  char v19;
  void *v20;
  char v21;
  char v22;
  char v23;
  _DWORD v24[6];
  int v25;
  std::string v26;
  std::string **v27;
  std::string *v28;
  std::string *v29;
  _DWORD *v30;
  std::string *v31;
  _QWORD v32[2];

  v32[1] = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v25 = 0;
    sub_2231C0094(v24, ", max queue size ");
    std::to_string(&v26, a2);
    v28 = (std::string *)v24;
    v29 = &v26;
    v30 = v24;
    v31 = &v26;
    v32[0] = &v26;
    if (v25 == -1)
      sub_22316DD70();
    v27 = &v28;
    ((void (*)(std::string ***, _DWORD *))off_24EC69718[v25])(&v27, v24);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    if (v25 == -1)
      sub_22316DD70();
    v28 = &v26;
    ((void (*)(void **__return_ptr, std::string **, _DWORD *))off_24EC69760[v25])(&v12, &v28, v24);
    if (v25 != -1)
      ((void (*)(std::string **, _DWORD *))off_24EC696E8[v25])(&v28, v24);
    v7 = HIBYTE(v14);
    v8 = v12;
    v9 = v13;
  }
  else
  {
    v9 = 0;
    v8 = 0;
    v7 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
  }
  v10 = (std::string *)*(unsigned __int8 *)(a1 + 23);
  if ((char)v10 >= 0)
    v11 = (std::string *)a1;
  else
    v11 = *(std::string **)a1;
  if ((char)v10 < 0)
    v10 = *(std::string **)(a1 + 8);
  v28 = v11;
  v29 = v10;
  if ((v7 & 0x80u) == 0)
  {
    v8 = &v12;
    v9 = (std::string *)v7;
  }
  v30 = v8;
  v31 = v9;
  sub_2231A9820((uint64_t)&v28, (uint64_t)v32, 0, 0, &v15);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    sub_223197FA4(&__p, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
  else
    __p = v15;
  v17 = 1;
  LOBYTE(v18) = 0;
  v22 = 0;
  v23 = 1;
  sub_224018FF0(7u, (__int128 *)&__p, a4);
  if (v23)
  {
    if (!v22)
      goto LABEL_24;
    if (v21 < 0)
    {
      operator delete(v20);
      if ((v19 & 0x80000000) == 0)
      {
LABEL_24:
        if (!v17)
          goto LABEL_27;
LABEL_25:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_27;
      }
    }
    else if ((v19 & 0x80000000) == 0)
    {
      goto LABEL_24;
    }
    operator delete(v18);
    if (!v17)
      goto LABEL_27;
    goto LABEL_25;
  }
LABEL_27:
  if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v14) & 0x80000000) == 0)
      return;
LABEL_31:
    operator delete(v12);
    return;
  }
  operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14) < 0)
    goto LABEL_31;
}

void sub_2241068A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void sub_224106914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  if (*(char *)(v29 - 105) < 0)
  {
    operator delete(*(void **)(v29 - 128));
    sub_22319B964((uint64_t)&a29);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x224106904);
}

void sub_224106938(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  std::string v8;
  std::string __p;
  char v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  char v15;
  char v16;
  _QWORD v17[8];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v17[0] = "Cannot save data as '";
  v17[1] = 21;
  v4 = *((unsigned __int8 *)a1 + 23);
  if ((v4 & 0x80u) == 0)
    v5 = a1;
  else
    v5 = (uint64_t *)*a1;
  if ((v4 & 0x80u) != 0)
    v4 = a1[1];
  v17[2] = v5;
  v17[3] = v4;
  v17[4] = "'. Reason: ";
  v17[5] = 11;
  v6 = *((unsigned __int8 *)a2 + 23);
  if ((v6 & 0x80u) == 0)
    v7 = a2;
  else
    v7 = (uint64_t *)*a2;
  if ((v6 & 0x80u) != 0)
    v6 = a2[1];
  v17[6] = v7;
  v17[7] = v6;
  sub_2231A9820((uint64_t)v17, (uint64_t)&v18, 0, 0, &v8);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    sub_223197FA4(&__p, v8.__r_.__value_.__l.__data_, v8.__r_.__value_.__l.__size_);
  else
    __p = v8;
  v10 = 1;
  LOBYTE(v11) = 0;
  v15 = 0;
  v16 = 1;
  sub_224018FF0(8u, (__int128 *)&__p, a3);
  if (v16)
  {
    if (!v15)
      goto LABEL_18;
    if (v14 < 0)
    {
      operator delete(v13);
      if ((v12 & 0x80000000) == 0)
      {
LABEL_18:
        if (!v10)
          goto LABEL_21;
LABEL_19:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_21;
      }
    }
    else if ((v12 & 0x80000000) == 0)
    {
      goto LABEL_18;
    }
    operator delete(v11);
    if (!v10)
      goto LABEL_21;
    goto LABEL_19;
  }
LABEL_21:
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
}

void sub_224106AB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_224106AEC(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  void *v5;
  std::string v6;
  char v7;
  void *v8;
  char v9;
  void *v10;
  char v11;
  char v12;
  char v13;
  std::string v14;
  std::string __dst;
  char v16;
  void *v17;
  char v18;
  void *__p;
  char v20;
  char v21;
  char v22;
  const char *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v3 = a1[1];
  if (*((char *)a1 + 23) < 0)
  {
    v4 = (uint64_t *)*a1;
  }
  else
  {
    v3 = *((unsigned __int8 *)a1 + 23);
    v4 = a1;
  }
  if (v3)
  {
    v23 = "Package id '";
    v24 = 12;
    v25 = v4;
    v26 = v3;
    v28 = 222;
    sub_2231A9820((uint64_t)&v23, (uint64_t)&v29, 0, 0, &v14);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      sub_223197FA4(&v6, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
    else
      v6 = v14;
    v7 = 1;
    LOBYTE(v8) = 0;
    v12 = 0;
    v13 = 1;
    sub_224018FF0(9u, (__int128 *)&v6, a2);
    if (v13)
    {
      if (!v12)
        goto LABEL_14;
      if (v11 < 0)
      {
        operator delete(v10);
        if ((v9 & 0x80000000) == 0)
        {
LABEL_14:
          if (!v7)
            goto LABEL_28;
          goto LABEL_15;
        }
      }
      else if ((v9 & 0x80000000) == 0)
      {
        goto LABEL_14;
      }
      operator delete(v8);
      if (v7)
      {
LABEL_15:
        if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_28;
        v5 = (void *)v6.__r_.__value_.__r.__words[0];
        goto LABEL_27;
      }
    }
  }
  else
  {
    v23 = "Package id '";
    v24 = 12;
    v25 = v4;
    v26 = 0;
    v27 = "' encountered during loading is unrecognized. An empty package name indicates a serialization error (e.g. inva"
          "lid data in the stream)";
    v28 = 133;
    sub_2231A9820((uint64_t)&v23, (uint64_t)&v29, 0, 0, &v14);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      sub_223197FA4(&__dst, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
    else
      __dst = v14;
    v16 = 1;
    LOBYTE(v17) = 0;
    v21 = 0;
    v22 = 1;
    sub_224018FF0(9u, (__int128 *)&__dst, a2);
    if (v22)
    {
      if (v21)
      {
        if (v20 < 0)
          operator delete(__p);
        if (v18 < 0)
          operator delete(v17);
      }
      if (v16 && SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        v5 = (void *)__dst.__r_.__value_.__r.__words[0];
LABEL_27:
        operator delete(v5);
      }
    }
  }
LABEL_28:
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
}

void sub_224106D24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a27 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_224106D70(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  __int128 v5;
  uint64_t v6;
  char v7;
  void *v8;
  char v9;
  void *v10;
  char v11;
  char v12;
  char v13;
  void *v14[2];
  uint64_t v15;
  void *__dst[2];
  uint64_t v17;
  char v18;
  void *v19;
  char v20;
  void *__p;
  char v22;
  char v23;
  char v24;
  _DWORD v25[6];
  int v26;
  std::string v27;
  std::string **v28;
  std::string *v29;
  std::string *v30;
  _DWORD *v31;
  std::string *v32;
  std::string *v33;

  if (*(_DWORD *)(a1 + 24))
  {
    v26 = 0;
    sub_2231A17D8(v25, "Package '");
    v29 = (std::string *)v25;
    v30 = (std::string *)a1;
    v31 = v25;
    v32 = (std::string *)a1;
    v33 = (std::string *)a1;
    if (v26 == -1)
      sub_22316DD70();
    v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
    ((void (*)(std::string *, _DWORD *))off_24EC69790[v26])(&v27, v25);
    v29 = (std::string *)v25;
    v30 = (std::string *)"' data type id ";
    v31 = v25;
    v32 = (std::string *)"' data type id ";
    v33 = (std::string *)"' data type id ";
    if (v26 == -1)
      sub_22316DD70();
    v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
    ((void (*)(std::string *, _DWORD *))off_24EC697A8[v26])(&v27, v25);
    std::to_string(&v27, *(_DWORD *)(a1 + 24));
    v29 = (std::string *)v25;
    v30 = &v27;
    v31 = v25;
    v32 = &v27;
    v33 = &v27;
    if (v26 == -1)
      sub_22316DD70();
    v28 = &v29;
    ((void (*)(std::string ***, _DWORD *))off_24EC69718[v26])(&v28, v25);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
    v29 = (std::string *)v25;
    v30 = (std::string *)" encountered during loading is unrecognized. The loader's package version may be too old.";
    v31 = v25;
    v32 = (std::string *)" encountered during loading is unrecognized. The loader's package version may be too old.";
    v33 = (std::string *)" encountered during loading is unrecognized. The loader's package version may be too old.";
    if (v26 == -1)
      sub_22316DD70();
    v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
    ((void (*)(std::string *, _DWORD *))off_24EC697D8[v26])(&v27, v25);
    if (v26 == -1)
      sub_22316DD70();
    v29 = &v27;
    ((void (*)(void **__return_ptr, std::string **, _DWORD *))off_24EC69760[v26])(v14, &v29, v25);
    if (v26 != -1)
      ((void (*)(std::string **, _DWORD *))off_24EC696E8[v26])(&v29, v25);
    if (SHIBYTE(v15) < 0)
    {
      sub_223197FA4(&v5, v14[0], (unint64_t)v14[1]);
    }
    else
    {
      v5 = *(_OWORD *)v14;
      v6 = v15;
    }
    v7 = 1;
    LOBYTE(v8) = 0;
    v12 = 0;
    v13 = 1;
    sub_224018FF0(0xAu, &v5, a2);
    if (v13)
    {
      if (!v12)
        goto LABEL_29;
      if (v11 < 0)
      {
        operator delete(v10);
        if ((v9 & 0x80000000) == 0)
        {
LABEL_29:
          if (!v7)
            goto LABEL_43;
          goto LABEL_30;
        }
      }
      else if ((v9 & 0x80000000) == 0)
      {
        goto LABEL_29;
      }
      operator delete(v8);
      if (v7)
      {
LABEL_30:
        if ((SHIBYTE(v6) & 0x80000000) == 0)
          goto LABEL_43;
        v4 = (void *)v5;
        goto LABEL_42;
      }
    }
  }
  else
  {
    v26 = 0;
    sub_2231A17D8(v25, "Package '");
    v29 = (std::string *)v25;
    v30 = (std::string *)a1;
    v31 = v25;
    v32 = (std::string *)a1;
    v33 = (std::string *)a1;
    if (v26 == -1)
      sub_22316DD70();
    v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
    ((void (*)(std::string *, _DWORD *))off_24EC69790[v26])(&v27, v25);
    v29 = (std::string *)v25;
    v30 = (std::string *)"' data type id ";
    v31 = v25;
    v32 = (std::string *)"' data type id ";
    v33 = (std::string *)"' data type id ";
    if (v26 == -1)
      sub_22316DD70();
    v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
    ((void (*)(std::string *, _DWORD *))off_24EC697A8[v26])(&v27, v25);
    std::to_string(&v27, *(_DWORD *)(a1 + 24));
    v29 = (std::string *)v25;
    v30 = &v27;
    v31 = v25;
    v32 = &v27;
    v33 = &v27;
    if (v26 == -1)
      sub_22316DD70();
    v28 = &v29;
    ((void (*)(std::string ***, _DWORD *))off_24EC69718[v26])(&v28, v25);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
    v29 = (std::string *)v25;
    v30 = (std::string *)" encountered during loading is unrecognized. A data type ID of 0 indicates a serialization erro"
                         "r (e.g. invalid data in the stream)";
    v31 = v25;
    v32 = (std::string *)" encountered during loading is unrecognized. A data type ID of 0 indicates a serialization erro"
                         "r (e.g. invalid data in the stream)";
    v33 = (std::string *)" encountered during loading is unrecognized. A data type ID of 0 indicates a serialization erro"
                         "r (e.g. invalid data in the stream)";
    if (v26 == -1)
      sub_22316DD70();
    v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
    ((void (*)(std::string *, _DWORD *))off_24EC697C0[v26])(&v27, v25);
    if (v26 == -1)
      sub_22316DD70();
    v29 = &v27;
    ((void (*)(void **__return_ptr, std::string **, _DWORD *))off_24EC69760[v26])(v14, &v29, v25);
    if (v26 != -1)
      ((void (*)(std::string **, _DWORD *))off_24EC696E8[v26])(&v29, v25);
    if (SHIBYTE(v15) < 0)
    {
      sub_223197FA4(__dst, v14[0], (unint64_t)v14[1]);
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)v14;
      v17 = v15;
    }
    v18 = 1;
    LOBYTE(v19) = 0;
    v23 = 0;
    v24 = 1;
    sub_224018FF0(0xAu, (__int128 *)__dst, a2);
    if (v24)
    {
      if (v23)
      {
        if (v22 < 0)
          operator delete(__p);
        if (v20 < 0)
          operator delete(v19);
      }
      if (v18 && SHIBYTE(v17) < 0)
      {
        v4 = __dst[0];
LABEL_42:
        operator delete(v4);
      }
    }
  }
LABEL_43:
  if (SHIBYTE(v15) < 0)
    operator delete(v14[0]);
}

void sub_224107260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2241072C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 81) < 0)
  {
    operator delete(*(void **)(v1 - 104));
    sub_22319B964(v1 - 136);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x224107300);
}

void sub_2241072FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22319B964(v1 - 136);
  _Unwind_Resume(a1);
}

void sub_224107310(unsigned __int8 *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void *v7;
  char v8;
  void *v9[2];
  uint64_t v10;
  void *__p[2];
  uint64_t v12;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  char v18;
  char v19;
  uint64_t v20;

  v20 = a3;
  if (a3)
  {
    sub_224107678(", reason: ", (const char *)&v20);
  }
  else
  {
    v8 = 0;
    LOBYTE(v7) = 0;
  }
  sub_2241074CC("Failed to send command(s) to client ", a1, (uint64_t)&v7, (uint64_t)".");
  if (SHIBYTE(v10) < 0)
  {
    sub_223197FA4(__p, v9[0], (unint64_t)v9[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v9;
    v12 = v10;
  }
  v13 = 1;
  LOBYTE(v14) = 0;
  v18 = 0;
  v19 = 1;
  sub_22400C190(a2, (__int128 *)__p, a4);
  if (v19)
  {
    if (!v18)
      goto LABEL_11;
    if (v17 < 0)
    {
      operator delete(v16);
      if ((v15 & 0x80000000) == 0)
      {
LABEL_11:
        if (!v13)
          goto LABEL_14;
LABEL_12:
        if (SHIBYTE(v12) < 0)
          operator delete(__p[0]);
        goto LABEL_14;
      }
    }
    else if ((v15 & 0x80000000) == 0)
    {
      goto LABEL_11;
    }
    operator delete(v14);
    if (!v13)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_14:
  if ((SHIBYTE(v10) & 0x80000000) == 0)
  {
    if ((v8 & 0x80000000) == 0)
      return;
LABEL_18:
    operator delete(v7);
    return;
  }
  operator delete(v9[0]);
  if (v8 < 0)
    goto LABEL_18;
}

void sub_224107470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2241074CC(char *__s, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  char v8;
  _DWORD v9[6];
  int v10;
  _QWORD **v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v10 = 0;
  sub_223846A14(v9, __s);
  sub_22319B83C((uint64_t)&v8, (uint64_t)v9, a2);
  v11 = (_QWORD **)v9;
  v12 = a3;
  v13 = v9;
  v14 = a3;
  v15 = a3;
  if (v10 == -1)
    sub_22316DD70();
  v16 = &v11;
  ((void (*)(_QWORD **, _DWORD *))off_24EC69790[v10])(&v16, v9);
  v11 = (_QWORD **)v9;
  v12 = a4;
  v13 = v9;
  v14 = a4;
  v15 = a4;
  if (v10 == -1)
    sub_22316DD70();
  v16 = &v11;
  ((void (*)(_QWORD **, _DWORD *))off_24EC69748[v10])(&v16, v9);
  if (v10 == -1)
    sub_22316DD70();
  v11 = &v16;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24EC69760[v10])(&v11, v9);
  if (v10 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24EC696E8[v10])(&v11, v9);
  return result;
}

void sub_224107614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_224107628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22410763C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_224107650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_224107664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_224107678(char *__s, const char *a2)
{
  uint64_t result;
  _DWORD v4[6];
  int v5;
  _QWORD **v6;
  const char *v7;
  _DWORD *v8;
  const char *v9;
  const char *v10;
  _QWORD *v11;

  v5 = 0;
  sub_223701EA8(v4, __s);
  if (*(_QWORD *)a2)
  {
    v6 = (_QWORD **)v4;
    v7 = a2;
    v8 = v4;
    v9 = a2;
    v10 = a2;
    if (v5 != -1)
    {
      v11 = &v6;
      ((void (*)(_QWORD **, _DWORD *))off_24EC697F0[v5])(&v11, v4);
      goto LABEL_6;
    }
LABEL_10:
    sub_22316DD70();
  }
  v6 = (_QWORD **)v4;
  v7 = "nullptr";
  v8 = v4;
  v9 = "nullptr";
  v10 = "nullptr";
  if (v5 == -1)
    goto LABEL_10;
  v11 = &v6;
  ((void (*)(_QWORD **, _DWORD *))off_24EC69700[v5])(&v11, v4);
LABEL_6:
  if (v5 == -1)
    sub_22316DD70();
  v6 = &v11;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24EC69760[v5])(&v6, v4);
  if (v5 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24EC696E8[v5])(&v6, v4);
  return result;
}

void sub_2241077A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2241077B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2241077CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2241077E0(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  void *v3[2];
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  char v7;
  void *v8;
  char v9;
  void *v10;
  char v11;
  char v12;
  char v13;

  if (SHIBYTE(v4) < 0)
  {
    sub_223197FA4(__p, v3[0], (unint64_t)v3[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v3;
    v6 = v4;
  }
  v7 = 1;
  LOBYTE(v8) = 0;
  v12 = 0;
  v13 = 1;
  sub_22400C190(0xFu, (__int128 *)__p, a2);
  if (!v13)
    goto LABEL_11;
  if (v12)
  {
    if ((v11 & 0x80000000) == 0)
    {
      if ((v9 & 0x80000000) == 0)
        goto LABEL_8;
LABEL_14:
      operator delete(v8);
      if (!v7)
        goto LABEL_11;
      goto LABEL_9;
    }
    operator delete(v10);
    if (v9 < 0)
      goto LABEL_14;
  }
LABEL_8:
  if (!v7)
    goto LABEL_11;
LABEL_9:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
LABEL_11:
  if (SHIBYTE(v4) < 0)
    operator delete(v3[0]);
}

void sub_2241078F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_22410791C(char *__s, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  char v8;
  _DWORD v9[6];
  int v10;
  _QWORD **v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v10 = 0;
  sub_2232CFAFC(v9, __s);
  sub_22319B83C((uint64_t)&v8, (uint64_t)v9, a2);
  v11 = (_QWORD **)v9;
  v12 = a3;
  v13 = v9;
  v14 = a3;
  v15 = a3;
  if (v10 == -1)
    sub_22316DD70();
  v16 = &v11;
  ((void (*)(_QWORD **, _DWORD *))off_24EC69808[v10])(&v16, v9);
  v11 = (_QWORD **)v9;
  v12 = a4;
  v13 = v9;
  v14 = a4;
  v15 = a4;
  if (v10 == -1)
    sub_22316DD70();
  v16 = &v11;
  ((void (*)(_QWORD **, _DWORD *))off_24EC69820[v10])(&v16, v9);
  if (v10 == -1)
    sub_22316DD70();
  v11 = &v16;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24EC69760[v10])(&v11, v9);
  if (v10 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24EC696E8[v10])(&v11, v9);
  return result;
}

void sub_224107A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_224107A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_224107A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_224107AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_224107AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_224107AC8(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  void *v3[2];
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  char v7;
  void *v8;
  char v9;
  void *v10;
  char v11;
  char v12;
  char v13;

  if (SHIBYTE(v4) < 0)
  {
    sub_223197FA4(__p, v3[0], (unint64_t)v3[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v3;
    v6 = v4;
  }
  v7 = 1;
  LOBYTE(v8) = 0;
  v12 = 0;
  v13 = 1;
  sub_22400C190(0xFu, (__int128 *)__p, a2);
  if (!v13)
    goto LABEL_11;
  if (v12)
  {
    if ((v11 & 0x80000000) == 0)
    {
      if ((v9 & 0x80000000) == 0)
        goto LABEL_8;
LABEL_14:
      operator delete(v8);
      if (!v7)
        goto LABEL_11;
      goto LABEL_9;
    }
    operator delete(v10);
    if (v9 < 0)
      goto LABEL_14;
  }
LABEL_8:
  if (!v7)
    goto LABEL_11;
LABEL_9:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
LABEL_11:
  if (SHIBYTE(v4) < 0)
    operator delete(v3[0]);
}

void sub_224107BD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_224107C04(char *__s, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  char v8;
  _DWORD v9[6];
  int v10;
  _QWORD **v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v10 = 0;
  sub_2232CFAFC(v9, __s);
  sub_22319B83C((uint64_t)&v8, (uint64_t)v9, a2);
  v11 = (_QWORD **)v9;
  v12 = a3;
  v13 = v9;
  v14 = a3;
  v15 = a3;
  if (v10 == -1)
    sub_22316DD70();
  v16 = &v11;
  ((void (*)(_QWORD **, _DWORD *))off_24EC69838[v10])(&v16, v9);
  v11 = (_QWORD **)v9;
  v12 = a4;
  v13 = v9;
  v14 = a4;
  v15 = a4;
  if (v10 == -1)
    sub_22316DD70();
  v16 = &v11;
  ((void (*)(_QWORD **, _DWORD *))off_24EC69850[v10])(&v16, v9);
  if (v10 == -1)
    sub_22316DD70();
  v11 = &v16;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24EC69760[v10])(&v11, v9);
  if (v10 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24EC696E8[v10])(&v11, v9);
  return result;
}

void sub_224107D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_224107D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_224107D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_224107D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_224107D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_224107DB0(std::error_category *a1)
{
  std::error_category::~error_category(a1);
  JUMPOUT(0x227684CE8);
}

const char *sub_224107DD4()
{
  return "cv3d.kit.viz I/O";
}

void sub_224107DE0(std::error_category *a1)
{
  std::error_category::~error_category(a1);
  JUMPOUT(0x227684CE8);
}

const char *sub_224107E04()
{
  return "cv3d.kit.viz client/server";
}

void sub_224107E10(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_223195210(v5);
  v21[0] = v5;
  sub_2245054F4((_QWORD *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_22316DBC0();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v14 + 128);
    MEMORY[0x227684CE8](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_22316DD70();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24EC69718[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_224108060(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_224108084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2241080A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22456E764((uint64_t *)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_2241080B4(_DWORD ***a1)
{
  return sub_22410856C(**a1, (char *)(*a1)[1]);
}

void sub_2241080C0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;
  const char *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  _BYTE v15[15];
  char v16;
  void *__p[2];
  unint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)((char *)v19 + 7) = *(_QWORD *)(a2 + 15);
  v4 = *(void **)a2;
  v19[0] = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v14 = v4;
  *(_QWORD *)v15 = v19[0];
  *(_QWORD *)&v15[7] = *(_QWORD *)((char *)v19 + 7);
  v16 = v5;
  memset(v19, 0, 15);
  v6 = __p;
  v7 = *(const char **)(v2 + 24);
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v6 = operator new(v11 + 1);
    __p[1] = v9;
    v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((_BYTE *)v9 + (_QWORD)v6) = 0;
    v10 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v10 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v10 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24EC696E8[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_22319BD1C((_QWORD *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0)
    goto LABEL_15;
}

void sub_224108278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2241082BC(uint64_t a1, void **a2)
{
  const void *v3;
  _BYTE *v4;
  _QWORD *v5;
  size_t v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  size_t v18;
  size_t v19;
  void *v20;
  char *v21;
  void **v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  void **v27;

  v3 = *(const void **)(*(_QWORD *)a1 + 32);
  v5 = a2[1];
  v4 = a2[2];
  if (v5 < (_QWORD *)v4)
  {
    v6 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
    if (v6 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    v7 = v6;
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v8 = operator new(v14 + 1);
      v5[1] = v7;
      v5[2] = v15 | 0x8000000000000000;
      *v5 = v8;
    }
    else
    {
      *((_BYTE *)v5 + 23) = v6;
      v8 = v5;
      if (!v6)
        goto LABEL_19;
    }
    memmove(v8, v3, v7);
LABEL_19:
    *((_BYTE *)v8 + v7) = 0;
    v16 = (char *)(v5 + 3);
    a2[1] = v5 + 3;
    goto LABEL_39;
  }
  v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*a2) >> 3);
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a2) >> 3);
  v11 = 2 * v10;
  if (2 * v10 <= v9 + 1)
    v11 = v9 + 1;
  if (v10 >= 0x555555555555555)
    v12 = 0xAAAAAAAAAAAAAAALL;
  else
    v12 = v11;
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v13 = (char *)operator new(24 * v12);
  }
  else
  {
    v13 = 0;
  }
  v17 = &v13[24 * v9];
  v18 = strlen((const char *)v3);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v24 = v18 | 7;
    v25 = v24 + 1;
    v20 = operator new(v24 + 1);
    *((_QWORD *)v17 + 1) = v19;
    *((_QWORD *)v17 + 2) = v25 | 0x8000000000000000;
    *(_QWORD *)v17 = v20;
  }
  else
  {
    v17[23] = v18;
    v20 = v17;
    if (!v18)
    {
      v21 = &v13[24 * v12];
      *v17 = 0;
      v16 = v17 + 24;
      v22 = (void **)*a2;
      v23 = (void **)a2[1];
      if (v23 == *a2)
        goto LABEL_36;
      do
      {
LABEL_30:
        v26 = *(_OWORD *)(v23 - 3);
        *((_QWORD *)v17 - 1) = *(v23 - 1);
        *(_OWORD *)(v17 - 24) = v26;
        v17 -= 24;
        *(v23 - 2) = 0;
        *(v23 - 1) = 0;
        *(v23 - 3) = 0;
        v23 -= 3;
      }
      while (v23 != v22);
      v23 = (void **)*a2;
      v27 = (void **)a2[1];
      *a2 = v17;
      a2[1] = v16;
      a2[2] = v21;
      while (v27 != v23)
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      goto LABEL_37;
    }
  }
  memmove(v20, v3, v19);
  v21 = &v13[24 * v12];
  *((_BYTE *)v20 + v19) = 0;
  v16 = v17 + 24;
  v22 = (void **)*a2;
  v23 = (void **)a2[1];
  if (v23 != *a2)
    goto LABEL_30;
LABEL_36:
  *a2 = v17;
  a2[1] = v16;
  a2[2] = v21;
LABEL_37:
  if (v23)
    operator delete(v23);
LABEL_39:
  a2[1] = v16;
}

void sub_22410854C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_224108564(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_DWORD *sub_22410856C(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24EC696E8[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

_DWORD *sub_22410865C(_DWORD ***a1)
{
  return sub_2231A0C08(**a1, (char *)(*a1)[1]);
}

void sub_224108668(uint64_t a1, uint64_t a2)
{
  sub_224108678((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

void sub_224108678(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24EC696E8[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_22319BD1C((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_22410882C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_224108870(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_224108968((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_224108960(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_224108968(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_224108B64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319C040((uint64_t)va);
  _Unwind_Resume(a1);
}

size_t sub_224108B78(_QWORD **a1)
{
  _DWORD *v1;
  const char *v2;
  uint64_t v3;
  size_t result;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v1 = (_DWORD *)**a1;
  v2 = (const char *)(*a1)[1];
  v3 = v1[6];
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, _DWORD *))off_24EC696E8[v3])(&v9, v1);
  v1[6] = -1;
  result = strlen(v2);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v5 = result;
  if (result >= 0x17)
  {
    v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v7 = result | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    *((_QWORD *)v1 + 1) = v5;
    *((_QWORD *)v1 + 2) = v8 | 0x8000000000000000;
    *(_QWORD *)v1 = v6;
  }
  else
  {
    *((_BYTE *)v1 + 23) = result;
    v6 = v1;
    if (!result)
      goto LABEL_11;
  }
  result = (size_t)memmove(v6, v2, v5);
LABEL_11:
  *((_BYTE *)v6 + v5) = 0;
  v1[6] = 1;
  return result;
}

void sub_224108C64(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;
  const char *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  _BYTE v15[15];
  char v16;
  void *__p[2];
  unint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)((char *)v19 + 7) = *(_QWORD *)(a2 + 15);
  v4 = *(void **)a2;
  v19[0] = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v14 = v4;
  *(_QWORD *)v15 = v19[0];
  *(_QWORD *)&v15[7] = *(_QWORD *)((char *)v19 + 7);
  v16 = v5;
  memset(v19, 0, 15);
  v6 = __p;
  v7 = *(const char **)(v2 + 24);
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v6 = operator new(v11 + 1);
    __p[1] = v9;
    v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((_BYTE *)v9 + (_QWORD)v6) = 0;
    v10 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v10 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v10 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24EC696E8[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_22319BD1C((_QWORD *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0)
    goto LABEL_15;
}

void sub_224108E1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_224108E60(uint64_t a1, void **a2)
{
  const void *v3;
  _BYTE *v4;
  _QWORD *v5;
  size_t v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  size_t v18;
  size_t v19;
  void *v20;
  char *v21;
  void **v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  void **v27;

  v3 = *(const void **)(*(_QWORD *)a1 + 32);
  v5 = a2[1];
  v4 = a2[2];
  if (v5 < (_QWORD *)v4)
  {
    v6 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
    if (v6 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    v7 = v6;
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v8 = operator new(v14 + 1);
      v5[1] = v7;
      v5[2] = v15 | 0x8000000000000000;
      *v5 = v8;
    }
    else
    {
      *((_BYTE *)v5 + 23) = v6;
      v8 = v5;
      if (!v6)
        goto LABEL_19;
    }
    memmove(v8, v3, v7);
LABEL_19:
    *((_BYTE *)v8 + v7) = 0;
    v16 = (char *)(v5 + 3);
    a2[1] = v5 + 3;
    goto LABEL_39;
  }
  v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*a2) >> 3);
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a2) >> 3);
  v11 = 2 * v10;
  if (2 * v10 <= v9 + 1)
    v11 = v9 + 1;
  if (v10 >= 0x555555555555555)
    v12 = 0xAAAAAAAAAAAAAAALL;
  else
    v12 = v11;
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v13 = (char *)operator new(24 * v12);
  }
  else
  {
    v13 = 0;
  }
  v17 = &v13[24 * v9];
  v18 = strlen((const char *)v3);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v24 = v18 | 7;
    v25 = v24 + 1;
    v20 = operator new(v24 + 1);
    *((_QWORD *)v17 + 1) = v19;
    *((_QWORD *)v17 + 2) = v25 | 0x8000000000000000;
    *(_QWORD *)v17 = v20;
  }
  else
  {
    v17[23] = v18;
    v20 = v17;
    if (!v18)
    {
      v21 = &v13[24 * v12];
      *v17 = 0;
      v16 = v17 + 24;
      v22 = (void **)*a2;
      v23 = (void **)a2[1];
      if (v23 == *a2)
        goto LABEL_36;
      do
      {
LABEL_30:
        v26 = *(_OWORD *)(v23 - 3);
        *((_QWORD *)v17 - 1) = *(v23 - 1);
        *(_OWORD *)(v17 - 24) = v26;
        v17 -= 24;
        *(v23 - 2) = 0;
        *(v23 - 1) = 0;
        *(v23 - 3) = 0;
        v23 -= 3;
      }
      while (v23 != v22);
      v23 = (void **)*a2;
      v27 = (void **)a2[1];
      *a2 = v17;
      a2[1] = v16;
      a2[2] = v21;
      while (v27 != v23)
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      goto LABEL_37;
    }
  }
  memmove(v20, v3, v19);
  v21 = &v13[24 * v12];
  *((_BYTE *)v20 + v19) = 0;
  v16 = v17 + 24;
  v22 = (void **)*a2;
  v23 = (void **)a2[1];
  if (v23 != *a2)
    goto LABEL_30;
LABEL_36:
  *a2 = v17;
  a2[1] = v16;
  a2[2] = v21;
LABEL_37:
  if (v23)
    operator delete(v23);
LABEL_39:
  a2[1] = v16;
}

void sub_2241090F0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_224109108(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

size_t sub_224109110(_QWORD **a1)
{
  _DWORD *v1;
  const char *v2;
  uint64_t v3;
  size_t result;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v1 = (_DWORD *)**a1;
  v2 = (const char *)(*a1)[1];
  v3 = v1[6];
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, _DWORD *))off_24EC696E8[v3])(&v9, v1);
  v1[6] = -1;
  result = strlen(v2);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v5 = result;
  if (result >= 0x17)
  {
    v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v7 = result | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    *((_QWORD *)v1 + 1) = v5;
    *((_QWORD *)v1 + 2) = v8 | 0x8000000000000000;
    *(_QWORD *)v1 = v6;
  }
  else
  {
    *((_BYTE *)v1 + 23) = result;
    v6 = v1;
    if (!result)
      goto LABEL_11;
  }
  result = (size_t)memmove(v6, v2, v5);
LABEL_11:
  *((_BYTE *)v6 + v5) = 0;
  v1[6] = 1;
  return result;
}

void sub_2241091FC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;
  const char *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  _BYTE v15[15];
  char v16;
  void *__p[2];
  unint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)((char *)v19 + 7) = *(_QWORD *)(a2 + 15);
  v4 = *(void **)a2;
  v19[0] = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v14 = v4;
  *(_QWORD *)v15 = v19[0];
  *(_QWORD *)&v15[7] = *(_QWORD *)((char *)v19 + 7);
  v16 = v5;
  memset(v19, 0, 15);
  v6 = __p;
  v7 = *(const char **)(v2 + 24);
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v6 = operator new(v11 + 1);
    __p[1] = v9;
    v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((_BYTE *)v9 + (_QWORD)v6) = 0;
    v10 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v10 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v10 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24EC696E8[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_22319BD1C((_QWORD *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0)
    goto LABEL_15;
}

void sub_2241093B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2241093F8(uint64_t a1, void **a2)
{
  const void *v3;
  _BYTE *v4;
  _QWORD *v5;
  size_t v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  size_t v18;
  size_t v19;
  void *v20;
  char *v21;
  void **v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  void **v27;

  v3 = *(const void **)(*(_QWORD *)a1 + 32);
  v5 = a2[1];
  v4 = a2[2];
  if (v5 < (_QWORD *)v4)
  {
    v6 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
    if (v6 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    v7 = v6;
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v8 = operator new(v14 + 1);
      v5[1] = v7;
      v5[2] = v15 | 0x8000000000000000;
      *v5 = v8;
    }
    else
    {
      *((_BYTE *)v5 + 23) = v6;
      v8 = v5;
      if (!v6)
        goto LABEL_19;
    }
    memmove(v8, v3, v7);
LABEL_19:
    *((_BYTE *)v8 + v7) = 0;
    v16 = (char *)(v5 + 3);
    a2[1] = v5 + 3;
    goto LABEL_39;
  }
  v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*a2) >> 3);
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a2) >> 3);
  v11 = 2 * v10;
  if (2 * v10 <= v9 + 1)
    v11 = v9 + 1;
  if (v10 >= 0x555555555555555)
    v12 = 0xAAAAAAAAAAAAAAALL;
  else
    v12 = v11;
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v13 = (char *)operator new(24 * v12);
  }
  else
  {
    v13 = 0;
  }
  v17 = &v13[24 * v9];
  v18 = strlen((const char *)v3);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v24 = v18 | 7;
    v25 = v24 + 1;
    v20 = operator new(v24 + 1);
    *((_QWORD *)v17 + 1) = v19;
    *((_QWORD *)v17 + 2) = v25 | 0x8000000000000000;
    *(_QWORD *)v17 = v20;
  }
  else
  {
    v17[23] = v18;
    v20 = v17;
    if (!v18)
    {
      v21 = &v13[24 * v12];
      *v17 = 0;
      v16 = v17 + 24;
      v22 = (void **)*a2;
      v23 = (void **)a2[1];
      if (v23 == *a2)
        goto LABEL_36;
      do
      {
LABEL_30:
        v26 = *(_OWORD *)(v23 - 3);
        *((_QWORD *)v17 - 1) = *(v23 - 1);
        *(_OWORD *)(v17 - 24) = v26;
        v17 -= 24;
        *(v23 - 2) = 0;
        *(v23 - 1) = 0;
        *(v23 - 3) = 0;
        v23 -= 3;
      }
      while (v23 != v22);
      v23 = (void **)*a2;
      v27 = (void **)a2[1];
      *a2 = v17;
      a2[1] = v16;
      a2[2] = v21;
      while (v27 != v23)
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      goto LABEL_37;
    }
  }
  memmove(v20, v3, v19);
  v21 = &v13[24 * v12];
  *((_BYTE *)v20 + v19) = 0;
  v16 = v17 + 24;
  v22 = (void **)*a2;
  v23 = (void **)a2[1];
  if (v23 != *a2)
    goto LABEL_30;
LABEL_36:
  *a2 = v17;
  a2[1] = v16;
  a2[2] = v21;
LABEL_37:
  if (v23)
    operator delete(v23);
LABEL_39:
  a2[1] = v16;
}

void sub_224109688(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_2241096A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_DWORD *sub_2241096A8(_DWORD ***a1)
{
  return sub_223844F44(**a1, (char *)(*a1)[1]);
}

void sub_2241096B4(uint64_t a1, uint64_t a2)
{
  sub_2241096C4((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

void sub_2241096C4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24EC696E8[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_22319BD1C((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_224109878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_2241098BC(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_2241099B4((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_2241099AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_2241099B4(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_224109BB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319C040((uint64_t)va);
  _Unwind_Resume(a1);
}

size_t sub_224109BC4(_QWORD **a1)
{
  _DWORD *v1;
  const char *v2;
  uint64_t v3;
  size_t result;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v1 = (_DWORD *)**a1;
  v2 = (const char *)(*a1)[1];
  v3 = v1[6];
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, _DWORD *))off_24EC696E8[v3])(&v9, v1);
  v1[6] = -1;
  result = strlen(v2);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v5 = result;
  if (result >= 0x17)
  {
    v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v7 = result | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    *((_QWORD *)v1 + 1) = v5;
    *((_QWORD *)v1 + 2) = v8 | 0x8000000000000000;
    *(_QWORD *)v1 = v6;
  }
  else
  {
    *((_BYTE *)v1 + 23) = result;
    v6 = v1;
    if (!result)
      goto LABEL_11;
  }
  result = (size_t)memmove(v6, v2, v5);
LABEL_11:
  *((_BYTE *)v6 + v5) = 0;
  v1[6] = 1;
  return result;
}

void sub_224109CB0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;
  const char *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  _BYTE v15[15];
  char v16;
  void *__p[2];
  unint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)((char *)v19 + 7) = *(_QWORD *)(a2 + 15);
  v4 = *(void **)a2;
  v19[0] = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v14 = v4;
  *(_QWORD *)v15 = v19[0];
  *(_QWORD *)&v15[7] = *(_QWORD *)((char *)v19 + 7);
  v16 = v5;
  memset(v19, 0, 15);
  v6 = __p;
  v7 = *(const char **)(v2 + 24);
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v6 = operator new(v11 + 1);
    __p[1] = v9;
    v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((_BYTE *)v9 + (_QWORD)v6) = 0;
    v10 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v10 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v10 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24EC696E8[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_22319BD1C((_QWORD *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0)
    goto LABEL_15;
}

void sub_224109E68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_224109EAC(uint64_t a1, void **a2)
{
  const void *v3;
  _BYTE *v4;
  _QWORD *v5;
  size_t v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  size_t v18;
  size_t v19;
  void *v20;
  char *v21;
  void **v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  void **v27;

  v3 = *(const void **)(*(_QWORD *)a1 + 32);
  v5 = a2[1];
  v4 = a2[2];
  if (v5 < (_QWORD *)v4)
  {
    v6 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
    if (v6 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    v7 = v6;
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v8 = operator new(v14 + 1);
      v5[1] = v7;
      v5[2] = v15 | 0x8000000000000000;
      *v5 = v8;
    }
    else
    {
      *((_BYTE *)v5 + 23) = v6;
      v8 = v5;
      if (!v6)
        goto LABEL_19;
    }
    memmove(v8, v3, v7);
LABEL_19:
    *((_BYTE *)v8 + v7) = 0;
    v16 = (char *)(v5 + 3);
    a2[1] = v5 + 3;
    goto LABEL_39;
  }
  v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*a2) >> 3);
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a2) >> 3);
  v11 = 2 * v10;
  if (2 * v10 <= v9 + 1)
    v11 = v9 + 1;
  if (v10 >= 0x555555555555555)
    v12 = 0xAAAAAAAAAAAAAAALL;
  else
    v12 = v11;
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v13 = (char *)operator new(24 * v12);
  }
  else
  {
    v13 = 0;
  }
  v17 = &v13[24 * v9];
  v18 = strlen((const char *)v3);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v24 = v18 | 7;
    v25 = v24 + 1;
    v20 = operator new(v24 + 1);
    *((_QWORD *)v17 + 1) = v19;
    *((_QWORD *)v17 + 2) = v25 | 0x8000000000000000;
    *(_QWORD *)v17 = v20;
  }
  else
  {
    v17[23] = v18;
    v20 = v17;
    if (!v18)
    {
      v21 = &v13[24 * v12];
      *v17 = 0;
      v16 = v17 + 24;
      v22 = (void **)*a2;
      v23 = (void **)a2[1];
      if (v23 == *a2)
        goto LABEL_36;
      do
      {
LABEL_30:
        v26 = *(_OWORD *)(v23 - 3);
        *((_QWORD *)v17 - 1) = *(v23 - 1);
        *(_OWORD *)(v17 - 24) = v26;
        v17 -= 24;
        *(v23 - 2) = 0;
        *(v23 - 1) = 0;
        *(v23 - 3) = 0;
        v23 -= 3;
      }
      while (v23 != v22);
      v23 = (void **)*a2;
      v27 = (void **)a2[1];
      *a2 = v17;
      a2[1] = v16;
      a2[2] = v21;
      while (v27 != v23)
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      goto LABEL_37;
    }
  }
  memmove(v20, v3, v19);
  v21 = &v13[24 * v12];
  *((_BYTE *)v20 + v19) = 0;
  v16 = v17 + 24;
  v22 = (void **)*a2;
  v23 = (void **)a2[1];
  if (v23 != *a2)
    goto LABEL_30;
LABEL_36:
  *a2 = v17;
  a2[1] = v16;
  a2[2] = v21;
LABEL_37:
  if (v23)
    operator delete(v23);
LABEL_39:
  a2[1] = v16;
}

void sub_22410A13C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_22410A154(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

size_t sub_22410A15C(_QWORD **a1)
{
  _DWORD *v1;
  const char *v2;
  uint64_t v3;
  size_t result;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v1 = (_DWORD *)**a1;
  v2 = (const char *)(*a1)[1];
  v3 = v1[6];
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, _DWORD *))off_24EC696E8[v3])(&v9, v1);
  v1[6] = -1;
  result = strlen(v2);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v5 = result;
  if (result >= 0x17)
  {
    v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v7 = result | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    *((_QWORD *)v1 + 1) = v5;
    *((_QWORD *)v1 + 2) = v8 | 0x8000000000000000;
    *(_QWORD *)v1 = v6;
  }
  else
  {
    *((_BYTE *)v1 + 23) = result;
    v6 = v1;
    if (!result)
      goto LABEL_11;
  }
  result = (size_t)memmove(v6, v2, v5);
LABEL_11:
  *((_BYTE *)v6 + v5) = 0;
  v1[6] = 1;
  return result;
}

void sub_22410A248(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;
  const char *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  _BYTE v15[15];
  char v16;
  void *__p[2];
  unint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)((char *)v19 + 7) = *(_QWORD *)(a2 + 15);
  v4 = *(void **)a2;
  v19[0] = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v14 = v4;
  *(_QWORD *)v15 = v19[0];
  *(_QWORD *)&v15[7] = *(_QWORD *)((char *)v19 + 7);
  v16 = v5;
  memset(v19, 0, 15);
  v6 = __p;
  v7 = *(const char **)(v2 + 24);
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v6 = operator new(v11 + 1);
    __p[1] = v9;
    v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((_BYTE *)v9 + (_QWORD)v6) = 0;
    v10 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v10 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v10 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24EC696E8[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_22319BD1C((_QWORD *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0)
    goto LABEL_15;
}

void sub_22410A400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_22410A444(uint64_t a1, void **a2)
{
  const void *v3;
  _BYTE *v4;
  _QWORD *v5;
  size_t v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  size_t v18;
  size_t v19;
  void *v20;
  char *v21;
  void **v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  void **v27;

  v3 = *(const void **)(*(_QWORD *)a1 + 32);
  v5 = a2[1];
  v4 = a2[2];
  if (v5 < (_QWORD *)v4)
  {
    v6 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
    if (v6 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    v7 = v6;
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v8 = operator new(v14 + 1);
      v5[1] = v7;
      v5[2] = v15 | 0x8000000000000000;
      *v5 = v8;
    }
    else
    {
      *((_BYTE *)v5 + 23) = v6;
      v8 = v5;
      if (!v6)
        goto LABEL_19;
    }
    memmove(v8, v3, v7);
LABEL_19:
    *((_BYTE *)v8 + v7) = 0;
    v16 = (char *)(v5 + 3);
    a2[1] = v5 + 3;
    goto LABEL_39;
  }
  v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*a2) >> 3);
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a2) >> 3);
  v11 = 2 * v10;
  if (2 * v10 <= v9 + 1)
    v11 = v9 + 1;
  if (v10 >= 0x555555555555555)
    v12 = 0xAAAAAAAAAAAAAAALL;
  else
    v12 = v11;
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v13 = (char *)operator new(24 * v12);
  }
  else
  {
    v13 = 0;
  }
  v17 = &v13[24 * v9];
  v18 = strlen((const char *)v3);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v24 = v18 | 7;
    v25 = v24 + 1;
    v20 = operator new(v24 + 1);
    *((_QWORD *)v17 + 1) = v19;
    *((_QWORD *)v17 + 2) = v25 | 0x8000000000000000;
    *(_QWORD *)v17 = v20;
  }
  else
  {
    v17[23] = v18;
    v20 = v17;
    if (!v18)
    {
      v21 = &v13[24 * v12];
      *v17 = 0;
      v16 = v17 + 24;
      v22 = (void **)*a2;
      v23 = (void **)a2[1];
      if (v23 == *a2)
        goto LABEL_36;
      do
      {
LABEL_30:
        v26 = *(_OWORD *)(v23 - 3);
        *((_QWORD *)v17 - 1) = *(v23 - 1);
        *(_OWORD *)(v17 - 24) = v26;
        v17 -= 24;
        *(v23 - 2) = 0;
        *(v23 - 1) = 0;
        *(v23 - 3) = 0;
        v23 -= 3;
      }
      while (v23 != v22);
      v23 = (void **)*a2;
      v27 = (void **)a2[1];
      *a2 = v17;
      a2[1] = v16;
      a2[2] = v21;
      while (v27 != v23)
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      goto LABEL_37;
    }
  }
  memmove(v20, v3, v19);
  v21 = &v13[24 * v12];
  *((_BYTE *)v20 + v19) = 0;
  v16 = v17 + 24;
  v22 = (void **)*a2;
  v23 = (void **)a2[1];
  if (v23 != *a2)
    goto LABEL_30;
LABEL_36:
  *a2 = v17;
  a2[1] = v16;
  a2[2] = v21;
LABEL_37:
  if (v23)
    operator delete(v23);
LABEL_39:
  a2[1] = v16;
}

void sub_22410A6D4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_22410A6EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_22410A6F4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void **v5;

  if (!*(_BYTE *)(a1 + 120))
  {
    if (!*(_BYTE *)(a1 + 112))
      return a1;
    if (!*(_BYTE *)(a1 + 104))
      goto LABEL_12;
    if (*(char *)(a1 + 103) < 0)
    {
      operator delete(*(void **)(a1 + 80));
      if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      {
LABEL_12:
        if (!*(_BYTE *)(a1 + 40))
          return a1;
        goto LABEL_13;
      }
    }
    else if ((*(char *)(a1 + 71) & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete(*(void **)(a1 + 48));
    if (!*(_BYTE *)(a1 + 40))
      return a1;
LABEL_13:
    if ((*(char *)(a1 + 39) & 0x80000000) == 0)
      return a1;
    operator delete(*(void **)(a1 + 16));
    return a1;
  }
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (void **)a1;
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else
  {
LABEL_6:
    v5 = (void **)a1;
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  operator delete(*v5);
  return a1;
}

uint64_t sub_22410A7F4(uint64_t a1)
{
  void **v2;
  void **v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;

  if (*(_BYTE *)(a1 + 40))
  {
    v2 = *(void ***)(a1 + 16);
    if (v2)
    {
      do
      {
        while (1)
        {
          v3 = (void **)*v2;
          v4 = (std::__shared_weak_count *)v2[6];
          if (v4)
          {
            p_shared_owners = (unint64_t *)&v4->__shared_owners_;
            do
              v6 = __ldaxr(p_shared_owners);
            while (__stlxr(v6 - 1, p_shared_owners));
            if (!v6)
            {
              ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
              std::__shared_weak_count::__release_weak(v4);
            }
          }
          if (*((char *)v2 + 39) < 0)
            break;
          operator delete(v2);
          v2 = v3;
          if (!v3)
            goto LABEL_12;
        }
        operator delete(v2[2]);
        operator delete(v2);
        v2 = v3;
      }
      while (v3);
    }
LABEL_12:
    v7 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v7)
      operator delete(v7);
  }
  return a1;
}

uint64_t *sub_22410A8B0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    if (v3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      v4 = *(_QWORD *)(v2 + 8);
      *(_QWORD *)(v2 + 8) = 0;
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    }
    MEMORY[0x227684CE8](v2, 0xA1C40BD48D6D6);
  }
  return a1;
}

uint64_t sub_22410A924(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void **v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  char v27;

  if (*(_BYTE *)(a1 + 112))
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 288) + 8) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 288) + 8));
  if (*(_BYTE *)(a1 + 456))
    sub_22410F644(a1 + 416, 0, 0);
  v2 = *(_QWORD *)(a1 + 288);
  *(_QWORD *)(a1 + 288) = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    if (v3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      v4 = *(_QWORD *)(v2 + 8);
      *(_QWORD *)(v2 + 8) = 0;
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    }
    MEMORY[0x227684CE8](v2, 0xA1C40BD48D6D6);
  }
  if (*(_BYTE *)(a1 + 456))
  {
    v5 = *(void ***)(a1 + 432);
    if (v5)
    {
      do
      {
        while (1)
        {
          v6 = (void **)*v5;
          v7 = (std::__shared_weak_count *)v5[6];
          if (v7)
          {
            p_shared_owners = (unint64_t *)&v7->__shared_owners_;
            do
              v9 = __ldaxr(p_shared_owners);
            while (__stlxr(v9 - 1, p_shared_owners));
            if (!v9)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
          if (*((char *)v5 + 39) < 0)
            break;
          operator delete(v5);
          v5 = v6;
          if (!v6)
            goto LABEL_21;
        }
        operator delete(v5[2]);
        operator delete(v5);
        v5 = v6;
      }
      while (v6);
    }
LABEL_21:
    v10 = *(void **)(a1 + 416);
    *(_QWORD *)(a1 + 416) = 0;
    if (v10)
      operator delete(v10);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 352));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 304));
  v11 = *(_QWORD *)(a1 + 288);
  *(_QWORD *)(a1 + 288) = 0;
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 8);
    *(_QWORD *)(v11 + 8) = 0;
    if (v12)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      v13 = *(_QWORD *)(v11 + 8);
      *(_QWORD *)(v11 + 8) = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    }
    MEMORY[0x227684CE8](v11, 0xA1C40BD48D6D6);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 224));
  v14 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = 0;
  if (v14)
    MEMORY[0x227684CE8](v14, 0x10A1C40756C35FELL);
  v15 = *(std::__shared_weak_count **)(a1 + 208);
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (*(_BYTE *)(a1 + 160))
  {
    v18 = *(_QWORD **)(a1 + 152);
    if (v18 == (_QWORD *)(a1 + 128))
    {
      v19 = 4;
      v18 = (_QWORD *)(a1 + 128);
      goto LABEL_40;
    }
    if (v18)
    {
      v19 = 5;
LABEL_40:
      (*(void (**)(void))(*v18 + 8 * v19))();
    }
  }
  if (*(_BYTE *)(a1 + 88))
  {
    v20 = *(_QWORD *)(a1 + 64);
    if (v20)
    {
      v21 = *(_QWORD *)(a1 + 72);
      v22 = *(void **)(a1 + 64);
      if (v21 != v20)
      {
        do
        {
          if (*(_BYTE *)(v21 - 8))
          {
            v23 = *(unsigned int *)(v21 - 16);
            if ((_DWORD)v23 != -1)
              ((void (*)(char *, uint64_t))off_24EC69908[v23])(&v27, v21 - 48);
            *(_DWORD *)(v21 - 16) = -1;
          }
          *(_QWORD *)(v21 - 816) = &off_24EC6A160;
          sub_223FF896C(v21 - 800);
          v21 -= 816;
        }
        while (v21 != v20);
        v22 = *(void **)(a1 + 64);
      }
      *(_QWORD *)(a1 + 72) = v20;
      operator delete(v22);
    }
  }
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  v24 = *(std::__shared_weak_count **)(a1 + 24);
  if (v24)
    std::__shared_weak_count::__release_weak(v24);
  v25 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  return a1;
}

void sub_22410AC48(uint64_t a1)
{
  sub_22410A924(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22410AC6C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  int v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _QWORD v25[13];
  void *v26[2];
  __int128 v27;
  uint64_t v28;
  unsigned __int8 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 __p;
  uint64_t v34;
  char v35;
  char v36;
  _QWORD *v37;

  v8 = a3 + 2;
  v9 = *(unsigned __int8 *)((*(uint64_t (**)(_QWORD *))(a3[2] + 16))(a3 + 2) + 96);
  v10 = (*(uint64_t (**)(_QWORD *))(*v8 + 16))(v8);
  v12 = v10;
  v13 = 80;
  if (v9)
    v10 += 80;
  else
    v13 = 0;
  v14 = (_OWORD *)(a2 + 168);
  if (*(_BYTE *)(a2 + 184))
  {
    v11 = (unsigned __int8 *)(a2 + 176);
    if (*(unsigned __int8 *)(a2 + 176) != *(unsigned __int8 *)(v10 + 8))
    {
      sub_224105E6C((uint64_t *)v10, v11, (uint64_t)v26);
      *(_OWORD *)a1 = *(_OWORD *)v26;
      *(_BYTE *)(a1 + 16) = 0;
      *(_BYTE *)(a1 + 112) = 0;
      if (v36)
      {
        *(_BYTE *)(a1 + 40) = 0;
        v15 = v29;
        if (v29)
        {
          *(_OWORD *)(a1 + 16) = v27;
          *(_QWORD *)(a1 + 32) = v28;
          v28 = 0;
          v27 = 0uLL;
          *(_BYTE *)(a1 + 40) = 1;
        }
        *(_BYTE *)(a1 + 48) = 0;
        *(_BYTE *)(a1 + 104) = 0;
        if (v35)
        {
          v16 = v32;
          *(_QWORD *)(a1 + 64) = v31;
          *(_OWORD *)(a1 + 48) = v30;
          v30 = 0uLL;
          *(_QWORD *)(a1 + 72) = v16;
          *(_OWORD *)(a1 + 80) = __p;
          *(_QWORD *)(a1 + 96) = v34;
          v31 = 0;
          __p = 0uLL;
          v34 = 0;
          *(_BYTE *)(a1 + 104) = 1;
        }
        *(_BYTE *)(a1 + 112) = 1;
        *(_BYTE *)(a1 + 120) = 0;
        if (v15 && SHIBYTE(v28) < 0)
        {
          v17 = (void *)v27;
LABEL_38:
          operator delete(v17);
          return;
        }
      }
      else
      {
        *(_BYTE *)(a1 + 120) = 0;
      }
      return;
    }
  }
  else
  {
    *v14 = *(_OWORD *)v10;
    *(_BYTE *)(a2 + 184) = 1;
  }
  v18 = *(_QWORD *)(v12 + v13) - *(_QWORD *)v14;
  if (!v18 || v18 < 0)
  {
    if (v18 <= -1000000001)
    {
      v25[0] = -(uint64_t)(-v18 / 0xF4240uLL);
      sub_224106180((uint64_t *)v10, v25, (uint64_t)v26);
      if (*(_BYTE *)(a2 + 160))
      {
        v22 = *(_QWORD *)(a2 + 152);
        if (!v22)
          sub_223198474();
        (*(void (**)(uint64_t, uint64_t, _QWORD *, void **))(*(_QWORD *)v22 + 48))(v22, a2 + 32, v8, v26);
      }
      if (v36)
      {
        if (v35)
        {
          if (SHIBYTE(v34) < 0)
            operator delete((void *)__p);
          if (SHIBYTE(v31) < 0)
            operator delete((void *)v30);
        }
        if (v29 && SHIBYTE(v28) < 0)
          operator delete((void *)v27);
      }
    }
  }
  else
  {
    v19 = *(unsigned __int8 *)((*(uint64_t (**)(_QWORD *, unsigned __int8 *))(*v8 + 16))(v8, v11) + 96);
    v20 = (*(uint64_t (**)(_QWORD *))(*v8 + 16))(v8);
    v21 = (_QWORD *)(v20 + 80);
    if (!v19)
      v21 = (_QWORD *)v20;
    *(_QWORD *)v14 = *v21;
  }
  LOBYTE(v26[0]) = 0;
  LOBYTE(v28) = 0;
  v25[0] = a2;
  v25[1] = v26;
  v25[2] = a3;
  v23 = *(unsigned int *)(a4 + 32);
  if ((_DWORD)v23 == -1)
    sub_22316DD70();
  v37 = v25;
  ((void (*)(_QWORD **, uint64_t))off_24EC69928[v23])(&v37, a4);
  if ((_BYTE)v28)
  {
    sub_2241158BC(*(_QWORD *)(a2 + 216), a2 + 192, (std::mutex *)(a2 + 224), (const std::__fs::filesystem::path *)(a2 + 32), a3, (const std::__fs::filesystem::path *)v26, *(unsigned __int8 *)(a2 + 464));
    v24 = v28;
    *(_BYTE *)(a1 + 120) = 1;
    if (v24 && SBYTE7(v27) < 0)
    {
      v17 = v26[0];
      goto LABEL_38;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 120) = 1;
  }
}

void sub_22410AF98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_22319723C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22410AFAC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int128 a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,__int128 __p,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28)
{
  uint64_t v28;
  _OWORD *v31;
  void *v32;
  char *v33;
  void *v34;
  char *v35;

  if (a28 && a26 < 0)
    operator delete((void *)__p);
  if (a2 == 4)
  {
    v31 = __cxa_begin_catch(a1);
    __p = v31[1];
    sub_22319FFBC(&a23, v31 + 2);
    sub_22319718C(v28, (uint64_t)&__p);
    sub_22319723C((uint64_t)&__p);
    __cxa_end_catch();
  }
  else
  {
    if (a2 == 3)
    {
      v32 = __cxa_begin_catch(a1);
      v33 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v32 + 16))(v32);
      sub_223208674(&a10, v33);
      a21 = 1;
      sub_224018FF0(2u, &a10, (uint64_t)&__p);
    }
    else
    {
      v34 = __cxa_begin_catch(a1);
      if (a2 == 2)
      {
        v35 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v34 + 16))(v34);
        sub_223208674(&a10, v35);
        a21 = 1;
        sub_224018FF0(3u, &a10, (uint64_t)&__p);
      }
      else
      {
        LOBYTE(a10) = 0;
        a21 = 0;
        sub_224018FF0(1u, &a10, (uint64_t)&__p);
      }
    }
    sub_22319718C(v28, (uint64_t)&__p);
    sub_22319723C((uint64_t)&__p);
    sub_22319FD28((uint64_t)&a10);
    __cxa_end_catch();
  }
  JUMPOUT(0x22410AF6CLL);
}

void sub_22410B0D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319FD28((uint64_t)va);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_22410B134(std::future<void> *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *__p[2];
  char v10;
  uint64_t v11[2];
  char v12;
  _QWORD v13[4];
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v11[0] = a2;
  v11[1] = a3;
  if (*(_BYTE *)(a2 + 88))
  {
    v6 = *(_QWORD *)(a3 + 24);
    if (!v6)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v6 = *(_QWORD *)(a3 + 24);
    }
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v6 + 48))(__p);
    v7 = *(_QWORD *)(a2 + 64);
    v8 = *(_QWORD *)(a2 + 72);
    if (v7 == v8)
      goto LABEL_12;
    while ((sub_22411DAD4(v7, a3) & 1) == 0)
    {
      v7 += 816;
      if (v7 == v8)
      {
        v7 = v8;
        break;
      }
    }
    if (v7 == *(_QWORD *)(a2 + 72))
    {
LABEL_12:
      v13[0] = 6;
      v14 = 0;
      sub_22410B38C(a1, v11, (uint64_t)v13);
      if (v14 == -1)
        goto LABEL_14;
    }
    else
    {
      if (*(_BYTE *)(v7 + 808))
      {
        sub_22410B38C(a1, v11, v7 + 768);
        goto LABEL_14;
      }
      v13[0] = 6;
      v14 = 0;
      sub_22410B38C(a1, v11, (uint64_t)v13);
      if (v14 == -1)
      {
LABEL_14:
        if (v10 < 0)
          operator delete(__p[0]);
        return;
      }
    }
    ((void (*)(char *, _QWORD *))off_24EC69908[v14])(&v12, v13);
    goto LABEL_14;
  }
  v13[0] = 6;
  v14 = 0;
  sub_22410B38C(a1, v11, (uint64_t)v13);
  if (v14 != -1)
    ((void (*)(void **, _QWORD *))off_24EC69908[v14])(__p, v13);
}

void sub_22410B328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_22410B38C(std::future<void> *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  signed int v8;
  std::chrono::steady_clock::time_point v9;
  signed int v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  std::promise<void> *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_weak_owners;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  char *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  void **v46;
  void *v47;
  std::__shared_weak_count *v48;
  uint64_t (***v49)();
  char *v50;
  char *v51;
  void **v52;
  std::future<void> *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *p_shared_owners;
  unint64_t v57;
  uint64_t (***v58)();
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  void **v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  uint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  uint64_t v82;
  std::chrono::steady_clock::time_point v83;
  std::chrono::system_clock::time_point v84;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v85;
  signed int v86;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v87;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v88;
  uint64_t v89;
  std::chrono::system_clock::time_point v90;
  uint64_t v91;
  std::future<void> v93;
  std::unique_lock<std::mutex> __lk;
  void *v95;
  std::__shared_weak_count *v96;
  std::promise<void> *v97;
  std::__shared_weak_count *v98;
  char v99;
  char v100;
  std::__shared_weak_count *v101[2];
  void *v102[2];
  uint64_t (**v103)();
  void *v104[2];
  std::__shared_weak_count *v105;
  char v106;
  void *__p;
  int v108;
  char v109;
  char v110;
  char v111;
  unsigned __int8 v112;
  _QWORD v113[3];
  _QWORD *v114;
  __int128 v115;
  uint64_t (**v116)();
  __int128 v117;
  uint64_t (***v118)();
  void *v119;
  std::__shared_weak_count *v120;
  void *v121[2];
  char v122;
  void **v123;
  int v124;
  uint64_t v125;

  v125 = *MEMORY[0x24BDAC8D0];
  v6 = *a2;
  if (*(_BYTE *)(*a2 + 112))
  {
    v7 = a2[1];
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v6 + 352);
    __lk.__owns_ = 1;
    std::mutex::lock((std::mutex *)(v6 + 352));
    if (!*(_BYTE *)(v6 + 104)
      || (v8 = atomic_load((unsigned int *)(v6 + 296)), *(_QWORD *)(v6 + 96) > (unint64_t)v8))
    {
LABEL_6:
      v11 = (unsigned int *)(v6 + 296);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
      v13 = *(_QWORD *)(v6 + 288);
      v113[0] = &off_24EC69AD8;
      v114 = v113;
      v14 = (std::promise<void> *)operator new(0x20uLL);
      v14[2].__state_ = 0;
      v14->__state_ = (std::__assoc_sub_state *)&unk_24EC2F420;
      v14[1].__state_ = 0;
      v97 = std::promise<void>::promise(v14 + 3);
      v98 = (std::__shared_weak_count *)v14;
      std::promise<void>::get_future(v97);
      v16 = *(std::__shared_weak_count **)(v6 + 16);
      v15 = *(std::__shared_weak_count **)(v6 + 24);
      if (v15)
      {
        p_shared_weak_owners = (unint64_t *)&v15->__shared_weak_owners_;
        do
          v18 = __ldxr(p_shared_weak_owners);
        while (__stxr(v18 + 1, p_shared_weak_owners));
      }
      v19 = *(void **)v7;
      v20 = *(_QWORD *)(v7 + 8);
      *(_QWORD *)&v115 = *(_QWORD *)v7;
      *((_QWORD *)&v115 + 1) = v20;
      if (v20)
      {
        v21 = (unint64_t *)(v20 + 8);
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      v24 = *(_QWORD *)(v7 + 24);
      v23 = *(_QWORD *)(v7 + 32);
      v116 = &off_24EC6A3B8;
      *(_QWORD *)&v117 = v24;
      *((_QWORD *)&v117 + 1) = v23;
      if (v23)
      {
        v25 = (unint64_t *)(v23 + 8);
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
      }
      LOBYTE(v121[0]) = 0;
      v124 = -1;
      v27 = *(unsigned int *)(a3 + 32);
      if ((_DWORD)v27 != -1)
      {
        ((void (*)(char *, void **, uint64_t))off_24EC69918[v27])(&v99, v121, a3);
        v124 = v27;
        v19 = (void *)v115;
      }
      v101[0] = v16;
      v101[1] = v15;
      v102[0] = v19;
      v102[1] = *((void **)&v115 + 1);
      v115 = 0uLL;
      v103 = &off_24EC6A3B8;
      *(_OWORD *)v104 = v117;
      v117 = 0uLL;
      LOBYTE(v105) = 0;
      v108 = -1;
      if ((_DWORD)v27 != -1)
      {
        ((void (*)(char *, std::__shared_weak_count **, void **))off_24EC699B8[v27])(&v100, &v105, v121);
        v108 = v27;
      }
      v28 = (char *)operator new(0x78uLL);
      v29 = v28;
      v30 = *(_OWORD *)v102;
      *(_OWORD *)(v28 + 24) = *(_OWORD *)v101;
      v31 = v28 + 24;
      *(_QWORD *)v28 = &off_24EC69978;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = 0;
      v101[0] = 0;
      v101[1] = 0;
      *(_OWORD *)(v28 + 40) = v30;
      v102[0] = 0;
      v102[1] = 0;
      *((_QWORD *)v28 + 7) = &off_24EC6A3B8;
      *((_OWORD *)v28 + 4) = *(_OWORD *)v104;
      v104[0] = 0;
      v104[1] = 0;
      v28[80] = 0;
      *((_DWORD *)v28 + 28) = -1;
      if ((_DWORD)v27 == -1)
      {
        v95 = v28 + 24;
        v96 = (std::__shared_weak_count *)v28;
        v108 = -1;
        v32 = (std::__shared_weak_count *)v104[1];
        if (!v104[1])
          goto LABEL_33;
      }
      else
      {
        ((void (*)(char *, char *, std::__shared_weak_count **))off_24EC699B8[v27])(&v100, v28 + 80, &v105);
        *((_DWORD *)v29 + 28) = v27;
        v95 = v31;
        v96 = (std::__shared_weak_count *)v29;
        if (v108 != -1)
          ((void (*)(char *, std::__shared_weak_count **))off_24EC69908[v108])(&v100, &v105);
        v108 = -1;
        v32 = (std::__shared_weak_count *)v104[1];
        if (!v104[1])
        {
LABEL_33:
          v35 = (std::__shared_weak_count *)v102[1];
          if (v102[1])
          {
            v36 = (unint64_t *)((char *)v102[1] + 8);
            do
              v37 = __ldaxr(v36);
            while (__stlxr(v37 - 1, v36));
            if (!v37)
            {
              ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
              std::__shared_weak_count::__release_weak(v35);
            }
          }
          if (v101[1])
            std::__shared_weak_count::__release_weak(v101[1]);
          if (v124 != -1)
            ((void (*)(char *, void **))off_24EC69908[v124])(&v100, v121);
          v38 = (std::__shared_weak_count *)*((_QWORD *)&v117 + 1);
          if (*((_QWORD *)&v117 + 1))
          {
            v39 = (unint64_t *)(*((_QWORD *)&v117 + 1) + 8);
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
              std::__shared_weak_count::__release_weak(v38);
            }
          }
          v41 = (std::__shared_weak_count *)*((_QWORD *)&v115 + 1);
          if (*((_QWORD *)&v115 + 1))
          {
            v42 = (unint64_t *)(*((_QWORD *)&v115 + 1) + 8);
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = (std::__shared_weak_count *)v97;
          v45 = v98;
          v101[0] = (std::__shared_weak_count *)v97;
          v101[1] = v98;
          v97 = 0;
          v98 = 0;
          v46 = v102;
          if (v114)
          {
            if (v114 == v113)
            {
              v104[0] = v102;
              (*(void (**)(uint64_t, _QWORD *))(v113[0] + 24))((uint64_t)v113, v102);
              v44 = v101[0];
              v45 = v101[1];
            }
            else
            {
              v104[0] = v114;
              v114 = 0;
            }
          }
          else
          {
            v104[0] = 0;
          }
          v47 = v95;
          v48 = v96;
          v104[1] = v95;
          v105 = v96;
          v95 = 0;
          v96 = 0;
          *(_QWORD *)&v115 = v44;
          *((_QWORD *)&v115 + 1) = v45;
          v101[0] = 0;
          v101[1] = 0;
          v49 = &v116;
          if (v104[0])
          {
            if (v104[0] == v102)
            {
              v118 = &v116;
              (*((void (**)(void **, uint64_t (***)()))v102[0] + 3))(v102, &v116);
              v47 = v104[1];
              v48 = v105;
            }
            else
            {
              v118 = (uint64_t (***)())v104[0];
              v104[0] = 0;
            }
          }
          else
          {
            v118 = 0;
          }
          v119 = v47;
          v120 = v48;
          v104[1] = 0;
          v105 = 0;
          v123 = 0;
          v50 = (char *)operator new(0x48uLL);
          v51 = v50;
          *(_QWORD *)v50 = &off_24EC699D8;
          *(_OWORD *)(v50 + 8) = v115;
          v115 = 0uLL;
          if (v118)
          {
            if (v118 == &v116)
            {
              *((_QWORD *)v50 + 6) = v50 + 24;
              ((void (*)(uint64_t (***)()))v116[3])(&v116);
              v47 = v119;
              v48 = v120;
            }
            else
            {
              *((_QWORD *)v50 + 6) = v118;
              v118 = 0;
            }
          }
          else
          {
            *((_QWORD *)v50 + 6) = 0;
          }
          *((_QWORD *)v51 + 7) = v47;
          *((_QWORD *)v51 + 8) = v48;
          v119 = 0;
          v120 = 0;
          v123 = (void **)v51;
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v13 + 40))(v13, v121);
          v52 = v123;
          if (v123 == v121)
          {
            v54 = 4;
            v52 = v121;
            v53 = a1;
          }
          else
          {
            v53 = a1;
            if (!v123)
            {
LABEL_72:
              v55 = v120;
              if (!v120)
                goto LABEL_76;
              p_shared_owners = (unint64_t *)&v120->__shared_owners_;
              do
                v57 = __ldaxr(p_shared_owners);
              while (__stlxr(v57 - 1, p_shared_owners));
              if (!v57)
              {
                ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                std::__shared_weak_count::__release_weak(v55);
                v58 = v118;
                if (v118 != &v116)
                  goto LABEL_77;
              }
              else
              {
LABEL_76:
                v58 = v118;
                if (v118 != &v116)
                {
LABEL_77:
                  if (!v58)
                  {
LABEL_82:
                    v60 = (std::__shared_weak_count *)*((_QWORD *)&v115 + 1);
                    if (!*((_QWORD *)&v115 + 1))
                      goto LABEL_86;
                    v61 = (unint64_t *)(*((_QWORD *)&v115 + 1) + 8);
                    do
                      v62 = __ldaxr(v61);
                    while (__stlxr(v62 - 1, v61));
                    if (!v62)
                    {
                      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                      std::__shared_weak_count::__release_weak(v60);
                      v63 = v105;
                      if (!v105)
                        goto LABEL_90;
                    }
                    else
                    {
LABEL_86:
                      v63 = v105;
                      if (!v105)
                        goto LABEL_90;
                    }
                    v64 = (unint64_t *)&v63->__shared_owners_;
                    do
                      v65 = __ldaxr(v64);
                    while (__stlxr(v65 - 1, v64));
                    if (!v65)
                    {
                      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                      std::__shared_weak_count::__release_weak(v63);
                      v66 = (void **)v104[0];
                      if (v104[0] != v102)
                        goto LABEL_91;
                      goto LABEL_96;
                    }
LABEL_90:
                    v66 = (void **)v104[0];
                    if (v104[0] != v102)
                    {
LABEL_91:
                      if (!v66)
                      {
LABEL_98:
                        v68 = v101[1];
                        if (v101[1])
                        {
                          v69 = &v101[1]->__shared_owners_;
                          do
                            v70 = __ldaxr((unint64_t *)v69);
                          while (__stlxr(v70 - 1, (unint64_t *)v69));
                          if (!v70)
                          {
                            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                            std::__shared_weak_count::__release_weak(v68);
                          }
                        }
                        v71 = v96;
                        if (!v96)
                          goto LABEL_107;
                        v72 = (unint64_t *)&v96->__shared_owners_;
                        do
                          v73 = __ldaxr(v72);
                        while (__stlxr(v73 - 1, v72));
                        if (!v73)
                        {
                          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                          std::__shared_weak_count::__release_weak(v71);
                          v74 = v98;
                          if (!v98)
                            goto LABEL_111;
                        }
                        else
                        {
LABEL_107:
                          v74 = v98;
                          if (!v98)
                            goto LABEL_111;
                        }
                        v75 = (unint64_t *)&v74->__shared_owners_;
                        do
                          v76 = __ldaxr(v75);
                        while (__stlxr(v76 - 1, v75));
                        if (!v76)
                        {
                          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                          std::__shared_weak_count::__release_weak(v74);
                          v77 = v114;
                          if (v114 != v113)
                            goto LABEL_112;
                          goto LABEL_117;
                        }
LABEL_111:
                        v77 = v114;
                        if (v114 != v113)
                        {
LABEL_112:
                          if (!v77)
                          {
LABEL_119:
                            if (__lk.__owns_)
                              std::mutex::unlock(__lk.__m_);
                            v53->__state_ = v93.__state_;
                            v93.__state_ = 0;
                            LOBYTE(v53[1].__state_) = 1;
                            std::future<void>::~future(&v93);
                            return;
                          }
                          v78 = 5;
LABEL_118:
                          (*(void (**)(void))(*v77 + 8 * v78))();
                          goto LABEL_119;
                        }
LABEL_117:
                        v78 = 4;
                        v77 = v113;
                        goto LABEL_118;
                      }
                      v67 = 5;
                      v46 = v66;
LABEL_97:
                      (*((void (**)(void **))*v46 + v67))(v46);
                      goto LABEL_98;
                    }
LABEL_96:
                    v67 = 4;
                    goto LABEL_97;
                  }
                  v59 = 5;
                  v49 = v58;
LABEL_81:
                  ((void (*)(uint64_t (***)()))(*v49)[v59])(v49);
                  goto LABEL_82;
                }
              }
              v59 = 4;
              goto LABEL_81;
            }
            v54 = 5;
          }
          (*((void (**)(void))*v52 + v54))();
          goto LABEL_72;
        }
      }
      v33 = (unint64_t *)&v32->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
      goto LABEL_33;
    }
    v9.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v10 = atomic_load((unsigned int *)(v6 + 296));
    if (!*(_BYTE *)(v6 + 104))
      goto LABEL_192;
    if (*(_QWORD *)(v6 + 96) > (unint64_t)v10)
      goto LABEL_6;
    rep = v9.__d_.__rep_;
    LODWORD(v117) = 0;
    sub_22410E024(&v115, "blocking caller while waiting for space in queue");
    if ((_DWORD)v117 == -1)
LABEL_193:
      sub_22316DD70();
    v113[0] = &v97;
    ((void (*)(void **__return_ptr, _QWORD *, __int128 *))off_24EC69950[v117])(v121, v113, &v115);
    if ((_DWORD)v117 != -1)
      ((void (*)(_QWORD *, __int128 *))off_24EC69938[v117])(v113, &v115);
    sub_224106604((uint64_t)v121, *(_QWORD *)(v6 + 96), *(_QWORD *)(v6 + 104), (uint64_t)v101);
    v91 = v7 + 16;
    if (*(_BYTE *)(v6 + 160))
    {
      v82 = *(_QWORD *)(v6 + 152);
      if (!v82)
LABEL_194:
        sub_223198474();
      (*(void (**)(uint64_t, uint64_t, uint64_t, std::__shared_weak_count **))(*(_QWORD *)v82 + 48))(v82, v6 + 32, v91, v101);
    }
    if (v111)
    {
      if (v110)
      {
        if (v109 < 0)
          operator delete(__p);
        if (v106 < 0)
          operator delete(v104[1]);
      }
      if (LOBYTE(v104[0]) && SHIBYTE(v103) < 0)
        operator delete(v102[0]);
    }
    if (v122 < 0)
      operator delete(v121[0]);
    v83.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    std::chrono::steady_clock::now();
    v84.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    v85.__d_.__rep_ = 1000000000;
    if (v84.__d_.__rep_)
    {
      if (v84.__d_.__rep_ <= 0)
      {
        v85.__d_.__rep_ = 0x800000003B9ACA00;
        if ((unint64_t)v84.__d_.__rep_ < 0xFFDF3B645A1CAC09)
          goto LABEL_160;
      }
      else if ((unint64_t)v84.__d_.__rep_ >= 0x20C49BA5D411B8)
      {
        v85.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_160;
      }
      v85.__d_.__rep_ = 1000 * v84.__d_.__rep_ + 1000000000;
    }
LABEL_160:
    std::condition_variable::__do_timed_wait((std::condition_variable *)(v6 + 304), &__lk, v85);
    std::chrono::steady_clock::now();
    v86 = atomic_load((unsigned int *)(v6 + 296));
    if (*(_BYTE *)(v6 + 104))
    {
      v87 = v83.__d_.__rep_ - rep;
      while (1)
      {
        if (*(_QWORD *)(v6 + 96) > (unint64_t)v86)
          goto LABEL_6;
        if (std::chrono::steady_clock::now().__d_.__rep_ - (v87 + rep) >= 500000000)
          break;
LABEL_182:
        std::chrono::steady_clock::now();
        v90.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        v88.__d_.__rep_ = 1000000000;
        if (v90.__d_.__rep_)
        {
          if (v90.__d_.__rep_ < 1)
          {
            if ((unint64_t)v90.__d_.__rep_ >= 0xFFDF3B645A1CAC09)
              v88.__d_.__rep_ = 1000 * v90.__d_.__rep_ + 1000000000;
            else
              v88.__d_.__rep_ = 0x800000003B9ACA00;
          }
          else if ((unint64_t)v90.__d_.__rep_ >= 0x20C49BA5D411B8)
          {
            v88.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
          }
          else
          {
            v88.__d_.__rep_ = 1000 * v90.__d_.__rep_ + 1000000000;
          }
        }
        std::condition_variable::__do_timed_wait((std::condition_variable *)(v6 + 304), &__lk, v88);
        std::chrono::steady_clock::now();
        v86 = atomic_load((unsigned int *)(v6 + 296));
        if (!*(_BYTE *)(v6 + 104))
          goto LABEL_192;
      }
      LODWORD(v117) = 0;
      sub_22410E024(&v115, "blocking caller while waiting for space in queue");
      if ((_DWORD)v117 == -1)
        goto LABEL_193;
      v113[0] = &v97;
      ((void (*)(void **__return_ptr, _QWORD *, __int128 *))off_24EC69950[v117])(v121, v113, &v115);
      if ((_DWORD)v117 != -1)
        ((void (*)(_QWORD *, __int128 *))off_24EC69938[v117])(v113, &v115);
      sub_224106604((uint64_t)v121, *(_QWORD *)(v6 + 96), *(_QWORD *)(v6 + 104), (uint64_t)v101);
      if (*(_BYTE *)(v6 + 160))
      {
        v89 = *(_QWORD *)(v6 + 152);
        if (!v89)
          goto LABEL_194;
        (*(void (**)(uint64_t, uint64_t, uint64_t, std::__shared_weak_count **))(*(_QWORD *)v89 + 48))(v89, v6 + 32, v91, v101);
      }
      if (!v111)
        goto LABEL_179;
      if (!v110)
        goto LABEL_176;
      if (v109 < 0)
      {
        operator delete(__p);
        if ((v106 & 0x80000000) == 0)
        {
LABEL_176:
          if (LOBYTE(v104[0]))
            goto LABEL_177;
          goto LABEL_179;
        }
      }
      else if ((v106 & 0x80000000) == 0)
      {
        goto LABEL_176;
      }
      operator delete(v104[1]);
      if (LOBYTE(v104[0]))
      {
LABEL_177:
        if (SHIBYTE(v103) < 0)
          operator delete(v102[0]);
      }
LABEL_179:
      if (v122 < 0)
        operator delete(v121[0]);
      v87 = std::chrono::steady_clock::now().__d_.__rep_ - rep;
      goto LABEL_182;
    }
LABEL_192:
    sub_22324A974();
  }
  sub_22410AC6C((uint64_t)v101, *a2, (_QWORD *)a2[1], a3);
  if (v112)
  {
    LOBYTE(a1->__state_) = 0;
    LOBYTE(a1[1].__state_) = 0;
    return;
  }
  if (!*(_BYTE *)(v6 + 160))
  {
    LOBYTE(a1->__state_) = 0;
    LOBYTE(a1[1].__state_) = 0;
LABEL_149:
    if (v111)
    {
      if (v110)
      {
        if (v109 < 0)
          operator delete(__p);
        if (v106 < 0)
          operator delete(v104[1]);
      }
      if (LOBYTE(v104[0]) && SHIBYTE(v103) < 0)
        operator delete(v102[0]);
    }
    return;
  }
  v79 = *(_QWORD *)(v6 + 152);
  if (!v79)
    sub_223198474();
  (*(void (**)(uint64_t, uint64_t, uint64_t, std::__shared_weak_count **))(*(_QWORD *)v79 + 48))(v79, v6 + 32, a2[1] + 16, v101);
  v80 = v112;
  LOBYTE(a1->__state_) = 0;
  LOBYTE(a1[1].__state_) = 0;
  if (!v80)
    goto LABEL_149;
}

void sub_22410C030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::future<void> a11, std::mutex *a12, char a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, char a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  uint64_t v44;

  sub_22319723C((uint64_t)&a25);
  if (*(char *)(v44 - 113) < 0)
    operator delete(*(void **)(v44 - 136));
  if (!a13)
    _Unwind_Resume(a1);
  std::mutex::unlock(a12);
  _Unwind_Resume(a1);
}

uint64_t sub_22410C210(uint64_t a1, uint64_t a2)
{
  std::future<void> v4;
  char v5;

  sub_22410B134(&v4, a1, a2);
  if (v5)
    std::future<void>::~future(&v4);
  return a1;
}

_QWORD *sub_22410C258(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  char *v13;
  uint64_t *v14;
  __int128 v15;
  _OWORD *v16;
  uint64_t v17;
  BOOL v18;
  void **v19;
  size_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  void **v34;
  char *v35;
  void **v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  void **v43;
  uint64_t v44;
  void **__dst;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  void *v51[2];
  uint64_t v52;
  char v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  void *v56;
  char v57;
  void *__p;
  char v59;
  char v60;
  char v61;
  char v62;
  uint64_t v63;
  _QWORD v64[3];
  void **v65;
  char v66;
  void *v67;
  void *v68;
  uint64_t v69;
  void **v70;
  char v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  *a1 = &off_24EC698B0;
  LOBYTE(v64[0]) = 0;
  v66 = 0;
  if (*(_BYTE *)(a4 + 32))
  {
    v9 = *(_QWORD *)(a4 + 24);
    if (v9)
    {
      if (v9 == a4)
      {
        v65 = (void **)v64;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a4 + 24))(a4, v64);
      }
      else
      {
        v65 = *(void ***)(a4 + 24);
        *(_QWORD *)(a4 + 24) = 0;
      }
    }
    else
    {
      v65 = 0;
    }
    v66 = 1;
  }
  if (*(_BYTE *)(a3 + 48))
  {
    sub_2245036A4("VDataExporter", 0, 2u, 0, 0, 0, (uint64_t *)&v67);
    v10 = v67;
    v51[0] = &off_24EC77B98;
    v51[1] = v67;
    v11 = (_QWORD *)operator new();
    *v11 = &off_24EC58560;
    v12 = (_QWORD *)operator new();
    *v12 = &off_24EC77B98;
    v12[1] = v10;
    v11[1] = v12;
  }
  else
  {
    v11 = 0;
  }
  v13 = (char *)operator new(0x1F0uLL);
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  *(_QWORD *)v13 = &off_24EC69A88;
  LOBYTE(v67) = 0;
  v71 = 0;
  if (v66)
  {
    if (v65)
    {
      if (v65 == v64)
      {
        v70 = &v67;
        (*(void (**)(_QWORD *, void **))(v64[0] + 24))(v64, &v67);
      }
      else
      {
        v70 = v65;
        v65 = 0;
      }
    }
    else
    {
      v70 = 0;
    }
    v71 = 1;
  }
  *((_OWORD *)v13 + 2) = 0u;
  v14 = (uint64_t *)(v13 + 32);
  *((_QWORD *)v13 + 3) = &off_24EC69878;
  __dst = (void **)(v13 + 56);
  *((_OWORD *)v13 + 3) = 0u;
  *((_OWORD *)v13 + 4) = 0u;
  *((_QWORD *)v13 + 10) = a5;
  sub_223EDA3FC((uint64_t)(v13 + 88), a3);
  v13[152] = 0;
  v15 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v13 + 120) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v13 + 136) = v15;
  v13[184] = 0;
  if (v71)
  {
    if (v70)
    {
      if (v70 == &v67)
      {
        *((_QWORD *)v13 + 22) = v13 + 152;
        (*((void (**)(void **, char *))v67 + 3))(&v67, v13 + 152);
      }
      else
      {
        *((_QWORD *)v13 + 22) = v70;
        v70 = 0;
      }
    }
    else
    {
      *((_QWORD *)v13 + 22) = 0;
    }
    v13[184] = 1;
  }
  *((_QWORD *)v13 + 31) = 850045863;
  v13[192] = 0;
  *((_QWORD *)v13 + 27) = &off_24EC71C10;
  v13[208] = 0;
  *((_QWORD *)v13 + 28) = 0;
  *((_QWORD *)v13 + 29) = 0;
  *((_QWORD *)v13 + 30) = 0;
  *((_OWORD *)v13 + 16) = 0u;
  *((_OWORD *)v13 + 17) = 0u;
  *((_OWORD *)v13 + 18) = 0u;
  *((_QWORD *)v13 + 38) = 0;
  *((_QWORD *)v13 + 39) = v11;
  *((_DWORD *)v13 + 80) = 0;
  *((_QWORD *)v13 + 41) = 1018212795;
  *((_OWORD *)v13 + 21) = 0u;
  *((_OWORD *)v13 + 22) = 0u;
  *((_QWORD *)v13 + 46) = 0;
  *((_QWORD *)v13 + 47) = 850045863;
  v16 = v13 + 440;
  v13[480] = 0;
  *((_OWORD *)v13 + 24) = 0u;
  *((_OWORD *)v13 + 26) = 0u;
  *(_OWORD *)(v13 + 425) = 0u;
  v17 = *((_QWORD *)v13 + 18);
  *((_OWORD *)v13 + 25) = 0u;
  if ((unint64_t)(v17 - 1) < 2)
  {
    *v16 = 0uLL;
    *(_OWORD *)(v13 + 456) = 0uLL;
    *((_DWORD *)v13 + 118) = 1065353216;
    v13[480] = 1;
LABEL_30:
    v18 = (v17 & 0xFFFFFFFFFFFFFFFELL) == 2;
    goto LABEL_31;
  }
  if (v17)
    goto LABEL_30;
  if (*(_BYTE *)(a3 + 48))
  {
    *v16 = 0uLL;
    *(_OWORD *)(v13 + 456) = 0uLL;
    *((_DWORD *)v13 + 118) = 1065353216;
    v13[480] = 1;
    v13[488] = 0;
    goto LABEL_32;
  }
  v18 = 1;
LABEL_31:
  v13[488] = v18;
LABEL_32:
  v47 = 0x500000001;
  v48 = 0;
  v49 = 1;
  v50 = 0;
  sub_224112A90(a2, a5, (uint64_t)&v47, (uint64_t)v51);
  if (!v62)
  {
    sub_22319593C((uint64_t)v51);
    sub_22401682C((uint64_t)v51);
  }
  if (v13[79] < 0)
  {
    if (v52 >= 0)
      v19 = v51;
    else
      v19 = (void **)v51[0];
    if (v52 >= 0)
      v20 = HIBYTE(v52);
    else
      v20 = (size_t)v51[1];
    sub_22319C4B8(__dst, v19, v20);
  }
  else if (v52 < 0)
  {
    sub_22319C3F4(__dst, v51[0], (size_t)v51[1]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)v51;
    *((_QWORD *)v13 + 9) = v52;
  }
  v22 = v54;
  v21 = v55;
  if (v55)
  {
    p_shared_owners = (unint64_t *)&v55->__shared_owners_;
    do
      v24 = __ldxr(p_shared_owners);
    while (__stxr(v24 + 1, p_shared_owners));
  }
  v25 = (std::__shared_weak_count *)*((_QWORD *)v13 + 29);
  *((_QWORD *)v13 + 28) = v22;
  *((_QWORD *)v13 + 29) = v21;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v13 + 28) + 16))(*((_QWORD *)v13 + 28));
  v29 = (_QWORD *)operator new();
  v63 = 0x400000001;
  sub_224551A6C((uint64_t)v29, &v63, v28, 0, 0, 0);
  *v29 = &off_24EC69D30;
  v29[2] = &unk_24EC69E80;
  v30 = *((_QWORD *)v13 + 30);
  *((_QWORD *)v13 + 30) = v29;
  if (v30)
    MEMORY[0x227684CE8](v30, 0x10A1C40756C35FELL);
  if (v62)
  {
    v31 = v55;
    if (!v55)
      goto LABEL_59;
    v32 = (unint64_t *)&v55->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (v33)
    {
LABEL_59:
      if ((SHIBYTE(v52) & 0x80000000) == 0)
        goto LABEL_72;
      goto LABEL_60;
    }
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
    if (SHIBYTE(v52) < 0)
    {
LABEL_60:
      v34 = v51;
LABEL_70:
      operator delete(*v34);
    }
  }
  else if (v61)
  {
    if (v60)
    {
      if (v59 < 0)
        operator delete(__p);
      if (v57 < 0)
        operator delete(v56);
    }
    if ((_BYTE)v55 && SHIBYTE(v54) < 0)
    {
      v34 = (void **)&v52;
      goto LABEL_70;
    }
  }
LABEL_72:
  v35 = v13 + 24;
  if (v71)
  {
    v36 = v70;
    if (v70 == &v67)
    {
      v37 = 4;
      v36 = &v67;
      goto LABEL_77;
    }
    if (v70)
    {
      v37 = 5;
LABEL_77:
      (*((void (**)(void))*v36 + v37))();
    }
  }
  a1[1] = v35;
  a1[2] = v13;
  v38 = (_QWORD *)operator new();
  v67 = 0;
  v68 = 0;
  v69 = 0;
  LOBYTE(v51[0]) = 0;
  v53 = 0;
  sub_2241277A4(v38, 1, (uint64_t)&v67, (uint64_t *)v51);
  if (v53 && SHIBYTE(v52) < 0)
    operator delete(v51[0]);
  if (v67)
  {
    v68 = v67;
    operator delete(v67);
  }
  v39 = *v14;
  *v14 = (uint64_t)v38;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  v40 = (unint64_t *)(v13 + 16);
  do
    v41 = __ldxr(v40);
  while (__stxr(v41 + 1, v40));
  v42 = (std::__shared_weak_count *)*((_QWORD *)v13 + 6);
  *((_QWORD *)v13 + 5) = v35;
  *((_QWORD *)v13 + 6) = v13;
  if (v42)
    std::__shared_weak_count::__release_weak(v42);
  if (v66)
  {
    v43 = v65;
    if (v65 == v64)
    {
      v44 = 4;
      v43 = (void **)v64;
      goto LABEL_94;
    }
    if (v65)
    {
      v44 = 5;
LABEL_94:
      (*((void (**)(void))*v43 + v44))();
    }
  }
  return a1;
}

void sub_22410C9D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_22410CC5C(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    if (*(_BYTE *)(v2 + 112))
      (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 288) + 8) + 24))(*(_QWORD *)(*(_QWORD *)(v2 + 288) + 8));
    if (*(_BYTE *)(v2 + 456))
      sub_22410F644(v2 + 416, 0, 0);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3)
    return a1;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return a1;
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_22410CD04(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    if (*(_BYTE *)(v2 + 112))
      (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 288) + 8) + 24))(*(_QWORD *)(*(_QWORD *)(v2 + 288) + 8));
    if (*(_BYTE *)(v2 + 456))
      sub_22410F644(v2 + 416, 0, 0);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22410CDAC(uint64_t a1, uint64_t a2)
{
  std::future<void> v4;
  char v5;

  sub_22410B134(&v4, *(_QWORD *)(a1 + 8), a2);
  if (v5)
    std::future<void>::~future(&v4);
  return a1;
}

uint64_t sub_22410CDF4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48) && *(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_22410CE54(uint64_t a1)
{
  sub_223B8842C(a1 + 32);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_22410CE9C(uint64_t a1)
{
  if ((*(char *)(a1 + 151) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 119) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(*(void **)(a1 + 96));
    if (!*(_BYTE *)(a1 + 88))
      goto LABEL_8;
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 128));
  if (*(char *)(a1 + 119) < 0)
    goto LABEL_6;
LABEL_3:
  if (!*(_BYTE *)(a1 + 88))
  {
LABEL_8:
    if ((*(char *)(a1 + 63) & 0x80000000) == 0)
      goto LABEL_9;
LABEL_12:
    operator delete(*(void **)(a1 + 40));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_13;
  }
LABEL_7:
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
    goto LABEL_8;
  operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    goto LABEL_12;
LABEL_9:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_13:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_22410CF48(uint64_t a1)
{
  if (*(char *)(a1 + 143) < 0)
  {
    operator delete(*(void **)(a1 + 120));
    if ((*(char *)(a1 + 119) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 87) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 96));
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 63) & 0x80000000) == 0)
      goto LABEL_5;
LABEL_10:
    operator delete(*(void **)(a1 + 40));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_11;
  }
LABEL_9:
  operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    goto LABEL_10;
LABEL_5:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_11:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_22410CFE8(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24EC69908[v2])(&v4, a1);
  *(_DWORD *)(a1 + 32) = -1;
  return a1;
}

void sub_22410D040(char *__p)
{
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  do
  {
    while (1)
    {
      v2 = *(char **)__p;
      v3 = (std::__shared_weak_count *)*((_QWORD *)__p + 6);
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      if (__p[39] < 0)
        break;
      operator delete(__p);
      __p = v2;
      if (!v2)
        return;
    }
    operator delete(*((void **)__p + 2));
    operator delete(__p);
    __p = v2;
  }
  while (v2);
}

void sub_22410D0DC()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22410D0F4(uint64_t a1)
{
  char v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *result;
  char v6;
  char v7;

  v2 = *(_BYTE *)(a1 + 34);
  if (*(_QWORD *)(a1 + 40))
  {
    v3 = *(_QWORD **)(a1 + 24);
    v6 = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v3, (uint64_t)&v6, 1);
  }
  v4 = *(_QWORD **)(a1 + 24);
  v7 = v2;
  result = sub_2231813E8(v4, (uint64_t)&v7, 1);
  ++*(_QWORD *)(a1 + 40);
  return result;
}

uint64_t sub_22410D15C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 40))
  {
    v2 = *(_QWORD **)(a1 + 24);
    v4 = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v2, (uint64_t)&v4, 1);
  }
  result = std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  return result;
}

void sub_22410D1BC(uint64_t a1, unsigned __int8 *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  void *__p[2];
  char v7;

  if (*(_QWORD *)(a1 + 40))
  {
    v4 = *(_QWORD **)(a1 + 24);
    LOBYTE(__p[0]) = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v4, (uint64_t)__p, 1);
  }
  v5 = *(_QWORD **)(a1 + 24);
  __p[0] = (void *)*a2;
  v7 = 1;
  sub_2231813E8(v5, (uint64_t)__p, 1);
  if (v7 < 0)
    operator delete(__p[0]);
  ++*(_QWORD *)(a1 + 40);
}

void sub_22410D240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_22410D25C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 40))
  {
    v2 = *(_QWORD **)(a1 + 24);
    v4 = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v2, (uint64_t)&v4, 1);
  }
  result = std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  return result;
}

uint64_t sub_22410D2BC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 40))
  {
    v2 = *(_QWORD **)(a1 + 24);
    v4 = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v2, (uint64_t)&v4, 1);
  }
  result = std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  return result;
}

uint64_t sub_22410D31C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 40))
  {
    v2 = *(_QWORD **)(a1 + 24);
    v4 = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v2, (uint64_t)&v4, 1);
  }
  result = std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  return result;
}

uint64_t sub_22410D37C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 40))
  {
    v2 = *(_QWORD **)(a1 + 24);
    v4 = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v2, (uint64_t)&v4, 1);
  }
  result = std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  return result;
}

uint64_t sub_22410D3E4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 40))
  {
    v2 = *(_QWORD **)(a1 + 24);
    v4 = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v2, (uint64_t)&v4, 1);
  }
  result = std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  return result;
}

uint64_t sub_22410D444(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 40))
  {
    v2 = *(_QWORD **)(a1 + 24);
    v4 = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v2, (uint64_t)&v4, 1);
  }
  result = std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  return result;
}

uint64_t sub_22410D4A4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 40))
  {
    v2 = *(_QWORD **)(a1 + 24);
    v4 = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v2, (uint64_t)&v4, 1);
  }
  result = std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  return result;
}

uint64_t sub_22410D504(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 40))
  {
    v2 = *(_QWORD **)(a1 + 24);
    v4 = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v2, (uint64_t)&v4, 1);
  }
  result = std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  return result;
}

uint64_t sub_22410D564(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 40))
  {
    v2 = *(_QWORD **)(a1 + 24);
    v4 = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v2, (uint64_t)&v4, 1);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
  result = std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  return result;
}

uint64_t sub_22410D5D8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 40))
  {
    v2 = *(_QWORD **)(a1 + 24);
    v4 = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v2, (uint64_t)&v4, 1);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
  result = std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  return result;
}

uint64_t sub_22410D650(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;

  if (a2)
  {
    v4 = a2;
    v5 = result;
    v6 = *(_QWORD *)(result + 40);
    do
    {
      if (v6)
      {
        v7 = *(_QWORD **)(v5 + 24);
        v8 = *(_BYTE *)(v5 + 32);
        sub_2231813E8(v7, (uint64_t)&v8, 1);
      }
      ++a3;
      result = std::ostream::operator<<();
      v6 = *(_QWORD *)(v5 + 40) + 1;
      *(_QWORD *)(v5 + 40) = v6;
      --v4;
    }
    while (v4);
  }
  return result;
}

void sub_22410D6D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_22454F774(a1, v3);
}

uint64_t sub_22410D6F4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;

  if (a2)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 40);
    v6 = 2 * a2;
    do
    {
      if (v5)
      {
        v7 = *(_QWORD **)(v4 + 24);
        v8 = *(_BYTE *)(v4 + 32);
        sub_2231813E8(v7, (uint64_t)&v8, 1);
      }
      a3 += 2;
      result = std::ostream::operator<<();
      v5 = *(_QWORD *)(v4 + 40) + 1;
      *(_QWORD *)(v4 + 40) = v5;
      v6 -= 2;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_22410D774(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;

  if (a2)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 40);
    v6 = 4 * a2;
    do
    {
      if (v5)
      {
        v7 = *(_QWORD **)(v4 + 24);
        v8 = *(_BYTE *)(v4 + 32);
        sub_2231813E8(v7, (uint64_t)&v8, 1);
      }
      a3 += 4;
      result = std::ostream::operator<<();
      v5 = *(_QWORD *)(v4 + 40) + 1;
      *(_QWORD *)(v4 + 40) = v5;
      v6 -= 4;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_22410D7F4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;

  if (a2)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 40);
    v6 = 8 * a2;
    do
    {
      if (v5)
      {
        v7 = *(_QWORD **)(v4 + 24);
        v8 = *(_BYTE *)(v4 + 32);
        sub_2231813E8(v7, (uint64_t)&v8, 1);
      }
      a3 += 8;
      result = std::ostream::operator<<();
      v5 = *(_QWORD *)(v4 + 40) + 1;
      *(_QWORD *)(v4 + 40) = v5;
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_22410D874(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;

  if (a2)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 40);
    v6 = 8 * a2;
    do
    {
      if (v5)
      {
        v7 = *(_QWORD **)(v4 + 24);
        v8 = *(_BYTE *)(v4 + 32);
        sub_2231813E8(v7, (uint64_t)&v8, 1);
      }
      a3 += 8;
      result = std::ostream::operator<<();
      v5 = *(_QWORD *)(v4 + 40) + 1;
      *(_QWORD *)(v4 + 40) = v5;
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

void sub_22410D8F4(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v4;

  if (a2)
  {
    v4 = a2;
    do
    {
      sub_22454F564(a1, a3++);
      --v4;
    }
    while (v4);
  }
}

void sub_22410D93C(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4;

  if (a2)
  {
    v4 = a2;
    do
    {
      sub_22454F380(a1, a3++);
      --v4;
    }
    while (v4);
  }
}

uint64_t sub_22410D984(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;

  if (a2)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 40);
    v6 = 2 * a2;
    do
    {
      if (v5)
      {
        v7 = *(_QWORD **)(v4 + 24);
        v8 = *(_BYTE *)(v4 + 32);
        sub_2231813E8(v7, (uint64_t)&v8, 1);
      }
      a3 += 2;
      result = std::ostream::operator<<();
      v5 = *(_QWORD *)(v4 + 40) + 1;
      *(_QWORD *)(v4 + 40) = v5;
      v6 -= 2;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_22410DA04(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;

  if (a2)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 40);
    v6 = 4 * a2;
    do
    {
      if (v5)
      {
        v7 = *(_QWORD **)(v4 + 24);
        v8 = *(_BYTE *)(v4 + 32);
        sub_2231813E8(v7, (uint64_t)&v8, 1);
      }
      a3 += 4;
      result = std::ostream::operator<<();
      v5 = *(_QWORD *)(v4 + 40) + 1;
      *(_QWORD *)(v4 + 40) = v5;
      v6 -= 4;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_22410DA84(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;

  if (a2)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 40);
    v6 = 8 * a2;
    do
    {
      if (v5)
      {
        v7 = *(_QWORD **)(v4 + 24);
        v8 = *(_BYTE *)(v4 + 32);
        sub_2231813E8(v7, (uint64_t)&v8, 1);
      }
      a3 += 8;
      result = std::ostream::operator<<();
      v5 = *(_QWORD *)(v4 + 40) + 1;
      *(_QWORD *)(v4 + 40) = v5;
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_22410DB04(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;

  if (a2)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 40);
    v6 = 8 * a2;
    do
    {
      if (v5)
      {
        v7 = *(_QWORD **)(v4 + 24);
        v8 = *(_BYTE *)(v4 + 32);
        sub_2231813E8(v7, (uint64_t)&v8, 1);
      }
      a3 += 8;
      result = std::ostream::operator<<();
      v5 = *(_QWORD *)(v4 + 40) + 1;
      *(_QWORD *)(v4 + 40) = v5;
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_22410DB84(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;

  if (a2)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 40);
    v6 = 4 * a2;
    do
    {
      if (v5)
      {
        v7 = *(_QWORD **)(v4 + 24);
        v8 = *(_BYTE *)(v4 + 32);
        sub_2231813E8(v7, (uint64_t)&v8, 1);
      }
      *(_QWORD *)(*(_QWORD *)(v4 + 24) + *(_QWORD *)(**(_QWORD **)(v4 + 24) - 24) + 16) = 9;
      a3 += 4;
      result = std::ostream::operator<<();
      v5 = *(_QWORD *)(v4 + 40) + 1;
      *(_QWORD *)(v4 + 40) = v5;
      v6 -= 4;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_22410DC18(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;

  if (a2)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 40);
    v6 = 8 * a2;
    do
    {
      if (v5)
      {
        v7 = *(_QWORD **)(v4 + 24);
        v8 = *(_BYTE *)(v4 + 32);
        sub_2231813E8(v7, (uint64_t)&v8, 1);
      }
      *(_QWORD *)(*(_QWORD *)(v4 + 24) + *(_QWORD *)(**(_QWORD **)(v4 + 24) - 24) + 16) = 17;
      a3 += 8;
      result = std::ostream::operator<<();
      v5 = *(_QWORD *)(v4 + 40) + 1;
      *(_QWORD *)(v4 + 40) = v5;
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

void sub_22410DCAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  if (a2)
  {
    v5 = 24 * a2;
    do
    {
      sub_22454F620(a1, a3);
      a3 += 24;
      v5 -= 24;
    }
    while (v5);
  }
}

_QWORD *sub_22410DD00(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  char v3;

  v1 = result;
  if (result[5])
  {
    v2 = (_QWORD *)result[3];
    v3 = *((_BYTE *)v1 + 32);
    result = sub_2231813E8(v2, (uint64_t)&v3, 1);
    ++v1[5];
  }
  else
  {
    result[5] = 1;
  }
  return result;
}

_QWORD *sub_22410DD68(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  char v6;

  v2 = *a2;
  if (*a2)
  {
    v3 = result;
    v4 = result[5];
    do
    {
      while (v4)
      {
        v5 = (_QWORD *)v3[3];
        v6 = *((_BYTE *)v3 + 32);
        result = sub_2231813E8(v5, (uint64_t)&v6, 1);
        v4 = v3[5] + 1;
        v3[5] = v4;
        if (!--v2)
          return result;
      }
      v4 = 1;
      v3[5] = 1;
      --v2;
    }
    while (v2);
  }
  return result;
}

void sub_22410DDE4()
{
  JUMPOUT(0x227684CE8);
}

__n128 sub_22410DE00(uint64_t **a1, unint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  __n128 result;
  uint64_t v6;
  std::string __p;
  uint64_t v8;
  unsigned __int8 v9;

  v2 = *a1;
  v3 = **a1;
  if (*(_BYTE *)(v3 + 456))
    v4 = v3 + 416;
  else
    v4 = 0;
  sub_22411876C(v3 + 32, (void ***)(*a1)[2], *a2, *(_QWORD *)(v3 + 56), v4, *(unsigned __int8 *)(v3 + 456), &__p);
  v6 = v2[1];
  if (*(unsigned __int8 *)(v6 + 32) == v9)
  {
    if (*(_BYTE *)(v6 + 32))
    {
      if (*(char *)(v6 + 23) < 0)
        operator delete(*(void **)v6);
      result = *(__n128 *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v6 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(__n128 *)v6 = result;
      *(_QWORD *)(v6 + 24) = v8;
    }
  }
  else if (*(_BYTE *)(v6 + 32))
  {
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    *(_BYTE *)(v6 + 32) = 0;
    if (v9 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    result = *(__n128 *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(v6 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(__n128 *)v6 = result;
    *(_QWORD *)(v6 + 24) = v8;
    *(_BYTE *)(v6 + 32) = 1;
  }
  return result;
}

__n128 sub_22410DF00(_QWORD **a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 result;
  uint64_t v10;
  void *__p[2];
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  _QWORD v16[2];

  v2 = *a1;
  v3 = *(_QWORD *)(a2 + 24);
  v4 = *v2;
  v5 = v2[2];
  v6 = *(_QWORD *)(*v2 + 56);
  v7 = *v2 + 416;
  v8 = *(unsigned __int8 *)(*v2 + 456);
  if (!*(_BYTE *)(*v2 + 456))
    v7 = 0;
  v16[0] = v7;
  v16[1] = v8;
  v15 = 6;
  if (!v3)
    sub_223198474();
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t, _QWORD *))(*(_QWORD *)v3 + 48))(__p, v3, v4 + 32, v5, &v15, v6, v16);
  v10 = v2[1];
  if (*(unsigned __int8 *)(v10 + 32) == v14)
  {
    if (*(_BYTE *)(v10 + 32))
    {
      if (*(char *)(v10 + 23) < 0)
        operator delete(*(void **)v10);
      result = *(__n128 *)__p;
      *(_QWORD *)(v10 + 16) = v12;
      *(__n128 *)v10 = result;
      *(_QWORD *)(v10 + 24) = v13;
    }
  }
  else if (*(_BYTE *)(v10 + 32))
  {
    if (*(char *)(v10 + 23) < 0)
      operator delete(*(void **)v10);
    *(_BYTE *)(v10 + 32) = 0;
    if (v14 && SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
  else
  {
    result = *(__n128 *)__p;
    *(_QWORD *)(v10 + 16) = v12;
    *(__n128 *)v10 = result;
    *(_QWORD *)(v10 + 24) = v13;
    *(_BYTE *)(v10 + 32) = 1;
  }
  return result;
}

_DWORD *sub_22410E024(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24EC69938[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

uint64_t sub_22410E114(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  char v11;

  v2 = *(unsigned int *)(a1 + 88);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24EC69908[v2])(&v11, a1 + 56);
  *(_DWORD *)(a1 + 88) = -1;
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(std::__shared_weak_count **)(a1 + 24);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = *(std::__shared_weak_count **)(a1 + 8);
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
  return a1;
}

_QWORD *sub_22410E1E8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (std::__shared_weak_count *)a1[7];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = a1 + 2;
    v6 = (_QWORD *)a1[5];
    if (v6 != a1 + 2)
      goto LABEL_6;
LABEL_9:
    v7 = 4;
    v6 = v5;
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = a1 + 2;
  v6 = (_QWORD *)a1[5];
  if (v6 == a1 + 2)
    goto LABEL_9;
LABEL_6:
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  v8 = (std::__shared_weak_count *)a1[1];
  if (!v8)
    return a1;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_22410E2C8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC69978;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22410E2D8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC69978;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22410E308(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  char v10;

  v2 = *(unsigned int *)(a1 + 112);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24EC69908[v2])(&v10, a1 + 80);
  *(_DWORD *)(a1 + 112) = -1;
  v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(std::__shared_weak_count **)(a1 + 48);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = *(std::__shared_weak_count **)(a1 + 32);
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
}

_QWORD *sub_22410E3DC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  *a1 = &off_24EC699D8;
  v2 = (std::__shared_weak_count *)a1[8];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = a1 + 3;
    v6 = (_QWORD *)a1[6];
    if (v6 != a1 + 3)
      goto LABEL_6;
LABEL_9:
    v7 = 4;
    v6 = v5;
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = a1 + 3;
  v6 = (_QWORD *)a1[6];
  if (v6 == a1 + 3)
    goto LABEL_9;
LABEL_6:
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  v8 = (std::__shared_weak_count *)a1[2];
  if (!v8)
    return a1;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_22410E4C8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  *a1 = &off_24EC699D8;
  v2 = (std::__shared_weak_count *)a1[8];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = a1 + 3;
    v6 = (_QWORD *)a1[6];
    if (v6 != a1 + 3)
      goto LABEL_6;
  }
  else
  {
LABEL_5:
    v5 = a1 + 3;
    v6 = (_QWORD *)a1[6];
    if (v6 != a1 + 3)
    {
LABEL_6:
      if (!v6)
        goto LABEL_11;
      v7 = 5;
LABEL_10:
      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
      v8 = (std::__shared_weak_count *)a1[2];
      if (v8)
      {
        v9 = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      JUMPOUT(0x227684CE8);
    }
  }
  v7 = 4;
  v6 = v5;
  goto LABEL_10;
}

_QWORD *sub_22410E5B4(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = operator new(0x48uLL);
  v4 = a1[1];
  v3 = a1[2];
  *v2 = &off_24EC699D8;
  v2[1] = v4;
  v2[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[6];
  if (!v7)
    goto LABEL_7;
  if ((_QWORD *)v7 != a1 + 3)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
LABEL_7:
    v2[6] = v7;
    goto LABEL_9;
  }
  v2[6] = v2 + 3;
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
LABEL_9:
  v8 = a1[8];
  v2[7] = a1[7];
  v2[8] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return v2;
}

void sub_22410E670(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_22410E6BC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v5 = a1[1];
  v4 = a1[2];
  *a2 = &off_24EC699D8;
  a2[1] = v5;
  a2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  result = a1[6];
  if (!result)
    goto LABEL_7;
  if ((_QWORD *)result != a1 + 3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
LABEL_7:
    a2[6] = result;
    goto LABEL_9;
  }
  a2[6] = a2 + 3;
  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[6] + 24))(a1[6]);
LABEL_9:
  v9 = a1[8];
  a2[7] = a1[7];
  a2[8] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_22410E768(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_22410E7AC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (std::__shared_weak_count *)a1[8];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = a1 + 3;
      v6 = (_QWORD *)a1[6];
      if (v6 != a1 + 3)
        goto LABEL_6;
LABEL_9:
      v7 = 4;
      v6 = v5;
      goto LABEL_10;
    }
  }
  v5 = a1 + 3;
  v6 = (_QWORD *)a1[6];
  if (v6 == a1 + 3)
    goto LABEL_9;
LABEL_6:
  if (!v6)
    goto LABEL_11;
  v7 = 5;
LABEL_10:
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_22410E880(char *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (std::__shared_weak_count *)*((_QWORD *)__p + 8);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = __p + 24;
    v6 = (char *)*((_QWORD *)__p + 6);
    if (v6 != __p + 24)
      goto LABEL_6;
LABEL_9:
    v7 = 4;
    v6 = v5;
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = __p + 24;
  v6 = (char *)*((_QWORD *)__p + 6);
  if (v6 == __p + 24)
    goto LABEL_9;
LABEL_6:
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)__p + 2);
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    operator delete(__p);
  }
  else
  {
LABEL_15:
    operator delete(__p);
  }
}

void sub_22410E960(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v5[8];
  std::__shared_weak_count *v6[2];
  _BYTE v7[32];
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 56);
  *(_OWORD *)v6 = *(_OWORD *)v2;
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  v7[0] = 0;
  v8 = -1;
  v3 = *(unsigned int *)(v2 + 88);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(_BYTE *, _BYTE *, uint64_t))off_24EC699B8[v3])(v5, v7, v2 + 56);
    v8 = v3;
  }
  v4 = *(_QWORD *)(a1 + 48);
  if (!v4)
    sub_223198474();
  (*(void (**)(uint64_t, std::__shared_weak_count **, uint64_t, _BYTE *))(*(_QWORD *)v4 + 48))(v4, v6, v2 + 16, v7);
  if (v8 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_24EC69908[v8])(v5, v7);
  v8 = -1;
  if (v6[1])
    std::__shared_weak_count::__release_weak(v6[1]);
  std::promise<void>::set_value(*(std::promise<void> **)(a1 + 8));
}

void sub_22410EA68(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_22316DC48(exception_object);
}

void sub_22410EA84(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, std::__shared_weak_count *a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17)
{
  uint64_t v17;
  std::promise<void> *v18;
  std::exception_ptr v19;

  if (a2)
  {
    __cxa_begin_catch(a1);
    v18 = *(std::promise<void> **)(v17 + 8);
    std::current_exception();
    v19.__ptr_ = &a10;
    std::promise<void>::set_exception(v18, v19);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x22410EA30);
  }
  JUMPOUT(0x22410EA74);
}

uint64_t sub_22410EB08(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3esn6thread6detail28DispatchAsyncAndReturnFutureIvNSt3__18functionIFvNS4_8weak_ptrINS_3kit3v"
                     "iz13VDataExporter4ImplEEERKNS8_11ContextDataENS4_7variantIJNS8_17StoragePreferenceENS5_IFNS4_8optio"
                     "nalINS8_12DataLocationEEERKNS4_4__fs10filesystem4pathESE_SG_RNS7_2fs11IFilesystemENS0_11OptionalRef"
                     "INS8_15ExportFileStateEEEEEEEEEEEENS1_11IWorkQueueTINS5_IFvvEEEEEJRSB_SE_RKSX_EEENS4_6futureIT_EERT"
                     "1_OT0_DpOT2_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3esn6thread6detail28DispatchAsyncAndReturnFutureIvNSt3__18functionIFvNS4_8weak_pt"
                                "rINS_3kit3viz13VDataExporter4ImplEEERKNS8_11ContextDataENS4_7variantIJNS8_17StoragePrefe"
                                "renceENS5_IFNS4_8optionalINS8_12DataLocationEEERKNS4_4__fs10filesystem4pathESE_SG_RNS7_2"
                                "fs11IFilesystemENS0_11OptionalRefINS8_15ExportFileStateEEEEEEEEEEEENS1_11IWorkQueueTINS5"
                                "_IFvvEEEEEJRSB_SE_RKSX_EEENS4_6futureIT_EERT1_OT0_DpOT2_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3esn6thread6detail28DispatchAsyncAndReturnFutureIvNSt3__18functionIFvNS4_8weak_ptrINS_3kit3viz13VDataExporter4ImplEEERKNS8_11ContextDataENS4_7variantIJNS8_17StoragePreferenceENS5_IFNS4_8optionalINS8_12DataLocationEEERKNS4_4__fs10filesystem4pathESE_SG_RNS7_2fs11IFilesystemENS0_11OptionalRefINS8_15ExportFileStateEEEEEEEEEEEENS1_11IWorkQueueTINS5_IFvvEEEEEJRSB_SE_RKSX_EEENS4_6futureIT_EERT1_OT0_DpOT2_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3esn6thread6detail28DispatchAsyncAndReturnFutureIvNSt3__18functionIFvNS4_8weak_ptrINS_3kit3viz13VDataExporter4ImplEEERKNS8_11ContextDataENS4_7variantIJNS8_17StoragePreferenceENS5_IFNS4_8optionalINS8_12DataLocationEEERKNS4_4__fs10filesystem4pathESE_SG_RNS7_2fs11IFilesystemENS0_11OptionalRefINS8_15ExportFileStateEEEEEEEEEEEENS1_11IWorkQueueTINS5_IFvvEEEEEJRSB_SE_RKSX_EEENS4_6futureIT_EERT1_OT0_DpOT2_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22410EB74()
{
  return &unk_24EC69A38;
}

uint64_t sub_22410EB80(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 88))
  {
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
    {
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
        goto LABEL_4;
LABEL_8:
      operator delete(*(void **)(a1 + 32));
      if (!*(_BYTE *)(a1 + 24))
        return a1;
      goto LABEL_5;
    }
    operator delete(*(void **)(a1 + 64));
    if (*(char *)(a1 + 55) < 0)
      goto LABEL_8;
  }
LABEL_4:
  if (!*(_BYTE *)(a1 + 24))
    return a1;
LABEL_5:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)a1);
  return a1;
}

void sub_22410EC04(uint64_t a1, _QWORD *a2, _QWORD *a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  BOOL v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;

  v6 = a2;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(char **)a1;
  if (__sz > (v8 - *(_QWORD *)a1) >> 4)
  {
    if (v9)
    {
      v10 = *(char **)(a1 + 8);
      v11 = *(char **)a1;
      if (v10 != v9)
      {
        do
        {
          v12 = (std::__shared_weak_count *)*((_QWORD *)v10 - 1);
          if (v12)
          {
            p_shared_owners = (unint64_t *)&v12->__shared_owners_;
            do
              v14 = __ldaxr(p_shared_owners);
            while (__stlxr(v14 - 1, p_shared_owners));
            if (!v14)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
          v10 -= 16;
        }
        while (v10 != v9);
        v11 = *(char **)a1;
      }
      *(_QWORD *)(a1 + 8) = v9;
      operator delete(v11);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz >> 60)
      goto LABEL_68;
    v33 = v8 >> 3;
    if (v8 >> 3 <= __sz)
      v33 = __sz;
    v34 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    v35 = 0xFFFFFFFFFFFFFFFLL;
    if (!v34)
      v35 = v33;
    if (v35 >> 60)
LABEL_68:
      sub_22316E078();
    v36 = 2 * v35;
    v37 = operator new(16 * v35);
    *(_QWORD *)a1 = v37;
    *(_QWORD *)(a1 + 8) = v37;
    *(_QWORD *)(a1 + 16) = &v37[v36];
    while (v6 != a3)
    {
      v38 = v6[1];
      *v37 = *v6;
      v37[1] = v38;
      if (v38)
      {
        v39 = (unint64_t *)(v38 + 8);
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
      v6 += 2;
      v37 += 2;
    }
    *(_QWORD *)(a1 + 8) = v37;
    return;
  }
  v15 = *(char **)(a1 + 8);
  v16 = (v15 - v9) >> 4;
  if (v16 < __sz)
  {
    v17 = &a2[2 * v16];
    if (v15 == v9)
    {
      v18 = *(char **)a1;
      if (v17 == a3)
      {
LABEL_58:
        *(_QWORD *)(a1 + 8) = v18;
        return;
      }
    }
    else
    {
      do
      {
        v20 = *v6;
        v19 = v6[1];
        if (v19)
        {
          v21 = (unint64_t *)(v19 + 8);
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        v23 = (std::__shared_weak_count *)*((_QWORD *)v9 + 1);
        *(_QWORD *)v9 = v20;
        *((_QWORD *)v9 + 1) = v19;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v6 += 2;
        v9 += 16;
      }
      while (v6 != v17);
      v9 = *(char **)(a1 + 8);
      v18 = v9;
      if (v17 == a3)
        goto LABEL_58;
    }
    v18 = v9;
    do
    {
      v41 = v17[1];
      *(_QWORD *)v18 = *v17;
      *((_QWORD *)v18 + 1) = v41;
      if (v41)
      {
        v42 = (unint64_t *)(v41 + 8);
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
      }
      v17 += 2;
      v18 += 16;
    }
    while (v17 != a3);
    goto LABEL_58;
  }
  if (a2 != a3)
  {
    do
    {
      v27 = *v6;
      v26 = v6[1];
      if (v26)
      {
        v28 = (unint64_t *)(v26 + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v30 = (std::__shared_weak_count *)*((_QWORD *)v9 + 1);
      *(_QWORD *)v9 = v27;
      *((_QWORD *)v9 + 1) = v26;
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      v6 += 2;
      v9 += 16;
    }
    while (v6 != a3);
    v15 = *(char **)(a1 + 8);
  }
  while (v15 != v9)
  {
    v44 = (std::__shared_weak_count *)*((_QWORD *)v15 - 1);
    if (v44)
    {
      v45 = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    v15 -= 16;
  }
  *(_QWORD *)(a1 + 8) = v9;
}

void sub_22410EF48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  size_t v13;
  void **v14;
  unint64_t v15;
  unint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *__dst[2];
  unint64_t v26;
  _QWORD v27[5];
  _QWORD *v28;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_223195210(v5);
  v27[0] = v5;
  if (*(_BYTE *)(a3 + 48))
  {
    v6 = *(char *)(a3 + 47);
    if (v6 >= 0)
      v7 = a3 + 24;
    else
      v7 = *(_QWORD *)(a3 + 24);
    if (v6 >= 0)
      v8 = *(unsigned __int8 *)(a3 + 47);
    else
      v8 = *(_QWORD *)(a3 + 32);
    sub_2231813E8((_QWORD *)(v5 + 16), v7, v8);
  }
  sub_2231813E8((_QWORD *)(v5 + 16), (uint64_t)":", 1);
  v9 = *(char *)(a3 + 23);
  if (v9 >= 0)
    v10 = a3;
  else
    v10 = *(_QWORD *)a3;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a3 + 23);
  else
    v11 = *(_QWORD *)(a3 + 8);
  sub_2231813E8((_QWORD *)(v5 + 16), v10, v11);
  v12 = *(_DWORD *)(v5 + 120);
  if ((v12 & 0x10) != 0)
  {
    v15 = *(_QWORD *)(v5 + 112);
    v16 = *(_QWORD *)(v5 + 72);
    if (v15 < v16)
    {
      *(_QWORD *)(v5 + 112) = v16;
      v15 = v16;
    }
    v17 = *(const void **)(v5 + 64);
    v13 = v15 - (_QWORD)v17;
    if (v15 - (unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_36;
  }
  else
  {
    if ((v12 & 8) == 0)
    {
      v13 = 0;
      HIBYTE(v26) = 0;
      v14 = __dst;
      goto LABEL_28;
    }
    v17 = *(const void **)(v5 + 40);
    v13 = *(_QWORD *)(v5 + 56) - (_QWORD)v17;
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
LABEL_36:
      sub_22316DBC0();
  }
  if (v13 >= 0x17)
  {
    v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v18 = v13 | 7;
    v19 = v18 + 1;
    v14 = (void **)operator new(v18 + 1);
    __dst[1] = (void *)v13;
    v26 = v19 | 0x8000000000000000;
    __dst[0] = v14;
    goto LABEL_27;
  }
  HIBYTE(v26) = v13;
  v14 = __dst;
  if (v13)
LABEL_27:
    memmove(v14, v17, v13);
LABEL_28:
  *((_BYTE *)v14 + v13) = 0;
  v20 = v27[0];
  if (v27[0])
  {
    v21 = MEMORY[0x24BEDB7F0];
    v22 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v27[0] = *MEMORY[0x24BEDB7F0];
    v23 = *(_QWORD *)(v21 + 72);
    *(_QWORD *)(v20 + *(_QWORD *)(v22 - 24)) = *(_QWORD *)(v21 + 64);
    *(_QWORD *)(v20 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v20 + 16) = v23;
    if (*(char *)(v20 + 111) < 0)
      operator delete(*(void **)(v20 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v20 + 128);
    MEMORY[0x227684CE8](v20, 0x10B2C40EED050F3);
  }
  v27[0] = a2;
  v27[1] = __dst;
  v27[2] = a2;
  v27[3] = __dst;
  v27[4] = __dst;
  v24 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v24 == -1)
    sub_22316DD70();
  v28 = v27;
  ((void (*)(_QWORD **, uint64_t))off_24EC69A60[v24])(&v28, a2);
  if (SHIBYTE(v26) < 0)
    operator delete(__dst[0]);
}

void sub_22410F1F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_22410F218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22410F234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22456E764((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_22410F248(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC69A88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22410F258(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC69A88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22410F288(uint64_t a1)
{
  return sub_22410A924(a1 + 24);
}

void sub_22410F298()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22410F2AC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24EC69AD8;
  return result;
}

void sub_22410F2D0(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24EC69AD8;
}

void sub_22410F2E8(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t a4)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  _BYTE v16[16];
  void *v17;
  char v18;
  char v19;
  void *v20;
  char v21;
  void *__p;
  char v23;
  char v24;
  char v25;
  char v26;
  _BYTE v27[32];
  unsigned int v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v6 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v27[0] = 0;
  v28 = -1;
  v7 = *(unsigned int *)(a4 + 32);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(_BYTE *, _BYTE *, uint64_t))off_24EC699B8[v7])(v16, v27, a4);
    v28 = v7;
  }
  if (!v5)
    goto LABEL_16;
  v8 = std::__shared_weak_count::lock(v5);
  if (!v8)
    goto LABEL_16;
  v9 = v8;
  if (v6)
  {
    sub_22410AC6C((uint64_t)v16, v6, a3, (uint64_t)v27);
    if (!v26 && *(_BYTE *)(v6 + 160))
    {
      v10 = *(_QWORD *)(v6 + 152);
      if (!v10)
        sub_223198474();
      (*(void (**)(uint64_t, uint64_t, _QWORD *, _BYTE *))(*(_QWORD *)v10 + 48))(v10, v6 + 32, a3 + 2, v16);
    }
    std::mutex::lock((std::mutex *)(v6 + 352));
    v11 = (unsigned int *)(v6 + 296);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    std::condition_variable::notify_one((std::condition_variable *)(v6 + 304));
    std::mutex::unlock((std::mutex *)(v6 + 352));
    if (!v26 && v25)
    {
      if (v24)
      {
        if (v23 < 0)
          operator delete(__p);
        if (v21 < 0)
          operator delete(v20);
      }
      if (v19 && v18 < 0)
        operator delete(v17);
    }
  }
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_16:
    v15 = v28;
    if (v28 == -1)
      goto LABEL_18;
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  v15 = v28;
  if (v28 != -1)
LABEL_17:
    ((void (*)(_BYTE *, _BYTE *))off_24EC69908[v15])(v16, v27);
LABEL_18:
  v28 = -1;
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
}

void sub_22410F4E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,int a32,__int16 a33,char a34,char a35,int a36,__int16 a37,char a38,char a39)
{
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  unint64_t *p_shared_owners;
  unint64_t v44;
  uint64_t v45;

  if (!(_BYTE)a37 && (_BYTE)a33)
  {
    if (a31)
    {
      if (a30 < 0)
        operator delete(__p);
      if (a23 < 0)
        operator delete(a18);
    }
    if (a17 && a16 < 0)
      operator delete(a11);
  }
  p_shared_owners = (unint64_t *)&v40->__shared_owners_;
  do
    v44 = __ldaxr(p_shared_owners);
  while (__stlxr(v44 - 1, p_shared_owners));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
  v45 = *(unsigned int *)(v41 - 48);
  if ((_DWORD)v45 != -1)
    ((void (*)(uint64_t *, uint64_t))off_24EC69908[v45])(&a9, v41 - 80);
  *(_DWORD *)(v41 - 48) = -1;
  std::__shared_weak_count::__release_weak(v39);
  _Unwind_Resume(a1);
}

void sub_22410F5AC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_22316DC48(exception_object);
}

uint64_t sub_22410F5CC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit3viz13VDataExporter4Impl16ExportDataAsynchERKNS1_11ContextDataERKNSt3__17variantIJNS1_17"
                     "StoragePreferenceENS7_8functionIFNS7_8optionalINS1_12DataLocationEEERKNS7_4__fs10filesystem4pathES6"
                     "_S9_RNS0_2fs11IFilesystemENS_3esn11OptionalRefINS1_15ExportFileStateEEEEEEEEEE3$_2")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit3viz13VDataExporter4Impl16ExportDataAsynchERKNS1_11ContextDataERKNSt3__17vari"
                                "antIJNS1_17StoragePreferenceENS7_8functionIFNS7_8optionalINS1_12DataLocationEEERKNS7_4__"
                                "fs10filesystem4pathES6_S9_RNS0_2fs11IFilesystemENS_3esn11OptionalRefINS1_15ExportFileSta"
                                "teEEEEEEEEEE3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit3viz13VDataExporter4Impl16ExportDataAsynchERKNS1_11ContextDataERKNSt3__17variantIJNS1_17StoragePreferenceENS7_8functionIFNS7_8optionalINS1_12DataLocationEEERKNS7_4__fs10filesystem4pathES6_S9_RNS0_2fs11IFilesystemENS_3esn11OptionalRefINS1_15ExportFileStateEEEEEEEEEE3$_2"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit3viz13VDataExporter4Impl16ExportDataAsynchERKNS1_11ContextDataERKNSt3__17variantIJNS1_17StoragePreferenceENS7_8functionIFNS7_8optionalINS1_12DataLocationEEERKNS7_4__fs10filesystem4pathES6_S9_RNS0_2fs11IFilesystemENS_3esn11OptionalRefINS1_15ExportFileStateEEEEEEEEEE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22410F638()
{
  return &unk_24EC69B48;
}

void sub_22410F644(uint64_t a1, void **a2, void **a3)
{
  unint64_t v3;
  void **v4;
  uint64_t v6;
  uint64_t i;
  void **v8;
  _OWORD *v9;
  char v10;
  __int128 v11;
  void *v12;
  size_t v13;
  unint64_t *v14;
  void *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  void **v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint8x8_t v26;
  unint64_t v27;
  uint64_t **v28;
  uint64_t *v29;
  unint64_t v30;
  int v31;
  std::__fs::filesystem::path::__string_view v32;
  uint64_t v33;
  int v34;
  std::__fs::filesystem::path::__string_view v35;
  float v36;
  float v37;
  _BOOL8 v38;
  unint64_t v39;
  unint64_t v40;
  size_t prime;
  int8x8_t v42;
  unint64_t v43;
  uint8x8_t v44;
  uint64_t v45;
  int8x8_t v46;
  unint64_t v47;
  uint8x8_t v48;
  void **v49;
  unint64_t v50;
  void **v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  __int128 v55;
  uint64_t *v56;
  void *v57;
  unint64_t v58;
  unint64_t v59;
  uint8x8_t v60;
  uint64_t **v61;
  uint64_t *v62;
  unint64_t v63;
  int v64;
  std::__fs::filesystem::path::__string_view v65;
  uint64_t v66;
  int v67;
  std::__fs::filesystem::path::__string_view v68;
  _QWORD *v69;
  _BYTE *v70;
  __int128 v71;
  char *v72;
  unint64_t *v73;
  unint64_t v74;
  float v75;
  float v76;
  _BOOL8 v77;
  unint64_t v78;
  unint64_t v79;
  size_t v80;
  int8x8_t v81;
  unint64_t v82;
  uint8x8_t v83;
  uint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  unint64_t v88;
  uint64_t v89;
  void *__p[2];
  void *v92;
  char v93;

  v4 = a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    v8 = *(void ***)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    v89 = a1 + 16;
    if (a2 == a3)
    {
      v21 = v8;
      if (v8)
        goto LABEL_118;
    }
    else
    {
      if (v8)
      {
        while (1)
        {
          v9 = v8 + 2;
          if (v8 + 2 != v4)
          {
            v10 = *((_BYTE *)v4 + 23);
            if (*((char *)v8 + 39) < 0)
            {
              if (v10 >= 0)
                v12 = v4;
              else
                v12 = *v4;
              if (v10 >= 0)
                v13 = *((unsigned __int8 *)v4 + 23);
              else
                v13 = (size_t)v4[1];
              sub_22319C4B8(v8 + 2, v12, v13);
            }
            else if ((*((_BYTE *)v4 + 23) & 0x80) != 0)
            {
              sub_22319C3F4(v8 + 2, *v4, (size_t)v4[1]);
            }
            else
            {
              v11 = *(_OWORD *)v4;
              v8[4] = v4[2];
              *v9 = v11;
            }
          }
          v15 = v4[3];
          v14 = (unint64_t *)v4[4];
          if (v14)
          {
            v16 = v14 + 1;
            do
              v17 = __ldxr(v16);
            while (__stxr(v17 + 1, v16));
          }
          v18 = (std::__shared_weak_count *)v8[6];
          v8[5] = v15;
          v8[6] = v14;
          if (!v18)
            goto LABEL_25;
          p_shared_owners = (unint64_t *)&v18->__shared_owners_;
          do
            v20 = __ldaxr(p_shared_owners);
          while (__stlxr(v20 - 1, p_shared_owners));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
            v21 = (void **)*v8;
            if ((*((char *)v8 + 39) & 0x80000000) == 0)
            {
LABEL_26:
              *(_OWORD *)__p = *v9;
              v92 = v8[4];
              goto LABEL_29;
            }
          }
          else
          {
LABEL_25:
            v21 = (void **)*v8;
            if ((*((char *)v8 + 39) & 0x80000000) == 0)
              goto LABEL_26;
          }
          sub_223197FA4(__p, v8[2], (unint64_t)v8[3]);
LABEL_29:
          if (SHIBYTE(v92) >= 0)
            v22 = (uint64_t *)__p;
          else
            v22 = (uint64_t *)__p[0];
          if (SHIBYTE(v92) >= 0)
            v23 = HIBYTE(v92);
          else
            v23 = (unint64_t)__p[1];
          v24 = sub_22323D798((uint64_t)&v93, v22, v23);
          v25 = v24;
          if (SHIBYTE(v92) < 0)
          {
            operator delete(__p[0]);
            v8[1] = (void *)v25;
            v3 = *(_QWORD *)(a1 + 8);
            if (!v3)
              goto LABEL_71;
          }
          else
          {
            v8[1] = (void *)v24;
            v3 = *(_QWORD *)(a1 + 8);
            if (!v3)
              goto LABEL_71;
          }
          v26 = (uint8x8_t)vcnt_s8((int8x8_t)v3);
          v26.i16[0] = vaddlv_u8(v26);
          if (v26.u32[0] > 1uLL)
          {
            v27 = v25;
            if (v3 <= v25)
              v27 = v25 % v3;
          }
          else
          {
            v27 = (v3 - 1) & v25;
          }
          v28 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v27);
          if (v28)
          {
            v29 = *v28;
            if (*v28)
            {
              if (v26.u32[0] < 2uLL)
              {
                while (1)
                {
                  v33 = v29[1];
                  if (v33 == v25)
                  {
                    v34 = *((char *)v8 + 39);
                    if (v34 >= 0)
                      v35.__data_ = (const std::string_view::value_type *)(v8 + 2);
                    else
                      v35.__data_ = (const std::string_view::value_type *)v8[2];
                    if (v34 >= 0)
                      v35.__size_ = *((unsigned __int8 *)v8 + 39);
                    else
                      v35.__size_ = (std::basic_string_view<_CharT, _Traits>::size_type)v8[3];
                    if (!std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)(v29 + 2), v35))
                      goto LABEL_108;
                  }
                  else if ((v33 & (v3 - 1)) != v27)
                  {
                    goto LABEL_71;
                  }
                  v29 = (uint64_t *)*v29;
                  if (!v29)
                    goto LABEL_71;
                }
              }
              do
              {
                v30 = v29[1];
                if (v30 == v25)
                {
                  v31 = *((char *)v8 + 39);
                  if (v31 >= 0)
                    v32.__data_ = (const std::string_view::value_type *)(v8 + 2);
                  else
                    v32.__data_ = (const std::string_view::value_type *)v8[2];
                  if (v31 >= 0)
                    v32.__size_ = *((unsigned __int8 *)v8 + 39);
                  else
                    v32.__size_ = (std::basic_string_view<_CharT, _Traits>::size_type)v8[3];
                  if (!std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)(v29 + 2), v32))
                    goto LABEL_108;
                }
                else
                {
                  if (v30 >= v3)
                    v30 %= v3;
                  if (v30 != v27)
                    break;
                }
                v29 = (uint64_t *)*v29;
              }
              while (v29);
            }
          }
LABEL_71:
          v36 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
          v37 = *(float *)(a1 + 32);
          if (!v3 || (float)(v37 * (float)v3) < v36)
          {
            v38 = (v3 & (v3 - 1)) != 0;
            if (v3 < 3)
              v38 = 1;
            v39 = v38 | (2 * v3);
            v40 = vcvtps_u32_f32(v36 / v37);
            if (v39 <= v40)
              prime = v40;
            else
              prime = v39;
            if (prime == 1)
            {
              prime = 2;
            }
            else if ((prime & (prime - 1)) != 0)
            {
              prime = std::__next_prime(prime);
            }
            v42 = *(int8x8_t *)(a1 + 8);
            if (prime > *(_QWORD *)&v42)
              goto LABEL_83;
            if (prime < *(_QWORD *)&v42)
            {
              v43 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
              if (*(_QWORD *)&v42 < 3uLL
                || (v44 = (uint8x8_t)vcnt_s8(v42), v44.i16[0] = vaddlv_u8(v44), v44.u32[0] > 1uLL))
              {
                v43 = std::__next_prime(v43);
              }
              else
              {
                v45 = 1 << -(char)__clz(v43 - 1);
                if (v43 >= 2)
                  v43 = v45;
              }
              if (prime <= v43)
                prime = v43;
              if (prime < *(_QWORD *)&v42)
LABEL_83:
                sub_2231B0668(a1, prime);
            }
          }
          v46 = *(int8x8_t *)(a1 + 8);
          v47 = (unint64_t)v8[1];
          v48 = (uint8x8_t)vcnt_s8(v46);
          v48.i16[0] = vaddlv_u8(v48);
          if (v48.u32[0] > 1uLL)
          {
            if (v47 >= *(_QWORD *)&v46)
              v47 %= *(_QWORD *)&v46;
          }
          else
          {
            v47 &= *(_QWORD *)&v46 - 1;
          }
          v49 = *(void ***)(*(_QWORD *)a1 + 8 * v47);
          if (v49)
          {
            *v8 = *v49;
          }
          else
          {
            *v8 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v8;
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v47) = v89;
            if (!*v8)
              goto LABEL_107;
            v50 = *((_QWORD *)*v8 + 1);
            if (v48.u32[0] > 1uLL)
            {
              if (v50 >= *(_QWORD *)&v46)
                v50 %= *(_QWORD *)&v46;
            }
            else
            {
              v50 &= *(_QWORD *)&v46 - 1;
            }
            v49 = (void **)(*(_QWORD *)a1 + 8 * v50);
          }
          *v49 = v8;
LABEL_107:
          ++*(_QWORD *)(a1 + 24);
LABEL_108:
          v4 += 5;
          if (v21)
          {
            v8 = v21;
            if (v4 != a3)
              continue;
          }
          goto LABEL_112;
        }
      }
      v21 = 0;
LABEL_112:
      if (v21)
      {
        do
        {
          while (1)
          {
LABEL_118:
            v51 = (void **)*v21;
            v52 = (std::__shared_weak_count *)v21[6];
            if (v52)
            {
              v53 = (unint64_t *)&v52->__shared_owners_;
              do
                v54 = __ldaxr(v53);
              while (__stlxr(v54 - 1, v53));
              if (!v54)
              {
                ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                std::__shared_weak_count::__release_weak(v52);
              }
            }
            if (*((char *)v21 + 39) < 0)
              break;
            operator delete(v21);
            v21 = v51;
            if (!v51)
              goto LABEL_124;
          }
          operator delete(v21[2]);
          operator delete(v21);
          v21 = v51;
        }
        while (v51);
      }
    }
  }
LABEL_124:
  if (v4 == a3)
    return;
  do
  {
    while (1)
    {
      if (*((char *)v4 + 23) < 0)
      {
        sub_223197FA4(__p, *v4, (unint64_t)v4[1]);
      }
      else
      {
        v55 = *(_OWORD *)v4;
        v92 = v4[2];
        *(_OWORD *)__p = v55;
      }
      v56 = SHIBYTE(v92) >= 0 ? (uint64_t *)__p : (uint64_t *)__p[0];
      v57 = SHIBYTE(v92) >= 0 ? (void *)HIBYTE(v92) : __p[1];
      v58 = sub_22323D798((uint64_t)&v93, v56, (unint64_t)v57);
      if (SHIBYTE(v92) < 0)
      {
        operator delete(__p[0]);
        v59 = *(_QWORD *)(a1 + 8);
        if (!v59)
          goto LABEL_171;
      }
      else
      {
        v59 = *(_QWORD *)(a1 + 8);
        if (!v59)
          goto LABEL_171;
      }
      v60 = (uint8x8_t)vcnt_s8((int8x8_t)v59);
      v60.i16[0] = vaddlv_u8(v60);
      if (v60.u32[0] > 1uLL)
      {
        v3 = v58;
        if (v58 >= v59)
          v3 = v58 % v59;
      }
      else
      {
        v3 = (v59 - 1) & v58;
      }
      v61 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
      if (v61)
      {
        v62 = *v61;
        if (*v61)
          break;
      }
LABEL_171:
      v69 = operator new(0x38uLL);
      __p[0] = v69;
      __p[1] = (void *)(a1 + 16);
      LOBYTE(v92) = 0;
      *v69 = 0;
      v69[1] = v58;
      v70 = v69 + 2;
      if (*((char *)v4 + 23) < 0)
      {
        sub_223197FA4(v70, *v4, (unint64_t)v4[1]);
      }
      else
      {
        v71 = *(_OWORD *)v4;
        v69[4] = v4[2];
        *(_OWORD *)v70 = v71;
      }
      v69[5] = v4[3];
      v72 = (char *)v4[4];
      v69[6] = v72;
      if (v72)
      {
        v73 = (unint64_t *)(v72 + 8);
        do
          v74 = __ldxr(v73);
        while (__stxr(v74 + 1, v73));
      }
      LOBYTE(v92) = 1;
      v75 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v76 = *(float *)(a1 + 32);
      if (v59 && (float)(v76 * (float)v59) >= v75)
        goto LABEL_205;
      v77 = (v59 & (v59 - 1)) != 0;
      if (v59 < 3)
        v77 = 1;
      v78 = v77 | (2 * v59);
      v79 = vcvtps_u32_f32(v75 / v76);
      if (v78 <= v79)
        v80 = v79;
      else
        v80 = v78;
      if (v80 == 1)
      {
        v80 = 2;
      }
      else if ((v80 & (v80 - 1)) != 0)
      {
        v80 = std::__next_prime(v80);
      }
      v81 = *(int8x8_t *)(a1 + 8);
      if (v80 > *(_QWORD *)&v81)
        goto LABEL_189;
      if (v80 < *(_QWORD *)&v81)
      {
        v82 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
        if (*(_QWORD *)&v81 < 3uLL || (v83 = (uint8x8_t)vcnt_s8(v81), v83.i16[0] = vaddlv_u8(v83), v83.u32[0] > 1uLL))
        {
          v82 = std::__next_prime(v82);
        }
        else
        {
          v84 = 1 << -(char)__clz(v82 - 1);
          if (v82 >= 2)
            v82 = v84;
        }
        if (v80 <= v82)
          v80 = v82;
        if (v80 < *(_QWORD *)&v81)
LABEL_189:
          sub_2231B0668(a1, v80);
      }
      v59 = *(_QWORD *)(a1 + 8);
      v85 = v59 - 1;
      if ((v59 & (v59 - 1)) == 0)
      {
        v3 = v85 & v58;
        v86 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v85 & v58));
        v87 = __p[0];
        if (!v86)
          goto LABEL_208;
        goto LABEL_206;
      }
      if (v58 < v59)
      {
        v3 = v58;
LABEL_205:
        v86 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
        v87 = __p[0];
        if (!v86)
          goto LABEL_208;
        goto LABEL_206;
      }
      v3 = v58 % v59;
      v86 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v58 % v59));
      v87 = __p[0];
      if (!v86)
      {
LABEL_208:
        *v87 = *(_QWORD *)(a1 + 16);
        *(void **)(a1 + 16) = __p[0];
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
        if (*(_QWORD *)__p[0])
        {
          v88 = *(_QWORD *)(*(_QWORD *)__p[0] + 8);
          if ((v59 & (v59 - 1)) != 0)
          {
            if (v88 >= v59)
              v88 %= v59;
          }
          else
          {
            v88 &= v59 - 1;
          }
          *(void **)(*(_QWORD *)a1 + 8 * v88) = __p[0];
        }
        goto LABEL_214;
      }
LABEL_206:
      *v87 = *v86;
      *v86 = __p[0];
LABEL_214:
      ++*(_QWORD *)(a1 + 24);
      v4 += 5;
      if (v4 == a3)
        return;
    }
    if (v60.u32[0] < 2uLL)
    {
      while (1)
      {
        v66 = v62[1];
        if (v66 == v58)
        {
          v67 = *((char *)v4 + 23);
          if (v67 >= 0)
            v68.__data_ = (const std::string_view::value_type *)v4;
          else
            v68.__data_ = (const std::string_view::value_type *)*v4;
          if (v67 >= 0)
            v68.__size_ = *((unsigned __int8 *)v4 + 23);
          else
            v68.__size_ = (std::basic_string_view<_CharT, _Traits>::size_type)v4[1];
          if (!std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)(v62 + 2), v68))
            goto LABEL_169;
        }
        else if ((v66 & (v59 - 1)) != v3)
        {
          goto LABEL_171;
        }
        v62 = (uint64_t *)*v62;
        if (!v62)
          goto LABEL_171;
      }
    }
    while (1)
    {
      v63 = v62[1];
      if (v63 == v58)
        break;
      if (v63 >= v59)
        v63 %= v59;
      if (v63 != v3)
        goto LABEL_171;
LABEL_147:
      v62 = (uint64_t *)*v62;
      if (!v62)
        goto LABEL_171;
    }
    v64 = *((char *)v4 + 23);
    if (v64 >= 0)
      v65.__data_ = (const std::string_view::value_type *)v4;
    else
      v65.__data_ = (const std::string_view::value_type *)*v4;
    if (v64 >= 0)
      v65.__size_ = *((unsigned __int8 *)v4 + 23);
    else
      v65.__size_ = (std::basic_string_view<_CharT, _Traits>::size_type)v4[1];
    if (std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)(v62 + 2), v65))
      goto LABEL_147;
LABEL_169:
    v4 += 5;
  }
  while (v4 != a3);
}

void sub_22410FF38(void *a1)
{
  char *v1;

  __cxa_begin_catch(a1);
  sub_22410D040(v1);
  __cxa_rethrow();
}

void sub_22410FF64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22410FFA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_22410FF84(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *sub_22410FFA4(uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(std::__shared_weak_count **)(v2 + 48);
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
          if ((*(char *)(v2 + 39) & 0x80000000) == 0)
            goto LABEL_9;
          goto LABEL_8;
        }
      }
      if (*(char *)(v2 + 39) < 0)
LABEL_8:
        operator delete(*(void **)(v2 + 16));
    }
LABEL_9:
    operator delete((void *)v2);
  }
  return a1;
}

void sub_224110040()
{
  JUMPOUT(0x227684CE8);
}

_DWORD *sub_224110054(uint64_t a1)
{
  _DWORD *result;
  int v3;

  result = operator new(0x10uLL);
  v3 = *(_DWORD *)(a1 + 8);
  *(_QWORD *)result = &off_24EC69B68;
  result[2] = v3;
  return result;
}

uint64_t sub_22411008C(uint64_t result, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)(result + 8);
  *(_QWORD *)a2 = &off_24EC69B68;
  *(_DWORD *)(a2 + 8) = v2;
  return result;
}

unint64_t sub_2241100AC(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  unint64_t result;
  int v9;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void *p_p;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _BYTE *v25;
  _QWORD *v26;
  __int128 *v27;
  uint64_t v28;
  char v29;
  size_t v30;
  void *v31;
  unint64_t v32;
  const void *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  const char *v37;
  uint64_t v38;
  const char *v39;
  size_t v40;
  unsigned int v41;
  unsigned __int8 v42;
  const char *v43;
  size_t v44;
  _BYTE *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void **v49;
  NSObject *v50;
  uint64_t v51;
  uint64_t v52;
  os_log_type_t v53;
  size_t v54;
  std::__shared_weak_count_vtbl *v55;
  std::__shared_weak_count *v56;
  unint64_t *p_shared_owners;
  size_t v58;
  size_t v59;
  _BYTE *v60;
  void *v61;
  int v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  _QWORD *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  char *v71;
  char *shared_owners;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const char *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  const char *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  os_log_type_t v94;
  const char *v95;
  int v96;
  void *v97[2];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v99;
  const char *v100;
  int v101;
  const char *v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  void *__p;
  size_t v106;
  int64_t v107;
  _QWORD v108[2];
  _QWORD v109[3];
  const void *v110;
  uint64_t v111;
  const void *v112;
  unint64_t v113;
  void *v114;
  char v115;
  unint64_t v116;
  int v117;
  uint64_t v118;
  unint64_t v119;
  char v120;
  _QWORD v121[2];
  __int128 v122;
  unsigned __int8 v123;
  _BYTE __dst[24];
  unint64_t v125;
  char v126;
  void *v127[2];
  unint64_t v128;
  char v129;
  uint64_t v130;

  v130 = *MEMORY[0x24BDAC8D0];
  sub_224110F74(&v119);
  result = v119;
  if (**(_DWORD **)(v119 + 56) > *(_DWORD *)(a1 + 8))
    return result;
  v9 = *(unsigned __int8 *)(v119 + 72);
  result = sub_22322F254(v119, "OSLogSurrogateAppender", 1, 0);
  if (!v9 && result == 0)
    return result;
  v11 = result;
  sub_223195210((uint64_t)v108);
  v12 = sub_2231813E8(v109, (uint64_t)"Failed to export data of type ", 30);
  v13 = a3[1];
  if (!v13)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v13 = a3[1];
  }
  (*(void (**)(void **__return_ptr))(*(_QWORD *)v13 + 48))(v97);
  sub_224111068((uint64_t)v97);
  if (v107 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  if (v107 >= 0)
    v15 = HIBYTE(v107);
  else
    v15 = v106;
  v16 = sub_2231813E8(v12, (uint64_t)p_p, v15);
  v17 = sub_2231813E8(v16, (uint64_t)" and time ", 10);
  v18 = *(unsigned __int8 *)((*(uint64_t (**)(_QWORD *))(*a3 + 16))(a3) + 96);
  v19 = (*(uint64_t (**)(_QWORD *))(*a3 + 16))(a3);
  if (v18)
    v20 = (uint64_t *)(v19 + 80);
  else
    v20 = (uint64_t *)v19;
  v21 = sub_2245054F4(v17, v20);
  v22 = sub_2231813E8(v21, (uint64_t)" in ", 4);
  v23 = v22;
  v24 = *(unsigned __int8 *)(a2 + 23);
  if ((v24 & 0x80u) == 0)
    v25 = (_BYTE *)a2;
  else
    v25 = *(_BYTE **)a2;
  if ((v24 & 0x80u) != 0)
    v24 = *(_QWORD *)(a2 + 8);
  sub_223844E40(v22, v25, &v25[v24], 0x22u, 0x5Cu);
  v26 = sub_2231813E8(v23, (uint64_t)", error: ", 9);
  LODWORD(v125) = 0;
  sub_22411119C((uint64_t)v121, (std::string::size_type)__dst, a4);
  if ((_DWORD)v125 == -1)
    sub_22316DD70();
  v121[0] = &v120;
  ((void (*)(__int128 *__return_ptr, _QWORD *, _BYTE *))off_24EC69950[v125])(&v122, v121, __dst);
  if ((_DWORD)v125 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_24EC69938[v125])(v121, __dst);
  if ((v123 & 0x80u) == 0)
    v27 = &v122;
  else
    v27 = (__int128 *)v122;
  if ((v123 & 0x80u) == 0)
    v28 = v123;
  else
    v28 = *((_QWORD *)&v122 + 1);
  sub_2231813E8(v26, (uint64_t)v27, v28);
  if ((char)v123 < 0)
  {
    operator delete((void *)v122);
    if ((SHIBYTE(v107) & 0x80000000) == 0)
    {
LABEL_34:
      if ((SHIBYTE(rep) & 0x80000000) == 0)
        goto LABEL_35;
      goto LABEL_40;
    }
  }
  else if ((SHIBYTE(v107) & 0x80000000) == 0)
  {
    goto LABEL_34;
  }
  operator delete(__p);
  if ((SHIBYTE(rep) & 0x80000000) == 0)
  {
LABEL_35:
    v29 = v117;
    v96 = v9;
    if ((v117 & 0x10) == 0)
      goto LABEL_36;
LABEL_41:
    v32 = v116;
    if (v116 < v113)
    {
      v116 = v113;
      v32 = v113;
    }
    v33 = v112;
    v30 = v32 - (_QWORD)v112;
    if (v32 - (unint64_t)v112 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_99;
    goto LABEL_44;
  }
LABEL_40:
  operator delete(v97[0]);
  v29 = v117;
  v96 = v9;
  if ((v117 & 0x10) != 0)
    goto LABEL_41;
LABEL_36:
  if ((v29 & 8) == 0)
  {
    v30 = 0;
    HIBYTE(v107) = 0;
    v31 = &__p;
    goto LABEL_51;
  }
  v33 = v110;
  v30 = v111 - (_QWORD)v110;
  if ((unint64_t)(v111 - (_QWORD)v110) > 0x7FFFFFFFFFFFFFF7)
LABEL_99:
    sub_22316DBC0();
LABEL_44:
  if (v30 >= 0x17)
  {
    v34 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30 | 7) != 0x17)
      v34 = v30 | 7;
    v35 = v34 + 1;
    v31 = operator new(v34 + 1);
    v106 = v30;
    v107 = v35 | 0x8000000000000000;
    __p = v31;
    goto LABEL_50;
  }
  HIBYTE(v107) = v30;
  v31 = &__p;
  if (v30)
LABEL_50:
    memmove(v31, v33, v30);
LABEL_51:
  *((_BYTE *)v31 + v30) = 0;
  v36 = *(_DWORD *)(a1 + 8);
  v97[0] = &v119;
  v97[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
  rep = std::chrono::system_clock::now().__d_.__rep_;
  v99 = v36;
  v100 = "unknown file";
  v101 = 434;
  v103 = 0;
  v104 = 0;
  v102 = "unknown function";
  if (v107 >= 0)
    v37 = (const char *)&__p;
  else
    v37 = (const char *)__p;
  v38 = *(_QWORD *)v97[0];
  v39 = (const char *)(*(_QWORD *)v97[0] + 16);
  v95 = v39;
  if (*(char *)(*(_QWORD *)v97[0] + 39) < 0)
  {
    v39 = *(const char **)(v38 + 16);
    v40 = *(_QWORD *)(v38 + 24);
  }
  else
  {
    v40 = *(unsigned __int8 *)(*(_QWORD *)v97[0] + 39);
  }
  v41 = *(_DWORD *)(a1 + 8);
  v42 = atomic_load((unsigned __int8 *)&qword_255788F58);
  if ((v42 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)__dst);
    if ((_BYTE)v125)
    {
      *(_OWORD *)byte_255788F40 = *(_OWORD *)__dst;
      *(_QWORD *)&byte_255788F40[16] = *(_QWORD *)&__dst[16];
    }
    else
    {
      byte_255788F40[23] = 14;
      strcpy(byte_255788F40, "com.apple.cv3d");
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
  if (byte_255788F40[23] >= 0)
    v43 = byte_255788F40;
  else
    v43 = *(const char **)byte_255788F40;
  if (byte_255788F40[23] >= 0)
    v44 = byte_255788F40[23];
  else
    v44 = *(_QWORD *)&byte_255788F40[8];
  *(_QWORD *)__dst = os_log_create(v43, v39);
  v45 = &__dst[8];
  if (v44 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v44 >= 0x17)
  {
    v46 = v11;
    v47 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v44 | 7) != 0x17)
      v47 = v44 | 7;
    v48 = v47 + 1;
    v45 = operator new(v47 + 1);
    *(_QWORD *)&__dst[16] = v44;
    v125 = v48 | 0x8000000000000000;
    *(_QWORD *)&__dst[8] = v45;
    v11 = v46;
    goto LABEL_71;
  }
  HIBYTE(v125) = v44;
  if (v44)
LABEL_71:
    memmove(v45, v43, v44);
  v45[v44] = 0;
  v126 = 1;
  v49 = v127;
  if (v40 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v40 >= 0x17)
  {
    v51 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v40 | 7) != 0x17)
      v51 = v40 | 7;
    v52 = v51 + 1;
    v49 = (void **)operator new(v51 + 1);
    v127[1] = (void *)v40;
    v128 = v52 | 0x8000000000000000;
    v127[0] = v49;
  }
  else
  {
    HIBYTE(v128) = v40;
    if (!v40)
    {
      LOBYTE(v127[0]) = 0;
      v129 = 1;
      v50 = *(NSObject **)__dst;
      if ((SHIBYTE(v128) & 0x80000000) == 0)
        goto LABEL_76;
      goto LABEL_82;
    }
  }
  memmove(v49, v39, v40);
  *((_BYTE *)v49 + v40) = 0;
  v129 = 1;
  v50 = *(NSObject **)__dst;
  if ((SHIBYTE(v128) & 0x80000000) == 0)
  {
LABEL_76:
    if (!v126)
      goto LABEL_85;
    goto LABEL_83;
  }
LABEL_82:
  operator delete(v127[0]);
  if (!v126)
    goto LABEL_85;
LABEL_83:
  if (SHIBYTE(v125) < 0)
    operator delete(*(void **)&__dst[8]);
LABEL_85:
  if (*(_QWORD *)__dst)
    os_release(*(void **)__dst);
  if (v41 >= 7)
    v53 = OS_LOG_TYPE_DEBUG;
  else
    v53 = (0x11101001020202uLL >> (8 * v41));
  if (!v11 || !*(_QWORD *)(v11 + 24))
  {
    os_log_type_enabled(v50, v53);
    *(_DWORD *)__dst = 136315138;
    *(_QWORD *)&__dst[4] = v37;
    v61 = (void *)_os_log_send_and_compose_impl();
    v62 = v96;
    if (v61)
      free(v61);
    goto LABEL_129;
  }
  v54 = _os_log_pack_size();
  v55 = (std::__shared_weak_count_vtbl *)operator new(v54, (std::align_val_t)8uLL);
  v56 = (std::__shared_weak_count *)operator new();
  v56->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v56->__shared_owners_;
  v56->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
  v56->__shared_weak_owners_ = 0;
  v56[1].__vftable = v55;
  v58 = strlen(v37);
  if (v58 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v59 = v58;
  v94 = v53;
  if (v58 >= 0x17)
  {
    v63 = v11;
    v64 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v58 | 7) != 0x17)
      v64 = v58 | 7;
    v65 = v64 + 1;
    v60 = operator new(v64 + 1);
    *(_QWORD *)&__dst[8] = v59;
    *(_QWORD *)&__dst[16] = v65 | 0x8000000000000000;
    *(_QWORD *)__dst = v60;
    v11 = v63;
    goto LABEL_103;
  }
  __dst[23] = v58;
  v60 = __dst;
  if (v58)
LABEL_103:
    memcpy(v60, v37, v59);
  v93 = v11;
  v60[v59] = 0;
  *(_QWORD *)&v122 = *(_QWORD *)&__dst[8];
  v66 = *(_QWORD *)__dst;
  *(_QWORD *)((char *)&v122 + 7) = *(_QWORD *)&__dst[15];
  v67 = __dst[23];
  v68 = operator new(0x38uLL);
  v69 = (std::__shared_weak_count *)v68;
  v68[1] = 0;
  v70 = v68 + 1;
  v68[3] = off_24EC1FA48;
  v71 = (char *)(v68 + 3);
  v68[2] = 0;
  v68[4] = v66;
  shared_owners = (char *)(v68 + 4);
  *v68 = &off_24EC1F9F8;
  v68[5] = v122;
  *(_QWORD *)((char *)v68 + 47) = *(_QWORD *)((char *)&v122 + 7);
  *((_BYTE *)v68 + 55) = v67;
  do
    v73 = __ldxr(p_shared_owners);
  while (__stxr(v73 + 1, p_shared_owners));
  do
    v74 = __ldxr(v70);
  while (__stxr(v74 + 1, v70));
  do
    v75 = __ldaxr(v70);
  while (__stlxr(v75 - 1, v70));
  if (!v75)
  {
    (*(void (**)(_QWORD *))(*v68 + 16))(v68);
    std::__shared_weak_count::__release_weak(v69);
  }
  do
    v76 = __ldaxr(p_shared_owners);
  while (__stlxr(v76 - 1, p_shared_owners));
  if (!v76)
  {
    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
    std::__shared_weak_count::__release_weak(v56);
  }
  if (SHIBYTE(v69[2].__vftable) < 0)
    shared_owners = (char *)v69[1].__shared_owners_;
  v77 = _os_log_pack_fill();
  *(_DWORD *)v77 = 136315138;
  *(_QWORD *)(v77 + 4) = shared_owners;
  v78 = operator new();
  v79 = *(unsigned __int8 *)(v38 + 39);
  v80 = v95;
  if ((v79 & 0x80u) != 0)
  {
    v80 = *(const char **)(v38 + 16);
    v79 = *(_QWORD *)(v38 + 24);
  }
  *(_QWORD *)v78 = v55;
  *(_QWORD *)(v78 + 8) = v55;
  *(_QWORD *)(v78 + 16) = v56;
  *(_QWORD *)(v78 + 24) = v71;
  *(_QWORD *)(v78 + 32) = v69;
  *(_QWORD *)(v78 + 40) = v80;
  *(_QWORD *)(v78 + 48) = v79;
  *(_BYTE *)(v78 + 56) = v94;
  *(_QWORD *)__dst = v78;
  (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v93 + 24) + 40))(*(_QWORD *)(v93 + 24), __dst);
  v81 = *(_QWORD *)__dst;
  *(_QWORD *)__dst = 0;
  v62 = v96;
  if (v81)
  {
    v82 = *(std::__shared_weak_count **)(v81 + 32);
    if (v82)
    {
      v83 = (unint64_t *)&v82->__shared_owners_;
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
    v85 = *(std::__shared_weak_count **)(v81 + 16);
    if (v85)
    {
      v86 = (unint64_t *)&v85->__shared_owners_;
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
    }
    MEMORY[0x227684CE8](v81, 0x10F0C40B62ED6C6);
  }
LABEL_129:
  if (v62)
  {
    v88 = (const char *)&__p;
    if (v107 < 0)
      v88 = (const char *)__p;
    sub_22322C138((uint64_t)v97, "%s", v88);
    sub_223182C08((uint64_t)v97);
  }
  sub_223182C08((uint64_t)v97);
  v89 = v104;
  if (v104)
  {
    v90 = (unint64_t *)&v104->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  if (SHIBYTE(v107) < 0)
    operator delete(__p);
  v108[0] = *MEMORY[0x24BEDB7F0];
  v92 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v108 + *(_QWORD *)(v108[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v109[0] = v92;
  v109[1] = MEMORY[0x24BEDB848] + 16;
  if (v115 < 0)
    operator delete(v114);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x227684BE0](&v118);
}

void sub_224110BD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  std::__shared_weak_count *v55;
  unint64_t *p_shared_owners;
  unint64_t v57;
  uint64_t v58;

  __cxa_guard_abort(&qword_255788F58);
  sub_223182C08((uint64_t)&a17);
  v55 = a28;
  if (a28)
  {
    p_shared_owners = (unint64_t *)&a28->__shared_owners_;
    do
      v57 = __ldaxr(p_shared_owners);
    while (__stlxr(v57 - 1, p_shared_owners));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (a34 < 0)
    operator delete(__p);
  a35 = *MEMORY[0x24BEDB7F0];
  v58 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(uint64_t *)((char *)&a35 + *(_QWORD *)(a35 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  a37 = v58;
  a38 = MEMORY[0x24BEDB848] + 16;
  if (a51 < 0)
    operator delete(a46);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x227684BE0](&a54);
  _Unwind_Resume(a1);
}

uint64_t sub_224110EFC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit3viz13VDataExporter17LogErrorsInternalEN4tlog8LogLevelEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit3viz13VDataExporter17LogErrorsInternalEN4tlog8LogLevelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit3viz13VDataExporter17LogErrorsInternalEN4tlog8LogLevelEE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit3viz13VDataExporter17LogErrorsInternalEN4tlog8LogLevelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_224110F68()
{
  return &unk_24EC69BD8;
}

void sub_224110F74(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)qword_2540CEDC0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(qword_2540CEDC0))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.kit.viz");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CEDB8);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(qword_2540CEDC0);
  }
  *a1 = qword_2540CEDB8;
}

void sub_224111010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(qword_2540CEDC0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(qword_2540CEDC0);
  _Unwind_Resume(a1);
}

uint64_t sub_224111068(uint64_t a1)
{
  uint64_t result;
  _DWORD v2[6];
  int v3;
  _QWORD v4[2];
  char v5;
  _QWORD *v6;
  const char *v7;
  char *v8;
  const char *v9;
  const char *v10;
  _QWORD *v11;

  v3 = 0;
  v4[0] = a1;
  v4[1] = a1 + 24;
  sub_2231ABA1C(v2, "{");
  LOBYTE(v6) = 1;
  v7 = (const char *)v2;
  v8 = &v5;
  sub_224018D70((uint64_t)v4, (uint64_t)&v6);
  v6 = v2;
  v7 = "}";
  v8 = (char *)v2;
  v9 = "}";
  v10 = "}";
  if (v3 == -1)
    sub_22316DD70();
  v11 = &v6;
  ((void (*)(_QWORD **, _DWORD *))off_24EC69A48[v3])(&v11, v2);
  if (v3 == -1)
    sub_22316DD70();
  v6 = v4;
  result = ((uint64_t (*)(_QWORD **, _DWORD *))off_24EC69950[v3])(&v6, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD **, _DWORD *))off_24EC69938[v3])(&v6, v2);
  return result;
}

void sub_224111174(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_224111188(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22411119C(uint64_t a1, std::string::size_type a2, uint64_t a3)
{
  uint64_t v5;
  std::string *p_p;
  std::string::size_type size;
  int v8;
  size_t v9;
  void **v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  std::string *v16;
  uint64_t v17;
  uint64_t v18;
  std::string::size_type v19;
  uint64_t v20;
  void *__dst[2];
  unint64_t v22;
  std::string __p;
  void **v24;
  void **v25;
  std::string *v26;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_223195210(v5);
  v26 = (std::string *)v5;
  sub_22456A158(a3, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  sub_2231813E8((_QWORD *)(v5 + 16), (uint64_t)p_p, size);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v8 = *(_DWORD *)(v5 + 120);
    if ((v8 & 0x10) == 0)
      goto LABEL_9;
LABEL_12:
    v11 = *(_QWORD *)(v5 + 112);
    v12 = *(_QWORD *)(v5 + 72);
    if (v11 < v12)
    {
      *(_QWORD *)(v5 + 112) = v12;
      v11 = v12;
    }
    v13 = *(const void **)(v5 + 64);
    v9 = v11 - (_QWORD)v13;
    if (v11 - (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_30;
    goto LABEL_15;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  v8 = *(_DWORD *)(v5 + 120);
  if ((v8 & 0x10) != 0)
    goto LABEL_12;
LABEL_9:
  if ((v8 & 8) == 0)
  {
    v9 = 0;
    HIBYTE(v22) = 0;
    v10 = __dst;
    goto LABEL_22;
  }
  v13 = *(const void **)(v5 + 40);
  v9 = *(_QWORD *)(v5 + 56) - (_QWORD)v13;
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
LABEL_30:
    sub_22316DBC0();
LABEL_15:
  if (v9 >= 0x17)
  {
    v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v14 = v9 | 7;
    v15 = v14 + 1;
    v10 = (void **)operator new(v14 + 1);
    __dst[1] = (void *)v9;
    v22 = v15 | 0x8000000000000000;
    __dst[0] = v10;
    goto LABEL_21;
  }
  HIBYTE(v22) = v9;
  v10 = __dst;
  if (v9)
LABEL_21:
    memmove(v10, v13, v9);
LABEL_22:
  *((_BYTE *)v10 + v9) = 0;
  v16 = v26;
  if (v26)
  {
    v17 = MEMORY[0x24BEDB7F0];
    v18 = *MEMORY[0x24BEDB7F0];
    v26->__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7F0];
    v19 = *(_QWORD *)(v17 + 72);
    *(std::string::size_type *)((char *)v16->__r_.__value_.__r.__words + *(_QWORD *)(v18 - 24)) = *(_QWORD *)(v17 + 64);
    v16[1].__r_.__value_.__r.__words[0] = MEMORY[0x24BEDB848] + 16;
    v16->__r_.__value_.__r.__words[2] = v19;
    if (v16[4].__r_.__value_.__s.__data_[15] < 0)
      operator delete((void *)v16[3].__r_.__value_.__r.__words[2]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](&v16[5].__r_.__value_.__r.__words[1]);
    MEMORY[0x227684CE8](v16, 0x10B2C40EED050F3);
  }
  __p.__r_.__value_.__r.__words[0] = a2;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)__dst;
  __p.__r_.__value_.__r.__words[2] = a2;
  v24 = __dst;
  v25 = __dst;
  v20 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v20 == -1)
    sub_22316DD70();
  v26 = &__p;
  ((void (*)(std::string **, std::string::size_type))off_24EC69A60[v20])(&v26, a2);
  if (SHIBYTE(v22) < 0)
    operator delete(__dst[0]);
}

void sub_224111428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a21 < 0)
  {
    operator delete(__p);
    sub_22456E764((uint64_t *)(v21 - 56));
    _Unwind_Resume(a1);
  }
  sub_22456E764((uint64_t *)(v21 - 56));
  _Unwind_Resume(a1);
}

char *sub_2241114A0@<X0>(char *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  char *v5;
  uint64_t v6;

  v4 = result[96];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 24) = 0;
  if (v4)
  {
    v5 = result;
    if (result[24])
    {
      if (result[23] < 0)
      {
        sub_223197FA4((_BYTE *)a3, *(void **)result, *((_QWORD *)result + 1));
      }
      else
      {
        *(_OWORD *)a3 = *(_OWORD *)result;
        *(_QWORD *)(a3 + 16) = *((_QWORD *)result + 2);
      }
      *(_BYTE *)(a3 + 24) = 1;
    }
    return sub_2231A0074((char *)(a3 + 32), (__int128 *)v5 + 2);
  }
  else
  {
    if (*(_BYTE *)(a2 + 24))
    {
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)a2 = 0;
      *(_BYTE *)(a3 + 24) = 1;
    }
    *(_BYTE *)(a3 + 32) = 0;
    *(_BYTE *)(a3 + 88) = 0;
    if (*(_BYTE *)(a2 + 88))
    {
      v6 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a3 + 48) = *(_QWORD *)(a2 + 48);
      *(_OWORD *)(a3 + 32) = *(_OWORD *)(a2 + 32);
      *(_QWORD *)(a2 + 40) = 0;
      *(_QWORD *)(a2 + 48) = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a3 + 56) = v6;
      *(_OWORD *)(a3 + 64) = *(_OWORD *)(a2 + 64);
      *(_QWORD *)(a3 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a2 + 64) = 0;
      *(_QWORD *)(a2 + 72) = 0;
      *(_QWORD *)(a2 + 80) = 0;
      *(_BYTE *)(a3 + 88) = 1;
    }
  }
  return result;
}

void sub_224111598(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2241115C0(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_24EC78E28;
  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 40);
  if (v3)
  {
    *(_QWORD *)(a1 + 48) = v3;
    operator delete(v3);
  }
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
    (*(void (**)(void))(a1 + 24))();
  return a1;
}

void sub_224111624(std::string *this, _QWORD *a2, _QWORD *a3)
{
  _BOOL4 v6;
  int v7;
  int v8;
  std::string::value_type *v9;
  std::string::value_type v10;
  uint64_t v11;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  while (1)
  {
    if (!a2)
    {
      if (!a3)
        return;
      a2 = 0;
      if (a3[3] != a3[4])
        goto LABEL_20;
      v6 = 1;
      goto LABEL_17;
    }
    if (a2[3] != a2[4])
    {
      if (!a3)
        goto LABEL_20;
      if (a3[3] != a3[4])
        return;
      v6 = 0;
      goto LABEL_17;
    }
    v7 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
    v6 = v7 == -1;
    if (v7 == -1)
      a2 = 0;
    if (a3)
      break;
    if (v7 == -1)
      return;
    a3 = 0;
    v9 = (std::string::value_type *)a2[3];
    if (v9 == (std::string::value_type *)a2[4])
    {
LABEL_24:
      v10 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
      goto LABEL_25;
    }
LABEL_21:
    v10 = *v9;
LABEL_25:
    std::string::push_back(this, v10);
    v11 = a2[3];
    if (v11 == a2[4])
      (*(void (**)(_QWORD *))(*a2 + 80))(a2);
    else
      a2[3] = v11 + 1;
  }
  if (a3[3] != a3[4])
  {
    if (v7 != -1)
      return;
LABEL_20:
    v9 = (std::string::value_type *)a2[3];
    if (v9 == (std::string::value_type *)a2[4])
      goto LABEL_24;
    goto LABEL_21;
  }
LABEL_17:
  v8 = (*(uint64_t (**)(_QWORD *))(*a3 + 72))(a3);
  if (v8 == -1)
    a3 = 0;
  if (v6 != (v8 == -1))
    goto LABEL_20;
}

void sub_22411176C(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  __cxa_rethrow();
}

void sub_224111788(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_22411179C(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_24EC78E28;
  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 40);
  if (v3)
  {
    *(_QWORD *)(a1 + 48) = v3;
    operator delete(v3);
  }
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
    (*(void (**)(void))(a1 + 24))();
  JUMPOUT(0x227684CE8);
}

char *sub_224111818(uint64_t *a1, _BYTE *a2)
{
  char *v4;
  char *result;
  char v6;

  v4 = (char *)sub_2245448E0(a1);
  ++a1[14];
  v6 = 0;
  result = sub_22451CECC(v4, &v6);
  *a2 = v6;
  return result;
}

void sub_224111864(uint64_t *a1, _BYTE *a2)
{
  char *v4;
  _QWORD *exception;
  uint64_t v6;

  v4 = (char *)sub_2245448E0(a1);
  ++a1[14];
  v6 = 0;
  sub_22451CC1C(v4, &v6);
  if (v6 != (char)v6)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24EC7AC38;
    __cxa_throw(exception, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v6;
}

void sub_2241118E0(uint64_t *a1, _WORD *a2)
{
  char *v4;
  _QWORD *exception;
  uint64_t v6;

  v4 = (char *)sub_2245448E0(a1);
  ++a1[14];
  v6 = 0;
  sub_22451CC1C(v4, &v6);
  if (v6 != (__int16)v6)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24EC7AC38;
    __cxa_throw(exception, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v6;
}

void sub_22411195C(uint64_t *a1, _DWORD *a2)
{
  char *v4;
  _QWORD *exception;
  uint64_t v6;

  v4 = (char *)sub_2245448E0(a1);
  ++a1[14];
  v6 = 0;
  sub_22451CC1C(v4, &v6);
  if (v6 != (int)v6)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24EC7AC38;
    __cxa_throw(exception, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v6;
}

void sub_2241119D8(uint64_t *a1, _QWORD *a2)
{
  char *v4;
  uint64_t v5;

  v4 = (char *)sub_2245448E0(a1);
  ++a1[14];
  v5 = 0;
  sub_22451CC1C(v4, &v5);
  *a2 = v5;
}

void sub_224111A24(uint64_t *a1, _QWORD *a2)
{
  char *v4;
  uint64_t v5;

  v4 = (char *)sub_2245448E0(a1);
  ++a1[14];
  v5 = 0;
  sub_22451CC1C(v4, &v5);
  *a2 = v5;
}

void sub_224111A70(uint64_t *a1, _BYTE *a2)
{
  char *v4;
  _QWORD *exception;
  unint64_t v6;

  v4 = (char *)sub_2245448E0(a1);
  ++a1[14];
  v6 = 0;
  sub_22451CAD4(v4, &v6);
  if (v6 >= 0x100)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24EC7AC38;
    __cxa_throw(exception, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v6;
}

void sub_224111AEC(uint64_t *a1, _BYTE *a2)
{
  char *v4;
  _QWORD *exception;
  uint64_t v6;

  v4 = (char *)sub_2245448E0(a1);
  ++a1[14];
  v6 = 0;
  sub_22451CC1C(v4, &v6);
  if (v6 != (char)v6)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24EC7AC38;
    __cxa_throw(exception, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v6;
}

void sub_224111B68(uint64_t *a1, _WORD *a2)
{
  char *v4;
  _QWORD *exception;
  unint64_t v6;

  v4 = (char *)sub_2245448E0(a1);
  ++a1[14];
  v6 = 0;
  sub_22451CAD4(v4, &v6);
  if (v6 >= 0x10000)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24EC7AC38;
    __cxa_throw(exception, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v6;
}

void sub_224111BE4(uint64_t *a1, _DWORD *a2)
{
  char *v4;
  _QWORD *exception;
  unint64_t v6;

  v4 = (char *)sub_2245448E0(a1);
  ++a1[14];
  v6 = 0;
  sub_22451CAD4(v4, &v6);
  if (HIDWORD(v6))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24EC7AC38;
    __cxa_throw(exception, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v6;
}

void sub_224111C60(uint64_t *a1, _QWORD *a2)
{
  char *v4;
  uint64_t v5;

  v4 = (char *)sub_2245448E0(a1);
  ++a1[14];
  v5 = 0;
  sub_22451CAD4(v4, &v5);
  *a2 = v5;
}

void sub_224111CAC(uint64_t *a1, _QWORD *a2)
{
  char *v4;
  uint64_t v5;

  v4 = (char *)sub_2245448E0(a1);
  ++a1[14];
  v5 = 0;
  sub_22451CAD4(v4, &v5);
  *a2 = v5;
}

void sub_224111CF8(uint64_t *a1, float *a2)
{
  uint64_t *v4;

  v4 = (uint64_t *)sub_2245448E0(a1);
  ++a1[14];
  *a2 = sub_22454AD28(v4);
}

void sub_224111D30(uint64_t *a1, double *a2)
{
  uint64_t *v4;

  v4 = (uint64_t *)sub_2245448E0(a1);
  ++a1[14];
  *a2 = sub_22454AE08(v4);
}

double sub_224111D68(uint64_t *a1, uint64_t a2)
{
  void **v4;
  double result;
  __int128 v6;
  uint64_t v7;

  v4 = (void **)sub_2245448E0(a1);
  ++a1[14];
  v7 = 0;
  v6 = 0uLL;
  sub_22451CFD4(v4, (uint64_t)&v6);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v6;
  *(_OWORD *)a2 = v6;
  *(_QWORD *)(a2 + 16) = v7;
  return result;
}

void sub_224111DD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_224111DEC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_2245460B4(a1, (uint64_t)v3);
}

void sub_224111E10(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  _QWORD v5[2];

  v5[0] = a2;
  v5[1] = a3;
  v4 = (char *)sub_2245448E0(a1);
  ++a1[14];
  sub_224545684(v4, (uint64_t)v5);
}

void sub_224111E50(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  _QWORD v5[2];

  v5[0] = a2;
  v5[1] = a3;
  v4 = (char *)sub_2245448E0(a1);
  ++a1[14];
  sub_224545830(v4, (uint64_t)v5);
}

void sub_224111E90(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  _QWORD v5[2];

  v5[0] = a2;
  v5[1] = a3;
  v4 = (char *)sub_2245448E0(a1);
  ++a1[14];
  sub_2245459DC(v4, (uint64_t)v5);
}

void sub_224111ED0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;

  v5 = (char *)sub_2245448E0(a1);
  ++a1[14];
  v18 = 0;
  v19 = 0;
  v20 = 0;
  sub_224547C94(v5, (uint64_t)&v18);
  v6 = v18;
  v7 = v19;
  if (v18 != v19)
  {
    v8 = (char *)v19 - (char *)v18 - 8;
    v9 = (_QWORD *)a3;
    v10 = v18;
    if (v8 < 0x18)
      goto LABEL_11;
    v11 = (v8 >> 3) + 1;
    v12 = v11 & 0x3FFFFFFFFFFFFFFCLL;
    v9 = (_QWORD *)(a3 + v12 * 8);
    v10 = &v18[v12];
    v13 = (__int128 *)(v18 + 2);
    v14 = (_OWORD *)(a3 + 16);
    v15 = v11 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v16 = *v13;
      *(v14 - 1) = *(v13 - 1);
      *v14 = v16;
      v13 += 2;
      v14 += 2;
      v15 -= 4;
    }
    while (v15);
    if (v11 != (v11 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_11:
      do
      {
        v17 = *v10++;
        *v9++ = v17;
      }
      while (v10 != v7);
    }
  }
  if (v6)
  {
    v19 = v6;
    operator delete(v6);
  }
}

void sub_224111F9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_224111FB8(uint64_t *a1, uint64_t a2, void *a3)
{
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;

  v5 = (char *)sub_2245448E0(a1);
  ++a1[14];
  v7 = 0;
  v8 = 0;
  v9 = 0;
  sub_224547C94(v5, (uint64_t)&v7);
  v6 = v7;
  if (v8 != v7)
    memmove(a3, v7, v8 - v7);
  if (v6)
  {
    v8 = v6;
    operator delete(v6);
  }
}

void sub_224112028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_224112044(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  _QWORD v5[2];

  v5[0] = a2;
  v5[1] = a3;
  v4 = (char *)sub_2245448E0(a1);
  ++a1[14];
  sub_2245449F8(v4, (uint64_t)v5);
}

void sub_224112084(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  _QWORD v5[2];

  v5[0] = a2;
  v5[1] = a3;
  v4 = (char *)sub_2245448E0(a1);
  ++a1[14];
  sub_224545740(v4, (uint64_t)v5);
}

void sub_2241120C4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  _QWORD v5[2];

  v5[0] = a2;
  v5[1] = a3;
  v4 = (char *)sub_2245448E0(a1);
  ++a1[14];
  sub_224545920(v4, (uint64_t)v5);
}

void sub_224112104(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  _QWORD v5[2];

  v5[0] = a2;
  v5[1] = a3;
  v4 = (char *)sub_2245448E0(a1);
  ++a1[14];
  sub_224545A98(v4, (uint64_t)v5);
}

void sub_224112144(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;

  v5 = (char *)sub_2245448E0(a1);
  ++a1[14];
  v18 = 0;
  v19 = 0;
  v20 = 0;
  sub_224547FD0(v5, (uint64_t)&v18);
  v6 = v18;
  v7 = v19;
  if (v18 != v19)
  {
    v8 = (char *)v19 - (char *)v18 - 8;
    v9 = (_QWORD *)a3;
    v10 = v18;
    if (v8 < 0x18)
      goto LABEL_11;
    v11 = (v8 >> 3) + 1;
    v12 = v11 & 0x3FFFFFFFFFFFFFFCLL;
    v9 = (_QWORD *)(a3 + v12 * 8);
    v10 = &v18[v12];
    v13 = (__int128 *)(v18 + 2);
    v14 = (_OWORD *)(a3 + 16);
    v15 = v11 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v16 = *v13;
      *(v14 - 1) = *(v13 - 1);
      *v14 = v16;
      v13 += 2;
      v14 += 2;
      v15 -= 4;
    }
    while (v15);
    if (v11 != (v11 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_11:
      do
      {
        v17 = *v10++;
        *v9++ = v17;
      }
      while (v10 != v7);
    }
  }
  if (v6)
  {
    v19 = v6;
    operator delete(v6);
  }
}

void sub_224112210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22411222C(uint64_t *a1, uint64_t a2, void *a3)
{
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;

  v5 = (char *)sub_2245448E0(a1);
  ++a1[14];
  v7 = 0;
  v8 = 0;
  v9 = 0;
  sub_224547FD0(v5, (uint64_t)&v7);
  v6 = v7;
  if (v8 != v7)
    memmove(a3, v7, v8 - v7);
  if (v6)
  {
    v8 = v6;
    operator delete(v6);
  }
}

void sub_22411229C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2241122B8(uint64_t *a1, uint64_t a2, float *a3)
{
  unint64_t v5;

  v5 = sub_2245448E0(a1);
  ++a1[14];
  sub_224545EA4(v5, a3);
}

void sub_2241122EC(uint64_t *a1, uint64_t a2, double *a3)
{
  unint64_t v5;

  v5 = sub_2245448E0(a1);
  ++a1[14];
  sub_224545FAC(v5, a3);
}

void sub_224112320(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_22454617C(a1, (uint64_t)v3);
}

void sub_224112344(uint64_t *a1, uint64_t a2)
{
  char *v4;

  v4 = (char *)sub_2245448E0(a1);
  ++a1[14];
  sub_2245449F8(v4, a2);
}

void sub_224112380(uint64_t a1, uint64_t a2)
{
  int v4;
  size_t v5;
  void **p_dst;
  unint64_t v7;
  unint64_t v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  size_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  char *v23;
  std::runtime_error *exception;
  std::__fs::filesystem::path v25;
  void **__dst;
  size_t v27;
  int64_t v28;
  std::string v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a1 + 144);
  if ((v4 & 0x10) != 0)
  {
    v7 = *(_QWORD *)(a1 + 136);
    v8 = *(_QWORD *)(a1 + 96);
    if (v7 < v8)
    {
      *(_QWORD *)(a1 + 136) = v8;
      v7 = v8;
    }
    v9 = *(const void **)(a1 + 88);
    v5 = v7 - (_QWORD)v9;
    if (v7 - (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_29;
  }
  else
  {
    if ((v4 & 8) == 0)
    {
      v5 = 0;
      HIBYTE(v28) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_14;
    }
    v9 = *(const void **)(a1 + 64);
    v5 = *(_QWORD *)(a1 + 80) - (_QWORD)v9;
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
LABEL_29:
      sub_22316DBC0();
  }
  if (v5 >= 0x17)
  {
    v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v10 = v5 | 7;
    v11 = v10 + 1;
    p_dst = (void **)operator new(v10 + 1);
    v27 = v5;
    v28 = v11 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_13;
  }
  HIBYTE(v28) = v5;
  p_dst = (void **)&__dst;
  if (v5)
LABEL_13:
    memmove(p_dst, v9, v5);
LABEL_14:
  *((_BYTE *)p_dst + v5) = 0;
  if (*(char *)(a1 + 135) < 0)
    operator delete(*(void **)(a1 + 112));
  *(_QWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 135) = 0;
  sub_2231B5488(a1 + 48);
  std::ios_base::clear((std::ios_base *)(a1 + 24 + *(_QWORD *)(*(_QWORD *)(a1 + 24) - 24)), 0);
  *(_QWORD *)(a1 + 312) = 0;
  v12 = HIBYTE(v28);
  if (v28 >= 0)
    v13 = HIBYTE(v28);
  else
    v13 = v27;
  if (!v13 && *(_BYTE *)(a1 + 328))
  {
    if ((v28 & 0x8000000000000000) == 0)
      return;
LABEL_51:
    operator delete(__dst);
    return;
  }
  if (*(_BYTE *)(a2 + 24))
  {
    if (v28 < 0)
      v12 = v27;
    if (!v12)
      goto LABEL_47;
LABEL_46:
    (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8));
    std::ostream::write();
    goto LABEL_47;
  }
  sub_2242B0918((const std::__fs::filesystem::path *)a1, 0x11u, *(_QWORD *)(a1 + 304), &v29);
  if (*(_BYTE *)(a2 + 24))
  {
    v14 = *(_OWORD *)&v29.__r_.__value_.__r.__words[1];
    *(_OWORD *)&v29.__r_.__value_.__r.__words[1] = 0uLL;
    v15 = *(std::__shared_weak_count **)(a2 + 16);
    *(_OWORD *)(a2 + 8) = v14;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  else
  {
    *(_QWORD *)a2 = &off_24EC71C10;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)&v29.__r_.__value_.__r.__words[1];
    *(_OWORD *)&v29.__r_.__value_.__r.__words[1] = 0uLL;
    *(_BYTE *)(a2 + 24) = 1;
  }
  v18 = (std::__shared_weak_count *)v29.__r_.__value_.__r.__words[2];
  if (v29.__r_.__value_.__r.__words[2])
  {
    v19 = (unint64_t *)(v29.__r_.__value_.__r.__words[2] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (!*(_QWORD *)(a2 + 8))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    if (*(char *)(a1 + 23) < 0)
      sub_223197FA4(&v25, *(void **)a1, *(_QWORD *)(a1 + 8));
    else
      v25.__pn_ = *(std::__fs::filesystem::path::string_type *)a1;
    sub_223799B10("Failed to write to file: ", &v25.__pn_, &v29);
    std::runtime_error::runtime_error(exception, &v29);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v21 = HIBYTE(v28);
  if (v28 < 0)
    v21 = v27;
  if (v21)
    goto LABEL_46;
LABEL_47:
  v22 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8));
  v23 = (char *)v22 + *(_QWORD *)(*v22 - 24);
  if ((v23[32] & 5) != 0)
  {
    *(_QWORD *)(a1 + 320) = 0;
    *(_BYTE *)(a1 + 328) = 1;
    if (v28 < 0)
      goto LABEL_51;
  }
  else
  {
    (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v23 + 5) + 32))(&v29, *((_QWORD *)v23 + 5), 0, 1, 16);
    *(_QWORD *)(a1 + 320) = v30 & ~(v30 >> 63);
    *(_BYTE *)(a1 + 328) = 1;
    if (v28 < 0)
      goto LABEL_51;
  }
}

void sub_224112768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;

  __cxa_free_exception(v26);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_2241127F0(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v10;
  uint64_t v11;
  int v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_223197FA4((_BYTE *)(a1 + 8), *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    v5 = a1 + 40;
    if ((*(char *)(a2 + 63) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    v5 = a1 + 40;
    if ((*(char *)(a2 + 63) & 0x80000000) == 0)
    {
LABEL_3:
      v6 = *(_OWORD *)(a2 + 40);
      *(_QWORD *)(v5 + 16) = *(_QWORD *)(a2 + 56);
      *(_OWORD *)v5 = v6;
      goto LABEL_6;
    }
  }
  sub_223197FA4((_BYTE *)v5, *(void **)(a2 + 40), *(_QWORD *)(a2 + 48));
LABEL_6:
  if (*(char *)(a2 + 119) < 0)
  {
    sub_223197FA4((_BYTE *)(a1 + 64), *(void **)(a2 + 96), *(_QWORD *)(a2 + 104));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 64) = v7;
  }
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 120);
  if (*(_BYTE *)(a2 + 88))
  {
    if (*(char *)(a2 + 87) < 0)
    {
      sub_223197FA4((_BYTE *)(a1 + 96), *(void **)(a2 + 64), *(_QWORD *)(a2 + 72));
    }
    else
    {
      v8 = *(_OWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 96) = v8;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 119) = 0;
    *(_BYTE *)(a1 + 96) = 0;
  }
  v12 = -1;
  if (*(char *)(a2 + 151) < 0)
  {
    sub_223197FA4(&v10, *(void **)(a2 + 128), *(_QWORD *)(a2 + 136));
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 128);
    v11 = *(_QWORD *)(a2 + 144);
  }
  *(_OWORD *)(a1 + 120) = v10;
  *(_QWORD *)(a1 + 136) = v11;
  return a1;
}

void sub_22411296C(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;
  void **v4;

  if (v1[87] < 0)
  {
    operator delete(*v4);
    if ((v1[63] & 0x80000000) == 0)
    {
LABEL_3:
      if ((v1[31] & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((v1[63] & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v3);
  if ((v1[31] & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*v2);
  _Unwind_Resume(exception_object);
}

BOOL sub_224112A10(const void **a1, char *__s)
{
  int v4;
  size_t v5;
  const void *v6;

  v4 = *((char *)a1 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  if (v5 != strlen(__s))
    return 0;
  if (v4 >= 0)
    v6 = a1;
  else
    v6 = *a1;
  return memcmp(v6, __s, v5) == 0;
}

void sub_224112A90(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::__fs::filesystem::path::__string_view v8;
  _BYTE *v9;
  std::basic_string_view<_CharT, _Traits>::size_type v10;
  std::basic_string_view<_CharT, _Traits>::size_type v11;
  std::__fs::filesystem::path::__string_view v12;
  int v13;
  std::__fs::filesystem::path::__string_view v14;
  _BYTE *v15;
  std::basic_string_view<_CharT, _Traits>::size_type v16;
  std::basic_string_view<_CharT, _Traits>::size_type v17;
  void *v18;
  char v19;
  char v20;
  void *v21;
  void *v22;
  size_t v23;
  std::__fs::filesystem::path::__string_view v24;
  _BYTE *v25;
  std::basic_string_view<_CharT, _Traits>::size_type v26;
  std::basic_string_view<_CharT, _Traits>::size_type v27;
  void *v28;
  int v29;
  char v30;
  int v31;
  uint64_t v32;
  BOOL v33;
  _DWORD *v34;
  _BOOL4 v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  std::__fs::filesystem::path::__string_view v39;
  _BYTE *v40;
  std::basic_string_view<_CharT, _Traits>::size_type v41;
  std::basic_string_view<_CharT, _Traits>::size_type v42;
  std::string::size_type size;
  void *v44;
  int v45;
  std::string *v46;
  std::string::size_type v47;
  uint64_t v48;
  uint64_t v49;
  void ***v50;
  _QWORD *v51;
  uint64_t v52;
  void ***v53;
  _QWORD *v56;
  void **v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  int v60;
  uint64_t v61;
  unsigned __int8 *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::string *v66;
  unint64_t v67;
  void *v68;
  int v69;
  unint64_t *p_shared_owners;
  unint64_t v71;
  unint64_t v72;
  _BYTE *v73;
  int v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  __int128 v78;
  unsigned __int8 *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::string *v83;
  unint64_t v84;
  void *v85;
  int v86;
  int v87;
  uint64_t v88;
  unint64_t *v89;
  __int128 v90;
  _BYTE v91[7];
  char v92;
  char v93;
  void *v94;
  char v95;
  void *v96;
  char v97;
  char v98;
  char v99;
  std::__fs::filesystem::path v100;
  std::__fs::filesystem::path v101;
  void *v102[2];
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  char v106;
  void *v107;
  char v108;
  void *v109;
  char v110;
  char v111;
  char v112;
  _BYTE v113[24];
  _BYTE v114[28];
  _BYTE v115[28];
  unsigned __int8 *v116;
  std::string v117;
  uint64_t v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  void *v121[2];
  unsigned __int8 v122;
  _BYTE v123[24];
  void *v124[2];
  char v125;
  char v126;
  void *v127;
  char v128;
  void *v129;
  char v130;
  char v131;
  char v132;
  std::__fs::filesystem::path __src;
  void *__p[4];
  std::__fs::filesystem::path v135;
  _BYTE v136[28];
  void *v137;
  char v138;
  void *v139;
  char v140;
  char v141;
  char v142;
  std::string pn;
  _BYTE *v144;
  _BYTE __dst[32];
  _BYTE v146[64];
  uint64_t v147;
  char v148;
  uint64_t v149;
  char v150;
  _BYTE v151[32];
  std::__fs::filesystem::path *p_pn;
  unsigned __int8 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  char v158;
  char v159;
  uint64_t v160;

  v160 = *MEMORY[0x24BDAC8D0];
  v8 = std::__fs::filesystem::path::__extension((const std::__fs::filesystem::path *)a1);
  if (v8.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v8.__size_ >= 0x17)
  {
    v10 = (v8.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8.__size_ | 7) != 0x17)
      v10 = v8.__size_ | 7;
    v11 = v10 + 1;
    v9 = operator new(v10 + 1);
    *(_QWORD *)&__dst[16] = v11 | 0x8000000000000000;
    *(_QWORD *)__dst = v9;
    *(_QWORD *)&__dst[8] = v8.__size_;
    goto LABEL_8;
  }
  __dst[23] = v8.__size_;
  v9 = __dst;
  if (v8.__size_)
LABEL_8:
    memmove(v9, v8.__data_, v8.__size_);
  v9[v8.__size_] = 0;
  *(_OWORD *)v151 = *(_OWORD *)__dst;
  *(_QWORD *)&v151[16] = *(_QWORD *)&__dst[16];
  memset(__dst, 0, 24);
  sub_2231816F0((std::string *)__dst, (std::string *)".csv", (std::string *)"");
  if (__dst[23] >= 0)
    v12.__data_ = __dst;
  else
    v12.__data_ = *(const std::string_view::value_type **)__dst;
  if (__dst[23] >= 0)
    v12.__size_ = __dst[23];
  else
    v12.__size_ = *(_QWORD *)&__dst[8];
  v13 = std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)v151, v12);
  if ((__dst[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__dst);
    if ((v151[23] & 0x80000000) == 0)
      goto LABEL_17;
  }
  else if ((v151[23] & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete(*(void **)v151);
LABEL_17:
  memset(&v135, 0, sizeof(v135));
  memset(__p, 0, 24);
  memset(&__src, 0, sizeof(__src));
  if (!v13)
  {
    v14 = std::__fs::filesystem::path::__parent_path((const std::__fs::filesystem::path *)a1);
    if (v14.__size_ > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v14.__size_ >= 0x17)
    {
      v16 = (v14.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14.__size_ | 7) != 0x17)
        v16 = v14.__size_ | 7;
      v17 = v16 + 1;
      v15 = operator new(v16 + 1);
      *(_QWORD *)&__dst[16] = v17 | 0x8000000000000000;
      *(_QWORD *)__dst = v15;
      *(_QWORD *)&__dst[8] = v14.__size_;
    }
    else
    {
      __dst[23] = v14.__size_;
      v15 = __dst;
      if (!v14.__size_)
      {
LABEL_31:
        v15[v14.__size_] = 0;
        *(_QWORD *)v151 = *(_QWORD *)&__dst[8];
        v18 = *(void **)__dst;
        *(_QWORD *)&v151[7] = *(_QWORD *)&__dst[15];
        v19 = __dst[23];
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
        __p[0] = v18;
        __p[1] = *(void **)v151;
        *(void **)((char *)&__p[1] + 7) = *(void **)&v151[7];
        HIBYTE(__p[2]) = v19;
        if (&v135 != (std::__fs::filesystem::path *)a1)
        {
          v20 = *(_BYTE *)(a1 + 23);
          if (SHIBYTE(v135.__pn_.__r_.__value_.__r.__words[2]) < 0)
          {
            if (v20 >= 0)
              v22 = (void *)a1;
            else
              v22 = *(void **)a1;
            if (v20 >= 0)
              v23 = *(unsigned __int8 *)(a1 + 23);
            else
              v23 = *(_QWORD *)(a1 + 8);
            sub_22319C4B8((void **)&v135.__pn_.__r_.__value_.__l.__data_, v22, v23);
          }
          else if ((*(_BYTE *)(a1 + 23) & 0x80) != 0)
          {
            sub_22319C3F4(&v135, *(void **)a1, *(_QWORD *)(a1 + 8));
          }
          else
          {
            v135 = *(std::__fs::filesystem::path *)a1;
          }
        }
        v24 = std::__fs::filesystem::path::__filename((const std::__fs::filesystem::path *)a1);
        if (v24.__size_ > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v24.__size_ >= 0x17)
        {
          v26 = (v24.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v24.__size_ | 7) != 0x17)
            v26 = v24.__size_ | 7;
          v27 = v26 + 1;
          v25 = operator new(v26 + 1);
          *(_QWORD *)&__dst[16] = v27 | 0x8000000000000000;
          *(_QWORD *)__dst = v25;
          *(_QWORD *)&__dst[8] = v24.__size_;
        }
        else
        {
          __dst[23] = v24.__size_;
          v25 = __dst;
          if (!v24.__size_)
          {
LABEL_68:
            v25[v24.__size_] = 0;
            v28 = *(void **)__dst;
            *(_DWORD *)v136 = *(_DWORD *)&__dst[16];
            *(_DWORD *)&v136[3] = *(_DWORD *)&__dst[19];
            v29 = __dst[23];
            if ((__dst[23] & 0x80000000) != 0)
            {
              sub_223197FA4(v151, *(void **)__dst, *(unint64_t *)&__dst[8]);
              v30 = v151[23];
              v31 = v151[23];
              v36 = v151[23];
              if (v151[23] < 0)
                v36 = *(_QWORD *)&v151[8];
              if (v36 >= 4)
              {
LABEL_72:
                v33 = v31 < 0;
                v34 = v151;
                if (v33)
                  v34 = *(_DWORD **)v151;
                v35 = *v34 == 1868983913;
                if ((v30 & 0x80) == 0)
                {
LABEL_81:
                  if (v29 < 0)
                  {
                    operator delete(v28);
                    if (v35)
                    {
LABEL_83:
                      sub_223208674(v124, "sequence file must not be named 'info'");
                      v132 = 1;
                      sub_22454BC28((uint64_t)v124, (uint64_t)__dst);
                      *(_OWORD *)a4 = *(_OWORD *)__dst;
                      *(_BYTE *)(a4 + 16) = 0;
                      *(_BYTE *)(a4 + 112) = 0;
                      if ((_BYTE)v149)
                      {
                        *(_BYTE *)(a4 + 40) = 0;
                        v37 = v146[8];
                        if (v146[8])
                        {
                          *(_OWORD *)(a4 + 16) = *(_OWORD *)&__dst[16];
                          *(_QWORD *)(a4 + 32) = *(_QWORD *)v146;
                          *(_QWORD *)&__dst[24] = 0;
                          *(_QWORD *)v146 = 0;
                          *(_QWORD *)&__dst[16] = 0;
                          *(_BYTE *)(a4 + 40) = 1;
                        }
                        *(_BYTE *)(a4 + 48) = 0;
                        *(_BYTE *)(a4 + 104) = 0;
                        if (v148)
                        {
                          v38 = *(_QWORD *)&v146[40];
                          *(_QWORD *)(a4 + 64) = *(_QWORD *)&v146[32];
                          *(_OWORD *)(a4 + 48) = *(_OWORD *)&v146[16];
                          *(_OWORD *)&v146[16] = 0uLL;
                          *(_QWORD *)(a4 + 72) = v38;
                          *(_OWORD *)(a4 + 80) = *(_OWORD *)&v146[48];
                          *(_QWORD *)(a4 + 96) = v147;
                          *(_QWORD *)&v146[32] = 0;
                          *(_OWORD *)&v146[48] = 0uLL;
                          v147 = 0;
                          *(_BYTE *)(a4 + 104) = 1;
                        }
                        *(_BYTE *)(a4 + 112) = 1;
                        *(_BYTE *)(a4 + 120) = 0;
                        if (v37 && (v146[7] & 0x80000000) != 0)
                          operator delete(*(void **)&__dst[16]);
                        if (!v132)
                        {
LABEL_343:
                          if ((SHIBYTE(__src.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                            goto LABEL_344;
                          goto LABEL_348;
                        }
                      }
                      else
                      {
                        *(_BYTE *)(a4 + 120) = 0;
                        if (!v132)
                          goto LABEL_343;
                      }
                      if (v131)
                      {
                        if (v130 < 0)
                          operator delete(v129);
                        if (v128 < 0)
                          operator delete(v127);
                      }
                      if (v126 && v125 < 0)
                      {
                        operator delete(v124[0]);
                        if ((SHIBYTE(__src.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                          goto LABEL_344;
                        goto LABEL_348;
                      }
                      goto LABEL_343;
                    }
                  }
                  else if (v35)
                  {
                    goto LABEL_83;
                  }
                  v39 = std::__fs::filesystem::path::__stem(&v135);
                  if (v39.__size_ > 0x7FFFFFFFFFFFFFF7)
                    sub_22316DBC0();
                  if (v39.__size_ >= 0x17)
                  {
                    v41 = (v39.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v39.__size_ | 7) != 0x17)
                      v41 = v39.__size_ | 7;
                    v42 = v41 + 1;
                    v40 = operator new(v41 + 1);
                    *(_QWORD *)&__dst[16] = v42 | 0x8000000000000000;
                    *(_QWORD *)__dst = v40;
                    *(_QWORD *)&__dst[8] = v39.__size_;
                  }
                  else
                  {
                    __dst[23] = v39.__size_;
                    v40 = __dst;
                    if (!v39.__size_)
                    {
LABEL_102:
                      v40[v39.__size_] = 0;
                      size = *(_QWORD *)&__dst[8];
                      v44 = *(void **)__dst;
                      *(_DWORD *)v123 = *(_DWORD *)&__dst[16];
                      *(_DWORD *)&v123[3] = *(_DWORD *)&__dst[19];
                      v45 = __dst[23];
                      if ((__dst[23] & 0x80000000) != 0)
                      {
                        sub_223197FA4(&pn, *(void **)__dst, *(unint64_t *)&__dst[8]);
                        LOBYTE(v47) = *((_BYTE *)&pn.__r_.__value_.__s + 23);
                        size = pn.__r_.__value_.__l.__size_;
                        v46 = (std::string *)pn.__r_.__value_.__r.__words[0];
                      }
                      else
                      {
                        *(_OWORD *)&pn.__r_.__value_.__l.__data_ = *(_OWORD *)__dst;
                        LODWORD(pn.__r_.__value_.__r.__words[2]) = *(_DWORD *)v123;
                        *(_DWORD *)((char *)&pn.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)&v123[3];
                        *((_BYTE *)&pn.__r_.__value_.__s + 23) = __dst[23];
                        v46 = *(std::string **)__dst;
                        LOBYTE(v47) = __dst[23];
                      }
                      *(_QWORD *)__dst = "info_";
                      *(_QWORD *)&__dst[8] = 5;
                      v47 = v47;
                      if ((v47 & 0x80u) != 0)
                        v47 = size;
                      else
                        v46 = &pn;
                      *(_QWORD *)&__dst[16] = v46;
                      *(_QWORD *)&__dst[24] = v47;
                      *(_QWORD *)v146 = ".json";
                      *(_QWORD *)&v146[8] = 5;
                      sub_2231A9820((uint64_t)__dst, (uint64_t)&v146[16], 0, 0, (std::string *)v115);
                      *(_OWORD *)v136 = *(_OWORD *)v115;
                      *(_QWORD *)&v136[16] = *(_QWORD *)&v115[16];
                      memset(v115, 0, 24);
                      if (SHIBYTE(__p[2]) < 0)
                      {
                        sub_223197FA4(v151, __p[0], (unint64_t)__p[1]);
                      }
                      else
                      {
                        *(_OWORD *)v151 = *(_OWORD *)__p;
                        *(void **)&v151[16] = __p[2];
                      }
                      sub_22319C30C((uint64_t)v151, (std::__fs::filesystem::path *)v136);
                      if (SHIBYTE(__src.__pn_.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(__src.__pn_.__r_.__value_.__l.__data_);
                      __src = *(std::__fs::filesystem::path *)v151;
                      v151[23] = 0;
                      v151[0] = 0;
                      if ((v136[23] & 0x80000000) != 0)
                      {
                        operator delete(*(void **)v136);
                        if ((v115[23] & 0x80000000) == 0)
                        {
LABEL_125:
                          if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                            goto LABEL_126;
                          goto LABEL_130;
                        }
                      }
                      else if ((v115[23] & 0x80000000) == 0)
                      {
                        goto LABEL_125;
                      }
                      operator delete(*(void **)v115);
                      if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
LABEL_126:
                        if ((v45 & 0x80000000) == 0)
                          goto LABEL_133;
LABEL_131:
                        v21 = v44;
                        goto LABEL_132;
                      }
LABEL_130:
                      operator delete(pn.__r_.__value_.__l.__data_);
                      if ((v45 & 0x80000000) == 0)
                        goto LABEL_133;
                      goto LABEL_131;
                    }
                  }
                  memmove(v40, v39.__data_, v39.__size_);
                  goto LABEL_102;
                }
LABEL_80:
                operator delete(*(void **)v151);
                goto LABEL_81;
              }
            }
            else
            {
              *(_OWORD *)v151 = *(_OWORD *)__dst;
              *(_DWORD *)&v151[16] = *(_DWORD *)v136;
              *(_DWORD *)&v151[19] = *(_DWORD *)&v136[3];
              v151[23] = __dst[23];
              v30 = __dst[23];
              v31 = __dst[23];
              v32 = __dst[23];
              if (__dst[23] < 0)
                v32 = *(_QWORD *)&__dst[8];
              if (v32 >= 4)
                goto LABEL_72;
            }
            v35 = 0;
            if ((v30 & 0x80) == 0)
              goto LABEL_81;
            goto LABEL_80;
          }
        }
        memmove(v25, v24.__data_, v24.__size_);
        goto LABEL_68;
      }
    }
    memmove(v15, v14.__data_, v14.__size_);
    goto LABEL_31;
  }
  if (__p != (void **)a1)
  {
    if (*(char *)(a1 + 23) < 0)
    {
      sub_22319C3F4(__p, *(void **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a1;
      __p[2] = *(void **)(a1 + 16);
    }
  }
  memset(v151, 0, 24);
  sub_2231816F0((std::string *)v151, (std::string *)"sequence.csv", (std::string *)"");
  if (SHIBYTE(__p[2]) < 0)
  {
    sub_223197FA4(__dst, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)__p;
    *(void **)&__dst[16] = __p[2];
  }
  sub_22319C30C((uint64_t)__dst, (std::__fs::filesystem::path *)v151);
  if (SHIBYTE(v135.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v135.__pn_.__r_.__value_.__l.__data_);
  v135 = *(std::__fs::filesystem::path *)__dst;
  __dst[23] = 0;
  __dst[0] = 0;
  if ((v151[23] & 0x80000000) != 0)
    operator delete(*(void **)v151);
  memset(v151, 0, 24);
  sub_2231816F0((std::string *)v151, (std::string *)"info.json", (std::string *)"");
  if (SHIBYTE(__p[2]) < 0)
  {
    sub_223197FA4(__dst, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)__p;
    *(void **)&__dst[16] = __p[2];
  }
  sub_22319C30C((uint64_t)__dst, (std::__fs::filesystem::path *)v151);
  if (SHIBYTE(__src.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__src.__pn_.__r_.__value_.__l.__data_);
  __src = *(std::__fs::filesystem::path *)__dst;
  __dst[23] = 0;
  __dst[0] = 0;
  if ((v151[23] & 0x80000000) != 0)
  {
    v21 = *(void **)v151;
LABEL_132:
    operator delete(v21);
  }
LABEL_133:
  *(_OWORD *)v123 = *(_OWORD *)a3;
  *(_QWORD *)&v123[16] = *(_QWORD *)(a3 + 16);
  *(_OWORD *)&v136[4] = *(_OWORD *)a3;
  *(_QWORD *)&v136[20] = *(_QWORD *)(a3 + 16);
  *(_OWORD *)&pn.__r_.__value_.__l.__data_ = xmmword_2245D2460;
  pn.__r_.__value_.__s.__data_[16] = 0;
  *(_QWORD *)&__dst[8] = 0x300000001;
  v48 = operator new();
  *(_BYTE *)v48 = 0;
  *(_QWORD *)(v48 + 8) = 0;
  *(_QWORD *)&__dst[24] = sub_224548CB0;
  v146[0] = 1;
  v146[56] = 0;
  LOBYTE(v147) = 0;
  BYTE4(v147) = 0;
  memset(&v146[16], 0, 25);
  *(_QWORD *)&v146[8] = v48;
  *(_QWORD *)&__dst[16] = v48;
  *(_QWORD *)__dst = &off_24EC69FB0;
  sub_22454024C((uint64_t)__dst);
  *(_QWORD *)v151 = "version";
  *(_QWORD *)&v151[8] = 7;
  *(_DWORD *)&v151[16] = 1;
  if (**(_BYTE **)&v146[8] <= 1u)
  {
    *(_QWORD *)&v146[40] = "version";
    *(_QWORD *)&v146[48] = 7;
    if (!v146[56])
      v146[56] = 1;
  }
  sub_224542048((uint64_t)__dst, &v151[16]);
  *(_OWORD *)v151 = *(_OWORD *)v136;
  *(_OWORD *)&v151[12] = *(_OWORD *)&v136[12];
  if (**(_BYTE **)&v146[8] <= 1u)
  {
    *(_QWORD *)&v146[40] = "protocol_info";
    *(_QWORD *)&v146[48] = 13;
    if (!v146[56])
      v146[56] = 1;
  }
  sub_22454024C((uint64_t)__dst);
  *(_QWORD *)v115 = "version";
  *(_QWORD *)&v115[8] = 7;
  *(_DWORD *)&v115[16] = 1;
  if (**(_BYTE **)&v146[8] <= 1u)
  {
    *(_QWORD *)&v146[40] = "version";
    *(_QWORD *)&v146[48] = 7;
    if (!v146[56])
      v146[56] = 1;
  }
  sub_224542048((uint64_t)__dst, &v115[16]);
  if (**(_BYTE **)&v146[8] <= 1u)
  {
    *(_QWORD *)&v146[40] = "current";
    *(_QWORD *)&v146[48] = 7;
    if (!v146[56])
      v146[56] = 1;
  }
  *(_QWORD *)v115 = &v151[4];
  sub_2240E5B28((uint64_t)__dst, (uint64_t **)v115);
  if (**(_BYTE **)&v146[8] <= 1u)
  {
    *(_QWORD *)&v146[40] = "min";
    *(_QWORD *)&v146[48] = 3;
    if (!v146[56])
      v146[56] = 1;
  }
  *(_QWORD *)v115 = &v151[16];
  sub_2240E5B28((uint64_t)__dst, (uint64_t **)v115);
  v49 = *(_QWORD *)&v146[24];
  *(_QWORD *)&v146[8] = *(_QWORD *)(*(_QWORD *)&v146[24] - 8);
  *(_QWORD *)&v146[24] -= 8;
  if (v146[56])
    v146[56] = 0;
  *(_QWORD *)&v146[8] = *(_QWORD *)(v49 - 16);
  *(_QWORD *)&v146[24] = v49 - 16;
  sub_224533F5C(*(unsigned __int8 **)&__dst[16], (uint64_t)&pn, v121);
  *(_QWORD *)__dst = &off_24EC78CE8;
  if (*(_QWORD *)&v146[16])
  {
    *(_QWORD *)&v146[24] = *(_QWORD *)&v146[16];
    operator delete(*(void **)&v146[16]);
  }
  v50 = *(void ****)&__dst[16];
  *(_QWORD *)&__dst[16] = 0;
  if (v50)
    (*(void (**)(void ***))&__dst[24])(v50);
  if (!(*(unsigned int (**)(uint64_t, std::__fs::filesystem::path *))(*(_QWORD *)a2 + 328))(a2, &__src))
  {
    sub_2242B0918(&__src, 0x30u, a2, v115);
    if (*(_QWORD *)&v115[8])
    {
      v56 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)&v115[8] + 16))(*(_QWORD *)&v115[8]);
      if ((v122 & 0x80u) == 0)
        v57 = v121;
      else
        v57 = (void **)v121[0];
      if ((v122 & 0x80u) == 0)
        v58 = v122;
      else
        v58 = (uint64_t)v121[1];
      sub_2231813E8(v56, (uint64_t)v57, v58);
      v150 = 1;
      v59 = *(std::__shared_weak_count **)&v115[16];
      if (!*(_QWORD *)&v115[16])
        goto LABEL_268;
      goto LABEL_264;
    }
    if (SHIBYTE(__src.__pn_.__r_.__value_.__r.__words[2]) < 0)
      sub_223197FA4(&pn, __src.__pn_.__r_.__value_.__l.__data_, __src.__pn_.__r_.__value_.__l.__size_);
    else
      pn = __src.__pn_;
    v66 = std::string::insert(&pn, 0, "failed to create file ", 0x16uLL);
    v68 = (void *)v66->__r_.__value_.__r.__words[0];
    v67 = v66->__r_.__value_.__l.__size_;
    LODWORD(v118) = v66->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)&v118 + 3) = *(_DWORD *)((char *)&v66->__r_.__value_.__r.__words[2] + 3);
    v69 = SHIBYTE(v66->__r_.__value_.__r.__words[2]);
    v66->__r_.__value_.__l.__size_ = 0;
    v66->__r_.__value_.__r.__words[2] = 0;
    v66->__r_.__value_.__r.__words[0] = 0;
    if (v69 < 0)
    {
      sub_223197FA4(v136, v68, v67);
    }
    else
    {
      *(_QWORD *)v136 = v68;
      *(_QWORD *)&v136[8] = v67;
      *(_DWORD *)&v136[16] = v118;
      *(_DWORD *)&v136[19] = *(_DWORD *)((char *)&v118 + 3);
      v136[23] = v69;
    }
    v136[24] = 1;
    LOBYTE(v137) = 0;
    v141 = 0;
    v142 = 1;
    sub_2231A958C(5u, (__int128 *)v136, (uint64_t)v151);
    *(_OWORD *)__dst = *(_OWORD *)v151;
    __dst[16] = 0;
    LOBYTE(v149) = 0;
    if (v159)
    {
      v146[8] = 0;
      if (v153)
      {
        *(_OWORD *)&__dst[16] = *(_OWORD *)&v151[16];
        *(_QWORD *)v146 = p_pn;
        *(_QWORD *)&v151[24] = 0;
        p_pn = 0;
        *(_QWORD *)&v151[16] = 0;
        v146[8] = 1;
      }
      v146[16] = 0;
      v148 = 0;
      if (v158)
      {
        *(_OWORD *)&v146[32] = v155;
        *(_OWORD *)&v146[16] = v154;
        v154 = 0uLL;
        *(_OWORD *)&v146[48] = v156;
        v147 = v157;
        *(_QWORD *)&v155 = 0;
        v156 = 0uLL;
        v157 = 0;
        v148 = 1;
      }
      LOBYTE(v149) = 1;
      v150 = 0;
      if (v153 && SHIBYTE(p_pn) < 0)
        operator delete(*(void **)&v151[16]);
    }
    else
    {
      v150 = 0;
    }
    if (v142)
    {
      if (v141)
      {
        if (v140 < 0)
          operator delete(v139);
        if (v138 < 0)
          operator delete(v137);
      }
      if (v136[24] && (v136[23] & 0x80000000) != 0)
        operator delete(*(void **)v136);
    }
    if (v69 < 0)
    {
      operator delete(v68);
      if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_263:
        v59 = *(std::__shared_weak_count **)&v115[16];
        if (!*(_QWORD *)&v115[16])
          goto LABEL_268;
LABEL_264:
        p_shared_owners = (unint64_t *)&v59->__shared_owners_;
        do
          v71 = __ldaxr(p_shared_owners);
        while (__stlxr(v71 - 1, p_shared_owners));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
LABEL_268:
        if (!v150)
        {
          *(_OWORD *)v151 = *(_OWORD *)__dst;
          v73 = sub_22319FFBC(&v151[16], (__int128 *)&__dst[16]);
          *(_OWORD *)a4 = *(_OWORD *)v151;
          *(_BYTE *)(a4 + 16) = 0;
          *(_BYTE *)(a4 + 112) = 0;
          if (v159)
          {
            *(_BYTE *)(a4 + 40) = 0;
            v74 = v153;
            if (v153)
            {
              *(_OWORD *)(a4 + 16) = *(_OWORD *)v73;
              *(_QWORD *)(a4 + 32) = *((_QWORD *)v73 + 2);
              *((_QWORD *)v73 + 1) = 0;
              *((_QWORD *)v73 + 2) = 0;
              *(_QWORD *)v73 = 0;
              *(_BYTE *)(a4 + 40) = 1;
            }
            *(_BYTE *)(a4 + 48) = 0;
            *(_BYTE *)(a4 + 104) = 0;
            if (v158)
            {
              v75 = *((_QWORD *)&v155 + 1);
              *(_QWORD *)(a4 + 64) = v155;
              *(_OWORD *)(a4 + 48) = v154;
              v154 = 0uLL;
              *(_QWORD *)(a4 + 72) = v75;
              *(_OWORD *)(a4 + 80) = v156;
              *(_QWORD *)(a4 + 96) = v157;
              *(_QWORD *)&v155 = 0;
              v156 = 0uLL;
              v157 = 0;
              *(_BYTE *)(a4 + 104) = 1;
            }
            *(_BYTE *)(a4 + 112) = 1;
            *(_BYTE *)(a4 + 120) = 0;
            if (v74 && SHIBYTE(p_pn) < 0)
              operator delete(*(void **)&v151[16]);
          }
          else
          {
            *(_BYTE *)(a4 + 120) = 0;
          }
          if (!v150 && (_BYTE)v149)
          {
            if (v148)
            {
              if (SHIBYTE(v147) < 0)
                operator delete(*(void **)&v146[48]);
              if ((v146[39] & 0x80000000) != 0)
                operator delete(*(void **)&v146[16]);
            }
            if (v146[8] && (v146[7] & 0x80000000) != 0)
              operator delete(*(void **)&__dst[16]);
          }
          goto LABEL_342;
        }
LABEL_269:
        sub_2242B0918(&v135, 0x11u, a2, v151);
        v72 = *(_QWORD *)&v151[8];
        if (*(_QWORD *)&v151[8])
        {
          if (SHIBYTE(__p[2]) < 0)
          {
            sub_223197FA4(__dst, __p[0], (unint64_t)__p[1]);
            v72 = *(_QWORD *)&v151[8];
          }
          else
          {
            *(_OWORD *)__dst = *(_OWORD *)__p;
            *(void **)&__dst[16] = __p[2];
          }
          *(_QWORD *)&__dst[24] = &off_24EC71C10;
          *(_QWORD *)v146 = v72;
          *(_QWORD *)&v146[8] = *(_QWORD *)&v151[16];
          if (*(_QWORD *)&v151[16])
          {
            v76 = (unint64_t *)(*(_QWORD *)&v151[16] + 8);
            do
              v77 = __ldxr(v76);
            while (__stxr(v77 + 1, v76));
            v78 = *(_OWORD *)v146;
          }
          else
          {
            v78 = v72;
          }
          *(_OWORD *)a4 = *(_OWORD *)__dst;
          *(_QWORD *)(a4 + 16) = *(_QWORD *)&__dst[16];
          *(_QWORD *)(a4 + 24) = &off_24EC71C10;
          *(_OWORD *)(a4 + 32) = v78;
          *(_BYTE *)(a4 + 120) = 1;
          v63 = *(std::__shared_weak_count **)&v151[16];
          if (!*(_QWORD *)&v151[16])
            goto LABEL_342;
LABEL_338:
          v89 = (unint64_t *)&v63->__shared_owners_;
          do
            v65 = __ldaxr(v89);
          while (__stlxr(v65 - 1, v89));
          goto LABEL_340;
        }
        if (SHIBYTE(v135.__pn_.__r_.__value_.__r.__words[2]) < 0)
          sub_223197FA4(v136, v135.__pn_.__r_.__value_.__l.__data_, v135.__pn_.__r_.__value_.__l.__size_);
        else
          *(std::__fs::filesystem::path *)v136 = v135;
        v83 = std::string::insert((std::string *)v136, 0, "failed to create file ", 0x16uLL);
        v85 = (void *)v83->__r_.__value_.__r.__words[0];
        v84 = v83->__r_.__value_.__l.__size_;
        *(_DWORD *)v115 = v83->__r_.__value_.__r.__words[2];
        *(_DWORD *)&v115[3] = *(_DWORD *)((char *)&v83->__r_.__value_.__r.__words[2] + 3);
        v86 = SHIBYTE(v83->__r_.__value_.__r.__words[2]);
        v83->__r_.__value_.__l.__size_ = 0;
        v83->__r_.__value_.__r.__words[2] = 0;
        v83->__r_.__value_.__r.__words[0] = 0;
        if (v86 < 0)
        {
          sub_223197FA4(&v90, v85, v84);
        }
        else
        {
          *(_QWORD *)&v90 = v85;
          *((_QWORD *)&v90 + 1) = v84;
          *(_DWORD *)v91 = *(_DWORD *)v115;
          *(_DWORD *)&v91[3] = *(_DWORD *)&v115[3];
          v92 = v86;
        }
        v93 = 1;
        LOBYTE(v94) = 0;
        v98 = 0;
        v99 = 1;
        sub_2231A958C(5u, &v90, (uint64_t)__dst);
        *(_OWORD *)a4 = *(_OWORD *)__dst;
        *(_BYTE *)(a4 + 16) = 0;
        *(_BYTE *)(a4 + 112) = 0;
        if ((_BYTE)v149)
        {
          *(_BYTE *)(a4 + 40) = 0;
          v87 = v146[8];
          if (v146[8])
          {
            *(_OWORD *)(a4 + 16) = *(_OWORD *)&__dst[16];
            *(_QWORD *)(a4 + 32) = *(_QWORD *)v146;
            *(_QWORD *)&__dst[24] = 0;
            *(_QWORD *)v146 = 0;
            *(_QWORD *)&__dst[16] = 0;
            *(_BYTE *)(a4 + 40) = 1;
          }
          *(_BYTE *)(a4 + 48) = 0;
          *(_BYTE *)(a4 + 104) = 0;
          if (v148)
          {
            v88 = *(_QWORD *)&v146[40];
            *(_QWORD *)(a4 + 64) = *(_QWORD *)&v146[32];
            *(_OWORD *)(a4 + 48) = *(_OWORD *)&v146[16];
            *(_OWORD *)&v146[16] = 0uLL;
            *(_QWORD *)(a4 + 72) = v88;
            *(_OWORD *)(a4 + 80) = *(_OWORD *)&v146[48];
            *(_QWORD *)(a4 + 96) = v147;
            *(_QWORD *)&v146[32] = 0;
            *(_OWORD *)&v146[48] = 0uLL;
            v147 = 0;
            *(_BYTE *)(a4 + 104) = 1;
          }
          *(_BYTE *)(a4 + 112) = 1;
          *(_BYTE *)(a4 + 120) = 0;
          if (v87 && (v146[7] & 0x80000000) != 0)
            operator delete(*(void **)&__dst[16]);
        }
        else
        {
          *(_BYTE *)(a4 + 120) = 0;
        }
        if (v99)
        {
          if (v98)
          {
            if (v97 < 0)
              operator delete(v96);
            if (v95 < 0)
              operator delete(v94);
          }
          if (v93 && v92 < 0)
            operator delete((void *)v90);
        }
        if (v86 < 0)
        {
          operator delete(v85);
          if ((v136[23] & 0x80000000) == 0)
          {
LABEL_337:
            v63 = *(std::__shared_weak_count **)&v151[16];
            if (!*(_QWORD *)&v151[16])
              goto LABEL_342;
            goto LABEL_338;
          }
        }
        else if ((v136[23] & 0x80000000) == 0)
        {
          goto LABEL_337;
        }
        operator delete(*(void **)v136);
        v63 = *(std::__shared_weak_count **)&v151[16];
        if (!*(_QWORD *)&v151[16])
          goto LABEL_342;
        goto LABEL_338;
      }
    }
    else if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_263;
    }
    operator delete(pn.__r_.__value_.__l.__data_);
    v59 = *(std::__shared_weak_count **)&v115[16];
    if (!*(_QWORD *)&v115[16])
      goto LABEL_268;
    goto LABEL_264;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, std::__fs::filesystem::path *, uint64_t))(*(_QWORD *)a2 + 368))(&v118, a2, &__src, 8);
  v51 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v119 + 16))(v119);
  sub_224111624(&v117, *(_QWORD **)((char *)v51 + *(_QWORD *)(*v51 - 24) + 40), 0);
  sub_224534AE8((uint64_t *)&v117, (uint64_t *)&v116);
  memset(&v114[4], 0, 24);
  sub_22451BC6C((uint64_t)v151, v116);
  *(_QWORD *)&__dst[8] = 0x300000001;
  *(_QWORD *)__dst = &unk_24EC78E28;
  v52 = operator new();
  *(_BYTE *)v52 = v151[0];
  *(_QWORD *)(v52 + 8) = *(_QWORD *)&v151[8];
  v151[0] = 0;
  *(_QWORD *)&v151[8] = 0;
  *(_QWORD *)&__dst[16] = v52;
  *(_QWORD *)&__dst[24] = sub_224548CB0;
  *(_QWORD *)v146 = v52;
  v148 = 0;
  v149 = 0;
  memset(&v146[8], 0, 49);
  sub_22345337C((void ***)&v151[8], 0);
  *(_QWORD *)__dst = &off_24EC69BF8;
  sub_22411BE44((uint64_t)__dst, (uint64_t)v114);
  *(_OWORD *)v115 = *(_OWORD *)v114;
  *(_OWORD *)&v115[12] = *(_OWORD *)&v114[12];
  *(_QWORD *)__dst = &unk_24EC78E28;
  if (*(_QWORD *)&v146[32])
  {
    *(_QWORD *)&v146[40] = *(_QWORD *)&v146[32];
    operator delete(*(void **)&v146[32]);
  }
  if (*(_QWORD *)&v146[8])
  {
    *(_QWORD *)&v146[16] = *(_QWORD *)&v146[8];
    operator delete(*(void **)&v146[8]);
  }
  v53 = *(void ****)&__dst[16];
  *(_QWORD *)&__dst[16] = 0;
  if (v53)
    (*(void (**)(void ***))&__dst[24])(v53);
  *(_OWORD *)v113 = *(_OWORD *)&v115[4];
  *(_QWORD *)&v113[16] = *(_QWORD *)&v115[20];
  if (*(_QWORD *)&v115[4] == *(_QWORD *)v123
    && *(unsigned int *)&v113[8] == (unint64_t)*(unsigned int *)&v123[8]
    && *(_QWORD *)&v113[12] == *(_QWORD *)&v123[12]
    && *(unsigned int *)&v113[20] == (unint64_t)*(unsigned int *)&v123[20])
  {
    v79 = v116;
    v116 = 0;
    if (v79)
    {
      sub_22345337C((void ***)v79 + 1, *v79);
      MEMORY[0x227684CE8](v79, 0x1022C40B06DCE69);
    }
    if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v117.__r_.__value_.__l.__data_);
    v80 = v120;
    if (v120)
    {
      v81 = (unint64_t *)&v120->__shared_owners_;
      do
        v82 = __ldaxr(v81);
      while (__stlxr(v82 - 1, v81));
      if (!v82)
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
      }
    }
    goto LABEL_269;
  }
  if (SHIBYTE(v135.__pn_.__r_.__value_.__r.__words[2]) < 0)
    sub_223197FA4(&v101, v135.__pn_.__r_.__value_.__l.__data_, v135.__pn_.__r_.__value_.__l.__size_);
  else
    v101 = v135;
  if (SHIBYTE(__src.__pn_.__r_.__value_.__r.__words[2]) < 0)
    sub_223197FA4(&v100, __src.__pn_.__r_.__value_.__l.__data_, __src.__pn_.__r_.__value_.__l.__size_);
  else
    v100 = __src;
  *(_DWORD *)&v136[24] = 0;
  sub_223845124(v136, "Can't append to sequence '");
  *(_QWORD *)v151 = v136;
  *(_QWORD *)&v151[8] = &v101;
  *(_QWORD *)&v151[16] = v136;
  *(_QWORD *)&v151[24] = &v101;
  p_pn = &v101;
  if (*(_DWORD *)&v136[24] == -1)
    sub_22316DD70();
  pn.__r_.__value_.__r.__words[0] = (std::string::size_type)v151;
  ((void (*)(std::string *, _BYTE *))off_24EC69F88[*(unsigned int *)&v136[24]])(&pn, v136);
  *(_QWORD *)v151 = v136;
  *(_QWORD *)&v151[8] = "'. Info file '";
  *(_QWORD *)&v151[16] = v136;
  *(_QWORD *)&v151[24] = "'. Info file '";
  p_pn = (std::__fs::filesystem::path *)"'. Info file '";
  if (*(_DWORD *)&v136[24] == -1)
    sub_22316DD70();
  pn.__r_.__value_.__r.__words[0] = (std::string::size_type)v151;
  ((void (*)(std::string *, _BYTE *))off_24EC6A0E0[*(unsigned int *)&v136[24]])(&pn, v136);
  *(_QWORD *)v151 = v136;
  *(_QWORD *)&v151[8] = &v100;
  *(_QWORD *)&v151[16] = v136;
  *(_QWORD *)&v151[24] = &v100;
  p_pn = &v100;
  if (*(_DWORD *)&v136[24] == -1)
    sub_22316DD70();
  pn.__r_.__value_.__r.__words[0] = (std::string::size_type)v151;
  ((void (*)(std::string *, _BYTE *))off_24EC69F88[*(unsigned int *)&v136[24]])(&pn, v136);
  *(_QWORD *)v151 = v136;
  *(_QWORD *)&v151[8] = "' sequence protocol version ";
  *(_QWORD *)&v151[16] = v136;
  *(_QWORD *)&v151[24] = "' sequence protocol version ";
  p_pn = (std::__fs::filesystem::path *)"' sequence protocol version ";
  if (*(_DWORD *)&v136[24] == -1)
    sub_22316DD70();
  pn.__r_.__value_.__r.__words[0] = (std::string::size_type)v151;
  ((void (*)(std::string *, _BYTE *))off_24EC6A0F8[*(unsigned int *)&v136[24]])(&pn, v136);
  sub_22411C014(&pn, (uint64_t *)v113);
  *(_QWORD *)v151 = v136;
  *(_QWORD *)&v151[8] = &pn;
  *(_QWORD *)&v151[16] = v136;
  *(_QWORD *)&v151[24] = &pn;
  p_pn = (std::__fs::filesystem::path *)&pn;
  if (*(_DWORD *)&v136[24] == -1)
    sub_22316DD70();
  v144 = v151;
  ((void (*)(_BYTE **, _BYTE *))off_24EC69F40[*(unsigned int *)&v136[24]])(&v144, v136);
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
    operator delete(pn.__r_.__value_.__l.__data_);
  *(_QWORD *)v151 = v136;
  *(_QWORD *)&v151[8] = " is incompatible with current version ";
  *(_QWORD *)&v151[16] = v136;
  *(_QWORD *)&v151[24] = " is incompatible with current version ";
  p_pn = (std::__fs::filesystem::path *)" is incompatible with current version ";
  if (*(_DWORD *)&v136[24] == -1)
    sub_22316DD70();
  pn.__r_.__value_.__r.__words[0] = (std::string::size_type)v151;
  ((void (*)(std::string *, _BYTE *))off_24EC6A110[*(unsigned int *)&v136[24]])(&pn, v136);
  sub_22411C014(&pn, (uint64_t *)v123);
  *(_QWORD *)v151 = v136;
  *(_QWORD *)&v151[8] = &pn;
  *(_QWORD *)&v151[16] = v136;
  *(_QWORD *)&v151[24] = &pn;
  p_pn = (std::__fs::filesystem::path *)&pn;
  if (*(_DWORD *)&v136[24] == -1)
    sub_22316DD70();
  v144 = v151;
  ((void (*)(_BYTE **, _BYTE *))off_24EC69F40[*(unsigned int *)&v136[24]])(&v144, v136);
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
    operator delete(pn.__r_.__value_.__l.__data_);
  *(_QWORD *)v151 = v136;
  *(_QWORD *)&v151[8] = ".";
  *(_QWORD *)&v151[16] = v136;
  *(_QWORD *)&v151[24] = ".";
  p_pn = (std::__fs::filesystem::path *)".";
  if (*(_DWORD *)&v136[24] == -1)
    sub_22316DD70();
  pn.__r_.__value_.__r.__words[0] = (std::string::size_type)v151;
  ((void (*)(std::string *, _BYTE *))off_24EC6A128[*(unsigned int *)&v136[24]])(&pn, v136);
  if (*(_DWORD *)&v136[24] == -1)
    sub_22316DD70();
  *(_QWORD *)v151 = &pn;
  ((void (*)(void **__return_ptr, _BYTE *, _BYTE *))off_24EC69F70[*(unsigned int *)&v136[24]])(v102, v151, v136);
  if (*(_DWORD *)&v136[24] != -1)
    ((void (*)(_BYTE *, _BYTE *))off_24EC69F58[*(unsigned int *)&v136[24]])(v151, v136);
  if (SHIBYTE(v103) < 0)
  {
    sub_223197FA4(&v104, v102[0], (unint64_t)v102[1]);
  }
  else
  {
    v104 = *(_OWORD *)v102;
    v105 = v103;
  }
  v106 = 1;
  LOBYTE(v107) = 0;
  v111 = 0;
  v112 = 1;
  sub_2231A958C(5u, &v104, (uint64_t)__dst);
  *(_OWORD *)a4 = *(_OWORD *)__dst;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (!(_BYTE)v149)
  {
    *(_BYTE *)(a4 + 120) = 0;
    if (!v112)
      goto LABEL_224;
    goto LABEL_216;
  }
  *(_BYTE *)(a4 + 40) = 0;
  v60 = v146[8];
  if (v146[8])
  {
    *(_OWORD *)(a4 + 16) = *(_OWORD *)&__dst[16];
    *(_QWORD *)(a4 + 32) = *(_QWORD *)v146;
    *(_QWORD *)&__dst[24] = 0;
    *(_QWORD *)v146 = 0;
    *(_QWORD *)&__dst[16] = 0;
    *(_BYTE *)(a4 + 40) = 1;
  }
  *(_BYTE *)(a4 + 48) = 0;
  *(_BYTE *)(a4 + 104) = 0;
  if (v148)
  {
    v61 = *(_QWORD *)&v146[40];
    *(_QWORD *)(a4 + 64) = *(_QWORD *)&v146[32];
    *(_OWORD *)(a4 + 48) = *(_OWORD *)&v146[16];
    *(_OWORD *)&v146[16] = 0uLL;
    *(_QWORD *)(a4 + 72) = v61;
    *(_OWORD *)(a4 + 80) = *(_OWORD *)&v146[48];
    *(_QWORD *)(a4 + 96) = v147;
    *(_QWORD *)&v146[32] = 0;
    *(_OWORD *)&v146[48] = 0uLL;
    v147 = 0;
    *(_BYTE *)(a4 + 104) = 1;
  }
  *(_BYTE *)(a4 + 112) = 1;
  *(_BYTE *)(a4 + 120) = 0;
  if (v60 && (v146[7] & 0x80000000) != 0)
    operator delete(*(void **)&__dst[16]);
  if (v112)
  {
LABEL_216:
    if (v111)
    {
      if (v110 < 0)
        operator delete(v109);
      if (v108 < 0)
        operator delete(v107);
    }
    if (v106 && SHIBYTE(v105) < 0)
      operator delete((void *)v104);
  }
LABEL_224:
  if (SHIBYTE(v103) < 0)
  {
    operator delete(v102[0]);
    if ((SHIBYTE(v100.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_226:
      if ((SHIBYTE(v101.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_227;
      goto LABEL_237;
    }
  }
  else if ((SHIBYTE(v100.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_226;
  }
  operator delete(v100.__pn_.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v101.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_227:
    v62 = v116;
    v116 = 0;
    if (!v62)
      goto LABEL_229;
    goto LABEL_228;
  }
LABEL_237:
  operator delete(v101.__pn_.__r_.__value_.__l.__data_);
  v62 = v116;
  v116 = 0;
  if (v62)
  {
LABEL_228:
    sub_22345337C((void ***)v62 + 1, *v62);
    MEMORY[0x227684CE8](v62, 0x1022C40B06DCE69);
  }
LABEL_229:
  if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v117.__r_.__value_.__l.__data_);
  v63 = v120;
  if (v120)
  {
    v64 = (unint64_t *)&v120->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
LABEL_340:
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
LABEL_342:
  if (((char)v122 & 0x80000000) == 0)
    goto LABEL_343;
  operator delete(v121[0]);
  if ((SHIBYTE(__src.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_344:
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_345;
    goto LABEL_349;
  }
LABEL_348:
  operator delete(__src.__pn_.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
LABEL_345:
    if ((SHIBYTE(v135.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_350:
    operator delete(v135.__pn_.__r_.__value_.__l.__data_);
    return;
  }
LABEL_349:
  operator delete(__p[0]);
  if (SHIBYTE(v135.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_350;
}

void sub_2241144DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a66;
  char a71;
  void *v71;
  uint64_t v72;

  operator delete(v71);
  if (SLOBYTE(STACK[0x317]) < 0)
    operator delete((void *)STACK[0x300]);
  sub_2242BB4F8(v72 - 224);
  if (a71 < 0)
    operator delete(a66);
  if (SLOBYTE(STACK[0x277]) < 0)
  {
    operator delete((void *)STACK[0x260]);
    if ((SLOBYTE(STACK[0x297]) & 0x80000000) == 0)
      goto LABEL_7;
  }
  else if ((SLOBYTE(STACK[0x297]) & 0x80000000) == 0)
  {
LABEL_7:
    if (SLOBYTE(STACK[0x2B7]) < 0)
      goto LABEL_8;
    goto LABEL_11;
  }
  operator delete((void *)STACK[0x280]);
  if (SLOBYTE(STACK[0x2B7]) < 0)
  {
LABEL_8:
    operator delete((void *)STACK[0x2A0]);
    _Unwind_Resume(a1);
  }
LABEL_11:
  _Unwind_Resume(a1);
}

void sub_224114894(std::runtime_error *this)
{
  if (!LOBYTE(this[8].__vftable))
    goto LABEL_7;
  if (!LOBYTE(this[7].__imp_.__imp_))
    goto LABEL_5;
  if (SHIBYTE(this[7].__vftable) < 0)
  {
    operator delete(this[6].__vftable);
    if (SHIBYTE(this[5].__vftable) < 0)
      goto LABEL_10;
LABEL_5:
    if (!LOBYTE(this[3].__imp_.__imp_))
      goto LABEL_7;
    goto LABEL_6;
  }
  if ((SHIBYTE(this[5].__vftable) & 0x80000000) == 0)
    goto LABEL_5;
LABEL_10:
  operator delete(this[4].__vftable);
  if (!LOBYTE(this[3].__imp_.__imp_))
    goto LABEL_7;
LABEL_6:
  if (SHIBYTE(this[3].__vftable) < 0)
  {
    operator delete(this[2].__vftable);
    std::runtime_error::~runtime_error(this);
    return;
  }
LABEL_7:
  std::runtime_error::~runtime_error(this);
}

void sub_224114920(std::runtime_error *this)
{
  if (!LOBYTE(this[8].__vftable))
    goto LABEL_10;
  if (!LOBYTE(this[7].__imp_.__imp_))
    goto LABEL_5;
  if (SHIBYTE(this[7].__vftable) < 0)
  {
    operator delete(this[6].__vftable);
    if ((SHIBYTE(this[5].__vftable) & 0x80000000) == 0)
    {
LABEL_5:
      if (!LOBYTE(this[3].__imp_.__imp_))
        goto LABEL_10;
      goto LABEL_6;
    }
  }
  else if ((SHIBYTE(this[5].__vftable) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(this[4].__vftable);
  if (!LOBYTE(this[3].__imp_.__imp_))
    goto LABEL_10;
LABEL_6:
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[2].__vftable);
LABEL_10:
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x227684CE8);
}

void sub_2241149B0(uint64_t a1, uint64_t a2, void *__src, size_t __len, uint64_t a5, char a6)
{
  std::__fs::filesystem::path *p_dst;
  size_t v13;
  size_t v14;
  std::__fs::filesystem::path *v15;
  std::string::size_type size;
  std::string *v17;
  std::string *v18;
  _BYTE *v19;
  char v20;
  int v21;
  BOOL v22;
  std::string *v23;
  std::string::size_type v24;
  char v25;
  uint64_t v26;
  std::string *v27;
  void **v28;
  void **p_data;
  void *v30;
  std::__fs::filesystem::path __p;
  void *v32;
  std::string *v33;
  std::__fs::filesystem::path v34;
  std::__fs::filesystem::path __dst;
  _QWORD v36[3];

  v36[2] = *MEMORY[0x24BDAC8D0];
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  if (__len >= 0x17)
  {
    v13 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v13 = __len | 7;
    v14 = v13 + 1;
    p_dst = (std::__fs::filesystem::path *)operator new(v13 + 1);
    __dst.__pn_.__r_.__value_.__l.__size_ = __len;
    __dst.__pn_.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
    __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__pn_.__r_.__value_.__s + 23) = __len;
  p_dst = &__dst;
  if (__len)
LABEL_8:
    memmove(p_dst, __src, __len);
  p_dst->__pn_.__r_.__value_.__s.__data_[__len] = 0;
  if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &__dst;
  else
    v15 = (std::__fs::filesystem::path *)__dst.__pn_.__r_.__value_.__r.__words[0];
  if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]);
  else
    size = __dst.__pn_.__r_.__value_.__l.__size_;
  sub_2231AD150((char *)v15, size, ".", 1, 0, (uint64_t)&v32);
  if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
    v17 = (std::string *)v32;
    v18 = v33;
    memset(v36, 0, 15);
    if (v32 != v33)
      goto LABEL_17;
  }
  else
  {
    v17 = (std::string *)v32;
    v18 = v33;
    memset(v36, 0, 15);
    if (v32 != v33)
    {
LABEL_17:
      v19 = 0;
      v20 = 0;
      while (1)
      {
        v34.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
        v34.__pn_.__r_.__value_.__l.__size_ = v36[0];
        *(std::string::size_type *)((char *)&v34.__pn_.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v36 + 7);
        *((_BYTE *)&v34.__pn_.__r_.__value_.__s + 23) = v20;
        memset(v36, 0, 15);
        if (SHIBYTE(v17->__r_.__value_.__r.__words[2]) < 0)
        {
          if (!v17->__r_.__value_.__l.__size_ || *v17->__r_.__value_.__l.__data_ != 47)
          {
LABEL_27:
            if (std::__fs::filesystem::path::__filename(&v34).__size_)
              std::string::push_back(&v34.__pn_, 47);
            goto LABEL_30;
          }
        }
        else if (!*((_BYTE *)&v17->__r_.__value_.__s + 23) || v17->__r_.__value_.__s.__data_[0] != 47)
        {
          goto LABEL_27;
        }
        if (v20 < 0)
        {
          *v19 = 0;
          v34.__pn_.__r_.__value_.__l.__size_ = 0;
        }
        else
        {
          v34.__pn_.__r_.__value_.__s.__data_[0] = 0;
          *((_BYTE *)&v34.__pn_.__r_.__value_.__s + 23) = 0;
        }
LABEL_30:
        v21 = SHIBYTE(v17->__r_.__value_.__r.__words[2]);
        v22 = v21 < 0;
        if (v21 >= 0)
          v23 = v17;
        else
          v23 = (std::string *)v17->__r_.__value_.__r.__words[0];
        v24 = HIBYTE(v17->__r_.__value_.__r.__words[2]);
        if (v22)
          v24 = v17->__r_.__value_.__l.__size_;
        sub_2231816F0(&v34.__pn_, v23, (std::string *)((char *)v23 + v24));
        v25 = HIBYTE(v34.__pn_.__r_.__value_.__r.__words[2]);
        if (SHIBYTE(v34.__pn_.__r_.__value_.__r.__words[2]) < 0)
        {
          sub_223197FA4(&__dst, v34.__pn_.__r_.__value_.__l.__data_, v34.__pn_.__r_.__value_.__l.__size_);
          v25 = HIBYTE(v34.__pn_.__r_.__value_.__r.__words[2]);
        }
        else
        {
          __dst = v34;
        }
        v36[0] = __dst.__pn_.__r_.__value_.__l.__size_;
        v19 = (_BYTE *)__dst.__pn_.__r_.__value_.__r.__words[0];
        *(_QWORD *)((char *)v36 + 7) = *(std::string::size_type *)((char *)&__dst.__pn_.__r_.__value_.__r.__words[1] + 7);
        v20 = HIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]);
        *((_BYTE *)&__dst.__pn_.__r_.__value_.__s + 23) = 0;
        __dst.__pn_.__r_.__value_.__s.__data_[0] = 0;
        if (v25 < 0)
          operator delete(v34.__pn_.__r_.__value_.__l.__data_);
        if (++v17 == v18)
        {
          __p.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
          __p.__pn_.__r_.__value_.__l.__size_ = v36[0];
          *(std::string::size_type *)((char *)&__p.__pn_.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v36 + 7);
          *((_BYTE *)&__p.__pn_.__r_.__value_.__s + 23) = v20;
          if (a6)
            goto LABEL_41;
LABEL_50:
          if (*(char *)(a2 + 23) < 0)
          {
            sub_223197FA4((_BYTE *)a1, *(void **)a2, *(_QWORD *)(a2 + 8));
          }
          else
          {
            *(_OWORD *)a1 = *(_OWORD *)a2;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
          }
          sub_22319C30C(a1, &__p);
          goto LABEL_63;
        }
      }
    }
  }
  memset(&__p, 0, sizeof(__p));
  if (!a6)
    goto LABEL_50;
LABEL_41:
  memset(&v34, 0, sizeof(v34));
  v26 = *(unsigned __int8 *)(a5 + 23);
  if ((v26 & 0x80u) == 0)
    v27 = (std::string *)a5;
  else
    v27 = *(std::string **)a5;
  if ((v26 & 0x80u) != 0)
    v26 = *(_QWORD *)(a5 + 8);
  sub_2231816F0(&v34.__pn_, v27, (std::string *)((char *)v27 + v26));
  if (*(char *)(a2 + 23) < 0)
    sub_223197FA4(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
  else
    __dst = *(std::__fs::filesystem::path *)a2;
  sub_22319C30C((uint64_t)&__dst, &v34);
  if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
    sub_223197FA4((_BYTE *)a1, __dst.__pn_.__r_.__value_.__l.__data_, __dst.__pn_.__r_.__value_.__l.__size_);
  else
    *(std::__fs::filesystem::path *)a1 = __dst;
  sub_22319C30C(a1, &__p);
  if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v34.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_63;
  }
  else if ((SHIBYTE(v34.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_63;
  }
  operator delete(v34.__pn_.__r_.__value_.__l.__data_);
LABEL_63:
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  v28 = (void **)v32;
  if (v32)
  {
    p_data = (void **)&v33->__r_.__value_.__l.__data_;
    v30 = v32;
    if (v33 != v32)
    {
      do
      {
        if (*((char *)p_data - 1) < 0)
          operator delete(*(p_data - 3));
        p_data -= 3;
      }
      while (p_data != v28);
      v30 = v32;
    }
    v33 = (std::string *)v28;
    operator delete(v30);
  }
}

void sub_224114DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a15 < 0)
    operator delete(__p);
  sub_22319BB48(&a16);
  _Unwind_Resume(a1);
}

void sub_224114EB8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int i;
  std::string *v17;
  __int128 v18;
  std::string v19;
  void *v20[2];
  std::string::size_type v21;
  int v22;
  std::string __p;
  std::__fs::filesystem::path v24;

  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  sub_22411517C(&v24.__pn_, *a3, a4, a5, (uint64_t *)&__p, a6, a7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_5:
    sub_223197FA4((_BYTE *)a1, *(void **)a2, *(_QWORD *)(a2 + 8));
    goto LABEL_6;
  }
  if (*(char *)(a2 + 23) < 0)
    goto LABEL_5;
LABEL_3:
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
LABEL_6:
  sub_22319C30C(a1, &v24);
  for (i = 1; ; i = v22 + 1)
  {
    v22 = i;
    if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a8 + 176))(a8, a1) & 1) == 0)
      break;
    sub_223A9EC04(&v22);
    v17 = std::string::insert(&v19, 0, "_", 1uLL);
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v21 = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)v20 = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    sub_22411517C(&__p, *a3, a4, a5, (uint64_t *)v20, a6, a7);
    if (SHIBYTE(v24.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v24.__pn_.__r_.__value_.__l.__data_);
      v24.__pn_ = __p;
      if ((SHIBYTE(v21) & 0x80000000) == 0)
      {
LABEL_11:
        if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_12;
        goto LABEL_16;
      }
    }
    else
    {
      v24.__pn_ = __p;
      if ((SHIBYTE(v21) & 0x80000000) == 0)
        goto LABEL_11;
    }
    operator delete(v20[0]);
    if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_12:
      if ((*(char *)(a2 + 23) & 0x80000000) == 0)
        goto LABEL_13;
      goto LABEL_17;
    }
LABEL_16:
    operator delete(v19.__r_.__value_.__l.__data_);
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    {
LABEL_13:
      __p = *(std::string *)a2;
      goto LABEL_18;
    }
LABEL_17:
    sub_223197FA4(&__p, *(void **)a2, *(_QWORD *)(a2 + 8));
LABEL_18:
    sub_22319C30C((uint64_t)&__p, &v24);
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(std::string *)a1 = __p;
  }
  if (SHIBYTE(v24.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__pn_.__r_.__value_.__l.__data_);
}

void sub_2241150E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22411517C(std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  std::string::size_type size;
  std::string *p_p;
  uint64_t v15;
  uint64_t *v16;
  std::string __p;
  std::string v18;
  _QWORD v19[10];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  sub_22456D250("%020llu", &__p, a2);
  v19[0] = a3;
  v19[1] = a4;
  v19[2] = "_";
  v19[3] = 1;
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  v19[4] = p_p;
  v19[5] = size;
  v15 = *((unsigned __int8 *)a5 + 23);
  if ((v15 & 0x80u) == 0)
    v16 = a5;
  else
    v16 = (uint64_t *)*a5;
  if ((v15 & 0x80u) != 0)
    v15 = a5[1];
  v19[6] = v16;
  v19[7] = v15;
  v19[8] = a6;
  v19[9] = a7;
  sub_2231A9820((uint64_t)v19, (uint64_t)&v20, 0, 0, &v18);
  *a1 = v18;
  memset(&v18, 0, sizeof(v18));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2241152A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2241152CC(std::string *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  size_t v12;
  void **v13;
  std::string *p_dst;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  void **v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type size;
  void *v23;
  int v24;
  void *v25;
  std::string::size_type v26;
  char v27;
  void *v28;
  void **v29;
  void **v30;
  char *v31;
  char *v32;
  char *v33;
  int v34;
  std::string::size_type v35;
  std::string::value_type v36;
  int v37;
  std::string *v38;
  std::string::size_type v39;
  std::string::value_type v40;
  std::string v41;
  void *__p[2];
  unsigned __int8 v43;
  _DWORD v44[2];
  std::string __dst;
  void *v46[2];
  uint64_t v47;
  unsigned int v48;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    if (!*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4) + 40))
      goto LABEL_15;
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_92;
    }
    if (!*(_BYTE *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8)) + 40))
      goto LABEL_15;
  }
  v5 = *(_QWORD *)(a2 + 8);
  if (!v5)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_92;
    }
    v5 = *(_QWORD *)(a2 + 8);
  }
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  v7 = *(unsigned __int8 *)(v6 + 39);
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(v6 + 24);
  if (v7)
  {
    v8 = *(_QWORD *)(a2 + 8);
    if (v8)
    {
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      if ((*(char *)(v9 + 39) & 0x80000000) == 0)
      {
LABEL_14:
        *(_OWORD *)v46 = *(_OWORD *)(v9 + 16);
        v47 = *(_QWORD *)(v9 + 32);
LABEL_59:
        v26 = HIBYTE(v47);
        v27 = HIBYTE(v47);
        v29 = (void **)v46[0];
        v28 = v46[1];
        if (v47 >= 0)
          v30 = v46;
        else
          v30 = (void **)v46[0];
        if (v47 >= 0)
          v31 = (char *)HIBYTE(v47);
        else
          v31 = (char *)v46[1];
        if (v31)
        {
          do
          {
            v32 = (char *)memchr(" .\\/:*?|<>\"", *(char *)v30, 0xBuLL);
            v33 = "";
            if (v32)
              v33 = v32;
            if (v33 - " .\\/:*?|<>\"" != 11)
              *(_BYTE *)v30 = 95;
            v30 = (void **)((char *)v30 + 1);
            --v31;
          }
          while (v31);
          v26 = HIBYTE(v47);
          v29 = (void **)v46[0];
          v28 = v46[1];
          v27 = HIBYTE(v47);
        }
        v34 = v27;
        if (v27 >= 0)
          v35 = v26;
        else
          v35 = (std::string::size_type)v28;
        a1->__r_.__value_.__r.__words[0] = 0;
        a1->__r_.__value_.__l.__size_ = 0;
        a1->__r_.__value_.__r.__words[2] = 0;
        std::string::reserve(a1, v35);
        if (v34 >= 0)
          v29 = v46;
        for (; v35; --v35)
        {
          v36 = __tolower(*(unsigned __int8 *)v29);
          std::string::push_back(a1, v36);
          v29 = (void **)((char *)v29 + 1);
        }
        goto LABEL_89;
      }
    }
    else
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_92;
      }
      v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8));
      if ((*(char *)(v9 + 39) & 0x80000000) == 0)
        goto LABEL_14;
    }
    sub_223197FA4(v46, *(void **)(v9 + 16), *(_QWORD *)(v9 + 24));
    goto LABEL_59;
  }
LABEL_15:
  v10 = *(_QWORD *)(a2 + 8);
  if (!v10)
  {
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      v10 = *(_QWORD *)(a2 + 8);
      goto LABEL_18;
    }
LABEL_92:
    abort();
  }
LABEL_18:
  (*(void (**)(void **__return_ptr))(*(_QWORD *)v10 + 48))(v46);
  v11 = SHIBYTE(v47);
  if (v47 >= 0)
    v12 = HIBYTE(v47);
  else
    v12 = (size_t)v46[1];
  if (v12 != 8)
  {
    v15 = v12 + 1;
    if (v12 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    if (v15 >= 0x17)
    {
      v16 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17)
        v16 = v15 | 7;
      v17 = v16 + 1;
      p_dst = (std::string *)operator new(v16 + 1);
      __dst.__r_.__value_.__l.__size_ = v12 + 1;
      __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      memset(&__dst, 0, sizeof(__dst));
      p_dst = &__dst;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v12 + 1;
      if (!v12)
        goto LABEL_37;
    }
LABEL_33:
    if (v11 >= 0)
      v18 = v46;
    else
      v18 = (void **)v46[0];
    memmove(p_dst, v18, v12);
LABEL_37:
    *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v12) = 95;
    sub_2231C4FB4(&v48);
    if ((v43 & 0x80u) == 0)
      v19 = __p;
    else
      v19 = (void **)__p[0];
    if ((v43 & 0x80u) == 0)
      v20 = v43;
    else
      v20 = (std::string::size_type)__p[1];
    v21 = std::string::append(&__dst, (const std::string::value_type *)v19, v20);
    v23 = (void *)v21->__r_.__value_.__r.__words[0];
    size = v21->__r_.__value_.__l.__size_;
    v44[0] = v21->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v44 + 3) = *(_DWORD *)((char *)&v21->__r_.__value_.__r.__words[2] + 3);
    v24 = SHIBYTE(v21->__r_.__value_.__r.__words[2]);
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if ((char)v43 < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_45:
        if ((v24 & 0x80000000) == 0)
        {
LABEL_46:
          v41.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
          v41.__r_.__value_.__l.__size_ = size;
          LODWORD(v41.__r_.__value_.__r.__words[2]) = v44[0];
          *(_DWORD *)((char *)&v41.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v44 + 3);
          *((_BYTE *)&v41.__r_.__value_.__s + 23) = v24;
LABEL_50:
          sub_22456D060(&v41, ".", 1, "_", 1uLL, 0, 0, (uint64_t)a1);
          if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v41.__r_.__value_.__l.__data_);
            if ((v24 & 0x80000000) == 0)
              goto LABEL_89;
          }
          else if ((v24 & 0x80000000) == 0)
          {
            goto LABEL_89;
          }
          v25 = v23;
          goto LABEL_55;
        }
LABEL_49:
        sub_223197FA4(&v41, v23, size);
        goto LABEL_50;
      }
    }
    else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_45;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((v24 & 0x80000000) == 0)
      goto LABEL_46;
    goto LABEL_49;
  }
  v13 = (void **)v46[0];
  if (v47 >= 0)
    v13 = v46;
  if (*(void **)"cv3d.viz" != *v13)
  {
    __dst.__r_.__value_.__r.__words[2] = 0x900000000000000;
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0uLL;
    p_dst = &__dst;
    goto LABEL_33;
  }
  sub_22413C5F0((uint64_t)__p, v48);
  v37 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  v38 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v39 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v39 = __dst.__r_.__value_.__l.__size_;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  std::string::reserve(a1, v39);
  if (v37 >= 0)
    v38 = &__dst;
  for (; v39; --v39)
  {
    v40 = __tolower(v38->__r_.__value_.__s.__data_[0]);
    std::string::push_back(a1, v40);
    v38 = (std::string *)((char *)v38 + 1);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    v25 = (void *)__dst.__r_.__value_.__r.__words[0];
LABEL_55:
    operator delete(v25);
  }
LABEL_89:
  if (SHIBYTE(v47) < 0)
    operator delete(v46[0]);
}

void sub_224115810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 + 23) < 0)
    operator delete(*(void **)v33);
  if (a27 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  _Unwind_Resume(exception_object);
}

void sub_2241158BC(uint64_t a1, uint64_t a2, std::mutex *a3, const std::__fs::filesystem::path *a4, _QWORD *a5, const std::__fs::filesystem::path *a6, int a7)
{
  uint64_t v7;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  size_t v35;
  void **v36;
  unint64_t v37;
  unint64_t v38;
  const void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  char v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  int v56;
  std::__fs::filesystem::path v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  int v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  std::__fs::filesystem::path v67;
  __int128 v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  int v74;
  __int128 v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  std::__fs::filesystem::path v80;
  __int128 v81;
  uint64_t v82;
  std::__fs::filesystem::path v83;
  __int128 v84;
  uint64_t v85;
  int v86;
  _BYTE v87[24];
  int v88;
  void *__dst[2];
  unint64_t v90;
  _QWORD v91[5];
  _QWORD *v92;

  v14 = a5[3];
  if (!v14)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v14 = a5[3];
  }
  v56 = a7;
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v14 + 48))(&v84);
  v15 = *(unsigned __int8 *)((*(uint64_t (**)(_QWORD *))(a5[2] + 16))(a5 + 2) + 96);
  v16 = (*(uint64_t (**)(_QWORD *))(a5[2] + 16))(a5 + 2);
  v17 = (uint64_t *)(v16 + 80);
  if (!v15)
    v17 = (uint64_t *)v16;
  v18 = *v17;
  std::__fs::filesystem::path::lexically_relative(&v83, a6, a4);
  std::mutex::lock(a3);
  v58 = v18;
  if (SHIBYTE(v85) < 0)
  {
    sub_223197FA4(&v59, (void *)v84, *((unint64_t *)&v84 + 1));
  }
  else
  {
    v59 = v84;
    v60 = v85;
  }
  v61 = v86;
  v19 = (__int128 *)*a5;
  if (*(char *)(*a5 + 23) < 0)
  {
    sub_223197FA4(&v62, *(void **)v19, *((_QWORD *)v19 + 1));
  }
  else
  {
    v20 = *v19;
    v63 = *((_QWORD *)v19 + 2);
    v62 = v20;
  }
  LOBYTE(v64) = 0;
  LOBYTE(v66) = 0;
  if (*((_BYTE *)v19 + 48))
  {
    if (*((char *)v19 + 47) < 0)
    {
      sub_223197FA4(&v64, *((void **)v19 + 3), *((_QWORD *)v19 + 4));
    }
    else
    {
      v21 = *(__int128 *)((char *)v19 + 24);
      v65 = *((_QWORD *)v19 + 5);
      v64 = v21;
    }
    LOBYTE(v66) = 1;
  }
  if (SHIBYTE(v83.__pn_.__r_.__value_.__r.__words[2]) < 0)
    sub_223197FA4(&v57, v83.__pn_.__r_.__value_.__l.__data_, v83.__pn_.__r_.__value_.__l.__size_);
  else
    v57 = v83;
  v67 = v57;
  memset(&v57, 0, sizeof(v57));
  *(_QWORD *)&v68 = a6[1].__pn_.__r_.__value_.__l.__data_;
  v22 = a5[3];
  if (!v22)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v22 = a5[3];
  }
  v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  v24 = v23;
  v25 = *(unsigned __int8 *)(v23 + 40);
  if (*(_BYTE *)(v23 + 40))
  {
    v26 = *(char *)(v23 + 39);
    if (v26 >= 0)
      v27 = v23 + 16;
    else
      v27 = *(_QWORD *)(v23 + 16);
    if (v26 >= 0)
      v7 = *(unsigned __int8 *)(v23 + 39);
    else
      v7 = *(_QWORD *)(v23 + 24);
  }
  else
  {
    v27 = 0;
  }
  v28 = *(unsigned __int8 *)(v23 + 160);
  v88 = 0;
  v29 = operator new();
  *(_QWORD *)(v29 + 272) = 0;
  *(_OWORD *)(v29 + 240) = 0u;
  *(_OWORD *)(v29 + 256) = 0u;
  *(_OWORD *)(v29 + 208) = 0u;
  *(_OWORD *)(v29 + 224) = 0u;
  *(_OWORD *)(v29 + 176) = 0u;
  *(_OWORD *)(v29 + 192) = 0u;
  *(_OWORD *)(v29 + 144) = 0u;
  *(_OWORD *)(v29 + 160) = 0u;
  *(_OWORD *)(v29 + 112) = 0u;
  *(_OWORD *)(v29 + 128) = 0u;
  *(_OWORD *)(v29 + 80) = 0u;
  *(_OWORD *)(v29 + 96) = 0u;
  *(_OWORD *)(v29 + 48) = 0u;
  *(_OWORD *)(v29 + 64) = 0u;
  *(_OWORD *)(v29 + 16) = 0u;
  *(_OWORD *)(v29 + 32) = 0u;
  *(_OWORD *)v29 = 0u;
  sub_223195210(v29);
  v91[0] = v29;
  if (v25)
    sub_2231813E8((_QWORD *)(v29 + 16), v27, v7);
  if (v28)
  {
    v30 = sub_2231813E8((_QWORD *)(v29 + 16), (uint64_t)"#", 1);
    v31 = *(char *)(v24 + 135);
    if (v31 >= 0)
      v32 = v24 + 112;
    else
      v32 = *(_QWORD *)(v24 + 112);
    if (v31 >= 0)
      v33 = *(unsigned __int8 *)(v24 + 135);
    else
      v33 = *(_QWORD *)(v24 + 120);
    sub_2231813E8(v30, v32, v33);
  }
  v34 = *(_DWORD *)(v29 + 120);
  if ((v34 & 0x10) != 0)
  {
    v37 = *(_QWORD *)(v29 + 112);
    v38 = *(_QWORD *)(v29 + 72);
    if (v37 < v38)
    {
      *(_QWORD *)(v29 + 112) = v38;
      v37 = v38;
    }
    v39 = *(const void **)(v29 + 64);
    v35 = v37 - (_QWORD)v39;
    if (v37 - (unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_133;
  }
  else
  {
    if ((v34 & 8) == 0)
    {
      v35 = 0;
      HIBYTE(v90) = 0;
      v36 = __dst;
      goto LABEL_54;
    }
    v39 = *(const void **)(v29 + 40);
    v35 = *(_QWORD *)(v29 + 56) - (_QWORD)v39;
    if (v35 >= 0x7FFFFFFFFFFFFFF8)
LABEL_133:
      sub_22316DBC0();
  }
  if (v35 >= 0x17)
  {
    v40 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17)
      v40 = v35 | 7;
    v41 = v40 + 1;
    v36 = (void **)operator new(v40 + 1);
    __dst[1] = (void *)v35;
    v90 = v41 | 0x8000000000000000;
    __dst[0] = v36;
    goto LABEL_53;
  }
  HIBYTE(v90) = v35;
  v36 = __dst;
  if (v35)
LABEL_53:
    memmove(v36, v39, v35);
LABEL_54:
  *((_BYTE *)v36 + v35) = 0;
  v42 = v91[0];
  if (v91[0])
  {
    v43 = MEMORY[0x24BEDB7F0];
    v44 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v91[0] = *MEMORY[0x24BEDB7F0];
    v45 = *(_QWORD *)(v43 + 72);
    *(_QWORD *)(v42 + *(_QWORD *)(v44 - 24)) = *(_QWORD *)(v43 + 64);
    *(_QWORD *)(v42 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v42 + 16) = v45;
    if (*(char *)(v42 + 111) < 0)
      operator delete(*(void **)(v42 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v42 + 128);
    MEMORY[0x227684CE8](v42, 0x10B2C40EED050F3);
  }
  v91[0] = v87;
  v91[1] = __dst;
  v91[2] = v87;
  v91[3] = __dst;
  v91[4] = __dst;
  if (v88 == -1)
    sub_22316DD70();
  v92 = v91;
  ((void (*)(_QWORD **, _BYTE *))off_24EC69F40[v88])(&v92, v87);
  if (SHIBYTE(v90) < 0)
    operator delete(__dst[0]);
  if (v88 == -1)
    sub_22316DD70();
  v91[0] = __dst;
  ((void (*)(_QWORD *__return_ptr, _QWORD *, _BYTE *))off_24EC69F70[v88])((_QWORD *)&v68 + 1, v91, v87);
  if (v88 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_24EC69F58[v88])(v91, v87);
  sub_2241127F0((uint64_t)&v71, (uint64_t)&v58);
  if (v70 < 0)
  {
    operator delete(*((void **)&v68 + 1));
    if ((SHIBYTE(v67.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_66:
      if (!(_BYTE)v66)
        goto LABEL_72;
      goto LABEL_70;
    }
  }
  else if ((SHIBYTE(v67.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_66;
  }
  operator delete(v67.__pn_.__r_.__value_.__l.__data_);
  if (!(_BYTE)v66)
    goto LABEL_72;
LABEL_70:
  if (SHIBYTE(v65) < 0)
    operator delete((void *)v64);
LABEL_72:
  if (SHIBYTE(v63) < 0)
  {
    operator delete((void *)v62);
    if ((SHIBYTE(v60) & 0x80000000) == 0)
    {
LABEL_74:
      if ((SHIBYTE(v57.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_75;
LABEL_79:
      operator delete(v57.__pn_.__r_.__value_.__l.__data_);
      if (!*(_QWORD *)(a1 + 40))
        goto LABEL_81;
      goto LABEL_80;
    }
  }
  else if ((SHIBYTE(v60) & 0x80000000) == 0)
  {
    goto LABEL_74;
  }
  operator delete((void *)v59);
  if (SHIBYTE(v57.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_79;
LABEL_75:
  if (*(_QWORD *)(a1 + 40))
  {
LABEL_80:
    v46 = *(_QWORD **)(a1 + 24);
    LOBYTE(v58) = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v46, (uint64_t)&v58, 1);
  }
LABEL_81:
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  v58 = v71;
  if (SHIBYTE(v73) < 0)
  {
    sub_223197FA4(&v59, (void *)v72, *((unint64_t *)&v72 + 1));
  }
  else
  {
    v59 = v72;
    v60 = v73;
  }
  v61 = v74;
  if (SHIBYTE(v76) < 0)
  {
    sub_223197FA4(&v62, (void *)v75, *((unint64_t *)&v75 + 1));
  }
  else
  {
    v62 = v75;
    v63 = v76;
  }
  if (SHIBYTE(v78) < 0)
  {
    sub_223197FA4(&v64, (void *)v77, *((unint64_t *)&v77 + 1));
  }
  else
  {
    v64 = v77;
    v65 = v78;
  }
  v66 = v79;
  if (SHIBYTE(v80.__pn_.__r_.__value_.__r.__words[2]) < 0)
    sub_223197FA4(&v67, v80.__pn_.__r_.__value_.__l.__data_, v80.__pn_.__r_.__value_.__l.__size_);
  else
    v67 = v80;
  if (SHIBYTE(v82) < 0)
  {
    sub_223197FA4(&v68, (void *)v81, *((unint64_t *)&v81 + 1));
  }
  else
  {
    v68 = v81;
    v69 = v82;
  }
  if (*(_QWORD *)(a1 + 40))
  {
    v47 = *(_QWORD **)(a1 + 24);
    LOBYTE(v91[0]) = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v47, (uint64_t)v91, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  sub_22454F620(a1, (uint64_t)&v59);
  if (*(_QWORD *)(a1 + 40))
  {
    v48 = *(_QWORD **)(a1 + 24);
    LOBYTE(v91[0]) = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v48, (uint64_t)v91, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  sub_22454F620(a1, (uint64_t)&v62);
  sub_22454F620(a1, (uint64_t)&v64);
  if (*(_QWORD *)(a1 + 40))
  {
    v49 = *(_QWORD **)(a1 + 24);
    LOBYTE(v91[0]) = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v49, (uint64_t)v91, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  sub_22454F620(a1, (uint64_t)&v67);
  sub_22454F620(a1, (uint64_t)&v68);
  if (SHIBYTE(v69) < 0)
  {
    operator delete((void *)v68);
    if ((SHIBYTE(v67.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_104:
      if ((SHIBYTE(v65) & 0x80000000) == 0)
        goto LABEL_105;
      goto LABEL_111;
    }
  }
  else if ((SHIBYTE(v67.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_104;
  }
  operator delete(v67.__pn_.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v65) & 0x80000000) == 0)
  {
LABEL_105:
    if ((SHIBYTE(v63) & 0x80000000) == 0)
      goto LABEL_106;
    goto LABEL_112;
  }
LABEL_111:
  operator delete((void *)v64);
  if ((SHIBYTE(v63) & 0x80000000) == 0)
  {
LABEL_106:
    if ((SHIBYTE(v60) & 0x80000000) == 0)
      goto LABEL_107;
LABEL_113:
    operator delete((void *)v59);
    v50 = *(_BYTE *)(a1 + 34);
    if (!*(_QWORD *)(a1 + 40))
      goto LABEL_115;
    goto LABEL_114;
  }
LABEL_112:
  operator delete((void *)v62);
  if (SHIBYTE(v60) < 0)
    goto LABEL_113;
LABEL_107:
  v50 = *(_BYTE *)(a1 + 34);
  if (*(_QWORD *)(a1 + 40))
  {
LABEL_114:
    v51 = *(_QWORD **)(a1 + 24);
    LOBYTE(v58) = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v51, (uint64_t)&v58, 1);
  }
LABEL_115:
  v52 = *(_QWORD **)(a1 + 24);
  LOBYTE(v58) = v50;
  sub_2231813E8(v52, (uint64_t)&v58, 1);
  v53 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = v53;
  v54 = *(_QWORD **)(a1 + 24);
  LOBYTE(v58) = *(_BYTE *)(a1 + 33);
  sub_2231813E8(v54, (uint64_t)&v58, 1);
  if (v56)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8));
    std::ostream::flush();
  }
  if (SHIBYTE(v82) < 0)
  {
    operator delete((void *)v81);
    if ((SHIBYTE(v80.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_119:
      if ((SHIBYTE(v78) & 0x80000000) == 0)
        goto LABEL_120;
      goto LABEL_127;
    }
  }
  else if ((SHIBYTE(v80.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_119;
  }
  operator delete(v80.__pn_.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v78) & 0x80000000) == 0)
  {
LABEL_120:
    if ((SHIBYTE(v76) & 0x80000000) == 0)
      goto LABEL_121;
    goto LABEL_128;
  }
LABEL_127:
  operator delete((void *)v77);
  if ((SHIBYTE(v76) & 0x80000000) == 0)
  {
LABEL_121:
    if ((SHIBYTE(v73) & 0x80000000) == 0)
      goto LABEL_122;
    goto LABEL_129;
  }
LABEL_128:
  operator delete((void *)v75);
  if ((SHIBYTE(v73) & 0x80000000) == 0)
  {
LABEL_122:
    std::mutex::unlock(a3);
    if ((SHIBYTE(v83.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_123;
    goto LABEL_130;
  }
LABEL_129:
  operator delete((void *)v72);
  std::mutex::unlock(a3);
  if ((SHIBYTE(v83.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_123:
    if ((SHIBYTE(v85) & 0x80000000) == 0)
      return;
LABEL_131:
    operator delete((void *)v84);
    return;
  }
LABEL_130:
  operator delete(v83.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v85) < 0)
    goto LABEL_131;
}

void sub_224116284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  std::mutex *v49;
  uint64_t v50;

  if (a38 && a37 < 0)
    operator delete(__p);
  if (a31 < 0)
    operator delete(a26);
  if (a24 < 0)
    operator delete(a19);
  std::mutex::unlock(v49);
  if (*(char *)(v50 - 225) < 0)
  {
    operator delete(*(void **)(v50 - 248));
    if ((*(char *)(v50 - 201) & 0x80000000) == 0)
LABEL_10:
      _Unwind_Resume(a1);
  }
  else if ((*(char *)(v50 - 201) & 0x80000000) == 0)
  {
    goto LABEL_10;
  }
  operator delete(*(void **)(v50 - 224));
  _Unwind_Resume(a1);
}

void sub_2241164A4(uint64_t a1, uint64_t a2, void ***a3, int a4, unint64_t a5, uint64_t a6, char a7)
{
  int v10;
  int v14;
  void **v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  void **v19;
  int v20;
  size_t v21;
  void *v22;
  unsigned __int8 v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  std::string *v28;
  uint64_t *v29;
  std::string::size_type *v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  int8x8_t v36;
  uint8x8_t v37;
  unint64_t v38;
  uint64_t **v39;
  uint64_t *v40;
  std::string::size_type p_dst;
  uint64_t v42;
  std::__fs::filesystem::path::__string_view v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  std::__fs::filesystem::path::__string_view v53;
  std::string *v54;
  uint64_t v55;
  unint64_t v56;
  std::string::size_type v57;
  std::string::size_type v58;
  std::string::size_type v59;
  std::__shared_weak_count *v60;
  unint64_t *p_shared_owners;
  unint64_t v62;
  uint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  uint8x8_t v66;
  uint64_t **v67;
  uint64_t *v68;
  uint64_t v69;
  std::__fs::filesystem::path::__string_view v70;
  unint64_t v71;
  std::__fs::filesystem::path::__string_view v72;
  _QWORD *v73;
  _BYTE *v74;
  float v75;
  float v76;
  _QWORD *v77;
  _QWORD *v78;
  _BOOL8 v79;
  unint64_t v80;
  unint64_t v81;
  size_t prime;
  unint64_t v83;
  uint8x8_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  uint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  uint64_t v93;
  std::string::pointer data;
  int v95;
  int v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  _QWORD *v100;
  char *v101;
  uint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  char *v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  size_t *v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  void *v121;
  std::string::value_type v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  char *v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  void *v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::runtime_error *exception;
  __int128 v148;
  int v149;
  std::__fs::filesystem::path v150;
  uint64_t v151;
  std::__fs::filesystem::path __dst;
  void *v153[2];
  int64_t v154;
  void *v155[2];
  char v156;
  uint64_t (**v157)();
  __int128 v158;
  unsigned __int8 v159;
  std::string *v160;
  std::__shared_weak_count *v161;
  uint64_t (**v162)();
  __int128 v163;
  char v164;
  __int128 v165;
  char v166;
  std::string pn;
  char v168[8];
  void *v169;
  char v170;
  uint64_t v171;
  int v172;
  void *v173;
  char *v174;
  std::string __p;
  _QWORD *v176;
  std::string::value_type v177;
  std::string::value_type v178;
  std::string::value_type v179;
  uint64_t v180;
  uint64_t v181;
  void *v182;
  char v183;
  uint64_t v184[19];
  _BYTE v185[32];
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  _QWORD v192[22];

  v192[19] = *MEMORY[0x24BDAC8D0];
  v10 = a4;
  switch(a4)
  {
    case 1:
      v156 = 4;
      v14 = 1952539694;
      goto LABEL_6;
    case 2:
      v156 = 4;
      v14 = 1987273518;
      goto LABEL_6;
    case 3:
      v156 = 5;
      strcpy((char *)v155, ".json");
      goto LABEL_7;
    case 4:
      v156 = 4;
      v14 = 1954051118;
LABEL_6:
      LODWORD(v155[0]) = v14;
      BYTE4(v155[0]) = 0;
LABEL_7:
      sub_2241152CC((std::string *)v185, (uint64_t)(a3 + 2));
      if (v156 >= 0)
        v15 = v155;
      else
        v15 = (void **)v155[0];
      if (v156 >= 0)
        v16 = v156;
      else
        v16 = (std::string::size_type)v155[1];
      v17 = std::string::append((std::string *)v185, (const std::string::value_type *)v15, v16);
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v154 = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)v153 = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      if ((v185[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v185);
        v19 = *a3;
        v20 = *((char *)*a3 + 23);
        if ((v20 & 0x80000000) == 0)
          goto LABEL_15;
      }
      else
      {
        v19 = *a3;
        v20 = *((char *)*a3 + 23);
        if ((v20 & 0x80000000) == 0)
        {
LABEL_15:
          v21 = v20;
          v22 = v19;
          goto LABEL_18;
        }
      }
      v22 = *v19;
      v21 = (size_t)v19[1];
LABEL_18:
      v23 = (_BYTE)v19 + 24;
      v24 = *((unsigned __int8 *)v19 + 48);
      v25 = (unint64_t)(v19 + 3) & 0xFFFFFFFFFFFFFF00;
      v26 = v23 & 0xF8;
      if (!v24)
        v26 = 0;
      sub_2241149B0((uint64_t)v185, a2, v22, v21, v26 | v25, v24);
      memset(&__p, 0, sizeof(__p));
      v27 = (char *)HIBYTE(v154);
      if (v154 >= 0)
        v28 = (std::string *)v153;
      else
        v28 = (std::string *)v153[0];
      if (v154 < 0)
        v27 = (char *)v153[1];
      sub_2231816F0(&__p, v28, (std::string *)&v27[(_QWORD)v28]);
      if ((v185[23] & 0x80000000) != 0)
        sub_223197FA4(&__dst, *(void **)v185, *(unint64_t *)&v185[8]);
      else
        __dst = *(std::__fs::filesystem::path *)v185;
      sub_22319C30C((uint64_t)&__dst, (std::__fs::filesystem::path *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((v185[23] & 0x80000000) == 0)
          goto LABEL_30;
      }
      else if ((v185[23] & 0x80000000) == 0)
      {
        goto LABEL_30;
      }
      operator delete(*(void **)v185);
LABEL_30:
      v29 = sub_2240181B4(0);
      sub_224017D50((uint64_t)v168, (uint64_t)(a3 + 2), (uint64_t)v29);
      LOBYTE(v162) = 0;
      v164 = 0;
      v160 = 0;
      v161 = 0;
      LOBYTE(v157) = 0;
      v159 = 0;
      if (!a7)
      {
        sub_2242B0918(&__dst, 0x11u, a5, v185);
        v162 = &off_24EC71C10;
        v163 = *(_OWORD *)&v185[8];
        v164 = 1;
        v30 = (std::string::size_type *)(*(uint64_t (**)(_QWORD, __n128))(**(_QWORD **)&v185[8] + 16))(*(_QWORD *)&v185[8], *(__n128 *)&v185[8]);
        v31 = (char *)v30 + *(_QWORD *)(*v30 - 24);
        if ((v31[32] & 5) != 0)
        {
          v32 = -1;
        }
        else
        {
          (*(void (**)(_BYTE *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v31 + 5) + 32))(v185, *((_QWORD *)v31 + 5), 0, 1, 16);
          v32 = v192[0];
        }
        v51 = v32 & ~(v32 >> 63);
        goto LABEL_241;
      }
      if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
        sub_223197FA4(v185, __dst.__pn_.__r_.__value_.__l.__data_, __dst.__pn_.__r_.__value_.__l.__size_);
      else
        *(std::__fs::filesystem::path *)v185 = __dst;
      if (v185[23] >= 0)
        v33 = (uint64_t *)v185;
      else
        v33 = *(uint64_t **)v185;
      if (v185[23] >= 0)
        v34 = v185[23];
      else
        v34 = *(_QWORD *)&v185[8];
      v35 = sub_22323D798((uint64_t)&__p, v33, v34);
      if ((v185[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v185);
        v36 = *(int8x8_t *)(a6 + 8);
        if (!*(_QWORD *)&v36)
          goto LABEL_89;
      }
      else
      {
        v36 = *(int8x8_t *)(a6 + 8);
        if (!*(_QWORD *)&v36)
          goto LABEL_89;
      }
      v37 = (uint8x8_t)vcnt_s8(v36);
      v37.i16[0] = vaddlv_u8(v37);
      if (v37.u32[0] > 1uLL)
      {
        v38 = v35;
        if (v35 >= *(_QWORD *)&v36)
          v38 = v35 % *(_QWORD *)&v36;
      }
      else
      {
        v38 = (*(_QWORD *)&v36 - 1) & v35;
      }
      v39 = *(uint64_t ***)(*(_QWORD *)a6 + 8 * v38);
      if (!v39 || (v40 = *v39) == 0)
      {
LABEL_89:
        v166 = 0;
        LOBYTE(v165) = 0;
        sub_22411A9FC((uint64_t)&__p, &v165, 24);
        v54 = (std::string *)operator new(0x168uLL);
        v54->__r_.__value_.__l.__size_ = 0;
        v54->__r_.__value_.__r.__words[2] = 0;
        v54->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC69EF0;
        if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
          sub_223197FA4(&pn, __dst.__pn_.__r_.__value_.__l.__data_, __dst.__pn_.__r_.__value_.__l.__size_);
        else
          pn = __dst.__pn_;
        sub_22411ACDC((uint64_t)v185, (uint64_t)&__p);
        v149 = v10;
        if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
          sub_223197FA4(&v54[1], pn.__r_.__value_.__l.__data_, pn.__r_.__value_.__l.__size_);
        else
          v54[1] = pn;
        v55 = a1;
        sub_22411ACDC((uint64_t)&v54[2], (uint64_t)v185);
        v54[13].__r_.__value_.__r.__words[2] = a5;
        v54[14].__r_.__value_.__r.__words[0] = 0;
        v54[14].__r_.__value_.__s.__data_[8] = 0;
        v54[14].__r_.__value_.__s.__data_[16] = 0;
        v56 = MEMORY[0x24BEDB7F0];
        v57 = *MEMORY[0x24BEDB7F0];
        *(_QWORD *)v185 = v57;
        v58 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
        v59 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
        *(_QWORD *)&v185[*(_QWORD *)(v57 - 24)] = v58;
        p_dst = MEMORY[0x24BEDB848];
        *(_QWORD *)&v185[16] = v59;
        *(_QWORD *)&v185[24] = MEMORY[0x24BEDB848] + 16;
        if (SHIBYTE(v190) < 0)
          operator delete(*((void **)&v189 + 1));
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x227684BE0](v192);
        if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
          operator delete(pn.__r_.__value_.__l.__data_);
        v60 = v161;
        v160 = v54 + 1;
        v161 = (std::__shared_weak_count *)v54;
        if (v60)
        {
          p_shared_owners = (unint64_t *)&v60->__shared_owners_;
          do
            v62 = __ldaxr(p_shared_owners);
          while (__stlxr(v62 - 1, p_shared_owners));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
        __p.__r_.__value_.__r.__words[0] = v57;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(_QWORD *)(v57 - 24)) = v58;
        __p.__r_.__value_.__r.__words[2] = v59;
        v176 = (_QWORD *)(p_dst + 16);
        if (v183 < 0)
          operator delete(v182);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x227684BE0](v184);
        a1 = v55;
        if (v166 < 0)
        {
          operator delete((void *)v165);
          v10 = v149;
          if ((SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_108;
        }
        else
        {
          v10 = v149;
          if ((SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_108:
            *(std::__fs::filesystem::path *)v185 = __dst;
            goto LABEL_111;
          }
        }
        sub_223197FA4(v185, __dst.__pn_.__r_.__value_.__l.__data_, __dst.__pn_.__r_.__value_.__l.__size_);
LABEL_111:
        if (v185[23] >= 0)
          v63 = (uint64_t *)v185;
        else
          v63 = *(uint64_t **)v185;
        if (v185[23] >= 0)
          v64 = v185[23];
        else
          v64 = *(_QWORD *)&v185[8];
        a5 = sub_22323D798((uint64_t)&__p, v63, v64);
        if ((v185[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)v185);
          v65 = *(_QWORD *)(a6 + 8);
          if (!v65)
            goto LABEL_154;
        }
        else
        {
          v65 = *(_QWORD *)(a6 + 8);
          if (!v65)
            goto LABEL_154;
        }
        v66 = (uint8x8_t)vcnt_s8((int8x8_t)v65);
        v66.i16[0] = vaddlv_u8(v66);
        if (v66.u32[0] > 1uLL)
        {
          v56 = a5;
          if (a5 >= v65)
            v56 = a5 % v65;
        }
        else
        {
          v56 = (v65 - 1) & a5;
        }
        v67 = *(uint64_t ***)(*(_QWORD *)a6 + 8 * v56);
        if (v67)
        {
          v68 = *v67;
          if (*v67)
          {
            if (v66.u32[0] < 2uLL)
            {
              p_dst = v65 - 1;
              while (1)
              {
                v69 = v68[1];
                if (v69 == a5)
                {
                  if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v70.__data_ = (const std::string_view::value_type *)&__dst;
                  else
                    v70.__data_ = (const std::string_view::value_type *)__dst.__pn_.__r_.__value_.__r.__words[0];
                  if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v70.__size_ = HIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]);
                  else
                    v70.__size_ = __dst.__pn_.__r_.__value_.__l.__size_;
                  if (!std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)(v68 + 2), v70))
                    goto LABEL_197;
                }
                else if ((v69 & p_dst) != v56)
                {
                  goto LABEL_154;
                }
                v68 = (uint64_t *)*v68;
                if (!v68)
                  goto LABEL_154;
              }
            }
            p_dst = (std::string::size_type)&__dst;
            do
            {
              v71 = v68[1];
              if (v71 == a5)
              {
                if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v72.__data_ = (const std::string_view::value_type *)&__dst;
                else
                  v72.__data_ = (const std::string_view::value_type *)__dst.__pn_.__r_.__value_.__r.__words[0];
                if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v72.__size_ = HIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]);
                else
                  v72.__size_ = __dst.__pn_.__r_.__value_.__l.__size_;
                if (!std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)(v68 + 2), v72))
                  goto LABEL_197;
              }
              else
              {
                if (v71 >= v65)
                  v71 %= v65;
                if (v71 != v56)
                  break;
              }
              v68 = (uint64_t *)*v68;
            }
            while (v68);
          }
        }
LABEL_154:
        v73 = operator new(0x38uLL);
        *(_QWORD *)v185 = v73;
        *(_QWORD *)&v185[8] = a6 + 16;
        v185[16] = 0;
        *v73 = 0;
        v73[1] = a5;
        v74 = v73 + 2;
        if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
        {
          sub_223197FA4(v74, __dst.__pn_.__r_.__value_.__l.__data_, __dst.__pn_.__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)v74 = *(_OWORD *)&__dst.__pn_.__r_.__value_.__l.__data_;
          v73[4] = *((_QWORD *)&__dst.__pn_.__r_.__value_.__l + 2);
        }
        v73[5] = 0;
        v73[6] = 0;
        v185[16] = 1;
        v75 = (float)(unint64_t)(*(_QWORD *)(a6 + 24) + 1);
        v76 = *(float *)(a6 + 32);
        if (v65 && (float)(v76 * (float)v65) >= v75)
        {
          v77 = *(_QWORD **)(*(_QWORD *)a6 + 8 * v56);
          v78 = *(_QWORD **)v185;
          if (v77)
          {
LABEL_160:
            *v78 = *v77;
            *v77 = *(_QWORD *)v185;
LABEL_196:
            v68 = *(uint64_t **)v185;
            ++*(_QWORD *)(a6 + 24);
LABEL_197:
            v89 = (uint64_t)v160;
            v88 = v161;
            if (v161)
            {
              v90 = (unint64_t *)&v161->__shared_owners_;
              do
                v91 = __ldxr(v90);
              while (__stxr(v91 + 1, v90));
            }
            v48 = (std::__shared_weak_count *)v68[6];
            v68[5] = v89;
            v68[6] = (uint64_t)v88;
            if (v48)
            {
              v92 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v92);
              while (__stlxr(v50 - 1, v92));
              goto LABEL_203;
            }
            goto LABEL_204;
          }
        }
        else
        {
          v79 = v65 < 3 || (v65 & (v65 - 1)) != 0;
          v80 = v79 | (2 * v65);
          v81 = vcvtps_u32_f32(v75 / v76);
          if (v80 <= v81)
            prime = v81;
          else
            prime = v80;
          if (prime == 1)
          {
            prime = 2;
          }
          else if ((prime & (prime - 1)) != 0)
          {
            prime = std::__next_prime(prime);
          }
          p_dst = *(_QWORD *)(a6 + 8);
          if (prime > p_dst)
            goto LABEL_172;
          if (prime < p_dst)
          {
            v83 = vcvtps_u32_f32((float)*(unint64_t *)(a6 + 24) / *(float *)(a6 + 32));
            if (p_dst < 3
              || (v84 = (uint8x8_t)vcnt_s8((int8x8_t)p_dst), v84.i16[0] = vaddlv_u8(v84), v84.u32[0] > 1uLL))
            {
              v83 = std::__next_prime(v83);
            }
            else
            {
              v85 = 1 << -(char)__clz(v83 - 1);
              if (v83 >= 2)
                v83 = v85;
            }
            if (prime <= v83)
              prime = v83;
            if (prime < p_dst)
LABEL_172:
              sub_2231B0668(a6, prime);
          }
          v65 = *(_QWORD *)(a6 + 8);
          v86 = v65 - 1;
          if ((v65 & (v65 - 1)) != 0)
          {
            if (a5 >= v65)
            {
              v56 = a5 % v65;
              v77 = *(_QWORD **)(*(_QWORD *)a6 + 8 * (a5 % v65));
              v78 = *(_QWORD **)v185;
              if (v77)
                goto LABEL_160;
            }
            else
            {
              v56 = a5;
              v77 = *(_QWORD **)(*(_QWORD *)a6 + 8 * a5);
              v78 = *(_QWORD **)v185;
              if (v77)
                goto LABEL_160;
            }
          }
          else
          {
            v56 = v86 & a5;
            v77 = *(_QWORD **)(*(_QWORD *)a6 + 8 * (v86 & a5));
            v78 = *(_QWORD **)v185;
            if (v77)
              goto LABEL_160;
          }
        }
        *v78 = *(_QWORD *)(a6 + 16);
        *(_QWORD *)(a6 + 16) = *(_QWORD *)v185;
        *(_QWORD *)(*(_QWORD *)a6 + 8 * v56) = a6 + 16;
        if (**(_QWORD **)v185)
        {
          v87 = *(_QWORD *)(**(_QWORD **)v185 + 8);
          if ((v65 & (v65 - 1)) != 0)
          {
            if (v87 >= v65)
              v87 %= v65;
          }
          else
          {
            v87 &= v65 - 1;
          }
          *(_QWORD *)(*(_QWORD *)a6 + 8 * v87) = *(_QWORD *)v185;
        }
        goto LABEL_196;
      }
      if (v37.u32[0] < 2uLL)
      {
        p_dst = *(_QWORD *)&v36 - 1;
        while (1)
        {
          v42 = v40[1];
          if (v42 == v35)
          {
            if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v43.__data_ = (const std::string_view::value_type *)&__dst;
            else
              v43.__data_ = (const std::string_view::value_type *)__dst.__pn_.__r_.__value_.__r.__words[0];
            if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v43.__size_ = HIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]);
            else
              v43.__size_ = __dst.__pn_.__r_.__value_.__l.__size_;
            if (!std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)(v40 + 2), v43))
              goto LABEL_66;
          }
          else if ((v42 & p_dst) != v38)
          {
            goto LABEL_89;
          }
          v40 = (uint64_t *)*v40;
          if (!v40)
            goto LABEL_89;
        }
      }
      p_dst = (std::string::size_type)&__dst;
      break;
    default:
      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/FileIOPrivate.cpp", 130, (uint64_t)"", 0, (uint64_t)"Unsupported format", 18, (void (*)(void **))sub_22457406C);
      abort();
  }
  while (1)
  {
    v52 = v40[1];
    if (v52 == v35)
      break;
    if (v52 >= *(_QWORD *)&v36)
      v52 %= *(_QWORD *)&v36;
    if (v52 != v38)
      goto LABEL_89;
LABEL_77:
    v40 = (uint64_t *)*v40;
    if (!v40)
      goto LABEL_89;
  }
  if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v53.__data_ = (const std::string_view::value_type *)&__dst;
  else
    v53.__data_ = (const std::string_view::value_type *)__dst.__pn_.__r_.__value_.__r.__words[0];
  if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v53.__size_ = HIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]);
  else
    v53.__size_ = __dst.__pn_.__r_.__value_.__l.__size_;
  if (std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)(v40 + 2), v53))
    goto LABEL_77;
LABEL_66:
  v45 = v40[5];
  v44 = (std::__shared_weak_count *)v40[6];
  if (v44)
  {
    v46 = (unint64_t *)&v44->__shared_owners_;
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  v48 = v161;
  v160 = (std::string *)v45;
  v161 = v44;
  if (v48)
  {
    v49 = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
LABEL_203:
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
      v93 = (uint64_t)v160;
      data = v160[13].__r_.__value_.__l.__data_;
      v95 = v160[13].__r_.__value_.__s.__data_[16];
      if (!v160[13].__r_.__value_.__s.__data_[16])
        goto LABEL_213;
LABEL_205:
      v51 = (uint64_t)&data[*(_QWORD *)(v93 + 320)];
      v96 = v159;
      if (v159)
        goto LABEL_226;
      goto LABEL_206;
    }
  }
LABEL_204:
  v93 = (uint64_t)v160;
  data = v160[13].__r_.__value_.__l.__data_;
  v95 = v160[13].__r_.__value_.__s.__data_[16];
  if (v160[13].__r_.__value_.__s.__data_[16])
    goto LABEL_205;
LABEL_213:
  sub_2242B0918((const std::__fs::filesystem::path *)v93, 0x11u, *(_QWORD *)(v93 + 304), &__p);
  if (!__p.__r_.__value_.__l.__size_)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    if (*(char *)(v93 + 23) < 0)
    {
      sub_223197FA4(&pn, *(void **)v93, *(_QWORD *)(v93 + 8));
    }
    else
    {
      v148 = *(_OWORD *)v93;
      pn.__r_.__value_.__r.__words[2] = *(_QWORD *)(v93 + 16);
      *(_OWORD *)&pn.__r_.__value_.__l.__data_ = v148;
    }
    sub_223799B10("Failed to write to file: ", &pn, (std::string *)v185);
    std::runtime_error::runtime_error(exception, (const std::string *)v185);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v100 = (_QWORD *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__size_ + 16))(__p.__r_.__value_.__l.__size_);
  v101 = (char *)v100 + *(_QWORD *)(*v100 - 24);
  if ((v101[32] & 5) != 0)
  {
    v102 = 0;
    *(_QWORD *)(v93 + 320) = 0;
    *(_BYTE *)(v93 + 328) = 1;
    a5 = __p.__r_.__value_.__r.__words[2];
    p_dst = __p.__r_.__value_.__l.__size_;
    if (!__p.__r_.__value_.__r.__words[2])
      goto LABEL_225;
  }
  else
  {
    (*(void (**)(_BYTE *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v101 + 5) + 32))(v185, *((_QWORD *)v101 + 5), 0, 1, 16);
    v102 = v192[0] & ~(v192[0] >> 63);
    *(_QWORD *)(v93 + 320) = v102;
    *(_BYTE *)(v93 + 328) = 1;
    a5 = __p.__r_.__value_.__r.__words[2];
    p_dst = __p.__r_.__value_.__l.__size_;
    if (!__p.__r_.__value_.__r.__words[2])
      goto LABEL_225;
  }
  v103 = (unint64_t *)(a5 + 8);
  do
    v104 = __ldxr(v103);
  while (__stxr(v104 + 1, v103));
  v105 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
  if (__p.__r_.__value_.__r.__words[2])
  {
    v106 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
LABEL_225:
  v51 = (uint64_t)&data[v102];
  v96 = v159;
  if (v159 == 1)
  {
LABEL_206:
    if (!v96)
      goto LABEL_233;
    v97 = (std::__shared_weak_count *)*((_QWORD *)&v158 + 1);
    *(_QWORD *)&v158 = p_dst;
    *((_QWORD *)&v158 + 1) = a5;
    if (v97)
    {
      v98 = (unint64_t *)&v97->__shared_owners_;
      do
        v99 = __ldaxr(v98);
      while (__stlxr(v99 - 1, v98));
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
    }
    goto LABEL_240;
  }
LABEL_226:
  if (!v96)
  {
    v157 = &off_24EC71C10;
    *(_QWORD *)&v158 = p_dst;
    *((_QWORD *)&v158 + 1) = a5;
    v159 = 1;
LABEL_240:
    v30 = &v160[1].__r_.__value_.__r.__words[2];
    goto LABEL_241;
  }
  v108 = (std::__shared_weak_count *)*((_QWORD *)&v158 + 1);
  if (*((_QWORD *)&v158 + 1))
  {
    v109 = (unint64_t *)(*((_QWORD *)&v158 + 1) + 8);
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v159 = 0;
LABEL_233:
  v30 = &v160[1].__r_.__value_.__r.__words[2];
  if (!v95)
  {
    if (a5)
    {
      v111 = (unint64_t *)(a5 + 8);
      do
        v112 = __ldaxr(v111);
      while (__stlxr(v112 - 1, v111));
      if (!v112)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)a5 + 16))(a5);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)a5);
      }
    }
  }
LABEL_241:
  v113 = (char *)v30 + *(_QWORD *)(*v30 - 24);
  if ((v113[32] & 5) != 0)
  {
    v190 = 0u;
    v191 = 0u;
    v188 = 0u;
    v189 = 0u;
    v186 = 0u;
    v187 = 0u;
    memset(v185, 0, sizeof(v185));
    v192[0] = -1;
  }
  else
  {
    (*(void (**)(_BYTE *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v113 + 5) + 32))(v185, *((_QWORD *)v113 + 5), 0, 1, 16);
  }
  if (v10 == 4 || v10 == 2)
  {
    pn.__r_.__value_.__r.__words[0] = 0x400000001;
    sub_224551A6C((uint64_t)&__p, (uint64_t *)&pn, (uint64_t)v30, 0, 0, 0);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC69D30;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_24EC69E80;
    if (v180)
    {
      pn.__r_.__value_.__s.__data_[0] = v177;
      sub_2231813E8(v176, (uint64_t)&pn, 1);
    }
    std::ostream::operator<<();
    ++v180;
    sub_22411CCEC((uint64_t)&__p, (uint64_t)v168);
    v122 = v179;
    if (v180)
    {
      pn.__r_.__value_.__s.__data_[0] = v177;
      sub_2231813E8(v176, (uint64_t)&pn, 1);
    }
    pn.__r_.__value_.__s.__data_[0] = v122;
    sub_2231813E8(v176, (uint64_t)&pn, 1);
    v123 = v180 + 1;
    v180 = 0;
    v181 = v123;
    pn.__r_.__value_.__s.__data_[0] = v178;
    sub_2231813E8(v176, (uint64_t)&pn, 1);
  }
  else
  {
    if (v10 != 1)
    {
      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/FileIOPrivate.cpp", 445, (uint64_t)"", 0, (uint64_t)"Unsupported format", 18, (void (*)(void **))sub_22457406C);
      abort();
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC79738;
    __p.__r_.__value_.__l.__size_ = 1;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_24EC79888;
    v114 = operator new();
    *(_QWORD *)v114 = v30;
    *(_QWORD *)(v114 + 8) = v30;
    *(_BYTE *)(v114 + 16) = 0;
    *(_BYTE *)(v114 + 40) = 0;
    *(_BYTE *)(v114 + 48) = 0;
    *(_BYTE *)(v114 + 72) = 0;
    *(_QWORD *)(v114 + 88) = 0;
    *(_QWORD *)(v114 + 96) = 0;
    *(_QWORD *)(v114 + 80) = 0;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC1FA80;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_24EC1FBD0;
    v176 = (_QWORD *)v114;
    pn.__r_.__value_.__s.__data_[0] = 2;
    std::ostream::write();
    sub_224555278((uint64_t)v176);
    sub_223BF6918((uint64_t)&__p, (uint64_t)v168);
    v115 = v176;
    v116 = *(_QWORD *)(v176[11] - 8);
    v117 = v176 + 6;
    sub_224554D6C(v176 + 6, v176[2] - v116 - 9);
    if (*v117)
      memmove((void *)(v115[3] + v116), (const void *)v115[7], *v117);
    v115[6] = 0;
    v118 = v115[10];
    v119 = v115[11] - 8;
    v115[11] = v119;
    if (v118 == v119)
    {
      std::ostream::write();
      if (*((_BYTE *)v115 + 40))
      {
        free((void *)v115[3]);
        *((_BYTE *)v115 + 40) = 0;
      }
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC79738;
    v120 = v176;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_24EC79888;
    v176 = 0;
    if (v120)
    {
      v121 = (void *)v120[10];
      if (v121)
      {
        v120[11] = v121;
        operator delete(v121);
      }
      if (*((_BYTE *)v120 + 72))
        free((void *)v120[7]);
      if (*((_BYTE *)v120 + 40))
        free((void *)v120[3]);
      MEMORY[0x227684CE8](v120, 0x1030C408C1A3048);
    }
  }
  v124 = (uint64_t)v160;
  if (v160)
  {
    v125 = v160[13].__r_.__value_.__r.__words[0];
    if (v125 <= 0x19000)
    {
      v129 = (char *)v30 + *(_QWORD *)(*v30 - 24);
      if ((v129[32] & 5) != 0)
      {
        v130 = -1;
      }
      else
      {
        (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v129 + 5)
                                                                                            + 32))(&__p, *((_QWORD *)v129 + 5), 0, 1, 16);
        v130 = v184[0];
        v125 = *(_QWORD *)(v124 + 312);
      }
      *(_QWORD *)(v124 + 312) = v130 + v125 - v192[0];
    }
    else
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      LOBYTE(v176) = 0;
      if (v159)
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC71C10;
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = v158;
        v158 = 0uLL;
        LOBYTE(v176) = 1;
      }
      sub_224112380((uint64_t)v160, (uint64_t)&__p);
      if ((_BYTE)v176)
      {
        v126 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
        if (__p.__r_.__value_.__r.__words[2])
        {
          v127 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
          do
            v128 = __ldaxr(v127);
          while (__stlxr(v128 - 1, v127));
          if (!v128)
          {
            ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
            std::__shared_weak_count::__release_weak(v126);
          }
        }
      }
    }
  }
  if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
    sub_223197FA4(&v150, __dst.__pn_.__r_.__value_.__l.__data_, __dst.__pn_.__r_.__value_.__l.__size_);
  else
    v150 = __dst;
  v151 = v51;
  if (v159)
  {
    v131 = (std::__shared_weak_count *)*((_QWORD *)&v158 + 1);
    if (*((_QWORD *)&v158 + 1))
    {
      v132 = (unint64_t *)(*((_QWORD *)&v158 + 1) + 8);
      do
        v133 = __ldaxr(v132);
      while (__stlxr(v133 - 1, v132));
      if (!v133)
      {
        ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
        std::__shared_weak_count::__release_weak(v131);
      }
    }
  }
  v134 = v161;
  if (v161)
  {
    v135 = (unint64_t *)&v161->__shared_owners_;
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  if (v164)
  {
    v137 = (std::__shared_weak_count *)*((_QWORD *)&v163 + 1);
    if (*((_QWORD *)&v163 + 1))
    {
      v138 = (unint64_t *)(*((_QWORD *)&v163 + 1) + 8);
      do
        v139 = __ldaxr(v138);
      while (__stlxr(v139 - 1, v138));
      if (!v139)
      {
        ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
        std::__shared_weak_count::__release_weak(v137);
      }
    }
  }
  *(_OWORD *)a1 = *(_OWORD *)&v150.__pn_.__r_.__value_.__l.__data_;
  v140 = v151;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)&v150.__pn_.__r_.__value_.__l + 2);
  *(_QWORD *)(a1 + 24) = v140;
  *(_BYTE *)(a1 + 32) = 1;
  v141 = (char *)v173;
  if (v173)
  {
    v142 = v174;
    v143 = v173;
    if (v174 != v173)
    {
      do
      {
        v144 = (std::__shared_weak_count *)*((_QWORD *)v142 - 1);
        if (v144)
        {
          v145 = (unint64_t *)&v144->__shared_owners_;
          do
            v146 = __ldaxr(v145);
          while (__stlxr(v146 - 1, v145));
          if (!v146)
          {
            ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
            std::__shared_weak_count::__release_weak(v144);
          }
        }
        v142 -= 16;
      }
      while (v142 != v141);
      v143 = v173;
    }
    v174 = v141;
    operator delete(v143);
  }
  if (v172 != -1)
    ((void (*)(_BYTE *, uint64_t *))off_24EC69F30[v172])(v185, &v171);
  v172 = -1;
  if ((v170 & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_314;
LABEL_318:
    operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(v154) < 0)
      goto LABEL_319;
LABEL_315:
    if ((v156 & 0x80000000) == 0)
      return;
LABEL_320:
    operator delete(v155[0]);
    return;
  }
  operator delete(v169);
  if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_318;
LABEL_314:
  if ((SHIBYTE(v154) & 0x80000000) == 0)
    goto LABEL_315;
LABEL_319:
  operator delete(v153[0]);
  if (v156 < 0)
    goto LABEL_320;
}

void sub_224117820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,uint64_t a37,char a38,int a39,__int16 a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,char a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  void *v64;

  __cxa_free_exception(v64);
  sub_2242BB4F8((uint64_t)&a64);
  if (a38)
    sub_2242BB4F8((uint64_t)&a35);
  sub_223167354((uint64_t)&a40);
  if (a45)
    sub_2242BB4F8((uint64_t)&a42);
  sub_223BF580C((uint64_t)&a53);
  if (a20 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a34 < 0)
    operator delete(a29);
  _Unwind_Resume(a1);
}

void sub_224117A6C(std::string *a1, uint64_t a2, _QWORD *a3, int a4, uint64_t a5)
{
  uint64_t v9;
  size_t v10;
  void *v11;
  unsigned __int8 v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  std::string *v21;
  std::string::size_type size;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  std::string::value_type v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void ***(*v32)(void ***);
  uint64_t v33;
  size_t *v34;
  uint64_t v35;
  uint64_t v36;
  void ***(*v37)(void ***);
  void *v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  unint64_t v44;
  unsigned int v45;
  char *v46;
  char *v47;
  char *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  std::string::size_type v54;
  _QWORD *v55;
  void **v56;
  uint64_t v57;
  char *v58;
  char *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::runtime_error *exception;
  std::logic_error *v68;
  __int128 v69;
  char v70;
  void *v71[2];
  unsigned __int8 v72;
  uint64_t v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  std::__fs::filesystem::path v76;
  std::string __dst;
  void ***(*v78)(void ***);
  std::string::value_type v79;
  std::string::value_type v80;
  std::string::value_type v81;
  unsigned __int8 *v82;
  void *v83;
  char *v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  char v88;
  char v89;
  char v90;
  const char *v91;
  uint64_t v92;
  unsigned int v93;
  void *__p[2];
  char v95;
  char v96;
  uint64_t v97;
  int v98;
  void *v99;
  char *v100;
  std::string pn;
  char v102;
  int v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  unsigned int v106;
  char *v107;
  char *v108;
  uint64_t v109;

  v109 = *MEMORY[0x24BDAC8D0];
  v9 = *a3;
  if (*(char *)(*a3 + 23) < 0)
  {
    v11 = *(void **)v9;
    v10 = *(_QWORD *)(v9 + 8);
  }
  else
  {
    v10 = *(unsigned __int8 *)(*a3 + 23);
    v11 = (void *)*a3;
  }
  v12 = v9 + 24;
  v13 = *(unsigned __int8 *)(v9 + 48);
  v14 = (v9 + 24) & 0xFFFFFFFFFFFFFF00;
  v15 = v12 & 0xF8;
  if (!v13)
    v15 = 0;
  sub_2241149B0((uint64_t)&__dst, a2, v11, v10, v15 | v14, v13);
  v17 = a3[2];
  v16 = (uint64_t)(a3 + 2);
  v18 = *(unsigned __int8 *)((*(uint64_t (**)(uint64_t))(v17 + 16))(v16) + 96);
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
  if (v18)
    v20 = (uint64_t *)(v19 + 80);
  else
    v20 = (uint64_t *)v19;
  sub_2241152CC(&pn, v16);
  if ((pn.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = &pn;
  else
    v21 = (std::string *)pn.__r_.__value_.__r.__words[0];
  if ((pn.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(pn.__r_.__value_.__r.__words[2]);
  else
    size = pn.__r_.__value_.__l.__size_;
  v23 = a4 - 1;
  switch(v23)
  {
    case 0:
      v24 = 4;
      v95 = 4;
      v25 = 1952539694;
      goto LABEL_20;
    case 1:
      v24 = 4;
      v95 = 4;
      v25 = 1987273518;
      goto LABEL_20;
    case 2:
      v24 = 5;
      v95 = 5;
      strcpy((char *)__p, ".json");
      goto LABEL_21;
    case 3:
      v24 = 4;
      v95 = 4;
      v25 = 1954051118;
LABEL_20:
      LODWORD(__p[0]) = v25;
      BYTE4(__p[0]) = 0;
LABEL_21:
      sub_224114EB8((uint64_t)&v76, (uint64_t)&__dst, v20, (uint64_t)v21, size, (uint64_t)__p, v24, a5);
      if (v95 < 0)
      {
        operator delete(__p[0]);
        if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_23:
          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_24;
          goto LABEL_33;
        }
      }
      else if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_23;
      }
      operator delete(pn.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_24;
LABEL_33:
      operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_24:
      sub_2242B0918(&v76, 0x30u, a5, &v73);
      if (!v74)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        if (SHIBYTE(v76.__pn_.__r_.__value_.__r.__words[2]) < 0)
          sub_223197FA4(&pn, v76.__pn_.__r_.__value_.__l.__data_, v76.__pn_.__r_.__value_.__l.__size_);
        else
          pn = v76.__pn_;
        sub_223799B10("Failed to write to file: ", &pn, &__dst);
        std::runtime_error::runtime_error(exception, &__dst);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      return;
    default:
      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/FileIOPrivate.cpp", 130, (uint64_t)"", 0, (uint64_t)"Unsupported format", 18, (void (*)(void **))sub_22457406C);
      abort();
  }
  v26 = sub_2240181B4(0);
  sub_224017D50((uint64_t)__p, v16, (uint64_t)v26);
  switch(v23)
  {
    case 0:
      v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 16))(v74);
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC79738;
      __dst.__r_.__value_.__l.__size_ = 1;
      __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_24EC79888;
      v31 = operator new();
      *(_QWORD *)v31 = v30;
      *(_QWORD *)(v31 + 8) = v30;
      *(_BYTE *)(v31 + 16) = 0;
      *(_BYTE *)(v31 + 40) = 0;
      *(_BYTE *)(v31 + 48) = 0;
      *(_BYTE *)(v31 + 72) = 0;
      *(_QWORD *)(v31 + 88) = 0;
      *(_QWORD *)(v31 + 96) = 0;
      *(_QWORD *)(v31 + 80) = 0;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC1FA80;
      __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_24EC1FBD0;
      v78 = (void ***(*)(void ***))v31;
      sub_22455AA60((uint64_t)&pn, v31 + 8);
      sub_224555278((uint64_t)v78);
      sub_223BF6918((uint64_t)&__dst, (uint64_t)__p);
      v32 = v78;
      v33 = *(_QWORD *)(*((_QWORD *)v78 + 11) - 8);
      v34 = (size_t *)((char *)v78 + 48);
      sub_224554D6C((uint64_t *)v78 + 6, *((_QWORD *)v78 + 2) - v33 - 9);
      if (*v34)
        memmove((void *)(*((_QWORD *)v32 + 3) + v33), *((const void **)v32 + 7), *v34);
      *((_QWORD *)v32 + 6) = 0;
      v35 = *((_QWORD *)v32 + 10);
      v36 = *((_QWORD *)v32 + 11) - 8;
      *((_QWORD *)v32 + 11) = v36;
      if (v35 == v36)
      {
        std::ostream::write();
        if (*((_BYTE *)v32 + 40))
        {
          free(*((void **)v32 + 3));
          *((_BYTE *)v32 + 40) = 0;
        }
      }
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC79738;
      v37 = v78;
      __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_24EC79888;
      v78 = 0;
      if (!v37)
        goto LABEL_108;
      v38 = (void *)*((_QWORD *)v37 + 10);
      if (v38)
      {
        *((_QWORD *)v37 + 11) = v38;
        operator delete(v38);
      }
      if (*((_BYTE *)v37 + 72))
        free(*((void **)v37 + 7));
      if (*((_BYTE *)v37 + 40))
        free(*((void **)v37 + 3));
      MEMORY[0x227684CE8](v37, 0x1030C408C1A3048);
      if (SHIBYTE(v76.__pn_.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_47;
      goto LABEL_109;
    case 1:
    case 3:
      v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 16))(v74);
      pn.__r_.__value_.__r.__words[0] = 0x400000001;
      sub_224551A6C((uint64_t)&__dst, (uint64_t *)&pn, v27, 0, 0, 0);
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC69D30;
      __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_24EC69E80;
      if (v82)
      {
        pn.__r_.__value_.__s.__data_[0] = v79;
        sub_2231813E8(v78, (uint64_t)&pn, 1);
      }
      std::ostream::operator<<();
      ++v82;
      sub_22411CCEC((uint64_t)&__dst, (uint64_t)__p);
      v28 = v81;
      if (v82)
      {
        pn.__r_.__value_.__s.__data_[0] = v79;
        sub_2231813E8(v78, (uint64_t)&pn, 1);
      }
      pn.__r_.__value_.__s.__data_[0] = v28;
      sub_2231813E8(v78, (uint64_t)&pn, 1);
      v29 = v82 + 1;
      v82 = 0;
      v83 = v29;
      pn.__r_.__value_.__s.__data_[0] = v80;
      sub_2231813E8(v78, (uint64_t)&pn, 1);
      goto LABEL_108;
    case 2:
      v69 = xmmword_2245D2460;
      v70 = 0;
      __dst.__r_.__value_.__l.__size_ = 0x300000001;
      v39 = operator new();
      *(_BYTE *)v39 = 0;
      *(_QWORD *)(v39 + 8) = 0;
      __dst.__r_.__value_.__r.__words[2] = v39;
      v78 = sub_224548CB0;
      v79 = 1;
      v88 = 0;
      v89 = 0;
      v90 = 0;
      v84 = 0;
      v85 = 0;
      LOBYTE(v86) = 0;
      v82 = (unsigned __int8 *)v39;
      v83 = 0;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC69FB0;
      sub_22454024C((uint64_t)&__dst);
      pn.__r_.__value_.__r.__words[0] = (std::string::size_type)"version";
      pn.__r_.__value_.__l.__size_ = 7;
      LODWORD(pn.__r_.__value_.__r.__words[2]) = 2;
      if (*v82 <= 1u)
      {
        v86 = "version";
        v87 = 7;
        if (!v88)
          v88 = 1;
      }
      sub_224542048((uint64_t)&__dst, &pn.__r_.__value_.__r.__words[2]);
      sub_22411CFF4((uint64_t)&pn, (uint64_t)__p);
      if (*v82 <= 1u)
      {
        v86 = "data_id";
        v87 = 7;
        if (!v88)
          v88 = 1;
      }
      sub_22454024C((uint64_t)&__dst);
      v91 = "version";
      v92 = 7;
      v93 = 2;
      if (*v82 <= 1u)
      {
        v86 = "version";
        v87 = 7;
        if (!v88)
          v88 = 1;
      }
      sub_224542048((uint64_t)&__dst, &v93);
      if (*v82 <= 1u)
      {
        v86 = "package_id";
        v87 = 10;
        if (!v88)
          v88 = 1;
      }
      sub_224542510((uint64_t)&__dst, (uint64_t)&pn.__r_.__value_.__l.__size_);
      if (*v82 <= 1u)
      {
        v86 = "type_id";
        v87 = 7;
        if (!v88)
          v88 = 1;
      }
      sub_224542048((uint64_t)&__dst, &v103);
      v82 = (unsigned __int8 *)*((_QWORD *)v84 - 1);
      v84 -= 8;
      if (v88)
        v88 = 0;
      if (v106 > 1)
        sub_22316DD70();
      v40 = v104;
      v41 = v105;
      if (v105)
      {
        p_shared_owners = (unint64_t *)&v105->__shared_owners_;
        do
          v43 = __ldxr(p_shared_owners);
        while (__stxr(v43 + 1, p_shared_owners));
        do
          v44 = __ldaxr(p_shared_owners);
        while (__stlxr(v44 - 1, p_shared_owners));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      if (*v82 <= 1u)
      {
        v86 = "data";
        v87 = 4;
        if (!v88)
          v88 = 1;
      }
      sub_22454024C((uint64_t)&__dst);
      v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 16))(v40);
      v91 = "version";
      v92 = 7;
      v93 = v45;
      if (*v82 <= 1u)
      {
        v86 = "version";
        v87 = 7;
        if (!v88)
          v88 = 1;
      }
      sub_224542048((uint64_t)&__dst, &v93);
      (*(void (**)(uint64_t, std::string *, _QWORD))(*(_QWORD *)v40 + 32))(v40, &__dst, v93);
      v82 = (unsigned __int8 *)*((_QWORD *)v84 - 1);
      v84 -= 8;
      if (v88)
        v88 = 0;
      v46 = v107;
      if (v107)
      {
        v47 = v108;
        v48 = v107;
        if (v108 != v107)
        {
          do
          {
            v49 = (std::__shared_weak_count *)*((_QWORD *)v47 - 1);
            if (v49)
            {
              v50 = (unint64_t *)&v49->__shared_owners_;
              do
                v51 = __ldaxr(v50);
              while (__stlxr(v51 - 1, v50));
              if (!v51)
              {
                ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                std::__shared_weak_count::__release_weak(v49);
              }
            }
            v47 -= 16;
          }
          while (v47 != v46);
          v48 = v107;
        }
        v108 = v46;
        operator delete(v48);
      }
      if (v106 != -1)
        ((void (*)(const char **, uint64_t *))off_24EC69F30[v106])(&v91, &v104);
      v106 = -1;
      if (v102 < 0)
        operator delete((void *)pn.__r_.__value_.__l.__size_);
      v82 = (unsigned __int8 *)*((_QWORD *)v84 - 1);
      v84 -= 8;
      if (v88)
        v88 = 0;
      sub_224533F5C((unsigned __int8 *)__dst.__r_.__value_.__r.__words[2], (uint64_t)&v69, v71);
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC78CE8;
      if (v83)
      {
        v84 = (char *)v83;
        operator delete(v83);
      }
      v54 = __dst.__r_.__value_.__r.__words[2];
      __dst.__r_.__value_.__r.__words[2] = 0;
      if (v54)
        ((void (*)(std::string::size_type, uint64_t, uint64_t))v78)(v54, v52, v53);
      v55 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 16))(v74);
      if ((v72 & 0x80u) == 0)
        v56 = v71;
      else
        v56 = (void **)v71[0];
      if ((v72 & 0x80u) == 0)
        v57 = v72;
      else
        v57 = (uint64_t)v71[1];
      sub_2231813E8(v55, (uint64_t)v56, v57);
      if ((char)v72 < 0)
      {
        operator delete(v71[0]);
        if ((SHIBYTE(v76.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_109;
LABEL_47:
        sub_223197FA4(&__dst, v76.__pn_.__r_.__value_.__l.__data_, v76.__pn_.__r_.__value_.__l.__size_);
        goto LABEL_110;
      }
LABEL_108:
      if (SHIBYTE(v76.__pn_.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_47;
LABEL_109:
      __dst = v76.__pn_;
LABEL_110:
      *a1 = __dst;
      a1[1].__r_.__value_.__r.__words[0] = 0;
      a1[1].__r_.__value_.__s.__data_[8] = 1;
      v58 = (char *)v99;
      if (v99)
      {
        v59 = v100;
        v60 = v99;
        if (v100 != v99)
        {
          do
          {
            v61 = (std::__shared_weak_count *)*((_QWORD *)v59 - 1);
            if (v61)
            {
              v62 = (unint64_t *)&v61->__shared_owners_;
              do
                v63 = __ldaxr(v62);
              while (__stlxr(v63 - 1, v62));
              if (!v63)
              {
                ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                std::__shared_weak_count::__release_weak(v61);
              }
            }
            v59 -= 16;
          }
          while (v59 != v58);
          v60 = v99;
        }
        v100 = v58;
        operator delete(v60);
      }
      if (v98 != -1)
        ((void (*)(std::string *, uint64_t *))off_24EC69F30[v98])(&__dst, &v97);
      v98 = -1;
      if (v96 < 0)
      {
        operator delete(__p[1]);
        v64 = v75;
        if (!v75)
          goto LABEL_130;
      }
      else
      {
        v64 = v75;
        if (!v75)
          goto LABEL_130;
      }
      v65 = (unint64_t *)&v64->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (v66)
      {
LABEL_130:
        if ((SHIBYTE(v76.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        goto LABEL_131;
      }
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
      if (SHIBYTE(v76.__pn_.__r_.__value_.__r.__words[2]) < 0)
LABEL_131:
        operator delete(v76.__pn_.__r_.__value_.__l.__data_);
      return;
    default:
      v68 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v68, "No method to save given format");
      v68->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_throw(v68, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
}

void sub_2241185C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  sub_223BF580C((uint64_t)&a47);
  sub_2242BB4F8((uint64_t)&a18);
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_22411876C(uint64_t a1@<X0>, void ***a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, std::string *a7@<X8>)
{
  void **v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  size_t v13;
  uint64_t v14;
  __int128 *v15;
  void **p_s1;
  uint64_t v17;
  _BOOL4 v18;
  void *v19;
  uint64_t v20;
  void ***v21;
  unint64_t v22;
  void *__s1;
  size_t __n;
  unsigned __int8 v25;
  int v26;
  uint64_t v27;
  void ***v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char v33;
  uint64_t v34;
  int v35;
  __int128 v36;

  v27 = a1;
  v28 = a2;
  v29 = a4;
  v30 = a5;
  v31 = a6;
  v32 = 0;
  v33 = 0;
  v34 = 0x400000004;
  v35 = 3;
  if ((a3 & 1) != 0)
  {
    a7->__r_.__value_.__s.__data_[0] = 0;
    a7[1].__r_.__value_.__s.__data_[8] = 0;
    return;
  }
  if ((a3 & 0x40) == 0)
    goto LABEL_25;
  v10 = a2[3];
  if (!v10)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_63;
    }
    v10 = a2[3];
  }
  (*((void (**)(void **__return_ptr))*v10 + 6))(&__s1);
  v11 = atomic_load((unsigned __int8 *)&qword_2557952C0);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_2557952C0))
  {
    v36 = xmmword_224693B20;
    sub_224103808((uint64_t *)&v36);
    __cxa_atexit((void (*)(void *))sub_224103AB4, &xmmword_255795120, &dword_22314D000);
    __cxa_guard_release(&qword_2557952C0);
  }
  v12 = v25;
  if ((v25 & 0x80u) == 0)
    v13 = v25;
  else
    v13 = __n;
  v14 = *((_QWORD *)&xmmword_2557951E0 + 1);
  if (qword_2557951F0 >= 0)
    v14 = HIBYTE(qword_2557951F0);
  if (v13 != v14)
    goto LABEL_23;
  if (qword_2557951F0 >= 0)
    v15 = &xmmword_2557951E0;
  else
    v15 = (__int128 *)xmmword_2557951E0;
  if ((v25 & 0x80) != 0)
  {
    v19 = __s1;
    if (memcmp(__s1, v15, __n))
    {
      operator delete(v19);
      if ((a3 & 4) == 0)
        goto LABEL_33;
      goto LABEL_26;
    }
  }
  else if (v25)
  {
    p_s1 = &__s1;
    v17 = v25;
    while (*(unsigned __int8 *)p_s1 == *(unsigned __int8 *)v15)
    {
      p_s1 = (void **)((char *)p_s1 + 1);
      v15 = (__int128 *)((char *)v15 + 1);
      if (!--v17)
        goto LABEL_44;
    }
LABEL_23:
    v18 = 0;
    if ((v25 & 0x80) == 0)
      goto LABEL_24;
    goto LABEL_45;
  }
LABEL_44:
  v18 = v26 == dword_2557951F8;
  if ((v12 & 0x80) != 0)
  {
LABEL_45:
    operator delete(__s1);
    if (v18)
      goto LABEL_46;
LABEL_25:
    if ((a3 & 4) == 0)
      goto LABEL_33;
LABEL_26:
    sub_22411AFC0((uint64_t)&v27);
    if (v33)
    {
      sub_22411AFC0((uint64_t)&v27);
      if ((_DWORD)v34 != 6)
      {
        if ((_DWORD)v34 == 5)
        {
          sub_224118DA8(a7, v27, v28, a3, v29);
          return;
        }
        goto LABEL_62;
      }
      sub_22411A3BC((uint64_t)a7, v27, v28, a3, v29);
      return;
    }
LABEL_33:
    if ((a3 & 0x38) != 0)
    {
      if ((a3 & 0x10) != 0)
      {
        if ((a3 & 0x100) != 0)
          sub_224117A6C(a7, v27, v28, 2, v29);
        else
          sub_2241164A4((uint64_t)a7, v27, v28, 2, v29, v30, v31);
        return;
      }
      if ((a3 & 0x20) != 0)
      {
        sub_224117A6C(a7, v27, v28, 3, v29);
        return;
      }
      sub_22411AFC0((uint64_t)&v27);
      if (BYTE1(v32))
      {
        v20 = v27;
        v21 = v28;
        v22 = v29;
        if ((a3 & 0x100) == 0)
        {
LABEL_38:
          sub_2241164A4((uint64_t)a7, v20, v21, SHIDWORD(v34), v22, v30, v31);
          return;
        }
LABEL_54:
        sub_224117A6C(a7, v20, v21, v35, v22);
        return;
      }
      sub_22411AFC0((uint64_t)&v27);
      if (BYTE2(v32))
      {
        v20 = v27;
        v21 = v28;
        v22 = v29;
        if ((a3 & 0x80) != 0)
          goto LABEL_38;
        goto LABEL_54;
      }
      v20 = v27;
      v21 = v28;
      v22 = v29;
      if ((a3 & 2) == 0)
      {
        if ((a3 & 0x80) != 0)
          goto LABEL_38;
        goto LABEL_54;
      }
    }
    else
    {
      sub_22411AFC0((uint64_t)&v27);
      v20 = v27;
      v21 = v28;
      v22 = v29;
      if (BYTE1(v32))
      {
        if ((a3 & 0x100) != 0)
        {
LABEL_59:
          sub_224117A6C(a7, v20, v21, 1, v22);
          return;
        }
LABEL_41:
        sub_2241164A4((uint64_t)a7, v20, v21, 1, v22, v30, v31);
        return;
      }
    }
    if ((a3 & 0x80) == 0)
      goto LABEL_59;
    goto LABEL_41;
  }
LABEL_24:
  if (!v18)
    goto LABEL_25;
LABEL_46:
  sub_22411AFC0((uint64_t)&v27);
  if ((_DWORD)v34 == 6)
  {
    sub_22411A3BC((uint64_t)a7, v27, v28, 0x40uLL, v29);
  }
  else
  {
    if ((_DWORD)v34 != 5)
    {
LABEL_62:
      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/FileIOPrivate.cpp", 593, (uint64_t)"", 0, (uint64_t)"No known common format", 22, (void (*)(void **))sub_22457406C);
LABEL_63:
      abort();
    }
    sub_224118DA8(a7, v27, v28, 0x40uLL, v29);
  }
}

void sub_224118BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_guard_abort(&qword_2557952C0);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_224118C14(uint64_t a1@<X0>, _QWORD *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, std::string *a7@<X8>)
{
  std::string *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  int v23;

  v15 = a1;
  v16 = a2;
  v17 = a4;
  v18 = a5;
  v19 = a6;
  v20 = 0;
  v21 = 0;
  v22 = 0x400000004;
  v23 = 3;
  if ((a3 & 2) != 0)
  {
LABEL_9:
    v12 = a7;
    v13 = 1;
    v14 = a4;
LABEL_10:
    sub_224117A6C(v12, a1, a2, v13, v14);
    return;
  }
  if ((a3 & 8) != 0)
    goto LABEL_11;
  if ((a3 & 0x10) != 0)
  {
    v12 = a7;
    v13 = 2;
    v14 = a4;
    goto LABEL_10;
  }
  if ((a3 & 0x20) != 0)
  {
LABEL_11:
    v12 = a7;
    v13 = 3;
    v14 = a4;
    goto LABEL_10;
  }
  if ((a3 & 0x40) == 0)
  {
    if ((a3 & 4) == 0)
    {
      if ((a3 & 1) == 0)
      {
        sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/FileIOPrivate.cpp", 768, (uint64_t)"", 0, (uint64_t)"Flag not supported for ExportLargeData", 38, (void (*)(void **))sub_22457406C);
        abort();
      }
      a7->__r_.__value_.__s.__data_[0] = 0;
      a7[1].__r_.__value_.__s.__data_[8] = 0;
      return;
    }
    goto LABEL_9;
  }
  sub_22411AFC0((uint64_t)&v15);
  if ((_DWORD)v22 == 6)
  {
    sub_22411A3BC((uint64_t)a7, v15, v16, a3, v17);
  }
  else
  {
    if ((_DWORD)v22 != 5)
    {
      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/FileIOPrivate.cpp", 593, (uint64_t)"", 0, (uint64_t)"No known common format", 22, (void (*)(void **))sub_22457406C);
      abort();
    }
    sub_224118DA8(a7, v15, v16, a3, v17);
  }
}

void sub_224118DA8(std::string *a1, uint64_t a2, _QWORD *a3, unint64_t a4, uint64_t a5)
{
  uint64_t (***v10)();
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  char v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  const char *v21;
  int v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  __int16 v31;
  unint64_t v32;
  void *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _BYTE *v39;
  int v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *exception;
  uint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  std::__fs::filesystem::path v50;
  std::string::size_type v51;
  std::__fs::filesystem::path v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  char v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  void *v62[2];
  uint64_t v63;
  char v64;
  char v65;
  char v66;
  void *v67;
  char v68;
  __int128 v69;
  __int128 v70;
  char v71;
  char v72;
  void *v73;
  char v74;
  void *v75;
  char v76;
  char v77;
  char v78;
  __int128 v79;
  void *__p[2];
  int v81;
  char v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  char v89;
  char v90;
  __int128 v91;
  void *v92;
  char v93;
  char v94;
  void *v95;
  char v96;
  void *v97;
  char v98;
  char v99;
  char v100;
  char v101;
  int v102;
  _QWORD v103[2];

  v10 = (uint64_t (***)())a3[3];
  v11 = (std::__shared_weak_count *)a3[4];
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  if (v10 && *v10 == &off_24EC6A528)
  {
    v14 = 1;
    if (!v11)
      goto LABEL_13;
  }
  else
  {
    v14 = 0;
    if (!v11)
      goto LABEL_13;
  }
  v15 = (unint64_t *)&v11->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_13:
  if ((v14 & 1) == 0)
  {
    v53 = 0;
    v54 = 0;
    goto LABEL_104;
  }
  v18 = a3[3];
  v17 = (std::__shared_weak_count *)a3[4];
  if (v17)
  {
    v19 = (unint64_t *)&v17->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v53 = v18;
  v54 = v17;
  if (!v18)
  {
LABEL_104:
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/FileIOPrivate.cpp", 808, (uint64_t)"image_data_ptr", 14, (uint64_t)"ExportImageData requires data to be ImageData", 45, (void (*)(void **))sub_22457406C);
    abort();
  }
  v21 = ".png";
  v22 = 3;
  v23 = 4;
  switch(*(_DWORD *)(v18 + 56))
  {
    case 1:
    case 2:
    case 0x15:
    case 0x16:
    case 0x1E:
      goto LABEL_21;
    case 3:
    case 4:
      v21 = ".tiff";
      v22 = 5;
      v23 = 5;
      goto LABEL_21;
    case 0x17:
    case 0x18:
    case 0x1D:
    case 0x1F:
    case 0x20:
      v21 = ".tiff";
      v23 = 5;
      v22 = 5;
LABEL_21:
      sub_2241194C0(&v50, a2, a3, (uint64_t)v21, v23, a4, a5);
      sub_2242B0918(&v52, 0x30u, a5, &v47);
      v24 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 16))(v48);
      *(_QWORD *)&v79 = &off_24EC1F8C8;
      v25 = *(_QWORD *)(v18 + 16);
      v26 = *(std::__shared_weak_count **)(v18 + 24);
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
        v29 = *(_QWORD *)(v18 + 48);
        v30 = *(_DWORD *)(v18 + 56);
        v31 = *(_WORD *)(v18 + 60);
        do
          v32 = __ldxr(v27);
        while (__stxr(v32 + 1, v27));
      }
      else
      {
        v29 = *(_QWORD *)(v18 + 48);
        v30 = *(_DWORD *)(v18 + 56);
        v31 = *(_WORD *)(v18 + 60);
      }
      *((_QWORD *)&v79 + 1) = v25;
      __p[0] = v26;
      v33 = *(void **)(v18 + 32);
      v81 = *(_DWORD *)(v18 + 40);
      __p[1] = v33;
      v83 = v29;
      LODWORD(v84) = v30;
      WORD2(v84) = v31;
      if (v26)
      {
        v34 = (unint64_t *)&v26->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      sub_224160FB8(&v79, v24, v22, (uint64_t)&v91);
      v36 = (std::__shared_weak_count *)__p[0];
      if (!__p[0])
        goto LABEL_37;
      v37 = (unint64_t *)((char *)__p[0] + 8);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
        if (v101)
          goto LABEL_38;
      }
      else
      {
LABEL_37:
        if (v101)
        {
LABEL_38:
          v66 = 1;
          goto LABEL_73;
        }
      }
      v103[0] = "save";
      v103[1] = 4;
      v102 = v22;
      sub_224160DE4("Failure during ", (uint64_t)v103, (uint64_t)" from stream with file format ", &v102, (uint64_t)": ");
      if (v101)
      {
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24EC1FCC0;
        __cxa_throw(exception, (struct type_info *)&unk_24EC1FC98, (void (*)(void *))std::exception::~exception);
      }
      sub_22456BA60(&v67, &v91, (uint64_t)&v69);
      v79 = v69;
      v39 = sub_22319FFBC(__p, &v70);
      v55 = v79;
      LOBYTE(v56) = 0;
      v65 = 0;
      if (!v90)
      {
        v66 = 0;
        if (!v78)
          goto LABEL_60;
        goto LABEL_52;
      }
      v58 = 0;
      v40 = v83;
      if ((_BYTE)v83)
      {
        v56 = *(_OWORD *)v39;
        v57 = *((_QWORD *)v39 + 2);
        *((_QWORD *)v39 + 1) = 0;
        *((_QWORD *)v39 + 2) = 0;
        *(_QWORD *)v39 = 0;
        v58 = 1;
      }
      LOBYTE(v59) = 0;
      v64 = 0;
      if (v89)
      {
        v60 = v85;
        v59 = v84;
        v84 = 0uLL;
        v61 = v86;
        *(_OWORD *)v62 = v87;
        v63 = v88;
        v85 = 0;
        v87 = 0uLL;
        v88 = 0;
        v64 = 1;
      }
      v65 = 1;
      v66 = 0;
      if (v40 && v82 < 0)
        operator delete(__p[0]);
      if (v78)
      {
LABEL_52:
        if (v77)
        {
          if (v76 < 0)
            operator delete(v75);
          if (v74 < 0)
            operator delete(v73);
        }
        if (v72 && v71 < 0)
          operator delete((void *)v70);
      }
LABEL_60:
      if (v68 < 0)
      {
        operator delete(v67);
        if (v101)
          goto LABEL_73;
      }
      else if (v101)
      {
        goto LABEL_73;
      }
      if (v100)
      {
        if (v99)
        {
          if (v98 < 0)
            operator delete(v97);
          if (v96 < 0)
            operator delete(v95);
        }
        if (v94 && v93 < 0)
          operator delete(v92);
      }
LABEL_73:
      sub_22319FC44((uint64_t)&v55);
      if (!v66 && v65)
      {
        if (v64)
        {
          if (SHIBYTE(v63) < 0)
            operator delete(v62[0]);
          if (SHIBYTE(v60) < 0)
            operator delete((void *)v59);
        }
        if (v58 && SHIBYTE(v57) < 0)
          operator delete((void *)v56);
      }
      if (SHIBYTE(v50.__pn_.__r_.__value_.__r.__words[2]) < 0)
        sub_223197FA4(a1, v50.__pn_.__r_.__value_.__l.__data_, v50.__pn_.__r_.__value_.__l.__size_);
      else
        *(std::__fs::filesystem::path *)a1 = v50;
      a1[1].__r_.__value_.__r.__words[0] = v51;
      a1[1].__r_.__value_.__s.__data_[8] = 1;
      v41 = v49;
      if (!v49)
        goto LABEL_90;
      v42 = (unint64_t *)&v49->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (v43)
      {
LABEL_90:
        if ((SHIBYTE(v52.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_91;
LABEL_100:
        operator delete(v52.__pn_.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v50.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_92;
LABEL_101:
        operator delete(v50.__pn_.__r_.__value_.__l.__data_);
        goto LABEL_92;
      }
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
      if (SHIBYTE(v52.__pn_.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_100;
LABEL_91:
      if (SHIBYTE(v50.__pn_.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_101;
LABEL_92:
      v17 = v54;
LABEL_93:
      if (v17)
      {
        v44 = (unint64_t *)&v17->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      return;
    default:
      sub_224118C14(a2, a3, a4, a5, 0, 0, a1);
      goto LABEL_93;
  }
}

void sub_224119400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_224119414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  uint64_t v58;

  sub_22319723C((uint64_t)&a43);
  if (a42 < 0)
    operator delete(__p);
  sub_223197D38(v58 - 232);
  sub_2242BB4F8((uint64_t)&a9);
  sub_223662A94((uint64_t)&a12);
  sub_223167354((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_2241194AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2241194C0(std::__fs::filesystem::path *a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  int v12;
  uint64_t v13;
  size_t v14;
  void *v15;
  unsigned __int8 v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  size_t size;
  unint64_t v23;
  uint64_t v24;
  std::string *p_dst;
  uint64_t v26;
  uint64_t v27;
  std::string *v28;
  void **v29;
  std::string::size_type v30;
  std::string *v31;
  std::string::size_type v32;
  char v33;
  int v34;
  uint64_t v35;
  uint64_t *v36;
  std::string *v37;
  std::string::size_type v38;
  std::__fs::filesystem::path::__string_view v39;
  std::__fs::filesystem::path *p_p;
  std::basic_string_view<_CharT, _Traits>::size_type v41;
  std::basic_string_view<_CharT, _Traits>::size_type v42;
  __int128 v43;
  int v44;
  uint64_t v45;
  uint64_t *v46;
  std::__shared_weak_count *v47;
  _QWORD *v48;
  _QWORD *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  std::string::value_type v55;
  void **v56;
  void **v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  size_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  size_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  std::string::value_type v71;
  uint64_t v72;
  unint64_t *p_shared_owners;
  unint64_t v74;
  std::__fs::filesystem::path *v75;
  std::string::value_type *v76;
  void **v77;
  void **v78;
  void *v79;
  std::__fs::filesystem::path *v80;
  int v81;
  std::__fs::filesystem::path v82;
  uint64_t v83;
  std::__fs::filesystem::path v84;
  std::__fs::filesystem::path v85;
  std::string v86;
  std::__fs::filesystem::path v87;
  void *v88[2];
  char v89;
  uint64_t *v90[3];
  _QWORD *v91;
  std::string::value_type v92;
  std::string::value_type v93;
  std::string::value_type v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t (**v99)();
  __int128 v100;
  char v101;
  std::string::value_type v102;
  std::string __dst;
  unint64_t v104;
  _BYTE v105[24];
  void *v106;
  char v107;
  char v108;
  void *v109;
  char v110;
  char v111;
  void *v112;
  char v113;
  char v114;
  void *v115;
  void **v116;
  char v117;
  _OWORD v118[8];
  uint64_t v119;
  std::__fs::filesystem::path __p;
  unint64_t v121;
  _BYTE v122[24];
  void *v123;
  char v124;
  char v125;
  void *v126;
  uint64_t v127;
  char v128;
  void *v129;
  char v130;
  char v131;
  void *v132;
  void **v133;
  char v134;
  uint64_t v135;

  v135 = *MEMORY[0x24BDAC8D0];
  if (a6 <= 0x10 && ((1 << a6) & 0x14100) != 0)
  {
    v81 = 2;
    v12 = 1987273518;
  }
  else
  {
    v81 = 1;
    v12 = 1952539694;
  }
  v89 = 4;
  LODWORD(v88[0]) = v12;
  BYTE4(v88[0]) = 0;
  v13 = *a3;
  if (*(char *)(*a3 + 23) < 0)
  {
    v15 = *(void **)v13;
    v14 = *(_QWORD *)(v13 + 8);
  }
  else
  {
    v14 = *(unsigned __int8 *)(*a3 + 23);
    v15 = (void *)*a3;
  }
  v16 = v13 + 24;
  v17 = *(unsigned __int8 *)(v13 + 48);
  v18 = (v13 + 24) & 0xFFFFFFFFFFFFFF00;
  v19 = v16 & 0xF8;
  if (!v17)
    v19 = 0;
  sub_2241149B0((uint64_t)&v87, a2, v15, v14, v19 | v18, v17);
  v80 = a1;
  v20 = a3 + 2;
  sub_2241152CC(&v86, (uint64_t)(a3 + 2));
  v21 = SHIBYTE(v86.__r_.__value_.__r.__words[2]);
  if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v86.__r_.__value_.__r.__words[2]);
  else
    size = v86.__r_.__value_.__l.__size_;
  v23 = size + 5;
  if (size + 5 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v24 = a5;
  if (v23 >= 0x17)
  {
    v26 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17)
      v26 = v23 | 7;
    v27 = v26 + 1;
    p_dst = (std::string *)operator new(v26 + 1);
    __dst.__r_.__value_.__l.__size_ = size + 5;
    __dst.__r_.__value_.__r.__words[2] = v27 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = size + 5;
    if (!size)
      goto LABEL_24;
  }
  if (v21 >= 0)
    v28 = &v86;
  else
    v28 = (std::string *)v86.__r_.__value_.__r.__words[0];
  memmove(p_dst, v28, size);
LABEL_24:
  strcpy((char *)p_dst + size, "_info");
  if (v89 >= 0)
    v29 = v88;
  else
    v29 = (void **)v88[0];
  if (v89 >= 0)
    v30 = v89;
  else
    v30 = (std::string::size_type)v88[1];
  v31 = std::string::append(&__dst, (const std::string::value_type *)v29, v30);
  v32 = v31->__r_.__value_.__r.__words[0];
  *(_QWORD *)&v118[0] = v31->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v118 + 7) = *(std::string::size_type *)((char *)&v31->__r_.__value_.__r.__words[1] + 7);
  v33 = HIBYTE(v31->__r_.__value_.__r.__words[2]);
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  *(std::string::size_type *)((char *)&__p.__pn_.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v118 + 7);
  __p.__pn_.__r_.__value_.__r.__words[0] = v32;
  __p.__pn_.__r_.__value_.__l.__size_ = *(_QWORD *)&v118[0];
  *((_BYTE *)&__p.__pn_.__r_.__value_.__s + 23) = v33;
  if (SHIBYTE(v87.__pn_.__r_.__value_.__r.__words[2]) < 0)
    sub_223197FA4(&v85, v87.__pn_.__r_.__value_.__l.__data_, v87.__pn_.__r_.__value_.__l.__size_);
  else
    v85 = v87;
  sub_22319C30C((uint64_t)&v85, &__p);
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_35;
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_35;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_35:
  v34 = *(unsigned __int8 *)((*(uint64_t (**)(_QWORD *))(*v20 + 16))(a3 + 2) + 96);
  v35 = (*(uint64_t (**)(_QWORD *))(*v20 + 16))(a3 + 2);
  if (v34)
    v36 = (uint64_t *)(v35 + 80);
  else
    v36 = (uint64_t *)v35;
  if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v37 = &v86;
  else
    v37 = (std::string *)v86.__r_.__value_.__r.__words[0];
  if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v38 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
  else
    v38 = v86.__r_.__value_.__l.__size_;
  sub_224114EB8((uint64_t)&v84, (uint64_t)&v87, v36, (uint64_t)v37, v38, a4, v24, a7);
  v39 = std::__fs::filesystem::path::__filename(&v84);
  if (v39.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v39.__size_ >= 0x17)
  {
    v41 = (v39.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v39.__size_ | 7) != 0x17)
      v41 = v39.__size_ | 7;
    v42 = v41 + 1;
    p_p = (std::__fs::filesystem::path *)operator new(v41 + 1);
    __p.__pn_.__r_.__value_.__r.__words[2] = v42 | 0x8000000000000000;
    __p.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    __p.__pn_.__r_.__value_.__l.__size_ = v39.__size_;
    goto LABEL_51;
  }
  *((_BYTE *)&__p.__pn_.__r_.__value_.__s + 23) = v39.__size_;
  p_p = &__p;
  if (v39.__size_)
LABEL_51:
    memmove(p_p, v39.__data_, v39.__size_);
  p_p->__pn_.__r_.__value_.__s.__data_[v39.__size_] = 0;
  v43 = *(_OWORD *)&__p.__pn_.__r_.__value_.__l.__data_;
  LODWORD(v118[0]) = __p.__pn_.__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v118 + 3) = *(_DWORD *)((char *)&__p.__pn_.__r_.__value_.__r.__words[2] + 3);
  v44 = SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]);
  v45 = a3[3];
  if (!v45)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v45 = a3[3];
  }
  v46 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 16))(v45);
  if (v44 < 0)
  {
    sub_223197FA4(&__dst, (void *)v43, *((unint64_t *)&v43 + 1));
  }
  else
  {
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v43;
    LODWORD(__dst.__r_.__value_.__r.__words[2]) = v118[0];
    *(_DWORD *)((char *)&__dst.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v118 + 3);
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v44;
  }
  v104 = 0;
  sub_223B87C9C((uint64_t)v105, v46);
  if (v44 < 0)
    operator delete((void *)v43);
  v97 = 0;
  v98 = 0;
  sub_2242B0918(&v85, 0x11u, a7, &__p);
  v47 = (std::__shared_weak_count *)__p.__pn_.__r_.__value_.__r.__words[2];
  v99 = &off_24EC71C10;
  v100 = *(_OWORD *)&__p.__pn_.__r_.__value_.__r.__words[1];
  v101 = 1;
  v48 = (_QWORD *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)__p.__pn_.__r_.__value_.__l.__size_
                                                                    + 16))(__p.__pn_.__r_.__value_.__l.__size_);
  v49 = v48;
  v50 = (char *)v48 + *(_QWORD *)(*v48 - 24);
  if ((v50[32] & 5) != 0)
  {
    v51 = -1;
    v52 = (char *)v48 + *(_QWORD *)(*v48 - 24);
    if ((v52[32] & 5) != 0)
    {
LABEL_64:
      memset(v118, 0, sizeof(v118));
      v119 = -1;
      goto LABEL_67;
    }
  }
  else
  {
    (*(void (**)(std::__fs::filesystem::path *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v50 + 5) + 32))(&__p, *((_QWORD *)v50 + 5), 0, 1, 16);
    v51 = v127;
    v52 = (char *)v49 + *(_QWORD *)(*v49 - 24);
    if ((v52[32] & 5) != 0)
      goto LABEL_64;
  }
  (*(void (**)(_OWORD *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v52 + 5) + 32))(v118, *((_QWORD *)v52 + 5), 0, 1, 16);
LABEL_67:
  if (v81 == 2)
  {
    __p.__pn_.__r_.__value_.__r.__words[0] = 0x400000001;
    sub_224551A6C((uint64_t)v90, (uint64_t *)&__p, (uint64_t)v49, 0, 0, 0);
    v90[0] = (uint64_t *)&off_24EC69D30;
    v90[2] = (uint64_t *)&unk_24EC69E80;
    if (v95)
    {
      __p.__pn_.__r_.__value_.__s.__data_[0] = v92;
      sub_2231813E8(v91, (uint64_t)&__p, 1);
    }
    std::ostream::operator<<();
    ++v95;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      sub_223197FA4(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    else
      __p.__pn_ = __dst;
    v121 = v104;
    sub_223B8DACC((uint64_t)v122, (uint64_t)v105);
    sub_22454F620((uint64_t)v90, (uint64_t)&__p);
    if (v95)
    {
      v102 = v92;
      sub_2231813E8(v91, (uint64_t)&v102, 1);
    }
    std::ostream::operator<<();
    if (!__CFADD__(v95++, 1))
    {
      v102 = v92;
      sub_2231813E8(v91, (uint64_t)&v102, 1);
    }
    std::ostream::operator<<();
    ++v95;
    sub_223B9FCC8((uint64_t)v90, (uint64_t)v122, 6u);
    v55 = v94;
    if (v95)
    {
      v102 = v92;
      sub_2231813E8(v91, (uint64_t)&v102, 1);
    }
    v102 = v55;
    sub_2231813E8(v91, (uint64_t)&v102, 1);
    ++v95;
    if (v134)
    {
      v56 = (void **)v132;
      if (v132)
      {
        v57 = v133;
        v58 = v132;
        if (v133 != v132)
        {
          do
          {
            if (*((char *)v57 - 1) < 0)
              operator delete(*(v57 - 3));
            v57 -= 3;
          }
          while (v57 != v56);
          v58 = v132;
        }
        v133 = v56;
        operator delete(v58);
      }
    }
    if (v131 && v130 < 0)
      operator delete(v129);
    if (v128 && SHIBYTE(v127) < 0)
      operator delete(v126);
    if (v125 && v124 < 0)
      operator delete(v123);
    if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__pn_.__r_.__value_.__l.__data_);
      v71 = v94;
      if (!v95)
      {
LABEL_129:
        __p.__pn_.__r_.__value_.__s.__data_[0] = v71;
        sub_2231813E8(v91, (uint64_t)&__p, 1);
        v72 = v95 + 1;
        v95 = 0;
        v96 = v72;
        __p.__pn_.__r_.__value_.__s.__data_[0] = v93;
        sub_2231813E8(v91, (uint64_t)&__p, 1);
        goto LABEL_130;
      }
    }
    else
    {
      v71 = v94;
      if (!v95)
        goto LABEL_129;
    }
    __p.__pn_.__r_.__value_.__s.__data_[0] = v92;
    sub_2231813E8(v91, (uint64_t)&__p, 1);
    goto LABEL_129;
  }
  __p.__pn_.__r_.__value_.__l.__size_ = 1;
  __p.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC79738;
  __p.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_24EC79888;
  v53 = operator new();
  *(_QWORD *)v53 = v49;
  *(_QWORD *)(v53 + 8) = v49;
  *(_BYTE *)(v53 + 16) = 0;
  *(_BYTE *)(v53 + 40) = 0;
  *(_BYTE *)(v53 + 48) = 0;
  *(_BYTE *)(v53 + 72) = 0;
  *(_QWORD *)(v53 + 88) = 0;
  *(_QWORD *)(v53 + 96) = 0;
  *(_QWORD *)(v53 + 80) = 0;
  v121 = v53;
  __p.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC1FA80;
  __p.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_24EC1FBD0;
  LOBYTE(v90[0]) = 3;
  std::ostream::write();
  sub_224555278(v121);
  if (*(_BYTE *)(v121 + 40))
  {
    v90[0] = (uint64_t *)(v121 + 16);
    sub_22455B8BC((uint64_t)&v102, v90, (const void **)&__dst.__r_.__value_.__l.__data_);
  }
  else
  {
    sub_22455BCF4((uint64_t)v90, v121 + 8, (uint64_t)&__dst);
  }
  if (*(_BYTE *)(v121 + 40))
  {
    v90[0] = (uint64_t *)(v121 + 16);
    sub_22455B1CC(v90, v104);
  }
  else
  {
    sub_22455B4D4();
  }
  if (*(_BYTE *)(v121 + 40))
  {
    v90[0] = (uint64_t *)(v121 + 16);
    sub_22455A7EC(v90, 6u);
  }
  else
  {
    LOBYTE(v90[0]) = 6;
    std::ostream::write();
  }
  sub_224555278(v121);
  sub_223B97214((uint64_t)&__p, (uint64_t)v105, 6u);
  v59 = v121;
  v60 = *(_QWORD *)(*(_QWORD *)(v121 + 88) - 8);
  v61 = (size_t *)(v121 + 48);
  sub_224554D6C((uint64_t *)(v121 + 48), *(_QWORD *)(v121 + 16) - v60 - 9);
  if (*v61)
    memmove((void *)(*(_QWORD *)(v59 + 24) + v60), *(const void **)(v59 + 56), *v61);
  *(_QWORD *)(v59 + 48) = 0;
  v62 = *(_QWORD *)(v59 + 80);
  v63 = *(_QWORD *)(v59 + 88) - 8;
  *(_QWORD *)(v59 + 88) = v63;
  if (v62 == v63)
  {
    std::ostream::write();
    if (*(_BYTE *)(v59 + 40))
    {
      free(*(void **)(v59 + 24));
      *(_BYTE *)(v59 + 40) = 0;
    }
  }
  v64 = v121;
  v65 = *(_QWORD *)(*(_QWORD *)(v121 + 88) - 8);
  v66 = (size_t *)(v121 + 48);
  sub_224554D6C((uint64_t *)(v121 + 48), *(_QWORD *)(v121 + 16) - v65 - 9);
  if (*v66)
    memmove((void *)(*(_QWORD *)(v64 + 24) + v65), *(const void **)(v64 + 56), *v66);
  *(_QWORD *)(v64 + 48) = 0;
  v67 = *(_QWORD *)(v64 + 80);
  v68 = *(_QWORD *)(v64 + 88) - 8;
  *(_QWORD *)(v64 + 88) = v68;
  if (v67 == v68)
  {
    std::ostream::write();
    if (*(_BYTE *)(v64 + 40))
    {
      free(*(void **)(v64 + 24));
      *(_BYTE *)(v64 + 40) = 0;
    }
  }
  __p.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC79738;
  __p.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_24EC79888;
  v69 = v121;
  v121 = 0;
  if (v69)
  {
    v70 = *(void **)(v69 + 80);
    if (v70)
    {
      *(_QWORD *)(v69 + 88) = v70;
      operator delete(v70);
    }
    if (*(_BYTE *)(v69 + 72))
      free(*(void **)(v69 + 56));
    if (*(_BYTE *)(v69 + 40))
      free(*(void **)(v69 + 24));
    MEMORY[0x227684CE8](v69, 0x1030C408C1A3048);
  }
LABEL_130:
  if (SHIBYTE(v85.__pn_.__r_.__value_.__r.__words[2]) < 0)
    sub_223197FA4(&v82, v85.__pn_.__r_.__value_.__l.__data_, v85.__pn_.__r_.__value_.__l.__size_);
  else
    v82 = v85;
  v83 = v51 & ~(v51 >> 63);
  if (!v47)
    goto LABEL_137;
  p_shared_owners = (unint64_t *)&v47->__shared_owners_;
  do
    v74 = __ldaxr(p_shared_owners);
  while (__stlxr(v74 - 1, p_shared_owners));
  if (!v74)
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
    if ((SHIBYTE(v82.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_138;
  }
  else
  {
LABEL_137:
    if ((SHIBYTE(v82.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_138:
      v75 = v80;
      *v80 = v82;
      goto LABEL_141;
    }
  }
  v75 = v80;
  sub_223197FA4(v80, v82.__pn_.__r_.__value_.__l.__data_, v82.__pn_.__r_.__value_.__l.__size_);
LABEL_141:
  v75[1].__pn_.__r_.__value_.__r.__words[0] = v83;
  v76 = &v75[1].__pn_.__r_.__value_.__s.__data_[8];
  if (SHIBYTE(v84.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(v76, v84.__pn_.__r_.__value_.__l.__data_, v84.__pn_.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)v76 = *(_OWORD *)&v84.__pn_.__r_.__value_.__l.__data_;
    v75[2].__pn_.__r_.__value_.__r.__words[0] = v84.__pn_.__r_.__value_.__r.__words[2];
  }
  if (SHIBYTE(v82.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v82.__pn_.__r_.__value_.__l.__data_);
  if (v117)
  {
    v77 = (void **)v115;
    if (v115)
    {
      v78 = v116;
      v79 = v115;
      if (v116 != v115)
      {
        do
        {
          if (*((char *)v78 - 1) < 0)
            operator delete(*(v78 - 3));
          v78 -= 3;
        }
        while (v78 != v77);
        v79 = v115;
      }
      v116 = v77;
      operator delete(v79);
    }
  }
  if (v114 && v113 < 0)
    operator delete(v112);
  if (v111 && v110 < 0)
    operator delete(v109);
  if (v108)
  {
    if (v107 < 0)
      operator delete(v106);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v84.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_166:
      if ((SHIBYTE(v85.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_167;
      goto LABEL_173;
    }
  }
  else if ((SHIBYTE(v84.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_166;
  }
  operator delete(v84.__pn_.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v85.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_167:
    if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_168;
    goto LABEL_174;
  }
LABEL_173:
  operator delete(v85.__pn_.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_168:
    if ((SHIBYTE(v87.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_169;
    goto LABEL_175;
  }
LABEL_174:
  operator delete(v86.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v87.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_169:
    if ((v89 & 0x80000000) == 0)
      return;
LABEL_176:
    operator delete(v88[0]);
    return;
  }
LABEL_175:
  operator delete(v87.__pn_.__r_.__value_.__l.__data_);
  if (v89 < 0)
    goto LABEL_176;
}

void sub_22411A1A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  uint64_t v63;

  if (*(char *)(v63 + 23) < 0)
    operator delete(*a9);
  if (a16 < 0)
    operator delete(__p);
  sub_22410CE54((uint64_t)&a63);
  if (a24 < 0)
  {
    operator delete(a19);
    if ((a30 & 0x80000000) == 0)
      goto LABEL_10;
  }
  else if ((a30 & 0x80000000) == 0)
  {
LABEL_10:
    if (a36 < 0)
    {
      operator delete(a31);
      if ((a42 & 0x80000000) == 0)
      {
LABEL_12:
        if ((a48 & 0x80000000) == 0)
          goto LABEL_13;
        goto LABEL_16;
      }
    }
    else if ((a42 & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete(a37);
    if ((a48 & 0x80000000) == 0)
LABEL_13:
      _Unwind_Resume(a1);
LABEL_16:
    operator delete(a43);
    _Unwind_Resume(a1);
  }
  operator delete(a25);
  goto LABEL_10;
}

void sub_22411A3BC(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t a4, uint64_t a5)
{
  const void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  BOOL v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  _BOOL4 v23;
  char v24;
  uint64_t v25;
  int v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  void *exception;
  uint64_t v33;
  std::__fs::filesystem::path __p;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  void *v39[2];
  uint64_t v40;
  uint64_t v41;
  void *v42[2];
  uint64_t v43;
  char v44;
  char v45;
  unsigned __int8 v46;
  std::__fs::filesystem::path v47;
  uint64_t v48;
  std::__fs::filesystem::path v49;
  uint64_t v50[2];
  std::__shared_weak_count *v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  char v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  char v61;
  char v62;
  uint64_t v63;
  std::__shared_weak_count *v64;

  v10 = (const void *)a3[3];
  v11 = (std::__shared_weak_count *)a3[4];
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  if (v10)
  {
    v14 = __dynamic_cast(v10, (const struct __class_type_info *)&unk_24EC6A3F8, (const struct __class_type_info *)&unk_24EC281D0, 0) != 0;
    if (!v11)
      goto LABEL_11;
  }
  else
  {
    v14 = 0;
    if (!v11)
      goto LABEL_11;
  }
  v15 = (unint64_t *)&v11->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (v16)
  {
LABEL_11:
    if (v14)
      goto LABEL_12;
LABEL_19:
    v17 = 0;
    v63 = 0;
    v64 = 0;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (!v14)
    goto LABEL_19;
LABEL_12:
  v18 = a3[3];
  v17 = (std::__shared_weak_count *)a3[4];
  if (v17)
  {
    v19 = (unint64_t *)&v17->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v63 = v18;
  v64 = v17;
  if (!v18)
  {
LABEL_20:
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/FileIOPrivate.cpp", 833, (uint64_t)"mesh_data_ptr", 13, (uint64_t)"ExportMeshData requires data to be MeshData", 43, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v18 = 0;
    v21 = MEMORY[8];
    if (*(_DWORD *)(MEMORY[8] + 104) > 1u)
      goto LABEL_23;
    goto LABEL_22;
  }
  v21 = *(_QWORD *)(v18 + 8);
  if (*(_DWORD *)(v21 + 104) > 1u)
    goto LABEL_23;
LABEL_22:
  if (*(_DWORD *)(v21 + 64) <= 1u)
  {
    if (*(_QWORD *)(v21 + 144) == *(_QWORD *)(v21 + 152)
      && *(_QWORD *)(v21 + 176) == *(_QWORD *)(v21 + 184)
      && *(_QWORD *)(v21 + 208) == *(_QWORD *)(v21 + 216)
      && *(_QWORD *)(v21 + 240) == *(_QWORD *)(v21 + 248)
      && *(_QWORD *)(v21 + 280) == *(_QWORD *)(v21 + 288)
      && *(_QWORD *)(v21 + 320) == *(_QWORD *)(v21 + 328)
      && (v22 = *(_BYTE *)(v21 + 380)) == 0)
    {
      v23 = *(_BYTE *)(v21 + 408) == 0;
      if (a4 == 64)
        goto LABEL_37;
    }
    else
    {
      v22 = 0;
      v23 = 0;
      if (a4 == 64)
        goto LABEL_37;
    }
    goto LABEL_31;
  }
LABEL_23:
  v22 = 1;
  v23 = 0;
  if (a4 == 64)
  {
LABEL_37:
    v24 = v22 ^ 1;
    if (a4 != 64)
      v24 = 1;
    if ((v24 & 1) == 0)
    {
      exception = __cxa_allocate_exception(0x88uLL);
      sub_223174DE4(&v47, ".obj");
      sub_223174DE4(v50, "mesh is required to have per-vertex colors and normals");
      sub_224106938((uint64_t *)&v47, v50, (uint64_t)&v35);
      v52 = v35;
      LOBYTE(v53) = 0;
      v62 = 0;
      if (v45)
      {
        v55 = 0;
        if (v38)
        {
          v53 = v36;
          v54 = v37;
          v37 = 0;
          v36 = 0uLL;
          v55 = 1;
        }
        LOBYTE(v56) = 0;
        v61 = 0;
        if (v44)
        {
          v57 = v40;
          v56 = *(_OWORD *)v39;
          v39[0] = 0;
          v39[1] = 0;
          v58 = v41;
          v59 = *(_OWORD *)v42;
          v60 = v43;
          v40 = 0;
          v42[0] = 0;
          v42[1] = 0;
          v43 = 0;
          v61 = 1;
        }
        v62 = 1;
      }
      sub_22411B188((uint64_t)exception, &v52);
      __cxa_throw(exception, (struct type_info *)&unk_24EC69EA0, (void (*)(void *))sub_224114894);
    }
    sub_2241194C0(&v47, a2, a3, (uint64_t)".obj", 4, a4, a5);
    sub_2242B0918(&v49, 0x30u, a5, v50);
    if (SHIBYTE(v49.__pn_.__r_.__value_.__r.__words[2]) < 0)
      sub_223197FA4(&__p, v49.__pn_.__r_.__value_.__l.__data_, v49.__pn_.__r_.__value_.__l.__size_);
    else
      __p = v49;
    sub_22414BE00((uint64_t)&__p, *(uint64_t **)(v18 + 8), a5, (uint64_t)&v35);
    if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    if (!v46)
    {
      v33 = sub_22319593C((uint64_t)&v35);
      sub_22401682C(v33);
    }
    if (SHIBYTE(v47.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_223197FA4((_BYTE *)a1, v47.__pn_.__r_.__value_.__l.__data_, v47.__pn_.__r_.__value_.__l.__size_);
      v26 = v46;
      *(_QWORD *)(a1 + 24) = v48;
      *(_BYTE *)(a1 + 32) = 1;
      if (!v26 && v45)
      {
        if (v44)
        {
          if (SHIBYTE(v43) < 0)
            operator delete(v42[0]);
          if (SHIBYTE(v40) < 0)
            operator delete(v39[0]);
        }
        if (v38 && SHIBYTE(v37) < 0)
          operator delete((void *)v36);
      }
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)&v47.__pn_.__r_.__value_.__l.__data_;
      v25 = v48;
      *(_QWORD *)(a1 + 16) = *((_QWORD *)&v47.__pn_.__r_.__value_.__l + 2);
      *(_QWORD *)(a1 + 24) = v25;
      *(_BYTE *)(a1 + 32) = 1;
    }
    v27 = v51;
    if (!v51)
      goto LABEL_53;
    v28 = (unint64_t *)&v51->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
      if ((SHIBYTE(v49.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_54:
        if ((SHIBYTE(v47.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_55;
        goto LABEL_59;
      }
    }
    else
    {
LABEL_53:
      if ((SHIBYTE(v49.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_54;
    }
    operator delete(v49.__pn_.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v47.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_55:
      v17 = v64;
      if (!v64)
        return;
      goto LABEL_60;
    }
LABEL_59:
    operator delete(v47.__pn_.__r_.__value_.__l.__data_);
    v17 = v64;
    if (!v64)
      return;
    goto LABEL_60;
  }
LABEL_31:
  if (v23)
    goto LABEL_37;
  sub_224118C14(a2, a3, a4, a5, 0, 0);
  if (!v17)
    return;
LABEL_60:
  v30 = (unint64_t *)&v17->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
}

void sub_22411A908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  void *v47;
  int v48;
  uint64_t v49;

  sub_22319723C(v49 - 208);
  sub_22319723C((uint64_t)&a16);
  if (a47 < 0)
    operator delete(__p);
  if (a37 < 0)
  {
    operator delete(a32);
    if ((v48 & 1) == 0)
    {
LABEL_8:
      sub_223167354(v49 - 80);
      _Unwind_Resume(a1);
    }
  }
  else if (!v48)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v47);
  sub_223167354(v49 - 80);
  _Unwind_Resume(a1);
}

uint64_t sub_22411A9FC(uint64_t a1, __int128 *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::ios_base *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;

  v5 = MEMORY[0x24BEDB858];
  v6 = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 16) = v5 + 64;
  v7 = a1 + 16;
  v8 = a1 + 24;
  v9 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v10 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v11 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + *(_QWORD *)(v10 - 24)) = v11;
  *(_QWORD *)(a1 + 8) = 0;
  v12 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v12, (void *)(a1 + 24));
  v12[1].__vftable = 0;
  v12[1].__fmtflags_ = -1;
  v13 = v9[4];
  v14 = v9[5];
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v7 + *(_QWORD *)(v13 - 24)) = v14;
  v15 = v9[1];
  *(_QWORD *)a1 = v15;
  *(_QWORD *)(a1 + *(_QWORD *)(v15 - 24)) = v9[6];
  *(_QWORD *)a1 = v5 + 24;
  *(_QWORD *)(a1 + 128) = v6;
  *(_QWORD *)(a1 + 16) = v5 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  v16 = *a2;
  *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 88) = v16;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = a3;
  sub_2231B5488(v8);
  return a1;
}

void sub_22411AB2C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v2 + 111) < 0)
    operator delete(*v3);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x227684BE0](v1);
  _Unwind_Resume(a1);
}

void sub_22411AB80(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC69EF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22411AB90(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC69EF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22411ABC0(uint64_t a1)
{
  void **v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[16];
  std::__shared_weak_count *v10;
  char v11;

  v2 = (void **)(a1 + 24);
  v9[0] = 0;
  v11 = 0;
  sub_224112380(a1 + 24, (uint64_t)v9);
  if (v11)
  {
    v3 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
  v6 = MEMORY[0x24BEDB7F0];
  v7 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)(a1 + 48) = *MEMORY[0x24BEDB7F0];
  v8 = *(_QWORD *)(v6 + 72);
  *(_QWORD *)(a1 + 48 + *(_QWORD *)(v7 - 24)) = *(_QWORD *)(v6 + 64);
  *(_QWORD *)(a1 + 72) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(a1 + 64) = v8;
  if (*(char *)(a1 + 159) < 0)
    operator delete(*(void **)(a1 + 136));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x227684BE0](a1 + 176);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v2);
}

uint64_t sub_22411ACDC(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  __int128 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  std::locale v31;
  std::locale v32;

  *(_QWORD *)(a1 + 128) = MEMORY[0x24BEDB898] + 16;
  v4 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + *(_QWORD *)(v5 - 24)) = v6;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v7 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  v8 = (std::ios_base *)(a2 + *(_QWORD *)(*(_QWORD *)a2 - 24));
  std::ios_base::move(v7, v8);
  v7[1].__vftable = v8[1].__vftable;
  v8[1].__vftable = 0;
  v7[1].__fmtflags_ = v8[1].__fmtflags_;
  v9 = v4[4];
  v10 = v4[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 16 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v4[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v4[6];
  v12 = MEMORY[0x24BEDB858];
  *(_QWORD *)a1 = MEMORY[0x24BEDB858] + 24;
  *(_QWORD *)(a1 + 128) = v12 + 104;
  *(_QWORD *)(a1 + 16) = v12 + 64;
  std::streambuf::basic_streambuf();
  v13 = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(a1 + 88) = 0;
  v14 = (_OWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 24) = v13;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  v15 = (__int128 *)(a2 + 88);
  if (*(char *)(a2 + 111) >= 0)
    v16 = a2 + 88;
  else
    v16 = *(_QWORD *)(a2 + 88);
  v17 = *(_QWORD *)(a2 + 40);
  if (v17)
  {
    v18 = v17 - v16;
    v19 = *(_QWORD *)(a2 + 48) - v16;
    v20 = *(_QWORD *)(a2 + 56) - v16;
    v21 = *(_QWORD *)(a2 + 64);
    if (v21)
    {
LABEL_6:
      v22 = v21 - v16;
      v23 = *(_QWORD *)(a2 + 72) - v16;
      v24 = *(_QWORD *)(a2 + 80) - v16;
      goto LABEL_9;
    }
  }
  else
  {
    v20 = -1;
    v19 = -1;
    v18 = -1;
    v21 = *(_QWORD *)(a2 + 64);
    if (v21)
      goto LABEL_6;
  }
  v22 = -1;
  v23 = -1;
  v24 = -1;
LABEL_9:
  v25 = *(_QWORD *)(a2 + 112);
  v26 = v25 - v16;
  if (!v25)
    v26 = -1;
  v27 = *v15;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *v14 = v27;
  *(_BYTE *)(a2 + 111) = 0;
  *(_BYTE *)(a2 + 88) = 0;
  v28 = a1 + 88;
  if (*(char *)(a1 + 111) < 0)
    v28 = *(_QWORD *)v14;
  if (v18 != -1)
  {
    *(_QWORD *)(a1 + 40) = v28 + v18;
    *(_QWORD *)(a1 + 48) = v28 + v19;
    *(_QWORD *)(a1 + 56) = v28 + v20;
  }
  if (v22 != -1)
  {
    *(_QWORD *)(a1 + 80) = v28 + v24;
    *(_QWORD *)(a1 + 64) = v28 + v22;
    *(_QWORD *)(a1 + 72) = v28 + v22 + v23;
  }
  v29 = v28 + v26;
  if (v26 == -1)
    v29 = 0;
  *(_QWORD *)(a1 + 112) = v29;
  if (*(char *)(a2 + 111) < 0)
    v15 = *(__int128 **)(a2 + 88);
  *(_QWORD *)(a2 + 40) = v15;
  *(_QWORD *)(a2 + 48) = v15;
  *(_QWORD *)(a2 + 56) = v15;
  *(_QWORD *)(a2 + 64) = v15;
  *(_QWORD *)(a2 + 72) = v15;
  *(_QWORD *)(a2 + 80) = v15;
  *(_QWORD *)(a2 + 112) = v15;
  std::locale::locale(&v31, (const std::locale *)(a2 + 32));
  (*(void (**)(uint64_t, std::locale *))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24, &v31);
  std::locale::locale(&v32, (const std::locale *)(a1 + 32));
  std::locale::operator=((std::locale *)(a1 + 32), &v31);
  std::locale::~locale(&v32);
  std::locale::~locale(&v31);
  *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40) = a1 + 24;
  return a1;
}

void sub_22411AF64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  uint64_t v9;
  uint64_t v10;
  void **v11;

  std::locale::~locale(&a9);
  if (*(char *)(v9 + 111) < 0)
    operator delete(*v11);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x227684BE0](v10);
  _Unwind_Resume(a1);
}

void sub_22411AFC0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  void **v6;
  int v7;
  void *__p[2];
  unsigned __int8 v9;
  int v10;

  if (!*(_BYTE *)(a1 + 40))
  {
    *(_BYTE *)(a1 + 40) = 1;
    v2 = *(_QWORD *)(a1 + 8);
    v3 = *(_QWORD *)(v2 + 24);
    if (!v3)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v3 = *(_QWORD *)(v2 + 24);
    }
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v3 + 48))(__p);
    v4 = v9;
    v5 = (char)v9;
    if ((v9 & 0x80u) != 0)
      v4 = (unint64_t)__p[1];
    if (v4 == 8)
    {
      v6 = (void **)__p[0];
      if ((v9 & 0x80u) == 0)
        v6 = __p;
      if (*(void **)"cv3d.viz" == *v6)
      {
        switch(v10)
        {
          case 0:
          case 14:
            sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/FileIOPrivate.cpp", 651, (uint64_t)"", 0, (uint64_t)"invalid data type", 17, (void (*)(void **))sub_22457406C);
            abort();
          case 1:
            *(_BYTE *)(a1 + 44) = 1;
            v7 = 5;
            goto LABEL_19;
          case 2:
          case 3:
          case 4:
          case 12:
          case 13:
            *(_BYTE *)(a1 + 42) = 1;
            break;
          case 5:
          case 8:
          case 10:
            *(_BYTE *)(a1 + 41) = 1;
            *(_DWORD *)(a1 + 52) = 2;
            break;
          case 6:
            *(_DWORD *)(a1 + 56) = 3;
            break;
          case 7:
            *(_BYTE *)(a1 + 44) = 1;
            v7 = 6;
LABEL_19:
            *(_DWORD *)(a1 + 48) = v7;
            break;
          case 11:
            *(_BYTE *)(a1 + 41) = 1;
            *(_DWORD *)(a1 + 52) = 4;
            break;
          default:
            break;
        }
      }
    }
    if (v5 < 0)
      operator delete(__p[0]);
  }
}

void sub_22411B16C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_22411B188(uint64_t a1, _OWORD *a2)
{
  std::string v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  v7 = 0;
  sub_22411119C((uint64_t)&v9, (std::string::size_type)v6, (uint64_t)a2);
  if (v7 == -1)
    sub_22316DD70();
  v9 = &v8;
  ((void (*)(std::string *__return_ptr, char **, _BYTE *))off_24EC69F70[v7])(&v5, &v9, v6);
  if (v7 != -1)
    ((void (*)(char **, _BYTE *))off_24EC69F58[v7])(&v9, v6);
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v5);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = off_24EC69EC8;
  *(_OWORD *)(a1 + 16) = *a2;
  sub_22319FFBC((_BYTE *)(a1 + 32), a2 + 1);
  return a1;
}

void sub_22411B264(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void sub_22411B278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22411B294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22411B2A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_22411B2BC(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24EC78CE8;
  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(void))(a1 + 24))();
  return a1;
}

void sub_22411B310(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24EC78CE8;
  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(void))(a1 + 24))();
  JUMPOUT(0x227684CE8);
}

void sub_22411B37C(uint64_t a1, unsigned __int8 *a2)
{
  int *v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned __int8 *v6;
  int v7;
  void **v8;
  void **v9;

  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == *(_DWORD *)"version")
      ? (v5 = v4 == *(_DWORD *)"sion")
      : (v5 = 0),
        !v5))
  {
    v9 = (void **)*a2;
    v6 = (unsigned __int8 *)sub_22453FEA0(a1);
    v7 = *v6;
    *v6 = 4;
    v8 = (void **)*((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = v9;
    v9 = v8;
    sub_22345337C(&v9, v7);
  }
}

void sub_22411B41C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_22345337C(v9, a9);
  _Unwind_Resume(a1);
}

void sub_22411B434(uint64_t a1, char *a2)
{
  int *v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned __int8 *v6;
  int v7;
  void **v8;
  void **v9;

  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == *(_DWORD *)"version")
      ? (v5 = v4 == *(_DWORD *)"sion")
      : (v5 = 0),
        !v5))
  {
    v9 = (void **)*a2;
    v6 = (unsigned __int8 *)sub_22453FEA0(a1);
    v7 = *v6;
    *v6 = 5;
    v8 = (void **)*((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = v9;
    v9 = v8;
    sub_22345337C(&v9, v7);
  }
}

void sub_22411B4D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_22345337C(v9, a9);
  _Unwind_Resume(a1);
}

void sub_22411B4EC(uint64_t a1, __int16 *a2)
{
  int *v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned __int8 *v6;
  int v7;
  void **v8;
  void **v9;

  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == *(_DWORD *)"version")
      ? (v5 = v4 == *(_DWORD *)"sion")
      : (v5 = 0),
        !v5))
  {
    v9 = (void **)*a2;
    v6 = (unsigned __int8 *)sub_22453FEA0(a1);
    v7 = *v6;
    *v6 = 5;
    v8 = (void **)*((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = v9;
    v9 = v8;
    sub_22345337C(&v9, v7);
  }
}

void sub_22411B58C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_22345337C(v9, a9);
  _Unwind_Resume(a1);
}

void sub_22411B5A4(uint64_t a1, int *a2)
{
  int *v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned __int8 *v6;
  int v7;
  void **v8;
  void **v9;

  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == *(_DWORD *)"version")
      ? (v5 = v4 == *(_DWORD *)"sion")
      : (v5 = 0),
        !v5))
  {
    v9 = (void **)*a2;
    v6 = (unsigned __int8 *)sub_22453FEA0(a1);
    v7 = *v6;
    *v6 = 5;
    v8 = (void **)*((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = v9;
    v9 = v8;
    sub_22345337C(&v9, v7);
  }
}

void sub_22411B644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_22345337C(v9, a9);
  _Unwind_Resume(a1);
}

void sub_22411B65C(uint64_t a1, void ***a2)
{
  int *v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned __int8 *v6;
  int v7;
  void **v8;
  void **v9;

  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == *(_DWORD *)"version")
      ? (v5 = v4 == *(_DWORD *)"sion")
      : (v5 = 0),
        !v5))
  {
    v9 = *a2;
    v6 = (unsigned __int8 *)sub_22453FEA0(a1);
    v7 = *v6;
    *v6 = 5;
    v8 = (void **)*((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = v9;
    v9 = v8;
    sub_22345337C(&v9, v7);
  }
}

void sub_22411B6FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_22345337C(v9, a9);
  _Unwind_Resume(a1);
}

void sub_22411B714(uint64_t a1, void ***a2)
{
  int *v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned __int8 *v6;
  int v7;
  void **v8;
  void **v9;

  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == *(_DWORD *)"version")
      ? (v5 = v4 == *(_DWORD *)"sion")
      : (v5 = 0),
        !v5))
  {
    v9 = *a2;
    v6 = (unsigned __int8 *)sub_22453FEA0(a1);
    v7 = *v6;
    *v6 = 5;
    v8 = (void **)*((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = v9;
    v9 = v8;
    sub_22345337C(&v9, v7);
  }
}

void sub_22411B7B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_22345337C(v9, a9);
  _Unwind_Resume(a1);
}

void sub_22411B7CC(uint64_t a1, unsigned __int8 *a2)
{
  int *v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned __int8 *v6;
  int v7;
  void **v8;
  void **v9;

  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == *(_DWORD *)"version")
      ? (v5 = v4 == *(_DWORD *)"sion")
      : (v5 = 0),
        !v5))
  {
    v9 = (void **)*a2;
    v6 = (unsigned __int8 *)sub_22453FEA0(a1);
    v7 = *v6;
    *v6 = 6;
    v8 = (void **)*((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = v9;
    v9 = v8;
    sub_22345337C(&v9, v7);
  }
}

void sub_22411B86C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_22345337C(v9, a9);
  _Unwind_Resume(a1);
}

void sub_22411B884(uint64_t a1, char *a2)
{
  int *v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned __int8 *v6;
  int v7;
  void **v8;
  void **v9;

  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == *(_DWORD *)"version")
      ? (v5 = v4 == *(_DWORD *)"sion")
      : (v5 = 0),
        !v5))
  {
    v9 = (void **)*a2;
    v6 = (unsigned __int8 *)sub_22453FEA0(a1);
    v7 = *v6;
    *v6 = 5;
    v8 = (void **)*((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = v9;
    v9 = v8;
    sub_22345337C(&v9, v7);
  }
}

void sub_22411B924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_22345337C(v9, a9);
  _Unwind_Resume(a1);
}

void sub_22411B93C(uint64_t a1, unsigned __int16 *a2)
{
  int *v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned __int8 *v6;
  int v7;
  void **v8;
  void **v9;

  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == *(_DWORD *)"version")
      ? (v5 = v4 == *(_DWORD *)"sion")
      : (v5 = 0),
        !v5))
  {
    v9 = (void **)*a2;
    v6 = (unsigned __int8 *)sub_22453FEA0(a1);
    v7 = *v6;
    *v6 = 6;
    v8 = (void **)*((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = v9;
    v9 = v8;
    sub_22345337C(&v9, v7);
  }
}

void sub_22411B9DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_22345337C(v9, a9);
  _Unwind_Resume(a1);
}

void sub_22411B9F8(uint64_t a1, void ***a2)
{
  int *v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned __int8 *v6;
  int v7;
  void **v8;
  void **v9;

  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == *(_DWORD *)"version")
      ? (v5 = v4 == *(_DWORD *)"sion")
      : (v5 = 0),
        !v5))
  {
    v9 = *a2;
    v6 = (unsigned __int8 *)sub_22453FEA0(a1);
    v7 = *v6;
    *v6 = 6;
    v8 = (void **)*((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = v9;
    v9 = v8;
    sub_22345337C(&v9, v7);
  }
}

void sub_22411BA98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_22345337C(v9, a9);
  _Unwind_Resume(a1);
}

void sub_22411BAB0(uint64_t a1, void ***a2)
{
  int *v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned __int8 *v6;
  int v7;
  void **v8;
  void **v9;

  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == *(_DWORD *)"version")
      ? (v5 = v4 == *(_DWORD *)"sion")
      : (v5 = 0),
        !v5))
  {
    v9 = *a2;
    v6 = (unsigned __int8 *)sub_22453FEA0(a1);
    v7 = *v6;
    *v6 = 6;
    v8 = (void **)*((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = v9;
    v9 = v8;
    sub_22345337C(&v9, v7);
  }
}

void sub_22411BB50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_22345337C(v9, a9);
  _Unwind_Resume(a1);
}

void sub_22411BB68(uint64_t a1, float *a2)
{
  int *v2;
  int v3;
  int v4;
  BOOL v5;

  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == *(_DWORD *)"version")
      ? (v5 = v4 == *(_DWORD *)"sion")
      : (v5 = 0),
        !v5))
  {
    sub_224542124(a1, a2);
  }
}

void sub_22411BBAC(uint64_t a1, double *a2)
{
  int *v2;
  int v3;
  int v4;
  BOOL v5;

  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == *(_DWORD *)"version")
      ? (v5 = v4 == *(_DWORD *)"sion")
      : (v5 = 0),
        !v5))
  {
    sub_22454231C(a1, a2);
  }
}

void sub_22411BBF4(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_224543E84(a1, v3);
}

void sub_22411BC18(uint64_t a1, size_t a2, size_t a3)
{
  size_t v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_224542620(a1, v3);
}

void sub_22411BC3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_224542890(a1, (uint64_t)v3);
}

void sub_22411BC60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_224542B00(a1, (uint64_t)v3);
}

void sub_22411BC84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_224542D70(a1, (uint64_t)v3);
}

void sub_22411BCA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_224542FE0(a1, (uint64_t)v3);
}

void sub_22411BCCC(uint64_t a1, size_t a2, size_t a3)
{
  size_t v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_2245403C8(a1, v3);
}

void sub_22411BCF0(uint64_t a1, size_t a2, size_t a3)
{
  size_t v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_224542758(a1, v3);
}

void sub_22411BD14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_2245429C8(a1, (uint64_t)v3);
}

void sub_22411BD38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_224542C38(a1, (uint64_t)v3);
}

void sub_22411BD5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_224542EA8(a1, (uint64_t)v3);
}

void sub_22411BD80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_224543118(a1, (uint64_t)v3);
}

void sub_22411BDA4(uint64_t a1, float *a2, float *a3)
{
  float *v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_2245436F8(a1, v3);
}

void sub_22411BDC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_224543B18(a1, v3);
}

void sub_22411BDEC(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_224543FD4(a1, v3);
}

void sub_22411BE14(uint64_t a1, size_t *a2)
{
  size_t v2;
  size_t v3[2];

  v2 = a2[1];
  v3[0] = *a2;
  v3[1] = v2;
  sub_2245403C8(a1, v3);
}

void sub_22411BE44(uint64_t a1, uint64_t a2)
{
  int v4;
  char *v5;
  int v6;
  int v7;
  char *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *exception;
  uint64_t v15;

  sub_224544628(a1);
  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_2245448E0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v15 = 0;
  sub_22451CAD4(v5, &v15);
  if (HIDWORD(v15))
  {
LABEL_14:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24EC7AC38;
    __cxa_throw(exception, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
  }
  v6 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "protocol_info";
  *(_QWORD *)(a1 + 96) = 13;
  if (v6)
  {
    sub_224544628(a1);
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "version";
    *(_QWORD *)(a1 + 96) = 7;
    if (v7)
      goto LABEL_6;
  }
  else
  {
    *(_BYTE *)(a1 + 104) = 1;
    sub_224544628(a1);
    v13 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "version";
    *(_QWORD *)(a1 + 96) = 7;
    if (v13)
      goto LABEL_6;
  }
  *(_BYTE *)(a1 + 104) = 1;
LABEL_6:
  v8 = (char *)sub_2245448E0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v15 = 0;
  sub_22451CAD4(v8, &v15);
  if (HIDWORD(v15))
    goto LABEL_14;
  v9 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "current";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v9)
    *(_BYTE *)(a1 + 104) = 1;
  v15 = a2 + 4;
  sub_2240EA600((uint64_t *)a1, &v15);
  v10 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "min";
  *(_QWORD *)(a1 + 96) = 3;
  if (!v10)
    *(_BYTE *)(a1 + 104) = 1;
  v15 = a2 + 16;
  sub_2240EA600((uint64_t *)a1, &v15);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v11 - 8);
  v12 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(a1 + 48) = v11 - 8;
  *(_QWORD *)(a1 + 72) = v12 - 8;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v11 - 16);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v12 - 16);
  *(_QWORD *)(a1 + 48) = v11 - 16;
  *(_QWORD *)(a1 + 72) = v12 - 16;
}

void *sub_22411C014(_BYTE *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  void *result;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;

  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(_QWORD *)(v4 + 272) = 0;
  sub_223195210(v4);
  v19 = v4;
  v5 = sub_2231813E8((_QWORD *)(v4 + 16), (uint64_t)"{", 1);
  sub_2231813E8(v5, (uint64_t)"{current=", 9);
  sub_22454DDB8(v5, a2);
  sub_2231813E8(v5, (uint64_t)", min=", 6);
  sub_22454DDB8(v5, (uint64_t *)((char *)a2 + 12));
  sub_2231813E8(v5, (uint64_t)"}", 1);
  result = sub_2231813E8(v5, (uint64_t)"}", 1);
  v7 = *(_DWORD *)(v4 + 120);
  if ((v7 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v4 + 112);
    v10 = *(_QWORD *)(v4 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v4 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v4 + 64);
    v12 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_20;
  }
  else
  {
    if ((v7 & 8) == 0)
    {
      a1[23] = 0;
      *a1 = 0;
      v8 = v4;
      if (!v4)
        return result;
LABEL_11:
      v13 = MEMORY[0x24BEDB7F0];
      v14 = *MEMORY[0x24BEDB7F0];
      *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
      v15 = *(_QWORD *)(v13 + 72);
      *(_QWORD *)(v8 + *(_QWORD *)(v14 - 24)) = *(_QWORD *)(v13 + 64);
      *(_QWORD *)(v8 + 24) = MEMORY[0x24BEDB848] + 16;
      *(_QWORD *)(v8 + 16) = v15;
      if (*(char *)(v8 + 111) < 0)
        operator delete(*(void **)(v8 + 88));
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x227684BE0](v8 + 128);
      JUMPOUT(0x227684CE8);
    }
    v11 = *(const void **)(v4 + 40);
    v12 = *(_QWORD *)(v4 + 56) - (_QWORD)v11;
    if (v12 >= 0x7FFFFFFFFFFFFFF8)
LABEL_20:
      sub_22316DBC0();
  }
  if (v12 >= 0x17)
  {
    v16 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v16 = v12 | 7;
    v17 = v16 + 1;
    v18 = operator new(v16 + 1);
    *((_QWORD *)a1 + 1) = v12;
    *((_QWORD *)a1 + 2) = v17 | 0x8000000000000000;
    *(_QWORD *)a1 = v18;
    a1 = v18;
  }
  else
  {
    a1[23] = v12;
    if (!v12)
    {
      *a1 = 0;
      v8 = v19;
      if (v19)
        goto LABEL_11;
      return result;
    }
  }
  result = memmove(a1, v11, v12);
  a1[v12] = 0;
  v8 = v19;
  if (v19)
    goto LABEL_11;
  return result;
}

void sub_22411C27C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_22411C2A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22456E764((uint64_t *)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_22411C2B4(_DWORD ***a1)
{
  return sub_2238EB9FC(**a1, (char *)(*a1)[1]);
}

void sub_22411C2C0(uint64_t a1, uint64_t a2)
{
  sub_22411C2D0((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

void sub_22411C2D0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24EC69F58[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_22319BD1C((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_22411C484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_22411C4C8(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_22411C5C0((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_22411C5B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_22411C5C0(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_22411C7BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319C040((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_22411C7D0(_DWORD ***a1)
{
  return sub_2238E8ADC(**a1, (char *)(*a1)[1]);
}

void sub_22411C7DC(uint64_t a1, uint64_t a2)
{
  sub_22411C7EC((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

void sub_22411C7EC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24EC69F58[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_22319BD1C((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_22411C9A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_22411C9E4(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_22411CADC((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_22411CAD4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_22411CADC(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_22411CCD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319C040((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22411CCEC(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char v16;
  _QWORD *v17;
  _QWORD *v18;
  char *v19;
  char *v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  char v25;
  char v26[8];
  void *v27;
  char v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unsigned int v31;
  void *__p;
  char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  sub_22411CFF4((uint64_t)v26, a2);
  if (*(_QWORD *)(a1 + 40))
  {
    v3 = *(_QWORD **)(a1 + 24);
    v25 = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v3, (uint64_t)&v25, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  sub_22454F620(a1, (uint64_t)&v27);
  if (*(_QWORD *)(a1 + 40))
  {
    v4 = *(_QWORD **)(a1 + 24);
    v25 = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v4, (uint64_t)&v25, 1);
  }
  std::ostream::operator<<();
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_BYTE *)(a1 + 34);
  *(_QWORD *)(a1 + 40) = v5 + 1;
  if (v5 != -1)
  {
    v7 = *(_QWORD **)(a1 + 24);
    v25 = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v7, (uint64_t)&v25, 1);
  }
  v8 = *(_QWORD **)(a1 + 24);
  v25 = v6;
  sub_2231813E8(v8, (uint64_t)&v25, 1);
  ++*(_QWORD *)(a1 + 40);
  if (v31 > 1)
    sub_22316DD70();
  v9 = v29;
  v10 = v30;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  if (*(_QWORD *)(a1 + 40))
  {
    v15 = *(_QWORD **)(a1 + 24);
    v25 = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v15, (uint64_t)&v25, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 32))(v9, a1, v14);
  v16 = *(_BYTE *)(a1 + 34);
  if (*(_QWORD *)(a1 + 40))
  {
    v17 = *(_QWORD **)(a1 + 24);
    v25 = *(_BYTE *)(a1 + 32);
    sub_2231813E8(v17, (uint64_t)&v25, 1);
  }
  v18 = *(_QWORD **)(a1 + 24);
  v25 = v16;
  sub_2231813E8(v18, (uint64_t)&v25, 1);
  ++*(_QWORD *)(a1 + 40);
  v19 = (char *)__p;
  if (__p)
  {
    v20 = v33;
    v21 = __p;
    if (v33 != __p)
    {
      do
      {
        v22 = (std::__shared_weak_count *)*((_QWORD *)v20 - 1);
        if (v22)
        {
          v23 = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        v20 -= 16;
      }
      while (v20 != v19);
      v21 = __p;
    }
    v33 = v19;
    operator delete(v21);
  }
  if (v31 != -1)
    ((void (*)(char *, uint64_t *))off_24EC69F30[v31])(&v25, &v29);
  v31 = -1;
  if (v28 < 0)
    operator delete(v27);
}

void sub_22411CFC4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_22411CFE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223BF580C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_22411CFF4(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  int v5;
  uint64_t v6;
  _BYTE v8[2];

  if (*(char *)(a2 + 31) < 0)
  {
    sub_223197FA4((_BYTE *)(a1 + 8), *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  v5 = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 56) = -1;
  v6 = *(unsigned int *)(a2 + 56);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(_BYTE *, uint64_t, uint64_t))off_24EC6A140[v6])(v8, a1 + 40, a2 + 40);
    *(_DWORD *)(a1 + 56) = v6;
  }
  sub_223BF6664((_QWORD *)(a1 + 64), a2 + 64);
  return a1;
}

void sub_22411D0B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  void **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v17 = *(unsigned int *)(v14 + 56);
  if ((_DWORD)v17 != -1)
    ((void (*)(char *, uint64_t))off_24EC69F30[v17])(&a13, v15);
  *(_DWORD *)(v14 + 56) = -1;
  if (*(char *)(v14 + 31) < 0)
    operator delete(*v13);
  _Unwind_Resume(exception_object);
}

BOOL sub_22411D10C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  char *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  uint64_t v15;
  void **v17;
  uint64_t v18;
  std::string::size_type v19;
  char *v20;
  void *__p[2];
  uint64_t v22;
  __int128 __dst;
  int64_t v24;
  int v25;

  v2 = (char *)a1;
  v3 = *((_DWORD *)a1 + 6);
  if (v3 == 1)
  {
    v25 = -1;
    if ((char)a2[23] < 0)
    {
      sub_223197FA4(&__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      __dst = *(_OWORD *)a2;
      v24 = *((_QWORD *)a2 + 2);
    }
    v22 = v24;
    *(_OWORD *)__p = __dst;
    if (v24 >= 0)
      v17 = __p;
    else
      v17 = (void **)__dst;
    if (v24 >= 0)
      v18 = HIBYTE(v24);
    else
      v18 = *((_QWORD *)&__dst + 1);
    if (v2[23] < 0)
    {
      v20 = v2;
      v2 = *(char **)v2;
      v19 = *((_QWORD *)v20 + 1);
    }
    else
    {
      v19 = v2[23];
    }
    v15 = sub_22456D42C((uint64_t)v17, v18, v2, v19, 0);
    if ((SHIBYTE(v22) & 0x80000000) == 0)
      return v15;
    operator delete(__p[0]);
    return v15;
  }
  else
  {
    if (v3)
      sub_22316DD70();
    v4 = a1[23];
    if ((v4 & 0x80u) == 0)
      v5 = a1[23];
    else
      v5 = *((_QWORD *)a1 + 1);
    v6 = a2[23];
    v7 = (char)v6;
    if ((v6 & 0x80u) != 0)
      v6 = *((_QWORD *)a2 + 1);
    if (v5 != v6)
      return 0;
    if (v7 < 0)
      a2 = *(unsigned __int8 **)a2;
    if ((v4 & 0x80) != 0)
    {
      return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
    }
    else
    {
      if (a1[23])
      {
        v8 = v4 - 1;
        do
        {
          v10 = *v2++;
          v9 = v10;
          v12 = *a2++;
          v11 = v12;
          v14 = v8-- != 0;
          v15 = v9 == v11;
        }
        while (v9 == v11 && v14);
        return v15;
      }
      return 1;
    }
  }
}

void sub_22411D2B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22411D2C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_22411D2E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned __int8 v5;
  size_t v6;
  unint64_t v7;
  int v8;
  void **v9;
  uint64_t v10;
  void **v11;
  int v12;
  int v13;
  int v14;
  int v15;
  BOOL v17;
  uint64_t v18;
  void *p_s1;
  size_t v20;
  std::string::size_type v21;
  uint64_t v22;
  void *__p[2];
  unsigned __int8 v25;
  void *__s1;
  size_t __n;
  unsigned __int8 v28;
  char v29;
  char *v30;
  _BYTE v31[24];
  int v32;

  v3 = a1;
  v4 = *(_DWORD *)(a1 + 56);
  if (v4 == 1)
  {
    v32 = 0;
    sub_22410EF48((uint64_t)__p, (uint64_t)v31, a2);
    if (v32 == -1)
      sub_22316DD70();
    __p[0] = &v30;
    ((void (*)(void **__return_ptr, void **, _BYTE *))off_24EC6A1B0[v32])(&__s1, __p, v31);
    if (v32 != -1)
      ((void (*)(void **, _BYTE *))off_24EC6A198[v32])(__p, v31);
    if ((v28 & 0x80u) == 0)
      p_s1 = &__s1;
    else
      p_s1 = __s1;
    if ((v28 & 0x80u) == 0)
      v20 = v28;
    else
      v20 = __n;
    if (*(char *)(v3 + 23) < 0)
    {
      v22 = v3;
      v3 = *(_QWORD *)v3;
      v21 = *(_QWORD *)(v22 + 8);
    }
    else
    {
      v21 = *(unsigned __int8 *)(v3 + 23);
    }
    v18 = sub_22456D42C((uint64_t)p_s1, v20, (char *)v3, v21, 0);
    if ((char)v28 < 0)
      goto LABEL_49;
    return v18;
  }
  if (v4)
    sub_22316DD70();
  v32 = 0;
  sub_22410EF48((uint64_t)__p, (uint64_t)v31, a1);
  if (v32 == -1)
    sub_22316DD70();
  __p[0] = &v30;
  ((void (*)(void **__return_ptr, void **, _BYTE *))off_24EC6A1B0[v32])(&__s1, __p, v31);
  if (v32 != -1)
    ((void (*)(void **, _BYTE *))off_24EC6A198[v32])(__p, v31);
  v32 = 0;
  sub_22410EF48((uint64_t)&v30, (uint64_t)v31, a2);
  if (v32 == -1)
    sub_22316DD70();
  v30 = &v29;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24EC6A1B0[v32])(__p, &v30, v31);
  if (v32 != -1)
    ((void (*)(char **, _BYTE *))off_24EC6A198[v32])(&v30, v31);
  v5 = v28;
  if ((v28 & 0x80u) == 0)
    v6 = v28;
  else
    v6 = __n;
  v7 = v25;
  v8 = (char)v25;
  if ((v25 & 0x80u) != 0)
    v7 = (unint64_t)__p[1];
  if (v6 != v7)
  {
    v18 = 0;
    if (((char)v25 & 0x80000000) == 0)
      goto LABEL_45;
    goto LABEL_48;
  }
  if ((v25 & 0x80u) == 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if ((char)v28 < 0)
  {
    v18 = memcmp(__s1, v9, __n) == 0;
    goto LABEL_44;
  }
  if (v28)
  {
    v10 = v28 - 1;
    v11 = &__s1;
    do
    {
      v13 = *(unsigned __int8 *)v11;
      v11 = (void **)((char *)v11 + 1);
      v12 = v13;
      v15 = *(unsigned __int8 *)v9;
      v9 = (void **)((char *)v9 + 1);
      v14 = v15;
      v17 = v10-- != 0;
      v18 = v12 == v14;
    }
    while (v12 == v14 && v17);
LABEL_44:
    if ((v8 & 0x80000000) == 0)
      goto LABEL_45;
    goto LABEL_48;
  }
  v18 = 1;
  if (((char)v25 & 0x80000000) == 0)
  {
LABEL_45:
    if ((v5 & 0x80) != 0)
      goto LABEL_49;
    return v18;
  }
LABEL_48:
  operator delete(__p[0]);
  if ((v28 & 0x80) == 0)
    return v18;
LABEL_49:
  operator delete(__s1);
  return v18;
}

void sub_22411D590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22411D5E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22411D5FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_22411D610(uint64_t a1, std::__shared_weak_count *a2)
{
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;

  if (!a2)
    return a1 != 0;
  p_shared_owners = (unint64_t *)&a2->__shared_owners_;
  do
    v5 = __ldxr(p_shared_owners);
  while (__stxr(v5 + 1, p_shared_owners));
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
    return a1 != 0;
  ((void (*)(std::__shared_weak_count *))a2->__on_zero_shared)(a2);
  std::__shared_weak_count::__release_weak(a2);
  return a1 != 0;
}

void sub_22411D690(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int128 *v7;
  unsigned __int128 v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _BYTE *v13;
  _BYTE *v14;
  unint64_t v15;
  int8x8_t v16;
  uint64_t v17;
  unsigned __int128 v18;
  _BYTE *v19;
  void *v20[2];
  uint64_t v21;
  char v22;
  _OWORD v23[2];
  void *__p[2];
  uint64_t v25;
  unsigned __int128 v26;
  unsigned __int8 v27;
  _QWORD v28[3];

  v28[2] = *MEMORY[0x24BDAC8D0];
  LOBYTE(v20[0]) = 0;
  v22 = 0;
  v4 = *(unsigned __int8 *)(a2 + 40);
  if (*(_BYTE *)(a2 + 40))
  {
    if (*(char *)(a2 + 39) < 0)
    {
      sub_223197FA4(v20, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
    }
    else
    {
      *(_OWORD *)v20 = *(_OWORD *)(a2 + 16);
      v21 = *(_QWORD *)(a2 + 32);
    }
    v4 = 1;
    v22 = 1;
  }
  LOBYTE(__p[0]) = 0;
  v27 = 0;
  if (!*(_BYTE *)(a2 + 160))
  {
    v5 = 0;
    if (v4)
      goto LABEL_16;
LABEL_10:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
    *(_BYTE *)(a1 + 32) = 0;
    v6 = a1 + 32;
    *(_BYTE *)(a1 + 80) = 0;
    if (!v5)
      goto LABEL_50;
    goto LABEL_45;
  }
  if (*(char *)(a2 + 135) < 0)
  {
    sub_223197FA4(__p, *(void **)(a2 + 112), *(_QWORD *)(a2 + 120));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a2 + 112);
    v25 = *(_QWORD *)(a2 + 128);
  }
  v7 = (unsigned __int128 *)(a2 + 144);
  do
    v8 = __ldaxp(v7);
  while (__stlxp(v8, v7));
  v26 = v8;
  v5 = 1;
  v27 = 1;
  if (!v22)
    goto LABEL_10;
LABEL_16:
  *(_QWORD *)&v23[1] = v21;
  v23[0] = *(_OWORD *)v20;
  v20[0] = 0;
  v20[1] = 0;
  v21 = 0;
  v9 = BYTE7(v23[1]);
  v10 = *((_QWORD *)&v23[0] + 1);
  v11 = *(_QWORD *)&v23[0];
  if ((SBYTE7(v23[1]) & 0x80u) == 0)
    v12 = v23;
  else
    v12 = *(_OWORD **)&v23[0];
  if ((SBYTE7(v23[1]) & 0x80u) == 0)
    v10 = BYTE7(v23[1]);
  if (v10)
  {
    v13 = v12;
    if (v10 >= 8)
    {
      v13 = (char *)v12 + (v10 & 0xFFFFFFFFFFFFFFF8);
      v14 = (char *)v12 + 3;
      v15 = v10 & 0xFFFFFFFFFFFFFFF8;
      while (1)
      {
        v16 = vceq_s8(*(int8x8_t *)(v14 - 3), (int8x8_t)0x2323232323232323);
        if ((v16.i8[0] & 1) != 0)
        {
          *(v14 - 3) = 95;
          if ((v16.i8[1] & 1) == 0)
          {
LABEL_27:
            if ((v16.i8[2] & 1) == 0)
              goto LABEL_28;
            goto LABEL_36;
          }
        }
        else if ((v16.i8[1] & 1) == 0)
        {
          goto LABEL_27;
        }
        *(v14 - 2) = 95;
        if ((v16.i8[2] & 1) == 0)
        {
LABEL_28:
          if ((v16.i8[3] & 1) == 0)
            goto LABEL_29;
          goto LABEL_37;
        }
LABEL_36:
        *(v14 - 1) = 95;
        if ((v16.i8[3] & 1) == 0)
        {
LABEL_29:
          if ((v16.i8[4] & 1) == 0)
            goto LABEL_30;
          goto LABEL_38;
        }
LABEL_37:
        *v14 = 95;
        if ((v16.i8[4] & 1) == 0)
        {
LABEL_30:
          if ((v16.i8[5] & 1) == 0)
            goto LABEL_31;
          goto LABEL_39;
        }
LABEL_38:
        v14[1] = 95;
        if ((v16.i8[5] & 1) == 0)
        {
LABEL_31:
          if ((v16.i8[6] & 1) == 0)
            goto LABEL_32;
          goto LABEL_40;
        }
LABEL_39:
        v14[2] = 95;
        if ((v16.i8[6] & 1) == 0)
        {
LABEL_32:
          if ((v16.i8[7] & 1) != 0)
            goto LABEL_41;
          goto LABEL_24;
        }
LABEL_40:
        v14[3] = 95;
        if ((v16.i8[7] & 1) != 0)
LABEL_41:
          v14[4] = 95;
LABEL_24:
        v14 += 8;
        v15 -= 8;
        if (!v15)
        {
          if (v10 == (v10 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_43;
          break;
        }
      }
    }
    v19 = (char *)v12 + v10;
    do
    {
      if (*v13 == 35)
        *v13 = 95;
      ++v13;
    }
    while (v13 != v19);
LABEL_43:
    v11 = *(_QWORD *)&v23[0];
    v9 = BYTE7(v23[1]);
    v5 = v27;
  }
  v28[0] = *((_QWORD *)&v23[0] + 1);
  *(_QWORD *)((char *)v28 + 7) = *(_QWORD *)((char *)v23 + 15);
  memset(v23, 0, 24);
  v17 = v28[0];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v17;
  *(_QWORD *)(a1 + 15) = *(_QWORD *)((char *)v28 + 7);
  *(_BYTE *)(a1 + 23) = v9;
  *(_BYTE *)(a1 + 24) = 1;
  *(_BYTE *)(a1 + 32) = 0;
  v6 = a1 + 32;
  *(_BYTE *)(a1 + 80) = 0;
  if (v5)
  {
LABEL_45:
    *(_OWORD *)v6 = *(_OWORD *)__p;
    *(_QWORD *)(v6 + 16) = v25;
    __p[1] = 0;
    v25 = 0;
    __p[0] = 0;
    do
      v18 = __ldaxp(&v26);
    while (__stlxp(v18, &v26));
    *(_OWORD *)(a1 + 64) = v18;
    *(_BYTE *)(a1 + 80) = 1;
    if (v27 && SHIBYTE(v25) < 0)
      operator delete(__p[0]);
  }
LABEL_50:
  if (v22)
  {
    if (SHIBYTE(v21) < 0)
      operator delete(v20[0]);
  }
}

void sub_22411D9B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a29 && a25 < 0)
    operator delete(__p);
  if (a15)
  {
    if (a14 < 0)
      operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22411D9F8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 80) && *(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if (!*(_BYTE *)(a1 + 24))
      return a1;
  }
  else if (!*(_BYTE *)(a1 + 24))
  {
    return a1;
  }
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_22411DA64(_QWORD *a1)
{
  *a1 = &off_24EC6A160;
  sub_223FF896C((uint64_t)(a1 + 2));
  return a1;
}

void sub_22411DA94(_QWORD *a1)
{
  *a1 = &off_24EC6A160;
  sub_223FF896C((uint64_t)(a1 + 2));
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22411DAD4(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void **v14;
  __int128 *p_p;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  unsigned __int128 v40;
  int v41;
  unsigned __int8 v42;
  __int128 __p;
  uint64_t v44;
  int v45;
  char v46;
  __int128 v47;
  uint64_t v48;
  char v49;
  __int128 v50;
  uint64_t v51;
  unsigned __int128 v52;
  char v53;
  __int128 __dst;
  uint64_t v55;
  int v56;
  __int128 v57;
  uint64_t v58;
  unsigned __int128 v59;
  char v60;
  char v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v42 = 1;
  v5 = *(_QWORD *)(a2 + 24);
  v4 = *(std::__shared_weak_count **)(a2 + 32);
  if (!v4)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
LABEL_6:
    if (v5)
      goto LABEL_7;
LABEL_14:
    LOBYTE(__p) = 0;
    v46 = 0;
    if (!*(_BYTE *)(a1 + 64))
    {
      v10 = 0;
      goto LABEL_23;
    }
    v10 = 0;
    LOBYTE(__dst) = 0;
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  if (!v5)
    goto LABEL_14;
LABEL_7:
  v9 = *(_QWORD *)(a2 + 24);
  if (!v9)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v9 = *(_QWORD *)(a2 + 24);
  }
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v9 + 48))(&__dst);
  __p = __dst;
  v44 = v55;
  v45 = v56;
  v10 = 1;
  v46 = 1;
  if (*(_BYTE *)(a1 + 64))
  {
    if (SHIBYTE(v44) < 0)
    {
      sub_223197FA4(&__dst, (void *)__p, *((unint64_t *)&__p + 1));
    }
    else
    {
      __dst = __p;
      v55 = v44;
    }
LABEL_17:
    LOBYTE(v56) = v10;
    if ((sub_22411E9F8(a1 + 16, (uint64_t)&__dst) & 1) == 0)
      v42 = 0;
    if ((_BYTE)v56 && SHIBYTE(v55) < 0)
      operator delete((void *)__dst);
  }
  if (!v42)
    goto LABEL_92;
LABEL_23:
  if (*(_BYTE *)(a1 + 80))
  {
    if (v10)
    {
      if (!*(_BYTE *)(a1 + 76) || *(_DWORD *)(a1 + 72) != v45)
        goto LABEL_92;
    }
    else if (*(_BYTE *)(a1 + 76))
    {
      goto LABEL_92;
    }
  }
  if (*(_BYTE *)(a1 + 128))
  {
    if (*(_BYTE *)(a1 + 120) && v10)
    {
      v11 = *(unsigned __int8 *)(a1 + 111);
      if ((v11 & 0x80u) == 0)
        v12 = *(unsigned __int8 *)(a1 + 111);
      else
        v12 = *(_QWORD *)(a1 + 96);
      v13 = HIBYTE(v44);
      if (v44 < 0)
        v13 = *((_QWORD *)&__p + 1);
      if (v12 != v13)
        goto LABEL_92;
      v14 = (const void **)(a1 + 88);
      if (v44 >= 0)
        p_p = &__p;
      else
        p_p = (__int128 *)__p;
      if ((v11 & 0x80) != 0)
      {
        if (memcmp(*v14, p_p, *(_QWORD *)(a1 + 96)))
          goto LABEL_92;
      }
      else if (*(_BYTE *)(a1 + 111))
      {
        while (*(unsigned __int8 *)v14 == *(unsigned __int8 *)p_p)
        {
          v14 = (const void **)((char *)v14 + 1);
          p_p = (__int128 *)((char *)p_p + 1);
          if (!--v11)
            goto LABEL_50;
        }
        goto LABEL_92;
      }
LABEL_50:
      if (*(_DWORD *)(a1 + 112) != v45)
        goto LABEL_92;
    }
    else if ((*(_BYTE *)(a1 + 120) != 0) != (v10 != 0))
    {
      goto LABEL_92;
    }
  }
  if (*(_BYTE *)(a1 + 168) && !sub_22411D10C((unsigned __int8 *)(a1 + 136), *(unsigned __int8 **)a2))
    goto LABEL_92;
  v17 = *(_QWORD *)(a2 + 24);
  v16 = *(std::__shared_weak_count **)(a2 + 32);
  if (v16)
  {
    v18 = (unint64_t *)&v16->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    do
      v20 = __ldaxr(v18);
    while (__stlxr(v20 - 1, v18));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v17)
  {
    v21 = *(_QWORD *)(a2 + 24);
    if (!v21)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v21 = *(_QWORD *)(a2 + 24);
    }
    v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
    if (!*(_BYTE *)(a1 + 240))
      goto LABEL_67;
  }
  else
  {
    v22 = 0;
    if (!*(_BYTE *)(a1 + 240))
      goto LABEL_67;
  }
  if ((sub_22411D2E0(a1 + 176, *(_QWORD *)a2) & 1) == 0)
    goto LABEL_92;
LABEL_67:
  if (*(_BYTE *)(a1 + 272))
  {
    v24 = *(_QWORD *)(a2 + 24);
    v23 = *(std::__shared_weak_count **)(a2 + 32);
    if (v23)
    {
      v25 = (unint64_t *)&v23->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 - 1, v25));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (!v24)
      goto LABEL_84;
    v29 = *(_QWORD *)(a1 + 256);
    v28 = *(std::__shared_weak_count **)(a1 + 264);
    if (v28)
    {
      v30 = (unint64_t *)&v28->__shared_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      do
        v32 = __ldaxr(v30);
      while (__stlxr(v32 - 1, v30));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    if (v29)
    {
      if ((sub_2241232A8(a1 + 248, a2 + 16) & 1) == 0)
        goto LABEL_92;
    }
    else
    {
LABEL_84:
      v34 = *(_QWORD *)(a2 + 24);
      v33 = *(std::__shared_weak_count **)(a2 + 32);
      if (v33)
      {
        v35 = (unint64_t *)&v33->__shared_owners_;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
        do
          v37 = __ldaxr(v35);
        while (__stlxr(v37 - 1, v35));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      if (v34 || sub_22411D610(*(_QWORD *)(a1 + 256), *(std::__shared_weak_count **)(a1 + 264)))
        goto LABEL_92;
    }
  }
  v38 = v42;
  if (*(_BYTE *)(a1 + 328))
  {
    if (v17)
    {
      sub_22411E75C(&__dst, (__int128 *)(v22 + 16));
    }
    else
    {
      LOBYTE(__dst) = 0;
      LOBYTE(v56) = 0;
    }
    if ((sub_22411E9F8(a1 + 280, (uint64_t)&__dst) & 1) == 0)
    {
      v38 = 0;
      v42 = 0;
    }
    if ((_BYTE)v56 && SHIBYTE(v55) < 0)
      operator delete((void *)__dst);
    if (!v38)
      goto LABEL_93;
  }
  if (*(_BYTE *)(a1 + 432))
  {
    if (v17)
    {
      sub_22411E7E4(&__dst, (__int128 *)(v22 + 112));
    }
    else
    {
      LOBYTE(__dst) = 0;
      LOBYTE(v58) = 0;
    }
    if ((sub_22411EC58(a1 + 336, (uint64_t)&__dst) & 1) == 0)
    {
      v38 = 0;
      v42 = 0;
    }
    if ((_BYTE)v58 && SHIBYTE(v55) < 0)
      operator delete((void *)__dst);
    if (!v38)
      goto LABEL_93;
  }
  if (*(_BYTE *)(a1 + 592))
  {
    if (v17 && (*(_BYTE *)(v22 + 40) || *(_BYTE *)(v22 + 160)))
    {
      sub_22411D690((uint64_t)&v47, v22);
      LOBYTE(__dst) = 0;
      LOBYTE(v56) = 0;
      if (v49)
      {
        __dst = v47;
        v55 = v48;
        v48 = 0;
        v47 = 0uLL;
        LOBYTE(v56) = 1;
      }
      LOBYTE(v57) = 0;
      v60 = 0;
      if (v53)
      {
        v57 = v50;
        v58 = v51;
        v51 = 0;
        v50 = 0uLL;
        do
          v40 = __ldaxp(&v52);
        while (__stlxp(v40, &v52));
        v59 = v40;
        v41 = 1;
        v60 = 1;
      }
      else
      {
        v41 = 1;
      }
    }
    else
    {
      v41 = 0;
      LOBYTE(__dst) = 0;
    }
    v61 = v41;
    if ((sub_22411EFCC(a1 + 448, (uint64_t)&__dst) & 1) != 0)
    {
      sub_22411E880((uint64_t)&__dst);
      if (!v41)
        goto LABEL_131;
    }
    else
    {
      v42 = 0;
      sub_22411E880((uint64_t)&__dst);
      if (!v41)
      {
LABEL_131:
        v38 = v42;
        if (!v42)
          goto LABEL_93;
        goto LABEL_135;
      }
    }
    sub_22411D9F8((uint64_t)&v47);
    v38 = v42;
    if (!v42)
      goto LABEL_93;
  }
LABEL_135:
  if (*(_BYTE *)(a1 + 696))
  {
    if (v17)
    {
      sub_22411E75C(&__dst, (__int128 *)(v22 + 48));
    }
    else
    {
      LOBYTE(__dst) = 0;
      LOBYTE(v56) = 0;
    }
    if ((sub_22411E9F8(a1 + 648, (uint64_t)&__dst) & 1) == 0)
    {
      v38 = 0;
      v42 = 0;
    }
    if ((_BYTE)v56 && SHIBYTE(v55) < 0)
      operator delete((void *)__dst);
    if (!v38)
      goto LABEL_93;
  }
  if (*(_BYTE *)(a1 + 640))
  {
    if (v17)
    {
      sub_2231AB2A8((uint64_t)&__dst, v22 + 176);
    }
    else
    {
      LOBYTE(__dst) = 0;
      LOBYTE(v56) = 0;
    }
    sub_22411EBB0((uint64_t)&v42, a1 + 608, (uint64_t)&__dst);
    sub_22411E8E8((uint64_t)&__dst);
    LOBYTE(v38) = v42;
    if (!v42)
      goto LABEL_93;
  }
  if (*(_BYTE *)(a1 + 728))
  {
    if (!v17)
    {
      if (*(_BYTE *)(a1 + 720) || *(_BYTE *)(a1 + 760) && *(_BYTE *)(a1 + 752))
        goto LABEL_92;
      goto LABEL_93;
    }
    if (*(_BYTE *)(v22 + 96) && *(_BYTE *)(a1 + 720))
    {
      if (*(_QWORD *)(a1 + 704) != *(_QWORD *)(v22 + 80)
        || *(unsigned __int8 *)(a1 + 712) != *(unsigned __int8 *)(v22 + 88))
      {
        goto LABEL_92;
      }
    }
    else if ((*(_BYTE *)(v22 + 96) != 0) != (*(_BYTE *)(a1 + 720) != 0))
    {
      goto LABEL_92;
    }
  }
  if (!*(_BYTE *)(a1 + 760))
    goto LABEL_93;
  if (!v17)
  {
    if (!*(_BYTE *)(a1 + 752))
      goto LABEL_93;
    goto LABEL_92;
  }
  if (!*(_BYTE *)(a1 + 752)
    || *(_QWORD *)(a1 + 736) != *(_QWORD *)v22
    || *(unsigned __int8 *)(a1 + 744) != *(unsigned __int8 *)(v22 + 8))
  {
LABEL_92:
    LOBYTE(v38) = 0;
  }
LABEL_93:
  if (v46 && SHIBYTE(v44) < 0)
    operator delete((void *)__p);
  return v38 & 1;
}

void sub_22411E380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,char a46,uint64_t a47,char a48)
{
  if (a46)
  {
    if (a44 < 0)
      operator delete(__p);
  }
  sub_22411E98C((uint64_t)&a29);
  sub_22411E98C((uint64_t)&a20);
  sub_22411E43C((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_22411E43C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 72))
    return a1;
  if (*(_BYTE *)(a1 + 56) && *(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (!*(_BYTE *)(a1 + 24) || (*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)a1);
  return a1;
}

void sub_22411E4A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  size_t v9;
  void **v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *__dst[2];
  unint64_t v22;
  _QWORD v23[5];
  _QWORD *v24;

  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(_QWORD *)(v4 + 272) = 0;
  sub_223195210(v4);
  v23[0] = v4;
  v5 = *(char *)(a2 + 23);
  if (v5 >= 0)
    v6 = a2;
  else
    v6 = *(_QWORD *)a2;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a2 + 23);
  else
    v7 = *(_QWORD *)(a2 + 8);
  sub_2231813E8((_QWORD *)(v4 + 16), v6, v7);
  v8 = *(_DWORD *)(v4 + 120);
  if ((v8 & 0x10) != 0)
  {
    v11 = *(_QWORD *)(v4 + 112);
    v12 = *(_QWORD *)(v4 + 72);
    if (v11 < v12)
    {
      *(_QWORD *)(v4 + 112) = v12;
      v11 = v12;
    }
    v13 = *(const void **)(v4 + 64);
    v9 = v11 - (_QWORD)v13;
    if (v11 - (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_28;
  }
  else
  {
    if ((v8 & 8) == 0)
    {
      v9 = 0;
      HIBYTE(v22) = 0;
      v10 = __dst;
      goto LABEL_20;
    }
    v13 = *(const void **)(v4 + 40);
    v9 = *(_QWORD *)(v4 + 56) - (_QWORD)v13;
    if (v9 >= 0x7FFFFFFFFFFFFFF8)
LABEL_28:
      sub_22316DBC0();
  }
  if (v9 >= 0x17)
  {
    v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v14 = v9 | 7;
    v15 = v14 + 1;
    v10 = (void **)operator new(v14 + 1);
    __dst[1] = (void *)v9;
    v22 = v15 | 0x8000000000000000;
    __dst[0] = v10;
    goto LABEL_19;
  }
  HIBYTE(v22) = v9;
  v10 = __dst;
  if (v9)
LABEL_19:
    memmove(v10, v13, v9);
LABEL_20:
  *((_BYTE *)v10 + v9) = 0;
  v16 = v23[0];
  if (v23[0])
  {
    v17 = MEMORY[0x24BEDB7F0];
    v18 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v23[0] = *MEMORY[0x24BEDB7F0];
    v19 = *(_QWORD *)(v17 + 72);
    *(_QWORD *)(v16 + *(_QWORD *)(v18 - 24)) = *(_QWORD *)(v17 + 64);
    *(_QWORD *)(v16 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v16 + 16) = v19;
    if (*(char *)(v16 + 111) < 0)
      operator delete(*(void **)(v16 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v16 + 128);
    MEMORY[0x227684CE8](v16, 0x10B2C40EED050F3);
  }
  v23[0] = a1;
  v23[1] = __dst;
  v23[2] = a1;
  v23[3] = __dst;
  v23[4] = __dst;
  v20 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v20 == -1)
    sub_22316DD70();
  v24 = v23;
  ((void (*)(_QWORD **, uint64_t))off_24EC6A180[v20])(&v24, a1);
  if (SHIBYTE(v22) < 0)
    operator delete(__dst[0]);
}

void sub_22411E708(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_22411E72C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22411E748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22456E764((uint64_t *)va);
  _Unwind_Resume(a1);
}

_BYTE *sub_22411E75C(_BYTE *__dst, __int128 *a2)
{
  __int128 v3;

  *__dst = 0;
  __dst[24] = 0;
  if (*((_BYTE *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_223197FA4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v3 = *a2;
      *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)__dst = v3;
    }
    __dst[24] = 1;
  }
  return __dst;
}

void sub_22411E7C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

_BYTE *sub_22411E7E4(_BYTE *__dst, __int128 *a2)
{
  __int128 v4;
  unsigned __int128 *v5;
  unsigned __int128 v6;

  *__dst = 0;
  __dst[48] = 0;
  if (*((_BYTE *)a2 + 48))
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_223197FA4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v4 = *a2;
      *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)__dst = v4;
    }
    v5 = (unsigned __int128 *)(a2 + 2);
    do
      v6 = __ldaxp(v5);
    while (__stlxp(v6, v5));
    *((_OWORD *)__dst + 2) = v6;
    __dst[48] = 1;
  }
  return __dst;
}

void sub_22411E85C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 48))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22411E880(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 96))
    return a1;
  if (*(_BYTE *)(a1 + 80) && *(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (!*(_BYTE *)(a1 + 24) || (*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_22411E8E8(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  if (*(_BYTE *)(a1 + 24))
  {
    v2 = *(void ***)a1;
    if (*(_QWORD *)a1)
    {
      v3 = *(void ***)(a1 + 8);
      v4 = *(void ***)a1;
      if (v3 == v2)
      {
LABEL_14:
        *(_QWORD *)(a1 + 8) = v2;
        operator delete(v4);
        return a1;
      }
      while (1)
      {
        if (*((_BYTE *)v3 - 16) && *((char *)v3 - 41) < 0)
        {
          operator delete(*(v3 - 8));
          if (*((_BYTE *)v3 - 72))
          {
LABEL_9:
            if (*((char *)v3 - 73) < 0)
              operator delete(*(v3 - 12));
          }
        }
        else if (*((_BYTE *)v3 - 72))
        {
          goto LABEL_9;
        }
        v3 -= 12;
        if (v3 == v2)
        {
          v4 = *(void ***)a1;
          goto LABEL_14;
        }
      }
    }
  }
  return a1;
}

uint64_t sub_22411E98C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 56) && *(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if (!*(_BYTE *)(a1 + 24))
      return a1;
  }
  else if (!*(_BYTE *)(a1 + 24))
  {
    return a1;
  }
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_22411E9F8(uint64_t a1, uint64_t a2)
{
  int v4;
  void *p_s1;
  size_t v6;
  char *v7;
  std::string::size_type v8;
  unsigned __int8 v9;
  size_t v10;
  unint64_t v11;
  int v12;
  void **v13;
  uint64_t v14;
  void **v15;
  int v16;
  int v17;
  int v18;
  int v19;
  BOOL v21;
  uint64_t v22;
  void *__p[2];
  unsigned __int8 v25;
  void *__s1;
  size_t __n;
  unsigned __int8 v28;

  v4 = *(_DWORD *)(a1 + 40);
  if (v4)
  {
    if (!*(_BYTE *)(a2 + 24))
      return 0;
    if (v4 != 1)
      sub_22316DD70();
    sub_223CB8F80((__int128 *)a2);
    if ((v28 & 0x80u) == 0)
      p_s1 = &__s1;
    else
      p_s1 = __s1;
    if ((v28 & 0x80u) == 0)
      v6 = v28;
    else
      v6 = __n;
    if (*(char *)(a1 + 31) < 0)
    {
      v7 = *(char **)(a1 + 8);
      v8 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v7 = (char *)(a1 + 8);
      v8 = *(unsigned __int8 *)(a1 + 31);
    }
    v22 = sub_22456D42C((uint64_t)p_s1, v6, v7, v8, 0);
    if ((char)v28 < 0)
      goto LABEL_43;
    return v22;
  }
  sub_223CB8F80((__int128 *)(a1 + 8));
  sub_223CB8F80((__int128 *)a2);
  v9 = v28;
  if ((v28 & 0x80u) == 0)
    v10 = v28;
  else
    v10 = __n;
  v11 = v25;
  v12 = (char)v25;
  if ((v25 & 0x80u) != 0)
    v11 = (unint64_t)__p[1];
  if (v10 != v11)
  {
    v22 = 0;
    if (((char)v25 & 0x80000000) == 0)
      goto LABEL_39;
    goto LABEL_42;
  }
  if ((v25 & 0x80u) == 0)
    v13 = __p;
  else
    v13 = (void **)__p[0];
  if ((char)v28 < 0)
  {
    v22 = memcmp(__s1, v13, __n) == 0;
    goto LABEL_38;
  }
  if (v28)
  {
    v14 = v28 - 1;
    v15 = &__s1;
    do
    {
      v17 = *(unsigned __int8 *)v15;
      v15 = (void **)((char *)v15 + 1);
      v16 = v17;
      v19 = *(unsigned __int8 *)v13;
      v13 = (void **)((char *)v13 + 1);
      v18 = v19;
      v21 = v14-- != 0;
      v22 = v16 == v18;
    }
    while (v16 == v18 && v21);
LABEL_38:
    if ((v12 & 0x80000000) == 0)
      goto LABEL_39;
LABEL_42:
    operator delete(__p[0]);
    if ((v28 & 0x80) == 0)
      return v22;
    goto LABEL_43;
  }
  v22 = 1;
  if ((char)v25 < 0)
    goto LABEL_42;
LABEL_39:
  if ((v9 & 0x80) == 0)
    return v22;
LABEL_43:
  operator delete(__s1);
  return v22;
}

void sub_22411EB90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_22411EBB0(uint64_t result, uint64_t a2, uint64_t a3)
{
  _BYTE *v3;
  int v4;
  BOOL v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;

  v3 = (_BYTE *)result;
  v4 = *(unsigned __int8 *)(a3 + 24);
  if (*(_BYTE *)(a2 + 24))
    v5 = v4 == 0;
  else
    v5 = 1;
  if (v5)
  {
    if ((*(_BYTE *)(a2 + 24) != 0) == (v4 != 0))
      return result;
LABEL_13:
    *v3 = 0;
    return result;
  }
  v6 = *(unsigned __int8 **)a2;
  v7 = *(unsigned __int8 **)(a2 + 8);
  v8 = *(unsigned __int8 **)a3;
  if (&v7[-*(_QWORD *)a2] != (unsigned __int8 *)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3))
    goto LABEL_13;
  if (v6 != v7)
  {
    while (1)
    {
      result = sub_224122C08(v6, v8);
      if (!(_DWORD)result)
        break;
      v6 += 96;
      v8 += 96;
      if (v6 == v7)
        return result;
    }
    goto LABEL_13;
  }
  return result;
}

uint64_t sub_22411EC58(uint64_t a1, uint64_t a2)
{
  int v4;
  void *p_s1;
  size_t v6;
  char *v7;
  std::string::size_type v8;
  uint64_t v9;
  unsigned __int8 v11;
  size_t v12;
  unint64_t v13;
  int v14;
  void **v15;
  uint64_t v16;
  void **v17;
  int v18;
  int v19;
  int v20;
  int v21;
  BOOL v23;
  void *__p[2];
  unsigned __int8 v25;
  void *__s1;
  size_t __n;
  unsigned __int8 v28;
  char v29;
  char *v30;
  _DWORD v31[6];
  int v32;

  v4 = *(_DWORD *)(a1 + 80);
  if (v4)
  {
    if (!*(_BYTE *)(a2 + 48))
      return 0;
    if (v4 != 1)
      sub_22316DD70();
    v32 = 0;
    sub_22411E4A4((uint64_t)v31, a2);
    if (v32 == -1)
      sub_22316DD70();
    __p[0] = &v30;
    ((void (*)(void **__return_ptr, void **, _DWORD *))off_24EC6A1B0[v32])(&__s1, __p, v31);
    if (v32 != -1)
      ((void (*)(void **, _DWORD *))off_24EC6A198[v32])(__p, v31);
    if ((v28 & 0x80u) == 0)
      p_s1 = &__s1;
    else
      p_s1 = __s1;
    if ((v28 & 0x80u) == 0)
      v6 = v28;
    else
      v6 = __n;
    if (*(char *)(a1 + 39) < 0)
    {
      v7 = *(char **)(a1 + 16);
      v8 = *(_QWORD *)(a1 + 24);
    }
    else
    {
      v7 = (char *)(a1 + 16);
      v8 = *(unsigned __int8 *)(a1 + 39);
    }
    v9 = sub_22456D42C((uint64_t)p_s1, v6, v7, v8, 0);
    if ((char)v28 < 0)
      goto LABEL_58;
    return v9;
  }
  v32 = 0;
  if (*(_BYTE *)(a1 + 64))
    sub_22411E4A4((uint64_t)v31, a1 + 16);
  else
    sub_2231A0D14(v31, "nullopt");
  if (v32 == -1)
    sub_22316DD70();
  __p[0] = &v30;
  ((void (*)(void **__return_ptr, void **, _DWORD *))off_24EC6A1B0[v32])(&__s1, __p, v31);
  if (v32 != -1)
    ((void (*)(void **, _DWORD *))off_24EC6A198[v32])(__p, v31);
  v32 = 0;
  if (*(_BYTE *)(a2 + 48))
    sub_22411E4A4((uint64_t)v31, a2);
  else
    sub_2231A0D14(v31, "nullopt");
  if (v32 == -1)
    sub_22316DD70();
  v30 = &v29;
  ((void (*)(void **__return_ptr, char **, _DWORD *))off_24EC6A1B0[v32])(__p, &v30, v31);
  if (v32 != -1)
    ((void (*)(char **, _DWORD *))off_24EC6A198[v32])(&v30, v31);
  v11 = v28;
  if ((v28 & 0x80u) == 0)
    v12 = v28;
  else
    v12 = __n;
  v13 = v25;
  v14 = (char)v25;
  if ((v25 & 0x80u) != 0)
    v13 = (unint64_t)__p[1];
  if (v12 != v13)
  {
    v9 = 0;
    if (((char)v25 & 0x80000000) == 0)
      goto LABEL_54;
    goto LABEL_57;
  }
  if ((v25 & 0x80u) == 0)
    v15 = __p;
  else
    v15 = (void **)__p[0];
  if ((char)v28 < 0)
  {
    v9 = memcmp(__s1, v15, __n) == 0;
    goto LABEL_53;
  }
  if (v28)
  {
    v16 = v28 - 1;
    v17 = &__s1;
    do
    {
      v19 = *(unsigned __int8 *)v17;
      v17 = (void **)((char *)v17 + 1);
      v18 = v19;
      v21 = *(unsigned __int8 *)v15;
      v15 = (void **)((char *)v15 + 1);
      v20 = v21;
      v23 = v16-- != 0;
      v9 = v18 == v20;
    }
    while (v18 == v20 && v23);
LABEL_53:
    if ((v14 & 0x80000000) == 0)
      goto LABEL_54;
LABEL_57:
    operator delete(__p[0]);
    if ((v28 & 0x80) == 0)
      return v9;
    goto LABEL_58;
  }
  v9 = 1;
  if ((char)v25 < 0)
    goto LABEL_57;
LABEL_54:
  if ((v11 & 0x80) == 0)
    return v9;
LABEL_58:
  operator delete(__s1);
  return v9;
}

void sub_22411EF4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
  sub_22319B964((uint64_t)&a20);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_22411EFA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22411EFB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_22411EFCC(uint64_t a1, uint64_t a2)
{
  int v4;
  void *p_s1;
  size_t v6;
  char *v7;
  std::string::size_type v8;
  uint64_t v9;
  unsigned __int8 v11;
  size_t v12;
  unint64_t v13;
  int v14;
  void **v15;
  uint64_t v16;
  void **v17;
  int v18;
  int v19;
  int v20;
  int v21;
  BOOL v23;
  void *__p[2];
  unsigned __int8 v25;
  void *__s1;
  size_t __n;
  unsigned __int8 v28;
  char v29;
  char *v30;
  _DWORD v31[6];
  int v32;

  v4 = *(_DWORD *)(a1 + 128);
  if (v4)
  {
    if (!*(_BYTE *)(a2 + 96))
      return 0;
    if (v4 != 1)
      sub_22316DD70();
    v32 = 0;
    sub_223B8812C((uint64_t)__p, (uint64_t)v31, a2);
    if (v32 == -1)
      sub_22316DD70();
    __p[0] = &v30;
    ((void (*)(void **__return_ptr, void **, _DWORD *))off_24EC6A1B0[v32])(&__s1, __p, v31);
    if (v32 != -1)
      ((void (*)(void **, _DWORD *))off_24EC6A198[v32])(__p, v31);
    if ((v28 & 0x80u) == 0)
      p_s1 = &__s1;
    else
      p_s1 = __s1;
    if ((v28 & 0x80u) == 0)
      v6 = v28;
    else
      v6 = __n;
    if (*(char *)(a1 + 39) < 0)
    {
      v7 = *(char **)(a1 + 16);
      v8 = *(_QWORD *)(a1 + 24);
    }
    else
    {
      v7 = (char *)(a1 + 16);
      v8 = *(unsigned __int8 *)(a1 + 39);
    }
    v9 = sub_22456D42C((uint64_t)p_s1, v6, v7, v8, 0);
    if ((char)v28 < 0)
      goto LABEL_58;
    return v9;
  }
  v32 = 0;
  if (*(_BYTE *)(a1 + 112))
    sub_223B8812C((uint64_t)__p, (uint64_t)v31, a1 + 16);
  else
    sub_2231A0D14(v31, "nullopt");
  if (v32 == -1)
    sub_22316DD70();
  __p[0] = &v30;
  ((void (*)(void **__return_ptr, void **, _DWORD *))off_24EC6A1B0[v32])(&__s1, __p, v31);
  if (v32 != -1)
    ((void (*)(void **, _DWORD *))off_24EC6A198[v32])(__p, v31);
  v32 = 0;
  if (*(_BYTE *)(a2 + 96))
    sub_223B8812C((uint64_t)&v30, (uint64_t)v31, a2);
  else
    sub_2231A0D14(v31, "nullopt");
  if (v32 == -1)
    sub_22316DD70();
  v30 = &v29;
  ((void (*)(void **__return_ptr, char **, _DWORD *))off_24EC6A1B0[v32])(__p, &v30, v31);
  if (v32 != -1)
    ((void (*)(char **, _DWORD *))off_24EC6A198[v32])(&v30, v31);
  v11 = v28;
  if ((v28 & 0x80u) == 0)
    v12 = v28;
  else
    v12 = __n;
  v13 = v25;
  v14 = (char)v25;
  if ((v25 & 0x80u) != 0)
    v13 = (unint64_t)__p[1];
  if (v12 != v13)
  {
    v9 = 0;
    if (((char)v25 & 0x80000000) == 0)
      goto LABEL_54;
    goto LABEL_57;
  }
  if ((v25 & 0x80u) == 0)
    v15 = __p;
  else
    v15 = (void **)__p[0];
  if ((char)v28 < 0)
  {
    v9 = memcmp(__s1, v15, __n) == 0;
    goto LABEL_53;
  }
  if (v28)
  {
    v16 = v28 - 1;
    v17 = &__s1;
    do
    {
      v19 = *(unsigned __int8 *)v17;
      v17 = (void **)((char *)v17 + 1);
      v18 = v19;
      v21 = *(unsigned __int8 *)v15;
      v15 = (void **)((char *)v15 + 1);
      v20 = v21;
      v23 = v16-- != 0;
      v9 = v18 == v20;
    }
    while (v18 == v20 && v23);
LABEL_53:
    if ((v14 & 0x80000000) == 0)
      goto LABEL_54;
LABEL_57:
    operator delete(__p[0]);
    if ((v28 & 0x80) == 0)
      return v9;
    goto LABEL_58;
  }
  v9 = 1;
  if ((char)v25 < 0)
    goto LABEL_57;
LABEL_54:
  if ((v11 & 0x80) == 0)
    return v9;
LABEL_58:
  operator delete(__s1);
  return v9;
}

void sub_22411F2CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
  sub_22319B964((uint64_t)&a20);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_22411F324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22411F338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_22411F34C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  const char *v34;
  uint64_t v35;
  _QWORD *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  int v48;
  size_t v49;
  void **v50;
  unint64_t v51;
  unint64_t v52;
  const void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void **v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v64;
  void *__p[2];
  unsigned __int8 v66;
  _BYTE v67[24];
  int v68;
  void *__dst[2];
  unint64_t v70;
  _QWORD *v71;
  _QWORD v72[6];

  v72[5] = *MEMORY[0x24BDAC8D0];
  v4 = sub_2231813E8(a1, (uint64_t)"{", 1);
  sub_2231813E8(v4, (uint64_t)"Device: ", 8);
  if (*(_BYTE *)(a2 + 200))
  {
    v5 = sub_2231813E8(a1, (uint64_t)"{", 1);
    v6 = sub_2231813E8(v5, (uint64_t)"Name: ", 6);
    v7 = *(char *)(a2 + 79);
    if (v7 >= 0)
      v8 = a2 + 56;
    else
      v8 = *(_QWORD *)(a2 + 56);
    if (v7 >= 0)
      v9 = *(unsigned __int8 *)(a2 + 79);
    else
      v9 = *(_QWORD *)(a2 + 64);
    v10 = sub_2231813E8(v6, v8, v9);
    v11 = sub_2231813E8(v10, (uint64_t)", ", 2);
    v12 = sub_2231813E8(v11, (uint64_t)"Product: ", 9);
    v13 = *(char *)(a2 + 103);
    if (v13 >= 0)
      v14 = a2 + 80;
    else
      v14 = *(_QWORD *)(a2 + 80);
    if (v13 >= 0)
      v15 = *(unsigned __int8 *)(a2 + 103);
    else
      v15 = *(_QWORD *)(a2 + 88);
    v16 = sub_2231813E8(v12, v14, v15);
    v17 = sub_2231813E8(v16, (uint64_t)", ", 2);
    v18 = sub_2231813E8(v17, (uint64_t)"SN: ", 4);
    v19 = *(char *)(a2 + 151);
    if (v19 >= 0)
      v20 = a2 + 128;
    else
      v20 = *(_QWORD *)(a2 + 128);
    if (v19 >= 0)
      v21 = *(unsigned __int8 *)(a2 + 151);
    else
      v21 = *(_QWORD *)(a2 + 136);
    v22 = sub_2231813E8(v18, v20, v21);
    v23 = sub_2231813E8(v22, (uint64_t)", ", 2);
    v24 = sub_2231813E8(v23, (uint64_t)"OS: ", 4);
    v25 = *(char *)(a2 + 199);
    if (v25 >= 0)
      v26 = a2 + 176;
    else
      v26 = *(_QWORD *)(a2 + 176);
    if (v25 >= 0)
      v27 = *(unsigned __int8 *)(a2 + 199);
    else
      v27 = *(_QWORD *)(a2 + 184);
    v28 = sub_2231813E8(v24, v26, v27);
    v29 = sub_2231813E8(v28, (uint64_t)" (", 2);
    v30 = *(char *)(a2 + 175);
    if (v30 >= 0)
      v31 = a2 + 152;
    else
      v31 = *(_QWORD *)(a2 + 152);
    if (v30 >= 0)
      v32 = *(unsigned __int8 *)(a2 + 175);
    else
      v32 = *(_QWORD *)(a2 + 160);
    v33 = sub_2231813E8(v29, v31, v32);
    v34 = ")}";
    v35 = 2;
  }
  else
  {
    v34 = "not available";
    v33 = a1;
    v35 = 13;
  }
  sub_2231813E8(v33, (uint64_t)v34, v35);
  v36 = sub_2231813E8(a1, (uint64_t)", ", 2);
  sub_2231813E8(v36, (uint64_t)"Process: ", 9);
  if (*(_BYTE *)(a2 + 48))
  {
    v37 = *(char *)(a2 + 47);
    if (v37 >= 0)
      v38 = a2 + 24;
    else
      v38 = *(_QWORD *)(a2 + 24);
    if (v37 >= 0)
      v39 = *(unsigned __int8 *)(a2 + 47);
    else
      v39 = *(_QWORD *)(a2 + 32);
    v40 = sub_2231813E8(a1, v38, v39);
    sub_2231813E8(v40, (uint64_t)" ", 1);
  }
  sub_2231813E8(a1, (uint64_t)"(", 1);
  v41 = (_QWORD *)std::ostream::operator<<();
  v42 = sub_2231813E8(v41, (uint64_t)"), ", 3);
  v43 = sub_2231813E8(v42, (uint64_t)"UUID: ", 6);
  sub_2245664AC((unsigned __int8 *)a2, v72);
  v44 = sub_2231813E8(v43, (uint64_t)v72, 36);
  v45 = sub_2231813E8(v44, (uint64_t)", ", 2);
  v46 = sub_2231813E8(v45, (uint64_t)"Protocol: ", 10);
  v68 = 0;
  v47 = operator new();
  *(_QWORD *)(v47 + 272) = 0;
  *(_OWORD *)(v47 + 240) = 0u;
  *(_OWORD *)(v47 + 256) = 0u;
  *(_OWORD *)(v47 + 208) = 0u;
  *(_OWORD *)(v47 + 224) = 0u;
  *(_OWORD *)(v47 + 176) = 0u;
  *(_OWORD *)(v47 + 192) = 0u;
  *(_OWORD *)(v47 + 144) = 0u;
  *(_OWORD *)(v47 + 160) = 0u;
  *(_OWORD *)(v47 + 112) = 0u;
  *(_OWORD *)(v47 + 128) = 0u;
  *(_OWORD *)(v47 + 80) = 0u;
  *(_OWORD *)(v47 + 96) = 0u;
  *(_OWORD *)(v47 + 48) = 0u;
  *(_OWORD *)(v47 + 64) = 0u;
  *(_OWORD *)(v47 + 16) = 0u;
  *(_OWORD *)(v47 + 32) = 0u;
  *(_OWORD *)v47 = 0u;
  sub_223195210(v47);
  v72[0] = v47;
  sub_2231813E8((_QWORD *)(v47 + 16), (uint64_t)"{current=", 9);
  sub_22454DDB8((_QWORD *)(v47 + 16), (uint64_t *)(a2 + 208));
  sub_2231813E8((_QWORD *)(v47 + 16), (uint64_t)", min=", 6);
  sub_22454DDB8((_QWORD *)(v47 + 16), (uint64_t *)(a2 + 220));
  sub_2231813E8((_QWORD *)(v47 + 16), (uint64_t)"}", 1);
  v48 = *(_DWORD *)(v47 + 120);
  if ((v48 & 0x10) != 0)
  {
    v51 = *(_QWORD *)(v47 + 112);
    v52 = *(_QWORD *)(v47 + 72);
    if (v51 < v52)
    {
      *(_QWORD *)(v47 + 112) = v52;
      v51 = v52;
    }
    v53 = *(const void **)(v47 + 64);
    v49 = v51 - (_QWORD)v53;
    if (v51 - (unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_75;
  }
  else
  {
    if ((v48 & 8) == 0)
    {
      v49 = 0;
      HIBYTE(v70) = 0;
      v50 = __dst;
      goto LABEL_55;
    }
    v64 = *(_QWORD *)(v47 + 56);
    v53 = *(const void **)(v47 + 40);
    v49 = v64 - (_QWORD)v53;
    if ((unint64_t)(v64 - (_QWORD)v53) >= 0x7FFFFFFFFFFFFFF8)
LABEL_75:
      sub_22316DBC0();
  }
  if (v49 >= 0x17)
  {
    v54 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v49 | 7) != 0x17)
      v54 = v49 | 7;
    v55 = v54 + 1;
    v50 = (void **)operator new(v54 + 1);
    __dst[1] = (void *)v49;
    v70 = v55 | 0x8000000000000000;
    __dst[0] = v50;
    goto LABEL_54;
  }
  HIBYTE(v70) = v49;
  v50 = __dst;
  if (v49)
LABEL_54:
    memmove(v50, v53, v49);
LABEL_55:
  *((_BYTE *)v50 + v49) = 0;
  v56 = v72[0];
  if (v72[0])
  {
    v57 = MEMORY[0x24BEDB7F0];
    v58 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v72[0] = *MEMORY[0x24BEDB7F0];
    v59 = *(_QWORD *)(v57 + 72);
    *(_QWORD *)(v56 + *(_QWORD *)(v58 - 24)) = *(_QWORD *)(v57 + 64);
    *(_QWORD *)(v56 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v56 + 16) = v59;
    if (*(char *)(v56 + 111) < 0)
      operator delete(*(void **)(v56 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v56 + 128);
    MEMORY[0x227684CE8](v56, 0x10B2C40EED050F3);
  }
  v72[0] = v67;
  v72[1] = __dst;
  v72[2] = v67;
  v72[3] = __dst;
  v72[4] = __dst;
  if (v68 == -1)
    sub_22316DD70();
  v71 = v72;
  ((void (*)(_QWORD **, _BYTE *))off_24EC6A1D8[v68])(&v71, v67);
  if (SHIBYTE(v70) < 0)
    operator delete(__dst[0]);
  if (v68 == -1)
    sub_22316DD70();
  v72[0] = __dst;
  ((void (*)(void **__return_ptr, _QWORD *, _BYTE *))off_24EC6A208[v68])(__p, v72, v67);
  if (v68 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_24EC6A1F0[v68])(v72, v67);
  if ((v66 & 0x80u) == 0)
    v60 = __p;
  else
    v60 = (void **)__p[0];
  if ((v66 & 0x80u) == 0)
    v61 = v66;
  else
    v61 = (uint64_t)__p[1];
  v62 = sub_2231813E8(v46, (uint64_t)v60, v61);
  sub_2231813E8(v62, (uint64_t)"}", 1);
  if ((char)v66 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_22411F91C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_22411F9BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_22456E764((uint64_t *)va);
  JUMPOUT(0x22411F9C8);
}

__n128 sub_22411F9D8@<Q0>(uint64_t a1@<X0>, char a2@<W1>, __n128 *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned __int8 v7;
  int *v8;
  int v9;
  __int128 v10;
  __n128 result;
  int v12;
  char v13;
  uint64_t (**v14)();

  v7 = atomic_load((unsigned __int8 *)&qword_2557955F8);
  if ((v7 & 1) == 0)
  {
    v13 = a2;
    v12 = __cxa_guard_acquire(&qword_2557955F8);
    a2 = v13;
    if (v12)
    {
      v14 = &off_24EC7A900;
      sub_2245691C8((char *)xmmword_255795568, (uint64_t)&v14);
      __cxa_atexit((void (*)(void *))sub_22456965C, xmmword_255795568, &dword_22314D000);
      __cxa_guard_release(&qword_2557955F8);
      a2 = v13;
    }
  }
  if (a2)
  {
    *(_OWORD *)a4 = *(_OWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  }
  else
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
  }
  v8 = sub_223243400();
  v9 = *v8;
  *(_BYTE *)(a4 + 24) = 0;
  *(_DWORD *)(a4 + 16) = v9;
  *(_BYTE *)(a4 + 48) = 0;
  if (*((_BYTE *)v8 + 32))
  {
    if (*((char *)v8 + 31) < 0)
    {
      sub_223197FA4((_BYTE *)(a4 + 24), *((void **)v8 + 1), *((_QWORD *)v8 + 2));
    }
    else
    {
      v10 = *(_OWORD *)(v8 + 2);
      *(_QWORD *)(a4 + 40) = *((_QWORD *)v8 + 3);
      *(_OWORD *)(a4 + 24) = v10;
    }
    *(_BYTE *)(a4 + 48) = 1;
  }
  sub_224011F80((char *)(a4 + 56), xmmword_255795568);
  *(_BYTE *)(a4 + 200) = 1;
  result = *a3;
  *(__n128 *)(a4 + 208) = *a3;
  *(_QWORD *)(a4 + 224) = a3[1].n128_u64[0];
  return result;
}

void sub_22411FB24(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2557955F8);
  _Unwind_Resume(a1);
}

void sub_22411FB3C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(_BYTE *)(v1 + 48))
  {
    if (*(char *)(v1 + 47) < 0)
      operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_22411FB64(_QWORD *a1, uint64_t a2)
{
  int v3;
  _QWORD *v4;
  int v5;
  char v6;
  char v7;
  uint64_t v8;
  int v9;
  std::string::size_type v10;
  std::string *v11;
  _QWORD *v12;
  char v13;
  char v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  int v20;
  char v21;
  char v22;
  std::string *p_dst;
  std::string::size_type size;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  std::string *v31;
  uint64_t v32;
  uint64_t v33;
  std::string::size_type v34;
  void *p_p;
  uint64_t v36;
  _QWORD *v37;
  void *__p;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  _QWORD v44[2];
  unsigned __int8 v45;
  int v46;
  std::string __dst;
  std::string *v48;
  std::string *v49;
  char *v50;
  std::string *v51;
  std::string *v52;
  std::string **v53;

  if (!*(_BYTE *)(a2 + 48))
  {
    v12 = sub_2231813E8(a1, (uint64_t)"Sync{", 5);
    if (*(_DWORD *)(a2 + 40))
      v13 = 2;
    else
      v13 = 1;
    if (*(_BYTE *)(a2 + 48))
      v14 = v13;
    else
      v14 = 0;
    LOBYTE(v53) = v14;
    LODWORD(v51) = 0;
    sub_224120C84((uint64_t)&v48, (char *)&v53);
    if ((_DWORD)v51 == -1)
      sub_22316DD70();
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    ((void (*)(_QWORD *__return_ptr, std::string *, std::string **))off_24EC6A208[v51])(v44, &__dst, &v48);
    if ((_DWORD)v51 != -1)
      ((void (*)(std::string *, std::string **))off_24EC6A1F0[v51])(&__dst, &v48);
    if ((v45 & 0x80u) == 0)
      v15 = v44;
    else
      v15 = (_QWORD *)v44[0];
    if ((v45 & 0x80u) == 0)
      v16 = v45;
    else
      v16 = v44[1];
    v17 = sub_2231813E8(v12, (uint64_t)v15, v16);
    v18 = sub_2231813E8(v17, (uint64_t)"}", 1);
    if (((char)v45 & 0x80000000) == 0)
      return v18;
    v19 = (void *)v44[0];
    goto LABEL_87;
  }
  v3 = *(_DWORD *)(a2 + 40);
  v4 = sub_2231813E8(a1, (uint64_t)"Sync{", 5);
  if (!v3)
  {
    v20 = *(_DWORD *)(a2 + 40);
    if (v20)
      v21 = 2;
    else
      v21 = 1;
    if (*(_BYTE *)(a2 + 48))
      v22 = v21;
    else
      v22 = 0;
    v42 = v22;
    if (v20)
LABEL_92:
      sub_22316DD70();
    __p = (void *)a2;
    v40 = a2 + 8;
    v41 = a2 + 24;
    v46 = 0;
    sub_224120C84((uint64_t)v44, &v42);
    v48 = (std::string *)v44;
    v49 = (std::string *)", ";
    v50 = (char *)v44;
    v51 = (std::string *)", ";
    v52 = (std::string *)", ";
    if (v46 == -1)
      sub_22316DD70();
    v53 = &v48;
    ((void (*)(std::string ***, _QWORD *))off_24EC6A220[v46])(&v53, v44);
    v48 = (std::string *)v44;
    v49 = (std::string *)"{";
    v50 = (char *)v44;
    v51 = (std::string *)"{";
    v52 = (std::string *)"{";
    if (v46 == -1)
      goto LABEL_93;
    v53 = &v48;
    ((void (*)(std::string ***, _QWORD *))off_24EC6A250[v46])(&v53, v44);
    LOBYTE(v48) = 1;
    v49 = (std::string *)v44;
    v50 = &v43;
    sub_224120F5C((uint64_t)&__p, (uint64_t)&v48);
    v48 = (std::string *)v44;
    v49 = (std::string *)"}";
    v50 = (char *)v44;
    v51 = (std::string *)"}";
    v52 = (std::string *)"}";
    if (v46 == -1)
LABEL_93:
      sub_22316DD70();
    v53 = &v48;
    ((void (*)(std::string ***, _QWORD *))off_24EC6A250[v46])(&v53, v44);
    if (v46 == -1)
      sub_22316DD70();
    v48 = (std::string *)&v53;
    ((void (*)(std::string *__return_ptr, std::string **, _QWORD *))off_24EC6A208[v46])(&__dst, &v48, v44);
    if (v46 != -1)
      ((void (*)(std::string **, _QWORD *))off_24EC6A1F0[v46])(&v48, v44);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_dst = &__dst;
    else
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      size = __dst.__r_.__value_.__l.__size_;
    v25 = sub_2231813E8(v4, (uint64_t)p_dst, size);
    v18 = sub_2231813E8(v25, (uint64_t)"}", 1);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v18;
    v19 = (void *)__dst.__r_.__value_.__r.__words[0];
LABEL_87:
    operator delete(v19);
    return v18;
  }
  v5 = *(_DWORD *)(a2 + 40);
  if (v5)
    v6 = 2;
  else
    v6 = 1;
  if (*(_BYTE *)(a2 + 48))
    v7 = v6;
  else
    v7 = 0;
  v43 = v7;
  if (v5 != 1)
    goto LABEL_92;
  v46 = 0;
  sub_224120C84((uint64_t)v44, &v43);
  v48 = (std::string *)v44;
  v49 = (std::string *)", ";
  v50 = (char *)v44;
  v51 = (std::string *)", ";
  v52 = (std::string *)", ";
  if (v46 == -1)
    sub_22316DD70();
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
  ((void (*)(std::string *, _QWORD *))off_24EC6A220[v46])(&__dst, v44);
  v48 = (std::string *)v44;
  v49 = (std::string *)"{";
  v50 = (char *)v44;
  v51 = (std::string *)"{";
  v52 = (std::string *)"{";
  if (v46 == -1)
LABEL_91:
    sub_22316DD70();
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
  ((void (*)(std::string *, _QWORD *))off_24EC6A250[v46])(&__dst, v44);
  v8 = operator new();
  *(_QWORD *)(v8 + 272) = 0;
  *(_OWORD *)(v8 + 240) = 0u;
  *(_OWORD *)(v8 + 256) = 0u;
  *(_OWORD *)(v8 + 208) = 0u;
  *(_OWORD *)(v8 + 224) = 0u;
  *(_OWORD *)(v8 + 176) = 0u;
  *(_OWORD *)(v8 + 192) = 0u;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_OWORD *)(v8 + 160) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)v8 = 0u;
  sub_223195210(v8);
  v48 = (std::string *)v8;
  sub_224016B40((_QWORD *)(v8 + 16), (_BYTE *)a2);
  v9 = *(_DWORD *)(v8 + 120);
  if ((v9 & 0x10) != 0)
  {
    v26 = *(_QWORD *)(v8 + 112);
    v27 = *(_QWORD *)(v8 + 72);
    if (v26 < v27)
    {
      *(_QWORD *)(v8 + 112) = v27;
      v26 = v27;
    }
    v28 = *(const void **)(v8 + 64);
    v10 = v26 - (_QWORD)v28;
    if (v26 - (unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_90;
  }
  else
  {
    if ((v9 & 8) == 0)
    {
      v10 = 0;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
      v11 = &__dst;
      goto LABEL_63;
    }
    v28 = *(const void **)(v8 + 40);
    v10 = *(_QWORD *)(v8 + 56) - (_QWORD)v28;
    if (v10 >= 0x7FFFFFFFFFFFFFF8)
LABEL_90:
      sub_22316DBC0();
  }
  if (v10 >= 0x17)
  {
    v29 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v29 = v10 | 7;
    v30 = v29 + 1;
    v11 = (std::string *)operator new(v29 + 1);
    __dst.__r_.__value_.__l.__size_ = v10;
    __dst.__r_.__value_.__r.__words[2] = v30 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
    goto LABEL_62;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v10;
  v11 = &__dst;
  if (v10)
LABEL_62:
    memmove(v11, v28, v10);
LABEL_63:
  v11->__r_.__value_.__s.__data_[v10] = 0;
  v31 = v48;
  if (v48)
  {
    v32 = MEMORY[0x24BEDB7F0];
    v33 = *MEMORY[0x24BEDB7F0];
    v48->__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7F0];
    v34 = *(_QWORD *)(v32 + 72);
    *(std::string::size_type *)((char *)v31->__r_.__value_.__r.__words + *(_QWORD *)(v33 - 24)) = *(_QWORD *)(v32 + 64);
    v31[1].__r_.__value_.__r.__words[0] = MEMORY[0x24BEDB848] + 16;
    v31->__r_.__value_.__r.__words[2] = v34;
    if (v31[4].__r_.__value_.__s.__data_[15] < 0)
      operator delete((void *)v31[3].__r_.__value_.__r.__words[2]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](&v31[5].__r_.__value_.__r.__words[1]);
    MEMORY[0x227684CE8](v31, 0x10B2C40EED050F3);
  }
  v48 = (std::string *)v44;
  v49 = &__dst;
  v50 = (char *)v44;
  v51 = &__dst;
  v52 = &__dst;
  if (v46 == -1)
    sub_22316DD70();
  v53 = &v48;
  ((void (*)(std::string ***, _QWORD *))off_24EC6A1D8[v46])(&v53, v44);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v48 = (std::string *)v44;
  v49 = (std::string *)",";
  v50 = (char *)v44;
  v51 = (std::string *)",";
  v52 = (std::string *)",";
  if (v46 == -1)
    goto LABEL_91;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
  ((void (*)(std::string *, _QWORD *))off_24EC6A250[v46])(&__dst, v44);
  std::to_string(&__dst, *(_QWORD *)(a2 + 8));
  v48 = (std::string *)v44;
  v49 = &__dst;
  v50 = (char *)v44;
  v51 = &__dst;
  v52 = &__dst;
  if (v46 == -1)
    sub_22316DD70();
  v53 = &v48;
  ((void (*)(std::string ***, _QWORD *))off_24EC6A1D8[v46])(&v53, v44);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v48 = (std::string *)v44;
  v49 = (std::string *)",";
  v50 = (char *)v44;
  v51 = (std::string *)",";
  v52 = (std::string *)",";
  if (v46 == -1)
    goto LABEL_91;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
  ((void (*)(std::string *, _QWORD *))off_24EC6A250[v46])(&__dst, v44);
  sub_224121130((uint64_t)v44, *(_QWORD *)(a2 + 16), *(_BYTE *)(a2 + 24));
  v48 = (std::string *)v44;
  v49 = (std::string *)"}";
  v50 = (char *)v44;
  v51 = (std::string *)"}";
  v52 = (std::string *)"}";
  if (v46 == -1)
    goto LABEL_91;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
  ((void (*)(std::string *, _QWORD *))off_24EC6A250[v46])(&__dst, v44);
  if (v46 == -1)
    sub_22316DD70();
  v48 = &__dst;
  ((void (*)(void **__return_ptr, std::string **, _QWORD *))off_24EC6A208[v46])(&__p, &v48, v44);
  if (v46 != -1)
    ((void (*)(std::string **, _QWORD *))off_24EC6A1F0[v46])(&v48, v44);
  if (v41 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  if (v41 >= 0)
    v36 = HIBYTE(v41);
  else
    v36 = v40;
  v37 = sub_2231813E8(v4, (uint64_t)p_p, v36);
  v18 = sub_2231813E8(v37, (uint64_t)"}", 1);
  if (SHIBYTE(v41) < 0)
  {
    v19 = __p;
    goto LABEL_87;
  }
  return v18;
}

void sub_224120328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  sub_22319B964((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_224120438(uint64_t a1)
{
  uint64_t result;
  char v3;
  _DWORD v4[6];
  int v5;
  _QWORD **v6;
  const char *v7;
  char *v8;
  const char *v9;
  const char *v10;
  _QWORD *v11;

  v5 = 0;
  sub_2231ABA1C(v4, "{");
  LOBYTE(v6) = 1;
  v7 = (const char *)v4;
  v8 = &v3;
  sub_224120F5C(a1, (uint64_t)&v6);
  v6 = (_QWORD **)v4;
  v7 = "}";
  v8 = (char *)v4;
  v9 = "}";
  v10 = "}";
  if (v5 == -1)
    sub_22316DD70();
  v11 = &v6;
  ((void (*)(_QWORD **, _DWORD *))off_24EC6A250[v5])(&v11, v4);
  if (v5 == -1)
    sub_22316DD70();
  v6 = &v11;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24EC6A208[v5])(&v6, v4);
  if (v5 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24EC6A1F0[v5])(&v6, v4);
  return result;
}

void sub_224120548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22412055C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_224120570(std::mutex *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  std::mutex *v5;
  uint64_t sig;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  int sig_low;

  v5 = a1 + 1;
  std::mutex::lock(a1 + 1);
  sig = a1[2].__m_.__sig;
  v7 = *(_QWORD *)a1[2].__m_.__opaque;
  if (sig == v7)
  {
    v11 = 0;
    LOBYTE(v8) = 0;
    std::mutex::unlock(v5);
    if (!a1->__m_.__opaque[8])
      goto LABEL_16;
  }
  else
  {
    v8 = *(_QWORD *)(v7 - 40);
    if (*(_BYTE *)(v7 - 24))
    {
      v9 = *(_QWORD *)(v7 - 32);
      a1->__m_.__opaque[8] = *(_BYTE *)(v7 - 24);
      *(_QWORD *)a1->__m_.__opaque = v9;
    }
    if (*(_BYTE *)(v7 - 8))
    {
      v10 = *(_QWORD *)(v7 - 16);
      a1->__m_.__opaque[24] = *(_BYTE *)(v7 - 8);
      *(_QWORD *)&a1->__m_.__opaque[16] = v10;
    }
    if (a1->__m_.__opaque[8] || a1->__m_.__opaque[24])
    {
      *(_QWORD *)&a1->__m_.__opaque[32] = *(_QWORD *)(v7 - 40);
      a1->__m_.__opaque[40] = 1;
    }
    else
    {
      LOBYTE(a1->__m_.__sig) = 2;
    }
    v2 = v8 >> 8;
    *(_QWORD *)a1[2].__m_.__opaque = sig;
    v11 = 1;
    std::mutex::unlock(v5);
    if (!a1->__m_.__opaque[8])
      goto LABEL_16;
  }
  v12 = *(_QWORD *)a1->__m_.__opaque;
  if (!v12)
  {
    v11 = 1;
    LOBYTE(a1->__m_.__sig) = 1;
    a1->__m_.__opaque[0] = 0;
    a1->__m_.__opaque[8] = 0;
    if (sig == v7)
    {
      v8 = *(_QWORD *)&a1->__m_.__opaque[32];
      v2 = v8 >> 8;
      v11 = a1->__m_.__opaque[40];
      if (a1->__m_.__opaque[24])
        goto LABEL_17;
      goto LABEL_23;
    }
LABEL_16:
    if (a1->__m_.__opaque[24])
      goto LABEL_17;
LABEL_23:
    sig_low = LOBYTE(a1->__m_.__sig);
    v13 = *(_QWORD *)&a1->__m_.__opaque[48];
    if (sig_low != 1)
      goto LABEL_25;
    goto LABEL_24;
  }
  *(_QWORD *)a1->__m_.__opaque = v12 - 1;
  LOBYTE(a1->__m_.__sig) = 3;
  if (!a1->__m_.__opaque[24])
    goto LABEL_23;
LABEL_17:
  v13 = *(_QWORD *)&a1->__m_.__opaque[48];
  if (*(_QWORD *)&a1->__m_.__opaque[16] > v13)
  {
    LOBYTE(sig_low) = 3;
    LOBYTE(a1->__m_.__sig) = 3;
LABEL_25:
    *(_BYTE *)a2 = sig_low;
    *(_QWORD *)&a1->__m_.__opaque[48] = v13 + 1;
    goto LABEL_26;
  }
  LOBYTE(a1->__m_.__sig) = 1;
  a1->__m_.__opaque[16] = 0;
  a1->__m_.__opaque[24] = 0;
  if (!v11)
  {
    v8 = *(_QWORD *)&a1->__m_.__opaque[32];
    v2 = v8 >> 8;
    v11 = a1->__m_.__opaque[40];
  }
LABEL_24:
  a1->__m_.__opaque[32] = 0;
  a1->__m_.__opaque[40] = 0;
  *(_BYTE *)a2 = 1;
LABEL_26:
  *(_QWORD *)(a2 + 8) = v13;
  *(_QWORD *)(a2 + 16) = v8 | (v2 << 8);
  *(_BYTE *)(a2 + 24) = v11;
}

uint64_t sub_22412072C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  std::chrono::steady_clock::time_point v8;
  uint64_t v9;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v10;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  std::chrono::steady_clock::time_point v16;
  std::chrono::system_clock::time_point v17;
  uint64_t v19;
  int v20;
  uint64_t v21;
  std::unique_lock<std::mutex> v22;

  v22.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 64);
  v22.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 64));
  if (!a4)
  {
    if (*(_QWORD *)(a1 + 128) == *(_QWORD *)(a1 + 136))
    {
      do
      {
        v19 = *(_QWORD *)(a2 + 24);
        if (!v19)
          sub_223198474();
        v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 48))(v19);
        if ((v20 & 1) != 0)
          break;
        std::condition_variable::wait((std::condition_variable *)(a1 + 152), &v22);
      }
      while (*(_QWORD *)(a1 + 128) == *(_QWORD *)(a1 + 136));
      v9 = v20 ^ 1u;
      if (!v22.__owns_)
        return v9;
    }
    else
    {
      v9 = 1;
    }
LABEL_27:
    std::mutex::unlock(v22.__m_);
    return v9;
  }
  v8.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + a3;
  do
  {
    v12 = *(_QWORD *)(a1 + 128);
    v13 = *(_QWORD *)(a1 + 136);
    v14 = v12 != v13;
    if (v12 != v13)
      goto LABEL_26;
    v15 = *(_QWORD *)(a2 + 24);
    if (!v15)
      goto LABEL_37;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 48))(v15) & 1) != 0)
      goto LABEL_26;
    if (v8.__d_.__rep_ <= std::chrono::steady_clock::now().__d_.__rep_)
      break;
    v16.__d_.__rep_ = v8.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
    if (v16.__d_.__rep_ < 1)
      continue;
    std::chrono::steady_clock::now();
    v17.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (v17.__d_.__rep_)
    {
      if (v17.__d_.__rep_ < 1)
      {
        if ((unint64_t)v17.__d_.__rep_ < 0xFFDF3B645A1CAC09)
        {
          v10 = 0x8000000000000000;
          goto LABEL_6;
        }
      }
      else if ((unint64_t)v17.__d_.__rep_ > 0x20C49BA5E353F7)
      {
        v10 = 0x7FFFFFFFFFFFFFFFLL;
        if ((v16.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL) != 0x7FFFFFFFFFFFFFFFLL)
          goto LABEL_23;
        goto LABEL_6;
      }
      v10 = 1000 * v17.__d_.__rep_;
      if (1000 * v17.__d_.__rep_ > (v16.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
      {
LABEL_23:
        v11.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_7;
      }
    }
    else
    {
      v10 = 0;
      if (v16.__d_.__rep_ < 0)
        goto LABEL_23;
    }
LABEL_6:
    v11.__d_.__rep_ = v10 + v16.__d_.__rep_;
LABEL_7:
    std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 152), &v22, v11);
    std::chrono::steady_clock::now();
  }
  while (std::chrono::steady_clock::now().__d_.__rep_ < v8.__d_.__rep_);
  if (*(_QWORD *)(a1 + 128) != *(_QWORD *)(a1 + 136))
  {
    v14 = 1;
LABEL_26:
    v9 = v14;
    if (!v22.__owns_)
      return v9;
    goto LABEL_27;
  }
  v21 = *(_QWORD *)(a2 + 24);
  if (!v21)
LABEL_37:
    sub_223198474();
  (*(void (**)(uint64_t))(*(_QWORD *)v21 + 48))(v21);
  v9 = 0;
  if (v22.__owns_)
    goto LABEL_27;
  return v9;
}

void sub_224120958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10)
    std::mutex::unlock(a9);
  _Unwind_Resume(exception_object);
}

void sub_224120980(uint64_t a1, __int128 *a2)
{
  std::mutex *v4;
  unint64_t v5;
  char *v6;
  __int128 v7;
  __int128 v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v4 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  v6 = *(char **)(a1 + 136);
  v5 = *(_QWORD *)(a1 + 144);
  if ((unint64_t)v6 >= v5)
  {
    v10 = *(char **)(a1 + 128);
    v11 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - v10) >> 3) + 1;
    if (v11 > 0x666666666666666)
      sub_224120C70();
    v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - (_QWORD)v10) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x333333333333333)
      v13 = 0x666666666666666;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 > 0x666666666666666)
        sub_223174E94();
      v14 = (char *)operator new(40 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * ((v6 - v10) >> 3)];
    v16 = a2[1];
    *(_OWORD *)v15 = *a2;
    *((_OWORD *)v15 + 1) = v16;
    *((_QWORD *)v15 + 4) = *((_QWORD *)a2 + 4);
    v9 = v15 + 40;
    if (v6 != v10)
    {
      do
      {
        v17 = *(_OWORD *)(v6 - 40);
        v18 = *(_OWORD *)(v6 - 24);
        *((_QWORD *)v15 - 1) = *((_QWORD *)v6 - 1);
        *(_OWORD *)(v15 - 24) = v18;
        *(_OWORD *)(v15 - 40) = v17;
        v15 -= 40;
        v6 -= 40;
      }
      while (v6 != v10);
      v6 = *(char **)(a1 + 128);
    }
    *(_QWORD *)(a1 + 128) = v15;
    *(_QWORD *)(a1 + 136) = v9;
    *(_QWORD *)(a1 + 144) = &v14[40 * v13];
    if (v6)
      operator delete(v6);
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    *((_QWORD *)v6 + 4) = *((_QWORD *)a2 + 4);
    *(_OWORD *)v6 = v7;
    *((_OWORD *)v6 + 1) = v8;
    v9 = v6 + 40;
  }
  *(_QWORD *)(a1 + 136) = v9;
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 152));
  std::mutex::unlock(v4);
}

void sub_224120AF0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_224120B04(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  BOOL v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void **v16;
  uint64_t v17;
  const void **v18;
  uint64_t v19;
  unsigned __int8 *v21[6];
  const void **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  if (*(_QWORD *)*a2 != *(_QWORD *)*a3 || *(_QWORD *)(*a2 + 8) != *(_QWORD *)(*a3 + 8))
    return 0;
  result = sub_22324330C(a2[1], a3[1]);
  if ((_DWORD)result)
  {
    v7 = a2[2];
    v8 = (unsigned __int8 *)a3[2];
    v9 = v8[144];
    if (*(_BYTE *)(v7 + 144))
      v10 = v9 == 0;
    else
      v10 = 1;
    if (v10)
    {
      if ((*(_BYTE *)(v7 + 144) != 0) != (v9 != 0))
        return 0;
    }
    else
    {
      v22 = (const void **)a2[2];
      v23 = v7 + 24;
      v24 = v7 + 48;
      v25 = v7 + 72;
      v26 = v7 + 96;
      v27 = v7 + 120;
      v21[0] = v8;
      v21[1] = v8 + 24;
      v21[2] = v8 + 48;
      v21[3] = v8 + 72;
      v21[4] = v8 + 96;
      v21[5] = v8 + 120;
      v11 = sub_224569714((uint64_t)&v28, &v22, v21);
      if ((v11 & 1) == 0)
        return 0;
    }
    v12 = a2[3];
    v13 = a3[3];
    v14 = *(unsigned int *)(v12 + 8);
    v22 = *(const void ***)v12;
    LODWORD(v23) = v14;
    if (v22 != *(const void ***)v13 || v14 != *(_DWORD *)(v13 + 8))
      return 0;
    v16 = *(const void ***)(v12 + 12);
    v17 = *(unsigned int *)(v12 + 20);
    v22 = v16;
    LODWORD(v23) = v17;
    v18 = *(const void ***)(v13 + 12);
    v19 = *(unsigned int *)(v13 + 20);
    return v16 == v18 && v17 == v19;
  }
  return result;
}

void sub_224120C70()
{
  sub_22316DBD4("vector");
}

void sub_224120C84(uint64_t a1, char *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  const char *v7;
  uint64_t v8;
  int v9;
  size_t v10;
  void **v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *__dst[2];
  unint64_t v23;
  _QWORD v24[5];
  _QWORD *v25;

  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(_QWORD *)(v4 + 272) = 0;
  sub_223195210(v4);
  v24[0] = v4;
  v5 = *a2;
  if (v5 > 2)
  {
    v7 = "invalid sync type";
    v8 = 17;
  }
  else
  {
    v6 = v5;
    v7 = off_24EC6A268[v6];
    v8 = *(_QWORD *)((char *)&unk_224699158 + v6 * 8);
  }
  sub_2231813E8((_QWORD *)(v4 + 16), (uint64_t)v7, v8);
  v9 = *(_DWORD *)(v4 + 120);
  if ((v9 & 0x10) != 0)
  {
    v12 = *(_QWORD *)(v4 + 112);
    v13 = *(_QWORD *)(v4 + 72);
    if (v12 < v13)
    {
      *(_QWORD *)(v4 + 112) = v13;
      v12 = v13;
    }
    v14 = *(const void **)(v4 + 64);
    v10 = v12 - (_QWORD)v14;
    if (v12 - (unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_25;
  }
  else
  {
    if ((v9 & 8) == 0)
    {
      v10 = 0;
      HIBYTE(v23) = 0;
      v11 = __dst;
      goto LABEL_17;
    }
    v14 = *(const void **)(v4 + 40);
    v10 = *(_QWORD *)(v4 + 56) - (_QWORD)v14;
    if (v10 >= 0x7FFFFFFFFFFFFFF8)
LABEL_25:
      sub_22316DBC0();
  }
  if (v10 >= 0x17)
  {
    v15 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v15 = v10 | 7;
    v16 = v15 + 1;
    v11 = (void **)operator new(v15 + 1);
    __dst[1] = (void *)v10;
    v23 = v16 | 0x8000000000000000;
    __dst[0] = v11;
    goto LABEL_16;
  }
  HIBYTE(v23) = v10;
  v11 = __dst;
  if (v10)
LABEL_16:
    memmove(v11, v14, v10);
LABEL_17:
  *((_BYTE *)v11 + v10) = 0;
  v17 = v24[0];
  if (v24[0])
  {
    v18 = MEMORY[0x24BEDB7F0];
    v19 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v24[0] = *MEMORY[0x24BEDB7F0];
    v20 = *(_QWORD *)(v18 + 72);
    *(_QWORD *)(v17 + *(_QWORD *)(v19 - 24)) = *(_QWORD *)(v18 + 64);
    *(_QWORD *)(v17 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v17 + 16) = v20;
    if (*(char *)(v17 + 111) < 0)
      operator delete(*(void **)(v17 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v17 + 128);
    MEMORY[0x227684CE8](v17, 0x10B2C40EED050F3);
  }
  v24[0] = a1;
  v24[1] = __dst;
  v24[2] = a1;
  v24[3] = __dst;
  v24[4] = __dst;
  v21 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v21 == -1)
    sub_22316DD70();
  v25 = v24;
  ((void (*)(_QWORD **, uint64_t))off_24EC6A1D8[v21])(&v25, a1);
  if (SHIBYTE(v23) < 0)
    operator delete(__dst[0]);
}

void sub_224120F08(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_224120F2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_224120F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22456E764((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_224120F5C(uint64_t a1, uint64_t a2)
{
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string v12;
  uint64_t v13;
  std::string *v14;
  uint64_t v15;
  std::string *v16;
  std::string *v17;
  uint64_t *v18;

  v4 = *(unint64_t **)a1;
  if (!*(_BYTE *)a2)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v14 = (std::string *)",";
    v15 = v13;
    v16 = (std::string *)",";
    v17 = (std::string *)",";
    v5 = *(unsigned int *)(v13 + 24);
    if ((_DWORD)v5 == -1)
      goto LABEL_15;
    v12.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
    ((void (*)(std::string *))off_24EC6A250[v5])(&v12);
  }
  *(_BYTE *)a2 = 0;
  v6 = *(_QWORD *)(a2 + 8);
  std::to_string(&v12, *v4);
  v13 = v6;
  v14 = &v12;
  v15 = v6;
  v16 = &v12;
  v17 = &v12;
  v7 = *(unsigned int *)(v6 + 24);
  if ((_DWORD)v7 == -1)
    sub_22316DD70();
  v18 = &v13;
  ((void (*)(uint64_t **, uint64_t))off_24EC6A1D8[v7])(&v18, v6);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v12.__r_.__value_.__l.__data_);
    v8 = *(_QWORD *)(a1 + 8);
    if (*(_BYTE *)a2)
      goto LABEL_11;
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 8);
    if (*(_BYTE *)a2)
      goto LABEL_11;
  }
  v13 = *(_QWORD *)(a2 + 8);
  v14 = (std::string *)",";
  v15 = v13;
  v16 = (std::string *)",";
  v17 = (std::string *)",";
  v9 = *(unsigned int *)(v13 + 24);
  if ((_DWORD)v9 == -1)
    goto LABEL_15;
  v12.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  ((void (*)(std::string *))off_24EC6A250[v9])(&v12);
LABEL_11:
  *(_BYTE *)a2 = 0;
  sub_224121130(*(_QWORD *)(a2 + 8), *(_QWORD *)v8, *(_BYTE *)(v8 + 8));
  v10 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)a2)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v14 = (std::string *)",";
    v15 = v13;
    v16 = (std::string *)",";
    v17 = (std::string *)",";
    v11 = *(unsigned int *)(v13 + 24);
    if ((_DWORD)v11 != -1)
    {
      v12.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
      ((void (*)(std::string *))off_24EC6A250[v11])(&v12);
      goto LABEL_14;
    }
LABEL_15:
    sub_22316DD70();
  }
LABEL_14:
  *(_BYTE *)a2 = 0;
  sub_224121130(*(_QWORD *)(a2 + 8), *(_QWORD *)v10, *(_BYTE *)(v10 + 8));
}

void sub_224121114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_224121130(uint64_t a1, unint64_t __val, char a3)
{
  uint64_t v4;
  uint64_t v5;
  std::string v6;
  uint64_t *v7;
  uint64_t v8;
  std::string *v9;
  uint64_t v10;
  std::string *v11;
  std::string *v12;

  if (a3)
  {
    std::to_string(&v6, __val);
    v8 = a1;
    v9 = &v6;
    v10 = a1;
    v11 = &v6;
    v12 = &v6;
    v4 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v4 == -1)
      sub_22316DD70();
    v7 = &v8;
    ((void (*)(uint64_t **, uint64_t))off_24EC6A1D8[v4])(&v7, a1);
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v6.__r_.__value_.__l.__data_);
  }
  else
  {
    v8 = a1;
    v9 = (std::string *)"nullopt";
    v10 = a1;
    v11 = (std::string *)"nullopt";
    v12 = (std::string *)"nullopt";
    v5 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v5 == -1)
      sub_22316DD70();
    v6.__r_.__value_.__r.__words[0] = (std::string::size_type)&v8;
    ((void (*)(std::string *, uint64_t))off_24EC6A238[v5])(&v6, a1);
  }
}

void sub_224121220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_22412123C(uint64_t *a1, _BYTE *a2)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  uint64_t *v8;
  char v9;
  uint64_t v11;
  char v12;
  __int128 *v13;
  std::logic_error *exception;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  _QWORD v19[2];
  unsigned __int8 v20;
  std::string v21;
  std::string v22;
  std::string v23;
  __int128 v24;
  uint64_t v25;

  v4 = atomic_load((unsigned __int8 *)&qword_2540CEDD0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2540CEDD0))
  {
    LOWORD(v24) = 256;
    BYTE2(v24) = 2;
    sub_224121648(&v24, 3uLL);
    __cxa_atexit((void (*)(void *))sub_2241216D8, &qword_2540CEDF0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CEDD0);
  }
  v5 = atomic_load((unsigned __int8 *)&qword_2540CEDD8);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_2540CEDD8))
  {
    *(_QWORD *)&xmmword_2540CEE20 = qword_2540CEDF0;
    qword_2540CEE30 = qword_2540CEDF8;
    __cxa_guard_release(&qword_2540CEDD8);
  }
  v6 = atomic_load((unsigned __int8 *)&qword_2540CEDE0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_2540CEDE0))
  {
    xmmword_2540CEE40 = xmmword_2540CEE20;
    qword_2540CEE50 = qword_2540CEDF0;
    *(_OWORD *)byte_2540CEE58 = *(_OWORD *)&qword_2540CEE30;
    *(_QWORD *)&byte_2540CEE58[16] = qword_2540CEDF8;
    __cxa_guard_release(&qword_2540CEDE0);
  }
  v7 = atomic_load((unsigned __int8 *)&qword_2540CEDE8);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_2540CEDE8))
  {
    v24 = xmmword_2540CEE40;
    v25 = qword_2540CEE50;
    v23 = *(std::string *)byte_2540CEE58;
    sub_224121E00((unsigned __int8 **)&v24, (unsigned __int8 **)&v23);
    __cxa_atexit((void (*)(void *))sub_224121708, &qword_2540CEE08, &dword_22314D000);
    __cxa_guard_release(&qword_2540CEDE8);
  }
  v24 = 0uLL;
  v25 = 0;
  sub_2240EA2BC(a1, (uint64_t)&v24);
  v8 = sub_22324053C((uint64_t)&qword_2540CEE08, (const void **)&v24);
  if (v8 == &qword_2540CEE10)
  {
    v11 = HIBYTE(v25);
    v12 = HIBYTE(v25);
    if (v25 < 0)
      v11 = *((_QWORD *)&v24 + 1);
    if (v11 != 4)
      goto LABEL_24;
    v13 = (__int128 *)v24;
    if (v25 >= 0)
      v13 = &v24;
    if (*(_DWORD *)v13 != 1701736270)
    {
LABEL_24:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      sub_223996958("', expected ", &v21, &v22);
      sub_224121730();
      if ((v20 & 0x80u) == 0)
        v15 = (const std::string::value_type *)v19;
      else
        v15 = (const std::string::value_type *)v19[0];
      if ((v20 & 0x80u) == 0)
        v16 = v20;
      else
        v16 = v19[1];
      v17 = std::string::append(&v22, v15, v16);
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v23.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::logic_error::logic_error(exception, &v23);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
    }
    *a2 = 0;
    if ((v12 & 0x80) == 0)
      return a1;
  }
  else
  {
    v9 = HIBYTE(v25);
    *a2 = *((_BYTE *)v8 + 56);
    if ((v9 & 0x80) == 0)
      return a1;
  }
  operator delete((void *)v24);
  return a1;
}

void sub_22412153C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CEDE8);
  _Unwind_Resume(a1);
}

void sub_224121554(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CEDD0);
  _Unwind_Resume(a1);
}

void sub_22412156C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  int v34;
  uint64_t v35;

  if (a33 < 0)
  {
    operator delete(a28);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a27 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_4:
    if (a21 < 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a22);
  if (a21 < 0)
  {
LABEL_5:
    operator delete(__p);
    if ((v34 & 1) == 0)
    {
LABEL_12:
      if (*(char *)(v35 - 41) < 0)
        operator delete(*(void **)(v35 - 64));
      _Unwind_Resume(a1);
    }
LABEL_11:
    __cxa_free_exception(v33);
    goto LABEL_12;
  }
LABEL_10:
  if (!v34)
    goto LABEL_12;
  goto LABEL_11;
}

void *sub_224121648(void *result, size_t __sz)
{
  const void *v3;
  uint64_t v4;

  qword_2540CEDF0 = 0;
  qword_2540CEDF8 = 0;
  qword_2540CEE00 = 0;
  if (__sz)
  {
    if ((__sz & 0x8000000000000000) != 0)
      sub_22316E078();
    v3 = result;
    qword_2540CEDF0 = (uint64_t)operator new(__sz);
    qword_2540CEDF8 = qword_2540CEDF0;
    v4 = qword_2540CEDF0 + __sz;
    qword_2540CEE00 = qword_2540CEDF0 + __sz;
    result = memmove((void *)qword_2540CEDF0, v3, __sz);
    qword_2540CEDF8 = v4;
  }
  return result;
}

void sub_2241216B4(_Unwind_Exception *exception_object)
{
  if (qword_2540CEDF0)
  {
    qword_2540CEDF8 = qword_2540CEDF0;
    operator delete((void *)qword_2540CEDF0);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2241216D8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_224121708(uint64_t a1)
{
  sub_22323DF84(a1, *(char **)(a1 + 8));
  return a1;
}

uint64_t sub_224121730()
{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t result;
  _DWORD v4[6];
  int v5;
  void *__p[2];
  char v7;
  void **v8;
  const char *v9;
  _DWORD *v10;
  const char *v11;
  const char *v12;
  void ***v13;

  v5 = 0;
  if (qword_2540CEE30 - (uint64_t)xmmword_2540CEE20 <= 0)
  {
    sub_2231AF0BC(v4, "{}");
    goto LABEL_16;
  }
  sub_2231ABA1C(v4, "{");
  v0 = xmmword_2540CEE20;
  sub_22412214C((uint64_t)__p, (unsigned __int8 *)xmmword_2540CEE20);
  v8 = (void **)v4;
  v9 = (const char *)__p;
  v10 = v4;
  v11 = (const char *)__p;
  v12 = (const char *)__p;
  if (v5 == -1)
    sub_22316DD70();
  v13 = &v8;
  ((void (*)(void ****, _DWORD *))off_24EC6A340[v5])(&v13, v4);
  if (v7 < 0)
  {
    operator delete(__p[0]);
    v1 = qword_2540CEE30;
    v2 = (unsigned __int8 *)(v0 + 1);
    if (v2 != (unsigned __int8 *)qword_2540CEE30)
    {
LABEL_10:
      while (1)
      {
        v8 = (void **)v4;
        v9 = ",";
        v10 = v4;
        v11 = ",";
        v12 = ",";
        if (v5 == -1)
          break;
        __p[0] = &v8;
        ((void (*)(void **, _DWORD *))off_24EC6A328[v5])(__p, v4);
        sub_22412214C((uint64_t)__p, v2);
        v8 = (void **)v4;
        v9 = (const char *)__p;
        v10 = v4;
        v11 = (const char *)__p;
        v12 = (const char *)__p;
        if (v5 == -1)
          sub_22316DD70();
        v13 = &v8;
        ((void (*)(void ****, _DWORD *))off_24EC6A340[v5])(&v13, v4);
        if (v7 < 0)
          operator delete(__p[0]);
        if (++v2 == (unsigned __int8 *)v1)
          goto LABEL_14;
      }
LABEL_20:
      sub_22316DD70();
    }
  }
  else
  {
    v1 = qword_2540CEE30;
    v2 = (unsigned __int8 *)(v0 + 1);
    if (v2 != (unsigned __int8 *)qword_2540CEE30)
      goto LABEL_10;
  }
LABEL_14:
  v8 = (void **)v4;
  v9 = "}";
  v10 = v4;
  v11 = "}";
  v12 = "}";
  if (v5 == -1)
    goto LABEL_20;
  __p[0] = &v8;
  ((void (*)(void **, _DWORD *))off_24EC6A328[v5])(__p, v4);
LABEL_16:
  if (v5 == -1)
    sub_22316DD70();
  v8 = __p;
  result = ((uint64_t (*)(void ***, _DWORD *))off_24EC6A310[v5])(&v8, v4);
  if (v5 != -1)
    return ((uint64_t (*)(void ***, _DWORD *))off_24EC6A2F8[v5])(&v8, v4);
  return result;
}

void sub_2241219A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_22319B964((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  sub_22319B964((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_2241219F0(uint64_t a1, void *__src, size_t __len, char a4)
{
  __int128 *v8;
  size_t v9;
  size_t v10;
  __int128 v11;
  unint64_t v12;
  char **v13;
  char *v14[2];
  void *__p[2];
  unint64_t v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  if (__len >= 0x17)
  {
    v9 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v9 = __len | 7;
    v10 = v9 + 1;
    v8 = (__int128 *)operator new(v9 + 1);
    *((_QWORD *)&v11 + 1) = __len;
    v12 = v10 | 0x8000000000000000;
    *(_QWORD *)&v11 = v8;
    goto LABEL_8;
  }
  HIBYTE(v12) = __len;
  v8 = &v11;
  if (__len)
LABEL_8:
    memmove(v8, __src, __len);
  *((_BYTE *)v8 + __len) = 0;
  *(_OWORD *)__p = v11;
  v16 = v12;
  v17 = a4;
  v14[0] = 0;
  v14[1] = 0;
  v13 = v14;
  sub_2240EE228((uint64_t **)&v13, (uint64_t *)v14, (const void **)__p, (uint64_t)__p);
  (*(void (**)(uint64_t, char ***))(*(_QWORD *)a1 + 32))(a1, &v13);
  sub_22323DF84((uint64_t)&v13, v14[0]);
  if (SHIBYTE(v16) < 0)
    operator delete(__p[0]);
}

void sub_224121B34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_22323DF84((uint64_t)&a12, a13);
  if (a20 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_224121B6C(uint64_t a1, const void ***a2)
{
  const void ***v3;
  const void **v4;
  const void **v5;
  const void ***v6;
  BOOL v7;
  char **v8;
  char *v9[2];

  v9[0] = 0;
  v9[1] = 0;
  v8 = v9;
  v3 = a2 + 1;
  v4 = *a2;
  if (*a2 != (const void **)(a2 + 1))
  {
    do
    {
      sub_2240EE228((uint64_t **)&v8, (uint64_t *)v9, v4 + 4, (uint64_t)(v4 + 4));
      v5 = (const void **)v4[1];
      if (v5)
      {
        do
        {
          v6 = (const void ***)v5;
          v5 = (const void **)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (const void ***)v4[2];
          v7 = *v6 == v4;
          v4 = (const void **)v6;
        }
        while (!v7);
      }
      v4 = (const void **)v6;
    }
    while (v6 != v3);
  }
  (*(void (**)(uint64_t, char ***))(*(_QWORD *)a1 + 32))(a1, &v8);
  sub_22323DF84((uint64_t)&v8, v9[0]);
}

void sub_224121C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  sub_22323DF84((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_224121C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  sub_22323DF84((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t sub_224121C58(uint64_t a1, char *a2, size_t a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  size_t v11;
  int v12;
  __int128 *p_dst;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  void *__p[2];
  _BYTE v20[9];
  __int128 __dst;
  unint64_t v22;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  if (v9)
    return v6;
  if (a3)
  {
    v11 = a3;
    do
    {
      if (!v11)
        goto LABEL_8;
      v12 = a2[--v11];
    }
    while (v12 != 46);
    if (v11 == -1)
    {
LABEL_8:
      v7 = 0;
      v8 = 256;
      *(_WORD *)&v20[7] = 256;
      LOBYTE(__p[0]) = 0;
      goto LABEL_21;
    }
    if (a3 >= v11)
      a3 = v11;
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    if (a3 >= 0x17)
    {
      v14 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a3 | 7) != 0x17)
        v14 = a3 | 7;
      v15 = v14 + 1;
      p_dst = (__int128 *)operator new(v14 + 1);
      *((_QWORD *)&__dst + 1) = a3;
      v22 = v15 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v22) = a3;
      p_dst = &__dst;
      if (!a3)
        goto LABEL_20;
    }
    memmove(p_dst, a2, a3);
LABEL_20:
    *((_BYTE *)p_dst + a3) = 0;
    *(_OWORD *)__p = __dst;
    *(_QWORD *)v20 = v22;
    v20[8] = 1;
    v7 = HIBYTE(v22);
    v8 = *((_QWORD *)&__dst + 1);
    goto LABEL_21;
  }
  LOBYTE(__p[0]) = 0;
  v20[8] = 0;
LABEL_21:
  if ((v7 & 0x80u) == 0)
    v16 = __p;
  else
    v16 = (void **)__p[0];
  if ((v7 & 0x80u) == 0)
    v17 = v7;
  else
    v17 = v8;
  v10 = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 64))(a1, v16, v17);
  if (v20[8] && (v20[7] & 0x80000000) != 0)
    operator delete(__p[0]);
  return v10;
}

void sub_224121DDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_224121E00(unsigned __int8 **a1, unsigned __int8 **a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  BOOL v4;
  uint64_t *v5;
  void *v6;
  size_t v7;
  int v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  const void *v16;
  size_t v17;
  const void *v18;
  size_t v19;
  int v20;
  uint64_t *v21;
  size_t v22;
  size_t v23;
  const void *v24;
  size_t v25;
  size_t v26;
  int v27;
  int v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  void *v32;
  _BYTE v33[15];
  unsigned __int8 v34;
  _QWORD v35[3];

  v35[2] = *MEMORY[0x24BDAC8D0];
  qword_2540CEE18 = 0;
  qword_2540CEE10 = 0;
  qword_2540CEE08 = (uint64_t)&qword_2540CEE10;
  v2 = *a1;
  v3 = a1[2];
  v30 = *a2;
  v29 = a2[2];
  v4 = *a1 == *a2 && v3 == a2[2];
  if (!v4)
  {
    v5 = &qword_2540CE000;
    while (1)
    {
      sub_22412214C((uint64_t)&v32, v2);
      v6 = v32;
      v35[0] = *(_QWORD *)v33;
      *(_QWORD *)((char *)v35 + 7) = *(_QWORD *)&v33[7];
      v7 = v34;
      v8 = (char)v34;
      v9 = operator new(0x40uLL);
      v9[4] = v6;
      v9[5] = v35[0];
      *(_QWORD *)((char *)v9 + 47) = *(_QWORD *)((char *)v35 + 7);
      *((_BYTE *)v9 + 55) = v8;
      v35[0] = 0;
      *(_QWORD *)((char *)v35 + 7) = 0;
      *((_BYTE *)v9 + 56) = *v3;
      v10 = (uint64_t *)v5[449];
      v12 = &qword_2540CEE10;
      v11 = qword_2540CEE10;
      v31 = v3;
      if (v10 != &qword_2540CEE10)
      {
        v13 = qword_2540CEE10;
        if (qword_2540CEE10)
        {
          do
          {
            v12 = (uint64_t *)v13;
            v13 = *(_QWORD *)(v13 + 8);
          }
          while (v13);
        }
        else
        {
          v14 = &qword_2540CEE10;
          do
          {
            v12 = (uint64_t *)v14[2];
            v4 = *v12 == (_QWORD)v14;
            v14 = v12;
          }
          while (v4);
        }
        v15 = *((char *)v12 + 55);
        if (v15 >= 0)
          v16 = v12 + 4;
        else
          v16 = (const void *)v12[4];
        if (v15 >= 0)
          v17 = *((unsigned __int8 *)v12 + 55);
        else
          v17 = v12[5];
        if (v8 >= 0)
          v18 = v9 + 4;
        else
          v18 = v6;
        if (v8 < 0)
          v7 = v9[5];
        if (v7 >= v17)
          v19 = v17;
        else
          v19 = v7;
        v20 = memcmp(v16, v18, v19);
        if (v20)
        {
          if ((v20 & 0x80000000) == 0)
            goto LABEL_28;
        }
        else if (v17 >= v7)
        {
LABEL_28:
          if (!v11)
          {
LABEL_57:
            v12 = &qword_2540CEE10;
            v21 = &qword_2540CEE10;
            goto LABEL_58;
          }
          while (1)
          {
            v12 = (uint64_t *)v11;
            v22 = *(unsigned __int8 *)(v11 + 55);
            v23 = *(_QWORD *)(v11 + 40);
            if ((v22 & 0x80u) == 0)
              v24 = (const void *)(v11 + 32);
            else
              v24 = *(const void **)(v11 + 32);
            if ((v22 & 0x80u) == 0)
              v25 = v22;
            else
              v25 = v23;
            if (v25 >= v7)
              v26 = v7;
            else
              v26 = v25;
            v27 = memcmp(v18, v24, v26);
            if (v27)
            {
              if (v27 < 0)
                goto LABEL_30;
            }
            else if (v7 < v25)
            {
LABEL_30:
              v11 = *v12;
              v21 = v12;
              if (!*v12)
                goto LABEL_58;
              continue;
            }
            v28 = memcmp(v24, v18, v26);
            if (v28)
            {
              if ((v28 & 0x80000000) == 0)
                goto LABEL_53;
            }
            else if (v25 >= v7)
            {
              goto LABEL_53;
            }
            v11 = v12[1];
            if (!v11)
            {
              v21 = v12 + 1;
              goto LABEL_58;
            }
          }
        }
      }
      if (!v11)
        goto LABEL_57;
      v21 = v12 + 1;
      if (v12[1])
      {
LABEL_53:
        if (v8 < 0)
          operator delete(v6);
        operator delete(v9);
        v5 = &qword_2540CE000;
        ++v2;
        v3 = v31 + 1;
        if (v2 == v30)
          goto LABEL_61;
      }
      else
      {
LABEL_58:
        *v9 = 0;
        v9[1] = 0;
        v9[2] = v12;
        *v21 = (uint64_t)v9;
        v5 = &qword_2540CE000;
        if (*(_QWORD *)qword_2540CEE08)
        {
          qword_2540CEE08 = *(_QWORD *)qword_2540CEE08;
          v9 = (_QWORD *)*v21;
        }
        sub_2231A9A8C((uint64_t *)qword_2540CEE10, v9);
        ++qword_2540CEE18;
        ++v2;
        v3 = v31 + 1;
        if (v2 == v30)
        {
LABEL_61:
          if (v3 == v29)
            return;
        }
      }
    }
  }
}

void sub_224122108(_Unwind_Exception *a1)
{
  void *v1;
  int v2;

  if (v2 < 0)
  {
    operator delete(v1);
    sub_22323DF84((uint64_t)&qword_2540CEE08, (char *)qword_2540CEE10);
    _Unwind_Resume(a1);
  }
  sub_22323DF84((uint64_t)&qword_2540CEE08, (char *)qword_2540CEE10);
  _Unwind_Resume(a1);
}

uint64_t sub_22412214C(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  int v7;
  size_t v8;
  void **v9;
  unint64_t v10;
  unint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  _BYTE v20[24];
  int v21;
  void *__dst[2];
  unint64_t v23;
  _QWORD v24[5];
  _QWORD *v25;

  v21 = 0;
  v3 = operator new();
  *(_QWORD *)(v3 + 272) = 0;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)v3 = 0u;
  sub_223195210(v3);
  v24[0] = v3;
  v4 = (_QWORD *)(v3 + 16);
  v5 = *a2;
  if (v5 > 2)
  {
    sub_2231813E8(v4, (uint64_t)"Invalid(", 8);
    v6 = (_QWORD *)std::ostream::operator<<();
    sub_2231813E8(v6, (uint64_t)")", 1);
  }
  else
  {
    sub_2231813E8(v4, (uint64_t)(&off_24EC6A280)[2 * v5], (uint64_t)(&off_24EC6A280)[2 * v5 + 1]);
  }
  v7 = *(_DWORD *)(v3 + 120);
  if ((v7 & 0x10) != 0)
  {
    v10 = *(_QWORD *)(v3 + 112);
    v11 = *(_QWORD *)(v3 + 72);
    if (v10 < v11)
    {
      *(_QWORD *)(v3 + 112) = v11;
      v10 = v11;
    }
    v12 = *(const void **)(v3 + 64);
    v8 = v10 - (_QWORD)v12;
    if (v10 - (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_29;
  }
  else
  {
    if ((v7 & 8) == 0)
    {
      v8 = 0;
      HIBYTE(v23) = 0;
      v9 = __dst;
      goto LABEL_17;
    }
    v12 = *(const void **)(v3 + 40);
    v8 = *(_QWORD *)(v3 + 56) - (_QWORD)v12;
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
LABEL_29:
      sub_22316DBC0();
  }
  if (v8 >= 0x17)
  {
    v13 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v13 = v8 | 7;
    v14 = v13 + 1;
    v9 = (void **)operator new(v13 + 1);
    __dst[1] = (void *)v8;
    v23 = v14 | 0x8000000000000000;
    __dst[0] = v9;
    goto LABEL_16;
  }
  HIBYTE(v23) = v8;
  v9 = __dst;
  if (v8)
LABEL_16:
    memmove(v9, v12, v8);
LABEL_17:
  *((_BYTE *)v9 + v8) = 0;
  v15 = v24[0];
  if (v24[0])
  {
    v16 = MEMORY[0x24BEDB7F0];
    v17 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v24[0] = *MEMORY[0x24BEDB7F0];
    v18 = *(_QWORD *)(v16 + 72);
    *(_QWORD *)(v15 + *(_QWORD *)(v17 - 24)) = *(_QWORD *)(v16 + 64);
    *(_QWORD *)(v15 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v15 + 16) = v18;
    if (*(char *)(v15 + 111) < 0)
      operator delete(*(void **)(v15 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v15 + 128);
    MEMORY[0x227684CE8](v15, 0x10B2C40EED050F3);
  }
  v24[0] = v20;
  v24[1] = __dst;
  v24[2] = v20;
  v24[3] = __dst;
  v24[4] = __dst;
  if (v21 == -1)
    sub_22316DD70();
  v25 = v24;
  ((void (*)(_QWORD **, _BYTE *))off_24EC6A2E0[v21])(&v25, v20);
  if (SHIBYTE(v23) < 0)
    operator delete(__dst[0]);
  if (v21 == -1)
    sub_22316DD70();
  v24[0] = __dst;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC6A310[v21])(v24, v20);
  if (v21 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC6A2F8[v21])(v24, v20);
  return result;
}

void sub_224122430(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x227684CE8](v2, 0x10B2C40EED050F3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22412245C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_224122474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_22319B964((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  sub_22319B964((uint64_t)&a10);
  _Unwind_Resume(a1);
}

_QWORD *sub_2241224B4(uint64_t a1, _QWORD **a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  char v15;
  char v16[8];
  _QWORD **v17;
  char *v18;

  v3 = a3 + 1;
  v4 = *a2;
  if ((_QWORD *)*a3 == a3 + 1)
    return sub_2231813E8(v4, (uint64_t)"{}", 2);
  sub_2231813E8(v4, (uint64_t)"{", 1);
  v7 = (_QWORD *)*a3;
  v8 = *a3 + 32;
  sub_2231813E8(*a2, (uint64_t)"{", 1);
  v16[0] = 1;
  v17 = a2;
  v18 = &v15;
  sub_224122688(v8, (uint64_t)v16);
  sub_2231813E8(*a2, (uint64_t)"}", 1);
  v9 = (_QWORD *)v7[1];
  if (v9)
  {
    do
    {
      v10 = v9;
      v9 = (_QWORD *)*v9;
    }
    while (v9);
  }
  else
  {
    do
    {
      v10 = (_QWORD *)v7[2];
      v11 = *v10 == (_QWORD)v7;
      v7 = v10;
    }
    while (!v11);
  }
  if (v10 != v3)
  {
    do
    {
      sub_2231813E8(*a2, (uint64_t)",", 1);
      sub_2231813E8(*a2, (uint64_t)"{", 1);
      v16[0] = 1;
      v17 = a2;
      v18 = &v15;
      sub_224122688((uint64_t)(v10 + 4), (uint64_t)v16);
      sub_2231813E8(*a2, (uint64_t)"}", 1);
      v12 = (_QWORD *)v10[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v10[2];
          v11 = *v13 == (_QWORD)v10;
          v10 = v13;
        }
        while (!v11);
      }
      v10 = v13;
    }
    while (v13 != v3);
  }
  return sub_2231813E8(*a2, (uint64_t)"}", 1);
}

_QWORD *sub_224122688(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  char **v9;
  const char *v10;
  uint64_t v11;

  if (!*(_BYTE *)a2)
    sub_2231813E8(**(_QWORD ***)(a2 + 8), (uint64_t)",", 1);
  *(_BYTE *)a2 = 0;
  v4 = *(char *)(a1 + 23);
  if (v4 >= 0)
    v5 = a1;
  else
    v5 = *(_QWORD *)a1;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a1 + 23);
  else
    v6 = *(_QWORD *)(a1 + 8);
  sub_2231813E8(**(_QWORD ***)(a2 + 8), v5, v6);
  if (!*(_BYTE *)a2)
  {
    sub_2231813E8(**(_QWORD ***)(a2 + 8), (uint64_t)",", 1);
    *(_BYTE *)a2 = 0;
    v7 = **(_QWORD ***)(a2 + 8);
    v8 = *(unsigned __int8 *)(a1 + 24);
    if (v8 <= 2)
      goto LABEL_11;
LABEL_14:
    sub_2231813E8(v7, (uint64_t)"Invalid(", 8);
    v7 = (_QWORD *)std::ostream::operator<<();
    v10 = ")";
    v11 = 1;
    return sub_2231813E8(v7, (uint64_t)v10, v11);
  }
  *(_BYTE *)a2 = 0;
  v7 = **(_QWORD ***)(a2 + 8);
  v8 = *(unsigned __int8 *)(a1 + 24);
  if (v8 > 2)
    goto LABEL_14;
LABEL_11:
  v9 = &(&off_24EC6A280)[2 * v8];
  v10 = *v9;
  v11 = (uint64_t)v9[1];
  return sub_2231813E8(v7, (uint64_t)v10, v11);
}

void sub_224122780(_BYTE *__src@<X0>, uint64_t __len@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v3;
  int64_t v7;
  size_t v8;
  int v9;
  uint64_t v10;
  void **p_dst;
  uint64_t v12;
  uint64_t v13;
  char v14;
  size_t v15;
  _QWORD *v16;
  _QWORD *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  size_t *v22;
  unint64_t v23;
  size_t *v24;
  _BYTE *v25;
  unint64_t v26;
  int8x8_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  size_t *v31;
  int64_t v32;
  _QWORD *v33;
  __int128 v34;
  void **__dst;
  __int128 v36;
  size_t v37;
  _BYTE v38[15];
  unsigned __int8 v39;
  _QWORD v40[2];
  _QWORD v41[2];
  _QWORD v42[3];

  v42[2] = *MEMORY[0x24BDAC8D0];
  if (!__len)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
    *(_BYTE *)(a3 + 32) = 0;
    *(_BYTE *)(a3 + 80) = 0;
    return;
  }
  v7 = 0;
  v8 = __len;
  while (__src[v7] != 35)
  {
    if (__len == ++v7)
    {
      LOBYTE(v9) = 0;
      v10 = -1;
      goto LABEL_14;
    }
  }
  LOBYTE(v9) = 0;
  v10 = -1;
  if (__len != v7 && v7 != -1)
  {
    if (__len >= v7)
      v8 = v7;
    else
      v8 = __len;
    v9 = 1;
    if (!v8)
    {
      v32 = __len + ~v7;
      if (__len >= v32)
        v15 = v32;
      else
        v15 = __len;
      if (v15 <= 0x7FFFFFFFFFFFFFF7)
        goto LABEL_25;
LABEL_81:
      sub_22316DBC0();
    }
    v10 = v7;
  }
LABEL_14:
  if (v8 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v8 >= 0x17)
  {
    v12 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v12 = v8 | 7;
    v13 = v12 + 1;
    p_dst = (void **)operator new(v12 + 1);
    *(_QWORD *)&v36 = v8;
    *((_QWORD *)&v36 + 1) = v13 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v36) = v8;
    p_dst = (void **)&__dst;
  }
  memmove(p_dst, __src, v8);
  *((_BYTE *)p_dst + v8) = 0;
  v8 = (size_t)__dst;
  v42[0] = v36;
  *(_QWORD *)((char *)v42 + 7) = *(_QWORD *)((char *)&v36 + 7);
  v3 = HIBYTE(v36);
  __dst = 0;
  v36 = 0uLL;
  if ((v9 & 1) == 0)
  {
    v17 = 0;
    v18 = 0;
    goto LABEL_36;
  }
  v9 = 0;
  if (__len >= __len + ~v10)
    v15 = __len + ~v10;
  else
    v15 = __len;
  if (v15 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_81;
LABEL_25:
  if (v15 >= 0x17)
  {
    v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v19 = v15 | 7;
    v20 = v19 + 1;
    v16 = operator new(v19 + 1);
    *(_QWORD *)&v34 = v15;
    *((_QWORD *)&v34 + 1) = v20 | 0x8000000000000000;
    v33 = v16;
  }
  else
  {
    HIBYTE(v34) = v15;
    v16 = &v33;
    if (!v15)
      goto LABEL_33;
  }
  memmove(v16, &__src[__len - v15], v15);
LABEL_33:
  *((_BYTE *)v16 + v15) = 0;
  v17 = v33;
  v40[0] = v34;
  *(_QWORD *)((char *)v40 + 7) = *(_QWORD *)((char *)&v34 + 7);
  v14 = HIBYTE(v34);
  v34 = 0uLL;
  v33 = 0;
  v41[0] = v40[0];
  *(_QWORD *)((char *)v41 + 7) = *(_QWORD *)((char *)v40 + 7);
  v40[0] = 0;
  *(_QWORD *)((char *)v40 + 7) = 0;
  if (v9)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
    *(_BYTE *)(a3 + 32) = 0;
    v21 = 1;
    *(_BYTE *)(a3 + 80) = 0;
    goto LABEL_66;
  }
  v18 = 1;
LABEL_36:
  *(_QWORD *)&v38[7] = *(_QWORD *)((char *)v42 + 7);
  v37 = v8;
  *(_QWORD *)v38 = v42[0];
  v39 = v3;
  v42[0] = 0;
  *(_QWORD *)((char *)v42 + 7) = 0;
  if ((v3 & 0x80u) == 0)
    v22 = &v37;
  else
    v22 = (size_t *)v8;
  v23 = v3;
  if ((v3 & 0x80u) != 0)
    v23 = *(_QWORD *)v38;
  if (v23)
  {
    v24 = v22;
    if (v23 >= 8)
    {
      v24 = (size_t *)((char *)v22 + (v23 & 0xFFFFFFFFFFFFFFF8));
      v25 = (char *)v22 + 3;
      v26 = v23 & 0xFFFFFFFFFFFFFFF8;
      while (1)
      {
        v27 = vceq_s8(*(int8x8_t *)(v25 - 3), (int8x8_t)0x2323232323232323);
        if ((v27.i8[0] & 1) != 0)
        {
          *(v25 - 3) = 95;
          if ((v27.i8[1] & 1) == 0)
          {
LABEL_47:
            if ((v27.i8[2] & 1) == 0)
              goto LABEL_48;
            goto LABEL_56;
          }
        }
        else if ((v27.i8[1] & 1) == 0)
        {
          goto LABEL_47;
        }
        *(v25 - 2) = 95;
        if ((v27.i8[2] & 1) == 0)
        {
LABEL_48:
          if ((v27.i8[3] & 1) == 0)
            goto LABEL_49;
          goto LABEL_57;
        }
LABEL_56:
        *(v25 - 1) = 95;
        if ((v27.i8[3] & 1) == 0)
        {
LABEL_49:
          if ((v27.i8[4] & 1) == 0)
            goto LABEL_50;
          goto LABEL_58;
        }
LABEL_57:
        *v25 = 95;
        if ((v27.i8[4] & 1) == 0)
        {
LABEL_50:
          if ((v27.i8[5] & 1) == 0)
            goto LABEL_51;
          goto LABEL_59;
        }
LABEL_58:
        v25[1] = 95;
        if ((v27.i8[5] & 1) == 0)
        {
LABEL_51:
          if ((v27.i8[6] & 1) == 0)
            goto LABEL_52;
          goto LABEL_60;
        }
LABEL_59:
        v25[2] = 95;
        if ((v27.i8[6] & 1) == 0)
        {
LABEL_52:
          if ((v27.i8[7] & 1) != 0)
            goto LABEL_61;
          goto LABEL_44;
        }
LABEL_60:
        v25[3] = 95;
        if ((v27.i8[7] & 1) != 0)
LABEL_61:
          v25[4] = 95;
LABEL_44:
        v25 += 8;
        v26 -= 8;
        if (!v26)
        {
          if (v23 == (v23 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_63;
          break;
        }
      }
    }
    v31 = (size_t *)((char *)v22 + v23);
    do
    {
      if (*(_BYTE *)v24 == 35)
        *(_BYTE *)v24 = 95;
      v24 = (size_t *)((char *)v24 + 1);
    }
    while (v24 != v31);
LABEL_63:
    v8 = v37;
    v3 = v39;
  }
  v28 = *(_QWORD *)v38;
  v29 = *(_QWORD *)&v38[7];
  *(_QWORD *)a3 = v8;
  *(_QWORD *)(a3 + 8) = v28;
  *(_QWORD *)(a3 + 15) = v29;
  *(_BYTE *)(a3 + 23) = v3;
  *(_BYTE *)(a3 + 24) = 1;
  *(_BYTE *)(a3 + 32) = 0;
  *(_BYTE *)(a3 + 80) = 0;
  if ((v18 & 1) == 0)
    goto LABEL_68;
  v8 = 0;
  v3 = 0;
  v21 = 0;
LABEL_66:
  v30 = v41[0];
  *(_QWORD *)(a3 + 32) = v17;
  *(_QWORD *)(a3 + 40) = v30;
  *(_QWORD *)(a3 + 47) = *(_QWORD *)((char *)v41 + 7);
  *(_BYTE *)(a3 + 55) = v14;
  v41[0] = 0;
  *(_QWORD *)((char *)v41 + 7) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  *(_BYTE *)(a3 + 80) = 1;
  if ((v21 & 1) != 0)
    return;
  if ((v3 & 0x80) == 0)
  {
LABEL_68:
    if ((SHIBYTE(v36) & 0x80000000) == 0)
      return;
    goto LABEL_69;
  }
  operator delete((void *)v8);
  if (SHIBYTE(v36) < 0)
LABEL_69:
    operator delete(__dst);
}

void sub_224122BE0(_Unwind_Exception *exception_object)
{
  void *v1;
  char v2;
  char v3;

  if ((v3 & 1) == 0 && v2 < 0)
  {
    operator delete(v1);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_224122C08(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  int v4;
  BOOL v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  const void **v16;
  unsigned __int8 *v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  BOOL v24;

  v2 = a2;
  v4 = a2[24];
  if (a1[24])
    v5 = v4 == 0;
  else
    v5 = 1;
  if (v5)
  {
    if ((a1[24] != 0) != (v4 != 0))
      return 0;
  }
  else
  {
    v7 = a1[23];
    if ((v7 & 0x80u) == 0)
      v8 = a1[23];
    else
      v8 = *((_QWORD *)a1 + 1);
    v9 = a2[23];
    v10 = (char)v9;
    if ((v9 & 0x80u) != 0)
      v9 = *((_QWORD *)a2 + 1);
    if (v8 != v9)
      return 0;
    if (v10 < 0)
      a2 = *(unsigned __int8 **)a2;
    if ((v7 & 0x80) != 0)
    {
      if (memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)))
        return 0;
    }
    else if (a1[23])
    {
      v11 = a1;
      while (*v11 == *a2)
      {
        ++v11;
        ++a2;
        if (!--v7)
          goto LABEL_23;
      }
      return 0;
    }
  }
LABEL_23:
  result = (a1[80] != 0) == (v2[80] != 0);
  if (!a1[80] || !v2[80])
    return result;
  v12 = a1[55];
  if ((v12 & 0x80u) == 0)
    v13 = a1[55];
  else
    v13 = *((_QWORD *)a1 + 5);
  v14 = v2[55];
  v15 = (char)v14;
  if ((v14 & 0x80u) != 0)
    v14 = *((_QWORD *)v2 + 5);
  if (v13 != v14)
    return 0;
  v16 = (const void **)(a1 + 32);
  if (v15 >= 0)
    v17 = v2 + 32;
  else
    v17 = (unsigned __int8 *)*((_QWORD *)v2 + 4);
  if ((v12 & 0x80) != 0)
    return memcmp(*v16, v17, *((_QWORD *)a1 + 5)) == 0;
  if (!a1[55])
    return 1;
  v18 = v12 - 1;
  do
  {
    v20 = *(unsigned __int8 *)v16;
    v16 = (const void **)((char *)v16 + 1);
    v19 = v20;
    v22 = *v17++;
    v21 = v22;
    v24 = v18-- != 0;
    result = v19 == v21;
  }
  while (v19 == v21 && v24);
  return result;
}

_QWORD *sub_224122DB0(_QWORD *a1, uint64_t a2)
{
  int v4;
  const char *v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  const char *v9;
  uint64_t v10;
  _QWORD *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  int v15;
  const char *v16;
  uint64_t v17;
  _QWORD *v18;

  sub_2231813E8(a1, (uint64_t)"{", 1);
  sub_2245054F4(a1, (uint64_t *)a2);
  sub_2231813E8(a1, (uint64_t)",", 1);
  if (*(_BYTE *)(a2 + 40))
  {
    v4 = *(char *)(a2 + 39);
    if (v4 >= 0)
      v5 = (const char *)(a2 + 16);
    else
      v5 = *(const char **)(a2 + 16);
    if (v4 >= 0)
      v6 = *(unsigned __int8 *)(a2 + 39);
    else
      v6 = *(_QWORD *)(a2 + 24);
    v7 = a1;
  }
  else
  {
    v5 = "nullopt";
    v7 = a1;
    v6 = 7;
  }
  sub_2231813E8(v7, (uint64_t)v5, v6);
  sub_2231813E8(a1, (uint64_t)",", 1);
  if (*(_BYTE *)(a2 + 72))
  {
    v8 = *(char *)(a2 + 71);
    if (v8 >= 0)
      v9 = (const char *)(a2 + 48);
    else
      v9 = *(const char **)(a2 + 48);
    if (v8 >= 0)
      v10 = *(unsigned __int8 *)(a2 + 71);
    else
      v10 = *(_QWORD *)(a2 + 56);
    v11 = a1;
  }
  else
  {
    v9 = "nullopt";
    v11 = a1;
    v10 = 7;
  }
  sub_2231813E8(v11, (uint64_t)v9, v10);
  sub_2231813E8(a1, (uint64_t)",", 1);
  if (*(_BYTE *)(a2 + 96))
    sub_2245054F4(a1, (uint64_t *)(a2 + 80));
  else
    sub_2231813E8(a1, (uint64_t)"nullopt", 7);
  sub_2231813E8(a1, (uint64_t)",", 1);
  if (*(_BYTE *)(a2 + 160))
  {
    v14 = *(const char **)(a2 + 112);
    v13 = a2 + 112;
    v12 = v14;
    v15 = *(char *)(v13 + 23);
    if (v15 >= 0)
      v16 = (const char *)v13;
    else
      v16 = v12;
    if (v15 >= 0)
      v17 = *(unsigned __int8 *)(v13 + 23);
    else
      v17 = *(_QWORD *)(v13 + 8);
    v18 = a1;
  }
  else
  {
    v16 = "nullopt";
    v18 = a1;
    v17 = 7;
  }
  sub_2231813E8(v18, (uint64_t)v16, v17);
  sub_2231813E8(a1, (uint64_t)"}", 1);
  return a1;
}

_QWORD *sub_224122F48(_QWORD *result)
{
  *result = off_24EC6A368;
  return result;
}

double sub_224122F60@<D0>(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  double result;
  __int128 v4;
  uint64_t v5;
  int v6;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CEE70);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CEE70))
  {
    sub_224123ECC();
    if (byte_2540CEECF < 0)
    {
      sub_223197FA4(&xmmword_2540CEE88, (void *)xmmword_2540CEEB8, *((unint64_t *)&xmmword_2540CEEB8 + 1));
    }
    else
    {
      xmmword_2540CEE88 = xmmword_2540CEEB8;
      unk_2540CEE98 = unk_2540CEEC8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CEE88, &dword_22314D000);
    __cxa_guard_release(&qword_2540CEE70);
  }
  v6 = -1;
  if (byte_2540CEE9F < 0)
  {
    sub_223197FA4(&v4, (void *)xmmword_2540CEE88, *((unint64_t *)&xmmword_2540CEE88 + 1));
  }
  else
  {
    v4 = xmmword_2540CEE88;
    v5 = unk_2540CEE98;
  }
  result = *(double *)&v4;
  *(_OWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = v5;
  return result;
}

void sub_22412305C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CEE70);
  _Unwind_Resume(a1);
}

void sub_224123074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12)
{
  uint64_t v12;

  if (a12 != -1)
    ((void (*)(uint64_t, uint64_t *))off_24EC6A440[a12])(v12 - 17, &a9);
  _Unwind_Resume(exception_object);
}

void sub_2241230A8(char *a1@<X8>)
{
  a1[23] = 2;
  strcpy(a1, "{}");
}

void sub_2241230C0(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

BOOL sub_2241230C8(uint64_t a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 24))(&v6);
  v2 = v6;
  v1 = v7;
  if (!v7)
    return v2 != 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return v2 != 0;
  ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
  std::__shared_weak_count::__release_weak(v1);
  return v2 != 0;
}

_QWORD *sub_224123150(_QWORD *result, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v3 = result;
  v4 = *a2;
  *result = &off_24EC6A3B8;
  result[1] = v4;
  if (v4)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &off_24EC6A4B0;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
    v3[2] = v5;
    *a2 = 0;
    return v3;
  }
  else
  {
    result[2] = 0;
    *a2 = 0;
  }
  return result;
}

uint64_t sub_2241231D8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_224123240(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2241232A8(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 8))
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/IData.cpp", 228, (uint64_t)"data_", 5, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_7;
  }
  if (*(_QWORD *)(a1 + 8))
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
LABEL_7:
    abort();
  }
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(a1 + 8));
}

uint64_t sub_22412336C(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

void sub_2241233E8(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::string *v10;
  __int128 v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  void *__p[2];
  std::string::size_type v26;
  char v27;
  _QWORD v28[3];
  int v29;
  std::string v30;
  const char *v31;
  const char *v32;
  std::string *v33;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  v28[0] = v2;
  v28[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (!v2)
  {
    HIBYTE(v26) = 0;
    LOBYTE(__p[0]) = 0;
    if (!v3)
      goto LABEL_22;
    goto LABEL_18;
  }
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(std::__shared_weak_count **)(a1 + 16);
  v23 = *(_QWORD *)(a1 + 8);
  v24 = v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v6 + 32))(&v30);
  v10 = std::string::insert(&v30, 0, ",", 1uLL);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v26 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (v7)
  {
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v3 = (std::__shared_weak_count *)v28[1];
  if (v28[1])
  {
LABEL_18:
    v14 = (unint64_t *)&v3->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
LABEL_22:
  v16 = *(_QWORD *)(a1 + 8);
  v17 = *(std::__shared_weak_count **)(a1 + 16);
  v23 = v16;
  v24 = v17;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v22 = v16;
  strcpy((char *)v28, "viz::SharedData");
  v28[2] = 0xF00000000000000;
  v29 = 1;
  v30.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
  v30.__r_.__value_.__l.__size_ = (std::string::size_type)"{";
  v30.__r_.__value_.__r.__words[2] = (std::string::size_type)v28;
  v31 = "{";
  v32 = "{";
  sub_2231ABB0C((uint64_t *)&v30.__r_.__value_.__r.__words[2], (uint64_t)v28);
  sub_224016838((uint64_t)&v27, (uint64_t)v28, &v22);
  v30.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
  v30.__r_.__value_.__l.__size_ = (std::string::size_type)__p;
  v30.__r_.__value_.__r.__words[2] = (std::string::size_type)v28;
  v31 = (const char *)__p;
  v32 = (const char *)__p;
  if (v29 == -1)
    sub_22316DD70();
  v33 = &v30;
  ((void (*)(std::string **, _QWORD *))off_24EC6A470[v29])(&v33, v28);
  v30.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
  v30.__r_.__value_.__l.__size_ = (std::string::size_type)"}";
  v30.__r_.__value_.__r.__words[2] = (std::string::size_type)v28;
  v31 = "}";
  v32 = "}";
  if (v29 == -1)
    sub_22316DD70();
  v33 = &v30;
  ((void (*)(std::string **, _QWORD *))off_24EC6A488[v29])(&v33, v28);
  if (v29 == -1)
    sub_22316DD70();
  v30.__r_.__value_.__r.__words[0] = (std::string::size_type)&v33;
  ((void (*)(std::string *, _QWORD *))off_24EC6A458[v29])(&v30, v28);
  if (v29 != -1)
    ((void (*)(std::string *, _QWORD *))off_24EC6A440[v29])(&v30, v28);
  if (!v17)
    goto LABEL_34;
  v20 = (unint64_t *)&v17->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (v21)
  {
LABEL_34:
    if ((SHIBYTE(v26) & 0x80000000) == 0)
      return;
LABEL_37:
    operator delete(__p[0]);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (SHIBYTE(v26) < 0)
    goto LABEL_37;
}

void sub_2241236F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  if (*(char *)(v3 - 57) < 0)
    operator delete(*(void **)(v3 - 80));
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_22412372C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  sub_22319B964((uint64_t)&a20);
  sub_223167354((uint64_t)&a11);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_224123768(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::string *v12;
  void *v13;
  char v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  int v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  void *__p[2];
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  std::string __dst;
  int v37;

  v4 = *(void **)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  __p[0] = v4;
  __p[1] = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  if (!v4)
  {
    v13 = 0;
    v14 = 0;
    if (!v5)
      goto LABEL_22;
    goto LABEL_18;
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(std::__shared_weak_count **)(a1 + 16);
  v34 = *(_QWORD *)(a1 + 8);
  v35 = v9;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v8 + 40))(&__dst);
  v12 = std::string::insert(&__dst, 0, ",", 1uLL);
  v13 = (void *)v12->__r_.__value_.__r.__words[0];
  v14 = HIBYTE(v12->__r_.__value_.__r.__words[2]);
  v12->__r_.__value_.__r.__words[0] = 0;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (v9)
  {
    v15 = (unint64_t *)&v9->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v5 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
LABEL_18:
    v17 = (unint64_t *)&v5->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
LABEL_22:
  v19 = *(_QWORD *)(a1 + 8);
  v20 = *(std::__shared_weak_count **)(a1 + 16);
  v34 = v19;
  v35 = v20;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  if (v19)
  {
    v23 = *(_QWORD *)(a1 + 8);
    v24 = *(std::__shared_weak_count **)(a1 + 16);
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v23 + 40))(__p);
    v37 = -1;
    if (SHIBYTE(v33) < 0)
    {
      sub_223197FA4(&__dst, __p[0], (unint64_t)__p[1]);
      v27 = SHIBYTE(v33);
      *(std::string *)a2 = __dst;
      if (v27 < 0)
        operator delete(__p[0]);
    }
    else
    {
      *(_OWORD *)a2 = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 16) = v33;
    }
    if (v24)
    {
      v28 = (unint64_t *)&v24->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v20 = v35;
    if (!v35)
    {
LABEL_44:
      if ((v14 & 0x80) == 0)
        return;
LABEL_47:
      operator delete(v13);
      return;
    }
  }
  else
  {
    *(_BYTE *)(a2 + 23) = 7;
    strcpy((char *)a2, "nullptr");
    if (!v20)
      goto LABEL_44;
  }
  v30 = (unint64_t *)&v20->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (v31)
    goto LABEL_44;
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  if (v14 < 0)
    goto LABEL_47;
}

void sub_224123A0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;
  char v21;

  sub_22319B964((uint64_t)&a20);
  if (a17 < 0)
  {
    operator delete(__p);
    sub_223167354((uint64_t)&a10);
    sub_223167354((uint64_t)&a18);
    if ((v21 & 0x80) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    sub_223167354((uint64_t)&a10);
    sub_223167354((uint64_t)&a18);
    if ((v21 & 0x80) == 0)
      goto LABEL_3;
  }
  operator delete(v20);
  _Unwind_Resume(a1);
}

void sub_224123A84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    sub_223167354((uint64_t)&a15);
    sub_223167354((uint64_t)&a12);
    _Unwind_Resume(a1);
  }
  sub_223167354((uint64_t)&a15);
  sub_223167354((uint64_t)&a12);
  _Unwind_Resume(a1);
}

_QWORD *sub_224123ACC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
    return (*(_QWORD *(**)(_QWORD *__return_ptr))(*(_QWORD *)v3 + 48))(a2);
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
}

_QWORD *sub_224123B54@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
    return (*(_QWORD *(**)(_QWORD *__return_ptr))(*(_QWORD *)v3 + 56))(a2);
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

const char *sub_224123BDC()
{
  return "unknown_package";
}

uint64_t sub_224123BEC(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unsigned __int8 *v5;
  unsigned __int8 **v6;
  int v7;
  BOOL v8;
  uint64_t result;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  int v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 **v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  int v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned __int8 **v29;
  BOOL v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  int v34;
  unsigned __int8 *v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  BOOL v42;

  if (*(_QWORD *)*a2 != *(_QWORD *)*a3 || *(unsigned __int8 *)(*a2 + 8) != *(unsigned __int8 *)(*a3 + 8))
    return 0;
  v5 = (unsigned __int8 *)a2[1];
  v6 = (unsigned __int8 **)a3[1];
  v7 = *((unsigned __int8 *)v6 + 24);
  if (v5[24])
    v8 = v7 == 0;
  else
    v8 = 1;
  if (v8)
  {
    if ((v5[24] != 0) != (v7 != 0))
      return 0;
  }
  else
  {
    v10 = v5[23];
    if ((v10 & 0x80u) == 0)
      v11 = (unsigned __int8 *)v5[23];
    else
      v11 = (unsigned __int8 *)*((_QWORD *)v5 + 1);
    v12 = (unsigned __int8 *)*((unsigned __int8 *)v6 + 23);
    v13 = (char)v12;
    if ((char)v12 < 0)
      v12 = v6[1];
    if (v11 != v12)
      return 0;
    if (v13 >= 0)
      v14 = (unsigned __int8 *)a3[1];
    else
      v14 = *v6;
    if ((v10 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v5, v14, *((_QWORD *)v5 + 1)))
        return 0;
    }
    else if (v5[23])
    {
      while (*v5 == *v14)
      {
        ++v5;
        ++v14;
        if (!--v10)
          goto LABEL_26;
      }
      return 0;
    }
  }
LABEL_26:
  v15 = (unsigned __int8 *)a2[2];
  v16 = (unsigned __int8 **)a3[2];
  v17 = *((unsigned __int8 *)v16 + 24);
  if (v15[24])
    v18 = v17 == 0;
  else
    v18 = 1;
  if (v18)
  {
    if ((v15[24] != 0) != (v17 != 0))
      return 0;
  }
  else
  {
    v23 = v15[23];
    if ((v23 & 0x80u) == 0)
      v24 = (unsigned __int8 *)v15[23];
    else
      v24 = (unsigned __int8 *)*((_QWORD *)v15 + 1);
    v25 = (unsigned __int8 *)*((unsigned __int8 *)v16 + 23);
    v26 = (char)v25;
    if ((char)v25 < 0)
      v25 = v16[1];
    if (v24 != v25)
      return 0;
    if (v26 >= 0)
      v27 = (unsigned __int8 *)a3[2];
    else
      v27 = *v16;
    if ((v23 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v15, v27, *((_QWORD *)v15 + 1)))
        return 0;
    }
    else if (v15[23])
    {
      while (*v15 == *v27)
      {
        ++v15;
        ++v27;
        if (!--v23)
          goto LABEL_32;
      }
      return 0;
    }
  }
LABEL_32:
  v19 = a2[3];
  v20 = a3[3];
  v21 = *(unsigned __int8 *)(v20 + 16);
  if (*(_BYTE *)(v19 + 16))
    v22 = v21 == 0;
  else
    v22 = 1;
  if (v22)
  {
    if ((*(_BYTE *)(v19 + 16) != 0) == (v21 != 0))
      goto LABEL_55;
    return 0;
  }
  if (*(_QWORD *)v19 != *(_QWORD *)v20 || *(unsigned __int8 *)(v19 + 8) != *(unsigned __int8 *)(v20 + 8))
    return 0;
LABEL_55:
  v28 = (unsigned __int8 *)a2[4];
  v29 = (unsigned __int8 **)a3[4];
  if (v28[48])
    v30 = *((_BYTE *)v29 + 48) == 0;
  else
    v30 = 1;
  if (v30)
    return (v28[48] != 0) == (*((_BYTE *)v29 + 48) != 0);
  v31 = v28[23];
  if ((v31 & 0x80u) == 0)
    v32 = (unsigned __int8 *)v28[23];
  else
    v32 = (unsigned __int8 *)*((_QWORD *)v28 + 1);
  v33 = (unsigned __int8 *)*((unsigned __int8 *)v29 + 23);
  v34 = (char)v33;
  if ((char)v33 < 0)
    v33 = v29[1];
  if (v32 != v33)
    return 0;
  if (v34 >= 0)
    v35 = (unsigned __int8 *)a3[4];
  else
    v35 = *v29;
  if ((v31 & 0x80) != 0)
    return memcmp(*(const void **)v28, v35, *((_QWORD *)v28 + 1)) == 0;
  if (!v28[23])
    return 1;
  v36 = v31 - 1;
  do
  {
    v38 = *v28++;
    v37 = v38;
    v40 = *v35++;
    v39 = v40;
    v42 = v36-- != 0;
    result = v37 == v39;
  }
  while (v37 == v39 && v42);
  return result;
}

void sub_224123ECC()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CEE78);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CEE78))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::IData]", qword_2540CEEA0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2540CEEA0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CEE78);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CEE80);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CEE80))
    {
      sub_224573040((uint64_t)qword_2540CEEA0, (uint64_t)&xmmword_2540CEEB8);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CEEB8, &dword_22314D000);
      __cxa_guard_release(&qword_2540CEE80);
    }
  }
}

void sub_224123F9C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CEE80);
  _Unwind_Resume(a1);
}

void sub_224123FB4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CEE78);
  _Unwind_Resume(a1);
}

void sub_224123FD0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_224123FF4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_22412400C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIKN4cv3d3kit3viz5IDataEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIKN4cv3d3kit3viz5IDataEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIKN4cv3d3kit3viz5IDataEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIKN4cv3d3kit3viz5IDataEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_QWORD *sub_22412407C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24EC21AC8;
  sub_2231AD66C((uint64_t)(a1 + 8));
  a1[1] = &off_24EC219D8;
  v2 = (std::__shared_weak_count *)a1[3];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_224124100(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24EC21AC8;
  sub_2231AD66C((uint64_t)(a1 + 8));
  a1[1] = &off_24EC219D8;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_224124184(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t *v25;
  BOOL v26;
  int v27;
  uint64_t *v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  __int16 v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  __int16 v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v61[2];
  std::__shared_weak_count *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  __int16 v67;
  _QWORD v68[2];
  std::__shared_weak_count *v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  __int16 v74;

  if (*(uint64_t (***)())a2 != &off_24EC6A528)
    return 0;
  if (a1 == a2)
    return 1;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(std::__shared_weak_count **)(a1 + 24);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (v10)
    {
      if (!v6)
        goto LABEL_26;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (!v6)
        goto LABEL_26;
    }
    v6 = *(_QWORD *)(a1 + 16);
    v11 = *(std::__shared_weak_count **)(a1 + 24);
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else if (!v6)
  {
    goto LABEL_26;
  }
  if (*(_BYTE *)(a1 + 61))
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v6 + 96))(&v60, v6, 0);
    v15 = *(_QWORD *)(a2 + 16);
    v16 = *(std::__shared_weak_count **)(a2 + 24);
    if (v16)
      goto LABEL_27;
LABEL_24:
    if (!v15)
      goto LABEL_43;
    goto LABEL_40;
  }
LABEL_26:
  v60 = 0;
  v15 = *(_QWORD *)(a2 + 16);
  v16 = *(std::__shared_weak_count **)(a2 + 24);
  if (!v16)
    goto LABEL_24;
LABEL_27:
  v17 = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldxr(v17);
  while (__stxr(v18 + 1, v17));
  do
    v19 = __ldaxr(v17);
  while (__stlxr(v19 - 1, v17));
  if (v19)
  {
    if (!v15)
      goto LABEL_43;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    if (!v15)
      goto LABEL_43;
  }
  v15 = *(_QWORD *)(a2 + 16);
  v20 = *(std::__shared_weak_count **)(a2 + 24);
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    do
      v23 = __ldaxr(v21);
    while (__stlxr(v23 - 1, v21));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
LABEL_40:
  if (*(_BYTE *)(a2 + 61))
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v15 + 96))(&v59, v15, 0);
    v24 = *(_DWORD *)(a1 + 56);
    if (v24 != *(_DWORD *)(a2 + 56))
      goto LABEL_64;
    goto LABEL_44;
  }
LABEL_43:
  v59 = 0;
  v24 = *(_DWORD *)(a1 + 56);
  if (v24 != *(_DWORD *)(a2 + 56))
    goto LABEL_64;
LABEL_44:
  v25 = (uint64_t *)(a1 + 32);
  if (*(_DWORD *)(a1 + 32))
    v26 = *(_DWORD *)(a1 + 36) == 0;
  else
    v26 = 1;
  v27 = v26;
  v28 = (uint64_t *)(a2 + 32);
  if (*(_DWORD *)(a2 + 32))
  {
    v29 = *(_DWORD *)(a2 + 36) == 0;
    if (((v27 ^ v29) & 1) == 0)
    {
      if ((v27 & v29) == 1)
        goto LABEL_53;
      goto LABEL_58;
    }
  }
  else if ((v27 & 1) != 0)
  {
    if ((v27 & 1) == 1)
    {
LABEL_53:
      v30 = *v25;
      v2 = (_DWORD)v30 == *v28 && HIDWORD(v30) == HIDWORD(*v28);
      goto LABEL_65;
    }
LABEL_58:
    v68[0] = &off_24EC1F8C8;
    v31 = *(_QWORD *)(a1 + 16);
    v32 = *(std::__shared_weak_count **)(a1 + 24);
    if (v32)
    {
      v33 = (unint64_t *)&v32->__shared_owners_;
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
      v35 = *(_QWORD *)(a1 + 48);
      v36 = *(_DWORD *)(a1 + 56);
      v37 = *(_WORD *)(a1 + 60);
      do
        v38 = __ldxr(v33);
      while (__stxr(v38 + 1, v33));
    }
    else
    {
      v35 = *(_QWORD *)(a1 + 48);
      v37 = *(_WORD *)(a1 + 60);
      v36 = v24;
    }
    v68[1] = v31;
    v69 = v32;
    v70 = *v25;
    v71 = *(_DWORD *)(a1 + 40);
    v72 = v35;
    v73 = v36;
    v74 = v37;
    if (v32)
    {
      v41 = (unint64_t *)&v32->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    v61[0] = &off_24EC1F8C8;
    v43 = *(_QWORD *)(a2 + 16);
    v44 = *(std::__shared_weak_count **)(a2 + 24);
    if (v44)
    {
      v45 = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
      v47 = *(_QWORD *)(a2 + 48);
      v48 = *(_DWORD *)(a2 + 56);
      v49 = *(_WORD *)(a2 + 60);
      do
        v50 = __ldxr(v45);
      while (__stxr(v50 + 1, v45));
    }
    else
    {
      v47 = *(_QWORD *)(a2 + 48);
      v48 = *(_DWORD *)(a2 + 56);
      v49 = *(_WORD *)(a2 + 60);
    }
    v61[1] = v43;
    v62 = v44;
    v63 = *v28;
    v64 = *(_DWORD *)(a2 + 40);
    v65 = v47;
    v66 = v48;
    v67 = v49;
    if (v44)
    {
      v51 = (unint64_t *)&v44->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    v2 = sub_2242E4160(v24, (uint64_t)v68, (uint64_t)v61);
    v53 = v62;
    if (v62)
    {
      v54 = (unint64_t *)&v62->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    v56 = v69;
    if (v69)
    {
      v57 = (unint64_t *)&v69->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    goto LABEL_65;
  }
LABEL_64:
  v2 = 0;
LABEL_65:
  v39 = v59;
  v59 = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  v40 = v60;
  v60 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  return v2;
}

void sub_224124628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;

  if (a13)
  {
    p_shared_owners = (unint64_t *)&a13->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
      std::__shared_weak_count::__release_weak(a13);
    }
  }
  if (a20)
  {
    v23 = (unint64_t *)&a20->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))a20->__on_zero_shared)(a20);
      std::__shared_weak_count::__release_weak(a20);
    }
  }
  if (a9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
    v25 = a10;
    if (!a10)
LABEL_13:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v25 = a10;
    if (!a10)
      goto LABEL_13;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2241246FC(uint64_t *a1, uint64_t a2, void *__src, size_t __len, uint64_t a5, uint64_t a6)
{
  uint64_t *v6;
  _QWORD *v12;
  uint64_t v13;
  size_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  int v20;
  char v21;
  void *v22;
  BOOL v23;
  _BYTE *v24;
  _BYTE *v25;
  _BYTE *v26;
  unint64_t v27;
  int8x8_t v28;
  _QWORD *v29;
  uint64_t v30;
  int v31;
  size_t v32;
  __int128 *p_dst;
  unint64_t v34;
  unint64_t v35;
  const void *v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  _QWORD *v47;
  __int128 v48;
  int v49;
  void *__p[3];
  __int128 *v51;
  __int128 *v52;
  void **v53;
  __int128 __dst;
  unint64_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  *a1 = a2;
  v6 = a1 + 1;
  if (__len > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (__len >= 0x17)
  {
    v14 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v14 = __len | 7;
    v15 = v14 + 1;
    v12 = operator new(v14 + 1);
    *(_QWORD *)&v48 = __len;
    *((_QWORD *)&v48 + 1) = v15 | 0x8000000000000000;
    v47 = v12;
  }
  else
  {
    HIBYTE(v48) = __len;
    v12 = &v47;
    if (!__len)
    {
      LOBYTE(v47) = 0;
      v13 = *a1;
      if (*a1)
        goto LABEL_5;
      goto LABEL_12;
    }
  }
  memmove(v12, __src, __len);
  *((_BYTE *)v12 + __len) = 0;
  v13 = *a1;
  if (*a1)
  {
LABEL_5:
    LOBYTE(__p[0]) = 0;
    LOBYTE(v51) = 0;
    if (*(_BYTE *)(v13 + 264))
    {
      if (*(char *)(v13 + 263) < 0)
      {
        sub_223197FA4(__p, *(void **)(v13 + 240), *(_QWORD *)(v13 + 248));
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)(v13 + 240);
        __p[2] = *(void **)(v13 + 256);
      }
      LOBYTE(v51) = 1;
    }
    goto LABEL_15;
  }
LABEL_12:
  LOBYTE(__p[0]) = 0;
  LOBYTE(v51) = 0;
LABEL_15:
  v16 = operator new();
  v17 = v16;
  v18 = v47;
  *(_QWORD *)&__dst = v48;
  *(_QWORD *)((char *)&__dst + 7) = *(_QWORD *)((char *)&v48 + 7);
  v19 = HIBYTE(v48);
  v20 = SHIBYTE(v48);
  v47 = 0;
  v48 = 0uLL;
  v21 = (char)v51;
  if ((_BYTE)v51)
  {
    v22 = __p[1];
    *(void **)(v16 + 24) = __p[0];
    *(_QWORD *)(v16 + 32) = v22;
    *(void **)(v16 + 39) = *(void **)((char *)&__p[1] + 7);
    LOBYTE(v22) = HIBYTE(__p[2]);
    memset(__p, 0, sizeof(__p));
    *(_QWORD *)(v16 + 8) = __dst;
    *(_QWORD *)(v16 + 15) = *(_QWORD *)((char *)&__dst + 7);
    v21 = 1;
    *(_BYTE *)(v16 + 47) = (_BYTE)v22;
  }
  else
  {
    *(_QWORD *)(v16 + 8) = __dst;
    *(_QWORD *)(v16 + 15) = *(_QWORD *)((char *)&__dst + 7);
    *(_BYTE *)(v16 + 24) = 0;
  }
  *(_QWORD *)v16 = v18;
  *(_BYTE *)(v16 + 23) = v20;
  *(_BYTE *)(v16 + 48) = v21;
  v23 = v20 < 0;
  if (v20 >= 0)
    v24 = (_BYTE *)v16;
  else
    v24 = v18;
  if (v23)
    v19 = *(_QWORD *)(v16 + 8);
  if (!v19)
    goto LABEL_45;
  v25 = v24;
  if (v19 < 8)
    goto LABEL_57;
  v25 = &v24[v19 & 0xFFFFFFFFFFFFFFF8];
  v26 = v24 + 3;
  v27 = v19 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v28 = vceq_s8(*(int8x8_t *)(v26 - 3), (int8x8_t)0x3A3A3A3A3A3A3A3ALL);
    if ((v28.i8[0] & 1) != 0)
    {
      *(v26 - 3) = 95;
      if ((v28.i8[1] & 1) == 0)
        goto LABEL_29;
    }
    else if ((v28.i8[1] & 1) == 0)
    {
LABEL_29:
      if ((v28.i8[2] & 1) != 0)
        goto LABEL_30;
      goto LABEL_38;
    }
    *(v26 - 2) = 95;
    if ((v28.i8[2] & 1) != 0)
    {
LABEL_30:
      *(v26 - 1) = 95;
      if ((v28.i8[3] & 1) == 0)
        goto LABEL_31;
      goto LABEL_39;
    }
LABEL_38:
    if ((v28.i8[3] & 1) == 0)
    {
LABEL_31:
      if ((v28.i8[4] & 1) != 0)
        goto LABEL_32;
      goto LABEL_40;
    }
LABEL_39:
    *v26 = 95;
    if ((v28.i8[4] & 1) != 0)
    {
LABEL_32:
      v26[1] = 95;
      if ((v28.i8[5] & 1) == 0)
        goto LABEL_33;
      goto LABEL_41;
    }
LABEL_40:
    if ((v28.i8[5] & 1) == 0)
    {
LABEL_33:
      if ((v28.i8[6] & 1) == 0)
        goto LABEL_42;
      goto LABEL_34;
    }
LABEL_41:
    v26[2] = 95;
    if ((v28.i8[6] & 1) == 0)
    {
LABEL_42:
      if ((v28.i8[7] & 1) == 0)
        goto LABEL_26;
      goto LABEL_43;
    }
LABEL_34:
    v26[3] = 95;
    if ((v28.i8[7] & 1) == 0)
      goto LABEL_26;
LABEL_43:
    v26[4] = 95;
LABEL_26:
    v26 += 8;
    v27 -= 8;
  }
  while (v27);
  if (v19 == (v19 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_45;
LABEL_57:
  v37 = &v24[v19];
  do
  {
    if (*v25 == 58)
      *v25 = 95;
    ++v25;
  }
  while (v25 != v37);
LABEL_45:
  v53 = (void **)v16;
  *v6 = v16;
  v29 = (_QWORD *)operator new();
  *v29 = &off_24EC6A6C8;
  v29[1] = 0;
  v29[2] = 0;
  v29[3] = v17;
  a1[2] = (uint64_t)v29;
  if ((_BYTE)v51 && SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v49 = 0;
  v30 = operator new();
  *(_QWORD *)(v30 + 272) = 0;
  *(_OWORD *)(v30 + 240) = 0u;
  *(_OWORD *)(v30 + 256) = 0u;
  *(_OWORD *)(v30 + 208) = 0u;
  *(_OWORD *)(v30 + 224) = 0u;
  *(_OWORD *)(v30 + 176) = 0u;
  *(_OWORD *)(v30 + 192) = 0u;
  *(_OWORD *)(v30 + 144) = 0u;
  *(_OWORD *)(v30 + 160) = 0u;
  *(_OWORD *)(v30 + 112) = 0u;
  *(_OWORD *)(v30 + 128) = 0u;
  *(_OWORD *)(v30 + 80) = 0u;
  *(_OWORD *)(v30 + 96) = 0u;
  *(_OWORD *)(v30 + 48) = 0u;
  *(_OWORD *)(v30 + 64) = 0u;
  *(_OWORD *)(v30 + 16) = 0u;
  *(_OWORD *)(v30 + 32) = 0u;
  *(_OWORD *)v30 = 0u;
  sub_223195210(v30);
  __p[0] = (void *)v30;
  std::ostream::operator<<();
  v31 = *(_DWORD *)(v30 + 120);
  if ((v31 & 0x10) != 0)
  {
    v34 = *(_QWORD *)(v30 + 112);
    v35 = *(_QWORD *)(v30 + 72);
    if (v34 < v35)
    {
      *(_QWORD *)(v30 + 112) = v35;
      v34 = v35;
    }
    v36 = *(const void **)(v30 + 64);
    v32 = v34 - (_QWORD)v36;
    if (v34 - (unint64_t)v36 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_80;
  }
  else
  {
    if ((v31 & 8) == 0)
    {
      v32 = 0;
      HIBYTE(v55) = 0;
      p_dst = &__dst;
      goto LABEL_65;
    }
    v36 = *(const void **)(v30 + 40);
    v32 = *(_QWORD *)(v30 + 56) - (_QWORD)v36;
    if (v32 > 0x7FFFFFFFFFFFFFF7)
LABEL_80:
      sub_22316DBC0();
  }
  if (v32 >= 0x17)
  {
    v38 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v32 | 7) != 0x17)
      v38 = v32 | 7;
    v39 = v38 + 1;
    p_dst = (__int128 *)operator new(v38 + 1);
    *((_QWORD *)&__dst + 1) = v32;
    v55 = v39 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_64;
  }
  HIBYTE(v55) = v32;
  p_dst = &__dst;
  if (v32)
LABEL_64:
    memmove(p_dst, v36, v32);
LABEL_65:
  *((_BYTE *)p_dst + v32) = 0;
  v40 = (char *)__p[0];
  if (__p[0])
  {
    v41 = MEMORY[0x24BEDB7F0];
    v42 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)__p[0] = *MEMORY[0x24BEDB7F0];
    v43 = *(_QWORD *)(v41 + 72);
    *(_QWORD *)&v40[*(_QWORD *)(v42 - 24)] = *(_QWORD *)(v41 + 64);
    *((_QWORD *)v40 + 3) = MEMORY[0x24BEDB848] + 16;
    *((_QWORD *)v40 + 2) = v43;
    if (v40[111] < 0)
      operator delete(*((void **)v40 + 11));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v40 + 128);
    MEMORY[0x227684CE8](v40, 0x10B2C40EED050F3);
  }
  __p[0] = &v47;
  __p[1] = &__dst;
  __p[2] = &v47;
  v51 = &__dst;
  v52 = &__dst;
  if (v49 == -1)
    sub_22316DD70();
  v53 = __p;
  ((void (*)(void ***, _QWORD **))off_24EC6A708[v49])(&v53, &v47);
  if (SHIBYTE(v55) < 0)
    operator delete((void *)__dst);
  if (v49 == -1)
    sub_22316DD70();
  __p[0] = &__dst;
  ((void (*)(void **, _QWORD **))off_24EC6A738[v49])(__p, &v47);
  if (v49 != -1)
    ((void (*)(void **, _QWORD **))off_24EC6A720[v49])(__p, &v47);
  v44 = (char *)a1[1];
  if (v44[23] < 0)
  {
    v44 = *(char **)v44;
    v45 = *(_QWORD *)(a1[1] + 8);
  }
  else
  {
    v45 = v44[23];
  }
  sub_2231AD150(v44, v45, ".", 1, 0, (uint64_t)(a1 + 6));
  a1[11] = 0;
  a1[10] = (uint64_t)(a1 + 11);
  a1[9] = a5;
  a1[12] = 0;
  sub_2241297DC(a1 + 10, *(_QWORD **)a6, (_QWORD *)(a6 + 8));
  return a1;
}

void sub_224124D20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24)
{
  if (a22 && a21 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_224124DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (a24 < 0)
    operator delete(__p);
  sub_22319B964((uint64_t)&a9);
  sub_223167354(v24);
  _Unwind_Resume(a1);
}

void sub_224124E04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_22456E764((uint64_t *)va);
  JUMPOUT(0x224124E10);
}

uint64_t sub_224124E28(uint64_t a1)
{
  return a1 + 240;
}

uint64_t *sub_224124E30(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(v2 + 48) && *(char *)(v2 + 47) < 0)
    {
      operator delete(*(void **)(v2 + 24));
      if ((*(char *)(v2 + 23) & 0x80000000) == 0)
        goto LABEL_6;
    }
    else if ((*(char *)(v2 + 23) & 0x80000000) == 0)
    {
LABEL_6:
      MEMORY[0x227684CE8](v2, 0x1012C4045E9F9B4);
      return a1;
    }
    operator delete(*(void **)v2);
    goto LABEL_6;
  }
  return a1;
}

void sub_224124EA8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  __int16 v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  char *v24;
  char *v25;
  unint64_t v26;
  char *v27;
  int64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 *v36;
  char *v37;
  uint64_t v38;
  __int128 v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  char *v48;
  char *v49;
  unint64_t v50;
  int64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 *v58;
  char *v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  void *v63;
  _QWORD *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  unint64_t v74;
  void **v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  void *v98;
  unint64_t v99;
  char *v100;
  void *v101;
  char *v102;
  char *v103;
  char *v104;
  void *v105;
  unint64_t v106;
  unint64_t v107;
  _BYTE *v108;
  unint64_t v109;
  char *v110;
  int64_t v111;
  unint64_t v112;
  char *v113;
  char *v114;
  char *v115;
  char *v116;
  uint64_t v117;
  unint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  char *v123;
  unint64_t v124;
  char *v125;
  unint64_t v126;
  int64_t v127;
  unint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  __int128 *v134;
  char *v135;
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  __int128 *v149;
  _OWORD *v150;
  uint64_t v151;
  __int128 v152;
  uint64_t v153;
  _QWORD *v154;
  _QWORD *v155;
  unint64_t v156;
  _BYTE *v157;
  unint64_t v158;
  char *v159;
  int64_t v160;
  unint64_t v161;
  char *v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  __int128 *v167;
  _OWORD *v168;
  uint64_t v169;
  __int128 v170;
  uint64_t v171;
  void **v172;
  unint64_t v173;
  void *v174;
  uint64_t v175;
  char *v176;
  void *v177;
  _QWORD *v179;
  void *__p[2];
  __int128 v181;
  __int128 v182;
  void *v183;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(_QWORD **)(v1 + 80);
  v3 = (_QWORD *)(v1 + 88);
  *(_OWORD *)__p = 0u;
  v181 = 0u;
  v182 = 0u;
  if (v2 == v3)
    goto LABEL_207;
  v4 = 0;
  v5 = v2;
  do
  {
    v6 = v4;
    v7 = (_QWORD *)v5[1];
    if (v7)
    {
      do
      {
        v8 = v7;
        v7 = (_QWORD *)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        v8 = (_QWORD *)v5[2];
        v9 = *v8 == (_QWORD)v5;
        v5 = v8;
      }
      while (!v9);
    }
    ++v4;
    v5 = v8;
  }
  while (v8 != v3);
  v10 = v6 + 2;
  v11 = (unint64_t)(v6 + 2) >> 9;
  if ((v10 & 0x1FF) != 0)
    v12 = v11 + 1;
  else
    v12 = v11;
  if (!v12)
  {
    v64 = 0;
    v15 = 0;
    v65 = v4 + ((uint64_t)-MEMORY[0] >> 3);
    if (v65 < 1)
      goto LABEL_74;
    goto LABEL_71;
  }
  v13 = (char *)operator new(8 * v12);
  v14 = &v13[8 * v12];
  v15 = v13;
  v16 = v13;
  do
  {
    v17 = operator new(0x1000uLL);
    if (v16 != v14)
      goto LABEL_16;
    if (v15 > v13)
    {
      v18 = (v15 - v13) >> 3;
      if (v18 >= -1)
        v19 = v18 + 1;
      else
        v19 = v18 + 2;
      v20 = v19 >> 1;
      v21 = &v15[-8 * (v19 >> 1)];
      v22 = v14;
      if (v14 != v15)
      {
        memmove(v21, v15, v14 - v15);
        v22 = v15;
      }
      v16 = &v21[v14 - v15];
      v15 = &v22[-8 * v20];
      goto LABEL_16;
    }
    if (v14 == v13)
      v23 = 1;
    else
      v23 = (v14 - v13) >> 2;
    if (v23 >> 61)
      sub_223174E94();
    v24 = (char *)operator new(8 * v23);
    v25 = v13;
    v26 = v23 >> 2;
    v27 = &v24[8 * (v23 >> 2)];
    v16 = v27;
    v28 = v14 - v15;
    if (v14 != v15)
    {
      v16 = &v27[v28 & 0xFFFFFFFFFFFFFFF8];
      v29 = v28 - 8;
      if (v29 >= 0x38 && (v30 = 8 * v26, (unint64_t)(&v24[8 * v26] - v15) >= 0x20))
      {
        v34 = (v29 >> 3) + 1;
        v35 = 8 * (v34 & 0x3FFFFFFFFFFFFFFCLL);
        v31 = &v27[v35];
        v32 = &v15[v35];
        v36 = (__int128 *)(v15 + 16);
        v37 = &v24[v30 + 16];
        v38 = v34 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v39 = *v36;
          *((_OWORD *)v37 - 1) = *(v36 - 1);
          *(_OWORD *)v37 = v39;
          v36 += 2;
          v37 += 32;
          v38 -= 4;
        }
        while (v38);
        if (v34 == (v34 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_33;
      }
      else
      {
        v31 = &v24[8 * (v23 >> 2)];
        v32 = v15;
      }
      do
      {
        v33 = *(_QWORD *)v32;
        v32 += 8;
        *(_QWORD *)v31 = v33;
        v31 += 8;
      }
      while (v31 != v16);
    }
LABEL_33:
    v14 = &v24[8 * v23];
    if (v25)
      operator delete(v25);
    v15 = &v24[8 * (v23 >> 2)];
    v13 = v24;
LABEL_16:
    *(_QWORD *)v16 = v17;
    v16 += 8;
    --v12;
  }
  while (v12);
  v40 = (char *)__p[1];
  v41 = (char *)v181;
  while (v41 != v40)
  {
    if (v15 == v13)
    {
      if (v16 >= v14)
      {
        if (v14 == v13)
          v47 = 1;
        else
          v47 = (v14 - v13) >> 2;
        if (v47 >> 61)
          sub_223174E94();
        v48 = (char *)operator new(8 * v47);
        v49 = v48;
        v50 = (v47 + 3) >> 2;
        v15 = &v48[8 * v50];
        v51 = v16 - v13;
        v9 = v16 == v13;
        v16 = v15;
        if (!v9)
        {
          v16 = &v15[v51 & 0xFFFFFFFFFFFFFFF8];
          v52 = v51 - 8;
          v53 = &v48[8 * v50];
          v54 = v13;
          if (v52 < 0x38)
            goto LABEL_228;
          v55 = 8 * v50;
          v53 = &v48[8 * v50];
          v54 = v13;
          if ((unint64_t)(v53 - v13) < 0x20)
            goto LABEL_228;
          v56 = (v52 >> 3) + 1;
          v57 = 8 * (v56 & 0x3FFFFFFFFFFFFFFCLL);
          v53 = &v15[v57];
          v54 = &v13[v57];
          v58 = (__int128 *)(v13 + 16);
          v59 = &v48[v55 + 16];
          v60 = v56 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v61 = *v58;
            *((_OWORD *)v59 - 1) = *(v58 - 1);
            *(_OWORD *)v59 = v61;
            v58 += 2;
            v59 += 32;
            v60 -= 4;
          }
          while (v60);
          if (v56 != (v56 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_228:
            do
            {
              v62 = *(_QWORD *)v54;
              v54 += 8;
              *(_QWORD *)v53 = v62;
              v53 += 8;
            }
            while (v53 != v16);
          }
        }
        v14 = &v48[8 * v47];
        if (v13)
          operator delete(v13);
        v13 = v49;
      }
      else
      {
        v43 = (v14 - v16) >> 3;
        if (v43 >= -1)
          v44 = v43 + 1;
        else
          v44 = v43 + 2;
        v45 = v44 >> 1;
        v15 = &v13[8 * (v44 >> 1)];
        v46 = v13;
        if (v16 != v13)
        {
          memmove(v15, v13, v16 - v13);
          v46 = v16;
        }
        v16 = &v46[8 * v45];
      }
    }
    v42 = *((_QWORD *)v41 - 1);
    v41 -= 8;
    *((_QWORD *)v15 - 1) = v42;
    v15 -= 8;
    v40 = (char *)__p[1];
  }
  v63 = __p[0];
  __p[0] = v13;
  __p[1] = v15;
  *(_QWORD *)&v181 = v16;
  *((_QWORD *)&v181 + 1) = v14;
  *(_QWORD *)&v182 = 0;
  if (v63)
    operator delete(v63);
  if (v16 == v15)
  {
    v64 = 0;
    v65 = v4 + ((uint64_t)-*(_QWORD *)v15 >> 3);
    if (v65 < 1)
      goto LABEL_74;
    goto LABEL_71;
  }
  v64 = *(_QWORD **)v15;
  v65 = v4;
  if (v4 >= 1)
  {
LABEL_71:
    v66 = &v15[8 * ((unint64_t)v65 >> 9)];
    v67 = *(_QWORD *)v66 + 8 * (v65 & 0x1FF);
    if (v64 == (_QWORD *)v67)
      goto LABEL_207;
LABEL_75:
    v68 = 0;
    do
    {
      v69 = v67;
      if (v15 != v66)
        v69 = *(_QWORD *)v15 + 4096;
      if (v64 == (_QWORD *)v69)
      {
        v69 = (uint64_t)v64;
      }
      else
      {
        v70 = v64;
        do
        {
          *v70++ = v2[4];
          v71 = (_QWORD *)v2[1];
          v72 = v2;
          if (v71)
          {
            do
            {
              v2 = v71;
              v71 = (_QWORD *)*v71;
            }
            while (v71);
          }
          else
          {
            do
            {
              v2 = (_QWORD *)v72[2];
              v9 = *v2 == (_QWORD)v72;
              v72 = v2;
            }
            while (!v9);
          }
        }
        while (v70 != (_QWORD *)v69);
      }
      v68 += (v69 - (uint64_t)v64) >> 3;
      if (v15 == v66)
        break;
      v73 = (_QWORD *)*((_QWORD *)v15 + 1);
      v15 += 8;
      v64 = v73;
    }
    while (v73 != (_QWORD *)v67);
    *((_QWORD *)&v182 + 1) = v68;
    if (!v68)
      goto LABEL_207;
    v74 = 0;
    v75 = (void **)__p[1];
    while (1)
    {
      v76 = *(uint64_t *)((char *)v75 + ((v74 >> 6) & 0x3FFFFFFFFFFFFF8));
      v77 = *(_QWORD *)(v76 + 8 * (v74 & 0x1FF));
      if (!**(_BYTE **)(v77 + 32))
      {
        v79 = *(unint64_t **)(v77 + 40);
        v80 = atomic_load(*(unint64_t **)(a1 + 40));
        do
          __ldaxr(v79);
        while (__stlxr(v80, v79));
        v81 = *(_QWORD *)(*(_QWORD *)(v76 + 8 * (v74 & 0x1FF)) + 48);
        v82 = *(_QWORD **)(v81 + 80);
        v68 = *((_QWORD *)&v182 + 1);
        v74 = v182;
        v179 = (_QWORD *)(v81 + 88);
        if (v82 != (_QWORD *)(v81 + 88))
          break;
      }
LABEL_94:
      v75 = (void **)__p[1];
      --v68;
      v78 = v74 + 1;
      *(_QWORD *)&v182 = v74 + 1;
      *((_QWORD *)&v182 + 1) = v68;
      if (v74 + 1 >= 0x400)
      {
        v75 = (void **)((char *)__p[1] + 8);
        operator delete(*(void **)__p[1]);
        v78 = v74 - 511;
        __p[1] = v75;
        *(_QWORD *)&v182 = v74 - 511;
      }
      v74 = v78;
      if (!v68)
        goto LABEL_208;
    }
    while (1)
    {
      v84 = (char *)__p[1];
      v83 = (char *)v181;
      v85 = v181 - (unint64_t)__p[1];
      if ((void *)v181 == __p[1])
        v86 = 0;
      else
        v86 = (((_QWORD)v181 - (unint64_t)__p[1]) << 6) - 1;
      v87 = v74 + v68;
      if (v86 != v74 + v68)
        goto LABEL_187;
      if (v74 >= 0x200)
      {
        *(_QWORD *)&v182 = v74 - 512;
        v88 = (char *)__p[1] + 8;
        v89 = *(_QWORD *)__p[1];
        __p[1] = (char *)__p[1] + 8;
        if ((_QWORD)v181 != *((_QWORD *)&v181 + 1))
        {
LABEL_184:
          *(_QWORD *)v83 = v89;
          goto LABEL_185;
        }
        v90 = __p[0];
        if (v88 > __p[0])
        {
          v91 = (v88 - (char *)__p[0]) >> 3;
          if (v91 >= -1)
            v92 = v91 + 1;
          else
            v92 = v91 + 2;
          v93 = v92 >> 1;
          v94 = &v88[-8 * (v92 >> 1)];
          v95 = v181 - (_QWORD)v88;
          if ((char *)v181 != v88)
          {
            memmove(&v88[-8 * (v92 >> 1)], v84 + 8, v181 - (_QWORD)v88);
            v83 = v84 + 8;
          }
          v96 = &v83[-8 * v93];
          v83 = &v94[v95];
          __p[1] = v96;
          *(_QWORD *)&v181 = &v94[v95];
          goto LABEL_184;
        }
        if ((void *)v181 == __p[0])
          v107 = 1;
        else
          v107 = (uint64_t)(v181 - (unint64_t)__p[0]) >> 2;
        if (v107 >> 61)
          goto LABEL_222;
        v108 = operator new(8 * v107);
        v109 = v107 >> 2;
        v110 = &v108[8 * (v107 >> 2)];
        v111 = v83 - v88;
        v9 = v83 == v88;
        v83 = v110;
        if (!v9)
        {
          v83 = &v110[v111 & 0xFFFFFFFFFFFFFFF8];
          v112 = v111 - 8;
          if (v112 < 0x38)
          {
            v113 = &v108[8 * (v107 >> 2)];
            goto LABEL_181;
          }
          v145 = 8 * v109;
          v146 = &v108[8 * v109] - v88;
          v113 = &v108[8 * (v107 >> 2)];
          if (v146 < 0x20)
            goto LABEL_229;
          v147 = (v112 >> 3) + 1;
          v148 = 8 * (v147 & 0x3FFFFFFFFFFFFFFCLL);
          v113 = &v110[v148];
          v88 += v148;
          v149 = (__int128 *)(v84 + 24);
          v150 = &v108[v145 + 16];
          v151 = v147 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v152 = *v149;
            *(v150 - 1) = *(v149 - 1);
            *v150 = v152;
            v149 += 2;
            v150 += 2;
            v151 -= 4;
          }
          while (v151);
          if (v147 != (v147 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_229:
            do
            {
LABEL_181:
              v153 = *(_QWORD *)v88;
              v88 += 8;
              *(_QWORD *)v113 = v153;
              v113 += 8;
            }
            while (v113 != v83);
          }
        }
        __p[0] = v108;
        __p[1] = &v108[8 * (v107 >> 2)];
        *(_QWORD *)&v181 = v83;
        *((_QWORD *)&v181 + 1) = &v108[8 * v107];
        if (v90)
          operator delete(v90);
        goto LABEL_184;
      }
      v97 = v85 >> 3;
      v98 = __p[0];
      if (v85 >> 3 >= (unint64_t)((uint64_t)(*((_QWORD *)&v181 + 1) - (unint64_t)__p[0]) >> 3))
        break;
      if (*((_QWORD *)&v181 + 1) == (_QWORD)v181)
      {
        v183 = operator new(0x1000uLL);
        sub_22323CE2C(__p, &v183);
        v115 = (char *)__p[1];
        v114 = (char *)v181;
        v116 = (char *)__p[1] + 8;
        v117 = *(_QWORD *)__p[1];
        __p[1] = (char *)__p[1] + 8;
        if ((_QWORD)v181 != *((_QWORD *)&v181 + 1))
          goto LABEL_138;
        v139 = __p[0];
        if (v116 > __p[0])
        {
          v140 = (v116 - (char *)__p[0]) >> 3;
          if (v140 >= -1)
            v141 = v140 + 1;
          else
            v141 = v140 + 2;
          v142 = v141 >> 1;
          v143 = &v116[-8 * v142];
          v144 = v181 - (_QWORD)v116;
          if ((char *)v181 != v116)
            memmove(&v116[-8 * v142], v116, v181 - (_QWORD)v116);
          __p[1] = v143;
          *(_QWORD *)&v181 = &v143[v144];
          *(_QWORD *)&v143[v144] = v117;
          goto LABEL_185;
        }
        if ((void *)v181 == __p[0])
          v156 = 1;
        else
          v156 = (uint64_t)(v181 - (unint64_t)__p[0]) >> 2;
        if (v156 >> 61)
          goto LABEL_222;
        v157 = operator new(8 * v156);
        v158 = v156 >> 2;
        v159 = &v157[8 * (v156 >> 2)];
        v160 = v114 - v116;
        v9 = v114 == v116;
        v114 = v159;
        if (!v9)
        {
          v114 = &v159[v160 & 0xFFFFFFFFFFFFFFF8];
          v161 = v160 - 8;
          if (v161 < 0x38)
          {
            v162 = &v157[8 * (v156 >> 2)];
            goto LABEL_204;
          }
          v163 = 8 * v158;
          v164 = &v157[8 * v158] - v116;
          v162 = &v157[8 * (v156 >> 2)];
          if (v164 < 0x20)
            goto LABEL_230;
          v165 = (v161 >> 3) + 1;
          v166 = 8 * (v165 & 0x3FFFFFFFFFFFFFFCLL);
          v162 = &v159[v166];
          v116 += v166;
          v167 = (__int128 *)(v115 + 24);
          v168 = &v157[v163 + 16];
          v169 = v165 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v170 = *v167;
            *(v168 - 1) = *(v167 - 1);
            *v168 = v170;
            v167 += 2;
            v168 += 2;
            v169 -= 4;
          }
          while (v169);
          if (v165 != (v165 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_230:
            do
            {
LABEL_204:
              v171 = *(_QWORD *)v116;
              v116 += 8;
              *(_QWORD *)v162 = v171;
              v162 += 8;
            }
            while (v162 != v114);
          }
        }
        __p[0] = v157;
        __p[1] = &v157[8 * (v156 >> 2)];
        *(_QWORD *)&v181 = v114;
        *((_QWORD *)&v181 + 1) = &v157[8 * v156];
        if (v139)
          operator delete(v139);
LABEL_138:
        *(_QWORD *)v114 = v117;
LABEL_185:
        *(_QWORD *)&v181 = v181 + 8;
        goto LABEL_186;
      }
      v183 = operator new(0x1000uLL);
      sub_22323CCA0((char **)__p, &v183);
LABEL_186:
      v68 = *((_QWORD *)&v182 + 1);
      v74 = v182;
      v84 = (char *)__p[1];
      v87 = v182 + *((_QWORD *)&v182 + 1);
LABEL_187:
      *(_QWORD *)(*(_QWORD *)&v84[(v87 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v87 & 0x1FF)) = v82[4];
      *((_QWORD *)&v182 + 1) = ++v68;
      v154 = (_QWORD *)v82[1];
      if (v154)
      {
        do
        {
          v155 = v154;
          v154 = (_QWORD *)*v154;
        }
        while (v154);
      }
      else
      {
        do
        {
          v155 = (_QWORD *)v82[2];
          v9 = *v155 == (_QWORD)v82;
          v82 = v155;
        }
        while (!v9);
      }
      v82 = v155;
      if (v155 == v179)
        goto LABEL_94;
    }
    if (*((void **)&v181 + 1) == __p[0])
      v99 = 1;
    else
      v99 = (uint64_t)(*((_QWORD *)&v181 + 1) - (unint64_t)__p[0]) >> 2;
    if (v99 >> 61)
LABEL_222:
      sub_223174E94();
    v100 = (char *)operator new(8 * v99);
    v101 = operator new(0x1000uLL);
    v102 = &v100[8 * v97];
    v103 = &v100[8 * v99];
    if (v97 != v99)
    {
      *(_QWORD *)v102 = v101;
      v104 = v102 + 8;
      if (v83 == v84)
        goto LABEL_123;
      do
      {
LABEL_147:
        if (v102 == v100)
        {
          if (v104 >= v103)
          {
            if (v103 == v102)
              v124 = 1;
            else
              v124 = (v103 - v102) >> 2;
            if (v124 >> 61)
              sub_223174E94();
            v125 = (char *)operator new(8 * v124);
            v100 = v125;
            v126 = (v124 + 3) >> 2;
            v119 = &v125[8 * v126];
            v127 = v104 - v102;
            v9 = v104 == v102;
            v104 = v119;
            if (!v9)
            {
              v104 = &v119[v127 & 0xFFFFFFFFFFFFFFF8];
              v128 = v127 - 8;
              v129 = &v125[8 * v126];
              v130 = v102;
              if (v128 < 0x38)
                goto LABEL_231;
              v131 = 8 * v126;
              v129 = &v125[8 * v126];
              v130 = v102;
              if ((unint64_t)(v129 - v102) < 0x20)
                goto LABEL_231;
              v132 = (v128 >> 3) + 1;
              v133 = 8 * (v132 & 0x3FFFFFFFFFFFFFFCLL);
              v129 = &v119[v133];
              v130 = &v102[v133];
              v134 = (__int128 *)(v102 + 16);
              v135 = &v125[v131 + 16];
              v136 = v132 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v137 = *v134;
                *((_OWORD *)v135 - 1) = *(v134 - 1);
                *(_OWORD *)v135 = v137;
                v134 += 2;
                v135 += 32;
                v136 -= 4;
              }
              while (v136);
              if (v132 != (v132 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_231:
                do
                {
                  v138 = *(_QWORD *)v130;
                  v130 += 8;
                  *(_QWORD *)v129 = v138;
                  v129 += 8;
                }
                while (v129 != v104);
              }
            }
            v103 = &v125[8 * v124];
            operator delete(v102);
          }
          else
          {
            v121 = (v103 - v104) >> 3;
            if (v121 >= -1)
              v122 = v121 + 1;
            else
              v122 = v121 + 2;
            v123 = &v104[8 * (v122 >> 1)];
            v119 = &v102[8 * (v122 >> 1)];
            if (v104 == v102)
            {
              v100 = v104;
            }
            else
            {
              memmove(&v102[8 * (v122 >> 1)], v102, v104 - v102);
              v100 = v102;
            }
            v104 = v123;
          }
        }
        else
        {
          v119 = v102;
        }
        v120 = *((_QWORD *)v83 - 1);
        v83 -= 8;
        *((_QWORD *)v119 - 1) = v120;
        v102 = v119 - 8;
      }
      while (v83 != __p[1]);
      v98 = __p[0];
      __p[0] = v100;
      __p[1] = v102;
      *(_QWORD *)&v181 = v104;
      *((_QWORD *)&v181 + 1) = v103;
      if (!v98)
        goto LABEL_186;
LABEL_169:
      operator delete(v98);
      goto LABEL_186;
    }
    v105 = v101;
    if (v85 < 1)
    {
      if (v83 == v84)
        v118 = 1;
      else
        v118 = v85 >> 2;
      if (v118 >> 61)
        sub_223174E94();
      v102 = (char *)operator new(8 * v118);
      v103 = &v102[8 * v118];
      operator delete(v100);
      v100 = v102;
      *(_QWORD *)v102 = v105;
      v104 = v102 + 8;
      if (v83 != v84)
        goto LABEL_147;
    }
    else
    {
      v106 = v97 + 2;
      if (v97 >= -1)
        v106 = v97 + 1;
      v102 -= 8 * (v106 >> 1);
      *(_QWORD *)v102 = v101;
      v104 = v102 + 8;
      if (v83 != v84)
        goto LABEL_147;
    }
LABEL_123:
    __p[0] = v100;
    __p[1] = v102;
    *(_QWORD *)&v181 = v104;
    *((_QWORD *)&v181 + 1) = v103;
    if (!v98)
      goto LABEL_186;
    goto LABEL_169;
  }
LABEL_74:
  v66 = &v15[-8 * ((unint64_t)(511 - v65) >> 9)];
  v67 = *(_QWORD *)v66 + 8 * (~(511 - (_WORD)v65) & 0x1FF);
  if (v64 != (_QWORD *)v67)
    goto LABEL_75;
LABEL_207:
  v75 = (void **)__p[1];
LABEL_208:
  v172 = (void **)v181;
  *((_QWORD *)&v182 + 1) = 0;
  v173 = v181 - (_QWORD)v75;
  if ((_QWORD)v181 - (_QWORD)v75 >= 0x11uLL)
  {
    do
    {
      v174 = *v75++;
      operator delete(v174);
      __p[1] = v75;
      v173 -= 8;
    }
    while (v173 > 0x10);
  }
  if (v173 >> 3 == 1)
  {
    v175 = 256;
LABEL_214:
    *(_QWORD *)&v182 = v175;
  }
  else if (v173 >> 3 == 2)
  {
    v175 = 512;
    goto LABEL_214;
  }
  v176 = (char *)((char *)v75 - (char *)v172);
  if (v75 != v172)
  {
    do
    {
      v177 = *v75++;
      operator delete(v177);
    }
    while (v75 != v172);
    *(_QWORD *)&v181 = (char *)v172 + ((unint64_t)(v176 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (__p[0])
    operator delete(__p[0]);
}

void sub_224125ABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v14;

  if (a13 == a12)
  {
    v14 = __p;
    if (!__p)
      goto LABEL_3;
  }
  else
  {
    v14 = __p;
    if (!__p)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  operator delete(v14);
  _Unwind_Resume(exception_object);
}

void sub_224125AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  void *v12;

  operator delete(v12);
  operator delete(v11);
  sub_22323FBC0((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_224125AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13)
{
  void *v13;
  void *v15;

  if (v13)
  {
    operator delete(v13);
    if (a13 == a12)
    {
LABEL_3:
      v15 = a11;
      if (!a11)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if (a13 == a12)
  {
    goto LABEL_3;
  }
  v15 = a11;
  if (!a11)
LABEL_4:
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(v15);
  _Unwind_Resume(a1);
}

void sub_224125B5C()
{
  __cxa_end_catch();
  JUMPOUT(0x224125B64);
}

void sub_224125BFC(_QWORD *a1, uint64_t a2, int a3)
{
  unint64_t *v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  std::mutex *v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;

  if (**(_BYTE **)(a2 + 32))
  {
    v6 = *(unint64_t **)(a2 + 40);
    v7 = atomic_load(*(unint64_t **)(a1[9] + 40));
    do
      __ldaxr(v6);
    while (__stlxr(v7, v6));
    sub_224124EA8(a2);
    v8 = (_BYTE *)operator new();
    *v8 = 0;
    v9 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 32) = v8;
    if (v9)
      MEMORY[0x227684CE8](v9, 0x1000C4077774924);
    if (a3)
    {
      v10 = *a1;
      v11 = *(std::mutex **)(*a1 + 8);
      std::mutex::lock(v11);
      v12 = *(_QWORD **)(v10 + 16);
      v13 = (_QWORD *)(v10 + 24);
      if (v12 != v13)
      {
        do
        {
          v14 = *(char *)(a2 + 31);
          if (v14 >= 0)
            v15 = a2 + 8;
          else
            v15 = *(_QWORD *)(a2 + 8);
          if (v14 >= 0)
            v16 = *(unsigned __int8 *)(a2 + 31);
          else
            v16 = *(_QWORD *)(a2 + 16);
          (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v12[4] + 16))(v12[4], v15, v16, 0);
          v17 = (_QWORD *)v12[1];
          if (v17)
          {
            do
            {
              v18 = v17;
              v17 = (_QWORD *)*v17;
            }
            while (v17);
          }
          else
          {
            do
            {
              v18 = (_QWORD *)v12[2];
              v19 = *v18 == (_QWORD)v12;
              v12 = v18;
            }
            while (!v19);
          }
          v12 = v18;
        }
        while (v18 != v13);
      }
      std::mutex::unlock(v11);
    }
  }
}

void sub_224125D4C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_224125D60(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  _BYTE *v8;
  uint64_t v9;
  std::mutex *v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  _BYTE *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;

  v8 = *(_BYTE **)(a2 + 32);
  if (*v8)
  {
    if (*v8 != (_DWORD)a3)
    {
      *v8 = a3;
      if (a4)
      {
        v9 = *a1;
        v10 = *(std::mutex **)(*a1 + 8);
        std::mutex::lock(v10);
        v11 = *(_QWORD **)(v9 + 16);
        v12 = (_QWORD *)(v9 + 24);
        if (v11 != v12)
        {
          do
          {
            v13 = *(char *)(a2 + 31);
            if (v13 >= 0)
              v14 = a2 + 8;
            else
              v14 = *(_QWORD *)(a2 + 8);
            if (v13 >= 0)
              v15 = *(unsigned __int8 *)(a2 + 31);
            else
              v15 = *(_QWORD *)(a2 + 16);
            (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11[4] + 16))(v11[4], v14, v15, a3);
            v16 = (_QWORD *)v11[1];
            if (v16)
            {
              do
              {
                v17 = v16;
                v16 = (_QWORD *)*v16;
              }
              while (v16);
            }
            else
            {
              do
              {
                v17 = (_QWORD *)v11[2];
                v18 = *v17 == (_QWORD)v11;
                v11 = v17;
              }
              while (!v18);
            }
            v11 = v17;
          }
          while (v17 != v12);
        }
LABEL_40:
        std::mutex::unlock(v10);
      }
    }
  }
  else
  {
    v19 = (_BYTE *)operator new();
    *v19 = a3;
    v20 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 32) = v19;
    if (v20)
    {
      MEMORY[0x227684CE8](v20, 0x1000C4077774924);
      v19 = *(_BYTE **)(a2 + 32);
    }
    v21 = (unint64_t *)operator new();
    *v21 = (unint64_t)v19;
    v22 = *(unint64_t **)(a2 + 40);
    v23 = atomic_load(v21);
    do
      __ldaxr(v22);
    while (__stlxr(v23, v22));
    MEMORY[0x227684CE8]();
    sub_224124EA8(a2);
    if (a4)
    {
      v24 = *a1;
      v10 = *(std::mutex **)(*a1 + 8);
      std::mutex::lock(v10);
      v25 = *(_QWORD **)(v24 + 16);
      v26 = (_QWORD *)(v24 + 24);
      if (v25 != v26)
      {
        do
        {
          v27 = *(char *)(a2 + 31);
          if (v27 >= 0)
            v28 = a2 + 8;
          else
            v28 = *(_QWORD *)(a2 + 8);
          if (v27 >= 0)
            v29 = *(unsigned __int8 *)(a2 + 31);
          else
            v29 = *(_QWORD *)(a2 + 16);
          (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v25[4] + 16))(v25[4], v28, v29, a3);
          v30 = (_QWORD *)v25[1];
          if (v30)
          {
            do
            {
              v31 = v30;
              v30 = (_QWORD *)*v30;
            }
            while (v30);
          }
          else
          {
            do
            {
              v31 = (_QWORD *)v25[2];
              v18 = *v31 == (_QWORD)v25;
              v25 = v31;
            }
            while (!v18);
          }
          v25 = v31;
        }
        while (v31 != v26);
      }
      goto LABEL_40;
    }
  }
}

void sub_224125F80(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_224125F94(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_224125FA8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  std::__shared_mutex_base *v6;
  uint64_t v7;
  std::runtime_error *exception;

  if ((_DWORD)a3)
  {
    v6 = (std::__shared_mutex_base *)(*a1 + 72);
    std::__shared_mutex_base::lock(v6);
    sub_224125D60(a1, a2, a3, 1);
  }
  else
  {
    v7 = *(unsigned __int8 *)(a2 + 31);
    if ((v7 & 0x80u) != 0)
      v7 = *(_QWORD *)(a2 + 16);
    if (!v7)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Cannot set root context to inherit its enable-state");
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    v6 = (std::__shared_mutex_base *)(*a1 + 72);
    std::__shared_mutex_base::lock(v6);
    sub_224125BFC(a1, a2, 1);
  }
  std::__shared_mutex_base::unlock(v6);
}

void sub_224126070(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_224126088(_Unwind_Exception *a1)
{
  std::__shared_mutex_base *v1;

  std::__shared_mutex_base::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2241260A0(uint64_t a1)
{
  return a1 + 8;
}

uint64_t sub_2241260A8(uint64_t a1, void *__src, size_t __len, uint64_t *a4, char a5)
{
  void *v10;
  size_t v11;
  size_t v12;
  _BYTE *v13;
  _QWORD *v14;
  uint64_t v15;

  *(_QWORD *)a1 = off_24EC6A578;
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  if (__len >= 0x17)
  {
    v11 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v11 = __len | 7;
    v12 = v11 + 1;
    v10 = operator new(v11 + 1);
    *(_QWORD *)(a1 + 16) = __len;
    *(_QWORD *)(a1 + 24) = v12 | 0x8000000000000000;
    *(_QWORD *)(a1 + 8) = v10;
  }
  else
  {
    *(_BYTE *)(a1 + 31) = __len;
    v10 = (void *)(a1 + 8);
    if (!__len)
      goto LABEL_9;
  }
  memmove(v10, __src, __len);
LABEL_9:
  *((_BYTE *)v10 + __len) = 0;
  v13 = (_BYTE *)operator new();
  *v13 = a5;
  *(_QWORD *)(a1 + 32) = v13;
  v14 = (_QWORD *)operator new();
  *v14 = v13;
  *(_QWORD *)(a1 + 40) = v14;
  v15 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 48) = v15;
  return a1;
}

void sub_2241261C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v4;

  v4 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v4)
  {
    MEMORY[0x227684CE8](v4, 0x1000C4077774924);
    if ((*(char *)(v1 + 31) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 31) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_22412621C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    sub_224128AA0(v2);
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
    MEMORY[0x227684CE8](v3, 0x80C40B8603338);
  v4 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v4)
    MEMORY[0x227684CE8](v4, 0x1000C4077774924);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_2241262AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    sub_224128AA0(v2);
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
    MEMORY[0x227684CE8](v3, 0x80C40B8603338);
  v4 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v4)
    MEMORY[0x227684CE8](v4, 0x1000C4077774924);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x227684CE8);
}

void sub_22412633C(uint64_t a1, uint64_t a2)
{
  sub_224125FA8(*(uint64_t **)(a1 + 48), a1, a2);
}

uint64_t sub_22412634C(uint64_t a1)
{
  return **(_QWORD **)(a1 + 48);
}

uint64_t sub_224126358(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48) + 8;
}

uint64_t sub_224126364(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48) + 24;
}

uint64_t sub_224126370(uint64_t a1, char *a2, uint64_t a3)
{
  std::__shared_mutex_base *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15[5];
  char v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v6 = (std::__shared_mutex_base *)(**(_QWORD **)(a1 + 48) + 72);
  std::__shared_mutex_base::lock_shared(v6);
  v7 = &a2[a3];
  v8 = 0;
  if (a3)
  {
    while (a2[v8] != 46)
    {
      if (a3 == ++v8)
      {
        v8 = a3;
        break;
      }
    }
  }
  v9 = 0;
  v15[0] = (uint64_t)a2;
  v15[1] = (uint64_t)&a2[a3];
  v15[2] = (uint64_t)a2;
  v15[3] = (uint64_t)a2;
  v15[4] = v8;
  v16 = 46;
  v17 = &unk_22469B420;
  v18 = &unk_22469B420;
  v19 = &unk_22469B420;
  v20 = &unk_22469B420;
  v21 = 0;
  v22 = 0;
  if (a3 && a2 != (char *)&unk_22469B420)
  {
    v9 = 0;
    do
    {
      ++v9;
      v10 = &a2[v8];
      if (v10 == v7)
        break;
      a2 = v10 + 1;
      if (v10 + 1 == v7)
      {
        v8 = 0;
        a2 = v7;
      }
      else
      {
        v8 = 0;
        while (a2[v8] != 46)
        {
          if (v7 - a2 == ++v8)
          {
            v8 = v7 - a2;
            break;
          }
        }
      }
    }
    while (a2 != (char *)&unk_22469B420);
  }
  v23 = v9;
  v13 = a1;
  LOBYTE(v14) = 0;
  sub_224128B7C(a1, v15, 0, (uint64_t)&v13);
  v11 = v13;
  std::__shared_mutex_base::unlock_shared(v6);
  return v11;
}

uint64_t **sub_2241264B4(uint64_t a1, char *a2, size_t a3)
{
  std::__shared_mutex_base *v6;
  uint64_t v7;
  uint64_t **v8;

  v6 = (std::__shared_mutex_base *)(a1 + 72);
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)(a1 + 72));
  v8 = sub_22412665C(a1, v7, a2, a3, 1);
  std::__shared_mutex_base::unlock(v6);
  return v8;
}

void sub_224126514(_Unwind_Exception *a1)
{
  std::__shared_mutex_base *v1;

  std::__shared_mutex_base::unlock(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_22412652C(uint64_t a1, const void *a2, size_t a3)
{
  std::__shared_mutex_base *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  uint64_t *v12;
  size_t v13;
  size_t v14;
  int v15;
  int v16;
  const void *v17;
  size_t v18;
  size_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;

  v6 = (std::__shared_mutex_base *)(a1 + 72);
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)(a1 + 72));
  v9 = *(uint64_t **)(a1 + 56);
  v7 = (uint64_t *)(a1 + 56);
  v8 = v9;
  if (!v9)
    goto LABEL_32;
  v10 = v7;
  do
  {
    while (1)
    {
      v11 = *((char *)v8 + 55);
      v12 = v11 >= 0 ? v8 + 4 : (uint64_t *)v8[4];
      v13 = v11 >= 0 ? *((unsigned __int8 *)v8 + 55) : v8[5];
      v14 = v13 >= a3 ? a3 : v13;
      v15 = memcmp(a2, v12, v14);
      if (v15)
        break;
      if (a3 <= v13)
        goto LABEL_17;
LABEL_3:
      v8 = (uint64_t *)v8[1];
      if (!v8)
        goto LABEL_18;
    }
    if ((v15 & 0x80000000) == 0)
      goto LABEL_3;
LABEL_17:
    v10 = v8;
    v8 = (uint64_t *)*v8;
  }
  while (v8);
LABEL_18:
  if (v10 == v7)
    goto LABEL_32;
  v16 = *((char *)v10 + 55);
  if (v16 >= 0)
    v17 = v10 + 4;
  else
    v17 = (const void *)v10[4];
  if (v16 >= 0)
    v18 = *((unsigned __int8 *)v10 + 55);
  else
    v18 = v10[5];
  if (v18 >= a3)
    v19 = a3;
  else
    v19 = v18;
  v20 = memcmp(a2, v17, v19);
  if (v20)
  {
    if ((v20 & 0x80000000) == 0)
      goto LABEL_30;
LABEL_32:
    v22 = 0;
    v21 = 0;
  }
  else
  {
    if (a3 < v18)
      goto LABEL_32;
LABEL_30:
    v21 = v10[7] & 0xFFFFFFFFFFFFFF00;
    v22 = v10[7];
  }
  std::__shared_mutex_base::unlock(v6);
  return v21 | v22;
}

uint64_t **sub_22412665C(uint64_t a1, uint64_t a2, char *a3, size_t a4, int a5)
{
  char *v8;
  size_t v9;
  uint64_t v10;
  uint64_t **v11;
  char *v12;
  char *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t **v17;
  uint64_t *v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t **v23;
  BOOL v24;
  char *v25;
  int v26;
  int64_t v27;
  void *v28;
  size_t v29;
  char *v30;
  char *v31;
  size_t v32;
  uint64_t **v33;
  uint64_t **v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t *v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  const void *v53;
  unint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  int v58;
  _QWORD *v59;
  unint64_t v60;
  size_t v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t **v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t **v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t *v76;
  unint64_t *v77;
  unint64_t v78;
  std::mutex *v79;
  _QWORD *v80;
  uint64_t *v81;
  uint64_t **v82;
  int v83;
  uint64_t *v84;
  uint64_t *v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t **v89;
  uint64_t v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t **v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t *v97;
  __int128 v98;
  char *v99;
  __int128 v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  uint64_t v105;
  char v106;
  uint64_t v107;

  v8 = &a3[a4];
  v9 = 0;
  if (a4)
  {
    while (a3[v9] != 46)
    {
      if (a4 == ++v9)
      {
        v9 = a4;
        break;
      }
    }
  }
  v10 = 0;
  v11 = *(uint64_t ***)(a1 + 40);
  v97 = (uint64_t *)a3;
  *(_QWORD *)&v98 = &a3[a4];
  *((_QWORD *)&v98 + 1) = a3;
  v99 = a3;
  *(_QWORD *)&v100 = v9;
  BYTE8(v100) = 46;
  v101 = &unk_22469B420;
  v102 = &unk_22469B420;
  v103 = &unk_22469B420;
  v104 = &unk_22469B420;
  v105 = 0;
  v106 = 0;
  if (a4 && a3 != (char *)&unk_22469B420)
  {
    v10 = 0;
    v12 = a3;
    do
    {
      ++v10;
      v13 = &v12[v9];
      if (v13 == v8)
        break;
      v12 = v13 + 1;
      if (v13 + 1 == v8)
      {
        v9 = 0;
        v12 = &a3[a4];
      }
      else
      {
        v9 = 0;
        while (v12[v9] != 46)
        {
          if (v8 - v12 == ++v9)
          {
            v9 = v8 - v12;
            break;
          }
        }
      }
    }
    while (v12 != (char *)&unk_22469B420);
  }
  v91 = a1;
  v107 = v10;
  v94 = v11;
  LOBYTE(v95) = 0;
  sub_224128B7C((uint64_t)v11, (uint64_t *)&v97, 0, (uint64_t)&v94);
  v14 = v94;
  if ((_BYTE)v95)
    return v14;
  v89 = v94;
  v15 = v94[6];
  v95 = 0;
  v96 = 0;
  v92 = v15;
  v94 = &v95;
  v16 = (uint64_t *)v15[10];
  v17 = (uint64_t **)(v15 + 11);
  if (v16 != v15 + 11)
  {
    do
    {
      v19 = v16[4];
      if (*(char *)(v19 + 31) < 0)
      {
        v20 = *(char **)(v19 + 8);
        v21 = *(_QWORD *)(v19 + 16);
        if (v21 <= a4)
          goto LABEL_27;
      }
      else
      {
        v20 = (char *)(v19 + 8);
        v21 = *(unsigned __int8 *)(v19 + 31);
        if (v21 <= a4)
          goto LABEL_27;
      }
      if (!a4)
      {
LABEL_48:
        v33 = &v95;
        v34 = &v95;
        if (v95)
        {
          v35 = v95;
          while (1)
          {
            while (1)
            {
              v33 = (uint64_t **)v35;
              v36 = v35[4];
              if (v19 >= v36)
                break;
              v35 = *v33;
              v34 = v33;
              if (!*v33)
                goto LABEL_55;
            }
            if (v36 >= v19)
              break;
            v35 = v33[1];
            if (!v35)
            {
              v34 = v33 + 1;
              goto LABEL_55;
            }
          }
        }
        else
        {
LABEL_55:
          v37 = (uint64_t *)operator new(0x28uLL);
          v37[4] = v19;
          *v37 = 0;
          v37[1] = 0;
          v37[2] = (uint64_t)v33;
          *v34 = v37;
          if (*v94)
          {
            v94 = (uint64_t **)*v94;
            v37 = *v34;
          }
          sub_2231A9A8C(v95, v37);
          ++v96;
        }
        v38 = (uint64_t *)v16[1];
        v39 = v16;
        if (v38)
        {
          do
          {
            v23 = (uint64_t **)v38;
            v38 = (uint64_t *)*v38;
          }
          while (v38);
        }
        else
        {
          do
          {
            v23 = (uint64_t **)v39[2];
            v24 = *v23 == v39;
            v39 = (uint64_t *)v23;
          }
          while (!v24);
        }
        if ((uint64_t *)v92[10] == v16)
          v92[10] = (uint64_t)v23;
        v18 = (uint64_t *)v92[11];
        --v92[12];
        sub_2231AFE60(v18, v16);
        operator delete(v16);
        goto LABEL_20;
      }
      if ((uint64_t)v21 >= (uint64_t)a4)
      {
        v25 = &v20[v21];
        v26 = *a3;
        v27 = v21;
        v28 = v20;
        do
        {
          v29 = v27 - a4;
          if (v29 == -1)
            break;
          v30 = (char *)memchr(v28, v26, v29 + 1);
          if (!v30)
            break;
          v31 = v30;
          if (!memcmp(v30, a3, a4))
          {
            if (v31 == v25 || v20 != v31 || v21 <= a4 + 1 || v20[a4] != 46)
              break;
            v32 = a4;
            while (v20[v32 + 1] == 46)
            {
              if (v21 - 1 == ++v32)
                goto LABEL_27;
            }
            if (v32 == -2)
              break;
            goto LABEL_48;
          }
          v28 = v31 + 1;
          v27 = v25 - (v31 + 1);
        }
        while (v27 >= (uint64_t)a4);
      }
LABEL_27:
      v22 = (uint64_t *)v16[1];
      if (v22)
      {
        do
        {
          v23 = (uint64_t **)v22;
          v22 = (uint64_t *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (uint64_t **)v16[2];
          v24 = *v23 == v16;
          v16 = (uint64_t *)v23;
        }
        while (!v24);
      }
LABEL_20:
      v16 = (uint64_t *)v23;
    }
    while (v23 != v17);
  }
  v40 = (uint64_t *)operator new();
  v98 = 0uLL;
  v97 = (uint64_t *)&v98;
  sub_2241297DC((uint64_t *)&v97, v94, &v95);
  sub_2241246FC(v40, v91, a3, a4, (uint64_t)v89, (uint64_t)&v97);
  sub_2233FADDC((_QWORD *)v98);
  v93 = v40;
  sub_2241260A8((uint64_t)&v97, a3, a4, (uint64_t *)&v93, 0);
  v41 = operator new();
  *(_QWORD *)v41 = off_24EC6A578;
  *(_OWORD *)(v41 + 8) = v98;
  *(_QWORD *)(v41 + 24) = v99;
  v98 = 0uLL;
  *(_OWORD *)(v41 + 32) = v100;
  *(_QWORD *)(v41 + 48) = v101;
  v99 = 0;
  v100 = 0uLL;
  v101 = 0;
  v42 = (uint64_t)v93;
  v93 = 0;
  if (v42)
    sub_224128AA0(v42);
  v43 = (char *)operator new(0x40uLL);
  v44 = v43;
  v45 = (uint64_t *)(v91 + 56);
  v97 = (uint64_t *)v43;
  *(_QWORD *)&v98 = v91 + 56;
  BYTE8(v98) = 0;
  v46 = v43 + 32;
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  if (a4 >= 0x17)
  {
    v50 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v50 = a4 | 7;
    v51 = v50 + 1;
    v46 = operator new(v50 + 1);
    v44[5] = a4;
    v44[6] = v51 | 0x8000000000000000;
    v44[4] = v46;
LABEL_75:
    memmove(v46, a3, a4);
    v46[a4] = 0;
    v44[7] = v41;
    v47 = (uint64_t)v97;
    v48 = (uint64_t *)*v45;
    v49 = (uint64_t *)(v91 + 56);
    if (!*v45)
    {
LABEL_102:
      *(_QWORD *)v47 = 0;
      *(_QWORD *)(v47 + 8) = 0;
      *(_QWORD *)(v47 + 16) = v49;
      *v45 = v47;
      v64 = **(_QWORD **)(v91 + 48);
      if (v64)
      {
        *(_QWORD *)(v91 + 48) = v64;
        v47 = *v45;
      }
      sub_2231A9A8C(*(uint64_t **)(v91 + 56), (uint64_t *)v47);
      ++*(_QWORD *)(v91 + 64);
      v49 = v97;
      goto LABEL_105;
    }
    goto LABEL_76;
  }
  v43[55] = a4;
  if (a4)
    goto LABEL_75;
  *v46 = 0;
  *((_QWORD *)v43 + 7) = v41;
  v47 = (uint64_t)v97;
  v48 = (uint64_t *)*v45;
  v49 = (uint64_t *)(v91 + 56);
  if (!*v45)
    goto LABEL_102;
LABEL_76:
  v52 = *(char *)(v47 + 55);
  if (v52 >= 0)
    v53 = (const void *)(v47 + 32);
  else
    v53 = *(const void **)(v47 + 32);
  if (v52 >= 0)
    v54 = *(unsigned __int8 *)(v47 + 55);
  else
    v54 = *(_QWORD *)(v47 + 40);
  while (1)
  {
    while (1)
    {
      v49 = v48;
      v57 = (_QWORD *)v48[4];
      v55 = v48 + 4;
      v56 = v57;
      v58 = *((char *)v55 + 23);
      v59 = v58 >= 0 ? v55 : v56;
      v60 = v58 >= 0 ? *((unsigned __int8 *)v55 + 23) : v55[1];
      v61 = v60 >= v54 ? v54 : v60;
      v62 = memcmp(v53, v59, v61);
      if (v62)
        break;
      if (v54 >= v60)
        goto LABEL_96;
LABEL_82:
      v48 = (uint64_t *)*v49;
      v45 = v49;
      if (!*v49)
        goto LABEL_102;
    }
    if (v62 < 0)
      goto LABEL_82;
LABEL_96:
    v63 = memcmp(v59, v53, v61);
    if (!v63)
      break;
    if ((v63 & 0x80000000) == 0)
      goto LABEL_107;
LABEL_100:
    v48 = (uint64_t *)v49[1];
    if (!v48)
    {
      v45 = v49 + 1;
      goto LABEL_102;
    }
  }
  if (v60 < v54)
    goto LABEL_100;
LABEL_107:
  if (!v47)
  {
LABEL_105:
    v65 = v89;
    v66 = v92;
    v14 = (uint64_t **)v49[7];
    v67 = *v17;
    v68 = v17;
    if (*v17)
      goto LABEL_123;
LABEL_127:
    v74 = (uint64_t *)operator new(0x28uLL);
    v74[4] = (uint64_t)v14;
    *v74 = 0;
    v74[1] = 0;
    v74[2] = (uint64_t)v68;
    *v17 = v74;
    v75 = *(_QWORD *)v66[10];
    if (v75)
    {
      v66[10] = v75;
      v74 = *v17;
    }
    sub_2231A9A8C((uint64_t *)v66[11], v74);
    ++v66[12];
    goto LABEL_130;
  }
  v69 = *(_QWORD *)(v47 + 56);
  *(_QWORD *)(v47 + 56) = 0;
  if (v69)
  {
    v70 = *(_QWORD *)(v69 + 48);
    *(_QWORD *)(v69 + 48) = 0;
    if (v70)
      sub_224128AA0(v70);
    v71 = *(_QWORD *)(v69 + 40);
    *(_QWORD *)(v69 + 40) = 0;
    if (v71)
      MEMORY[0x227684CE8](v71, 0x80C40B8603338);
    v72 = *(_QWORD *)(v69 + 32);
    *(_QWORD *)(v69 + 32) = 0;
    if (v72)
      MEMORY[0x227684CE8](v72, 0x1000C4077774924);
    if (*(char *)(v69 + 31) < 0)
      operator delete(*(void **)(v69 + 8));
    MEMORY[0x227684CE8](v69, 0x10B3C406DCED8F8);
    LOBYTE(v52) = *(_BYTE *)(v47 + 55);
  }
  v65 = v89;
  v66 = v92;
  if ((v52 & 0x80) != 0)
    operator delete(*(void **)(v47 + 32));
  operator delete((void *)v47);
  v14 = (uint64_t **)v49[7];
  v67 = *v17;
  v68 = v17;
  if (!*v17)
    goto LABEL_127;
  while (1)
  {
LABEL_123:
    while (1)
    {
      v68 = (uint64_t **)v67;
      v73 = v67[4];
      if ((unint64_t)v14 >= v73)
        break;
      v67 = *v68;
      v17 = v68;
      if (!*v68)
        goto LABEL_127;
    }
    if (v73 >= (unint64_t)v14)
      break;
    v67 = v68[1];
    if (!v67)
    {
      v17 = v68 + 1;
      goto LABEL_127;
    }
  }
LABEL_130:
  v76 = (uint64_t *)v94;
  if (v94 != &v95)
  {
    do
    {
      *(_QWORD *)(*(_QWORD *)(v76[4] + 48) + 72) = v14;
      v81 = (uint64_t *)v76[1];
      if (v81)
      {
        do
        {
          v82 = (uint64_t **)v81;
          v81 = (uint64_t *)*v81;
        }
        while (v81);
      }
      else
      {
        do
        {
          v82 = (uint64_t **)v76[2];
          v24 = *v82 == v76;
          v76 = (uint64_t *)v82;
        }
        while (!v24);
      }
      v76 = (uint64_t *)v82;
    }
    while (v82 != &v95);
  }
  v77 = (unint64_t *)v14[5];
  v78 = atomic_load((unint64_t *)v65[5]);
  do
    __ldaxr(v77);
  while (__stlxr(v78, v77));
  if (a5)
  {
    v79 = *(std::mutex **)(v91 + 8);
    std::mutex::lock(v79);
    v80 = *(_QWORD **)(v91 + 16);
    if (v80 != (_QWORD *)(v91 + 24))
    {
      do
      {
        v83 = *((char *)v14 + 31);
        if (v83 >= 0)
          v84 = (uint64_t *)(v14 + 1);
        else
          v84 = v14[1];
        if (v83 >= 0)
          v85 = (uint64_t *)*((unsigned __int8 *)v14 + 31);
        else
          v85 = v14[2];
        (*(void (**)(_QWORD, uint64_t *, uint64_t *, _QWORD))(*(_QWORD *)v80[4] + 16))(v80[4], v84, v85, 0);
        v86 = (_QWORD *)v80[1];
        if (v86)
        {
          do
          {
            v87 = v86;
            v86 = (_QWORD *)*v86;
          }
          while (v86);
        }
        else
        {
          do
          {
            v87 = (_QWORD *)v80[2];
            v24 = *v87 == (_QWORD)v80;
            v80 = v87;
          }
          while (!v24);
        }
        v80 = v87;
      }
      while (v87 != (_QWORD *)(v91 + 24));
    }
    std::mutex::unlock(v79);
  }
  sub_2233FADDC(v95);
  return v14;
}

void sub_224126EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17)
{
  sub_2233FADDC(a17);
  _Unwind_Resume(a1);
}

void sub_224126F74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_224129950((uint64_t *)va);
  JUMPOUT(0x224126F80);
}

void sub_224126F9C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_2233FADDC(v1);
  _Unwind_Resume(a1);
}

void sub_224126FB0()
{
  std::mutex *v0;

  std::mutex::unlock(v0);
  JUMPOUT(0x224126FBCLL);
}

uint64_t sub_224126FD0(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  char v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t **v17;
  int v18;
  const void *v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  uint64_t *v25;
  unint64_t v26;
  size_t v27;
  int v28;
  int v29;
  char *v30;
  _BYTE *v31;
  __int128 v32;
  _QWORD *v33;
  _QWORD *v34;
  BOOL v35;
  uint64_t **v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v41;
  std::mutex *v43;
  std::__shared_mutex_base *v44;
  _QWORD *v45;
  uint64_t **v46;
  uint64_t *v47;
  uint64_t v48;

  v44 = (std::__shared_mutex_base *)(a1 + 72);
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)(a1 + 72));
  v43 = *(std::mutex **)(a1 + 8);
  std::mutex::lock(v43);
  v47 = 0;
  v48 = 0;
  v3 = *(_QWORD **)(a1 + 48);
  v41 = a1;
  v45 = (_QWORD *)(a1 + 56);
  v46 = &v47;
  if (v3 == (_QWORD *)(a1 + 56))
    goto LABEL_2;
  while (2)
  {
    v13 = *(char **)(v3[7] + 32);
    if (!v13)
      goto LABEL_49;
    v14 = *v13;
    v15 = v47;
    v16 = &v47;
    v17 = &v47;
    if (!v47)
      goto LABEL_43;
    v18 = *((char *)v3 + 55);
    if (v18 >= 0)
      v19 = v3 + 4;
    else
      v19 = (const void *)v3[4];
    if (v18 >= 0)
      v20 = *((unsigned __int8 *)v3 + 55);
    else
      v20 = v3[5];
    do
    {
      while (1)
      {
        v17 = (uint64_t **)v15;
        v23 = v15[4];
        v21 = v15 + 4;
        v22 = (uint64_t *)v23;
        v24 = *((char *)v21 + 23);
        v25 = v24 >= 0 ? v21 : v22;
        v26 = v24 >= 0 ? *((unsigned __int8 *)v21 + 23) : v21[1];
        v27 = v26 >= v20 ? v20 : v26;
        v28 = memcmp(v19, v25, v27);
        if (v28)
          break;
        if (v20 >= v26)
          goto LABEL_37;
LABEL_23:
        v15 = *v17;
        v16 = v17;
        if (!*v17)
          goto LABEL_43;
      }
      if (v28 < 0)
        goto LABEL_23;
LABEL_37:
      v29 = memcmp(v25, v19, v27);
      if (v29)
      {
        if ((v29 & 0x80000000) == 0)
          goto LABEL_49;
      }
      else if (v26 >= v20)
      {
        goto LABEL_49;
      }
      v15 = v17[1];
    }
    while (v15);
    v16 = v17 + 1;
LABEL_43:
    v30 = (char *)operator new(0x40uLL);
    v31 = v30 + 32;
    if (*((char *)v3 + 55) < 0)
    {
      sub_223197FA4(v31, (void *)v3[4], v3[5]);
    }
    else
    {
      v32 = *((_OWORD *)v3 + 2);
      *((_QWORD *)v30 + 6) = v3[6];
      *(_OWORD *)v31 = v32;
    }
    v30[56] = v14;
    *(_QWORD *)v30 = 0;
    *((_QWORD *)v30 + 1) = 0;
    *((_QWORD *)v30 + 2) = v17;
    *v16 = (uint64_t *)v30;
    if (*v46)
    {
      v46 = (uint64_t **)*v46;
      v30 = (char *)*v16;
    }
    sub_2231A9A8C(v47, (uint64_t *)v30);
    ++v48;
LABEL_49:
    v33 = (_QWORD *)v3[1];
    if (v33)
    {
      do
      {
        v34 = v33;
        v33 = (_QWORD *)*v33;
      }
      while (v33);
    }
    else
    {
      do
      {
        v34 = (_QWORD *)v3[2];
        v35 = *v34 == (_QWORD)v3;
        v3 = v34;
      }
      while (!v35);
    }
    v3 = v34;
    if (v34 != v45)
      continue;
    break;
  }
LABEL_2:
  v5 = (uint64_t **)(v41 + 24);
  v4 = *(uint64_t **)(v41 + 24);
  if (!v4)
  {
    v36 = (uint64_t **)(v41 + 24);
    v8 = a2;
LABEL_61:
    v38 = (uint64_t *)operator new(0x28uLL);
    v38[4] = v8;
    *v38 = 0;
    v38[1] = 0;
    v38[2] = (uint64_t)v36;
    *v5 = v38;
    v39 = **(_QWORD **)(v41 + 16);
    if (v39)
    {
      *(_QWORD *)(v41 + 16) = v39;
      v38 = *v5;
    }
    sub_2231A9A8C(*(uint64_t **)(v41 + 24), v38);
    ++*(_QWORD *)(v41 + 32);
    goto LABEL_64;
  }
  v6 = (uint64_t **)(v41 + 24);
  v7 = *(_QWORD **)(v41 + 24);
  v8 = a2;
  do
  {
    v9 = v7[4];
    v10 = v9 >= a2;
    if (v9 >= a2)
      v11 = v7;
    else
      v11 = v7 + 1;
    if (v10)
      v6 = (uint64_t **)v7;
    v7 = (_QWORD *)*v11;
  }
  while (*v11);
  if (v6 == v5 || (unint64_t)v6[4] > a2)
  {
    while (1)
    {
      while (1)
      {
        v36 = (uint64_t **)v4;
        v37 = v4[4];
        if (v37 <= a2)
          break;
        v4 = *v36;
        v5 = v36;
        if (!*v36)
          goto LABEL_61;
      }
      if (v37 >= a2)
        break;
      v4 = v36[1];
      if (!v4)
      {
        v5 = v36 + 1;
        goto LABEL_61;
      }
    }
LABEL_64:
    (*(void (**)(uint64_t, uint64_t ***))(*(_QWORD *)v8 + 32))(v8, &v46);
    v12 = 1;
    goto LABEL_65;
  }
  v12 = 0;
LABEL_65:
  sub_22323DF84((uint64_t)&v46, (char *)v47);
  std::mutex::unlock(v43);
  std::__shared_mutex_base::unlock(v44);
  return v12;
}

void sub_2241272D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, std::__shared_mutex_base *a12, uint64_t a13, char a14, uint64_t a15)
{
  std::__shared_mutex_base::unlock(a12);
  _Unwind_Resume(a1);
}

uint64_t sub_224127320(_QWORD *a1, unint64_t a2)
{
  std::mutex *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  _QWORD *v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  BOOL v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  BOOL v22;

  v4 = (std::mutex *)a1[1];
  std::mutex::lock(v4);
  v6 = a1 + 3;
  v5 = (uint64_t *)a1[3];
  if (!v5)
    goto LABEL_12;
  v7 = a1 + 3;
  v8 = (_QWORD *)a1[3];
  do
  {
    v9 = v8[4];
    v10 = v9 >= a2;
    if (v9 >= a2)
      v11 = v8;
    else
      v11 = v8 + 1;
    if (v10)
      v7 = v8;
    v8 = (_QWORD *)*v11;
  }
  while (*v11);
  if (v7 != v6 && v7[4] <= a2)
  {
    v14 = a1 + 3;
    v15 = (_QWORD *)a1[3];
    do
    {
      v16 = v15[4];
      v17 = v16 >= a2;
      if (v16 >= a2)
        v18 = v15;
      else
        v18 = v15 + 1;
      if (v17)
        v14 = v15;
      v15 = (_QWORD *)*v18;
    }
    while (*v18);
    if (v14 != v6 && v14[4] <= a2)
    {
      v19 = (uint64_t *)v14[1];
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (uint64_t *)*v19;
        }
        while (v19);
      }
      else
      {
        v21 = v14;
        do
        {
          v20 = (uint64_t *)v21[2];
          v22 = *v20 == (_QWORD)v21;
          v21 = v20;
        }
        while (!v22);
      }
      if ((uint64_t *)a1[2] == v14)
        a1[2] = v20;
      --a1[4];
      sub_2231AFE60(v5, v14);
      operator delete(v14);
    }
    v12 = 1;
  }
  else
  {
LABEL_12:
    v12 = 0;
  }
  std::mutex::unlock(v4);
  return v12;
}

void sub_224127444(uint64_t a1, _QWORD *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t *v7;
  std::__shared_mutex_base *v8;
  uint64_t v9;
  _QWORD *v10;
  std::mutex *v11;
  _QWORD *v12;
  _QWORD *v13;
  char *v14;
  size_t v15;
  uint64_t **v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  BOOL v31;
  _QWORD *v32;
  _QWORD *v33;
  std::runtime_error *exception;
  void *__p[2];
  char v36;

  v36 = 0;
  LOBYTE(__p[0]) = 0;
  v4 = sub_22324053C((uint64_t)a2, (const void **)__p);
  v5 = v4;
  if (v36 < 0)
  {
    operator delete(__p[0]);
    v6 = a2 + 1;
    if (a2 + 1 == v5)
      goto LABEL_8;
  }
  else
  {
    v6 = a2 + 1;
    if (a2 + 1 == v4)
      goto LABEL_8;
  }
  v36 = 0;
  LOBYTE(__p[0]) = 0;
  v7 = sub_22324053C((uint64_t)a2, (const void **)__p);
  if (v36 < 0)
    operator delete(__p[0]);
  if (!*((_BYTE *)v7 + 56))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot set root context to inherit its enable-state");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
LABEL_8:
  v8 = (std::__shared_mutex_base *)(a1 + 72);
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)(a1 + 72));
  v10 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != v6)
  {
    do
    {
      if (*((char *)v10 + 55) < 0)
      {
        v14 = (char *)v10[4];
        v15 = v10[5];
      }
      else
      {
        v14 = (char *)(v10 + 4);
        v15 = *((unsigned __int8 *)v10 + 55);
      }
      v16 = sub_22412665C(a1, v9, v14, v15, 0);
      v17 = (uint64_t)v16;
      v18 = *((unsigned __int8 *)v10 + 56);
      v19 = v16[4];
      if (*((_BYTE *)v10 + 56))
      {
        if (*(_BYTE *)v19)
        {
          if (*(unsigned __int8 *)v19 != v18)
            *(_BYTE *)v19 = v18;
        }
        else
        {
          v24 = (_BYTE *)operator new();
          *v24 = v18;
          v25 = *(_QWORD *)(v17 + 32);
          *(_QWORD *)(v17 + 32) = v24;
          if (v25)
          {
            MEMORY[0x227684CE8](v25, 0x1000C4077774924);
            v24 = *(_BYTE **)(v17 + 32);
          }
          v26 = (unint64_t *)operator new();
          *v26 = (unint64_t)v24;
          v27 = *(unint64_t **)(v17 + 40);
          v28 = atomic_load(v26);
          do
            __ldaxr(v27);
          while (__stlxr(v28, v27));
          MEMORY[0x227684CE8]();
          sub_224124EA8(v17);
        }
      }
      else if (*(_BYTE *)v19)
      {
        v20 = (unint64_t *)v16[5];
        v21 = atomic_load(*(unint64_t **)(v16[6][9] + 40));
        do
          __ldaxr(v20);
        while (__stlxr(v21, v20));
        sub_224124EA8((uint64_t)v16);
        v22 = (_BYTE *)operator new();
        *v22 = 0;
        v23 = *(_QWORD *)(v17 + 32);
        *(_QWORD *)(v17 + 32) = v22;
        if (v23)
          MEMORY[0x227684CE8](v23, 0x1000C4077774924);
      }
      v29 = (_QWORD *)v10[1];
      if (v29)
      {
        do
        {
          v30 = v29;
          v29 = (_QWORD *)*v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          v30 = (_QWORD *)v10[2];
          v31 = *v30 == (_QWORD)v10;
          v10 = v30;
        }
        while (!v31);
      }
      v10 = v30;
    }
    while (v30 != v6);
  }
  v11 = *(std::mutex **)(a1 + 8);
  std::mutex::lock(v11);
  v12 = *(_QWORD **)(a1 + 16);
  v13 = (_QWORD *)(a1 + 24);
  if (v12 != v13)
  {
    do
    {
      (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)v12[4] + 24))(v12[4], a2);
      v32 = (_QWORD *)v12[1];
      if (v32)
      {
        do
        {
          v33 = v32;
          v32 = (_QWORD *)*v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          v33 = (_QWORD *)v12[2];
          v31 = *v33 == (_QWORD)v12;
          v12 = v33;
        }
        while (!v31);
      }
      v12 = v33;
    }
    while (v33 != v13);
  }
  std::mutex::unlock(v11);
  std::__shared_mutex_base::unlock(v8);
}

void sub_224127740(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_224127754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2241277A4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t *v18;
  BOOL v19;
  uint64_t **v20;
  uint64_t **v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  _BYTE *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _OWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  std::mutex *v46;
  _QWORD *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  char v54;
  uint64_t v55;
  int v56;
  _QWORD *v57;
  _OWORD *v58;
  _OWORD v59[3];
  _BYTE *v60;
  _QWORD *v61;
  uint64_t *v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  *a1 = &off_24EC6A628;
  v8 = (_QWORD *)operator new();
  v9 = (uint64_t)v8;
  v10 = *(unint64_t **)a3;
  v11 = *(unint64_t **)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  v56 = *((unsigned __int8 *)a4 + 24);
  if (*((_BYTE *)a4 + 24))
  {
    v55 = *a4;
    *(_QWORD *)&v59[1] = a4[1];
    *(_QWORD *)((char *)&v59[1] + 7) = *(uint64_t *)((char *)a4 + 15);
    v54 = *((_BYTE *)a4 + 23);
    a4[1] = 0;
    a4[2] = 0;
    *a4 = 0;
  }
  else
  {
    v55 = 0;
  }
  v57 = a1;
  *v8 = &off_24EC6A5D0;
  v12 = operator new();
  *(_QWORD *)v12 = 850045863;
  *(_OWORD *)(v12 + 8) = 0u;
  *(_OWORD *)(v12 + 24) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_QWORD *)(v12 + 56) = 0;
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 8) = v12;
  *(_QWORD *)(v9 + 16) = v9 + 24;
  if (v10 != v11)
  {
    v13 = 0;
    v14 = v10;
    v15 = *v10;
    v16 = (uint64_t **)(v9 + 24);
LABEL_11:
    if (v13)
      v20 = v16;
    else
      v20 = (uint64_t **)(v9 + 24);
    if (v13)
      v21 = v16 + 1;
    else
      v21 = (uint64_t **)(v9 + 24);
    if (*v21)
      goto LABEL_29;
LABEL_26:
    v24 = (uint64_t *)operator new(0x28uLL);
    v24[4] = v15;
    *v24 = 0;
    v24[1] = 0;
    v24[2] = (uint64_t)v20;
    *v21 = v24;
    v25 = **(_QWORD **)(v9 + 16);
    if (v25)
    {
      *(_QWORD *)(v9 + 16) = v25;
      v24 = *v21;
    }
    sub_2231A9A8C(*(uint64_t **)(v9 + 24), v24);
    ++*(_QWORD *)(v9 + 32);
LABEL_29:
    while (++v14 != v11)
    {
      v13 = *(_QWORD *)(v9 + 24);
      v15 = *v14;
      v16 = (uint64_t **)(v9 + 24);
      if (*(_QWORD *)(v9 + 16) == v9 + 24)
        goto LABEL_11;
      v17 = *(uint64_t ***)(v9 + 24);
      v18 = (uint64_t *)(v9 + 24);
      if (v13)
      {
        do
        {
          v16 = v17;
          v17 = (uint64_t **)v17[1];
        }
        while (v17);
      }
      else
      {
        do
        {
          v16 = (uint64_t **)v18[2];
          v19 = *v16 == v18;
          v18 = (uint64_t *)v16;
        }
        while (v19);
      }
      if ((unint64_t)v16[4] < v15)
        goto LABEL_11;
      v21 = (uint64_t **)(v9 + 24);
      v20 = (uint64_t **)(v9 + 24);
      if (!v13)
        goto LABEL_26;
      v22 = *(uint64_t **)(v9 + 24);
      while (1)
      {
        while (1)
        {
          v20 = (uint64_t **)v22;
          v23 = v22[4];
          if (v23 <= v15)
            break;
          v22 = *v20;
          v21 = v20;
          if (!*v20)
            goto LABEL_26;
        }
        if (v23 >= v15)
          break;
        v22 = v20[1];
        if (!v22)
        {
          v21 = v20 + 1;
          goto LABEL_26;
        }
      }
    }
  }
  *(_QWORD *)(v9 + 56) = 0;
  *(_QWORD *)(v9 + 64) = 0;
  *(_QWORD *)(v9 + 48) = v9 + 56;
  std::__shared_mutex_base::__shared_mutex_base((std::__shared_mutex_base *)(v9 + 72));
  *(_BYTE *)(v9 + 240) = 0;
  *(_BYTE *)(v9 + 264) = 0;
  if (v56)
  {
    v26 = *(_QWORD *)&v59[1];
    *(_QWORD *)(v9 + 240) = v55;
    *(_QWORD *)(v9 + 248) = v26;
    *(_QWORD *)(v9 + 255) = *(_QWORD *)((char *)&v59[1] + 7);
    *(_BYTE *)(v9 + 263) = v54;
    *(_BYTE *)(v9 + 264) = 1;
  }
  v57[1] = v9;
  if (v10)
  {
    operator delete(v10);
    v9 = v57[1];
  }
  v27 = (uint64_t *)operator new();
  v59[0] = 0uLL;
  v58 = v59;
  sub_2241246FC(v27, v9, "", 0, 0, (uint64_t)&v58);
  sub_2233FADDC(*(_QWORD **)&v59[0]);
  *(_QWORD *)&v59[1] = off_24EC6A578;
  HIBYTE(v59[2]) = 0;
  BYTE8(v59[1]) = 0;
  v28 = (_BYTE *)operator new();
  *v28 = a2;
  v60 = v28;
  v29 = (_QWORD *)operator new();
  *v29 = v28;
  v61 = v29;
  v62 = v27;
  v30 = operator new();
  v31 = v30;
  *(_QWORD *)v30 = off_24EC6A578;
  *(_OWORD *)(v30 + 8) = *(_OWORD *)((char *)&v59[1] + 8);
  *(_QWORD *)(v30 + 24) = *((_QWORD *)&v59[2] + 1);
  *(_QWORD *)(v30 + 32) = v28;
  *(_QWORD *)(v30 + 40) = v29;
  *(_QWORD *)(v30 + 48) = v27;
  v32 = v57[1];
  if (v32)
  {
    *(_QWORD *)(v32 + 40) = v30;
    v33 = v57[1];
    if (v33)
      goto LABEL_38;
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    *(_QWORD *)(v57[1] + 40) = v31;
    v33 = v57[1];
    if (v33)
    {
LABEL_38:
      BYTE7(v59[2]) = 0;
      LOBYTE(v59[1]) = 0;
      *((_QWORD *)&v59[2] + 1) = v31;
      v35 = (_QWORD *)(v33 + 56);
      v34 = *(_QWORD *)(v33 + 56);
      if (v34)
        goto LABEL_39;
      goto LABEL_43;
    }
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v33 = v57[1];
  BYTE7(v59[2]) = 0;
  LOBYTE(v59[1]) = 0;
  *((_QWORD *)&v59[2] + 1) = v31;
  v35 = (_QWORD *)(v33 + 56);
  v34 = *(_QWORD *)(v33 + 56);
  if (v34)
  {
    while (1)
    {
LABEL_39:
      v35 = (_QWORD *)v34;
      v36 = *(unsigned __int8 *)(v34 + 55);
      if ((v36 & 0x80u) != 0)
        v36 = v35[5];
      if (!v36)
        break;
      v34 = *v35;
      if (!*v35)
        goto LABEL_43;
    }
    *((_QWORD *)&v59[2] + 1) = 0;
    v37 = v35;
    v41 = *(_QWORD *)(v31 + 48);
    *(_QWORD *)(v31 + 48) = 0;
    if (!v41)
      goto LABEL_48;
    goto LABEL_47;
  }
LABEL_43:
  v37 = operator new(0x40uLL);
  v37[2] = v59[1];
  v38 = *(_QWORD *)&v59[2];
  memset(&v59[1], 0, 32);
  *((_QWORD *)v37 + 6) = v38;
  *((_QWORD *)v37 + 7) = v31;
  *(_QWORD *)v37 = 0;
  *((_QWORD *)v37 + 1) = 0;
  *((_QWORD *)v37 + 2) = v35;
  *v35 = v37;
  v39 = **(_QWORD **)(v33 + 48);
  v40 = (uint64_t *)v37;
  if (v39)
  {
    *(_QWORD *)(v33 + 48) = v39;
    v40 = (uint64_t *)*v35;
  }
  sub_2231A9A8C(*(uint64_t **)(v33 + 56), v40);
  ++*(_QWORD *)(v33 + 64);
  v31 = *((_QWORD *)&v59[2] + 1);
  if (*((_QWORD *)&v59[2] + 1))
  {
    v41 = *(_QWORD *)(*((_QWORD *)&v59[2] + 1) + 48);
    *(_QWORD *)(*((_QWORD *)&v59[2] + 1) + 48) = 0;
    if (!v41)
    {
LABEL_48:
      v42 = *(_QWORD *)(v31 + 40);
      *(_QWORD *)(v31 + 40) = 0;
      if (v42)
        MEMORY[0x227684CE8](v42, 0x80C40B8603338);
      v43 = *(_QWORD *)(v31 + 32);
      *(_QWORD *)(v31 + 32) = 0;
      if (v43)
        MEMORY[0x227684CE8](v43, 0x1000C4077774924);
      if (*(char *)(v31 + 31) < 0)
        operator delete(*(void **)(v31 + 8));
      MEMORY[0x227684CE8](v31, 0x10B3C406DCED8F8);
      goto LABEL_55;
    }
LABEL_47:
    sub_224128AA0(v41);
    goto LABEL_48;
  }
LABEL_55:
  if (SBYTE7(v59[2]) < 0)
  {
    operator delete(*(void **)&v59[1]);
    v44 = v57[1];
    if (v44)
      goto LABEL_66;
  }
  else
  {
    v44 = v57[1];
    if (v44)
      goto LABEL_66;
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v44 = v57[1];
LABEL_66:
  v45 = *((_QWORD *)v37 + 7);
  v46 = *(std::mutex **)(v44 + 8);
  std::mutex::lock(v46);
  v47 = *(_QWORD **)(v44 + 16);
  if (v47 != (_QWORD *)(v44 + 24))
  {
    do
    {
      v48 = *(char *)(v45 + 31);
      if (v48 >= 0)
        v49 = v45 + 8;
      else
        v49 = *(_QWORD *)(v45 + 8);
      if (v48 >= 0)
        v50 = *(unsigned __int8 *)(v45 + 31);
      else
        v50 = *(_QWORD *)(v45 + 16);
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v47[4] + 16))(v47[4], v49, v50, a2);
      v51 = (_QWORD *)v47[1];
      if (v51)
      {
        do
        {
          v52 = v51;
          v51 = (_QWORD *)*v51;
        }
        while (v51);
      }
      else
      {
        do
        {
          v52 = (_QWORD *)v47[2];
          v19 = *v52 == (_QWORD)v47;
          v47 = v52;
        }
        while (!v19);
      }
      v47 = v52;
    }
    while (v52 != (_QWORD *)(v44 + 24));
  }
  std::mutex::unlock(v46);
  return v57;
}

void sub_224127E40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *__p, int a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v24;

  sub_224127F8C((uint64_t)&a19);
  v24 = *(_QWORD *)(a15 + 8);
  *(_QWORD *)(a15 + 8) = 0;
  if (!v24)
    _Unwind_Resume(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  _Unwind_Resume(a1);
}

uint64_t sub_224127F8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 48);
    *(_QWORD *)(v2 + 48) = 0;
    if (v3)
      sub_224128AA0(v3);
    v4 = *(_QWORD *)(v2 + 40);
    *(_QWORD *)(v2 + 40) = 0;
    if (v4)
      MEMORY[0x227684CE8](v4, 0x80C40B8603338);
    v5 = *(_QWORD *)(v2 + 32);
    *(_QWORD *)(v2 + 32) = 0;
    if (v5)
      MEMORY[0x227684CE8](v5, 0x1000C4077774924);
    if (*(char *)(v2 + 31) < 0)
      operator delete(*(void **)(v2 + 8));
    MEMORY[0x227684CE8](v2, 0x10B3C406DCED8F8);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_224128050(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC6A628;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_224128090(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC6A628;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2241280E0(uint64_t a1, unint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
    return sub_224126FD0(v4, a2);
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  return sub_224126FD0(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_224128158(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;

  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
    return sub_224127320(v4, a2);
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  return sub_224127320(*(_QWORD **)(a1 + 8), a2);
}

uint64_t **sub_2241281D0(uint64_t a1, char *a2, size_t a3)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t **v8;

  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v5 = *(_QWORD *)(a1 + 8);
  }
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)(v5 + 72));
  v8 = sub_22412665C(v5, v7, a2, a3, 1);
  std::__shared_mutex_base::unlock((std::__shared_mutex_base *)(v5 + 72));
  return v8;
}

void sub_224128274(_Unwind_Exception *a1)
{
  std::__shared_mutex_base *v1;

  std::__shared_mutex_base::unlock(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_22412828C(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
    return sub_22412652C(v6, a2, a3);
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/NamedContext.cpp", 742, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  return sub_22412652C(*(_QWORD *)(a1 + 8), a2, a3);
}

void sub_22412831C(uint64_t a1, char *a2, size_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t **v10;

  v7 = *(_QWORD *)(a1 + 8);
  if (!v7)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v7 = *(_QWORD *)(a1 + 8);
  }
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)(v7 + 72));
  v10 = sub_22412665C(v7, v9, a2, a3, 0);
  std::__shared_mutex_base::unlock((std::__shared_mutex_base *)(v7 + 72));
  sub_224125FA8(v10[6], (uint64_t)v10, a4);
}

void sub_2241283D4(_Unwind_Exception *a1)
{
  std::__shared_mutex_base *v1;

  std::__shared_mutex_base::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_2241283EC(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    sub_224127444(v4, a2);
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_224127444(*(_QWORD *)(a1 + 8), a2);
  }
}

uint64_t sub_224128464(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
    return v1 + 240;
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/NamedContext.cpp", 742, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  return *(_QWORD *)(a1 + 8) + 240;
}

void sub_2241284D8(uint64_t a1, int a2, char a3)
{
  uint64_t v5;
  std::__shared_mutex_base *v6;
  _BYTE *v7;
  uint64_t v8;
  _QWORD *v9;
  _BYTE *v10;
  int v11;
  unint64_t *v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::mutex *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  BOOL v29;
  _BYTE *v30;
  char *v31;
  uint64_t v32;
  char v33;
  _QWORD v34[2];

  v33 = a3;
  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v5 = *(_QWORD *)(a1 + 8);
  }
  v6 = (std::__shared_mutex_base *)(v5 + 72);
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)(v5 + 72));
  v31 = 0;
  v32 = 0;
  v7 = operator new(0x40uLL);
  v7[55] = 0;
  v7[32] = 0;
  v7[56] = a2;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = &v31;
  v30 = v7;
  v31 = v7;
  sub_2231A9A8C((uint64_t *)v7, (uint64_t *)v7);
  ++v32;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = *(_QWORD **)(v8 + 40);
    v10 = (_BYTE *)v9[4];
    v11 = *v10;
    if (a2)
    {
LABEL_6:
      if (v11)
      {
        if (v11 != a2)
          *v10 = a2;
      }
      else
      {
        v16 = (_BYTE *)operator new();
        *v16 = a2;
        v17 = v9[4];
        v9[4] = v16;
        if (v17)
        {
          MEMORY[0x227684CE8](v17, 0x1000C4077774924);
          v16 = (_BYTE *)v9[4];
        }
        v18 = (unint64_t *)operator new();
        *v18 = (unint64_t)v16;
        v19 = (unint64_t *)v9[5];
        v20 = atomic_load(v18);
        do
          __ldaxr(v19);
        while (__stlxr(v20, v19));
        MEMORY[0x227684CE8](v18);
        sub_224124EA8((uint64_t)v9);
      }
      goto LABEL_21;
    }
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v9 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 40);
    v10 = (_BYTE *)v9[4];
    v11 = *v10;
    if (a2)
      goto LABEL_6;
  }
  if (v11)
  {
    v12 = (unint64_t *)v9[5];
    v13 = atomic_load(*(unint64_t **)(*(_QWORD *)(v9[6] + 72) + 40));
    do
      __ldaxr(v12);
    while (__stlxr(v13, v12));
    sub_224124EA8((uint64_t)v9);
    v14 = (_BYTE *)operator new();
    *v14 = 0;
    v15 = v9[4];
    v9[4] = v14;
    if (v15)
      MEMORY[0x227684CE8](v15, 0x1000C4077774924);
  }
LABEL_21:
  v21 = *(_QWORD *)(a1 + 8);
  if (!v21)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_36;
    }
    v21 = *(_QWORD *)(a1 + 8);
  }
  v22 = *(_QWORD *)(v21 + 40);
  v34[0] = &v33;
  v34[1] = &v30;
  sub_2241292F0((uint64_t)v34, v22, (uint64_t)v34);
  v23 = *(_QWORD *)(a1 + 8);
  if (v23)
    goto LABEL_27;
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
LABEL_36:
    abort();
  }
  v23 = *(_QWORD *)(a1 + 8);
LABEL_27:
  v24 = *(std::mutex **)(v23 + 8);
  std::mutex::lock(v24);
  v25 = *(_QWORD **)(v23 + 16);
  v26 = (_QWORD *)(v23 + 24);
  if (v25 != v26)
  {
    do
    {
      (*(void (**)(_QWORD, _BYTE **))(*(_QWORD *)v25[4] + 24))(v25[4], &v30);
      v27 = (_QWORD *)v25[1];
      if (v27)
      {
        do
        {
          v28 = v27;
          v27 = (_QWORD *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = (_QWORD *)v25[2];
          v29 = *v28 == (_QWORD)v25;
          v25 = v28;
        }
        while (!v29);
      }
      v25 = v28;
    }
    while (v28 != v26);
  }
  std::mutex::unlock(v24);
  sub_22323DF84((uint64_t)&v30, v31);
  std::__shared_mutex_base::unlock(v6);
}

void sub_224128850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10)
{
  std::__shared_mutex_base *v10;

  sub_22323DF84((uint64_t)&a9, a10);
  std::__shared_mutex_base::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_224128888(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_mutex_base *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  char v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  __int128 *v13;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/NamedContext.cpp", 742, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = *(_QWORD *)(a1 + 8);
  }
  v5 = (std::__shared_mutex_base *)(v4 + 72);
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)(v4 + 72));
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = a2 + 8;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD **)(v6 + 48);
  v8 = (_QWORD *)(v6 + 56);
  if (v7 != (_QWORD *)(v6 + 56))
  {
    do
    {
      v9 = **(_BYTE **)(v7[7] + 32);
      v13 = (__int128 *)(v7 + 4);
      *((_BYTE *)sub_224129B04((uint64_t **)a2, (const void **)v7 + 4, (uint64_t)&unk_2245BA939, &v13) + 56) = v9;
      v10 = (_QWORD *)v7[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v7[2];
          v12 = *v11 == (_QWORD)v7;
          v7 = v11;
        }
        while (!v12);
      }
      v7 = v11;
    }
    while (v11 != v8);
  }
  std::__shared_mutex_base::unlock(v5);
}

void sub_2241289B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_mutex_base *v2;

  sub_22323DF84(v1, *(char **)(v1 + 8));
  std::__shared_mutex_base::unlock(v2);
  _Unwind_Resume(a1);
}

BOOL sub_2241289D8(uint64_t a1)
{
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)atomic_load(*(unint64_t **)(a1 + 40));
  return *v1 == 1;
}

uint64_t sub_2241289F0(uint64_t a1)
{
  return **(unsigned __int8 **)(a1 + 32);
}

void sub_224128A00(uint64_t a1)
{
  sub_22412963C(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_224128A24(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/NamedContext.cpp", 742, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v5 = *(_QWORD *)(a1 + 8);
  }
  return sub_224126370(*(_QWORD *)(v5 + 40), a2, a3);
}

void sub_224128AA0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  sub_2233FADDC(*(_QWORD **)(a1 + 88));
  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 56);
    v4 = *(void **)(a1 + 48);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 48);
    }
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v4);
  }
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      goto LABEL_17;
  }
  else
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      goto LABEL_17;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_17:
  JUMPOUT(0x227684CE8);
}

uint64_t sub_224128B7C(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  unsigned __int8 *v10;
  int64_t v11;
  unsigned __int8 *v12;
  char *v13;
  char *v14;
  char *v15;
  size_t v16;
  int v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  BOOL v21;
  unsigned __int8 *v22;
  char *v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  char v39[8];
  char *v40;
  char *v41;
  char *v42;
  size_t v43;
  unsigned __int8 v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;

uint64_t sub_224128E44(uint64_t result, uint64_t *a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  BOOL v41;
  int v42;
  int v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;

  v4 = 0;
  v5 = a2[1];
  v6 = a2[2];
  v8 = a2[3];
  v7 = a2[4];
  v9 = *((unsigned __int8 *)a2 + 40);
  v11 = a2[7];
  v10 = a2[8];
  v12 = a2[9];
  v13 = v8 == v5;
  v14 = v12 == v11;
  if (v12 != v11)
    v13 = 0;
  if (v13)
  {
    v15 = 0;
  }
  else
  {
    v15 = 0;
    if (v6 != v10)
    {
      v4 = 0;
      v16 = a2[2];
      v17 = a2[4];
      do
      {
        v18 = v16 + v17;
        if (v18 == v5)
        {
          v17 = 0;
          v16 = a2[1];
          ++v4;
          if (v12 == v11)
            break;
        }
        else
        {
          v16 = v18 + 1;
          if (v16 == v5)
          {
            v17 = 0;
            v16 = a2[1];
            ++v4;
          }
          else
          {
            v19 = 0;
            v17 = v5 - v16;
            while (*(unsigned __int8 *)(v16 + v19) != v9)
            {
              if (v17 == ++v19)
              {
                ++v4;
                goto LABEL_16;
              }
            }
            v17 = v19;
            ++v4;
          }
        }
LABEL_16:
        ;
      }
      while (v16 != v10);
      v15 = 0;
      v20 = a2[4];
      v21 = a2[2];
      do
      {
        v22 = v21 + v20;
        if (v22 == v5)
        {
          v20 = 0;
          v21 = a2[1];
          ++v15;
          if (v12 == v11)
            break;
        }
        else
        {
          v21 = v22 + 1;
          if (v21 == v5)
          {
            v20 = 0;
            v21 = a2[1];
            ++v15;
          }
          else
          {
            v23 = 0;
            v20 = v5 - v21;
            while (*(unsigned __int8 *)(v21 + v23) != v9)
            {
              if (v20 == ++v23)
              {
                ++v15;
                goto LABEL_28;
              }
            }
            v20 = v23;
            ++v15;
          }
        }
LABEL_28:
        ;
      }
      while (v21 != v10);
    }
  }
  v24 = v4 >= a3;
  v25 = v4 - a3;
  if (!v24)
    v25 = 0;
  if (v15 < v25)
    v25 = v15;
  v26 = v15 - v25;
  if (v26 >= 1)
  {
    do
    {
      v8 = v6 + v7;
      if (v6 + v7 == v5 || (v6 = v8 + 1, v8 + 1 == v5))
      {
        v7 = 0;
        v6 = a2[1];
      }
      else
      {
        v7 = 0;
        while (*(unsigned __int8 *)(v6 + v7) != v9)
        {
          if (v5 - v6 == ++v7)
          {
            v7 = v5 - v6;
            break;
          }
        }
      }
      v39 = (unint64_t)v26-- > 1;
    }
    while (v39);
  }
  v27 = 0;
  v28 = v12 == v11 && v8 == v5;
  if (!v28 && v6 != v10)
  {
    v27 = 0;
    v29 = v7;
    v30 = v6;
    do
    {
      v31 = v30 + v29;
      if (v31 == v5)
      {
        v29 = 0;
        v30 = a2[1];
        ++v27;
        if (v14)
          break;
      }
      else
      {
        v30 = v31 + 1;
        if (v30 == v5)
        {
          v29 = 0;
          v30 = a2[1];
          ++v27;
        }
        else
        {
          v32 = 0;
          v29 = v5 - v30;
          while (*(unsigned __int8 *)(v30 + v32) != v9)
          {
            if (v29 == ++v32)
            {
              ++v27;
              goto LABEL_52;
            }
          }
          v29 = v32;
          ++v27;
        }
      }
LABEL_52:
      ;
    }
    while (v30 != v10);
  }
  v33 = (int *)((char *)a2 + 41);
  v34 = *a2;
  if (v27 >= a4)
    v35 = a4;
  else
    v35 = v27;
  v36 = v6;
  v37 = v8;
  v38 = v7;
  if (v35 >= 1)
  {
    v36 = v6;
    v38 = v7;
    do
    {
      v37 = v36 + v38;
      if (v36 + v38 == v5 || (v36 = v37 + 1, v37 + 1 == v5))
      {
        v38 = 0;
        v36 = v5;
      }
      else
      {
        v38 = 0;
        while (*(unsigned __int8 *)(v36 + v38) != v9)
        {
          if (v5 - v36 == ++v38)
          {
            v38 = v5 - v36;
            break;
          }
        }
      }
      v39 = (unint64_t)v35-- > 1;
    }
    while (v39);
  }
  v40 = 0;
  v41 = v8 == v5;
  *(_QWORD *)result = v34;
  *(_QWORD *)(result + 8) = v5;
  *(_QWORD *)(result + 16) = v6;
  *(_QWORD *)(result + 24) = v8;
  *(_QWORD *)(result + 32) = v7;
  *(_BYTE *)(result + 40) = v9;
  v42 = *v33;
  *(_DWORD *)(result + 41) = *v33;
  v43 = *(int *)((char *)v33 + 3);
  *(_DWORD *)(result + 44) = v43;
  *(_QWORD *)(result + 48) = v34;
  *(_QWORD *)(result + 56) = v5;
  *(_QWORD *)(result + 64) = v36;
  *(_QWORD *)(result + 72) = v37;
  *(_QWORD *)(result + 80) = v38;
  *(_BYTE *)(result + 88) = v9;
  *(_DWORD *)(result + 92) = v43;
  v44 = v37 == v5 && v41;
  *(_DWORD *)(result + 89) = v42;
  if (!v44 && v6 != v36)
  {
    v40 = 0;
    do
    {
      v45 = v6 + v7;
      if (v45 == v5)
      {
        v7 = 0;
        v6 = v5;
        ++v40;
        if (v37 == v5)
          break;
      }
      else
      {
        v6 = v45 + 1;
        if (v6 == v5)
        {
          v7 = 0;
          v6 = v5;
          ++v40;
        }
        else
        {
          v46 = 0;
          v7 = v5 - v6;
          while (*(unsigned __int8 *)(v6 + v46) != v9)
          {
            if (v7 == ++v46)
            {
              ++v40;
              goto LABEL_92;
            }
          }
          v7 = v46;
          ++v40;
        }
      }
LABEL_92:
      ;
    }
    while (v6 != v36);
  }
  *(_QWORD *)(result + 96) = v40;
  return result;
}

void sub_224129260(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    sub_224128AA0(v2);
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
    MEMORY[0x227684CE8](v3, 0x80C40B8603338);
  v4 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v4)
    MEMORY[0x227684CE8](v4, 0x1000C4077774924);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2241292F0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  unsigned __int8 **v5;
  _QWORD *v6;
  int v7;
  _BYTE *v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  _QWORD *v20;
  _QWORD *v21;
  int v22;
  const void *v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  int v29;
  _QWORD *v30;
  unint64_t v31;
  size_t v32;
  int v33;
  int v34;
  _BYTE *v35;
  char *v36;
  __int128 v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  BOOL v41;
  unsigned __int8 **v42;
  _QWORD *v43;
  _BYTE *v45;

  v3 = *(_QWORD *)(a2 + 48);
  v4 = *(_QWORD **)(v3 + 80);
  v43 = (_QWORD *)(v3 + 88);
  if (v4 != (_QWORD *)(v3 + 88))
  {
    v5 = (unsigned __int8 **)result;
    v42 = (unsigned __int8 **)result;
    do
    {
      v6 = (_QWORD *)v4[4];
      v7 = **v5;
      v8 = (_BYTE *)v6[4];
      if (**v5)
      {
        if (*v8)
        {
          if (*v8 != v7)
            *v8 = v7;
        }
        else
        {
          v13 = (_BYTE *)operator new();
          *v13 = v7;
          v14 = v6[4];
          v6[4] = v13;
          if (v14)
          {
            MEMORY[0x227684CE8](v14, 0x1000C4077774924);
            v13 = (_BYTE *)v6[4];
          }
          v15 = (unint64_t *)operator new();
          *v15 = (unint64_t)v13;
          v16 = (unint64_t *)v6[5];
          v17 = atomic_load(v15);
          do
            __ldaxr(v16);
          while (__stlxr(v17, v16));
          MEMORY[0x227684CE8]();
          sub_224124EA8((uint64_t)v6);
        }
      }
      else if (*v8)
      {
        v9 = (unint64_t *)v6[5];
        v10 = atomic_load(*(unint64_t **)(*(_QWORD *)(v6[6] + 72) + 40));
        do
          __ldaxr(v9);
        while (__stlxr(v10, v9));
        sub_224124EA8((uint64_t)v6);
        v11 = (_BYTE *)operator new();
        *v11 = 0;
        v12 = v6[4];
        v6[4] = v11;
        if (v12)
          MEMORY[0x227684CE8](v12, 0x1000C4077774924);
      }
      v18 = v4[4];
      v19 = v5[1];
      v45 = *v5;
      v21 = v19 + 8;
      v20 = (_QWORD *)*((_QWORD *)v19 + 1);
      if (!v20)
      {
        v25 = v19 + 8;
        v35 = operator new(0x40uLL);
        v36 = v35 + 32;
        if ((*(char *)(v18 + 31) & 0x80000000) == 0)
          goto LABEL_46;
LABEL_48:
        sub_223197FA4(v36, *(void **)(v18 + 8), *(_QWORD *)(v18 + 16));
        goto LABEL_49;
      }
      v22 = *(char *)(v18 + 31);
      if (v22 >= 0)
        v23 = (const void *)(v18 + 8);
      else
        v23 = *(const void **)(v18 + 8);
      if (v22 >= 0)
        v24 = *(unsigned __int8 *)(v18 + 31);
      else
        v24 = *(_QWORD *)(v18 + 16);
      do
      {
        while (1)
        {
          v25 = v20;
          v28 = (_QWORD *)v20[4];
          v26 = v20 + 4;
          v27 = v28;
          v29 = *((char *)v26 + 23);
          v30 = v29 >= 0 ? v26 : v27;
          v31 = v29 >= 0 ? *((unsigned __int8 *)v26 + 23) : v26[1];
          v32 = v31 >= v24 ? v24 : v31;
          v33 = memcmp(v23, v30, v32);
          if (v33)
            break;
          if (v24 >= v31)
            goto LABEL_39;
LABEL_25:
          v20 = (_QWORD *)*v25;
          v21 = v25;
          if (!*v25)
            goto LABEL_45;
        }
        if (v33 < 0)
          goto LABEL_25;
LABEL_39:
        v34 = memcmp(v30, v23, v32);
        if (v34)
        {
          if ((v34 & 0x80000000) == 0)
            goto LABEL_52;
        }
        else if (v31 >= v24)
        {
          goto LABEL_52;
        }
        v20 = (_QWORD *)v25[1];
      }
      while (v20);
      v21 = v25 + 1;
LABEL_45:
      v35 = operator new(0x40uLL);
      v36 = v35 + 32;
      if (*(char *)(v18 + 31) < 0)
        goto LABEL_48;
LABEL_46:
      v37 = *(_OWORD *)(v18 + 8);
      *((_QWORD *)v36 + 2) = *(_QWORD *)(v18 + 24);
      *(_OWORD *)v36 = v37;
LABEL_49:
      v35[56] = *v45;
      *(_QWORD *)v35 = 0;
      *((_QWORD *)v35 + 1) = 0;
      *((_QWORD *)v35 + 2) = v25;
      *v21 = v35;
      v38 = **(_QWORD **)v19;
      if (v38)
      {
        *(_QWORD *)v19 = v38;
        v35 = (_BYTE *)*v21;
      }
      sub_2231A9A8C(*((uint64_t **)v19 + 1), (uint64_t *)v35);
      ++*((_QWORD *)v19 + 2);
      v18 = v4[4];
LABEL_52:
      v5 = v42;
      result = sub_2241292F0(a3, v18, a3);
      v39 = (_QWORD *)v4[1];
      if (v39)
      {
        do
        {
          v40 = v39;
          v39 = (_QWORD *)*v39;
        }
        while (v39);
      }
      else
      {
        do
        {
          v40 = (_QWORD *)v4[2];
          v41 = *v40 == (_QWORD)v4;
          v4 = v40;
        }
        while (!v41);
      }
      v4 = v40;
    }
    while (v40 != v43);
  }
  return result;
}

void sub_224129628(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_22412963C(uint64_t a1)
{
  std::mutex *v2;

  *(_QWORD *)a1 = &off_24EC6A5D0;
  if (*(_BYTE *)(a1 + 264) && *(char *)(a1 + 263) < 0)
    operator delete(*(void **)(a1 + 240));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 184));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 136));
  std::mutex::~mutex((std::mutex *)(a1 + 72));
  sub_224129A28(*(char **)(a1 + 56));
  sub_2233FADDC(*(_QWORD **)(a1 + 24));
  v2 = *(std::mutex **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
  {
    std::mutex::~mutex(v2);
    MEMORY[0x227684CE8]();
  }
  return a1;
}

void sub_2241296D4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2241296F8(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    if (*(_BYTE *)(v1 + 48) && *(char *)(v1 + 47) < 0)
    {
      operator delete(*(void **)(v1 + 24));
      if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_10:
        JUMPOUT(0x227684CE8);
    }
    else if ((*(char *)(v1 + 23) & 0x80000000) == 0)
    {
      goto LABEL_10;
    }
    operator delete(*(void **)v1);
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_22412976C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIKN4cv3d3kit3viz9ContextIDEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIKN4cv3d3kit3viz9ContextIDEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIKN4cv3d3kit3viz9ContextIDEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIKN4cv3d3kit3viz9ContextIDEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t *sub_2241297DC(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  BOOL v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t **v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  _QWORD *v20;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = result;
    v6 = result + 1;
    do
    {
      v7 = (uint64_t *)v5[1];
      v8 = v6;
      if ((uint64_t *)*v5 == v6)
        goto LABEL_10;
      v9 = (uint64_t *)v5[1];
      v10 = v6;
      if (v7)
      {
        do
        {
          v8 = v9;
          v9 = (uint64_t *)v9[1];
        }
        while (v9);
      }
      else
      {
        do
        {
          v8 = (uint64_t *)v10[2];
          v11 = *v8 == (_QWORD)v10;
          v10 = v8;
        }
        while (v11);
      }
      v12 = v4[4];
      if (v8[4] < v12)
      {
LABEL_10:
        if (v7)
          v13 = (uint64_t **)v8;
        else
          v13 = (uint64_t **)v6;
        if (v7)
          v14 = (uint64_t **)(v8 + 1);
        else
          v14 = (uint64_t **)v6;
        if (*v14)
          goto LABEL_29;
      }
      else
      {
        v14 = (uint64_t **)v6;
        v13 = (uint64_t **)v6;
        if (v7)
        {
          while (1)
          {
            while (1)
            {
              v13 = (uint64_t **)v7;
              v15 = v7[4];
              if (v15 <= v12)
                break;
              v7 = *v13;
              v14 = v13;
              if (!*v13)
                goto LABEL_25;
            }
            if (v15 >= v12)
              goto LABEL_29;
            v7 = v13[1];
            if (!v7)
            {
              v14 = v13 + 1;
              break;
            }
          }
        }
      }
LABEL_25:
      v16 = (uint64_t *)operator new(0x28uLL);
      v16[4] = v4[4];
      *v16 = 0;
      v16[1] = 0;
      v16[2] = (uint64_t)v13;
      *v14 = v16;
      v17 = *(_QWORD *)*v5;
      if (v17)
      {
        *v5 = v17;
        v18 = *v14;
      }
      else
      {
        v18 = v16;
      }
      result = sub_2231A9A8C((uint64_t *)v5[1], v18);
      ++v5[2];
LABEL_29:
      v19 = (_QWORD *)v4[1];
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (_QWORD *)v4[2];
          v11 = *v20 == (_QWORD)v4;
          v4 = v20;
        }
        while (!v11);
      }
      v4 = v20;
    }
    while (v20 != a3);
  }
  return result;
}

uint64_t *sub_224129950(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(_QWORD *)(v2 + 56);
      *(_QWORD *)(v2 + 56) = 0;
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 48);
        *(_QWORD *)(v3 + 48) = 0;
        if (v4)
          sub_224128AA0(v4);
        v5 = *(_QWORD *)(v3 + 40);
        *(_QWORD *)(v3 + 40) = 0;
        if (v5)
          MEMORY[0x227684CE8](v5, 0x80C40B8603338);
        v6 = *(_QWORD *)(v3 + 32);
        *(_QWORD *)(v3 + 32) = 0;
        if (v6)
          MEMORY[0x227684CE8](v6, 0x1000C4077774924);
        if (*(char *)(v3 + 31) < 0)
          operator delete(*(void **)(v3 + 8));
        MEMORY[0x227684CE8](v3, 0x10B3C406DCED8F8);
      }
      if (*(char *)(v2 + 55) < 0)
        operator delete(*(void **)(v2 + 32));
    }
    operator delete((void *)v2);
  }
  return a1;
}

void sub_224129A28(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (a1)
  {
    sub_224129A28(*(_QWORD *)a1);
    sub_224129A28(*((_QWORD *)a1 + 1));
    v2 = *((_QWORD *)a1 + 7);
    *((_QWORD *)a1 + 7) = 0;
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 48);
      *(_QWORD *)(v2 + 48) = 0;
      if (v3)
        sub_224128AA0(v3);
      v4 = *(_QWORD *)(v2 + 40);
      *(_QWORD *)(v2 + 40) = 0;
      if (v4)
        MEMORY[0x227684CE8](v4, 0x80C40B8603338);
      v5 = *(_QWORD *)(v2 + 32);
      *(_QWORD *)(v2 + 32) = 0;
      if (v5)
        MEMORY[0x227684CE8](v5, 0x1000C4077774924);
      if (*(char *)(v2 + 31) < 0)
        operator delete(*(void **)(v2 + 8));
      MEMORY[0x227684CE8](v2, 0x10B3C406DCED8F8);
    }
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

uint64_t **sub_224129B04(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  const void *v9;
  size_t v10;
  uint64_t **v11;
  _QWORD *v12;
  const void *v13;
  const void *v14;
  int v15;
  const void *v16;
  size_t v17;
  size_t v18;
  int v19;
  int v20;
  char *v21;
  _BYTE *v22;
  __int128 *v23;
  __int128 v24;
  uint64_t *v25;
  uint64_t *v26;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *((char *)a2 + 23);
    if (v8 >= 0)
      v9 = a2;
    else
      v9 = *a2;
    if (v8 >= 0)
      v10 = *((unsigned __int8 *)a2 + 23);
    else
      v10 = (size_t)a2[1];
    while (1)
    {
      v11 = (uint64_t **)v6;
      v14 = (const void *)v6[4];
      v12 = v6 + 4;
      v13 = v14;
      v15 = *((char *)v12 + 23);
      if (v15 >= 0)
        v16 = v12;
      else
        v16 = v13;
      if (v15 >= 0)
        v17 = *((unsigned __int8 *)v12 + 23);
      else
        v17 = v12[1];
      if (v17 >= v10)
        v18 = v10;
      else
        v18 = v17;
      v19 = memcmp(v9, v16, v18);
      if (v19)
      {
        if (v19 < 0)
          goto LABEL_8;
LABEL_22:
        v20 = memcmp(v16, v9, v18);
        if (v20)
        {
          if ((v20 & 0x80000000) == 0)
            return v11;
        }
        else if (v17 >= v10)
        {
          return v11;
        }
        v6 = v11[1];
        if (!v6)
        {
          v7 = v11 + 1;
          goto LABEL_29;
        }
      }
      else
      {
        if (v10 >= v17)
          goto LABEL_22;
LABEL_8:
        v6 = *v11;
        v7 = v11;
        if (!*v11)
          goto LABEL_29;
      }
    }
  }
  v11 = a1 + 1;
LABEL_29:
  v21 = (char *)operator new(0x40uLL);
  v22 = v21 + 32;
  v23 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_223197FA4(v22, *(void **)v23, *((_QWORD *)v23 + 1));
  }
  else
  {
    v24 = *v23;
    *((_QWORD *)v21 + 6) = *((_QWORD *)v23 + 2);
    *(_OWORD *)v22 = v24;
  }
  v21[56] = 0;
  *(_QWORD *)v21 = 0;
  *((_QWORD *)v21 + 1) = 0;
  *((_QWORD *)v21 + 2) = v11;
  *v7 = (uint64_t *)v21;
  v25 = (uint64_t *)**a1;
  v26 = (uint64_t *)v21;
  if (v25)
  {
    *a1 = v25;
    v26 = *v7;
  }
  sub_2231A9A8C(a1[1], v26);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v21;
}

void sub_224129C7C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_224129C90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  signed int v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  _BOOL4 v8;
  char v9;
  uint64_t v10;
  unsigned __int8 *v11;
  void **v12;
  uint64_t v13;
  std::chrono::steady_clock::time_point v14;
  signed int v15;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v17;
  std::condition_variable *v18;
  uint64_t *v19;
  char v20;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v21;
  unsigned __int8 v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  BOOL v27;
  __int128 *v28;
  uint64_t v29;
  char v30;
  size_t v31;
  void *v32;
  unint64_t v33;
  const void **v34;
  const void *v35;
  uint64_t v36;
  uint64_t v37;
  void **v38;
  uint64_t v39;
  const char *v40;
  size_t v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  const char *v44;
  size_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  void **v49;
  NSObject *v50;
  uint64_t v51;
  uint64_t v52;
  size_t v53;
  std::__shared_weak_count_vtbl *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  size_t v57;
  size_t v58;
  _BYTE *v59;
  void *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  _QWORD *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  char *v69;
  char *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *shared_owners;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  const char *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  void **v87;
  std::__shared_weak_count *v88;
  unint64_t *p_shared_owners;
  unint64_t v90;
  std::chrono::system_clock::time_point v91;
  unsigned __int8 v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  uint64_t v96;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v97;
  void *v98;
  void *v99;
  uint64_t v100;
  const char *v101;
  uint64_t v102;
  int v103;
  std::unique_lock<std::mutex> __lk;
  _QWORD v105[3];
  int v106;
  const char *v107;
  int v108;
  const char *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  void *__p[2];
  int64_t v113;
  void *__s2[2];
  uint64_t v115;
  uint64_t v116;
  char v117;
  _QWORD v118[3];
  uint64_t v119;
  unint64_t v120;
  void *v121;
  char v122;
  unint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  _QWORD v128[2];
  _BYTE v129[24];
  unint64_t v130;
  char v131;
  char v132;
  void **v133;
  void *v134;
  unint64_t v135;
  char v136;
  char v137;
  void *v138;
  char v139;
  char v140;
  char v141;
  __int128 v142;
  uint64_t v143;
  char v144;
  uint64_t v145;

  v2 = a2;
  v145 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 104))
  {
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 184);
    __lk.__owns_ = 1;
    std::mutex::lock((std::mutex *)(a1 + 184));
    if (!*(_BYTE *)(a1 + 96)
      || (v4 = atomic_load((unsigned int *)(a1 + 128)), *(_QWORD *)(a1 + 88) > (unint64_t)v4))
    {
LABEL_4:
      v5 = (unsigned int *)(a1 + 128);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
      v2 = a2;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 72) + 88) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 72) + 88, a2);
      if (__lk.__owns_)
        std::mutex::unlock(__lk.__m_);
      if (!*(_BYTE *)(a1 + 104))
        goto LABEL_195;
LABEL_11:
      v7 = *(_QWORD *)(v2 + 24);
      if (!v7)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v7 = *(_QWORD *)(v2 + 24);
      }
      (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v7 + 48))(v129);
      v8 = 0;
      strcpy((char *)__s2, "cv3d.net");
      HIBYTE(v115) = 8;
      LODWORD(v116) = 2;
      v117 = 1;
      v9 = v129[23];
      if (v129[23] >= 0)
        v10 = v129[23];
      else
        v10 = *(_QWORD *)&v129[8];
      if (v10 == 8)
      {
        if ((v129[23] & 0x80) != 0)
        {
          if (memcmp(*(const void **)v129, __s2, *(size_t *)&v129[8]))
          {
            operator delete(*(void **)v129);
            return;
          }
        }
        else if (v129[23])
        {
          v11 = v129;
          v12 = __s2;
          v13 = v129[23];
          while (*v11 == *(unsigned __int8 *)v12)
          {
            ++v11;
            v12 = (void **)((char *)v12 + 1);
            if (!--v13)
              goto LABEL_189;
          }
          v8 = 0;
          if ((v129[23] & 0x80) != 0)
          {
LABEL_194:
            operator delete(*(void **)v129);
            if (!v8)
              return;
            goto LABEL_195;
          }
LABEL_191:
          if (!v8)
            return;
          goto LABEL_195;
        }
LABEL_189:
        v8 = v130 == 2;
      }
      if (v9 < 0)
        goto LABEL_194;
      goto LABEL_191;
    }
    v14.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v15 = atomic_load((unsigned int *)(a1 + 128));
    if (!*(_BYTE *)(a1 + 96))
LABEL_197:
      sub_22324A974();
    rep = v14.__d_.__rep_;
    v17 = 0;
    v99 = (void *)*MEMORY[0x24BEDB7F0];
    v98 = *(void **)(MEMORY[0x24BEDB7F0] + 64);
    v100 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v18 = (std::condition_variable *)(a1 + 136);
    v19 = &qword_2540CE000;
    v96 = MEMORY[0x24BEDB848] + 16;
    v20 = 1;
    v97 = v14.__d_.__rep_;
    while (1)
    {
      if (*(_QWORD *)(a1 + 88) > (unint64_t)v15)
        goto LABEL_4;
      if ((v20 & 1) != 0 || std::chrono::steady_clock::now().__d_.__rep_ - (v17 + rep) >= 500000000)
        break;
LABEL_163:
      std::chrono::steady_clock::now();
      v91.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      v21.__d_.__rep_ = 1000000000;
      if (v91.__d_.__rep_)
      {
        if (v91.__d_.__rep_ < 1)
        {
          if ((unint64_t)v91.__d_.__rep_ >= 0xFFDF3B645A1CAC09)
            v21.__d_.__rep_ = 1000 * v91.__d_.__rep_ + 1000000000;
          else
            v21.__d_.__rep_ = 0x800000003B9ACA00;
        }
        else if ((unint64_t)v91.__d_.__rep_ >= 0x20C49BA5D411B8)
        {
          v21.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          v21.__d_.__rep_ = 1000 * v91.__d_.__rep_ + 1000000000;
        }
      }
      std::condition_variable::__do_timed_wait(v18, &__lk, v21);
      std::chrono::steady_clock::now();
      v20 = 0;
      v15 = atomic_load((unsigned int *)(a1 + 128));
      if (!*(_BYTE *)(a1 + 96))
        goto LABEL_197;
    }
    v22 = atomic_load((unsigned __int8 *)qword_2540CEEF8);
    if ((v22 & 1) == 0 && __cxa_guard_acquire(qword_2540CEEF8))
    {
      v92 = atomic_load((unsigned __int8 *)&qword_2557954E0);
      if ((v92 & 1) == 0 && __cxa_guard_acquire(&qword_2557954E0))
      {
        sub_22322BDE0(&qword_2557954D8);
        __cxa_guard_release(&qword_2557954E0);
      }
      *(_QWORD *)v129 = qword_2557954D8;
      HIBYTE(v115) = 12;
      strcpy((char *)__s2, "cv3d.kit.viz");
      sub_2232300E0((uint64_t **)v129, (uint64_t)__s2, &qword_2540CEEF0);
      if (SHIBYTE(v115) < 0)
        operator delete(__s2[0]);
      __cxa_guard_release(qword_2540CEEF8);
      v18 = (std::condition_variable *)(a1 + 136);
      rep = v97;
      v19 = &qword_2540CE000;
    }
    v23 = v19[478];
    v126 = v23;
    if (**(int **)(v23 + 56) > 4
      || ((v24 = *(unsigned __int8 *)(v23 + 72),
           v25 = sub_22322F254(v23, "OSLogSurrogateAppender", 1, 0),
           v26 = v25,
           !v24)
        ? (v27 = v25 == 0)
        : (v27 = 0),
          v27))
    {
LABEL_162:
      v17 = std::chrono::steady_clock::now().__d_.__rep_ - rep;
      goto LABEL_163;
    }
    v103 = v24;
    sub_223195210((uint64_t)__s2);
    v106 = 0;
    sub_22410E024(v105, "blocking caller while waiting for space in queue");
    if (v106 == -1)
      sub_22316DD70();
    v128[0] = &v127;
    ((void (*)(void **__return_ptr, _QWORD *, _QWORD *))off_24EC6A780[v106])(__p, v128, v105);
    if (v106 != -1)
      ((void (*)(_QWORD *, _QWORD *))off_24EC6A768[v106])(v128, v105);
    sub_224106604((uint64_t)__p, *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), (uint64_t)v129);
    v106 = 0;
    sub_22411119C((uint64_t)v128, (std::string::size_type)v105, (uint64_t)v129);
    if (v106 == -1)
      sub_22316DD70();
    v128[0] = &v127;
    ((void (*)(__int128 *__return_ptr, _QWORD *, _QWORD *))off_24EC6A780[v106])(&v142, v128, v105);
    if (v106 != -1)
      ((void (*)(_QWORD *, _QWORD *))off_24EC6A768[v106])(v128, v105);
    if (v143 >= 0)
      v28 = &v142;
    else
      v28 = (__int128 *)v142;
    if (v143 >= 0)
      v29 = HIBYTE(v143);
    else
      v29 = *((_QWORD *)&v142 + 1);
    sub_2231813E8(&v115, (uint64_t)v28, v29);
    if (SHIBYTE(v143) < 0)
      operator delete((void *)v142);
    if (!v141)
    {
LABEL_58:
      if (SHIBYTE(v113) < 0)
      {
        operator delete(__p[0]);
        v30 = v124;
        if ((v124 & 0x10) == 0)
          goto LABEL_60;
      }
      else
      {
        v30 = v124;
        if ((v124 & 0x10) == 0)
        {
LABEL_60:
          if ((v30 & 8) == 0)
          {
            v31 = 0;
            HIBYTE(v113) = 0;
            v32 = __p;
            goto LABEL_74;
          }
          v33 = v118[2];
          v34 = (const void **)v118;
LABEL_66:
          v35 = *v34;
          v31 = v33 - (_QWORD)*v34;
          if (v31 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v31 >= 0x17)
          {
            v36 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v31 | 7) != 0x17)
              v36 = v31 | 7;
            v37 = v36 + 1;
            v32 = operator new(v36 + 1);
            __p[1] = (void *)v31;
            v113 = v37 | 0x8000000000000000;
            __p[0] = v32;
          }
          else
          {
            HIBYTE(v113) = v33 - *(_BYTE *)v34;
            v32 = __p;
            if (!v31)
            {
LABEL_74:
              *((_BYTE *)v32 + v31) = 0;
              v105[0] = &v126;
              v105[1] = std::chrono::steady_clock::now().__d_.__rep_;
              v105[2] = std::chrono::system_clock::now().__d_.__rep_;
              v106 = 4;
              v107 = "unknown file";
              v108 = 203;
              v109 = "unknown function";
              v110 = 0;
              v111 = 0;
              if (v113 >= 0)
                v38 = __p;
              else
                v38 = (void **)__p[0];
              v39 = *(_QWORD *)v105[0];
              v40 = (const char *)(*(_QWORD *)v105[0] + 16);
              v101 = v40;
              if (*(char *)(*(_QWORD *)v105[0] + 39) < 0)
              {
                v40 = *(const char **)(v39 + 16);
                v41 = *(_QWORD *)(v39 + 24);
                v102 = *(_QWORD *)v105[0];
                v43 = atomic_load((unsigned __int8 *)&qword_255788F58);
                if ((v43 & 1) != 0)
                  goto LABEL_81;
              }
              else
              {
                v41 = *(unsigned __int8 *)(*(_QWORD *)v105[0] + 39);
                v102 = *(_QWORD *)v105[0];
                v42 = atomic_load((unsigned __int8 *)&qword_255788F58);
                if ((v42 & 1) != 0)
                  goto LABEL_81;
              }
              if (__cxa_guard_acquire(&qword_255788F58))
              {
                sub_224568628((uint64_t)&v142);
                if (v144)
                {
                  *(_OWORD *)byte_255788F40 = v142;
                  *(_QWORD *)&byte_255788F40[16] = v143;
                }
                else
                {
                  byte_255788F40[23] = 14;
                  strcpy(byte_255788F40, "com.apple.cv3d");
                }
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
                __cxa_guard_release(&qword_255788F58);
              }
LABEL_81:
              if (byte_255788F40[23] >= 0)
                v44 = byte_255788F40;
              else
                v44 = *(const char **)byte_255788F40;
              if (byte_255788F40[23] >= 0)
                v45 = byte_255788F40[23];
              else
                v45 = *(_QWORD *)&byte_255788F40[8];
              *(_QWORD *)v129 = os_log_create(v44, v40);
              if (v45 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              if (v45 >= 0x17)
              {
                v47 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v45 | 7) != 0x17)
                  v47 = v45 | 7;
                v48 = v47 + 1;
                v46 = operator new(v47 + 1);
                *(_QWORD *)&v129[16] = v45;
                v130 = v48 | 0x8000000000000000;
                *(_QWORD *)&v129[8] = v46;
              }
              else
              {
                HIBYTE(v130) = v45;
                v46 = &v129[8];
                if (!v45)
                {
LABEL_95:
                  v46[v45] = 0;
                  v131 = 1;
                  if (v41 > 0x7FFFFFFFFFFFFFF7)
                    sub_22316DBC0();
                  v19 = &qword_2540CE000;
                  if (v41 >= 0x17)
                  {
                    v51 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v41 | 7) != 0x17)
                      v51 = v41 | 7;
                    v52 = v51 + 1;
                    v49 = (void **)operator new(v51 + 1);
                    v134 = (void *)v41;
                    v135 = v52 | 0x8000000000000000;
                    v133 = v49;
                  }
                  else
                  {
                    HIBYTE(v135) = v41;
                    v49 = (void **)&v133;
                    if (!v41)
                    {
                      LOBYTE(v133) = 0;
                      v136 = 1;
                      v50 = *(NSObject **)v129;
                      if ((SHIBYTE(v135) & 0x80000000) == 0)
                        goto LABEL_99;
                      goto LABEL_105;
                    }
                  }
                  memmove(v49, v40, v41);
                  *((_BYTE *)v49 + v41) = 0;
                  v136 = 1;
                  v50 = *(NSObject **)v129;
                  if ((SHIBYTE(v135) & 0x80000000) == 0)
                  {
LABEL_99:
                    if (!v131)
                      goto LABEL_108;
                    goto LABEL_106;
                  }
LABEL_105:
                  operator delete(v133);
                  if (!v131)
                    goto LABEL_108;
LABEL_106:
                  if (SHIBYTE(v130) < 0)
                    operator delete(*(void **)&v129[8]);
LABEL_108:
                  if (*(_QWORD *)v129)
                    os_release(*(void **)v129);
                  if (!v26 || !*(_QWORD *)(v26 + 24))
                  {
                    os_log_type_enabled(v50, OS_LOG_TYPE_ERROR);
                    *(_DWORD *)v129 = 136315138;
                    *(_QWORD *)&v129[4] = v38;
                    v60 = (void *)_os_log_send_and_compose_impl();
                    v18 = (std::condition_variable *)(a1 + 136);
                    rep = v97;
                    v61 = v103;
                    if (v60)
                      free(v60);
LABEL_149:
                    if (v61)
                    {
                      v87 = __p;
                      if (v113 < 0)
                        v87 = (void **)__p[0];
                      sub_22322C138((uint64_t)v105, "%s", (const char *)v87);
                      sub_223182C08((uint64_t)v105);
                    }
                    sub_223182C08((uint64_t)v105);
                    v88 = v111;
                    if (!v111)
                      goto LABEL_157;
                    p_shared_owners = (unint64_t *)&v111->__shared_owners_;
                    do
                      v90 = __ldaxr(p_shared_owners);
                    while (__stlxr(v90 - 1, p_shared_owners));
                    if (!v90)
                    {
                      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                      std::__shared_weak_count::__release_weak(v88);
                      if ((SHIBYTE(v113) & 0x80000000) == 0)
                        goto LABEL_159;
                    }
                    else
                    {
LABEL_157:
                      if ((SHIBYTE(v113) & 0x80000000) == 0)
                      {
LABEL_159:
                        __s2[0] = v99;
                        *(void **)((char *)__s2 + *((_QWORD *)v99 - 3)) = v98;
                        v115 = v100;
                        v116 = v96;
                        if (v122 < 0)
                          operator delete(v121);
                        std::streambuf::~streambuf();
                        std::iostream::~basic_iostream();
                        MEMORY[0x227684BE0](&v125);
                        goto LABEL_162;
                      }
                    }
                    operator delete(__p[0]);
                    goto LABEL_159;
                  }
                  v53 = _os_log_pack_size();
                  v54 = (std::__shared_weak_count_vtbl *)operator new(v53, (std::align_val_t)8uLL);
                  v55 = (std::__shared_weak_count *)operator new();
                  v55->__shared_owners_ = 0;
                  v56 = (unint64_t *)&v55->__shared_owners_;
                  v55->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                  v55->__shared_weak_owners_ = 0;
                  v55[1].__vftable = v54;
                  v57 = strlen((const char *)v38);
                  v94 = v55;
                  if (v57 > 0x7FFFFFFFFFFFFFF7)
                    sub_22316DBC0();
                  v58 = v57;
                  if (v57 >= 0x17)
                  {
                    v62 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v57 | 7) != 0x17)
                      v62 = v57 | 7;
                    v63 = v62 + 1;
                    v59 = operator new(v62 + 1);
                    *(_QWORD *)&v129[8] = v58;
                    *(_QWORD *)&v129[16] = v63 | 0x8000000000000000;
                    *(_QWORD *)v129 = v59;
                  }
                  else
                  {
                    v129[23] = v57;
                    v59 = v129;
                    if (!v57)
                    {
LABEL_122:
                      v59[v58] = 0;
                      v64 = *(_QWORD *)v129;
                      *(_QWORD *)&v142 = *(_QWORD *)&v129[8];
                      *(_QWORD *)((char *)&v142 + 7) = *(_QWORD *)&v129[15];
                      v65 = v129[23];
                      v66 = operator new(0x38uLL);
                      v67 = (std::__shared_weak_count *)v66;
                      v66[1] = 0;
                      v68 = v66 + 1;
                      v66[2] = 0;
                      v66[3] = off_24EC1FA48;
                      v69 = (char *)(v66 + 3);
                      v66[4] = v64;
                      v70 = (char *)(v66 + 4);
                      *v66 = &off_24EC1F9F8;
                      v66[5] = v142;
                      *(_QWORD *)((char *)v66 + 47) = *(_QWORD *)((char *)&v142 + 7);
                      *((_BYTE *)v66 + 55) = v65;
                      do
                        v71 = __ldxr(v56);
                      while (__stxr(v71 + 1, v56));
                      v19 = &qword_2540CE000;
                      do
                        v72 = __ldxr(v68);
                      while (__stxr(v72 + 1, v68));
                      do
                        v73 = __ldaxr(v68);
                      while (__stlxr(v73 - 1, v68));
                      if (!v73)
                      {
                        (*(void (**)(_QWORD *))(*v66 + 16))(v66);
                        std::__shared_weak_count::__release_weak(v67);
                      }
                      do
                        v74 = __ldaxr(v56);
                      while (__stlxr(v74 - 1, v56));
                      if (!v74)
                      {
                        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                        std::__shared_weak_count::__release_weak(v94);
                      }
                      if (SHIBYTE(v67[2].__vftable) >= 0)
                        shared_owners = v70;
                      else
                        shared_owners = (char *)v67[1].__shared_owners_;
                      v76 = _os_log_pack_fill();
                      *(_DWORD *)v76 = 136315138;
                      *(_QWORD *)(v76 + 4) = shared_owners;
                      v77 = operator new();
                      v78 = *(unsigned __int8 *)(v102 + 39);
                      v79 = v101;
                      if ((v78 & 0x80u) != 0)
                      {
                        v79 = *(const char **)(v102 + 16);
                        v78 = *(_QWORD *)(v102 + 24);
                      }
                      *(_QWORD *)v77 = v54;
                      *(_QWORD *)(v77 + 8) = v54;
                      *(_QWORD *)(v77 + 16) = v94;
                      *(_QWORD *)(v77 + 24) = v69;
                      *(_QWORD *)(v77 + 32) = v67;
                      *(_QWORD *)(v77 + 40) = v79;
                      *(_QWORD *)(v77 + 48) = v78;
                      *(_BYTE *)(v77 + 56) = 16;
                      *(_QWORD *)v129 = v77;
                      (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v26 + 24) + 40))(*(_QWORD *)(v26 + 24), v129);
                      v61 = v103;
                      v80 = *(_QWORD *)v129;
                      *(_QWORD *)v129 = 0;
                      v18 = (std::condition_variable *)(a1 + 136);
                      rep = v97;
                      if (v80)
                      {
                        v81 = *(std::__shared_weak_count **)(v80 + 32);
                        if (v81)
                        {
                          v82 = (unint64_t *)&v81->__shared_owners_;
                          do
                            v83 = __ldaxr(v82);
                          while (__stlxr(v83 - 1, v82));
                          if (!v83)
                          {
                            ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                            std::__shared_weak_count::__release_weak(v81);
                          }
                        }
                        v84 = *(std::__shared_weak_count **)(v80 + 16);
                        if (v84)
                        {
                          v85 = (unint64_t *)&v84->__shared_owners_;
                          do
                            v86 = __ldaxr(v85);
                          while (__stlxr(v86 - 1, v85));
                          if (!v86)
                          {
                            ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                            std::__shared_weak_count::__release_weak(v84);
                          }
                        }
                        MEMORY[0x227684CE8](v80, 0x10F0C40B62ED6C6);
                        v61 = v103;
                      }
                      goto LABEL_149;
                    }
                  }
                  memcpy(v59, v38, v58);
                  goto LABEL_122;
                }
              }
              memmove(v46, v44, v45);
              goto LABEL_95;
            }
          }
          memmove(v32, v35, v31);
          goto LABEL_74;
        }
      }
      v33 = v123;
      v34 = (const void **)&v119;
      if (v123 < v120)
      {
        v123 = v120;
        v33 = v120;
        v34 = (const void **)&v119;
      }
      goto LABEL_66;
    }
    if (!v140)
      goto LABEL_55;
    if (v139 < 0)
    {
      operator delete(v138);
      if ((v137 & 0x80000000) == 0)
      {
LABEL_55:
        if (!(_BYTE)v133)
          goto LABEL_58;
LABEL_56:
        if (v132 < 0)
          operator delete(*(void **)&v129[16]);
        goto LABEL_58;
      }
    }
    else if ((v137 & 0x80000000) == 0)
    {
      goto LABEL_55;
    }
    operator delete(v134);
    if (!(_BYTE)v133)
      goto LABEL_58;
    goto LABEL_56;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 72) + 88) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 72) + 88, a2);
  if (*(_BYTE *)(a1 + 104))
    goto LABEL_11;
LABEL_195:
  v93 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 72) + 72);
  (*(void (**)(uint64_t))(*(_QWORD *)v93 + 64))(v93);
}

void sub_22412ABAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::mutex *a34,char a35,int a36,__int16 a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  char a68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;

  __cxa_guard_abort(&qword_255788F58);
  sub_223182C08((uint64_t)&a37);
  v69 = (std::__shared_weak_count *)a45;
  if (a45)
  {
    v70 = (unint64_t *)(a45 + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  if (a51 < 0)
    operator delete(__p);
  a52 = a28;
  *(void **)((char *)&a52 + *((_QWORD *)a28 - 3)) = a27;
  a54 = a29;
  a55 = MEMORY[0x24BEDB848] + 16;
  if (a68 < 0)
    operator delete(a63);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x227684BE0](a30);
  if (!a35)
    _Unwind_Resume(a1);
  std::mutex::unlock(a34);
  _Unwind_Resume(a1);
}

uint64_t sub_22412AF98(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2 == (_QWORD *)(a1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v4)
    return a1;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

uint64_t sub_22412B038(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  _QWORD *v13;
  unint64_t v15;
  unint64_t v16;
  _QWORD v17[2];
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  mach_timebase_info info[2];
  int v29;
  __int128 __p;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  void *v35[2];
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  void *v39[2];
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  void *v43[2];
  uint64_t v44;
  char v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v4 = mach_continuous_time();
  v5 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info(info);
    LODWORD(v15) = info[0].numer;
    LODWORD(v16) = info[0].denom;
    *(double *)&qword_255795558 = (double)v15 / (double)v16;
    __cxa_guard_release(&qword_255795560);
  }
  v17[0] = llround(*(double *)&qword_255795558 * (double)v4);
  v17[1] = 2;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  *(_OWORD *)&info[0].numer = *(_OWORD *)a2;
  v29 = *(_DWORD *)(a2 + 16);
  LOBYTE(__p) = 0;
  v32 = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    if (*(char *)(a2 + 47) < 0)
    {
      sub_223197FA4(&__p, *(void **)(a2 + 24), *(_QWORD *)(a2 + 32));
    }
    else
    {
      __p = *(_OWORD *)(a2 + 24);
      v31 = *(_QWORD *)(a2 + 40);
    }
    v32 = 1;
  }
  LOBYTE(v33) = 0;
  v45 = 0;
  if (*(_BYTE *)(a2 + 200))
  {
    sub_224011F80((char *)&v33, (__int128 *)(a2 + 56));
    v45 = 1;
  }
  v46 = *(_OWORD *)(a2 + 208);
  v47 = *(_QWORD *)(a2 + 224);
  v6 = operator new();
  v7 = (_QWORD *)v6;
  *(_QWORD *)v6 = off_24EC671D8;
  *(_OWORD *)(v6 + 8) = *(_OWORD *)&info[0].numer;
  *(_DWORD *)(v6 + 24) = v29;
  *(_BYTE *)(v6 + 32) = 0;
  *(_BYTE *)(v6 + 56) = 0;
  if (v32)
  {
    *(_OWORD *)(v6 + 32) = __p;
    *(_QWORD *)(v6 + 48) = v31;
    v31 = 0;
    __p = 0uLL;
    *(_BYTE *)(v6 + 56) = 1;
  }
  *(_BYTE *)(v6 + 64) = 0;
  *(_BYTE *)(v6 + 208) = 0;
  if (v45)
  {
    *(_OWORD *)(v6 + 64) = v33;
    *(_QWORD *)(v6 + 80) = v34;
    v34 = 0;
    v33 = 0uLL;
    *(_OWORD *)(v6 + 88) = *(_OWORD *)v35;
    v8 = v38;
    *(_QWORD *)(v6 + 104) = v36;
    v35[0] = 0;
    v35[1] = 0;
    *(_QWORD *)(v6 + 128) = v8;
    *(_OWORD *)(v6 + 112) = v37;
    v36 = 0;
    v37 = 0uLL;
    v38 = 0;
    v9 = *(_OWORD *)v39;
    v10 = v42;
    *(_QWORD *)(v6 + 152) = v40;
    *(_OWORD *)(v6 + 136) = v9;
    v39[0] = 0;
    v39[1] = 0;
    v11 = v41;
    *(_QWORD *)(v6 + 176) = v10;
    *(_OWORD *)(v6 + 160) = v11;
    v40 = 0;
    v41 = 0uLL;
    v42 = 0;
    v12 = *(_OWORD *)v43;
    *(_QWORD *)(v6 + 200) = v44;
    *(_OWORD *)(v6 + 184) = v12;
    v43[0] = 0;
    v43[1] = 0;
    v44 = 0;
    *(_BYTE *)(v6 + 208) = 1;
  }
  *(_OWORD *)(v6 + 216) = v46;
  *(_QWORD *)(v6 + 232) = v47;
  sub_2231AB0FC(v6 + 240, (uint64_t)v17);
  *v7 = off_24EC67158;
  *a1 = &off_24EC6A3B8;
  a1[1] = v7;
  v13 = (_QWORD *)operator new();
  *v13 = &off_24EC6A4B0;
  v13[1] = 0;
  v13[2] = 0;
  v13[3] = v7;
  a1[2] = v13;
  if (!v45)
    goto LABEL_20;
  if (SHIBYTE(v44) < 0)
  {
    operator delete(v43[0]);
    if ((SHIBYTE(v42) & 0x80000000) == 0)
    {
LABEL_16:
      if ((SHIBYTE(v40) & 0x80000000) == 0)
        goto LABEL_17;
      goto LABEL_26;
    }
  }
  else if ((SHIBYTE(v42) & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete((void *)v41);
  if ((SHIBYTE(v40) & 0x80000000) == 0)
  {
LABEL_17:
    if ((SHIBYTE(v38) & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_27;
  }
LABEL_26:
  operator delete(v39[0]);
  if ((SHIBYTE(v38) & 0x80000000) == 0)
  {
LABEL_18:
    if ((SHIBYTE(v36) & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_28;
  }
LABEL_27:
  operator delete((void *)v37);
  if (SHIBYTE(v36) < 0)
  {
LABEL_28:
    operator delete(v35[0]);
    if (SHIBYTE(v34) < 0)
      goto LABEL_29;
LABEL_20:
    if (!v32)
      return sub_2231AD66C((uint64_t)v17);
    goto LABEL_21;
  }
LABEL_19:
  if ((SHIBYTE(v34) & 0x80000000) == 0)
    goto LABEL_20;
LABEL_29:
  operator delete((void *)v33);
  if (!v32)
    return sub_2231AD66C((uint64_t)v17);
LABEL_21:
  if (SHIBYTE(v31) < 0)
    operator delete((void *)__p);
  return sub_2231AD66C((uint64_t)v17);
}

void sub_22412B408(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255795560);
  _Unwind_Resume(a1);
}

void sub_22412B420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44)
{
  if (a44)
  {
    if (a43 < 0)
    {
      operator delete(__p);
      sub_2231AD66C((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
  }
  sub_2231AD66C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_22412B4B8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_22412B520(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22412B588(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 16) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16));
}

uint64_t *sub_22412B59C(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 v3;

  v1 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v1 + 24))
    return (uint64_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 16) + 24))(*(_QWORD *)(v1 + 16));
  v3 = atomic_load((unsigned __int8 *)qword_2540CEED0);
  if ((v3 & 1) != 0 || !__cxa_guard_acquire(qword_2540CEED0))
    return &qword_2540CEF08;
  qword_2540CEF08 = 0;
  unk_2540CEF10 = 0;
  __cxa_guard_release(qword_2540CEED0);
  return &qword_2540CEF08;
}

void sub_22412B624(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_224129C90(*(_QWORD *)(a1 + 8), a2);
  *(_BYTE *)(a3 + 120) = 1;
}

uint64_t sub_22412B650(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 16) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16));
}

uint64_t sub_22412B664(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 16) + 48))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16));
}

_QWORD *sub_22412B678(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  char *v12;
  char *v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void *__p;
  char *v20;
  _QWORD *v21;

  __p = 0;
  v20 = 0;
  v21 = 0;
  if (a3)
  {
    if (a3 >= 0xAAAAAAAAAAAAAABLL)
      sub_22316E078();
    v5 = 3 * a3;
    v6 = operator new(24 * a3);
    __p = v6;
    v20 = (char *)v6;
    v21 = &v6[v5];
    v7 = a2 + v5 * 8;
    do
    {
      v9 = *(_QWORD *)(a2 + 8);
      v8 = *(_QWORD *)(a2 + 16);
      *v6 = &off_24EC6A3B8;
      v6[1] = v9;
      v6[2] = v8;
      if (v8)
      {
        v10 = (unint64_t *)(v8 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      a2 += 24;
      v6 += 3;
    }
    while (a2 != v7);
    v20 = (char *)v6;
  }
  sub_224131C40(a1, (uint64_t *)&__p);
  v12 = (char *)__p;
  if (__p)
  {
    v13 = v20;
    v14 = __p;
    if (v20 != __p)
    {
      do
      {
        v15 = (std::__shared_weak_count *)*((_QWORD *)v13 - 1);
        if (v15)
        {
          p_shared_owners = (unint64_t *)&v15->__shared_owners_;
          do
            v17 = __ldaxr(p_shared_owners);
          while (__stlxr(v17 - 1, p_shared_owners));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        v13 -= 24;
      }
      while (v13 != v12);
      v14 = __p;
    }
    v20 = v12;
    operator delete(v14);
  }
  return a1;
}

void sub_22412B7BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2231A62F0((void **)va);
  _Unwind_Resume(a1);
}

void sub_22412B7D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, void *a11)
{
  void *v12;
  void *v13;

  if (__p)
  {
    v12 = a11;
    v13 = __p;
    if (a11 != __p)
    {
      do
        v12 = (void *)sub_2241231D8((uint64_t)v12 - 24);
      while (v12 != __p);
      v13 = __p;
    }
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22412B814(uint64_t a1)
{
  sub_224011EC0(a1 + 64);
  if (!*(_BYTE *)(a1 + 56) || (*(char *)(a1 + 55) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 32));
  return a1;
}

void sub_22412B864(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char *v8;
  __n128 v9;
  char *v10;
  char *v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::mutex *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  char *v31;
  char *v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  void *v39;
  void *v40[2];
  uint64_t v41;
  __int16 v42;
  void *__p[2];
  __int128 v44;
  uint64_t v45;
  unsigned __int8 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  char v52;
  char v53;
  char v54[4];
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  void *v59;
  void *v60;
  void *v61;
  char *v62;
  char v63;
  _QWORD v64[3];
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;

  v64[0] = &off_24EC776C0;
  v64[1] = 1;
  v64[2] = &unk_24EC77810;
  v8 = (char *)operator new(0xAuLL);
  *(_QWORD *)v8 = 0;
  *((_WORD *)v8 + 4) = 0;
  v65 = v8;
  v66 = v8 + 10;
  v67 = v8 + 10;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  sub_224131C40(__p, a2);
  BYTE8(v44) = 1;
  v55 = 0x500000001;
  v56 = 0;
  v57 = 1;
  v58 = 0;
  v9.n128_f64[0] = sub_224131D4C((uint64_t)&v59, (uint64_t)__p);
  if (BYTE8(v44))
  {
    v10 = (char *)__p[0];
    if (__p[0])
    {
      v11 = (char *)__p[1];
      v12 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          v13 = (std::__shared_weak_count *)*((_QWORD *)v11 - 1);
          if (v13)
          {
            p_shared_owners = (unint64_t *)&v13->__shared_owners_;
            do
              v15 = __ldaxr(p_shared_owners);
            while (__stlxr(v15 - 1, p_shared_owners));
            if (!v15)
            {
              ((void (*)(std::__shared_weak_count *, __n128))v13->__on_zero_shared)(v13, v9);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
          v11 -= 24;
        }
        while (v11 != v10);
        v12 = __p[0];
      }
      __p[1] = v10;
      operator delete(v12);
    }
  }
  LODWORD(__p[0]) = 1;
  sub_224501B60((uint64_t)&v65, v66, (char *)__p, (char *)__p + 4, 4);
  sub_2244FF590(v64);
  sub_224136C20((uint64_t)v64, (uint64_t)v54);
  *(_QWORD *)&v65[*((_QWORD *)v69 - 1) + 10] = v66 - &v65[*((_QWORD *)v69 - 1)] - 18;
  v69 -= 8;
  v16 = (std::mutex *)(*(_QWORD *)(a1 + 240) + 24);
  std::mutex::lock(v16);
  v17 = *(_QWORD **)(a1 + 240);
  v20 = (_QWORD *)*v17;
  v18 = v17 + 1;
  v19 = v20;
  if (v20 != v18)
  {
    while (1)
    {
      v21 = v19[8];
      v23 = *(_QWORD *)(v21 + 8);
      v22 = *(_QWORD *)(v21 + 16);
      v24 = v23 == *(_QWORD *)a3 && v22 == *(_QWORD *)(a3 + 8);
      if (v24)
        break;
      v25 = (_QWORD *)v19[1];
      if (v25)
      {
        do
        {
          v26 = v25;
          v25 = (_QWORD *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          v26 = (_QWORD *)v19[2];
          v24 = *v26 == (_QWORD)v19;
          v19 = v26;
        }
        while (!v24);
      }
      v19 = v26;
      if (v26 == v18)
        goto LABEL_28;
    }
  }
  if (v19 == v18)
  {
LABEL_28:
    sub_224107310((unsigned __int8 *)a3, 0xDu, (uint64_t)"client not found", (uint64_t)__p);
    *(_OWORD *)a4 = *(_OWORD *)__p;
    *(_BYTE *)(a4 + 16) = 0;
    *(_BYTE *)(a4 + 112) = 0;
    if (v53)
    {
      *(_BYTE *)(a4 + 40) = 0;
      v27 = v46;
      if (v46)
      {
        *(_OWORD *)(a4 + 16) = v44;
        *(_QWORD *)(a4 + 32) = v45;
        v45 = 0;
        v44 = 0uLL;
        *(_BYTE *)(a4 + 40) = 1;
      }
      *(_BYTE *)(a4 + 48) = 0;
      *(_BYTE *)(a4 + 104) = 0;
      if (v52)
      {
        v28 = v49;
        *(_QWORD *)(a4 + 64) = v48;
        *(_OWORD *)(a4 + 48) = v47;
        v47 = 0uLL;
        *(_QWORD *)(a4 + 72) = v28;
        *(_OWORD *)(a4 + 80) = v50;
        *(_QWORD *)(a4 + 96) = v51;
        v48 = 0;
        v50 = 0uLL;
        v51 = 0;
        *(_BYTE *)(a4 + 104) = 1;
      }
      *(_BYTE *)(a4 + 112) = 1;
      *(_BYTE *)(a4 + 120) = 0;
      if (v27 && SHIBYTE(v45) < 0)
        operator delete((void *)v44);
    }
    else
    {
      *(_BYTE *)(a4 + 120) = 0;
    }
    std::mutex::unlock(v16);
  }
  else
  {
    if (*((char *)v19 + 55) < 0)
    {
      sub_223197FA4(v40, (void *)v19[4], v19[5]);
    }
    else
    {
      *(_OWORD *)v40 = *((_OWORD *)v19 + 2);
      v41 = v19[6];
    }
    v42 = *((_WORD *)v19 + 28);
    std::mutex::unlock(v16);
    if (((*(uint64_t (**)(_QWORD, void **, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 320) + 32))(*(_QWORD *)(a1 + 320), v40, v64, 1) & 1) != 0)
    {
      *(_BYTE *)(a4 + 120) = 1;
      if ((SHIBYTE(v41) & 0x80000000) == 0)
        goto LABEL_52;
      goto LABEL_51;
    }
    sub_224107310((unsigned __int8 *)a3, 3u, 0, (uint64_t)__p);
    *(_OWORD *)a4 = *(_OWORD *)__p;
    *(_BYTE *)(a4 + 16) = 0;
    *(_BYTE *)(a4 + 112) = 0;
    if (v53)
    {
      *(_BYTE *)(a4 + 40) = 0;
      v29 = v46;
      if (v46)
      {
        *(_OWORD *)(a4 + 16) = v44;
        *(_QWORD *)(a4 + 32) = v45;
        v45 = 0;
        v44 = 0uLL;
        *(_BYTE *)(a4 + 40) = 1;
      }
      *(_BYTE *)(a4 + 48) = 0;
      *(_BYTE *)(a4 + 104) = 0;
      if (v52)
      {
        v30 = v49;
        *(_QWORD *)(a4 + 64) = v48;
        *(_OWORD *)(a4 + 48) = v47;
        v47 = 0uLL;
        *(_QWORD *)(a4 + 72) = v30;
        *(_OWORD *)(a4 + 80) = v50;
        *(_QWORD *)(a4 + 96) = v51;
        v48 = 0;
        v50 = 0uLL;
        v51 = 0;
        *(_BYTE *)(a4 + 104) = 1;
      }
      *(_BYTE *)(a4 + 112) = 1;
      *(_BYTE *)(a4 + 120) = 0;
      if (v29 && SHIBYTE(v45) < 0)
        operator delete((void *)v44);
      if (SHIBYTE(v41) < 0)
        goto LABEL_51;
    }
    else
    {
      *(_BYTE *)(a4 + 120) = 0;
      if (SHIBYTE(v41) < 0)
LABEL_51:
        operator delete(v40[0]);
    }
  }
LABEL_52:
  if (v63)
  {
    v31 = (char *)v61;
    if (v61)
    {
      v32 = v62;
      v33 = v61;
      if (v62 != v61)
      {
        do
        {
          v34 = (std::__shared_weak_count *)*((_QWORD *)v32 - 1);
          if (v34)
          {
            v35 = (unint64_t *)&v34->__shared_owners_;
            do
              v36 = __ldaxr(v35);
            while (__stlxr(v36 - 1, v35));
            if (!v36)
            {
              ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
              std::__shared_weak_count::__release_weak(v34);
            }
          }
          v32 -= 16;
        }
        while (v32 != v31);
        v33 = v61;
      }
      v62 = v31;
      operator delete(v33);
    }
    v37 = v59;
    if (v59)
    {
      v38 = (uint64_t)v60;
      v39 = v59;
      if (v60 != v59)
      {
        do
        {
          v38 -= 88;
          sub_2241323E8(v38);
        }
        while ((void *)v38 != v37);
        v39 = v59;
      }
      v60 = v37;
      operator delete(v39);
    }
  }
  if (v68)
  {
    v69 = v68;
    operator delete(v68);
  }
  if (v65)
  {
    v66 = v65;
    operator delete(v65);
  }
}

void sub_22412BDA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  std::mutex *v15;
  uint64_t v16;

  std::mutex::unlock(v15);
  sub_2241324D8(v14);
  sub_2244FF474((_QWORD *)(v16 - 152));
  _Unwind_Resume(a1);
}

void sub_22412BDFC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_2241324D8(v1);
  sub_2244FF474((_QWORD *)(v2 - 152));
  _Unwind_Resume(a1);
}

void sub_22412BE18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  sub_22412BE64((char **)va);
  sub_2244FF474((_QWORD *)(v6 - 152));
  _Unwind_Resume(a1);
}

void sub_22412BE34(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2244FF474((_QWORD *)(v1 - 152));
  _Unwind_Resume(a1);
}

char **sub_22412BE64(char **a1)
{
  char *v2;
  char *v3;
  char *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if (*((_BYTE *)a1 + 24))
  {
    v2 = *a1;
    if (*a1)
    {
      v3 = a1[1];
      v4 = *a1;
      if (v3 != v2)
      {
        do
        {
          v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
          if (v5)
          {
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v7 = __ldaxr(p_shared_owners);
            while (__stlxr(v7 - 1, p_shared_owners));
            if (!v7)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
          }
          v3 -= 24;
        }
        while (v3 != v2);
        v4 = *a1;
      }
      a1[1] = v2;
      operator delete(v4);
    }
  }
  return a1;
}

void sub_22412BF08(uint64_t a1)
{
  sub_224131B08(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22412BF30(uint64_t a1)
{
  sub_224131924(a1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22412BF54(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC6A808;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22412BF94(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC6A808;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22412BFE4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_22412BFF8(uint64_t a1)
{
  sub_22412E55C(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22412C01C(_QWORD *a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  uint64_t v7;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  std::mutex **v32;
  uint64_t **v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t **v42;
  std::__shared_weak_count *v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  char *v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count_vtbl *v56;
  std::__shared_weak_count_vtbl *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count_vtbl *v60;
  std::__shared_weak_count_vtbl *v61;
  unint64_t *v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 *v71;
  uint64_t v72;
  __int128 v73;
  std::__shared_weak_count *v74;
  __int128 v75;
  uint64_t v76;
  __int128 *v77;
  _BYTE v78[24];
  _BYTE *v79;
  uint64_t v80;

  v80 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a1[18])
  {
    v4 = (std::__shared_weak_count *)operator new(0x40uLL);
    v5 = v4;
    v4->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    v4->__shared_weak_owners_ = 0;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6AA50;
    v7 = (uint64_t)a2[1];
    v4[1].__vftable = *a2;
    v8 = &v4[1].__vftable;
    v4[1].__shared_owners_ = v7;
    if (v7)
    {
      v9 = (unint64_t *)(v7 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v12 = a2[3];
    v11 = (uint64_t)a2[4];
    v4[1].__shared_weak_owners_ = (uint64_t)&off_24EC6A3B8;
    v4[2].__vftable = v12;
    v4[2].__shared_owners_ = v11;
    if (v11)
    {
      v13 = (unint64_t *)(v11 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v74 = v4;
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v16 = __ldxr(p_shared_weak_owners);
    while (__stxr(v16 + 1, p_shared_weak_owners));
    v17 = (uint64_t *)a1[18];
    v18 = (_QWORD *)operator new();
    *v18 = v17 + 7;
    std::mutex::lock((std::mutex *)(v17 + 7));
    *(_QWORD *)&v75 = v18;
    *((_QWORD *)&v75 + 1) = v17;
    if (!*((_BYTE *)v17 + 48))
      sub_22324A974();
    v19 = v17[4];
    v20 = *v17;
    v21 = (_QWORD *)(*v17 + 16 * v19);
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
    *v21 = v8;
    v23 = v20 + 16 * v19;
    v24 = *(std::__shared_weak_count **)(v23 + 8);
    *(_QWORD *)(v23 + 8) = v5;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v27 = (v17[1] - *v17) >> 4;
    v28 = v17[5];
    v29 = v17[4] + 1;
    if (v29 >= v27)
      v30 = (v17[1] - *v17) >> 4;
    else
      v30 = 0;
    v17[4] = v29 - v30;
    if (v28 == v27)
    {
      v31 = v17[3] + 1;
      if (v31 < v27)
        v27 = 0;
      v17[3] = v31 - v27;
      v32 = (std::mutex **)v75;
      if (!(_QWORD)v75)
      {
LABEL_39:
        v42 = (uint64_t **)a1[9];
        v75 = 0uLL;
        v43 = (std::__shared_weak_count *)a1[5];
        if (v43)
        {
          v44 = std::__shared_weak_count::lock(v43);
          if (v44)
          {
            v45 = v44;
            v46 = a1[4];
            v47 = (unint64_t *)&v44->__shared_weak_owners_;
            do
              v48 = __ldxr(v47);
            while (__stxr(v48 + 1, v47));
            *(_QWORD *)&v75 = v46;
            *((_QWORD *)&v75 + 1) = v44;
            v49 = (unint64_t *)&v44->__shared_owners_;
            do
              v50 = __ldaxr(v49);
            while (__stlxr(v50 - 1, v49));
            if (!v50)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v45);
            }
          }
          else
          {
            v75 = 0uLL;
          }
        }
        v51 = (char *)operator new(0x30uLL);
        *(_QWORD *)v51 = &off_24EC6AAA0;
        *(_OWORD *)(v51 + 8) = v75;
        v75 = 0uLL;
        *((_QWORD *)v51 + 3) = v8;
        *((_QWORD *)v51 + 4) = v5;
        v76 = 0;
        v77 = 0;
        v79 = v51;
        sub_2245022E4(*v42, (uint64_t)v78);
        v52 = v79;
        if (v79 == v78)
        {
          v53 = 4;
          v52 = v78;
        }
        else
        {
          if (!v79)
            goto LABEL_53;
          v53 = 5;
        }
        (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_53:
        if (v74)
        {
          v54 = (unint64_t *)&v74->__shared_owners_;
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        return;
      }
    }
    else
    {
      v17[5] = v28 + 1;
      v32 = (std::mutex **)v75;
      if (!(_QWORD)v75)
        goto LABEL_39;
    }
    std::mutex::unlock(*v32);
    MEMORY[0x227684CE8](v32, 0x20C4093837F09);
    goto LABEL_39;
  }
  v33 = (uint64_t **)a1[9];
  v73 = 0uLL;
  v34 = (std::__shared_weak_count *)a1[5];
  if (v34)
  {
    v35 = std::__shared_weak_count::lock(v34);
    if (v35)
    {
      v36 = v35;
      v37 = a1[4];
      v38 = (unint64_t *)&v35->__shared_weak_owners_;
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
      *(_QWORD *)&v73 = v37;
      *((_QWORD *)&v73 + 1) = v35;
      v40 = (unint64_t *)&v35->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    else
    {
      v73 = 0uLL;
    }
  }
  v56 = *a2;
  v57 = a2[1];
  if (v57)
  {
    v58 = (unint64_t *)&v57->~__shared_weak_count_0;
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
  }
  v61 = a2[3];
  v60 = a2[4];
  if (v60)
  {
    v62 = (unint64_t *)&v60->~__shared_weak_count_0;
    do
      v63 = __ldxr(v62);
    while (__stxr(v63 + 1, v62));
  }
  v64 = (char *)operator new(0x40uLL);
  *(_QWORD *)v64 = &off_24EC6AB20;
  *(_OWORD *)(v64 + 8) = v73;
  *((_QWORD *)v64 + 3) = v56;
  *((_QWORD *)v64 + 4) = v57;
  *((_QWORD *)v64 + 5) = &off_24EC6A3B8;
  *((_QWORD *)v64 + 6) = v61;
  *((_QWORD *)v64 + 7) = v60;
  v77 = (__int128 *)v64;
  sub_2245022E4(*v33, (uint64_t)&v75);
  v71 = v77;
  if (v77 == &v75)
  {
    v72 = 4;
    v71 = &v75;
  }
  else
  {
    if (!v77)
      return;
    v72 = 5;
  }
  (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v71 + 8 * v72))(v71, v65, v66, v67, v68, v69, v70);
}

void sub_22412C4DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char *a22)
{
  char *v22;
  char *v24;
  uint64_t v25;

  v24 = a22;
  if (a22 == v22)
  {
    v25 = 4;
    v24 = &a19;
  }
  else
  {
    if (!a22)
    {
      sub_22412E75C(&a9);
      _Unwind_Resume(a1);
    }
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
  sub_22412E75C(&a9);
  _Unwind_Resume(a1);
}

void sub_22412C530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  va_list va;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v12 = *(_QWORD **)(v10 - 64);
  if (v12 == v9)
  {
    v13 = 4;
    v12 = (_QWORD *)(v10 - 88);
  }
  else
  {
    if (!v12)
      goto LABEL_6;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_6:
  sub_223322894((uint64_t)va1);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22412C580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  std::__shared_weak_count *v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_223322848((std::mutex ***)va1);
  std::__shared_weak_count::__release_weak(v9);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22412C5A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  std::__shared_weak_count *v9;
  uint64_t v10;
  va_list va;

  va_start(va, a9);
  MEMORY[0x227684CE8](v10, 0x20C4093837F09);
  std::__shared_weak_count::__release_weak(v9);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22412C5D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  std::__shared_weak_count *v17;

  std::__shared_weak_count::__release_weak(v17);
  sub_223167354((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_22412C5F8(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_22412C608(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_22412C614(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_22412C624(_QWORD *a1, std::__shared_weak_count_vtbl **a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count_vtbl *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *p_shared_weak_owners;
  unint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count **v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  std::mutex **v37;
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t **v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  char *v55;
  std::string *v56;
  uint64_t v57;
  uint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count_vtbl *v62;
  std::__shared_weak_count_vtbl *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count_vtbl *v66;
  std::__shared_weak_count_vtbl *v67;
  unint64_t *v68;
  unint64_t v69;
  _QWORD *v70;
  char *v71;
  __int128 *v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  __int128 *v77;
  std::string *v78;
  std::runtime_error *exception;
  std::runtime_error *v80;
  uint64_t **v81;
  std::__shared_weak_count *v82[2];
  _QWORD *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count *v85;
  std::runtime_error v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count *v88;
  __int128 v89;
  _QWORD *v90;
  __int128 *v91;
  _QWORD v92[2];
  std::string v93;
  std::string *v94;
  uint64_t v95;

  v95 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v89 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v89 + 1) = 45;
    v76 = (_QWORD *)a1[6];
    v75 = a1 + 6;
    v74 = v76;
    v77 = (__int128 *)*((unsigned __int8 *)v75 + 23);
    if ((char)v77 < 0)
      v77 = (__int128 *)v75[1];
    else
      v74 = v75;
    v90 = v74;
    v91 = v77;
    sub_2231A9820((uint64_t)&v89, (uint64_t)v92, 0, 0, &v93);
    if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v78 = &v93;
    else
      v78 = (std::string *)v93.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v86, (const char *)v78);
    v86.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v80 = std::runtime_error::runtime_error(exception, &v86);
    v80->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v80, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_24EC3AC28;
    v6[1].__vftable = *a3;
    v85 = v6;
    v83 = &v6[1].__vftable;
    v84 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x40uLL);
    v10 = v9;
    v9->__shared_owners_ = 0;
    v11 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6AA50;
    v12 = (uint64_t)a2[1];
    v9[1].__vftable = *a2;
    v13 = v9 + 1;
    v9[1].__shared_owners_ = v12;
    if (v12)
    {
      v14 = (unint64_t *)(v12 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v17 = a2[3];
    v16 = (uint64_t)a2[4];
    v9[1].__shared_weak_owners_ = (uint64_t)&off_24EC6A3B8;
    v9[2].__vftable = v17;
    v9[2].__shared_owners_ = v16;
    if (v16)
    {
      v18 = (unint64_t *)(v16 + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    v87 = v9 + 1;
    v88 = v9;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v21 = __ldxr(p_shared_weak_owners);
    while (__stxr(v21 + 1, p_shared_weak_owners));
    v22 = (uint64_t *)a1[18];
    v23 = (_QWORD *)operator new();
    *v23 = v22 + 7;
    std::mutex::lock((std::mutex *)(v22 + 7));
    *(_QWORD *)&v89 = v23;
    *((_QWORD *)&v89 + 1) = v22;
    if (!*((_BYTE *)v22 + 48))
      sub_22324A974();
    v24 = v22[4];
    v25 = *v22;
    v26 = (std::__shared_weak_count **)(*v22 + 16 * v24);
    do
      v27 = __ldxr(v11);
    while (__stxr(v27 + 1, v11));
    *v26 = v13;
    v28 = v25 + 16 * v24;
    v29 = *(std::__shared_weak_count **)(v28 + 8);
    *(_QWORD *)(v28 + 8) = v10;
    if (v29)
    {
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = (v22[1] - *v22) >> 4;
    v33 = v22[5];
    v34 = v22[4] + 1;
    if (v34 >= v32)
      v35 = (v22[1] - *v22) >> 4;
    else
      v35 = 0;
    v22[4] = v34 - v35;
    if (v33 == v32)
    {
      v36 = v22[3] + 1;
      if (v36 < v32)
        v32 = 0;
      v22[3] = v36 - v32;
      v37 = (std::mutex **)v89;
      if (!(_QWORD)v89)
      {
LABEL_43:
        v46 = (uint64_t **)a1[9];
        v89 = 0uLL;
        v47 = (std::__shared_weak_count *)a1[5];
        if (v47)
        {
          v48 = std::__shared_weak_count::lock(v47);
          if (v48)
          {
            v49 = v48;
            v50 = a1[4];
            v51 = (unint64_t *)&v48->__shared_weak_owners_;
            do
              v52 = __ldxr(v51);
            while (__stxr(v52 + 1, v51));
            *(_QWORD *)&v89 = v50;
            *((_QWORD *)&v89 + 1) = v48;
            v53 = (unint64_t *)&v48->__shared_owners_;
            do
              v54 = __ldaxr(v53);
            while (__stlxr(v54 - 1, v53));
            if (!v54)
            {
              ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
              std::__shared_weak_count::__release_weak(v49);
            }
          }
          else
          {
            v89 = 0uLL;
          }
        }
        v55 = (char *)operator new(0x38uLL);
        *(_QWORD *)v55 = &off_24EC6ABA0;
        *(_OWORD *)(v55 + 8) = v89;
        v89 = 0uLL;
        *((_QWORD *)v55 + 3) = v13;
        *((_QWORD *)v55 + 4) = v10;
        v90 = 0;
        v91 = 0;
        *((_QWORD *)v55 + 5) = v83;
        *((_QWORD *)v55 + 6) = v84;
        v92[0] = 0;
        v92[1] = 0;
        v94 = (std::string *)v55;
        sub_2245022E4(*v46, (uint64_t)&v93);
        v56 = v94;
        if (v94 == &v93)
        {
          v57 = 4;
          v56 = &v93;
        }
        else
        {
          if (!v94)
            goto LABEL_57;
          v57 = 5;
        }
        (*(void (**)(void))(v56->__r_.__value_.__r.__words[0] + 8 * v57))();
LABEL_57:
        if (v88)
        {
          v58 = &v88->__shared_owners_;
          do
            v59 = __ldaxr((unint64_t *)v58);
          while (__stlxr(v59 - 1, (unint64_t *)v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
            std::__shared_weak_count::__release_weak(v88);
          }
        }
        if (v85)
        {
          v60 = (unint64_t *)&v85->__shared_owners_;
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 - 1, v60));
          if (!v61)
          {
            ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
            std::__shared_weak_count::__release_weak(v85);
          }
        }
        return;
      }
    }
    else
    {
      v22[5] = v33 + 1;
      v37 = (std::mutex **)v89;
      if (!(_QWORD)v89)
        goto LABEL_43;
    }
    std::mutex::unlock(*v37);
    MEMORY[0x227684CE8](v37, 0x20C4093837F09);
    goto LABEL_43;
  }
  v81 = (uint64_t **)a1[9];
  *(_OWORD *)v82 = 0uLL;
  v38 = (std::__shared_weak_count *)a1[5];
  if (v38)
  {
    v39 = std::__shared_weak_count::lock(v38);
    if (v39)
    {
      v40 = v39;
      v41 = (std::__shared_weak_count *)a1[4];
      v42 = (unint64_t *)&v39->__shared_weak_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
      v82[0] = v41;
      v82[1] = v39;
      v44 = (unint64_t *)&v39->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    else
    {
      *(_OWORD *)v82 = 0uLL;
    }
  }
  v62 = *a2;
  v63 = a2[1];
  if (v63)
  {
    v64 = (unint64_t *)&v63->~__shared_weak_count_0;
    do
      v65 = __ldxr(v64);
    while (__stxr(v65 + 1, v64));
  }
  v67 = a2[3];
  v66 = a2[4];
  if (v66)
  {
    v68 = (unint64_t *)&v66->~__shared_weak_count_0;
    do
      v69 = __ldxr(v68);
    while (__stxr(v69 + 1, v68));
  }
  v70 = operator new(0x20uLL);
  v70[1] = 0;
  v70[2] = 0;
  *v70 = &unk_24EC3AC28;
  v70[3] = *a3;
  *a3 = 0;
  v71 = (char *)operator new(0x50uLL);
  *(_QWORD *)v71 = &off_24EC6AC20;
  *(_OWORD *)(v71 + 8) = *(_OWORD *)v82;
  *((_QWORD *)v71 + 3) = v62;
  *((_QWORD *)v71 + 4) = v63;
  *((_QWORD *)v71 + 5) = &off_24EC6A3B8;
  *((_QWORD *)v71 + 6) = v67;
  *((_QWORD *)v71 + 7) = v66;
  *((_QWORD *)v71 + 8) = v70 + 3;
  *((_QWORD *)v71 + 9) = v70;
  v91 = (__int128 *)v71;
  sub_2245022E4(*v81, (uint64_t)&v89);
  v72 = v91;
  if (v91 == &v89)
  {
    v73 = 4;
    v72 = &v89;
  }
  else
  {
    if (!v91)
      return;
    v73 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v72 + 8 * v73))();
}

void sub_22412CDB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::runtime_error a24,std::exception_ptr a25,uint64_t a26,uint64_t a27,std::exception_ptr a28)
{
  std::__assoc_sub_state **v28;
  uint64_t v29;
  std::__assoc_sub_state *v30;
  std::exception_ptr v31;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v30 = *v28;
    if (*v28)
    {
      std::exception_ptr::exception_ptr(&a28, &a25);
      v31.__ptr_ = &a28;
      std::__assoc_sub_state::set_exception(v30, v31);
      std::exception_ptr::~exception_ptr(&a28);
      std::exception_ptr::~exception_ptr(&a25);
      std::runtime_error::~runtime_error(&a24);
      if (*(char *)(v29 - 105) < 0)
        operator delete(*(void **)(v29 - 128));
      JUMPOUT(0x22412CCC0);
    }
    sub_2233236D4(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_22412CE24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::runtime_error a24,std::exception_ptr a25,uint64_t a26,uint64_t a27,std::exception_ptr a28)
{
  uint64_t v28;

  std::exception_ptr::~exception_ptr(&a25);
  std::runtime_error::~runtime_error(&a24);
  if (*(char *)(v28 - 105) < 0)
  {
    operator delete(*(void **)(v28 - 128));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_22412CE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char *a32)
{
  char *v32;
  char *v34;
  uint64_t v35;

  v34 = a32;
  if (a32 == v32)
  {
    v35 = 4;
    v34 = &a29;
  }
  else
  {
    if (!a32)
    {
      sub_22412F684(&a11);
      _Unwind_Resume(a1);
    }
    v35 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v34 + 8 * v35))();
  sub_22412F684(&a11);
  _Unwind_Resume(a1);
}

void sub_22412CECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  uint64_t v12;

  sub_2231AA880(v12);
  if (a12)
  {
    std::__shared_weak_count::__release_weak(a12);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_22412CEF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29)
{
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v32;
  uint64_t v33;

  v32 = *(_QWORD **)(v30 - 104);
  if (v32 == v29)
  {
    v33 = 4;
    v32 = (_QWORD *)(v30 - 128);
  }
  else
  {
    if (!v32)
      goto LABEL_6;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_6:
  sub_22332429C(&a29);
  sub_223167354((uint64_t)&a27);
  sub_223167354((uint64_t)&a20);
  sub_223167354((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_22412CF98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v13;
  va_list va;
  uint64_t v15;
  va_list va1;

  va_start(va1, a12);
  va_start(va, a12);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_22412CFB4(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_2245023F0(*v1);
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_2245023F0(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_22412D028(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24EC6ACA0;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24EC2DF48;
  v10[4] = v9;
  v14 = v10;
  sub_2245022E4(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_22412D158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_22412D1CC(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24EC6AD20;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2245022E4(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_22412D2DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_22412D340@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC6ADA0;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_22412D558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_22412D620@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC6AE20;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_22412D838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_22412D900(uint64_t a1)
{
  return sub_22412E55C(a1 - 16);
}

void sub_22412D908(uint64_t a1)
{
  sub_22412E55C(a1 - 16);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22412D930(uint64_t a1, uint64_t a2)
{
  return sub_22412D028((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_22412D938@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22412D340((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_22412D940@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22412D620((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_22412D948(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_22412D950(uint64_t a1)
{
  return sub_22412E55C(a1 - 24);
}

void sub_22412D958(uint64_t a1)
{
  sub_22412E55C(a1 - 24);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22412D980(uint64_t a1)
{
  return sub_22412D1CC((_QWORD *)(a1 - 24));
}

uint64_t sub_22412D988(uint64_t a1)
{
  return a1 - 24;
}

void sub_22412D994()
{
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22412D9A8(uint64_t a1, __int128 **a2)
{
  uint64_t v3;
  _WORD *v4;
  __int128 *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  __int128 *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;
  uint64_t *v14;
  __int128 v15;
  int v16;
  int v17;
  char *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 *v35;
  std::__shared_weak_count *v36;
  _QWORD v37[2];
  std::__shared_weak_count *v38;
  char v39;
  _QWORD v40[3];
  void *v41;
  void *__dst;
  char *v43;
  void *__p;
  char *v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  char v52[4];
  __int128 v53;
  uint64_t v54;
  _BYTE v55[24];
  uint64_t v56;
  int v57;
  char v58[16];
  int v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  char v64;
  char v65;
  __int128 __src;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  unsigned __int8 v78;
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 8);
  v40[0] = &off_24EC776C0;
  v40[1] = 1;
  v40[2] = &unk_24EC77810;
  v4 = operator new(0xAuLL);
  *(_QWORD *)v4 = 0;
  v4[4] = 0;
  v41 = v4;
  __dst = v4 + 5;
  v43 = (char *)(v4 + 5);
  __p = 0;
  v45 = 0;
  v46 = 0;
  v5 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  v35 = *a2;
  v36 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v10 = a2[3];
  v9 = (std::__shared_weak_count *)a2[4];
  v37[0] = &off_24EC6A3B8;
  v37[1] = v10;
  v38 = v9;
  if (v9)
  {
    v11 = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v39 = 1;
  v48 = 0x500000001;
  v49 = 0;
  v50 = 1;
  v51 = 0;
  if (*((char *)v5 + 23) < 0)
  {
    sub_223197FA4(&__src, *(void **)v5, *((_QWORD *)v5 + 1));
  }
  else
  {
    v13 = *v5;
    v67 = *((_QWORD *)v5 + 2);
    __src = v13;
  }
  v14 = sub_2240181B4(0);
  sub_224017D50((uint64_t)&v68, (uint64_t)v37, (uint64_t)v14);
  LOBYTE(v76) = 0;
  v78 = 0;
  if (*((_BYTE *)v35 + 48))
  {
    if (*((char *)v35 + 47) < 0)
    {
      sub_223197FA4(&v76, *((void **)v35 + 3), *((_QWORD *)v35 + 4));
    }
    else
    {
      v15 = *(__int128 *)((char *)v35 + 24);
      v77 = *((_QWORD *)v35 + 5);
      v76 = v15;
    }
    v16 = 1;
    v78 = 1;
  }
  else
  {
    v16 = 0;
  }
  v53 = __src;
  v54 = v67;
  __src = 0uLL;
  *(_OWORD *)&v55[8] = v69;
  v56 = v70;
  v67 = 0;
  v69 = 0uLL;
  v70 = 0;
  v17 = v73;
  v57 = v71;
  v59 = -1;
  v58[0] = 0;
  if (v73 != -1)
  {
    ((void (*)(char *, char *, uint64_t *))off_24EC6AA30[v73])(&v47, v58, &v72);
    v59 = v17;
    v16 = v78;
  }
  v60 = v74;
  v61 = v75;
  v75 = 0;
  v74 = 0uLL;
  v18 = (char *)&v62;
  LOBYTE(v62) = 0;
  v64 = 0;
  if (v16)
  {
    v62 = v76;
    v63 = v77;
    v77 = 0;
    v76 = 0uLL;
    v64 = 1;
  }
  v65 = 1;
  sub_22412E21C((uint64_t)&__src);
  if (v39)
  {
    v19 = v38;
    if (v38)
    {
      v20 = (unint64_t *)&v38->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (v36)
    {
      v22 = (unint64_t *)&v36->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
  }
  LODWORD(__src) = 1;
  sub_224501B60((uint64_t)&v41, (char *)__dst, (char *)&__src, (char *)&__src + 4, 4);
  sub_2244FF590(v40);
  LODWORD(__src) = 1;
  sub_224501B60((uint64_t)&v41, (char *)__dst, (char *)&__src, (char *)&__src + 4, 4);
  sub_2244FF590(v40);
  sub_224501B60((uint64_t)&v41, (char *)__dst, (char *)&v48, (char *)&v48 + 4, 4);
  sub_224501B60((uint64_t)&v41, (char *)__dst, (char *)&v48 + 4, (char *)&v49, 4);
  sub_224501B60((uint64_t)&v41, (char *)__dst, (char *)&v49, (char *)&v50, 4);
  sub_224501B60((uint64_t)&v41, (char *)__dst, (char *)&v50, (char *)&v50 + 4, 4);
  sub_224501B60((uint64_t)&v41, (char *)__dst, (char *)&v50 + 4, (char *)&v51, 4);
  sub_224501B60((uint64_t)&v41, (char *)__dst, (char *)&v51, v52, 4);
  *(_QWORD *)((char *)v41 + *((_QWORD *)v45 - 1) + 10) = (_BYTE *)__dst - ((_BYTE *)v41 + *((_QWORD *)v45 - 1)) - 18;
  v45 -= 8;
  if (!v65)
  {
    LOBYTE(__src) = 0;
    sub_224501B60((uint64_t)&v41, (char *)__dst, (char *)&__src, (char *)&__src + 1, 1);
    v28 = v45;
    goto LABEL_54;
  }
  LOBYTE(__src) = 1;
  sub_224501B60((uint64_t)&v41, (char *)__dst, (char *)&__src, (char *)&__src + 1, 1);
  LODWORD(__src) = 2;
  sub_224501B60((uint64_t)&v41, (char *)__dst, (char *)&__src, (char *)&__src + 4, 4);
  v24 = __src;
  sub_2244FF590(v40);
  v25 = HIBYTE(v54);
  if (v54 < 0)
    v25 = *((_QWORD *)&v53 + 1);
  *(_QWORD *)&__src = v25;
  sub_224501B60((uint64_t)&v41, (char *)__dst, (char *)&__src, (char *)&__src + 8, 8);
  if (SHIBYTE(v54) < 0)
  {
    v26 = *((_QWORD *)&v53 + 1);
    v27 = (char *)v53;
    if (!(_QWORD)v53 && *((_QWORD *)&v53 + 1))
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_67;
      }
      v27 = 0;
    }
  }
  else
  {
    v26 = HIBYTE(v54);
    v27 = (char *)&v53;
  }
  sub_224501B60((uint64_t)&v41, (char *)__dst, v27, &v27[v26], v26);
  LODWORD(__src) = 2;
  sub_224501B60((uint64_t)&v41, (char *)__dst, (char *)&__src, (char *)&__src + 4, 4);
  sub_2244FF590(v40);
  sub_22412E344((uint64_t)v40, (uint64_t)v55);
  *(_QWORD *)((char *)v41 + *((_QWORD *)v45 - 1) + 10) = (_BYTE *)__dst - ((_BYTE *)v41 + *((_QWORD *)v45 - 1)) - 18;
  v45 -= 8;
  if (v24 >= 2)
  {
    if (v64)
    {
      LOBYTE(__src) = 1;
      sub_224501B60((uint64_t)&v41, (char *)__dst, (char *)&__src, (char *)&__src + 1, 1);
      v29 = HIBYTE(v63);
      if (v63 < 0)
        v29 = *((_QWORD *)&v62 + 1);
      *(_QWORD *)&__src = v29;
      sub_224501B60((uint64_t)&v41, (char *)__dst, (char *)&__src, (char *)&__src + 8, 8);
      if ((SHIBYTE(v63) & 0x80000000) == 0)
      {
        v30 = HIBYTE(v63);
LABEL_52:
        sub_224501B60((uint64_t)&v41, (char *)__dst, v18, &v18[v30], v30);
        goto LABEL_53;
      }
      v30 = *((_QWORD *)&v62 + 1);
      v18 = (char *)v62;
      if ((_QWORD)v62 || !*((_QWORD *)&v62 + 1))
        goto LABEL_52;
      if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        v18 = 0;
        goto LABEL_52;
      }
LABEL_67:
      abort();
    }
    LOBYTE(__src) = 0;
    sub_224501B60((uint64_t)&v41, (char *)__dst, (char *)&__src, (char *)&__src + 1, 1);
  }
LABEL_53:
  *(_QWORD *)((char *)v41 + *((_QWORD *)v45 - 1) + 10) = (_BYTE *)__dst - ((_BYTE *)v41 + *((_QWORD *)v45 - 1)) - 18;
  v28 = v45 - 8;
  v45 -= 8;
LABEL_54:
  *(_QWORD *)((char *)v41 + *((_QWORD *)v28 - 1) + 10) = (_BYTE *)__dst - ((_BYTE *)v41 + *((_QWORD *)v28 - 1)) - 18;
  v45 -= 8;
  v31 = *(_QWORD *)(v3 + 112);
  if (!v31)
    goto LABEL_60;
  if (((*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v31 + 32))(v31, v40) & 1) == 0)
  {
    v33 = *(_QWORD *)(v3 + 112);
    *(_QWORD *)(v3 + 112) = 0;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
LABEL_60:
    v32 = 0;
    if (!v65)
      goto LABEL_62;
    goto LABEL_61;
  }
  v32 = 1;
  if (v65)
LABEL_61:
    sub_22412E21C((uint64_t)&v53);
LABEL_62:
  if (__p)
  {
    v45 = (char *)__p;
    operator delete(__p);
  }
  if (v41)
  {
    __dst = v41;
    operator delete(v41);
  }
  return v32;
}

void sub_22412E138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, ...)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v13;
  va_list va;

  va_start(va, a8);
  if (*(_BYTE *)(v10 - 104) && *(char *)(v10 - 105) < 0)
    operator delete(*(void **)(v10 - 128));
  sub_223BF580C(v9);
  if (*(char *)(v10 - 217) < 0)
    operator delete(*(void **)(v10 - 240));
  if (a8)
  {
    sub_2241231D8(v8);
    if (a4)
    {
      p_shared_owners = (unint64_t *)&a4->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))a4->__on_zero_shared)(a4);
        std::__shared_weak_count::__release_weak(a4);
      }
    }
  }
  sub_2244FF474(va);
  _Unwind_Resume(a1);
}

__n128 sub_22412E1FC(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  return result;
}

__n128 sub_22412E20C(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  return result;
}

uint64_t sub_22412E21C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v10;

  if (*(_BYTE *)(a1 + 136) && *(char *)(a1 + 135) < 0)
    operator delete(*(void **)(a1 + 112));
  v2 = *(_QWORD *)(a1 + 88);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 96);
    v4 = *(void **)(a1 + 88);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 88);
    }
    *(_QWORD *)(a1 + 96) = v2;
    operator delete(v4);
  }
  v8 = *(unsigned int *)(a1 + 80);
  if ((_DWORD)v8 != -1)
    ((void (*)(char *, uint64_t))off_24EC6AA20[v8])(&v10, a1 + 64);
  *(_DWORD *)(a1 + 80) = -1;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_22412E344(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int64_t v7;
  _BOOL4 v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t __src;
  uint64_t v19;

  LODWORD(__src) = 2;
  v4 = a1 + 24;
  sub_224501B60(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 4, 4);
  sub_2244FF590((_QWORD *)a1);
  v5 = *(unsigned __int8 *)(a2 + 31);
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a2 + 16);
  __src = v5;
  sub_224501B60(v4, *(char **)(a1 + 32), (char *)&__src, (char *)&v19, 8);
  if (*(char *)(a2 + 31) < 0)
  {
    v6 = *(char **)(a2 + 8);
    v7 = *(_QWORD *)(a2 + 16);
    if (!v6)
    {
      if (v7)
      {
        v8 = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
        v6 = 0;
        if (v8)
          abort();
      }
    }
  }
  else
  {
    v6 = (char *)(a2 + 8);
    v7 = *(unsigned __int8 *)(a2 + 31);
  }
  sub_224501B60(v4, *(char **)(a1 + 32), v6, &v6[v7], v7);
  sub_224501B60(v4, *(char **)(a1 + 32), (char *)(a2 + 32), (char *)(a2 + 36), 4);
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v9 + 10) = *(_QWORD *)(a1 + 32) - v9 - 18;
  *(_QWORD *)(a1 + 56) -= 8;
  if (*(_DWORD *)(a2 + 56) > 1u)
    sub_22316DD70();
  v11 = *(_QWORD *)(a2 + 40);
  v10 = *(std::__shared_weak_count **)(a2 + 48);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  LODWORD(__src) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  sub_224501B60(v4, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 4, 4);
  v15 = __src;
  sub_2244FF590((_QWORD *)a1);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 32))(v11, a1, v15);
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v17 + 10) = *(_QWORD *)(a1 + 32) - v17 - 18;
  *(_QWORD *)(a1 + 56) -= 8;
  return result;
}

uint64_t sub_22412E55C(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24EC6A840;
  *(_QWORD *)(a1 + 16) = &unk_24EC6A8B8;
  *(_QWORD *)(a1 + 24) = &unk_24EC6A8F8;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x227684CE8](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(uint64_t **)(a1 + 104);
    v15 = *v14;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v14 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v14[1];
        (*(void (**)(uint64_t *))v14[2])(v14 + 2);
        operator delete(v14);
        v14 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

_QWORD *sub_22412E75C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[3];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[3];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[1];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_22412E804(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6AA50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22412E814(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6AA50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22412E844(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v5)
      return;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

_QWORD *sub_22412E8E4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC6AAA0;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_22412E928(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC6AAA0;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22412E97C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC6AAA0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_22412E9EC(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC6AAA0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_22412EA3C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_22412EA78(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_22412EAB0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      LOBYTE(v20) = 0;
      v21 = 0;
      sub_22412EDD4((uint64_t *)(v8 + 88), v5, &v20);
      if (v21)
        sub_2234AB028(&v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_22412EC78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    sub_2234AB028(&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22412ED5C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE25EnqueueMessageAndDispatc"
                     "hIZNKS6_4SendERKS5_EUlT_T0_E_EEvS9_SA_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE25EnqueueMessag"
                                "eAndDispatchIZNKS6_4SendERKS5_EUlT_T0_E_EEvS9_SA_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE25EnqueueMessageAndDispatchIZNKS6_4SendERKS5_EUlT_T0_E_EEvS9_SA_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE25EnqueueMessageAndDispatchIZNKS6_4SendERKS5_EUlT_T0_E_EEvS9_SA_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22412EDC8()
{
  return &unk_24EC6AB00;
}

void sub_22412EDD4(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  std::exception_ptr v16;
  char v17;

  v6 = *a1;
  if (!v6)
  {
    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
    v7 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (byte_255795670)
      v8 = byte_255795678 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_255795648;
      for (i = qword_255795650; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670)
      abort();
    qword_255795660(*(_QWORD *)algn_255795668, "callable_", 9, "", 0);
    v6 = *a1;
  }
  v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, char *))(j[2] + 16))(j + 2, &v17);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!v14)
      sub_2233236D4(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v16.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v16), v15))
    {
      sub_2233236D4(2u);
    }
    *(_BYTE *)(v14 + 140) = v17;
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
}

void sub_22412F040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, int a13, __int16 a14, char a15, unsigned __int8 a16)
{
  std::mutex *v16;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;

  std::mutex::unlock(v16);
  if (a2 == 1)
  {
    v19 = (uint64_t *)__cxa_begin_catch(a1);
    v20 = *v19;
    a10 = *(_QWORD *)(*(_QWORD *)(*v19 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a9 = (*(uint64_t (**)(void))(v20 + 16))();
    sub_2233233A4("Caught unexpected exception of type: ", (const char *)&a10, "\n", "message: ", (const char *)&a9, "\n");
    if ((a16 & 0x80u) == 0)
      v21 = (uint64_t *)&a11;
    else
      v21 = a11;
    if ((a16 & 0x80u) == 0)
      v22 = a16;
    else
      v22 = a12;
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v21, v22, (void (*)(void **))sub_22457406C);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_22412F108(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x22412F128);
}

_QWORD *sub_22412F134(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  *a1 = &off_24EC6AB20;
  v2 = (std::__shared_weak_count *)a1[7];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_22412F1E8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  *a1 = &off_24EC6AB20;
  v2 = (std::__shared_weak_count *)a1[7];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22412F2AC(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  result = operator new(0x40uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC6AB20;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v11 = a1[6];
  v10 = a1[7];
  result[5] = &off_24EC6A3B8;
  result[6] = v11;
  result[7] = v10;
  if (v10)
  {
    v12 = (unint64_t *)(v10 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  return result;
}

_QWORD *sub_22412F348(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC6AB20;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v10 = result[6];
  v9 = result[7];
  a2[5] = &off_24EC6A3B8;
  a2[6] = v10;
  a2[7] = v9;
  if (v9)
  {
    v11 = (unint64_t *)(v9 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

void sub_22412F3C4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  v2 = (std::__shared_weak_count *)a1[7];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
}

void sub_22412F470(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  v2 = (std::__shared_weak_count *)__p[7];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)__p[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  operator delete(__p);
}

void sub_22412F518(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        LOBYTE(v8) = 0;
        v9 = 0;
        sub_22412EDD4((uint64_t *)(v5 + 88), a1 + 24, &v8);
        if (v9)
          sub_2234AB028(&v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22412F5C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    sub_2234AB028(&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22412F60C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE4SendERKS5_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE4SendERKS5_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE4SendERKS5_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE4SendERKS5_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22412F678()
{
  return &unk_24EC6AB80;
}

_QWORD *sub_22412F684(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;

  v2 = (std::__shared_weak_count *)a1[8];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[6];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[6];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[3];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      v11 = (std::__shared_weak_count *)a1[1];
      if (!v11)
        return a1;
      goto LABEL_16;
    }
  }
  v11 = (std::__shared_weak_count *)a1[1];
  if (v11)
LABEL_16:
    std::__shared_weak_count::__release_weak(v11);
  return a1;
}

_QWORD *sub_22412F770(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC6ABA0;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_22412F7F8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC6ABA0;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x227684CE8);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_22412F890(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC6ABA0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_22412F920(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC6ABA0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_22412F990(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_22412FA10(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_22412FA8C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v23, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v25, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_22412EDD4(v13, v5, (uint64_t *)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    sub_2234AB028((uint64_t *)&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_22412FD68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_22412FD94(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  std::__assoc_sub_state **v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v17 = *v16;
  if (v17)
  {
    std::exception_ptr::exception_ptr(&a15, &a11);
    v18.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v17, v18);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v15)
      JUMPOUT(0x22412FBA0);
    JUMPOUT(0x22412FB70);
  }
  sub_2233236D4(3u);
}

void sub_22412FDF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

void sub_22412FE1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a11)
    sub_2234AB028(&a10);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v11)
  {
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_22412FF08(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE25EnqueueMessageAndDispatc"
                     "hIZNKS6_7ProcessERKS5_NSt3__17promiseIbEEEUlT_T0_E_EEvS9_SD_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE25EnqueueMessag"
                                "eAndDispatchIZNKS6_7ProcessERKS5_NSt3__17promiseIbEEEUlT_T0_E_EEvS9_SD_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE25EnqueueMessageAndDispatchIZNKS6_7ProcessERKS5_NSt3__17promiseIbEEEUlT_T0_E_EEvS9_SD_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE25EnqueueMessageAndDispatchIZNKS6_7ProcessERKS5_NSt3__17promiseIbEEEUlT_T0_E_EEvS9_SD_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22412FF74()
{
  return &unk_24EC6AC00;
}

_QWORD *sub_22412FF80(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;

  *a1 = &off_24EC6AC20;
  v2 = (std::__shared_weak_count *)a1[9];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[7];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[7];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[4];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      v11 = (std::__shared_weak_count *)a1[2];
      if (!v11)
        return a1;
      goto LABEL_16;
    }
  }
  v11 = (std::__shared_weak_count *)a1[2];
  if (v11)
LABEL_16:
    std::__shared_weak_count::__release_weak(v11);
  return a1;
}

void sub_224130078(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;

  *a1 = &off_24EC6AC20;
  v2 = (std::__shared_weak_count *)a1[9];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[7];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[7];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[4];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)a1[2];
    if (!v11)
      goto LABEL_19;
  }
  else
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)a1[2];
    if (!v11)
      goto LABEL_19;
  }
  std::__shared_weak_count::__release_weak(v11);
LABEL_19:
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_224130180(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  result = operator new(0x50uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC6AC20;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v11 = a1[6];
  v10 = a1[7];
  result[5] = &off_24EC6A3B8;
  result[6] = v11;
  result[7] = v10;
  if (v10)
  {
    v12 = (unint64_t *)(v10 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = a1[9];
  result[8] = a1[8];
  result[9] = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  return result;
}

_QWORD *sub_22413023C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC6AC20;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v10 = result[6];
  v9 = result[7];
  a2[5] = &off_24EC6A3B8;
  a2[6] = v10;
  a2[7] = v9;
  if (v9)
  {
    v11 = (unint64_t *)(v9 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = result[9];
  a2[8] = result[8];
  a2[9] = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  return result;
}

void sub_2241302D8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;

  v2 = (std::__shared_weak_count *)a1[9];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[7];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[7];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[4];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)a1[2];
    if (!v11)
      return;
    goto LABEL_16;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  v11 = (std::__shared_weak_count *)a1[2];
  if (v11)
LABEL_16:
    std::__shared_weak_count::__release_weak(v11);
}

void sub_2241303C4(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;

  v2 = (std::__shared_weak_count *)__p[9];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)__p[7];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[7];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)__p[4];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      v11 = (std::__shared_weak_count *)__p[2];
      if (!v11)
        goto LABEL_17;
      goto LABEL_16;
    }
  }
  v11 = (std::__shared_weak_count *)__p[2];
  if (v11)
LABEL_16:
    std::__shared_weak_count::__release_weak(v11);
LABEL_17:
  operator delete(__p);
}

void sub_2241304B0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v9, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[8];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_22412EDD4((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t *)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    sub_2234AB028((uint64_t *)&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_2241305C0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  __break(1u);
}

void sub_224130638(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  uint64_t v11;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  std::runtime_error::~runtime_error(&a10);
  if (v11)
    JUMPOUT(0x22413066CLL);
  JUMPOUT(0x22413069CLL);
}

uint64_t sub_2241306A4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE7ProcessERKS5_NSt3__17promiseIbEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE7ProcessERKS5_N"
                                "St3__17promiseIbEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE7ProcessERKS5_NSt3__17promiseIbEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE7ProcessERKS5_NSt3__17promiseIbEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_224130710()
{
  return &unk_24EC6AC80;
}

_QWORD *sub_22413071C(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC6ACA0;
  v2 = a1[4];
  a1[3] = &off_24EC2DF48;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_224130774(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC6ACA0;
  v2 = a1[4];
  a1[3] = &off_24EC2DF48;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2241307DC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24EC6ACA0;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24EC2DF48;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_224130854(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_224130874(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24EC6ACA0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24EC2DF48;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_2241308DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_2241308F4(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24EC2DF48;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_224130944(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24EC2DF48;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_224130990(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24EC2DF48;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 96);
        v8 = (_QWORD *)(v5 + 96);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_224130A44(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_224130A80(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE9SubscribeENS1_12ChannelInputIbEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE9SubscribeENS1_1"
                                "2ChannelInputIbEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE9SubscribeENS1_12ChannelInputIbEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE9SubscribeENS1_12ChannelInputIbEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_224130AEC()
{
  return &unk_24EC6AD00;
}

_QWORD *sub_224130AF8(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC6AD20;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_224130B30(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC6AD20;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_224130B78(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC6AD20;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_224130BC8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC6AD20;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_224130BF8(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_224130C08(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_224130C34(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_224130CC8(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_224130D04(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE15AddErrorHandlerENS1_12Cha"
                     "nnelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE15AddErrorHandle"
                                "rENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_224130D70()
{
  return &unk_24EC6AD80;
}

_QWORD *sub_224130D7C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC6ADA0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_224130DB4(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC6ADA0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_224130DFC(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC6ADA0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_224130E54(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC6ADA0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_224130E8C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_224130E9C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_224130EC8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 112);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_223323BA8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_223325CA4((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_223325BEC(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_2233236D4(3u);
    }
  }
}

void sub_224131044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2241310B4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_224131120()
{
  return &unk_24EC6AE00;
}

_QWORD *sub_22413112C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC6AE20;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_224131164(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC6AE20;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2241311AC(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC6AE20;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_224131204(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC6AE20;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_22413123C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_22413124C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_224131278(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_2233236D4(3u);
        sub_223325BEC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_224131330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22413137C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_3viz11ContextDataEbvbLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2241313E8()
{
  return &unk_24EC6AE80;
}

void sub_2241313F8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22413141C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_224131434(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS2_3viz11ContextDataEbvbLb0EEEE27__sh"
                     "ared_ptr_default_deleteIS8_S8_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS2_3viz11ContextDataEbvbLb"
                                "0EEEE27__shared_ptr_default_deleteIS8_S8_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS2_3viz11ContextDataEbvbLb0EEEE27__shared_ptr_default_deleteIS8_S8_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS2_3viz11ContextDataEbvbLb0EEEE27__shared_ptr_default_deleteIS8_S8_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_2241314A4(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2241314D0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22413150C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC6AEF0;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_224131574(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_224131604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_224131618(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2241316A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2241316BC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_224131780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_224131794(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_224131858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22413186C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_224131910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_224131924(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24EC6A7D8;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_2245023F0(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24EC2E850;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24EC37DE0;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24EC6A808;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_224131B08(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &off_24EC6A7A8;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    v3 = sub_224131924(v2);
    MEMORY[0x227684CE8](v3, 0x10B2C4085F70915);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      if (!v7)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
  {
LABEL_8:
    v8 = sub_224131924(v7);
    MEMORY[0x227684CE8](v8, 0x10B2C4085F70915);
  }
LABEL_9:
  v9 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v9)
    goto LABEL_13;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_13:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_19:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_19;
LABEL_14:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_20:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_224131C40(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 != *a2)
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3);
    if (v6 >= 0xAAAAAAAAAAAAAABLL)
      sub_22316E078();
    v7 = operator new(v5);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[3 * v6];
    do
    {
      v9 = *(_QWORD *)(v3 + 8);
      v8 = *(_QWORD *)(v3 + 16);
      *v7 = &off_24EC6A3B8;
      v7[1] = v9;
      v7[2] = v8;
      if (v8)
      {
        v10 = (unint64_t *)(v8 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      v3 += 24;
      v7 += 3;
    }
    while (v3 != v4);
    a1[1] = v7;
  }
  return a1;
}

void sub_224131D08(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v3;
  uint64_t v4;
  void *v5;

  v3 = *v1;
  if (*v1)
  {
    v4 = (uint64_t)v1[1];
    v5 = *v1;
    if ((void *)v4 != v3)
    {
      do
        v4 = sub_2241231D8(v4 - 24);
      while ((void *)v4 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

double sub_224131D4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t *v8;
  __int128 v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t *v38;
  __int128 v39;
  double result;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  char v45;
  _BYTE v46[32];
  __int128 v47;
  unsigned int v48;
  void *__p[2];
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a2 + 24))
  {
    v2 = *(_QWORD *)a2;
    v3 = *(_QWORD *)(a2 + 8);
    if (v3 != *(_QWORD *)a2)
    {
      if (0xAAAAAAAAAAAAAAABLL * ((v3 - *(_QWORD *)a2) >> 3) > 0x2E8BA2E8BA2E8BALL)
        sub_22316E078();
      v4 = 0xAAAAAAAAAAAAAAC8 * ((v3 - *(_QWORD *)a2) >> 3);
      v5 = (char *)operator new(v4);
      v6 = &v5[v4];
      v7 = v5;
      v42 = v3;
      while (1)
      {
        v8 = sub_2240181B4(0);
        sub_224017D50((uint64_t)v46, v2, (uint64_t)v8);
        if (v7 < v6)
        {
          v9 = *(_OWORD *)&v46[8];
          v10 = *(_QWORD *)&v46[24];
          v7[40] = 0;
          *((_QWORD *)v7 + 3) = v10;
          *(_OWORD *)(v7 + 8) = v9;
          memset(&v46[8], 0, 24);
          *((_DWORD *)v7 + 8) = v47;
          *((_DWORD *)v7 + 14) = -1;
          v11 = v48;
          if (v48 != -1)
          {
            ((void (*)(char *))off_24EC6AA30[v48])(&v45);
            *((_DWORD *)v7 + 14) = v11;
          }
          *((_QWORD *)v7 + 8) = 0;
          *((_QWORD *)v7 + 9) = 0;
          *((_QWORD *)v7 + 10) = 0;
          *((_OWORD *)v7 + 4) = *(_OWORD *)__p;
          *((_QWORD *)v7 + 10) = v50;
          __p[0] = 0;
          __p[1] = 0;
          v50 = 0;
          v7 += 88;
          v12 = v48;
          if (v48 == -1)
            goto LABEL_63;
          goto LABEL_62;
        }
        v13 = 0x2E8BA2E8BA2E8BA3 * ((v7 - v5) >> 3) + 1;
        if (v13 > 0x2E8BA2E8BA2E8BALL)
          sub_22316E078();
        if (0x5D1745D1745D1746 * ((v6 - v5) >> 3) > v13)
          v13 = 0x5D1745D1745D1746 * ((v6 - v5) >> 3);
        if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((v6 - v5) >> 3)) >= 0x1745D1745D1745DLL)
          v14 = 0x2E8BA2E8BA2E8BALL;
        else
          v14 = v13;
        v44 = v14;
        if (v14)
        {
          if (v14 > 0x2E8BA2E8BA2E8BALL)
            sub_223174E94();
          v15 = (char *)operator new(88 * v14);
        }
        else
        {
          v15 = 0;
        }
        v16 = &v15[8 * ((v7 - v5) >> 3)];
        *(_OWORD *)(v16 + 8) = *(_OWORD *)&v46[8];
        *((_QWORD *)v16 + 3) = *(_QWORD *)&v46[24];
        memset(&v46[8], 0, 24);
        v17 = v48;
        *((_DWORD *)v16 + 8) = v47;
        v16[40] = 0;
        *((_DWORD *)v16 + 14) = -1;
        if ((_DWORD)v17 != -1)
        {
          ((void (*)(char *, char *, char *))off_24EC6AA30[v17])(&v45, v16 + 40, (char *)&v47 + 8);
          *((_DWORD *)v16 + 14) = v17;
        }
        v18 = &v15[8 * ((v7 - v5) >> 3)];
        *((_OWORD *)v18 + 4) = *(_OWORD *)__p;
        *((_QWORD *)v18 + 10) = v50;
        __p[1] = 0;
        v50 = 0;
        __p[0] = 0;
        if (v7 == v5)
        {
          v43 = &v15[8 * ((v7 - v5) >> 3)];
          if (v5)
            goto LABEL_46;
        }
        else
        {
          v19 = 0;
          do
          {
            v20 = &v16[v19];
            v21 = &v7[v19];
            v22 = *(_OWORD *)&v7[v19 - 80];
            *((_QWORD *)v20 - 8) = *(_QWORD *)&v7[v19 - 64];
            *((_OWORD *)v20 - 5) = v22;
            *((_QWORD *)v21 - 9) = 0;
            *((_QWORD *)v21 - 8) = 0;
            *((_QWORD *)v21 - 10) = 0;
            *((_DWORD *)v20 - 14) = *(_DWORD *)&v7[v19 - 56];
            v16[v19 - 48] = 0;
            v23 = (uint64_t)&v16[v19 - 48];
            *((_DWORD *)v20 - 8) = -1;
            v24 = *(unsigned int *)&v7[v19 - 32];
            if ((_DWORD)v24 != -1)
            {
              ((void (*)(char *, uint64_t, char *))off_24EC6AA30[v24])(&v45, v23, v21 - 48);
              *((_DWORD *)v20 - 8) = v24;
            }
            *((_QWORD *)v20 - 3) = 0;
            *((_QWORD *)v20 - 2) = 0;
            *((_QWORD *)v20 - 1) = 0;
            *(_OWORD *)(v20 - 24) = *(_OWORD *)(v21 - 24);
            *((_QWORD *)v20 - 1) = *((_QWORD *)v21 - 1);
            *((_QWORD *)v21 - 3) = 0;
            *((_QWORD *)v21 - 2) = 0;
            *((_QWORD *)v21 - 1) = 0;
            v19 -= 88;
          }
          while (&v7[v19] != v5);
          v43 = &v16[v19];
          do
          {
            v25 = *((_QWORD *)v7 - 3);
            if (v25)
            {
              v26 = *((_QWORD *)v7 - 2);
              v27 = (void *)*((_QWORD *)v7 - 3);
              if (v26 != v25)
              {
                do
                {
                  v28 = *(std::__shared_weak_count **)(v26 - 8);
                  if (v28)
                  {
                    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
                    do
                      v30 = __ldaxr(p_shared_owners);
                    while (__stlxr(v30 - 1, p_shared_owners));
                    if (!v30)
                    {
                      ((void (*)(std::__shared_weak_count *, uint64_t))v28->__on_zero_shared)(v28, v23);
                      std::__shared_weak_count::__release_weak(v28);
                    }
                  }
                  v26 -= 16;
                }
                while (v26 != v25);
                v27 = (void *)*((_QWORD *)v7 - 3);
              }
              *((_QWORD *)v7 - 2) = v25;
              operator delete(v27);
            }
            v31 = *((unsigned int *)v7 - 8);
            if ((_DWORD)v31 != -1)
              ((void (*)(char *, char *))off_24EC6AA20[v31])(&v45, v7 - 48);
            *((_DWORD *)v7 - 8) = -1;
            if (*(v7 - 57) < 0)
              operator delete(*((void **)v7 - 10));
            v7 -= 88;
          }
          while (v7 != v5);
          if (v5)
LABEL_46:
            operator delete(v5);
        }
        v6 = &v15[88 * v44];
        v7 = v16 + 88;
        v32 = (char *)__p[0];
        if (__p[0])
        {
          v33 = (char *)__p[1];
          v34 = __p[0];
          if (__p[1] != __p[0])
          {
            do
            {
              v35 = (std::__shared_weak_count *)*((_QWORD *)v33 - 1);
              if (v35)
              {
                v36 = (unint64_t *)&v35->__shared_owners_;
                do
                  v37 = __ldaxr(v36);
                while (__stlxr(v37 - 1, v36));
                if (!v37)
                {
                  ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                  std::__shared_weak_count::__release_weak(v35);
                }
              }
              v33 -= 16;
            }
            while (v33 != v32);
            v34 = __p[0];
          }
          __p[1] = v32;
          operator delete(v34);
          v3 = v42;
          v5 = v43;
          v12 = v48;
          if (v48 == -1)
            goto LABEL_63;
LABEL_62:
          ((void (*)(char *, char *))off_24EC6AA20[v12])(&v45, (char *)&v47 + 8);
          goto LABEL_63;
        }
        v3 = v42;
        v5 = v43;
        v12 = v48;
        if (v48 != -1)
          goto LABEL_62;
LABEL_63:
        v48 = -1;
        if ((v46[31] & 0x80000000) != 0)
          operator delete(*(void **)&v46[8]);
        v2 += 24;
        if (v2 == v3)
          goto LABEL_67;
      }
    }
    v5 = 0;
    v7 = 0;
    v6 = 0;
LABEL_67:
    *(_QWORD *)v46 = v5;
    *(_QWORD *)&v46[8] = v7;
    *(_QWORD *)&v46[16] = v6;
    v38 = sub_2240181B4(0);
    sub_223BF6664(&v46[24], (uint64_t)v38);
    v39 = *(_OWORD *)&v46[16];
    *(_OWORD *)a1 = *(_OWORD *)v46;
    *(_OWORD *)(a1 + 16) = v39;
    result = *(double *)&v47;
    *(_OWORD *)(a1 + 32) = v47;
    *(_BYTE *)(a1 + 48) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 48) = 0;
  }
  return result;
}

void sub_224132334(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_22316DC48(a1);
}

uint64_t sub_224132398(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 88;
    sub_2241323E8(i - 88);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_2241323E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(_QWORD *)(a1 + 64);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 72);
    v4 = *(void **)(a1 + 64);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 64);
    }
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v4);
  }
  v8 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v8 != -1)
    ((void (*)(char *, uint64_t))off_24EC6AA20[v8])(&v9, a1 + 40);
  *(_DWORD *)(a1 + 56) = -1;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

uint64_t sub_2241324D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;

  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD *)(a1 + 24);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 32);
      v4 = *(void **)(a1 + 24);
      if (v3 != v2)
      {
        do
        {
          v5 = *(std::__shared_weak_count **)(v3 - 8);
          if (v5)
          {
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v7 = __ldaxr(p_shared_owners);
            while (__stlxr(v7 - 1, p_shared_owners));
            if (!v7)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
          }
          v3 -= 16;
        }
        while (v3 != v2);
        v4 = *(void **)(a1 + 24);
      }
      *(_QWORD *)(a1 + 32) = v2;
      operator delete(v4);
    }
    v8 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      v9 = *(_QWORD *)(a1 + 8);
      v10 = *(void **)a1;
      if ((void *)v9 != v8)
      {
        do
        {
          v9 -= 88;
          sub_2241323E8(v9);
        }
        while ((void *)v9 != v8);
        v10 = *(void **)a1;
      }
      *(_QWORD *)(a1 + 8) = v8;
      operator delete(v10);
    }
  }
  return a1;
}

void sub_2241325B0(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::logic_error *exception;
  std::logic_error *v35;
  char v36;
  char v37[8];
  void *v38;
  char v39;
  uint64_t v40;
  int v41;
  void *__p;
  char *v43;
  char v44[8];
  void *v45[2];
  __int128 v46;
  __int128 v47;
  int v48;
  char *v49;
  char *v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v2 = a1[6];
  v3 = a1[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 3)
    goto LABEL_47;
  v8 = *(_DWORD *)(a1[3] + v2);
  a1[6] = v2 + 4;
  if (v8 > 1)
  {
    sub_2244FFA6C(a1);
    sub_224132AC4(a1, a2 + 8);
    sub_224017E94(a2);
    if (*(_DWORD *)(a2 + 56))
      sub_22316DD70();
    v9 = a1[6];
    v10 = a1[7];
    v4 = v10 >= v9;
    v11 = v10 - v9;
    if (!v4)
      v11 = 0;
    if (v11 > 3)
    {
      v12 = *(_QWORD *)(a2 + 40);
      v13 = *(unsigned int *)(a1[3] + v9);
      a1[6] = v9 + 4;
      sub_2244FFA6C(a1);
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v12 + 40))(v12, a1, v13);
      v14 = a1[12];
      v15 = a1[9];
      v16 = *(_QWORD *)(v15 - 16);
      a1[6] = *(_QWORD *)(v14 - 8) + *(_QWORD *)(v15 - 8) + 8;
      a1[6] = *(_QWORD *)(v14 - 16) + v16 + 8;
      a1[9] = v15 - 16;
      a1[12] = v14 - 16;
      return;
    }
LABEL_47:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  v48 = 0;
  v47 = 0u;
  v46 = 0u;
  *(_OWORD *)v45 = 0u;
  sub_223BF6664(&v49, a2 + 64);
  sub_224132AC4(a1, (uint64_t)v45);
  sub_224017A30((uint64_t)&v44);
  if (v48)
    sub_22316DD70();
  v17 = a1[6];
  v18 = a1[7];
  v4 = v18 >= v17;
  v19 = v18 - v17;
  if (!v4)
    v19 = 0;
  if (v19 <= 3)
  {
    v35 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v35, "Not enough data to read");
    v35->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(v35, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  v20 = v47;
  v21 = *(unsigned int *)(a1[3] + v17);
  a1[6] = v17 + 4;
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v20 + 40))(v20, a1, v21);
  sub_223BF6130((uint64_t)&v37, (uint64_t)&v44);
  sub_223BF6298(a2, (uint64_t)&v37);
  v22 = (char *)__p;
  if (__p)
  {
    v23 = v43;
    v24 = __p;
    if (v43 != __p)
    {
      do
      {
        v25 = (std::__shared_weak_count *)*((_QWORD *)v23 - 1);
        if (v25)
        {
          p_shared_owners = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldaxr(p_shared_owners);
          while (__stlxr(v27 - 1, p_shared_owners));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        v23 -= 16;
      }
      while (v23 != v22);
      v24 = __p;
    }
    v43 = v22;
    operator delete(v24);
  }
  if (v41 != -1)
    ((void (*)(char *, uint64_t *))off_24EC6AA20[v41])(&v36, &v40);
  v41 = -1;
  if (v39 < 0)
    operator delete(v38);
  v28 = v49;
  if (v49)
  {
    v29 = v50;
    v30 = v49;
    if (v50 != v49)
    {
      do
      {
        v31 = (std::__shared_weak_count *)*((_QWORD *)v29 - 1);
        if (v31)
        {
          v32 = (unint64_t *)&v31->__shared_owners_;
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        v29 -= 16;
      }
      while (v29 != v28);
      v30 = v49;
    }
    v50 = v28;
    operator delete(v30);
  }
  if (v48 != -1)
    ((void (*)(char *, __int128 *))off_24EC6AA20[v48])(&v37, &v47);
  v48 = -1;
  if (SBYTE7(v46) < 0)
    operator delete(v45[0]);
}

void sub_224132974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29)
{
  void *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  uint64_t v38;

  __cxa_free_exception(v29);
  v32 = *(_QWORD *)(v30 + 64);
  if (v32)
  {
    v33 = *(_QWORD *)(v30 + 72);
    v34 = *(void **)(v30 + 64);
    if (v33 != v32)
    {
      do
      {
        v35 = *(std::__shared_weak_count **)(v33 - 8);
        if (v35)
        {
          p_shared_owners = (unint64_t *)&v35->__shared_owners_;
          do
            v37 = __ldaxr(p_shared_owners);
          while (__stlxr(v37 - 1, p_shared_owners));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        v33 -= 16;
      }
      while (v33 != v32);
      v34 = *(void **)(v30 + 64);
    }
    *(_QWORD *)(v30 + 72) = v32;
    operator delete(v34);
  }
  v38 = *(unsigned int *)(v30 + 56);
  if ((_DWORD)v38 != -1)
    ((void (*)(char *, uint64_t *))off_24EC6AA20[v38])(&a10, &a29);
  *(_DWORD *)(v30 + 56) = -1;
  if (a27 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_224132AC4(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  int v18;
  int v19;
  std::logic_error *exception;
  std::logic_error *v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  void *__p[2];
  uint64_t v26;
  int v27;

  v2 = a1[6];
  v3 = a1[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 3)
    goto LABEL_21;
  v8 = *(_DWORD *)(a1[3] + v2);
  a1[6] = v2 + 4;
  if (v8 > 1)
  {
    sub_2244FFA6C(a1);
    sub_2244FFDBC(a1, a2);
    v9 = a1[6];
    v10 = a1[7];
    v4 = v10 >= v9;
    v11 = v10 - v9;
    if (!v4)
      v11 = 0;
    if (v11 > 3)
    {
      *(_DWORD *)(a2 + 24) = *(_DWORD *)(a1[3] + v9);
      a1[6] += 4;
      v12 = a1[12];
      v13 = a1[9];
      a1[6] = *(_QWORD *)(v12 - 8) + *(_QWORD *)(v13 - 8) + 8;
      a1[9] = v13 - 8;
      a1[12] = v12 - 8;
      return;
    }
LABEL_21:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  HIBYTE(v26) = 0;
  LOBYTE(__p[0]) = 0;
  v27 = 0;
  sub_2244FFDBC(a1, (uint64_t)__p);
  v14 = a1[6];
  v15 = a1[7];
  v4 = v15 >= v14;
  v16 = v15 - v14;
  if (!v4)
    v16 = 0;
  if (v16 <= 3)
  {
    v21 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v21, "Not enough data to read");
    v21->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(v21, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  v17 = *(_DWORD *)(a1[3] + v14);
  a1[6] = v14 + 4;
  v18 = SHIBYTE(v26);
  if (SHIBYTE(v26) < 0)
  {
    sub_223197FA4(&v22, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    v22 = *(_OWORD *)__p;
    v23 = v26;
  }
  v24 = v17;
  if (*(char *)(a2 + 23) < 0)
  {
    operator delete(*(void **)a2);
    v19 = v24;
    *(_OWORD *)a2 = v22;
    *(_QWORD *)(a2 + 16) = v23;
    *(_DWORD *)(a2 + 24) = v19;
    if (v18 < 0)
LABEL_20:
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)a2 = v22;
    *(_QWORD *)(a2 + 16) = v23;
    *(_DWORD *)(a2 + 24) = v17;
    if (v18 < 0)
      goto LABEL_20;
  }
}

void sub_224132CE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_224132D38(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6AF68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_224132D48(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6AF68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_224132D80(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = (std::__shared_weak_count *)operator new(0x20uLL);
  v2->__shared_owners_ = 0;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6AF68;
  v7 = v2;
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6B238;
  v6 = &v2[1].__vftable;
  sub_223BF5A0C(a1, &v6, 1uLL);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_224132E80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va1);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_224132E9C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6AFB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_224132EAC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6AFB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_224132EDC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 320) && (sub_224011EC0(a1 + 144), *(_BYTE *)(a1 + 136)) && *(char *)(a1 + 135) < 0)
  {
    operator delete(*(void **)(a1 + 112));
    std::mutex::~mutex((std::mutex *)(a1 + 24));
  }
  else
  {
    std::mutex::~mutex((std::mutex *)(a1 + 24));
  }
}

uint64_t sub_224132F38(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)a1 = &off_24EC6B008;
  if (*(_BYTE *)(a1 + 56))
  {
    v2 = *(_QWORD **)(a1 + 48);
    if (v2 == (_QWORD *)(a1 + 24))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 24);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v4)
    return a1;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_224132FE4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)a1 = &off_24EC6B008;
  if (*(_BYTE *)(a1 + 56))
  {
    v2 = *(_QWORD **)(a1 + 48);
    if (v2 == (_QWORD *)(a1 + 24))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 24);
    }
    else
    {
      if (!v2)
        goto LABEL_7;
      v3 = 5;
    }
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
LABEL_7:
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_224133090(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x40uLL);
  *v2 = &off_24EC6B008;
  sub_2241344DC((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_2241330D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2241330E4(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24EC6B008;
  return sub_2241344DC((uint64_t)(a2 + 1), a1 + 8);
}

void sub_224133100(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (*(_BYTE *)(a1 + 56))
  {
    v2 = *(_QWORD **)(a1 + 48);
    if (v2 == (_QWORD *)(a1 + 24))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 24);
    }
    else
    {
      if (!v2)
        goto LABEL_7;
      v3 = 5;
    }
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
LABEL_7:
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_224133194(_QWORD *__p)
{
  _QWORD *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (*((_BYTE *)__p + 56))
  {
    v2 = (_QWORD *)__p[6];
    if (v2 == __p + 3)
    {
      v3 = 4;
      v2 = __p + 3;
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  v4 = (std::__shared_weak_count *)__p[2];
  if (!v4)
    goto LABEL_11;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    operator delete(__p);
  }
  else
  {
LABEL_11:
    operator delete(__p);
  }
}

void sub_224133234(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  char *v5;
  char *v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  unint64_t v27;
  char *v28;
  char *v29;
  void *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  void **v38;
  __int128 v39;
  _BYTE *v40;
  size_t v41;
  char *v42;
  uint64_t v43;
  _DWORD *v44;
  unsigned int v45;
  char *v46;
  char *v47;
  void *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  char *v60;
  char *v61;
  void *v62;
  char *v63;
  char *v64;
  __int128 v65;
  int64_t v66;
  unint64_t v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  void *v73;
  char *v74;
  void *v75;
  char *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  _BOOL4 v100;
  char v101;
  void *v102;
  void **v103;
  unsigned __int8 *v104;
  uint64_t v105;
  void *v106;
  const void *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  _BOOL4 v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  std::mutex *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  void *v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  char *v129;
  char *v130;
  void *v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  char *v135;
  char *v136;
  void *v137;
  std::logic_error *exception;
  uint64_t v139;
  unint64_t v140;
  void *v141;
  __int128 v142;
  char v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  int v147;
  void *v148[2];
  void *v149[2];
  __int128 v150;
  unsigned __int8 v151;
  void *__p[3];
  int v153;
  _BYTE __s2[56];
  int v155;
  void *v156;
  char *v157;
  uint64_t v158;

  v158 = *MEMORY[0x24BDAC8D0];
  sub_224132D80(__p);
  v144 = 0x500000001;
  v145 = 0;
  v146 = 1;
  v147 = 0;
  memset(__s2, 0, 24);
  sub_223BF6664(&__s2[24], (uint64_t)__p);
  *(_OWORD *)v148 = *(_OWORD *)__s2;
  *(_OWORD *)v149 = *(_OWORD *)&__s2[16];
  v150 = *(_OWORD *)&__s2[32];
  v151 = 1;
  v5 = (char *)__p[0];
  if (__p[0])
  {
    v6 = (char *)__p[1];
    v7 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        v8 = (std::__shared_weak_count *)*((_QWORD *)v6 - 1);
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        v6 -= 16;
      }
      while (v6 != v5);
      v7 = __p[0];
    }
    __p[1] = v5;
    operator delete(v7);
  }
  v139 = a1;
  v11 = a3[6];
  v12 = a3[7];
  v13 = v12 >= v11;
  v14 = v12 - v11;
  if (!v13)
    v14 = 0;
  if (v14 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read");
    goto LABEL_229;
  }
  a3[6] = v11 + 4;
  sub_2244FFA6C(a3);
  sub_2240ECF4C((uint64_t)__s2, a3, &v144);
  v17 = a3[6];
  v16 = a3[7];
  if (v16 <= v17)
  {
LABEL_228:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read");
LABEL_229:
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  v18 = *(unsigned __int8 *)(a3[3] + v17);
  v19 = v17 + 1;
  a3[6] = v19;
  if (v18)
  {
    if (!v151)
    {
      *(_OWORD *)v149 = 0u;
      v150 = 0u;
      *(_OWORD *)v148 = 0u;
      v20 = sub_2240181B4(0);
      sub_223BF6664(&v149[1], (uint64_t)v20);
      v151 = 1;
      v19 = a3[6];
      v16 = a3[7];
    }
    v13 = v16 >= v19;
    v21 = v16 - v19;
    if (!v13)
      v21 = 0;
    if (v21 > 3)
    {
      a3[6] = v19 + 4;
      sub_2244FFA6C(a3);
      v22 = a3[6];
      v23 = a3[7];
      v13 = v23 >= v22;
      v24 = v23 - v22;
      if (!v13)
        v24 = 0;
      if (v24 > 7)
      {
        v25 = *(_QWORD *)(a3[3] + v22);
        a3[6] = v22 + 8;
        v26 = (char *)v148[1];
        v27 = 0x2E8BA2E8BA2E8BA3 * (((char *)v148[1] - (char *)v148[0]) >> 3);
        v140 = v25;
        v15 = v25 - v27;
        if (v25 > v27)
        {
          sub_2241345FC(v148, v15);
LABEL_42:
          v35 = 0;
          while (1)
          {
            v155 = 0;
            memset(&__s2[8], 0, 48);
            sub_223BF6664(&v156, (uint64_t)&v149[1]);
            sub_2241325B0(a3, (uint64_t)__s2);
            v36 = (char *)v148[0];
            v37 = (char *)v148[0] + 88 * v35;
            if (v37 != __s2)
            {
              v38 = (void **)(v37 + 8);
              if (v37[31] < 0)
              {
                if (__s2[31] >= 0)
                  v40 = &__s2[8];
                else
                  v40 = *(_BYTE **)&__s2[8];
                if (__s2[31] >= 0)
                  v41 = __s2[31];
                else
                  v41 = *(_QWORD *)&__s2[16];
                sub_22319C4B8(v38, v40, v41);
              }
              else if ((__s2[31] & 0x80) != 0)
              {
                sub_22319C3F4(v38, *(void **)&__s2[8], *(size_t *)&__s2[16]);
              }
              else
              {
                v39 = *(_OWORD *)&__s2[8];
                *((_QWORD *)v37 + 3) = *(_QWORD *)&__s2[24];
                *(_OWORD *)v38 = v39;
              }
            }
            v42 = &v36[88 * v35];
            v45 = *((_DWORD *)v42 + 14);
            v44 = v42 + 56;
            v43 = v45;
            *(v44 - 6) = *(_DWORD *)&__s2[32];
            v15 = (unint64_t)(v44 - 4);
            if (v45 == -1)
            {
              if (v155 != -1)
              {
LABEL_60:
                __p[0] = v44 - 4;
                ((void (*)(void **))off_24EC6B068[v155])(__p);
              }
            }
            else
            {
              if (v155 != -1)
                goto LABEL_60;
              ((void (*)(void **, unint64_t))off_24EC6AA20[v43])(__p, v15);
              *v44 = -1;
            }
            if (v37 != __s2)
              sub_22410EC04((uint64_t)&v36[88 * v35 + 64], v156, v157, (v157 - (_BYTE *)v156) >> 4);
            v46 = (char *)v156;
            if (v156)
            {
              v47 = v157;
              v48 = v156;
              if (v157 != v156)
              {
                do
                {
                  v49 = (std::__shared_weak_count *)*((_QWORD *)v47 - 1);
                  if (v49)
                  {
                    v50 = (unint64_t *)&v49->__shared_owners_;
                    do
                      v51 = __ldaxr(v50);
                    while (__stlxr(v51 - 1, v50));
                    if (!v51)
                    {
                      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                      std::__shared_weak_count::__release_weak(v49);
                    }
                  }
                  v47 -= 16;
                }
                while (v47 != v46);
                v48 = v156;
              }
              v157 = v46;
              operator delete(v48);
            }
            if (v155 != -1)
              ((void (*)(void **, _BYTE *))off_24EC6AA20[v155])(__p, &__s2[40]);
            v155 = -1;
            if ((__s2[31] & 0x80000000) != 0)
              operator delete(*(void **)&__s2[8]);
            if (++v35 == v140)
              goto LABEL_78;
          }
        }
        if (v25 < v27)
        {
          v34 = (char *)v148[0] + 88 * v25;
          if (v148[1] != v34)
          {
            do
            {
              v26 -= 88;
              sub_2241323E8((uint64_t)v26);
            }
            while (v26 != v34);
          }
          v148[1] = v34;
        }
        if (v140)
          goto LABEL_42;
LABEL_78:
        v52 = a3[12];
        v55 = *(_QWORD *)(v52 - 8);
        v53 = v52 - 8;
        v54 = v55;
        v56 = a3[9];
        v58 = *(_QWORD *)(v56 - 8);
        v57 = v56 - 8;
        a3[6] = v54 + v58 + 8;
        a3[9] = v57;
        a3[12] = v53;
        v59 = v151;
        goto LABEL_88;
      }
    }
    goto LABEL_228;
  }
  if (v151)
  {
    v28 = (char *)v149[1];
    if (v149[1])
    {
      v29 = (char *)v150;
      v30 = v149[1];
      if ((void *)v150 != v149[1])
      {
        do
        {
          v31 = (std::__shared_weak_count *)*((_QWORD *)v29 - 1);
          if (v31)
          {
            v32 = (unint64_t *)&v31->__shared_owners_;
            do
              v33 = __ldaxr(v32);
            while (__stlxr(v33 - 1, v32));
            if (!v33)
            {
              ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
              std::__shared_weak_count::__release_weak(v31);
            }
          }
          v29 -= 16;
        }
        while (v29 != v28);
        v30 = v149[1];
      }
      *(_QWORD *)&v150 = v28;
      operator delete(v30);
    }
    v60 = (char *)v148[0];
    if (v148[0])
    {
      v61 = (char *)v148[1];
      v62 = v148[0];
      if (v148[1] != v148[0])
      {
        do
        {
          v61 -= 88;
          sub_2241323E8((uint64_t)v61);
        }
        while (v61 != v60);
        v62 = v148[0];
      }
      v148[1] = v60;
      operator delete(v62);
    }
    v151 = 0;
  }
  v59 = 0;
  v53 = a3[12];
  v57 = a3[9];
LABEL_88:
  a3[6] = *(_QWORD *)(v53 - 8) + *(_QWORD *)(v57 - 8) + 8;
  a3[9] = v57 - 8;
  a3[12] = v53 - 8;
  if (!v59)
    goto LABEL_205;
  v64 = (char *)v148[0];
  v63 = (char *)v148[1];
  memset(__p, 0, sizeof(__p));
  v65 = 0uLL;
  v66 = (char *)v148[1] - (char *)v148[0];
  if (v148[1] == v148[0])
    goto LABEL_131;
  v67 = 0x2E8BA2E8BA2E8BA3 * (v66 >> 3);
  if (v67 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  __p[0] = operator new(0x5D1745D1745D1748 * (v66 >> 3));
  __p[1] = __p[0];
  __p[2] = (char *)__p[0] + 24 * v67;
  do
  {
    if (*((_DWORD *)v64 + 14) > 1u)
LABEL_223:
      sub_22316DD70();
    v68 = *((_QWORD *)v64 + 5);
    v69 = (std::__shared_weak_count *)*((_QWORD *)v64 + 6);
    if (!v69)
      goto LABEL_99;
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
    do
      v72 = __ldaxr(v70);
    while (__stlxr(v72 - 1, v70));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
      if (!v68)
      {
LABEL_104:
        *(_QWORD *)__s2 = &off_24EC6A3B8;
        *(_QWORD *)&__s2[8] = 0;
        *(_QWORD *)&__s2[16] = 0;
        v74 = (char *)__p[1];
        v73 = __p[2];
        if (__p[1] < __p[2])
          goto LABEL_102;
        goto LABEL_105;
      }
    }
    else
    {
LABEL_99:
      if (!v68)
        goto LABEL_104;
    }
    if (*((_DWORD *)v64 + 14))
      goto LABEL_223;
    (*(void (**)(_BYTE *__return_ptr))(**((_QWORD **)v64 + 5) + 48))(__s2);
    v74 = (char *)__p[1];
    v73 = __p[2];
    if (__p[1] < __p[2])
    {
LABEL_102:
      *(_QWORD *)v74 = &off_24EC6A3B8;
      *(_OWORD *)(v74 + 8) = *(_OWORD *)&__s2[8];
      *(_QWORD *)&__s2[8] = 0;
      *(_QWORD *)&__s2[16] = 0;
      v75 = v74 + 24;
      goto LABEL_125;
    }
LABEL_105:
    v76 = (char *)__p[0];
    v77 = 0xAAAAAAAAAAAAAAABLL * ((v74 - (char *)__p[0]) >> 3);
    v78 = v77 + 1;
    if (v77 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_22316E078();
    v79 = 0xAAAAAAAAAAAAAAABLL * ((int64_t)((uint64_t)v73 - (unint64_t)__p[0]) >> 3);
    if (2 * v79 > v78)
      v78 = 2 * v79;
    if (v79 >= 0x555555555555555)
      v80 = 0xAAAAAAAAAAAAAAALL;
    else
      v80 = v78;
    if (v80 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v81 = (char *)operator new(24 * v80);
    v82 = &v81[24 * v77];
    *(_QWORD *)v82 = &off_24EC6A3B8;
    *(_OWORD *)(v82 + 8) = *(_OWORD *)&__s2[8];
    v83 = &v81[24 * v80];
    *(_QWORD *)&__s2[8] = 0;
    *(_QWORD *)&__s2[16] = 0;
    v75 = v82 + 24;
    if (v74 == v76)
    {
      __p[0] = v82;
      __p[1] = v82 + 24;
      __p[2] = &v81[24 * v80];
    }
    else
    {
      do
      {
        *((_QWORD *)v82 - 3) = &off_24EC6A3B8;
        v82 -= 24;
        *(_OWORD *)(v82 + 8) = *((_OWORD *)v74 - 1);
        *((_QWORD *)v74 - 2) = 0;
        *((_QWORD *)v74 - 1) = 0;
        v74 -= 24;
      }
      while (v74 != v76);
      v74 = (char *)__p[0];
      v84 = (char *)__p[1];
      __p[0] = v82;
      __p[1] = v75;
      __p[2] = v83;
      while (v84 != v74)
      {
        v85 = (std::__shared_weak_count *)*((_QWORD *)v84 - 1);
        if (v85)
        {
          v86 = (unint64_t *)&v85->__shared_owners_;
          do
            v87 = __ldaxr(v86);
          while (__stlxr(v87 - 1, v86));
          if (!v87)
          {
            ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
            std::__shared_weak_count::__release_weak(v85);
          }
        }
        v84 -= 24;
      }
    }
    if (v74)
      operator delete(v74);
LABEL_125:
    __p[1] = v75;
    v88 = *(std::__shared_weak_count **)&__s2[16];
    if (*(_QWORD *)&__s2[16])
    {
      v89 = (unint64_t *)(*(_QWORD *)&__s2[16] + 8);
      do
        v90 = __ldaxr(v89);
      while (__stlxr(v90 - 1, v89));
      if (!v90)
      {
        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
        std::__shared_weak_count::__release_weak(v88);
      }
    }
    v64 += 88;
  }
  while (v64 != v63);
  v65 = *(_OWORD *)__p;
  v66 = (int64_t)__p[2];
LABEL_131:
  *(_OWORD *)__s2 = v65;
  *(_QWORD *)&__s2[16] = v66;
  sub_224131C40(__p, (uint64_t *)__s2);
  v91 = *(_QWORD *)__s2;
  if (*(_QWORD *)__s2)
  {
    v92 = *(_QWORD *)&__s2[8];
    v93 = *(void **)__s2;
    if (*(_QWORD *)&__s2[8] != *(_QWORD *)__s2)
    {
      do
      {
        v94 = *(std::__shared_weak_count **)(v92 - 8);
        if (v94)
        {
          v95 = (unint64_t *)&v94->__shared_owners_;
          do
            v96 = __ldaxr(v95);
          while (__stlxr(v96 - 1, v95));
          if (!v96)
          {
            ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
            std::__shared_weak_count::__release_weak(v94);
          }
        }
        v92 -= 24;
      }
      while (v92 != v91);
      v93 = *(void **)__s2;
    }
    *(_QWORD *)&__s2[8] = v91;
    operator delete(v93);
  }
  v97 = (char *)__p[0];
  v141 = __p[0];
  v142 = *(_OWORD *)&__p[1];
  v143 = 1;
  v98 = (char *)__p[1];
  if (__p[0] != __p[1])
  {
    while (2)
    {
      v99 = *((_QWORD *)v97 + 1);
      if (!v99)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v99 = *((_QWORD *)v97 + 1);
      }
      (*(void (**)(void **__return_ptr))(*(_QWORD *)v99 + 48))(__p);
      v100 = 0;
      strcpy(__s2, "cv3d.net");
      __s2[23] = 8;
      *(_DWORD *)&__s2[24] = 1;
      __s2[32] = 1;
      v101 = HIBYTE(__p[2]);
      if (SHIBYTE(__p[2]) >= 0)
        v102 = (void *)HIBYTE(__p[2]);
      else
        v102 = __p[1];
      if (v102 == (void *)8)
      {
        if ((HIBYTE(__p[2]) & 0x80) != 0)
        {
          v106 = __p[0];
          if (memcmp(__p[0], __s2, (size_t)__p[1]))
          {
            operator delete(v106);
            goto LABEL_145;
          }
        }
        else if (HIBYTE(__p[2]))
        {
          v103 = __p;
          v104 = __s2;
          v105 = HIBYTE(__p[2]);
          while (*(unsigned __int8 *)v103 == *v104)
          {
            v103 = (void **)((char *)v103 + 1);
            ++v104;
            if (!--v105)
              goto LABEL_161;
          }
          v100 = 0;
          if ((HIBYTE(__p[2]) & 0x80) != 0)
          {
LABEL_166:
            operator delete(__p[0]);
            if (v100)
              goto LABEL_167;
LABEL_145:
            v97 += 24;
            if (v97 == v98)
              goto LABEL_190;
            continue;
          }
LABEL_163:
          if (!v100)
            goto LABEL_145;
LABEL_167:
          v107 = (const void *)*((_QWORD *)v97 + 1);
          v108 = (std::__shared_weak_count *)*((_QWORD *)v97 + 2);
          if (v108)
          {
            v109 = (unint64_t *)&v108->__shared_owners_;
            do
              v110 = __ldxr(v109);
            while (__stxr(v110 + 1, v109));
          }
          if (v107)
          {
            v111 = __dynamic_cast(v107, (const struct __class_type_info *)&unk_24EC6A3F8, (const struct __class_type_info *)&unk_24EC671B0, 0) != 0;
            if (!v108)
              goto LABEL_177;
          }
          else
          {
            v111 = 0;
            if (!v108)
              goto LABEL_177;
          }
          v112 = (unint64_t *)&v108->__shared_owners_;
          do
            v113 = __ldaxr(v112);
          while (__stlxr(v113 - 1, v112));
          if (v113)
          {
LABEL_177:
            if (v111)
            {
LABEL_178:
              v114 = *((_QWORD *)v97 + 1);
              v115 = (std::__shared_weak_count *)*((_QWORD *)v97 + 2);
              if (v115)
              {
                v116 = (unint64_t *)&v115->__shared_owners_;
                do
                  v117 = __ldxr(v116);
                while (__stxr(v117 + 1, v116));
                v118 = v114 + 8;
                do
                  v119 = __ldaxr(v116);
                while (__stlxr(v119 - 1, v116));
                if (!v119)
                {
                  ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
                  std::__shared_weak_count::__release_weak(v115);
                }
              }
              else
              {
                v118 = v114 + 8;
              }
              goto LABEL_188;
            }
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
            std::__shared_weak_count::__release_weak(v108);
            if (v111)
              goto LABEL_178;
          }
          v118 = 8;
LABEL_188:
          v120 = *(std::mutex **)(v139 + 8);
          std::mutex::lock(v120);
          v121 = *(_QWORD *)(v139 + 8);
          if (!*(_BYTE *)(v121 + 296))
          {
            sub_2240121A8(v121 + 64, v118);
            *(_BYTE *)(v121 + 296) = 1;
          }
          std::mutex::unlock(v120);
          goto LABEL_145;
        }
LABEL_161:
        v100 = v153 == 1;
      }
      break;
    }
    if (v101 < 0)
      goto LABEL_166;
    goto LABEL_163;
  }
LABEL_190:
  if (*(_BYTE *)(v139 + 56))
  {
    v122 = *(_QWORD *)(v139 + 48);
    if (!v122)
      sub_223198474();
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v122 + 48))(v122, &v141);
  }
  if (v143)
  {
    v123 = (char *)v141;
    if (v141)
    {
      v124 = (char *)v142;
      v125 = v141;
      if ((void *)v142 != v141)
      {
        do
        {
          v126 = (std::__shared_weak_count *)*((_QWORD *)v124 - 1);
          if (v126)
          {
            v127 = (unint64_t *)&v126->__shared_owners_;
            do
              v128 = __ldaxr(v127);
            while (__stlxr(v128 - 1, v127));
            if (!v128)
            {
              ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
              std::__shared_weak_count::__release_weak(v126);
            }
          }
          v124 -= 24;
        }
        while (v124 != v123);
        v125 = v141;
      }
      *(_QWORD *)&v142 = v123;
      operator delete(v125);
    }
  }
LABEL_205:
  if (v151)
  {
    v129 = (char *)v149[1];
    if (v149[1])
    {
      v130 = (char *)v150;
      v131 = v149[1];
      if ((void *)v150 != v149[1])
      {
        do
        {
          v132 = (std::__shared_weak_count *)*((_QWORD *)v130 - 1);
          if (v132)
          {
            v133 = (unint64_t *)&v132->__shared_owners_;
            do
              v134 = __ldaxr(v133);
            while (__stlxr(v134 - 1, v133));
            if (!v134)
            {
              ((void (*)(std::__shared_weak_count *, unint64_t))v132->__on_zero_shared)(v132, v15);
              std::__shared_weak_count::__release_weak(v132);
            }
          }
          v130 -= 16;
        }
        while (v130 != v129);
        v131 = v149[1];
      }
      *(_QWORD *)&v150 = v129;
      operator delete(v131);
    }
    v135 = (char *)v148[0];
    if (v148[0])
    {
      v136 = (char *)v148[1];
      v137 = v148[0];
      if (v148[1] != v148[0])
      {
        do
        {
          v136 -= 88;
          sub_2241323E8((uint64_t)v136);
        }
        while (v136 != v135);
        v137 = v148[0];
      }
      v148[1] = v135;
      operator delete(v137);
    }
  }
}

void sub_224133F6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char *a20,char *a21,uint64_t a22,char *__p,char *a24,uint64_t a25,char a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,void *a42,uint64_t a43)
{
  void *v43;
  char *v45;
  char *v46;
  std::__shared_weak_count *v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  char *v50;
  char *v51;

  __cxa_free_exception(v43);
  if (a26)
  {
    if (__p)
    {
      v45 = a24;
      v46 = __p;
      if (a24 != __p)
      {
        do
        {
          v47 = (std::__shared_weak_count *)*((_QWORD *)v45 - 1);
          if (v47)
          {
            p_shared_owners = (unint64_t *)&v47->__shared_owners_;
            do
              v49 = __ldaxr(p_shared_owners);
            while (__stlxr(v49 - 1, p_shared_owners));
            if (!v49)
            {
              ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
              std::__shared_weak_count::__release_weak(v47);
            }
          }
          v45 -= 16;
        }
        while (v45 != __p);
        v46 = __p;
      }
      operator delete(v46);
    }
    if (a20)
    {
      v50 = a21;
      v51 = a20;
      if (a21 != a20)
      {
        do
        {
          v50 -= 88;
          sub_2241323E8((uint64_t)v50);
        }
        while (v50 != a20);
        v51 = a20;
      }
      operator delete(v51);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_224134464(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3kit3viz13NetworkClient4Impl28ProcessReceivedServerMessageE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3kit3viz13NetworkClient4Impl28ProcessReceivedServerMessageE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3kit3viz13NetworkClient4Impl28ProcessReceivedServerMessageE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit3viz13NetworkClient4Impl28ProcessReceivedServerMessageE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2241344D0()
{
  return &unk_24EC6B078;
}

uint64_t sub_2241344DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_BYTE *)(a1 + 16) = 0;
  v6 = a1 + 16;
  *(_BYTE *)(a1 + 48) = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    v7 = *(_QWORD *)(a2 + 40);
    if (v7)
    {
      if (v7 == a2 + 16)
      {
        *(_QWORD *)(a1 + 40) = v6;
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 40) + 24))(*(_QWORD *)(a2 + 40), a1 + 16);
        goto LABEL_10;
      }
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    }
    *(_QWORD *)(a1 + 40) = v7;
LABEL_10:
    *(_BYTE *)(a1 + 48) = 1;
  }
  return a1;
}

void sub_224134580(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (*(_BYTE *)(v1 + 48))
  {
    v4 = *(_QWORD **)(v1 + 40);
    if (v4 == v2)
    {
      v5 = 4;
    }
    else
    {
      if (!v4)
        goto LABEL_7;
      v5 = 5;
      v2 = *(_QWORD **)(v1 + 40);
    }
    (*(void (**)(_QWORD *))(*v2 + 8 * v5))(v2);
  }
LABEL_7:
  v6 = *(std::__shared_weak_count **)(v1 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_2241345FC(void **a1, unint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  _BYTE *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char v34;

  v4 = a1[2];
  v5 = a1[1];
  if (0x2E8BA2E8BA2E8BA3 * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      v11 = 0;
      v12 = &v5[88 * a2];
      v13 = 88 * a2;
      do
      {
        v14 = sub_2240181B4(0);
        v15 = &v5[v11];
        *((_DWORD *)v15 + 14) = 0;
        *(_OWORD *)(v15 + 40) = 0u;
        *(_OWORD *)(v15 + 24) = 0u;
        *(_OWORD *)(v15 + 8) = 0u;
        sub_223BF6664(&v5[v11 + 64], (uint64_t)v14);
        v11 += 88;
      }
      while (v13 != v11);
    }
    else
    {
      v12 = (char *)a1[1];
    }
    a1[1] = v12;
  }
  else
  {
    v6 = 0x2E8BA2E8BA2E8BA3 * ((v5 - (_BYTE *)*a1) >> 3);
    v7 = v6 + a2;
    if (v6 + a2 > 0x2E8BA2E8BA2E8BALL)
      sub_22316E078();
    v8 = 0x2E8BA2E8BA2E8BA3 * ((v4 - (_BYTE *)*a1) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x1745D1745D1745DLL)
      v9 = 0x2E8BA2E8BA2E8BALL;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0x2E8BA2E8BA2E8BALL)
        sub_223174E94();
      v10 = (char *)operator new(88 * v9);
    }
    else
    {
      v10 = 0;
    }
    v16 = 0;
    v17 = &v10[88 * v6];
    v31 = v17;
    v33 = &v10[88 * v9];
    v18 = 88 * a2;
    v19 = &v17[v18];
    do
    {
      v20 = sub_2240181B4(0);
      v21 = &v17[v16];
      *((_DWORD *)v21 + 14) = 0;
      *(_OWORD *)(v21 + 40) = 0u;
      *(_OWORD *)(v21 + 24) = 0u;
      *(_OWORD *)(v21 + 8) = 0u;
      sub_223BF6664(&v17[v16 + 64], (uint64_t)v20);
      v16 += 88;
    }
    while (v18 != v16);
    v32 = &v17[v18];
    v23 = (char *)*a1;
    v22 = (char *)a1[1];
    v24 = v17;
    if (v22 == *a1)
    {
      v30 = (char *)a1[1];
    }
    else
    {
      v25 = 0;
      do
      {
        v26 = &v31[v25];
        v27 = &v22[v25];
        v28 = *(_OWORD *)&v22[v25 - 80];
        *((_QWORD *)v26 - 8) = *(_QWORD *)&v22[v25 - 64];
        *((_OWORD *)v26 - 5) = v28;
        *((_QWORD *)v27 - 9) = 0;
        *((_QWORD *)v27 - 8) = 0;
        *((_QWORD *)v27 - 10) = 0;
        *((_DWORD *)v26 - 14) = *(_DWORD *)&v22[v25 - 56];
        v31[v25 - 48] = 0;
        *((_DWORD *)v26 - 8) = -1;
        v29 = *(unsigned int *)&v22[v25 - 32];
        if ((_DWORD)v29 != -1)
        {
          ((void (*)(char *, char *, char *))off_24EC6AA30[v29])(&v34, &v31[v25 - 48], v27 - 48);
          *((_DWORD *)v26 - 8) = v29;
        }
        *((_QWORD *)v26 - 3) = 0;
        *((_QWORD *)v26 - 2) = 0;
        *((_QWORD *)v26 - 1) = 0;
        *(_OWORD *)(v26 - 24) = *(_OWORD *)(v27 - 24);
        *((_QWORD *)v26 - 1) = *((_QWORD *)v27 - 1);
        *((_QWORD *)v27 - 3) = 0;
        *((_QWORD *)v27 - 2) = 0;
        *((_QWORD *)v27 - 1) = 0;
        v25 -= 88;
      }
      while (&v22[v25] != v23);
      v30 = (char *)*a1;
      v22 = (char *)a1[1];
      v24 = &v31[v25];
      v19 = v32;
    }
    *a1 = v24;
    a1[1] = v19;
    a1[2] = v33;
    if (v22 != v30)
    {
      do
      {
        sub_2241323E8((uint64_t)(v22 - 88));
        v22 -= 88;
      }
      while (v22 != v30);
      v22 = v30;
    }
    if (v22)
      operator delete(v22);
  }
}

void sub_2241348D4(_Unwind_Exception *exception_object, ...)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  va_list va;

  va_start(va, exception_object);
  v6 = *(unsigned int *)(v4 + 56);
  if ((_DWORD)v6 != -1)
    ((void (*)(uint64_t *, uint64_t))off_24EC669A8[v6])((uint64_t *)va, v2 + v3 + 40);
  *(_DWORD *)(v4 + 56) = -1;
  if (*(char *)(v4 + 31) < 0)
  {
    operator delete(*(void **)(v4 + 8));
    *(_QWORD *)(v1 + 8) = v2 + v3;
    _Unwind_Resume(exception_object);
  }
  *(_QWORD *)(v1 + 8) = v2 + v3;
  _Unwind_Resume(exception_object);
}

void sub_224134940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v21 = *(unsigned int *)(v19 + 56);
  if ((_DWORD)v21 != -1)
    ((void (*)(char *, uint64_t))off_24EC669A8[v21])(&a17, v18 + v17 + 40);
  *(_DWORD *)(v19 + 56) = -1;
  if (*(char *)(v19 + 31) < 0)
  {
    operator delete(*(void **)(v19 + 8));
    a11 = v18 + v17;
    sub_224132398((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  a11 = v18 + v17;
  sub_224132398((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2241349BC(uint64_t *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  char v16;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 16);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      v7 = *a3;
      v6 = a3[1];
      if (v6)
      {
        v8 = (unint64_t *)(v6 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      v10 = (std::__shared_weak_count *)a2[1];
      *a2 = v7;
      a2[1] = v6;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      return;
    }
    ((void (*)(char *, uint64_t))off_24EC6AA20[v5])(&v16, v4);
  }
  *(_DWORD *)(v4 + 16) = -1;
  v13 = a3[1];
  *(_QWORD *)v4 = *a3;
  *(_QWORD *)(v4 + 8) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_DWORD *)(v4 + 16) = 0;
}

void sub_224134AB0(uint64_t *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  char v16;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v7 = *a3;
      v6 = a3[1];
      if (v6)
      {
        v8 = (unint64_t *)(v6 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      v10 = (std::__shared_weak_count *)a2[1];
      *a2 = v7;
      a2[1] = v6;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      return;
    }
    ((void (*)(char *, uint64_t))off_24EC6AA20[v5])(&v16, v4);
  }
  *(_DWORD *)(v4 + 16) = -1;
  v13 = a3[1];
  *(_QWORD *)v4 = *a3;
  *(_QWORD *)(v4 + 8) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_DWORD *)(v4 + 16) = 1;
}

uint64_t sub_224134BAC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 32);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_224134BFC(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x227684CE8);
}

uint64_t sub_224134C5C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  *v4 = &off_24EC6B098;
  v5 = v4 + 1;
  result = *(_QWORD *)(a1 + 32);
  if (!result)
    goto LABEL_4;
  if (result != a1 + 8)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 16))(result, v5);
LABEL_4:
    v4[4] = result;
    *a2 = v4;
    return result;
  }
  v4[4] = v5;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  *a2 = v4;
  return result;
}

void sub_224134CFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10A1C400AA0B987);
  _Unwind_Resume(a1);
}

void sub_224134D20()
{
  sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 274, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_22457406C);
  abort();
}

void sub_224134D5C()
{
  sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 280, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_22457406C);
  abort();
}

uint64_t sub_224134D98()
{
  return 1;
}

uint64_t sub_224134DA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 301, (uint64_t)"processor_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = *(_QWORD *)(a1 + 32);
    if (!v4)
      sub_223198474();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, a2);
}

void sub_224134E20()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_224134E34(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC6B100;
  result[1] = v3;
  return result;
}

uint64_t sub_224134E68(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC6B100;
  a2[1] = v2;
  return result;
}

void sub_224134E84(uint64_t a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  v1 = *(_QWORD *)(a1 + 8);
  std::mutex::lock((std::mutex *)(v1 + 184));
  v2 = (unsigned int *)(v1 + 128);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 - 1, v2));
  std::condition_variable::notify_one((std::condition_variable *)(v1 + 136));
  std::mutex::unlock((std::mutex *)(v1 + 184));
}

uint64_t sub_224134ECC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit3viz13NetworkClient4Impl22BuildNetworkOutputNodeEvE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit3viz13NetworkClient4Impl22BuildNetworkOutputNodeEvE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit3viz13NetworkClient4Impl22BuildNetworkOutputNodeEvE3$_1"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit3viz13NetworkClient4Impl22BuildNetworkOutputNodeEvE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_224134F38()
{
  return &unk_24EC6B170;
}

void sub_224134F44(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6B190;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_224134F54(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6B190;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_224134F84(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 72) + 72);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2);
  std::mutex::~mutex((std::mutex *)(a1 + 208));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 160));
  v3 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*(_BYTE *)(a1 + 104))
  {
    v5 = *(_QWORD **)(a1 + 96);
    if (v5 == (_QWORD *)(a1 + 72))
    {
      v6 = 4;
      v5 = (_QWORD *)(a1 + 72);
      goto LABEL_10;
    }
    if (v5)
    {
      v6 = 5;
LABEL_10:
      (*(void (**)(void))(*v5 + 8 * v6))();
    }
  }
  v7 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v7)
    goto LABEL_15;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    v10 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v10)
      return;
  }
  else
  {
LABEL_15:
    v10 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v10)
      return;
  }
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
}

uint64_t sub_2241350BC(uint64_t a1, int *a2, uint64_t a3, uint64_t *a4, __int128 *a5, __int128 *a6, uint64_t a7)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  _QWORD *v31;
  uint64_t (***v32)();
  uint64_t v33;
  uint64_t v34;
  __int128 *v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t (***v44)();
  uint64_t v45;
  void **v46;
  uint64_t v47;
  uint64_t v48;
  __int128 *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t **v55;
  std::__shared_weak_count *v56;
  unint64_t *p_shared_owners;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  std::__shared_weak_count *v68;
  unint64_t v69;
  unint64_t *p_shared_weak_owners;
  unint64_t v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  _QWORD *v78;
  char *v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  void *v83;
  void *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t **v107;
  uint64_t *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  __int128 *v118;
  std::__shared_weak_count *v119;
  unint64_t v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t *v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  uint64_t **v141;
  uint64_t v142;
  uint64_t **v143;
  _QWORD v144[3];
  _QWORD *v145;
  char v146;
  __int128 v147;
  std::__shared_weak_count *v148;
  void *__p[5];
  char v150;
  char v151;
  __int128 v152;
  uint64_t (**v153)();
  __int128 *v154;
  std::__shared_weak_count *v155;
  uint64_t (**v156)();
  _OWORD v157[3];
  __int128 v158;
  __int128 v159;
  uint64_t (**v160)();
  void *v161[2];
  uint64_t v162;
  uint64_t (**v163)();
  void *v164[2];
  uint64_t (**v165)();
  __int128 v166;
  char v167;
  void *v168;
  char v169;
  char v170;
  _BYTE v171[20];
  int v172;
  __int128 v173;
  _QWORD v174[3];
  _QWORD *v175;
  char v176;
  _QWORD v177[2];
  _QWORD v178[5];

  v178[2] = *MEMORY[0x24BDAC8D0];
  v9 = *a2;
  v11 = *a4;
  v10 = a4[1];
  v140 = *((_QWORD *)a5 + 2);
  v138 = *a6;
  v139 = *a5;
  LOBYTE(v144[0]) = 0;
  v146 = 0;
  v12 = *(unsigned __int8 *)(a7 + 32);
  if (*(_BYTE *)(a7 + 32))
  {
    v13 = *(_QWORD *)(a7 + 24);
    if (v13)
    {
      if (v13 == a7)
      {
        v145 = v144;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a7 + 24))(a7, v144);
        goto LABEL_8;
      }
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
    }
    v145 = (_QWORD *)v13;
LABEL_8:
    v146 = 1;
  }
  v14 = (char *)operator new(0x148uLL);
  *((_QWORD *)v14 + 1) = 0;
  v15 = (unint64_t *)(v14 + 8);
  *(_QWORD *)v14 = &off_24EC6AFB8;
  *(_OWORD *)(v14 + 88) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 120) = 0u;
  *(_OWORD *)(v14 + 136) = 0u;
  *(_OWORD *)(v14 + 152) = 0u;
  *(_OWORD *)(v14 + 168) = 0u;
  *(_OWORD *)(v14 + 184) = 0u;
  *(_OWORD *)(v14 + 200) = 0u;
  *(_OWORD *)(v14 + 216) = 0u;
  *(_OWORD *)(v14 + 232) = 0u;
  *(_OWORD *)(v14 + 248) = 0u;
  *(_OWORD *)(v14 + 264) = 0u;
  *(_OWORD *)(v14 + 280) = 0u;
  *(_OWORD *)(v14 + 296) = 0u;
  *(_OWORD *)(v14 + 312) = 0u;
  *((_QWORD *)v14 + 2) = 0;
  *((_QWORD *)v14 + 3) = 850045863;
  *(_OWORD *)(v14 + 73) = 0u;
  *((_OWORD *)v14 + 3) = 0u;
  *((_OWORD *)v14 + 4) = 0u;
  *((_OWORD *)v14 + 2) = 0u;
  *(_QWORD *)a1 = v14 + 24;
  *(_QWORD *)(a1 + 8) = v14;
  *(_OWORD *)(a1 + 16) = v138;
  *(_QWORD *)(a1 + 32) = v14 + 24;
  *(_QWORD *)(a1 + 40) = v14;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  *(_BYTE *)(a1 + 48) = 0;
  v17 = a1 + 48;
  *(_BYTE *)(a1 + 80) = 0;
  if (v12)
  {
    if (v145)
    {
      if (v145 == v144)
      {
        *(_QWORD *)(a1 + 72) = v17;
        (*(void (**)(_QWORD *, uint64_t))(v144[0] + 24))(v144, a1 + 48);
      }
      else
      {
        *(_QWORD *)(a1 + 72) = v145;
        v145 = 0;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 72) = 0;
    }
    v18 = 1;
    *(_BYTE *)(a1 + 80) = 1;
  }
  else
  {
    v18 = 0;
  }
  *(_QWORD *)(a1 + 184) = 850045863;
  *(_OWORD *)(a1 + 88) = v139;
  *(_QWORD *)(a1 + 104) = v140;
  *(_QWORD *)(a1 + 112) = 0;
  v137 = (uint64_t *)(a1 + 112);
  *(_QWORD *)(a1 + 136) = 1018212795;
  *(_QWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_QWORD *)(a1 + 240) = 0;
  if (v9)
  {
    v19 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)&v173 = *(_QWORD *)(a1 + 32);
    *((_QWORD *)&v173 + 1) = v19;
    if (v19)
    {
      v20 = (unint64_t *)(v19 + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      v18 = *(unsigned __int8 *)(a1 + 80);
    }
    v22 = v174;
    LOBYTE(v174[0]) = 0;
    v176 = 0;
    if (!v18)
    {
LABEL_40:
      v154 = 0;
      v29 = (char *)operator new(0x40uLL);
      v30 = v29;
      *(_QWORD *)v29 = &off_24EC6B008;
      *(_OWORD *)(v29 + 8) = v173;
      v173 = 0uLL;
      v29[24] = 0;
      v29[56] = 0;
      if (v18)
      {
        if (v175)
        {
          if (v175 == v174)
          {
            *((_QWORD *)v29 + 6) = v29 + 24;
            (*(void (**)(_QWORD *))(v174[0] + 24))(v174);
          }
          else
          {
            *((_QWORD *)v29 + 6) = v175;
            v175 = 0;
          }
        }
        else
        {
          *((_QWORD *)v29 + 6) = 0;
        }
        v30[56] = 1;
      }
      v154 = (__int128 *)v30;
      v31 = (_QWORD *)operator new();
      if (v154)
      {
        if (v154 == &v152)
        {
          *(_QWORD *)&v157[1] = &v156;
          (*(void (**)(__int128 *, uint64_t (***)()))(v152 + 24))(&v152, &v156);
        }
        else
        {
          *(_QWORD *)&v157[1] = v154;
          v154 = 0;
        }
      }
      else
      {
        *(_QWORD *)&v157[1] = 0;
      }
      LOBYTE(__p[0]) = 0;
      LOBYTE(__p[3]) = 0;
      *(_QWORD *)v171 = v11;
      *(_QWORD *)&v171[8] = v10;
      *v31 = off_24EC771B0;
      sub_2244E8CE4(a3, &v156, (uint64_t)__p, v31 + 1);
      if (LOBYTE(__p[3]) && SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
      v32 = *(uint64_t (****)())&v157[1];
      if (*(uint64_t (****)())&v157[1] == &v156)
      {
        v33 = 4;
        v32 = &v156;
      }
      else
      {
        if (!*(_QWORD *)&v157[1])
          goto LABEL_60;
        v33 = 5;
      }
      (*v32)[v33]();
LABEL_60:
      v34 = *v137;
      *v137 = (uint64_t)v31;
      if (v34)
        (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
      v35 = v154;
      if (v154 == &v152)
      {
        v36 = 4;
        v35 = &v152;
      }
      else
      {
        if (!v154)
          goto LABEL_67;
        v36 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v35 + 8 * v36))();
LABEL_67:
      if (v176)
      {
        if (v175 == v174)
        {
          v37 = 4;
          goto LABEL_72;
        }
        if (v175)
        {
          v37 = 5;
          v22 = v175;
LABEL_72:
          (*(void (**)(_QWORD *))(*v22 + 8 * v37))(v22);
        }
      }
      v38 = (std::__shared_weak_count *)*((_QWORD *)&v173 + 1);
      if (!*((_QWORD *)&v173 + 1))
        goto LABEL_124;
      v39 = (unint64_t *)(*((_QWORD *)&v173 + 1) + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      goto LABEL_122;
    }
    v23 = *(_QWORD *)(a1 + 72);
    if (v23)
    {
      if (v23 == v17)
      {
        v175 = v174;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v17 + 24))(a1 + 48, v174);
        goto LABEL_39;
      }
      v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
    }
    v175 = (_QWORD *)v23;
LABEL_39:
    v176 = 1;
    goto LABEL_40;
  }
  v24 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)&v173 = *(_QWORD *)(a1 + 32);
  *((_QWORD *)&v173 + 1) = v24;
  if (v24)
  {
    v25 = (unint64_t *)(v24 + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
    v18 = *(unsigned __int8 *)(a1 + 80);
  }
  v27 = v174;
  LOBYTE(v174[0]) = 0;
  v176 = 0;
  if (v18)
  {
    v28 = *(_QWORD *)(a1 + 72);
    if (v28)
    {
      if (v28 == v17)
      {
        v175 = v174;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v17 + 24))(a1 + 48, v174);
        goto LABEL_78;
      }
      v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
    }
    v175 = (_QWORD *)v28;
LABEL_78:
    v176 = 1;
  }
  v154 = 0;
  v41 = (char *)operator new(0x40uLL);
  v42 = v41;
  *(_QWORD *)v41 = &off_24EC6B008;
  *(_OWORD *)(v41 + 8) = v173;
  v173 = 0uLL;
  v41[24] = 0;
  v41[56] = 0;
  if (v18)
  {
    if (v175)
    {
      if (v175 == v174)
      {
        *((_QWORD *)v41 + 6) = v41 + 24;
        (*(void (**)(_QWORD *))(v174[0] + 24))(v174);
      }
      else
      {
        *((_QWORD *)v41 + 6) = v175;
        v175 = 0;
      }
    }
    else
    {
      *((_QWORD *)v41 + 6) = 0;
    }
    v42[56] = 1;
  }
  v154 = (__int128 *)v42;
  v43 = operator new();
  if (v154)
  {
    if (v154 == &v152)
    {
      __p[3] = __p;
      (*(void (**)(__int128 *, void **))(v152 + 24))(&v152, __p);
    }
    else
    {
      __p[3] = v154;
      v154 = 0;
    }
  }
  else
  {
    __p[3] = 0;
  }
  *(_QWORD *)v43 = &off_24EC77170;
  if (__p[3])
  {
    if (__p[3] == __p)
    {
      *(_QWORD *)&v157[1] = &v156;
      (*((void (**)(void **, uint64_t (***)()))__p[0] + 3))(__p, &v156);
    }
    else
    {
      *(void **)&v157[1] = __p[3];
      __p[3] = 0;
    }
  }
  else
  {
    *(_QWORD *)&v157[1] = 0;
  }
  sub_2244E53C8(a3, v11, v10, &v156, (uint64_t **)(v43 + 8));
  v44 = *(uint64_t (****)())&v157[1];
  if (*(uint64_t (****)())&v157[1] == &v156)
  {
    v45 = 4;
    v44 = &v156;
  }
  else
  {
    if (!*(_QWORD *)&v157[1])
      goto LABEL_101;
    v45 = 5;
  }
  (*v44)[v45]();
LABEL_101:
  v46 = (void **)__p[3];
  if (__p[3] == __p)
  {
    v47 = 4;
    v46 = __p;
  }
  else
  {
    if (!__p[3])
      goto LABEL_106;
    v47 = 5;
  }
  (*((void (**)(void))*v46 + v47))();
LABEL_106:
  v48 = *v137;
  *v137 = v43;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  v49 = v154;
  if (v154 == &v152)
  {
    v50 = 4;
    v49 = &v152;
  }
  else
  {
    if (!v154)
      goto LABEL_113;
    v50 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v49 + 8 * v50))();
LABEL_113:
  if (v176)
  {
    if (v175 == v174)
    {
      v51 = 4;
      goto LABEL_118;
    }
    if (v175)
    {
      v51 = 5;
      v27 = v175;
LABEL_118:
      (*(void (**)(_QWORD *))(*v27 + 8 * v51))(v27);
    }
  }
  v38 = (std::__shared_weak_count *)*((_QWORD *)&v173 + 1);
  if (!*((_QWORD *)&v173 + 1))
    goto LABEL_124;
  v52 = (unint64_t *)(*((_QWORD *)&v173 + 1) + 8);
  do
    v40 = __ldaxr(v52);
  while (__stlxr(v40 - 1, v52));
LABEL_122:
  if (!v40)
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
LABEL_124:
  v53 = operator new();
  v156 = 0;
  v157[0] = 0uLL;
  *(_QWORD *)(v53 + 16) = 0;
  *(_QWORD *)(v53 + 8) = v53 + 16;
  *(_DWORD *)v53 = 1;
  *(_QWORD *)(v53 + 24) = 0;
  *(_QWORD *)(v53 + 32) = 0;
  *(_QWORD *)(v53 + 40) = 0;
  sub_224502BC4(v53, (uint64_t *)&v156);
  v142 = v53;
  sub_224502FB8(v53, "NetworkOutputNode_WorkQueue", 3, &v141);
  v54 = operator new();
  v55 = v141;
  v141 = 0;
  v143 = v55;
  __p[0] = v55;
  if (v55)
  {
    v56 = (std::__shared_weak_count *)operator new();
    v56->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC2E800;
    v56->__shared_owners_ = 0;
    v56->__shared_weak_owners_ = 0;
    v56[1].__vftable = (std::__shared_weak_count_vtbl *)v55;
  }
  else
  {
    v56 = 0;
  }
  v143 = 0;
  *(_QWORD *)v54 = &off_24EC6A7A8;
  strcpy((char *)(v54 + 8), "NetworkOutputNodeAsync");
  *(_BYTE *)(v54 + 31) = 22;
  *(_QWORD *)(v54 + 32) = 0;
  *(_QWORD *)(v54 + 40) = 0;
  *(_QWORD *)(v54 + 48) = 0;
  *(_QWORD *)(v54 + 56) = v55;
  *(_QWORD *)(v54 + 64) = v56;
  __p[0] = 0;
  __p[1] = 0;
  if (v56)
  {
    p_shared_owners = (unint64_t *)&v56->__shared_owners_;
    do
      v58 = __ldxr(p_shared_owners);
    while (__stxr(v58 + 1, p_shared_owners));
    do
      v59 = __ldxr(p_shared_owners);
    while (__stxr(v59 + 1, p_shared_owners));
  }
  *(_QWORD *)&v147 = v177[0];
  v60 = v177[0];
  *(_QWORD *)((char *)&v147 + 7) = *(_QWORD *)((char *)v177 + 7);
  *(_QWORD *)((char *)v178 + 7) = *(_QWORD *)((char *)v177 + 7);
  HIBYTE(v178[0]) = HIBYTE(v177[0]);
  v177[0] = 0;
  *(_QWORD *)((char *)v177 + 7) = 0;
  *(_QWORD *)v171 = v60;
  *(_QWORD *)&v171[7] = *(_QWORD *)((char *)v178 + 7);
  *(_QWORD *)((char *)v178 + 7) = 0;
  v178[0] = 0;
  if (v56)
  {
    v61 = (unint64_t *)&v56->__shared_owners_;
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 1, v61));
  }
  v63 = operator new();
  *(_QWORD *)&v152 = *(_QWORD *)v171;
  *(_QWORD *)((char *)&v152 + 7) = *(_QWORD *)&v171[7];
  *(_QWORD *)v171 = 0;
  *(_QWORD *)&v171[7] = 0;
  *(_BYTE *)(v63 + 8) = 1;
  *(_QWORD *)(v63 + 32) = 0;
  *(_QWORD *)(v63 + 40) = 0;
  *(_QWORD *)v63 = &off_24EC6A840;
  *(_QWORD *)(v63 + 16) = &unk_24EC6A8B8;
  *(_QWORD *)(v63 + 24) = &unk_24EC6A8F8;
  *(_QWORD *)(v63 + 63) = *(_QWORD *)((char *)&v152 + 7);
  v64 = v152;
  *(_QWORD *)(v63 + 48) = 0x6C656E6E616863;
  *(_QWORD *)(v63 + 56) = v64;
  *(_BYTE *)(v63 + 71) = 7;
  *(_QWORD *)&v152 = 0;
  *(_QWORD *)((char *)&v152 + 7) = 0;
  *(_QWORD *)(v63 + 72) = v55;
  *(_QWORD *)(v63 + 80) = v56;
  v65 = (_QWORD *)operator new();
  *v65 = &off_24EC6A9E0;
  v65[1] = a1;
  *(_QWORD *)(v63 + 136) = 0;
  *(_QWORD *)(v63 + 88) = v65;
  *(_QWORD *)(v63 + 96) = v63 + 96;
  *(_QWORD *)(v63 + 104) = v63 + 96;
  *(_QWORD *)(v63 + 112) = 0;
  *(_QWORD *)(v63 + 120) = v63 + 120;
  *(_QWORD *)(v63 + 128) = v63 + 120;
  *(_QWORD *)(v63 + 144) = 0;
  if (!*(_QWORD *)(v63 + 72)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v66 = (std::__shared_weak_count *)operator new();
  v66->__shared_owners_ = 0;
  v67 = (unint64_t *)&v66->__shared_owners_;
  v66->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6AEA0;
  v66->__shared_weak_owners_ = 0;
  v66[1].__vftable = (std::__shared_weak_count_vtbl *)v63;
  v68 = *(std::__shared_weak_count **)(v63 + 40);
  if (v68)
  {
    if (v68->__shared_owners_ != -1)
      goto LABEL_149;
    do
      v69 = __ldxr(v67);
    while (__stxr(v69 + 1, v67));
    p_shared_weak_owners = (unint64_t *)&v66->__shared_weak_owners_;
    do
      v71 = __ldxr(p_shared_weak_owners);
    while (__stxr(v71 + 1, p_shared_weak_owners));
    *(_QWORD *)(v63 + 32) = v63;
    *(_QWORD *)(v63 + 40) = v66;
    std::__shared_weak_count::__release_weak(v68);
  }
  else
  {
    do
      v72 = __ldxr(v67);
    while (__stxr(v72 + 1, v67));
    v73 = (unint64_t *)&v66->__shared_weak_owners_;
    do
      v74 = __ldxr(v73);
    while (__stxr(v74 + 1, v73));
    *(_QWORD *)(v63 + 32) = v63;
    *(_QWORD *)(v63 + 40) = v66;
  }
  do
    v75 = __ldaxr(v67);
  while (__stlxr(v75 - 1, v67));
  if (!v75)
  {
    ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
    std::__shared_weak_count::__release_weak(v66);
  }
LABEL_149:
  v156 = &off_24EC6A7D8;
  strcpy((char *)v157, "channel");
  *((_QWORD *)&v157[0] + 1) = v147;
  *(_QWORD *)((char *)v157 + 15) = *(_QWORD *)((char *)&v147 + 7);
  BYTE7(v157[1]) = 7;
  *(_QWORD *)&v147 = 0;
  *(_QWORD *)((char *)&v147 + 7) = 0;
  *((_QWORD *)&v157[1] + 1) = 0x7974706D45;
  *(_QWORD *)&v157[2] = v152;
  *(_QWORD *)((char *)&v157[2] + 7) = *(_QWORD *)((char *)&v152 + 7);
  HIBYTE(v157[2]) = 5;
  *(_QWORD *)&v152 = 0;
  *(_QWORD *)((char *)&v152 + 7) = 0;
  *(_QWORD *)&v158 = v55;
  *((_QWORD *)&v158 + 1) = v56;
  v76 = (unint64_t *)&v66->__shared_weak_owners_;
  *(_QWORD *)&v159 = v63;
  *((_QWORD *)&v159 + 1) = v66;
  do
    v77 = __ldxr(v76);
  while (__stxr(v77 + 1, v76));
  v160 = &off_24EC6A808;
  v78 = (_QWORD *)operator new();
  *v78 = &off_24EC6AEF0;
  v78[1] = v63;
  v78[2] = v66;
  v161[0] = v78;
  v80 = *((_QWORD *)&v159 + 1);
  v79 = (char *)v159;
  if (!*((_QWORD *)&v159 + 1))
  {
    v161[1] = (void *)v159;
    v162 = 0;
    if ((_QWORD)v159)
      v84 = (void *)(v159 + 16);
    else
      v84 = 0;
    goto LABEL_168;
  }
  v81 = (unint64_t *)(*((_QWORD *)&v159 + 1) + 16);
  do
    v82 = __ldxr(v81);
  while (__stxr(v82 + 1, v81));
  v83 = (void *)*((_QWORD *)&v159 + 1);
  v161[1] = v79;
  v162 = v80;
  if ((_QWORD)v159)
    v84 = (void *)(v159 + 16);
  else
    v84 = 0;
  if (!*((_QWORD *)&v159 + 1))
  {
    v79 = (char *)v159;
LABEL_168:
    v87 = 0;
    v163 = &off_24EC37DE0;
    v164[0] = v84;
    v164[1] = 0;
    goto LABEL_169;
  }
  v85 = (unint64_t *)(*((_QWORD *)&v159 + 1) + 16);
  do
    v86 = __ldxr(v85);
  while (__stxr(v86 + 1, v85));
  v87 = *((_QWORD *)&v159 + 1);
  v79 = (char *)v159;
  v163 = &off_24EC37DE0;
  v164[0] = v84;
  v164[1] = v83;
  if (*((_QWORD *)&v159 + 1))
  {
    v88 = (unint64_t *)(*((_QWORD *)&v159 + 1) + 16);
    do
      v89 = __ldxr(v88);
    while (__stxr(v89 + 1, v88));
  }
LABEL_169:
  if (v79)
    v90 = v79 + 24;
  else
    v90 = 0;
  v165 = &off_24EC2E850;
  *(_QWORD *)&v166 = v90;
  *((_QWORD *)&v166 + 1) = v87;
  v91 = operator new();
  *(_QWORD *)v91 = &off_24EC6A7D8;
  *(_OWORD *)(v91 + 8) = v157[0];
  *(_QWORD *)(v91 + 24) = *(_QWORD *)&v157[1];
  memset(v157, 0, 24);
  *(_OWORD *)(v91 + 32) = *(_OWORD *)((char *)&v157[1] + 8);
  *(_QWORD *)(v91 + 48) = *((_QWORD *)&v157[2] + 1);
  memset((char *)&v157[1] + 8, 0, 24);
  *(_OWORD *)(v91 + 56) = v158;
  v158 = 0uLL;
  *(_OWORD *)(v91 + 72) = v159;
  v159 = 0uLL;
  *(_QWORD *)(v91 + 88) = &off_24EC6A808;
  *(_OWORD *)(v91 + 96) = *(_OWORD *)v161;
  v92 = v162;
  v161[1] = 0;
  v162 = 0;
  *(_QWORD *)(v91 + 112) = v92;
  *(_QWORD *)(v91 + 120) = &off_24EC37DE0;
  *(_OWORD *)(v91 + 128) = *(_OWORD *)v164;
  v164[0] = 0;
  v164[1] = 0;
  v161[0] = 0;
  *(_QWORD *)(v91 + 144) = &off_24EC2E850;
  *(_OWORD *)(v91 + 152) = v166;
  v166 = 0uLL;
  *(_QWORD *)(v54 + 72) = v91;
  sub_224131924((uint64_t)&v156);
  if (!v56)
    goto LABEL_271;
  v93 = (unint64_t *)&v56->__shared_owners_;
  do
    v94 = __ldaxr(v93);
  while (__stlxr(v94 - 1, v93));
  if (!v94)
  {
    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
    std::__shared_weak_count::__release_weak(v56);
    if (*(_QWORD *)(v54 + 56))
      goto LABEL_180;
  }
  else
  {
LABEL_271:
    if (*(_QWORD *)(v54 + 56))
      goto LABEL_180;
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Node.h", 374, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
LABEL_180:
  v95 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v96 = (unint64_t *)((char *)__p[1] + 8);
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = (uint64_t)v143;
  if (v143)
  {
    v99 = *v143;
    *v143 = 0;
    if (v99)
      sub_22450297C(v98, v99);
    MEMORY[0x227684CE8](v98, 0x20C4093837F09);
  }
  v100 = *(_QWORD *)(v54 + 72);
  v101 = (_QWORD *)operator new();
  v101[1] = &off_24EC6B100;
  v102 = v101 + 1;
  *v101 = &off_24EC6B098;
  v101[2] = a1;
  v101[4] = v101 + 1;
  v156 = &off_24EC2DF48;
  v103 = (_QWORD *)operator new();
  *v103 = &off_24EC6B098;
  v104 = v103 + 1;
  v105 = v101[4];
  if (!v105)
    goto LABEL_192;
  if ((_QWORD *)v105 != v102)
  {
    v105 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v105 + 16))(v105, v104);
LABEL_192:
    v103[4] = v105;
    goto LABEL_194;
  }
  v103[4] = v104;
  (*(void (**)(_QWORD *))(*v102 + 24))(v102);
LABEL_194:
  *(_QWORD *)&v157[0] = v103;
  (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)(v100 + 120) + 16))(v100 + 120, &v156);
  v106 = *(_QWORD *)&v157[0];
  v156 = &off_24EC2DF48;
  *(_QWORD *)&v157[0] = 0;
  if (v106)
    (*(void (**)(uint64_t))(*(_QWORD *)v106 + 8))(v106);
  (*(void (**)(_QWORD *))(*v101 + 8))(v101);
  v107 = v141;
  if (v141)
  {
    v108 = *v141;
    *v141 = 0;
    if (v108)
      sub_22450297C((uint64_t)v107, v108);
    MEMORY[0x227684CE8](v107, 0x20C4093837F09);
  }
  v109 = v142;
  v142 = 0;
  if (v109)
  {
    v110 = *(std::__shared_weak_count **)(v109 + 40);
    if (v110)
    {
      v111 = (unint64_t *)&v110->__shared_owners_;
      do
        v112 = __ldaxr(v111);
      while (__stlxr(v112 - 1, v111));
      if (!v112)
      {
        ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
        std::__shared_weak_count::__release_weak(v110);
      }
    }
    sub_22323DFE4(v109 + 8, *(_QWORD *)(v109 + 16));
    MEMORY[0x227684CE8](v109, 0x1020C401722722ELL);
  }
  v113 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v54;
  if (v113)
    (*(void (**)(uint64_t))(*(_QWORD *)v113 + 8))(v113);
  *(_QWORD *)v171 = 0x500000001;
  v156 = (uint64_t (**)())1;
  LODWORD(v157[0]) = 0;
  __p[0] = (void *)0x200000001;
  *(_DWORD *)&v171[8] = 0;
  v172 = 0;
  *(_QWORD *)&v171[12] = 0x200000001;
  if (*(_BYTE *)(a1 + 24))
  {
    v114 = *(_QWORD *)(a1 + 16);
    v115 = 1;
  }
  else
  {
    v114 = 0;
    v115 = 0;
  }
  sub_22411F9D8(v114, v115, (__n128 *)v171, (uint64_t)&v156);
  __p[0] = 0;
  __p[1] = (void *)v178[0];
  *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v178 + 7);
  v178[0] = 0;
  *(_QWORD *)((char *)v178 + 7) = 0;
  *(_WORD *)((char *)&__p[2] + 7) = 0;
  v151 = 0;
  sub_22412B038(&v147, (uint64_t)&v156);
  v116 = (std::__shared_weak_count *)operator new(0x50uLL);
  v116->__shared_owners_ = 0;
  v117 = (unint64_t *)&v116->__shared_owners_;
  v116->__shared_weak_owners_ = 0;
  v116->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC665F8;
  v116[1].std::__shared_count = *(std::__shared_count *)__p;
  v116[1].__shared_weak_owners_ = (uint64_t)__p[2];
  memset(__p, 0, 24);
  LOBYTE(v116[2].__vftable) = 0;
  LOBYTE(v116[3].__vftable) = 0;
  v118 = (__int128 *)*((_QWORD *)&v147 + 1);
  v119 = v148;
  *((_QWORD *)&v147 + 1) = 0;
  v148 = 0;
  *(_QWORD *)&v152 = v116 + 1;
  *((_QWORD *)&v152 + 1) = v116;
  do
    v120 = __ldxr(v117);
  while (__stxr(v120 + 1, v117));
  v153 = &off_24EC6A3B8;
  v154 = v118;
  v155 = v119;
  if (v119)
  {
    v121 = (unint64_t *)&v119->__shared_owners_;
    do
      v122 = __ldxr(v121);
    while (__stxr(v122 + 1, v121));
    do
      v123 = __ldaxr(v121);
    while (__stlxr(v123 - 1, v121));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  do
    v124 = __ldaxr(v117);
  while (__stlxr(v124 - 1, v117));
  if (!v124)
  {
    ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
    std::__shared_weak_count::__release_weak(v116);
  }
  sub_224129C90(a1, (uint64_t)&v152);
  v125 = v155;
  if (v155)
  {
    v126 = (unint64_t *)&v155->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  v128 = (std::__shared_weak_count *)*((_QWORD *)&v152 + 1);
  if (*((_QWORD *)&v152 + 1))
  {
    v129 = (unint64_t *)(*((_QWORD *)&v152 + 1) + 8);
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v131 = v148;
  if (v148)
  {
    v132 = (unint64_t *)&v148->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  if (v151 && v150 < 0)
    operator delete(__p[3]);
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    if (!v170)
      goto LABEL_251;
LABEL_245:
    if (v169 < 0)
    {
      operator delete(v168);
      if ((v167 & 0x80000000) == 0)
      {
LABEL_247:
        if ((SHIBYTE(v165) & 0x80000000) == 0)
          goto LABEL_248;
        goto LABEL_260;
      }
    }
    else if ((v167 & 0x80000000) == 0)
    {
      goto LABEL_247;
    }
    operator delete((void *)v166);
    if ((SHIBYTE(v165) & 0x80000000) == 0)
    {
LABEL_248:
      if ((SHIBYTE(v163) & 0x80000000) == 0)
        goto LABEL_249;
      goto LABEL_261;
    }
LABEL_260:
    operator delete(v164[0]);
    if ((SHIBYTE(v163) & 0x80000000) == 0)
    {
LABEL_249:
      if ((SHIBYTE(v161[0]) & 0x80000000) == 0)
        goto LABEL_250;
      goto LABEL_262;
    }
LABEL_261:
    operator delete(v161[1]);
    if ((SHIBYTE(v161[0]) & 0x80000000) == 0)
    {
LABEL_250:
      if ((SBYTE7(v159) & 0x80000000) == 0)
        goto LABEL_251;
      goto LABEL_263;
    }
LABEL_262:
    operator delete(*((void **)&v159 + 1));
    if ((SBYTE7(v159) & 0x80000000) == 0)
      goto LABEL_251;
LABEL_263:
    operator delete((void *)v158);
    if (!BYTE8(v157[2]))
      goto LABEL_254;
    goto LABEL_252;
  }
  if (v170)
    goto LABEL_245;
LABEL_251:
  if (!BYTE8(v157[2]))
    goto LABEL_254;
LABEL_252:
  if (SBYTE7(v157[2]) < 0)
    operator delete(*(void **)&v157[1]);
LABEL_254:
  if (v146)
  {
    v134 = v145;
    if (v145 == v144)
    {
      v135 = 4;
      v134 = v144;
      goto LABEL_266;
    }
    if (v145)
    {
      v135 = 5;
LABEL_266:
      (*(void (**)(void))(*v134 + 8 * v135))();
    }
  }
  return a1;
}

void sub_22413643C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_224136B98()
{
  JUMPOUT(0x224136AECLL);
}

void sub_224136BA0()
{
  JUMPOUT(0x224136AF4);
}

void sub_224136BA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43)
{
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  sub_223167354(v45);
  sub_22323DFE4(v44, *(_QWORD *)(v43 + 16));
  sub_2232E5384(&a43);
  MEMORY[0x227684CE8](v43, 0x1020C401722722ELL);
  JUMPOUT(0x224136AFCLL);
}

void sub_224136BE4()
{
  JUMPOUT(0x224136AFCLL);
}

void sub_224136BEC()
{
  int v0;

  if (v0)
    JUMPOUT(0x224136BF4);
  JUMPOUT(0x224136B5CLL);
}

void sub_224136C20(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18[4];
  int __src;
  uint64_t v20;

  v4 = (char *)(a2 + 4);
  LODWORD(v17) = 1;
  v5 = a1 + 24;
  sub_224501B60(a1 + 24, *(char **)(a1 + 32), (char *)&v17, (char *)&v17 + 4, 4);
  sub_2244FF590((_QWORD *)a1);
  sub_224501B60(v5, *(char **)(a1 + 32), v4, (char *)(a2 + 8), 4);
  sub_224501B60(v5, *(char **)(a1 + 32), (char *)(a2 + 8), (char *)(a2 + 12), 4);
  sub_224501B60(v5, *(char **)(a1 + 32), (char *)(a2 + 12), (char *)(a2 + 16), 4);
  sub_224501B60(v5, *(char **)(a1 + 32), (char *)(a2 + 16), (char *)(a2 + 20), 4);
  sub_224501B60(v5, *(char **)(a1 + 32), (char *)(a2 + 20), (char *)(a2 + 24), 4);
  sub_224501B60(v5, *(char **)(a1 + 32), (char *)(a2 + 24), (char *)(a2 + 28), 4);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v6 + 10) = *(_QWORD *)(a1 + 32) - v6 - 18;
  *(_QWORD *)(a1 + 56) -= 8;
  if (*(_BYTE *)(a2 + 80))
  {
    LOBYTE(v17) = 1;
    sub_224501B60(v5, *(char **)(a1 + 32), (char *)&v17, (char *)&v17 + 1, 1);
    LODWORD(v17) = 1;
    sub_224501B60(v5, *(char **)(a1 + 32), (char *)&v17, (char *)&v17 + 4, 4);
    sub_2244FF590((_QWORD *)a1);
    v17 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3);
    sub_224501B60(v5, *(char **)(a1 + 32), (char *)&v17, v18, 8);
    v7 = *(_QWORD *)(a2 + 32);
    v8 = *(_QWORD *)(a2 + 40);
    v9 = 0x2E8BA2E8BA2E8BA3 * ((v8 - v7) >> 3);
    if (v17 <= v9)
    {
      if (v17 < v9)
      {
        v10 = v7 + 88 * v17;
        while (v8 != v10)
        {
          v8 -= 88;
          sub_2241323E8(v8);
        }
        *(_QWORD *)(a2 + 40) = v10;
      }
    }
    else
    {
      sub_2241345FC((void **)(a2 + 32), v17 - v9);
    }
    v11 = v17;
    if (v17)
    {
      v12 = 0;
      do
      {
        v13 = *(_QWORD *)(a2 + 32) + v12;
        __src = 2;
        sub_224501B60(v5, *(char **)(a1 + 32), (char *)&__src, (char *)&v20, 4);
        sub_2244FF590((_QWORD *)a1);
        sub_22412E344(a1, v13);
        v14 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
        *(_QWORD *)(v14 + 10) = *(_QWORD *)(a1 + 32) - v14 - 18;
        v15 = *(_QWORD *)(a1 + 56) - 8;
        *(_QWORD *)(a1 + 56) = v15;
        v12 += 88;
        --v11;
      }
      while (v11);
    }
    else
    {
      v15 = *(_QWORD *)(a1 + 56);
    }
    v16 = *(_QWORD *)(v15 - 8) + *(_QWORD *)(a1 + 24);
    *(_QWORD *)(v16 + 10) = *(_QWORD *)(a1 + 32) - v16 - 18;
    *(_QWORD *)(a1 + 56) -= 8;
  }
  else
  {
    LOBYTE(v17) = 0;
    sub_224501B60(v5, *(char **)(a1 + 32), (char *)&v17, (char *)&v17 + 1, 1);
  }
}

void sub_224136F1C()
{
  JUMPOUT(0x227684CE8);
}

const char *sub_224136F30()
{
  return "cv3d.net";
}

void sub_224136F40(int a1@<W1>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  char *v4;
  uint64_t (**v5)();
  char *v6;
  char *v7;
  void *v8;
  void *v9;
  char *v10;
  uint64_t v11;
  void *__p;
  char v13;
  char v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char **v20;
  char *v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  void *v36;
  char v37;
  char v38;
  char v39;
  void *v40;
  char v41;
  char v42;
  void *v43;
  char v44;
  char v45;
  void *v46;
  char v47;
  char v48;
  void *v49;
  char v50;
  void *v51;
  char v52;
  char v53;
  void *v54;
  char v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  switch(a1)
  {
    case 1:
      LOBYTE(__p) = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      v18 = 0;
      v19 = 0;
      v17 = 0;
      v9 = 0;
      v10 = 0;
      LODWORD(v11) = 0;
      v3 = operator new(0x1B8uLL);
      v3[1] = 0;
      v3[2] = 0;
      *v3 = &off_24EC6B458;
      LOBYTE(v36) = 0;
      v39 = 0;
      LOBYTE(v40) = 0;
      v56 = 0;
      v33 = 0;
      v34 = 0;
      v35 = 0;
      v57 = 0;
      v59 = 0;
      v58 = 0;
      v3[3] = off_24EC67060;
      v24 = 0;
      v25 = 0;
      v26 = 0;
      v27 = 0;
      v28 = 0;
      v29 = 0;
      v30 = 0;
      v31 = 0;
      v32 = 0;
      v20 = 0;
      v21 = 0;
      v3[4] = &unk_24EC670C0;
      LOBYTE(v22) = 0;
      sub_223B866E4((uint64_t)&v20, (uint64_t)(v3 + 5));
      sub_22401AD98((uint64_t)(v3 + 28), &v33);
      v3[3] = off_24EC66FB8;
      v3[4] = &unk_24EC67018;
      sub_2231AD66C((uint64_t)&v20);
      if (!v56)
        goto LABEL_9;
      if (v55 < 0)
      {
        operator delete(v54);
        if ((v53 & 0x80000000) == 0)
        {
LABEL_5:
          if ((v50 & 0x80000000) == 0)
            goto LABEL_6;
          goto LABEL_34;
        }
      }
      else if ((v53 & 0x80000000) == 0)
      {
        goto LABEL_5;
      }
      operator delete(v51);
      if ((v50 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v48 & 0x80000000) == 0)
          goto LABEL_7;
        goto LABEL_35;
      }
LABEL_34:
      operator delete(v49);
      if ((v48 & 0x80000000) == 0)
      {
LABEL_7:
        if ((v45 & 0x80000000) == 0)
          goto LABEL_8;
        goto LABEL_36;
      }
LABEL_35:
      operator delete(v46);
      if ((v45 & 0x80000000) == 0)
      {
LABEL_8:
        if ((v42 & 0x80000000) == 0)
          goto LABEL_9;
        goto LABEL_37;
      }
LABEL_36:
      operator delete(v43);
      if ((v42 & 0x80000000) == 0)
      {
LABEL_9:
        if (v39)
          goto LABEL_10;
        goto LABEL_12;
      }
LABEL_37:
      operator delete(v40);
      if (v39)
      {
LABEL_10:
        if (v38 < 0)
          operator delete(v36);
      }
LABEL_12:
      *a2 = v3 + 3;
      goto LABEL_30;
    case 2:
      v3 = operator new(0x120uLL);
      v3[1] = 0;
      v3[2] = 0;
      *v3 = &off_24EC6B3C0;
      v3[3] = off_24EC66EC0;
      v4 = (char *)(v3 + 3);
      v37 = 0;
      v39 = 0;
      v41 = 0;
      LOBYTE(v43) = 0;
      v44 = 0;
      v47 = 0;
      v52 = 0;
      LOBYTE(v54) = 0;
      v56 = 0;
      v33 = 0;
      v34 = 0;
      LOBYTE(v35) = 0;
      v3[4] = &unk_24EC66F20;
      sub_223B866E4((uint64_t)&v33, (uint64_t)(v3 + 5));
      *((_BYTE *)v3 + 224) = 0;
      *((_BYTE *)v3 + 232) = 0;
      *((_BYTE *)v3 + 280) = 0;
      v5 = off_24EC66E18;
      goto LABEL_25;
    case 3:
      v21 = 0;
      v22 = 0;
      v20 = &v21;
      v3 = operator new(0xF8uLL);
      v3[1] = 0;
      v3[2] = 0;
      *v3 = &off_24EC6B4A8;
      v4 = (char *)(v3 + 3);
      v10 = 0;
      v11 = 0;
      v9 = &v10;
      v37 = 0;
      v39 = 0;
      v41 = 0;
      LOBYTE(v43) = 0;
      v44 = 0;
      v47 = 0;
      v52 = 0;
      LOBYTE(v54) = 0;
      v56 = 0;
      v33 = 0;
      v34 = 0;
      LOBYTE(v35) = 0;
      sub_224138E08((uint64_t)(v3 + 3), (const void ***)&v9, (uint64_t)&v33);
      v3[3] = off_24EC67228;
      v3[4] = &unk_24EC67288;
      sub_2231AD66C((uint64_t)&v33);
      sub_22323DF84((uint64_t)&v9, v10);
      sub_22323DF84((uint64_t)&v20, v21);
      goto LABEL_29;
    case 4:
      v25 = 0;
      v23 = 0;
      v3 = operator new(0x118uLL);
      v3[1] = 0;
      v3[2] = 0;
      *v3 = &off_24EC6B4F8;
      v4 = (char *)(v3 + 3);
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v21 = 0;
      v22 = 0;
      v20 = 0;
      LOBYTE(__p) = 0;
      v14 = 0;
      v37 = 0;
      v39 = 0;
      v41 = 0;
      LOBYTE(v43) = 0;
      v44 = 0;
      v47 = 0;
      v52 = 0;
      LOBYTE(v54) = 0;
      v56 = 0;
      v33 = 0;
      v34 = 0;
      LOBYTE(v35) = 0;
      sub_224138FDC((uint64_t)(v3 + 3), (uint64_t)&v9, (uint64_t)&v33);
      v3[3] = &off_24EC673C8;
      v3[4] = &unk_24EC67428;
      sub_2231AD66C((uint64_t)&v33);
      if (v14 && v13 < 0)
        operator delete(__p);
      v6 = (char *)v9;
      if (v9)
      {
        v7 = v10;
        v8 = v9;
        if (v10 != v9)
        {
          do
          {
            if (*(v7 - 9) < 0)
              operator delete(*((void **)v7 - 4));
            v7 -= 32;
          }
          while (v7 != v6);
          v8 = v9;
        }
        v10 = v6;
        operator delete(v8);
      }
      goto LABEL_29;
    case 5:
      v3 = operator new(0x118uLL);
      v3[1] = 0;
      v3[2] = 0;
      *v3 = &off_24EC6B548;
      v3[3] = off_24EC676B0;
      v4 = (char *)(v3 + 3);
      v37 = 0;
      v39 = 0;
      v41 = 0;
      LOBYTE(v43) = 0;
      v44 = 0;
      v47 = 0;
      v52 = 0;
      LOBYTE(v54) = 0;
      v56 = 0;
      v33 = 0;
      v34 = 0;
      LOBYTE(v35) = 0;
      v3[4] = &unk_24EC67710;
      sub_223B866E4((uint64_t)&v33, (uint64_t)(v3 + 5));
      *((_BYTE *)v3 + 232) = 0;
      *((_BYTE *)v3 + 272) = 0;
      v5 = off_24EC67608;
LABEL_25:
      v3[3] = v5;
      v3[4] = v5 + 12;
      sub_2231AD66C((uint64_t)&v33);
LABEL_29:
      *a2 = v4;
LABEL_30:
      a2[1] = v3;
      return;
    default:
      *a2 = 0;
      a2[1] = 0;
      return;
  }
}

void sub_22413742C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a68;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  void *v72;

  v71 = *(unsigned int *)(v68 + 216);
  if ((_DWORD)v71 != -1)
    ((void (*)(char *, uint64_t))off_24EC6B400[v71])(&a12, v69);
  *(_DWORD *)(v68 + 216) = -1;
  sub_2231AD66C((uint64_t)&a42);
  sub_2240E2FF4((uint64_t)&a68);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v68);
  operator delete(v72);
  sub_2240E2FF4((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_22413754C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2240E2FF4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_224137560(void *lpsrc@<X2>, int a2@<W1>, uint64_t a3@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  int v11;
  char v12;
  __int128 v13;
  __int128 v14;

  switch(a2)
  {
    case 1:
      sub_224137910(lpsrc, &v14);
      goto LABEL_7;
    case 2:
      sub_224137744(lpsrc, &v14);
      goto LABEL_7;
    case 3:
      sub_2241379F0(lpsrc, &v14);
      goto LABEL_7;
    case 4:
      sub_224137AD0(lpsrc, &v14);
LABEL_7:
      *(_OWORD *)a3 = v14;
      break;
    case 5:
      v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24EC6A3F8, (const struct __class_type_info *)&unk_24EC66830, 0);
      if (v4)
      {
        v5 = (uint64_t)v4 + 8;
        v6 = (uint64_t)v4 + 64;
      }
      else
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/include/Kit/Visualization/DataIO.h", 1045, (uint64_t)"ptr != nullptr", 14, (uint64_t)&unk_2245B0C4A, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v5 = 8;
        v6 = 64;
      }
      v7 = operator new(0x118uLL);
      v7[1] = 0;
      v7[2] = 0;
      *v7 = &off_24EC6B548;
      v8 = *(_QWORD *)v5;
      v9 = *(_OWORD *)(v5 + 8);
      v10 = *(_OWORD *)(v5 + 24);
      v11 = *(unsigned __int8 *)(v5 + 40);
      v7[3] = off_24EC676B0;
      v13 = v10;
      v14 = v9;
      v7[4] = &unk_24EC67710;
      sub_223B866E4(v6, (uint64_t)(v7 + 5));
      if (v11)
      {
        v7[29] = v8;
        *((_OWORD *)v7 + 15) = v14;
        *((_OWORD *)v7 + 16) = v13;
        v12 = 1;
      }
      else
      {
        v12 = 0;
        *((_BYTE *)v7 + 232) = 0;
      }
      *((_BYTE *)v7 + 272) = v12;
      v7[3] = off_24EC67608;
      v7[4] = &unk_24EC67668;
      *(_QWORD *)a3 = v7 + 3;
      *(_QWORD *)(a3 + 8) = v7;
      break;
    default:
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      break;
  }
}

void sub_22413772C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_224137744(const void *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;

  v3 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24EC6A3F8, (const struct __class_type_info *)&unk_24EC666B0, 0);
  v14 = a2;
  if (v3)
  {
    v4 = (uint64_t)v3 + 8;
    v5 = (uint64_t)v3 + 64;
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/include/Kit/Visualization/DataIO.h", 1045, (uint64_t)"ptr != nullptr", 14, (uint64_t)&unk_2245B0C4A, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = 8;
    v5 = 64;
  }
  v6 = operator new(0x120uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_24EC6B3C0;
  v8 = *(_QWORD *)v4;
  v7 = *(_QWORD *)(v4 + 8);
  v10 = *(_QWORD *)(v4 + 16);
  v9 = *(_QWORD *)(v4 + 24);
  v13 = *(_QWORD *)(v4 + 32);
  v11 = *(_DWORD *)(v4 + 40);
  v12 = *(unsigned __int8 *)(v4 + 48);
  v6[3] = off_24EC66EC0;
  v6[4] = &unk_24EC66F20;
  sub_223B866E4(v5, (uint64_t)(v6 + 5));
  if (v12)
  {
    if (v11)
    {
      *((_BYTE *)v6 + 224) = 2;
      *((_BYTE *)v6 + 232) = 0;
      *((_BYTE *)v6 + 280) = 0;
      if (v11 != 1)
        sub_22316DD70();
      *((_BYTE *)v6 + 232) = v8;
      v6[30] = v7;
      v6[31] = v10;
      v6[32] = v9;
      *((_DWORD *)v6 + 68) = 1;
    }
    else
    {
      *((_BYTE *)v6 + 224) = 1;
      v6[29] = v8;
      v6[30] = v7;
      v6[31] = v10;
      v6[32] = v9;
      v6[33] = v13;
      *((_DWORD *)v6 + 68) = 0;
    }
    *((_BYTE *)v6 + 280) = 1;
  }
  else
  {
    *((_BYTE *)v6 + 224) = 0;
    *((_BYTE *)v6 + 232) = 0;
    *((_BYTE *)v6 + 280) = 0;
  }
  v6[3] = off_24EC66E18;
  v6[4] = &unk_24EC66E78;
  *v14 = v6 + 3;
  v14[1] = v6;
}

void sub_2241378D8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  sub_224138C4C(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void sub_2241378F8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

_QWORD *sub_224137910@<X0>(const void *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;

  v3 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24EC6A3F8, (const struct __class_type_info *)&unk_24EC671B0, 0);
  if (v3)
  {
    v4 = (uint64_t)v3 + 8;
    v5 = (uint64_t)v3 + 240;
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/include/Kit/Visualization/DataIO.h", 1045, (uint64_t)"ptr != nullptr", 14, (uint64_t)&unk_2245B0C4A, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = 8;
    v5 = 240;
  }
  v6 = operator new(0x1B8uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_24EC6B458;
  result = sub_224139310(v6 + 3, (__int128 *)v4, v5);
  *a2 = v6 + 3;
  a2[1] = v6;
  return result;
}

void sub_2241379D8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

_QWORD *sub_2241379F0@<X0>(const void *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;

  v3 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24EC6A3F8, (const struct __class_type_info *)&unk_24EC66780, 0);
  if (v3)
  {
    v4 = (uint64_t)v3 + 8;
    v5 = (uint64_t)v3 + 32;
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/include/Kit/Visualization/DataIO.h", 1045, (uint64_t)"ptr != nullptr", 14, (uint64_t)&unk_2245B0C4A, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = 8;
    v5 = 32;
  }
  v6 = operator new(0xF8uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_24EC6B4A8;
  result = sub_22413959C(v6 + 3, (const void ***)v4, v5);
  *a2 = v6 + 3;
  a2[1] = v6;
  return result;
}

void sub_224137AB8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

_QWORD *sub_224137AD0@<X0>(const void *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;

  v3 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24EC6A3F8, (const struct __class_type_info *)&unk_24EC66800, 0);
  if (v3)
  {
    v4 = (uint64_t)v3 + 8;
    v5 = (uint64_t)v3 + 64;
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/include/Kit/Visualization/DataIO.h", 1045, (uint64_t)"ptr != nullptr", 14, (uint64_t)&unk_2245B0C4A, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = 8;
    v5 = 64;
  }
  v6 = operator new(0x118uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_24EC6B4F8;
  result = sub_2241396A4(v6 + 3, v4, v5);
  *a2 = v6 + 3;
  a2[1] = v6;
  return result;
}

void sub_224137B98(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

BOOL sub_224137BB0(uint64_t a1, int a2)
{
  return (a2 - 1) < 5;
}

uint64_t sub_224137BC0(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  int v4;
  size_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  _BYTE v16[24];
  int v17;
  void *__dst[2];
  unint64_t v19;
  _QWORD v20[5];
  _QWORD *v21;

  v17 = 0;
  v3 = operator new();
  *(_QWORD *)(v3 + 272) = 0;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)v3 = 0u;
  sub_223195210(v3);
  if (a2 >= 6
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/NetworkData.cpp", 103, (uint64_t)"idx < static_cast<uint32_t>(NetworkDataType::End)", 49, (uint64_t)&unk_2245B0C4A, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_2231813E8((_QWORD *)(v3 + 16), (uint64_t)(&off_24EC6B270)[2 * a2], (uint64_t)(&off_24EC6B270)[2 * a2 + 1]);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x10) != 0)
  {
    v7 = *(_QWORD *)(v3 + 112);
    v8 = *(_QWORD *)(v3 + 72);
    if (v7 < v8)
    {
      *(_QWORD *)(v3 + 112) = v8;
      v7 = v8;
    }
    v9 = *(const void **)(v3 + 64);
    v5 = v7 - (_QWORD)v9;
    if (v7 - (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_26;
  }
  else
  {
    if ((v4 & 8) == 0)
    {
      v5 = 0;
      HIBYTE(v19) = 0;
      v6 = __dst;
      goto LABEL_16;
    }
    v9 = *(const void **)(v3 + 40);
    v5 = *(_QWORD *)(v3 + 56) - (_QWORD)v9;
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
LABEL_26:
      sub_22316DBC0();
  }
  if (v5 >= 0x17)
  {
    v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v10 = v5 | 7;
    v11 = v10 + 1;
    v6 = (void **)operator new(v10 + 1);
    __dst[1] = (void *)v5;
    v19 = v11 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_15;
  }
  HIBYTE(v19) = v5;
  v6 = __dst;
  if (v5)
LABEL_15:
    memmove(v6, v9, v5);
LABEL_16:
  *((_BYTE *)v6 + v5) = 0;
  v12 = MEMORY[0x24BEDB7F0];
  v13 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v3 = *MEMORY[0x24BEDB7F0];
  v14 = *(_QWORD *)(v12 + 72);
  *(_QWORD *)(v3 + *(_QWORD *)(v13 - 24)) = *(_QWORD *)(v12 + 64);
  *(_QWORD *)(v3 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v3 + 16) = v14;
  if (*(char *)(v3 + 111) < 0)
    operator delete(*(void **)(v3 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x227684BE0](v3 + 128);
  MEMORY[0x227684CE8](v3, 0x10B2C40EED050F3);
  v20[0] = v16;
  v20[1] = __dst;
  v20[2] = v16;
  v20[3] = __dst;
  v20[4] = __dst;
  if (v17 == -1)
    sub_22316DD70();
  v21 = v20;
  ((void (*)(_QWORD **, _BYTE *))off_24EC6B368[v17])(&v21, v16);
  if (SHIBYTE(v19) < 0)
    operator delete(__dst[0]);
  if (v17 == -1)
    sub_22316DD70();
  v20[0] = __dst;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC6B398[v17])(v20, v16);
  if (v17 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC6B380[v17])(v20, v16);
  return result;
}

void sub_224137EA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  uint64_t v19;

  MEMORY[0x227684CE8](v18, 0x10B2C40EED050F3);
  if (a12 != -1)
    ((void (*)(uint64_t, uint64_t *))off_24EC6B380[a12])(v19 - 49, &a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_224137F7C(uint64_t *a1, _DWORD *a2)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  uint64_t v8;
  int v9;
  void *v10;
  __int128 *v11;
  size_t v12;
  uint64_t *v13;
  int v14;
  const void *v15;
  size_t v16;
  size_t v17;
  int v18;
  int v19;
  const void *v20;
  size_t v21;
  size_t v22;
  int v23;
  std::logic_error *exception;
  const std::string::value_type *v26;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  _QWORD v30[2];
  unsigned __int8 v31;
  std::string v32;
  std::string v33;
  std::string v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v4 = atomic_load((unsigned __int8 *)&qword_2540CEF60);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2540CEF60))
  {
    v35 = xmmword_22469A674;
    v36 = unk_22469A684;
    sub_2241383EC(&v35, 8uLL);
    __cxa_atexit((void (*)(void *))sub_224138480, &qword_2540CEF80, &dword_22314D000);
    __cxa_guard_release(&qword_2540CEF60);
  }
  v5 = atomic_load((unsigned __int8 *)&qword_2540CEF68);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_2540CEF68))
  {
    *(_QWORD *)&xmmword_2540CEFB0 = qword_2540CEF80;
    qword_2540CEFC0 = qword_2540CEF88;
    __cxa_guard_release(&qword_2540CEF68);
  }
  v6 = atomic_load((unsigned __int8 *)&qword_2540CEF70);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_2540CEF70))
  {
    *(_OWORD *)&qword_2540CEFD0 = xmmword_2540CEFB0;
    qword_2540CEFE0 = qword_2540CEF80;
    unk_2540CEFE8 = *(_OWORD *)&qword_2540CEFC0;
    qword_2540CEFF8 = qword_2540CEF88;
    __cxa_guard_release(&qword_2540CEF70);
  }
  v7 = atomic_load((unsigned __int8 *)&qword_2540CEF78);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_2540CEF78))
  {
    sub_2241384B0();
    __cxa_atexit((void (*)(void *))sub_2241387F0, &qword_2540CEF98, &dword_22314D000);
    __cxa_guard_release(&qword_2540CEF78);
  }
  v35 = 0uLL;
  *(_QWORD *)&v36 = 0;
  sub_2240EA2BC(a1, (uint64_t)&v35);
  v8 = qword_2540CEFA0;
  if (!qword_2540CEFA0)
    goto LABEL_44;
  v9 = SBYTE7(v36);
  v10 = (void *)v35;
  if ((SBYTE7(v36) & 0x80u) == 0)
    v11 = &v35;
  else
    v11 = (__int128 *)v35;
  if ((SBYTE7(v36) & 0x80u) == 0)
    v12 = BYTE7(v36);
  else
    v12 = *((_QWORD *)&v35 + 1);
  v13 = &qword_2540CEFA0;
  do
  {
    while (1)
    {
      v14 = *(char *)(v8 + 55);
      v15 = v14 >= 0 ? (const void *)(v8 + 32) : *(const void **)(v8 + 32);
      v16 = v14 >= 0 ? *(unsigned __int8 *)(v8 + 55) : *(_QWORD *)(v8 + 40);
      v17 = v12 >= v16 ? v16 : v12;
      v18 = memcmp(v15, v11, v17);
      if (v18)
        break;
      if (v16 >= v12)
        goto LABEL_27;
LABEL_13:
      v8 = *(_QWORD *)(v8 + 8);
      if (!v8)
        goto LABEL_28;
    }
    if (v18 < 0)
      goto LABEL_13;
LABEL_27:
    v13 = (uint64_t *)v8;
    v8 = *(_QWORD *)v8;
  }
  while (v8);
LABEL_28:
  if (v13 == &qword_2540CEFA0)
    goto LABEL_44;
  v19 = *((char *)v13 + 55);
  if (v19 >= 0)
    v20 = v13 + 4;
  else
    v20 = (const void *)v13[4];
  if (v19 >= 0)
    v21 = *((unsigned __int8 *)v13 + 55);
  else
    v21 = v13[5];
  if (v21 >= v12)
    v22 = v12;
  else
    v22 = v21;
  v23 = memcmp(v11, v20, v22);
  if (v23)
  {
    if ((v23 & 0x80000000) == 0)
      goto LABEL_40;
LABEL_44:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    sub_223996958(", expected ", &v32, &v33);
    sub_224138818();
    if ((v31 & 0x80u) == 0)
      v26 = (const std::string::value_type *)v30;
    else
      v26 = (const std::string::value_type *)v30[0];
    if ((v31 & 0x80u) == 0)
      v27 = v31;
    else
      v27 = v30[1];
    v28 = std::string::append(&v33, v26, v27);
    v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &v34);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  if (v12 < v21)
    goto LABEL_44;
LABEL_40:
  *a2 = *((_DWORD *)v13 + 14);
  if (v9 < 0)
    operator delete(v10);
  return a1;
}

void sub_2241382E4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CEF78);
  _Unwind_Resume(a1);
}

void sub_2241382FC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CEF60);
  _Unwind_Resume(a1);
}

void sub_224138314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  void *v40;
  int v41;

  if (a33 < 0)
  {
    operator delete(__p);
    if (a15 < 0)
    {
LABEL_5:
      operator delete(a10);
      if (a27 < 0)
      {
LABEL_8:
        operator delete(a22);
        if ((a21 & 0x80000000) == 0)
          goto LABEL_9;
        goto LABEL_12;
      }
LABEL_11:
      if ((a21 & 0x80000000) == 0)
      {
LABEL_9:
        if (!v41)
        {
LABEL_14:
          if (a40 < 0)
            operator delete(a35);
          _Unwind_Resume(a1);
        }
LABEL_13:
        __cxa_free_exception(v40);
        goto LABEL_14;
      }
LABEL_12:
      operator delete(a16);
      if ((v41 & 1) == 0)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  else if (a15 < 0)
  {
    goto LABEL_5;
  }
  if (a27 < 0)
    goto LABEL_8;
  goto LABEL_11;
}

void *sub_2241383EC(void *result, unint64_t a2)
{
  const void *v2;
  size_t v3;
  uint64_t v4;

  qword_2540CEF80 = 0;
  qword_2540CEF88 = 0;
  qword_2540CEF90 = 0;
  if (a2)
  {
    if (a2 >> 62)
      sub_22316E078();
    v2 = result;
    v3 = 4 * a2;
    qword_2540CEF80 = (uint64_t)operator new(4 * a2);
    qword_2540CEF88 = qword_2540CEF80;
    v4 = qword_2540CEF80 + v3;
    qword_2540CEF90 = qword_2540CEF80 + v3;
    result = memmove((void *)qword_2540CEF80, v2, v3);
    qword_2540CEF88 = v4;
  }
  return result;
}

void sub_22413845C(_Unwind_Exception *exception_object)
{
  if (qword_2540CEF80)
  {
    qword_2540CEF88 = qword_2540CEF80;
    operator delete((void *)qword_2540CEF80);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_224138480(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_2241384B0()
{
  int *v0;
  _DWORD *v1;
  BOOL v2;
  uint64_t *v3;
  void *v4;
  size_t v5;
  int v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  const void *v14;
  size_t v15;
  const void *v16;
  size_t v17;
  size_t v18;
  int v19;
  uint64_t *v20;
  size_t v21;
  size_t v22;
  const void *v23;
  size_t v24;
  size_t v25;
  int v26;
  int v27;
  uint64_t v28;
  int *v29;
  _DWORD *v30;
  void *v31;
  _BYTE v32[15];
  unsigned __int8 v33;
  _QWORD v34[3];

  v34[2] = *MEMORY[0x24BDAC8D0];
  v0 = (int *)qword_2540CEFD0;
  v1 = (_DWORD *)qword_2540CEFE0;
  qword_2540CEFA8 = 0;
  qword_2540CEFA0 = 0;
  qword_2540CEF98 = (uint64_t)&qword_2540CEFA0;
  v29 = (int *)unk_2540CEFE8;
  v28 = qword_2540CEFF8;
  v2 = qword_2540CEFD0 == unk_2540CEFE8 && qword_2540CEFE0 == qword_2540CEFF8;
  if (!v2)
  {
    v3 = &qword_2540CE000;
    while (1)
    {
      sub_224138AD4((uint64_t)&v31, v0);
      v4 = v31;
      v34[0] = *(_QWORD *)v32;
      *(_QWORD *)((char *)v34 + 7) = *(_QWORD *)&v32[7];
      v5 = v33;
      v6 = (char)v33;
      v7 = operator new(0x40uLL);
      v7[4] = v4;
      v7[5] = v34[0];
      *(_QWORD *)((char *)v7 + 47) = *(_QWORD *)((char *)v34 + 7);
      *((_BYTE *)v7 + 55) = v6;
      v34[0] = 0;
      *(_QWORD *)((char *)v34 + 7) = 0;
      *((_DWORD *)v7 + 14) = *v1;
      v8 = (uint64_t *)v3[499];
      v10 = &qword_2540CEFA0;
      v9 = qword_2540CEFA0;
      v30 = v1;
      if (v8 != &qword_2540CEFA0)
      {
        v11 = qword_2540CEFA0;
        if (qword_2540CEFA0)
        {
          do
          {
            v10 = (uint64_t *)v11;
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11);
        }
        else
        {
          v12 = &qword_2540CEFA0;
          do
          {
            v10 = (uint64_t *)v12[2];
            v2 = *v10 == (_QWORD)v12;
            v12 = v10;
          }
          while (v2);
        }
        v13 = *((char *)v10 + 55);
        if (v13 >= 0)
          v14 = v10 + 4;
        else
          v14 = (const void *)v10[4];
        if (v13 >= 0)
          v15 = *((unsigned __int8 *)v10 + 55);
        else
          v15 = v10[5];
        if (v6 >= 0)
          v16 = v7 + 4;
        else
          v16 = v4;
        if (v6 >= 0)
          v17 = v5;
        else
          v17 = v7[5];
        if (v17 >= v15)
          v18 = v15;
        else
          v18 = v17;
        v19 = memcmp(v14, v16, v18);
        if (v19)
        {
          if ((v19 & 0x80000000) == 0)
            goto LABEL_29;
        }
        else if (v15 >= v17)
        {
LABEL_29:
          if (!v9)
          {
LABEL_58:
            v10 = &qword_2540CEFA0;
            v20 = &qword_2540CEFA0;
            goto LABEL_59;
          }
          while (1)
          {
            v10 = (uint64_t *)v9;
            v21 = *(unsigned __int8 *)(v9 + 55);
            v22 = *(_QWORD *)(v9 + 40);
            if ((v21 & 0x80u) == 0)
              v23 = (const void *)(v9 + 32);
            else
              v23 = *(const void **)(v9 + 32);
            if ((v21 & 0x80u) == 0)
              v24 = v21;
            else
              v24 = v22;
            if (v24 >= v17)
              v25 = v17;
            else
              v25 = v24;
            v26 = memcmp(v16, v23, v25);
            if (v26)
            {
              if (v26 < 0)
                goto LABEL_31;
            }
            else if (v17 < v24)
            {
LABEL_31:
              v9 = *v10;
              v20 = v10;
              if (!*v10)
                goto LABEL_59;
              continue;
            }
            v27 = memcmp(v23, v16, v25);
            if (v27)
            {
              if ((v27 & 0x80000000) == 0)
                goto LABEL_54;
            }
            else if (v24 >= v17)
            {
              goto LABEL_54;
            }
            v9 = v10[1];
            if (!v9)
            {
              v20 = v10 + 1;
              goto LABEL_59;
            }
          }
        }
      }
      if (!v9)
        goto LABEL_58;
      v20 = v10 + 1;
      if (v10[1])
      {
LABEL_54:
        if (v6 < 0)
          operator delete(v4);
        operator delete(v7);
        v3 = &qword_2540CE000;
        ++v0;
        v1 = v30 + 1;
        if (v0 == v29)
          goto LABEL_62;
      }
      else
      {
LABEL_59:
        *v7 = 0;
        v7[1] = 0;
        v7[2] = v10;
        *v20 = (uint64_t)v7;
        v3 = &qword_2540CE000;
        if (*(_QWORD *)qword_2540CEF98)
        {
          qword_2540CEF98 = *(_QWORD *)qword_2540CEF98;
          v7 = (_QWORD *)*v20;
        }
        sub_2231A9A8C((uint64_t *)qword_2540CEFA0, v7);
        ++qword_2540CEFA8;
        ++v0;
        v1 = v30 + 1;
        if (v0 == v29)
        {
LABEL_62:
          if (v1 == (_DWORD *)v28)
            return;
        }
      }
    }
  }
}

void sub_2241387B4(_Unwind_Exception *a1)
{
  void *v1;
  int v2;

  if (v2 < 0)
  {
    operator delete(v1);
    sub_22375C06C((char *)qword_2540CEFA0);
    _Unwind_Resume(a1);
  }
  sub_22375C06C((char *)qword_2540CEFA0);
  _Unwind_Resume(a1);
}

uint64_t sub_2241387F0(uint64_t a1)
{
  sub_22375C06C(*(char **)(a1 + 8));
  return a1;
}

uint64_t sub_224138818()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t result;
  _DWORD v4[6];
  int v5;
  void *__p[2];
  char v7;
  void **v8;
  const char *v9;
  _DWORD *v10;
  const char *v11;
  const char *v12;
  void ***v13;

  v5 = 0;
  if ((uint64_t)xmmword_2540CEFB0 - qword_2540CEFC0 >= 0)
  {
    sub_2231AF0BC(v4, "{}");
    goto LABEL_16;
  }
  sub_2231ABA1C(v4, "{");
  v0 = xmmword_2540CEFB0;
  sub_224138AD4((uint64_t)__p, (int *)xmmword_2540CEFB0);
  v8 = (void **)v4;
  v9 = (const char *)__p;
  v10 = v4;
  v11 = (const char *)__p;
  v12 = (const char *)__p;
  if (v5 == -1)
    sub_22316DD70();
  v13 = &v8;
  ((void (*)(void ****, _DWORD *))off_24EC6B418[v5])(&v13, v4);
  if (v7 < 0)
  {
    operator delete(__p[0]);
    v1 = (int *)(v0 + 4);
    v2 = qword_2540CEFC0;
    if (v1 != (int *)qword_2540CEFC0)
    {
LABEL_10:
      while (1)
      {
        v8 = (void **)v4;
        v9 = ",";
        v10 = v4;
        v11 = ",";
        v12 = ",";
        if (v5 == -1)
          break;
        __p[0] = &v8;
        ((void (*)(void **, _DWORD *))off_24EC6B430[v5])(__p, v4);
        sub_224138AD4((uint64_t)__p, v1);
        v8 = (void **)v4;
        v9 = (const char *)__p;
        v10 = v4;
        v11 = (const char *)__p;
        v12 = (const char *)__p;
        if (v5 == -1)
          sub_22316DD70();
        v13 = &v8;
        ((void (*)(void ****, _DWORD *))off_24EC6B418[v5])(&v13, v4);
        if (v7 < 0)
          operator delete(__p[0]);
        if (++v1 == (int *)v2)
          goto LABEL_14;
      }
LABEL_20:
      sub_22316DD70();
    }
  }
  else
  {
    v1 = (int *)(v0 + 4);
    v2 = qword_2540CEFC0;
    if (v1 != (int *)qword_2540CEFC0)
      goto LABEL_10;
  }
LABEL_14:
  v8 = (void **)v4;
  v9 = "}";
  v10 = v4;
  v11 = "}";
  v12 = "}";
  if (v5 == -1)
    goto LABEL_20;
  __p[0] = &v8;
  ((void (*)(void **, _DWORD *))off_24EC6B430[v5])(__p, v4);
LABEL_16:
  if (v5 == -1)
    sub_22316DD70();
  v8 = __p;
  result = ((uint64_t (*)(void ***, _DWORD *))off_24EC6B398[v5])(&v8, v4);
  if (v5 != -1)
    return ((uint64_t (*)(void ***, _DWORD *))off_24EC6B380[v5])(&v8, v4);
  return result;
}

void sub_224138A8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_22319B964((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  sub_22319B964((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_224138AD4(uint64_t a1, int *a2)
{
  uint64_t result;
  _BYTE v3[24];
  int v4;
  char v5;
  _QWORD v6[2];

  v4 = 0;
  sub_2240F55F8((uint64_t)v6, (uint64_t)v3, a2);
  if (v4 == -1)
    sub_22316DD70();
  v6[0] = &v5;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC6B398[v4])(v6, v3);
  if (v4 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC6B380[v4])(v6, v3);
  return result;
}

void sub_224138B6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24EC6B380[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void sub_224138BA4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6B3C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_224138BB4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6B3C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_224138BE4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = result;
  *(_QWORD *)(result + 24) = off_24EC66EC0;
  *(_QWORD *)(result + 32) = &unk_24EC66F20;
  v2 = *(unsigned int *)(result + 216);
  if ((_DWORD)v2 != -1)
    result = ((uint64_t (*)(char *, uint64_t))*(&off_24EC66CC8 + v2))(&v3, result + 40);
  *(_DWORD *)(v1 + 216) = -1;
  return result;
}

uint64_t sub_224138C4C(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 176);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24EC6B400[v2])(&v4, a1);
  *(_DWORD *)(a1 + 176) = -1;
  return a1;
}

void sub_224138CA4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6B458;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_224138CB4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6B458;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_224138CE4(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  char v4;

  *(_QWORD *)(a1 + 24) = off_24EC67060;
  *(_QWORD *)(a1 + 32) = &unk_24EC670C0;
  result = sub_224022CC4(a1 + 224);
  v3 = *(unsigned int *)(a1 + 216);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))*(&off_24EC66CC8 + v3))(&v4, a1 + 40);
  *(_DWORD *)(a1 + 216) = -1;
  return result;
}

void sub_224138D54(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6B4A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_224138D64(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6B4A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_224138D94(uint64_t a1)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)(a1 + 24) = off_24EC672D0;
  *(_QWORD *)(a1 + 32) = &unk_24EC67330;
  sub_22323DF84(a1 + 224, *(char **)(a1 + 232));
  v2 = *(unsigned int *)(a1 + 216);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v2))(&v3, a1 + 40);
  *(_DWORD *)(a1 + 216) = -1;
}

uint64_t sub_224138E08(uint64_t a1, const void ***a2, uint64_t a3)
{
  const void ***v5;
  const void **v6;
  const void **v7;
  const void **v8;
  const void ***v9;
  BOOL v10;
  uint64_t *v11;
  char *v13;
  char **v14;
  char **v15;
  char *v16[2];

  *(_QWORD *)a1 = off_24EC672D0;
  *(_QWORD *)(a1 + 8) = &unk_24EC67330;
  sub_223B866E4(a3, a1 + 16);
  v16[0] = 0;
  v16[1] = 0;
  v15 = v16;
  v7 = *a2;
  v5 = a2 + 1;
  v6 = v7;
  if (v7 == (const void **)v5)
  {
    *(_QWORD *)(a1 + 208) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    *(_QWORD *)(a1 + 200) = a1 + 208;
  }
  else
  {
    do
    {
      sub_2240EE228((uint64_t **)&v15, (uint64_t *)v16, v6 + 4, (uint64_t)(v6 + 4));
      v8 = (const void **)v6[1];
      if (v8)
      {
        do
        {
          v9 = (const void ***)v8;
          v8 = (const void **)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (const void ***)v6[2];
          v10 = *v9 == v6;
          v6 = (const void **)v9;
        }
        while (!v10);
      }
      v6 = (const void **)v9;
    }
    while (v9 != v5);
    *(_QWORD *)(a1 + 208) = 0;
    v11 = (uint64_t *)v15;
    *(_QWORD *)(a1 + 200) = a1 + 208;
    *(_QWORD *)(a1 + 216) = 0;
    if (v11 != (uint64_t *)v16)
    {
      do
      {
        sub_2240EE228((uint64_t **)(a1 + 200), (uint64_t *)(a1 + 208), (const void **)v11 + 4, (uint64_t)(v11 + 4));
        v13 = (char *)v11[1];
        if (v13)
        {
          do
          {
            v14 = (char **)v13;
            v13 = *(char **)v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v14 = (char **)v11[2];
            v10 = *v14 == (char *)v11;
            v11 = (uint64_t *)v14;
          }
          while (!v10);
        }
        v11 = (uint64_t *)v14;
      }
      while (v14 != v16);
    }
  }
  sub_22323DF84((uint64_t)&v15, v16[0]);
  return a1;
}

void sub_224138F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  uint64_t v11;
  char **v12;
  uint64_t v13;

  sub_22323DF84(v13, *v12);
  sub_22323DF84((uint64_t)&a10, a11);
  sub_224138C4C(v11);
  _Unwind_Resume(a1);
}

void sub_224138F90(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6B4F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_224138FA0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6B4F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_224138FD0(uint64_t a1)
{
  return sub_22401DF60(a1 + 24);
}

uint64_t sub_224138FDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  void **v7;
  void **v8;
  void *v9;
  void *v11;
  void **v12;
  __int128 __p;
  uint64_t v14;
  unsigned __int8 v15;

  *(_QWORD *)a1 = &off_24EC67470;
  *(_QWORD *)(a1 + 8) = &unk_24EC674D0;
  sub_223B866E4(a3, a1 + 16);
  sub_22413916C((uint64_t)&v11, a2);
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  sub_2240F669C((char *)(a1 + 200), (uint64_t)v11, (uint64_t)v12, ((char *)v12 - (_BYTE *)v11) >> 5);
  *(_BYTE *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 248) = 0;
  if (v15)
  {
    if (SHIBYTE(v14) < 0)
    {
      sub_223197FA4((_BYTE *)(a1 + 224), (void *)__p, *((unint64_t *)&__p + 1));
      v5 = v15;
      v6 = SHIBYTE(v14);
      *(_BYTE *)(a1 + 248) = 1;
      if (v5 && v6 < 0)
        operator delete((void *)__p);
    }
    else
    {
      *(_OWORD *)(a1 + 224) = __p;
      *(_QWORD *)(a1 + 240) = v14;
      *(_BYTE *)(a1 + 248) = 1;
    }
  }
  v7 = (void **)v11;
  if (v11)
  {
    v8 = v12;
    v9 = v11;
    if (v12 != v11)
    {
      do
      {
        if (*((char *)v8 - 9) < 0)
          operator delete(*(v8 - 4));
        v8 -= 4;
      }
      while (v8 != v7);
      v9 = v11;
    }
    v12 = v7;
    operator delete(v9);
  }
  return a1;
}

void sub_224139114(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;
  void **v5;
  va_list va;

  va_start(va, a2);
  if (*(_BYTE *)(v2 + 248))
  {
    if (*(char *)(v2 + 247) < 0)
      operator delete(*v5);
  }
  sub_223714960(v4);
  sub_224022F84((uint64_t)va);
  sub_224138C4C(v3);
  _Unwind_Resume(a1);
}

void sub_224139158(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_224138C4C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_22413916C(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  sub_2240F669C((char *)a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 5);
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    if (*(char *)(a2 + 47) < 0)
    {
      sub_223197FA4((_BYTE *)(a1 + 24), *(void **)(a2 + 24), *(_QWORD *)(a2 + 32));
    }
    else
    {
      v4 = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 24) = v4;
    }
    *(_BYTE *)(a1 + 48) = 1;
  }
  return a1;
}

void sub_2241391FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v4;
  void **v5;
  void **v6;

  if (*(_BYTE *)(v1 + 48) && *(char *)(v1 + 47) < 0)
    operator delete(*v2);
  v4 = *(void ***)v1;
  if (*(_QWORD *)v1)
  {
    v5 = *(void ***)(v1 + 8);
    v6 = *(void ***)v1;
    if (v5 != v4)
    {
      do
      {
        if (*((char *)v5 - 9) < 0)
          operator delete(*(v5 - 4));
        v5 -= 4;
      }
      while (v5 != v4);
      v6 = *(void ***)v1;
    }
    *(_QWORD *)(v1 + 8) = v4;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void sub_224139268(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6B548;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_224139278(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6B548;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2241392A8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = result;
  *(_QWORD *)(result + 24) = off_24EC676B0;
  *(_QWORD *)(result + 32) = &unk_24EC67710;
  v2 = *(unsigned int *)(result + 216);
  if ((_DWORD)v2 != -1)
    result = ((uint64_t (*)(char *, uint64_t))*(&off_24EC66CC8 + v2))(&v3, result + 40);
  *(_DWORD *)(v1 + 216) = -1;
  return result;
}

_QWORD *sub_224139310(_QWORD *a1, __int128 *a2, uint64_t a3)
{
  __int128 v7;
  int v8;
  __int128 __p;
  uint64_t v10;
  char v11;
  void *v12;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  void *v18;
  char v19;
  void *v20;
  char v21;
  void *v22;
  char v23;
  char v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v7 = *a2;
  v8 = *((_DWORD *)a2 + 4);
  LOBYTE(__p) = 0;
  v11 = 0;
  if (*((_BYTE *)a2 + 48))
  {
    if (*((char *)a2 + 47) < 0)
    {
      sub_223197FA4(&__p, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
    }
    else
    {
      __p = *(__int128 *)((char *)a2 + 24);
      v10 = *((_QWORD *)a2 + 5);
    }
    v11 = 1;
  }
  LOBYTE(v12) = 0;
  v24 = 0;
  if (*((_BYTE *)a2 + 200))
  {
    sub_224011F80((char *)&v12, (__int128 *)((char *)a2 + 56));
    v24 = 1;
  }
  v25 = a2[13];
  v26 = *((_QWORD *)a2 + 28);
  *a1 = off_24EC67060;
  a1[1] = &unk_24EC670C0;
  sub_223B866E4(a3, (uint64_t)(a1 + 2));
  sub_22401AD98((uint64_t)(a1 + 25), &v7);
  *a1 = off_24EC66FB8;
  a1[1] = &unk_24EC67018;
  if (!v24)
    goto LABEL_15;
  if (v23 < 0)
  {
    operator delete(v22);
    if ((v21 & 0x80000000) == 0)
    {
LABEL_11:
      if ((v19 & 0x80000000) == 0)
        goto LABEL_12;
      goto LABEL_21;
    }
  }
  else if ((v21 & 0x80000000) == 0)
  {
    goto LABEL_11;
  }
  operator delete(v20);
  if ((v19 & 0x80000000) == 0)
  {
LABEL_12:
    if ((v17 & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  operator delete(v18);
  if ((v17 & 0x80000000) == 0)
  {
LABEL_13:
    if ((v15 & 0x80000000) == 0)
      goto LABEL_14;
    goto LABEL_23;
  }
LABEL_22:
  operator delete(v16);
  if (v15 < 0)
  {
LABEL_23:
    operator delete(v14);
    if (v13 < 0)
      goto LABEL_24;
LABEL_15:
    if (!v11)
      return a1;
    goto LABEL_16;
  }
LABEL_14:
  if ((v13 & 0x80000000) == 0)
    goto LABEL_15;
LABEL_24:
  operator delete(v12);
  if (!v11)
    return a1;
LABEL_16:
  if (SHIBYTE(v10) < 0)
    operator delete((void *)__p);
  return a1;
}

void sub_2241394FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a23)
  {
    if (a22 < 0)
    {
      operator delete(__p);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_224139588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2240E2FF4((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_22413959C(_QWORD *a1, const void ***a2, uint64_t a3)
{
  const void ***v5;
  const void **v6;
  const void **v8;
  const void ***v9;
  BOOL v10;
  char **v11;
  char *v12[2];

  v12[0] = 0;
  v12[1] = 0;
  v11 = v12;
  v5 = a2 + 1;
  v6 = *a2;
  if (*a2 != (const void **)(a2 + 1))
  {
    do
    {
      sub_2240EE228((uint64_t **)&v11, (uint64_t *)v12, v6 + 4, (uint64_t)(v6 + 4));
      v8 = (const void **)v6[1];
      if (v8)
      {
        do
        {
          v9 = (const void ***)v8;
          v8 = (const void **)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (const void ***)v6[2];
          v10 = *v9 == v6;
          v6 = (const void **)v9;
        }
        while (!v10);
      }
      v6 = (const void **)v9;
    }
    while (v9 != v5);
  }
  sub_224138E08((uint64_t)a1, (const void ***)&v11, a3);
  *a1 = off_24EC67228;
  a1[1] = &unk_24EC67288;
  sub_22323DF84((uint64_t)&v11, v12[0]);
  return a1;
}

void sub_224139674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  sub_22323DF84((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_22413968C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  sub_22323DF84((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

_QWORD *sub_2241396A4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void **v5;
  void **v6;
  void *v7;
  void *v9;
  void **v10;
  void *__p;
  char v12;
  char v13;

  sub_22413916C((uint64_t)&v9, a2);
  sub_224138FDC((uint64_t)a1, (uint64_t)&v9, a3);
  *a1 = &off_24EC673C8;
  a1[1] = &unk_24EC67428;
  if (v13 && v12 < 0)
    operator delete(__p);
  v5 = (void **)v9;
  if (v9)
  {
    v6 = v10;
    v7 = v9;
    if (v10 != v9)
    {
      do
      {
        if (*((char *)v6 - 9) < 0)
          operator delete(*(v6 - 4));
        v6 -= 4;
      }
      while (v6 != v5);
      v7 = v9;
    }
    v10 = v5;
    operator delete(v7);
  }
  return a1;
}

void sub_224139760(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_224022F84((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_224139774(uint64_t result, int a2)
{
  *(_QWORD *)result = &off_24EC6B598;
  *(_DWORD *)(result + 8) = a2;
  return result;
}

void sub_22413978C()
{
  JUMPOUT(0x227684CE8);
}

const char *sub_2241397A0()
{
  return "cv3d.viz";
}

void sub_2241397B0(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  int v7;
  int v8;
  void *v9;
  char *v11;
  int v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  int32x4_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  void *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  _DWORD *v51;
  _QWORD *v52;
  _DWORD *v53;
  std::__shared_weak_count *v54;
  void *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t *v73;
  unint64_t *v74;
  unint64_t *v75;
  unint64_t *v76;
  unint64_t *v77;
  void *v78[7];
  uint64_t v79;
  __int128 v80;
  _QWORD v81[3];
  uint64_t v82;
  _BYTE v83[32];
  _BYTE __p[24];
  uint64_t v85;
  void *v86[2];
  uint64_t v87;
  void *v88[2];
  uint64_t v89;
  void *v90;
  std::__shared_weak_count *v91;
  __int128 v92;
  char v93;
  char v94;
  char v95;
  char v96;
  char v97;
  char v98;
  char v99;
  char v100;
  char v101;
  uint64_t v102;

  v102 = *MEMORY[0x24BDAC8D0];
  switch(a2)
  {
    case 1:
      v11 = (char *)operator new(0x140uLL);
      *(_QWORD *)v11 = &off_24EC6B5F8;
      *((_QWORD *)v11 + 1) = 0;
      v12 = *(_DWORD *)(a1 + 8);
      *((_QWORD *)v11 + 4) = &unk_24EC66A88;
      *((_QWORD *)v11 + 2) = 0;
      *((_QWORD *)v11 + 3) = off_24EC66A10;
      *(_OWORD *)(v11 + 40) = 0u;
      *(_OWORD *)(v11 + 56) = 0u;
      *(_OWORD *)(v11 + 72) = 0u;
      *(_OWORD *)(v11 + 88) = 0u;
      *(_OWORD *)(v11 + 104) = 0u;
      *(_OWORD *)(v11 + 120) = 0u;
      *(_OWORD *)(v11 + 136) = 0u;
      *(_OWORD *)(v11 + 152) = 0u;
      *(_OWORD *)(v11 + 168) = 0u;
      *(_OWORD *)(v11 + 184) = 0u;
      v90 = &off_24EC1F958;
      *(_OWORD *)(v11 + 200) = 0u;
      sub_2231B3FDC((uint64_t)&v91);
      sub_22416BD7C((uint64_t)(v11 + 216), (uint64_t)&v90, 0);
      v13 = (std::__shared_weak_count *)v92;
      if ((_QWORD)v92)
      {
        v14 = (unint64_t *)(v92 + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      *((_DWORD *)v11 + 60) = v12;
      *a3 = v11 + 32;
      a3[1] = v11;
      return;
    case 2:
      v90 = 0;
      v91 = 0;
      *(_QWORD *)&v92 = 0;
      sub_22450F3D8(v83, 7, (uint64_t)&v90);
      v17 = *(_QWORD *)v83;
      v16 = *(std::__shared_weak_count **)&v83[8];
      v78[0] = *(void **)v83;
      v78[1] = *(void **)&v83[8];
      if (v90)
      {
        v91 = (std::__shared_weak_count *)v90;
        operator delete(v90);
      }
      v18 = (char *)operator new(0x100uLL);
      *((_QWORD *)v18 + 1) = 0;
      *((_QWORD *)v18 + 2) = 0;
      *(_QWORD *)v18 = &off_24EC6B6F8;
      *(_QWORD *)v83 = v17;
      *(_QWORD *)&v83[8] = v16;
      v78[0] = 0;
      v78[1] = 0;
      *((_QWORD *)v18 + 3) = off_24EC67B28;
      v19 = v18 + 24;
      v93 = 0;
      v94 = 0;
      v95 = 0;
      v96 = 0;
      v97 = 0;
      v98 = 0;
      v99 = 0;
      v100 = 0;
      v101 = 0;
      v90 = 0;
      v91 = 0;
      *((_QWORD *)v18 + 4) = &unk_24EC67B88;
      LOBYTE(v92) = 0;
      sub_223B866E4((uint64_t)&v90, (uint64_t)(v18 + 40));
      v18[224] = *(_BYTE *)v17;
      *((_QWORD *)v18 + 29) = *(_QWORD *)(v17 + 56);
      *((_QWORD *)v18 + 30) = v17;
      *((_QWORD *)v18 + 31) = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v21 = __ldxr(p_shared_owners);
        while (__stxr(v21 + 1, p_shared_owners));
        *((_QWORD *)v18 + 3) = off_24EC67A80;
        *((_QWORD *)v18 + 4) = &unk_24EC67AE0;
        sub_2231AD66C((uint64_t)&v90);
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      else
      {
        *((_QWORD *)v18 + 3) = off_24EC67A80;
        *((_QWORD *)v18 + 4) = &unk_24EC67AE0;
        sub_2231AD66C((uint64_t)&v90);
      }
      v69 = (std::__shared_weak_count *)v78[1];
      if (!v78[1])
        goto LABEL_154;
      v70 = (unint64_t *)((char *)v78[1] + 8);
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      goto LABEL_152;
    case 3:
      v90 = 0;
      v91 = 0;
      *(_QWORD *)&v92 = 0;
      sub_2245114E4((uint64_t)&v90, v83);
      v24 = *(_QWORD *)v83;
      v23 = *(std::__shared_weak_count **)&v83[8];
      v78[0] = *(void **)v83;
      v78[1] = *(void **)&v83[8];
      if (v90)
      {
        v91 = (std::__shared_weak_count *)v90;
        operator delete(v90);
      }
      v18 = (char *)operator new(0x100uLL);
      *((_QWORD *)v18 + 1) = 0;
      *((_QWORD *)v18 + 2) = 0;
      *(_QWORD *)v18 = &off_24EC6B748;
      *(_QWORD *)v83 = v24;
      *(_QWORD *)&v83[8] = v23;
      v78[0] = 0;
      v78[1] = 0;
      *((_QWORD *)v18 + 3) = off_24EC67D00;
      v19 = v18 + 24;
      v93 = 0;
      v94 = 0;
      v95 = 0;
      v96 = 0;
      v97 = 0;
      v98 = 0;
      v99 = 0;
      v100 = 0;
      v101 = 0;
      v90 = 0;
      v91 = 0;
      *((_QWORD *)v18 + 4) = &unk_24EC67D60;
      LOBYTE(v92) = 0;
      sub_223B866E4((uint64_t)&v90, (uint64_t)(v18 + 40));
      v18[224] = *(_BYTE *)v24;
      *((_QWORD *)v18 + 29) = *(_QWORD *)(v24 + 56) >> 1;
      *((_QWORD *)v18 + 30) = v24;
      *((_QWORD *)v18 + 31) = v23;
      if (v23)
      {
        v25 = (unint64_t *)&v23->__shared_owners_;
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
        *((_QWORD *)v18 + 3) = off_24EC67C58;
        *((_QWORD *)v18 + 4) = &unk_24EC67CB8;
        sub_2231AD66C((uint64_t)&v90);
        do
          v27 = __ldaxr(v25);
        while (__stlxr(v27 - 1, v25));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      else
      {
        *((_QWORD *)v18 + 3) = off_24EC67C58;
        *((_QWORD *)v18 + 4) = &unk_24EC67CB8;
        sub_2231AD66C((uint64_t)&v90);
      }
      v69 = (std::__shared_weak_count *)v78[1];
      if (!v78[1])
        goto LABEL_154;
      v72 = (unint64_t *)((char *)v78[1] + 8);
      do
        v71 = __ldaxr(v72);
      while (__stlxr(v71 - 1, v72));
      goto LABEL_152;
    case 4:
      v90 = 0;
      v91 = 0;
      *(_QWORD *)&v92 = 0;
      sub_2245119CC((uint64_t)&v90, v83);
      v29 = *(_QWORD *)v83;
      v28 = *(std::__shared_weak_count **)&v83[8];
      v78[0] = *(void **)v83;
      v78[1] = *(void **)&v83[8];
      if (v90)
      {
        v91 = (std::__shared_weak_count *)v90;
        operator delete(v90);
      }
      v18 = (char *)operator new(0x100uLL);
      *((_QWORD *)v18 + 1) = 0;
      *((_QWORD *)v18 + 2) = 0;
      *(_QWORD *)v18 = &off_24EC6B798;
      *(_QWORD *)v83 = v29;
      *(_QWORD *)&v83[8] = v28;
      v78[0] = 0;
      v78[1] = 0;
      *((_QWORD *)v18 + 3) = off_24EC67ED8;
      v19 = v18 + 24;
      v93 = 0;
      v94 = 0;
      v95 = 0;
      v96 = 0;
      v97 = 0;
      v98 = 0;
      v99 = 0;
      v100 = 0;
      v101 = 0;
      v90 = 0;
      v91 = 0;
      *((_QWORD *)v18 + 4) = &unk_24EC67F38;
      LOBYTE(v92) = 0;
      sub_223B866E4((uint64_t)&v90, (uint64_t)(v18 + 40));
      v18[224] = *(_BYTE *)v29;
      *((_QWORD *)v18 + 29) = *(_QWORD *)(v29 + 56) / 3uLL;
      *((_QWORD *)v18 + 30) = v29;
      *((_QWORD *)v18 + 31) = v28;
      if (v28)
      {
        v30 = (unint64_t *)&v28->__shared_owners_;
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
        *((_QWORD *)v18 + 3) = off_24EC67E30;
        *((_QWORD *)v18 + 4) = &unk_24EC67E90;
        sub_2231AD66C((uint64_t)&v90);
        do
          v32 = __ldaxr(v30);
        while (__stlxr(v32 - 1, v30));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      else
      {
        *((_QWORD *)v18 + 3) = off_24EC67E30;
        *((_QWORD *)v18 + 4) = &unk_24EC67E90;
        sub_2231AD66C((uint64_t)&v90);
      }
      v69 = (std::__shared_weak_count *)v78[1];
      if (!v78[1])
        goto LABEL_154;
      v73 = (unint64_t *)((char *)v78[1] + 8);
      do
        v71 = __ldaxr(v73);
      while (__stlxr(v71 - 1, v73));
      goto LABEL_152;
    case 5:
      v33 = (char *)operator new(0x78uLL);
      v34 = (std::__shared_weak_count *)v33;
      *((_QWORD *)v33 + 1) = 0;
      v35 = (unint64_t *)(v33 + 8);
      *((_QWORD *)v33 + 2) = 0;
      *(_QWORD *)v33 = &off_24EC28318;
      *((_QWORD *)v33 + 5) = 0;
      *((_QWORD *)v33 + 6) = 0;
      v36 = vdupq_n_s32(0x7FC00000u);
      *((_QWORD *)v33 + 4) = &off_24EC20868;
      *(int32x4_t *)(v33 + 56) = v36;
      *(int32x4_t *)(v33 + 72) = v36;
      *(int32x4_t *)(v33 + 88) = v36;
      *((_DWORD *)v33 + 26) = 2143289344;
      *((_QWORD *)v33 + 3) = &off_24EC207B8;
      *((_QWORD *)v33 + 14) = 0;
      v78[0] = &off_24EC6D000;
      v78[1] = v33 + 24;
      v78[2] = v33;
      do
        v37 = __ldxr(v35);
      while (__stxr(v37 + 1, v35));
      do
        v38 = __ldaxr(v35);
      while (__stlxr(v38 - 1, v35));
      if (!v38)
      {
        (*(void (**)(char *))(*(_QWORD *)v33 + 16))(v33);
        std::__shared_weak_count::__release_weak(v34);
      }
      v39 = operator new(0x108uLL);
      v39[1] = 0;
      v39[2] = 0;
      *v39 = &off_24EC6B7E8;
      *(_QWORD *)v83 = &off_24EC6D000;
      *(_OWORD *)&v83[8] = *(_OWORD *)&v78[1];
      v78[1] = 0;
      v78[2] = 0;
      v39[3] = off_24EC68180;
      v93 = 0;
      v94 = 0;
      v95 = 0;
      v96 = 0;
      v97 = 0;
      v98 = 0;
      v99 = 0;
      v100 = 0;
      v101 = 0;
      v90 = 0;
      v91 = 0;
      v39[4] = &unk_24EC681E0;
      LOBYTE(v92) = 0;
      sub_223B866E4((uint64_t)&v90, (uint64_t)(v39 + 5));
      sub_224151B5C((uint64_t)(v39 + 28), (uint64_t)v83);
      v39[3] = off_24EC680D8;
      v39[4] = &unk_24EC68138;
      sub_2231AD66C((uint64_t)&v90);
      *(_QWORD *)v83 = &off_24EC6D000;
      v40 = *(std::__shared_weak_count **)&v83[16];
      if (*(_QWORD *)&v83[16])
      {
        v41 = (unint64_t *)(*(_QWORD *)&v83[16] + 8);
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      v78[0] = &off_24EC6D000;
      if (v78[2])
      {
        v43 = (unint64_t *)((char *)v78[2] + 8);
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          (*(void (**)(void *))(*(_QWORD *)v78[2] + 16))(v78[2]);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v78[2]);
        }
      }
      *a3 = v39 + 3;
      a3[1] = v39;
      return;
    case 6:
      sub_2244E3F48((uint64_t *)v78);
      v18 = (char *)operator new(0xF0uLL);
      *((_QWORD *)v18 + 1) = 0;
      *((_QWORD *)v18 + 2) = 0;
      *(_QWORD *)v18 = &off_24EC6B838;
      v46 = v78[0];
      v45 = (std::__shared_weak_count *)v78[1];
      *(void **)v83 = v78[0];
      *(void **)&v83[8] = v78[1];
      v78[0] = 0;
      v78[1] = 0;
      *((_QWORD *)v18 + 3) = off_24EC685D8;
      v19 = v18 + 24;
      v93 = 0;
      v94 = 0;
      v95 = 0;
      v96 = 0;
      v97 = 0;
      v98 = 0;
      v99 = 0;
      v100 = 0;
      v101 = 0;
      v90 = 0;
      v91 = 0;
      *((_QWORD *)v18 + 4) = &unk_24EC68638;
      LOBYTE(v92) = 0;
      sub_223B866E4((uint64_t)&v90, (uint64_t)(v18 + 40));
      *((_QWORD *)v18 + 28) = v46;
      *((_QWORD *)v18 + 29) = v45;
      if (v45)
      {
        v47 = (unint64_t *)&v45->__shared_owners_;
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
        *((_QWORD *)v18 + 3) = off_24EC68530;
        *((_QWORD *)v18 + 4) = &unk_24EC68590;
        sub_2231AD66C((uint64_t)&v90);
        do
          v49 = __ldaxr(v47);
        while (__stlxr(v49 - 1, v47));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      else
      {
        *((_QWORD *)v18 + 3) = off_24EC68530;
        *((_QWORD *)v18 + 4) = &unk_24EC68590;
        sub_2231AD66C((uint64_t)&v90);
      }
      v69 = (std::__shared_weak_count *)v78[1];
      if (!v78[1])
        goto LABEL_154;
      v74 = (unint64_t *)((char *)v78[1] + 8);
      do
        v71 = __ldaxr(v74);
      while (__stlxr(v71 - 1, v74));
      goto LABEL_152;
    case 7:
      v50 = (char *)operator new(0x270uLL);
      *((_QWORD *)v50 + 1) = 0;
      *((_QWORD *)v50 + 2) = 0;
      *(_QWORD *)v50 = &off_24EC6B888;
      bzero(v50 + 40, 0x210uLL);
      *((_QWORD *)v50 + 3) = off_24EC68708;
      *((_QWORD *)v50 + 4) = &unk_24EC68780;
      v50[56] = 0;
      v50[88] = 0;
      v50[112] = 0;
      v50[144] = 0;
      v50[176] = 0;
      v50[208] = 0;
      *((_QWORD *)v50 + 28) = 0;
      *((_QWORD *)v50 + 29) = 0;
      *((_QWORD *)v50 + 27) = 0;
      *((_DWORD *)v50 + 71) = 0;
      *((_QWORD *)v50 + 33) = 0;
      *((_QWORD *)v50 + 34) = 0;
      *((_QWORD *)v50 + 32) = 0;
      *((_DWORD *)v50 + 81) = 0;
      *((_QWORD *)v50 + 38) = 0;
      *((_QWORD *)v50 + 39) = 0;
      *((_QWORD *)v50 + 37) = 0;
      *((_DWORD *)v50 + 91) = 0;
      *((_QWORD *)v50 + 43) = 0;
      *((_QWORD *)v50 + 44) = 0;
      *((_QWORD *)v50 + 42) = 0;
      *((_QWORD *)v50 + 48) = 0;
      *((_QWORD *)v50 + 49) = 0;
      *((_QWORD *)v50 + 47) = 0;
      v50[536] = 0;
      *(_QWORD *)(v50 + 420) = 0;
      *((_DWORD *)v50 + 107) = 0;
      *(_QWORD *)(v50 + 404) = 0;
      *(_QWORD *)(v50 + 412) = 0;
      *(_QWORD *)(v50 + 452) = 0;
      *((_DWORD *)v50 + 115) = 0;
      *(_QWORD *)(v50 + 436) = 0;
      *(_QWORD *)(v50 + 444) = 0;
      *(_QWORD *)(v50 + 476) = 0;
      *(_QWORD *)(v50 + 468) = 0;
      *((_DWORD *)v50 + 123) = 0;
      *(_QWORD *)(v50 + 484) = 0;
      *(_QWORD *)(v50 + 508) = 0;
      *(_QWORD *)(v50 + 500) = 0;
      *((_DWORD *)v50 + 131) = 0;
      *(_QWORD *)(v50 + 516) = 0;
      *((_OWORD *)v50 + 38) = 0u;
      *(_OWORD *)(v50 + 580) = 0u;
      *(_OWORD *)(v50 + 596) = 0u;
      *(_OWORD *)(v50 + 564) = 0u;
      *a3 = v50 + 32;
      a3[1] = v50;
      return;
    case 8:
      v51 = operator new(4uLL);
      *v51 = 0;
      v52 = operator new(0x108uLL);
      v52[1] = 0;
      v52[2] = 0;
      *v52 = &off_24EC6B648;
      v52[3] = off_24EC678F0;
      v93 = 0;
      v94 = 0;
      v95 = 0;
      v96 = 0;
      v97 = 0;
      v98 = 0;
      v99 = 0;
      v100 = 0;
      v101 = 0;
      v90 = 0;
      v91 = 0;
      v52[4] = &unk_24EC67950;
      LOBYTE(v92) = 0;
      sub_223B866E4((uint64_t)&v90, (uint64_t)(v52 + 5));
      *((_BYTE *)v52 + 224) = 7;
      *((_BYTE *)v52 + 232) = 7;
      v52[31] = 0;
      v52[32] = 0;
      v52[30] = 0;
      v53 = operator new(4uLL);
      v52[30] = v53;
      *v53++ = *v51;
      v52[31] = v53;
      v52[32] = v53;
      v52[3] = off_24EC67848;
      v52[4] = &unk_24EC678A8;
      sub_2231AD66C((uint64_t)&v90);
      operator delete(v51);
      *a3 = v52 + 3;
      a3[1] = v52;
      return;
    case 9:
      memset(v83, 0, 24);
      sub_224506BA4((uint64_t)&v90, (uint64_t)v83);
      v55 = v90;
      v54 = v91;
      v78[0] = v90;
      v78[1] = v91;
      *(_OWORD *)&v78[2] = v92;
      if (*(_QWORD *)v83)
      {
        *(_QWORD *)&v83[8] = *(_QWORD *)v83;
        operator delete(*(void **)v83);
      }
      v18 = (char *)operator new(0x108uLL);
      *((_QWORD *)v18 + 1) = 0;
      *((_QWORD *)v18 + 2) = 0;
      *(_QWORD *)v18 = &off_24EC6B8D8;
      *(_QWORD *)v83 = v55;
      *(_QWORD *)&v83[8] = v54;
      v78[0] = 0;
      v78[1] = 0;
      *(_OWORD *)&v83[16] = *(_OWORD *)&v78[2];
      *((_QWORD *)v18 + 3) = off_24EC68938;
      v19 = v18 + 24;
      v93 = 0;
      v94 = 0;
      v95 = 0;
      v96 = 0;
      v97 = 0;
      v98 = 0;
      v99 = 0;
      v100 = 0;
      v101 = 0;
      v90 = 0;
      v91 = 0;
      *((_QWORD *)v18 + 4) = &unk_24EC68998;
      LOBYTE(v92) = 0;
      sub_223B866E4((uint64_t)&v90, (uint64_t)(v18 + 40));
      *((_QWORD *)v18 + 28) = *(_QWORD *)&v83[16];
      *((_QWORD *)v18 + 29) = v55;
      *((_QWORD *)v18 + 30) = v54;
      if (v54)
      {
        v56 = (unint64_t *)&v54->__shared_owners_;
        do
          v57 = __ldxr(v56);
        while (__stxr(v57 + 1, v56));
        *(_OWORD *)(v18 + 248) = *(_OWORD *)&v83[16];
        *((_QWORD *)v18 + 3) = off_24EC68890;
        *((_QWORD *)v18 + 4) = &unk_24EC688F0;
        sub_2231AD66C((uint64_t)&v90);
        do
          v58 = __ldaxr(v56);
        while (__stlxr(v58 - 1, v56));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      else
      {
        *(_OWORD *)(v18 + 248) = *(_OWORD *)&v83[16];
        *((_QWORD *)v18 + 3) = off_24EC68890;
        *((_QWORD *)v18 + 4) = &unk_24EC688F0;
        sub_2231AD66C((uint64_t)&v90);
      }
      v69 = (std::__shared_weak_count *)v78[1];
      if (!v78[1])
        goto LABEL_154;
      v75 = (unint64_t *)((char *)v78[1] + 8);
      do
        v71 = __ldaxr(v75);
      while (__stlxr(v71 - 1, v75));
      goto LABEL_152;
    case 10:
      HIBYTE(v78[2]) = 0;
      LOBYTE(v78[0]) = 0;
      LODWORD(v78[3]) = 6;
      HIBYTE(v78[6]) = 0;
      LOBYTE(v78[4]) = 0;
      LODWORD(v79) = 0;
      HIBYTE(v81[0]) = 0;
      LOBYTE(v80) = 0;
      HIBYTE(v82) = 0;
      v18 = (char *)operator new(0x150uLL);
      *((_QWORD *)v18 + 1) = 0;
      *((_QWORD *)v18 + 2) = 0;
      *(_QWORD *)v18 = &off_24EC6B928;
      *(_OWORD *)v83 = *(_OWORD *)v78;
      *(void **)&v83[16] = v78[2];
      memset(v78, 0, 24);
      *(_DWORD *)&v83[24] = 6;
      *(_OWORD *)__p = *(_OWORD *)&v78[4];
      *(void **)&__p[16] = v78[6];
      memset(&v78[4], 0, 24);
      LODWORD(v85) = 0;
      *(_OWORD *)v86 = v80;
      v87 = v81[0];
      v80 = 0uLL;
      memset(v81, 0, sizeof(v81));
      v89 = v82;
      *(_OWORD *)v88 = *(_OWORD *)&v81[1];
      v82 = 0;
      *((_QWORD *)v18 + 3) = &off_24EC68BE0;
      v19 = v18 + 24;
      v93 = 0;
      v94 = 0;
      v95 = 0;
      v96 = 0;
      v97 = 0;
      v98 = 0;
      v99 = 0;
      v100 = 0;
      v101 = 0;
      v90 = 0;
      v91 = 0;
      LOBYTE(v92) = 0;
      *((_QWORD *)v18 + 4) = &unk_24EC68C40;
      sub_223B866E4((uint64_t)&v90, (uint64_t)(v18 + 40));
      sub_22413CF54(v18 + 224, (__int128 *)v83);
      *((_QWORD *)v18 + 3) = &off_24EC68B38;
      *((_QWORD *)v18 + 4) = &unk_24EC68B98;
      sub_2231AD66C((uint64_t)&v90);
      if (SHIBYTE(v89) < 0)
      {
        operator delete(v88[0]);
        if ((SHIBYTE(v87) & 0x80000000) == 0)
        {
LABEL_93:
          if ((__p[23] & 0x80000000) == 0)
            goto LABEL_94;
          goto LABEL_141;
        }
      }
      else if ((SHIBYTE(v87) & 0x80000000) == 0)
      {
        goto LABEL_93;
      }
      operator delete(v86[0]);
      if ((__p[23] & 0x80000000) == 0)
      {
LABEL_94:
        if ((v83[23] & 0x80000000) == 0)
          goto LABEL_154;
        goto LABEL_142;
      }
LABEL_141:
      operator delete(*(void **)__p);
      if ((v83[23] & 0x80000000) == 0)
        goto LABEL_154;
LABEL_142:
      operator delete(*(void **)v83);
LABEL_154:
      *a3 = v19;
      a3[1] = v18;
      return;
    case 11:
      sub_224143FC4((uint64_t)v78);
      v4 = operator new(0x198uLL);
      v5 = v4;
      v4[1] = 0;
      v4[2] = 0;
      *v4 = &off_24EC6B978;
      v6 = v78[0];
      v78[0] = 0;
      *(_QWORD *)v83 = v6;
      v83[8] = 0;
      __p[0] = 0;
      v7 = LOBYTE(v78[4]);
      if (LOBYTE(v78[4]))
      {
        *(_OWORD *)&v83[8] = *(_OWORD *)&v78[1];
        *(void **)&v83[24] = v78[3];
        memset(&v78[1], 0, 24);
        __p[0] = 1;
      }
      __p[8] = 0;
      LOBYTE(v86[0]) = 0;
      v8 = v80;
      if ((_BYTE)v80)
      {
        *(_OWORD *)&__p[8] = *(_OWORD *)&v78[5];
        v85 = v79;
        v78[6] = 0;
        v79 = 0;
        v78[5] = 0;
        LOBYTE(v86[0]) = 1;
      }
      v93 = 0;
      v94 = 0;
      v95 = 0;
      v96 = 0;
      v97 = 0;
      v98 = 0;
      v99 = 0;
      v100 = 0;
      v101 = 0;
      v90 = 0;
      v91 = 0;
      v4[3] = off_24EC68DD0;
      v4[4] = &unk_24EC68E30;
      LOBYTE(v92) = 0;
      sub_223B866E4((uint64_t)&v90, (uint64_t)(v4 + 5));
      sub_22413D1C0((uint64_t)(v5 + 28), (uint64_t *)v83);
      v5[3] = off_24EC68D28;
      v5[4] = &unk_24EC68D88;
      sub_2231AD66C((uint64_t)&v90);
      if (v8 && SHIBYTE(v85) < 0)
        operator delete(*(void **)&__p[8]);
      if (v7 && (v83[31] & 0x80000000) != 0)
        operator delete(*(void **)&v83[8]);
      if (v6)
        MEMORY[0x227684CE8](v6, 0x1000C4072FAA15ELL);
      if ((_BYTE)v80 && SHIBYTE(v79) < 0)
        operator delete(v78[5]);
      if (LOBYTE(v78[4]) && SHIBYTE(v78[3]) < 0)
        operator delete(v78[1]);
      v9 = v78[0];
      v78[0] = 0;
      if (v9)
        MEMORY[0x227684CE8](v9, 0x1000C4072FAA15ELL);
      *a3 = v5 + 3;
      a3[1] = v5;
      return;
    case 12:
      v90 = 0;
      v91 = 0;
      *(_QWORD *)&v92 = 0;
      sub_22450908C((uint64_t)&v90, v83);
      v60 = *(_QWORD *)v83;
      v59 = *(std::__shared_weak_count **)&v83[8];
      v78[0] = *(void **)v83;
      v78[1] = *(void **)&v83[8];
      if (v90)
      {
        v91 = (std::__shared_weak_count *)v90;
        operator delete(v90);
      }
      v18 = (char *)operator new(0x100uLL);
      *((_QWORD *)v18 + 1) = 0;
      *((_QWORD *)v18 + 2) = 0;
      *(_QWORD *)v18 = &off_24EC6B9C8;
      *(_QWORD *)v83 = v60;
      *(_QWORD *)&v83[8] = v59;
      v78[0] = 0;
      v78[1] = 0;
      *((_QWORD *)v18 + 3) = off_24EC68F70;
      v19 = v18 + 24;
      v93 = 0;
      v94 = 0;
      v95 = 0;
      v96 = 0;
      v97 = 0;
      v98 = 0;
      v99 = 0;
      v100 = 0;
      v101 = 0;
      v90 = 0;
      v91 = 0;
      *((_QWORD *)v18 + 4) = &unk_24EC68FD0;
      LOBYTE(v92) = 0;
      sub_223B866E4((uint64_t)&v90, (uint64_t)(v18 + 40));
      v18[224] = *(_BYTE *)v60;
      *((_QWORD *)v18 + 29) = *(_QWORD *)(v60 + 56) >> 2;
      *((_QWORD *)v18 + 30) = v60;
      *((_QWORD *)v18 + 31) = v59;
      if (v59)
      {
        v61 = (unint64_t *)&v59->__shared_owners_;
        do
          v62 = __ldxr(v61);
        while (__stxr(v62 + 1, v61));
        *((_QWORD *)v18 + 3) = off_24EC68EC8;
        *((_QWORD *)v18 + 4) = &unk_24EC68F28;
        sub_2231AD66C((uint64_t)&v90);
        do
          v63 = __ldaxr(v61);
        while (__stlxr(v63 - 1, v61));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
      }
      else
      {
        *((_QWORD *)v18 + 3) = off_24EC68EC8;
        *((_QWORD *)v18 + 4) = &unk_24EC68F28;
        sub_2231AD66C((uint64_t)&v90);
      }
      v69 = (std::__shared_weak_count *)v78[1];
      if (!v78[1])
        goto LABEL_154;
      v76 = (unint64_t *)((char *)v78[1] + 8);
      do
        v71 = __ldaxr(v76);
      while (__stlxr(v71 - 1, v76));
      goto LABEL_152;
    case 13:
      v90 = 0;
      v91 = 0;
      *(_QWORD *)&v92 = 0;
      sub_224509578((uint64_t)&v90, v83);
      v65 = *(_QWORD *)v83;
      v64 = *(std::__shared_weak_count **)&v83[8];
      v78[0] = *(void **)v83;
      v78[1] = *(void **)&v83[8];
      if (v90)
      {
        v91 = (std::__shared_weak_count *)v90;
        operator delete(v90);
      }
      v18 = (char *)operator new(0x100uLL);
      *((_QWORD *)v18 + 1) = 0;
      *((_QWORD *)v18 + 2) = 0;
      *(_QWORD *)v18 = &off_24EC6BA18;
      *(_QWORD *)v83 = v65;
      *(_QWORD *)&v83[8] = v64;
      v78[0] = 0;
      v78[1] = 0;
      *((_QWORD *)v18 + 3) = off_24EC69110;
      v19 = v18 + 24;
      v93 = 0;
      v94 = 0;
      v95 = 0;
      v96 = 0;
      v97 = 0;
      v98 = 0;
      v99 = 0;
      v100 = 0;
      v101 = 0;
      v90 = 0;
      v91 = 0;
      *((_QWORD *)v18 + 4) = &unk_24EC69170;
      LOBYTE(v92) = 0;
      sub_223B866E4((uint64_t)&v90, (uint64_t)(v18 + 40));
      v18[224] = *(_BYTE *)v65;
      *((_QWORD *)v18 + 29) = *(_QWORD *)(v65 + 56) / 6uLL;
      *((_QWORD *)v18 + 30) = v65;
      *((_QWORD *)v18 + 31) = v64;
      if (v64)
      {
        v66 = (unint64_t *)&v64->__shared_owners_;
        do
          v67 = __ldxr(v66);
        while (__stxr(v67 + 1, v66));
        *((_QWORD *)v18 + 3) = off_24EC69068;
        *((_QWORD *)v18 + 4) = &unk_24EC690C8;
        sub_2231AD66C((uint64_t)&v90);
        do
          v68 = __ldaxr(v66);
        while (__stlxr(v68 - 1, v66));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      else
      {
        *((_QWORD *)v18 + 3) = off_24EC69068;
        *((_QWORD *)v18 + 4) = &unk_24EC690C8;
        sub_2231AD66C((uint64_t)&v90);
      }
      v69 = (std::__shared_weak_count *)v78[1];
      if (!v78[1])
        goto LABEL_154;
      v77 = (unint64_t *)((char *)v78[1] + 8);
      do
        v71 = __ldaxr(v77);
      while (__stlxr(v71 - 1, v77));
LABEL_152:
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
      goto LABEL_154;
    default:
      *a3 = 0;
      a3[1] = 0;
      return;
  }
}

void sub_22413A958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *__p,uint64_t a43)
{
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  void *v47;

  v46 = *(unsigned int *)(v43 + 216);
  if ((_DWORD)v46 != -1)
    ((void (*)(char *, uint64_t))off_24EC6B6D0[v46])(&a41, v44);
  *(_DWORD *)(v43 + 216) = -1;
  sub_2231AD66C((uint64_t)&__p);
  sub_223294C8C((uint64_t *)&a23);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v43);
  operator delete(v47);
  sub_223294C8C(&a9);
  _Unwind_Resume(a1);
}

void sub_22413AD8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223294C8C(&a9);
  _Unwind_Resume(a1);
}

void sub_22413ADAC(uint64_t (***lpsrc)()@<X2>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t (***v4)();
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;

  v4 = lpsrc;
  switch(a2)
  {
    case 1:
      if (*lpsrc != &off_24EC6A528)
      {
        v4 = 0;
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/include/Kit/Visualization/IData.h", 693, (uint64_t)"ptr != nullptr", 14, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_37;
        }
      }
      v5 = operator new(0x140uLL);
      v5[1] = 0;
      v5[2] = 0;
      *v5 = &off_24EC6BA68;
      sub_2240195C8(v5 + 3, (uint64_t)v4);
      goto LABEL_16;
    case 2:
      sub_22413B3B0(&v18, lpsrc);
      goto LABEL_23;
    case 3:
      sub_22413B550(&v18, lpsrc);
      goto LABEL_23;
    case 4:
      sub_22413B6F4(&v18, lpsrc);
      goto LABEL_23;
    case 5:
      sub_22413B8A4(&v18, lpsrc);
      goto LABEL_23;
    case 6:
      if (*lpsrc == &off_24EC66920)
      {
        v6 = (uint64_t)(lpsrc + 1);
        v7 = (uint64_t)(lpsrc + 4);
      }
      else
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/include/Kit/Visualization/DataIO.h", 1045, (uint64_t)"ptr != nullptr", 14, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
LABEL_37:
          abort();
        }
        v6 = 8;
        v7 = 32;
      }
      v9 = operator new(0xF0uLL);
      v10 = v9;
      v9[1] = 0;
      v9[2] = 0;
      *v9 = &off_24EC6B838;
      v12 = *(_QWORD *)v6;
      v11 = *(std::__shared_weak_count **)(v6 + 8);
      *(_QWORD *)&v18 = *(_QWORD *)v6;
      *((_QWORD *)&v18 + 1) = v11;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
      }
      v9[3] = off_24EC685D8;
      v9[4] = &unk_24EC68638;
      sub_223B866E4(v7, (uint64_t)(v9 + 5));
      v10[28] = v12;
      v10[29] = v11;
      if (v11)
      {
        v15 = (unint64_t *)&v11->__shared_owners_;
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
        v10[3] = off_24EC68530;
        v10[4] = &unk_24EC68590;
        do
          v17 = __ldaxr(v15);
        while (__stlxr(v17 - 1, v15));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      else
      {
        v10[3] = off_24EC68530;
        v10[4] = &unk_24EC68590;
      }
      *a3 = v10 + 3;
      a3[1] = v10;
      return;
    case 7:
      v8 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24EC6A3F8, (const struct __class_type_info *)&unk_24EC281D0, 0);
      if (!v8
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/include/Kit/Visualization/IData.h", 693, (uint64_t)"ptr != nullptr", 14, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_37;
      }
      v5 = operator new(0x270uLL);
      v5[1] = 0;
      v5[2] = 0;
      *v5 = &off_24EC6BAB8;
      sub_22401A2B4((uint64_t)(v5 + 3), (uint64_t)v8);
LABEL_16:
      *a3 = v5 + 4;
      a3[1] = v5;
      break;
    case 8:
      sub_22413B16C(&v18, lpsrc);
      goto LABEL_23;
    case 9:
      sub_22413BA68(&v18, lpsrc);
      goto LABEL_23;
    case 10:
      sub_22413BC20(&v18, lpsrc);
      goto LABEL_23;
    case 11:
      sub_22413BF54(&v18, lpsrc);
      goto LABEL_23;
    case 12:
      sub_22413C28C(&v18, lpsrc);
      goto LABEL_23;
    case 13:
      sub_22413C430(&v18, lpsrc);
LABEL_23:
      *(_OWORD *)a3 = v18;
      break;
    default:
      *a3 = 0;
      a3[1] = 0;
      break;
  }
}

void sub_22413B11C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  void *v11;

  sub_223167354((uint64_t)&a9);
  std::__shared_weak_count::~__shared_weak_count(v9);
  operator delete(v11);
  _Unwind_Resume(a1);
}

void sub_22413B13C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_22413B154(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_22413B16C(_QWORD *a1, void *lpsrc)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _BYTE *v8;
  _BYTE *v9;
  size_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v3 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24EC6A3F8, (const struct __class_type_info *)&unk_24EC20A28, 0);
  if (v3)
  {
    v4 = (uint64_t)v3 + 8;
    v5 = (uint64_t)v3 + 48;
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/include/Kit/Visualization/DataIO.h", 1045, (uint64_t)"ptr != nullptr", 14, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = 8;
    v5 = 48;
  }
  v6 = operator new(0x108uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_24EC6B648;
  v7 = *(_BYTE *)v4;
  v9 = *(_BYTE **)(v4 + 8);
  v8 = *(_BYTE **)(v4 + 16);
  v10 = v8 - v9;
  if (v8 == v9)
  {
    v12 = 0;
    v11 = 0;
  }
  else
  {
    if ((v10 & 0x8000000000000000) != 0)
      sub_2240336DC();
    v11 = (char *)operator new(v8 - v9);
    v12 = &v11[v10];
    memcpy(v11, v9, v10);
  }
  v6[3] = off_24EC678F0;
  v6[4] = &unk_24EC67950;
  sub_223B866E4(v5, (uint64_t)(v6 + 5));
  v6[30] = 0;
  *((_BYTE *)v6 + 224) = v7;
  *((_BYTE *)v6 + 232) = v7;
  v6[31] = 0;
  v6[32] = 0;
  v13 = v12 - v11;
  if (v12 != v11)
  {
    if (v13 < 0)
      sub_2240336DC();
    v14 = (char *)operator new(v12 - v11);
    v6[30] = v14;
    v15 = &v14[v13];
    v6[32] = &v14[v13];
    memcpy(v14, v11, v12 - v11);
    v6[31] = v15;
  }
  v6[3] = off_24EC67848;
  v6[4] = &unk_24EC678A8;
  if (v11)
    operator delete(v11);
  *a1 = v6 + 3;
  a1[1] = v6;
}

void sub_22413B32C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::__shared_weak_count *v17;
  void *v18;
  void *v20;

  if (v18)
    operator delete(v18);
  std::__shared_weak_count::~__shared_weak_count(v17);
  operator delete(v20);
  _Unwind_Resume(a1);
}

void sub_22413B3B0(_QWORD *a1, void *lpsrc)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;

  v3 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24EC6A3F8, (const struct __class_type_info *)&unk_24EC2B808, 0);
  if (v3)
  {
    v4 = (uint64_t)v3 + 8;
    v5 = (uint64_t)v3 + 32;
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/include/Kit/Visualization/DataIO.h", 1045, (uint64_t)"ptr != nullptr", 14, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = 8;
    v5 = 32;
  }
  v6 = operator new(0x100uLL);
  v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_24EC6B6F8;
  v9 = *(_QWORD *)v4;
  v8 = *(std::__shared_weak_count **)(v4 + 8);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v6[3] = off_24EC67B28;
  v6[4] = &unk_24EC67B88;
  sub_223B866E4(v5, (uint64_t)(v6 + 5));
  *((_BYTE *)v7 + 224) = *(_BYTE *)v9;
  v7[29] = *(_QWORD *)(v9 + 56);
  v7[30] = v9;
  v7[31] = v8;
  if (v8)
  {
    v12 = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v7[3] = off_24EC67A80;
    v7[4] = &unk_24EC67AE0;
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    v7[3] = off_24EC67A80;
    v7[4] = &unk_24EC67AE0;
  }
  *a1 = v7 + 3;
  a1[1] = v7;
}

void sub_22413B530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  void *v11;

  sub_223167354((uint64_t)&a9);
  std::__shared_weak_count::~__shared_weak_count(v9);
  operator delete(v11);
  _Unwind_Resume(a1);
}

void sub_22413B550(_QWORD *a1, void *lpsrc)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;

  v3 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24EC6A3F8, (const struct __class_type_info *)&unk_24EC27C50, 0);
  if (v3)
  {
    v4 = (uint64_t)v3 + 8;
    v5 = (uint64_t)v3 + 32;
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/include/Kit/Visualization/DataIO.h", 1045, (uint64_t)"ptr != nullptr", 14, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = 8;
    v5 = 32;
  }
  v6 = operator new(0x100uLL);
  v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_24EC6B748;
  v9 = *(_QWORD *)v4;
  v8 = *(std::__shared_weak_count **)(v4 + 8);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v6[3] = off_24EC67D00;
  v6[4] = &unk_24EC67D60;
  sub_223B866E4(v5, (uint64_t)(v6 + 5));
  *((_BYTE *)v7 + 224) = *(_BYTE *)v9;
  v7[29] = *(_QWORD *)(v9 + 56) >> 1;
  v7[30] = v9;
  v7[31] = v8;
  if (v8)
  {
    v12 = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v7[3] = off_24EC67C58;
    v7[4] = &unk_24EC67CB8;
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    v7[3] = off_24EC67C58;
    v7[4] = &unk_24EC67CB8;
  }
  *a1 = v7 + 3;
  a1[1] = v7;
}

void sub_22413B6D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  void *v11;

  sub_223167354((uint64_t)&a9);
  std::__shared_weak_count::~__shared_weak_count(v9);
  operator delete(v11);
  _Unwind_Resume(a1);
}

void sub_22413B6F4(_QWORD *a1, void *lpsrc)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;

  v3 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24EC6A3F8, (const struct __class_type_info *)&unk_24EC68060, 0);
  if (v3)
  {
    v4 = (uint64_t)v3 + 8;
    v5 = (uint64_t)v3 + 32;
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/include/Kit/Visualization/DataIO.h", 1045, (uint64_t)"ptr != nullptr", 14, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = 8;
    v5 = 32;
  }
  v6 = operator new(0x100uLL);
  v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_24EC6B798;
  v9 = *(_QWORD *)v4;
  v8 = *(std::__shared_weak_count **)(v4 + 8);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v6[3] = off_24EC67ED8;
  v6[4] = &unk_24EC67F38;
  sub_223B866E4(v5, (uint64_t)(v6 + 5));
  *((_BYTE *)v7 + 224) = *(_BYTE *)v9;
  v7[29] = *(_QWORD *)(v9 + 56) / 3uLL;
  v7[30] = v9;
  v7[31] = v8;
  if (v8)
  {
    v12 = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v7[3] = off_24EC67E30;
    v7[4] = &unk_24EC67E90;
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    v7[3] = off_24EC67E30;
    v7[4] = &unk_24EC67E90;
  }
  *a1 = v7 + 3;
  a1[1] = v7;
}

void sub_22413B884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  void *v11;

  sub_223167354((uint64_t)&a9);
  std::__shared_weak_count::~__shared_weak_count(v9);
  operator delete(v11);
  _Unwind_Resume(a1);
}

void sub_22413B8A4(_QWORD *a1, void *lpsrc)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD v15[2];
  std::__shared_weak_count *v16;

  v3 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24EC6A3F8, (const struct __class_type_info *)&unk_24EC282A0, 0);
  if (v3)
  {
    v4 = (uint64_t)v3 + 8;
    v5 = (uint64_t)v3 + 32;
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/include/Kit/Visualization/DataIO.h", 1045, (uint64_t)"ptr != nullptr", 14, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = 8;
    v5 = 32;
  }
  v6 = operator new(0x108uLL);
  v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_24EC6B7E8;
  v9 = *(_QWORD *)(v4 + 8);
  v8 = *(std::__shared_weak_count **)(v4 + 16);
  v15[0] = &off_24EC6D000;
  v15[1] = v9;
  v16 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v6[3] = off_24EC68180;
  v6[4] = &unk_24EC681E0;
  sub_223B866E4(v5, (uint64_t)(v6 + 5));
  sub_224151B5C((uint64_t)(v7 + 28), (uint64_t)v15);
  v7[3] = off_24EC680D8;
  v7[4] = &unk_24EC68138;
  v15[0] = &off_24EC6D000;
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  *a1 = v7 + 3;
  a1[1] = v7;
}

void sub_22413BA10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  void *v19;

  v18 = *(unsigned int *)(v15 + 216);
  if ((_DWORD)v18 != -1)
    ((void (*)(char *, uint64_t))off_24EC6B6D0[v18])(&a15, v16);
  *(_DWORD *)(v15 + 216) = -1;
  sub_224159450(&a9);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v15);
  operator delete(v19);
  _Unwind_Resume(a1);
}

void sub_22413BA68(_QWORD *a1, void *lpsrc)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;

  v3 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24EC6A3F8, (const struct __class_type_info *)&unk_24EC68AC0, 0);
  if (v3)
  {
    v4 = (uint64_t)v3 + 8;
    v5 = (uint64_t)v3 + 48;
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/include/Kit/Visualization/DataIO.h", 1045, (uint64_t)"ptr != nullptr", 14, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = 8;
    v5 = 48;
  }
  v6 = operator new(0x108uLL);
  v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_24EC6B8D8;
  v9 = *(_QWORD *)v4;
  v8 = *(std::__shared_weak_count **)(v4 + 8);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v15 = *(_OWORD *)(v4 + 16);
  v6[3] = off_24EC68938;
  v6[4] = &unk_24EC68998;
  sub_223B866E4(v5, (uint64_t)(v6 + 5));
  v7[28] = v15;
  v7[29] = v9;
  v7[30] = v8;
  if (v8)
  {
    v12 = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    *(_OWORD *)(v7 + 31) = v15;
    v7[3] = off_24EC68890;
    v7[4] = &unk_24EC688F0;
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    *(_OWORD *)(v7 + 31) = v15;
    v7[3] = off_24EC68890;
    v7[4] = &unk_24EC688F0;
  }
  *a1 = v7 + 3;
  a1[1] = v7;
}

void sub_22413BC00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  void *v11;

  sub_223167354((uint64_t)&a9);
  std::__shared_weak_count::~__shared_weak_count(v9);
  operator delete(v11);
  _Unwind_Resume(a1);
}

void sub_22413BC20(_QWORD *a1, void *lpsrc)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  char *v11;
  void *v12[2];
  uint64_t v13;
  int v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  uint64_t v19;
  __int128 __p;
  uint64_t v21;

  v3 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24EC6A3F8, (const struct __class_type_info *)&unk_24EC27D20, 0);
  if (v3)
  {
    v4 = (uint64_t)v3 + 8;
    v5 = (uint64_t)v3 + 128;
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/include/Kit/Visualization/DataIO.h", 1045, (uint64_t)"ptr != nullptr", 14, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = 8;
    v5 = 128;
  }
  v6 = operator new(0x150uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_24EC6B928;
  if (*(char *)(v4 + 23) < 0)
  {
    sub_223197FA4(v12, *(void **)v4, *(_QWORD *)(v4 + 8));
  }
  else
  {
    v7 = *(_OWORD *)v4;
    v13 = *(_QWORD *)(v4 + 16);
    *(_OWORD *)v12 = v7;
  }
  v14 = *(_DWORD *)(v4 + 24);
  if (*(char *)(v4 + 55) < 0)
  {
    sub_223197FA4(&v15, *(void **)(v4 + 32), *(_QWORD *)(v4 + 40));
  }
  else
  {
    v8 = *(_OWORD *)(v4 + 32);
    v16 = *(_QWORD *)(v4 + 48);
    v15 = v8;
  }
  v17 = *(_DWORD *)(v4 + 56);
  if (*(char *)(v4 + 87) < 0)
  {
    sub_223197FA4(&v18, *(void **)(v4 + 64), *(_QWORD *)(v4 + 72));
  }
  else
  {
    v9 = *(_OWORD *)(v4 + 64);
    v19 = *(_QWORD *)(v4 + 80);
    v18 = v9;
  }
  if (*(char *)(v4 + 111) < 0)
  {
    sub_223197FA4(&__p, *(void **)(v4 + 88), *(_QWORD *)(v4 + 96));
  }
  else
  {
    v10 = *(_OWORD *)(v4 + 88);
    v21 = *(_QWORD *)(v4 + 104);
    __p = v10;
  }
  v6[3] = &off_24EC68BE0;
  v6[4] = &unk_24EC68C40;
  sub_223B866E4(v5, (uint64_t)(v6 + 5));
  sub_22413CF54((_BYTE *)v6 + 224, (__int128 *)v12);
  v6[3] = &off_24EC68B38;
  v6[4] = &unk_24EC68B98;
  if (SHIBYTE(v21) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v19) & 0x80000000) == 0)
    {
LABEL_19:
      v11 = (char *)(v6 + 3);
      if ((SHIBYTE(v16) & 0x80000000) == 0)
        goto LABEL_20;
LABEL_24:
      operator delete((void *)v15);
      if ((SHIBYTE(v13) & 0x80000000) == 0)
        goto LABEL_21;
      goto LABEL_25;
    }
  }
  else if ((SHIBYTE(v19) & 0x80000000) == 0)
  {
    goto LABEL_19;
  }
  operator delete((void *)v18);
  v11 = (char *)(v6 + 3);
  if (SHIBYTE(v16) < 0)
    goto LABEL_24;
LABEL_20:
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
LABEL_21:
    *a1 = v11;
    a1[1] = v6;
    return;
  }
LABEL_25:
  operator delete(v12[0]);
  *a1 = v11;
  a1[1] = v6;
}

void sub_22413BE58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  std::__shared_weak_count *v28;
  void *v30;
  void *v31;

  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a14 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a14 & 0x80000000) == 0)
  {
LABEL_4:
    std::__shared_weak_count::~__shared_weak_count(v28);
    operator delete(v30);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a9);
  std::__shared_weak_count::~__shared_weak_count(v28);
  operator delete(v31);
  _Unwind_Resume(a1);
}

void sub_22413BEE4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_22413BEFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  void *v14;

  v13 = *(unsigned int *)(v9 + 216);
  if ((_DWORD)v13 != -1)
    ((void (*)(uint64_t, uint64_t))off_24EC6B6D0[v13])(v11 - 33, v10);
  *(_DWORD *)(v9 + 216) = -1;
  sub_223293AA0((uint64_t)&a9);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v9);
  operator delete(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_22413BF54(_QWORD *a1, void *lpsrc)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t result;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  char v16;
  __int128 __p;
  uint64_t v18;
  char v19;

  v3 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24EC6A3F8, (const struct __class_type_info *)&unk_24EC283C0, 0);
  if (v3)
  {
    v4 = (uint64_t)v3 + 8;
    v5 = (uint64_t)v3 + 80;
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/include/Kit/Visualization/DataIO.h", 1045, (uint64_t)"ptr != nullptr", 14, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = 8;
    v5 = 80;
  }
  v6 = operator new(0x198uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_24EC6B978;
  v7 = *(_QWORD *)v4;
  v8 = operator new();
  *(_BYTE *)v8 = 0;
  *(_DWORD *)(v8 + 128) = -1;
  v9 = *(unsigned int *)(v7 + 128);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(uint64_t *, uint64_t, uint64_t))off_24EC6BD10[v9])(&v13, v8, v7);
    *(_DWORD *)(v8 + 128) = v9;
  }
  *(_BYTE *)(v8 + 136) = *(_BYTE *)(v7 + 136);
  v13 = v8;
  LOBYTE(v14) = 0;
  v16 = 0;
  if (*(_BYTE *)(v4 + 32))
  {
    if (*(char *)(v4 + 31) < 0)
    {
      sub_223197FA4(&v14, *(void **)(v4 + 8), *(_QWORD *)(v4 + 16));
    }
    else
    {
      v10 = *(_OWORD *)(v4 + 8);
      v15 = *(_QWORD *)(v4 + 24);
      v14 = v10;
    }
    v16 = 1;
  }
  LOBYTE(__p) = 0;
  v19 = 0;
  if (*(_BYTE *)(v4 + 64))
  {
    if (*(char *)(v4 + 63) < 0)
    {
      sub_223197FA4(&__p, *(void **)(v4 + 40), *(_QWORD *)(v4 + 48));
    }
    else
    {
      v11 = *(_OWORD *)(v4 + 40);
      v18 = *(_QWORD *)(v4 + 56);
      __p = v11;
    }
    v19 = 1;
  }
  v6[3] = off_24EC68DD0;
  v6[4] = &unk_24EC68E30;
  sub_223B866E4(v5, (uint64_t)(v6 + 5));
  sub_22413D1C0((uint64_t)(v6 + 28), &v13);
  v6[3] = off_24EC68D28;
  v6[4] = &unk_24EC68D88;
  if (v19 && SHIBYTE(v18) < 0)
    operator delete((void *)__p);
  if (v16 && SHIBYTE(v15) < 0)
    operator delete((void *)v14);
  result = v13;
  v13 = 0;
  if (result)
    result = MEMORY[0x227684CE8](result, 0x1000C4072FAA15ELL);
  *a1 = v6 + 3;
  a1[1] = v6;
  return result;
}

void sub_22413C1A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  std::__shared_weak_count *v23;
  void *v25;
  void *v26;

  if (a23 && a22 < 0)
    operator delete(__p);
  if (a16 && a15 < 0)
    operator delete(a10);
  if (a9)
  {
    MEMORY[0x227684CE8](a9, 0x1000C4072FAA15ELL);
    std::__shared_weak_count::~__shared_weak_count(v23);
    operator delete(v25);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::~__shared_weak_count(v23);
  operator delete(v26);
  _Unwind_Resume(a1);
}

void sub_22413C28C(_QWORD *a1, void *lpsrc)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;

  v3 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24EC6A3F8, (const struct __class_type_info *)&unk_24EC59EF8, 0);
  if (v3)
  {
    v4 = (uint64_t)v3 + 8;
    v5 = (uint64_t)v3 + 32;
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/include/Kit/Visualization/DataIO.h", 1045, (uint64_t)"ptr != nullptr", 14, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = 8;
    v5 = 32;
  }
  v6 = operator new(0x100uLL);
  v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_24EC6B9C8;
  v9 = *(_QWORD *)v4;
  v8 = *(std::__shared_weak_count **)(v4 + 8);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v6[3] = off_24EC68F70;
  v6[4] = &unk_24EC68FD0;
  sub_223B866E4(v5, (uint64_t)(v6 + 5));
  *((_BYTE *)v7 + 224) = *(_BYTE *)v9;
  v7[29] = *(_QWORD *)(v9 + 56) >> 2;
  v7[30] = v9;
  v7[31] = v8;
  if (v8)
  {
    v12 = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v7[3] = off_24EC68EC8;
    v7[4] = &unk_24EC68F28;
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    v7[3] = off_24EC68EC8;
    v7[4] = &unk_24EC68F28;
  }
  *a1 = v7 + 3;
  a1[1] = v7;
}

void sub_22413C410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  void *v11;

  sub_223167354((uint64_t)&a9);
  std::__shared_weak_count::~__shared_weak_count(v9);
  operator delete(v11);
  _Unwind_Resume(a1);
}

void sub_22413C430(_QWORD *a1, void *lpsrc)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;

  v3 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24EC6A3F8, (const struct __class_type_info *)&unk_24EC69260, 0);
  if (v3)
  {
    v4 = (uint64_t)v3 + 8;
    v5 = (uint64_t)v3 + 32;
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/include/Kit/Visualization/DataIO.h", 1045, (uint64_t)"ptr != nullptr", 14, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = 8;
    v5 = 32;
  }
  v6 = operator new(0x100uLL);
  v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_24EC6BA18;
  v9 = *(_QWORD *)v4;
  v8 = *(std::__shared_weak_count **)(v4 + 8);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v6[3] = off_24EC69110;
  v6[4] = &unk_24EC69170;
  sub_223B866E4(v5, (uint64_t)(v6 + 5));
  *((_BYTE *)v7 + 224) = *(_BYTE *)v9;
  v7[29] = *(_QWORD *)(v9 + 56) / 6uLL;
  v7[30] = v9;
  v7[31] = v8;
  if (v8)
  {
    v12 = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v7[3] = off_24EC69068;
    v7[4] = &unk_24EC690C8;
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    v7[3] = off_24EC69068;
    v7[4] = &unk_24EC690C8;
  }
  *a1 = v7 + 3;
  a1[1] = v7;
}

void sub_22413C5C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  void *v11;

  sub_223167354((uint64_t)&a9);
  std::__shared_weak_count::~__shared_weak_count(v9);
  operator delete(v11);
  _Unwind_Resume(a1);
}

BOOL sub_22413C5E0(uint64_t a1, int a2)
{
  return (a2 - 1) < 0xD;
}

uint64_t sub_22413C5F0(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  unsigned int v3;
  unsigned int v4;
  _BYTE v5[24];
  int v6;
  char v7;
  _QWORD v8[2];

  v4 = a2;
  if (a2 - 1 >= 0xD)
    return sub_22413C6F8("unknown type id ", &v4);
  v3 = a2;
  v6 = 0;
  sub_22413D618((uint64_t)v8, (uint64_t)v5, &v3);
  if (v6 == -1)
    sub_22316DD70();
  v8[0] = &v7;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC6B6B8[v6])(v8, v5);
  if (v6 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC6B6A0[v6])(v8, v5);
  return result;
}

void sub_22413C6C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24EC6B6A0[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_22413C6F8(char *__s, unsigned int *a2)
{
  uint64_t result;
  _DWORD v4[6];
  int v5;
  std::string v6;
  _QWORD v7[5];
  _QWORD *v8;

  v5 = 0;
  sub_223846924(v4, __s);
  std::to_string(&v6, *a2);
  v7[0] = v4;
  v7[1] = &v6;
  v7[2] = v4;
  v7[3] = &v6;
  v7[4] = &v6;
  if (v5 == -1)
    sub_22316DD70();
  v8 = v7;
  ((void (*)(_QWORD **, _DWORD *))off_24EC6B688[v5])(&v8, v4);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (v5 == -1)
    sub_22316DD70();
  v7[0] = &v6;
  result = ((uint64_t (*)(_QWORD *, _DWORD *))off_24EC6B6B8[v5])(v7, v4);
  if (v5 != -1)
    return ((uint64_t (*)(_QWORD *, _DWORD *))off_24EC6B6A0[v5])(v7, v4);
  return result;
}

void sub_22413C7F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22413C810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_22319B964((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x22413C800);
}

void sub_22413C834(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6B5F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22413C844(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6B5F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22413C874(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_22413C884(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6B648;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22413C894(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6B648;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22413C8C4(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)(a1 + 24) = off_24EC678F0;
  *(_QWORD *)(a1 + 32) = &unk_24EC67950;
  v2 = *(void **)(a1 + 240);
  if (v2)
  {
    *(_QWORD *)(a1 + 248) = v2;
    operator delete(v2);
  }
  v3 = *(unsigned int *)(a1 + 216);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v3))(&v4, a1 + 40);
  *(_DWORD *)(a1 + 216) = -1;
}

void sub_22413C93C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6B6F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22413C94C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6B6F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22413C97C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 + 24) = off_24EC67B28;
  *(_QWORD *)(a1 + 32) = &unk_24EC67B88;
  v2 = *(std::__shared_weak_count **)(a1 + 248);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 216);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 216);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v5))(&v6, a1 + 40);
LABEL_7:
  *(_DWORD *)(a1 + 216) = -1;
}

void sub_22413CA2C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6B748;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22413CA3C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6B748;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22413CA6C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 + 24) = off_24EC67D00;
  *(_QWORD *)(a1 + 32) = &unk_24EC67D60;
  v2 = *(std::__shared_weak_count **)(a1 + 248);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 216);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 216);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v5))(&v6, a1 + 40);
LABEL_7:
  *(_DWORD *)(a1 + 216) = -1;
}

void sub_22413CB1C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6B798;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22413CB2C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6B798;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22413CB5C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 + 24) = off_24EC67ED8;
  *(_QWORD *)(a1 + 32) = &unk_24EC67F38;
  v2 = *(std::__shared_weak_count **)(a1 + 248);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 216);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 216);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v5))(&v6, a1 + 40);
LABEL_7:
  *(_DWORD *)(a1 + 216) = -1;
}

void sub_22413CC0C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6B7E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22413CC1C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6B7E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22413CC4C(_QWORD *result)
{
  _QWORD *v1;
  uint64_t (*v2)(_QWORD);
  uint64_t v3;
  char v4;

  v1 = result;
  v2 = (uint64_t (*)(_QWORD))result[29];
  result[3] = off_24EC68180;
  result[4] = &unk_24EC681E0;
  if (v2)
    result = (_QWORD *)v2(0);
  v3 = *((unsigned int *)v1 + 54);
  if ((_DWORD)v3 != -1)
    result = (_QWORD *)((uint64_t (*)(char *, _QWORD *))*(&off_24EC66CC8 + v3))(&v4, v1 + 5);
  *((_DWORD *)v1 + 54) = -1;
  return result;
}

void sub_22413CCD8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6B838;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22413CCE8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6B838;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22413CD18(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 + 24) = off_24EC685D8;
  *(_QWORD *)(a1 + 32) = &unk_24EC68638;
  v2 = *(std::__shared_weak_count **)(a1 + 232);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 216);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 216);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v5))(&v6, a1 + 40);
LABEL_7:
  *(_DWORD *)(a1 + 216) = -1;
}

void sub_22413CDC8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6B888;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22413CDD8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6B888;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22413CE08(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_22413CE18(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6B8D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22413CE28(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6B8D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22413CE58(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 + 24) = off_24EC68938;
  *(_QWORD *)(a1 + 32) = &unk_24EC68998;
  v2 = *(std::__shared_weak_count **)(a1 + 240);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 216);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 216);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v5))(&v6, a1 + 40);
LABEL_7:
  *(_DWORD *)(a1 + 216) = -1;
}

void sub_22413CF08(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6B928;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22413CF18(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6B928;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22413CF48(uint64_t a1)
{
  return sub_22401D5D0(a1 + 24);
}

_BYTE *sub_22413CF54(_BYTE *__dst, __int128 *a2)
{
  __int128 v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  _BYTE *v8;
  __int128 v9;

  if (*((char *)a2 + 23) < 0)
  {
    sub_223197FA4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    __dst[24] = *((_DWORD *)a2 + 6);
    v5 = __dst + 32;
    if ((*((char *)a2 + 55) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
    __dst[24] = *((_DWORD *)a2 + 6);
    v5 = __dst + 32;
    if ((*((char *)a2 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      v6 = a2[2];
      *((_QWORD *)v5 + 2) = *((_QWORD *)a2 + 6);
      *(_OWORD *)v5 = v6;
      goto LABEL_6;
    }
  }
  sub_223197FA4(v5, *((void **)a2 + 4), *((_QWORD *)a2 + 5));
LABEL_6:
  *((_DWORD *)__dst + 14) = *((_DWORD *)a2 + 14);
  if (*((char *)a2 + 87) < 0)
  {
    sub_223197FA4(__dst + 64, *((void **)a2 + 8), *((_QWORD *)a2 + 9));
  }
  else
  {
    v7 = a2[4];
    *((_QWORD *)__dst + 10) = *((_QWORD *)a2 + 10);
    *((_OWORD *)__dst + 4) = v7;
  }
  v8 = __dst + 88;
  if (*((char *)a2 + 111) < 0)
  {
    sub_223197FA4(v8, *((void **)a2 + 11), *((_QWORD *)a2 + 12));
  }
  else
  {
    v9 = *(__int128 *)((char *)a2 + 88);
    *((_QWORD *)__dst + 13) = *((_QWORD *)a2 + 13);
    *(_OWORD *)v8 = v9;
  }
  return __dst;
}

void sub_22413D064(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 87) < 0)
  {
    operator delete(*v3);
    if ((*(char *)(v1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 23) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v1 + 55) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v2);
  if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_22413D0D8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6B978;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22413D0E8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6B978;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22413D118(uint64_t a1)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)(a1 + 24) = off_24EC68DD0;
  *(_QWORD *)(a1 + 32) = &unk_24EC68E30;
  if (*(_BYTE *)(a1 + 400) && *(char *)(a1 + 399) < 0)
    operator delete(*(void **)(a1 + 376));
  if (*(_BYTE *)(a1 + 368) && *(char *)(a1 + 367) < 0)
  {
    operator delete(*(void **)(a1 + 344));
    v2 = *(unsigned int *)(a1 + 216);
    if ((_DWORD)v2 == -1)
      goto LABEL_8;
    goto LABEL_7;
  }
  v2 = *(unsigned int *)(a1 + 216);
  if ((_DWORD)v2 != -1)
LABEL_7:
    ((void (*)(char *, uint64_t))off_24EC6B6D0[v2])(&v3, a1 + 40);
LABEL_8:
  *(_DWORD *)(a1 + 216) = -1;
}

uint64_t sub_22413D1C0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v12;
  char v13;

  v4 = *a2;
  v5 = operator new();
  *(_BYTE *)v5 = 0;
  *(_DWORD *)(v5 + 128) = -1;
  v6 = *(unsigned int *)(v4 + 128);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_24EC6BD10[v6])(&v13, v5, v4);
    *(_DWORD *)(v5 + 128) = v6;
  }
  *(_BYTE *)(v5 + 136) = *(_BYTE *)(v4 + 136);
  v12 = v5;
  v7 = sub_224145270(a1 + 8, &v12);
  v8 = v12;
  v12 = 0;
  if (v8)
    MEMORY[0x227684CE8](v8, 0x1000C4072FAA15ELL, v7);
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  if (*((_BYTE *)a2 + 32))
  {
    if (*((char *)a2 + 31) < 0)
    {
      sub_223197FA4((_BYTE *)(a1 + 120), (void *)a2[1], a2[2]);
    }
    else
    {
      v9 = *(_OWORD *)(a2 + 1);
      *(_QWORD *)(a1 + 136) = a2[3];
      *(_OWORD *)(a1 + 120) = v9;
    }
    *(_BYTE *)(a1 + 144) = 1;
  }
  *(_BYTE *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 176) = 0;
  if (*((_BYTE *)a2 + 64))
  {
    if (*((char *)a2 + 63) < 0)
    {
      sub_223197FA4((_BYTE *)(a1 + 152), (void *)a2[5], a2[6]);
    }
    else
    {
      v10 = *(_OWORD *)(a2 + 5);
      *(_QWORD *)(a1 + 168) = a2[7];
      *(_OWORD *)(a1 + 152) = v10;
    }
    *(_BYTE *)(a1 + 176) = 1;
  }
  return a1;
}

void sub_22413D31C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  char *v9;
  void **v10;
  void **v11;

  if (v9[176] && v9[175] < 0)
    operator delete(*v11);
  if (v9[144])
  {
    if (v9[143] < 0)
    {
      operator delete(*v10);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_22413D398(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6B9C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22413D3A8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6B9C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22413D3D8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 + 24) = off_24EC68F70;
  *(_QWORD *)(a1 + 32) = &unk_24EC68FD0;
  v2 = *(std::__shared_weak_count **)(a1 + 248);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 216);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 216);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v5))(&v6, a1 + 40);
LABEL_7:
  *(_DWORD *)(a1 + 216) = -1;
}

void sub_22413D488(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6BA18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22413D498(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6BA18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22413D4C8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 + 24) = off_24EC69110;
  *(_QWORD *)(a1 + 32) = &unk_24EC69170;
  v2 = *(std::__shared_weak_count **)(a1 + 248);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 216);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 216);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24EC66CC8 + v5))(&v6, a1 + 40);
LABEL_7:
  *(_DWORD *)(a1 + 216) = -1;
}

void sub_22413D578(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6BA68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22413D588(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6BA68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22413D5B8(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_22413D5C8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6BAB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22413D5D8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6BAB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22413D608(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_22413D618(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  void **v9;
  unint64_t v10;
  unint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__dst[2];
  unint64_t v21;
  _QWORD v22[5];
  _QWORD *v23;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_223195210(v5);
  v22[0] = v5;
  v6 = *a3;
  if (v6 >= 0xE
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/DataType.cpp", 43, (uint64_t)"idx < static_cast<uint32_t>(DataType::End)", 42, (uint64_t)&unk_2245AFCBA, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_2231813E8((_QWORD *)(v5 + 16), (uint64_t)(&off_24EC692F0)[2 * v6], (uint64_t)(&off_24EC692F0)[2 * v6 + 1]);
  v7 = *(_DWORD *)(v5 + 120);
  if ((v7 & 0x10) != 0)
  {
    v10 = *(_QWORD *)(v5 + 112);
    v11 = *(_QWORD *)(v5 + 72);
    if (v10 < v11)
    {
      *(_QWORD *)(v5 + 112) = v11;
      v10 = v11;
    }
    v12 = *(const void **)(v5 + 64);
    v8 = v10 - (_QWORD)v12;
    if (v10 - (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_24;
  }
  else
  {
    if ((v7 & 8) == 0)
    {
      v8 = 0;
      HIBYTE(v21) = 0;
      v9 = __dst;
      goto LABEL_16;
    }
    v12 = *(const void **)(v5 + 40);
    v8 = *(_QWORD *)(v5 + 56) - (_QWORD)v12;
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
LABEL_24:
      sub_22316DBC0();
  }
  if (v8 >= 0x17)
  {
    v13 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v13 = v8 | 7;
    v14 = v13 + 1;
    v9 = (void **)operator new(v13 + 1);
    __dst[1] = (void *)v8;
    v21 = v14 | 0x8000000000000000;
    __dst[0] = v9;
    goto LABEL_15;
  }
  HIBYTE(v21) = v8;
  v9 = __dst;
  if (v8)
LABEL_15:
    memmove(v9, v12, v8);
LABEL_16:
  *((_BYTE *)v9 + v8) = 0;
  v15 = v22[0];
  if (v22[0])
  {
    v16 = MEMORY[0x24BEDB7F0];
    v17 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v22[0] = *MEMORY[0x24BEDB7F0];
    v18 = *(_QWORD *)(v16 + 72);
    *(_QWORD *)(v15 + *(_QWORD *)(v17 - 24)) = *(_QWORD *)(v16 + 64);
    *(_QWORD *)(v15 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v15 + 16) = v18;
    if (*(char *)(v15 + 111) < 0)
      operator delete(*(void **)(v15 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v15 + 128);
    MEMORY[0x227684CE8](v15, 0x10B2C40EED050F3);
  }
  v22[0] = a2;
  v22[1] = __dst;
  v22[2] = a2;
  v22[3] = __dst;
  v22[4] = __dst;
  v19 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v19 == -1)
    sub_22316DD70();
  v23 = v22;
  ((void (*)(_QWORD **, uint64_t))off_24EC6B688[v19])(&v23, a2);
  if (SHIBYTE(v21) < 0)
    operator delete(__dst[0]);
}

void sub_22413D8BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_22413D8E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22413D8FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22456E764((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_22413D910(std::string::size_type a1@<X0>, const void ***a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *v13[2];
  uint64_t v14;
  void *__dst[2];
  uint64_t v16;
  char v17;
  void *v18;
  char v19;
  void *v20;
  char v21;
  char v22;
  char v23;
  __int128 v24;
  __int128 __p;
  uint64_t v26;
  unsigned __int8 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  char v34;
  const char *v35;

  v35 = "data";
  v5 = *(std::__shared_weak_count **)(a1 + 248);
  if (v5)
  {
    v7 = std::__shared_weak_count::lock(v5);
    if (v7)
    {
      v8 = *(_QWORD *)(a1 + 240);
      if (v8)
      {
        sub_22413EBAC(a3, v8, a1, a2);
LABEL_29:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
    }
  }
  else
  {
    v7 = 0;
  }
  sub_2241418C4((uint64_t)v13, (const char *)&v35);
  if (SHIBYTE(v14) < 0)
  {
    sub_223197FA4(__dst, v13[0], (unint64_t)v13[1]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)v13;
    v16 = v14;
  }
  v17 = 1;
  LOBYTE(v18) = 0;
  v22 = 0;
  v23 = 1;
  sub_22400C190(0xAu, (__int128 *)__dst, (uint64_t)&v24);
  *(_OWORD *)a3 = v24;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (!v34)
  {
    *(_BYTE *)(a3 + 120) = 0;
    if (!v23)
      goto LABEL_26;
LABEL_20:
    if (!v22)
      goto LABEL_23;
    if (v21 < 0)
    {
      operator delete(v20);
      if ((v19 & 0x80000000) == 0)
      {
LABEL_23:
        if (!v17)
          goto LABEL_26;
LABEL_24:
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        goto LABEL_26;
      }
    }
    else if ((v19 & 0x80000000) == 0)
    {
      goto LABEL_23;
    }
    operator delete(v18);
    if (!v17)
      goto LABEL_26;
    goto LABEL_24;
  }
  *(_BYTE *)(a3 + 40) = 0;
  v9 = v27;
  if (v27)
  {
    *(_OWORD *)(a3 + 16) = __p;
    *(_QWORD *)(a3 + 32) = v26;
    v26 = 0;
    __p = 0uLL;
    *(_BYTE *)(a3 + 40) = 1;
  }
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 104) = 0;
  if (v33)
  {
    v10 = v30;
    *(_QWORD *)(a3 + 64) = v29;
    *(_OWORD *)(a3 + 48) = v28;
    v28 = 0uLL;
    *(_QWORD *)(a3 + 72) = v10;
    *(_OWORD *)(a3 + 80) = v31;
    *(_QWORD *)(a3 + 96) = v32;
    v29 = 0;
    v31 = 0uLL;
    v32 = 0;
    *(_BYTE *)(a3 + 104) = 1;
  }
  *(_BYTE *)(a3 + 112) = 1;
  *(_BYTE *)(a3 + 120) = 0;
  if (v9 && SHIBYTE(v26) < 0)
    operator delete((void *)__p);
  if (v23)
    goto LABEL_20;
LABEL_26:
  if (SHIBYTE(v14) < 0)
    operator delete(v13[0]);
  if (v7)
    goto LABEL_29;
}

void sub_22413DB70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,int a37,__int16 a38,char a39,char a40)
{
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v43;

  p_shared_owners = (unint64_t *)&v40->__shared_owners_;
  do
    v43 = __ldaxr(p_shared_owners);
  while (__stlxr(v43 - 1, p_shared_owners));
  if (!v43)
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
  _Unwind_Resume(exception_object);
}

void sub_22413DC20(std::string::size_type a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *v13[2];
  uint64_t v14;
  void *__dst[2];
  uint64_t v16;
  char v17;
  void *v18;
  char v19;
  void *v20;
  char v21;
  char v22;
  char v23;
  __int128 v24;
  __int128 __p;
  uint64_t v26;
  unsigned __int8 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  char v34;
  const char *v35;

  v35 = "sync update";
  v5 = *(std::__shared_weak_count **)(a1 + 248);
  if (v5)
  {
    v7 = std::__shared_weak_count::lock(v5);
    if (v7)
    {
      v8 = *(_QWORD *)(a1 + 240);
      if (v8)
      {
        sub_22413EFE8(a3, v8, a1, a2);
LABEL_29:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
    }
  }
  else
  {
    v7 = 0;
  }
  sub_2241418C4((uint64_t)v13, (const char *)&v35);
  if (SHIBYTE(v14) < 0)
  {
    sub_223197FA4(__dst, v13[0], (unint64_t)v13[1]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)v13;
    v16 = v14;
  }
  v17 = 1;
  LOBYTE(v18) = 0;
  v22 = 0;
  v23 = 1;
  sub_22400C190(0xAu, (__int128 *)__dst, (uint64_t)&v24);
  *(_OWORD *)a3 = v24;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (!v34)
  {
    *(_BYTE *)(a3 + 120) = 0;
    if (!v23)
      goto LABEL_26;
LABEL_20:
    if (!v22)
      goto LABEL_23;
    if (v21 < 0)
    {
      operator delete(v20);
      if ((v19 & 0x80000000) == 0)
      {
LABEL_23:
        if (!v17)
          goto LABEL_26;
LABEL_24:
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        goto LABEL_26;
      }
    }
    else if ((v19 & 0x80000000) == 0)
    {
      goto LABEL_23;
    }
    operator delete(v18);
    if (!v17)
      goto LABEL_26;
    goto LABEL_24;
  }
  *(_BYTE *)(a3 + 40) = 0;
  v9 = v27;
  if (v27)
  {
    *(_OWORD *)(a3 + 16) = __p;
    *(_QWORD *)(a3 + 32) = v26;
    v26 = 0;
    __p = 0uLL;
    *(_BYTE *)(a3 + 40) = 1;
  }
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 104) = 0;
  if (v33)
  {
    v10 = v30;
    *(_QWORD *)(a3 + 64) = v29;
    *(_OWORD *)(a3 + 48) = v28;
    v28 = 0uLL;
    *(_QWORD *)(a3 + 72) = v10;
    *(_OWORD *)(a3 + 80) = v31;
    *(_QWORD *)(a3 + 96) = v32;
    v29 = 0;
    v31 = 0uLL;
    v32 = 0;
    *(_BYTE *)(a3 + 104) = 1;
  }
  *(_BYTE *)(a3 + 112) = 1;
  *(_BYTE *)(a3 + 120) = 0;
  if (v9 && SHIBYTE(v26) < 0)
    operator delete((void *)__p);
  if (v23)
    goto LABEL_20;
LABEL_26:
  if (SHIBYTE(v14) < 0)
    operator delete(v13[0]);
  if (v7)
    goto LABEL_29;
}

void sub_22413DE80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,int a37,__int16 a38,char a39,char a40)
{
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v43;

  p_shared_owners = (unint64_t *)&v40->__shared_owners_;
  do
    v43 = __ldaxr(p_shared_owners);
  while (__stlxr(v43 - 1, p_shared_owners));
  if (!v43)
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
  _Unwind_Resume(exception_object);
}

void sub_22413DF30(std::string::size_type a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *v13[2];
  uint64_t v14;
  void *__dst[2];
  uint64_t v16;
  char v17;
  void *v18;
  char v19;
  void *v20;
  char v21;
  char v22;
  char v23;
  __int128 v24;
  __int128 __p;
  uint64_t v26;
  unsigned __int8 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  char v34;
  const char *v35;

  v35 = "connection status update";
  v5 = *(std::__shared_weak_count **)(a1 + 248);
  if (v5)
  {
    v7 = std::__shared_weak_count::lock(v5);
    if (v7)
    {
      v8 = *(_QWORD *)(a1 + 240);
      if (v8)
      {
        sub_22413FF70(a3, v8, a1, a2);
LABEL_29:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
    }
  }
  else
  {
    v7 = 0;
  }
  sub_2241418C4((uint64_t)v13, (const char *)&v35);
  if (SHIBYTE(v14) < 0)
  {
    sub_223197FA4(__dst, v13[0], (unint64_t)v13[1]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)v13;
    v16 = v14;
  }
  v17 = 1;
  LOBYTE(v18) = 0;
  v22 = 0;
  v23 = 1;
  sub_22400C190(0xAu, (__int128 *)__dst, (uint64_t)&v24);
  *(_OWORD *)a3 = v24;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (!v34)
  {
    *(_BYTE *)(a3 + 120) = 0;
    if (!v23)
      goto LABEL_26;
LABEL_20:
    if (!v22)
      goto LABEL_23;
    if (v21 < 0)
    {
      operator delete(v20);
      if ((v19 & 0x80000000) == 0)
      {
LABEL_23:
        if (!v17)
          goto LABEL_26;
LABEL_24:
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        goto LABEL_26;
      }
    }
    else if ((v19 & 0x80000000) == 0)
    {
      goto LABEL_23;
    }
    operator delete(v18);
    if (!v17)
      goto LABEL_26;
    goto LABEL_24;
  }
  *(_BYTE *)(a3 + 40) = 0;
  v9 = v27;
  if (v27)
  {
    *(_OWORD *)(a3 + 16) = __p;
    *(_QWORD *)(a3 + 32) = v26;
    v26 = 0;
    __p = 0uLL;
    *(_BYTE *)(a3 + 40) = 1;
  }
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 104) = 0;
  if (v33)
  {
    v10 = v30;
    *(_QWORD *)(a3 + 64) = v29;
    *(_OWORD *)(a3 + 48) = v28;
    v28 = 0uLL;
    *(_QWORD *)(a3 + 72) = v10;
    *(_OWORD *)(a3 + 80) = v31;
    *(_QWORD *)(a3 + 96) = v32;
    v29 = 0;
    v31 = 0uLL;
    v32 = 0;
    *(_BYTE *)(a3 + 104) = 1;
  }
  *(_BYTE *)(a3 + 112) = 1;
  *(_BYTE *)(a3 + 120) = 0;
  if (v9 && SHIBYTE(v26) < 0)
    operator delete((void *)__p);
  if (v23)
    goto LABEL_20;
LABEL_26:
  if (SHIBYTE(v14) < 0)
    operator delete(v13[0]);
  if (v7)
    goto LABEL_29;
}

void sub_22413E190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,int a37,__int16 a38,char a39,char a40)
{
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v43;

  p_shared_owners = (unint64_t *)&v40->__shared_owners_;
  do
    v43 = __ldaxr(p_shared_owners);
  while (__stlxr(v43 - 1, p_shared_owners));
  if (!v43)
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
  _Unwind_Resume(exception_object);
}

void sub_22413E240(std::string::size_type a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *v13[2];
  uint64_t v14;
  void *__dst[2];
  uint64_t v16;
  char v17;
  void *v18;
  char v19;
  void *v20;
  char v21;
  char v22;
  char v23;
  __int128 v24;
  __int128 __p;
  uint64_t v26;
  unsigned __int8 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  char v34;
  const char *v35;

  v35 = "contexts status update";
  v5 = *(std::__shared_weak_count **)(a1 + 248);
  if (v5)
  {
    v7 = std::__shared_weak_count::lock(v5);
    if (v7)
    {
      v8 = *(_QWORD *)(a1 + 240);
      if (v8)
      {
        sub_2241411C4(a3, v8, a1, a2);
LABEL_29:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
    }
  }
  else
  {
    v7 = 0;
  }
  sub_2241418C4((uint64_t)v13, (const char *)&v35);
  if (SHIBYTE(v14) < 0)
  {
    sub_223197FA4(__dst, v13[0], (unint64_t)v13[1]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)v13;
    v16 = v14;
  }
  v17 = 1;
  LOBYTE(v18) = 0;
  v22 = 0;
  v23 = 1;
  sub_22400C190(0xAu, (__int128 *)__dst, (uint64_t)&v24);
  *(_OWORD *)a3 = v24;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (!v34)
  {
    *(_BYTE *)(a3 + 120) = 0;
    if (!v23)
      goto LABEL_26;
LABEL_20:
    if (!v22)
      goto LABEL_23;
    if (v21 < 0)
    {
      operator delete(v20);
      if ((v19 & 0x80000000) == 0)
      {
LABEL_23:
        if (!v17)
          goto LABEL_26;
LABEL_24:
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        goto LABEL_26;
      }
    }
    else if ((v19 & 0x80000000) == 0)
    {
      goto LABEL_23;
    }
    operator delete(v18);
    if (!v17)
      goto LABEL_26;
    goto LABEL_24;
  }
  *(_BYTE *)(a3 + 40) = 0;
  v9 = v27;
  if (v27)
  {
    *(_OWORD *)(a3 + 16) = __p;
    *(_QWORD *)(a3 + 32) = v26;
    v26 = 0;
    __p = 0uLL;
    *(_BYTE *)(a3 + 40) = 1;
  }
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 104) = 0;
  if (v33)
  {
    v10 = v30;
    *(_QWORD *)(a3 + 64) = v29;
    *(_OWORD *)(a3 + 48) = v28;
    v28 = 0uLL;
    *(_QWORD *)(a3 + 72) = v10;
    *(_OWORD *)(a3 + 80) = v31;
    *(_QWORD *)(a3 + 96) = v32;
    v29 = 0;
    v31 = 0uLL;
    v32 = 0;
    *(_BYTE *)(a3 + 104) = 1;
  }
  *(_BYTE *)(a3 + 112) = 1;
  *(_BYTE *)(a3 + 120) = 0;
  if (v9 && SHIBYTE(v26) < 0)
    operator delete((void *)__p);
  if (v23)
    goto LABEL_20;
LABEL_26:
  if (SHIBYTE(v14) < 0)
    operator delete(v13[0]);
  if (v7)
    goto LABEL_29;
}

void sub_22413E4A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,int a37,__int16 a38,char a39,char a40)
{
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v43;

  p_shared_owners = (unint64_t *)&v40->__shared_owners_;
  do
    v43 = __ldaxr(p_shared_owners);
  while (__stlxr(v43 - 1, p_shared_owners));
  if (!v43)
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
  _Unwind_Resume(exception_object);
}

void sub_22413E550(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  char *v13;
  std::mutex *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  __int128 v33;
  char *v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  char *v45;
  _QWORD *v46;
  char v47;
  __int128 v48;
  int v49;
  __int128 __p;
  uint64_t v51;
  char v52;
  __int128 v53;
  char v54;
  void *v55;
  char v56;
  void *v57;
  char v58;
  void *v59;
  char v60;
  void *v61;
  char v62;
  void *v63;
  char v64;
  char v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  v47 = 1;
  v43 = 0x500000001;
  LODWORD(v44) = 0;
  HIDWORD(v44) = 0;
  *(_QWORD *)((char *)&v44 + 4) = 0x200000001;
  sub_22411F9D8(a2, 1, (__n128 *)&v43, (uint64_t)&v48);
  *(_BYTE *)a3 = v47;
  *(_OWORD *)(a3 + 8) = v48;
  *(_DWORD *)(a3 + 24) = v49;
  *(_BYTE *)(a3 + 32) = 0;
  *(_BYTE *)(a3 + 56) = 0;
  if (v52)
  {
    if (SHIBYTE(v51) < 0)
    {
      sub_223197FA4((_BYTE *)(a3 + 32), (void *)__p, *((unint64_t *)&__p + 1));
    }
    else
    {
      *(_OWORD *)(a3 + 32) = __p;
      *(_QWORD *)(a3 + 48) = v51;
    }
    *(_BYTE *)(a3 + 56) = 1;
  }
  *(_BYTE *)(a3 + 64) = 0;
  *(_BYTE *)(a3 + 208) = 0;
  if (v65)
  {
    sub_224011F80((char *)(a3 + 64), &v53);
    *(_BYTE *)(a3 + 208) = 1;
  }
  *(_OWORD *)(a3 + 216) = v66;
  v6 = a1[65];
  *(_QWORD *)(a3 + 232) = v67;
  *(_QWORD *)(a3 + 240) = v6;
  v7 = a1[66];
  *(_QWORD *)(a3 + 248) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a3 + 256) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a3 + 264) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 16);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = (char *)operator new(0x90uLL);
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  *(_QWORD *)v13 = &off_24EC6BB80;
  *(_OWORD *)(v13 + 24) = xmmword_224694780;
  *(_OWORD *)(v13 + 40) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  *(_OWORD *)(v13 + 72) = 0u;
  *((_QWORD *)v13 + 11) = 0;
  *((_QWORD *)v13 + 12) = 1018212795;
  *(_OWORD *)(v13 + 104) = 0u;
  *(_OWORD *)(v13 + 120) = 0u;
  *((_QWORD *)v13 + 17) = 0;
  *(_QWORD *)(a3 + 272) = v13 + 24;
  *(_QWORD *)(a3 + 280) = v13;
  v14 = (std::mutex *)a1[70];
  std::mutex::lock(v14);
  v15 = a1[72];
  v16 = a1[73];
  if (v15 < v16)
  {
    sub_22414171C(a1[72], a3);
    v17 = v15 + 288;
    a1[72] = v17;
    goto LABEL_37;
  }
  v18 = a1[71];
  v19 = 0x8E38E38E38E38E39 * ((uint64_t)(v15 - v18) >> 5);
  if (v19 + 1 > 0xE38E38E38E38E3)
    sub_22316E078();
  v20 = 0x8E38E38E38E38E39 * ((uint64_t)(v16 - v18) >> 5);
  v21 = 2 * v20;
  if (2 * v20 <= v19 + 1)
    v21 = v19 + 1;
  if (v20 >= 0x71C71C71C71C71)
    v22 = 0xE38E38E38E38E3;
  else
    v22 = v21;
  v46 = a1 + 73;
  if (v22)
  {
    if (v22 > 0xE38E38E38E38E3)
      sub_223174E94();
    v23 = (char *)operator new(288 * v22);
  }
  else
  {
    v23 = 0;
  }
  v43 = (uint64_t)v23;
  *(_QWORD *)&v44 = &v23[288 * v19];
  *((_QWORD *)&v44 + 1) = v44;
  v45 = &v23[288 * v22];
  sub_22414171C(v44, a3);
  v24 = v44;
  v17 = *((_QWORD *)&v44 + 1) + 288;
  v25 = (char *)a1[72];
  v26 = (char *)a1[71];
  if (v25 == v26)
  {
    a1[71] = v44;
    a1[72] = v17;
    a1[73] = v45;
    if (v25)
LABEL_36:
      operator delete(v25);
  }
  else
  {
    v27 = 0;
    do
    {
      v31 = v24 + v27;
      v32 = &v25[v27];
      *(_BYTE *)(v24 + v27 - 288) = v25[v27 - 288];
      *(_OWORD *)(v24 + v27 - 280) = *(_OWORD *)&v25[v27 - 280];
      *(_DWORD *)(v24 + v27 - 264) = *(_DWORD *)&v25[v27 - 264];
      *(_BYTE *)(v24 + v27 - 256) = 0;
      *(_BYTE *)(v24 + v27 - 232) = 0;
      if (v25[v27 - 232])
      {
        v33 = *((_OWORD *)v32 - 16);
        *(_QWORD *)(v24 + v27 - 240) = *((_QWORD *)v32 - 30);
        *(_OWORD *)(v24 + v27 - 256) = v33;
        *((_QWORD *)v32 - 31) = 0;
        *((_QWORD *)v32 - 30) = 0;
        *((_QWORD *)v32 - 32) = 0;
        *(_BYTE *)(v31 - 232) = 1;
      }
      *(_BYTE *)(v31 - 224) = 0;
      *(_BYTE *)(v31 - 80) = 0;
      if (*(v32 - 80))
      {
        v34 = &v25[v27];
        v35 = *(_OWORD *)&v25[v27 - 224];
        *(_QWORD *)(v31 - 208) = *(_QWORD *)&v25[v27 - 208];
        *(_OWORD *)(v31 - 224) = v35;
        *((_QWORD *)v34 - 27) = 0;
        *((_QWORD *)v34 - 26) = 0;
        *((_QWORD *)v34 - 28) = 0;
        v36 = v24 + v27;
        v37 = *(_OWORD *)&v25[v27 - 200];
        *(_QWORD *)(v36 - 184) = *(_QWORD *)&v25[v27 - 184];
        *(_OWORD *)(v36 - 200) = v37;
        *((_QWORD *)v34 - 24) = 0;
        *((_QWORD *)v34 - 23) = 0;
        *((_QWORD *)v34 - 25) = 0;
        v38 = *(_OWORD *)&v25[v27 - 176];
        *(_QWORD *)(v36 - 160) = *(_QWORD *)&v25[v27 - 160];
        *(_OWORD *)(v36 - 176) = v38;
        *((_QWORD *)v34 - 21) = 0;
        *((_QWORD *)v34 - 20) = 0;
        *((_QWORD *)v34 - 22) = 0;
        v39 = *(_OWORD *)&v25[v27 - 152];
        *(_QWORD *)(v36 - 136) = *(_QWORD *)&v25[v27 - 136];
        *(_OWORD *)(v36 - 152) = v39;
        *((_QWORD *)v34 - 19) = 0;
        *((_QWORD *)v34 - 18) = 0;
        *((_QWORD *)v34 - 17) = 0;
        v40 = *(_OWORD *)&v25[v27 - 128];
        *(_QWORD *)(v36 - 112) = *(_QWORD *)&v25[v27 - 112];
        *(_OWORD *)(v36 - 128) = v40;
        *((_QWORD *)v34 - 16) = 0;
        *((_QWORD *)v34 - 15) = 0;
        *((_QWORD *)v34 - 14) = 0;
        v41 = *(_OWORD *)&v25[v27 - 104];
        *(_QWORD *)(v36 - 88) = *(_QWORD *)&v25[v27 - 88];
        *(_OWORD *)(v36 - 104) = v41;
        *((_QWORD *)v34 - 13) = 0;
        *((_QWORD *)v34 - 12) = 0;
        *((_QWORD *)v34 - 11) = 0;
        *(_BYTE *)(v31 - 80) = 1;
      }
      v28 = v24 + v27;
      v29 = &v25[v27];
      v30 = *(_OWORD *)&v25[v27 - 72];
      *(_QWORD *)(v28 - 56) = *(_QWORD *)&v25[v27 - 56];
      *(_OWORD *)(v28 - 72) = v30;
      *(_OWORD *)(v28 - 48) = *(_OWORD *)&v25[v27 - 48];
      *((_QWORD *)v29 - 6) = 0;
      *((_QWORD *)v29 - 5) = 0;
      *(_OWORD *)(v28 - 32) = *(_OWORD *)&v25[v27 - 32];
      *((_QWORD *)v29 - 4) = 0;
      *((_QWORD *)v29 - 3) = 0;
      *(_OWORD *)(v28 - 16) = *(_OWORD *)&v25[v27 - 16];
      *((_QWORD *)v29 - 2) = 0;
      *((_QWORD *)v29 - 1) = 0;
      v27 -= 288;
    }
    while (&v25[v27] != v26);
    v25 = (char *)a1[71];
    v42 = a1[72];
    a1[71] = v24 + v27;
    a1[72] = v17;
    a1[73] = v45;
    while ((char *)v42 != v25)
    {
      v42 -= 288;
      sub_22414167C(v42);
    }
    if (v25)
      goto LABEL_36;
  }
LABEL_37:
  a1[72] = v17;
  std::mutex::unlock(v14);
  if (!v65)
    goto LABEL_44;
  if (v64 < 0)
  {
    operator delete(v63);
    if ((v62 & 0x80000000) == 0)
    {
LABEL_40:
      if ((v60 & 0x80000000) == 0)
        goto LABEL_41;
      goto LABEL_50;
    }
  }
  else if ((v62 & 0x80000000) == 0)
  {
    goto LABEL_40;
  }
  operator delete(v61);
  if ((v60 & 0x80000000) == 0)
  {
LABEL_41:
    if ((v58 & 0x80000000) == 0)
      goto LABEL_42;
    goto LABEL_51;
  }
LABEL_50:
  operator delete(v59);
  if ((v58 & 0x80000000) == 0)
  {
LABEL_42:
    if ((v56 & 0x80000000) == 0)
      goto LABEL_43;
    goto LABEL_52;
  }
LABEL_51:
  operator delete(v57);
  if ((v56 & 0x80000000) == 0)
  {
LABEL_43:
    if ((v54 & 0x80000000) == 0)
      goto LABEL_44;
LABEL_53:
    operator delete((void *)v53);
    if (!v52)
      return;
    goto LABEL_45;
  }
LABEL_52:
  operator delete(v55);
  if (v54 < 0)
    goto LABEL_53;
LABEL_44:
  if (!v52)
    return;
LABEL_45:
  if (SHIBYTE(v51) < 0)
    operator delete((void *)__p);
}

void sub_22413EAEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  void **v11;
  va_list va;

  va_start(va, a10);
  if (*(_BYTE *)(v10 + 56))
  {
    if (*(char *)(v10 + 55) < 0)
    {
      operator delete(*v11);
      sub_22412B814((uint64_t)va);
      _Unwind_Resume(a1);
    }
  }
  sub_22412B814((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22413EBAC(uint64_t a1, uint64_t a2, std::string::size_type a3, const void ***a4)
{
  std::mutex *v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  int v18;
  uint64_t v19;
  std::string v20;
  char v21;
  unsigned __int8 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  char v28;
  char v29;
  std::string __dst;
  char v31;
  void *v32;
  char v33;
  void *__p;
  char v35;
  char v36;
  char v37;
  __int128 v38;
  __int128 v39;
  char v40;
  char v41;
  void *v42;
  char v43;
  void *v44;
  char v45;
  char v46;
  char v47;
  _OWORD *v48[4];
  char v49;
  char v50;
  void *v51;
  char v52;
  void *v53;
  char v54;
  char v55;
  char v56;
  char v57;

  v8 = *(std::mutex **)(a2 + 616);
  std::mutex::lock(v8);
  v48[0] = (_OWORD *)(a3 + 8);
  v9 = sub_223ABE324((uint64_t **)(a2 + 624), (unsigned __int8 *)(a3 + 8), v48);
  v11 = v9[6];
  v10 = (std::__shared_weak_count *)v9[7];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  std::mutex::unlock(v8);
  if (v11)
  {
    std::mutex::lock((std::mutex *)v11);
    sub_223240B68((uint64_t **)(v11 + 80), *a4, (uint64_t)*a4);
    std::mutex::unlock((std::mutex *)v11);
  }
  if (!*(_BYTE *)(a2 + 304))
    goto LABEL_9;
  v20.__r_.__value_.__r.__words[0] = a2 + 272;
  v20.__r_.__value_.__l.__size_ = a3;
  *(_QWORD *)&v38 = &off_24EC6BBD0;
  *((_QWORD *)&v38 + 1) = &v20;
  *(_QWORD *)&v39 = a4;
  sub_22456BD10((uint64_t)&v38, (uint64_t)v48);
  if (v57)
  {
    *(_BYTE *)a1 = 0;
LABEL_9:
    *(_BYTE *)(a1 + 120) = 1;
    goto LABEL_10;
  }
  sub_22456A158((uint64_t)v48, &v20);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    sub_223197FA4(&__dst, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
  else
    __dst = v20;
  v31 = 1;
  LOBYTE(v32) = 0;
  v36 = 0;
  v37 = 1;
  sub_224012298((uint64_t)&v38, 2u, (__int128 *)&__dst);
  if (v37)
  {
    if (v36)
    {
      if (v35 < 0)
        operator delete(__p);
      if (v33 < 0)
        operator delete(v32);
    }
    if (v31 && SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a2 + 464))
      goto LABEL_34;
LABEL_32:
    v16 = *(_QWORD *)(a2 + 456);
    if (!v16)
      sub_223198474();
    (*(void (**)(uint64_t, std::string::size_type, __int128 *))(*(_QWORD *)v16 + 48))(v16, a3, &v38);
    goto LABEL_34;
  }
  operator delete(v20.__r_.__value_.__l.__data_);
  if (*(_BYTE *)(a2 + 464))
    goto LABEL_32;
LABEL_34:
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v38;
  v17 = sub_22319FFBC(&v20.__r_.__value_.__s.__data_[16], &v39);
  *(_OWORD *)a1 = *(_OWORD *)&v20.__r_.__value_.__l.__data_;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (v29)
  {
    *(_BYTE *)(a1 + 40) = 0;
    v18 = v22;
    if (v22)
    {
      *(_OWORD *)(a1 + 16) = *(_OWORD *)v17;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)v17 + 2);
      *((_QWORD *)v17 + 1) = 0;
      *((_QWORD *)v17 + 2) = 0;
      *(_QWORD *)v17 = 0;
      *(_BYTE *)(a1 + 40) = 1;
    }
    *(_BYTE *)(a1 + 48) = 0;
    *(_BYTE *)(a1 + 104) = 0;
    if (v28)
    {
      v19 = v25;
      *(_QWORD *)(a1 + 64) = v24;
      *(_OWORD *)(a1 + 48) = v23;
      v23 = 0uLL;
      *(_QWORD *)(a1 + 72) = v19;
      *(_OWORD *)(a1 + 80) = v26;
      *(_QWORD *)(a1 + 96) = v27;
      v24 = 0;
      v26 = 0uLL;
      v27 = 0;
      *(_BYTE *)(a1 + 104) = 1;
    }
    *(_BYTE *)(a1 + 112) = 1;
    *(_BYTE *)(a1 + 120) = 0;
    if (v18 && v21 < 0)
      operator delete((void *)v20.__r_.__value_.__r.__words[2]);
  }
  else
  {
    *(_BYTE *)(a1 + 120) = 0;
  }
  if (v47)
  {
    if (v46)
    {
      if (v45 < 0)
        operator delete(v44);
      if (v43 < 0)
        operator delete(v42);
    }
    if (v41 && v40 < 0)
      operator delete((void *)v39);
  }
  if (!v57 && v56)
  {
    if (v55)
    {
      if (v54 < 0)
        operator delete(v53);
      if (v52 < 0)
        operator delete(v51);
    }
    if (v50 && v49 < 0)
      operator delete(v48[2]);
  }
LABEL_10:
  if (v10)
  {
    v14 = (unint64_t *)&v10->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_22413EF38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  uint64_t v43;

  if (a16 < 0)
    operator delete(__p);
  sub_223197D38(v43 - 192);
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22413EF90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22413EFA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  std::mutex::unlock(v9);
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22413EFC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22413EFD4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_22413EFE8(uint64_t a1, uint64_t a2, std::string::size_type a3, uint64_t a4)
{
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  int v15;
  uint64_t v16;
  std::string v17;
  char v18;
  void *v19;
  char v20;
  void *v21;
  char v22;
  char v23;
  char v24;
  std::string __dst;
  char v26;
  void *v27;
  char v28;
  void *__p;
  char v30;
  char v31;
  char v32;
  std::string v33;
  char v34;
  unsigned __int8 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  char v42;
  std::string v43;
  char v44;
  void *v45;
  char v46;
  void *v47;
  char v48;
  char v49;
  char v50;
  _BYTE v51[24];
  uint64_t v52;
  char v53;
  unsigned __int8 v54;
  void *v55[2];
  uint64_t v56;
  uint64_t v57;
  void *v58[2];
  uint64_t v59;
  char v60;
  char v61;
  __int128 v62;
  __int128 v63;
  char v64;
  char v65;
  void *v66;
  char v67;
  void *v68;
  char v69;
  char v70;
  char v71;
  char v72;
  char v73;

  if (!*(_BYTE *)(a4 + 48))
  {
    LODWORD(v52) = -1;
    *(_QWORD *)v51 = operator new(0x68uLL);
    *(_OWORD *)&v51[8] = xmmword_2245B9050;
    strcpy(*(char **)v51, "Received outdated Sync from client. Update the client to protocol 1.3.0 to sync with the server.");
    LODWORD(v52) = 1;
    sub_22319B83C((uint64_t)&v43, (uint64_t)v51, (unsigned __int8 *)(a3 + 8));
    if ((_DWORD)v52 == -1)
      sub_22316DD70();
    v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
    ((void (*)(std::string *__return_ptr, std::string *, _BYTE *))off_24EC6BB28[v52])(&v33, &v43, v51);
    if ((_DWORD)v52 != -1)
      ((void (*)(std::string *, _BYTE *))off_24EC6BAF8[v52])(&v43, v51);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      sub_223197FA4(&__dst, v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
    else
      __dst = v33;
    v26 = 1;
    LOBYTE(v27) = 0;
    v31 = 0;
    v32 = 1;
    sub_224012298((uint64_t)&v62, 0xEu, (__int128 *)&__dst);
    if (v32)
    {
      if (v31)
      {
        if (v30 < 0)
          operator delete(__p);
        if (v28 < 0)
          operator delete(v27);
      }
      if (v26 && SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v33.__r_.__value_.__l.__data_);
      if (!*(_BYTE *)(a2 + 464))
      {
LABEL_37:
        *(_OWORD *)v51 = v62;
        v9 = sub_22319FFBC(&v51[16], &v63);
        goto LABEL_55;
      }
    }
    else if (!*(_BYTE *)(a2 + 464))
    {
      goto LABEL_37;
    }
    v8 = *(_QWORD *)(a2 + 456);
    if (!v8)
      sub_223198474();
    (*(void (**)(uint64_t, std::string::size_type, __int128 *))(*(_QWORD *)v8 + 48))(v8, a3, &v62);
    goto LABEL_37;
  }
  if (*(_DWORD *)(a4 + 40) != 1)
  {
    LODWORD(v52) = 0;
    sub_2231A1E00(v51, "Received invalid Sync update from client ");
    sub_22319B83C((uint64_t)&v43, (uint64_t)v51, (unsigned __int8 *)(a3 + 8));
    if ((_DWORD)v52 == -1)
      sub_22316DD70();
    v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
    ((void (*)(std::string *__return_ptr, std::string *, _BYTE *))off_24EC6BB28[v52])(&v33, &v43, v51);
    if ((_DWORD)v52 != -1)
      ((void (*)(std::string *, _BYTE *))off_24EC6BAF8[v52])(&v43, v51);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      sub_223197FA4(&v17, v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
    else
      v17 = v33;
    v18 = 1;
    LOBYTE(v19) = 0;
    v23 = 0;
    v24 = 1;
    sub_224012298((uint64_t)&v62, 2u, (__int128 *)&v17);
    if (v24)
    {
      if (v23)
      {
        if (v22 < 0)
          operator delete(v21);
        if (v20 < 0)
          operator delete(v19);
      }
      if (v18 && SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v17.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v33.__r_.__value_.__l.__data_);
      if (!*(_BYTE *)(a2 + 464))
      {
LABEL_54:
        *(_OWORD *)v51 = v62;
        v9 = sub_22319FFBC(&v51[16], &v63);
LABEL_55:
        *(_OWORD *)a1 = *(_OWORD *)v51;
        *(_BYTE *)(a1 + 16) = 0;
        *(_BYTE *)(a1 + 112) = 0;
        if (v61)
        {
          *(_BYTE *)(a1 + 40) = 0;
          v11 = v54;
          if (v54)
          {
            *(_OWORD *)(a1 + 16) = *(_OWORD *)v9;
            *(_QWORD *)(a1 + 32) = *((_QWORD *)v9 + 2);
            *((_QWORD *)v9 + 1) = 0;
            *((_QWORD *)v9 + 2) = 0;
            *(_QWORD *)v9 = 0;
            *(_BYTE *)(a1 + 40) = 1;
          }
          *(_BYTE *)(a1 + 48) = 0;
          *(_BYTE *)(a1 + 104) = 0;
          if (v60)
          {
            v12 = v57;
            *(_QWORD *)(a1 + 64) = v56;
            *(_OWORD *)(a1 + 48) = *(_OWORD *)v55;
            v55[0] = 0;
            v55[1] = 0;
            *(_QWORD *)(a1 + 72) = v12;
            *(_OWORD *)(a1 + 80) = *(_OWORD *)v58;
            *(_QWORD *)(a1 + 96) = v59;
            v56 = 0;
            v58[0] = 0;
            v58[1] = 0;
            v59 = 0;
            *(_BYTE *)(a1 + 104) = 1;
          }
          *(_BYTE *)(a1 + 112) = 1;
          *(_BYTE *)(a1 + 120) = 0;
          if (v11 && v53 < 0)
            operator delete(*(void **)&v51[16]);
        }
        else
        {
          *(_BYTE *)(a1 + 120) = 0;
        }
        goto LABEL_64;
      }
    }
    else if (!*(_BYTE *)(a2 + 464))
    {
      goto LABEL_54;
    }
    v10 = *(_QWORD *)(a2 + 456);
    if (!v10)
      sub_223198474();
    (*(void (**)(uint64_t, std::string::size_type, __int128 *))(*(_QWORD *)v10 + 48))(v10, a3, &v62);
    goto LABEL_54;
  }
  if (*(_BYTE *)(a2 + 608))
    (*(void (**)(_QWORD, std::string::size_type, uint64_t))(**(_QWORD **)(a2 + 600) + 40))(*(_QWORD *)(a2 + 600), a3 + 8, a4);
  if (!*(_BYTE *)(a2 + 344))
    goto LABEL_10;
  if (*(_DWORD *)(a4 + 40) != 1)
    sub_22316DD70();
  if (!*(_BYTE *)a4)
    goto LABEL_10;
  v33.__r_.__value_.__r.__words[0] = a2 + 312;
  v33.__r_.__value_.__l.__size_ = a3;
  *(_QWORD *)v51 = &off_24EC6BC10;
  *(_QWORD *)&v51[8] = &v33;
  *(_QWORD *)&v51[16] = a2;
  v52 = a4;
  sub_22456BD10((uint64_t)v51, (uint64_t)&v62);
  if (v72)
  {
    *(_BYTE *)a1 = 0;
LABEL_10:
    *(_BYTE *)(a1 + 120) = 1;
    return;
  }
  sub_22456A158((uint64_t)&v62, &v33);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    sub_223197FA4(&v43, v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
  else
    v43 = v33;
  v44 = 1;
  LOBYTE(v45) = 0;
  v49 = 0;
  v50 = 1;
  sub_224012298((uint64_t)v51, 2u, (__int128 *)&v43);
  if (v50)
  {
    if (v49)
    {
      if (v48 < 0)
        operator delete(v47);
      if (v46 < 0)
        operator delete(v45);
    }
    if (v44 && SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (*(_BYTE *)(a2 + 464))
  {
    v13 = *(_QWORD *)(a2 + 456);
    if (!v13)
      sub_223198474();
    (*(void (**)(uint64_t, std::string::size_type, _BYTE *))(*(_QWORD *)v13 + 48))(v13, a3, v51);
  }
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = *(_OWORD *)v51;
  v14 = sub_22319FFBC(&v33.__r_.__value_.__s.__data_[16], (__int128 *)&v51[16]);
  *(_OWORD *)a1 = *(_OWORD *)&v33.__r_.__value_.__l.__data_;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (v42)
  {
    *(_BYTE *)(a1 + 40) = 0;
    v15 = v35;
    if (v35)
    {
      *(_OWORD *)(a1 + 16) = *(_OWORD *)v14;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)v14 + 2);
      *((_QWORD *)v14 + 1) = 0;
      *((_QWORD *)v14 + 2) = 0;
      *(_QWORD *)v14 = 0;
      *(_BYTE *)(a1 + 40) = 1;
    }
    *(_BYTE *)(a1 + 48) = 0;
    *(_BYTE *)(a1 + 104) = 0;
    if (v41)
    {
      v16 = v38;
      *(_QWORD *)(a1 + 64) = v37;
      *(_OWORD *)(a1 + 48) = v36;
      v36 = 0uLL;
      *(_QWORD *)(a1 + 72) = v16;
      *(_OWORD *)(a1 + 80) = v39;
      *(_QWORD *)(a1 + 96) = v40;
      v37 = 0;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(a1 + 104) = 1;
    }
    *(_BYTE *)(a1 + 112) = 1;
    *(_BYTE *)(a1 + 120) = 0;
    if (v15 && v34 < 0)
      operator delete((void *)v33.__r_.__value_.__r.__words[2]);
  }
  else
  {
    *(_BYTE *)(a1 + 120) = 0;
  }
  if (v61)
  {
    if (v60)
    {
      if (SHIBYTE(v59) < 0)
        operator delete(v58[0]);
      if (SHIBYTE(v56) < 0)
        operator delete(v55[0]);
    }
    if (v54 && v53 < 0)
      operator delete(*(void **)&v51[16]);
  }
  if (!v72)
  {
LABEL_64:
    if (!v71)
      return;
    if (v70)
    {
      if ((v69 & 0x80000000) == 0)
      {
        if ((v67 & 0x80000000) == 0)
          goto LABEL_68;
LABEL_72:
        operator delete(v66);
        if (!v65)
          return;
        goto LABEL_69;
      }
      operator delete(v68);
      if (v67 < 0)
        goto LABEL_72;
    }
LABEL_68:
    if (!v65)
      return;
LABEL_69:
    if (v64 < 0)
      operator delete((void *)v63);
  }
}

void sub_22413F748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;

  if (a42 < 0)
    operator delete(__p);
  sub_223197D38(v42 - 184);
  _Unwind_Resume(a1);
}

void sub_22413F798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_22413F830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  sub_22319B964((uint64_t)&a67);
  _Unwind_Resume(a1);
}

void sub_22413F844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  sub_22319B964((uint64_t)&a67);
  _Unwind_Resume(a1);
}

void sub_22413F858(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22319723C(v1 - 184);
  _Unwind_Resume(a1);
}

void sub_22413F86C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22319723C(v1 - 184);
  _Unwind_Resume(a1);
}

void sub_22413F880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  sub_22319B964((uint64_t)&a67);
  _Unwind_Resume(a1);
}

void sub_22413F894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  sub_22319B964((uint64_t)&a67);
  _Unwind_Resume(a1);
}

void sub_22413F8A8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  std::mutex *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  _BYTE *v23;
  int v24;
  unsigned __int8 v25;
  _BYTE *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *exception;
  _QWORD *v31;
  __int128 v32;
  void *v33;
  char v34;
  unsigned __int8 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  char v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  unsigned __int8 v46;
  void *v47[2];
  uint64_t v48;
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  char v52;
  char v53;
  char v54;
  int v55;
  __int128 v56;
  __int128 v57;
  char v58;
  char v59;
  void *v60;
  char v61;
  void *v62;
  char v63;
  char v64;
  char v65;
  char v66;

  v55 = 3;
  LOBYTE(v56) = 0;
  v66 = 0;
  v8 = *(std::mutex **)(a2 + 560);
  std::mutex::lock(v8);
  v9 = *(_QWORD *)(a2 + 568);
  v10 = *(_QWORD *)(a2 + 576);
  if (v9 == v10)
  {
    v11 = 0;
LABEL_33:
    std::mutex::unlock(v8);
    if (*(_BYTE *)(a2 + 552))
      goto LABEL_34;
LABEL_36:
    if (v66)
    {
      v43 = v56;
      v23 = sub_22319FFBC(&v44, &v57);
      *(_OWORD *)a1 = v43;
      *(_BYTE *)(a1 + 16) = 0;
      *(_BYTE *)(a1 + 112) = 0;
      if (v53)
      {
        *(_BYTE *)(a1 + 40) = 0;
        v24 = v46;
        if (!v46)
          goto LABEL_58;
        *(_OWORD *)(a1 + 16) = *(_OWORD *)v23;
        *(_QWORD *)(a1 + 32) = *((_QWORD *)v23 + 2);
        *((_QWORD *)v23 + 1) = 0;
        *((_QWORD *)v23 + 2) = 0;
        *(_QWORD *)v23 = 0;
        goto LABEL_57;
      }
    }
    else
    {
      if ((*(_BYTE *)(a2 + 552) != 0) | v11 & 1)
      {
        *(_BYTE *)(a1 + 120) = 1;
        goto LABEL_64;
      }
      sub_224107310((unsigned __int8 *)a4, 0xDu, (uint64_t)"client not found", (uint64_t)&v43);
      *(_OWORD *)a1 = v43;
      *(_BYTE *)(a1 + 16) = 0;
      *(_BYTE *)(a1 + 112) = 0;
      if (v53)
      {
        *(_BYTE *)(a1 + 40) = 0;
        v24 = v46;
        if (!v46)
          goto LABEL_58;
        *(_OWORD *)(a1 + 16) = v44;
        *(_QWORD *)(a1 + 32) = v45;
        v45 = 0;
        v44 = 0uLL;
LABEL_57:
        *(_BYTE *)(a1 + 40) = 1;
LABEL_58:
        *(_BYTE *)(a1 + 48) = 0;
        *(_BYTE *)(a1 + 104) = 0;
        if (v52)
        {
          v29 = v49;
          *(_QWORD *)(a1 + 64) = v48;
          *(_OWORD *)(a1 + 48) = *(_OWORD *)v47;
          v47[0] = 0;
          v47[1] = 0;
          *(_QWORD *)(a1 + 72) = v29;
          *(_OWORD *)(a1 + 80) = *(_OWORD *)__p;
          *(_QWORD *)(a1 + 96) = v51;
          v48 = 0;
          __p[0] = 0;
          __p[1] = 0;
          v51 = 0;
          *(_BYTE *)(a1 + 104) = 1;
        }
        *(_BYTE *)(a1 + 112) = 1;
        *(_BYTE *)(a1 + 120) = 0;
        if (!v24)
          goto LABEL_64;
LABEL_61:
        if (SHIBYTE(v45) < 0)
          operator delete((void *)v44);
        goto LABEL_64;
      }
    }
    *(_BYTE *)(a1 + 120) = 0;
    goto LABEL_64;
  }
  v11 = 0;
  while (1)
  {
    v13 = *(std::__shared_weak_count **)(v9 + 264);
    if (!v13)
      goto LABEL_5;
    v14 = std::__shared_weak_count::lock(v13);
    if (!v14)
      goto LABEL_5;
    v15 = v14;
    v16 = *(_QWORD *)(v9 + 256);
    if (v16)
    {
      v17 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
      if (*v17 == *(_QWORD *)a4 && v17[1] == *(_QWORD *)(a4 + 8))
        break;
    }
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      v12 = 1;
LABEL_4:
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
      if ((v12 & 1) == 0)
        goto LABEL_33;
    }
LABEL_5:
    v9 += 288;
    if (v9 == v10)
      goto LABEL_33;
  }
  sub_22400DFEC(v16, a3, (uint64_t)&v43);
  if (!v54)
  {
    sub_22400D0F8((uint64_t)&v55, (uint64_t)&v43);
    if (!v54)
    {
      if (v53)
      {
        if (v52)
        {
          if (SHIBYTE(v51) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v48) < 0)
            operator delete(v47[0]);
        }
        if (v46 && SHIBYTE(v45) < 0)
          operator delete((void *)v44);
      }
    }
  }
  v21 = (unint64_t *)&v15->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    v12 = 0;
    v11 = 1;
    goto LABEL_4;
  }
  v11 = 1;
  std::mutex::unlock(v8);
  if (!*(_BYTE *)(a2 + 552))
    goto LABEL_36;
LABEL_34:
  if ((v11 & 1) != 0)
    goto LABEL_36;
  sub_22412B864(*(_QWORD *)(a2 + 544), a3, a4, (uint64_t)&v43);
  if (v54)
    goto LABEL_36;
  v25 = atomic_load((unsigned __int8 *)&qword_2557952D0);
  if ((v25 & 1) == 0 && __cxa_guard_acquire(&qword_2557952D0))
  {
    __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_2540CA608, &dword_22314D000);
    __cxa_guard_release(&qword_2557952D0);
  }
  if (*((_UNKNOWN ***)&v43 + 1) != &off_2540CA608 || (_DWORD)v43 != 13)
  {
    if (v54)
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = &off_24EC1FCC0;
      __cxa_throw(exception, (struct type_info *)&unk_24EC1FC98, (void (*)(void *))std::exception::~exception);
    }
    sub_22400D0F8((uint64_t)&v55, (uint64_t)&v43);
    if (!v54 && v53)
    {
      if (v52)
      {
        if (SHIBYTE(v51) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v48) < 0)
          operator delete(v47[0]);
      }
      if (v46 && SHIBYTE(v45) < 0)
        operator delete((void *)v44);
    }
    goto LABEL_36;
  }
  if (v54)
  {
    v31 = __cxa_allocate_exception(8uLL);
    *v31 = &off_24EC1FCC0;
    __cxa_throw(v31, (struct type_info *)&unk_24EC1FC98, (void (*)(void *))std::exception::~exception);
  }
  v32 = v43;
  v26 = sub_22319FFBC(&v33, &v44);
  *(_OWORD *)a1 = v32;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (v42)
  {
    *(_BYTE *)(a1 + 40) = 0;
    v27 = v35;
    if (v35)
    {
      *(_OWORD *)(a1 + 16) = *(_OWORD *)v26;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)v26 + 2);
      *((_QWORD *)v26 + 1) = 0;
      *((_QWORD *)v26 + 2) = 0;
      *(_QWORD *)v26 = 0;
      *(_BYTE *)(a1 + 40) = 1;
    }
    *(_BYTE *)(a1 + 48) = 0;
    *(_BYTE *)(a1 + 104) = 0;
    if (v41)
    {
      v28 = v38;
      *(_QWORD *)(a1 + 64) = v37;
      *(_OWORD *)(a1 + 48) = v36;
      v36 = 0uLL;
      *(_QWORD *)(a1 + 72) = v28;
      *(_OWORD *)(a1 + 80) = v39;
      *(_QWORD *)(a1 + 96) = v40;
      v37 = 0;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(a1 + 104) = 1;
    }
    *(_BYTE *)(a1 + 112) = 1;
    *(_BYTE *)(a1 + 120) = 0;
    if (v27 && v34 < 0)
      operator delete(v33);
  }
  else
  {
    *(_BYTE *)(a1 + 120) = 0;
  }
  if (!v54 && v53)
  {
    if (v52)
    {
      if (SHIBYTE(v51) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v48) < 0)
        operator delete(v47[0]);
    }
    if (v46)
      goto LABEL_61;
  }
LABEL_64:
  if (!v66 || !v65)
    return;
  if (!v64)
    goto LABEL_69;
  if ((v63 & 0x80000000) == 0)
  {
    if ((v61 & 0x80000000) == 0)
      goto LABEL_69;
LABEL_85:
    operator delete(v60);
    if (!v59)
      return;
LABEL_70:
    if (v58 < 0)
      operator delete((void *)v57);
    return;
  }
  operator delete(v62);
  if (v61 < 0)
    goto LABEL_85;
LABEL_69:
  if (v59)
    goto LABEL_70;
}

void sub_22413FEC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22400D5A4(v1 - 224);
  _Unwind_Resume(a1);
}

void sub_22413FEDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  sub_223197D38((uint64_t)va);
  sub_22400D5A4(v17 - 224);
  _Unwind_Resume(a1);
}

void sub_22413FEFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22400D5A4(v1 - 224);
  _Unwind_Resume(a1);
}

void sub_22413FF10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  std::mutex *v25;
  uint64_t v26;

  sub_223197D38((uint64_t)&a25);
  sub_223167354((uint64_t)&a9);
  std::mutex::unlock(v25);
  sub_22400D5A4(v26 - 224);
  _Unwind_Resume(a1);
}

void sub_22413FF70(uint64_t a1, uint64_t a2, std::string::size_type a3, int a4)
{
  std::mutex *v7;
  char *v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *size;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::mutex *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  std::mutex *v30;
  uint64_t *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  _QWORD *v38;
  _QWORD *v39;
  __int128 v40;
  uint64_t v41;
  unsigned __int8 v42;
  std::string::size_type v43;
  __int128 v44;
  _QWORD *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  int v49;
  std::string *v50;
  unint64_t v51;
  void *v52;
  int v53;
  char *v54;
  char *v55;
  void *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::mutex *v60;
  uint64_t *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  int v70;
  uint64_t v71;
  _QWORD *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  int v78;
  uint64_t v79;
  void *v80;
  unint64_t v81;
  unint64_t v82;
  void *v83[2];
  void *v84[2];
  char v85;
  char v86;
  void *v87;
  char v88;
  void *v89;
  char v90;
  char v91;
  char v92;
  char v93;
  char v94;
  std::string v95;
  _DWORD v96[2];
  std::string __dst;
  char v98;
  void *v99;
  char v100;
  void *v101;
  char v102;
  char v103;
  char v104;
  void *v105;
  char *v106;
  __int128 v107;
  _BYTE v108[32];
  std::string v109;
  char v110;
  unsigned __int8 v111;
  void *v112[2];
  uint64_t v113;
  uint64_t v114;
  void *v115[2];
  uint64_t v116;
  char v117;
  char v118;
  void *__p[2];
  void *v120;
  char v121;
  char v122;
  unsigned __int8 v123;
  void *v124[2];
  uint64_t v125;
  uint64_t v126;
  void *v127[2];
  uint64_t v128;
  char v129;
  char v130;
  unsigned __int8 v131;
  char v132;
  char v133;
  char v134;
  uint64_t v135;

  v135 = *MEMORY[0x24BDAC8D0];
  v94 = a4;
  if (a4 != 1)
  {
    if (*(_BYTE *)(a2 + 608))
      (*(void (**)(_QWORD, std::string::size_type))(**(_QWORD **)(a2 + 600) + 64))(*(_QWORD *)(a2 + 600), a3 + 8);
    v17 = *(std::mutex **)(a2 + 560);
    std::mutex::lock(v17);
    *(_OWORD *)__p = *(_OWORD *)(a3 + 8);
    v18 = *(_QWORD *)(a2 + 568);
    v19 = *(_QWORD *)(a2 + 576);
    if (v18 != v19)
    {
      while (1)
      {
        v20 = *(void **)(v18 + 8) == __p[0] && *(void **)(v18 + 16) == __p[1];
        if (v20)
          break;
        v18 += 288;
        if (v18 == v19)
          goto LABEL_47;
      }
    }
    if (v18 != v19)
    {
      v21 = v18 + 288;
      if (v18 + 288 != v19)
      {
        do
        {
          *(_BYTE *)v18 = *(_BYTE *)v21;
          sub_224011B08(v18 + 8, v21 + 8);
          v22 = *(_OWORD *)(v21 + 240);
          *(_QWORD *)(v21 + 240) = 0;
          *(_QWORD *)(v21 + 248) = 0;
          v23 = *(std::__shared_weak_count **)(v18 + 248);
          *(_OWORD *)(v18 + 240) = v22;
          if (v23)
            std::__shared_weak_count::__release_weak(v23);
          v24 = *(_OWORD *)(v21 + 256);
          *(_QWORD *)(v21 + 256) = 0;
          *(_QWORD *)(v21 + 264) = 0;
          v25 = *(std::__shared_weak_count **)(v18 + 264);
          *(_OWORD *)(v18 + 256) = v24;
          if (v25)
            std::__shared_weak_count::__release_weak(v25);
          v26 = *(_OWORD *)(v21 + 272);
          *(_QWORD *)(v21 + 272) = 0;
          *(_QWORD *)(v21 + 280) = 0;
          v27 = *(std::__shared_weak_count **)(v18 + 280);
          *(_OWORD *)(v18 + 272) = v26;
          if (v27)
          {
            p_shared_owners = (unint64_t *)&v27->__shared_owners_;
            do
              v29 = __ldaxr(p_shared_owners);
            while (__stlxr(v29 - 1, p_shared_owners));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
              std::__shared_weak_count::__release_weak(v27);
            }
          }
          v21 += 288;
          v18 += 288;
        }
        while (v21 != v19);
        v19 = *(_QWORD *)(a2 + 576);
      }
      while (v19 != v18)
      {
        v19 -= 288;
        sub_22414167C(v19);
      }
      *(_QWORD *)(a2 + 576) = v18;
    }
LABEL_47:
    v30 = *(std::mutex **)(a2 + 616);
    std::mutex::lock(v30);
    v31 = *(uint64_t **)(a2 + 632);
    if (v31)
    {
      v32 = LOBYTE(__p[0]);
      v33 = a2 + 632;
      v34 = *(_QWORD *)(a2 + 632);
      do
      {
        v35 = *(unsigned __int8 *)(v34 + 32);
        v36 = LOBYTE(__p[0]);
        if (v35 != LOBYTE(__p[0]))
          goto LABEL_66;
        v35 = *(unsigned __int8 *)(v34 + 33);
        v36 = BYTE1(__p[0]);
        if (v35 != BYTE1(__p[0]))
          goto LABEL_66;
        v35 = *(unsigned __int8 *)(v34 + 34);
        v36 = BYTE2(__p[0]);
        if (v35 != BYTE2(__p[0]))
          goto LABEL_66;
        v35 = *(unsigned __int8 *)(v34 + 35);
        v36 = BYTE3(__p[0]);
        if (v35 != BYTE3(__p[0]))
          goto LABEL_66;
        v35 = *(unsigned __int8 *)(v34 + 36);
        v36 = BYTE4(__p[0]);
        if (v35 != BYTE4(__p[0]))
          goto LABEL_66;
        v35 = *(unsigned __int8 *)(v34 + 37);
        v36 = BYTE5(__p[0]);
        if (v35 != BYTE5(__p[0]))
          goto LABEL_66;
        v35 = *(unsigned __int8 *)(v34 + 38);
        v36 = BYTE6(__p[0]);
        if (v35 != BYTE6(__p[0]))
          goto LABEL_66;
        v35 = *(unsigned __int8 *)(v34 + 39);
        v36 = HIBYTE(__p[0]);
        if (v35 != HIBYTE(__p[0]))
          goto LABEL_66;
        v35 = *(unsigned __int8 *)(v34 + 40);
        v36 = LOBYTE(__p[1]);
        if (v35 != LOBYTE(__p[1]))
          goto LABEL_66;
        v35 = *(unsigned __int8 *)(v34 + 41);
        v36 = BYTE1(__p[1]);
        if (v35 != BYTE1(__p[1]))
          goto LABEL_66;
        v35 = *(unsigned __int8 *)(v34 + 42);
        v36 = BYTE2(__p[1]);
        if (v35 != BYTE2(__p[1]))
          goto LABEL_66;
        v35 = *(unsigned __int8 *)(v34 + 43);
        v36 = BYTE3(__p[1]);
        if (v35 != BYTE3(__p[1]))
          goto LABEL_66;
        v35 = *(unsigned __int8 *)(v34 + 44);
        v36 = BYTE4(__p[1]);
        if (v35 != BYTE4(__p[1]))
          goto LABEL_66;
        v35 = *(unsigned __int8 *)(v34 + 45);
        v36 = BYTE5(__p[1]);
        if (v35 == BYTE5(__p[1])
          && (v35 = *(unsigned __int8 *)(v34 + 46), v36 = BYTE6(__p[1]), v35 == BYTE6(__p[1]))
          && (v35 = *(unsigned __int8 *)(v34 + 47), v36 = HIBYTE(__p[1]), v35 == HIBYTE(__p[1])))
        {
          v33 = v34;
        }
        else
        {
LABEL_66:
          if (v35 < v36)
            v34 += 8;
          else
            v33 = v34;
        }
        v34 = *(_QWORD *)v34;
      }
      while (v34);
      if (v33 != a2 + 632)
      {
        v37 = *(unsigned __int8 *)(v33 + 32);
        if (LOBYTE(__p[0]) == v37)
        {
          v37 = *(unsigned __int8 *)(v33 + 33);
          v32 = BYTE1(__p[0]);
          if (BYTE1(__p[0]) == v37)
          {
            v37 = *(unsigned __int8 *)(v33 + 34);
            v32 = BYTE2(__p[0]);
            if (BYTE2(__p[0]) == v37)
            {
              v37 = *(unsigned __int8 *)(v33 + 35);
              v32 = BYTE3(__p[0]);
              if (BYTE3(__p[0]) == v37)
              {
                v37 = *(unsigned __int8 *)(v33 + 36);
                v32 = BYTE4(__p[0]);
                if (BYTE4(__p[0]) == v37)
                {
                  v37 = *(unsigned __int8 *)(v33 + 37);
                  v32 = BYTE5(__p[0]);
                  if (BYTE5(__p[0]) == v37)
                  {
                    v37 = *(unsigned __int8 *)(v33 + 38);
                    v32 = BYTE6(__p[0]);
                    if (BYTE6(__p[0]) == v37)
                    {
                      v37 = *(unsigned __int8 *)(v33 + 39);
                      v32 = HIBYTE(__p[0]);
                      if (HIBYTE(__p[0]) == v37)
                      {
                        v37 = *(unsigned __int8 *)(v33 + 40);
                        v32 = LOBYTE(__p[1]);
                        if (LOBYTE(__p[1]) == v37)
                        {
                          v37 = *(unsigned __int8 *)(v33 + 41);
                          v32 = BYTE1(__p[1]);
                          if (BYTE1(__p[1]) == v37)
                          {
                            v37 = *(unsigned __int8 *)(v33 + 42);
                            v32 = BYTE2(__p[1]);
                            if (BYTE2(__p[1]) == v37)
                            {
                              v37 = *(unsigned __int8 *)(v33 + 43);
                              v32 = BYTE3(__p[1]);
                              if (BYTE3(__p[1]) == v37)
                              {
                                v37 = *(unsigned __int8 *)(v33 + 44);
                                v32 = BYTE4(__p[1]);
                                if (BYTE4(__p[1]) == v37)
                                {
                                  v37 = *(unsigned __int8 *)(v33 + 45);
                                  v32 = BYTE5(__p[1]);
                                  if (BYTE5(__p[1]) == v37)
                                  {
                                    v37 = *(unsigned __int8 *)(v33 + 46);
                                    v32 = BYTE6(__p[1]);
                                    if (BYTE6(__p[1]) == v37)
                                    {
                                      v37 = *(unsigned __int8 *)(v33 + 47);
                                      v32 = HIBYTE(__p[1]);
                                      if (HIBYTE(__p[1]) == v37)
                                        goto LABEL_88;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (v32 >= v37)
        {
LABEL_88:
          v38 = *(_QWORD **)(v33 + 8);
          if (v38)
          {
            do
            {
              v39 = v38;
              v38 = (_QWORD *)*v38;
            }
            while (v38);
          }
          else
          {
            v72 = (_QWORD *)v33;
            do
            {
              v39 = (_QWORD *)v72[2];
              v20 = *v39 == (_QWORD)v72;
              v72 = v39;
            }
            while (!v20);
          }
          if (*(_QWORD *)(a2 + 624) == v33)
            *(_QWORD *)(a2 + 624) = v39;
          --*(_QWORD *)(a2 + 640);
          sub_2231AFE60(v31, (uint64_t *)v33);
          v73 = *(std::__shared_weak_count **)(v33 + 56);
          if (v73)
          {
            v74 = (unint64_t *)&v73->__shared_owners_;
            do
              v75 = __ldaxr(v74);
            while (__stlxr(v75 - 1, v74));
            if (!v75)
            {
              ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
              std::__shared_weak_count::__release_weak(v73);
            }
          }
          operator delete((void *)v33);
        }
      }
    }
    std::mutex::unlock(v30);
    std::mutex::unlock(v17);
LABEL_183:
    if (!*(_BYTE *)(a2 + 384))
    {
LABEL_186:
      *(_BYTE *)(a1 + 120) = 1;
      return;
    }
    v109.__r_.__value_.__r.__words[0] = a2 + 352;
    v109.__r_.__value_.__l.__size_ = a3;
    v83[0] = &off_24EC6BCA0;
    v83[1] = &v109;
    v84[0] = &v94;
    sub_22456BD10((uint64_t)v83, (uint64_t)__p);
    if (v131)
    {
      *(_BYTE *)a1 = 0;
      goto LABEL_186;
    }
    sub_22456A158((uint64_t)__p, &v109);
    if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
      sub_223197FA4(&__dst, v109.__r_.__value_.__l.__data_, v109.__r_.__value_.__l.__size_);
    else
      __dst = v109;
    v98 = 1;
    LOBYTE(v99) = 0;
    v103 = 0;
    v104 = 1;
    sub_224012298((uint64_t)v83, 2u, (__int128 *)&__dst);
    if (v104)
    {
      if (v103)
      {
        if (v102 < 0)
          operator delete(v101);
        if (v100 < 0)
          operator delete(v99);
      }
      if (v98 && SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v109.__r_.__value_.__l.__data_);
      if (!*(_BYTE *)(a2 + 464))
        goto LABEL_206;
    }
    else if (!*(_BYTE *)(a2 + 464))
    {
      goto LABEL_206;
    }
    v76 = *(_QWORD *)(a2 + 456);
    if (!v76)
      sub_223198474();
    (*(void (**)(uint64_t, std::string::size_type, void **))(*(_QWORD *)v76 + 48))(v76, a3, v83);
LABEL_206:
    *(_OWORD *)&v109.__r_.__value_.__l.__data_ = *(_OWORD *)v83;
    v77 = sub_22319FFBC(&v109.__r_.__value_.__s.__data_[16], (__int128 *)v84);
    *(_OWORD *)a1 = *(_OWORD *)&v109.__r_.__value_.__l.__data_;
    *(_BYTE *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 112) = 0;
    if (v118)
    {
      *(_BYTE *)(a1 + 40) = 0;
      v78 = v111;
      if (v111)
      {
        *(_OWORD *)(a1 + 16) = *(_OWORD *)v77;
        *(_QWORD *)(a1 + 32) = *((_QWORD *)v77 + 2);
        *((_QWORD *)v77 + 1) = 0;
        *((_QWORD *)v77 + 2) = 0;
        *(_QWORD *)v77 = 0;
        *(_BYTE *)(a1 + 40) = 1;
      }
      *(_BYTE *)(a1 + 48) = 0;
      *(_BYTE *)(a1 + 104) = 0;
      if (v117)
      {
        v79 = v114;
        *(_QWORD *)(a1 + 64) = v113;
        *(_OWORD *)(a1 + 48) = *(_OWORD *)v112;
        v112[0] = 0;
        v112[1] = 0;
        *(_QWORD *)(a1 + 72) = v79;
        *(_OWORD *)(a1 + 80) = *(_OWORD *)v115;
        *(_QWORD *)(a1 + 96) = v116;
        v113 = 0;
        v115[0] = 0;
        v115[1] = 0;
        v116 = 0;
        *(_BYTE *)(a1 + 104) = 1;
      }
      *(_BYTE *)(a1 + 112) = 1;
      *(_BYTE *)(a1 + 120) = 0;
      if (v78 && v110 < 0)
        operator delete((void *)v109.__r_.__value_.__r.__words[2]);
    }
    else
    {
      *(_BYTE *)(a1 + 120) = 0;
    }
    if (v92)
    {
      if (v91)
      {
        if (v90 < 0)
          operator delete(v89);
        if (v88 < 0)
          operator delete(v87);
      }
      if (v86 && v85 < 0)
        operator delete(v84[0]);
    }
    if (!v131 && v130)
    {
      if (v129)
      {
        if (SHIBYTE(v128) < 0)
          operator delete(v127[0]);
        if (SHIBYTE(v125) < 0)
          operator delete(v124[0]);
      }
      if (v123 && v122 < 0)
      {
        v80 = v120;
LABEL_245:
        operator delete(v80);
        return;
      }
    }
    return;
  }
  if (*(_BYTE *)(a2 + 608))
    (*(void (**)(_QWORD, std::string::size_type))(**(_QWORD **)(a2 + 600) + 56))(*(_QWORD *)(a2 + 600), a3 + 8);
  v7 = *(std::mutex **)(a2 + 616);
  std::mutex::lock(v7);
  v8 = (char *)operator new(0x80uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_24EC6BC50;
  *(_OWORD *)(v8 + 104) = 0u;
  *((_QWORD *)v8 + 15) = 0;
  *(_OWORD *)(v8 + 88) = 0u;
  *((_QWORD *)v8 + 3) = 850045863;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  *((_OWORD *)v8 + 4) = 0u;
  *((_QWORD *)v8 + 10) = 0;
  v83[1] = 0;
  v84[0] = 0;
  v83[0] = 0;
  LOBYTE(__p[0]) = 0;
  v121 = 0;
  sub_2241277A4((_QWORD *)v8 + 11, 1, (uint64_t)v83, (uint64_t *)__p);
  if (v121 && SHIBYTE(v120) < 0)
    operator delete(__p[0]);
  if (v83[0])
  {
    v83[1] = v83[0];
    operator delete(v83[0]);
  }
  *((_QWORD *)v8 + 15) = 0;
  *((_QWORD *)v8 + 14) = 0;
  *((_QWORD *)v8 + 13) = v8 + 112;
  v109.__r_.__value_.__r.__words[0] = (std::string::size_type)(v8 + 24);
  v109.__r_.__value_.__l.__size_ = (std::string::size_type)v8;
  __p[0] = (void *)(a3 + 8);
  v9 = sub_223ABE324((uint64_t **)(a2 + 624), (unsigned __int8 *)(a3 + 8), (_OWORD **)__p);
  *(_OWORD *)&v109.__r_.__value_.__l.__data_ = 0uLL;
  v10 = (std::__shared_weak_count *)v9[7];
  v9[6] = (uint64_t)(v8 + 24);
  v9[7] = (uint64_t)v8;
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  size = (std::__shared_weak_count *)v109.__r_.__value_.__l.__size_;
  if (!v109.__r_.__value_.__l.__size_)
    goto LABEL_18;
  v14 = (unint64_t *)(v109.__r_.__value_.__l.__size_ + 8);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
  {
LABEL_18:
    std::mutex::unlock(v7);
    v16 = *(_QWORD *)(a3 + 216);
    if ((_DWORD)v16 == 1)
      goto LABEL_19;
LABEL_92:
    if (!(_DWORD)v16)
      goto LABEL_183;
    goto LABEL_93;
  }
  ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
  std::__shared_weak_count::__release_weak(size);
  std::mutex::unlock(v7);
  v16 = *(_QWORD *)(a3 + 216);
  if ((_DWORD)v16 != 1)
    goto LABEL_92;
LABEL_19:
  if (HIDWORD(v16) <= 2)
    goto LABEL_183;
LABEL_93:
  v40 = *(_OWORD *)(a2 + 488);
  v107 = *(_OWORD *)(a2 + 472);
  *(_OWORD *)v108 = v40;
  *(_OWORD *)&v108[9] = *(_OWORD *)(a2 + 497);
  v41 = mach_continuous_time();
  v42 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v42 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info((mach_timebase_info_t)&v95);
    LODWORD(v82) = HIDWORD(v95.__r_.__value_.__r.__words[0]);
    LODWORD(v81) = v95.__r_.__value_.__l.__data_;
    *(double *)&qword_255795558 = (double)v81 / (double)v82;
    __cxa_guard_release(&qword_255795560);
  }
  __p[0] = (void *)llround(*(double *)&qword_255795558 * (double)v41);
  __p[1] = (void *)2;
  LOBYTE(v120) = 0;
  v123 = 0;
  LOBYTE(v124[0]) = 0;
  LOBYTE(v126) = 0;
  LOBYTE(v127[0]) = 0;
  LOBYTE(v128) = 0;
  v130 = 0;
  v132 = 0;
  v133 = 0;
  v134 = 0;
  v43 = operator new();
  *(_QWORD *)v43 = &off_24EC677F8;
  v44 = *(_OWORD *)v108;
  *(_OWORD *)(v43 + 8) = v107;
  *(_OWORD *)(v43 + 24) = v44;
  *(_OWORD *)(v43 + 40) = *(_OWORD *)&v108[16];
  sub_2231AB0FC(v43 + 64, (uint64_t)__p);
  *(_QWORD *)v43 = &off_24EC677A8;
  v109.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC6A3B8;
  v109.__r_.__value_.__l.__size_ = v43;
  v45 = (_QWORD *)operator new();
  *v45 = &off_24EC6A4B0;
  v45[1] = 0;
  v45[2] = 0;
  v45[3] = v43;
  v109.__r_.__value_.__r.__words[2] = (std::string::size_type)v45;
  sub_2231AD66C((uint64_t)__p);
  sub_22412B678(&v105, (uint64_t)&v109, 1uLL);
  v46 = (std::__shared_weak_count *)v109.__r_.__value_.__r.__words[2];
  if (v109.__r_.__value_.__r.__words[2])
  {
    v47 = (unint64_t *)(v109.__r_.__value_.__r.__words[2] + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  sub_22413F8A8((uint64_t)__p, a2, (uint64_t *)&v105, a3 + 8);
  v49 = v131;
  if (!v131)
  {
    sub_22456A158((uint64_t)__p, &v95);
    v50 = std::string::insert(&v95, 0, "While connecting a new client, failed to send configuration to client: ", 0x47uLL);
    v52 = (void *)v50->__r_.__value_.__r.__words[0];
    v51 = v50->__r_.__value_.__l.__size_;
    v96[0] = v50->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v96 + 3) = *(_DWORD *)((char *)&v50->__r_.__value_.__r.__words[2] + 3);
    v53 = SHIBYTE(v50->__r_.__value_.__r.__words[2]);
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    if (v53 < 0)
    {
      sub_223197FA4(&__dst, v52, v51);
    }
    else
    {
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v52;
      __dst.__r_.__value_.__l.__size_ = v51;
      LODWORD(__dst.__r_.__value_.__r.__words[2]) = v96[0];
      *(_DWORD *)((char *)&__dst.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v96 + 3);
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v53;
    }
    v98 = 1;
    LOBYTE(v99) = 0;
    v103 = 0;
    v104 = 1;
    sub_224012298((uint64_t)&v109, 2u, (__int128 *)&__dst);
    if (v104)
    {
      if (v103)
      {
        if (v102 < 0)
          operator delete(v101);
        if (v100 < 0)
          operator delete(v99);
      }
      if (v98 && SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
    }
    if (v53 < 0)
      operator delete(v52);
    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v95.__r_.__value_.__l.__data_);
    *(_OWORD *)v83 = *(_OWORD *)&v109.__r_.__value_.__l.__data_;
    sub_22319FFBC(v84, (__int128 *)&v109.__r_.__value_.__r.__words[2]);
    v93 = 1;
    if (v118)
    {
      if (v117)
      {
        if (SHIBYTE(v116) < 0)
          operator delete(v115[0]);
        if (SHIBYTE(v113) < 0)
          operator delete(v112[0]);
      }
      if (v111 && v110 < 0)
        operator delete((void *)v109.__r_.__value_.__r.__words[2]);
    }
    if (!v131 && v130)
    {
      if (v129)
      {
        if (SHIBYTE(v128) < 0)
          operator delete(v127[0]);
        if (SHIBYTE(v125) < 0)
          operator delete(v124[0]);
      }
      if (v123 && v122 < 0)
        operator delete(v120);
    }
  }
  v54 = (char *)v105;
  if (v105)
  {
    v55 = v106;
    v56 = v105;
    if (v106 != v105)
    {
      do
      {
        v57 = (std::__shared_weak_count *)*((_QWORD *)v55 - 1);
        if (v57)
        {
          v58 = (unint64_t *)&v57->__shared_owners_;
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        v55 -= 24;
      }
      while (v55 != v54);
      v56 = v105;
    }
    v106 = v54;
    operator delete(v56);
  }
  if (v49 || !v93)
    goto LABEL_183;
  v60 = *(std::mutex **)(a2 + 616);
  std::mutex::lock(v60);
  __p[0] = 0;
  __p[1] = 0;
  v109.__r_.__value_.__r.__words[0] = a3 + 8;
  v61 = sub_223ABE324((uint64_t **)(a2 + 624), (unsigned __int8 *)(a3 + 8), &v109);
  __p[0] = 0;
  __p[1] = 0;
  v62 = (std::__shared_weak_count *)v61[7];
  v61[6] = 0;
  v61[7] = 0;
  if (v62)
  {
    v63 = (unint64_t *)&v62->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v65 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v66 = (unint64_t *)((char *)__p[1] + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  std::mutex::unlock(v60);
  if (*(_BYTE *)(a2 + 464))
  {
    v68 = *(_QWORD *)(a2 + 456);
    if (!v68)
      sub_223198474();
    (*(void (**)(uint64_t, std::string::size_type, void **))(*(_QWORD *)v68 + 48))(v68, a3, v83);
  }
  if (*(_BYTE *)(a2 + 608))
    (*(void (**)(_QWORD, std::string::size_type))(**(_QWORD **)(a2 + 600) + 64))(*(_QWORD *)(a2 + 600), a3 + 8);
  *(_OWORD *)__p = *(_OWORD *)v83;
  v69 = sub_22319FFBC(&v120, (__int128 *)v84);
  *(_OWORD *)a1 = *(_OWORD *)__p;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (v130)
  {
    *(_BYTE *)(a1 + 40) = 0;
    v70 = v123;
    if (v123)
    {
      *(_OWORD *)(a1 + 16) = *(_OWORD *)v69;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)v69 + 2);
      *((_QWORD *)v69 + 1) = 0;
      *((_QWORD *)v69 + 2) = 0;
      *(_QWORD *)v69 = 0;
      *(_BYTE *)(a1 + 40) = 1;
    }
    *(_BYTE *)(a1 + 48) = 0;
    *(_BYTE *)(a1 + 104) = 0;
    if (v129)
    {
      v71 = v126;
      *(_QWORD *)(a1 + 64) = v125;
      *(_OWORD *)(a1 + 48) = *(_OWORD *)v124;
      v124[0] = 0;
      v124[1] = 0;
      *(_QWORD *)(a1 + 72) = v71;
      *(_OWORD *)(a1 + 80) = *(_OWORD *)v127;
      *(_QWORD *)(a1 + 96) = v128;
      v125 = 0;
      v127[0] = 0;
      v127[1] = 0;
      v128 = 0;
      *(_BYTE *)(a1 + 104) = 1;
    }
    *(_BYTE *)(a1 + 112) = 1;
    *(_BYTE *)(a1 + 120) = 0;
    if (v70 && v122 < 0)
      operator delete(v120);
  }
  else
  {
    *(_BYTE *)(a1 + 120) = 0;
  }
  if (v93 && v92)
  {
    if (v91)
    {
      if (v90 < 0)
        operator delete(v89);
      if (v88 < 0)
        operator delete(v87);
    }
    if (v86 && v85 < 0)
    {
      v80 = v84[0];
      goto LABEL_245;
    }
  }
}

void sub_224140EC0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255795560);
  _Unwind_Resume(a1);
}

void sub_224140ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a72;
  void *v72;

  operator delete(v72);
  if (a32 < 0)
    operator delete(__p);
  sub_223197D38((uint64_t)&a72);
  sub_2231A62F0(&a47);
  _Unwind_Resume(a1);
}

void sub_224140F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_224141130((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_224140FAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_22319FD28((uint64_t)&a31);
  JUMPOUT(0x224140FB8);
}

void sub_224140FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;

  sub_223197D38((uint64_t)&a69);
  _Unwind_Resume(a1);
}

void sub_224140FEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319723C((uint64_t)&a9);
  JUMPOUT(0x224140FF8);
}

void sub_224141008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44)
{
  sub_2231A62F0(&a44);
  _Unwind_Resume(a1);
}

void sub_22414101C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  sub_2241231D8((uint64_t)&a53);
  _Unwind_Resume(a1);
}

void sub_224141030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;
  uint64_t v69;

  (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
  sub_2231AD66C((uint64_t)&a69);
  _Unwind_Resume(a1);
}

void sub_224141054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;
  uint64_t v69;

  MEMORY[0x227684CE8](v69, 0x10B3C406D9A893FLL);
  sub_2231AD66C((uint64_t)&a69);
  _Unwind_Resume(a1);
}

void sub_224141080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;

  sub_2231AD66C((uint64_t)&a69);
  _Unwind_Resume(a1);
}

void sub_224141098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  std::mutex *v53;

  sub_223167354((uint64_t)&a53);
  std::mutex::unlock(v53);
  _Unwind_Resume(a1);
}

void sub_2241410B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a72;
  char a73;
  std::mutex *v73;
  std::__shared_weak_count *v74;
  std::mutex *v75;
  void *v77;

  if (a73 && a72 < 0)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  std::mutex::~mutex(v75);
  std::__shared_weak_count::~__shared_weak_count(v74);
  operator delete(v77);
  std::mutex::unlock(v73);
  _Unwind_Resume(a1);
}

void sub_224141104(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_224141118(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_224141130(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 120) || !*(_BYTE *)(a1 + 112))
    return a1;
  if (*(_BYTE *)(a1 + 104))
  {
    if ((*(char *)(a1 + 103) & 0x80000000) == 0)
    {
      if ((*(char *)(a1 + 71) & 0x80000000) == 0)
        goto LABEL_6;
LABEL_10:
      operator delete(*(void **)(a1 + 48));
      if (!*(_BYTE *)(a1 + 40))
        return a1;
      goto LABEL_7;
    }
    operator delete(*(void **)(a1 + 80));
    if (*(char *)(a1 + 71) < 0)
      goto LABEL_10;
  }
LABEL_6:
  if (!*(_BYTE *)(a1 + 40))
    return a1;
LABEL_7:
  if ((*(char *)(a1 + 39) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_2241411C4(uint64_t a1, uint64_t a2, std::string::size_type a3, _QWORD *a4)
{
  std::mutex *v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::mutex *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *v14;
  std::mutex *v15;
  char *v16;
  size_t v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  int v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  std::string v28;
  char v29;
  unsigned __int8 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  char v36;
  char v37;
  std::string __dst;
  char v39;
  void *v40;
  char v41;
  void *__p;
  char v43;
  char v44;
  char v45;
  __int128 v46;
  __int128 v47;
  char v48;
  char v49;
  void *v50;
  char v51;
  void *v52;
  char v53;
  char v54;
  char v55;
  _OWORD *v56[4];
  char v57;
  char v58;
  void *v59;
  char v60;
  void *v61;
  char v62;
  char v63;
  char v64;
  char v65;

  v8 = *(std::mutex **)(a2 + 616);
  std::mutex::lock(v8);
  v56[0] = (_OWORD *)(a3 + 8);
  v9 = sub_223ABE324((uint64_t **)(a2 + 624), (unsigned __int8 *)(a3 + 8), v56);
  v11 = (std::mutex *)v9[6];
  v10 = (std::__shared_weak_count *)v9[7];
  v27 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  std::mutex::unlock(v8);
  if (v11)
  {
    std::mutex::lock(v11);
    v14 = (_QWORD *)*a4;
    if ((_QWORD *)*a4 != a4 + 1)
    {
      v15 = v11;
      do
      {
        v16 = (char *)(v14 + 4);
        sub_223240B68((uint64_t **)&v15[1].__m_.__opaque[8], (const void **)v14 + 4, (uint64_t)(v14 + 4));
        if (*((char *)v14 + 55) < 0)
        {
          v16 = (char *)v14[4];
          v17 = v14[5];
        }
        else
        {
          v17 = *((unsigned __int8 *)v14 + 55);
        }
        v15 = v11;
        sub_22412831C((uint64_t)&v11[1], v16, v17, *((unsigned __int8 *)v14 + 56));
        v18 = (_QWORD *)v14[1];
        if (v18)
        {
          do
          {
            v19 = v18;
            v18 = (_QWORD *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            v19 = (_QWORD *)v14[2];
            v20 = *v19 == (_QWORD)v14;
            v14 = v19;
          }
          while (!v20);
        }
        v14 = v19;
      }
      while (v19 != a4 + 1);
    }
    std::mutex::unlock(v11);
  }
  if (!*(_BYTE *)(a2 + 424))
    goto LABEL_21;
  v28.__r_.__value_.__r.__words[0] = a2 + 392;
  v28.__r_.__value_.__l.__size_ = a3;
  *(_QWORD *)&v46 = &off_24EC6BCE0;
  *((_QWORD *)&v46 + 1) = &v28;
  *(_QWORD *)&v47 = a4;
  sub_22456BD10((uint64_t)&v46, (uint64_t)v56);
  if (v65)
  {
    *(_BYTE *)a1 = 0;
LABEL_21:
    *(_BYTE *)(a1 + 120) = 1;
    goto LABEL_22;
  }
  sub_22456A158((uint64_t)v56, &v28);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    sub_223197FA4(&__dst, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
  else
    __dst = v28;
  v39 = 1;
  LOBYTE(v40) = 0;
  v44 = 0;
  v45 = 1;
  sub_224012298((uint64_t)&v46, 2u, (__int128 *)&__dst);
  if (v45)
  {
    if (v44)
    {
      if (v43 < 0)
        operator delete(__p);
      if (v41 < 0)
        operator delete(v40);
    }
    if (v39 && SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a2 + 464))
      goto LABEL_46;
LABEL_44:
    v23 = *(_QWORD *)(a2 + 456);
    if (!v23)
      sub_223198474();
    (*(void (**)(uint64_t, std::string::size_type, __int128 *))(*(_QWORD *)v23 + 48))(v23, a3, &v46);
    goto LABEL_46;
  }
  operator delete(v28.__r_.__value_.__l.__data_);
  if (*(_BYTE *)(a2 + 464))
    goto LABEL_44;
LABEL_46:
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v46;
  v24 = sub_22319FFBC(&v28.__r_.__value_.__s.__data_[16], &v47);
  *(_OWORD *)a1 = *(_OWORD *)&v28.__r_.__value_.__l.__data_;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (v37)
  {
    *(_BYTE *)(a1 + 40) = 0;
    v25 = v30;
    if (v30)
    {
      *(_OWORD *)(a1 + 16) = *(_OWORD *)v24;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)v24 + 2);
      *((_QWORD *)v24 + 1) = 0;
      *((_QWORD *)v24 + 2) = 0;
      *(_QWORD *)v24 = 0;
      *(_BYTE *)(a1 + 40) = 1;
    }
    *(_BYTE *)(a1 + 48) = 0;
    *(_BYTE *)(a1 + 104) = 0;
    if (v36)
    {
      v26 = v33;
      *(_QWORD *)(a1 + 64) = v32;
      *(_OWORD *)(a1 + 48) = v31;
      v31 = 0uLL;
      *(_QWORD *)(a1 + 72) = v26;
      *(_OWORD *)(a1 + 80) = v34;
      *(_QWORD *)(a1 + 96) = v35;
      v32 = 0;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(a1 + 104) = 1;
    }
    *(_BYTE *)(a1 + 112) = 1;
    *(_BYTE *)(a1 + 120) = 0;
    if (v25 && v29 < 0)
      operator delete((void *)v28.__r_.__value_.__r.__words[2]);
  }
  else
  {
    *(_BYTE *)(a1 + 120) = 0;
  }
  if (v55)
  {
    if (v54)
    {
      if (v53 < 0)
        operator delete(v52);
      if (v51 < 0)
        operator delete(v50);
    }
    if (v49 && v48 < 0)
      operator delete((void *)v47);
  }
  if (!v65 && v64)
  {
    if (v63)
    {
      if (v62 < 0)
        operator delete(v61);
      if (v60 < 0)
        operator delete(v59);
    }
    if (v58 && v57 < 0)
      operator delete(v56[2]);
  }
LABEL_22:
  if (v27)
  {
    v21 = (unint64_t *)&v27->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

void sub_2241415DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  uint64_t v43;

  if (a16 < 0)
    operator delete(__p);
  sub_223197D38(v43 - 208);
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_224141634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22414164C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_224141660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  std::mutex::unlock(v9);
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22414167C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = *(std::__shared_weak_count **)(a1 + 280);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 264);
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 264);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = *(std::__shared_weak_count **)(a1 + 248);
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  sub_224011EC0(a1 + 64);
  if (*(_BYTE *)(a1 + 56))
  {
    if (*(char *)(a1 + 55) < 0)
      operator delete(*(void **)(a1 + 32));
  }
}

uint64_t sub_22414171C(uint64_t a1, uint64_t a2)
{
  int v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 56) = 0;
  if (*(_BYTE *)(a2 + 56))
  {
    if (*(char *)(a2 + 55) < 0)
    {
      sub_223197FA4((_BYTE *)(a1 + 32), *(void **)(a2 + 32), *(_QWORD *)(a2 + 40));
    }
    else
    {
      v5 = *(_OWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = v5;
    }
    *(_BYTE *)(a1 + 56) = 1;
  }
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  if (*(_BYTE *)(a2 + 208))
  {
    sub_224011F80((char *)(a1 + 64), (__int128 *)(a2 + 64));
    *(_BYTE *)(a1 + 208) = 1;
  }
  v6 = *(_OWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = v6;
  v7 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 16);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  return a1;
}

void sub_224141840(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(_BYTE *)(v1 + 56))
  {
    if (*(char *)(v1 + 55) < 0)
      operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_224141874(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 288;
    sub_22414167C(i - 288);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_2241418C4(uint64_t a1, const char *a2)
{
  uint64_t result;
  _DWORD v4[6];
  int v5;
  _QWORD **v6;
  const char *v7;
  _DWORD *v8;
  const char *v9;
  const char *v10;
  _QWORD *v11;

  v5 = 0;
  sub_223844F44(v4, "server cannot receive ");
  if (*(_QWORD *)a2)
  {
    v6 = (_QWORD **)v4;
    v7 = a2;
    v8 = v4;
    v9 = a2;
    v10 = a2;
    if (v5 != -1)
    {
      v11 = &v6;
      ((void (*)(_QWORD **, _DWORD *))off_24EC6BB40[v5])(&v11, v4);
      goto LABEL_6;
    }
LABEL_11:
    sub_22316DD70();
  }
  v6 = (_QWORD **)v4;
  v7 = "nullptr";
  v8 = v4;
  v9 = "nullptr";
  v10 = "nullptr";
  if (v5 == -1)
    goto LABEL_11;
  v11 = &v6;
  ((void (*)(_QWORD **, _DWORD *))off_24EC6BB10[v5])(&v11, v4);
LABEL_6:
  v6 = (_QWORD **)v4;
  v7 = ", server object has been destroyed";
  v8 = v4;
  v9 = ", server object has been destroyed";
  v10 = ", server object has been destroyed";
  if (v5 == -1)
    sub_22316DD70();
  v11 = &v6;
  ((void (*)(_QWORD **, _DWORD *))off_24EC6BB58[v5])(&v11, v4);
  if (v5 == -1)
    sub_22316DD70();
  v6 = &v11;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24EC6BB28[v5])(&v6, v4);
  if (v5 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24EC6BAF8[v5])(&v6, v4);
  return result;
}

void sub_224141A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_224141A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_224141A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_224141A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_224141A90(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6BB80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_224141AA0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6BB80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_224141AD0(uint64_t a1)
{
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 96));
  std::mutex::~mutex((std::mutex *)(a1 + 32));
}

void sub_224141B00()
{
  JUMPOUT(0x227684CE8);
}

uint64_t sub_224141B14(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = *(_QWORD **)(a1 + 8);
  v2 = *(_QWORD *)(*v1 + 24);
  if (!v2)
    sub_223198474();
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v2 + 48))(v2, v1[1], *(_QWORD *)(a1 + 16));
}

void sub_224141B50()
{
  JUMPOUT(0x227684CE8);
}

uint64_t sub_224141B64(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)a1[1];
  v2 = *(_QWORD *)(*v1 + 24);
  if (!v2)
    sub_223198474();
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v2 + 48))(v2, v1[1], a1[2], a1[3]);
}

void sub_224141B9C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6BC50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_224141BAC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6BC50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_224141BDC(uint64_t a1)
{
  uint64_t v2;

  sub_22323DF84(a1 + 104, *(char **)(a1 + 112));
  v2 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24EC6A628;
  *(_QWORD *)(a1 + 96) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::mutex::~mutex((std::mutex *)(a1 + 24));
}

void sub_224141C30()
{
  JUMPOUT(0x227684CE8);
}

uint64_t sub_224141C44(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v6;

  v1 = *(uint64_t **)(a1 + 8);
  v3 = *v1;
  v2 = v1[1];
  LOBYTE(v1) = **(_BYTE **)(a1 + 16);
  v4 = *(_QWORD *)(v3 + 24);
  v6 = (char)v1;
  if (!v4)
    sub_223198474();
  return (*(uint64_t (**)(uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 48))(v4, v2, &v6);
}

void sub_224141C8C()
{
  JUMPOUT(0x227684CE8);
}

uint64_t sub_224141CA0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = *(_QWORD **)(a1 + 8);
  v2 = *(_QWORD *)(*v1 + 24);
  if (!v2)
    sub_223198474();
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v2 + 48))(v2, v1[1], *(_QWORD *)(a1 + 16));
}

uint64_t *sub_224141CD8(uint64_t *a1, _QWORD *a2, float *a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float *v26;
  __int32 v27;
  int32x2_t v28;
  float32x4_t v29;
  int8x16_t v30;
  int32x4_t v31;
  int32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  unsigned __int8 v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  void *v40;
  uint64_t v41;
  char v42;
  size_t v43;
  void *v44;
  unint64_t v45;
  const void *v46;
  uint64_t v47;
  uint64_t v48;
  void **v49;
  uint64_t v50;
  const char *v51;
  size_t v52;
  unsigned __int8 v53;
  unsigned __int8 v54;
  const char *v55;
  size_t v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  size_t v64;
  void *v65;
  void **v66;
  size_t v67;
  size_t v68;
  char *v69;
  void *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char v75;
  _QWORD *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *p_shared_owners;
  unint64_t v80;
  char *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  const char *v96;
  void *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  char *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  void **v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  _QWORD *exception;
  float32x4_t v123;
  float32x4_t v124;
  const char *v125;
  float32x4_t v126;
  int v127;
  void *v128;
  __int128 v129;
  uint64_t v130;
  const char *v131;
  int v132;
  const char *v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  void *v136[2];
  __int128 __p;
  uint64_t v138;
  const void *v139;
  __int128 v140;
  const void *v141;
  unint64_t v142;
  __int128 v143;
  uint64_t v144;
  char v145;
  char v146;
  unint64_t v147;
  int v148;
  uint64_t v149;
  __int128 v150;
  __int128 v151;
  uint64_t v152;
  char v153;
  __int128 v154;
  const void *v155;
  unint64_t v156;
  void *v157[2];
  uint64_t v158;
  char v159;
  char v160;
  char v161;
  float v162;
  __int128 v163;
  unint64_t v164;
  float v165;
  float v166;
  char *v167;
  __int128 v168;
  int v169;
  void *__dst[2];
  int64_t v171;
  _BYTE *v172;
  void *__src[2];
  void **v174;
  char *v175;
  std::__shared_weak_count *v176;
  __int128 v177;
  uint64_t v178;
  _BYTE v179[24];
  __int128 v180;
  char *v181;
  size_t v182;
  unint64_t v183;
  void *v184;
  char v185;
  char v186;
  char v187;
  uint64_t v188;

  v188 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  v7 = *((_OWORD *)a2 + 1);
  *(_OWORD *)v6 = *(_OWORD *)a2;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(v6 + 32) = *((_OWORD *)a2 + 2);
  *(_OWORD *)(v6 + 48) = v8;
  *(_DWORD *)(v6 + 128) = 0;
  *(_BYTE *)(v6 + 136) = 4;
  *a1 = v6;
  v9 = *((float *)a2 + 3);
  v10 = *((float *)a2 + 7);
  v164 = __PAIR64__(LODWORD(v10), LODWORD(v9));
  v11 = *((float *)a2 + 11);
  v12 = *((float *)a2 + 15);
  v165 = v11;
  v166 = v12;
  v163 = xmmword_2245F53D0;
  if (v9 != 0.0 && fabsf(v9) > *a3
    || v10 != 0.0 && fabsf(v10) > *a3
    || v11 != 0.0 && fabsf(v11) > *a3
    || v12 != 1.0 && (v12 <= 1.0 ? (v13 = 1.0 - v12) : (v13 = v12 + -1.0), v13 > *a3))
  {
    LODWORD(v130) = 0;
    sub_223C8F720(&v128, "se3 group matrix must be an affine 3x4 transform:\n");
    *(_QWORD *)v179 = &v128;
    *(_QWORD *)&v179[8] = "expected last row: ";
    *(_QWORD *)&v179[16] = &v128;
    *(_QWORD *)&v180 = "expected last row: ";
    *((_QWORD *)&v180 + 1) = "expected last row: ";
    if ((_DWORD)v130 == -1)
      sub_22316DD70();
    v167 = v179;
    ((void (*)(char **, void **))off_24EC6BD48[v130])(&v167, &v128);
    sub_224144708((uint64_t)__dst, (uint64_t)&v128, (float *)&v163);
    *(_QWORD *)v179 = &v128;
    *(_QWORD *)&v179[8] = "\n";
    *(_QWORD *)&v179[16] = &v128;
    *(_QWORD *)&v180 = "\n";
    *((_QWORD *)&v180 + 1) = "\n";
    if ((_DWORD)v130 == -1)
      sub_22316DD70();
    v167 = v179;
    ((void (*)(char **, void **))off_24EC6BD60[v130])(&v167, &v128);
    *(_QWORD *)v179 = &v128;
    *(_QWORD *)&v179[8] = "  actual last row: ";
    *(_QWORD *)&v179[16] = &v128;
    *(_QWORD *)&v180 = "  actual last row: ";
    *((_QWORD *)&v180 + 1) = "  actual last row: ";
    if ((_DWORD)v130 == -1)
      sub_22316DD70();
    v167 = v179;
    ((void (*)(char **, void **))off_24EC6BD48[v130])(&v167, &v128);
    sub_224144708((uint64_t)&v177, (uint64_t)&v128, (float *)&v164);
    *(_QWORD *)v179 = &v128;
    *(_QWORD *)&v179[8] = "\n";
    *(_QWORD *)&v179[16] = &v128;
    *(_QWORD *)&v180 = "\n";
    *((_QWORD *)&v180 + 1) = "\n";
    if ((_DWORD)v130 == -1)
      sub_22316DD70();
    v167 = v179;
    ((void (*)(char **, void **))off_24EC6BD60[v130])(&v167, &v128);
    *(_QWORD *)v179 = &v128;
    *(_QWORD *)&v179[8] = "   with tolerance: ";
    *(_QWORD *)&v179[16] = &v128;
    *(_QWORD *)&v180 = "   with tolerance: ";
    *((_QWORD *)&v180 + 1) = "   with tolerance: ";
    if ((_DWORD)v130 == -1)
      sub_22316DD70();
    v167 = v179;
    ((void (*)(char **, void **))off_24EC6BD48[v130])(&v167, &v128);
    sub_223208764((uint64_t)v179, (uint64_t)&v128, a3);
    if ((_DWORD)v130 == -1)
      sub_22316DD70();
    *(_QWORD *)v179 = &v167;
    ((void (*)(void **__return_ptr, _BYTE *, void **))off_24EC6BD90[v130])(__src, v179, &v128);
    if ((_DWORD)v130 != -1)
      ((void (*)(_BYTE *, void **))off_24EC6BD30[v130])(v179, &v128);
    if (SHIBYTE(v174) < 0)
    {
      sub_223197FA4(v179, __src[0], (unint64_t)__src[1]);
    }
    else
    {
      *(_OWORD *)v179 = *(_OWORD *)__src;
      *(_QWORD *)&v179[16] = v174;
    }
    LOBYTE(v180) = 1;
    BYTE8(v180) = 0;
    v186 = 0;
    v187 = 1;
    sub_22454BC28((uint64_t)v179, (uint64_t)v136);
    v150 = *(_OWORD *)v136;
    LOBYTE(v151) = 0;
    v160 = 0;
    if (!(_BYTE)v147)
    {
      v161 = 0;
      goto LABEL_49;
    }
LABEL_40:
    v153 = 0;
    if ((_BYTE)v139)
    {
      v151 = __p;
      v152 = v138;
      v138 = 0;
      __p = 0uLL;
      v153 = 1;
    }
    LOBYTE(v154) = 0;
    v159 = 0;
    if (v145)
    {
      v155 = v141;
      v154 = v140;
      v140 = 0uLL;
      v156 = v142;
      *(_OWORD *)v157 = v143;
      v158 = v144;
      v141 = 0;
      v143 = 0uLL;
      v144 = 0;
      v159 = 1;
    }
    v160 = 1;
    v161 = 0;
    if ((_BYTE)v139 && SHIBYTE(v138) < 0)
    {
      operator delete((void *)__p);
      if (!v187)
        goto LABEL_56;
      goto LABEL_50;
    }
LABEL_49:
    if (!v187)
      goto LABEL_56;
    goto LABEL_50;
  }
  v14 = sub_22322BAAC((uint64_t)a2);
  v162 = v14;
  if (v14 == 1.0 || (v14 >= 1.0 ? (v18 = v14 + -1.0) : (v18 = 1.0 - v14), v18 <= a3[1]))
  {
    v15.i32[0] = *((_DWORD *)a2 + 2);
    v19 = (float32x2_t)a2[2];
    v16.i32[0] = *((_DWORD *)a2 + 6);
    v20 = (float32x2_t)a2[4];
    v17.i32[0] = *((_DWORD *)a2 + 10);
    v21 = (float32x2_t)vzip1_s32(*(int32x2_t *)a2, (int32x2_t)v19);
    v22 = (float32x2_t)vzip2_s32(*(int32x2_t *)a2, (int32x2_t)v19);
    *(float32x2_t *)v23.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v21, COERCE_FLOAT(*a2)), v22, *(float32x2_t *)a2, 1), (float32x2_t)__PAIR64__(v16.u32[0], v15.u32[0]), v15.f32[0]);
    *(float32x2_t *)&v23.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v20, *(float32x2_t *)a2), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a2, 1), v20, 1), v15, v17);
    *(float32x2_t *)v24.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v21, v19.f32[0]), v22, v19, 1), (float32x2_t)__PAIR64__(v16.u32[0], v15.u32[0]), v16.f32[0]);
    *(float32x2_t *)&v24.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v20, v19), (float32x2_t)vdup_lane_s32((int32x2_t)v19, 1), v20, 1), v16, v17);
    *(float32x2_t *)v25.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v21, v20.f32[0]), v22, v20, 1), (float32x2_t)__PAIR64__(v16.u32[0], v15.u32[0]), v17.f32[0]);
    v28 = (int32x2_t)vmla_f32(vmla_lane_f32(vmul_f32(v20, v20), (float32x2_t)vdup_lane_s32((int32x2_t)v20, 1), v20, 1), v17, v17);
    *(int32x2_t *)&v25.u32[2] = v28;
    v27 = *((_DWORD *)a3 + 2);
    v26 = a3 + 2;
    v28.i32[0] = v27;
    v29 = vaddq_f32(v23, (float32x4_t)xmmword_22469B440);
    v30 = (int8x16_t)vaddq_f32(v24, (float32x4_t)xmmword_22469B450);
    v29.i32[3] = v30.i32[0];
    v31 = (int32x4_t)vaddq_f32(v25, (float32x4_t)xmmword_224649840);
    v32 = (int32x4_t)vabsq_f32(v29);
    v33.i64[0] = vrev64q_s32(v32).u64[0];
    v33.i64[1] = v32.i64[1];
    v34 = (float32x4_t)vdupq_lane_s32(v28, 0);
    if ((vminv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vcgeq_f32(v34, v33), (int16x8_t)vcgeq_f32(v34, vabsq_f32((float32x4_t)vextq_s8(vextq_s8(v30, v30, 0xCuLL), (int8x16_t)v31, 8uLL))))), 7uLL))) & 1) != 0&& vabsq_f32((float32x4_t)vdupq_laneq_s32(v31, 2)).f32[0] <= *(float *)v28.i32)
    {
      v161 = 1;
      return a1;
    }
    v123 = v25;
    v124 = v24;
    v126 = v23;
    v169 = -1;
    v167 = (char *)operator new(0x48uLL);
    v168 = xmmword_2245C4500;
    strcpy(v167, "se3 group rotation must be orthogonal (expecting identity R^T*R)\n");
    v169 = 1;
    *(_QWORD *)v179 = &v167;
    *(_QWORD *)&v179[8] = "  actual R^T*R:\n";
    *(_QWORD *)&v179[16] = &v167;
    *(_QWORD *)&v180 = "  actual R^T*R:\n";
    *((_QWORD *)&v180 + 1) = "  actual R^T*R:\n";
    v128 = v179;
    sub_224144DC4((uint64_t *)&v128, (uint64_t)&v167);
    LODWORD(v129) = v126.i32[2];
    HIDWORD(v129) = v124.i32[2];
    v128 = (void *)v126.i64[0];
    *(_QWORD *)((char *)&v129 + 4) = v124.i64[0];
    LODWORD(v131) = v123.i32[2];
    v130 = v123.i64[0];
    __src[0] = (void *)0x300000003;
    LODWORD(__src[1]) = 3;
    v174 = &v128;
    LODWORD(v175) = 0;
    sub_224505D70((unsigned int *)__src, __dst);
    *(_QWORD *)v179 = &v167;
    *(_QWORD *)&v179[8] = __dst;
    *(_QWORD *)&v179[16] = &v167;
    *(_QWORD *)&v180 = __dst;
    *((_QWORD *)&v180 + 1) = __dst;
    if (v169 == -1)
      sub_22316DD70();
    v172 = v179;
    ((void (*)(_BYTE **, char **))off_24EC6BD78[v169])(&v172, &v167);
    if (SHIBYTE(v171) < 0)
      operator delete(__dst[0]);
    *(_QWORD *)v179 = &v167;
    *(_QWORD *)&v179[8] = "\n";
    *(_QWORD *)&v179[16] = &v167;
    *(_QWORD *)&v180 = "\n";
    *((_QWORD *)&v180 + 1) = "\n";
    if (v169 == -1)
      sub_22316DD70();
    v128 = v179;
    ((void (*)(void **, char **))off_24EC6BD60[v169])(&v128, &v167);
    *(_QWORD *)v179 = &v167;
    *(_QWORD *)&v179[8] = "with tolerance: ";
    *(_QWORD *)&v179[16] = &v167;
    *(_QWORD *)&v180 = "with tolerance: ";
    *((_QWORD *)&v180 + 1) = "with tolerance: ";
    if (v169 == -1)
      sub_22316DD70();
    v128 = v179;
    ((void (*)(void **, char **))off_24EC6BDC0[v169])(&v128, &v167);
    sub_223208764((uint64_t)v179, (uint64_t)&v167, v26);
    if (v169 == -1)
      sub_22316DD70();
    *(_QWORD *)v179 = &v128;
    ((void (*)(__int128 *__return_ptr, _BYTE *, char **))off_24EC6BD90[v169])(&v177, v179, &v167);
    if (v169 != -1)
      ((void (*)(_BYTE *, char **))off_24EC6BD30[v169])(v179, &v167);
    if (SHIBYTE(v178) < 0)
    {
      sub_223197FA4(v179, (void *)v177, *((unint64_t *)&v177 + 1));
    }
    else
    {
      *(_OWORD *)v179 = v177;
      *(_QWORD *)&v179[16] = v178;
    }
    LOBYTE(v180) = 1;
    BYTE8(v180) = 0;
    v186 = 0;
    v187 = 1;
    sub_22454BC28((uint64_t)v179, (uint64_t)v136);
    v150 = *(_OWORD *)v136;
    LOBYTE(v151) = 0;
    v160 = 0;
    if ((_BYTE)v147)
    {
      v153 = 0;
      if ((_BYTE)v139)
      {
        v151 = __p;
        v152 = v138;
        v138 = 0;
        __p = 0uLL;
        v153 = 1;
      }
      LOBYTE(v154) = 0;
      v159 = 0;
      if (v145)
      {
        v155 = v141;
        v154 = v140;
        v140 = 0uLL;
        v156 = v142;
        *(_OWORD *)v157 = v143;
        v158 = v144;
        v141 = 0;
        v143 = 0uLL;
        v144 = 0;
        v159 = 1;
      }
      v160 = 1;
      v161 = 0;
      if ((_BYTE)v139 && SHIBYTE(v138) < 0)
        operator delete((void *)__p);
    }
    else
    {
      v161 = 0;
    }
    if (v187)
    {
      if (v186)
      {
        if (v185 < 0)
          operator delete(v184);
        if (SHIBYTE(v182) < 0)
          operator delete(*((void **)&v180 + 1));
      }
      if ((_BYTE)v180 && (v179[23] & 0x80000000) != 0)
        operator delete(*(void **)v179);
    }
    if (SHIBYTE(v178) < 0)
    {
      operator delete((void *)v177);
      if (v161)
        return a1;
      goto LABEL_93;
    }
    goto LABEL_92;
  }
  LODWORD(v130) = 0;
  sub_2231A1E00(&v128, "se3 group matrix must have determinant 1\n");
  *(_QWORD *)v179 = &v128;
  *(_QWORD *)&v179[8] = "actual determinant: ";
  *(_QWORD *)&v179[16] = &v128;
  *(_QWORD *)&v180 = "actual determinant: ";
  *((_QWORD *)&v180 + 1) = "actual determinant: ";
  if ((_DWORD)v130 == -1)
    sub_22316DD70();
  v167 = v179;
  ((void (*)(char **, void **))off_24EC6BDA8[v130])(&v167, &v128);
  sub_223208764((uint64_t)__dst, (uint64_t)&v128, &v162);
  *(_QWORD *)v179 = &v128;
  *(_QWORD *)&v179[8] = "\n";
  *(_QWORD *)&v179[16] = &v128;
  *(_QWORD *)&v180 = "\n";
  *((_QWORD *)&v180 + 1) = "\n";
  if ((_DWORD)v130 == -1)
    sub_22316DD70();
  v167 = v179;
  ((void (*)(char **, void **))off_24EC6BD60[v130])(&v167, &v128);
  *(_QWORD *)v179 = &v128;
  *(_QWORD *)&v179[8] = "    with tolerance: ";
  *(_QWORD *)&v179[16] = &v128;
  *(_QWORD *)&v180 = "    with tolerance: ";
  *((_QWORD *)&v180 + 1) = "    with tolerance: ";
  if ((_DWORD)v130 == -1)
    sub_22316DD70();
  v167 = v179;
  ((void (*)(char **, void **))off_24EC6BDA8[v130])(&v167, &v128);
  sub_223208764((uint64_t)v179, (uint64_t)&v128, a3 + 1);
  if ((_DWORD)v130 == -1)
    sub_22316DD70();
  *(_QWORD *)v179 = &v167;
  ((void (*)(void **__return_ptr, _BYTE *, void **))off_24EC6BD90[v130])(__src, v179, &v128);
  if ((_DWORD)v130 != -1)
    ((void (*)(_BYTE *, void **))off_24EC6BD30[v130])(v179, &v128);
  if (SHIBYTE(v174) < 0)
  {
    sub_223197FA4(v179, __src[0], (unint64_t)__src[1]);
  }
  else
  {
    *(_OWORD *)v179 = *(_OWORD *)__src;
    *(_QWORD *)&v179[16] = v174;
  }
  LOBYTE(v180) = 1;
  BYTE8(v180) = 0;
  v186 = 0;
  v187 = 1;
  sub_22454BC28((uint64_t)v179, (uint64_t)v136);
  v150 = *(_OWORD *)v136;
  LOBYTE(v151) = 0;
  v160 = 0;
  if ((_BYTE)v147)
    goto LABEL_40;
  v161 = 0;
  if (!v187)
    goto LABEL_56;
LABEL_50:
  if (!v186)
    goto LABEL_53;
  if ((v185 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v182) & 0x80000000) == 0)
      goto LABEL_53;
LABEL_70:
    operator delete(*((void **)&v180 + 1));
    if (!(_BYTE)v180)
      goto LABEL_56;
    goto LABEL_54;
  }
  operator delete(v184);
  if (SHIBYTE(v182) < 0)
    goto LABEL_70;
LABEL_53:
  if (!(_BYTE)v180)
    goto LABEL_56;
LABEL_54:
  if ((v179[23] & 0x80000000) != 0)
    operator delete(*(void **)v179);
LABEL_56:
  if ((SHIBYTE(v174) & 0x80000000) == 0)
  {
LABEL_92:
    if (v161)
      return a1;
    goto LABEL_93;
  }
  operator delete(__src[0]);
  if (v161)
    return a1;
LABEL_93:
  v35 = atomic_load((unsigned __int8 *)&qword_2540CF008);
  if ((v35 & 1) == 0 && __cxa_guard_acquire(&qword_2540CF008))
  {
    sub_22455F53C(v179);
    sub_223174DE4(v136, "cv3dapi.kit.viz.SE3");
    sub_2232300E0((uint64_t **)v179, (uint64_t)v136, &qword_2540CF000);
    if (SBYTE7(__p) < 0)
      operator delete(v136[0]);
    __cxa_guard_release(&qword_2540CF008);
  }
  v164 = qword_2540CF000;
  if (**(int **)(qword_2540CF000 + 56) > 5
    || (v36 = *(unsigned __int8 *)(qword_2540CF000 + 72),
        v37 = sub_22322F254(qword_2540CF000, "OSLogSurrogateAppender", 1, 0),
        v38 = v37,
        !v36)
    && !v37)
  {
    if (v161)
      return a1;
    goto LABEL_253;
  }
  sub_223195210((uint64_t)v136);
  if (v161)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24EC1FCC0;
    __cxa_throw(exception, (struct type_info *)&unk_24EC1FC98, (void (*)(void *))std::exception::~exception);
  }
  LODWORD(v180) = 0;
  sub_223845124(v179, "Invalid argument for SE3: ");
  sub_2232EDA70((uint64_t)__src, (std::string::size_type)v179, (uint64_t)&v150);
  if ((_DWORD)v180 == -1)
    sub_22316DD70();
  __src[0] = &v167;
  ((void (*)(void **__return_ptr, void **, _BYTE *))off_24EC6BD90[v180])(&v128, __src, v179);
  if ((_DWORD)v180 != -1)
    ((void (*)(void **, _BYTE *))off_24EC6BD30[v180])(__src, v179);
  if (v129 >= 0)
    v40 = &v128;
  else
    v40 = v128;
  if (v129 >= 0)
    v41 = HIBYTE(v129);
  else
    v41 = v129;
  sub_2231813E8(&__p, (uint64_t)v40, v41);
  if ((SHIBYTE(v129) & 0x80000000) == 0)
  {
    v42 = v148;
    v127 = v36;
    if ((v148 & 0x10) == 0)
      goto LABEL_111;
LABEL_116:
    v45 = v147;
    if (v147 < v142)
    {
      v147 = v142;
      v45 = v142;
    }
    v46 = v141;
    v43 = v45 - (_QWORD)v141;
    if (v45 - (unint64_t)v141 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_175;
    goto LABEL_119;
  }
  operator delete(v128);
  v42 = v148;
  v127 = v36;
  if ((v148 & 0x10) != 0)
    goto LABEL_116;
LABEL_111:
  if ((v42 & 8) == 0)
  {
    v43 = 0;
    HIBYTE(v171) = 0;
    v44 = __dst;
    goto LABEL_126;
  }
  v46 = v139;
  v43 = *((_QWORD *)&v140 + 1) - (_QWORD)v139;
  if (*((_QWORD *)&v140 + 1) - (_QWORD)v139 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_175:
    sub_22316DBC0();
LABEL_119:
  if (v43 >= 0x17)
  {
    v47 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v43 | 7) != 0x17)
      v47 = v43 | 7;
    v48 = v47 + 1;
    v44 = operator new(v47 + 1);
    v171 = v48 | 0x8000000000000000;
    __dst[0] = v44;
    __dst[1] = (void *)v43;
    goto LABEL_125;
  }
  HIBYTE(v171) = v43;
  v44 = __dst;
  if (v43)
LABEL_125:
    memmove(v44, v46, v43);
LABEL_126:
  *((_BYTE *)v44 + v43) = 0;
  v128 = &v164;
  *(std::chrono::steady_clock::time_point *)&v129 = std::chrono::steady_clock::now();
  *((std::chrono::system_clock::time_point *)&v129 + 1) = std::chrono::system_clock::now();
  LODWORD(v130) = 5;
  v131 = "unknown file";
  v132 = 162;
  v134 = 0;
  v135 = 0;
  v133 = "unknown function";
  if (v171 >= 0)
    v49 = __dst;
  else
    v49 = (void **)__dst[0];
  v50 = *(_QWORD *)v128;
  v51 = (const char *)(*(_QWORD *)v128 + 16);
  v125 = v51;
  if (*(char *)(*(_QWORD *)v128 + 39) < 0)
  {
    v51 = *(const char **)(v50 + 16);
    v52 = *(_QWORD *)(v50 + 24);
    v54 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v54 & 1) != 0)
      goto LABEL_133;
  }
  else
  {
    v52 = *(unsigned __int8 *)(*(_QWORD *)v128 + 39);
    v53 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v53 & 1) != 0)
      goto LABEL_133;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)v179);
    sub_223199C58("com.apple.cv3d", (unint64_t)v179, &xmmword_255788F40);
    if ((_BYTE)v180 && (v179[23] & 0x80000000) != 0)
      operator delete(*(void **)v179);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_133:
  if (byte_255788F57 >= 0)
    v55 = (const char *)&xmmword_255788F40;
  else
    v55 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v56 = byte_255788F57;
  else
    v56 = *((_QWORD *)&xmmword_255788F40 + 1);
  *(_QWORD *)v179 = os_log_create(v55, v51);
  v57 = &v179[8];
  if (v56 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v56 >= 0x17)
  {
    v58 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v56 | 7) != 0x17)
      v58 = v56 | 7;
    v59 = v58 + 1;
    v57 = operator new(v58 + 1);
    *(_QWORD *)&v179[16] = v56;
    *(_QWORD *)&v180 = v59 | 0x8000000000000000;
    *(_QWORD *)&v179[8] = v57;
    goto LABEL_146;
  }
  BYTE7(v180) = v56;
  if (v56)
LABEL_146:
    memmove(v57, v55, v56);
  v57[v56] = 0;
  BYTE8(v180) = 1;
  v60 = (char *)&v181;
  if (v52 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v52 >= 0x17)
  {
    v61 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v52 | 7) != 0x17)
      v61 = v52 | 7;
    v62 = v61 + 1;
    v60 = (char *)operator new(v61 + 1);
    v182 = v52;
    v183 = v62 | 0x8000000000000000;
    v181 = v60;
    goto LABEL_154;
  }
  HIBYTE(v183) = v52;
  if (v52)
LABEL_154:
    memmove(v60, v51, v52);
  v60[v52] = 0;
  LOBYTE(v184) = 1;
  v63 = *(NSObject **)v179;
  if (SHIBYTE(v183) < 0)
    operator delete(v181);
  if (BYTE8(v180) && SBYTE7(v180) < 0)
    operator delete(*(void **)&v179[8]);
  if (*(_QWORD *)v179)
    os_release(*(void **)v179);
  if (v38 && *(_QWORD *)(v38 + 24))
  {
    v64 = _os_log_pack_size();
    v65 = operator new(v64, (std::align_val_t)8uLL);
    v66 = (void **)operator new();
    *v66 = &off_24EC1F7F0;
    v66[1] = 0;
    v66[2] = 0;
    v66[3] = v65;
    __src[0] = v65;
    __src[1] = v65;
    v176 = 0;
    v174 = v66;
    v175 = 0;
    v67 = strlen((const char *)v49);
    if (v67 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    v68 = v67;
    if (v67 >= 0x17)
    {
      v72 = (v67 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v67 | 7) != 0x17)
        v72 = v67 | 7;
      v73 = v72 + 1;
      v69 = (char *)operator new(v72 + 1);
      *((_QWORD *)&v168 + 1) = v73 | 0x8000000000000000;
      v167 = v69;
      *(_QWORD *)&v168 = v68;
    }
    else
    {
      HIBYTE(v168) = v67;
      v69 = (char *)&v167;
      if (!v67)
      {
LABEL_180:
        v69[v68] = 0;
        v74 = v167;
        *(_QWORD *)&v177 = v168;
        *(_QWORD *)((char *)&v177 + 7) = *(_QWORD *)((char *)&v168 + 7);
        v75 = HIBYTE(v168);
        v76 = operator new(0x38uLL);
        v76[1] = 0;
        v76[2] = 0;
        v76[3] = off_24EC1FA48;
        *v76 = &off_24EC1F9F8;
        v77 = v177;
        v76[4] = v74;
        v76[5] = v77;
        *(_QWORD *)((char *)v76 + 47) = *(_QWORD *)((char *)&v177 + 7);
        *((_BYTE *)v76 + 55) = v75;
        *(_QWORD *)&v177 = 0;
        *(_QWORD *)((char *)&v177 + 7) = 0;
        v78 = v176;
        v175 = (char *)(v76 + 3);
        v176 = (std::__shared_weak_count *)v76;
        if (v78)
        {
          p_shared_owners = (unint64_t *)&v78->__shared_owners_;
          do
            v80 = __ldaxr(p_shared_owners);
          while (__stlxr(v80 - 1, p_shared_owners));
          if (!v80)
          {
            ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
            std::__shared_weak_count::__release_weak(v78);
          }
        }
        *(_OWORD *)v179 = *(_OWORD *)__src;
        v81 = v175;
        *(_QWORD *)&v179[16] = v174;
        if (v174)
        {
          v82 = (unint64_t *)(v174 + 1);
          do
            v83 = __ldxr(v82);
          while (__stxr(v83 + 1, v82));
        }
        v84 = v176;
        *(_QWORD *)&v180 = v81;
        *((_QWORD *)&v180 + 1) = v176;
        if (v176)
        {
          v85 = (unint64_t *)&v176->__shared_owners_;
          do
            v86 = __ldxr(v85);
          while (__stxr(v86 + 1, v85));
          v181 = v81;
          do
            v87 = __ldaxr(v85);
          while (__stlxr(v87 - 1, v85));
          if (!v87)
          {
            ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
            std::__shared_weak_count::__release_weak(v84);
          }
        }
        else
        {
          v181 = v81;
        }
        v88 = (std::__shared_weak_count *)v174;
        if (v174)
        {
          v89 = (unint64_t *)(v174 + 1);
          do
            v90 = __ldaxr(v89);
          while (__stlxr(v90 - 1, v89));
          if (!v90)
          {
            ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
            std::__shared_weak_count::__release_weak(v88);
          }
        }
        v91 = *(_QWORD *)v179;
        if (v181[31] >= 0)
          v92 = v181 + 8;
        else
          v92 = (char *)*((_QWORD *)v181 + 1);
        v93 = _os_log_pack_fill();
        *(_DWORD *)v93 = 136315138;
        *(_QWORD *)(v93 + 4) = v92;
        v94 = (char *)operator new();
        v95 = *(unsigned __int8 *)(v50 + 39);
        v96 = v125;
        if ((v95 & 0x80u) != 0)
        {
          v96 = *(const char **)(v50 + 16);
          v95 = *(_QWORD *)(v50 + 24);
        }
        *(_QWORD *)v94 = v91;
        *(_OWORD *)(v94 + 8) = *(_OWORD *)&v179[8];
        *(_QWORD *)&v179[8] = 0;
        *(_QWORD *)&v179[16] = 0;
        *(_OWORD *)(v94 + 24) = v180;
        v180 = 0uLL;
        *((_QWORD *)v94 + 5) = v96;
        *((_QWORD *)v94 + 6) = v95;
        v94[56] = 16;
        v167 = 0;
        __src[0] = v94;
        (*(void (**)(_QWORD, void **))(**(_QWORD **)(v38 + 24) + 40))(*(_QWORD *)(v38 + 24), __src);
        v97 = __src[0];
        __src[0] = 0;
        v71 = v127;
        if (v97)
        {
          v98 = (std::__shared_weak_count *)*((_QWORD *)v97 + 4);
          if (v98)
          {
            v99 = (unint64_t *)&v98->__shared_owners_;
            do
              v100 = __ldaxr(v99);
            while (__stlxr(v100 - 1, v99));
            if (!v100)
            {
              ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
              std::__shared_weak_count::__release_weak(v98);
            }
          }
          v101 = (std::__shared_weak_count *)*((_QWORD *)v97 + 2);
          if (v101)
          {
            v102 = (unint64_t *)&v101->__shared_owners_;
            do
              v103 = __ldaxr(v102);
            while (__stlxr(v103 - 1, v102));
            if (!v103)
            {
              ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
              std::__shared_weak_count::__release_weak(v101);
            }
          }
          MEMORY[0x227684CE8](v97, 0x10F0C40B62ED6C6);
          v104 = v167;
          v167 = 0;
          if (v104)
          {
            v105 = (std::__shared_weak_count *)*((_QWORD *)v104 + 4);
            if (v105)
            {
              v106 = (unint64_t *)&v105->__shared_owners_;
              do
                v107 = __ldaxr(v106);
              while (__stlxr(v107 - 1, v106));
              if (!v107)
              {
                ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                std::__shared_weak_count::__release_weak(v105);
              }
            }
            v108 = (std::__shared_weak_count *)*((_QWORD *)v104 + 2);
            if (v108)
            {
              v109 = (unint64_t *)&v108->__shared_owners_;
              do
                v110 = __ldaxr(v109);
              while (__stlxr(v110 - 1, v109));
              if (!v110)
              {
                ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                std::__shared_weak_count::__release_weak(v108);
              }
            }
            MEMORY[0x227684CE8](v104, 0x10F0C40B62ED6C6);
          }
        }
        v111 = (std::__shared_weak_count *)*((_QWORD *)&v180 + 1);
        if (*((_QWORD *)&v180 + 1))
        {
          v112 = (unint64_t *)(*((_QWORD *)&v180 + 1) + 8);
          do
            v113 = __ldaxr(v112);
          while (__stlxr(v113 - 1, v112));
          if (!v113)
          {
            ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
            std::__shared_weak_count::__release_weak(v111);
          }
        }
        v114 = *(std::__shared_weak_count **)&v179[16];
        if (*(_QWORD *)&v179[16])
        {
          v115 = (unint64_t *)(*(_QWORD *)&v179[16] + 8);
          do
            v116 = __ldaxr(v115);
          while (__stlxr(v116 - 1, v115));
          if (!v116)
          {
            ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
            std::__shared_weak_count::__release_weak(v114);
          }
        }
        goto LABEL_239;
      }
    }
    memcpy(v69, v49, v68);
    goto LABEL_180;
  }
  os_log_type_enabled(v63, OS_LOG_TYPE_ERROR);
  *(_DWORD *)v179 = 136315138;
  *(_QWORD *)&v179[4] = v49;
  v70 = (void *)_os_log_send_and_compose_impl();
  v71 = v127;
  if (v70)
    free(v70);
LABEL_239:
  if (v71)
  {
    v117 = __dst;
    if (v171 < 0)
      v117 = (void **)__dst[0];
    sub_22322C138((uint64_t)&v128, "%s", (const char *)v117);
    sub_223182C08((uint64_t)&v128);
  }
  sub_223182C08((uint64_t)&v128);
  v118 = v135;
  if (v135)
  {
    v119 = (unint64_t *)&v135->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  if (SHIBYTE(v171) < 0)
    operator delete(__dst[0]);
  v136[0] = *(void **)MEMORY[0x24BEDB7F0];
  v121 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(void **)((char *)v136 + *((_QWORD *)v136[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
  *(_QWORD *)&__p = v121;
  *((_QWORD *)&__p + 1) = MEMORY[0x24BEDB848] + 16;
  if (v146 < 0)
    operator delete(*((void **)&v143 + 1));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x227684BE0](&v149);
  if (!v161)
  {
LABEL_253:
    if (v160)
    {
      if (v159)
      {
        if (SHIBYTE(v158) < 0)
          operator delete(v157[0]);
        if (SHIBYTE(v155) < 0)
          operator delete((void *)v154);
      }
      if (v153 && SHIBYTE(v152) < 0)
        operator delete((void *)v151);
    }
  }
  return a1;
}

void sub_224143428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  uint64_t *v61;
  uint64_t v62;
  uint64_t v64;

  if (*(_BYTE *)(v62 - 184) && *(char *)(v62 - 185) < 0)
    operator delete(*(void **)(v62 - 208));
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a17);
  if (SLOBYTE(STACK[0x287]) < 0)
    operator delete((void *)STACK[0x270]);
  sub_223195348((uint64_t)&a26);
  sub_223197D38((uint64_t)&a61);
  v64 = *v61;
  *v61 = 0;
  if (v64)
    MEMORY[0x227684CE8](v64, 0x1000C4072FAA15ELL);
  _Unwind_Resume(a1);
}

uint64_t *sub_2241436EC(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    MEMORY[0x227684CE8](v2, 0x1000C4072FAA15ELL);
  return a1;
}

uint64_t sub_22414372C(uint64_t a1, uint64_t *a2, __int128 *a3, __int128 *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  char v13;

  v7 = *a2;
  v8 = operator new();
  *(_BYTE *)v8 = 0;
  *(_DWORD *)(v8 + 128) = -1;
  v9 = *(unsigned int *)(v7 + 128);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_24EC6BD10[v9])(&v13, v8, v7);
    *(_DWORD *)(v8 + 128) = v9;
  }
  *(_BYTE *)(v8 + 136) = *(_BYTE *)(v7 + 136);
  *(_QWORD *)a1 = v8;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  if (*((_BYTE *)a3 + 24))
  {
    v10 = *a3;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 8) = v10;
    *((_QWORD *)a3 + 1) = 0;
    *((_QWORD *)a3 + 2) = 0;
    *(_QWORD *)a3 = 0;
    *(_BYTE *)(a1 + 32) = 1;
  }
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  if (*((_BYTE *)a4 + 24))
  {
    v11 = *a4;
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(a1 + 40) = v11;
    *((_QWORD *)a4 + 1) = 0;
    *((_QWORD *)a4 + 2) = 0;
    *(_QWORD *)a4 = 0;
    *(_BYTE *)(a1 + 64) = 1;
  }
  return a1;
}

void sub_224143838(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x1000C4072FAA15ELL);
  _Unwind_Resume(a1);
}

uint64_t *sub_22414385C(uint64_t *a1)
{
  unsigned __int8 v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;

  v2 = atomic_load((unsigned __int8 *)&qword_255790AA0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_255790AA0))
  {
    v7 = operator new();
    *(_OWORD *)(v7 + 16) = 0u;
    *(_OWORD *)(v7 + 32) = 0u;
    *(_OWORD *)v7 = 0u;
    *(_DWORD *)(v7 + 128) = 3;
    *(_BYTE *)(v7 + 136) = 2;
    off_255790A98 = (_UNKNOWN *)v7;
    __cxa_atexit((void (*)(void *))sub_2241436EC, &off_255790A98, &dword_22314D000);
    __cxa_guard_release(&qword_255790AA0);
  }
  v3 = off_255790A98;
  v4 = operator new();
  *(_BYTE *)v4 = 0;
  *(_DWORD *)(v4 + 128) = -1;
  v5 = *((unsigned int *)v3 + 32);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(char *, uint64_t, _BYTE *))off_24EC6BD10[v5])(&v8, v4, v3);
    *(_DWORD *)(v4 + 128) = v5;
  }
  *(_BYTE *)(v4 + 136) = v3[136];
  *a1 = v4;
  return a1;
}

void sub_224143978(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255790AA0);
  _Unwind_Resume(a1);
}

void sub_224143990(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x1000C4072FAA15ELL);
  _Unwind_Resume(a1);
}

_QWORD *sub_2241439B4(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  void **p_dst;
  unint64_t v10;
  unint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  _QWORD *v21;
  __int128 *v22;
  __int128 v23;
  void **v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  void *__p[2];
  unsigned __int8 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 *v49;
  int v50;
  void **__dst;
  size_t v52;
  int64_t v53;
  __int128 *v54;

  v4 = sub_2231813E8(a1, (uint64_t)"{", 1);
  v5 = *(char *)(*a2 + 136);
  v50 = 0;
  v6 = operator new();
  *(_QWORD *)(v6 + 272) = 0;
  *(_OWORD *)(v6 + 240) = 0u;
  *(_OWORD *)(v6 + 256) = 0u;
  *(_OWORD *)(v6 + 208) = 0u;
  *(_OWORD *)(v6 + 224) = 0u;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_OWORD *)(v6 + 192) = 0u;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)v6 = 0u;
  sub_223195210(v6);
  *(_QWORD *)&v40 = v6;
  sub_2231813E8((_QWORD *)(v6 + 16), (uint64_t)off_24EC6BDD8[v5 - 1], qword_22469B478[(char)(v5 - 1)]);
  v7 = *(_DWORD *)(v6 + 120);
  if ((v7 & 0x10) != 0)
  {
    v10 = *(_QWORD *)(v6 + 112);
    v11 = *(_QWORD *)(v6 + 72);
    if (v10 < v11)
    {
      *(_QWORD *)(v6 + 112) = v11;
      v10 = v11;
    }
    v12 = *(const void **)(v6 + 64);
    v8 = v10 - (_QWORD)v12;
    if (v10 - (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_41;
  }
  else
  {
    if ((v7 & 8) == 0)
    {
      v8 = 0;
      HIBYTE(v53) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_14;
    }
    v12 = *(const void **)(v6 + 40);
    v8 = *(_QWORD *)(v6 + 56) - (_QWORD)v12;
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
LABEL_41:
      sub_22316DBC0();
  }
  if (v8 >= 0x17)
  {
    v13 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v13 = v8 | 7;
    v14 = v13 + 1;
    p_dst = (void **)operator new(v13 + 1);
    v52 = v8;
    v53 = v14 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_13;
  }
  HIBYTE(v53) = v8;
  p_dst = (void **)&__dst;
  if (v8)
LABEL_13:
    memmove(p_dst, v12, v8);
LABEL_14:
  *((_BYTE *)p_dst + v8) = 0;
  v15 = v40;
  if ((_QWORD)v40)
  {
    v16 = MEMORY[0x24BEDB7F0];
    v17 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v40 = *MEMORY[0x24BEDB7F0];
    v18 = *(_QWORD *)(v16 + 72);
    *(_QWORD *)(v15 + *(_QWORD *)(v17 - 24)) = *(_QWORD *)(v16 + 64);
    *(_QWORD *)(v15 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v15 + 16) = v18;
    if (*(char *)(v15 + 111) < 0)
      operator delete(*(void **)(v15 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v15 + 128);
    MEMORY[0x227684CE8](v15, 0x10B2C40EED050F3);
  }
  *(_QWORD *)&v40 = &v48;
  *((_QWORD *)&v40 + 1) = &__dst;
  *(_QWORD *)&v41 = &v48;
  *((_QWORD *)&v41 + 1) = &__dst;
  *(_QWORD *)&v42 = &__dst;
  if (v50 == -1)
    sub_22316DD70();
  v54 = &v40;
  ((void (*)(__int128 **, __int128 *))off_24EC6BD78[v50])(&v54, &v48);
  if (SHIBYTE(v53) < 0)
    operator delete(__dst);
  if (v50 == -1)
    sub_22316DD70();
  *(_QWORD *)&v40 = &__dst;
  ((void (*)(void **__return_ptr, __int128 *, __int128 *))off_24EC6BD90[v50])(__p, &v40, &v48);
  if (v50 != -1)
    ((void (*)(__int128 *, __int128 *))off_24EC6BD30[v50])(&v40, &v48);
  if ((v39 & 0x80u) == 0)
    v19 = __p;
  else
    v19 = (void **)__p[0];
  if ((v39 & 0x80u) == 0)
    v20 = v39;
  else
    v20 = (uint64_t)__p[1];
  v21 = sub_2231813E8(v4, (uint64_t)v19, v20);
  sub_2231813E8(v21, (uint64_t)",\n", 2);
  if ((char)v39 < 0)
    operator delete(__p[0]);
  v22 = (__int128 *)*a2;
  switch(*(_BYTE *)(*a2 + 136))
  {
    case 1:
      if (*((_DWORD *)v22 + 32) != 2)
        goto LABEL_68;
      v23 = *v22;
      v49 = (__int128 *)*((_QWORD *)v22 + 2);
      v48 = v23;
      *(_QWORD *)&v40 = 0x100000006;
      DWORD2(v40) = 6;
      *(_QWORD *)&v41 = &v48;
      DWORD2(v41) = 0;
      sub_224505D70((unsigned int *)&v40, &__dst);
      if (v53 >= 0)
        v24 = (void **)&__dst;
      else
        v24 = __dst;
      if (v53 >= 0)
        v25 = HIBYTE(v53);
      else
        v25 = v52;
      goto LABEL_63;
    case 2:
      if (*((_DWORD *)v22 + 32) != 3)
        goto LABEL_68;
      v29 = *v22;
      v30 = v22[2];
      v41 = v22[1];
      v42 = v30;
      v40 = v29;
      *(_QWORD *)&v48 = 0x100000006;
      DWORD2(v48) = 6;
      v49 = &v40;
      v50 = 0;
      sub_2245063BC((unsigned int *)&v48, &__dst);
      if (v53 >= 0)
        v24 = (void **)&__dst;
      else
        v24 = __dst;
      if (v53 >= 0)
        v25 = HIBYTE(v53);
      else
        v25 = v52;
      goto LABEL_63;
    case 4:
      if (*((_DWORD *)v22 + 32))
        goto LABEL_68;
      v26 = *v22;
      v27 = v22[1];
      v28 = v22[3];
      v42 = v22[2];
      v43 = v28;
      v40 = v26;
      v41 = v27;
      *(_QWORD *)&v48 = 0x400000004;
      DWORD2(v48) = 4;
      v49 = &v40;
      v50 = 0;
      sub_224505D70((unsigned int *)&v48, &__dst);
      if (v53 >= 0)
        v24 = (void **)&__dst;
      else
        v24 = __dst;
      if (v53 >= 0)
        v25 = HIBYTE(v53);
      else
        v25 = v52;
      goto LABEL_63;
    case 5:
      if (*((_DWORD *)v22 + 32) != 1)
LABEL_68:
        sub_22316DD70();
      v31 = *v22;
      v32 = v22[1];
      v33 = v22[3];
      v42 = v22[2];
      v43 = v33;
      v40 = v31;
      v41 = v32;
      v34 = v22[4];
      v35 = v22[5];
      v36 = v22[6];
      v47 = v22[7];
      v45 = v35;
      v46 = v36;
      v44 = v34;
      *(_QWORD *)&v48 = 0x400000004;
      DWORD2(v48) = 4;
      v49 = &v40;
      v50 = 0;
      sub_2245063BC((unsigned int *)&v48, &__dst);
      if (v53 >= 0)
        v24 = (void **)&__dst;
      else
        v24 = __dst;
      if (v53 >= 0)
        v25 = HIBYTE(v53);
      else
        v25 = v52;
LABEL_63:
      sub_2231813E8(a1, (uint64_t)v24, v25);
      if (SHIBYTE(v53) < 0)
        operator delete(__dst);
      break;
    default:
      return sub_2231813E8(a1, (uint64_t)"}", 1);
  }
  return sub_2231813E8(a1, (uint64_t)"}", 1);
}

void sub_224143EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (*(char *)(v15 - 73) < 0)
    operator delete(*(void **)(v15 - 96));
  _Unwind_Resume(exception_object);
}

void sub_224143F70(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22319B964(v1 - 128);
  _Unwind_Resume(a1);
}

void sub_224143F84(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 73) < 0)
  {
    operator delete(*(void **)(v1 - 96));
    sub_22319B964(v1 - 128);
    _Unwind_Resume(a1);
  }
  sub_22319B964(v1 - 128);
  _Unwind_Resume(a1);
}

uint64_t sub_224143FC4(uint64_t a1)
{
  unsigned __int8 v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;

  v2 = atomic_load((unsigned __int8 *)&qword_255790AA0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_255790AA0))
  {
    v7 = operator new();
    *(_OWORD *)(v7 + 16) = 0u;
    *(_OWORD *)(v7 + 32) = 0u;
    *(_OWORD *)v7 = 0u;
    *(_DWORD *)(v7 + 128) = 3;
    *(_BYTE *)(v7 + 136) = 2;
    off_255790A98 = (_UNKNOWN *)v7;
    __cxa_atexit((void (*)(void *))sub_2241436EC, &off_255790A98, &dword_22314D000);
    __cxa_guard_release(&qword_255790AA0);
  }
  v3 = off_255790A98;
  v4 = operator new();
  *(_BYTE *)v4 = 0;
  *(_DWORD *)(v4 + 128) = -1;
  v5 = *((unsigned int *)v3 + 32);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(char *, uint64_t, _BYTE *))off_24EC6BD10[v5])(&v8, v4, v3);
    *(_DWORD *)(v4 + 128) = v5;
  }
  *(_BYTE *)(v4 + 136) = v3[136];
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  return a1;
}

void sub_2241440F0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255790AA0);
  _Unwind_Resume(a1);
}

void sub_224144108(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x1000C4072FAA15ELL);
  _Unwind_Resume(a1);
}

uint64_t sub_22414412C(const void **a1, uint64_t *a2)
{
  float *v2;
  uint64_t v3;
  int v4;
  int v6;
  int v7;
  int v9;
  uint64_t result;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  int v16;
  const void **v17;
  unsigned __int8 *v18;
  uint64_t v19;
  const void *v20;
  uint64_t v21;
  int v22;
  const void **v23;
  unsigned __int8 *v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  BOOL v31;
  float *v32;
  uint64_t v33;

  v2 = (float *)*a1;
  v3 = *a2;
  v4 = *((unsigned __int8 *)*a1 + 136);
  v6 = v4 != 5 && v4 != 2;
  v7 = *(unsigned __int8 *)(v3 + 136);
  v9 = v7 == 5 || v7 == 2;
  if (v6 == v9)
    return 0;
  if (((v4 & 0xFE) != 4) != ((v7 & 0xFE) == 4))
  {
    result = 0;
    switch(v4)
    {
      case 1:
        if (*((_DWORD *)v2 + 32) != 2 || *(_DWORD *)(v3 + 128) != 2)
          goto LABEL_84;
        if (*v2 != *(float *)v3
          || v2[1] != *(float *)(v3 + 4)
          || v2[2] != *(float *)(v3 + 8)
          || v2[3] != *(float *)(v3 + 12)
          || v2[4] != *(float *)(v3 + 16)
          || v2[5] != *(float *)(v3 + 20))
        {
          return 0;
        }
        goto LABEL_43;
      case 2:
        if (*((_DWORD *)v2 + 32) != 3 || *(_DWORD *)(v3 + 128) != 3)
          goto LABEL_84;
        if (*(double *)v2 != *(double *)v3
          || *((double *)v2 + 1) != *(double *)(v3 + 8)
          || *((double *)v2 + 2) != *(double *)(v3 + 16)
          || *((double *)v2 + 3) != *(double *)(v3 + 24)
          || *((double *)v2 + 4) != *(double *)(v3 + 32)
          || *((double *)v2 + 5) != *(double *)(v3 + 40))
        {
          return 0;
        }
        goto LABEL_43;
      case 4:
        if (*((_DWORD *)v2 + 32) || *(_DWORD *)(v3 + 128))
          goto LABEL_84;
        v32 = v2;
        v33 = v3;
        result = sub_2231F73E4(&v32);
        if ((_DWORD)result)
          goto LABEL_43;
        return result;
      case 5:
        if (*((_DWORD *)v2 + 32) != 1 || *(_DWORD *)(v3 + 128) != 1)
LABEL_84:
          sub_22316DD70();
        v32 = v2;
        v33 = v3;
        if (!sub_2238C5890((double **)&v32))
          return 0;
LABEL_43:
        if (*((_BYTE *)a1 + 32) && *((_BYTE *)a2 + 32))
        {
          v13 = *((unsigned __int8 *)a1 + 31);
          if ((v13 & 0x80u) == 0)
            v14 = (const void *)*((unsigned __int8 *)a1 + 31);
          else
            v14 = a1[2];
          v15 = *((unsigned __int8 *)a2 + 31);
          v16 = (char)v15;
          if ((v15 & 0x80u) != 0)
            v15 = a2[2];
          if (v14 != (const void *)v15)
            return 0;
          v17 = a1 + 1;
          if (v16 >= 0)
            v18 = (unsigned __int8 *)(a2 + 1);
          else
            v18 = (unsigned __int8 *)a2[1];
          if ((v13 & 0x80) != 0)
          {
            if (memcmp(*v17, v18, (size_t)a1[2]))
              return 0;
          }
          else if (*((_BYTE *)a1 + 31))
          {
            do
            {
              if (*(unsigned __int8 *)v17 != *v18)
                return 0;
              v17 = (const void **)((char *)v17 + 1);
              ++v18;
              --v13;
            }
            while (v13);
          }
        }
        else if ((*((_BYTE *)a1 + 32) != 0) != (*((_BYTE *)a2 + 32) != 0))
        {
          return 0;
        }
        result = (*((_BYTE *)a1 + 64) != 0) == (*((_BYTE *)a2 + 64) != 0);
        if (!*((_BYTE *)a1 + 64) || !*((_BYTE *)a2 + 64))
          return result;
        v19 = *((unsigned __int8 *)a1 + 63);
        if ((v19 & 0x80u) == 0)
          v20 = (const void *)*((unsigned __int8 *)a1 + 63);
        else
          v20 = a1[6];
        v21 = *((unsigned __int8 *)a2 + 63);
        v22 = (char)v21;
        if ((v21 & 0x80u) != 0)
          v21 = a2[6];
        if (v20 == (const void *)v21)
        {
          v23 = a1 + 5;
          if (v22 >= 0)
            v24 = (unsigned __int8 *)(a2 + 5);
          else
            v24 = (unsigned __int8 *)a2[5];
          if ((v19 & 0x80) != 0)
            return memcmp(*v23, v24, (size_t)a1[6]) == 0;
          if (!*((_BYTE *)a1 + 63))
            return 1;
          v25 = v19 - 1;
          do
          {
            v27 = *(unsigned __int8 *)v23;
            v23 = (const void **)((char *)v23 + 1);
            v26 = v27;
            v29 = *v24++;
            v28 = v29;
            v31 = v25-- != 0;
            result = v26 == v28;
          }
          while (v26 == v28 && v31);
          return result;
        }
        break;
      default:
        return result;
    }
  }
  return 0;
}

_QWORD *sub_2241444A0(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;

  sub_2231813E8(a1, (uint64_t)"Transform3{src: ", 16);
  if (*((_BYTE *)a2 + 32))
  {
    v24 = 34;
    v4 = sub_2231813E8(a1, (uint64_t)&v24, 1);
    v5 = *((char *)a2 + 31);
    if (v5 >= 0)
      v6 = (uint64_t)(a2 + 1);
    else
      v6 = a2[1];
    if (v5 >= 0)
      v7 = *((unsigned __int8 *)a2 + 31);
    else
      v7 = a2[2];
    v8 = sub_2231813E8(v4, v6, v7);
    v25 = 34;
    v9 = &v25;
    v10 = 1;
  }
  else
  {
    v9 = "world";
    v8 = a1;
    v10 = 5;
  }
  sub_2231813E8(v8, (uint64_t)v9, v10);
  sub_2231813E8(a1, (uint64_t)", dst: ", 7);
  if (*((_BYTE *)a2 + 64))
  {
    v26 = 34;
    v11 = sub_2231813E8(a1, (uint64_t)&v26, 1);
    v12 = *((char *)a2 + 63);
    if (v12 >= 0)
      v13 = (uint64_t)(a2 + 5);
    else
      v13 = a2[5];
    if (v12 >= 0)
      v14 = *((unsigned __int8 *)a2 + 63);
    else
      v14 = a2[6];
    v15 = sub_2231813E8(v11, v13, v14);
    v27 = 34;
    v16 = &v27;
    v17 = 1;
  }
  else
  {
    v16 = "world";
    v15 = a1;
    v17 = 5;
  }
  sub_2231813E8(v15, (uint64_t)v16, v17);
  v18 = sub_2231813E8(a1, (uint64_t)", transform:", 12);
  v19 = *a2;
  v20 = operator new();
  *(_BYTE *)v20 = 0;
  *(_DWORD *)(v20 + 128) = -1;
  v21 = *(unsigned int *)(v19 + 128);
  if ((_DWORD)v21 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_24EC6BD10[v21])(&v28, v20, v19);
    *(_DWORD *)(v20 + 128) = v21;
  }
  *(_BYTE *)(v20 + 136) = *(_BYTE *)(v19 + 136);
  v23 = v20;
  sub_2241439B4(v18, &v23);
  MEMORY[0x227684CE8](v20, 0x1000C4072FAA15ELL);
  return sub_2231813E8(a1, (uint64_t)"}", 1);
}

void sub_224144680(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x1000C4072FAA15ELL);
  _Unwind_Resume(a1);
}

__n128 sub_2241446A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;
  __int128 v5;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  v5 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 48) = v5;
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

__n128 sub_2241446BC(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v3 = *a3;
  v4 = a3[1];
  v5 = a3[3];
  *(_OWORD *)(a2 + 32) = a3[2];
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)a2 = v3;
  *(_OWORD *)(a2 + 16) = v4;
  result = (__n128)a3[4];
  v7 = a3[5];
  v8 = a3[7];
  *(_OWORD *)(a2 + 96) = a3[6];
  *(_OWORD *)(a2 + 112) = v8;
  *(__n128 *)(a2 + 64) = result;
  *(_OWORD *)(a2 + 80) = v7;
  return result;
}

__n128 sub_2241446E0(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 sub_2241446F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t sub_224144708(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  const char *v15;
  uint64_t *v16;

  v11 = a2;
  v12 = "{";
  v13 = a2;
  v14 = "{";
  v15 = "{";
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_7;
  v16 = &v11;
  ((void (*)(uint64_t **))off_24EC6BD60[v3])(&v16);
  sub_223208764((uint64_t)&v11, a2, a3);
  v11 = a2;
  v12 = ",";
  v13 = a2;
  v14 = ",";
  v15 = ",";
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    goto LABEL_7;
  v16 = &v11;
  ((void (*)(uint64_t **, uint64_t))off_24EC6BD60[v6])(&v16, a2);
  sub_223208764((uint64_t)&v11, a2, a3 + 1);
  v11 = a2;
  v12 = ",";
  v13 = a2;
  v14 = ",";
  v15 = ",";
  v7 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v7 == -1)
    goto LABEL_7;
  v16 = &v11;
  ((void (*)(uint64_t **, uint64_t))off_24EC6BD60[v7])(&v16, a2);
  sub_223208764((uint64_t)&v11, a2, a3 + 2);
  v11 = a2;
  v12 = ",";
  v13 = a2;
  v14 = ",";
  v15 = ",";
  v8 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v8 == -1)
    goto LABEL_7;
  v16 = &v11;
  ((void (*)(uint64_t **, uint64_t))off_24EC6BD60[v8])(&v16, a2);
  sub_223208764((uint64_t)&v11, a2, a3 + 3);
  v11 = a2;
  v12 = "}";
  v13 = a2;
  v14 = "}";
  v15 = "}";
  v9 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v9 == -1)
LABEL_7:
    sub_22316DD70();
  v16 = &v11;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24EC6BD60[v9])(&v16, a2);
}

_DWORD *sub_22414489C(_DWORD ***a1)
{
  return sub_223C8F630(**a1, (char *)(*a1)[1]);
}

void sub_2241448A8(uint64_t a1, uint64_t a2)
{
  sub_2241448B8((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

void sub_2241448B8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24EC6BD30[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_22319BD1C((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_224144A6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_224144AB0(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_224144BA8((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_224144BA0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_224144BA8(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_224144DA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319C040((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_224144DB8(_DWORD ***a1)
{
  return sub_223846924(**a1, (char *)(*a1)[1]);
}

void sub_224144DC4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;
  const char *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  _BYTE v15[15];
  char v16;
  void *__p[2];
  unint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)((char *)v19 + 7) = *(_QWORD *)(a2 + 15);
  v4 = *(void **)a2;
  v19[0] = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v14 = v4;
  *(_QWORD *)v15 = v19[0];
  *(_QWORD *)&v15[7] = *(_QWORD *)((char *)v19 + 7);
  v16 = v5;
  memset(v19, 0, 15);
  v6 = __p;
  v7 = *(const char **)(v2 + 24);
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v6 = operator new(v11 + 1);
    __p[1] = v9;
    v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((_BYTE *)v9 + (_QWORD)v6) = 0;
    v10 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v10 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v10 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24EC6BD30[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_22319BD1C((_QWORD *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0)
    goto LABEL_15;
}

void sub_224144F7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_224144FC0(uint64_t a1, void **a2)
{
  const void *v3;
  _BYTE *v4;
  _QWORD *v5;
  size_t v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  size_t v18;
  size_t v19;
  void *v20;
  char *v21;
  void **v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  void **v27;

  v3 = *(const void **)(*(_QWORD *)a1 + 32);
  v5 = a2[1];
  v4 = a2[2];
  if (v5 < (_QWORD *)v4)
  {
    v6 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
    if (v6 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    v7 = v6;
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v8 = operator new(v14 + 1);
      v5[1] = v7;
      v5[2] = v15 | 0x8000000000000000;
      *v5 = v8;
    }
    else
    {
      *((_BYTE *)v5 + 23) = v6;
      v8 = v5;
      if (!v6)
        goto LABEL_19;
    }
    memmove(v8, v3, v7);
LABEL_19:
    *((_BYTE *)v8 + v7) = 0;
    v16 = (char *)(v5 + 3);
    a2[1] = v5 + 3;
    goto LABEL_39;
  }
  v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*a2) >> 3);
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a2) >> 3);
  v11 = 2 * v10;
  if (2 * v10 <= v9 + 1)
    v11 = v9 + 1;
  if (v10 >= 0x555555555555555)
    v12 = 0xAAAAAAAAAAAAAAALL;
  else
    v12 = v11;
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v13 = (char *)operator new(24 * v12);
  }
  else
  {
    v13 = 0;
  }
  v17 = &v13[24 * v9];
  v18 = strlen((const char *)v3);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v24 = v18 | 7;
    v25 = v24 + 1;
    v20 = operator new(v24 + 1);
    *((_QWORD *)v17 + 1) = v19;
    *((_QWORD *)v17 + 2) = v25 | 0x8000000000000000;
    *(_QWORD *)v17 = v20;
  }
  else
  {
    v17[23] = v18;
    v20 = v17;
    if (!v18)
    {
      v21 = &v13[24 * v12];
      *v17 = 0;
      v16 = v17 + 24;
      v22 = (void **)*a2;
      v23 = (void **)a2[1];
      if (v23 == *a2)
        goto LABEL_36;
      do
      {
LABEL_30:
        v26 = *(_OWORD *)(v23 - 3);
        *((_QWORD *)v17 - 1) = *(v23 - 1);
        *(_OWORD *)(v17 - 24) = v26;
        v17 -= 24;
        *(v23 - 2) = 0;
        *(v23 - 1) = 0;
        *(v23 - 3) = 0;
        v23 -= 3;
      }
      while (v23 != v22);
      v23 = (void **)*a2;
      v27 = (void **)a2[1];
      *a2 = v17;
      a2[1] = v16;
      a2[2] = v21;
      while (v27 != v23)
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      goto LABEL_37;
    }
  }
  memmove(v20, v3, v19);
  v21 = &v13[24 * v12];
  *((_BYTE *)v20 + v19) = 0;
  v16 = v17 + 24;
  v22 = (void **)*a2;
  v23 = (void **)a2[1];
  if (v23 != *a2)
    goto LABEL_30;
LABEL_36:
  *a2 = v17;
  a2[1] = v16;
  a2[2] = v21;
LABEL_37:
  if (v23)
    operator delete(v23);
LABEL_39:
  a2[1] = v16;
}

void sub_224145250(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_224145268(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

double sub_224145270(uint64_t a1, uint64_t *a2)
{
  __int128 v2;
  __int128 *v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  *(_BYTE *)a1 = *(_BYTE *)(*a2 + 136);
  *(_QWORD *)&v2 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 104) = 0;
  v3 = (__int128 *)*a2;
  switch(*(_BYTE *)(*a2 + 136))
  {
    case 1:
      if (*((_DWORD *)v3 + 32) != 2)
        goto LABEL_10;
      *(_DWORD *)(a1 + 104) = 2;
      v2 = *v3;
      v4 = *((_QWORD *)v3 + 2);
      *(_OWORD *)(a1 + 8) = *v3;
      *(_QWORD *)(a1 + 24) = v4;
      break;
    case 2:
      if (*((_DWORD *)v3 + 32) != 3)
        goto LABEL_10;
      *(_DWORD *)(a1 + 104) = 3;
      v2 = *v3;
      v16 = v3[1];
      v17 = v3[2];
      *(_OWORD *)(a1 + 8) = *v3;
      *(_OWORD *)(a1 + 24) = v16;
      *(_OWORD *)(a1 + 40) = v17;
      break;
    case 4:
      if (*((_DWORD *)v3 + 32))
        goto LABEL_10;
      LODWORD(v2) = *(_DWORD *)v3;
      v5 = *((_DWORD *)v3 + 1);
      v6 = *((_DWORD *)v3 + 4);
      v7 = *((_DWORD *)v3 + 5);
      v8 = *((_DWORD *)v3 + 8);
      v9 = *((_DWORD *)v3 + 9);
      v10 = *((_DWORD *)v3 + 12);
      v11 = *((_DWORD *)v3 + 13);
      v12 = *((_DWORD *)v3 + 2);
      v13 = *((_DWORD *)v3 + 6);
      v14 = *((_DWORD *)v3 + 10);
      v15 = *((_DWORD *)v3 + 14);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)v3;
      *(_DWORD *)(a1 + 12) = v6;
      *(_DWORD *)(a1 + 16) = v8;
      *(_DWORD *)(a1 + 20) = v10;
      *(_DWORD *)(a1 + 24) = v5;
      *(_DWORD *)(a1 + 28) = v7;
      *(_DWORD *)(a1 + 32) = v9;
      *(_DWORD *)(a1 + 36) = v11;
      *(_DWORD *)(a1 + 40) = v12;
      *(_DWORD *)(a1 + 44) = v13;
      *(_DWORD *)(a1 + 48) = v14;
      *(_DWORD *)(a1 + 52) = v15;
      break;
    case 5:
      if (*((_DWORD *)v3 + 32) != 1)
LABEL_10:
        sub_22316DD70();
      *(_QWORD *)&v2 = *(_QWORD *)v3;
      v18 = *((_QWORD *)v3 + 1);
      v19 = *((_QWORD *)v3 + 4);
      v20 = *((_QWORD *)v3 + 5);
      v21 = *((_QWORD *)v3 + 8);
      v22 = *((_QWORD *)v3 + 9);
      v23 = *((_QWORD *)v3 + 12);
      v24 = *((_QWORD *)v3 + 13);
      v25 = *((_QWORD *)v3 + 2);
      v26 = *((_QWORD *)v3 + 6);
      v27 = *((_QWORD *)v3 + 10);
      v28 = *((_QWORD *)v3 + 14);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)v3;
      *(_QWORD *)(a1 + 16) = v19;
      *(_DWORD *)(a1 + 104) = 1;
      *(_QWORD *)(a1 + 24) = v21;
      *(_QWORD *)(a1 + 32) = v23;
      *(_QWORD *)(a1 + 40) = v18;
      *(_QWORD *)(a1 + 48) = v20;
      *(_QWORD *)(a1 + 56) = v22;
      *(_QWORD *)(a1 + 64) = v24;
      *(_QWORD *)(a1 + 72) = v25;
      *(_QWORD *)(a1 + 80) = v26;
      *(_QWORD *)(a1 + 88) = v27;
      *(_QWORD *)(a1 + 96) = v28;
      break;
    default:
      return *(double *)&v2;
  }
  return *(double *)&v2;
}

uint64_t *sub_2241453B8(uint64_t *a1, _BYTE *a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  int v6;
  void *v7;
  void **v8;
  size_t v9;
  uint64_t *v10;
  int v11;
  const void *v12;
  size_t v13;
  size_t v14;
  int v15;
  int v16;
  const void *v17;
  size_t v18;
  size_t v19;
  int v20;
  std::logic_error *exception;
  std::string v23;
  std::string v24;
  void *v25;
  size_t v26;
  uint64_t v27;

  v4 = atomic_load((unsigned __int8 *)&qword_2540CF010);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2540CF010))
  {
    sub_224145658();
    __cxa_atexit((void (*)(void *))sub_224145D00, &qword_2540CF018, &dword_22314D000);
    __cxa_guard_release(&qword_2540CF010);
  }
  v25 = 0;
  v26 = 0;
  v27 = 0;
  sub_2240EA2BC(a1, (uint64_t)&v25);
  v5 = qword_2540CF020;
  if (!qword_2540CF020)
    goto LABEL_41;
  v6 = SHIBYTE(v27);
  v7 = v25;
  if (v27 >= 0)
    v8 = &v25;
  else
    v8 = (void **)v25;
  if (v27 >= 0)
    v9 = HIBYTE(v27);
  else
    v9 = v26;
  v10 = &qword_2540CF020;
  do
  {
    while (1)
    {
      v11 = *(char *)(v5 + 55);
      v12 = v11 >= 0 ? (const void *)(v5 + 32) : *(const void **)(v5 + 32);
      v13 = v11 >= 0 ? *(unsigned __int8 *)(v5 + 55) : *(_QWORD *)(v5 + 40);
      v14 = v9 >= v13 ? v13 : v9;
      v15 = memcmp(v12, v8, v14);
      if (v15)
        break;
      if (v13 >= v9)
        goto LABEL_24;
LABEL_10:
      v5 = *(_QWORD *)(v5 + 8);
      if (!v5)
        goto LABEL_25;
    }
    if (v15 < 0)
      goto LABEL_10;
LABEL_24:
    v10 = (uint64_t *)v5;
    v5 = *(_QWORD *)v5;
  }
  while (v5);
LABEL_25:
  if (v10 == &qword_2540CF020)
    goto LABEL_41;
  v16 = *((char *)v10 + 55);
  if (v16 >= 0)
    v17 = v10 + 4;
  else
    v17 = (const void *)v10[4];
  if (v16 >= 0)
    v18 = *((unsigned __int8 *)v10 + 55);
  else
    v18 = v10[5];
  if (v18 >= v9)
    v19 = v9;
  else
    v19 = v18;
  v20 = memcmp(v8, v17, v19);
  if (v20)
  {
    if ((v20 & 0x80000000) == 0)
      goto LABEL_37;
LABEL_41:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    sub_223996958(", expected [Algebra|Affine][F|D]", &v23, &v24);
    std::logic_error::logic_error(exception, &v24);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  if (v9 < v18)
    goto LABEL_41;
LABEL_37:
  *a2 = *((_BYTE *)v10 + 56);
  if (v6 < 0)
    operator delete(v7);
  return a1;
}

void sub_2241455C8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CF010);
  _Unwind_Resume(a1);
}

void sub_2241455E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v28 & 1) == 0)
    {
LABEL_8:
      if (a27 < 0)
        operator delete(a22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

void sub_224145658()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  int v3;
  size_t v4;
  void **v5;
  unint64_t v6;
  unint64_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  size_t v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  BOOL v19;
  int v20;
  const void *v21;
  size_t v22;
  const void *v23;
  size_t v24;
  size_t v25;
  int v26;
  uint64_t *v27;
  size_t v28;
  size_t v29;
  const void *v30;
  size_t v31;
  size_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  void *v40;
  _BYTE v41[15];
  unsigned __int8 v42;
  _BYTE v43[24];
  int v44;
  void *__dst[2];
  unint64_t v46;
  _QWORD v47[5];
  _QWORD *v48;
  _QWORD v49[4];

  v0 = 0;
  v49[2] = *MEMORY[0x24BDAC8D0];
  v39 = 84148737;
  qword_2540CF028 = 0;
  qword_2540CF020 = 0;
  qword_2540CF018 = (uint64_t)&qword_2540CF020;
  v38 = *MEMORY[0x24BEDB7F0];
  v35 = MEMORY[0x24BEDB848] + 16;
  v36 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v37 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v1 = &qword_2540CF000;
  do
  {
    while (1)
    {
      v44 = 0;
      v2 = operator new();
      *(_QWORD *)(v2 + 272) = 0;
      *(_OWORD *)(v2 + 240) = 0u;
      *(_OWORD *)(v2 + 256) = 0u;
      *(_OWORD *)(v2 + 208) = 0u;
      *(_OWORD *)(v2 + 224) = 0u;
      *(_OWORD *)(v2 + 176) = 0u;
      *(_OWORD *)(v2 + 192) = 0u;
      *(_OWORD *)(v2 + 144) = 0u;
      *(_OWORD *)(v2 + 160) = 0u;
      *(_OWORD *)(v2 + 112) = 0u;
      *(_OWORD *)(v2 + 128) = 0u;
      *(_OWORD *)(v2 + 80) = 0u;
      *(_OWORD *)(v2 + 96) = 0u;
      *(_OWORD *)(v2 + 48) = 0u;
      *(_OWORD *)(v2 + 64) = 0u;
      *(_OWORD *)(v2 + 16) = 0u;
      *(_OWORD *)(v2 + 32) = 0u;
      *(_OWORD *)v2 = 0u;
      sub_223195210(v2);
      sub_2231813E8((_QWORD *)(v2 + 16), (uint64_t)off_24EC6BE80[*((char *)&v39 + v0) - 1], qword_22469B4B8[(char)(*((_BYTE *)&v39 + v0) - 1)]);
      v3 = *(_DWORD *)(v2 + 120);
      if ((v3 & 0x10) != 0)
      {
        v6 = *(_QWORD *)(v2 + 112);
        v7 = *(_QWORD *)(v2 + 72);
        if (v6 < v7)
        {
          *(_QWORD *)(v2 + 112) = v7;
          v6 = v7;
        }
        v8 = *(const void **)(v2 + 64);
        v4 = v6 - (_QWORD)v8;
        if (v6 - (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
LABEL_84:
          sub_22316DBC0();
      }
      else
      {
        if ((v3 & 8) == 0)
        {
          v4 = 0;
          HIBYTE(v46) = 0;
          v5 = __dst;
          goto LABEL_18;
        }
        v8 = *(const void **)(v2 + 40);
        v4 = *(_QWORD *)(v2 + 56) - (_QWORD)v8;
        if (v4 >= 0x7FFFFFFFFFFFFFF8)
          goto LABEL_84;
      }
      if (v4 >= 0x17)
      {
        v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v4 | 7) != 0x17)
          v9 = v4 | 7;
        v10 = v9 + 1;
        v5 = (void **)operator new(v9 + 1);
        __dst[1] = (void *)v4;
        v46 = v10 | 0x8000000000000000;
        __dst[0] = v5;
LABEL_17:
        memmove(v5, v8, v4);
        goto LABEL_18;
      }
      HIBYTE(v46) = v4;
      v5 = __dst;
      if (v4)
        goto LABEL_17;
LABEL_18:
      *((_BYTE *)v5 + v4) = 0;
      *(_QWORD *)v2 = v38;
      *(_QWORD *)(v2 + *(_QWORD *)(v38 - 24)) = v36;
      *(_QWORD *)(v2 + 24) = v35;
      *(_QWORD *)(v2 + 16) = v37;
      if (*(char *)(v2 + 111) < 0)
        operator delete(*(void **)(v2 + 88));
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x227684BE0](v2 + 128);
      MEMORY[0x227684CE8](v2, 0x10B2C40EED050F3);
      v47[0] = v43;
      v47[1] = __dst;
      v47[2] = v43;
      v47[3] = __dst;
      v47[4] = __dst;
      if (v44 == -1)
        sub_22316DD70();
      v48 = v47;
      ((void (*)(_QWORD **, _BYTE *))off_24EC6BE20[v44])(&v48, v43);
      if (SHIBYTE(v46) < 0)
        operator delete(__dst[0]);
      if (v44 == -1)
        sub_22316DD70();
      v47[0] = __dst;
      ((void (*)(void **__return_ptr, _QWORD *, _BYTE *))off_24EC6BE50[v44])(&v40, v47, v43);
      if (v44 != -1)
        ((void (*)(_QWORD *, _BYTE *))off_24EC6BE38[v44])(v47, v43);
      v11 = v40;
      v49[0] = *(_QWORD *)v41;
      *(_QWORD *)((char *)v49 + 7) = *(_QWORD *)&v41[7];
      v12 = v42;
      v13 = (char)v42;
      v14 = operator new(0x40uLL);
      v14[4] = v11;
      v14[5] = v49[0];
      *(_QWORD *)((char *)v14 + 47) = *(_QWORD *)((char *)v49 + 7);
      *((_BYTE *)v14 + 55) = v13;
      v49[0] = 0;
      *(_QWORD *)((char *)v49 + 7) = 0;
      *((_BYTE *)v14 + 56) = *((_BYTE *)&v39 + v0);
      v16 = &qword_2540CF020;
      v15 = qword_2540CF020;
      if ((uint64_t *)v1[3] == &qword_2540CF020)
        goto LABEL_72;
      v17 = qword_2540CF020;
      if (qword_2540CF020)
      {
        do
        {
          v16 = (uint64_t *)v17;
          v17 = *(_QWORD *)(v17 + 8);
        }
        while (v17);
      }
      else
      {
        v18 = &qword_2540CF020;
        do
        {
          v16 = (uint64_t *)v18[2];
          v19 = *v16 == (_QWORD)v18;
          v18 = v16;
        }
        while (v19);
      }
      v20 = *((char *)v16 + 55);
      if (v20 >= 0)
        v21 = v16 + 4;
      else
        v21 = (const void *)v16[4];
      if (v20 >= 0)
        v22 = *((unsigned __int8 *)v16 + 55);
      else
        v22 = v16[5];
      if (v13 >= 0)
        v23 = v14 + 4;
      else
        v23 = v11;
      if (v13 >= 0)
        v24 = v12;
      else
        v24 = v14[5];
      if (v24 >= v22)
        v25 = v22;
      else
        v25 = v24;
      v26 = memcmp(v21, v23, v25);
      if (!v26)
      {
        if (v22 < v24)
          goto LABEL_72;
LABEL_49:
        if (!v15)
        {
LABEL_78:
          v16 = &qword_2540CF020;
          v27 = &qword_2540CF020;
          goto LABEL_79;
        }
        while (1)
        {
          v16 = (uint64_t *)v15;
          v28 = *(unsigned __int8 *)(v15 + 55);
          v29 = *(_QWORD *)(v15 + 40);
          if ((v28 & 0x80u) == 0)
            v30 = (const void *)(v15 + 32);
          else
            v30 = *(const void **)(v15 + 32);
          if ((v28 & 0x80u) == 0)
            v31 = v28;
          else
            v31 = v29;
          if (v31 >= v24)
            v32 = v24;
          else
            v32 = v31;
          v33 = memcmp(v23, v30, v32);
          if (v33)
          {
            if (v33 < 0)
              goto LABEL_51;
          }
          else if (v24 < v31)
          {
LABEL_51:
            v15 = *v16;
            v27 = v16;
            if (!*v16)
              goto LABEL_79;
            continue;
          }
          v34 = memcmp(v30, v23, v32);
          if (v34)
          {
            if ((v34 & 0x80000000) == 0)
              goto LABEL_74;
          }
          else if (v31 >= v24)
          {
            goto LABEL_74;
          }
          v15 = v16[1];
          if (!v15)
          {
            v27 = v16 + 1;
            goto LABEL_79;
          }
        }
      }
      if ((v26 & 0x80000000) == 0)
        goto LABEL_49;
LABEL_72:
      if (!v15)
        goto LABEL_78;
      v27 = v16 + 1;
      if (v16[1])
        break;
LABEL_79:
      *v14 = 0;
      v14[1] = 0;
      v14[2] = v16;
      *v27 = (uint64_t)v14;
      v1 = &qword_2540CF000;
      if (*(_QWORD *)qword_2540CF018)
      {
        qword_2540CF018 = *(_QWORD *)qword_2540CF018;
        v14 = (_QWORD *)*v27;
      }
      sub_2231A9A8C((uint64_t *)qword_2540CF020, v14);
      ++qword_2540CF028;
      if (++v0 == 4)
        return;
    }
LABEL_74:
    if (v13 < 0)
      operator delete(v11);
    operator delete(v14);
    v1 = &qword_2540CF000;
    ++v0;
  }
  while (v0 != 4);
}

void sub_224145BE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,int a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_224145D00(uint64_t a1)
{
  sub_22375C06C(*(char **)(a1 + 8));
  return a1;
}

void sub_224145D28(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_2241461F4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t result;
  unsigned __int8 *v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v16;
  unsigned __int8 *v17[2];
  unsigned __int8 *v18;
  unsigned __int8 *v19[2];
  unsigned __int8 *v20;
  char v21;

  v19[0] = a1 + 8;
  v19[1] = a1 + 120;
  v20 = a1 + 152;
  v17[0] = a2 + 8;
  v17[1] = a2 + 120;
  v18 = a2 + 152;
  result = sub_2241465F4((uint64_t)&v21, v19, v17);
  if ((_DWORD)result)
  {
    v3 = v20;
    if (v20[24])
      v4 = v18[24] == 0;
    else
      v4 = 1;
    if (v4)
    {
      return (v20[24] != 0) == (v18[24] != 0);
    }
    else
    {
      v5 = v20[23];
      if ((v5 & 0x80u) == 0)
        v6 = v20[23];
      else
        v6 = *((_QWORD *)v20 + 1);
      v7 = v18[23];
      v8 = (char)v7;
      if ((v7 & 0x80u) != 0)
        v7 = *((_QWORD *)v18 + 1);
      if (v6 == v7)
      {
        if (v8 >= 0)
          v9 = v18;
        else
          v9 = *(unsigned __int8 **)v18;
        if ((v5 & 0x80) != 0)
        {
          return memcmp(*(const void **)v20, v9, *((_QWORD *)v20 + 1)) == 0;
        }
        else if (v20[23])
        {
          v10 = v5 - 1;
          do
          {
            v12 = *v3++;
            v11 = v12;
            v14 = *v9++;
            v13 = v14;
            v16 = v10-- != 0;
            result = v11 == v13;
          }
          while (v11 == v13 && v16);
        }
        else
        {
          return 1;
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

BOOL sub_224146324(uint64_t a1, float *a2, float *a3)
{
  _BOOL8 result;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;

  result = *a2 == *a3;
  if (*a2 == *a3)
  {
    v4 = a2[1];
    v5 = a3[1];
    result = v4 == v5;
    if (v4 == v5)
    {
      v6 = a2[2];
      v7 = a3[2];
      result = v6 == v7;
      if (v6 == v7)
        result = a2[3] == a3[3];
    }
  }
  if (result)
  {
    v8 = a2[4];
    v9 = a3[4];
    result = v8 == v9;
    if (v8 == v9)
    {
      v10 = a2[5];
      v11 = a3[5];
      result = v10 == v11;
      if (v10 == v11)
      {
        v12 = a2[6];
        v13 = a3[6];
        result = v12 == v13;
        if (v12 == v13)
          result = a2[7] == a3[7];
      }
    }
    if (result)
    {
      v14 = a2[8];
      v15 = a3[8];
      result = v14 == v15;
      if (v14 == v15)
      {
        v16 = a2[9];
        v17 = a3[9];
        result = v16 == v17;
        if (v16 == v17)
        {
          v18 = a2[10];
          v19 = a3[10];
          result = v18 == v19;
          if (v18 == v19)
            return a2[11] == a3[11];
        }
      }
    }
  }
  return result;
}

BOOL sub_224146414(uint64_t a1, double *a2, double *a3)
{
  _BOOL8 result;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;

  result = *a2 == *a3;
  if (*a2 == *a3)
  {
    v4 = a2[1];
    v5 = a3[1];
    result = v4 == v5;
    if (v4 == v5)
    {
      v6 = a2[2];
      v7 = a3[2];
      result = v6 == v7;
      if (v6 == v7)
        result = a2[3] == a3[3];
    }
  }
  if (result)
  {
    v8 = a2[4];
    v9 = a3[4];
    result = v8 == v9;
    if (v8 == v9)
    {
      v10 = a2[5];
      v11 = a3[5];
      result = v10 == v11;
      if (v10 == v11)
      {
        v12 = a2[6];
        v13 = a3[6];
        result = v12 == v13;
        if (v12 == v13)
          result = a2[7] == a3[7];
      }
    }
    if (result)
    {
      v14 = a2[8];
      v15 = a3[8];
      result = v14 == v15;
      if (v14 == v15)
      {
        v16 = a2[9];
        v17 = a3[9];
        result = v16 == v17;
        if (v16 == v17)
        {
          v18 = a2[10];
          v19 = a3[10];
          result = v18 == v19;
          if (v18 == v19)
            return a2[11] == a3[11];
        }
      }
    }
  }
  return result;
}

BOOL sub_224146504(uint64_t a1, float *a2, float *a3)
{
  _BOOL8 result;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;

  result = *a2 == *a3;
  if (*a2 == *a3)
  {
    v4 = a2[1];
    v5 = a3[1];
    result = v4 == v5;
    if (v4 == v5)
      result = a2[2] == a3[2];
  }
  if (result)
  {
    v6 = a2[3];
    v7 = a3[3];
    result = v6 == v7;
    if (v6 == v7)
    {
      v8 = a2[4];
      v9 = a3[4];
      result = v8 == v9;
      if (v8 == v9)
        return a2[5] == a3[5];
    }
  }
  return result;
}

BOOL sub_22414657C(uint64_t a1, double *a2, double *a3)
{
  _BOOL8 result;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;

  result = *a2 == *a3;
  if (*a2 == *a3)
  {
    v4 = a2[1];
    v5 = a3[1];
    result = v4 == v5;
    if (v4 == v5)
      result = a2[2] == a3[2];
  }
  if (result)
  {
    v6 = a2[3];
    v7 = a3[3];
    result = v6 == v7;
    if (v6 == v7)
    {
      v8 = a2[4];
      v9 = a3[4];
      result = v8 == v9;
      if (v8 == v9)
        return a2[5] == a3[5];
    }
  }
  return result;
}

uint64_t sub_2241465F4(uint64_t a1, unsigned __int8 **a2, unsigned __int8 **a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  int v8;
  _BOOL4 v10;
  _BOOL4 v12;
  uint64_t result;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned __int8 *v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  BOOL v28;
  char v29;
  char *v30;

  v3 = (uint64_t)*a2;
  v4 = (uint64_t)*a3;
  if (**a2 != **a3)
    return 0;
  v7 = *(unsigned int *)(v3 + 104);
  v8 = *(_DWORD *)(v4 + 104);
  v10 = v8 == (_DWORD)v7 && v8 != -1;
  if ((_DWORD)v7 != -1 && v10)
  {
    v30 = &v29;
    if ((((uint64_t (*)(char **, uint64_t, uint64_t))off_24EC6BE00[v7])(&v30, v3 + 8, v4 + 8) & 1) != 0)
      goto LABEL_19;
    return 0;
  }
  v12 = v8 == -1;
  if ((_DWORD)v7 != -1)
    v12 = v10;
  if (!v12)
    return 0;
LABEL_19:
  v14 = a2[1];
  v15 = a3[1];
  if (v14[24])
    v16 = v15[24] == 0;
  else
    v16 = 1;
  if (v16)
    return (v14[24] != 0) == (v15[24] != 0);
  v17 = v14[23];
  if ((v17 & 0x80u) == 0)
    v18 = v14[23];
  else
    v18 = *((_QWORD *)v14 + 1);
  v19 = v15[23];
  v20 = (char)v19;
  if ((v19 & 0x80u) != 0)
    v19 = *((_QWORD *)v15 + 1);
  if (v18 != v19)
    return 0;
  if (v20 >= 0)
    v21 = a3[1];
  else
    v21 = *(unsigned __int8 **)v15;
  if ((v17 & 0x80) != 0)
    return memcmp(*(const void **)v14, v21, *((_QWORD *)v14 + 1)) == 0;
  if (!v14[23])
    return 1;
  v22 = v17 - 1;
  do
  {
    v24 = *v14++;
    v23 = v24;
    v26 = *v21++;
    v25 = v26;
    v28 = v22-- != 0;
    result = v23 == v25;
  }
  while (v23 == v25 && v28);
  return result;
}

uint64_t sub_224146790(uint64_t a1, uint64_t a2, double *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  uint64_t *v15;

  v10 = a2;
  v11 = "{";
  v12 = a2;
  v13 = "{";
  v14 = "{";
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_6;
  v15 = &v10;
  ((void (*)(uint64_t **))off_24EC6BE68[v3])(&v15);
  sub_2233B45E8((uint64_t)&v10, a2, a3);
  v10 = a2;
  v11 = ",";
  v12 = a2;
  v13 = ",";
  v14 = ",";
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    goto LABEL_6;
  v15 = &v10;
  ((void (*)(uint64_t **, uint64_t))off_24EC6BE68[v6])(&v15, a2);
  sub_2233B45E8((uint64_t)&v10, a2, a3 + 1);
  v10 = a2;
  v11 = ",";
  v12 = a2;
  v13 = ",";
  v14 = ",";
  v7 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v7 == -1)
    goto LABEL_6;
  v15 = &v10;
  ((void (*)(uint64_t **, uint64_t))off_24EC6BE68[v7])(&v15, a2);
  sub_2233B45E8((uint64_t)&v10, a2, a3 + 2);
  v10 = a2;
  v11 = "}";
  v12 = a2;
  v13 = "}";
  v14 = "}";
  v8 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v8 == -1)
LABEL_6:
    sub_22316DD70();
  v15 = &v10;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24EC6BE68[v8])(&v15, a2);
}

_QWORD *sub_2241468E0(_QWORD *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;

  sub_2241469BC(a2, a3, &v8);
  v4 = v8;
  *a1 = v8;
  if (v4)
  {
    v5 = (_QWORD *)operator new();
    v6 = v8;
    *v5 = &off_24EC6BEB8;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
    a1[1] = v5;
  }
  else
  {
    a1[1] = 0;
  }
  return a1;
}

void sub_224146970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v11;

  if (a10)
  {
    if (*(_BYTE *)(a10 + 408))
    {
      if (*(char *)(a10 + 407) < 0)
        operator delete(*(void **)(a10 + 384));
    }
    v11 = sub_22316F8F4((uint64_t *)a10);
    MEMORY[0x227684CE8](v11, 0x10B2C40FBB7FC15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2241469BC@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;
  __int128 v8;
  uint64_t v9;
  char v10;

  v6 = operator new();
  LOBYTE(v8) = 0;
  v10 = 0;
  if (*((_BYTE *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_223197FA4(&v8, *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v8 = *a2;
      v9 = *((_QWORD *)a2 + 2);
    }
    v10 = 1;
  }
  result = sub_223180698(v6, a1);
  *(_BYTE *)(v6 + 384) = 0;
  *(_BYTE *)(v6 + 408) = 0;
  if (v10)
  {
    *(_OWORD *)(v6 + 384) = v8;
    *(_QWORD *)(v6 + 400) = v9;
    *(_BYTE *)(v6 + 408) = 1;
  }
  *a3 = v6;
  return result;
}

void sub_224146A88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  MEMORY[0x227684CE8](v15, 0x10B2C40FBB7FC15);
  _Unwind_Resume(a1);
}

uint64_t sub_224146AC8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  const void **v18;
  unsigned __int8 **v19;
  unsigned __int8 *v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  BOOL v27;
  _QWORD v28[16];
  _QWORD v29[16];
  char v30;

  v4 = *a2;
  v5 = *a1 + 32;
  v6 = *a1 + 64;
  v7 = *a1 + 72;
  v8 = *a1 + 104;
  v9 = *a1 + 112;
  v29[0] = *a1;
  v29[1] = v5;
  v29[2] = v6;
  v29[3] = v7;
  v29[4] = v8;
  v29[5] = v9;
  v29[6] = v29[0] + 144;
  v29[7] = v29[0] + 176;
  v29[8] = v29[0] + 208;
  v29[9] = v29[0] + 240;
  v29[10] = v29[0] + 272;
  v29[11] = v29[0] + 280;
  v29[12] = v29[0] + 312;
  v29[13] = v29[0] + 320;
  v29[14] = v29[0] + 352;
  v29[15] = v29[0] + 356;
  v28[0] = v4;
  v28[1] = v4 + 32;
  v28[2] = v4 + 64;
  v28[3] = v4 + 72;
  v28[4] = v4 + 104;
  v28[5] = v4 + 112;
  v28[6] = v4 + 144;
  v28[7] = v4 + 176;
  v28[8] = v4 + 208;
  v28[9] = v4 + 240;
  v28[10] = v4 + 272;
  v28[11] = v4 + 280;
  v28[12] = v4 + 312;
  v28[13] = v4 + 320;
  v28[14] = v4 + 352;
  v28[15] = v4 + 356;
  result = sub_2239943E0((uint64_t)&v30, (uint64_t)v29, (uint64_t)v28);
  if ((_DWORD)result)
  {
    v11 = *a1;
    v12 = *a2;
    result = (*(_BYTE *)(*a1 + 408) != 0) == (*(_BYTE *)(*a2 + 408) != 0);
    if (*(_BYTE *)(*a1 + 408))
    {
      if (*(_BYTE *)(*a2 + 408))
      {
        v13 = *(unsigned __int8 *)(v11 + 407);
        v14 = *(_QWORD *)(v11 + 392);
        if ((v13 & 0x80u) == 0)
          v15 = *(unsigned __int8 *)(v11 + 407);
        else
          v15 = *(_QWORD *)(v11 + 392);
        v16 = *(unsigned __int8 *)(v12 + 407);
        v17 = (char)v16;
        if ((v16 & 0x80u) != 0)
          v16 = *(_QWORD *)(v12 + 392);
        if (v15 == v16)
        {
          v18 = (const void **)(v11 + 384);
          v19 = (unsigned __int8 **)(v12 + 384);
          if (v17 >= 0)
            v20 = (unsigned __int8 *)v19;
          else
            v20 = *v19;
          if ((v13 & 0x80) != 0)
          {
            return memcmp(*v18, v20, v14) == 0;
          }
          else if ((_DWORD)v13)
          {
            v21 = v13 - 1;
            do
            {
              v23 = *(unsigned __int8 *)v18;
              v18 = (const void **)((char *)v18 + 1);
              v22 = v23;
              v25 = *v20++;
              v24 = v25;
              v27 = v21-- != 0;
              result = v22 == v24;
            }
            while (v22 == v24 && v27);
          }
          else
          {
            return 1;
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

_QWORD *sub_224146CC0(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  void **v9;
  unint64_t v10;
  unint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  const char *v26;
  uint64_t v27;
  _QWORD *v28;
  void *__p[2];
  unsigned __int8 v31;
  _BYTE v32[24];
  int v33;
  void *__dst[2];
  unint64_t v35;
  _QWORD v36[5];
  _QWORD *v37;

  v4 = sub_2231813E8(a1, (uint64_t)"{", 1);
  v5 = *a2;
  v33 = 0;
  v6 = operator new();
  *(_QWORD *)(v6 + 272) = 0;
  *(_OWORD *)(v6 + 240) = 0u;
  *(_OWORD *)(v6 + 256) = 0u;
  *(_OWORD *)(v6 + 208) = 0u;
  *(_OWORD *)(v6 + 224) = 0u;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_OWORD *)(v6 + 192) = 0u;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)v6 = 0u;
  sub_223195210(v6);
  v36[0] = v6;
  sub_224149A08((_QWORD *)(v6 + 16), v5);
  v7 = *(_DWORD *)(v6 + 120);
  if ((v7 & 0x10) != 0)
  {
    v10 = *(_QWORD *)(v6 + 112);
    v11 = *(_QWORD *)(v6 + 72);
    if (v10 < v11)
    {
      *(_QWORD *)(v6 + 112) = v11;
      v10 = v11;
    }
    v12 = *(const void **)(v6 + 64);
    v8 = v10 - (_QWORD)v12;
    if (v10 - (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_42;
  }
  else
  {
    if ((v7 & 8) == 0)
    {
      v8 = 0;
      HIBYTE(v35) = 0;
      v9 = __dst;
      goto LABEL_14;
    }
    v12 = *(const void **)(v6 + 40);
    v8 = *(_QWORD *)(v6 + 56) - (_QWORD)v12;
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
LABEL_42:
      sub_22316DBC0();
  }
  if (v8 >= 0x17)
  {
    v13 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v13 = v8 | 7;
    v14 = v13 + 1;
    v9 = (void **)operator new(v13 + 1);
    __dst[1] = (void *)v8;
    v35 = v14 | 0x8000000000000000;
    __dst[0] = v9;
    goto LABEL_13;
  }
  HIBYTE(v35) = v8;
  v9 = __dst;
  if (v8)
LABEL_13:
    memmove(v9, v12, v8);
LABEL_14:
  *((_BYTE *)v9 + v8) = 0;
  v15 = v36[0];
  if (v36[0])
  {
    v16 = MEMORY[0x24BEDB7F0];
    v17 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v36[0] = *MEMORY[0x24BEDB7F0];
    v18 = *(_QWORD *)(v16 + 72);
    *(_QWORD *)(v15 + *(_QWORD *)(v17 - 24)) = *(_QWORD *)(v16 + 64);
    *(_QWORD *)(v15 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v15 + 16) = v18;
    if (*(char *)(v15 + 111) < 0)
      operator delete(*(void **)(v15 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v15 + 128);
    MEMORY[0x227684CE8](v15, 0x10B2C40EED050F3);
  }
  v36[0] = v32;
  v36[1] = __dst;
  v36[2] = v32;
  v36[3] = __dst;
  v36[4] = __dst;
  if (v33 == -1)
    sub_22316DD70();
  v37 = v36;
  ((void (*)(_QWORD **, _BYTE *))off_24EC6BEF8[v33])(&v37, v32);
  if (SHIBYTE(v35) < 0)
    operator delete(__dst[0]);
  if (v33 == -1)
    sub_22316DD70();
  v36[0] = __dst;
  ((void (*)(void **__return_ptr, _QWORD *, _BYTE *))off_24EC6BF28[v33])(__p, v36, v32);
  if (v33 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_24EC6BF10[v33])(v36, v32);
  if ((v31 & 0x80u) == 0)
    v19 = __p;
  else
    v19 = (void **)__p[0];
  if ((v31 & 0x80u) == 0)
    v20 = v31;
  else
    v20 = (uint64_t)__p[1];
  sub_2231813E8(v4, (uint64_t)v19, v20);
  if ((char)v31 < 0)
    operator delete(__p[0]);
  if (*(_BYTE *)(*a2 + 408))
  {
    sub_2231813E8(a1, (uint64_t)",\n", 2);
    sub_2231813E8(a1, (uint64_t)"tex0='", 6);
    v21 = *a2;
    if (*(_BYTE *)(*a2 + 408))
    {
      v22 = (const char *)(v21 + 384);
      v23 = *(unsigned __int8 *)(v21 + 407);
      v25 = *(const char **)(v21 + 384);
      v24 = *(_QWORD *)(v21 + 392);
      if ((v23 & 0x80u) == 0)
        v26 = v22;
      else
        v26 = v25;
      if ((v23 & 0x80u) == 0)
        v27 = v23;
      else
        v27 = v24;
      v28 = a1;
    }
    else
    {
      v26 = "nullopt";
      v28 = a1;
      v27 = 7;
    }
    sub_2231813E8(v28, (uint64_t)v26, v27);
    sub_2231813E8(a1, (uint64_t)"'", 1);
  }
  return sub_2231813E8(a1, (uint64_t)"}", 1);
}

void sub_224147054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_224147070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  MEMORY[0x227684CE8](v4, 0x10B2C40EED050F3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22414709C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2241470B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2241470C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0)
  {
    operator delete(__p);
    sub_22319B964((uint64_t)&a12);
    _Unwind_Resume(a1);
  }
  sub_22319B964((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_224147108(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22414712C(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    if (*(_BYTE *)(v1 + 408) && *(char *)(v1 + 407) < 0)
      operator delete(*(void **)(v1 + 384));
    sub_22316F8F4((uint64_t *)v1);
    JUMPOUT(0x227684CE8);
  }
  return result;
}

uint64_t sub_224147188(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3viz7TriMesh7PrivateEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3viz7TriMesh7PrivateEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3viz7TriMesh7PrivateEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3viz7TriMesh7PrivateEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t *sub_2241471F8()
{
  unsigned __int8 v0;
  void *__p;
  char v3;
  char v4;

  v0 = atomic_load((unsigned __int8 *)&qword_2557952F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2557952F8))
    return &qword_2557952D8;
  LOBYTE(__p) = 0;
  v4 = 0;
  sub_224147A1C(&qword_2557952D8, (uint64_t)&__p);
  if (v4)
  {
    if (v3 < 0)
      operator delete(__p);
  }
  __cxa_atexit((void (*)(void *))sub_224148004, &qword_2557952D8, &dword_22314D000);
  __cxa_guard_release(&qword_2557952F8);
  return &qword_2557952D8;
}

void sub_2241472B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_2557952F8);
  _Unwind_Resume(a1);
}

uint64_t sub_2241472E0()
{
  sub_2241471F8();
  return (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
}

BOOL sub_22414731C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _BOOL8 v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v2 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v6 = *(_QWORD *)(a1 + 64);
    v14 = v2;
    v15 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 64);
    v14 = *a2;
    v15 = 0;
  }
  v8 = sub_224104BF8(v6, &v14);
  if (v3)
  {
    v9 = (unint64_t *)&v3->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (!v3)
    return v8;
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (v12)
    return v8;
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return v8;
}

void sub_224147410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_223167354((uint64_t)&a11);
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_22414742C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 64);
  std::mutex::lock((std::mutex *)(v3 + 32));
  v4 = sub_2241047C8(v3, a2);
  std::mutex::unlock((std::mutex *)(v3 + 32));
  return v4;
}

void sub_22414747C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_224147490(uint64_t a1)
{
  return a1 + 48;
}

uint64_t sub_224147498(uint64_t a1)
{
  return a1 + 48;
}

uint64_t sub_2241474A0@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 40);
  *a2 = *(_QWORD *)(result + 32);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_2241474C4@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 40);
  *a2 = *(_QWORD *)(result + 32);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

std::__shared_weak_count *sub_2241474E8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *result;

  result = *(std::__shared_weak_count **)(a1 + 24);
  if (result && (result = std::__shared_weak_count::lock(result)) != 0)
  {
    *a2 = *(_QWORD *)(a1 + 16);
    a2[1] = result;
  }
  else
  {
    *a2 = 0;
    a2[1] = result;
  }
  return result;
}

std::__shared_weak_count *sub_224147534@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *result;

  result = *(std::__shared_weak_count **)(a1 + 24);
  if (result && (result = std::__shared_weak_count::lock(result)) != 0)
  {
    *a2 = *(_QWORD *)(a1 + 16);
    a2[1] = result;
  }
  else
  {
    *a2 = 0;
    a2[1] = result;
  }
  return result;
}

uint64_t sub_224147580(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_224147588(uint64_t a1)
{
  return a1 + 72;
}

void sub_224147590(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(v3 + 8);
  if (v4)
  {
    sub_224127444(v4, a2);
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_224127444(*(_QWORD *)(v3 + 8), a2);
  }
}

void sub_224147608(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(v3 + 8);
  if (v4)
  {
    sub_224127444(v4, a2);
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_224127444(*(_QWORD *)(v3 + 8), a2);
  }
}

uint64_t sub_224147680(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(v3 + 8);
  if (v4)
    return sub_224126FD0(v4, a2);
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  return sub_224126FD0(*(_QWORD *)(v3 + 8), a2);
}

uint64_t sub_2241476F8(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(v3 + 8);
  if (v4)
    return sub_224126FD0(v4, a2);
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  return sub_224126FD0(*(_QWORD *)(v3 + 8), a2);
}

uint64_t sub_224147770(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD **)(v3 + 8);
  if (v4)
    return sub_224127320(v4, a2);
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  return sub_224127320(*(_QWORD **)(v3 + 8), a2);
}

uint64_t sub_2241477E8(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD **)(v3 + 8);
  if (v4)
    return sub_224127320(v4, a2);
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  return sub_224127320(*(_QWORD **)(v3 + 8), a2);
}

uint64_t **sub_224147860(uint64_t a1, char *a2, size_t a3)
{
  return sub_2241281D0(*(_QWORD *)(a1 + 32), a2, a3);
}

uint64_t **sub_224147868(uint64_t a1, char *a2, size_t a3)
{
  return sub_2241281D0(*(_QWORD *)(a1 + 24), a2, a3);
}

unint64_t sub_224147870(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(v5 + 8);
  if (v6)
    return sub_22412652C(v6, a2, a3);
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/NamedContext.cpp", 742, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  return sub_22412652C(*(_QWORD *)(v5 + 8), a2, a3);
}

unint64_t sub_224147900(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(v5 + 8);
  if (v6)
    return sub_22412652C(v6, a2, a3);
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/NamedContext.cpp", 742, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  return sub_22412652C(*(_QWORD *)(v5 + 8), a2, a3);
}

uint64_t sub_224147990(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::mutex *v5;
  _QWORD *v6;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 64);
  v5 = (std::mutex *)(v4 + 32);
  std::mutex::lock((std::mutex *)(v4 + 32));
  v6 = *(_QWORD **)(v4 + 96);
  for (i = *(_QWORD **)(v4 + 104); v6 != i; v6 += 2)
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v6 + 16))(*v6, a2);
  std::mutex::unlock(v5);
  return a1;
}

void sub_224147A08(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_224147A1C(_QWORD *a1, uint64_t a2)
{
  void *v3;
  char v4;
  char *v5;
  char *v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *v12;
  char *v13;
  uint64_t v14;
  void *__p;
  _BYTE v16[15];
  char v17;
  char v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v12 = 0;
  v13 = 0;
  v14 = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_QWORD *)((char *)v19 + 7) = *(_QWORD *)(a2 + 15);
    v3 = *(void **)a2;
    v19[0] = *(_QWORD *)(a2 + 8);
    v4 = *(_BYTE *)(a2 + 23);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    *a1 = &off_24EC6BF50;
    a1[1] = &unk_24EC6C000;
    __p = v3;
    *(_QWORD *)v16 = v19[0];
    *(_QWORD *)&v16[7] = *(_QWORD *)((char *)v19 + 7);
    v17 = v4;
    memset(v19, 0, 15);
    v18 = 1;
  }
  else
  {
    *a1 = &off_24EC6BF50;
    a1[1] = &unk_24EC6C000;
    LOBYTE(__p) = 0;
    v18 = 0;
  }
  sub_224147BB8((uint64_t)&v12, (uint64_t)&__p, a1 + 2);
  if (v18 && v17 < 0)
    operator delete(__p);
  v5 = (char *)v12;
  if (v12)
  {
    v6 = v13;
    v7 = v12;
    if (v13 != v12)
    {
      do
      {
        v8 = (std::__shared_weak_count *)*((_QWORD *)v6 - 1);
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        v6 -= 16;
      }
      while (v6 != v5);
      v7 = v12;
    }
    v13 = v5;
    operator delete(v7);
  }
  return a1;
}

void sub_224147B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a18)
  {
    if (a17 < 0)
      operator delete(__p);
  }
  sub_2231B888C((void **)&a9);
  _Unwind_Resume(a1);
}

void sub_224147BB8(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  unsigned __int8 v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_weak_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  void *__p[2];
  uint64_t v33;
  std::__shared_weak_count *v34;
  void *v35;
  std::__shared_weak_count *v36;
  uint64_t v37;

  v6 = (char *)operator new(0x88uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_24EC6C1C0;
  *((_QWORD *)v6 + 3) = &off_24EC6C090;
  __p[0] = 0;
  __p[1] = 0;
  v33 = 0;
  *((_QWORD *)v6 + 4) = &unk_24EC6C138;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *((_QWORD *)v6 + 9) = &off_24EC694F0;
  *((_QWORD *)v6 + 10) = &unk_24EC69530;
  v35 = 0;
  v36 = 0;
  sub_22410496C((uint64_t **)__p, (uint64_t *)&v35, (_QWORD *)v6 + 11);
  if (v36)
    std::__shared_weak_count::__release_weak(v36);
  v6[104] = 0;
  v6[128] = 0;
  *a3 = v6 + 24;
  a3[1] = v6;
  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
    v7 = 2;
  else
    v7 = 1;
  v8 = operator new(0x28uLL);
  v9 = v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_24EC66448;
  v10 = v8 + 3;
  v36 = 0;
  v37 = 0;
  v35 = 0;
  LOBYTE(__p[0]) = 0;
  LOBYTE(v34) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v33 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    LOBYTE(v34) = 1;
  }
  sub_2241277A4(v8 + 3, v7, (uint64_t)&v35, (uint64_t *)__p);
  if ((_BYTE)v34 && SHIBYTE(v33) < 0)
    operator delete(__p[0]);
  if (v35)
  {
    v36 = (std::__shared_weak_count *)v35;
    operator delete(v35);
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)v6 + 8);
  *((_QWORD *)v6 + 7) = v10;
  *((_QWORD *)v6 + 8) = v9;
  if (!v11)
    goto LABEL_17;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    v14 = (_QWORD *)*a3;
    v15 = *(_QWORD *)(*a3 + 32);
    v16 = *(_QWORD *)(v15 + 8);
    if (v16)
      goto LABEL_21;
  }
  else
  {
LABEL_17:
    v14 = (_QWORD *)*a3;
    v15 = *(_QWORD *)(*a3 + 32);
    v16 = *(_QWORD *)(v15 + 8);
    if (v16)
      goto LABEL_21;
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/NamedContext.cpp", 742, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v16 = *(_QWORD *)(v15 + 8);
LABEL_21:
  sub_22361F234((uint64_t)(v14 + 10), (_QWORD *)(v16 + 240));
  v17 = (std::__shared_weak_count *)a3[1];
  if (v17)
  {
    p_shared_weak_owners = (unint64_t *)&v17->__shared_weak_owners_;
    do
      v19 = __ldxr(p_shared_weak_owners);
    while (__stxr(v19 + 1, p_shared_weak_owners));
  }
  v20 = (std::__shared_weak_count *)v14[3];
  v14[2] = v14;
  v14[3] = v17;
  if (v20)
    std::__shared_weak_count::__release_weak(v20);
  if (v17)
  {
    v21 = (unint64_t *)&v17->__shared_weak_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    __p[0] = &off_24EC694F0;
    __p[1] = &unk_24EC69530;
    v35 = v14;
    v36 = v17;
    do
      v23 = __ldxr(v21);
    while (__stxr(v23 + 1, v21));
  }
  else
  {
    __p[0] = &off_24EC694F0;
    __p[1] = &unk_24EC69530;
    v35 = v14;
    v36 = 0;
  }
  sub_22410496C((uint64_t **)a1, (uint64_t *)&v35, &v33);
  if (v36)
    std::__shared_weak_count::__release_weak(v36);
  v24 = v33;
  v25 = v34;
  v33 = 0;
  v34 = 0;
  v26 = (std::__shared_weak_count *)v14[9];
  v14[8] = v24;
  v14[9] = v25;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v34;
  if (v34)
  {
    v30 = (unint64_t *)&v34->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (v17)
    std::__shared_weak_count::__release_weak(v17);
}

void sub_224147EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  uint64_t v15;
  std::__shared_weak_count *v16;

  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if (!v16)
    {
LABEL_3:
      sub_223167354(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v16);
  sub_223167354(v15);
  _Unwind_Resume(a1);
}

void sub_224147F38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18)
{
  uint64_t v18;
  std::__shared_weak_count *v19;
  void *v21;

  if (a15 && a14 < 0)
    operator delete(__p);
  if (a17)
    operator delete(a17);
  std::__shared_weak_count::~__shared_weak_count(v19);
  operator delete(v21);
  sub_223167354(v18);
  _Unwind_Resume(a1);
}

void sub_224147F80(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_224147F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v18;
  void *v19;
  void *v20;

  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    sub_223167354(v16);
    v18 = (std::__shared_weak_count *)v15[2].__vftable;
    if (!v18)
    {
LABEL_3:
      std::__shared_weak_count::~__shared_weak_count(v15);
      operator delete(v19);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    sub_223167354(v16);
    v18 = (std::__shared_weak_count *)v15[2].__vftable;
    if (!v18)
      goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v18);
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v20);
  _Unwind_Resume(a1);
}

void sub_224147FF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_224148004(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 24);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_22414806C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_2241480C8(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

void sub_224148130(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_224148198(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    sub_224104D48(*(_QWORD *)(v4 + 64), a2);
    v5 = *(_QWORD *)(a1 + 16);
    if (v5)
    {
LABEL_3:
      sub_2241284D8(*(_QWORD *)(v5 + 32), 2, 0);
      v6 = *(_QWORD *)(a1 + 16);
      if (v6)
        goto LABEL_11;
      goto LABEL_9;
    }
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_15;
    }
    sub_224104D48(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 64), a2);
    v5 = *(_QWORD *)(a1 + 16);
    if (v5)
      goto LABEL_3;
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_15;
  }
  sub_2241284D8(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), 2, 0);
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
    goto LABEL_11;
LABEL_9:
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
  {
LABEL_15:
    abort();
  }
  v6 = *(_QWORD *)(a1 + 16);
LABEL_11:
  v8 = *a2;
  v7 = a2[1];
  v9 = (*(uint64_t (**)(uint64_t, void *, _QWORD))(*(_QWORD *)(v6 + 8) + 48))(v6 + 8, &unk_2245B11CF, 0);
  if (v8 == v7)
    v10 = 2;
  else
    v10 = 1;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 40))(v9, v10);
}

uint64_t sub_2241482F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 104))(v4, a2);
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 104))(*(_QWORD *)(a1 + 16), a2);
}

uint64_t sub_224148380(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 104))(v4, a2);
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8), a2);
}

BOOL sub_224148408(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _BOOL8 v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *a2;
    v5 = (std::__shared_weak_count *)a2[1];
    v20 = v5;
    if (v5)
      goto LABEL_3;
LABEL_12:
    v21 = 0;
    v9 = *(_QWORD *)(v3 + 64);
    v22 = v4;
    v23 = 0;
    goto LABEL_13;
  }
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  v20 = v5;
  if (!v5)
    goto LABEL_12;
LABEL_3:
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  v21 = v5;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  v9 = *(_QWORD *)(v3 + 64);
  v22 = v4;
  v23 = v5;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_13:
  v12 = sub_224104BF8(v9, &v22);
  if (v5)
  {
    v13 = (unint64_t *)&v5->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v21)
  {
    v15 = (unint64_t *)&v21->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (!v20)
    return v12;
  v17 = (unint64_t *)&v20->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (v18)
    return v12;
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  return v12;
}

void sub_2241485A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  sub_223167354((uint64_t)&a13);
  sub_223167354((uint64_t)&a11);
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2241485CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v3 = *(_QWORD *)(a1 + 16);
  }
  v5 = *(_QWORD *)(v3 + 64);
  std::mutex::lock((std::mutex *)(v5 + 32));
  v6 = sub_2241047C8(v5, a2);
  std::mutex::unlock((std::mutex *)(v5 + 32));
  return v6;
}

void sub_224148664(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_224148678(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
    return v1 + 48;
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 202, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  return *(_QWORD *)(a1 + 16) + 48;
}

uint64_t sub_2241486EC(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
    return v1 + 48;
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  return *(_QWORD *)(a1 + 16) + 48;
}

uint64_t sub_224148760@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = *(_QWORD *)(result + 16);
  if (!v3)
  {
    v4 = result;
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 202, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C);
    if ((result & 1) != 0)
      abort();
    v3 = *(_QWORD *)(v4 + 16);
  }
  v6 = *(_QWORD *)(v3 + 32);
  v5 = *(_QWORD *)(v3 + 40);
  *a2 = v6;
  a2[1] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

uint64_t sub_2241487E4@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = *(_QWORD *)(result + 16);
  if (!v3)
  {
    v4 = result;
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C);
    if ((result & 1) != 0)
      abort();
    v3 = *(_QWORD *)(v4 + 16);
  }
  v6 = *(_QWORD *)(v3 + 32);
  v5 = *(_QWORD *)(v3 + 40);
  *a2 = v6;
  a2[1] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

std::__shared_weak_count *sub_224148868@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    result = *(std::__shared_weak_count **)(v3 + 24);
    if (!result)
      goto LABEL_8;
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 202, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v3 = *(_QWORD *)(a1 + 16);
    result = *(std::__shared_weak_count **)(v3 + 24);
    if (!result)
      goto LABEL_8;
  }
  result = std::__shared_weak_count::lock(result);
  if (result)
  {
    *a2 = *(_QWORD *)(v3 + 16);
    a2[1] = result;
    return result;
  }
LABEL_8:
  *a2 = 0;
  a2[1] = result;
  return result;
}

std::__shared_weak_count *sub_224148910@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    result = *(std::__shared_weak_count **)(v3 + 24);
    if (!result)
      goto LABEL_8;
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v3 = *(_QWORD *)(a1 + 16);
    result = *(std::__shared_weak_count **)(v3 + 24);
    if (!result)
      goto LABEL_8;
  }
  result = std::__shared_weak_count::lock(result);
  if (result)
  {
    *a2 = *(_QWORD *)(v3 + 16);
    a2[1] = result;
    return result;
  }
LABEL_8:
  *a2 = 0;
  a2[1] = result;
  return result;
}

uint64_t sub_2241489B8(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 112))(v2);
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 202, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 112))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_224148A34(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 112))(v2);
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 202, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_224148AB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 120))(v4, a2);
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 120))(*(_QWORD *)(a1 + 16), a2);
}

uint64_t sub_224148B38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 120))(v4, a2);
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 120))(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_224148BC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 128))(v4, a2);
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 128))(*(_QWORD *)(a1 + 16), a2);
}

uint64_t sub_224148C48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 128))(v4, a2);
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 128))(*(_QWORD *)(a1 + 8), a2);
}

uint64_t **sub_224148CD0(uint64_t a1, char *a2, size_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v5 = *(_QWORD *)(a1 + 16);
  }
  return sub_2241281D0(*(_QWORD *)(v5 + 32), a2, a3);
}

uint64_t **sub_224148D4C(uint64_t a1, char *a2, size_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v5 = *(_QWORD *)(a1 + 8);
  }
  return sub_2241281D0(*(_QWORD *)(v5 + 32), a2, a3);
}

unint64_t sub_224148DC8(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 202, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_9;
    }
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
      return sub_22412652C(v7, a2, a3);
LABEL_7:
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/NamedContext.cpp", 742, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))return sub_22412652C(*(_QWORD *)(v6 + 8), a2, a3);
LABEL_9:
    abort();
  }
  v6 = *(_QWORD *)(v5 + 32);
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    goto LABEL_7;
  return sub_22412652C(v7, a2, a3);
}

unint64_t sub_224148EA8(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 202, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_9;
    }
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
      return sub_22412652C(v7, a2, a3);
LABEL_7:
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/NamedContext.cpp", 742, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))return sub_22412652C(*(_QWORD *)(v6 + 8), a2, a3);
LABEL_9:
    abort();
  }
  v6 = *(_QWORD *)(v5 + 32);
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    goto LABEL_7;
  return sub_22412652C(v7, a2, a3);
}

uint64_t sub_224148F88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 202, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v5 = *(_QWORD *)(a1 + 16);
  }
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v5 + 32) + 64))(*(_QWORD *)(v5 + 32), a2, a3);
}

uint64_t sub_22414900C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 202, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v5 = *(_QWORD *)(a1 + 8);
  }
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v5 + 32) + 64))(*(_QWORD *)(v5 + 32), a2, a3);
}

uint64_t sub_224149090(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  std::mutex *v6;
  _QWORD *v7;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = *(_QWORD *)(a1 + 16);
  }
  v5 = *(_QWORD *)(v4 + 64);
  v6 = (std::mutex *)(v5 + 32);
  std::mutex::lock((std::mutex *)(v5 + 32));
  v7 = *(_QWORD **)(v5 + 96);
  for (i = *(_QWORD **)(v5 + 104); v7 != i; v7 += 2)
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v7 + 16))(*v7, a2);
  std::mutex::unlock(v6);
  return a1;
}

void sub_22414914C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_224149164(uint64_t a1)
{
  sub_224149208(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_224149188(uint64_t a1)
{
  return sub_224149208(a1 - 8);
}

void sub_224149190(uint64_t a1)
{
  sub_224149208(a1 - 8);
  JUMPOUT(0x227684CE8);
}

void sub_2241491B8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6C1C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2241491C8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6C1C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2241491F8(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_224149208(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  *(_QWORD *)a1 = &off_24EC6C090;
  *(_QWORD *)(a1 + 8) = &unk_24EC6C138;
  if (*(_BYTE *)(a1 + 104) && *(char *)(a1 + 103) < 0)
  {
    operator delete(*(void **)(a1 + 80));
    v2 = *(std::__shared_weak_count **)(a1 + 72);
    if (!v2)
      goto LABEL_9;
  }
  else
  {
    v2 = *(std::__shared_weak_count **)(a1 + 72);
    if (!v2)
      goto LABEL_9;
  }
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
LABEL_9:
  v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      v8 = *(std::__shared_weak_count **)(a1 + 24);
      if (!v8)
        return a1;
      goto LABEL_14;
    }
  }
  v8 = *(std::__shared_weak_count **)(a1 + 24);
  if (v8)
LABEL_14:
    std::__shared_weak_count::__release_weak(v8);
  return a1;
}

uint64_t *sub_2241492E4(uint64_t *a1, _DWORD *a2)
{
  _OWORD *v3;
  __int128 v4;
  _OWORD *v5;
  __int128 v6;
  _OWORD *v7;
  __int128 v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t *v13;
  void **v14;
  __int128 v15;
  uint64_t *v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t **v19;
  BOOL v20;
  int v21;
  uint64_t **v22;
  uint64_t *v23;
  int v24;
  void **v25;
  uint64_t *v26;
  size_t v27;
  int v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  size_t v35;
  int v36;
  int v37;
  uint64_t ***v38;
  char *v39;
  uint64_t v40;
  uint64_t *v41;
  char v42;
  __int128 *v43;
  size_t v44;
  uint64_t **v45;
  int v46;
  const void *v47;
  size_t v48;
  size_t v49;
  int v50;
  int v51;
  uint64_t *v52;
  size_t v53;
  size_t v54;
  int v55;
  _DWORD *v57;
  char *__p;
  char *v60;
  uint64_t v61;
  uint64_t **v62;
  uint64_t *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  __int128 v71;
  uint64_t v72;

  v68 = (char *)operator new(0x48uLL);
  v69 = v68;
  v70 = v68 + 72;
  sub_22414ACD8((uint64_t)&v71, dword_22469B644);
  v3 = v68;
  if (v68 >= v68 + 72)
  {
    v69 = sub_22319BED8((void **)&v68, (uint64_t)&v71);
    if (SHIBYTE(v72) < 0)
      operator delete((void *)v71);
  }
  else
  {
    v4 = v71;
    *((_QWORD *)v69 + 2) = v72;
    *v3 = v4;
    v69 = (char *)v3 + 24;
  }
  sub_22414ACD8((uint64_t)&v71, &dword_22469B648);
  v5 = v69;
  if (v69 >= v70)
  {
    v69 = sub_22319BED8((void **)&v68, (uint64_t)&v71);
    if (SHIBYTE(v72) < 0)
      operator delete((void *)v71);
  }
  else
  {
    v6 = v71;
    *((_QWORD *)v69 + 2) = v72;
    *v5 = v6;
    v69 = (char *)v5 + 24;
  }
  sub_22414ACD8((uint64_t)&v71, &dword_22469B64C);
  v7 = v69;
  v57 = a2;
  if (v69 >= v70)
  {
    v9 = sub_22319BED8((void **)&v68, (uint64_t)&v71);
    v69 = v9;
    if (SHIBYTE(v72) < 0)
    {
      operator delete((void *)v71);
      v9 = v69;
    }
  }
  else
  {
    v8 = v71;
    *((_QWORD *)v69 + 2) = v72;
    *v7 = v8;
    v9 = (char *)v7 + 24;
    v69 = (char *)v7 + 24;
  }
  v10 = 0;
  v11 = v68;
  v65 = v68;
  v66 = v9;
  v67 = v70;
  v63 = 0;
  v64 = 0;
  v62 = &v63;
  __p = v68;
  v60 = v9;
  while (1)
  {
LABEL_15:
    v12 = (char *)operator new(0x40uLL);
    v13 = (uint64_t *)v12;
    *(_QWORD *)&v71 = v12;
    *((_QWORD *)&v71 + 1) = &v63;
    LOBYTE(v72) = 0;
    v14 = (void **)(v12 + 32);
    if (v11[23] < 0)
    {
      sub_223197FA4(v12 + 32, *(void **)v11, *((_QWORD *)v11 + 1));
    }
    else
    {
      v15 = *(_OWORD *)v11;
      *((_QWORD *)v12 + 6) = *((_QWORD *)v11 + 2);
      *(_OWORD *)v14 = v15;
    }
    v61 = v10;
    *((_DWORD *)v13 + 14) = dword_22469B644[v10];
    v16 = v63;
    v17 = &v63;
    if (v62 == &v63)
    {
LABEL_63:
      v29 = v17 + 1;
      if (v16)
        v30 = v17;
      else
        v30 = &v63;
      v38 = &v62;
      if (v16)
        v38 = (uint64_t ***)v17;
      else
        v29 = &v63;
      if (!v38[1])
        goto LABEL_73;
      v39 = v60;
      v40 = v61;
      if ((*((_BYTE *)v13 + 55) & 0x80) != 0)
        goto LABEL_78;
      goto LABEL_71;
    }
    v18 = v63;
    v19 = &v63;
    if (v63)
    {
      do
      {
        v17 = (uint64_t **)v18;
        v18 = (uint64_t *)v18[1];
      }
      while (v18);
    }
    else
    {
      do
      {
        v17 = (uint64_t **)v19[2];
        v20 = *v17 == (uint64_t *)v19;
        v19 = v17;
      }
      while (v20);
    }
    v21 = *((char *)v17 + 55);
    v22 = v21 >= 0 ? v17 + 4 : (uint64_t **)v17[4];
    v23 = v21 >= 0 ? (uint64_t *)*((unsigned __int8 *)v17 + 55) : v17[5];
    v24 = *((char *)v13 + 55);
    v25 = v24 >= 0 ? v14 : (void **)v13[4];
    v26 = v24 >= 0 ? (uint64_t *)*((unsigned __int8 *)v13 + 55) : (uint64_t *)v13[5];
    v27 = (size_t)(v26 >= v23 ? v23 : v26);
    v28 = memcmp(v22, v25, v27);
    if (v28)
    {
      if (v28 < 0)
        goto LABEL_63;
    }
    else if (v23 < v26)
    {
      goto LABEL_63;
    }
    v29 = &v63;
    v30 = &v63;
    if (v16)
      break;
LABEL_73:
    *v13 = 0;
    v13[1] = 0;
    v13[2] = (uint64_t)v30;
    *v29 = v13;
    if (*v62)
    {
      v62 = (uint64_t **)*v62;
      v13 = *v29;
    }
    sub_2231A9A8C(v63, v13);
    ++v64;
    v39 = v60;
    v11 += 24;
    v10 = v61 + 1;
    if (v11 == v60)
      goto LABEL_14;
  }
  while (1)
  {
    while (1)
    {
      v30 = (uint64_t **)v16;
      v31 = *((unsigned __int8 *)v16 + 55);
      v32 = v16[5];
      v33 = (v31 & 0x80u) == 0 ? v16 + 4 : (uint64_t *)v16[4];
      v34 = (uint64_t *)((v31 & 0x80u) == 0 ? v31 : v32);
      v35 = (size_t)(v34 >= v26 ? v26 : v34);
      v36 = memcmp(v25, v33, v35);
      if (v36)
        break;
      if (v26 >= v34)
        goto LABEL_56;
LABEL_42:
      v16 = *v30;
      v29 = v30;
      if (!*v30)
        goto LABEL_73;
    }
    if (v36 < 0)
      goto LABEL_42;
LABEL_56:
    v37 = memcmp(v33, v25, v35);
    if (!v37)
      break;
    if ((v37 & 0x80000000) == 0)
      goto LABEL_77;
LABEL_60:
    v16 = v30[1];
    if (!v16)
    {
      v29 = v30 + 1;
      goto LABEL_73;
    }
  }
  if (v34 < v26)
    goto LABEL_60;
LABEL_77:
  v39 = v60;
  v40 = v61;
  if ((v24 & 0x80) == 0)
  {
LABEL_71:
    operator delete(v13);
    v11 += 24;
    v10 = v40 + 1;
    if (v11 != v39)
      goto LABEL_15;
    goto LABEL_14;
  }
LABEL_78:
  operator delete(*v14);
  operator delete(v13);
  v11 += 24;
  v10 = v40 + 1;
  if (v11 != v39)
    goto LABEL_15;
LABEL_14:
  if (v10 != 3)
    goto LABEL_15;
  if (__p)
  {
    while (v39 != __p)
    {
      if (*(v39 - 1) < 0)
        operator delete(*((void **)v39 - 3));
      v39 -= 24;
    }
    operator delete(__p);
  }
  v71 = 0uLL;
  v72 = 0;
  sub_2240EA2BC(a1, (uint64_t)&v71);
  v41 = v63;
  if (!v63)
    goto LABEL_125;
  v42 = HIBYTE(v72);
  if (v72 >= 0)
    v43 = &v71;
  else
    v43 = (__int128 *)v71;
  if (v72 >= 0)
    v44 = HIBYTE(v72);
  else
    v44 = *((_QWORD *)&v71 + 1);
  v45 = &v63;
  while (2)
  {
    while (2)
    {
      v46 = *((char *)v41 + 55);
      if (v46 >= 0)
        v47 = v41 + 4;
      else
        v47 = (const void *)v41[4];
      if (v46 >= 0)
        v48 = *((unsigned __int8 *)v41 + 55);
      else
        v48 = v41[5];
      if (v44 >= v48)
        v49 = v48;
      else
        v49 = v44;
      v50 = memcmp(v47, v43, v49);
      if (v50)
      {
        if ((v50 & 0x80000000) == 0)
          break;
        goto LABEL_95;
      }
      if (v48 < v44)
      {
LABEL_95:
        v41 = (uint64_t *)v41[1];
        if (!v41)
          goto LABEL_110;
        continue;
      }
      break;
    }
    v45 = (uint64_t **)v41;
    v41 = (uint64_t *)*v41;
    if (v41)
      continue;
    break;
  }
LABEL_110:
  if (v45 == &v63)
    goto LABEL_125;
  v51 = *((char *)v45 + 55);
  if (v51 >= 0)
    v52 = (uint64_t *)(v45 + 4);
  else
    v52 = v45[4];
  if (v51 >= 0)
    v53 = *((unsigned __int8 *)v45 + 55);
  else
    v53 = (size_t)v45[5];
  if (v53 >= v44)
    v54 = v44;
  else
    v54 = v53;
  v55 = memcmp(v43, v52, v54);
  if (v55)
  {
    if ((v55 & 0x80000000) == 0)
      goto LABEL_122;
LABEL_125:
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
    if (v72 < 0)
LABEL_126:
      operator delete((void *)v71);
  }
  else
  {
    if (v44 < v53)
      goto LABEL_125;
LABEL_122:
    *v57 = *((_DWORD *)v45 + 14);
    if (v42 < 0)
      goto LABEL_126;
  }
  sub_22375C06C((char *)v63);
  return a1;
}

void sub_224149850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char *a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 81) < 0)
    operator delete(*(void **)(v16 - 104));
  sub_22375C06C(a16);
  _Unwind_Resume(a1);
}

void sub_224149878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_22319BB48((void **)va);
  _Unwind_Resume(a1);
}

void sub_2241498B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);
  sub_223FDA050((uint64_t *)(v10 - 104));
  sub_22375C06C(a9);
  sub_22319BB48((void **)va);
  _Unwind_Resume(a1);
}

void sub_2241498D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_22375C06C(a9);
  sub_22319BB48((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2241498F4(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (a2 == 1)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    v2 = 0x100000000;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0x100000000;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 56) = 0x100000000;
    *(_DWORD *)(result + 64) = 0;
    *(_QWORD *)(result + 72) = 0;
    *(_QWORD *)(result + 80) = 0;
    *(_QWORD *)(result + 88) = 0;
    *(_QWORD *)(result + 96) = 0x100000000;
    *(_DWORD *)(result + 104) = 0;
    *(_QWORD *)(result + 112) = 0;
    *(_QWORD *)(result + 120) = 0;
    *(_QWORD *)(result + 128) = 0;
    *(_QWORD *)(result + 136) = 0x100000000;
    *(_QWORD *)(result + 144) = 0;
    *(_QWORD *)(result + 152) = 0;
    *(_QWORD *)(result + 160) = 0;
    *(_QWORD *)(result + 168) = 0x100000000;
    *(_QWORD *)(result + 176) = 0;
    *(_QWORD *)(result + 184) = 0;
    *(_QWORD *)(result + 192) = 0;
    *(_QWORD *)(result + 200) = 0x100000000;
    *(_QWORD *)(result + 208) = 0;
    *(_QWORD *)(result + 216) = 0;
    *(_QWORD *)(result + 224) = 0;
    *(_QWORD *)(result + 232) = 0x100000000;
    *(_QWORD *)(result + 240) = 0;
    *(_QWORD *)(result + 248) = 0;
    *(_QWORD *)(result + 256) = 0;
    *(_QWORD *)(result + 264) = 0x100000000;
    *(_DWORD *)(result + 272) = 0;
    *(_QWORD *)(result + 280) = 0;
    *(_QWORD *)(result + 288) = 0;
    *(_QWORD *)(result + 296) = 0;
    *(_QWORD *)(result + 304) = 0x100000000;
  }
  else
  {
    if (a2 == 2)
    {
      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Mesh/include/Kit/Mesh/TriMeshAllocator.h", 151, (uint64_t)&unk_2245B123B, 0, (uint64_t)"Invalid mode", 12, (void (*)(void **))sub_22457406C);
      abort();
    }
    v2 = 0;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_DWORD *)(result + 64) = 0;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_DWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 112) = 0u;
    *(_OWORD *)(result + 128) = 0u;
    *(_OWORD *)(result + 144) = 0u;
    *(_OWORD *)(result + 160) = 0u;
    *(_OWORD *)(result + 176) = 0u;
    *(_OWORD *)(result + 192) = 0u;
    *(_OWORD *)(result + 208) = 0u;
    *(_OWORD *)(result + 224) = 0u;
    *(_OWORD *)(result + 240) = 0u;
    *(_OWORD *)(result + 256) = 0u;
    *(_DWORD *)(result + 272) = 0;
  }
  *(_DWORD *)(result + 312) = 0;
  *(_QWORD *)(result + 320) = 0;
  *(_QWORD *)(result + 328) = 0;
  *(_QWORD *)(result + 336) = 0;
  *(_QWORD *)(result + 344) = v2;
  *(_DWORD *)(result + 352) = 0;
  *(_BYTE *)(result + 356) = 0;
  *(_BYTE *)(result + 380) = 0;
  return result;
}

_QWORD *sub_224149A08(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  void *p_p;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  void ***v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void ***v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  void *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  void *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  void *v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  void *v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  void ***v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  void *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  void ***v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  float *v63;
  float *v64;
  float *v65;
  void *v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  void ***v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  void *v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v78;
  void *v79;
  uint64_t v80;
  unsigned __int8 v81;
  void *v82;
  uint64_t v83;
  unsigned __int8 v84;
  int v85;
  void *v86[2];
  char v87;
  void *__p;
  uint64_t v89;
  uint64_t *v90;
  int v91;
  uint64_t v92;
  void ***v93;
  void **v94;
  const char *v95;
  void **v96;
  const char *v97;
  const char *v98;

  v3 = a1;
  sub_2231813E8(a1, (uint64_t)"TriMeshData{\n", 13);
  v4 = sub_2231813E8(v3, (uint64_t)"vertices={", 10);
  LODWORD(v97) = 0;
  sub_22414B07C((uint64_t)&v94, (uint64_t **)a2);
  if ((_DWORD)v97 == -1)
    sub_22316DD70();
  v82 = v86;
  ((void (*)(void **__return_ptr, void **, void ***))off_24EC6C230[v97])(&__p, &v82, &v94);
  if ((_DWORD)v97 != -1)
    ((void (*)(void **, void ***))off_24EC6C218[v97])(&v82, &v94);
  if (SHIBYTE(v90) >= 0)
    p_p = &__p;
  else
    p_p = __p;
  if (SHIBYTE(v90) >= 0)
    v6 = HIBYTE(v90);
  else
    v6 = v89;
  v7 = sub_2231813E8(v4, (uint64_t)p_p, v6);
  sub_2231813E8(v7, (uint64_t)"}\n", 2);
  if (SHIBYTE(v90) < 0)
    operator delete(__p);
  v8 = sub_2231813E8(v3, (uint64_t)"faces={", 7);
  LODWORD(v97) = 0;
  sub_22414B330((uint64_t)&v94, (uint64_t **)(a2 + 112));
  if ((_DWORD)v97 == -1)
    sub_22316DD70();
  v82 = v86;
  ((void (*)(void **__return_ptr, void **, void ***))off_24EC6C230[v97])(&__p, &v82, &v94);
  if ((_DWORD)v97 != -1)
    ((void (*)(void **, void ***))off_24EC6C218[v97])(&v82, &v94);
  if (SHIBYTE(v90) >= 0)
    v9 = &__p;
  else
    v9 = __p;
  if (SHIBYTE(v90) >= 0)
    v10 = HIBYTE(v90);
  else
    v10 = v89;
  v11 = sub_2231813E8(v8, (uint64_t)v9, v10);
  sub_2231813E8(v11, (uint64_t)"}\n", 2);
  if (SHIBYTE(v90) < 0)
    operator delete(__p);
  v12 = sub_2231813E8(v3, (uint64_t)"normals={", 9);
  LODWORD(v97) = 0;
  sub_22414B07C((uint64_t)&v94, (uint64_t **)(a2 + 72));
  if ((_DWORD)v97 == -1)
    sub_22316DD70();
  v82 = v86;
  ((void (*)(void **__return_ptr, void **, void ***))off_24EC6C230[v97])(&__p, &v82, &v94);
  if ((_DWORD)v97 != -1)
    ((void (*)(void **, void ***))off_24EC6C218[v97])(&v82, &v94);
  if (SHIBYTE(v90) >= 0)
    v13 = &__p;
  else
    v13 = __p;
  if (SHIBYTE(v90) >= 0)
    v14 = HIBYTE(v90);
  else
    v14 = v89;
  v15 = sub_2231813E8(v12, (uint64_t)v13, v14);
  sub_2231813E8(v15, (uint64_t)"}\n", 2);
  if (SHIBYTE(v90) < 0)
    operator delete(__p);
  v16 = sub_2231813E8(v3, (uint64_t)"normals_type=", 13);
  sub_22414ACD8((uint64_t)&v94, (_DWORD *)(a2 + 104));
  if (SHIBYTE(v96) >= 0)
    v17 = &v94;
  else
    v17 = (void ***)v94;
  if (SHIBYTE(v96) >= 0)
    v18 = HIBYTE(v96);
  else
    v18 = (uint64_t)v95;
  v19 = sub_2231813E8(v16, (uint64_t)v17, v18);
  sub_2231813E8(v19, (uint64_t)"\n", 1);
  if (SHIBYTE(v96) < 0)
    operator delete(v94);
  v20 = sub_2231813E8(v3, (uint64_t)"colors={", 8);
  LODWORD(v97) = 0;
  sub_22414B07C((uint64_t)&v94, (uint64_t **)(a2 + 32));
  if ((_DWORD)v97 == -1)
    sub_22316DD70();
  v82 = v86;
  ((void (*)(void **__return_ptr, void **, void ***))off_24EC6C230[v97])(&__p, &v82, &v94);
  if ((_DWORD)v97 != -1)
    ((void (*)(void **, void ***))off_24EC6C218[v97])(&v82, &v94);
  if (SHIBYTE(v90) >= 0)
    v21 = &__p;
  else
    v21 = __p;
  if (SHIBYTE(v90) >= 0)
    v22 = HIBYTE(v90);
  else
    v22 = v89;
  v23 = sub_2231813E8(v20, (uint64_t)v21, v22);
  sub_2231813E8(v23, (uint64_t)"}\n", 2);
  if (SHIBYTE(v90) < 0)
    operator delete(__p);
  v24 = sub_2231813E8(v3, (uint64_t)"colors_type=", 12);
  sub_22414ACD8((uint64_t)&v94, (_DWORD *)(a2 + 64));
  if (SHIBYTE(v96) >= 0)
    v25 = &v94;
  else
    v25 = (void ***)v94;
  if (SHIBYTE(v96) >= 0)
    v26 = HIBYTE(v96);
  else
    v26 = (uint64_t)v95;
  v27 = sub_2231813E8(v24, (uint64_t)v25, v26);
  sub_2231813E8(v27, (uint64_t)"\n", 1);
  if (SHIBYTE(v96) < 0)
    operator delete(v94);
  v28 = sub_2231813E8(v3, (uint64_t)"edges={", 7);
  v85 = 0;
  v78 = v3;
  if ((uint64_t)(*(_QWORD *)(a2 + 152) - *(_QWORD *)(a2 + 144)) <= 7)
  {
    sub_2231AF0BC(&v82, "{}");
    goto LABEL_76;
  }
  sub_2231ABA1C(&v82, "{");
  v29 = *(uint64_t **)(a2 + 144);
  v92 = *v29;
  __p = (void *)0x100000002;
  LODWORD(v89) = 2;
  v90 = &v92;
  v91 = 0;
  sub_224505A88((unsigned int *)&__p, v86);
  v94 = &v82;
  v95 = (const char *)v86;
  v96 = &v82;
  v97 = (const char *)v86;
  v98 = (const char *)v86;
  if (v85 == -1)
    sub_22316DD70();
  v93 = &v94;
  ((void (*)(void ****, void **))off_24EC6C200[v85])(&v93, &v82);
  if (v87 < 0)
  {
    operator delete(v86[0]);
    v30 = *(uint64_t **)(a2 + 152);
    v31 = v29 + 1;
    if (v29 + 1 != v30)
    {
LABEL_70:
      while (1)
      {
        v94 = &v82;
        v95 = ",";
        v96 = &v82;
        v97 = ",";
        v98 = ",";
        if (v85 == -1)
          break;
        __p = &v94;
        ((void (*)(void **, void **))off_24EC6C260[v85])(&__p, &v82);
        v92 = *v31;
        __p = (void *)0x100000002;
        LODWORD(v89) = 2;
        v90 = &v92;
        v91 = 0;
        sub_224505A88((unsigned int *)&__p, v86);
        v94 = &v82;
        v95 = (const char *)v86;
        v96 = &v82;
        v97 = (const char *)v86;
        v98 = (const char *)v86;
        if (v85 == -1)
          sub_22316DD70();
        v93 = &v94;
        ((void (*)(void ****, void **))off_24EC6C200[v85])(&v93, &v82);
        if (v87 < 0)
          operator delete(v86[0]);
        if (++v31 == v30)
          goto LABEL_74;
      }
LABEL_204:
      sub_22316DD70();
    }
  }
  else
  {
    v30 = *(uint64_t **)(a2 + 152);
    v31 = v29 + 1;
    if (v29 + 1 != v30)
      goto LABEL_70;
  }
LABEL_74:
  v94 = &v82;
  v95 = "}";
  v96 = &v82;
  v97 = "}";
  v98 = "}";
  if (v85 == -1)
    goto LABEL_204;
  __p = &v94;
  ((void (*)(void **, void **))off_24EC6C260[v85])(&__p, &v82);
  v3 = v78;
LABEL_76:
  if (v85 == -1)
    sub_22316DD70();
  v94 = &__p;
  ((void (*)(void **__return_ptr, void ***, void **))off_24EC6C230[v85])(&v79, &v94, &v82);
  if (v85 != -1)
    ((void (*)(void ***, void **))off_24EC6C218[v85])(&v94, &v82);
  if ((v81 & 0x80u) == 0)
    v32 = &v79;
  else
    v32 = v79;
  if ((v81 & 0x80u) == 0)
    v33 = v81;
  else
    v33 = v80;
  v34 = sub_2231813E8(v28, (uint64_t)v32, v33);
  sub_2231813E8(v34, (uint64_t)"}\n", 2);
  if ((char)v81 < 0)
    operator delete(v79);
  v35 = sub_2231813E8(v3, (uint64_t)"tex_coords={", 12);
  v85 = 0;
  if ((uint64_t)(*(_QWORD *)(a2 + 184) - *(_QWORD *)(a2 + 176)) <= 7)
  {
    sub_2231AF0BC(&v82, "{}");
    goto LABEL_102;
  }
  sub_2231ABA1C(&v82, "{");
  v36 = *(uint64_t **)(a2 + 176);
  v92 = *v36;
  __p = (void *)0x100000002;
  LODWORD(v89) = 2;
  v90 = &v92;
  v91 = 0;
  sub_224505D70((unsigned int *)&__p, v86);
  v94 = &v82;
  v95 = (const char *)v86;
  v96 = &v82;
  v97 = (const char *)v86;
  v98 = (const char *)v86;
  if (v85 == -1)
    sub_22316DD70();
  v93 = &v94;
  ((void (*)(void ****, void **))off_24EC6C200[v85])(&v93, &v82);
  if (v87 < 0)
  {
    operator delete(v86[0]);
    v37 = *(uint64_t **)(a2 + 184);
    v38 = v36 + 1;
    if (v36 + 1 != v37)
    {
LABEL_96:
      while (1)
      {
        v94 = &v82;
        v95 = ",";
        v96 = &v82;
        v97 = ",";
        v98 = ",";
        if (v85 == -1)
          break;
        __p = &v94;
        ((void (*)(void **, void **))off_24EC6C260[v85])(&__p, &v82);
        v92 = *v38;
        __p = (void *)0x100000002;
        LODWORD(v89) = 2;
        v90 = &v92;
        v91 = 0;
        sub_224505D70((unsigned int *)&__p, v86);
        v94 = &v82;
        v95 = (const char *)v86;
        v96 = &v82;
        v97 = (const char *)v86;
        v98 = (const char *)v86;
        if (v85 == -1)
          sub_22316DD70();
        v93 = &v94;
        ((void (*)(void ****, void **))off_24EC6C200[v85])(&v93, &v82);
        if (v87 < 0)
          operator delete(v86[0]);
        if (++v38 == v37)
          goto LABEL_100;
      }
LABEL_205:
      sub_22316DD70();
    }
  }
  else
  {
    v37 = *(uint64_t **)(a2 + 184);
    v38 = v36 + 1;
    if (v36 + 1 != v37)
      goto LABEL_96;
  }
LABEL_100:
  v94 = &v82;
  v95 = "}";
  v96 = &v82;
  v97 = "}";
  v98 = "}";
  if (v85 == -1)
    goto LABEL_205;
  __p = &v94;
  ((void (*)(void **, void **))off_24EC6C260[v85])(&__p, &v82);
  v3 = v78;
LABEL_102:
  if (v85 == -1)
    sub_22316DD70();
  v94 = &__p;
  ((void (*)(void **__return_ptr, void ***, void **))off_24EC6C230[v85])(&v79, &v94, &v82);
  if (v85 != -1)
    ((void (*)(void ***, void **))off_24EC6C218[v85])(&v94, &v82);
  if ((v81 & 0x80u) == 0)
    v39 = &v79;
  else
    v39 = v79;
  if ((v81 & 0x80u) == 0)
    v40 = v81;
  else
    v40 = v80;
  v41 = sub_2231813E8(v35, (uint64_t)v39, v40);
  sub_2231813E8(v41, (uint64_t)"}\n", 2);
  if ((char)v81 < 0)
    operator delete(v79);
  v42 = sub_2231813E8(v3, (uint64_t)"tex_faces={", 11);
  LODWORD(v97) = 0;
  sub_22414B330((uint64_t)&v94, (uint64_t **)(a2 + 208));
  if ((_DWORD)v97 == -1)
    sub_22316DD70();
  v82 = v86;
  ((void (*)(void **__return_ptr, void **, void ***))off_24EC6C230[v97])(&__p, &v82, &v94);
  if ((_DWORD)v97 != -1)
    ((void (*)(void **, void ***))off_24EC6C218[v97])(&v82, &v94);
  if (SHIBYTE(v90) >= 0)
    v43 = &__p;
  else
    v43 = __p;
  if (SHIBYTE(v90) >= 0)
    v44 = HIBYTE(v90);
  else
    v44 = v89;
  v45 = sub_2231813E8(v42, (uint64_t)v43, v44);
  sub_2231813E8(v45, (uint64_t)"}\n", 2);
  if (SHIBYTE(v90) < 0)
    operator delete(__p);
  v46 = sub_2231813E8(v3, (uint64_t)"semantics={", 11);
  LODWORD(v97) = 0;
  sub_22414B5E4((uint64_t)&v94, (unsigned __int8 **)(a2 + 240));
  if ((_DWORD)v97 == -1)
    sub_22316DD70();
  v82 = v86;
  ((void (*)(void **__return_ptr, void **, void ***))off_24EC6C230[v97])(&__p, &v82, &v94);
  if ((_DWORD)v97 != -1)
    ((void (*)(void **, void ***))off_24EC6C218[v97])(&v82, &v94);
  if (SHIBYTE(v90) >= 0)
    v47 = &__p;
  else
    v47 = __p;
  if (SHIBYTE(v90) >= 0)
    v48 = HIBYTE(v90);
  else
    v48 = v89;
  v49 = sub_2231813E8(v46, (uint64_t)v47, v48);
  sub_2231813E8(v49, (uint64_t)"}\n", 2);
  if (SHIBYTE(v90) < 0)
    operator delete(__p);
  v50 = sub_2231813E8(v3, (uint64_t)"semantics_type=", 15);
  sub_22414ACD8((uint64_t)&v94, (_DWORD *)(a2 + 272));
  if (SHIBYTE(v96) >= 0)
    v51 = &v94;
  else
    v51 = (void ***)v94;
  if (SHIBYTE(v96) >= 0)
    v52 = HIBYTE(v96);
  else
    v52 = (uint64_t)v95;
  v53 = sub_2231813E8(v50, (uint64_t)v51, v52);
  sub_2231813E8(v53, (uint64_t)"\n", 1);
  if (SHIBYTE(v96) < 0)
    operator delete(v94);
  v54 = sub_2231813E8(v3, (uint64_t)"materials={", 11);
  LODWORD(v97) = 0;
  sub_22414B5E4((uint64_t)&v94, (unsigned __int8 **)(a2 + 280));
  if ((_DWORD)v97 == -1)
    sub_22316DD70();
  v82 = v86;
  ((void (*)(void **__return_ptr, void **, void ***))off_24EC6C230[v97])(&__p, &v82, &v94);
  if ((_DWORD)v97 != -1)
    ((void (*)(void **, void ***))off_24EC6C218[v97])(&v82, &v94);
  if (SHIBYTE(v90) >= 0)
    v55 = &__p;
  else
    v55 = __p;
  if (SHIBYTE(v90) >= 0)
    v56 = HIBYTE(v90);
  else
    v56 = v89;
  v57 = sub_2231813E8(v54, (uint64_t)v55, v56);
  sub_2231813E8(v57, (uint64_t)"}\n", 2);
  if (SHIBYTE(v90) < 0)
    operator delete(__p);
  v58 = sub_2231813E8(v3, (uint64_t)"materials_type=", 15);
  sub_22414ACD8((uint64_t)&v94, (_DWORD *)(a2 + 312));
  if (SHIBYTE(v96) >= 0)
    v59 = &v94;
  else
    v59 = (void ***)v94;
  if (SHIBYTE(v96) >= 0)
    v60 = HIBYTE(v96);
  else
    v60 = (uint64_t)v95;
  v61 = sub_2231813E8(v58, (uint64_t)v59, v60);
  sub_2231813E8(v61, (uint64_t)"\n", 1);
  if (SHIBYTE(v96) < 0)
    operator delete(v94);
  v62 = sub_2231813E8(v3, (uint64_t)"confidences={", 13);
  v91 = 0;
  if ((uint64_t)(*(_QWORD *)(a2 + 328) - *(_QWORD *)(a2 + 320)) <= 3)
  {
    sub_2231AF0BC(&__p, "{}");
    goto LABEL_169;
  }
  sub_2231ABA1C(&__p, "{");
  v63 = *(float **)(a2 + 320);
  sub_223208764((uint64_t)&v94, (uint64_t)&__p, v63);
  v64 = *(float **)(a2 + 328);
  v65 = v63 + 1;
  if (v65 != v64)
  {
    while (1)
    {
      v94 = &__p;
      v95 = ",";
      v96 = &__p;
      v97 = ",";
      v98 = ",";
      if (v91 == -1)
        break;
      v86[0] = &v94;
      ((void (*)(void **, void **))off_24EC6C260[v91])(v86, &__p);
      sub_223208764((uint64_t)&v94, (uint64_t)&__p, v65++);
      if (v65 == v64)
        goto LABEL_167;
    }
LABEL_206:
    sub_22316DD70();
  }
LABEL_167:
  v94 = &__p;
  v95 = "}";
  v96 = &__p;
  v97 = "}";
  v98 = "}";
  if (v91 == -1)
    goto LABEL_206;
  v86[0] = &v94;
  ((void (*)(void **, void **))off_24EC6C260[v91])(v86, &__p);
LABEL_169:
  if (v91 == -1)
    sub_22316DD70();
  v94 = v86;
  ((void (*)(void **__return_ptr, void ***, void **))off_24EC6C230[v91])(&v82, &v94, &__p);
  if (v91 != -1)
    ((void (*)(void ***, void **))off_24EC6C218[v91])(&v94, &__p);
  if ((v84 & 0x80u) == 0)
    v66 = &v82;
  else
    v66 = v82;
  if ((v84 & 0x80u) == 0)
    v67 = v84;
  else
    v67 = v83;
  v68 = sub_2231813E8(v62, (uint64_t)v66, v67);
  sub_2231813E8(v68, (uint64_t)"}\n", 2);
  if ((char)v84 < 0)
    operator delete(v82);
  v69 = sub_2231813E8(v3, (uint64_t)"confidences_type=", 17);
  sub_22414ACD8((uint64_t)&v94, (_DWORD *)(a2 + 352));
  if (SHIBYTE(v96) >= 0)
    v70 = &v94;
  else
    v70 = (void ***)v94;
  if (SHIBYTE(v96) >= 0)
    v71 = HIBYTE(v96);
  else
    v71 = (uint64_t)v95;
  v72 = sub_2231813E8(v69, (uint64_t)v70, v71);
  sub_2231813E8(v72, (uint64_t)"\n", 1);
  if (SHIBYTE(v96) < 0)
    operator delete(v94);
  v73 = sub_2231813E8(v3, (uint64_t)"bbox={", 6);
  v91 = 0;
  if (*(_BYTE *)(a2 + 380))
  {
    sub_2231ABA1C(&__p, "{");
    LOBYTE(v94) = 1;
    v95 = (const char *)&__p;
    v96 = &v79;
    sub_22414B830((uint64_t)&v94, (uint64_t *)(a2 + 356));
    sub_22414B830((uint64_t)&v94, (uint64_t *)(a2 + 368));
    v94 = &__p;
    v95 = "}";
    v96 = &__p;
    v97 = "}";
    v98 = "}";
    if (v91 == -1)
      sub_22316DD70();
    v86[0] = &v94;
    ((void (*)(void **, void **))off_24EC6C260[v91])(v86, &__p);
  }
  else
  {
    sub_2231A0D14(&__p, "nullopt");
  }
  if (v91 == -1)
    sub_22316DD70();
  v94 = v86;
  ((void (*)(void **__return_ptr, void ***, void **))off_24EC6C230[v91])(&v82, &v94, &__p);
  if (v91 != -1)
    ((void (*)(void ***, void **))off_24EC6C218[v91])(&v94, &__p);
  if ((v84 & 0x80u) == 0)
    v74 = &v82;
  else
    v74 = v82;
  if ((v84 & 0x80u) == 0)
    v75 = v84;
  else
    v75 = v83;
  v76 = sub_2231813E8(v73, (uint64_t)v74, v75);
  sub_2231813E8(v76, (uint64_t)"}\n", 2);
  if ((char)v84 < 0)
    operator delete(v82);
  LOBYTE(v94) = 125;
  sub_2231813E8(v3, (uint64_t)&v94, 1);
  return v3;
}

void sub_22414AA74(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22319B964(v1 - 144);
  _Unwind_Resume(a1);
}

void sub_22414AA88(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22319B964(v1 - 144);
  _Unwind_Resume(a1);
}

void sub_22414AA9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22319B964(v1 - 144);
  _Unwind_Resume(a1);
}

void sub_22414AAB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a31 < 0)
  {
    operator delete(__p);
    sub_22319B964((uint64_t)&a19);
    _Unwind_Resume(a1);
  }
  sub_22319B964((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_22414ACD8(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  _BYTE v19[24];
  int v20;
  void *__dst[2];
  unint64_t v22;
  _QWORD v23[5];
  _QWORD *v24;

  v20 = 0;
  v3 = operator new();
  *(_QWORD *)(v3 + 272) = 0;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)v3 = 0u;
  sub_223195210(v3);
  v23[0] = v3;
  v4 = "unknown";
  v5 = 7;
  switch(*a2)
  {
    case 0:
      goto LABEL_4;
    case 1:
      v4 = "per-vertex";
      v5 = 10;
      goto LABEL_4;
    case 2:
      v4 = "per-face";
      v5 = 8;
LABEL_4:
      sub_2231813E8((_QWORD *)(v3 + 16), (uint64_t)v4, v5);
      break;
    case 3:
      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Mesh/src/TriMesh.cpp", 46, (uint64_t)&unk_2245B123B, 0, (uint64_t)"Unsupported type", 16, (void (*)(void **))sub_22457406C);
      abort();
    default:
      break;
  }
  v6 = *(_DWORD *)(v3 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v3 + 112);
    v10 = *(_QWORD *)(v3 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v3 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v3 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_30;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v22) = 0;
      v8 = __dst;
      goto LABEL_18;
    }
    v11 = *(const void **)(v3 + 40);
    v7 = *(_QWORD *)(v3 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_30:
      sub_22316DBC0();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v22 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_17;
  }
  HIBYTE(v22) = v7;
  v8 = __dst;
  if (v7)
LABEL_17:
    memmove(v8, v11, v7);
LABEL_18:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v23[0];
  if (v23[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v23[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v14 + 128);
    MEMORY[0x227684CE8](v14, 0x10B2C40EED050F3);
  }
  v23[0] = v19;
  v23[1] = __dst;
  v23[2] = v19;
  v23[3] = __dst;
  v23[4] = __dst;
  if (v20 == -1)
    sub_22316DD70();
  v24 = v23;
  ((void (*)(_QWORD **, _BYTE *, uint64_t))off_24EC6C200[v20])(&v24, v19, v5);
  if (SHIBYTE(v22) < 0)
    operator delete(__dst[0]);
  if (v20 == -1)
    sub_22316DD70();
  v23[0] = __dst;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC6C230[v20])(v23, v19);
  if (v20 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC6C218[v20])(v23, v19);
  return result;
}

void sub_22414AFF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x227684CE8](v2, 0x10B2C40EED050F3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22414B024(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22414B03C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_22319B964((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  sub_22319B964((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_22414B07C(uint64_t a1, uint64_t **a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v17;
  uint64_t v18;
  int v19;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  const char *v28;
  uint64_t *v29;

  if ((char *)a2[1] - (char *)*a2 <= 11)
  {
    v24 = a1;
    v25 = "{}";
    v26 = a1;
    v27 = "{}";
    v28 = "{}";
    v3 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v3 != -1)
    {
      v18 = (uint64_t)&v24;
      return ((uint64_t (*)(uint64_t *, uint64_t))off_24EC6C248[v3])(&v18, a1);
    }
LABEL_18:
    sub_22316DD70();
  }
  v24 = a1;
  v25 = "{";
  v26 = a1;
  v27 = "{";
  v28 = "{";
  v5 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_18;
  v18 = (uint64_t)&v24;
  ((void (*)(uint64_t *, uint64_t))off_24EC6C260[v5])(&v18, a1);
  v7 = *a2;
  v8 = **a2;
  v23 = *((_DWORD *)*a2 + 2);
  v22 = v8;
  v18 = 0x100000003;
  v19 = 3;
  v20 = &v22;
  v21 = 0;
  sub_224505D70((unsigned int *)&v18, __p);
  v24 = a1;
  v25 = (const char *)__p;
  v26 = a1;
  v27 = (const char *)__p;
  v28 = (const char *)__p;
  v9 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v9 == -1)
    sub_22316DD70();
  v29 = &v24;
  ((void (*)(uint64_t **, uint64_t))off_24EC6C200[v9])(&v29, a1);
  if (v17 < 0)
  {
    operator delete(__p[0]);
    v10 = a2[1];
    v11 = (uint64_t *)((char *)v7 + 12);
    if (v11 != v10)
    {
LABEL_12:
      do
      {
        v24 = a1;
        v25 = ",";
        v26 = a1;
        v27 = ",";
        v28 = ",";
        v12 = *(unsigned int *)(a1 + 24);
        if ((_DWORD)v12 == -1)
          goto LABEL_18;
        v18 = (uint64_t)&v24;
        ((void (*)(uint64_t *, uint64_t))off_24EC6C260[v12])(&v18, a1);
        v13 = *v11;
        v23 = *((_DWORD *)v11 + 2);
        v22 = v13;
        v18 = 0x100000003;
        v19 = 3;
        v20 = &v22;
        v21 = 0;
        sub_224505D70((unsigned int *)&v18, __p);
        v24 = a1;
        v25 = (const char *)__p;
        v26 = a1;
        v27 = (const char *)__p;
        v28 = (const char *)__p;
        v14 = *(unsigned int *)(a1 + 24);
        if ((_DWORD)v14 == -1)
          sub_22316DD70();
        v29 = &v24;
        ((void (*)(uint64_t **, uint64_t))off_24EC6C200[v14])(&v29, a1);
        if (v17 < 0)
          operator delete(__p[0]);
        v11 = (uint64_t *)((char *)v11 + 12);
      }
      while (v11 != v10);
    }
  }
  else
  {
    v10 = a2[1];
    v11 = (uint64_t *)((char *)v7 + 12);
    if (v11 != v10)
      goto LABEL_12;
  }
  v24 = a1;
  v25 = "}";
  v26 = a1;
  v27 = "}";
  v28 = "}";
  v15 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v15 == -1)
    goto LABEL_18;
  v18 = (uint64_t)&v24;
  return ((uint64_t (*)(uint64_t *, uint64_t))off_24EC6C260[v15])(&v18, a1);
}

void sub_22414B30C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_22414B330(uint64_t a1, uint64_t **a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v17;
  uint64_t v18;
  int v19;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  const char *v28;
  uint64_t *v29;

  if ((char *)a2[1] - (char *)*a2 <= 11)
  {
    v24 = a1;
    v25 = "{}";
    v26 = a1;
    v27 = "{}";
    v28 = "{}";
    v3 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v3 != -1)
    {
      v18 = (uint64_t)&v24;
      return ((uint64_t (*)(uint64_t *, uint64_t))off_24EC6C248[v3])(&v18, a1);
    }
LABEL_18:
    sub_22316DD70();
  }
  v24 = a1;
  v25 = "{";
  v26 = a1;
  v27 = "{";
  v28 = "{";
  v5 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_18;
  v18 = (uint64_t)&v24;
  ((void (*)(uint64_t *, uint64_t))off_24EC6C260[v5])(&v18, a1);
  v7 = *a2;
  v8 = **a2;
  v23 = *((_DWORD *)*a2 + 2);
  v22 = v8;
  v18 = 0x100000003;
  v19 = 3;
  v20 = &v22;
  v21 = 0;
  sub_224505A88((unsigned int *)&v18, __p);
  v24 = a1;
  v25 = (const char *)__p;
  v26 = a1;
  v27 = (const char *)__p;
  v28 = (const char *)__p;
  v9 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v9 == -1)
    sub_22316DD70();
  v29 = &v24;
  ((void (*)(uint64_t **, uint64_t))off_24EC6C200[v9])(&v29, a1);
  if (v17 < 0)
  {
    operator delete(__p[0]);
    v10 = a2[1];
    v11 = (uint64_t *)((char *)v7 + 12);
    if (v11 != v10)
    {
LABEL_12:
      do
      {
        v24 = a1;
        v25 = ",";
        v26 = a1;
        v27 = ",";
        v28 = ",";
        v12 = *(unsigned int *)(a1 + 24);
        if ((_DWORD)v12 == -1)
          goto LABEL_18;
        v18 = (uint64_t)&v24;
        ((void (*)(uint64_t *, uint64_t))off_24EC6C260[v12])(&v18, a1);
        v13 = *v11;
        v23 = *((_DWORD *)v11 + 2);
        v22 = v13;
        v18 = 0x100000003;
        v19 = 3;
        v20 = &v22;
        v21 = 0;
        sub_224505A88((unsigned int *)&v18, __p);
        v24 = a1;
        v25 = (const char *)__p;
        v26 = a1;
        v27 = (const char *)__p;
        v28 = (const char *)__p;
        v14 = *(unsigned int *)(a1 + 24);
        if ((_DWORD)v14 == -1)
          sub_22316DD70();
        v29 = &v24;
        ((void (*)(uint64_t **, uint64_t))off_24EC6C200[v14])(&v29, a1);
        if (v17 < 0)
          operator delete(__p[0]);
        v11 = (uint64_t *)((char *)v11 + 12);
      }
      while (v11 != v10);
    }
  }
  else
  {
    v10 = a2[1];
    v11 = (uint64_t *)((char *)v7 + 12);
    if (v11 != v10)
      goto LABEL_12;
  }
  v24 = a1;
  v25 = "}";
  v26 = a1;
  v27 = "}";
  v28 = "}";
  v15 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v15 == -1)
    goto LABEL_18;
  v18 = (uint64_t)&v24;
  return ((uint64_t (*)(uint64_t *, uint64_t))off_24EC6C260[v15])(&v18, a1);
}

void sub_22414B5C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_22414B5E4(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::string v14;
  uint64_t v15;
  std::string *v16;
  uint64_t v17;
  std::string *v18;
  std::string *v19;
  uint64_t *v20;

  if (a2[1] - *a2 <= 0)
  {
    v15 = a1;
    v16 = (std::string *)"{}";
    v17 = a1;
    v18 = (std::string *)"{}";
    v19 = (std::string *)"{}";
    v9 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v9 != -1)
    {
      v14.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
      return ((uint64_t (*)(std::string *, uint64_t))off_24EC6C248[v9])(&v14, a1);
    }
    goto LABEL_19;
  }
  v15 = a1;
  v16 = (std::string *)"{";
  v17 = a1;
  v18 = (std::string *)"{";
  v19 = (std::string *)"{";
  v3 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_19;
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
  ((void (*)(std::string *, uint64_t))off_24EC6C260[v3])(&v14, a1);
  v5 = (uint64_t)*a2;
  std::to_string(&v14, **a2);
  v15 = a1;
  v16 = &v14;
  v17 = a1;
  v18 = &v14;
  v19 = &v14;
  v6 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v6 == -1)
    sub_22316DD70();
  v20 = &v15;
  ((void (*)(uint64_t **, uint64_t))off_24EC6C200[v6])(&v20, a1);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    v7 = a2[1];
    v8 = (unsigned __int8 *)(v5 + 1);
    if (v8 == v7)
      goto LABEL_16;
LABEL_12:
    while (1)
    {
      v15 = a1;
      v16 = (std::string *)",";
      v17 = a1;
      v18 = (std::string *)",";
      v19 = (std::string *)",";
      v11 = *(unsigned int *)(a1 + 24);
      if ((_DWORD)v11 == -1)
        break;
      v14.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
      ((void (*)(std::string *, uint64_t))off_24EC6C260[v11])(&v14, a1);
      std::to_string(&v14, *v8);
      v15 = a1;
      v16 = &v14;
      v17 = a1;
      v18 = &v14;
      v19 = &v14;
      v12 = *(unsigned int *)(a1 + 24);
      if ((_DWORD)v12 == -1)
        sub_22316DD70();
      v20 = &v15;
      ((void (*)(uint64_t **, uint64_t))off_24EC6C200[v12])(&v20, a1);
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v14.__r_.__value_.__l.__data_);
      if (++v8 == v7)
        goto LABEL_16;
    }
LABEL_19:
    sub_22316DD70();
  }
  v7 = a2[1];
  v8 = (unsigned __int8 *)(v5 + 1);
  if (v8 != v7)
    goto LABEL_12;
LABEL_16:
  v15 = a1;
  v16 = (std::string *)"}";
  v17 = a1;
  v18 = (std::string *)"}";
  v19 = (std::string *)"}";
  v13 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v13 == -1)
    goto LABEL_19;
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
  return ((uint64_t (*)(std::string *, uint64_t))off_24EC6C260[v13])(&v14, a1);
}

void sub_22414B80C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22414B830(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *__p[2];
  char v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  void **v18;
  void **v19;
  uint64_t *v20;

  if (!*(_BYTE *)a1)
  {
    v15 = *(_QWORD *)(a1 + 8);
    v16 = (void **)",";
    v17 = v15;
    v18 = (void **)",";
    v19 = (void **)",";
    v4 = *(unsigned int *)(v15 + 24);
    if ((_DWORD)v4 == -1)
      sub_22316DD70();
    v9 = (uint64_t)&v15;
    ((void (*)(uint64_t *))off_24EC6C260[v4])(&v9);
  }
  *(_BYTE *)a1 = 0;
  v5 = *(_QWORD *)(a1 + 8);
  v13 = *a2;
  v14 = *((_DWORD *)a2 + 2);
  v9 = 0x100000003;
  v10 = 3;
  v11 = &v13;
  v12 = 0;
  sub_224505D70((unsigned int *)&v9, __p);
  v15 = v5;
  v16 = __p;
  v17 = v5;
  v18 = __p;
  v19 = __p;
  v6 = *(unsigned int *)(v5 + 24);
  if ((_DWORD)v6 == -1)
    sub_22316DD70();
  v20 = &v15;
  ((void (*)(uint64_t **, uint64_t))off_24EC6C200[v6])(&v20, v5);
  if (v8 < 0)
    operator delete(__p[0]);
}

void sub_22414B94C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

const char *sub_22414B96C()
{
  return "Mesh IO";
}

double sub_22414B978@<D0>(int a1@<W1>, uint64_t a2@<X8>)
{
  double result;
  char *v4;
  char *v5;

  switch(a1)
  {
    case 0:
      *(_BYTE *)(a2 + 23) = 8;
      strcpy((char *)a2, "no error");
      break;
    case 1:
      *(_BYTE *)(a2 + 23) = 21;
      result = *(double *)"failed to open stream";
      strcpy((char *)a2, "failed to open stream");
      break;
    case 2:
      *(_BYTE *)(a2 + 23) = 14;
      strcpy((char *)a2, "index overflow");
      break;
    case 3:
      *(_BYTE *)(a2 + 23) = 18;
      result = *(double *)"unsupported format";
      strcpy((char *)a2, "unsupported format");
      break;
    case 4:
      v4 = (char *)operator new(0x20uLL);
      *(_QWORD *)a2 = v4;
      *(_OWORD *)(a2 + 8) = xmmword_2245B8D70;
      strcpy(v4, "failed to read from stream");
      result = *(double *)"read from stream";
      break;
    case 5:
      v5 = (char *)operator new(0x20uLL);
      *(_QWORD *)a2 = v5;
      *(_OWORD *)(a2 + 8) = xmmword_2245B8D00;
      strcpy(v5, "failed to write to stream");
      result = *(double *)" write to stream";
      break;
    default:
      *(_BYTE *)(a2 + 23) = 18;
      result = *(double *)"unknown error code";
      strcpy((char *)a2, "unknown error code");
      break;
  }
  return result;
}

void sub_22414BB18(uint64_t a1, unsigned int a2, __int128 *a3)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  unsigned __int8 v9;
  uint64_t v10;
  int v11;
  void *v12;
  int v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  char v20;
  char v21;
  void *v22;
  char v23;
  void *v24;
  char v25;
  char v26;
  char v27;
  void *__p;
  __int128 v29;
  unsigned __int8 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  unsigned __int8 v36;
  char v37;
  _QWORD v38[2];
  _QWORD v39[2];
  _QWORD v40[4];

  v40[2] = *MEMORY[0x24BDAC8D0];
  sub_22319FFBC(__dst, a3);
  v9 = atomic_load((unsigned __int8 *)&qword_255794BE8);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_255794BE8))
  {
    __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_2540CA610, &dword_22314D000);
    __cxa_guard_release(&qword_255794BE8);
  }
  sub_22319FFBC(&__p, (__int128 *)__dst);
  v10 = a2;
  if (!v37)
  {
    *(_QWORD *)a1 = a2;
    *(_QWORD *)(a1 + 8) = &off_2540CA610;
    *(_BYTE *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 112) = 0;
    goto LABEL_19;
  }
  v11 = v30;
  if (v30)
  {
    v12 = __p;
    v40[0] = v29;
    *(_QWORD *)((char *)v40 + 7) = *(_QWORD *)((char *)&v29 + 7);
    LOBYTE(a2) = HIBYTE(v29);
    v29 = 0uLL;
    __p = 0;
    v13 = v36;
    if (v36)
      goto LABEL_5;
  }
  else
  {
    v12 = 0;
    v13 = v36;
    if (v36)
    {
LABEL_5:
      v14 = v31;
      v39[0] = v32;
      *(_QWORD *)((char *)v39 + 7) = *(_QWORD *)((char *)&v32 + 7);
      v6 = HIBYTE(v32);
      v31 = 0;
      v32 = 0uLL;
      v5 = v33;
      v3 = v34;
      v38[0] = v35;
      *(_QWORD *)((char *)v38 + 7) = *(_QWORD *)((char *)&v35 + 7);
      v4 = HIBYTE(v35);
      v34 = 0;
      v35 = 0uLL;
      if (!v30)
        goto LABEL_12;
      goto LABEL_10;
    }
  }
  v14 = 0;
  if (!v30)
    goto LABEL_12;
LABEL_10:
  if (SHIBYTE(v29) < 0)
  {
    v18 = v10;
    operator delete(__p);
    *(_QWORD *)a1 = v18;
    *(_QWORD *)(a1 + 8) = &off_2540CA610;
    *(_BYTE *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 112) = 0;
    v15 = (_BYTE *)(a1 + 112);
    *(_BYTE *)(a1 + 40) = 0;
LABEL_13:
    v16 = v40[0];
    *(_QWORD *)(a1 + 16) = v12;
    *(_QWORD *)(a1 + 24) = v16;
    *(_QWORD *)(a1 + 31) = *(_QWORD *)((char *)v40 + 7);
    *(_BYTE *)(a1 + 39) = a2;
    v40[0] = 0;
    *(_QWORD *)((char *)v40 + 7) = 0;
    *(_BYTE *)(a1 + 40) = 1;
    LOBYTE(a2) = 0;
    v12 = 0;
    goto LABEL_14;
  }
LABEL_12:
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = &off_2540CA610;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  v15 = (_BYTE *)(a1 + 112);
  *(_BYTE *)(a1 + 40) = 0;
  if (v11)
    goto LABEL_13;
LABEL_14:
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  if (v13)
  {
    v17 = v39[0];
    *(_QWORD *)(a1 + 48) = v14;
    *(_QWORD *)(a1 + 56) = v17;
    *(_QWORD *)(a1 + 63) = *(_QWORD *)((char *)v39 + 7);
    *(_BYTE *)(a1 + 71) = v6;
    v39[0] = 0;
    *(_QWORD *)((char *)v39 + 7) = 0;
    *(_QWORD *)(a1 + 72) = v5;
    *(_QWORD *)(a1 + 80) = v3;
    *(_QWORD *)(a1 + 88) = v38[0];
    *(_QWORD *)(a1 + 95) = *(_QWORD *)((char *)v38 + 7);
    *(_BYTE *)(a1 + 103) = v4;
    v38[0] = 0;
    *(_QWORD *)((char *)v38 + 7) = 0;
    *(_BYTE *)(a1 + 104) = 1;
  }
  *v15 = 1;
  if (v11 && (a2 & 0x80) != 0)
    operator delete(v12);
LABEL_19:
  if (!v27)
    return;
  if (v26)
  {
    if ((v25 & 0x80000000) == 0)
    {
      if ((v23 & 0x80000000) == 0)
        goto LABEL_23;
LABEL_28:
      operator delete(v22);
      if (!v21)
        return;
      goto LABEL_24;
    }
    operator delete(v24);
    if (v23 < 0)
      goto LABEL_28;
  }
LABEL_23:
  if (!v21)
    return;
LABEL_24:
  if (v20 < 0)
    operator delete(__dst[0]);
}

void sub_22414BDE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319FD28((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22414BE00(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v5;
  int v6;
  uint64_t v7;
  __int128 v8;
  char v9;
  char v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  char v15;
  char v16;
  __int128 v17;
  __int128 __p;
  uint64_t v19;
  unsigned __int8 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  char v27;

  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    v5 = sub_22414BFC0((std::string *)a1, a2, a3);
    if (v5)
      goto LABEL_3;
LABEL_14:
    *(_BYTE *)(a4 + 120) = 1;
    return;
  }
  v5 = sub_22414BFC0(*(std::string **)a1, a2, a3);
  if (!v5)
    goto LABEL_14;
LABEL_3:
  LOBYTE(v8) = 0;
  v16 = 0;
  sub_22414BB18((uint64_t)&v17, v5, &v8);
  *(_OWORD *)a4 = v17;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (!v27)
  {
    *(_BYTE *)(a4 + 120) = 0;
    if (!v16)
      return;
LABEL_16:
    if (!v15)
      goto LABEL_19;
    if (v14 < 0)
    {
      operator delete(v13);
      if ((v12 & 0x80000000) == 0)
      {
LABEL_19:
        if (!v10)
          return;
        goto LABEL_20;
      }
    }
    else if ((v12 & 0x80000000) == 0)
    {
      goto LABEL_19;
    }
    operator delete(v11);
    if (!v10)
      return;
LABEL_20:
    if (v9 < 0)
      operator delete((void *)v8);
    return;
  }
  *(_BYTE *)(a4 + 40) = 0;
  v6 = v20;
  if (v20)
  {
    *(_OWORD *)(a4 + 16) = __p;
    *(_QWORD *)(a4 + 32) = v19;
    v19 = 0;
    __p = 0uLL;
    *(_BYTE *)(a4 + 40) = 1;
  }
  *(_BYTE *)(a4 + 48) = 0;
  *(_BYTE *)(a4 + 104) = 0;
  if (v26)
  {
    *(_OWORD *)(a4 + 48) = v21;
    v7 = v23;
    *(_QWORD *)(a4 + 64) = v22;
    *(_QWORD *)(a4 + 72) = v7;
    *(_OWORD *)(a4 + 80) = v24;
    *(_QWORD *)(a4 + 96) = v25;
    *(_BYTE *)(a4 + 104) = 1;
  }
  *(_BYTE *)(a4 + 112) = 1;
  *(_BYTE *)(a4 + 120) = 0;
  if (v6 && SHIBYTE(v19) < 0)
    operator delete((void *)__p);
  if (v16)
    goto LABEL_16;
}

void sub_22414BFAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319FD28((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_22414BFC0(std::string *__src, uint64_t *a2, uint64_t a3)
{
  std::string *v6;
  int v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  std::string::size_type v28;
  std::string *p_p;
  unint64_t v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  std::string *v34;
  std::string::size_type size;
  uint64_t v36;
  uint64_t i;
  _QWORD *v38;
  _QWORD *v39;
  std::string::size_type v40;
  std::string *v41;
  unint64_t v42;
  const void *v43;
  uint64_t v44;
  uint64_t v45;
  std::string *v46;
  std::string::size_type v47;
  uint64_t v48;
  uint64_t j;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  std::string::size_type v53;
  std::string *v54;
  unint64_t v55;
  const void *v56;
  uint64_t v57;
  uint64_t v58;
  std::string *v59;
  std::string::size_type v60;
  uint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  std::string::size_type v71;
  std::string *v72;
  unint64_t v73;
  const void *v74;
  uint64_t v75;
  uint64_t v76;
  std::string *v77;
  std::string::size_type v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  std::__shared_weak_count *v92;
  std::string __p;
  uint64_t v94;
  __int128 v95;
  _QWORD v96[2];
  const void *v97;
  uint64_t v98;
  const void *v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  int v105;
  uint64_t v106;

  if (!__src
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Mesh/src/TriMeshIO.cpp", 242, (uint64_t)"filepath", 8, (uint64_t)&unk_2245B13D2, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  memset(&__p, 0, sizeof(__p));
  v6 = (std::string *)((char *)__src - 1);
  do
  {
    v7 = v6->__r_.__value_.__s.__data_[1];
    v6 = (std::string *)((char *)v6 + 1);
  }
  while (v7);
  sub_2231816F0(&__p, __src, v6);
  sub_2242B0918((const std::__fs::filesystem::path *)&__p, 0x30u, a3, &v94);
  v8 = v95;
  v95 = 0uLL;
  v92 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v90 = v8;
    operator delete(__p.__r_.__value_.__l.__data_);
    v9 = v90;
    if (!v90)
      goto LABEL_147;
  }
  else
  {
    v9 = v8;
    if (!(_QWORD)v8)
    {
LABEL_147:
      v81 = 1;
      v82 = v92;
      if (!v92)
        return v81;
      goto LABEL_148;
    }
  }
  v91 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  if (*((_DWORD *)a2 + 26) >= 2u
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Mesh/src/TriMeshIO.cpp", 168, (uint64_t)"(mesh.normals_type == TriMeshMetadataType::PerVertex || mesh.normals_type == TriMeshMetadataType::Unknown)", 106, (uint64_t)"obj export requires per-vertex normals", 38, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_145;
  }
  if (*((_DWORD *)a2 + 16) >= 2u
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Mesh/src/TriMeshIO.cpp", 171, (uint64_t)"(mesh.colors_type == TriMeshMetadataType::PerVertex || mesh.colors_type == TriMeshMetadataType::Unknown)", 104, (uint64_t)"obj export requires per-vertex colors", 37, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_145;
  }
  v10 = a2[5] - a2[4];
  if (v10)
  {
    if (v10 != a2[1] - *a2
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Mesh/src/TriMeshIO.cpp", 173, (uint64_t)"(mesh.colors.size() == 0 || mesh.colors.size() == mesh.vertices.size())", 71, (uint64_t)"mesh's #colors must be either zero or equal to #vertices", 56, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_145;
    }
  }
  if (a2[22] == a2[23])
  {
    if (a2[26] == a2[27]
      || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Mesh/src/TriMeshIO.cpp", 179, (uint64_t)"(mesh.tex_faces.empty())", 24, (uint64_t)"for meshes without texture coords, mesh's #tex_faces must be zero", 65, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_22;
    }
LABEL_145:
    abort();
  }
  if (a2[27] - a2[26] != a2[15] - a2[14]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Mesh/src/TriMeshIO.cpp", 176, (uint64_t)"(mesh.tex_faces.size() == mesh.faces.size())", 44, (uint64_t)"for meshes with texture coords, mesh's #tex_faces must be equal to #faces", 73, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_145;
  }
LABEL_22:
  v88 = a2[26];
  v89 = a2[27];
  v86 = a2[14];
  v87 = a2[15];
  v12 = *a2;
  v11 = a2[1];
  v14 = a2[4];
  v13 = a2[5];
  sub_223195210((uint64_t)&v94);
  *(_QWORD *)((char *)&v96[1] + *(_QWORD *)(*((_QWORD *)&v95 + 1) - 24)) = 8;
  if (v11 - v12 == v13 - v14)
  {
    if (a2[1] != *a2)
    {
      v15 = 0;
      v16 = 0;
      do
      {
        sub_2231813E8((_QWORD *)&v95 + 1, (uint64_t)"v ", 2);
        v17 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v17, (uint64_t)" ", 1);
        v18 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v18, (uint64_t)" ", 1);
        v19 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v19, (uint64_t)" ", 1);
        v20 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v20, (uint64_t)" ", 1);
        v21 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v21, (uint64_t)" ", 1);
        v22 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v22, (uint64_t)"\n", 1);
        ++v16;
        v15 += 12;
      }
      while (v16 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2));
    }
  }
  else
  {
    v23 = *a2;
    v24 = a2[1];
    if (*a2 != v24)
    {
      do
      {
        sub_2231813E8((_QWORD *)&v95 + 1, (uint64_t)"v ", 2);
        v25 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v25, (uint64_t)" ", 1);
        v26 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v26, (uint64_t)" ", 1);
        v27 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v27, (uint64_t)"\n", 1);
        v23 += 12;
      }
      while (v23 != v24);
    }
  }
  if ((v105 & 0x10) != 0)
  {
    v30 = v104;
    if (v104 < v100)
    {
      v104 = v100;
      v30 = v100;
    }
    v31 = v99;
    v28 = v30 - (_QWORD)v99;
    if (v30 - (unint64_t)v99 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_138;
  }
  else
  {
    if ((v105 & 8) == 0)
    {
      v28 = 0;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      p_p = &__p;
      goto LABEL_42;
    }
    v31 = v97;
    v28 = v98 - (_QWORD)v97;
    if ((unint64_t)(v98 - (_QWORD)v97) > 0x7FFFFFFFFFFFFFF7)
LABEL_138:
      sub_22316DBC0();
  }
  if (v28 >= 0x17)
  {
    v32 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17)
      v32 = v28 | 7;
    v33 = v32 + 1;
    p_p = (std::string *)operator new(v32 + 1);
    __p.__r_.__value_.__l.__size_ = v28;
    __p.__r_.__value_.__r.__words[2] = v33 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    goto LABEL_41;
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v28;
  p_p = &__p;
  if (v28)
LABEL_41:
    memmove(p_p, v31, v28);
LABEL_42:
  p_p->__r_.__value_.__s.__data_[v28] = 0;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v34 = &__p;
  else
    v34 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  sub_2231813E8(v91, (uint64_t)v34, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v103) & 0x80000000) == 0)
      goto LABEL_50;
  }
  else if ((SHIBYTE(v103) & 0x80000000) == 0)
  {
    goto LABEL_50;
  }
  operator delete(v101);
LABEL_50:
  v101 = 0;
  v102 = 0;
  v103 = 0;
  sub_2231B5488((uint64_t)v96);
  *(_QWORD *)((char *)&v96[1] + *(_QWORD *)(*((_QWORD *)&v95 + 1) - 24)) = 8;
  v36 = a2[22];
  for (i = a2[23]; v36 != i; v36 += 8)
  {
    sub_2231813E8((_QWORD *)&v95 + 1, (uint64_t)"vt ", 3);
    v38 = (_QWORD *)std::ostream::operator<<();
    sub_2231813E8(v38, (uint64_t)" ", 1);
    v39 = (_QWORD *)std::ostream::operator<<();
    sub_2231813E8(v39, (uint64_t)"\n", 1);
  }
  if ((v105 & 0x10) != 0)
  {
    v42 = v104;
    if (v104 < v100)
    {
      v104 = v100;
      v42 = v100;
    }
    v43 = v99;
    v40 = v42 - (_QWORD)v99;
    if (v42 - (unint64_t)v99 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_140;
  }
  else
  {
    if ((v105 & 8) == 0)
    {
      v40 = 0;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      v41 = &__p;
      goto LABEL_67;
    }
    v43 = v97;
    v40 = v98 - (_QWORD)v97;
    if ((unint64_t)(v98 - (_QWORD)v97) > 0x7FFFFFFFFFFFFFF7)
LABEL_140:
      sub_22316DBC0();
  }
  if (v40 >= 0x17)
  {
    v44 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v40 | 7) != 0x17)
      v44 = v40 | 7;
    v45 = v44 + 1;
    v41 = (std::string *)operator new(v44 + 1);
    __p.__r_.__value_.__l.__size_ = v40;
    __p.__r_.__value_.__r.__words[2] = v45 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
    goto LABEL_66;
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v40;
  v41 = &__p;
  if (v40)
LABEL_66:
    memmove(v41, v43, v40);
LABEL_67:
  v41->__r_.__value_.__s.__data_[v40] = 0;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v46 = &__p;
  else
    v46 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v47 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v47 = __p.__r_.__value_.__l.__size_;
  sub_2231813E8(v91, (uint64_t)v46, v47);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v103) & 0x80000000) == 0)
      goto LABEL_75;
  }
  else if ((SHIBYTE(v103) & 0x80000000) == 0)
  {
    goto LABEL_75;
  }
  operator delete(v101);
LABEL_75:
  v101 = 0;
  v102 = 0;
  v103 = 0;
  sub_2231B5488((uint64_t)v96);
  *(_QWORD *)((char *)&v96[1] + *(_QWORD *)(*((_QWORD *)&v95 + 1) - 24)) = 8;
  v48 = a2[9];
  for (j = a2[10]; v48 != j; v48 += 12)
  {
    sub_2231813E8((_QWORD *)&v95 + 1, (uint64_t)"vn ", 3);
    v50 = (_QWORD *)std::ostream::operator<<();
    sub_2231813E8(v50, (uint64_t)" ", 1);
    v51 = (_QWORD *)std::ostream::operator<<();
    sub_2231813E8(v51, (uint64_t)" ", 1);
    v52 = (_QWORD *)std::ostream::operator<<();
    sub_2231813E8(v52, (uint64_t)"\n", 1);
  }
  if ((v105 & 0x10) != 0)
  {
    v55 = v104;
    if (v104 < v100)
    {
      v104 = v100;
      v55 = v100;
    }
    v56 = v99;
    v53 = v55 - (_QWORD)v99;
    if (v55 - (unint64_t)v99 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_142;
  }
  else
  {
    if ((v105 & 8) == 0)
    {
      v53 = 0;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      v54 = &__p;
      goto LABEL_92;
    }
    v56 = v97;
    v53 = v98 - (_QWORD)v97;
    if ((unint64_t)(v98 - (_QWORD)v97) > 0x7FFFFFFFFFFFFFF7)
LABEL_142:
      sub_22316DBC0();
  }
  if (v53 >= 0x17)
  {
    v57 = (v53 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v53 | 7) != 0x17)
      v57 = v53 | 7;
    v58 = v57 + 1;
    v54 = (std::string *)operator new(v57 + 1);
    __p.__r_.__value_.__l.__size_ = v53;
    __p.__r_.__value_.__r.__words[2] = v58 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
    goto LABEL_91;
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v53;
  v54 = &__p;
  if (v53)
LABEL_91:
    memmove(v54, v56, v53);
LABEL_92:
  v54->__r_.__value_.__s.__data_[v53] = 0;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v59 = &__p;
  else
    v59 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v60 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v60 = __p.__r_.__value_.__l.__size_;
  sub_2231813E8(v91, (uint64_t)v59, v60);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v103) & 0x80000000) == 0)
      goto LABEL_100;
  }
  else if ((SHIBYTE(v103) & 0x80000000) == 0)
  {
    goto LABEL_100;
  }
  operator delete(v101);
LABEL_100:
  v101 = 0;
  v102 = 0;
  v103 = 0;
  sub_2231B5488((uint64_t)v96);
  *(_QWORD *)((char *)&v96[1] + *(_QWORD *)(*((_QWORD *)&v95 + 1) - 24)) = 8;
  if (a2[15] != a2[14])
  {
    if (v89 - v88 == v87 - v86)
    {
      v61 = 0;
      v62 = 0;
      do
      {
        sub_2231813E8((_QWORD *)&v95 + 1, (uint64_t)"f", 1);
        sub_2231813E8((_QWORD *)&v95 + 1, (uint64_t)" ", 1);
        v63 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v63, (uint64_t)"/", 1);
        v64 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v64, (uint64_t)"/", 1);
        std::ostream::operator<<();
        sub_2231813E8((_QWORD *)&v95 + 1, (uint64_t)" ", 1);
        v65 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v65, (uint64_t)"/", 1);
        v66 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v66, (uint64_t)"/", 1);
        std::ostream::operator<<();
        sub_2231813E8((_QWORD *)&v95 + 1, (uint64_t)" ", 1);
        v67 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v67, (uint64_t)"/", 1);
        v68 = (_QWORD *)std::ostream::operator<<();
        sub_2231813E8(v68, (uint64_t)"/", 1);
        std::ostream::operator<<();
        sub_2231813E8((_QWORD *)&v95 + 1, (uint64_t)"\n", 1);
        ++v62;
        v61 += 12;
      }
      while (v62 < 0xAAAAAAAAAAAAAAABLL * ((a2[15] - a2[14]) >> 2));
    }
    else
    {
      v69 = 0;
      v70 = 0;
      do
      {
        sub_2231813E8((_QWORD *)&v95 + 1, (uint64_t)"f", 1);
        sub_2231813E8((_QWORD *)&v95 + 1, (uint64_t)" ", 1);
        std::ostream::operator<<();
        sub_2231813E8((_QWORD *)&v95 + 1, (uint64_t)" ", 1);
        std::ostream::operator<<();
        sub_2231813E8((_QWORD *)&v95 + 1, (uint64_t)" ", 1);
        std::ostream::operator<<();
        sub_2231813E8((_QWORD *)&v95 + 1, (uint64_t)"\n", 1);
        ++v70;
        v69 += 12;
      }
      while (v70 < 0xAAAAAAAAAAAAAAABLL * ((a2[15] - a2[14]) >> 2));
    }
  }
  if ((v105 & 0x10) != 0)
  {
    v73 = v104;
    if (v104 < v100)
    {
      v104 = v100;
      v73 = v100;
    }
    v74 = v99;
    v71 = v73 - (_QWORD)v99;
    if (v73 - (unint64_t)v99 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_144;
  }
  else
  {
    if ((v105 & 8) == 0)
    {
      v71 = 0;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      v72 = &__p;
      goto LABEL_122;
    }
    v74 = v97;
    v71 = v98 - (_QWORD)v97;
    if ((unint64_t)(v98 - (_QWORD)v97) > 0x7FFFFFFFFFFFFFF7)
LABEL_144:
      sub_22316DBC0();
  }
  if (v71 >= 0x17)
  {
    v75 = (v71 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v71 | 7) != 0x17)
      v75 = v71 | 7;
    v76 = v75 + 1;
    v72 = (std::string *)operator new(v75 + 1);
    __p.__r_.__value_.__l.__size_ = v71;
    __p.__r_.__value_.__r.__words[2] = v76 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
    goto LABEL_121;
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v71;
  v72 = &__p;
  if (v71)
LABEL_121:
    memmove(v72, v74, v71);
LABEL_122:
  v72->__r_.__value_.__s.__data_[v71] = 0;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v77 = &__p;
  else
    v77 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v78 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v78 = __p.__r_.__value_.__l.__size_;
  sub_2231813E8(v91, (uint64_t)v77, v78);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v79 = *(_DWORD *)((char *)v91 + *(_QWORD *)(*v91 - 24) + 32);
  v94 = *MEMORY[0x24BEDB7F0];
  v80 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(uint64_t *)((char *)&v94 + *(_QWORD *)(v94 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  *((_QWORD *)&v95 + 1) = v80;
  v96[0] = MEMORY[0x24BEDB848] + 16;
  if (SHIBYTE(v103) < 0)
    operator delete(v101);
  if ((v79 & 5) != 0)
    v81 = 5;
  else
    v81 = 0;
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x227684BE0](&v106);
  v82 = v92;
  if (v92)
  {
LABEL_148:
    p_shared_owners = (unint64_t *)&v82->__shared_owners_;
    do
      v84 = __ldaxr(p_shared_owners);
    while (__stlxr(v84 - 1, p_shared_owners));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  return v81;
}

void sub_22414CDAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_2242BB4F8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22414CDD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  sub_223195348((uint64_t)va1);
  sub_2242BB4F8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22414CE10(std::error_category *a1)
{
  std::error_category::~error_category(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22414CE34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD v16[3];
  uint64_t v17[2];

  v17[1] = *MEMORY[0x24BDAC8D0];
  v3 = sub_2241498F4(a2, a1);
  __asm { FMOV            V0.4S, #-1.0 }
  v10 = _Q0;
  v11 = xmmword_22469B680;
  v12 = xmmword_22469B690;
  v13 = xmmword_22469B6A0;
  v14 = xmmword_22469B6B0;
  v15 = xmmword_22469B6B0;
  sub_224005B7C(v3, (uint64_t *)&v10, (uint64_t *)v16, 8uLL);
  v10 = xmmword_2246499B0;
  v11 = xmmword_22469B6C0;
  v12 = xmmword_22469B6D0;
  v13 = xmmword_22469B6E0;
  v14 = xmmword_22469B6F0;
  v15 = xmmword_22469B700;
  v16[0] = xmmword_22469B710;
  v16[1] = xmmword_22469B720;
  v16[2] = xmmword_22469B730;
  return sub_223744B60(a2 + 112, (uint64_t *)&v10, v17, 0xCuLL);
}

void sub_22414CF44(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_22414CF58(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_22414CF6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t result;
  float32x4_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  float32x4_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  __int32 v21;

  sub_22414CE34(a1, a2);
  v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  HIDWORD(v19) = 0;
  v17 = 0;
  v18 = 0;
  v16 = 0;
  result = sub_22339E3C8((uint64_t)&v16, v3);
  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)a2 == v7)
  {
    v13 = v16;
    v8 = v17;
    v12 = v18;
    v11 = v19;
    if (!v6)
      goto LABEL_11;
    goto LABEL_9;
  }
  v8 = v17;
  do
  {
    while (1)
    {
      v5.i64[0] = *(_QWORD *)v6;
      v5.i32[2] = *(_DWORD *)(v6 + 8);
      v10.i64[0] = 0x3F0000003F000000;
      v10.i64[1] = 0x3F0000003F000000;
      v5 = vaddq_f32(vmulq_f32(v5, v10), v10);
      v21 = v5.i32[2];
      v20 = (unint64_t *)v5.i64[0];
      if (v8 >= v18)
        break;
      v9 = (uint64_t)v20;
      *(_DWORD *)(v8 + 8) = v21;
      *(_QWORD *)v8 = v9;
      v8 += 12;
      v17 = v8;
      v6 += 12;
      if (v6 == v7)
        goto LABEL_6;
    }
    result = sub_2233B2838(&v16, (uint64_t *)&v20);
    v8 = result;
    v17 = result;
    v6 += 12;
  }
  while (v6 != v7);
LABEL_6:
  v6 = *(_QWORD *)a2;
  v12 = v18;
  v11 = v19;
  v13 = v16;
  if (*(_QWORD *)a2)
  {
LABEL_9:
    *(_QWORD *)(a2 + 8) = v6;
    v14 = -1431655765 * ((*(_QWORD *)(a2 + 16) - v6) >> 2);
    v16 = v6;
    LODWORD(v17) = v14;
    v15 = *(unsigned int *)(a2 + 28);
    if ((_DWORD)v15 == -1)
      sub_22316DD70();
    v20 = &v16;
    result = ((uint64_t (*)(unint64_t **, uint64_t))off_24EC6C2D8[v15])(&v20, a2 + 24);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
LABEL_11:
  *(_QWORD *)a2 = v13;
  *(_QWORD *)(a2 + 8) = v8;
  *(_QWORD *)(a2 + 16) = v12;
  *(_QWORD *)(a2 + 24) = v11;
  return result;
}

void sub_22414D0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;

  sub_22317EEA4(&a9);
  sub_22316F8F4(v9);
  _Unwind_Resume(a1);
}

void sub_22414D104(unsigned int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>, float a5@<S0>, float a6@<S1>)
{
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  __float2 v25;
  uint64_t v26;
  float32x4_t v27;
  _DWORD *v28;
  _DWORD *v29;

  sub_2241498F4((uint64_t)a4, a3);
  if (a6 > 0.0 && a1 >= 3)
  {
    v11 = a1 + 2;
    v12 = *a4;
    v13 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 2);
    if (v11 <= v13)
    {
      if (v11 < v13)
        a4[1] = v12 + 12 * v11;
    }
    else
    {
      sub_22317EF30((uint64_t)a4, v11 - v13);
      v12 = *a4;
    }
    *(_QWORD *)v12 = 0;
    *(float *)(v12 + 8) = a5;
    v14 = *a4;
    *(_QWORD *)(v14 + 12) = 0;
    *(_DWORD *)(v14 + 20) = 0;
    v15 = a4[14];
    v16 = 2 * a1;
    v17 = 0xAAAAAAAAAAAAAAABLL * ((a4[15] - v15) >> 2);
    if (v16 <= v17)
    {
      if (v16 < v17)
        a4[15] = v15 + 12 * v16;
    }
    else
    {
      sub_22317F10C((uint64_t)(a4 + 14), v16 - v17);
    }
    if (*(_BYTE *)(a2 + 12))
    {
      v18 = a4[4];
      v19 = 0xAAAAAAAAAAAAAAABLL * ((a4[5] - v18) >> 2);
      if (v11 <= v19)
      {
        if (v11 < v19)
          a4[5] = v18 + 12 * v11;
      }
      else
      {
        sub_2235341F4((uint64_t)(a4 + 4), v11 - v19, (uint64_t *)a2);
      }
    }
    v20 = 0;
    v21 = 1;
    do
    {
      v22 = v20 + 1;
      v23 = v20 + 2;
      if (a1 - 1 == v20)
        v24 = 2;
      else
        v24 = v20 + 3;
      v25 = __sincosf_stret((float)(6.2832 / (float)a1) * (float)v20);
      v26 = *a4 + 12 * v23;
      v27 = vmulq_n_f32((float32x4_t)__PAIR64__(LODWORD(v25.__sinval), LODWORD(v25.__cosval)), a6);
      *(_DWORD *)(v26 + 8) = v27.i32[2];
      *(_QWORD *)v26 = v27.i64[0];
      v28 = (_DWORD *)(a4[14] + 12 * (v21 - 1));
      *v28 = 0;
      v28[1] = v23;
      v28[2] = v24;
      v29 = (_DWORD *)(a4[14] + 12 * v21);
      *v29 = 1;
      v29[1] = v24;
      v29[2] = v23;
      v21 += 2;
      v20 = v22;
    }
    while (a1 != v22);
  }
}

void sub_22414D30C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_22414D320(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  int64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _OWORD *v55;
  __int128 *v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  int v67;
  int v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  unint64_t v76;
  uint64_t v77;
  int64_t v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _OWORD *v85;
  __int128 *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  char *v99;
  int v100;
  int v101;
  _QWORD *v103;
  int v104;
  _QWORD **v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;

  v4 = (a2[1] - *a2) >> 2;
  HIDWORD(v109) = 0;
  v107 = 0;
  v108 = 0;
  v106 = 0;
  sub_22414E410((uint64_t)&v106, 0xAAAAAAAAAAAAAAABLL * v4);
  v5 = *a2;
  v6 = a2[1];
  if (*a2 == v6)
  {
    v7 = (unint64_t)v107;
  }
  else
  {
    v7 = (unint64_t)v107;
    do
    {
      v9 = *(_DWORD *)(v5 + 8);
      v103 = *(_QWORD **)v5;
      v104 = v9;
      if (v7 < (unint64_t)v108)
      {
        v8 = (uint64_t)v103;
        *(_DWORD *)(v7 + 8) = v104;
        *(_QWORD *)v7 = v8;
        v7 += 12;
      }
      else
      {
        v7 = sub_22414E570((unint64_t *)&v106, (uint64_t *)&v103);
      }
      v107 = (char *)v7;
      v5 += 12;
    }
    while (v5 != v6);
  }
  *(_QWORD *)a1 = v106;
  *(_QWORD *)(a1 + 8) = v7;
  v10 = v109;
  *(_QWORD *)(a1 + 16) = v108;
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 16);
  v11 = 0xAAAAAAAAAAAAAAABLL * ((a2[5] - a2[4]) >> 2);
  HIDWORD(v109) = 0;
  v107 = 0;
  v108 = 0;
  v106 = 0;
  sub_22414E410((uint64_t)&v106, v11);
  v12 = a2[4];
  v13 = a2[5];
  if (v12 == v13)
  {
    v14 = (unint64_t)v107;
  }
  else
  {
    v14 = (unint64_t)v107;
    do
    {
      v16 = *(_DWORD *)(v12 + 8);
      v103 = *(_QWORD **)v12;
      v104 = v16;
      if (v14 < (unint64_t)v108)
      {
        v15 = (uint64_t)v103;
        *(_DWORD *)(v14 + 8) = v104;
        *(_QWORD *)v14 = v15;
        v14 += 12;
      }
      else
      {
        v14 = sub_22414E570((unint64_t *)&v106, (uint64_t *)&v103);
      }
      v107 = (char *)v14;
      v12 += 12;
    }
    while (v12 != v13);
  }
  *(_QWORD *)(a1 + 40) = v106;
  *(_QWORD *)(a1 + 48) = v14;
  v17 = v109;
  *(_QWORD *)(a1 + 56) = v108;
  *(_QWORD *)(a1 + 64) = v17;
  *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 26);
  v18 = 0xAAAAAAAAAAAAAAABLL * ((a2[10] - a2[9]) >> 2);
  HIDWORD(v109) = 0;
  v107 = 0;
  v108 = 0;
  v106 = 0;
  sub_22414E410((uint64_t)&v106, v18);
  v19 = a2[9];
  v20 = a2[10];
  if (v19 == v20)
  {
    v21 = (unint64_t)v107;
  }
  else
  {
    v21 = (unint64_t)v107;
    do
    {
      v23 = *(_DWORD *)(v19 + 8);
      v103 = *(_QWORD **)v19;
      v104 = v23;
      if (v21 < (unint64_t)v108)
      {
        v22 = (uint64_t)v103;
        *(_DWORD *)(v21 + 8) = v104;
        *(_QWORD *)v21 = v22;
        v21 += 12;
      }
      else
      {
        v21 = sub_22414E570((unint64_t *)&v106, (uint64_t *)&v103);
      }
      v107 = (char *)v21;
      v19 += 12;
    }
    while (v19 != v20);
  }
  v25 = v108;
  v24 = v109;
  *(_QWORD *)(a1 + 80) = v106;
  *(_QWORD *)(a1 + 88) = v21;
  *(_QWORD *)(a1 + 96) = v25;
  *(_QWORD *)(a1 + 104) = v24;
  *(_DWORD *)(a1 + 112) = *((_DWORD *)a2 + 68);
  sub_223180F98((_QWORD *)(a1 + 120), (uint64_t)(a2 + 30));
  *(_DWORD *)(a1 + 152) = *((_DWORD *)a2 + 78);
  sub_223180F98((_QWORD *)(a1 + 160), (uint64_t)(a2 + 35));
  v26 = 0xAAAAAAAAAAAAAAABLL * ((a2[15] - a2[14]) >> 2);
  HIDWORD(v109) = 0;
  v107 = 0;
  v108 = 0;
  v106 = 0;
  sub_22414E6F8((uint64_t)&v106, v26);
  v27 = a2[14];
  v28 = a2[15];
  if (v27 == v28)
  {
    v29 = (unint64_t)v107;
  }
  else
  {
    v29 = (unint64_t)v107;
    do
    {
      v31 = *(_DWORD *)(v27 + 8);
      v103 = *(_QWORD **)v27;
      v104 = v31;
      if (v29 < (unint64_t)v108)
      {
        v30 = (uint64_t)v103;
        *(_DWORD *)(v29 + 8) = v104;
        *(_QWORD *)v29 = v30;
        v29 += 12;
      }
      else
      {
        v29 = sub_22414E858((unint64_t *)&v106, (uint64_t *)&v103);
      }
      v107 = (char *)v29;
      v27 += 12;
    }
    while (v27 != v28);
  }
  v33 = v108;
  v32 = v109;
  *(_QWORD *)(a1 + 192) = v106;
  *(_QWORD *)(a1 + 200) = v29;
  *(_QWORD *)(a1 + 208) = v33;
  *(_QWORD *)(a1 + 216) = v32;
  v35 = (char *)a2[18];
  v34 = (char *)a2[19];
  HIDWORD(v109) = 0;
  v107 = 0;
  v108 = 0;
  v106 = 0;
  v36 = v34 - v35;
  if (v34 != v35)
  {
    if ((v36 & 0x8000000000000000) != 0)
      sub_22316E078();
    v37 = (v36 >> 3);
    v38 = (char *)operator new(8 * v37);
    v106 = v38;
    v107 = v38;
    v108 = &v38[8 * v37];
    while (1)
    {
      v39 = *(_QWORD *)v35;
      if (v38 < v108)
      {
        *(_QWORD *)v38 = v39;
        v38 += 8;
      }
      else
      {
        v40 = (char *)(v38 - v106);
        v41 = (v38 - v106) >> 3;
        if ((unint64_t)(v41 + 1) >> 61)
          sub_22316E078();
        v42 = (v108 - v106) >> 2;
        if (v42 <= v41 + 1)
          v42 = v41 + 1;
        if ((unint64_t)(v108 - v106) >= 0x7FFFFFFFFFFFFFF8)
          v43 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v43 = v42;
        if (v43)
        {
          LODWORD(v105) = v43;
          if (HIDWORD(v109) == -1)
            sub_22316DD70();
          v103 = &v105;
          v44 = ((uint64_t (*)(_QWORD **, uint64_t *))off_24EC6C328[HIDWORD(v109)])(&v103, &v109);
          v46 = (char *)(v44 + 8 * v41);
          *(_QWORD *)v46 = v39;
          v38 = v46 + 8;
          v47 = (unint64_t)v106;
          v48 = (uint64_t)v107;
          v49 = v107 - v106;
          if (v107 != v106)
          {
LABEL_47:
            v51 = v49 - 8;
            if (v51 < 0x58)
              goto LABEL_110;
            if ((unint64_t)(v48 - v44 - (_QWORD)v40) < 0x20)
              goto LABEL_110;
            v52 = (v51 >> 3) + 1;
            v53 = 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
            v54 = v48 - v53;
            v46 -= v53;
            v55 = (_OWORD *)(v44 + 8 * v41 - 16);
            v56 = (__int128 *)(v48 - 16);
            v57 = v52 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v58 = *v56;
              *(v55 - 1) = *(v56 - 1);
              *v55 = v58;
              v55 -= 2;
              v56 -= 2;
              v57 -= 4;
            }
            while (v57);
            v48 = v54;
            if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_110:
              do
              {
                v59 = *(_QWORD *)(v48 - 8);
                v48 -= 8;
                *((_QWORD *)v46 - 1) = v59;
                v46 -= 8;
              }
              while (v48 != v47);
            }
            v48 = (uint64_t)v106;
            v106 = v46;
            v107 = v38;
            v50 = v108;
            v108 = (char *)(v44 + 8 * v45);
            if (!v48)
              goto LABEL_33;
LABEL_54:
            v103 = (_QWORD *)v48;
            v104 = (unint64_t)&v50[-v48] >> 3;
            if (HIDWORD(v109) == -1)
              sub_22316DD70();
            v105 = &v103;
            ((void (*)(_QWORD ***, uint64_t *))off_24EC6C338[HIDWORD(v109)])(&v105, &v109);
            goto LABEL_33;
          }
        }
        else
        {
          v44 = 0;
          v45 = 0;
          v46 = (char *)(8 * v41);
          *(_QWORD *)(8 * v41) = v39;
          v38 = (char *)(8 * v41 + 8);
          v47 = (unint64_t)v106;
          v48 = (uint64_t)v107;
          v49 = v107 - v106;
          if (v107 != v106)
            goto LABEL_47;
        }
        v106 = v46;
        v107 = v38;
        v50 = v108;
        v108 = (char *)(v44 + 8 * v45);
        if (v48)
          goto LABEL_54;
      }
LABEL_33:
      v107 = v38;
      v35 += 8;
      if (v35 == v34)
      {
        v60 = (unint64_t)v106;
        v36 = (unint64_t)v108;
        goto LABEL_58;
      }
    }
  }
  v60 = 0;
  v38 = 0;
LABEL_58:
  v61 = v109;
  *(_QWORD *)(a1 + 224) = v60;
  *(_QWORD *)(a1 + 232) = v38;
  *(_QWORD *)(a1 + 240) = v36;
  *(_QWORD *)(a1 + 248) = v61;
  v63 = (char *)a2[22];
  v62 = (char *)a2[23];
  HIDWORD(v109) = 0;
  v107 = 0;
  v108 = 0;
  v106 = 0;
  v64 = v62 - v63;
  if (v62 != v63)
  {
    if ((v64 & 0x8000000000000000) != 0)
      sub_22316E078();
    v65 = (v64 >> 3);
    v66 = (char *)operator new(8 * v65);
    v106 = v66;
    v107 = v66;
    v108 = &v66[8 * v65];
    while (1)
    {
      v68 = *(_DWORD *)v63;
      v67 = *((_DWORD *)v63 + 1);
      if (v66 < v108)
      {
        *(_DWORD *)v66 = v68;
        *((_DWORD *)v66 + 1) = v67;
        v66 += 8;
        goto LABEL_62;
      }
      v69 = (char *)(v66 - v106);
      v70 = (v66 - v106) >> 3;
      if ((unint64_t)(v70 + 1) >> 61)
        sub_22316E078();
      v71 = (v108 - v106) >> 2;
      if (v71 <= v70 + 1)
        v71 = v70 + 1;
      v72 = (unint64_t)(v108 - v106) >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v71;
      if (v72)
      {
        LODWORD(v105) = v72;
        if (HIDWORD(v109) == -1)
          sub_22316DD70();
        v103 = &v105;
        v73 = ((uint64_t (*)(_QWORD **, uint64_t *))off_24EC6C348[HIDWORD(v109)])(&v103, &v109);
        v75 = (char *)(v73 + 8 * v70);
        *(_DWORD *)v75 = v68;
        *((_DWORD *)v75 + 1) = v67;
        v76 = (unint64_t)v106;
        v77 = (uint64_t)v107;
        v78 = v107 - v106;
        if (v107 == v106)
        {
LABEL_76:
          v66 = v75 + 8;
          v106 = v75;
          v107 = v75 + 8;
          v81 = v108;
          v108 = (char *)(v73 + 8 * v74);
          if (v77)
            goto LABEL_84;
          goto LABEL_62;
        }
      }
      else
      {
        v73 = 0;
        v74 = 0;
        v75 = (char *)(8 * v70);
        *(_DWORD *)v75 = v68;
        *((_DWORD *)v75 + 1) = v67;
        v76 = (unint64_t)v106;
        v77 = (uint64_t)v107;
        v78 = v107 - v106;
        if (v107 == v106)
          goto LABEL_76;
      }
      v79 = v78 - 8;
      if ((unint64_t)(v78 - 8) < 0x58)
        break;
      v80 = (unint64_t)v75;
      if ((unint64_t)(v77 - v73 - (_QWORD)v69) < 0x20)
        goto LABEL_82;
      v82 = (v79 >> 3) + 1;
      v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
      v84 = v77 - v83;
      v80 = (unint64_t)&v75[-v83];
      v85 = (_OWORD *)(v73 + 8 * v70 - 16);
      v86 = (__int128 *)(v77 - 16);
      v87 = v82 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v88 = *v86;
        *(v85 - 1) = *(v86 - 1);
        *v85 = v88;
        v85 -= 2;
        v86 -= 2;
        v87 -= 4;
      }
      while (v87);
      v77 = v84;
      if (v82 != (v82 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_82;
LABEL_83:
      v77 = (uint64_t)v106;
      v66 = v75 + 8;
      v106 = (char *)v80;
      v107 = v75 + 8;
      v81 = v108;
      v108 = (char *)(v73 + 8 * v74);
      if (v77)
      {
LABEL_84:
        v103 = (_QWORD *)v77;
        v104 = (unint64_t)&v81[-v77] >> 3;
        if (HIDWORD(v109) == -1)
          sub_22316DD70();
        v105 = &v103;
        ((void (*)(_QWORD ***, uint64_t *))off_24EC6C358[HIDWORD(v109)])(&v105, &v109);
      }
LABEL_62:
      v107 = v66;
      v63 += 8;
      if (v63 == v62)
      {
        v90 = (unint64_t)v106;
        v64 = (unint64_t)v108;
        goto LABEL_88;
      }
    }
    v80 = (unint64_t)v75;
    do
    {
LABEL_82:
      v89 = *(_QWORD *)(v77 - 8);
      v77 -= 8;
      *(_QWORD *)(v80 - 8) = v89;
      v80 -= 8;
    }
    while (v77 != v76);
    goto LABEL_83;
  }
  v90 = 0;
  v66 = 0;
LABEL_88:
  v91 = v109;
  *(_QWORD *)(a1 + 256) = v90;
  *(_QWORD *)(a1 + 264) = v66;
  *(_QWORD *)(a1 + 272) = v64;
  *(_QWORD *)(a1 + 280) = v91;
  v92 = 0xAAAAAAAAAAAAAAABLL * ((a2[27] - a2[26]) >> 2);
  HIDWORD(v109) = 0;
  v107 = 0;
  v108 = 0;
  v106 = 0;
  sub_22414E6F8((uint64_t)&v106, v92);
  v93 = a2[26];
  v94 = a2[27];
  if (v93 == v94)
  {
    v95 = (unint64_t)v107;
  }
  else
  {
    v95 = (unint64_t)v107;
    do
    {
      v97 = *(_DWORD *)(v93 + 8);
      v103 = *(_QWORD **)v93;
      v104 = v97;
      if (v95 < (unint64_t)v108)
      {
        v96 = (uint64_t)v103;
        *(_DWORD *)(v95 + 8) = v104;
        *(_QWORD *)v95 = v96;
        v95 += 12;
      }
      else
      {
        v95 = sub_22414E858((unint64_t *)&v106, (uint64_t *)&v103);
      }
      v107 = (char *)v95;
      v93 += 12;
    }
    while (v93 != v94);
  }
  v99 = v108;
  v98 = v109;
  *(_QWORD *)(a1 + 288) = v106;
  *(_QWORD *)(a1 + 296) = v95;
  *(_QWORD *)(a1 + 304) = v99;
  *(_QWORD *)(a1 + 312) = v98;
  *(_BYTE *)(a1 + 320) = 0;
  *(_BYTE *)(a1 + 344) = 0;
  *(_DWORD *)(a1 + 348) = *((_DWORD *)a2 + 88);
  sub_223181104((_QWORD *)(a1 + 352), (uint64_t)(a2 + 40));
  if (*((_BYTE *)a2 + 380))
  {
    if (*(_BYTE *)(a1 + 344))
      *(_BYTE *)(a1 + 344) = 0;
    v100 = *((_DWORD *)a2 + 91);
    *(_QWORD *)(a1 + 320) = *(uint64_t *)((char *)a2 + 356);
    *(_DWORD *)(a1 + 328) = v100;
    v101 = *((_DWORD *)a2 + 94);
    *(_QWORD *)(a1 + 332) = a2[46];
    *(_DWORD *)(a1 + 340) = v101;
    *(_BYTE *)(a1 + 344) = 1;
  }
  return a1;
}

void sub_22414DBC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t *a11)
{
  uint64_t *v11;
  uint64_t *v12;

  sub_2232E7F80(v12);
  sub_2232E800C(v11 + 32);
  sub_2232E808C(v11 + 28);
  sub_2232E7F80(v11 + 24);
  sub_22317EC9C(a10);
  sub_22317EC9C(a11);
  sub_2232E810C(v11 + 10);
  sub_2232E810C(v11 + 5);
  sub_2232E810C(v11);
  _Unwind_Resume(a1);
}

void sub_22414DCC8(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  unint64_t v41;
  BOOL v42;
  size_t v43;
  _BYTE *v44;
  _BYTE *v45;
  uint64_t v46;
  unint64_t v47;
  BOOL v48;
  size_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  _OWORD *v93;
  __int128 *v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  int v119;
  _BYTE *v120;
  _BYTE *v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  BOOL v125;
  unint64_t v126;
  char *v127;
  int v128;
  char **v129;

  sub_2241498F4(a3, a2);
  v6 = *a1;
  v5 = a1[1];
  v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 2);
  v9 = *(_QWORD *)a3;
  v8 = *(_QWORD *)(a3 + 8);
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)a3) >> 2);
  if (v7 <= v10)
  {
    if (v7 < v10)
    {
      v8 = v9 + 4 * ((v5 - *a1) >> 2);
      *(_QWORD *)(a3 + 8) = v8;
    }
  }
  else
  {
    sub_22317EF30(a3, v7 - v10);
    v6 = *a1;
    v5 = a1[1];
    v9 = *(_QWORD *)a3;
    v8 = *(_QWORD *)(a3 + 8);
  }
  if (v6 != v5 || v9 != v8)
  {
    v11 = v9 + 12;
    v12 = v6 + 12;
    do
    {
      do
      {
        v13 = v11;
        v14 = v12;
        v15 = *(_QWORD *)(v12 - 12);
        *(_DWORD *)(v11 - 4) = *(_DWORD *)(v14 - 4);
        *(_QWORD *)(v11 - 12) = v15;
        v11 += 12;
        v12 = v14 + 12;
      }
      while (v14 != v5);
    }
    while (v13 != v8);
  }
  v16 = *(_QWORD *)(a3 + 32);
  *(_DWORD *)(a3 + 64) = *((_DWORD *)a1 + 8);
  v18 = a1[5];
  v17 = a1[6];
  v19 = 0xAAAAAAAAAAAAAAABLL * ((v17 - v18) >> 2);
  v20 = *(_QWORD *)(a3 + 40);
  v21 = 0xAAAAAAAAAAAAAAABLL * ((v20 - v16) >> 2);
  if (v19 <= v21)
  {
    if (v19 < v21)
    {
      v20 = v16 + 4 * ((v17 - v18) >> 2);
      *(_QWORD *)(a3 + 40) = v20;
    }
  }
  else
  {
    sub_22317EF30(a3 + 32, v19 - v21);
    v18 = a1[5];
    v17 = a1[6];
    v16 = *(_QWORD *)(a3 + 32);
    v20 = *(_QWORD *)(a3 + 40);
  }
  if (v18 != v17 || v16 != v20)
  {
    v22 = v16 + 12;
    v23 = v18 + 12;
    do
    {
      do
      {
        v24 = v22;
        v25 = v23;
        v26 = *(_QWORD *)(v23 - 12);
        *(_DWORD *)(v22 - 4) = *(_DWORD *)(v25 - 4);
        *(_QWORD *)(v22 - 12) = v26;
        v22 += 12;
        v23 = v25 + 12;
      }
      while (v25 != v17);
    }
    while (v24 != v20);
  }
  v27 = *(_QWORD *)(a3 + 72);
  *(_DWORD *)(a3 + 104) = *((_DWORD *)a1 + 18);
  v29 = a1[10];
  v28 = a1[11];
  v30 = 0xAAAAAAAAAAAAAAABLL * ((v28 - v29) >> 2);
  v31 = *(_QWORD *)(a3 + 80);
  v32 = 0xAAAAAAAAAAAAAAABLL * ((v31 - v27) >> 2);
  if (v30 <= v32)
  {
    if (v30 < v32)
    {
      v31 = v27 + 4 * ((v28 - v29) >> 2);
      *(_QWORD *)(a3 + 80) = v31;
    }
  }
  else
  {
    sub_22317EF30(a3 + 72, v30 - v32);
    v29 = a1[10];
    v28 = a1[11];
    v27 = *(_QWORD *)(a3 + 72);
    v31 = *(_QWORD *)(a3 + 80);
  }
  if (v29 != v28 || v27 != v31)
  {
    v33 = v27 + 12;
    v34 = v29 + 12;
    do
    {
      do
      {
        v35 = v33;
        v36 = v34;
        v37 = *(_QWORD *)(v34 - 12);
        *(_DWORD *)(v33 - 4) = *(_DWORD *)(v36 - 4);
        *(_QWORD *)(v33 - 12) = v37;
        v33 += 12;
        v34 = v36 + 12;
      }
      while (v36 != v28);
    }
    while (v35 != v31);
  }
  v38 = *(_QWORD *)(a3 + 240);
  *(_DWORD *)(a3 + 272) = *((_DWORD *)a1 + 28);
  v39 = (_BYTE *)a1[15];
  v40 = (_BYTE *)a1[16];
  v41 = *(_QWORD *)(a3 + 248) - v38;
  v42 = v40 - v39 >= v41;
  v43 = v40 - v39 - v41;
  if (v43 != 0 && v42)
  {
    sub_22317F2E8(a3 + 240, v43);
    v39 = (_BYTE *)a1[15];
    v40 = (_BYTE *)a1[16];
  }
  else if (!v42)
  {
    *(_QWORD *)(a3 + 248) = v38 + v40 - v39;
  }
  if (v40 != v39)
    memmove(*(void **)(a3 + 240), v39, v40 - v39);
  *(_DWORD *)(a3 + 312) = *((_DWORD *)a1 + 38);
  v44 = (_BYTE *)a1[20];
  v45 = (_BYTE *)a1[21];
  v46 = *(_QWORD *)(a3 + 280);
  v47 = *(_QWORD *)(a3 + 288) - v46;
  v48 = v45 - v44 >= v47;
  v49 = v45 - v44 - v47;
  if (v49 != 0 && v48)
  {
    sub_22317F2E8(a3 + 280, v49);
    v44 = (_BYTE *)a1[20];
    v45 = (_BYTE *)a1[21];
  }
  else if (!v48)
  {
    *(_QWORD *)(a3 + 288) = v46 + v45 - v44;
  }
  if (v45 != v44)
    memmove(*(void **)(a3 + 280), v44, v45 - v44);
  v51 = a1[24];
  v50 = a1[25];
  v52 = 0xAAAAAAAAAAAAAAABLL * ((v50 - v51) >> 2);
  v54 = *(_QWORD *)(a3 + 112);
  v53 = *(_QWORD *)(a3 + 120);
  v55 = 0xAAAAAAAAAAAAAAABLL * ((v53 - v54) >> 2);
  if (v52 <= v55)
  {
    if (v52 < v55)
    {
      v53 = v54 + 4 * ((v50 - v51) >> 2);
      *(_QWORD *)(a3 + 120) = v53;
    }
  }
  else
  {
    sub_22317F10C(a3 + 112, v52 - v55);
    v51 = a1[24];
    v50 = a1[25];
    v54 = *(_QWORD *)(a3 + 112);
    v53 = *(_QWORD *)(a3 + 120);
  }
  if (v51 != v50 || v54 != v53)
  {
    v56 = v54 + 12;
    v57 = v51 + 12;
    do
    {
      do
      {
        v58 = v56;
        v59 = v57;
        v60 = *(_QWORD *)(v57 - 12);
        *(_DWORD *)(v56 - 4) = *(_DWORD *)(v59 - 4);
        *(_QWORD *)(v56 - 12) = v60;
        v56 += 12;
        v57 = v59 + 12;
      }
      while (v59 != v50);
    }
    while (v58 != v53);
  }
  v62 = a1[28];
  v61 = a1[29];
  v63 = (v61 - v62) >> 3;
  v65 = *(_QWORD *)(a3 + 144);
  v64 = *(_QWORD *)(a3 + 152);
  v66 = (v64 - v65) >> 3;
  if (v63 <= v66)
  {
    if (v63 < v66)
    {
      v64 = v65 + 8 * v63;
      *(_QWORD *)(a3 + 152) = v64;
    }
  }
  else
  {
    sub_223CE87EC(a3 + 144, v63 - v66);
    v62 = a1[28];
    v61 = a1[29];
    v65 = *(_QWORD *)(a3 + 144);
    v64 = *(_QWORD *)(a3 + 152);
  }
  if (v62 != v61 || v65 != v64)
  {
    v67 = v65 + 8;
    v68 = v62 + 8;
    do
    {
      do
      {
        v69 = v67;
        v70 = v68;
        *(_QWORD *)(v67 - 8) = *(_QWORD *)(v68 - 8);
        v67 += 8;
        v68 += 8;
      }
      while (v70 != v61);
    }
    while (v69 != v64);
  }
  v72 = *(_QWORD *)(a3 + 176);
  v71 = *(_QWORD *)(a3 + 184);
  v74 = a1[32];
  v73 = a1[33];
  v75 = v73 - v74;
  v76 = (v73 - v74) >> 3;
  v77 = v71 - v72;
  v78 = (uint64_t)(v71 - v72) >> 3;
  v79 = v76 - v78;
  if (v76 <= v78)
  {
    if (v76 < v78)
    {
      v71 = v72 + 8 * v76;
      *(_QWORD *)(a3 + 184) = v71;
    }
  }
  else
  {
    v80 = *(_QWORD *)(a3 + 192);
    if (v79 <= (uint64_t)(v80 - v71) >> 3)
    {
      v71 += 8 * v79;
      *(_QWORD *)(a3 + 184) = v71;
    }
    else
    {
      if (v75 < 0)
        sub_22316E078();
      v81 = v80 - v72;
      v82 = (uint64_t)(v80 - v72) >> 2;
      if (v82 <= v76)
        LODWORD(v82) = v76;
      if (v81 >= 0x7FFFFFFFFFFFFFF8)
        v83 = -1;
      else
        v83 = v82;
      LODWORD(v129) = v83;
      v84 = *(unsigned int *)(a3 + 204);
      if ((_DWORD)v84 == -1)
        sub_22316DD70();
      v127 = (char *)&v129;
      v85 = ((uint64_t (*)(char **, uint64_t))off_24EC6C368[v84])(&v127, a3 + 200);
      v87 = *(char **)(a3 + 176);
      v88 = *(char **)(a3 + 184);
      v72 = v85 + 8 * v78;
      v71 = v72 + 8 * v79;
      if (v88 != v87)
      {
        v89 = v88 - v87 - 8;
        if (v89 < 0x58)
          goto LABEL_116;
        if ((unint64_t)&v88[-v77 - v85] < 0x20)
          goto LABEL_116;
        v90 = (v89 >> 3) + 1;
        v91 = 8 * (v90 & 0x3FFFFFFFFFFFFFFCLL);
        v92 = &v88[-v91];
        v72 -= v91;
        v93 = (_OWORD *)(v85 + 8 * v78 - 16);
        v94 = (__int128 *)(v88 - 16);
        v95 = v90 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v96 = *v94;
          *(v93 - 1) = *(v94 - 1);
          *v93 = v96;
          v93 -= 2;
          v94 -= 2;
          v95 -= 4;
        }
        while (v95);
        v88 = v92;
        if (v90 != (v90 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_116:
          do
          {
            v97 = *((_QWORD *)v88 - 1);
            v88 -= 8;
            *(_QWORD *)(v72 - 8) = v97;
            v72 -= 8;
          }
          while (v88 != v87);
        }
        v87 = *(char **)(a3 + 176);
      }
      *(_QWORD *)(a3 + 176) = v72;
      *(_QWORD *)(a3 + 184) = v71;
      v98 = *(_QWORD *)(a3 + 192);
      *(_QWORD *)(a3 + 192) = v85 + 8 * v86;
      if (v87)
      {
        v127 = v87;
        v128 = (unint64_t)(v98 - (_QWORD)v87) >> 3;
        v99 = *(unsigned int *)(a3 + 204);
        if ((_DWORD)v99 == -1)
          sub_22316DD70();
        v129 = &v127;
        ((void (*)(char ***, uint64_t))off_24EC6C378[v99])(&v129, a3 + 200);
        v72 = *(_QWORD *)(a3 + 176);
        v71 = *(_QWORD *)(a3 + 184);
      }
    }
    v74 = a1[32];
    v73 = a1[33];
  }
  if (v74 != v73 || v72 != v71)
  {
    v101 = v72 + 8;
    v102 = v74 + 8;
    do
    {
      do
      {
        v103 = v101;
        v104 = v102;
        *(_QWORD *)(v101 - 8) = *(_QWORD *)(v102 - 8);
        v101 += 8;
        v102 += 8;
      }
      while (v104 != v73);
    }
    while (v103 != v71);
  }
  v106 = a1[36];
  v105 = a1[37];
  v107 = 0xAAAAAAAAAAAAAAABLL * ((v105 - v106) >> 2);
  v109 = *(_QWORD *)(a3 + 208);
  v108 = *(_QWORD *)(a3 + 216);
  v110 = 0xAAAAAAAAAAAAAAABLL * ((v108 - v109) >> 2);
  if (v107 <= v110)
  {
    if (v107 < v110)
    {
      v108 = v109 + 4 * ((v105 - v106) >> 2);
      *(_QWORD *)(a3 + 216) = v108;
    }
  }
  else
  {
    sub_22317F10C(a3 + 208, v107 - v110);
    v106 = a1[36];
    v105 = a1[37];
    v109 = *(_QWORD *)(a3 + 208);
    v108 = *(_QWORD *)(a3 + 216);
  }
  if (v106 != v105 || v109 != v108)
  {
    v111 = v109 + 12;
    v112 = v106 + 12;
    do
    {
      do
      {
        v113 = v111;
        v114 = v112;
        v115 = *(_QWORD *)(v112 - 12);
        *(_DWORD *)(v111 - 4) = *(_DWORD *)(v114 - 4);
        *(_QWORD *)(v111 - 12) = v115;
        v111 += 12;
        v112 = v114 + 12;
      }
      while (v114 != v105);
    }
    while (v113 != v108);
  }
  if (*((_BYTE *)a1 + 344))
  {
    v116 = a1[40];
    v117 = *(uint64_t *)((char *)a1 + 332);
    v118 = *((_DWORD *)a1 + 85);
    v119 = *(unsigned __int8 *)(a3 + 380);
    *(_DWORD *)(a3 + 364) = *((_DWORD *)a1 + 82);
    *(_QWORD *)(a3 + 356) = v116;
    *(_DWORD *)(a3 + 376) = v118;
    *(_QWORD *)(a3 + 368) = v117;
    if (!v119)
      *(_BYTE *)(a3 + 380) = 1;
  }
  *(_DWORD *)(a3 + 352) = *((_DWORD *)a1 + 87);
  v120 = (_BYTE *)a1[44];
  v121 = (_BYTE *)a1[45];
  v122 = (v121 - v120) >> 2;
  v123 = *(_QWORD *)(a3 + 320);
  v124 = (*(_QWORD *)(a3 + 328) - v123) >> 2;
  v125 = v122 >= v124;
  v126 = v122 - v124;
  if (v126 != 0 && v125)
  {
    sub_22317F4CC(a3 + 320, v126);
    v120 = (_BYTE *)a1[44];
    v121 = (_BYTE *)a1[45];
  }
  else if (!v125)
  {
    *(_QWORD *)(a3 + 328) = v123 + 4 * v122;
  }
  if (v121 != v120)
    memmove(*(void **)(a3 + 320), v120, v121 - v120);
}

void sub_22414E3FC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_22414E410(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD **v16;
  int v17;
  _QWORD *v18;

  v2 = *(_QWORD *)result;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(result + 16) - *(_QWORD *)result) >> 2) < a2)
  {
    v3 = result;
    if (a2 >= 0x1555555555555556)
      sub_22316E078();
    v4 = *(_QWORD *)(result + 8);
    LODWORD(v18) = a2;
    v5 = *(unsigned int *)(result + 28);
    if ((_DWORD)v5 == -1)
      sub_22316DD70();
    v6 = (unsigned __int128)((v4 - v2) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
    v7 = (v6 >> 1) + ((unint64_t)v6 >> 63);
    v16 = &v18;
    result = ((uint64_t (*)(_QWORD ***, uint64_t))off_24EC6C2E8[v5])(&v16, result + 24);
    v10 = *(_QWORD *)v3;
    v9 = *(_QWORD *)(v3 + 8);
    v11 = result + 12 * v7;
    if (v9 != *(_QWORD *)v3)
    {
      do
      {
        v12 = *(_QWORD *)(v9 - 12);
        v9 -= 12;
        v13 = *(_DWORD *)(v9 + 8);
        *(_QWORD *)(v11 - 12) = v12;
        v11 -= 12;
        *(_DWORD *)(v11 + 8) = v13;
      }
      while (v9 != v10);
      v9 = *(_QWORD *)v3;
    }
    *(_QWORD *)v3 = v11;
    *(_QWORD *)(v3 + 8) = result + 12 * v7;
    v14 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = result + 12 * v8;
    if (v9)
    {
      v16 = (_QWORD **)v9;
      v17 = -1431655765 * ((unint64_t)(v14 - v9) >> 2);
      v15 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v15 == -1)
        sub_22316DD70();
      v18 = &v16;
      return ((uint64_t (*)(_QWORD **, uint64_t))off_24EC6C2F8[v15])(&v18, v3 + 24);
    }
  }
  return result;
}

unint64_t sub_22414E570(unint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD **v20;
  int v21;
  _QWORD *v22;

  v3 = 0x1555555555555555;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 2);
  v5 = v4 + 1;
  if (v4 + 1 > 0x1555555555555555)
    sub_22316E078();
  if (0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 2) > v5)
    v5 = 0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 2);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - *a1) >> 2) < 0xAAAAAAAAAAAAAAALL)
    v3 = v5;
  if (v3)
  {
    LODWORD(v22) = v3;
    v7 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v7 == -1)
      sub_22316DD70();
    v20 = &v22;
    v8 = ((uint64_t (*)(_QWORD ***, unint64_t *))off_24EC6C2E8[v7])(&v20, a1 + 3);
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  v10 = v8 + 12 * v4;
  v11 = *a2;
  *(_DWORD *)(v10 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)v10 = v11;
  v12 = v10 + 12;
  v14 = *a1;
  v13 = a1[1];
  if (v13 != *a1)
  {
    do
    {
      v15 = *(_QWORD *)(v13 - 12);
      v13 -= 12;
      v16 = *(_DWORD *)(v13 + 8);
      *(_QWORD *)(v10 - 12) = v15;
      v10 -= 12;
      *(_DWORD *)(v10 + 8) = v16;
    }
    while (v13 != v14);
    v13 = *a1;
  }
  *a1 = v10;
  a1[1] = v12;
  v17 = a1[2];
  a1[2] = v8 + 12 * v9;
  if (v13)
  {
    v20 = (_QWORD **)v13;
    v21 = -1431655765 * ((v17 - v13) >> 2);
    v18 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v18 == -1)
      sub_22316DD70();
    v22 = &v20;
    ((void (*)(_QWORD **, unint64_t *))off_24EC6C2F8[v18])(&v22, a1 + 3);
  }
  return v12;
}

uint64_t sub_22414E6F8(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD **v16;
  int v17;
  _QWORD *v18;

  v2 = *(_QWORD *)result;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(result + 16) - *(_QWORD *)result) >> 2) < a2)
  {
    v3 = result;
    if (a2 >= 0x1555555555555556)
      sub_22316E078();
    v4 = *(_QWORD *)(result + 8);
    LODWORD(v18) = a2;
    v5 = *(unsigned int *)(result + 28);
    if ((_DWORD)v5 == -1)
      sub_22316DD70();
    v6 = (unsigned __int128)((v4 - v2) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
    v7 = (v6 >> 1) + ((unint64_t)v6 >> 63);
    v16 = &v18;
    result = ((uint64_t (*)(_QWORD ***, uint64_t))off_24EC6C308[v5])(&v16, result + 24);
    v10 = *(_QWORD *)v3;
    v9 = *(_QWORD *)(v3 + 8);
    v11 = result + 12 * v7;
    if (v9 != *(_QWORD *)v3)
    {
      do
      {
        v12 = *(_QWORD *)(v9 - 12);
        v9 -= 12;
        v13 = *(_DWORD *)(v9 + 8);
        *(_QWORD *)(v11 - 12) = v12;
        v11 -= 12;
        *(_DWORD *)(v11 + 8) = v13;
      }
      while (v9 != v10);
      v9 = *(_QWORD *)v3;
    }
    *(_QWORD *)v3 = v11;
    *(_QWORD *)(v3 + 8) = result + 12 * v7;
    v14 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = result + 12 * v8;
    if (v9)
    {
      v16 = (_QWORD **)v9;
      v17 = -1431655765 * ((unint64_t)(v14 - v9) >> 2);
      v15 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v15 == -1)
        sub_22316DD70();
      v18 = &v16;
      return ((uint64_t (*)(_QWORD **, uint64_t))off_24EC6C318[v15])(&v18, v3 + 24);
    }
  }
  return result;
}

unint64_t sub_22414E858(unint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD **v20;
  int v21;
  _QWORD *v22;

  v3 = 0x1555555555555555;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 2);
  v5 = v4 + 1;
  if (v4 + 1 > 0x1555555555555555)
    sub_22316E078();
  if (0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 2) > v5)
    v5 = 0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 2);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - *a1) >> 2) < 0xAAAAAAAAAAAAAAALL)
    v3 = v5;
  if (v3)
  {
    LODWORD(v22) = v3;
    v7 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v7 == -1)
      sub_22316DD70();
    v20 = &v22;
    v8 = ((uint64_t (*)(_QWORD ***, unint64_t *))off_24EC6C308[v7])(&v20, a1 + 3);
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  v10 = v8 + 12 * v4;
  v11 = *a2;
  *(_DWORD *)(v10 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)v10 = v11;
  v12 = v10 + 12;
  v14 = *a1;
  v13 = a1[1];
  if (v13 != *a1)
  {
    do
    {
      v15 = *(_QWORD *)(v13 - 12);
      v13 -= 12;
      v16 = *(_DWORD *)(v13 + 8);
      *(_QWORD *)(v10 - 12) = v15;
      v10 -= 12;
      *(_DWORD *)(v10 + 8) = v16;
    }
    while (v13 != v14);
    v13 = *a1;
  }
  *a1 = v10;
  a1[1] = v12;
  v17 = a1[2];
  a1[2] = v8 + 12 * v9;
  if (v13)
  {
    v20 = (_QWORD **)v13;
    v21 = -1431655765 * ((v17 - v13) >> 2);
    v18 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v18 == -1)
      sub_22316DD70();
    v22 = &v20;
    ((void (*)(_QWORD **, unint64_t *))off_24EC6C318[v18])(&v22, a1 + 3);
  }
  return v12;
}

unint64_t sub_22414E9E0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  __int128 *v60;
  _OWORD *v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _OWORD *v72;
  __int128 *v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _OWORD *v82;
  __int128 *v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _OWORD *v92;
  __int128 *v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  char *v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  _OWORD *v108;
  __int128 *v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  __int128 *v120;
  _OWORD *v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t *v126;
  uint64_t *v127;
  uint64_t *v128;
  char *v129;
  char *v130;
  char *v131;
  char *v132;
  char *v133;
  char *v134;
  unint64_t result;
  int32x2_t *v136;
  int32x2_t *v137;
  int32x2_t v138;
  uint64_t v139;
  int32x2_t *v140;
  int32x2_t *v141;
  int32x2_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  __int128 *v146;
  char *v147;
  uint64_t v148;
  __int128 v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  int v153;
  _QWORD **v154;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
  sub_22339E3C8(a1, v4 - 0x5555555555555555 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2));
  sub_22339E3C8(a1 + 32, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 2)- 0x5555555555555555 * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2));
  sub_22339E3C8(a1 + 72, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 2)- 0x5555555555555555 * ((uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 2));
  v5 = *(_QWORD *)(a1 + 176);
  v6 = (uint64_t *)(a1 + 176);
  v7 = *(_QWORD *)(a1 + 184) - v5;
  v8 = v7 >> 3;
  v9 = (v7 >> 3) + ((uint64_t)(*(_QWORD *)(a2 + 184) - *(_QWORD *)(a2 + 176)) >> 3);
  if (v9 <= (*(_QWORD *)(a1 + 192) - v5) >> 3)
    goto LABEL_17;
  if (v9 >> 61)
    goto LABEL_111;
  LODWORD(v154) = (v7 >> 3) + ((uint64_t)(*(_QWORD *)(a2 + 184) - *(_QWORD *)(a2 + 176)) >> 3);
  v10 = *(unsigned int *)(a1 + 204);
  if ((_DWORD)v10 == -1)
    goto LABEL_112;
  v152 = &v154;
  v11 = ((uint64_t (*)(_QWORD **, uint64_t))off_24EC6C388[v10])(&v152, a1 + 200);
  v12 = v11 + 8 * v8;
  v14 = v11 + 8 * v13;
  v15 = *(_QWORD *)(a1 + 176);
  v16 = *(_QWORD *)(a1 + 184);
  v17 = v16 - v15;
  if (v16 == v15)
  {
    *(_QWORD *)(a1 + 176) = v12;
    *(_QWORD *)(a1 + 184) = v12;
    v20 = *(_QWORD *)(a1 + 192);
    *(_QWORD *)(a1 + 192) = v14;
    if (!v16)
      goto LABEL_17;
    goto LABEL_15;
  }
  v18 = v17 - 8;
  if ((unint64_t)(v17 - 8) < 0x58)
  {
    v19 = v11 + 8 * v8;
    do
    {
LABEL_13:
      v28 = *(_QWORD *)(v16 - 8);
      v16 -= 8;
      *(_QWORD *)(v19 - 8) = v28;
      v19 -= 8;
    }
    while (v16 != v15);
    goto LABEL_14;
  }
  v19 = v11 + 8 * v8;
  if (v16 - (v7 & 0xFFFFFFFFFFFFFFF8) - v11 < 0x20)
    goto LABEL_13;
  v21 = (v18 >> 3) + 1;
  v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
  v23 = v16 - v22;
  v19 = v12 - v22;
  v24 = (_OWORD *)(v11 + 8 * v8 - 16);
  v25 = (__int128 *)(v16 - 16);
  v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v27 = *v25;
    *(v24 - 1) = *(v25 - 1);
    *v24 = v27;
    v24 -= 2;
    v25 -= 2;
    v26 -= 4;
  }
  while (v26);
  v16 = v23;
  if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_13;
LABEL_14:
  v16 = *v6;
  *(_QWORD *)(a1 + 176) = v19;
  *(_QWORD *)(a1 + 184) = v12;
  v20 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v14;
  if (!v16)
    goto LABEL_17;
LABEL_15:
  v152 = (_QWORD *)v16;
  v153 = (unint64_t)(v20 - v16) >> 3;
  v29 = *(unsigned int *)(a1 + 204);
  if ((_DWORD)v29 == -1)
    sub_22316DD70();
  v154 = &v152;
  ((void (*)(_QWORD ***, uint64_t))off_24EC6C398[v29])(&v154, a1 + 200);
LABEL_17:
  sub_223674E10(a1 + 240, *(_QWORD *)(a1 + 248) + *(_QWORD *)(a2 + 248) - (*(_QWORD *)(a1 + 240) + *(_QWORD *)(a2 + 240)));
  sub_223674E10(a1 + 280, *(_QWORD *)(a1 + 288) + *(_QWORD *)(a2 + 288) - (*(_QWORD *)(a1 + 280) + *(_QWORD *)(a2 + 280)));
  sub_223674C80(a1 + 320, ((uint64_t)(*(_QWORD *)(a2 + 328) - *(_QWORD *)(a2 + 320)) >> 2)+ ((uint64_t)(*(_QWORD *)(a1 + 328) - *(_QWORD *)(a1 + 320)) >> 2));
  sub_22339E528(a1 + 112, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112)) >> 2)- 0x5555555555555555 * ((uint64_t)(*(_QWORD *)(a2 + 120) - *(_QWORD *)(a2 + 112)) >> 2));
  sub_22339E528(a1 + 208, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 216) - *(_QWORD *)(a1 + 208)) >> 2)- 0x5555555555555555 * ((uint64_t)(*(_QWORD *)(a2 + 216) - *(_QWORD *)(a2 + 208)) >> 2));
  v31 = *(char **)(a2 + 176);
  v30 = *(char **)(a2 + 184);
  v32 = v30 - v31;
  if (v30 - v31 < 1)
    goto LABEL_86;
  v33 = v32 >> 3;
  v35 = *(_QWORD *)(a1 + 176);
  v34 = *(_QWORD *)(a1 + 184);
  v36 = v34 - v35;
  v37 = (uint64_t)(v34 - v35) >> 3;
  v38 = (char *)(v35 + ((v34 - v35) & 0xFFFFFFFFFFFFFFF8));
  v39 = *(_QWORD *)(a1 + 192);
  if (v32 >> 3 > (uint64_t)(v39 - v34) >> 3)
  {
    v40 = v37 + v33;
    if (!((unint64_t)(v37 + v33) >> 61))
    {
      v41 = v39 - v35;
      if (v41 >> 2 > v40)
        v40 = v41 >> 2;
      v42 = (unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8;
      v43 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v42)
        v43 = v40;
      if (!v43)
      {
        v45 = 0;
        v46 = 0;
        v47 = 8 * v37;
        v48 = (_QWORD *)(8 * v37 + 8 * v33);
        v49 = v32 - 8;
        if ((unint64_t)(v32 - 8) < 0x38)
          goto LABEL_27;
        goto LABEL_34;
      }
      v150 = v36;
      v151 = v37;
      LODWORD(v154) = v43;
      v44 = *(unsigned int *)(a1 + 204);
      if ((_DWORD)v44 != -1)
      {
        v152 = &v154;
        v45 = ((uint64_t (*)(_QWORD **, uint64_t))off_24EC6C388[v44])(&v152, a1 + 200);
        v36 = v150;
        v37 = v151;
        v33 = v32 >> 3;
        v47 = v45 + 8 * v151;
        v48 = (_QWORD *)(v47 + 8 * (v32 >> 3));
        v49 = v32 - 8;
        if ((unint64_t)(v32 - 8) < 0x38)
        {
LABEL_27:
          v50 = (_QWORD *)v47;
          goto LABEL_38;
        }
LABEL_34:
        v50 = (_QWORD *)v47;
        if ((v36 & 0xFFFFFFFFFFFFFFF8) + v45 - (unint64_t)v31 >= 0x20)
        {
          v57 = (v49 >> 3) + 1;
          v58 = 8 * (v57 & 0x3FFFFFFFFFFFFFFCLL);
          v50 = (_QWORD *)(v47 + v58);
          v59 = &v31[v58];
          v60 = (__int128 *)(v31 + 16);
          v61 = (_OWORD *)(v45 + 8 * v37 + 16);
          v62 = v57 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v63 = *v60;
            *(v61 - 1) = *(v60 - 1);
            *v61 = v63;
            v60 += 2;
            v61 += 2;
            v62 -= 4;
          }
          while (v62);
          v31 = v59;
          if (v57 == (v57 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_39:
            v65 = *v6;
            if ((char *)*v6 != v38)
            {
              v66 = (v36 & 0xFFFFFFFFFFFFFFF8) + v35;
              v67 = v66 - v65 - 8;
              if (v67 >= 0x68)
              {
                v68 = v38;
                if (v66 - ((v36 & 0xFFFFFFFFFFFFFFF8) + v45) >= 0x20)
                {
                  v69 = (v67 >> 3) + 1;
                  v70 = 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
                  v68 = &v38[-v70];
                  v47 -= v70;
                  v71 = 8 * v37 - 16;
                  v72 = (_OWORD *)(v45 + v71);
                  v73 = (__int128 *)(v35 + v71);
                  v74 = v69 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v75 = *v73;
                    *(v72 - 1) = *(v73 - 1);
                    *v72 = v75;
                    v72 -= 2;
                    v73 -= 2;
                    v74 -= 4;
                  }
                  while (v74);
                  if (v69 == (v69 & 0x3FFFFFFFFFFFFFFCLL))
                    goto LABEL_47;
                }
              }
              else
              {
                v68 = v38;
              }
              do
              {
                v76 = *((_QWORD *)v68 - 1);
                v68 -= 8;
                *(_QWORD *)(v47 - 8) = v76;
                v47 -= 8;
              }
              while (v68 != (char *)v65);
            }
LABEL_47:
            v77 = *(char **)(a1 + 184);
            if (v77 != v38)
            {
              v78 = (v36 & 0xFFFFFFFFFFFFFFF8) + v35;
              v79 = (unint64_t)&v77[-v78 - 8];
              if (v79 < 0x68)
                goto LABEL_117;
              if ((v36 & 0xFFFFFFFFFFFFFFF8) + v45 + (v32 & 0xFFFFFFFFFFFFFFF8) - v78 < 0x20)
                goto LABEL_117;
              v80 = (v79 >> 3) + 1;
              v81 = 8 * (v80 & 0x3FFFFFFFFFFFFFFCLL);
              v38 += v81;
              v48 = (_QWORD *)((char *)v48 + v81);
              v82 = (_OWORD *)(8 * v37 + 8 * v33 + v45 + 16);
              v83 = (__int128 *)(8 * v37 + v35 + 16);
              v84 = v80 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v85 = *v83;
                *(v82 - 1) = *(v83 - 1);
                *v82 = v85;
                v82 += 2;
                v83 += 2;
                v84 -= 4;
              }
              while (v84);
              if (v80 != (v80 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_117:
                do
                {
                  v86 = *(_QWORD *)v38;
                  v38 += 8;
                  *v48++ = v86;
                }
                while (v38 != v77);
              }
            }
            v87 = *(_QWORD *)(a1 + 176);
            *(_QWORD *)(a1 + 176) = v47;
            *(_QWORD *)(a1 + 184) = v48;
            v88 = *(_QWORD *)(a1 + 192);
            *(_QWORD *)(a1 + 192) = v45 + 8 * v46;
            if (v87)
            {
              v152 = (_QWORD *)v87;
              v153 = (unint64_t)(v88 - v87) >> 3;
              v89 = *(unsigned int *)(a1 + 204);
              if ((_DWORD)v89 == -1)
                sub_22316DD70();
              v154 = &v152;
              ((void (*)(_QWORD ***, uint64_t))off_24EC6C398[v89])(&v154, a1 + 200);
            }
            goto LABEL_86;
          }
        }
        do
        {
LABEL_38:
          v64 = *(_QWORD *)v31;
          v31 += 8;
          *v50++ = v64;
        }
        while (v50 != v48);
        goto LABEL_39;
      }
LABEL_112:
      sub_22316DD70();
    }
LABEL_111:
    sub_22316E078();
  }
  v51 = v34 - (_QWORD)v38;
  v52 = (uint64_t)(v34 - (_QWORD)v38) >> 3;
  if (v52 >= v33)
  {
    v53 = &v31[8 * v33];
    v56 = *(char **)(a1 + 184);
    goto LABEL_64;
  }
  v53 = &v31[8 * v52];
  if (v53 == v30)
  {
    v56 = *(char **)(a1 + 184);
    goto LABEL_63;
  }
  v54 = v30 - v31 - v51 - 8;
  if (v54 < 0x38)
  {
    v55 = &v31[8 * v52];
    v56 = *(char **)(a1 + 184);
    do
    {
LABEL_62:
      v96 = *(_QWORD *)v55;
      v55 += 8;
      *(_QWORD *)v56 = v96;
      v56 += 8;
    }
    while (v55 != v30);
    goto LABEL_63;
  }
  v55 = &v31[8 * v52];
  v56 = *(char **)(a1 + 184);
  if ((unint64_t)(v38 - v31) < 0x20)
    goto LABEL_62;
  v90 = (v54 >> 3) + 1;
  v91 = 8 * (v90 & 0x3FFFFFFFFFFFFFFCLL);
  v55 = &v53[v91];
  v56 = (char *)(v34 + v91);
  v92 = (_OWORD *)(v34 + 16);
  v93 = (__int128 *)&v31[8 * v52 + 16];
  v94 = v90 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v95 = *v93;
    *(v92 - 1) = *(v93 - 1);
    *v92 = v95;
    v92 += 2;
    v93 += 2;
    v94 -= 4;
  }
  while (v94);
  if (v90 != (v90 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_62;
LABEL_63:
  *(_QWORD *)(a1 + 184) = v56;
  if (v51 < 1)
    goto LABEL_86;
LABEL_64:
  v97 = &v38[8 * v33];
  v98 = (char *)(v56 - v97);
  v99 = (v56 - v97) >> 3;
  v100 = &v56[-8 * v33];
  v101 = v56;
  if ((unint64_t)v100 < v34)
  {
    v102 = &v98[v36 & 0xFFFFFFFFFFFFFFF8];
    v103 = (unint64_t)&v102[v35 + 8];
    if (v34 > v103)
      v103 = v34;
    v104 = v103 + ~v35 - (_QWORD)v102;
    v105 = (uint64_t *)&v56[-8 * v33];
    v101 = v56;
    if (v104 < 0x58)
      goto LABEL_118;
    v105 = (uint64_t *)&v56[-8 * v33];
    v101 = v56;
    if ((unint64_t)&v97[-(v36 & 0xFFFFFFFFFFFFFFF8) - v35] < 0x20)
      goto LABEL_118;
    v106 = (v104 >> 3) + 1;
    v107 = 8 * (v106 & 0x3FFFFFFFFFFFFFFCLL);
    v105 = (uint64_t *)&v100[v107];
    v101 = &v56[v107];
    v108 = v56 + 16;
    v109 = (__int128 *)(8 * v99 + 8 * v37 + v35 + 16);
    v110 = v106 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v111 = *v109;
      *(v108 - 1) = *(v109 - 1);
      *v108 = v111;
      v108 += 2;
      v109 += 2;
      v110 -= 4;
    }
    while (v110);
    if (v106 != (v106 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_118:
      do
      {
        v112 = *v105++;
        *(_QWORD *)v101 = v112;
        v101 += 8;
      }
      while ((unint64_t)v105 < v34);
    }
  }
  *(_QWORD *)(a1 + 184) = v101;
  if (v56 == v97)
    goto LABEL_79;
  if ((unint64_t)(v98 - 8) < 0x78 || (v36 & 0xFFFFFFFFFFFFFFF8) + v35 - (unint64_t)v97 < 0x20)
  {
    v113 = v56;
LABEL_77:
    v114 = v113 - 8;
    do
    {
      v115 = *((_QWORD *)v100 - 1);
      v100 -= 8;
      *(_QWORD *)v114 = v115;
      v114 -= 8;
    }
    while (v100 != v38);
    goto LABEL_79;
  }
  v144 = ((unint64_t)(v98 - 8) >> 3) + 1;
  v145 = 8 * (v144 & 0x3FFFFFFFFFFFFFFCLL);
  v113 = &v56[-v145];
  v100 -= v145;
  v146 = (__int128 *)(8 * v99 + 8 * v37 + v35 - 16);
  v147 = v56 - 16;
  v148 = v144 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v149 = *v146;
    *((_OWORD *)v147 - 1) = *(v146 - 1);
    *(_OWORD *)v147 = v149;
    v146 -= 2;
    v147 -= 32;
    v148 -= 4;
  }
  while (v148);
  if (v144 != (v144 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_77;
LABEL_79:
  if (v53 != v31)
  {
    v116 = v53 - v31 - 8;
    if (v116 < 0x18)
      goto LABEL_119;
    if ((unint64_t)(v38 - v31) < 0x20)
      goto LABEL_119;
    v117 = (v116 >> 3) + 1;
    v118 = 8 * (v117 & 0x3FFFFFFFFFFFFFFCLL);
    v38 += v118;
    v119 = &v31[v118];
    v120 = (__int128 *)(v31 + 16);
    v121 = (_OWORD *)(v35 + 8 * v37 + 16);
    v122 = v117 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v123 = *v120;
      *(v121 - 1) = *(v120 - 1);
      *v121 = v123;
      v120 += 2;
      v121 += 2;
      v122 -= 4;
    }
    while (v122);
    v31 = v119;
    if (v117 != (v117 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_119:
      do
      {
        v124 = *(_QWORD *)v31;
        v31 += 8;
        *(_QWORD *)v38 = v124;
        v38 += 8;
      }
      while (v31 != v53);
    }
  }
LABEL_86:
  sub_223A2B5F8((uint64_t *)a1, *(_QWORD *)(a1 + 8), *(uint64_t **)a2, *(uint64_t **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2));
  v125 = *(uint64_t **)(a2 + 72);
  v126 = *(uint64_t **)(a2 + 80);
  if (v125 != v126)
    *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  sub_223A2B5F8((uint64_t *)(a1 + 72), *(_QWORD *)(a1 + 80), v125, v126, 0xAAAAAAAAAAAAAAABLL * (((char *)v126 - (char *)v125) >> 2));
  v127 = *(uint64_t **)(a2 + 32);
  v128 = *(uint64_t **)(a2 + 40);
  if (v127 != v128)
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  sub_223A2B5F8((uint64_t *)(a1 + 32), *(_QWORD *)(a1 + 40), v127, v128, 0xAAAAAAAAAAAAAAABLL * (((char *)v128 - (char *)v127) >> 2));
  v129 = *(char **)(a2 + 240);
  v130 = *(char **)(a2 + 248);
  if (v129 != v130)
    *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  sub_223A2BD50(a1 + 240, *(char **)(a1 + 248), v129, v130, v130 - v129);
  v131 = *(char **)(a2 + 280);
  v132 = *(char **)(a2 + 288);
  if (v131 != v132)
    *(_DWORD *)(a1 + 312) = *(_DWORD *)(a2 + 312);
  sub_223A2BD50(a1 + 280, *(char **)(a1 + 288), v131, v132, v132 - v131);
  v133 = *(char **)(a2 + 320);
  v134 = *(char **)(a2 + 328);
  if (v133 != v134)
    *(_DWORD *)(a1 + 352) = *(_DWORD *)(a2 + 352);
  result = (unint64_t)sub_223A2B950(a1 + 320, *(_QWORD *)(a1 + 328), v133, v134, (v134 - v133) >> 2);
  v136 = *(int32x2_t **)(a2 + 112);
  v137 = *(int32x2_t **)(a2 + 120);
  if (v136 != v137)
  {
    result = *(_QWORD *)(a1 + 120);
    v138 = vdup_n_s32(v4);
    do
    {
      while (1)
      {
        v152 = (_QWORD *)vadd_s32(*v136, v138);
        v153 = v136[1].i32[0] + v4;
        if (result < *(_QWORD *)(a1 + 128))
          break;
        result = sub_2233B29C0((unint64_t *)(a1 + 112), (uint64_t *)&v152);
        *(_QWORD *)(a1 + 120) = result;
        v136 = (int32x2_t *)((char *)v136 + 12);
        if (v136 == v137)
          goto LABEL_101;
      }
      v139 = (uint64_t)v152;
      *(_DWORD *)(result + 8) = v153;
      *(_QWORD *)result = v139;
      result += 12;
      *(_QWORD *)(a1 + 120) = result;
      v136 = (int32x2_t *)((char *)v136 + 12);
    }
    while (v136 != v137);
  }
LABEL_101:
  v141 = *(int32x2_t **)(a2 + 208);
  v140 = *(int32x2_t **)(a2 + 216);
  if (v141 != v140)
  {
    result = *(_QWORD *)(a1 + 216);
    v142 = vdup_n_s32(v4);
    do
    {
      while (1)
      {
        v152 = (_QWORD *)vadd_s32(*v141, v142);
        v153 = v141[1].i32[0] + v4;
        if (result < *(_QWORD *)(a1 + 224))
          break;
        result = sub_2233B29C0((unint64_t *)(a1 + 208), (uint64_t *)&v152);
        *(_QWORD *)(a1 + 216) = result;
        v141 = (int32x2_t *)((char *)v141 + 12);
        if (v141 == v140)
          return result;
      }
      v143 = (uint64_t)v152;
      *(_DWORD *)(result + 8) = v153;
      *(_QWORD *)result = v143;
      result += 12;
      *(_QWORD *)(a1 + 216) = result;
      v141 = (int32x2_t *)((char *)v141 + 12);
    }
    while (v141 != v140);
  }
  return result;
}

float32x2_t **sub_22414F498(float32x2_t **result, float32x2_t *a2, float32x4_t a3, int8x16_t a4, float32x4_t a5, float32x2_t a6, double a7, float32x2_t a8, double a9, double a10)
{
  float32x2_t *v10;
  float32x2_t *v11;
  float32x2_t *v12;
  float32x2_t *v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  unsigned __int32 v17;

  v10 = *result;
  v11 = result[1];
  if (*result != v11)
  {
    do
    {
      a4.i32[0] = v10[1].i32[0];
      a6.i32[0] = a2[1].i32[0];
      a8.i32[0] = a2[3].i32[0];
      LODWORD(a10) = a2[5].i32[0];
      *(float32x2_t *)a5.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*a2, COERCE_FLOAT(*v10)), a2[2], *v10, 1), a2[4], *(float *)a4.i32);
      a6 = vmla_f32(vmla_lane_f32(vmul_f32(a6, *v10), a8, *v10, 1), *(float32x2_t *)a4.i8, *(float32x2_t *)&a10);
      *(float32x2_t *)&a5.u32[2] = a6;
      *(float32x2_t *)a3.f32 = a2[6];
      a3.i32[2] = a2[7].i32[0];
      a3 = vaddq_f32(a5, a3);
      v10[1].i32[0] = a3.i32[2];
      *v10 = *(float32x2_t *)a3.f32;
      v10 = (float32x2_t *)((char *)v10 + 12);
    }
    while (v10 != v11);
  }
  v12 = result[9];
  v13 = result[10];
  if (v12 != v13)
  {
    *(float32x2_t *)a3.f32 = *a2;
    a3.i32[2] = a2[1].i32[0];
    *(float32x2_t *)a4.i8 = a2[2];
    a4.i32[2] = a2[3].i32[0];
    *(float32x2_t *)a5.f32 = a2[4];
    a5.i32[2] = a2[5].i32[0];
    v14 = (float32x2_t)vextq_s8((int8x16_t)a3, (int8x16_t)a3, 8uLL).u64[0];
    v15 = (float32x2_t)vextq_s8(a4, a4, 8uLL).u64[0];
    v16 = (float32x2_t)vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL).u64[0];
    do
    {
      LODWORD(a10) = v12[1].i32[0];
      v17 = vmla_f32(vmla_lane_f32(vmul_f32(v14, *v12), v15, *v12, 1), *(float32x2_t *)&a10, v16).u32[0];
      *v12 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)a3.f32, COERCE_FLOAT(*v12)), *(float32x2_t *)a4.i8, *v12, 1), *(float32x2_t *)a5.f32, *(float *)&a10);
      v12[1].i32[0] = v17;
      v12 = (float32x2_t *)((char *)v12 + 12);
    }
    while (v12 != v13);
  }
  return result;
}

uint64_t sub_22414F578(uint64_t a1, uint64_t a2)
{
  void (**v4)(int);
  int v5;
  int v6;
  int v7;
  BOOL v8;
  char v9;
  const void *v10;
  _OWORD *v11;
  _OWORD *v12;
  uint64_t v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  BOOL v21;
  char v22;
  const void *v23;
  _OWORD *v24;
  _OWORD *v25;
  uint64_t v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  unint64_t *v31;
  const void *v32;
  _OWORD *v33;
  _OWORD *v34;
  _OWORD *v35;
  _OWORD *v36;
  __int128 v37;
  uint64_t v38;
  char *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  unint64_t *v44;
  BOOL v46;
  char v47;
  const void *v48;
  _OWORD *v49;
  _OWORD *v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  __int16 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  unint64_t *p_shared_owners;
  const void *v62;
  _OWORD *v63;
  _OWORD *v64;
  _OWORD *v65;
  _OWORD *v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  unint64_t *v74;
  BOOL v75;
  char v76;
  void *v77;
  void *v78;
  void *v79;
  __int128 *v80;
  __int128 *v81;
  __int128 *v82;
  __int128 *v83;
  __int128 *v84;
  std::logic_error *exception;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  std::__shared_weak_count *v89;
  std::__shared_weak_count *v90;

  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (void (**)(int))(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8));
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 24))(*(_QWORD *)(a2 + 8));
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 32))(*(_QWORD *)(a2 + 8));
  v8 = v5 == 1 && v6 == 1;
  v9 = !v8;
  if (v8 && v7 == 11)
  {
    *(_DWORD *)a1 = 0;
    v10 = *(const void **)(a2 + 8);
    if (!v10
      || (v11 = __dynamic_cast(v10, (const struct __class_type_info *)&unk_24EC6D060, (const struct __class_type_info *)&unk_24EC20800, 0)) == 0)
    {
      v80 = sub_224153D94();
      sub_224159E3C(a2, (const char *)v80, (uint64_t)"trying to cast camera");
    }
    v12 = v11;
    v86 = v11[1];
    *(_QWORD *)&v87 = *((_QWORD *)v11 + 11);
    v13 = v87;
    v14 = (char *)operator new(0x78uLL);
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = &off_24EC6CE00;
    v15 = v12[1];
    *((_QWORD *)v14 + 4) = &off_24EC20868;
    *(_OWORD *)(v14 + 40) = v15;
    *(_OWORD *)(v14 + 56) = v12[2];
    v16 = v12[3];
    v17 = v12[4];
    *((_DWORD *)v14 + 26) = *((_DWORD *)v12 + 20);
    *(_OWORD *)(v14 + 88) = v17;
    *(_OWORD *)(v14 + 72) = v16;
    *((_QWORD *)v14 + 14) = v13;
    *((_QWORD *)v14 + 3) = &off_24EC207B8;
    *((_QWORD *)&v87 + 1) = v14 + 24;
    *(_QWORD *)&v88 = v14;
    sub_22414FE88(v4, (uint64_t)&v86);
    v18 = (std::__shared_weak_count *)v88;
    if ((_QWORD)v88)
    {
      v19 = (unint64_t *)(v88 + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
LABEL_39:
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  else
  {
    if (v7 != 12)
      v9 = 1;
    if ((v9 & 1) != 0)
    {
      if (v5)
        v21 = 0;
      else
        v21 = v6 == 1;
      v22 = !v21;
      if (v21 && v7 == 11)
      {
        *(_DWORD *)a1 = 10;
        v23 = *(const void **)(a2 + 8);
        if (!v23
          || (v24 = __dynamic_cast(v23, (const struct __class_type_info *)&unk_24EC6D060, (const struct __class_type_info *)&unk_24EC376B8, 0)) == 0)
        {
          v82 = sub_224154B74();
          sub_224159E3C(a2, (const char *)v82, (uint64_t)"trying to cast camera");
        }
        v25 = v24;
        v86 = v24[1];
        *(_QWORD *)&v87 = *((_QWORD *)v24 + 11);
        v26 = v87;
        v27 = (char *)operator new(0x78uLL);
        *((_QWORD *)v27 + 1) = 0;
        *((_QWORD *)v27 + 2) = 0;
        *(_QWORD *)v27 = &off_24EC6CE50;
        v28 = v25[1];
        *((_QWORD *)v27 + 4) = &off_24EC20868;
        *(_OWORD *)(v27 + 40) = v28;
        *(_OWORD *)(v27 + 56) = v25[2];
        v29 = v25[3];
        v30 = v25[4];
        *((_DWORD *)v27 + 26) = *((_DWORD *)v25 + 20);
        *(_OWORD *)(v27 + 88) = v30;
        *(_OWORD *)(v27 + 72) = v29;
        *((_QWORD *)v27 + 14) = v26;
        *((_QWORD *)v27 + 3) = &off_24EC37688;
        *((_QWORD *)&v87 + 1) = v27 + 24;
        *(_QWORD *)&v88 = v27;
        sub_224150150(v4, (uint64_t)&v86);
        v18 = (std::__shared_weak_count *)v88;
        if ((_QWORD)v88)
        {
          v31 = (unint64_t *)(v88 + 8);
          do
            v20 = __ldaxr(v31);
          while (__stlxr(v20 - 1, v31));
          goto LABEL_39;
        }
      }
      else
      {
        if (v7 != 12)
          v22 = 1;
        if ((v22 & 1) != 0)
        {
          v46 = v5 == 1 && v6 == 2;
          v47 = !v46;
          if (v46 && v7 == 11)
          {
            *(_DWORD *)a1 = 100;
            v48 = *(const void **)(a2 + 8);
            if (!v48
              || (v49 = __dynamic_cast(v48, (const struct __class_type_info *)&unk_24EC6D060, (const struct __class_type_info *)&unk_24EC6C650, 0)) == 0)
            {
              v84 = sub_224155954();
              sub_224159E3C(a2, (const char *)v84, (uint64_t)"trying to cast camera");
            }
            v50 = v49;
            v51 = v49[1];
            v52 = v49[2];
            LODWORD(v88) = *((_DWORD *)v49 + 12);
            v86 = v51;
            v87 = v52;
            *(_QWORD *)((char *)&v88 + 4) = *((_QWORD *)v49 + 15);
            v53 = *(_QWORD *)((char *)&v88 + 4);
            v54 = (char *)operator new(0x98uLL);
            *((_QWORD *)v54 + 1) = 0;
            *((_QWORD *)v54 + 2) = 0;
            *(_QWORD *)v54 = &off_24EC6CB38;
            v55 = *(_QWORD *)((char *)v50 + 52);
            v56 = *((_WORD *)v50 + 56);
            v57 = v50[1];
            *((_QWORD *)v54 + 4) = &off_24EC6C678;
            *(_OWORD *)(v54 + 40) = v57;
            v58 = v50[2];
            *((_DWORD *)v54 + 18) = *((_DWORD *)v50 + 12);
            *(_OWORD *)(v54 + 56) = v58;
            *(_QWORD *)(v54 + 76) = v55;
            *(_OWORD *)(v54 + 84) = *(_OWORD *)((char *)v50 + 60);
            v59 = *(_OWORD *)((char *)v50 + 76);
            v60 = *(_OWORD *)((char *)v50 + 92);
            *((_DWORD *)v54 + 33) = *((_DWORD *)v50 + 27);
            *(_OWORD *)(v54 + 116) = v60;
            *(_OWORD *)(v54 + 100) = v59;
            *((_WORD *)v54 + 68) = v56;
            *((_QWORD *)v54 + 18) = v53;
            *((_QWORD *)v54 + 3) = &off_24EC6C620;
            v89 = (std::__shared_weak_count *)(v54 + 24);
            v90 = (std::__shared_weak_count *)v54;
            sub_224150418(v4, (uint64_t)&v86);
            v18 = v90;
            if (v90)
            {
              p_shared_owners = (unint64_t *)&v90->__shared_owners_;
              do
                v20 = __ldaxr(p_shared_owners);
              while (__stlxr(v20 - 1, p_shared_owners));
              goto LABEL_39;
            }
          }
          else
          {
            if (v7 != 12)
              v47 = 1;
            if ((v47 & 1) != 0)
            {
              if (v5)
                v75 = 0;
              else
                v75 = v6 == 2;
              v76 = !v75;
              if (v75 && v7 == 11)
              {
                *(_DWORD *)a1 = 110;
                v77 = sub_224150744(a2);
                sub_224157904((uint64_t)&v86, (uint64_t)v77);
                sub_2241507A8(v4, (uint64_t)&v86);
                sub_22415773C((uint64_t)&v86);
              }
              else
              {
                if (v7 != 12)
                  v76 = 1;
                if ((v76 & 1) != 0)
                {
                  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                  exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
                  __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
                }
                *(_DWORD *)a1 = 111;
                v79 = sub_22415090C(a2);
                sub_224157ABC((uint64_t)&v86, (uint64_t)v79);
                sub_224150970(v4, (uint64_t)&v86);
                sub_22415789C((uint64_t)&v86);
              }
            }
            else
            {
              *(_DWORD *)a1 = 101;
              v78 = sub_22415057C(a2);
              sub_2241579D4((uint64_t)&v86, (uint64_t)v78);
              sub_2241505E0(v4, (uint64_t)&v86);
              sub_22415789C((uint64_t)&v86);
            }
          }
        }
        else
        {
          *(_DWORD *)a1 = 11;
          v62 = *(const void **)(a2 + 8);
          if (!v62
            || (v63 = __dynamic_cast(v62, (const struct __class_type_info *)&unk_24EC6D060, (const struct __class_type_info *)&unk_24EC6C9D0, 0)) == 0)
          {
            v83 = sub_224155264();
            sub_224159E3C(a2, (const char *)v83, (uint64_t)"trying to cast camera");
          }
          v64 = v63;
          v65 = v63 + 1;
          v66 = v63 + 2;
          v67 = v63[2];
          v86 = v63[1];
          v87 = v67;
          *(_QWORD *)&v88 = *((_QWORD *)v63 + 19);
          v68 = v88;
          v69 = (char *)operator new(0xB8uLL);
          *((_QWORD *)v69 + 1) = 0;
          *((_QWORD *)v69 + 2) = 0;
          *(_QWORD *)v69 = &off_24EC6CEF0;
          *((_QWORD *)v69 + 4) = &off_24EC35EF0;
          *(_OWORD *)(v69 + 40) = *v65;
          *(_OWORD *)(v69 + 56) = *v66;
          v70 = v64[3];
          *(_OWORD *)(v69 + 88) = v64[4];
          *(_OWORD *)(v69 + 72) = v70;
          v71 = v64[6];
          v72 = v64[7];
          v73 = v64[8];
          *((_QWORD *)v69 + 21) = *((_QWORD *)v64 + 18);
          *(_OWORD *)(v69 + 152) = v73;
          *(_OWORD *)(v69 + 136) = v72;
          *(_OWORD *)(v69 + 120) = v71;
          *(_OWORD *)(v69 + 104) = v64[5];
          *((_QWORD *)v69 + 22) = v68;
          *((_QWORD *)v69 + 3) = &off_24EC6C9A0;
          *((_QWORD *)&v88 + 1) = v69 + 24;
          v89 = (std::__shared_weak_count *)v69;
          sub_2241502B4(v4, (uint64_t)&v86);
          v18 = v89;
          if (v89)
          {
            v74 = (unint64_t *)&v89->__shared_owners_;
            do
              v20 = __ldaxr(v74);
            while (__stlxr(v20 - 1, v74));
            goto LABEL_39;
          }
        }
      }
    }
    else
    {
      *(_DWORD *)a1 = 1;
      v32 = *(const void **)(a2 + 8);
      if (!v32
        || (v33 = __dynamic_cast(v32, (const struct __class_type_info *)&unk_24EC6D060, (const struct __class_type_info *)&unk_24EC35FC0, 0)) == 0)
      {
        v81 = sub_224154484();
        sub_224159E3C(a2, (const char *)v81, (uint64_t)"trying to cast camera");
      }
      v34 = v33;
      v35 = v33 + 1;
      v36 = v33 + 2;
      v37 = v33[2];
      v86 = v33[1];
      v87 = v37;
      *(_QWORD *)&v88 = *((_QWORD *)v33 + 19);
      v38 = v88;
      v39 = (char *)operator new(0xB8uLL);
      *((_QWORD *)v39 + 1) = 0;
      *((_QWORD *)v39 + 2) = 0;
      *(_QWORD *)v39 = &off_24EC6CEA0;
      *((_QWORD *)v39 + 4) = &off_24EC35EF0;
      *(_OWORD *)(v39 + 40) = *v35;
      *(_OWORD *)(v39 + 56) = *v36;
      v40 = v34[3];
      *(_OWORD *)(v39 + 88) = v34[4];
      *(_OWORD *)(v39 + 72) = v40;
      v41 = v34[6];
      v42 = v34[7];
      v43 = v34[8];
      *((_QWORD *)v39 + 21) = *((_QWORD *)v34 + 18);
      *(_OWORD *)(v39 + 152) = v43;
      *(_OWORD *)(v39 + 136) = v42;
      *(_OWORD *)(v39 + 120) = v41;
      *(_OWORD *)(v39 + 104) = v34[5];
      *((_QWORD *)v39 + 22) = v38;
      *((_QWORD *)v39 + 3) = &off_24EC35EB0;
      *((_QWORD *)&v88 + 1) = v39 + 24;
      v89 = (std::__shared_weak_count *)v39;
      sub_22414FFEC(v4, (uint64_t)&v86);
      v18 = v89;
      if (v89)
      {
        v44 = (unint64_t *)&v89->__shared_owners_;
        do
          v20 = __ldaxr(v44);
        while (__stlxr(v20 - 1, v44));
        goto LABEL_39;
      }
    }
  }
  return a1;
}

void sub_22414FC9C(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_2232178D4(v1);
  _Unwind_Resume(a1);
}

void sub_22414FCB0(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  void *v2;

  __cxa_free_exception(v2);
  sub_2232178D4(v1);
  _Unwind_Resume(a1);
}

void sub_22414FCCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (**v9)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_22415789C((uint64_t)&a9);
  sub_2232178D4(v9);
  _Unwind_Resume(a1);
}

void sub_22414FCE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (**v9)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_22415773C((uint64_t)&a9);
  sub_2232178D4(v9);
  _Unwind_Resume(a1);
}

void sub_22414FD04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (**v9)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_22415789C((uint64_t)&a9);
  sub_2232178D4(v9);
  _Unwind_Resume(a1);
}

void sub_22414FD20(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_2232178D4(v1);
  _Unwind_Resume(a1);
}

void sub_22414FD34(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_2232178D4(v1);
  _Unwind_Resume(a1);
}

void sub_22414FD48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (**v9)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_22415773C((uint64_t)&a9);
  sub_2232178D4(v9);
  _Unwind_Resume(a1);
}

void sub_22414FD64(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_2232178D4(v1);
  _Unwind_Resume(a1);
}

void sub_22414FD78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (**v9)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_224158980((uint64_t)&a9);
  sub_2232178D4(v9);
  _Unwind_Resume(a1);
}

void sub_22414FD94(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_2232178D4(v1);
  _Unwind_Resume(a1);
}

void sub_22414FDA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (**v9)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_22365B530((uint64_t)&a9);
  sub_2232178D4(v9);
  _Unwind_Resume(a1);
}

void sub_22414FDC4(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_2232178D4(v1);
  _Unwind_Resume(a1);
}

void sub_22414FDD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (**v9)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_224158980((uint64_t)&a9);
  sub_2232178D4(v9);
  _Unwind_Resume(a1);
}

void sub_22414FDF4(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_2232178D4(v1);
  _Unwind_Resume(a1);
}

void sub_22414FE08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (**v9)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_22365B530((uint64_t)&a9);
  sub_2232178D4(v9);
  _Unwind_Resume(a1);
}

void sub_22414FE24(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_2232178D4(v1);
  _Unwind_Resume(a1);
}

void sub_22414FE38(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_2232178D4(v1);
  _Unwind_Resume(a1);
}

void sub_22414FE4C(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_2232178D4(v1);
  _Unwind_Resume(a1);
}

void sub_22414FE60(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_2232178D4(v1);
  _Unwind_Resume(a1);
}

void sub_22414FE74(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_2232178D4(v1);
  _Unwind_Resume(a1);
}

void (**sub_22414FE88(void (**a1)(int a1), uint64_t a2))(int a1)
{
  char *v4;
  void (*v5)(int);
  void (*v6)(int);
  _QWORD v8[4];
  _QWORD v9[5];

  v9[4] = *MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0x28uLL);
  *(_OWORD *)v4 = *(_OWORD *)a2;
  *((_QWORD *)v4 + 2) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  v5 = sub_2241542E8;
  v8[0] = sub_2241542E8;
  v8[1] = v4;
  if (v8 == a1)
    goto LABEL_6;
  v6 = *a1;
  if (!*a1)
  {
    *a1 = sub_2241542E8;
    a1[1] = (void (*)(int))v4;
    return a1;
  }
  v9[0] = 0;
  v9[1] = 0;
  ((void (*)(uint64_t, void (**)(int), _QWORD *, _QWORD, _QWORD))v6)(2, a1, v9, 0, 0);
  ((void (*)(uint64_t, _QWORD *, void (**)(int), _QWORD, _QWORD))v8[0])(2, v8, a1, 0, 0);
  ((void (*)(uint64_t, _QWORD *, _QWORD *, _QWORD, _QWORD))v9[0])(2, v9, v8, 0, 0);
  if (v9[0])
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v9[0])(0, v9, 0, 0, 0);
  v5 = (void (*)(int))v8[0];
  if (v8[0])
LABEL_6:
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v5)(0, v8, 0, 0, 0);
  return a1;
}

void sub_22414FFD4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void (**sub_22414FFEC(void (**a1)(int a1), uint64_t a2))(int a1)
{
  _OWORD *v4;
  __int128 v5;
  void (*v6)(int);
  void (*v7)(int);
  _QWORD v9[4];
  _QWORD v10[5];

  v10[4] = *MEMORY[0x24BDAC8D0];
  v4 = operator new(0x38uLL);
  v5 = *(_OWORD *)(a2 + 16);
  *v4 = *(_OWORD *)a2;
  v4[1] = v5;
  *((_QWORD *)v4 + 4) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)((char *)v4 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  v6 = sub_2241549D8;
  v9[0] = sub_2241549D8;
  v9[1] = v4;
  if (v9 == a1)
    goto LABEL_6;
  v7 = *a1;
  if (!*a1)
  {
    *a1 = sub_2241549D8;
    a1[1] = (void (*)(int))v4;
    return a1;
  }
  v10[0] = 0;
  v10[1] = 0;
  ((void (*)(uint64_t, void (**)(int), _QWORD *, _QWORD, _QWORD))v7)(2, a1, v10, 0, 0);
  ((void (*)(uint64_t, _QWORD *, void (**)(int), _QWORD, _QWORD))v9[0])(2, v9, a1, 0, 0);
  ((void (*)(uint64_t, _QWORD *, _QWORD *, _QWORD, _QWORD))v10[0])(2, v10, v9, 0, 0);
  if (v10[0])
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v10[0])(0, v10, 0, 0, 0);
  v6 = (void (*)(int))v9[0];
  if (v9[0])
LABEL_6:
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v6)(0, v9, 0, 0, 0);
  return a1;
}

void sub_224150138(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void (**sub_224150150(void (**a1)(int a1), uint64_t a2))(int a1)
{
  char *v4;
  void (*v5)(int);
  void (*v6)(int);
  _QWORD v8[4];
  _QWORD v9[5];

  v9[4] = *MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0x28uLL);
  *(_OWORD *)v4 = *(_OWORD *)a2;
  *((_QWORD *)v4 + 2) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  v5 = sub_2241550C8;
  v8[0] = sub_2241550C8;
  v8[1] = v4;
  if (v8 == a1)
    goto LABEL_6;
  v6 = *a1;
  if (!*a1)
  {
    *a1 = sub_2241550C8;
    a1[1] = (void (*)(int))v4;
    return a1;
  }
  v9[0] = 0;
  v9[1] = 0;
  ((void (*)(uint64_t, void (**)(int), _QWORD *, _QWORD, _QWORD))v6)(2, a1, v9, 0, 0);
  ((void (*)(uint64_t, _QWORD *, void (**)(int), _QWORD, _QWORD))v8[0])(2, v8, a1, 0, 0);
  ((void (*)(uint64_t, _QWORD *, _QWORD *, _QWORD, _QWORD))v9[0])(2, v9, v8, 0, 0);
  if (v9[0])
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v9[0])(0, v9, 0, 0, 0);
  v5 = (void (*)(int))v8[0];
  if (v8[0])
LABEL_6:
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v5)(0, v8, 0, 0, 0);
  return a1;
}

void sub_22415029C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void (**sub_2241502B4(void (**a1)(int a1), uint64_t a2))(int a1)
{
  _OWORD *v4;
  __int128 v5;
  void (*v6)(int);
  void (*v7)(int);
  _QWORD v9[4];
  _QWORD v10[5];

  v10[4] = *MEMORY[0x24BDAC8D0];
  v4 = operator new(0x38uLL);
  v5 = *(_OWORD *)(a2 + 16);
  *v4 = *(_OWORD *)a2;
  v4[1] = v5;
  *((_QWORD *)v4 + 4) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)((char *)v4 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  v6 = sub_2241557B8;
  v9[0] = sub_2241557B8;
  v9[1] = v4;
  if (v9 == a1)
    goto LABEL_6;
  v7 = *a1;
  if (!*a1)
  {
    *a1 = sub_2241557B8;
    a1[1] = (void (*)(int))v4;
    return a1;
  }
  v10[0] = 0;
  v10[1] = 0;
  ((void (*)(uint64_t, void (**)(int), _QWORD *, _QWORD, _QWORD))v7)(2, a1, v10, 0, 0);
  ((void (*)(uint64_t, _QWORD *, void (**)(int), _QWORD, _QWORD))v9[0])(2, v9, a1, 0, 0);
  ((void (*)(uint64_t, _QWORD *, _QWORD *, _QWORD, _QWORD))v10[0])(2, v10, v9, 0, 0);
  if (v10[0])
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v10[0])(0, v10, 0, 0, 0);
  v6 = (void (*)(int))v9[0];
  if (v9[0])
LABEL_6:
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v6)(0, v9, 0, 0, 0);
  return a1;
}

void sub_224150400(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void (**sub_224150418(void (**a1)(int a1), uint64_t a2))(int a1)
{
  _OWORD *v4;
  __int128 v5;
  void (*v6)(int);
  void (*v7)(int);
  _QWORD v9[4];
  _QWORD v10[5];

  v10[4] = *MEMORY[0x24BDAC8D0];
  v4 = operator new(0x40uLL);
  v5 = *(_OWORD *)(a2 + 16);
  *v4 = *(_OWORD *)a2;
  v4[1] = v5;
  *(_OWORD *)((char *)v4 + 28) = *(_OWORD *)(a2 + 28);
  v4[3] = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v6 = sub_224155D04;
  v9[0] = sub_224155D04;
  v9[1] = v4;
  if (v9 == a1)
    goto LABEL_6;
  v7 = *a1;
  if (!*a1)
  {
    *a1 = sub_224155D04;
    a1[1] = (void (*)(int))v4;
    return a1;
  }
  v10[0] = 0;
  v10[1] = 0;
  ((void (*)(uint64_t, void (**)(int), _QWORD *, _QWORD, _QWORD))v7)(2, a1, v10, 0, 0);
  ((void (*)(uint64_t, _QWORD *, void (**)(int), _QWORD, _QWORD))v9[0])(2, v9, a1, 0, 0);
  ((void (*)(uint64_t, _QWORD *, _QWORD *, _QWORD, _QWORD))v10[0])(2, v10, v9, 0, 0);
  if (v10[0])
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v10[0])(0, v10, 0, 0, 0);
  v6 = (void (*)(int))v9[0];
  if (v9[0])
LABEL_6:
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v6)(0, v9, 0, 0, 0);
  return a1;
}

void sub_224150564(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void *sub_22415057C(uint64_t a1)
{
  const void *v2;
  void *result;
  __int128 *v4;

  v2 = *(const void **)(a1 + 8);
  if (!v2
    || (result = __dynamic_cast(v2, (const struct __class_type_info *)&unk_24EC6D060, (const struct __class_type_info *)&unk_24EC6C810, 0)) == 0)
  {
    v4 = sub_224155F48();
    sub_224159E3C(a1, (const char *)v4, (uint64_t)"trying to cast camera");
  }
  return result;
}

void (**sub_2241505E0(void (**a1)(int a1), uint64_t a2))(int a1)
{
  void (*v4)(int);
  __int128 v5;
  __int128 v6;
  __int128 v7;
  void (*v8)(int);
  void (*v9)(int);
  _QWORD v11[4];
  _QWORD v12[5];

  v12[4] = *MEMORY[0x24BDAC8D0];
  v4 = (void (*)(int))operator new(0x60uLL);
  v5 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v4 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v4 + 3) = v5;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a2;
  *((_OWORD *)v4 + 1) = v6;
  v7 = *(_OWORD *)(a2 + 80);
  *((_OWORD *)v4 + 4) = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v4 + 5) = v7;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  v8 = sub_2241562F8;
  v11[0] = sub_2241562F8;
  v11[1] = v4;
  if (v11 == a1)
    goto LABEL_6;
  v9 = *a1;
  if (!*a1)
  {
    *a1 = sub_2241562F8;
    a1[1] = v4;
    return a1;
  }
  v12[0] = 0;
  v12[1] = 0;
  ((void (*)(uint64_t, void (**)(int), _QWORD *, _QWORD, _QWORD))v9)(2, a1, v12, 0, 0);
  ((void (*)(uint64_t, _QWORD *, void (**)(int), _QWORD, _QWORD))v11[0])(2, v11, a1, 0, 0);
  ((void (*)(uint64_t, _QWORD *, _QWORD *, _QWORD, _QWORD))v12[0])(2, v12, v11, 0, 0);
  if (v12[0])
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v12[0])(0, v12, 0, 0, 0);
  v8 = (void (*)(int))v11[0];
  if (v11[0])
LABEL_6:
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v8)(0, v11, 0, 0, 0);
  return a1;
}

void sub_22415072C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void *sub_224150744(uint64_t a1)
{
  const void *v2;
  void *result;
  __int128 *v4;

  v2 = *(const void **)(a1 + 8);
  if (!v2
    || (result = __dynamic_cast(v2, (const struct __class_type_info *)&unk_24EC6D060, (const struct __class_type_info *)&unk_24EC6C760, 0)) == 0)
  {
    v4 = sub_224156590();
    sub_224159E3C(a1, (const char *)v4, (uint64_t)"trying to cast camera");
  }
  return result;
}

void (**sub_2241507A8(void (**a1)(int a1), uint64_t a2))(int a1)
{
  _OWORD *v4;
  __int128 v5;
  void (*v6)(int);
  void (*v7)(int);
  _QWORD v9[4];
  _QWORD v10[5];

  v10[4] = *MEMORY[0x24BDAC8D0];
  v4 = operator new(0x40uLL);
  v5 = *(_OWORD *)(a2 + 16);
  *v4 = *(_OWORD *)a2;
  v4[1] = v5;
  *(_OWORD *)((char *)v4 + 28) = *(_OWORD *)(a2 + 28);
  v4[3] = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v6 = sub_224156940;
  v9[0] = sub_224156940;
  v9[1] = v4;
  if (v9 == a1)
    goto LABEL_6;
  v7 = *a1;
  if (!*a1)
  {
    *a1 = sub_224156940;
    a1[1] = (void (*)(int))v4;
    return a1;
  }
  v10[0] = 0;
  v10[1] = 0;
  ((void (*)(uint64_t, void (**)(int), _QWORD *, _QWORD, _QWORD))v7)(2, a1, v10, 0, 0);
  ((void (*)(uint64_t, _QWORD *, void (**)(int), _QWORD, _QWORD))v9[0])(2, v9, a1, 0, 0);
  ((void (*)(uint64_t, _QWORD *, _QWORD *, _QWORD, _QWORD))v10[0])(2, v10, v9, 0, 0);
  if (v10[0])
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v10[0])(0, v10, 0, 0, 0);
  v6 = (void (*)(int))v9[0];
  if (v9[0])
LABEL_6:
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v6)(0, v9, 0, 0, 0);
  return a1;
}

void sub_2241508F4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void *sub_22415090C(uint64_t a1)
{
  const void *v2;
  void *result;
  __int128 *v4;

  v2 = *(const void **)(a1 + 8);
  if (!v2
    || (result = __dynamic_cast(v2, (const struct __class_type_info *)&unk_24EC6D060, (const struct __class_type_info *)&unk_24EC6C920, 0)) == 0)
  {
    v4 = sub_224156B84();
    sub_224159E3C(a1, (const char *)v4, (uint64_t)"trying to cast camera");
  }
  return result;
}

void (**sub_224150970(void (**a1)(int a1), uint64_t a2))(int a1)
{
  void (*v4)(int);
  __int128 v5;
  __int128 v6;
  __int128 v7;
  void (*v8)(int);
  void (*v9)(int);
  _QWORD v11[4];
  _QWORD v12[5];

  v12[4] = *MEMORY[0x24BDAC8D0];
  v4 = (void (*)(int))operator new(0x60uLL);
  v5 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v4 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v4 + 3) = v5;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a2;
  *((_OWORD *)v4 + 1) = v6;
  v7 = *(_OWORD *)(a2 + 80);
  *((_OWORD *)v4 + 4) = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v4 + 5) = v7;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  v8 = sub_224156F34;
  v11[0] = sub_224156F34;
  v11[1] = v4;
  if (v11 == a1)
    goto LABEL_6;
  v9 = *a1;
  if (!*a1)
  {
    *a1 = sub_224156F34;
    a1[1] = v4;
    return a1;
  }
  v12[0] = 0;
  v12[1] = 0;
  ((void (*)(uint64_t, void (**)(int), _QWORD *, _QWORD, _QWORD))v9)(2, a1, v12, 0, 0);
  ((void (*)(uint64_t, _QWORD *, void (**)(int), _QWORD, _QWORD))v11[0])(2, v11, a1, 0, 0);
  ((void (*)(uint64_t, _QWORD *, _QWORD *, _QWORD, _QWORD))v12[0])(2, v12, v11, 0, 0);
  if (v12[0])
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v12[0])(0, v12, 0, 0, 0);
  v8 = (void (*)(int))v11[0];
  if (v11[0])
LABEL_6:
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v8)(0, v11, 0, 0, 0);
  return a1;
}

void sub_224150ABC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_224150AD4(int *a1@<X0>, _QWORD *a2@<X8>)
{
  int v3;
  uint64_t (*v4)(uint64_t, uint64_t, _QWORD, void *, void *);
  float32x2_t *v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v15;
  int32x2_t v16;
  int8x16_t v17;
  float32x2_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  int v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  std::__shared_weak_count_vtbl *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  std::__shared_weak_count_vtbl *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t (*v61)(uint64_t, uint64_t, _QWORD, void *, void *);
  float32x2_t *v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x2_t v65;
  float32x2_t v66;
  float32x2_t v68;
  int32x2_t v69;
  int8x16_t v70;
  float32x2_t v71;
  unint64_t *v72;
  int v73;
  __int128 v74;
  uint64_t v75;
  unint64_t v76;

  v3 = *a1;
  switch(v3)
  {
    case 0:
      v4 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, void *, void *))*((_QWORD *)a1 + 1);
      if (!v4)
        goto LABEL_30;
      v5 = (float32x2_t *)v4(3, (uint64_t)(a1 + 2), 0, &unk_24EC682D8, &unk_224697234);
      if (!v5)
        goto LABEL_30;
      v6 = v5[2];
      v7 = v5[3];
      v8 = *v5;
      v9 = v5[1];
      __asm { FMOV            V2.2S, #1.0 }
      v15 = vdiv_f32(_D2, *v5);
      v16 = vzip1_s32((int32x2_t)*v5, (int32x2_t)v9);
      v17.i64[0] = v16.u32[0];
      v17.i64[1] = v16.u32[1];
      *(int8x16_t *)(*(_QWORD *)&v7 + 16) = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)*v5, (int32x2_t)v9), 0x20uLL), v17);
      *(float32x2_t *)(*(_QWORD *)&v7 + 32) = v15;
      *(float32x2_t *)(*(_QWORD *)&v7 + 40) = vmul_f32(v15, vneg_f32(v9));
      *(_DWORD *)(*(_QWORD *)&v7 + 48) = v8.i32[0];
      *(_QWORD *)(*(_QWORD *)&v7 + 56) = 0;
      *(_DWORD *)(*(_QWORD *)&v7 + 52) = 0;
      *(_DWORD *)(*(_QWORD *)&v7 + 64) = v8.i32[1];
      *(_DWORD *)(*(_QWORD *)&v7 + 68) = 0;
      *(float32x2_t *)(*(_QWORD *)&v7 + 72) = v9;
      *(_DWORD *)(*(_QWORD *)&v7 + 80) = 1065353216;
      *(float32x2_t *)(*(_QWORD *)&v7 + 88) = v6;
      v18 = v5[3];
      v19 = (std::__shared_weak_count *)operator new(0x78uLL);
      v19->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      v19->__shared_weak_owners_ = 0;
      v19->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC28318;
      v19[1].__shared_owners_ = (uint64_t)&off_24EC20868;
      v19[1].__shared_weak_owners_ = *(_QWORD *)(*(_QWORD *)&v18 + 16);
      v19[2].__vftable = *(std::__shared_weak_count_vtbl **)(*(_QWORD *)&v18 + 24);
      *(_OWORD *)&v19[2].__shared_owners_ = *(_OWORD *)(*(_QWORD *)&v18 + 32);
      v21 = *(_DWORD *)(*(_QWORD *)&v18 + 80);
      v22 = *(_OWORD *)(*(_QWORD *)&v18 + 64);
      v19[3].std::__shared_count = *(std::__shared_count *)(*(_QWORD *)&v18 + 48);
      LODWORD(v19[4].__shared_owners_) = v21;
      *(_OWORD *)&v19[3].__shared_weak_owners_ = v22;
      v23 = *(_QWORD *)(*(_QWORD *)&v18 + 88);
      v19[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24EC207B8;
      v19[4].__shared_weak_owners_ = v23;
      *a2 = &off_24EC6D000;
      a2[1] = v19 + 1;
      a2[2] = v19;
      do
        v24 = __ldxr(p_shared_owners);
      while (__stxr(v24 + 1, p_shared_owners));
      do
        v25 = __ldaxr(p_shared_owners);
      while (__stlxr(v25 - 1, p_shared_owners));
      goto LABEL_28;
    case 1:
      v44 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, void *, void *))*((_QWORD *)a1 + 1);
      if (!v44)
        goto LABEL_30;
      v45 = v44(3, (uint64_t)(a1 + 2), 0, &unk_24EC68328, &unk_224697308);
      if (!v45)
        goto LABEL_30;
      v46 = *(double *)v45;
      v47 = *(double *)(v45 + 8);
      v48 = *(double *)(v45 + 16);
      v49 = *(double *)(v45 + 24);
      v50 = 1.0 / *(double *)v45;
      v51 = *(_QWORD *)(v45 + 32);
      v52 = *(_QWORD *)(v45 + 40);
      *(_QWORD *)(v52 + 16) = *(_QWORD *)v45;
      *(double *)(v52 + 24) = v47;
      *(double *)(v52 + 32) = v48;
      *(double *)(v52 + 40) = v49;
      *(double *)(v52 + 48) = v50;
      *(double *)(v52 + 56) = 1.0 / v47;
      *(double *)(v52 + 64) = -(v48 * v50);
      *(double *)(v52 + 72) = -(v49 * (1.0 / v47));
      *(double *)(v52 + 80) = v46;
      *(_QWORD *)(v52 + 96) = 0;
      *(_QWORD *)(v52 + 104) = 0;
      *(_QWORD *)(v52 + 88) = 0;
      *(double *)(v52 + 112) = v47;
      *(_QWORD *)(v52 + 120) = 0;
      *(double *)(v52 + 128) = v48;
      *(double *)(v52 + 136) = v49;
      *(_QWORD *)(v52 + 144) = 0x3FF0000000000000;
      *(_QWORD *)(v52 + 152) = v51;
      v53 = *(_QWORD *)(v45 + 40);
      v19 = (std::__shared_weak_count *)operator new(0xB8uLL);
      v19->__shared_owners_ = 0;
      v54 = (unint64_t *)&v19->__shared_owners_;
      v19->__shared_weak_owners_ = 0;
      v19->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC35F68;
      v19[1].__shared_owners_ = (uint64_t)&off_24EC35EF0;
      *(_OWORD *)&v19[1].__shared_weak_owners_ = *(_OWORD *)(v53 + 16);
      *(_OWORD *)&v19[2].__shared_owners_ = *(_OWORD *)(v53 + 32);
      v55 = *(_OWORD *)(v53 + 64);
      v19[3].std::__shared_count = *(std::__shared_count *)(v53 + 48);
      *(_OWORD *)&v19[3].__shared_weak_owners_ = v55;
      *(_OWORD *)&v19[4].__shared_owners_ = *(_OWORD *)(v53 + 80);
      v57 = *(_OWORD *)(v53 + 112);
      v56 = *(_OWORD *)(v53 + 128);
      v58 = *(std::__shared_weak_count_vtbl **)(v53 + 144);
      v19[5].std::__shared_count = *(std::__shared_count *)(v53 + 96);
      v19[7].__vftable = v58;
      *(_OWORD *)&v19[6].__shared_owners_ = v56;
      *(_OWORD *)&v19[5].__shared_weak_owners_ = v57;
      v59 = *(_QWORD *)(v53 + 152);
      v19[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24EC35EB0;
      v19[7].__shared_owners_ = v59;
      *a2 = &off_24EC6D000;
      a2[1] = v19 + 1;
      a2[2] = v19;
      do
        v60 = __ldxr(v54);
      while (__stxr(v60 + 1, v54));
      do
        v25 = __ldaxr(v54);
      while (__stlxr(v25 - 1, v54));
      goto LABEL_28;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      __break(1u);
      return;
    case 10:
      v61 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, void *, void *))*((_QWORD *)a1 + 1);
      if (!v61)
        goto LABEL_30;
      v62 = (float32x2_t *)v61(3, (uint64_t)(a1 + 2), 0, &unk_24EC68378, &unk_2246973DC);
      if (!v62)
        goto LABEL_30;
      v63 = v62[2];
      v64 = v62[3];
      v65 = *v62;
      v66 = v62[1];
      __asm { FMOV            V2.2S, #1.0 }
      v68 = vdiv_f32(_D2, *v62);
      v69 = vzip1_s32((int32x2_t)*v62, (int32x2_t)v66);
      v70.i64[0] = v69.u32[0];
      v70.i64[1] = v69.u32[1];
      *(int8x16_t *)(*(_QWORD *)&v64 + 16) = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)*v62, (int32x2_t)v66), 0x20uLL), v70);
      *(float32x2_t *)(*(_QWORD *)&v64 + 32) = v68;
      *(float32x2_t *)(*(_QWORD *)&v64 + 40) = vmul_f32(v68, vneg_f32(v66));
      *(_DWORD *)(*(_QWORD *)&v64 + 48) = v65.i32[0];
      *(_QWORD *)(*(_QWORD *)&v64 + 56) = 0;
      *(_DWORD *)(*(_QWORD *)&v64 + 52) = 0;
      *(_DWORD *)(*(_QWORD *)&v64 + 64) = v65.i32[1];
      *(_DWORD *)(*(_QWORD *)&v64 + 68) = 0;
      *(float32x2_t *)(*(_QWORD *)&v64 + 72) = v66;
      *(_DWORD *)(*(_QWORD *)&v64 + 80) = 1065353216;
      *(float32x2_t *)(*(_QWORD *)&v64 + 88) = v63;
      v71 = v62[3];
      v19 = (std::__shared_weak_count *)operator new(0x78uLL);
      v19->__shared_owners_ = 0;
      v72 = (unint64_t *)&v19->__shared_owners_;
      v19->__shared_weak_owners_ = 0;
      v19->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6C3E8;
      v19[1].__shared_owners_ = (uint64_t)&off_24EC20868;
      v19[1].__shared_weak_owners_ = *(_QWORD *)(*(_QWORD *)&v71 + 16);
      v19[2].__vftable = *(std::__shared_weak_count_vtbl **)(*(_QWORD *)&v71 + 24);
      *(_OWORD *)&v19[2].__shared_owners_ = *(_OWORD *)(*(_QWORD *)&v71 + 32);
      v73 = *(_DWORD *)(*(_QWORD *)&v71 + 80);
      v74 = *(_OWORD *)(*(_QWORD *)&v71 + 64);
      v19[3].std::__shared_count = *(std::__shared_count *)(*(_QWORD *)&v71 + 48);
      LODWORD(v19[4].__shared_owners_) = v73;
      *(_OWORD *)&v19[3].__shared_weak_owners_ = v74;
      v75 = *(_QWORD *)(*(_QWORD *)&v71 + 88);
      v19[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24EC37688;
      v19[4].__shared_weak_owners_ = v75;
      *a2 = &off_24EC6D000;
      a2[1] = v19 + 1;
      a2[2] = v19;
      do
        v76 = __ldxr(v72);
      while (__stxr(v76 + 1, v72));
      do
        v25 = __ldaxr(v72);
      while (__stlxr(v25 - 1, v72));
LABEL_28:
      if (v25)
        return;
      goto LABEL_16;
    case 11:
      v26 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, void *, void *))*((_QWORD *)a1 + 1);
      if (!v26 || (v27 = v26(3, (uint64_t)(a1 + 2), 0, &unk_24EC683C8, &unk_2246974B0)) == 0)
LABEL_30:
        sub_224071EE4();
      v28 = *(double *)v27;
      v29 = *(double *)(v27 + 8);
      v30 = *(double *)(v27 + 16);
      v31 = *(double *)(v27 + 24);
      v32 = 1.0 / *(double *)v27;
      v33 = *(_QWORD *)(v27 + 32);
      v34 = *(_QWORD *)(v27 + 40);
      *(_QWORD *)(v34 + 16) = *(_QWORD *)v27;
      *(double *)(v34 + 24) = v29;
      *(double *)(v34 + 32) = v30;
      *(double *)(v34 + 40) = v31;
      *(double *)(v34 + 48) = v32;
      *(double *)(v34 + 56) = 1.0 / v29;
      *(double *)(v34 + 64) = -(v30 * v32);
      *(double *)(v34 + 72) = -(v31 * (1.0 / v29));
      *(double *)(v34 + 80) = v28;
      *(_QWORD *)(v34 + 96) = 0;
      *(_QWORD *)(v34 + 104) = 0;
      *(_QWORD *)(v34 + 88) = 0;
      *(double *)(v34 + 112) = v29;
      *(_QWORD *)(v34 + 120) = 0;
      *(double *)(v34 + 128) = v30;
      *(double *)(v34 + 136) = v31;
      *(_QWORD *)(v34 + 144) = 0x3FF0000000000000;
      *(_QWORD *)(v34 + 152) = v33;
      v35 = *(_QWORD *)(v27 + 40);
      v19 = (std::__shared_weak_count *)operator new(0xB8uLL);
      v19->__shared_owners_ = 0;
      v36 = (unint64_t *)&v19->__shared_owners_;
      v19->__shared_weak_owners_ = 0;
      v19->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6C438;
      v19[1].__shared_owners_ = (uint64_t)&off_24EC35EF0;
      *(_OWORD *)&v19[1].__shared_weak_owners_ = *(_OWORD *)(v35 + 16);
      *(_OWORD *)&v19[2].__shared_owners_ = *(_OWORD *)(v35 + 32);
      v37 = *(_OWORD *)(v35 + 64);
      v19[3].std::__shared_count = *(std::__shared_count *)(v35 + 48);
      *(_OWORD *)&v19[3].__shared_weak_owners_ = v37;
      *(_OWORD *)&v19[4].__shared_owners_ = *(_OWORD *)(v35 + 80);
      v39 = *(_OWORD *)(v35 + 112);
      v38 = *(_OWORD *)(v35 + 128);
      v40 = *(std::__shared_weak_count_vtbl **)(v35 + 144);
      v19[5].std::__shared_count = *(std::__shared_count *)(v35 + 96);
      v19[7].__vftable = v40;
      *(_OWORD *)&v19[6].__shared_owners_ = v38;
      *(_OWORD *)&v19[5].__shared_weak_owners_ = v39;
      v41 = *(_QWORD *)(v35 + 152);
      v19[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6C9A0;
      v19[7].__shared_owners_ = v41;
      *a2 = &off_24EC6D000;
      a2[1] = v19 + 1;
      a2[2] = v19;
      do
        v42 = __ldxr(v36);
      while (__stxr(v42 + 1, v36));
      do
        v43 = __ldaxr(v36);
      while (__stlxr(v43 - 1, v36));
      if (!v43)
      {
LABEL_16:
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
      return;
    default:
      __asm { BR              X10 }
      return;
  }
}

void sub_224151490(void (**a1)(int a1))
{
  int v2;
  char *v3;
  int32x4_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  char *v8;
  int32x4_t v9;
  unint64_t *v10;
  char *v11;
  int64x2_t v12;
  unint64_t *v13;
  char *v14;
  int32x4_t v15;
  unint64_t *v16;
  char *v17;
  int64x2_t v18;
  unint64_t *v19;
  char *v20;
  int32x4_t v21;
  unint64_t *v22;
  char *v23;
  int64x2_t v24;
  unint64_t *v25;
  char *v26;
  int64x2_t v27;
  unint64_t *p_shared_owners;
  __int128 v29;
  _OWORD v30[2];
  __int128 v31;
  __int128 v32;
  char *v33;
  std::__shared_weak_count *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v2 = *(_DWORD *)a1;
  switch(v2)
  {
    case 0:
      v29 = 0uLL;
      *(_QWORD *)&v30[0] = 0;
      v8 = (char *)operator new(0x78uLL);
      *((_QWORD *)v8 + 1) = 0;
      *((_QWORD *)v8 + 2) = 0;
      *(_QWORD *)v8 = &off_24EC6CE00;
      *((_QWORD *)v8 + 5) = 0;
      *((_QWORD *)v8 + 6) = 0;
      *((_QWORD *)v8 + 4) = &off_24EC20868;
      v9 = vdupq_n_s32(0x7FC00000u);
      *(int32x4_t *)(v8 + 56) = v9;
      *(int32x4_t *)(v8 + 72) = v9;
      *(int32x4_t *)(v8 + 88) = v9;
      *((_DWORD *)v8 + 26) = 2143289344;
      *((_QWORD *)v8 + 14) = 0;
      *(_QWORD *)&v30[1] = v8;
      *((_QWORD *)v8 + 3) = &off_24EC207B8;
      *((_QWORD *)&v30[0] + 1) = v8 + 24;
      sub_22414FE88(a1 + 1, (uint64_t)&v29);
      v5 = *(std::__shared_weak_count **)&v30[1];
      if (*(_QWORD *)&v30[1])
      {
        v10 = (unint64_t *)(*(_QWORD *)&v30[1] + 8);
        do
          v7 = __ldaxr(v10);
        while (__stlxr(v7 - 1, v10));
        goto LABEL_35;
      }
      break;
    case 1:
      v29 = 0u;
      memset(v30, 0, 24);
      v11 = (char *)operator new(0xB8uLL);
      *((_QWORD *)v11 + 1) = 0;
      *((_QWORD *)v11 + 2) = 0;
      *(_QWORD *)v11 = &off_24EC6CEA0;
      v36 = 0u;
      *((_QWORD *)v11 + 5) = 0;
      *((_QWORD *)v11 + 6) = 0;
      *((_QWORD *)v11 + 4) = &off_24EC35EF0;
      *(_OWORD *)(v11 + 56) = v36;
      v12 = vdupq_n_s64(0x7FF8000000000000uLL);
      *(int64x2_t *)(v11 + 72) = v12;
      *(int64x2_t *)(v11 + 88) = v12;
      *(int64x2_t *)(v11 + 104) = v12;
      *(int64x2_t *)(v11 + 120) = v12;
      *(int64x2_t *)(v11 + 136) = v12;
      *(int64x2_t *)(v11 + 152) = v12;
      *((_QWORD *)v11 + 21) = 0x7FF8000000000000;
      *((_QWORD *)v11 + 22) = 0;
      *(_QWORD *)&v31 = v11;
      *((_QWORD *)v11 + 3) = &off_24EC35EB0;
      *((_QWORD *)&v30[1] + 1) = v11 + 24;
      sub_22414FFEC(a1 + 1, (uint64_t)&v29);
      v5 = (std::__shared_weak_count *)v31;
      if ((_QWORD)v31)
      {
        v13 = (unint64_t *)(v31 + 8);
        do
          v7 = __ldaxr(v13);
        while (__stlxr(v7 - 1, v13));
        goto LABEL_35;
      }
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return;
    case 10:
      v29 = 0uLL;
      *(_QWORD *)&v30[0] = 0;
      v14 = (char *)operator new(0x78uLL);
      *((_QWORD *)v14 + 1) = 0;
      *((_QWORD *)v14 + 2) = 0;
      *(_QWORD *)v14 = &off_24EC6CE50;
      *((_QWORD *)v14 + 5) = 0;
      *((_QWORD *)v14 + 6) = 0;
      *((_QWORD *)v14 + 4) = &off_24EC20868;
      v15 = vdupq_n_s32(0x7FC00000u);
      *(int32x4_t *)(v14 + 56) = v15;
      *(int32x4_t *)(v14 + 72) = v15;
      *(int32x4_t *)(v14 + 88) = v15;
      *((_DWORD *)v14 + 26) = 2143289344;
      *((_QWORD *)v14 + 14) = 0;
      *(_QWORD *)&v30[1] = v14;
      *((_QWORD *)v14 + 3) = &off_24EC37688;
      *((_QWORD *)&v30[0] + 1) = v14 + 24;
      sub_224150150(a1 + 1, (uint64_t)&v29);
      v5 = *(std::__shared_weak_count **)&v30[1];
      if (*(_QWORD *)&v30[1])
      {
        v16 = (unint64_t *)(*(_QWORD *)&v30[1] + 8);
        do
          v7 = __ldaxr(v16);
        while (__stlxr(v7 - 1, v16));
        goto LABEL_35;
      }
      break;
    case 11:
      v29 = 0u;
      memset(v30, 0, 24);
      v17 = (char *)operator new(0xB8uLL);
      *((_QWORD *)v17 + 1) = 0;
      *((_QWORD *)v17 + 2) = 0;
      *(_QWORD *)v17 = &off_24EC6CEF0;
      v36 = 0u;
      *((_QWORD *)v17 + 5) = 0;
      *((_QWORD *)v17 + 6) = 0;
      *((_QWORD *)v17 + 4) = &off_24EC35EF0;
      *(_OWORD *)(v17 + 56) = v36;
      v18 = vdupq_n_s64(0x7FF8000000000000uLL);
      *(int64x2_t *)(v17 + 72) = v18;
      *(int64x2_t *)(v17 + 88) = v18;
      *(int64x2_t *)(v17 + 104) = v18;
      *(int64x2_t *)(v17 + 120) = v18;
      *(int64x2_t *)(v17 + 136) = v18;
      *(int64x2_t *)(v17 + 152) = v18;
      *((_QWORD *)v17 + 21) = 0x7FF8000000000000;
      *((_QWORD *)v17 + 22) = 0;
      *(_QWORD *)&v31 = v17;
      *((_QWORD *)v17 + 3) = &off_24EC6C9A0;
      *((_QWORD *)&v30[1] + 1) = v17 + 24;
      sub_2241502B4(a1 + 1, (uint64_t)&v29);
      v5 = (std::__shared_weak_count *)v31;
      if ((_QWORD)v31)
      {
        v19 = (unint64_t *)(v31 + 8);
        do
          v7 = __ldaxr(v19);
        while (__stlxr(v7 - 1, v19));
LABEL_35:
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      break;
    default:
      switch(v2)
      {
        case 'd':
          v29 = 0u;
          memset(v30, 0, 28);
          v3 = (char *)operator new(0x98uLL);
          *((_QWORD *)v3 + 1) = 0;
          *((_QWORD *)v3 + 2) = 0;
          *(_QWORD *)v3 = &off_24EC6CB38;
          v36 = 0u;
          *((_QWORD *)v3 + 5) = 0;
          *((_QWORD *)v3 + 6) = 0;
          *((_QWORD *)v3 + 4) = &off_24EC6C678;
          *((_DWORD *)v3 + 18) = 0;
          *(_OWORD *)(v3 + 56) = v36;
          *(_QWORD *)(v3 + 76) = 0xA3727C5ACLL;
          v4 = vdupq_n_s32(0x7FC00000u);
          *(int32x4_t *)(v3 + 84) = v4;
          *(int32x4_t *)(v3 + 100) = v4;
          *(int32x4_t *)(v3 + 116) = v4;
          *((_DWORD *)v3 + 33) = 2143289344;
          *((_WORD *)v3 + 68) = 257;
          *((_QWORD *)v3 + 18) = 0;
          *((_QWORD *)&v31 + 1) = v3;
          *((_QWORD *)v3 + 3) = &off_24EC6C620;
          *(_QWORD *)&v31 = v3 + 24;
          sub_224150418(a1 + 1, (uint64_t)&v29);
          v5 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
          if (*((_QWORD *)&v31 + 1))
          {
            v6 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
            do
              v7 = __ldaxr(v6);
            while (__stlxr(v7 - 1, v6));
            goto LABEL_35;
          }
          break;
        case 'e':
          v31 = 0u;
          v32 = 0u;
          memset(v30, 0, sizeof(v30));
          v29 = 0u;
          v26 = (char *)operator new(0xF8uLL);
          v37 = 0u;
          v38 = 0u;
          v35 = 0u;
          v36 = 0u;
          *(_OWORD *)(v26 + 56) = 0u;
          *((_QWORD *)v26 + 1) = 0;
          *((_QWORD *)v26 + 2) = 0;
          *(_QWORD *)v26 = &off_24EC6CBD8;
          v39 = 0;
          *((_QWORD *)v26 + 5) = 0;
          *((_QWORD *)v26 + 6) = 0;
          *((_QWORD *)v26 + 4) = &off_24EC6C838;
          *(_OWORD *)(v26 + 72) = 0u;
          *(_OWORD *)(v26 + 88) = v38;
          *((_QWORD *)v26 + 13) = 0;
          *((_QWORD *)v26 + 14) = 0x3EE4F8B588E368F1;
          *((_DWORD *)v26 + 30) = 10;
          v27 = vdupq_n_s64(0x7FF8000000000000uLL);
          *((int64x2_t *)v26 + 8) = v27;
          *((int64x2_t *)v26 + 9) = v27;
          *((int64x2_t *)v26 + 10) = v27;
          *((int64x2_t *)v26 + 11) = v27;
          *((int64x2_t *)v26 + 12) = v27;
          *((int64x2_t *)v26 + 13) = v27;
          *((_QWORD *)v26 + 28) = 0x7FF8000000000000;
          *((_WORD *)v26 + 116) = 257;
          *((_QWORD *)v26 + 30) = 0;
          v34 = (std::__shared_weak_count *)v26;
          *((_QWORD *)v26 + 3) = &off_24EC6C7E0;
          v33 = v26 + 24;
          sub_2241505E0(a1 + 1, (uint64_t)&v29);
          v5 = v34;
          if (v34)
          {
            p_shared_owners = (unint64_t *)&v34->__shared_owners_;
            do
              v7 = __ldaxr(p_shared_owners);
            while (__stlxr(v7 - 1, p_shared_owners));
            goto LABEL_35;
          }
          break;
        case 'n':
          v29 = 0u;
          memset(v30, 0, 28);
          v20 = (char *)operator new(0x98uLL);
          *((_QWORD *)v20 + 1) = 0;
          *((_QWORD *)v20 + 2) = 0;
          *(_QWORD *)v20 = &off_24EC6CB88;
          v36 = 0u;
          *((_QWORD *)v20 + 5) = 0;
          *((_QWORD *)v20 + 6) = 0;
          *((_QWORD *)v20 + 4) = &off_24EC6C678;
          *((_DWORD *)v20 + 18) = 0;
          *(_OWORD *)(v20 + 56) = v36;
          *(_QWORD *)(v20 + 76) = 0xA3727C5ACLL;
          v21 = vdupq_n_s32(0x7FC00000u);
          *(int32x4_t *)(v20 + 84) = v21;
          *(int32x4_t *)(v20 + 100) = v21;
          *(int32x4_t *)(v20 + 116) = v21;
          *((_DWORD *)v20 + 33) = 2143289344;
          *((_WORD *)v20 + 68) = 257;
          *((_QWORD *)v20 + 18) = 0;
          *((_QWORD *)&v31 + 1) = v20;
          *((_QWORD *)v20 + 3) = &off_24EC6C730;
          *(_QWORD *)&v31 = v20 + 24;
          sub_2241507A8(a1 + 1, (uint64_t)&v29);
          v5 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
          if (*((_QWORD *)&v31 + 1))
          {
            v22 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
            do
              v7 = __ldaxr(v22);
            while (__stlxr(v7 - 1, v22));
            goto LABEL_35;
          }
          break;
        case 'o':
          v31 = 0u;
          v32 = 0u;
          memset(v30, 0, sizeof(v30));
          v29 = 0u;
          v23 = (char *)operator new(0xF8uLL);
          v37 = 0u;
          v38 = 0u;
          v35 = 0u;
          v36 = 0u;
          *(_OWORD *)(v23 + 56) = 0u;
          *((_QWORD *)v23 + 1) = 0;
          *((_QWORD *)v23 + 2) = 0;
          *(_QWORD *)v23 = &off_24EC6CC28;
          v39 = 0;
          *((_QWORD *)v23 + 5) = 0;
          *((_QWORD *)v23 + 6) = 0;
          *((_QWORD *)v23 + 4) = &off_24EC6C838;
          *(_OWORD *)(v23 + 72) = 0u;
          *(_OWORD *)(v23 + 88) = v38;
          *((_QWORD *)v23 + 13) = 0;
          *((_QWORD *)v23 + 14) = 0x3EE4F8B588E368F1;
          *((_DWORD *)v23 + 30) = 10;
          v24 = vdupq_n_s64(0x7FF8000000000000uLL);
          *((int64x2_t *)v23 + 8) = v24;
          *((int64x2_t *)v23 + 9) = v24;
          *((int64x2_t *)v23 + 10) = v24;
          *((int64x2_t *)v23 + 11) = v24;
          *((int64x2_t *)v23 + 12) = v24;
          *((int64x2_t *)v23 + 13) = v24;
          *((_QWORD *)v23 + 28) = 0x7FF8000000000000;
          *((_WORD *)v23 + 116) = 257;
          *((_QWORD *)v23 + 30) = 0;
          v34 = (std::__shared_weak_count *)v23;
          *((_QWORD *)v23 + 3) = &off_24EC6C8F0;
          v33 = v23 + 24;
          sub_224150970(a1 + 1, (uint64_t)&v29);
          v5 = v34;
          if (v34)
          {
            v25 = (unint64_t *)&v34->__shared_owners_;
            do
              v7 = __ldaxr(v25);
            while (__stlxr(v7 - 1, v25));
            goto LABEL_35;
          }
          break;
        default:
          return;
      }
      break;
  }
}

void sub_224151ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22415789C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_224151AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22415789C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_224151AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22415773C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_224151AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_224158980((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_224151B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22365B530((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_224151B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_224158980((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_224151B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22365B530((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_224151B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22415773C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_224151B5C(uint64_t a1, uint64_t a2)
{
  void (**v4)(int);
  int v5;
  int v6;
  int v7;
  BOOL v8;
  char v9;
  const void *v10;
  _OWORD *v11;
  _OWORD *v12;
  uint64_t v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  BOOL v21;
  char v22;
  const void *v23;
  _OWORD *v24;
  _OWORD *v25;
  uint64_t v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  unint64_t *v31;
  const void *v32;
  _OWORD *v33;
  _OWORD *v34;
  _OWORD *v35;
  _OWORD *v36;
  __int128 v37;
  uint64_t v38;
  char *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  unint64_t *v44;
  BOOL v46;
  char v47;
  const void *v48;
  _OWORD *v49;
  _OWORD *v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  __int16 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  unint64_t *p_shared_owners;
  const void *v62;
  _OWORD *v63;
  _OWORD *v64;
  _OWORD *v65;
  _OWORD *v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  unint64_t *v74;
  BOOL v75;
  char v76;
  void *v77;
  void *v78;
  void *v79;
  __int128 *v80;
  __int128 *v81;
  __int128 *v82;
  __int128 *v83;
  __int128 *v84;
  std::logic_error *exception;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  std::__shared_weak_count *v89;
  std::__shared_weak_count *v90;

  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (void (**)(int))(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8));
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 24))(*(_QWORD *)(a2 + 8));
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 32))(*(_QWORD *)(a2 + 8));
  v8 = v5 == 1 && v6 == 1;
  v9 = !v8;
  if (v8 && v7 == 11)
  {
    *(_DWORD *)a1 = 0;
    v10 = *(const void **)(a2 + 8);
    if (!v10
      || (v11 = __dynamic_cast(v10, (const struct __class_type_info *)&unk_24EC6D060, (const struct __class_type_info *)&unk_24EC20800, 0)) == 0)
    {
      v80 = sub_224153D94();
      sub_224159E3C(a2, (const char *)v80, (uint64_t)"trying to cast camera");
    }
    v12 = v11;
    v86 = v11[1];
    *(_QWORD *)&v87 = *((_QWORD *)v11 + 11);
    v13 = v87;
    v14 = (char *)operator new(0x78uLL);
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = &off_24EC6CE00;
    v15 = v12[1];
    *((_QWORD *)v14 + 4) = &off_24EC20868;
    *(_OWORD *)(v14 + 40) = v15;
    *(_OWORD *)(v14 + 56) = v12[2];
    v16 = v12[3];
    v17 = v12[4];
    *((_DWORD *)v14 + 26) = *((_DWORD *)v12 + 20);
    *(_OWORD *)(v14 + 88) = v17;
    *(_OWORD *)(v14 + 72) = v16;
    *((_QWORD *)v14 + 14) = v13;
    *((_QWORD *)v14 + 3) = &off_24EC207B8;
    *((_QWORD *)&v87 + 1) = v14 + 24;
    *(_QWORD *)&v88 = v14;
    sub_22414FE88(v4, (uint64_t)&v86);
    v18 = (std::__shared_weak_count *)v88;
    if ((_QWORD)v88)
    {
      v19 = (unint64_t *)(v88 + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
LABEL_39:
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  else
  {
    if (v7 != 12)
      v9 = 1;
    if ((v9 & 1) != 0)
    {
      if (v5)
        v21 = 0;
      else
        v21 = v6 == 1;
      v22 = !v21;
      if (v21 && v7 == 11)
      {
        *(_DWORD *)a1 = 10;
        v23 = *(const void **)(a2 + 8);
        if (!v23
          || (v24 = __dynamic_cast(v23, (const struct __class_type_info *)&unk_24EC6D060, (const struct __class_type_info *)&unk_24EC376B8, 0)) == 0)
        {
          v82 = sub_224154B74();
          sub_224159E3C(a2, (const char *)v82, (uint64_t)"trying to cast camera");
        }
        v25 = v24;
        v86 = v24[1];
        *(_QWORD *)&v87 = *((_QWORD *)v24 + 11);
        v26 = v87;
        v27 = (char *)operator new(0x78uLL);
        *((_QWORD *)v27 + 1) = 0;
        *((_QWORD *)v27 + 2) = 0;
        *(_QWORD *)v27 = &off_24EC6CE50;
        v28 = v25[1];
        *((_QWORD *)v27 + 4) = &off_24EC20868;
        *(_OWORD *)(v27 + 40) = v28;
        *(_OWORD *)(v27 + 56) = v25[2];
        v29 = v25[3];
        v30 = v25[4];
        *((_DWORD *)v27 + 26) = *((_DWORD *)v25 + 20);
        *(_OWORD *)(v27 + 88) = v30;
        *(_OWORD *)(v27 + 72) = v29;
        *((_QWORD *)v27 + 14) = v26;
        *((_QWORD *)v27 + 3) = &off_24EC37688;
        *((_QWORD *)&v87 + 1) = v27 + 24;
        *(_QWORD *)&v88 = v27;
        sub_224150150(v4, (uint64_t)&v86);
        v18 = (std::__shared_weak_count *)v88;
        if ((_QWORD)v88)
        {
          v31 = (unint64_t *)(v88 + 8);
          do
            v20 = __ldaxr(v31);
          while (__stlxr(v20 - 1, v31));
          goto LABEL_39;
        }
      }
      else
      {
        if (v7 != 12)
          v22 = 1;
        if ((v22 & 1) != 0)
        {
          v46 = v5 == 1 && v6 == 2;
          v47 = !v46;
          if (v46 && v7 == 11)
          {
            *(_DWORD *)a1 = 100;
            v48 = *(const void **)(a2 + 8);
            if (!v48
              || (v49 = __dynamic_cast(v48, (const struct __class_type_info *)&unk_24EC6D060, (const struct __class_type_info *)&unk_24EC6C650, 0)) == 0)
            {
              v84 = sub_224155954();
              sub_224159E3C(a2, (const char *)v84, (uint64_t)"trying to cast camera");
            }
            v50 = v49;
            v51 = v49[1];
            v52 = v49[2];
            LODWORD(v88) = *((_DWORD *)v49 + 12);
            v86 = v51;
            v87 = v52;
            *(_QWORD *)((char *)&v88 + 4) = *((_QWORD *)v49 + 15);
            v53 = *(_QWORD *)((char *)&v88 + 4);
            v54 = (char *)operator new(0x98uLL);
            *((_QWORD *)v54 + 1) = 0;
            *((_QWORD *)v54 + 2) = 0;
            *(_QWORD *)v54 = &off_24EC6CB38;
            v55 = *(_QWORD *)((char *)v50 + 52);
            v56 = *((_WORD *)v50 + 56);
            v57 = v50[1];
            *((_QWORD *)v54 + 4) = &off_24EC6C678;
            *(_OWORD *)(v54 + 40) = v57;
            v58 = v50[2];
            *((_DWORD *)v54 + 18) = *((_DWORD *)v50 + 12);
            *(_OWORD *)(v54 + 56) = v58;
            *(_QWORD *)(v54 + 76) = v55;
            *(_OWORD *)(v54 + 84) = *(_OWORD *)((char *)v50 + 60);
            v59 = *(_OWORD *)((char *)v50 + 76);
            v60 = *(_OWORD *)((char *)v50 + 92);
            *((_DWORD *)v54 + 33) = *((_DWORD *)v50 + 27);
            *(_OWORD *)(v54 + 116) = v60;
            *(_OWORD *)(v54 + 100) = v59;
            *((_WORD *)v54 + 68) = v56;
            *((_QWORD *)v54 + 18) = v53;
            *((_QWORD *)v54 + 3) = &off_24EC6C620;
            v89 = (std::__shared_weak_count *)(v54 + 24);
            v90 = (std::__shared_weak_count *)v54;
            sub_224150418(v4, (uint64_t)&v86);
            v18 = v90;
            if (v90)
            {
              p_shared_owners = (unint64_t *)&v90->__shared_owners_;
              do
                v20 = __ldaxr(p_shared_owners);
              while (__stlxr(v20 - 1, p_shared_owners));
              goto LABEL_39;
            }
          }
          else
          {
            if (v7 != 12)
              v47 = 1;
            if ((v47 & 1) != 0)
            {
              if (v5)
                v75 = 0;
              else
                v75 = v6 == 2;
              v76 = !v75;
              if (v75 && v7 == 11)
              {
                *(_DWORD *)a1 = 110;
                v77 = sub_224150744(a2);
                sub_224157904((uint64_t)&v86, (uint64_t)v77);
                sub_2241507A8(v4, (uint64_t)&v86);
                sub_22415773C((uint64_t)&v86);
              }
              else
              {
                if (v7 != 12)
                  v76 = 1;
                if ((v76 & 1) != 0)
                {
                  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                  exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
                  __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
                }
                *(_DWORD *)a1 = 111;
                v79 = sub_22415090C(a2);
                sub_224157ABC((uint64_t)&v86, (uint64_t)v79);
                sub_224150970(v4, (uint64_t)&v86);
                sub_22415789C((uint64_t)&v86);
              }
            }
            else
            {
              *(_DWORD *)a1 = 101;
              v78 = sub_22415057C(a2);
              sub_2241579D4((uint64_t)&v86, (uint64_t)v78);
              sub_2241505E0(v4, (uint64_t)&v86);
              sub_22415789C((uint64_t)&v86);
            }
          }
        }
        else
        {
          *(_DWORD *)a1 = 11;
          v62 = *(const void **)(a2 + 8);
          if (!v62
            || (v63 = __dynamic_cast(v62, (const struct __class_type_info *)&unk_24EC6D060, (const struct __class_type_info *)&unk_24EC6C9D0, 0)) == 0)
          {
            v83 = sub_224155264();
            sub_224159E3C(a2, (const char *)v83, (uint64_t)"trying to cast camera");
          }
          v64 = v63;
          v65 = v63 + 1;
          v66 = v63 + 2;
          v67 = v63[2];
          v86 = v63[1];
          v87 = v67;
          *(_QWORD *)&v88 = *((_QWORD *)v63 + 19);
          v68 = v88;
          v69 = (char *)operator new(0xB8uLL);
          *((_QWORD *)v69 + 1) = 0;
          *((_QWORD *)v69 + 2) = 0;
          *(_QWORD *)v69 = &off_24EC6CEF0;
          *((_QWORD *)v69 + 4) = &off_24EC35EF0;
          *(_OWORD *)(v69 + 40) = *v65;
          *(_OWORD *)(v69 + 56) = *v66;
          v70 = v64[3];
          *(_OWORD *)(v69 + 88) = v64[4];
          *(_OWORD *)(v69 + 72) = v70;
          v71 = v64[6];
          v72 = v64[7];
          v73 = v64[8];
          *((_QWORD *)v69 + 21) = *((_QWORD *)v64 + 18);
          *(_OWORD *)(v69 + 152) = v73;
          *(_OWORD *)(v69 + 136) = v72;
          *(_OWORD *)(v69 + 120) = v71;
          *(_OWORD *)(v69 + 104) = v64[5];
          *((_QWORD *)v69 + 22) = v68;
          *((_QWORD *)v69 + 3) = &off_24EC6C9A0;
          *((_QWORD *)&v88 + 1) = v69 + 24;
          v89 = (std::__shared_weak_count *)v69;
          sub_2241502B4(v4, (uint64_t)&v86);
          v18 = v89;
          if (v89)
          {
            v74 = (unint64_t *)&v89->__shared_owners_;
            do
              v20 = __ldaxr(v74);
            while (__stlxr(v20 - 1, v74));
            goto LABEL_39;
          }
        }
      }
    }
    else
    {
      *(_DWORD *)a1 = 1;
      v32 = *(const void **)(a2 + 8);
      if (!v32
        || (v33 = __dynamic_cast(v32, (const struct __class_type_info *)&unk_24EC6D060, (const struct __class_type_info *)&unk_24EC35FC0, 0)) == 0)
      {
        v81 = sub_224154484();
        sub_224159E3C(a2, (const char *)v81, (uint64_t)"trying to cast camera");
      }
      v34 = v33;
      v35 = v33 + 1;
      v36 = v33 + 2;
      v37 = v33[2];
      v86 = v33[1];
      v87 = v37;
      *(_QWORD *)&v88 = *((_QWORD *)v33 + 19);
      v38 = v88;
      v39 = (char *)operator new(0xB8uLL);
      *((_QWORD *)v39 + 1) = 0;
      *((_QWORD *)v39 + 2) = 0;
      *(_QWORD *)v39 = &off_24EC6CEA0;
      *((_QWORD *)v39 + 4) = &off_24EC35EF0;
      *(_OWORD *)(v39 + 40) = *v35;
      *(_OWORD *)(v39 + 56) = *v36;
      v40 = v34[3];
      *(_OWORD *)(v39 + 88) = v34[4];
      *(_OWORD *)(v39 + 72) = v40;
      v41 = v34[6];
      v42 = v34[7];
      v43 = v34[8];
      *((_QWORD *)v39 + 21) = *((_QWORD *)v34 + 18);
      *(_OWORD *)(v39 + 152) = v43;
      *(_OWORD *)(v39 + 136) = v42;
      *(_OWORD *)(v39 + 120) = v41;
      *(_OWORD *)(v39 + 104) = v34[5];
      *((_QWORD *)v39 + 22) = v38;
      *((_QWORD *)v39 + 3) = &off_24EC35EB0;
      *((_QWORD *)&v88 + 1) = v39 + 24;
      v89 = (std::__shared_weak_count *)v39;
      sub_22414FFEC(v4, (uint64_t)&v86);
      v18 = v89;
      if (v89)
      {
        v44 = (unint64_t *)&v89->__shared_owners_;
        do
          v20 = __ldaxr(v44);
        while (__stlxr(v20 - 1, v44));
        goto LABEL_39;
      }
    }
  }
  return a1;
}

void sub_224152280(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_2232178D4(v1);
  _Unwind_Resume(a1);
}

void sub_224152294(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  void *v2;

  __cxa_free_exception(v2);
  sub_2232178D4(v1);
  _Unwind_Resume(a1);
}

void sub_2241522B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (**v9)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_22415789C((uint64_t)&a9);
  sub_2232178D4(v9);
  _Unwind_Resume(a1);
}

void sub_2241522CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (**v9)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_22415773C((uint64_t)&a9);
  sub_2232178D4(v9);
  _Unwind_Resume(a1);
}

void sub_2241522E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (**v9)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_22415789C((uint64_t)&a9);
  sub_2232178D4(v9);
  _Unwind_Resume(a1);
}

void sub_224152304(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_2232178D4(v1);
  _Unwind_Resume(a1);
}

void sub_224152318(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_2232178D4(v1);
  _Unwind_Resume(a1);
}

void sub_22415232C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (**v9)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_22415773C((uint64_t)&a9);
  sub_2232178D4(v9);
  _Unwind_Resume(a1);
}

void sub_224152348(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_2232178D4(v1);
  _Unwind_Resume(a1);
}

void sub_22415235C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (**v9)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_224158980((uint64_t)&a9);
  sub_2232178D4(v9);
  _Unwind_Resume(a1);
}

void sub_224152378(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_2232178D4(v1);
  _Unwind_Resume(a1);
}

void sub_22415238C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (**v9)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_22365B530((uint64_t)&a9);
  sub_2232178D4(v9);
  _Unwind_Resume(a1);
}

void sub_2241523A8(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_2232178D4(v1);
  _Unwind_Resume(a1);
}

void sub_2241523BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (**v9)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_224158980((uint64_t)&a9);
  sub_2232178D4(v9);
  _Unwind_Resume(a1);
}

void sub_2241523D8(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_2232178D4(v1);
  _Unwind_Resume(a1);
}

void sub_2241523EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (**v9)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_22365B530((uint64_t)&a9);
  sub_2232178D4(v9);
  _Unwind_Resume(a1);
}

void sub_224152408(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_2232178D4(v1);
  _Unwind_Resume(a1);
}

void sub_22415241C(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_2232178D4(v1);
  _Unwind_Resume(a1);
}

void sub_224152430(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_2232178D4(v1);
  _Unwind_Resume(a1);
}

void sub_224152444(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_2232178D4(v1);
  _Unwind_Resume(a1);
}

void sub_224152458(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_2232178D4(v1);
  _Unwind_Resume(a1);
}

void sub_22415246C(int *a1@<X0>, _QWORD *a2@<X8>)
{
  int v3;
  uint64_t (*v4)(uint64_t, uint64_t, _QWORD, void *, void *);
  float32x2_t *v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v15;
  int32x2_t v16;
  int8x16_t v17;
  float32x2_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  int v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  std::__shared_weak_count_vtbl *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  std::__shared_weak_count_vtbl *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t (*v61)(uint64_t, uint64_t, _QWORD, void *, void *);
  float32x2_t *v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x2_t v65;
  float32x2_t v66;
  float32x2_t v68;
  int32x2_t v69;
  int8x16_t v70;
  float32x2_t v71;
  unint64_t *v72;
  int v73;
  __int128 v74;
  uint64_t v75;
  unint64_t v76;

  v3 = *a1;
  switch(v3)
  {
    case 0:
      v4 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, void *, void *))*((_QWORD *)a1 + 1);
      if (!v4)
        goto LABEL_30;
      v5 = (float32x2_t *)v4(3, (uint64_t)(a1 + 2), 0, &unk_24EC682D8, &unk_224697234);
      if (!v5)
        goto LABEL_30;
      v6 = v5[2];
      v7 = v5[3];
      v8 = *v5;
      v9 = v5[1];
      __asm { FMOV            V2.2S, #1.0 }
      v15 = vdiv_f32(_D2, *v5);
      v16 = vzip1_s32((int32x2_t)*v5, (int32x2_t)v9);
      v17.i64[0] = v16.u32[0];
      v17.i64[1] = v16.u32[1];
      *(int8x16_t *)(*(_QWORD *)&v7 + 16) = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)*v5, (int32x2_t)v9), 0x20uLL), v17);
      *(float32x2_t *)(*(_QWORD *)&v7 + 32) = v15;
      *(float32x2_t *)(*(_QWORD *)&v7 + 40) = vmul_f32(v15, vneg_f32(v9));
      *(_DWORD *)(*(_QWORD *)&v7 + 48) = v8.i32[0];
      *(_QWORD *)(*(_QWORD *)&v7 + 56) = 0;
      *(_DWORD *)(*(_QWORD *)&v7 + 52) = 0;
      *(_DWORD *)(*(_QWORD *)&v7 + 64) = v8.i32[1];
      *(_DWORD *)(*(_QWORD *)&v7 + 68) = 0;
      *(float32x2_t *)(*(_QWORD *)&v7 + 72) = v9;
      *(_DWORD *)(*(_QWORD *)&v7 + 80) = 1065353216;
      *(float32x2_t *)(*(_QWORD *)&v7 + 88) = v6;
      v18 = v5[3];
      v19 = (std::__shared_weak_count *)operator new(0x78uLL);
      v19->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      v19->__shared_weak_owners_ = 0;
      v19->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC28318;
      v19[1].__shared_owners_ = (uint64_t)&off_24EC20868;
      v19[1].__shared_weak_owners_ = *(_QWORD *)(*(_QWORD *)&v18 + 16);
      v19[2].__vftable = *(std::__shared_weak_count_vtbl **)(*(_QWORD *)&v18 + 24);
      *(_OWORD *)&v19[2].__shared_owners_ = *(_OWORD *)(*(_QWORD *)&v18 + 32);
      v21 = *(_DWORD *)(*(_QWORD *)&v18 + 80);
      v22 = *(_OWORD *)(*(_QWORD *)&v18 + 64);
      v19[3].std::__shared_count = *(std::__shared_count *)(*(_QWORD *)&v18 + 48);
      LODWORD(v19[4].__shared_owners_) = v21;
      *(_OWORD *)&v19[3].__shared_weak_owners_ = v22;
      v23 = *(_QWORD *)(*(_QWORD *)&v18 + 88);
      v19[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24EC207B8;
      v19[4].__shared_weak_owners_ = v23;
      *a2 = &off_24EC6D000;
      a2[1] = v19 + 1;
      a2[2] = v19;
      do
        v24 = __ldxr(p_shared_owners);
      while (__stxr(v24 + 1, p_shared_owners));
      do
        v25 = __ldaxr(p_shared_owners);
      while (__stlxr(v25 - 1, p_shared_owners));
      goto LABEL_28;
    case 1:
      v44 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, void *, void *))*((_QWORD *)a1 + 1);
      if (!v44)
        goto LABEL_30;
      v45 = v44(3, (uint64_t)(a1 + 2), 0, &unk_24EC68328, &unk_224697308);
      if (!v45)
        goto LABEL_30;
      v46 = *(double *)v45;
      v47 = *(double *)(v45 + 8);
      v48 = *(double *)(v45 + 16);
      v49 = *(double *)(v45 + 24);
      v50 = 1.0 / *(double *)v45;
      v51 = *(_QWORD *)(v45 + 32);
      v52 = *(_QWORD *)(v45 + 40);
      *(_QWORD *)(v52 + 16) = *(_QWORD *)v45;
      *(double *)(v52 + 24) = v47;
      *(double *)(v52 + 32) = v48;
      *(double *)(v52 + 40) = v49;
      *(double *)(v52 + 48) = v50;
      *(double *)(v52 + 56) = 1.0 / v47;
      *(double *)(v52 + 64) = -(v48 * v50);
      *(double *)(v52 + 72) = -(v49 * (1.0 / v47));
      *(double *)(v52 + 80) = v46;
      *(_QWORD *)(v52 + 96) = 0;
      *(_QWORD *)(v52 + 104) = 0;
      *(_QWORD *)(v52 + 88) = 0;
      *(double *)(v52 + 112) = v47;
      *(_QWORD *)(v52 + 120) = 0;
      *(double *)(v52 + 128) = v48;
      *(double *)(v52 + 136) = v49;
      *(_QWORD *)(v52 + 144) = 0x3FF0000000000000;
      *(_QWORD *)(v52 + 152) = v51;
      v53 = *(_QWORD *)(v45 + 40);
      v19 = (std::__shared_weak_count *)operator new(0xB8uLL);
      v19->__shared_owners_ = 0;
      v54 = (unint64_t *)&v19->__shared_owners_;
      v19->__shared_weak_owners_ = 0;
      v19->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC35F68;
      v19[1].__shared_owners_ = (uint64_t)&off_24EC35EF0;
      *(_OWORD *)&v19[1].__shared_weak_owners_ = *(_OWORD *)(v53 + 16);
      *(_OWORD *)&v19[2].__shared_owners_ = *(_OWORD *)(v53 + 32);
      v55 = *(_OWORD *)(v53 + 64);
      v19[3].std::__shared_count = *(std::__shared_count *)(v53 + 48);
      *(_OWORD *)&v19[3].__shared_weak_owners_ = v55;
      *(_OWORD *)&v19[4].__shared_owners_ = *(_OWORD *)(v53 + 80);
      v57 = *(_OWORD *)(v53 + 112);
      v56 = *(_OWORD *)(v53 + 128);
      v58 = *(std::__shared_weak_count_vtbl **)(v53 + 144);
      v19[5].std::__shared_count = *(std::__shared_count *)(v53 + 96);
      v19[7].__vftable = v58;
      *(_OWORD *)&v19[6].__shared_owners_ = v56;
      *(_OWORD *)&v19[5].__shared_weak_owners_ = v57;
      v59 = *(_QWORD *)(v53 + 152);
      v19[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24EC35EB0;
      v19[7].__shared_owners_ = v59;
      *a2 = &off_24EC6D000;
      a2[1] = v19 + 1;
      a2[2] = v19;
      do
        v60 = __ldxr(v54);
      while (__stxr(v60 + 1, v54));
      do
        v25 = __ldaxr(v54);
      while (__stlxr(v25 - 1, v54));
      goto LABEL_28;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      __break(1u);
      return;
    case 10:
      v61 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, void *, void *))*((_QWORD *)a1 + 1);
      if (!v61)
        goto LABEL_30;
      v62 = (float32x2_t *)v61(3, (uint64_t)(a1 + 2), 0, &unk_24EC68378, &unk_2246973DC);
      if (!v62)
        goto LABEL_30;
      v63 = v62[2];
      v64 = v62[3];
      v65 = *v62;
      v66 = v62[1];
      __asm { FMOV            V2.2S, #1.0 }
      v68 = vdiv_f32(_D2, *v62);
      v69 = vzip1_s32((int32x2_t)*v62, (int32x2_t)v66);
      v70.i64[0] = v69.u32[0];
      v70.i64[1] = v69.u32[1];
      *(int8x16_t *)(*(_QWORD *)&v64 + 16) = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)*v62, (int32x2_t)v66), 0x20uLL), v70);
      *(float32x2_t *)(*(_QWORD *)&v64 + 32) = v68;
      *(float32x2_t *)(*(_QWORD *)&v64 + 40) = vmul_f32(v68, vneg_f32(v66));
      *(_DWORD *)(*(_QWORD *)&v64 + 48) = v65.i32[0];
      *(_QWORD *)(*(_QWORD *)&v64 + 56) = 0;
      *(_DWORD *)(*(_QWORD *)&v64 + 52) = 0;
      *(_DWORD *)(*(_QWORD *)&v64 + 64) = v65.i32[1];
      *(_DWORD *)(*(_QWORD *)&v64 + 68) = 0;
      *(float32x2_t *)(*(_QWORD *)&v64 + 72) = v66;
      *(_DWORD *)(*(_QWORD *)&v64 + 80) = 1065353216;
      *(float32x2_t *)(*(_QWORD *)&v64 + 88) = v63;
      v71 = v62[3];
      v19 = (std::__shared_weak_count *)operator new(0x78uLL);
      v19->__shared_owners_ = 0;
      v72 = (unint64_t *)&v19->__shared_owners_;
      v19->__shared_weak_owners_ = 0;
      v19->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6C3E8;
      v19[1].__shared_owners_ = (uint64_t)&off_24EC20868;
      v19[1].__shared_weak_owners_ = *(_QWORD *)(*(_QWORD *)&v71 + 16);
      v19[2].__vftable = *(std::__shared_weak_count_vtbl **)(*(_QWORD *)&v71 + 24);
      *(_OWORD *)&v19[2].__shared_owners_ = *(_OWORD *)(*(_QWORD *)&v71 + 32);
      v73 = *(_DWORD *)(*(_QWORD *)&v71 + 80);
      v74 = *(_OWORD *)(*(_QWORD *)&v71 + 64);
      v19[3].std::__shared_count = *(std::__shared_count *)(*(_QWORD *)&v71 + 48);
      LODWORD(v19[4].__shared_owners_) = v73;
      *(_OWORD *)&v19[3].__shared_weak_owners_ = v74;
      v75 = *(_QWORD *)(*(_QWORD *)&v71 + 88);
      v19[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24EC37688;
      v19[4].__shared_weak_owners_ = v75;
      *a2 = &off_24EC6D000;
      a2[1] = v19 + 1;
      a2[2] = v19;
      do
        v76 = __ldxr(v72);
      while (__stxr(v76 + 1, v72));
      do
        v25 = __ldaxr(v72);
      while (__stlxr(v25 - 1, v72));
LABEL_28:
      if (v25)
        return;
      goto LABEL_16;
    case 11:
      v26 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, void *, void *))*((_QWORD *)a1 + 1);
      if (!v26 || (v27 = v26(3, (uint64_t)(a1 + 2), 0, &unk_24EC683C8, &unk_2246974B0)) == 0)
LABEL_30:
        sub_224071EE4();
      v28 = *(double *)v27;
      v29 = *(double *)(v27 + 8);
      v30 = *(double *)(v27 + 16);
      v31 = *(double *)(v27 + 24);
      v32 = 1.0 / *(double *)v27;
      v33 = *(_QWORD *)(v27 + 32);
      v34 = *(_QWORD *)(v27 + 40);
      *(_QWORD *)(v34 + 16) = *(_QWORD *)v27;
      *(double *)(v34 + 24) = v29;
      *(double *)(v34 + 32) = v30;
      *(double *)(v34 + 40) = v31;
      *(double *)(v34 + 48) = v32;
      *(double *)(v34 + 56) = 1.0 / v29;
      *(double *)(v34 + 64) = -(v30 * v32);
      *(double *)(v34 + 72) = -(v31 * (1.0 / v29));
      *(double *)(v34 + 80) = v28;
      *(_QWORD *)(v34 + 96) = 0;
      *(_QWORD *)(v34 + 104) = 0;
      *(_QWORD *)(v34 + 88) = 0;
      *(double *)(v34 + 112) = v29;
      *(_QWORD *)(v34 + 120) = 0;
      *(double *)(v34 + 128) = v30;
      *(double *)(v34 + 136) = v31;
      *(_QWORD *)(v34 + 144) = 0x3FF0000000000000;
      *(_QWORD *)(v34 + 152) = v33;
      v35 = *(_QWORD *)(v27 + 40);
      v19 = (std::__shared_weak_count *)operator new(0xB8uLL);
      v19->__shared_owners_ = 0;
      v36 = (unint64_t *)&v19->__shared_owners_;
      v19->__shared_weak_owners_ = 0;
      v19->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6C438;
      v19[1].__shared_owners_ = (uint64_t)&off_24EC35EF0;
      *(_OWORD *)&v19[1].__shared_weak_owners_ = *(_OWORD *)(v35 + 16);
      *(_OWORD *)&v19[2].__shared_owners_ = *(_OWORD *)(v35 + 32);
      v37 = *(_OWORD *)(v35 + 64);
      v19[3].std::__shared_count = *(std::__shared_count *)(v35 + 48);
      *(_OWORD *)&v19[3].__shared_weak_owners_ = v37;
      *(_OWORD *)&v19[4].__shared_owners_ = *(_OWORD *)(v35 + 80);
      v39 = *(_OWORD *)(v35 + 112);
      v38 = *(_OWORD *)(v35 + 128);
      v40 = *(std::__shared_weak_count_vtbl **)(v35 + 144);
      v19[5].std::__shared_count = *(std::__shared_count *)(v35 + 96);
      v19[7].__vftable = v40;
      *(_OWORD *)&v19[6].__shared_owners_ = v38;
      *(_OWORD *)&v19[5].__shared_weak_owners_ = v39;
      v41 = *(_QWORD *)(v35 + 152);
      v19[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6C9A0;
      v19[7].__shared_owners_ = v41;
      *a2 = &off_24EC6D000;
      a2[1] = v19 + 1;
      a2[2] = v19;
      do
        v42 = __ldxr(v36);
      while (__stxr(v42 + 1, v36));
      do
        v43 = __ldaxr(v36);
      while (__stlxr(v43 - 1, v36));
      if (!v43)
      {
LABEL_16:
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
      return;
    default:
      __asm { BR              X10 }
      return;
  }
}

BOOL sub_224152E28(int *a1, int *a2)
{
  _BOOL8 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v11[2];
  std::__shared_weak_count *v12;
  _QWORD v13[2];
  std::__shared_weak_count *v14;

  if (*a1 != *a2)
    return 0;
  sub_22415246C(a1, v13);
  sub_22415246C(a2, v11);
  v3 = sub_224159538((uint64_t)v13, (uint64_t)v11);
  v11[0] = &off_24EC6D000;
  v4 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v13[0] = &off_24EC6D000;
  v7 = v14;
  if (!v14)
    return v3;
  v8 = (unint64_t *)&v14->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_224152F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_224159450(&a9);
  sub_224159450(&a12);
  _Unwind_Resume(a1);
}

void sub_224152F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_224159450((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_224152F70(void (**a1)(int a1))
{
  int v2;
  char *v3;
  int32x4_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  char *v8;
  int32x4_t v9;
  unint64_t *v10;
  char *v11;
  int64x2_t v12;
  unint64_t *v13;
  char *v14;
  int32x4_t v15;
  unint64_t *v16;
  char *v17;
  int64x2_t v18;
  unint64_t *v19;
  char *v20;
  int32x4_t v21;
  unint64_t *v22;
  char *v23;
  int64x2_t v24;
  unint64_t *v25;
  char *v26;
  int64x2_t v27;
  unint64_t *p_shared_owners;
  __int128 v29;
  _OWORD v30[2];
  __int128 v31;
  __int128 v32;
  char *v33;
  std::__shared_weak_count *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v2 = *(_DWORD *)a1;
  switch(v2)
  {
    case 0:
      v29 = 0uLL;
      *(_QWORD *)&v30[0] = 0;
      v8 = (char *)operator new(0x78uLL);
      *((_QWORD *)v8 + 1) = 0;
      *((_QWORD *)v8 + 2) = 0;
      *(_QWORD *)v8 = &off_24EC6CE00;
      *((_QWORD *)v8 + 5) = 0;
      *((_QWORD *)v8 + 6) = 0;
      *((_QWORD *)v8 + 4) = &off_24EC20868;
      v9 = vdupq_n_s32(0x7FC00000u);
      *(int32x4_t *)(v8 + 56) = v9;
      *(int32x4_t *)(v8 + 72) = v9;
      *(int32x4_t *)(v8 + 88) = v9;
      *((_DWORD *)v8 + 26) = 2143289344;
      *((_QWORD *)v8 + 14) = 0;
      *(_QWORD *)&v30[1] = v8;
      *((_QWORD *)v8 + 3) = &off_24EC207B8;
      *((_QWORD *)&v30[0] + 1) = v8 + 24;
      sub_22414FE88(a1 + 1, (uint64_t)&v29);
      v5 = *(std::__shared_weak_count **)&v30[1];
      if (*(_QWORD *)&v30[1])
      {
        v10 = (unint64_t *)(*(_QWORD *)&v30[1] + 8);
        do
          v7 = __ldaxr(v10);
        while (__stlxr(v7 - 1, v10));
        goto LABEL_35;
      }
      break;
    case 1:
      v29 = 0u;
      memset(v30, 0, 24);
      v11 = (char *)operator new(0xB8uLL);
      *((_QWORD *)v11 + 1) = 0;
      *((_QWORD *)v11 + 2) = 0;
      *(_QWORD *)v11 = &off_24EC6CEA0;
      v36 = 0u;
      *((_QWORD *)v11 + 5) = 0;
      *((_QWORD *)v11 + 6) = 0;
      *((_QWORD *)v11 + 4) = &off_24EC35EF0;
      *(_OWORD *)(v11 + 56) = v36;
      v12 = vdupq_n_s64(0x7FF8000000000000uLL);
      *(int64x2_t *)(v11 + 72) = v12;
      *(int64x2_t *)(v11 + 88) = v12;
      *(int64x2_t *)(v11 + 104) = v12;
      *(int64x2_t *)(v11 + 120) = v12;
      *(int64x2_t *)(v11 + 136) = v12;
      *(int64x2_t *)(v11 + 152) = v12;
      *((_QWORD *)v11 + 21) = 0x7FF8000000000000;
      *((_QWORD *)v11 + 22) = 0;
      *(_QWORD *)&v31 = v11;
      *((_QWORD *)v11 + 3) = &off_24EC35EB0;
      *((_QWORD *)&v30[1] + 1) = v11 + 24;
      sub_22414FFEC(a1 + 1, (uint64_t)&v29);
      v5 = (std::__shared_weak_count *)v31;
      if ((_QWORD)v31)
      {
        v13 = (unint64_t *)(v31 + 8);
        do
          v7 = __ldaxr(v13);
        while (__stlxr(v7 - 1, v13));
        goto LABEL_35;
      }
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return;
    case 10:
      v29 = 0uLL;
      *(_QWORD *)&v30[0] = 0;
      v14 = (char *)operator new(0x78uLL);
      *((_QWORD *)v14 + 1) = 0;
      *((_QWORD *)v14 + 2) = 0;
      *(_QWORD *)v14 = &off_24EC6CE50;
      *((_QWORD *)v14 + 5) = 0;
      *((_QWORD *)v14 + 6) = 0;
      *((_QWORD *)v14 + 4) = &off_24EC20868;
      v15 = vdupq_n_s32(0x7FC00000u);
      *(int32x4_t *)(v14 + 56) = v15;
      *(int32x4_t *)(v14 + 72) = v15;
      *(int32x4_t *)(v14 + 88) = v15;
      *((_DWORD *)v14 + 26) = 2143289344;
      *((_QWORD *)v14 + 14) = 0;
      *(_QWORD *)&v30[1] = v14;
      *((_QWORD *)v14 + 3) = &off_24EC37688;
      *((_QWORD *)&v30[0] + 1) = v14 + 24;
      sub_224150150(a1 + 1, (uint64_t)&v29);
      v5 = *(std::__shared_weak_count **)&v30[1];
      if (*(_QWORD *)&v30[1])
      {
        v16 = (unint64_t *)(*(_QWORD *)&v30[1] + 8);
        do
          v7 = __ldaxr(v16);
        while (__stlxr(v7 - 1, v16));
        goto LABEL_35;
      }
      break;
    case 11:
      v29 = 0u;
      memset(v30, 0, 24);
      v17 = (char *)operator new(0xB8uLL);
      *((_QWORD *)v17 + 1) = 0;
      *((_QWORD *)v17 + 2) = 0;
      *(_QWORD *)v17 = &off_24EC6CEF0;
      v36 = 0u;
      *((_QWORD *)v17 + 5) = 0;
      *((_QWORD *)v17 + 6) = 0;
      *((_QWORD *)v17 + 4) = &off_24EC35EF0;
      *(_OWORD *)(v17 + 56) = v36;
      v18 = vdupq_n_s64(0x7FF8000000000000uLL);
      *(int64x2_t *)(v17 + 72) = v18;
      *(int64x2_t *)(v17 + 88) = v18;
      *(int64x2_t *)(v17 + 104) = v18;
      *(int64x2_t *)(v17 + 120) = v18;
      *(int64x2_t *)(v17 + 136) = v18;
      *(int64x2_t *)(v17 + 152) = v18;
      *((_QWORD *)v17 + 21) = 0x7FF8000000000000;
      *((_QWORD *)v17 + 22) = 0;
      *(_QWORD *)&v31 = v17;
      *((_QWORD *)v17 + 3) = &off_24EC6C9A0;
      *((_QWORD *)&v30[1] + 1) = v17 + 24;
      sub_2241502B4(a1 + 1, (uint64_t)&v29);
      v5 = (std::__shared_weak_count *)v31;
      if ((_QWORD)v31)
      {
        v19 = (unint64_t *)(v31 + 8);
        do
          v7 = __ldaxr(v19);
        while (__stlxr(v7 - 1, v19));
LABEL_35:
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      break;
    default:
      switch(v2)
      {
        case 'd':
          v29 = 0u;
          memset(v30, 0, 28);
          v3 = (char *)operator new(0x98uLL);
          *((_QWORD *)v3 + 1) = 0;
          *((_QWORD *)v3 + 2) = 0;
          *(_QWORD *)v3 = &off_24EC6CB38;
          v36 = 0u;
          *((_QWORD *)v3 + 5) = 0;
          *((_QWORD *)v3 + 6) = 0;
          *((_QWORD *)v3 + 4) = &off_24EC6C678;
          *((_DWORD *)v3 + 18) = 0;
          *(_OWORD *)(v3 + 56) = v36;
          *(_QWORD *)(v3 + 76) = 0xA3727C5ACLL;
          v4 = vdupq_n_s32(0x7FC00000u);
          *(int32x4_t *)(v3 + 84) = v4;
          *(int32x4_t *)(v3 + 100) = v4;
          *(int32x4_t *)(v3 + 116) = v4;
          *((_DWORD *)v3 + 33) = 2143289344;
          *((_WORD *)v3 + 68) = 257;
          *((_QWORD *)v3 + 18) = 0;
          *((_QWORD *)&v31 + 1) = v3;
          *((_QWORD *)v3 + 3) = &off_24EC6C620;
          *(_QWORD *)&v31 = v3 + 24;
          sub_224150418(a1 + 1, (uint64_t)&v29);
          v5 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
          if (*((_QWORD *)&v31 + 1))
          {
            v6 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
            do
              v7 = __ldaxr(v6);
            while (__stlxr(v7 - 1, v6));
            goto LABEL_35;
          }
          break;
        case 'e':
          v31 = 0u;
          v32 = 0u;
          memset(v30, 0, sizeof(v30));
          v29 = 0u;
          v26 = (char *)operator new(0xF8uLL);
          v37 = 0u;
          v38 = 0u;
          v35 = 0u;
          v36 = 0u;
          *(_OWORD *)(v26 + 56) = 0u;
          *((_QWORD *)v26 + 1) = 0;
          *((_QWORD *)v26 + 2) = 0;
          *(_QWORD *)v26 = &off_24EC6CBD8;
          v39 = 0;
          *((_QWORD *)v26 + 5) = 0;
          *((_QWORD *)v26 + 6) = 0;
          *((_QWORD *)v26 + 4) = &off_24EC6C838;
          *(_OWORD *)(v26 + 72) = 0u;
          *(_OWORD *)(v26 + 88) = v38;
          *((_QWORD *)v26 + 13) = 0;
          *((_QWORD *)v26 + 14) = 0x3EE4F8B588E368F1;
          *((_DWORD *)v26 + 30) = 10;
          v27 = vdupq_n_s64(0x7FF8000000000000uLL);
          *((int64x2_t *)v26 + 8) = v27;
          *((int64x2_t *)v26 + 9) = v27;
          *((int64x2_t *)v26 + 10) = v27;
          *((int64x2_t *)v26 + 11) = v27;
          *((int64x2_t *)v26 + 12) = v27;
          *((int64x2_t *)v26 + 13) = v27;
          *((_QWORD *)v26 + 28) = 0x7FF8000000000000;
          *((_WORD *)v26 + 116) = 257;
          *((_QWORD *)v26 + 30) = 0;
          v34 = (std::__shared_weak_count *)v26;
          *((_QWORD *)v26 + 3) = &off_24EC6C7E0;
          v33 = v26 + 24;
          sub_2241505E0(a1 + 1, (uint64_t)&v29);
          v5 = v34;
          if (v34)
          {
            p_shared_owners = (unint64_t *)&v34->__shared_owners_;
            do
              v7 = __ldaxr(p_shared_owners);
            while (__stlxr(v7 - 1, p_shared_owners));
            goto LABEL_35;
          }
          break;
        case 'n':
          v29 = 0u;
          memset(v30, 0, 28);
          v20 = (char *)operator new(0x98uLL);
          *((_QWORD *)v20 + 1) = 0;
          *((_QWORD *)v20 + 2) = 0;
          *(_QWORD *)v20 = &off_24EC6CB88;
          v36 = 0u;
          *((_QWORD *)v20 + 5) = 0;
          *((_QWORD *)v20 + 6) = 0;
          *((_QWORD *)v20 + 4) = &off_24EC6C678;
          *((_DWORD *)v20 + 18) = 0;
          *(_OWORD *)(v20 + 56) = v36;
          *(_QWORD *)(v20 + 76) = 0xA3727C5ACLL;
          v21 = vdupq_n_s32(0x7FC00000u);
          *(int32x4_t *)(v20 + 84) = v21;
          *(int32x4_t *)(v20 + 100) = v21;
          *(int32x4_t *)(v20 + 116) = v21;
          *((_DWORD *)v20 + 33) = 2143289344;
          *((_WORD *)v20 + 68) = 257;
          *((_QWORD *)v20 + 18) = 0;
          *((_QWORD *)&v31 + 1) = v20;
          *((_QWORD *)v20 + 3) = &off_24EC6C730;
          *(_QWORD *)&v31 = v20 + 24;
          sub_2241507A8(a1 + 1, (uint64_t)&v29);
          v5 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
          if (*((_QWORD *)&v31 + 1))
          {
            v22 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
            do
              v7 = __ldaxr(v22);
            while (__stlxr(v7 - 1, v22));
            goto LABEL_35;
          }
          break;
        case 'o':
          v31 = 0u;
          v32 = 0u;
          memset(v30, 0, sizeof(v30));
          v29 = 0u;
          v23 = (char *)operator new(0xF8uLL);
          v37 = 0u;
          v38 = 0u;
          v35 = 0u;
          v36 = 0u;
          *(_OWORD *)(v23 + 56) = 0u;
          *((_QWORD *)v23 + 1) = 0;
          *((_QWORD *)v23 + 2) = 0;
          *(_QWORD *)v23 = &off_24EC6CC28;
          v39 = 0;
          *((_QWORD *)v23 + 5) = 0;
          *((_QWORD *)v23 + 6) = 0;
          *((_QWORD *)v23 + 4) = &off_24EC6C838;
          *(_OWORD *)(v23 + 72) = 0u;
          *(_OWORD *)(v23 + 88) = v38;
          *((_QWORD *)v23 + 13) = 0;
          *((_QWORD *)v23 + 14) = 0x3EE4F8B588E368F1;
          *((_DWORD *)v23 + 30) = 10;
          v24 = vdupq_n_s64(0x7FF8000000000000uLL);
          *((int64x2_t *)v23 + 8) = v24;
          *((int64x2_t *)v23 + 9) = v24;
          *((int64x2_t *)v23 + 10) = v24;
          *((int64x2_t *)v23 + 11) = v24;
          *((int64x2_t *)v23 + 12) = v24;
          *((int64x2_t *)v23 + 13) = v24;
          *((_QWORD *)v23 + 28) = 0x7FF8000000000000;
          *((_WORD *)v23 + 116) = 257;
          *((_QWORD *)v23 + 30) = 0;
          v34 = (std::__shared_weak_count *)v23;
          *((_QWORD *)v23 + 3) = &off_24EC6C8F0;
          v33 = v23 + 24;
          sub_224150970(a1 + 1, (uint64_t)&v29);
          v5 = v34;
          if (v34)
          {
            v25 = (unint64_t *)&v34->__shared_owners_;
            do
              v7 = __ldaxr(v25);
            while (__stlxr(v7 - 1, v25));
            goto LABEL_35;
          }
          break;
        default:
          return;
      }
      break;
  }
}

void sub_22415359C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22415789C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2241535B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22415789C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2241535C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22415773C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2241535D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_224158980((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2241535EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22365B530((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_224153600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_224158980((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_224153614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22365B530((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_224153628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22415773C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_22415363C(_QWORD *a1, int *a2)
{
  int v2;
  const char *v3;
  uint64_t v4;

  v2 = *a2;
  switch(v2)
  {
    case 0:
      v3 = "CenterPinholeF";
      v4 = 14;
      break;
    case 1:
      v3 = "CenterPinholeD";
      v4 = 14;
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
LABEL_10:
      v3 = "invalid camera type";
      v4 = 19;
      break;
    case 10:
      v3 = "CornerPinholeF";
      v4 = 14;
      break;
    case 11:
      v3 = "CornerPinholeD";
      v4 = 14;
      break;
    default:
      switch(v2)
      {
        case 'd':
          v3 = "CenterHeikkilaF";
          v4 = 15;
          break;
        case 'e':
          v3 = "CenterHeikkilaD";
          v4 = 15;
          break;
        case 'n':
          v3 = "CornerHeikkilaF";
          v4 = 15;
          break;
        case 'o':
          v3 = "CornerHeikkilaD";
          v4 = 15;
          break;
        default:
          goto LABEL_10;
      }
      break;
  }
  return sub_2231813E8(a1, (uint64_t)v3, v4);
}

uint64_t *sub_224153714(uint64_t *a1, _DWORD *a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  int v6;
  void *v7;
  void **v8;
  size_t v9;
  uint64_t *v10;
  int v11;
  const void *v12;
  size_t v13;
  size_t v14;
  int v15;
  int v16;
  const void *v17;
  size_t v18;
  size_t v19;
  int v20;
  std::logic_error *exception;
  std::string v23;
  std::string v24;
  void *v25;
  size_t v26;
  uint64_t v27;

  v4 = atomic_load((unsigned __int8 *)&qword_2540CF030);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2540CF030))
  {
    sub_2241539B4();
    __cxa_atexit((void (*)(void *))sub_224153D6C, &qword_2540CF038, &dword_22314D000);
    __cxa_guard_release(&qword_2540CF030);
  }
  v25 = 0;
  v26 = 0;
  v27 = 0;
  sub_2240EA2BC(a1, (uint64_t)&v25);
  v5 = qword_2540CF040;
  if (!qword_2540CF040)
    goto LABEL_41;
  v6 = SHIBYTE(v27);
  v7 = v25;
  if (v27 >= 0)
    v8 = &v25;
  else
    v8 = (void **)v25;
  if (v27 >= 0)
    v9 = HIBYTE(v27);
  else
    v9 = v26;
  v10 = &qword_2540CF040;
  do
  {
    while (1)
    {
      v11 = *(char *)(v5 + 55);
      v12 = v11 >= 0 ? (const void *)(v5 + 32) : *(const void **)(v5 + 32);
      v13 = v11 >= 0 ? *(unsigned __int8 *)(v5 + 55) : *(_QWORD *)(v5 + 40);
      v14 = v9 >= v13 ? v13 : v9;
      v15 = memcmp(v12, v8, v14);
      if (v15)
        break;
      if (v13 >= v9)
        goto LABEL_24;
LABEL_10:
      v5 = *(_QWORD *)(v5 + 8);
      if (!v5)
        goto LABEL_25;
    }
    if (v15 < 0)
      goto LABEL_10;
LABEL_24:
    v10 = (uint64_t *)v5;
    v5 = *(_QWORD *)v5;
  }
  while (v5);
LABEL_25:
  if (v10 == &qword_2540CF040)
    goto LABEL_41;
  v16 = *((char *)v10 + 55);
  if (v16 >= 0)
    v17 = v10 + 4;
  else
    v17 = (const void *)v10[4];
  if (v16 >= 0)
    v18 = *((unsigned __int8 *)v10 + 55);
  else
    v18 = v10[5];
  if (v18 >= v9)
    v19 = v9;
  else
    v19 = v18;
  v20 = memcmp(v8, v17, v19);
  if (v20)
  {
    if ((v20 & 0x80000000) == 0)
      goto LABEL_37;
LABEL_41:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    sub_223996958(", expected [Center|Corner][Pinhole|Heikkila][F|D]", &v23, &v24);
    std::logic_error::logic_error(exception, &v24);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  if (v9 < v18)
    goto LABEL_41;
LABEL_37:
  *a2 = *((_DWORD *)v10 + 14);
  if (v6 < 0)
    operator delete(v7);
  return a1;
}

void sub_224153924(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CF030);
  _Unwind_Resume(a1);
}

void sub_22415393C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v28 & 1) == 0)
    {
LABEL_8:
      if (a27 < 0)
        operator delete(a22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

void sub_2241539B4()
{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  size_t v3;
  int v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  BOOL v11;
  int v12;
  const void *v13;
  size_t v14;
  const void *v15;
  size_t v16;
  size_t v17;
  int v18;
  uint64_t *v19;
  size_t v20;
  size_t v21;
  const void *v22;
  size_t v23;
  size_t v24;
  int v25;
  int v26;
  _OWORD v27[2];
  void *v28;
  _BYTE v29[15];
  unsigned __int8 v30;
  _BYTE v31[24];
  int v32;
  char v33;
  _QWORD v34[2];
  _QWORD v35[4];

  v0 = 0;
  v35[2] = *MEMORY[0x24BDAC8D0];
  qword_2540CF040 = 0;
  v27[0] = xmmword_22469B840;
  v27[1] = unk_22469B850;
  qword_2540CF048 = 0;
  qword_2540CF038 = (uint64_t)&qword_2540CF040;
  v1 = &qword_2540CF000;
  do
  {
    while (1)
    {
      v32 = 0;
      sub_224071C40((uint64_t)v34, (uint64_t)v31, (int *)v27 + v0);
      if (v32 == -1)
        sub_22316DD70();
      v34[0] = &v33;
      ((void (*)(void **__return_ptr, _QWORD *, _BYTE *))off_24EC6C3C0[v32])(&v28, v34, v31);
      if (v32 != -1)
        ((void (*)(_QWORD *, _BYTE *))off_24EC6C3A8[v32])(v34, v31);
      v2 = v28;
      v35[0] = *(_QWORD *)v29;
      *(_QWORD *)((char *)v35 + 7) = *(_QWORD *)&v29[7];
      v3 = v30;
      v4 = (char)v30;
      v5 = operator new(0x40uLL);
      v5[4] = v2;
      v5[5] = v35[0];
      *(_QWORD *)((char *)v5 + 47) = *(_QWORD *)((char *)v35 + 7);
      *((_BYTE *)v5 + 55) = v4;
      v35[0] = 0;
      *(_QWORD *)((char *)v35 + 7) = 0;
      *((_DWORD *)v5 + 14) = *((_DWORD *)v27 + v0);
      v6 = (uint64_t *)v1[7];
      v8 = &qword_2540CF040;
      v7 = qword_2540CF040;
      if (v6 == &qword_2540CF040)
        goto LABEL_52;
      v9 = qword_2540CF040;
      if (qword_2540CF040)
      {
        do
        {
          v8 = (uint64_t *)v9;
          v9 = *(_QWORD *)(v9 + 8);
        }
        while (v9);
      }
      else
      {
        v10 = &qword_2540CF040;
        do
        {
          v8 = (uint64_t *)v10[2];
          v11 = *v8 == (_QWORD)v10;
          v10 = v8;
        }
        while (v11);
      }
      v12 = *((char *)v8 + 55);
      if (v12 >= 0)
        v13 = v8 + 4;
      else
        v13 = (const void *)v8[4];
      if (v12 >= 0)
        v14 = *((unsigned __int8 *)v8 + 55);
      else
        v14 = v8[5];
      if (v4 >= 0)
        v15 = v5 + 4;
      else
        v15 = v2;
      if (v4 >= 0)
        v16 = v3;
      else
        v16 = v5[5];
      if (v16 >= v14)
        v17 = v14;
      else
        v17 = v16;
      v18 = memcmp(v13, v15, v17);
      if (!v18)
      {
        if (v14 < v16)
          goto LABEL_52;
LABEL_29:
        if (!v7)
        {
LABEL_58:
          v8 = &qword_2540CF040;
          v19 = &qword_2540CF040;
          goto LABEL_59;
        }
        while (1)
        {
          v8 = (uint64_t *)v7;
          v20 = *(unsigned __int8 *)(v7 + 55);
          v21 = *(_QWORD *)(v7 + 40);
          if ((v20 & 0x80u) == 0)
            v22 = (const void *)(v7 + 32);
          else
            v22 = *(const void **)(v7 + 32);
          if ((v20 & 0x80u) == 0)
            v23 = v20;
          else
            v23 = v21;
          if (v23 >= v16)
            v24 = v16;
          else
            v24 = v23;
          v25 = memcmp(v15, v22, v24);
          if (v25)
          {
            if (v25 < 0)
              goto LABEL_31;
LABEL_45:
            v26 = memcmp(v22, v15, v24);
            if (v26)
            {
              if ((v26 & 0x80000000) == 0)
                goto LABEL_54;
            }
            else if (v23 >= v16)
            {
              goto LABEL_54;
            }
            v7 = v8[1];
            if (!v7)
            {
              v19 = v8 + 1;
              goto LABEL_59;
            }
          }
          else
          {
            if (v16 >= v23)
              goto LABEL_45;
LABEL_31:
            v7 = *v8;
            v19 = v8;
            if (!*v8)
              goto LABEL_59;
          }
        }
      }
      if ((v18 & 0x80000000) == 0)
        goto LABEL_29;
LABEL_52:
      if (!v7)
        goto LABEL_58;
      v19 = v8 + 1;
      if (v8[1])
        break;
LABEL_59:
      *v5 = 0;
      v5[1] = 0;
      v5[2] = v8;
      *v19 = (uint64_t)v5;
      v1 = &qword_2540CF000;
      if (*(_QWORD *)qword_2540CF038)
      {
        qword_2540CF038 = *(_QWORD *)qword_2540CF038;
        v5 = (_QWORD *)*v19;
      }
      sub_2231A9A8C((uint64_t *)qword_2540CF040, v5);
      ++qword_2540CF048;
      if (++v0 == 8)
        return;
    }
LABEL_54:
    if (v4 < 0)
      operator delete(v2);
    operator delete(v5);
    v1 = &qword_2540CF000;
    ++v0;
  }
  while (v0 != 8);
}

void sub_224153D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,int a21)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_224153D6C(uint64_t a1)
{
  sub_22375C06C(*(char **)(a1 + 8));
  return a1;
}

__int128 *sub_224153D94()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_255790AC0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255790AC0))
    return &xmmword_255790AA8;
  v2 = sub_224153E70();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&xmmword_255790AA8, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_255790AB8 = v2->__r_.__value_.__r.__words[2];
    xmmword_255790AA8 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255790AA8, &dword_22314D000);
  __cxa_guard_release(&qword_255790AC0);
  return &xmmword_255790AA8;
}

void sub_224153E58(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255790AC0);
  _Unwind_Resume(a1);
}

std::string *sub_224153E70()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_255790AE0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255790AE0))
    return &stru_255790AC8;
  sub_224154104((uint64_t)__p);
  sub_224153F60((char *)__p, &stru_255790AC8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255790AC8, &dword_22314D000);
  __cxa_guard_release(&qword_255790AE0);
  return &stru_255790AC8;
}

void sub_224153F20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_255790AE0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_255790AE0);
  _Unwind_Resume(a1);
}

void sub_224153F60(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *v13[2];
  uint64_t v14;
  __int128 v15;
  std::string::size_type v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)v13 = *(_OWORD *)"float32";
  v14 = 0x700000000000000;
  v4 = sub_223BE0C88();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&v15, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v16 = v4->__r_.__value_.__r.__words[2];
    v15 = v5;
  }
  sub_22319BD1C(&__p, (uint64_t)v13, 2uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v14) & 0x80000000) == 0)
      return;
LABEL_16:
    operator delete(v13[0]);
    return;
  }
  operator delete((void *)v15);
  if (SHIBYTE(v14) < 0)
    goto LABEL_16;
}

void sub_2241540A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_22319BB48(&a10);
  if (a24 < 0)
  {
    operator delete(__p);
    if ((a18 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a18 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a13);
  _Unwind_Resume(a1);
}

void sub_224154104(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_255790B00);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_255790B00))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cam::PinholeCamera<float, cv3d::kit::cam::PixelOrigin::Center>]", qword_255790AE8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255790AE8, &dword_22314D000);
    __cxa_guard_release(&qword_255790B00);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_255790B20);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_255790B20))
  {
    v5 = sub_2231A38CC(qword_255790AE8, "<", 0);
    sub_2231A37C8(qword_255790AE8, 0, v5, qword_255790B08);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255790B08, &dword_22314D000);
    __cxa_guard_release(&qword_255790B20);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_255790B40);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_255790B40))
  {
    sub_224573040((uint64_t)qword_255790B08, (uint64_t)&xmmword_255790B28);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255790B28, &dword_22314D000);
    __cxa_guard_release(&qword_255790B40);
  }
  if (byte_255790B3F < 0)
  {
    sub_223197FA4((_BYTE *)a1, (void *)xmmword_255790B28, *((unint64_t *)&xmmword_255790B28 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_255790B28;
    *(_QWORD *)(a1 + 16) = unk_255790B38;
  }
}

void sub_2241542A0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255790B40);
  _Unwind_Resume(a1);
}

void sub_2241542B8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255790B20);
  _Unwind_Resume(a1);
}

void sub_2241542D0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255790B00);
  _Unwind_Resume(a1);
}

void sub_2241542E8(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_224154324()
{
  _QWORD *v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t result;

  v1 = (_QWORD *)v0[1];
  v2 = (std::__shared_weak_count *)v1[4];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(v1);
  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_224154380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  unint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if ((char *)v6 != "N4cv3d3kit5camio19PinholeCameraSampleIfLNS0_3cam11PixelOriginE1ELj2EEE"
      && (((v6 & (unint64_t)"N4cv3d3kit5camio19PinholeCameraSampleIfLNS0_3cam11PixelOriginE1ELj2EEE" & 0x8000000000000000) != 0) == __OFSUB__(v6, "N4cv3d3kit5camio19PinholeCameraSampleIfLNS0_3cam11PixelOriginE1ELj2EEE")
       || strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit5camio19PinholeCameraSampleIfLNS0_3cam11PixelOriginE1ELj2EEE" & 0x7FFFFFFFFFFFFFFFLL))))
    {
      return 0;
    }
  }
  else if (a5 != &unk_224697234)
  {
    return 0;
  }
  return *(_QWORD *)(v5 + 8);
}

void sub_224154470(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__int128 *sub_224154484()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_255790B60);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255790B60))
    return &xmmword_255790B48;
  v2 = sub_224154560();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&xmmword_255790B48, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_255790B58 = v2->__r_.__value_.__r.__words[2];
    xmmword_255790B48 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255790B48, &dword_22314D000);
  __cxa_guard_release(&qword_255790B60);
  return &xmmword_255790B48;
}

void sub_224154548(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255790B60);
  _Unwind_Resume(a1);
}

std::string *sub_224154560()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_255790B80);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255790B80))
    return &stru_255790B68;
  sub_2241547F4((uint64_t)__p);
  sub_224154650((char *)__p, &stru_255790B68);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255790B68, &dword_22314D000);
  __cxa_guard_release(&qword_255790B80);
  return &stru_255790B68;
}

void sub_224154610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_255790B80);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_255790B80);
  _Unwind_Resume(a1);
}

void sub_224154650(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *v13[2];
  uint64_t v14;
  __int128 v15;
  std::string::size_type v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)v13 = *(_OWORD *)"float64";
  v14 = 0x700000000000000;
  v4 = sub_223BE0C88();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&v15, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v16 = v4->__r_.__value_.__r.__words[2];
    v15 = v5;
  }
  sub_22319BD1C(&__p, (uint64_t)v13, 2uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v14) & 0x80000000) == 0)
      return;
LABEL_16:
    operator delete(v13[0]);
    return;
  }
  operator delete((void *)v15);
  if (SHIBYTE(v14) < 0)
    goto LABEL_16;
}

void sub_224154798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_22319BB48(&a10);
  if (a24 < 0)
  {
    operator delete(__p);
    if ((a18 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a18 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a13);
  _Unwind_Resume(a1);
}

void sub_2241547F4(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_255790BA0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_255790BA0))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cam::PinholeCamera<double, cv3d::kit::cam::PixelOrigin::Center>]", qword_255790B88);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255790B88, &dword_22314D000);
    __cxa_guard_release(&qword_255790BA0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_255790BC0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_255790BC0))
  {
    v5 = sub_2231A38CC(qword_255790B88, "<", 0);
    sub_2231A37C8(qword_255790B88, 0, v5, qword_255790BA8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255790BA8, &dword_22314D000);
    __cxa_guard_release(&qword_255790BC0);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_255790BE0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_255790BE0))
  {
    sub_224573040((uint64_t)qword_255790BA8, (uint64_t)&xmmword_255790BC8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255790BC8, &dword_22314D000);
    __cxa_guard_release(&qword_255790BE0);
  }
  if (byte_255790BDF < 0)
  {
    sub_223197FA4((_BYTE *)a1, (void *)xmmword_255790BC8, *((unint64_t *)&xmmword_255790BC8 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_255790BC8;
    *(_QWORD *)(a1 + 16) = unk_255790BD8;
  }
}

void sub_224154990(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255790BE0);
  _Unwind_Resume(a1);
}

void sub_2241549A8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255790BC0);
  _Unwind_Resume(a1);
}

void sub_2241549C0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255790BA0);
  _Unwind_Resume(a1);
}

void sub_2241549D8(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_224154A14()
{
  _QWORD *v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t result;

  v1 = (_QWORD *)v0[1];
  v2 = (std::__shared_weak_count *)v1[6];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(v1);
  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_224154A70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  unint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if ((char *)v6 != "N4cv3d3kit5camio19PinholeCameraSampleIdLNS0_3cam11PixelOriginE1ELj2EEE"
      && (((v6 & (unint64_t)"N4cv3d3kit5camio19PinholeCameraSampleIdLNS0_3cam11PixelOriginE1ELj2EEE" & 0x8000000000000000) != 0) == __OFSUB__(v6, "N4cv3d3kit5camio19PinholeCameraSampleIdLNS0_3cam11PixelOriginE1ELj2EEE")
       || strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit5camio19PinholeCameraSampleIdLNS0_3cam11PixelOriginE1ELj2EEE" & 0x7FFFFFFFFFFFFFFFLL))))
    {
      return 0;
    }
  }
  else if (a5 != &unk_224697308)
  {
    return 0;
  }
  return *(_QWORD *)(v5 + 8);
}

void sub_224154B60(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__int128 *sub_224154B74()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_255790C00);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255790C00))
    return &xmmword_255790BE8;
  v2 = sub_224154C50();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&xmmword_255790BE8, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_255790BF8 = v2->__r_.__value_.__r.__words[2];
    xmmword_255790BE8 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255790BE8, &dword_22314D000);
  __cxa_guard_release(&qword_255790C00);
  return &xmmword_255790BE8;
}

void sub_224154C38(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255790C00);
  _Unwind_Resume(a1);
}

std::string *sub_224154C50()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_255790C20);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255790C20))
    return &stru_255790C08;
  sub_224154EE4((uint64_t)__p);
  sub_224154D40((char *)__p, &stru_255790C08);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255790C08, &dword_22314D000);
  __cxa_guard_release(&qword_255790C20);
  return &stru_255790C08;
}

void sub_224154D00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_255790C20);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_255790C20);
  _Unwind_Resume(a1);
}

void sub_224154D40(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *v13[2];
  uint64_t v14;
  __int128 v15;
  std::string::size_type v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)v13 = *(_OWORD *)"float32";
  v14 = 0x700000000000000;
  v4 = sub_224087A9C();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&v15, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v16 = v4->__r_.__value_.__r.__words[2];
    v15 = v5;
  }
  sub_22319BD1C(&__p, (uint64_t)v13, 2uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v14) & 0x80000000) == 0)
      return;
LABEL_16:
    operator delete(v13[0]);
    return;
  }
  operator delete((void *)v15);
  if (SHIBYTE(v14) < 0)
    goto LABEL_16;
}

void sub_224154E88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_22319BB48(&a10);
  if (a24 < 0)
  {
    operator delete(__p);
    if ((a18 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a18 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a13);
  _Unwind_Resume(a1);
}

void sub_224154EE4(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_255790C40);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_255790C40))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cam::PinholeCamera<float, cv3d::kit::cam::PixelOrigin::Corner>]", qword_255790C28);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255790C28, &dword_22314D000);
    __cxa_guard_release(&qword_255790C40);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_255790C60);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_255790C60))
  {
    v5 = sub_2231A38CC(qword_255790C28, "<", 0);
    sub_2231A37C8(qword_255790C28, 0, v5, qword_255790C48);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255790C48, &dword_22314D000);
    __cxa_guard_release(&qword_255790C60);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_255790C80);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_255790C80))
  {
    sub_224573040((uint64_t)qword_255790C48, (uint64_t)&xmmword_255790C68);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255790C68, &dword_22314D000);
    __cxa_guard_release(&qword_255790C80);
  }
  if (byte_255790C7F < 0)
  {
    sub_223197FA4((_BYTE *)a1, (void *)xmmword_255790C68, *((unint64_t *)&xmmword_255790C68 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_255790C68;
    *(_QWORD *)(a1 + 16) = unk_255790C78;
  }
}

void sub_224155080(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255790C80);
  _Unwind_Resume(a1);
}

void sub_224155098(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255790C60);
  _Unwind_Resume(a1);
}

void sub_2241550B0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255790C40);
  _Unwind_Resume(a1);
}

void sub_2241550C8(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_224155104()
{
  _QWORD *v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t result;

  v1 = (_QWORD *)v0[1];
  v2 = (std::__shared_weak_count *)v1[4];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(v1);
  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_224155160(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  unint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if ((char *)v6 != "N4cv3d3kit5camio19PinholeCameraSampleIfLNS0_3cam11PixelOriginE0ELj2EEE"
      && (((v6 & (unint64_t)"N4cv3d3kit5camio19PinholeCameraSampleIfLNS0_3cam11PixelOriginE0ELj2EEE" & 0x8000000000000000) != 0) == __OFSUB__(v6, "N4cv3d3kit5camio19PinholeCameraSampleIfLNS0_3cam11PixelOriginE0ELj2EEE")
       || strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit5camio19PinholeCameraSampleIfLNS0_3cam11PixelOriginE0ELj2EEE" & 0x7FFFFFFFFFFFFFFFLL))))
    {
      return 0;
    }
  }
  else if (a5 != &unk_2246973DC)
  {
    return 0;
  }
  return *(_QWORD *)(v5 + 8);
}

void sub_224155250(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__int128 *sub_224155264()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_255790CA0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255790CA0))
    return &xmmword_255790C88;
  v2 = sub_224155340();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&xmmword_255790C88, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_255790C98 = v2->__r_.__value_.__r.__words[2];
    xmmword_255790C88 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255790C88, &dword_22314D000);
  __cxa_guard_release(&qword_255790CA0);
  return &xmmword_255790C88;
}

void sub_224155328(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255790CA0);
  _Unwind_Resume(a1);
}

std::string *sub_224155340()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_255790CC0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255790CC0))
    return &stru_255790CA8;
  sub_2241555D4((uint64_t)__p);
  sub_224155430((char *)__p, &stru_255790CA8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255790CA8, &dword_22314D000);
  __cxa_guard_release(&qword_255790CC0);
  return &stru_255790CA8;
}

void sub_2241553F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_255790CC0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_255790CC0);
  _Unwind_Resume(a1);
}

void sub_224155430(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *v13[2];
  uint64_t v14;
  __int128 v15;
  std::string::size_type v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)v13 = *(_OWORD *)"float64";
  v14 = 0x700000000000000;
  v4 = sub_224087A9C();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&v15, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v16 = v4->__r_.__value_.__r.__words[2];
    v15 = v5;
  }
  sub_22319BD1C(&__p, (uint64_t)v13, 2uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v14) & 0x80000000) == 0)
      return;
LABEL_16:
    operator delete(v13[0]);
    return;
  }
  operator delete((void *)v15);
  if (SHIBYTE(v14) < 0)
    goto LABEL_16;
}

void sub_224155578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_22319BB48(&a10);
  if (a24 < 0)
  {
    operator delete(__p);
    if ((a18 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a18 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a13);
  _Unwind_Resume(a1);
}

void sub_2241555D4(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_255790CE0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_255790CE0))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cam::PinholeCamera<double, cv3d::kit::cam::PixelOrigin::Corner>]", qword_255790CC8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255790CC8, &dword_22314D000);
    __cxa_guard_release(&qword_255790CE0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_255790D00);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_255790D00))
  {
    v5 = sub_2231A38CC(qword_255790CC8, "<", 0);
    sub_2231A37C8(qword_255790CC8, 0, v5, qword_255790CE8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255790CE8, &dword_22314D000);
    __cxa_guard_release(&qword_255790D00);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_255790D20);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_255790D20))
  {
    sub_224573040((uint64_t)qword_255790CE8, (uint64_t)&xmmword_255790D08);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255790D08, &dword_22314D000);
    __cxa_guard_release(&qword_255790D20);
  }
  if (byte_255790D1F < 0)
  {
    sub_223197FA4((_BYTE *)a1, (void *)xmmword_255790D08, *((unint64_t *)&xmmword_255790D08 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_255790D08;
    *(_QWORD *)(a1 + 16) = unk_255790D18;
  }
}

void sub_224155770(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255790D20);
  _Unwind_Resume(a1);
}

void sub_224155788(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255790D00);
  _Unwind_Resume(a1);
}

void sub_2241557A0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255790CE0);
  _Unwind_Resume(a1);
}

void sub_2241557B8(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_2241557F4()
{
  _QWORD *v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t result;

  v1 = (_QWORD *)v0[1];
  v2 = (std::__shared_weak_count *)v1[6];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(v1);
  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_224155850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  unint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if ((char *)v6 != "N4cv3d3kit5camio19PinholeCameraSampleIdLNS0_3cam11PixelOriginE0ELj2EEE"
      && (((v6 & (unint64_t)"N4cv3d3kit5camio19PinholeCameraSampleIdLNS0_3cam11PixelOriginE0ELj2EEE" & 0x8000000000000000) != 0) == __OFSUB__(v6, "N4cv3d3kit5camio19PinholeCameraSampleIdLNS0_3cam11PixelOriginE0ELj2EEE")
       || strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit5camio19PinholeCameraSampleIdLNS0_3cam11PixelOriginE0ELj2EEE" & 0x7FFFFFFFFFFFFFFFLL))))
    {
      return 0;
    }
  }
  else if (a5 != &unk_2246974B0)
  {
    return 0;
  }
  return *(_QWORD *)(v5 + 8);
}

void sub_224155940(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__int128 *sub_224155954()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_255790D40);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255790D40))
    return &xmmword_255790D28;
  v2 = sub_224155A30();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&xmmword_255790D28, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_255790D38 = v2->__r_.__value_.__r.__words[2];
    xmmword_255790D28 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255790D28, &dword_22314D000);
  __cxa_guard_release(&qword_255790D40);
  return &xmmword_255790D28;
}

void sub_224155A18(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255790D40);
  _Unwind_Resume(a1);
}

std::string *sub_224155A30()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_255790D60);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255790D60))
    return &stru_255790D48;
  sub_224155B20((uint64_t)__p);
  sub_224153F60((char *)__p, &stru_255790D48);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255790D48, &dword_22314D000);
  __cxa_guard_release(&qword_255790D60);
  return &stru_255790D48;
}

void sub_224155AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_255790D60);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_255790D60);
  _Unwind_Resume(a1);
}

void sub_224155B20(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_255790D80);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_255790D80))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cam::HeikkilaCamera<float, cv3d::kit::cam::PixelOrigin::Center>]", qword_255790D68);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255790D68, &dword_22314D000);
    __cxa_guard_release(&qword_255790D80);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_255790DA0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_255790DA0))
  {
    v5 = sub_2231A38CC(qword_255790D68, "<", 0);
    sub_2231A37C8(qword_255790D68, 0, v5, qword_255790D88);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255790D88, &dword_22314D000);
    __cxa_guard_release(&qword_255790DA0);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_255790DC0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_255790DC0))
  {
    sub_224573040((uint64_t)qword_255790D88, (uint64_t)&xmmword_255790DA8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255790DA8, &dword_22314D000);
    __cxa_guard_release(&qword_255790DC0);
  }
  if (byte_255790DBF < 0)
  {
    sub_223197FA4((_BYTE *)a1, (void *)xmmword_255790DA8, *((unint64_t *)&xmmword_255790DA8 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_255790DA8;
    *(_QWORD *)(a1 + 16) = unk_255790DB8;
  }
}

void sub_224155CBC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255790DC0);
  _Unwind_Resume(a1);
}

void sub_224155CD4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255790DA0);
  _Unwind_Resume(a1);
}

void sub_224155CEC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255790D80);
  _Unwind_Resume(a1);
}

void sub_224155D04(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_224155D40()
{
  _QWORD *v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t result;

  v1 = (_QWORD *)v0[1];
  v2 = (std::__shared_weak_count *)v1[7];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(v1);
  result = 0;
  *v0 = 0;
  return result;
}

__n128 sub_224155D9C()
{
  void (**v0)(int);
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  __int16 v9;
  __int128 v10;
  __int128 v11;
  __n128 result;
  __int128 v13;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = (char *)operator new(0x40uLL);
  v4 = sub_22415767C(v2);
  v5 = *(_OWORD *)(v4 + 32);
  *(_OWORD *)v3 = *(_OWORD *)(v4 + 16);
  *((_OWORD *)v3 + 1) = v5;
  *((_DWORD *)v3 + 8) = *(_DWORD *)(v4 + 48);
  v6 = *(_QWORD *)(v4 + 120);
  *(_QWORD *)(v3 + 36) = v6;
  v7 = (char *)operator new(0x98uLL);
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = 0;
  *(_QWORD *)v7 = &off_24EC6CB38;
  v8 = *(_QWORD *)(v4 + 52);
  v9 = *(_WORD *)(v4 + 112);
  v10 = *(_OWORD *)(v4 + 16);
  *((_QWORD *)v7 + 4) = &off_24EC6C678;
  *(_OWORD *)(v7 + 40) = v10;
  v11 = *(_OWORD *)(v4 + 32);
  *((_DWORD *)v7 + 18) = *(_DWORD *)(v4 + 48);
  *(_OWORD *)(v7 + 56) = v11;
  *(_QWORD *)(v7 + 76) = v8;
  *(_OWORD *)(v7 + 84) = *(_OWORD *)(v4 + 60);
  result = *(__n128 *)(v4 + 76);
  v13 = *(_OWORD *)(v4 + 92);
  *((_DWORD *)v7 + 33) = *(_DWORD *)(v4 + 108);
  *(_OWORD *)(v7 + 116) = v13;
  *(__n128 *)(v7 + 100) = result;
  *((_WORD *)v7 + 68) = v9;
  *((_QWORD *)v7 + 18) = v6;
  *((_QWORD *)v7 + 3) = &off_24EC6C620;
  *((_QWORD *)v3 + 6) = v7 + 24;
  *((_QWORD *)v3 + 7) = v7;
  *v0 = sub_224155D04;
  v0[1] = (void (*)(int))v3;
  return result;
}

uint64_t sub_224155E7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  unint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if ((char *)v6 != "N4cv3d3kit5camio20HeikkilaCameraSampleIfLNS0_3cam11PixelOriginE1ELj2EEE"
      && (((v6 & (unint64_t)"N4cv3d3kit5camio20HeikkilaCameraSampleIfLNS0_3cam11PixelOriginE1ELj2EEE" & 0x8000000000000000) != 0) == __OFSUB__(v6, "N4cv3d3kit5camio20HeikkilaCameraSampleIfLNS0_3cam11PixelOriginE1ELj2EEE")
       || strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit5camio20HeikkilaCameraSampleIfLNS0_3cam11PixelOriginE1ELj2EEE" & 0x7FFFFFFFFFFFFFFFLL))))
    {
      return 0;
    }
  }
  else if (a5 != &unk_224697588)
  {
    return 0;
  }
  return *(_QWORD *)(v5 + 8);
}

void sub_224155F34(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__int128 *sub_224155F48()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_255790DE0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255790DE0))
    return &xmmword_255790DC8;
  v2 = sub_224156024();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&xmmword_255790DC8, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_255790DD8 = v2->__r_.__value_.__r.__words[2];
    xmmword_255790DC8 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255790DC8, &dword_22314D000);
  __cxa_guard_release(&qword_255790DE0);
  return &xmmword_255790DC8;
}

void sub_22415600C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255790DE0);
  _Unwind_Resume(a1);
}

std::string *sub_224156024()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_255790E00);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255790E00))
    return &stru_255790DE8;
  sub_224156114((uint64_t)__p);
  sub_224154650((char *)__p, &stru_255790DE8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255790DE8, &dword_22314D000);
  __cxa_guard_release(&qword_255790E00);
  return &stru_255790DE8;
}

void sub_2241560D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_255790E00);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_255790E00);
  _Unwind_Resume(a1);
}

void sub_224156114(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_255790E20);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_255790E20))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cam::HeikkilaCamera<double, cv3d::kit::cam::PixelOrigin::Center>]", qword_255790E08);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255790E08, &dword_22314D000);
    __cxa_guard_release(&qword_255790E20);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_255790E40);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_255790E40))
  {
    v5 = sub_2231A38CC(qword_255790E08, "<", 0);
    sub_2231A37C8(qword_255790E08, 0, v5, qword_255790E28);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255790E28, &dword_22314D000);
    __cxa_guard_release(&qword_255790E40);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_255790E60);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_255790E60))
  {
    sub_224573040((uint64_t)qword_255790E28, (uint64_t)&xmmword_255790E48);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255790E48, &dword_22314D000);
    __cxa_guard_release(&qword_255790E60);
  }
  if (byte_255790E5F < 0)
  {
    sub_223197FA4((_BYTE *)a1, (void *)xmmword_255790E48, *((unint64_t *)&xmmword_255790E48 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_255790E48;
    *(_QWORD *)(a1 + 16) = unk_255790E58;
  }
}

void sub_2241562B0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255790E60);
  _Unwind_Resume(a1);
}

void sub_2241562C8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255790E40);
  _Unwind_Resume(a1);
}

void sub_2241562E0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255790E20);
  _Unwind_Resume(a1);
}

void sub_2241562F8(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_224156338()
{
  _QWORD *v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t result;

  v1 = (_QWORD *)v0[1];
  v2 = (std::__shared_weak_count *)v1[11];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(v1);
  result = 0;
  *v0 = 0;
  return result;
}

__n128 sub_224156398()
{
  void (**v0)(int);
  uint64_t v1;
  uint64_t v2;
  _OWORD *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  char *v8;
  __int16 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __n128 result;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = operator new(0x60uLL);
  v4 = sub_2241577A4(v2);
  v5 = *(_OWORD *)(v4 + 32);
  *v3 = *(_OWORD *)(v4 + 16);
  v3[1] = v5;
  v6 = *(_OWORD *)(v4 + 64);
  v3[2] = *(_OWORD *)(v4 + 48);
  v3[3] = v6;
  v7 = *(_QWORD *)(v4 + 216);
  *((_QWORD *)v3 + 8) = *(_QWORD *)(v4 + 80);
  *((_QWORD *)v3 + 9) = v7;
  v8 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_24EC6CBD8;
  v9 = *(_WORD *)(v4 + 208);
  *((_QWORD *)v8 + 4) = &off_24EC6C838;
  *(_OWORD *)(v8 + 40) = *(_OWORD *)(v4 + 16);
  *(_OWORD *)(v8 + 56) = *(_OWORD *)(v4 + 32);
  v10 = *(_OWORD *)(v4 + 48);
  v11 = *(_OWORD *)(v4 + 64);
  *((_QWORD *)v8 + 13) = *(_QWORD *)(v4 + 80);
  *(_OWORD *)(v8 + 88) = v11;
  *(_OWORD *)(v8 + 72) = v10;
  v12 = *(_QWORD *)(v4 + 88);
  *((_DWORD *)v8 + 30) = *(_DWORD *)(v4 + 96);
  *((_QWORD *)v8 + 14) = v12;
  v13 = *(_OWORD *)(v4 + 120);
  *((_OWORD *)v8 + 8) = *(_OWORD *)(v4 + 104);
  *((_OWORD *)v8 + 9) = v13;
  v14 = *(_OWORD *)(v4 + 152);
  v15 = *(_OWORD *)(v4 + 168);
  v16 = *(_OWORD *)(v4 + 184);
  *((_QWORD *)v8 + 28) = *(_QWORD *)(v4 + 200);
  *((_OWORD *)v8 + 12) = v15;
  *((_OWORD *)v8 + 13) = v16;
  *((_OWORD *)v8 + 11) = v14;
  result = *(__n128 *)(v4 + 136);
  *((__n128 *)v8 + 10) = result;
  *((_WORD *)v8 + 116) = v9;
  *((_QWORD *)v8 + 30) = v7;
  *((_QWORD *)v8 + 3) = &off_24EC6C7E0;
  *((_QWORD *)v3 + 10) = v8 + 24;
  *((_QWORD *)v3 + 11) = v8;
  *v0 = sub_2241562F8;
  v0[1] = (void (*)(int))v3;
  return result;
}

uint64_t sub_2241564B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  unint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if ((char *)v6 != "N4cv3d3kit5camio20HeikkilaCameraSampleIdLNS0_3cam11PixelOriginE1ELj2EEE"
      && (((v6 & (unint64_t)"N4cv3d3kit5camio20HeikkilaCameraSampleIdLNS0_3cam11PixelOriginE1ELj2EEE" & 0x8000000000000000) != 0) == __OFSUB__(v6, "N4cv3d3kit5camio20HeikkilaCameraSampleIdLNS0_3cam11PixelOriginE1ELj2EEE")
       || strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit5camio20HeikkilaCameraSampleIdLNS0_3cam11PixelOriginE1ELj2EEE" & 0x7FFFFFFFFFFFFFFFLL))))
    {
      return 0;
    }
  }
  else if (a5 != &unk_224697660)
  {
    return 0;
  }
  return *(_QWORD *)(v5 + 8);
}

void sub_22415657C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__int128 *sub_224156590()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_255790E80);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255790E80))
    return &xmmword_255790E68;
  v2 = sub_22415666C();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&xmmword_255790E68, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_255790E78 = v2->__r_.__value_.__r.__words[2];
    xmmword_255790E68 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255790E68, &dword_22314D000);
  __cxa_guard_release(&qword_255790E80);
  return &xmmword_255790E68;
}

void sub_224156654(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255790E80);
  _Unwind_Resume(a1);
}

std::string *sub_22415666C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_255790EA0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255790EA0))
    return &stru_255790E88;
  sub_22415675C((uint64_t)__p);
  sub_224154D40((char *)__p, &stru_255790E88);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255790E88, &dword_22314D000);
  __cxa_guard_release(&qword_255790EA0);
  return &stru_255790E88;
}

void sub_22415671C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_255790EA0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_255790EA0);
  _Unwind_Resume(a1);
}

void sub_22415675C(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_255790EC0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_255790EC0))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cam::HeikkilaCamera<float, cv3d::kit::cam::PixelOrigin::Corner>]", qword_255790EA8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255790EA8, &dword_22314D000);
    __cxa_guard_release(&qword_255790EC0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_255790EE0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_255790EE0))
  {
    v5 = sub_2231A38CC(qword_255790EA8, "<", 0);
    sub_2231A37C8(qword_255790EA8, 0, v5, qword_255790EC8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255790EC8, &dword_22314D000);
    __cxa_guard_release(&qword_255790EE0);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_255790F00);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_255790F00))
  {
    sub_224573040((uint64_t)qword_255790EC8, (uint64_t)&xmmword_255790EE8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255790EE8, &dword_22314D000);
    __cxa_guard_release(&qword_255790F00);
  }
  if (byte_255790EFF < 0)
  {
    sub_223197FA4((_BYTE *)a1, (void *)xmmword_255790EE8, *((unint64_t *)&xmmword_255790EE8 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_255790EE8;
    *(_QWORD *)(a1 + 16) = unk_255790EF8;
  }
}

void sub_2241568F8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255790F00);
  _Unwind_Resume(a1);
}

void sub_224156910(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255790EE0);
  _Unwind_Resume(a1);
}

void sub_224156928(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255790EC0);
  _Unwind_Resume(a1);
}

void sub_224156940(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_22415697C()
{
  _QWORD *v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t result;

  v1 = (_QWORD *)v0[1];
  v2 = (std::__shared_weak_count *)v1[7];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(v1);
  result = 0;
  *v0 = 0;
  return result;
}

__n128 sub_2241569D8()
{
  void (**v0)(int);
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  __int16 v9;
  __int128 v10;
  __int128 v11;
  __n128 result;
  __int128 v13;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = (char *)operator new(0x40uLL);
  v4 = sub_22415767C(v2);
  v5 = *(_OWORD *)(v4 + 32);
  *(_OWORD *)v3 = *(_OWORD *)(v4 + 16);
  *((_OWORD *)v3 + 1) = v5;
  *((_DWORD *)v3 + 8) = *(_DWORD *)(v4 + 48);
  v6 = *(_QWORD *)(v4 + 120);
  *(_QWORD *)(v3 + 36) = v6;
  v7 = (char *)operator new(0x98uLL);
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = 0;
  *(_QWORD *)v7 = &off_24EC6CB88;
  v8 = *(_QWORD *)(v4 + 52);
  v9 = *(_WORD *)(v4 + 112);
  v10 = *(_OWORD *)(v4 + 16);
  *((_QWORD *)v7 + 4) = &off_24EC6C678;
  *(_OWORD *)(v7 + 40) = v10;
  v11 = *(_OWORD *)(v4 + 32);
  *((_DWORD *)v7 + 18) = *(_DWORD *)(v4 + 48);
  *(_OWORD *)(v7 + 56) = v11;
  *(_QWORD *)(v7 + 76) = v8;
  *(_OWORD *)(v7 + 84) = *(_OWORD *)(v4 + 60);
  result = *(__n128 *)(v4 + 76);
  v13 = *(_OWORD *)(v4 + 92);
  *((_DWORD *)v7 + 33) = *(_DWORD *)(v4 + 108);
  *(_OWORD *)(v7 + 116) = v13;
  *(__n128 *)(v7 + 100) = result;
  *((_WORD *)v7 + 68) = v9;
  *((_QWORD *)v7 + 18) = v6;
  *((_QWORD *)v7 + 3) = &off_24EC6C730;
  *((_QWORD *)v3 + 6) = v7 + 24;
  *((_QWORD *)v3 + 7) = v7;
  *v0 = sub_224156940;
  v0[1] = (void (*)(int))v3;
  return result;
}

uint64_t sub_224156AB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  unint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if ((char *)v6 != "N4cv3d3kit5camio20HeikkilaCameraSampleIfLNS0_3cam11PixelOriginE0ELj2EEE"
      && (((v6 & (unint64_t)"N4cv3d3kit5camio20HeikkilaCameraSampleIfLNS0_3cam11PixelOriginE0ELj2EEE" & 0x8000000000000000) != 0) == __OFSUB__(v6, "N4cv3d3kit5camio20HeikkilaCameraSampleIfLNS0_3cam11PixelOriginE0ELj2EEE")
       || strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit5camio20HeikkilaCameraSampleIfLNS0_3cam11PixelOriginE0ELj2EEE" & 0x7FFFFFFFFFFFFFFFLL))))
    {
      return 0;
    }
  }
  else if (a5 != &unk_224697738)
  {
    return 0;
  }
  return *(_QWORD *)(v5 + 8);
}

void sub_224156B70(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__int128 *sub_224156B84()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_255790F20);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255790F20))
    return &xmmword_255790F08;
  v2 = sub_224156C60();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&xmmword_255790F08, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_255790F18 = v2->__r_.__value_.__r.__words[2];
    xmmword_255790F08 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255790F08, &dword_22314D000);
  __cxa_guard_release(&qword_255790F20);
  return &xmmword_255790F08;
}

void sub_224156C48(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255790F20);
  _Unwind_Resume(a1);
}

std::string *sub_224156C60()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_255790F40);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_255790F40))
    return &stru_255790F28;
  sub_224156D50((uint64_t)__p);
  sub_224155430((char *)__p, &stru_255790F28);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255790F28, &dword_22314D000);
  __cxa_guard_release(&qword_255790F40);
  return &stru_255790F28;
}

void sub_224156D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_255790F40);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_255790F40);
  _Unwind_Resume(a1);
}

void sub_224156D50(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_255790F60);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_255790F60))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cam::HeikkilaCamera<double, cv3d::kit::cam::PixelOrigin::Corner>]", qword_255790F48);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255790F48, &dword_22314D000);
    __cxa_guard_release(&qword_255790F60);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_255790F80);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_255790F80))
  {
    v5 = sub_2231A38CC(qword_255790F48, "<", 0);
    sub_2231A37C8(qword_255790F48, 0, v5, qword_255790F68);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_255790F68, &dword_22314D000);
    __cxa_guard_release(&qword_255790F80);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_255790FA0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_255790FA0))
  {
    sub_224573040((uint64_t)qword_255790F68, (uint64_t)&xmmword_255790F88);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255790F88, &dword_22314D000);
    __cxa_guard_release(&qword_255790FA0);
  }
  if (byte_255790F9F < 0)
  {
    sub_223197FA4((_BYTE *)a1, (void *)xmmword_255790F88, *((unint64_t *)&xmmword_255790F88 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_255790F88;
    *(_QWORD *)(a1 + 16) = unk_255790F98;
  }
}

void sub_224156EEC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255790FA0);
  _Unwind_Resume(a1);
}

void sub_224156F04(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255790F80);
  _Unwind_Resume(a1);
}

void sub_224156F1C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255790F60);
  _Unwind_Resume(a1);
}

void sub_224156F34(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_224156F74()
{
  _QWORD *v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t result;

  v1 = (_QWORD *)v0[1];
  v2 = (std::__shared_weak_count *)v1[11];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(v1);
  result = 0;
  *v0 = 0;
  return result;
}

__n128 sub_224156FD4()
{
  void (**v0)(int);
  uint64_t v1;
  uint64_t v2;
  _OWORD *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  char *v8;
  __int16 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __n128 result;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = operator new(0x60uLL);
  v4 = sub_2241577A4(v2);
  v5 = *(_OWORD *)(v4 + 32);
  *v3 = *(_OWORD *)(v4 + 16);
  v3[1] = v5;
  v6 = *(_OWORD *)(v4 + 64);
  v3[2] = *(_OWORD *)(v4 + 48);
  v3[3] = v6;
  v7 = *(_QWORD *)(v4 + 216);
  *((_QWORD *)v3 + 8) = *(_QWORD *)(v4 + 80);
  *((_QWORD *)v3 + 9) = v7;
  v8 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_24EC6CC28;
  v9 = *(_WORD *)(v4 + 208);
  *((_QWORD *)v8 + 4) = &off_24EC6C838;
  *(_OWORD *)(v8 + 40) = *(_OWORD *)(v4 + 16);
  *(_OWORD *)(v8 + 56) = *(_OWORD *)(v4 + 32);
  v10 = *(_OWORD *)(v4 + 48);
  v11 = *(_OWORD *)(v4 + 64);
  *((_QWORD *)v8 + 13) = *(_QWORD *)(v4 + 80);
  *(_OWORD *)(v8 + 88) = v11;
  *(_OWORD *)(v8 + 72) = v10;
  v12 = *(_QWORD *)(v4 + 88);
  *((_DWORD *)v8 + 30) = *(_DWORD *)(v4 + 96);
  *((_QWORD *)v8 + 14) = v12;
  v13 = *(_OWORD *)(v4 + 120);
  *((_OWORD *)v8 + 8) = *(_OWORD *)(v4 + 104);
  *((_OWORD *)v8 + 9) = v13;
  v14 = *(_OWORD *)(v4 + 152);
  v15 = *(_OWORD *)(v4 + 168);
  v16 = *(_OWORD *)(v4 + 184);
  *((_QWORD *)v8 + 28) = *(_QWORD *)(v4 + 200);
  *((_OWORD *)v8 + 12) = v15;
  *((_OWORD *)v8 + 13) = v16;
  *((_OWORD *)v8 + 11) = v14;
  result = *(__n128 *)(v4 + 136);
  *((__n128 *)v8 + 10) = result;
  *((_WORD *)v8 + 116) = v9;
  *((_QWORD *)v8 + 30) = v7;
  *((_QWORD *)v8 + 3) = &off_24EC6C8F0;
  *((_QWORD *)v3 + 10) = v8 + 24;
  *((_QWORD *)v3 + 11) = v8;
  *v0 = sub_224156F34;
  v0[1] = (void (*)(int))v3;
  return result;
}

uint64_t sub_2241570EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  unint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if ((char *)v6 != "N4cv3d3kit5camio20HeikkilaCameraSampleIdLNS0_3cam11PixelOriginE0ELj2EEE"
      && (((v6 & (unint64_t)"N4cv3d3kit5camio20HeikkilaCameraSampleIdLNS0_3cam11PixelOriginE0ELj2EEE" & 0x8000000000000000) != 0) == __OFSUB__(v6, "N4cv3d3kit5camio20HeikkilaCameraSampleIdLNS0_3cam11PixelOriginE0ELj2EEE")
       || strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit5camio20HeikkilaCameraSampleIdLNS0_3cam11PixelOriginE0ELj2EEE" & 0x7FFFFFFFFFFFFFFFLL))))
    {
      return 0;
    }
  }
  else if (a5 != &unk_224697810)
  {
    return 0;
  }
  return *(_QWORD *)(v5 + 8);
}

void sub_2241571B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2241571CC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6C3E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2241571DC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6C3E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22415720C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_22415721C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6C438;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22415722C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6C438;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22415725C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_22415726C(_QWORD *result)
{
  *result = &off_24EC6C948;
  return result;
}

void sub_22415727C(_QWORD *a1)
{
  *a1 = &off_24EC6C948;
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22415729C()
{
  return 0;
}

uint64_t sub_2241572A4()
{
  return 1;
}

uint64_t sub_2241572AC()
{
  return 12;
}

uint64_t sub_2241572B4(uint64_t a1)
{
  return a1 + 152;
}

_QWORD *sub_2241572BC(_QWORD *result)
{
  *result = &off_24EC6C948;
  return result;
}

void sub_2241572CC(_QWORD *a1)
{
  *a1 = &off_24EC6C948;
  JUMPOUT(0x227684CE8);
}

void sub_2241572EC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6C488;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2241572FC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6C488;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22415732C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_22415733C(_QWORD *result)
{
  *result = &off_24EC6C5C8;
  return result;
}

void sub_22415734C(_QWORD *a1)
{
  *a1 = &off_24EC6C5C8;
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22415736C()
{
  return 1;
}

uint64_t sub_224157374()
{
  return 2;
}

uint64_t sub_22415737C()
{
  return 11;
}

uint64_t sub_224157384(uint64_t a1)
{
  return a1 + 120;
}

_QWORD *sub_22415738C(_QWORD *result)
{
  *result = &off_24EC6C5C8;
  return result;
}

void sub_22415739C(_QWORD *a1)
{
  *a1 = &off_24EC6C5C8;
  JUMPOUT(0x227684CE8);
}

void sub_2241573C0()
{
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2241573D4()
{
  return 2;
}

uint64_t sub_2241573DC()
{
  return 11;
}

void sub_2241573E4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6C4D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2241573F4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6C4D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_224157424(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_224157434(_QWORD *result)
{
  *result = &off_24EC6C788;
  return result;
}

void sub_224157444(_QWORD *a1)
{
  *a1 = &off_24EC6C788;
  JUMPOUT(0x227684CE8);
}

uint64_t sub_224157464()
{
  return 1;
}

uint64_t sub_22415746C()
{
  return 2;
}

uint64_t sub_224157474()
{
  return 12;
}

uint64_t sub_22415747C(uint64_t a1)
{
  return a1 + 216;
}

_QWORD *sub_224157484(_QWORD *result)
{
  *result = &off_24EC6C788;
  return result;
}

void sub_224157494(_QWORD *a1)
{
  *a1 = &off_24EC6C788;
  JUMPOUT(0x227684CE8);
}

void sub_2241574B8()
{
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2241574CC()
{
  return 2;
}

uint64_t sub_2241574D4()
{
  return 12;
}

void sub_2241574DC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6C528;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2241574EC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6C528;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22415751C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_22415752C(_QWORD *result)
{
  *result = &off_24EC6C6D8;
  return result;
}

void sub_22415753C(_QWORD *a1)
{
  *a1 = &off_24EC6C6D8;
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22415755C()
{
  return 0;
}

uint64_t sub_224157564()
{
  return 2;
}

uint64_t sub_22415756C()
{
  return 11;
}

uint64_t sub_224157574(uint64_t a1)
{
  return a1 + 120;
}

_QWORD *sub_22415757C(_QWORD *result)
{
  *result = &off_24EC6C6D8;
  return result;
}

void sub_22415758C(_QWORD *a1)
{
  *a1 = &off_24EC6C6D8;
  JUMPOUT(0x227684CE8);
}

void sub_2241575AC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6C578;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2241575BC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6C578;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2241575EC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_2241575FC(_QWORD *result)
{
  *result = &off_24EC6C898;
  return result;
}

void sub_22415760C(_QWORD *a1)
{
  *a1 = &off_24EC6C898;
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22415762C()
{
  return 0;
}

uint64_t sub_224157634()
{
  return 2;
}

uint64_t sub_22415763C()
{
  return 12;
}

uint64_t sub_224157644(uint64_t a1)
{
  return a1 + 216;
}

_QWORD *sub_22415764C(_QWORD *result)
{
  *result = &off_24EC6C898;
  return result;
}

void sub_22415765C(_QWORD *a1)
{
  *a1 = &off_24EC6C898;
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22415767C(uint64_t a1)
{
  uint64_t v1;
  float v2;
  float v3;
  float v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v15;
  int32x2_t v16;
  int8x16_t v17;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(float *)(a1 + 24);
  v3 = *(float *)(a1 + 28);
  v4 = *(float *)(a1 + 32);
  v5 = v2 == 0.0;
  if (v3 != 0.0)
    v5 = 0;
  if (v4 != 0.0)
    v5 = 0;
  v6 = *(_QWORD *)(a1 + 36);
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(float32x2_t *)a1;
  v9 = *(float32x2_t *)(a1 + 8);
  __asm { FMOV            V5.2S, #1.0 }
  v15 = vdiv_f32(_D5, *(float32x2_t *)a1);
  v16 = vzip1_s32(*(int32x2_t *)a1, (int32x2_t)v9);
  v17.i64[0] = v16.u32[0];
  v17.i64[1] = v16.u32[1];
  *(int8x16_t *)(v7 + 16) = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32(*(int32x2_t *)a1, (int32x2_t)v9), 0x20uLL), v17);
  *(_QWORD *)(v7 + 32) = v1;
  *(float *)(v7 + 40) = v2;
  *(float *)(v7 + 44) = v3;
  *(float *)(v7 + 48) = v4;
  *(_QWORD *)(v7 + 52) = 0xA3727C5ACLL;
  *(float32x2_t *)(v7 + 60) = v15;
  *(float32x2_t *)(v7 + 68) = vmul_f32(v15, vneg_f32(v9));
  *(_DWORD *)(v7 + 76) = v8.i32[0];
  *(_QWORD *)(v7 + 80) = 0;
  *(_DWORD *)(v7 + 88) = 0;
  *(_DWORD *)(v7 + 92) = v8.i32[1];
  *(_DWORD *)(v7 + 96) = 0;
  *(float32x2_t *)(v7 + 100) = v9;
  *(_DWORD *)(v7 + 108) = 1065353216;
  *(_WORD *)(v7 + 112) = v5 | ((v4 == 0.0) << 8);
  *(_QWORD *)(v7 + 120) = v6;
  return *(_QWORD *)(a1 + 48);
}

uint64_t sub_22415773C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 56);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_2241577A4(uint64_t a1)
{
  double v1;
  double v2;
  double v3;
  double v4;
  __int128 v5;
  double v6;
  double v7;
  double v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(double *)a1;
  v2 = *(double *)(a1 + 8);
  v3 = *(double *)(a1 + 16);
  v4 = *(double *)(a1 + 24);
  v5 = *(_OWORD *)(a1 + 32);
  v6 = *(double *)(a1 + 48);
  v7 = *(double *)(a1 + 56);
  v8 = *(double *)(a1 + 64);
  v9 = v6 == 0.0;
  v10 = *(_QWORD *)(a1 + 72);
  v11 = *(_QWORD *)(a1 + 80);
  if (v7 != 0.0)
    v9 = 0;
  *(double *)(v11 + 16) = v1;
  *(double *)(v11 + 24) = v2;
  *(double *)(v11 + 32) = v3;
  *(double *)(v11 + 40) = v4;
  *(_OWORD *)(v11 + 48) = v5;
  *(double *)(v11 + 64) = v6;
  *(double *)(v11 + 72) = v7;
  *(_QWORD *)(v11 + 88) = 0x3EE4F8B588E368F1;
  *(_DWORD *)(v11 + 96) = 10;
  *(double *)(v11 + 80) = v8;
  if (v8 != 0.0)
    v9 = 0;
  *(double *)(v11 + 104) = 1.0 / v1;
  *(double *)(v11 + 112) = 1.0 / v2;
  *(double *)(v11 + 120) = -(v3 * (1.0 / v1));
  *(double *)(v11 + 128) = -(v4 * (1.0 / v2));
  *(double *)(v11 + 136) = v1;
  *(_QWORD *)(v11 + 152) = 0;
  *(_QWORD *)(v11 + 160) = 0;
  *(_QWORD *)(v11 + 144) = 0;
  *(double *)(v11 + 168) = v2;
  *(_QWORD *)(v11 + 176) = 0;
  *(double *)(v11 + 184) = v3;
  *(double *)(v11 + 192) = v4;
  *(_QWORD *)(v11 + 200) = 0x3FF0000000000000;
  *(_WORD *)(v11 + 208) = v9 | ((v8 == 0.0) << 8);
  *(_QWORD *)(v11 + 216) = v10;
  return *(_QWORD *)(a1 + 80);
}

uint64_t sub_22415789C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 88);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_224157904(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  char *v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  *(_QWORD *)a1 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 24);
  v4 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 36) = *(_QWORD *)(a2 + 120);
  v5 = (char *)operator new(0x98uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24EC6CB88;
  v6 = *(_QWORD *)(a2 + 52);
  v7 = *(_WORD *)(a2 + 112);
  v8 = *(_QWORD *)(a2 + 120);
  *((_QWORD *)v5 + 4) = &off_24EC6C678;
  v9 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v5 + 40) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v5 + 56) = v9;
  *((_DWORD *)v5 + 18) = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(v5 + 76) = v6;
  *(_OWORD *)(v5 + 84) = *(_OWORD *)(a2 + 60);
  v10 = *(_OWORD *)(a2 + 76);
  v11 = *(_OWORD *)(a2 + 92);
  *((_DWORD *)v5 + 33) = *(_DWORD *)(a2 + 108);
  *(_OWORD *)(v5 + 116) = v11;
  *(_OWORD *)(v5 + 100) = v10;
  *((_WORD *)v5 + 68) = v7;
  *((_QWORD *)v5 + 18) = v8;
  *(_QWORD *)(a1 + 56) = v5;
  *((_QWORD *)v5 + 3) = &off_24EC6C730;
  *(_QWORD *)(a1 + 48) = v5 + 24;
  return a1;
}

uint64_t sub_2241579D4(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  char *v6;
  __int16 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  *(_OWORD *)a1 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 216);
  v6 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_24EC6CBD8;
  v7 = *(_WORD *)(a2 + 208);
  v8 = *(_QWORD *)(a2 + 216);
  *((_QWORD *)v6 + 4) = &off_24EC6C838;
  v9 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v6 + 40) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v6 + 56) = v9;
  v10 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v6 + 72) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v6 + 88) = v10;
  *((_DWORD *)v6 + 30) = *(_DWORD *)(a2 + 96);
  v11 = *(_QWORD *)(a2 + 88);
  *((_QWORD *)v6 + 13) = *(_QWORD *)(a2 + 80);
  *((_QWORD *)v6 + 14) = v11;
  v12 = *(_OWORD *)(a2 + 120);
  *((_OWORD *)v6 + 8) = *(_OWORD *)(a2 + 104);
  *((_OWORD *)v6 + 9) = v12;
  v13 = *(_OWORD *)(a2 + 152);
  v14 = *(_OWORD *)(a2 + 184);
  *((_OWORD *)v6 + 12) = *(_OWORD *)(a2 + 168);
  *((_OWORD *)v6 + 13) = v14;
  *((_QWORD *)v6 + 28) = *(_QWORD *)(a2 + 200);
  *((_OWORD *)v6 + 10) = *(_OWORD *)(a2 + 136);
  *((_OWORD *)v6 + 11) = v13;
  *((_WORD *)v6 + 116) = v7;
  *((_QWORD *)v6 + 30) = v8;
  *(_QWORD *)(a1 + 88) = v6;
  *((_QWORD *)v6 + 3) = &off_24EC6C7E0;
  *(_QWORD *)(a1 + 80) = v6 + 24;
  return a1;
}

uint64_t sub_224157ABC(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  char *v6;
  __int16 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  *(_OWORD *)a1 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 216);
  v6 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_24EC6CC28;
  v7 = *(_WORD *)(a2 + 208);
  v8 = *(_QWORD *)(a2 + 216);
  *((_QWORD *)v6 + 4) = &off_24EC6C838;
  v9 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v6 + 40) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v6 + 56) = v9;
  v10 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v6 + 72) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v6 + 88) = v10;
  *((_DWORD *)v6 + 30) = *(_DWORD *)(a2 + 96);
  v11 = *(_QWORD *)(a2 + 88);
  *((_QWORD *)v6 + 13) = *(_QWORD *)(a2 + 80);
  *((_QWORD *)v6 + 14) = v11;
  v12 = *(_OWORD *)(a2 + 120);
  *((_OWORD *)v6 + 8) = *(_OWORD *)(a2 + 104);
  *((_OWORD *)v6 + 9) = v12;
  v13 = *(_OWORD *)(a2 + 152);
  v14 = *(_OWORD *)(a2 + 184);
  *((_OWORD *)v6 + 12) = *(_OWORD *)(a2 + 168);
  *((_OWORD *)v6 + 13) = v14;
  *((_QWORD *)v6 + 28) = *(_QWORD *)(a2 + 200);
  *((_OWORD *)v6 + 10) = *(_OWORD *)(a2 + 136);
  *((_OWORD *)v6 + 11) = v13;
  *((_WORD *)v6 + 116) = v7;
  *((_QWORD *)v6 + 30) = v8;
  *(_QWORD *)(a1 + 88) = v6;
  *((_QWORD *)v6 + 3) = &off_24EC6C8F0;
  *(_QWORD *)(a1 + 80) = v6 + 24;
  return a1;
}

_QWORD *sub_224157BA4(_QWORD *a1, uint64_t a2)
{
  __int128 v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  sub_2231813E8(a1, (uint64_t)"{Model: ", 8);
  sub_2231813E8(a1, (uint64_t)"{fx,fy: ", 8);
  v8 = *(_QWORD *)(a2 + 16);
  sub_223C72860(a1, (float *)&v8);
  sub_2231813E8(a1, (uint64_t)", cx,cy: ", 9);
  v7 = *(_QWORD *)(a2 + 24);
  sub_223C72860(a1, (float *)&v7);
  sub_2231813E8(a1, (uint64_t)", k1,k2,p1,p2,k3: ", 18);
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_DWORD *)(a2 + 48);
  sub_22415805C(a1, (float *)&v5);
  sub_2231813E8(a1, (uint64_t)"}", 1);
  sub_2231813E8(a1, (uint64_t)", Size: ", 8);
  sub_2231BFD90(a1, (unsigned int *)(a2 + 120));
  sub_2231813E8(a1, (uint64_t)"}", 1);
  return a1;
}

_QWORD *sub_224157CB0(_QWORD *a1, uint64_t a2)
{
  __int128 v4;
  _OWORD v6[2];
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  sub_2231813E8(a1, (uint64_t)"{Model: ", 8);
  sub_2231813E8(a1, (uint64_t)"{fx,fy: ", 8);
  v9 = *(_OWORD *)(a2 + 16);
  sub_224158360(a1, (double *)&v9);
  sub_2231813E8(a1, (uint64_t)", cx,cy: ", 9);
  v8 = *(_OWORD *)(a2 + 32);
  sub_224158360(a1, (double *)&v8);
  sub_2231813E8(a1, (uint64_t)", k1,k2,p1,p2,k3: ", 18);
  v4 = *(_OWORD *)(a2 + 64);
  v6[0] = *(_OWORD *)(a2 + 48);
  v6[1] = v4;
  v7 = *(_QWORD *)(a2 + 80);
  sub_224158590(a1, (double *)v6);
  sub_2231813E8(a1, (uint64_t)"}", 1);
  sub_2231813E8(a1, (uint64_t)", Size: ", 8);
  sub_2231BFD90(a1, (unsigned int *)(a2 + 216));
  sub_2231813E8(a1, (uint64_t)"}", 1);
  return a1;
}

void sub_224157DBC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6C9F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_224157DCC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6C9F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_224157DFC(uint64_t result)
{
  *(_QWORD *)(result + 24) = &off_24EC6C5C8;
  return result;
}

void sub_224157E10(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6CA48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_224157E20(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6CA48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_224157E50(uint64_t result)
{
  *(_QWORD *)(result + 24) = &off_24EC6C6D8;
  return result;
}

void sub_224157E64(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6CA98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_224157E74(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6CA98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_224157EA4(uint64_t result)
{
  *(_QWORD *)(result + 24) = &off_24EC6C788;
  return result;
}

void sub_224157EB8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6CAE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_224157EC8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6CAE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_224157EF8(uint64_t result)
{
  *(_QWORD *)(result + 24) = &off_24EC6C898;
  return result;
}

void sub_224157F0C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6CB38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_224157F1C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6CB38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_224157F4C(uint64_t result)
{
  *(_QWORD *)(result + 24) = &off_24EC6C5C8;
  return result;
}

void sub_224157F60(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6CB88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_224157F70(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6CB88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_224157FA0(uint64_t result)
{
  *(_QWORD *)(result + 24) = &off_24EC6C6D8;
  return result;
}

void sub_224157FB4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6CBD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_224157FC4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6CBD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_224157FF4(uint64_t result)
{
  *(_QWORD *)(result + 24) = &off_24EC6C788;
  return result;
}

void sub_224158008(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6CC28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_224158018(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6CC28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_224158048(uint64_t result)
{
  *(_QWORD *)(result + 24) = &off_24EC6C898;
  return result;
}

_QWORD *sub_22415805C(_QWORD *a1, float *a2)
{
  void **v3;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  void *__p[2];
  unsigned __int8 v8;
  _BYTE v9[24];
  int v10;
  char v11;
  char *v12;

  v10 = 0;
  sub_224158188((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1)
    sub_22316DD70();
  v12 = &v11;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24EC6CC98[v10])(__p, &v12, v9);
  if (v10 != -1)
    ((void (*)(char **, _BYTE *))off_24EC6CC68[v10])(&v12, v9);
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  result = sub_2231813E8(a1, (uint64_t)v3, v4);
  v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_224158144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_224158160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_224158174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_224158188(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  const char *v16;
  uint64_t *v17;

  v12 = a2;
  v13 = "{";
  v14 = a2;
  v15 = "{";
  v16 = "{";
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_8;
  v17 = &v12;
  ((void (*)(uint64_t **))off_24EC6CC80[v3])(&v17);
  sub_223208764((uint64_t)&v12, a2, a3);
  v12 = a2;
  v13 = ",";
  v14 = a2;
  v15 = ",";
  v16 = ",";
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    goto LABEL_8;
  v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_24EC6CC80[v6])(&v17, a2);
  sub_223208764((uint64_t)&v12, a2, a3 + 1);
  v12 = a2;
  v13 = ",";
  v14 = a2;
  v15 = ",";
  v16 = ",";
  v7 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v7 == -1)
    goto LABEL_8;
  v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_24EC6CC80[v7])(&v17, a2);
  sub_223208764((uint64_t)&v12, a2, a3 + 2);
  v12 = a2;
  v13 = ",";
  v14 = a2;
  v15 = ",";
  v16 = ",";
  v8 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v8 == -1)
    goto LABEL_8;
  v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_24EC6CC80[v8])(&v17, a2);
  sub_223208764((uint64_t)&v12, a2, a3 + 3);
  v12 = a2;
  v13 = ",";
  v14 = a2;
  v15 = ",";
  v16 = ",";
  v9 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v9 == -1)
    goto LABEL_8;
  v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_24EC6CC80[v9])(&v17, a2);
  sub_223208764((uint64_t)&v12, a2, a3 + 4);
  v12 = a2;
  v13 = "}";
  v14 = a2;
  v15 = "}";
  v16 = "}";
  v10 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v10 == -1)
LABEL_8:
    sub_22316DD70();
  v17 = &v12;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24EC6CC80[v10])(&v17, a2);
}

_QWORD *sub_224158360(_QWORD *a1, double *a2)
{
  void **v3;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  void *__p[2];
  unsigned __int8 v8;
  _BYTE v9[24];
  int v10;
  char v11;
  char *v12;

  v10 = 0;
  sub_22415848C((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1)
    sub_22316DD70();
  v12 = &v11;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24EC6CC98[v10])(__p, &v12, v9);
  if (v10 != -1)
    ((void (*)(char **, _BYTE *))off_24EC6CC68[v10])(&v12, v9);
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  result = sub_2231813E8(a1, (uint64_t)v3, v4);
  v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_224158448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_224158464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_224158478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_22415848C(uint64_t a1, uint64_t a2, double *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  const char *v13;
  uint64_t *v14;

  v9 = a2;
  v10 = "{";
  v11 = a2;
  v12 = "{";
  v13 = "{";
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_5;
  v14 = &v9;
  ((void (*)(uint64_t **))off_24EC6CC80[v3])(&v14);
  sub_2233B45E8((uint64_t)&v9, a2, a3);
  v9 = a2;
  v10 = ",";
  v11 = a2;
  v12 = ",";
  v13 = ",";
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    goto LABEL_5;
  v14 = &v9;
  ((void (*)(uint64_t **, uint64_t))off_24EC6CC80[v6])(&v14, a2);
  sub_2233B45E8((uint64_t)&v9, a2, a3 + 1);
  v9 = a2;
  v10 = "}";
  v11 = a2;
  v12 = "}";
  v13 = "}";
  v7 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v7 == -1)
LABEL_5:
    sub_22316DD70();
  v14 = &v9;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24EC6CC80[v7])(&v14, a2);
}

_QWORD *sub_224158590(_QWORD *a1, double *a2)
{
  void **v3;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  void *__p[2];
  unsigned __int8 v8;
  _BYTE v9[24];
  int v10;
  char v11;
  char *v12;

  v10 = 0;
  sub_2241586BC((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1)
    sub_22316DD70();
  v12 = &v11;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24EC6CC98[v10])(__p, &v12, v9);
  if (v10 != -1)
    ((void (*)(char **, _BYTE *))off_24EC6CC68[v10])(&v12, v9);
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  result = sub_2231813E8(a1, (uint64_t)v3, v4);
  v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_224158678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_224158694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2241586A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2241586BC(uint64_t a1, uint64_t a2, double *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  const char *v16;
  uint64_t *v17;

  v12 = a2;
  v13 = "{";
  v14 = a2;
  v15 = "{";
  v16 = "{";
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_8;
  v17 = &v12;
  ((void (*)(uint64_t **))off_24EC6CC80[v3])(&v17);
  sub_2233B45E8((uint64_t)&v12, a2, a3);
  v12 = a2;
  v13 = ",";
  v14 = a2;
  v15 = ",";
  v16 = ",";
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    goto LABEL_8;
  v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_24EC6CC80[v6])(&v17, a2);
  sub_2233B45E8((uint64_t)&v12, a2, a3 + 1);
  v12 = a2;
  v13 = ",";
  v14 = a2;
  v15 = ",";
  v16 = ",";
  v7 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v7 == -1)
    goto LABEL_8;
  v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_24EC6CC80[v7])(&v17, a2);
  sub_2233B45E8((uint64_t)&v12, a2, a3 + 2);
  v12 = a2;
  v13 = ",";
  v14 = a2;
  v15 = ",";
  v16 = ",";
  v8 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v8 == -1)
    goto LABEL_8;
  v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_24EC6CC80[v8])(&v17, a2);
  sub_2233B45E8((uint64_t)&v12, a2, a3 + 3);
  v12 = a2;
  v13 = ",";
  v14 = a2;
  v15 = ",";
  v16 = ",";
  v9 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v9 == -1)
    goto LABEL_8;
  v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_24EC6CC80[v9])(&v17, a2);
  sub_2233B45E8((uint64_t)&v12, a2, a3 + 4);
  v12 = a2;
  v13 = "}";
  v14 = a2;
  v15 = "}";
  v16 = "}";
  v10 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v10 == -1)
LABEL_8:
    sub_22316DD70();
  v17 = &v12;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24EC6CC80[v10])(&v17, a2);
}

_QWORD *sub_224158894(_QWORD *a1)
{
  char *v2;
  int32x4_t v3;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = (char *)operator new(0x78uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24EC6CCC0;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 6) = 0;
  *((_QWORD *)v2 + 4) = &off_24EC20868;
  v3 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v2 + 56) = v3;
  *(int32x4_t *)(v2 + 72) = v3;
  *(int32x4_t *)(v2 + 88) = v3;
  *((_DWORD *)v2 + 26) = 2143289344;
  *((_QWORD *)v2 + 14) = 0;
  a1[4] = v2;
  *((_QWORD *)v2 + 3) = &off_24EC207B8;
  a1[3] = v2 + 24;
  return a1;
}

uint64_t sub_224158914(float32x2_t *a1)
{
  float32x2_t v1;
  float32x2_t v2;
  float32x2_t v3;
  float32x2_t v4;
  float32x2_t v10;
  int32x2_t v11;
  int8x16_t v12;

  v1 = a1[2];
  v2 = a1[3];
  v3 = *a1;
  v4 = a1[1];
  __asm { FMOV            V2.2S, #1.0 }
  v10 = vdiv_f32(_D2, *a1);
  v11 = vzip1_s32((int32x2_t)*a1, (int32x2_t)v4);
  v12.i64[0] = v11.u32[0];
  v12.i64[1] = v11.u32[1];
  *(int8x16_t *)(*(_QWORD *)&v2 + 16) = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)*a1, (int32x2_t)v4), 0x20uLL), v12);
  *(float32x2_t *)(*(_QWORD *)&v2 + 32) = v10;
  *(float32x2_t *)(*(_QWORD *)&v2 + 40) = vmul_f32(v10, vneg_f32(v4));
  *(_DWORD *)(*(_QWORD *)&v2 + 48) = v3.i32[0];
  *(_QWORD *)(*(_QWORD *)&v2 + 56) = 0;
  *(_DWORD *)(*(_QWORD *)&v2 + 52) = 0;
  *(_DWORD *)(*(_QWORD *)&v2 + 64) = v3.i32[1];
  *(_DWORD *)(*(_QWORD *)&v2 + 68) = 0;
  *(float32x2_t *)(*(_QWORD *)&v2 + 72) = v4;
  *(_DWORD *)(*(_QWORD *)&v2 + 80) = 1065353216;
  *(float32x2_t *)(*(_QWORD *)&v2 + 88) = v1;
  return (uint64_t)a1[3];
}

uint64_t sub_224158980(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 48);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

_QWORD *sub_2241589E8(_QWORD *a1)
{
  char *v2;
  int32x4_t v3;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = (char *)operator new(0x78uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24EC6CE00;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 6) = 0;
  *((_QWORD *)v2 + 4) = &off_24EC20868;
  v3 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v2 + 56) = v3;
  *(int32x4_t *)(v2 + 72) = v3;
  *(int32x4_t *)(v2 + 88) = v3;
  *((_DWORD *)v2 + 26) = 2143289344;
  *((_QWORD *)v2 + 14) = 0;
  a1[4] = v2;
  *((_QWORD *)v2 + 3) = &off_24EC207B8;
  a1[3] = v2 + 24;
  return a1;
}

_QWORD *sub_224158A68(_QWORD *a1, uint64_t a2)
{
  char *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  *a1 = *(_QWORD *)(a2 + 16);
  a1[1] = *(_QWORD *)(a2 + 24);
  a1[2] = *(_QWORD *)(a2 + 88);
  v4 = (char *)operator new(0x78uLL);
  v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 56) = v5;
  v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v4 + 72) = *(_OWORD *)(a2 + 48);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_24EC6CE00;
  v7 = *(_QWORD *)(a2 + 88);
  *((_QWORD *)v4 + 4) = &off_24EC20868;
  *(_OWORD *)(v4 + 88) = v6;
  *((_DWORD *)v4 + 26) = *(_DWORD *)(a2 + 80);
  *((_QWORD *)v4 + 14) = v7;
  a1[4] = v4;
  *((_QWORD *)v4 + 3) = &off_24EC207B8;
  a1[3] = v4 + 24;
  return a1;
}

_QWORD *sub_224158B04(_QWORD *a1, float32x2_t *a2)
{
  float32x2_t v3;
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v12;
  int32x2_t v13;
  int8x16_t v14;
  float32x2_t v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  int v19;
  __int128 v20;

  v3 = a2[2];
  v4 = a2[3];
  v5 = *a2;
  v6 = a2[1];
  __asm { FMOV            V2.2S, #1.0 }
  v12 = vdiv_f32(_D2, *a2);
  v13 = vzip1_s32((int32x2_t)*a2, (int32x2_t)v6);
  v14.i64[0] = v13.u32[0];
  v14.i64[1] = v13.u32[1];
  *(int8x16_t *)(*(_QWORD *)&v4 + 16) = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)*a2, (int32x2_t)v6), 0x20uLL), v14);
  *(float32x2_t *)(*(_QWORD *)&v4 + 32) = v12;
  *(float32x2_t *)(*(_QWORD *)&v4 + 40) = vmul_f32(v12, vneg_f32(v6));
  *(_DWORD *)(*(_QWORD *)&v4 + 48) = v5.i32[0];
  *(_QWORD *)(*(_QWORD *)&v4 + 56) = 0;
  *(_DWORD *)(*(_QWORD *)&v4 + 52) = 0;
  *(_DWORD *)(*(_QWORD *)&v4 + 64) = v5.i32[1];
  *(_DWORD *)(*(_QWORD *)&v4 + 68) = 0;
  *(float32x2_t *)(*(_QWORD *)&v4 + 72) = v6;
  *(_DWORD *)(*(_QWORD *)&v4 + 80) = 1065353216;
  *(float32x2_t *)(*(_QWORD *)&v4 + 88) = v3;
  v15 = a2[3];
  *a1 = *(_QWORD *)(*(_QWORD *)&v15 + 16);
  a1[1] = *(_QWORD *)(*(_QWORD *)&v15 + 24);
  a1[2] = *(_QWORD *)(*(_QWORD *)&v15 + 88);
  v16 = (char *)operator new(0x78uLL);
  *((_QWORD *)v16 + 1) = 0;
  *((_QWORD *)v16 + 2) = 0;
  *(_QWORD *)v16 = &off_24EC6CE00;
  v17 = *(_QWORD *)(*(_QWORD *)&v15 + 88);
  v18 = *(_OWORD *)(*(_QWORD *)&v15 + 16);
  *((_QWORD *)v16 + 4) = &off_24EC20868;
  *(_OWORD *)(v16 + 40) = v18;
  *(_OWORD *)(v16 + 56) = *(_OWORD *)(*(_QWORD *)&v15 + 32);
  v19 = *(_DWORD *)(*(_QWORD *)&v15 + 80);
  v20 = *(_OWORD *)(*(_QWORD *)&v15 + 64);
  *(_OWORD *)(v16 + 72) = *(_OWORD *)(*(_QWORD *)&v15 + 48);
  *((_DWORD *)v16 + 26) = v19;
  *(_OWORD *)(v16 + 88) = v20;
  *((_QWORD *)v16 + 14) = v17;
  a1[4] = v16;
  *((_QWORD *)v16 + 3) = &off_24EC207B8;
  a1[3] = v16 + 24;
  return a1;
}

_QWORD *sub_224158C08(_QWORD *a1, float32x2_t *a2)
{
  float32x2_t v3;
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v12;
  int32x2_t v13;
  int8x16_t v14;
  float32x2_t v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  int v19;
  __int128 v20;

  v3 = a2[2];
  v4 = a2[3];
  v5 = *a2;
  v6 = a2[1];
  __asm { FMOV            V2.2S, #1.0 }
  v12 = vdiv_f32(_D2, *a2);
  v13 = vzip1_s32((int32x2_t)*a2, (int32x2_t)v6);
  v14.i64[0] = v13.u32[0];
  v14.i64[1] = v13.u32[1];
  *(int8x16_t *)(*(_QWORD *)&v4 + 16) = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)*a2, (int32x2_t)v6), 0x20uLL), v14);
  *(float32x2_t *)(*(_QWORD *)&v4 + 32) = v12;
  *(float32x2_t *)(*(_QWORD *)&v4 + 40) = vmul_f32(v12, vneg_f32(v6));
  *(_DWORD *)(*(_QWORD *)&v4 + 48) = v5.i32[0];
  *(_QWORD *)(*(_QWORD *)&v4 + 56) = 0;
  *(_DWORD *)(*(_QWORD *)&v4 + 52) = 0;
  *(_DWORD *)(*(_QWORD *)&v4 + 64) = v5.i32[1];
  *(_DWORD *)(*(_QWORD *)&v4 + 68) = 0;
  *(float32x2_t *)(*(_QWORD *)&v4 + 72) = v6;
  *(_DWORD *)(*(_QWORD *)&v4 + 80) = 1065353216;
  *(float32x2_t *)(*(_QWORD *)&v4 + 88) = v3;
  v15 = a2[3];
  *a1 = *(_QWORD *)(*(_QWORD *)&v15 + 16);
  a1[1] = *(_QWORD *)(*(_QWORD *)&v15 + 24);
  a1[2] = *(_QWORD *)(*(_QWORD *)&v15 + 88);
  v16 = (char *)operator new(0x78uLL);
  *((_QWORD *)v16 + 1) = 0;
  *((_QWORD *)v16 + 2) = 0;
  *(_QWORD *)v16 = &off_24EC6CE50;
  v17 = *(_QWORD *)(*(_QWORD *)&v15 + 88);
  v18 = *(_OWORD *)(*(_QWORD *)&v15 + 16);
  *((_QWORD *)v16 + 4) = &off_24EC20868;
  *(_OWORD *)(v16 + 40) = v18;
  *(_OWORD *)(v16 + 56) = *(_OWORD *)(*(_QWORD *)&v15 + 32);
  v19 = *(_DWORD *)(*(_QWORD *)&v15 + 80);
  v20 = *(_OWORD *)(*(_QWORD *)&v15 + 64);
  *(_OWORD *)(v16 + 72) = *(_OWORD *)(*(_QWORD *)&v15 + 48);
  *((_DWORD *)v16 + 26) = v19;
  *(_OWORD *)(v16 + 88) = v20;
  *((_QWORD *)v16 + 14) = v17;
  a1[4] = v16;
  *((_QWORD *)v16 + 3) = &off_24EC37688;
  a1[3] = v16 + 24;
  return a1;
}

uint64_t sub_224158D0C(uint64_t a1, uint64_t a2)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v3 = *(double *)a2;
  v4 = *(double *)(a2 + 8);
  v5 = *(double *)(a2 + 16);
  v6 = *(double *)(a2 + 24);
  v7 = 1.0 / *(double *)a2;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(v9 + 16) = *(_QWORD *)a2;
  *(double *)(v9 + 24) = v4;
  *(double *)(v9 + 32) = v5;
  *(double *)(v9 + 40) = v6;
  *(double *)(v9 + 48) = v7;
  *(double *)(v9 + 56) = 1.0 / v4;
  *(double *)(v9 + 64) = -(v5 * v7);
  *(double *)(v9 + 72) = -(v6 * (1.0 / v4));
  *(double *)(v9 + 80) = v3;
  *(_QWORD *)(v9 + 96) = 0;
  *(_QWORD *)(v9 + 104) = 0;
  *(_QWORD *)(v9 + 88) = 0;
  *(double *)(v9 + 112) = v4;
  *(_QWORD *)(v9 + 120) = 0;
  *(double *)(v9 + 128) = v5;
  *(double *)(v9 + 136) = v6;
  *(_QWORD *)(v9 + 144) = 0x3FF0000000000000;
  *(_QWORD *)(v9 + 152) = v8;
  v10 = *(_QWORD *)(a2 + 40);
  *(_OWORD *)a1 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v10 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v10 + 152);
  v11 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *(_QWORD *)v11 = &off_24EC6CEA0;
  v12 = *(_QWORD *)(v10 + 152);
  *((_QWORD *)v11 + 4) = &off_24EC35EF0;
  *(_OWORD *)(v11 + 40) = *(_OWORD *)(v10 + 16);
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(v10 + 32);
  v13 = *(_OWORD *)(v10 + 64);
  *(_OWORD *)(v11 + 72) = *(_OWORD *)(v10 + 48);
  *(_OWORD *)(v11 + 88) = v13;
  *(_OWORD *)(v11 + 104) = *(_OWORD *)(v10 + 80);
  v14 = *(_OWORD *)(v10 + 96);
  v15 = *(_OWORD *)(v10 + 112);
  v16 = *(_QWORD *)(v10 + 144);
  *(_OWORD *)(v11 + 152) = *(_OWORD *)(v10 + 128);
  *(_OWORD *)(v11 + 136) = v15;
  *(_OWORD *)(v11 + 120) = v14;
  *((_QWORD *)v11 + 21) = v16;
  *((_QWORD *)v11 + 22) = v12;
  *(_QWORD *)(a1 + 48) = v11;
  *((_QWORD *)v11 + 3) = &off_24EC35EB0;
  *(_QWORD *)(a1 + 40) = v11 + 24;
  return a1;
}

uint64_t sub_224158E14(uint64_t a1, uint64_t a2)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v3 = *(double *)a2;
  v4 = *(double *)(a2 + 8);
  v5 = *(double *)(a2 + 16);
  v6 = *(double *)(a2 + 24);
  v7 = 1.0 / *(double *)a2;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(v9 + 16) = *(_QWORD *)a2;
  *(double *)(v9 + 24) = v4;
  *(double *)(v9 + 32) = v5;
  *(double *)(v9 + 40) = v6;
  *(double *)(v9 + 48) = v7;
  *(double *)(v9 + 56) = 1.0 / v4;
  *(double *)(v9 + 64) = -(v5 * v7);
  *(double *)(v9 + 72) = -(v6 * (1.0 / v4));
  *(double *)(v9 + 80) = v3;
  *(_QWORD *)(v9 + 96) = 0;
  *(_QWORD *)(v9 + 104) = 0;
  *(_QWORD *)(v9 + 88) = 0;
  *(double *)(v9 + 112) = v4;
  *(_QWORD *)(v9 + 120) = 0;
  *(double *)(v9 + 128) = v5;
  *(double *)(v9 + 136) = v6;
  *(_QWORD *)(v9 + 144) = 0x3FF0000000000000;
  *(_QWORD *)(v9 + 152) = v8;
  v10 = *(_QWORD *)(a2 + 40);
  *(_OWORD *)a1 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v10 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v10 + 152);
  v11 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *(_QWORD *)v11 = &off_24EC6CEF0;
  v12 = *(_QWORD *)(v10 + 152);
  *((_QWORD *)v11 + 4) = &off_24EC35EF0;
  *(_OWORD *)(v11 + 40) = *(_OWORD *)(v10 + 16);
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(v10 + 32);
  v13 = *(_OWORD *)(v10 + 64);
  *(_OWORD *)(v11 + 72) = *(_OWORD *)(v10 + 48);
  *(_OWORD *)(v11 + 88) = v13;
  *(_OWORD *)(v11 + 104) = *(_OWORD *)(v10 + 80);
  v14 = *(_OWORD *)(v10 + 96);
  v15 = *(_OWORD *)(v10 + 112);
  v16 = *(_QWORD *)(v10 + 144);
  *(_OWORD *)(v11 + 152) = *(_OWORD *)(v10 + 128);
  *(_OWORD *)(v11 + 136) = v15;
  *(_OWORD *)(v11 + 120) = v14;
  *((_QWORD *)v11 + 21) = v16;
  *((_QWORD *)v11 + 22) = v12;
  *(_QWORD *)(a1 + 48) = v11;
  *((_QWORD *)v11 + 3) = &off_24EC6C9A0;
  *(_QWORD *)(a1 + 40) = v11 + 24;
  return a1;
}

_QWORD *sub_224158F1C(_QWORD *a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t v6;

  sub_2231813E8(a1, (uint64_t)"{Model: ", 8);
  sub_2231813E8(a1, (uint64_t)"{fx,fy: ", 8);
  v6 = *(_QWORD *)(a2 + 16);
  sub_223C72860(a1, (float *)&v6);
  sub_2231813E8(a1, (uint64_t)", cx,cy: ", 9);
  v5 = *(_QWORD *)(a2 + 24);
  sub_223C72860(a1, (float *)&v5);
  sub_2231813E8(a1, (uint64_t)"}", 1);
  sub_2231813E8(a1, (uint64_t)", Size: ", 8);
  sub_2231BFD90(a1, (unsigned int *)(a2 + 88));
  sub_2231813E8(a1, (uint64_t)"}", 1);
  return a1;
}

_QWORD *sub_224158FF8(_QWORD *a1, uint64_t a2)
{
  __int128 v5;
  __int128 v6;

  sub_2231813E8(a1, (uint64_t)"{Model: ", 8);
  sub_2231813E8(a1, (uint64_t)"{fx,fy: ", 8);
  v6 = *(_OWORD *)(a2 + 16);
  sub_224158360(a1, (double *)&v6);
  sub_2231813E8(a1, (uint64_t)", cx,cy: ", 9);
  v5 = *(_OWORD *)(a2 + 32);
  sub_224158360(a1, (double *)&v5);
  sub_2231813E8(a1, (uint64_t)"}", 1);
  sub_2231813E8(a1, (uint64_t)", Size: ", 8);
  sub_2231BFD90(a1, (unsigned int *)(a2 + 152));
  sub_2231813E8(a1, (uint64_t)"}", 1);
  return a1;
}

void sub_2241590D4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6CCC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2241590E4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6CCC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_224159114(uint64_t result)
{
  *(_QWORD *)(result + 24) = &off_24EC20828;
  return result;
}

void sub_224159128(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6CD10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_224159138(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6CD10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_224159168(uint64_t result)
{
  *(_QWORD *)(result + 24) = &off_24EC220E0;
  return result;
}

void sub_22415917C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6CD60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22415918C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6CD60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2241591BC(uint64_t result)
{
  *(_QWORD *)(result + 24) = &off_24EC35E10;
  return result;
}

void sub_2241591D0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6CDB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2241591E0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6CDB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_224159210(uint64_t result)
{
  *(_QWORD *)(result + 24) = &off_24EC6C948;
  return result;
}

void sub_224159224(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6CE00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_224159234(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6CE00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_224159264(uint64_t result)
{
  *(_QWORD *)(result + 24) = &off_24EC20828;
  return result;
}

void sub_224159278(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6CE50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_224159288(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6CE50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2241592B8(uint64_t result)
{
  *(_QWORD *)(result + 24) = &off_24EC220E0;
  return result;
}

void sub_2241592CC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6CEA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2241592DC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6CEA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22415930C(uint64_t result)
{
  *(_QWORD *)(result + 24) = &off_24EC35E10;
  return result;
}

void sub_224159320(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6CEF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_224159330(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6CEF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_224159360(uint64_t result)
{
  *(_QWORD *)(result + 24) = &off_24EC6C948;
  return result;
}

_QWORD *sub_224159374(_QWORD *a1)
{
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  int32x4_t v5;
  unint64_t v6;
  unint64_t v7;

  v2 = (char *)operator new(0x78uLL);
  v3 = (std::__shared_weak_count *)v2;
  *((_QWORD *)v2 + 1) = 0;
  v4 = (unint64_t *)(v2 + 8);
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24EC28318;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 6) = 0;
  *((_QWORD *)v2 + 4) = &off_24EC20868;
  v5 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v2 + 56) = v5;
  *(int32x4_t *)(v2 + 72) = v5;
  *(int32x4_t *)(v2 + 88) = v5;
  *((_DWORD *)v2 + 26) = 2143289344;
  *((_QWORD *)v2 + 3) = &off_24EC207B8;
  *((_QWORD *)v2 + 14) = 0;
  *a1 = &off_24EC6D000;
  a1[1] = v2 + 24;
  a1[2] = v2;
  do
    v6 = __ldxr(v4);
  while (__stxr(v6 + 1, v4));
  do
    v7 = __ldaxr(v4);
  while (__stlxr(v7 - 1, v4));
  if (!v7)
  {
    (*(void (**)(char *))(*(_QWORD *)v2 + 16))(v2);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

_QWORD *sub_224159450(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24EC6D000;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2241594C4(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24EC6D000;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

BOOL sub_224159538(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  _BOOL4 v11;
  const void *v13;
  double *v14;
  double *v15;
  const void *v16;
  double *v17;
  const void *v19;
  float *v20;
  float *v21;
  const void *v22;
  float *v23;
  BOOL v24;
  int v25;
  const void *v27;
  double *v28;
  const void *v29;
  __int128 *v30;
  const void *v31;
  float *v32;
  const void *v33;
  _BOOL4 v35;
  unint64_t v37;
  char v38;
  const void *v39;
  float *v40;
  float *v41;
  const void *v42;
  float *v43;
  BOOL v44;
  int v45;
  unint64_t v46;
  char v47;
  unint64_t v48;
  char v49;
  __int128 *v50;
  __int128 *v51;
  __int128 *v52;
  __int128 *v53;
  BOOL v54;

  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
  if (v4 != (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8)))
    return 0;
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
  if (v5 != (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 24))(*(_QWORD *)(a2 + 8)))
    return 0;
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
  if (v6 != (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 32))(*(_QWORD *)(a2 + 8)))
    return 0;
  v54 = 0;
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
  v11 = v7 == 1 && v8 == 1;
  if (v11 && v9 == 11)
  {
    v19 = *(const void **)(a1 + 8);
    if (!v19)
      return v54;
    v20 = (float *)__dynamic_cast(v19, (const struct __class_type_info *)&unk_24EC6D060, (const struct __class_type_info *)&unk_24EC20800, 0);
    if (!v20)
      return v54;
    v21 = v20;
    v22 = *(const void **)(a2 + 8);
    if (!v22
      || (v23 = (float *)__dynamic_cast(v22, (const struct __class_type_info *)&unk_24EC6D060, (const struct __class_type_info *)&unk_24EC20800, 0)) == 0)
    {
      v50 = sub_224153D94();
      sub_224159E3C(a2, (const char *)v50, (uint64_t)"trying to cast camera");
    }
    if (v21[4] != v23[4]
      || v21[5] != v23[5]
      || v21[6] != v23[6]
      || v21[7] != v23[7]
      || *((_DWORD *)v21 + 22) != *((_DWORD *)v23 + 22))
    {
      return 0;
    }
    return *((_DWORD *)v21 + 23) == *((_DWORD *)v23 + 23);
  }
  if (v9 != 12)
    v11 = 0;
  if (v11)
  {
    v13 = *(const void **)(a1 + 8);
    if (!v13)
      return v54;
    v14 = (double *)__dynamic_cast(v13, (const struct __class_type_info *)&unk_24EC6D060, (const struct __class_type_info *)&unk_24EC35FC0, 0);
    if (!v14)
      return v54;
    v15 = v14;
    v16 = *(const void **)(a2 + 8);
    if (!v16
      || (v17 = (double *)__dynamic_cast(v16, (const struct __class_type_info *)&unk_24EC6D060, (const struct __class_type_info *)&unk_24EC35FC0, 0)) == 0)
    {
      v51 = sub_224154484();
      sub_224159E3C(a2, (const char *)v51, (uint64_t)"trying to cast camera");
    }
LABEL_21:
    if (v15[2] == v17[2]
      && v15[3] == v17[3]
      && v15[4] == v17[4]
      && v15[5] == v17[5]
      && *((_DWORD *)v15 + 38) == *((_DWORD *)v17 + 38))
    {
      return *((_DWORD *)v15 + 39) == *((_DWORD *)v17 + 39);
    }
    return 0;
  }
  if (v7)
    v24 = 0;
  else
    v24 = v8 == 1;
  v25 = v24;
  if (v25 == 1 && v9 == 11)
  {
    v31 = *(const void **)(a1 + 8);
    if (!v31)
      return v54;
    v32 = (float *)__dynamic_cast(v31, (const struct __class_type_info *)&unk_24EC6D060, (const struct __class_type_info *)&unk_24EC376B8, 0);
    if (!v32)
      return v54;
    v21 = v32;
    v33 = *(const void **)(a2 + 8);
    if (!v33
      || (v23 = (float *)__dynamic_cast(v33, (const struct __class_type_info *)&unk_24EC6D060, (const struct __class_type_info *)&unk_24EC376B8, 0)) == 0)
    {
      v52 = sub_224154B74();
      sub_224159E3C(a2, (const char *)v52, (uint64_t)"trying to cast camera");
    }
    if (v21[4] != v23[4]
      || v21[5] != v23[5]
      || v21[6] != v23[6]
      || v21[7] != v23[7]
      || *((_DWORD *)v21 + 22) != *((_DWORD *)v23 + 22))
    {
      return 0;
    }
    return *((_DWORD *)v21 + 23) == *((_DWORD *)v23 + 23);
  }
  if (v9 != 12)
    v25 = 0;
  if (v25 == 1)
  {
    v27 = *(const void **)(a1 + 8);
    if (!v27)
      return v54;
    v28 = (double *)__dynamic_cast(v27, (const struct __class_type_info *)&unk_24EC6D060, (const struct __class_type_info *)&unk_24EC6C9D0, 0);
    if (!v28)
      return v54;
    v15 = v28;
    v29 = *(const void **)(a2 + 8);
    if (!v29
      || (v17 = (double *)__dynamic_cast(v29, (const struct __class_type_info *)&unk_24EC6D060, (const struct __class_type_info *)&unk_24EC6C9D0, 0)) == 0)
    {
      v30 = sub_224155264();
      sub_224159E3C(a2, (const char *)v30, (uint64_t)"trying to cast camera");
    }
    goto LABEL_21;
  }
  v35 = v7 == 1 && v8 == 2;
  if (!v35 || v9 != 11)
  {
    if (v9 != 12)
      v35 = 0;
    if (v35)
    {
      v37 = sub_22415ADAC(*(const void **)(a1 + 8));
      sub_22415AC54(&v54, a2, v37, v38);
    }
    else
    {
      if (v7)
        v44 = 0;
      else
        v44 = v8 == 2;
      v45 = v44;
      if (v44 && v9 == 11)
      {
        v46 = sub_22415AF5C(*(const void **)(a1 + 8));
        sub_22415AE04(&v54, a2, v46, v47);
      }
      else
      {
        if (v9 != 12)
          v45 = 0;
        if (v45 == 1)
        {
          v48 = sub_22415B10C(*(const void **)(a1 + 8));
          sub_22415AFB4(&v54, a2, v48, v49);
        }
      }
    }
    return v54;
  }
  v39 = *(const void **)(a1 + 8);
  if (v39)
  {
    v40 = (float *)__dynamic_cast(v39, (const struct __class_type_info *)&unk_24EC6D060, (const struct __class_type_info *)&unk_24EC6C650, 0);
    if (v40)
    {
      v41 = v40;
      v42 = *(const void **)(a2 + 8);
      if (!v42
        || (v43 = (float *)__dynamic_cast(v42, (const struct __class_type_info *)&unk_24EC6D060, (const struct __class_type_info *)&unk_24EC6C650, 0)) == 0)
      {
        v53 = sub_224155954();
        sub_224159E3C(a2, (const char *)v53, (uint64_t)"trying to cast camera");
      }
      if (v41[4] == v43[4]
        && v41[5] == v43[5]
        && v41[6] == v43[6]
        && v41[7] == v43[7]
        && v41[8] == v43[8]
        && v41[9] == v43[9]
        && v41[10] == v43[10]
        && v41[11] == v43[11]
        && v41[12] == v43[12]
        && v41[13] == v43[13]
        && *((_DWORD *)v41 + 14) == *((_DWORD *)v43 + 14)
        && *((_DWORD *)v41 + 30) == *((_DWORD *)v43 + 30))
      {
        return *((_DWORD *)v41 + 31) == *((_DWORD *)v43 + 31);
      }
      return 0;
    }
  }
  return v54;
}

uint64_t sub_224159B58(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_224159B68(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_224159B78(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_224159B88(char *__s, const char *a2, const char *a3, const char *a4, const char *a5, uint64_t a6)
{
  uint64_t result;
  _DWORD v12[6];
  int v13;
  _QWORD **v14;
  const char *v15;
  _DWORD *v16;
  const char *v17;
  const char *v18;
  _QWORD *v19;

  v13 = 0;
  sub_2231C0094(v12, __s);
  v14 = (_QWORD **)v12;
  v15 = a2;
  v16 = v12;
  v17 = a2;
  v18 = a2;
  if (v13 == -1)
    sub_22316DD70();
  v19 = &v14;
  ((void (*)(_QWORD **, _DWORD *))off_24EC6CF78[v13])(&v19, v12);
  v14 = (_QWORD **)v12;
  v15 = a3;
  v16 = v12;
  v17 = a3;
  v18 = a3;
  if (v13 == -1)
    sub_22316DD70();
  v19 = &v14;
  ((void (*)(_QWORD **, _DWORD *))off_24EC6CF90[v13])(&v19, v12);
  if (*(_QWORD *)a4)
  {
    v14 = (_QWORD **)v12;
    v15 = a4;
    v16 = v12;
    v17 = a4;
    v18 = a4;
    if (v13 != -1)
    {
      v19 = &v14;
      ((void (*)(_QWORD **, _DWORD *))off_24EC6CFA8[v13])(&v19, v12);
      goto LABEL_8;
    }
LABEL_15:
    sub_22316DD70();
  }
  v14 = (_QWORD **)v12;
  v15 = "nullptr";
  v16 = v12;
  v17 = "nullptr";
  v18 = "nullptr";
  if (v13 == -1)
    goto LABEL_15;
  v19 = &v14;
  ((void (*)(_QWORD **, _DWORD *))off_24EC6CF60[v13])(&v19, v12);
LABEL_8:
  v14 = (_QWORD **)v12;
  v15 = a5;
  v16 = v12;
  v17 = a5;
  v18 = a5;
  if (v13 == -1)
    sub_22316DD70();
  v19 = &v14;
  ((void (*)(_QWORD **, _DWORD *))off_24EC6CF90[v13])(&v19, v12);
  sub_2232A5F88((uint64_t)&v14, (uint64_t)v12, a6);
  if (v13 == -1)
    sub_22316DD70();
  v14 = &v19;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24EC6CFD8[v13])(&v14, v12);
  if (v13 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24EC6CF48[v13])(&v14, v12);
  return result;
}

void sub_224159DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_224159DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_224159DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_224159DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_224159E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_224159E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_224159E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_224159E3C(uint64_t a1, const char *a2, uint64_t a3)
{
  std::logic_error *exception;
  std::string v7;
  uint64_t v8;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  v8 = a3;
  sub_224159B88("Invalid argument ", a2, " ", (const char *)&v8, " ", a1);
  std::logic_error::logic_error(exception, &v7);
  exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
}

void sub_224159ED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
      goto LABEL_3;
  }
  else if (!v15)
  {
LABEL_3:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void sub_224159F08(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_224159F1C(_QWORD *a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  _BOOL4 v8;
  const void *v10;
  void *v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  std::string::size_type v15;
  std::string::value_type v16;
  std::string *v17;
  unsigned __int8 v18;
  const void *v19;
  void *v20;
  uint64_t v21;
  int v22;
  unsigned __int8 *v23;
  std::string::size_type v24;
  std::string::value_type v25;
  std::string *v26;
  unsigned __int8 v27;
  BOOL v28;
  int v29;
  const void *v31;
  void *v32;
  int v33;
  unsigned __int8 *v34;
  std::string::size_type v35;
  std::string::value_type v36;
  std::string *v37;
  unsigned __int8 v38;
  const void *v39;
  void *v40;
  uint64_t v41;
  int v42;
  unsigned __int8 *v43;
  std::string::size_type v44;
  std::string::value_type v45;
  std::string *v46;
  unsigned __int8 v47;
  _BOOL4 v49;
  unint64_t v51;
  unsigned __int8 v52;
  const void *v53;
  void *v54;
  uint64_t v55;
  unsigned __int8 *v56;
  std::string::size_type v57;
  std::string *v58;
  unsigned __int8 v59;
  BOOL v60;
  int v61;
  unint64_t v63;
  unsigned __int8 v64;
  unint64_t v65;
  unsigned __int8 v66;
  const char *v67;
  unsigned int v68;
  const char *v69;
  void *v70;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  char v77;
  void *v78;
  std::string::size_type v79;
  unsigned __int8 v80;
  std::string v81;
  void *__p[2];
  char v83;
  int v84;
  char v85;
  _QWORD v86[2];

  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8));
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 24))(*(_QWORD *)(a2 + 8));
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 32))(*(_QWORD *)(a2 + 8));
  v8 = v4 == 1 && v5 == 1;
  if (v8 && v6 == 11)
  {
    v19 = *(const void **)(a2 + 8);
    if (!v19)
      goto LABEL_148;
    v20 = __dynamic_cast(v19, (const struct __class_type_info *)&unk_24EC6D060, (const struct __class_type_info *)&unk_24EC20800, 0);
    if (!v20)
      goto LABEL_148;
    v21 = (uint64_t)v20;
    sub_2231813E8(a1, (uint64_t)"Camera{Type: ", 13);
    sub_2231813E8(a1, (uint64_t)"Center", 6);
    sub_2231813E8(a1, (uint64_t)"Pinhole", 7);
    v77 = 11;
    v84 = 0;
    sub_22415B920((uint64_t)__p, &v77);
    if (v84 == -1)
      sub_22316DD70();
    v86[0] = &v85;
    ((void (*)(void **__return_ptr, _QWORD *, void **))off_24EC6CFD8[v84])(&v78, v86, __p);
    if (v84 != -1)
      ((void (*)(_QWORD *, void **))off_24EC6CF48[v84])(v86, __p);
    v22 = (char)v80;
    v23 = (unsigned __int8 *)v78;
    if ((v80 & 0x80u) == 0)
      v24 = v80;
    else
      v24 = v79;
    memset(&v81, 0, sizeof(v81));
    std::string::reserve(&v81, v24);
    if (v22 >= 0)
      v23 = (unsigned __int8 *)&v78;
    for (; v24; --v24)
    {
      v25 = __toupper(*v23);
      std::string::push_back(&v81, v25);
      ++v23;
    }
    v26 = &v81;
    if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v26 = (std::string *)v81.__r_.__value_.__r.__words[0];
    v27 = v26->__r_.__value_.__s.__data_[0];
    v83 = 1;
    LOWORD(__p[0]) = v27;
    sub_2231813E8(a1, (uint64_t)__p, 1);
    if (v83 < 0)
      operator delete(__p[0]);
    sub_2231813E8(a1, (uint64_t)",", 1);
    sub_223C72784(a1, v21);
    sub_2231813E8(a1, (uint64_t)"}", 1);
  }
  else
  {
    if (v6 != 12)
      v8 = 0;
    if (v8)
    {
      v10 = *(const void **)(a2 + 8);
      if (v10)
      {
        v11 = __dynamic_cast(v10, (const struct __class_type_info *)&unk_24EC6D060, (const struct __class_type_info *)&unk_24EC35FC0, 0);
        if (v11)
        {
          v12 = (uint64_t)v11;
          sub_2231813E8(a1, (uint64_t)"Camera{Type: ", 13);
          sub_2231813E8(a1, (uint64_t)"Center", 6);
          sub_2231813E8(a1, (uint64_t)"Pinhole", 7);
          v77 = 12;
          v84 = 0;
          sub_22415B920((uint64_t)__p, &v77);
          if (v84 == -1)
            sub_22316DD70();
          v86[0] = &v85;
          ((void (*)(void **__return_ptr, _QWORD *, void **))off_24EC6CFD8[v84])(&v78, v86, __p);
          if (v84 != -1)
            ((void (*)(_QWORD *, void **))off_24EC6CF48[v84])(v86, __p);
          v13 = (char)v80;
          v14 = (unsigned __int8 *)v78;
          if ((v80 & 0x80u) == 0)
            v15 = v80;
          else
            v15 = v79;
          memset(&v81, 0, sizeof(v81));
          std::string::reserve(&v81, v15);
          if (v13 >= 0)
            v14 = (unsigned __int8 *)&v78;
          for (; v15; --v15)
          {
            v16 = __toupper(*v14);
            std::string::push_back(&v81, v16);
            ++v14;
          }
          v17 = &v81;
          if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v17 = (std::string *)v81.__r_.__value_.__r.__words[0];
          v18 = v17->__r_.__value_.__s.__data_[0];
          v83 = 1;
          LOWORD(__p[0]) = v18;
          sub_2231813E8(a1, (uint64_t)__p, 1);
          if (v83 < 0)
            operator delete(__p[0]);
LABEL_30:
          sub_2231813E8(a1, (uint64_t)",", 1);
          sub_224158FF8(a1, v12);
          sub_2231813E8(a1, (uint64_t)"}", 1);
          goto LABEL_48;
        }
      }
      goto LABEL_148;
    }
    if (v4)
      v28 = 0;
    else
      v28 = v5 == 1;
    v29 = v28;
    if (v29 == 1 && v6 == 11)
    {
      v39 = *(const void **)(a2 + 8);
      if (!v39)
        goto LABEL_148;
      v40 = __dynamic_cast(v39, (const struct __class_type_info *)&unk_24EC6D060, (const struct __class_type_info *)&unk_24EC376B8, 0);
      if (!v40)
        goto LABEL_148;
      v41 = (uint64_t)v40;
      sub_2231813E8(a1, (uint64_t)"Camera{Type: ", 13);
      sub_2231813E8(a1, (uint64_t)"Corner", 6);
      sub_2231813E8(a1, (uint64_t)"Pinhole", 7);
      v77 = 11;
      v84 = 0;
      sub_22415B920((uint64_t)__p, &v77);
      if (v84 == -1)
        sub_22316DD70();
      v86[0] = &v85;
      ((void (*)(void **__return_ptr, _QWORD *, void **))off_24EC6CFD8[v84])(&v78, v86, __p);
      if (v84 != -1)
        ((void (*)(_QWORD *, void **))off_24EC6CF48[v84])(v86, __p);
      v42 = (char)v80;
      v43 = (unsigned __int8 *)v78;
      if ((v80 & 0x80u) == 0)
        v44 = v80;
      else
        v44 = v79;
      memset(&v81, 0, sizeof(v81));
      std::string::reserve(&v81, v44);
      if (v42 >= 0)
        v43 = (unsigned __int8 *)&v78;
      for (; v44; --v44)
      {
        v45 = __toupper(*v43);
        std::string::push_back(&v81, v45);
        ++v43;
      }
      v46 = &v81;
      if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v46 = (std::string *)v81.__r_.__value_.__r.__words[0];
      v47 = v46->__r_.__value_.__s.__data_[0];
      v83 = 1;
      LOWORD(__p[0]) = v47;
      sub_2231813E8(a1, (uint64_t)__p, 1);
      if (v83 < 0)
        operator delete(__p[0]);
      sub_2231813E8(a1, (uint64_t)",", 1);
      sub_224158F1C(a1, v41);
      sub_2231813E8(a1, (uint64_t)"}", 1);
    }
    else
    {
      if (v6 != 12)
        v29 = 0;
      if (v29 == 1)
      {
        v31 = *(const void **)(a2 + 8);
        if (v31)
        {
          v32 = __dynamic_cast(v31, (const struct __class_type_info *)&unk_24EC6D060, (const struct __class_type_info *)&unk_24EC6C9D0, 0);
          if (v32)
          {
            v12 = (uint64_t)v32;
            sub_2231813E8(a1, (uint64_t)"Camera{Type: ", 13);
            sub_2231813E8(a1, (uint64_t)"Corner", 6);
            sub_2231813E8(a1, (uint64_t)"Pinhole", 7);
            v77 = 12;
            v84 = 0;
            sub_22415B920((uint64_t)__p, &v77);
            if (v84 == -1)
              sub_22316DD70();
            v86[0] = &v85;
            ((void (*)(void **__return_ptr, _QWORD *, void **))off_24EC6CFD8[v84])(&v78, v86, __p);
            if (v84 != -1)
              ((void (*)(_QWORD *, void **))off_24EC6CF48[v84])(v86, __p);
            v33 = (char)v80;
            v34 = (unsigned __int8 *)v78;
            if ((v80 & 0x80u) == 0)
              v35 = v80;
            else
              v35 = v79;
            memset(&v81, 0, sizeof(v81));
            std::string::reserve(&v81, v35);
            if (v33 >= 0)
              v34 = (unsigned __int8 *)&v78;
            for (; v35; --v35)
            {
              v36 = __toupper(*v34);
              std::string::push_back(&v81, v36);
              ++v34;
            }
            v37 = &v81;
            if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v37 = (std::string *)v81.__r_.__value_.__r.__words[0];
            v38 = v37->__r_.__value_.__s.__data_[0];
            v83 = 1;
            LOWORD(__p[0]) = v38;
            sub_2231813E8(a1, (uint64_t)__p, 1);
            if (v83 < 0)
              operator delete(__p[0]);
            goto LABEL_30;
          }
        }
LABEL_148:
        v81.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
        sub_2231813E8(a1, (uint64_t)"Camera{Type: ", 13);
        if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8)) == 1)
          v67 = "Center";
        else
          v67 = "Corner";
        sub_2231813E8(a1, (uint64_t)v67, 6);
        sub_2231813E8(a1, (uint64_t)",", 1);
        v68 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 24))(*(_QWORD *)(a2 + 8));
        sub_2231813E8(a1, (uint64_t)(&off_24EC6D030)[2 * v68], (uint64_t)(&off_24EC6D030)[2 * v68 + 1]);
        sub_2231813E8(a1, (uint64_t)",", 1);
        if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 32))(*(_QWORD *)(a2 + 8)) == 11)
          v69 = "f32";
        else
          v69 = "f64";
        sub_2231813E8(a1, (uint64_t)v69, 3);
        sub_2231813E8(a1, (uint64_t)",", 1);
        v70 = *(void **)(a2 + 8);
        v71 = *(std::__shared_weak_count **)(a2 + 16);
        __p[0] = v70;
        __p[1] = v71;
        if (v71)
        {
          p_shared_owners = (unint64_t *)&v71->__shared_owners_;
          do
            v73 = __ldxr(p_shared_owners);
          while (__stxr(v73 + 1, p_shared_owners));
        }
        v78 = v70;
        sub_224019314((uint64_t)v86, &v81, &v78);
        sub_2231813E8(v81.__r_.__value_.__l.__data_, (uint64_t)"}", 1);
        if (v71)
        {
          v74 = (unint64_t *)&v71->__shared_owners_;
          do
            v75 = __ldaxr(v74);
          while (__stlxr(v75 - 1, v74));
          if (!v75)
          {
            ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
            std::__shared_weak_count::__release_weak(v71);
          }
        }
        return a1;
      }
      v49 = v4 == 1 && v5 == 2;
      if (!v49 || v6 != 11)
      {
        if (v6 != 12)
          v49 = 0;
        if (v49)
        {
          v51 = sub_22415ADAC(*(const void **)(a2 + 8));
          if (sub_22415B164(a1, v51, v52))
            return a1;
        }
        else
        {
          if (v4)
            v60 = 0;
          else
            v60 = v5 == 2;
          v61 = v60;
          if (v61 == 1 && v6 == 11)
          {
            v65 = sub_22415AF5C(*(const void **)(a2 + 8));
            if (sub_22415B3F8(a1, v65, v66))
              return a1;
          }
          else
          {
            if (v6 != 12)
              v61 = 0;
            if (v61 == 1)
            {
              v63 = sub_22415B10C(*(const void **)(a2 + 8));
              if (sub_22415B68C(a1, v63, v64))
                return a1;
            }
          }
        }
        goto LABEL_148;
      }
      v53 = *(const void **)(a2 + 8);
      if (!v53)
        goto LABEL_148;
      v54 = __dynamic_cast(v53, (const struct __class_type_info *)&unk_24EC6D060, (const struct __class_type_info *)&unk_24EC6C650, 0);
      if (!v54)
        goto LABEL_148;
      v55 = (uint64_t)v54;
      sub_2231813E8(a1, (uint64_t)"Camera{Type: ", 13);
      sub_2231813E8(a1, (uint64_t)"Center", 6);
      sub_2231813E8(a1, (uint64_t)"Heikkila", 8);
      v77 = 11;
      v84 = 0;
      sub_22415B920((uint64_t)__p, &v77);
      if (v84 == -1)
        sub_22316DD70();
      v86[0] = &v85;
      ((void (*)(void **__return_ptr, _QWORD *, void **))off_24EC6CFD8[v84])(&v78, v86, __p);
      if (v84 != -1)
        ((void (*)(_QWORD *, void **))off_24EC6CF48[v84])(v86, __p);
      if ((v80 & 0x80u) == 0)
        v56 = (unsigned __int8 *)&v78;
      else
        v56 = (unsigned __int8 *)v78;
      if ((v80 & 0x80u) == 0)
        v57 = v80;
      else
        v57 = v79;
      sub_22456CFE0(v56, v57, &v81);
      if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v58 = &v81;
      else
        v58 = (std::string *)v81.__r_.__value_.__r.__words[0];
      v59 = v58->__r_.__value_.__s.__data_[0];
      v83 = 1;
      LOWORD(__p[0]) = v59;
      sub_2231813E8(a1, (uint64_t)__p, 1);
      if (v83 < 0)
        operator delete(__p[0]);
      sub_2231813E8(a1, (uint64_t)",", 1);
      sub_224157BA4(a1, v55);
      sub_2231813E8(a1, (uint64_t)"}", 1);
    }
  }
LABEL_48:
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v81.__r_.__value_.__l.__data_);
    if ((char)v80 < 0)
LABEL_82:
      operator delete(v78);
  }
  else if ((char)v80 < 0)
  {
    goto LABEL_82;
  }
  return a1;
}

void sub_22415AA6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,int a28)
{
  if (a27 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a15 & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(a10);
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

uint64_t sub_22415AC44(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

BOOL *sub_22415AC54(BOOL *result, uint64_t a2, uint64_t a3, char a4)
{
  BOOL *v5;
  const void *v6;
  BOOL v8;
  __int128 *v9;

  if (a4)
  {
    v5 = result;
    v6 = *(const void **)(a2 + 8);
    if (!v6
      || (result = (BOOL *)__dynamic_cast(v6, (const struct __class_type_info *)&unk_24EC6D060, (const struct __class_type_info *)&unk_24EC6C810, 0)) == 0)
    {
      v9 = sub_224155F48();
      sub_224159E3C(a2, (const char *)v9, (uint64_t)"trying to cast camera");
    }
    v8 = *(double *)(a3 + 16) == *((double *)result + 2)
      && *(double *)(a3 + 24) == *((double *)result + 3)
      && *(double *)(a3 + 32) == *((double *)result + 4)
      && *(double *)(a3 + 40) == *((double *)result + 5)
      && *(double *)(a3 + 48) == *((double *)result + 6)
      && *(double *)(a3 + 56) == *((double *)result + 7)
      && *(double *)(a3 + 64) == *((double *)result + 8)
      && *(double *)(a3 + 72) == *((double *)result + 9)
      && *(double *)(a3 + 80) == *((double *)result + 10)
      && *(double *)(a3 + 88) == *((double *)result + 11)
      && *(_DWORD *)(a3 + 96) == *((_DWORD *)result + 24)
      && *(_DWORD *)(a3 + 216) == *((_DWORD *)result + 54)
      && *(_DWORD *)(a3 + 220) == *((_DWORD *)result + 55);
    *v5 = v8;
  }
  return result;
}

unint64_t sub_22415ADAC(const void *a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;

  if (!a1)
    return 0;
  v1 = (unint64_t)__dynamic_cast(a1, (const struct __class_type_info *)&unk_24EC6D060, (const struct __class_type_info *)&unk_24EC6C810, 0);
  v2 = v1 & 0xFFFFFFFFFFFFFF00;
  v3 = v1;
  if (!v1)
  {
    v2 = 0;
    v3 = 0;
  }
  return v3 | v2;
}

BOOL *sub_22415AE04(BOOL *result, uint64_t a2, uint64_t a3, char a4)
{
  BOOL *v5;
  const void *v6;
  BOOL v8;
  __int128 *v9;

  if (a4)
  {
    v5 = result;
    v6 = *(const void **)(a2 + 8);
    if (!v6
      || (result = (BOOL *)__dynamic_cast(v6, (const struct __class_type_info *)&unk_24EC6D060, (const struct __class_type_info *)&unk_24EC6C760, 0)) == 0)
    {
      v9 = sub_224156590();
      sub_224159E3C(a2, (const char *)v9, (uint64_t)"trying to cast camera");
    }
    v8 = *(float *)(a3 + 16) == *((float *)result + 4)
      && *(float *)(a3 + 20) == *((float *)result + 5)
      && *(float *)(a3 + 24) == *((float *)result + 6)
      && *(float *)(a3 + 28) == *((float *)result + 7)
      && *(float *)(a3 + 32) == *((float *)result + 8)
      && *(float *)(a3 + 36) == *((float *)result + 9)
      && *(float *)(a3 + 40) == *((float *)result + 10)
      && *(float *)(a3 + 44) == *((float *)result + 11)
      && *(float *)(a3 + 48) == *((float *)result + 12)
      && *(float *)(a3 + 52) == *((float *)result + 13)
      && *(_DWORD *)(a3 + 56) == *((_DWORD *)result + 14)
      && *(_DWORD *)(a3 + 120) == *((_DWORD *)result + 30)
      && *(_DWORD *)(a3 + 124) == *((_DWORD *)result + 31);
    *v5 = v8;
  }
  return result;
}

unint64_t sub_22415AF5C(const void *a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;

  if (!a1)
    return 0;
  v1 = (unint64_t)__dynamic_cast(a1, (const struct __class_type_info *)&unk_24EC6D060, (const struct __class_type_info *)&unk_24EC6C760, 0);
  v2 = v1 & 0xFFFFFFFFFFFFFF00;
  v3 = v1;
  if (!v1)
  {
    v2 = 0;
    v3 = 0;
  }
  return v3 | v2;
}

BOOL *sub_22415AFB4(BOOL *result, uint64_t a2, uint64_t a3, char a4)
{
  BOOL *v5;
  const void *v6;
  BOOL v8;
  __int128 *v9;

  if (a4)
  {
    v5 = result;
    v6 = *(const void **)(a2 + 8);
    if (!v6
      || (result = (BOOL *)__dynamic_cast(v6, (const struct __class_type_info *)&unk_24EC6D060, (const struct __class_type_info *)&unk_24EC6C920, 0)) == 0)
    {
      v9 = sub_224156B84();
      sub_224159E3C(a2, (const char *)v9, (uint64_t)"trying to cast camera");
    }
    v8 = *(double *)(a3 + 16) == *((double *)result + 2)
      && *(double *)(a3 + 24) == *((double *)result + 3)
      && *(double *)(a3 + 32) == *((double *)result + 4)
      && *(double *)(a3 + 40) == *((double *)result + 5)
      && *(double *)(a3 + 48) == *((double *)result + 6)
      && *(double *)(a3 + 56) == *((double *)result + 7)
      && *(double *)(a3 + 64) == *((double *)result + 8)
      && *(double *)(a3 + 72) == *((double *)result + 9)
      && *(double *)(a3 + 80) == *((double *)result + 10)
      && *(double *)(a3 + 88) == *((double *)result + 11)
      && *(_DWORD *)(a3 + 96) == *((_DWORD *)result + 24)
      && *(_DWORD *)(a3 + 216) == *((_DWORD *)result + 54)
      && *(_DWORD *)(a3 + 220) == *((_DWORD *)result + 55);
    *v5 = v8;
  }
  return result;
}

unint64_t sub_22415B10C(const void *a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;

  if (!a1)
    return 0;
  v1 = (unint64_t)__dynamic_cast(a1, (const struct __class_type_info *)&unk_24EC6D060, (const struct __class_type_info *)&unk_24EC6C920, 0);
  v2 = v1 & 0xFFFFFFFFFFFFFF00;
  v3 = v1;
  if (!v1)
  {
    v2 = 0;
    v3 = 0;
  }
  return v3 | v2;
}

BOOL sub_22415B164(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v3;
  int v6;
  void **v7;
  std::string::size_type v8;
  std::string::value_type v9;
  std::string *v10;
  unsigned __int8 v11;
  char v13;
  void *v14[2];
  unsigned __int8 v15;
  std::string v16;
  void *__p[2];
  char v18;
  int v19;
  char v20;
  _QWORD v21[2];

  v3 = a3;
  if (a3)
  {
    sub_2231813E8(a1, (uint64_t)"Camera{Type: ", 13);
    sub_2231813E8(a1, (uint64_t)"Center", 6);
    sub_2231813E8(a1, (uint64_t)"Heikkila", 8);
    v13 = 12;
    v19 = 0;
    sub_22415B920((uint64_t)__p, &v13);
    if (v19 == -1)
      sub_22316DD70();
    v21[0] = &v20;
    ((void (*)(void **__return_ptr, _QWORD *, void **))off_24EC6CFD8[v19])(v14, v21, __p);
    if (v19 != -1)
      ((void (*)(_QWORD *, void **))off_24EC6CF48[v19])(v21, __p);
    v6 = (char)v15;
    v7 = (void **)v14[0];
    if ((v15 & 0x80u) == 0)
      v8 = v15;
    else
      v8 = (std::string::size_type)v14[1];
    memset(&v16, 0, sizeof(v16));
    std::string::reserve(&v16, v8);
    if (v6 >= 0)
      v7 = v14;
    for (; v8; --v8)
    {
      v9 = __toupper(*(unsigned __int8 *)v7);
      std::string::push_back(&v16, v9);
      v7 = (void **)((char *)v7 + 1);
    }
    v10 = &v16;
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v10 = (std::string *)v16.__r_.__value_.__r.__words[0];
    v11 = v10->__r_.__value_.__s.__data_[0];
    v18 = 1;
    LOWORD(__p[0]) = v11;
    sub_2231813E8(a1, (uint64_t)__p, 1);
    if (v18 < 0)
      operator delete(__p[0]);
    sub_2231813E8(a1, (uint64_t)",", 1);
    sub_224157CB0(a1, a2);
    sub_2231813E8(a1, (uint64_t)"}", 1);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v16.__r_.__value_.__l.__data_);
      if (((char)v15 & 0x80000000) == 0)
        return v3 != 0;
    }
    else if (((char)v15 & 0x80000000) == 0)
    {
      return v3 != 0;
    }
    operator delete(v14[0]);
  }
  return v3 != 0;
}

void sub_22415B35C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,int a28)
{
  if (a27 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a15 & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(a10);
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

BOOL sub_22415B3F8(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v3;
  int v6;
  void **v7;
  std::string::size_type v8;
  std::string::value_type v9;
  std::string *v10;
  unsigned __int8 v11;
  char v13;
  void *v14[2];
  unsigned __int8 v15;
  std::string v16;
  void *__p[2];
  char v18;
  int v19;
  char v20;
  _QWORD v21[2];

  v3 = a3;
  if (a3)
  {
    sub_2231813E8(a1, (uint64_t)"Camera{Type: ", 13);
    sub_2231813E8(a1, (uint64_t)"Corner", 6);
    sub_2231813E8(a1, (uint64_t)"Heikkila", 8);
    v13 = 11;
    v19 = 0;
    sub_22415B920((uint64_t)__p, &v13);
    if (v19 == -1)
      sub_22316DD70();
    v21[0] = &v20;
    ((void (*)(void **__return_ptr, _QWORD *, void **))off_24EC6CFD8[v19])(v14, v21, __p);
    if (v19 != -1)
      ((void (*)(_QWORD *, void **))off_24EC6CF48[v19])(v21, __p);
    v6 = (char)v15;
    v7 = (void **)v14[0];
    if ((v15 & 0x80u) == 0)
      v8 = v15;
    else
      v8 = (std::string::size_type)v14[1];
    memset(&v16, 0, sizeof(v16));
    std::string::reserve(&v16, v8);
    if (v6 >= 0)
      v7 = v14;
    for (; v8; --v8)
    {
      v9 = __toupper(*(unsigned __int8 *)v7);
      std::string::push_back(&v16, v9);
      v7 = (void **)((char *)v7 + 1);
    }
    v10 = &v16;
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v10 = (std::string *)v16.__r_.__value_.__r.__words[0];
    v11 = v10->__r_.__value_.__s.__data_[0];
    v18 = 1;
    LOWORD(__p[0]) = v11;
    sub_2231813E8(a1, (uint64_t)__p, 1);
    if (v18 < 0)
      operator delete(__p[0]);
    sub_2231813E8(a1, (uint64_t)",", 1);
    sub_224157BA4(a1, a2);
    sub_2231813E8(a1, (uint64_t)"}", 1);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v16.__r_.__value_.__l.__data_);
      if (((char)v15 & 0x80000000) == 0)
        return v3 != 0;
    }
    else if (((char)v15 & 0x80000000) == 0)
    {
      return v3 != 0;
    }
    operator delete(v14[0]);
  }
  return v3 != 0;
}

void sub_22415B5F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,int a28)
{
  if (a27 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a15 & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(a10);
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

BOOL sub_22415B68C(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v3;
  int v6;
  void **v7;
  std::string::size_type v8;
  std::string::value_type v9;
  std::string *v10;
  unsigned __int8 v11;
  char v13;
  void *v14[2];
  unsigned __int8 v15;
  std::string v16;
  void *__p[2];
  char v18;
  int v19;
  char v20;
  _QWORD v21[2];

  v3 = a3;
  if (a3)
  {
    sub_2231813E8(a1, (uint64_t)"Camera{Type: ", 13);
    sub_2231813E8(a1, (uint64_t)"Corner", 6);
    sub_2231813E8(a1, (uint64_t)"Heikkila", 8);
    v13 = 12;
    v19 = 0;
    sub_22415B920((uint64_t)__p, &v13);
    if (v19 == -1)
      sub_22316DD70();
    v21[0] = &v20;
    ((void (*)(void **__return_ptr, _QWORD *, void **))off_24EC6CFD8[v19])(v14, v21, __p);
    if (v19 != -1)
      ((void (*)(_QWORD *, void **))off_24EC6CF48[v19])(v21, __p);
    v6 = (char)v15;
    v7 = (void **)v14[0];
    if ((v15 & 0x80u) == 0)
      v8 = v15;
    else
      v8 = (std::string::size_type)v14[1];
    memset(&v16, 0, sizeof(v16));
    std::string::reserve(&v16, v8);
    if (v6 >= 0)
      v7 = v14;
    for (; v8; --v8)
    {
      v9 = __toupper(*(unsigned __int8 *)v7);
      std::string::push_back(&v16, v9);
      v7 = (void **)((char *)v7 + 1);
    }
    v10 = &v16;
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v10 = (std::string *)v16.__r_.__value_.__r.__words[0];
    v11 = v10->__r_.__value_.__s.__data_[0];
    v18 = 1;
    LOWORD(__p[0]) = v11;
    sub_2231813E8(a1, (uint64_t)__p, 1);
    if (v18 < 0)
      operator delete(__p[0]);
    sub_2231813E8(a1, (uint64_t)",", 1);
    sub_224157CB0(a1, a2);
    sub_2231813E8(a1, (uint64_t)"}", 1);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v16.__r_.__value_.__l.__data_);
      if (((char)v15 & 0x80000000) == 0)
        return v3 != 0;
    }
    else if (((char)v15 & 0x80000000) == 0)
    {
      return v3 != 0;
    }
    operator delete(v14[0]);
  }
  return v3 != 0;
}

void sub_22415B884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,int a28)
{
  if (a27 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a15 & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(a10);
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

void sub_22415B920(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  const char *v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(_QWORD *)(v4 + 272) = 0;
  sub_223195210(v4);
  v21[0] = v4;
  if (*a2 == 11)
    v5 = "f32";
  else
    v5 = "f64";
  sub_2231813E8((_QWORD *)(v4 + 16), (uint64_t)v5, 3);
  v6 = *(_DWORD *)(v4 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v4 + 112);
    v10 = *(_QWORD *)(v4 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v4 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v4 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_25;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_17;
    }
    v11 = *(const void **)(v4 + 40);
    v7 = *(_QWORD *)(v4 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_25:
      sub_22316DBC0();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_16;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_16:
    memmove(v8, v11, v7);
LABEL_17:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v14 + 128);
    MEMORY[0x227684CE8](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a1;
  v21[1] = __dst;
  v21[2] = a1;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v18 == -1)
    sub_22316DD70();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24EC6CFC0[v18])(&v22, a1);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_22415BB8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_22415BBB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22415BBCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22456E764((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_22415BBE0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = *(_QWORD *)a2;
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  return result;
}

_QWORD *sub_22415BBF4@<X0>(_QWORD *a1@<X0>, void *a2@<X1>, unsigned int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  _QWORD *v9;
  unsigned __int8 v10;
  int v11;
  std::__shared_weak_count_vtbl *v12;
  CGImageSource *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t v18;
  CGImageRef ImageAtIndex;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  _BYTE *v42;
  int v43;
  uint64_t v44;
  int v45;
  CGImageSource *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  __int16 v52;
  unint64_t v53;
  _BYTE *v54;
  int v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  _QWORD *result;
  uint64_t v72;
  CGImageSourceRef isrc[2];
  void *v74[2];
  int v75;
  char v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  char v83;
  char v84;
  __int128 v85;
  __int128 __p;
  void (__cdecl *v87)(void *);
  uint64_t v88;
  void *v89[2];
  uint64_t v90;
  uint64_t v91;
  void *v92[2];
  uint64_t v93;
  char v94;
  char v95;
  char v96;
  CGDataProviderRef provider[2];
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  CGDataProviderSequentialCallbacks callbacks;
  unsigned __int8 v102;
  void *v103[2];
  uint64_t v104;
  uint64_t v105;
  void *v106[2];
  uint64_t v107;
  char v108;
  char v109;
  char v110;
  __int128 v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  CGDataProviderGetBytesCallback getBytes;
  std::__shared_weak_count_vtbl *v117;
  std::__shared_weak_count *v118;
  __int128 v119;
  __int128 v120;
  char v121;
  char v122;
  void *v123;
  char v124;
  void *v125;
  char v126;
  char v127;
  char v128;
  char v129;
  int v130;
  _BYTE v131[24];
  _BYTE *v132;
  uint64_t v133;

  v133 = *MEMORY[0x24BDAC8D0];
  v9 = (_QWORD *)a1[3];
  if (v9)
  {
    if (v9 == a1)
    {
      v132 = v131;
      (*(void (**)(_QWORD *, _BYTE *))(*a1 + 24))(a1, v131);
    }
    else
    {
      v132 = (_BYTE *)(*(uint64_t (**)(_QWORD))(*v9 + 16))(a1[3]);
    }
  }
  else
  {
    v132 = 0;
  }
  v10 = std::istream::peek();
  sub_22415F04C(a4, v10, (uint64_t)&v119);
  if (v129)
  {
    v11 = v119;
    *(_OWORD *)&callbacks.version = xmmword_24EC71F00;
    *(_OWORD *)&callbacks.skipForward = *(_OWORD *)off_24EC71F10;
    callbacks.releaseInfo = 0;
    v12 = (std::__shared_weak_count_vtbl *)CGDataProviderCreateSequential(a2, &callbacks);
    sub_2242BC280(&v117, v12, 0);
    if ((v11 - 3) > 2)
    {
      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/ImageIO/src/Apple.cpp", 157, (uint64_t)"", 0, (uint64_t)"Unsupported Format", 18, (void (*)(void **))sub_22457406C);
      abort();
    }
    sub_22415CDD4(provider, (uint64_t)&v117);
    v13 = CGImageSourceCreateWithDataProvider(provider[0], 0);
    v14 = (std::__shared_weak_count *)operator new();
    v15 = v14;
    v14->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    v14->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6D090;
    v14->__shared_weak_owners_ = 0;
    v14[1].__vftable = (std::__shared_weak_count_vtbl *)v13;
    isrc[0] = v13;
    isrc[1] = (CGImageSourceRef)v14;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v15);
    }
    ImageAtIndex = CGImageSourceCreateImageAtIndex(isrc[0], 0, 0);
    *(_QWORD *)&v111 = ImageAtIndex;
    v20 = (std::__shared_weak_count *)operator new();
    v20->__shared_owners_ = 0;
    v21 = (unint64_t *)&v20->__shared_owners_;
    v20->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6D140;
    v20->__shared_weak_owners_ = 0;
    v20[1].__vftable = (std::__shared_weak_count_vtbl *)ImageAtIndex;
    *((_QWORD *)&v111 + 1) = v20;
    *(_QWORD *)&v85 = ImageAtIndex;
    *((_QWORD *)&v85 + 1) = v20;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    sub_22415E120(&callbacks, ImageAtIndex);
    v115 = *(_QWORD *)&callbacks.version;
    getBytes = callbacks.getBytes;
    if (callbacks.getBytes)
    {
      v23 = (unint64_t *)((char *)callbacks.getBytes + 8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
      v25 = (std::__shared_weak_count *)callbacks.getBytes;
      if (callbacks.getBytes)
      {
        v26 = (unint64_t *)((char *)callbacks.getBytes + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
    }
    do
      v28 = __ldaxr(v21);
    while (__stlxr(v28 - 1, v21));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
    v29 = (std::__shared_weak_count *)*((_QWORD *)&v111 + 1);
    if (*((_QWORD *)&v111 + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&v111 + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    if (isrc[1])
    {
      v32 = (unint64_t *)((char *)isrc[1] + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        (*(void (**)(CGImageSourceRef))(*(_QWORD *)isrc[1] + 16))(isrc[1]);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)isrc[1]);
      }
    }
    v34 = (std::__shared_weak_count *)provider[1];
    if (!provider[1])
      goto LABEL_40;
    v35 = (unint64_t *)((char *)provider[1] + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
      v38 = v115;
      v37 = (std::__shared_weak_count *)getBytes;
      if (!getBytes)
        goto LABEL_45;
    }
    else
    {
LABEL_40:
      v38 = v115;
      v37 = (std::__shared_weak_count *)getBytes;
      if (!getBytes)
        goto LABEL_45;
    }
    v39 = (unint64_t *)&v37->__shared_owners_;
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
    do
      v41 = __ldaxr(v39);
    while (__stlxr(v41 - 1, v39));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
      if (v38)
        goto LABEL_60;
      goto LABEL_46;
    }
LABEL_45:
    if (v38)
      goto LABEL_60;
LABEL_46:
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/ImageIO/src/Apple.cpp", 160, (uint64_t)"cg_image.IsValid()", 18, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
LABEL_60:
    sub_2242BC72C((uint64_t)&v115, (uint64_t)&v111);
    *(_OWORD *)provider = v111;
    v98 = v112;
    if (SHIBYTE(v114) < 0)
    {
      sub_223197FA4(&v99, (void *)v113, *((unint64_t *)&v113 + 1));
    }
    else
    {
      v99 = v113;
      v100 = v114;
    }
    if (a3)
    {
      switch(v11)
      {
        case 3:
          if (a3 >= 3 && (a3 & 0xFFFFFFF7) - 21 >= 2)
            goto LABEL_77;
          break;
        case 5:
          if (a3 > 0x20 || ((1 << a3) & 0x1E1E0001ELL) == 0)
            goto LABEL_77;
          break;
        case 4:
          if (a3 != 1 && a3 != 21)
          {
LABEL_77:
            sub_22415ED34(a3, v11, (uint64_t)&v85);
            *(_OWORD *)&callbacks.version = v85;
            LOBYTE(callbacks.skipForward) = 0;
            v109 = 0;
            if (v95)
            {
              v102 = 0;
              v45 = v88;
              if (!(_BYTE)v88)
                goto LABEL_86;
LABEL_85:
              *(_OWORD *)&callbacks.skipForward = __p;
              callbacks.releaseInfo = v87;
              v87 = 0;
              __p = 0uLL;
              v102 = 1;
LABEL_86:
              LOBYTE(v103[0]) = 0;
              v108 = 0;
              if (v94)
              {
                v104 = v90;
                *(_OWORD *)v103 = *(_OWORD *)v89;
                v89[0] = 0;
                v89[1] = 0;
                v105 = v91;
                *(_OWORD *)v106 = *(_OWORD *)v92;
                v107 = v93;
                v90 = 0;
                v92[0] = 0;
                v92[1] = 0;
                v93 = 0;
                v108 = 1;
              }
              v109 = 1;
              v110 = 0;
              if (v45 && SHIBYTE(v87) < 0)
                operator delete((void *)__p);
              if ((SHIBYTE(v100) & 0x80000000) == 0)
              {
LABEL_92:
                if (v110)
                {
LABEL_93:
                  if (!BYTE4(v111)
                    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/ImageIO/src/Apple.cpp", 172, (uint64_t)"compat.format.has_value()", 25, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
                  {
                    abort();
                  }
                  isrc[0] = (CGImageSourceRef)sub_2242BC554((uint64_t)&v115);
                  v130 = v111;
                  if (!v132)
                    sub_223198474();
                  (*(void (**)(__int128 *__return_ptr, _BYTE *, CGImageSourceRef *, int *))(*(_QWORD *)v132 + 48))(&v85, v132, isrc, &v130);
                  if (v96)
                  {
                    isrc[0] = (CGImageSourceRef)&off_24EC20EB8;
                    v46 = (CGImageSource *)*((_QWORD *)&v85 + 1);
                    v47 = (std::__shared_weak_count *)__p;
                    if ((_QWORD)__p)
                    {
                      v48 = (unint64_t *)(__p + 8);
                      do
                        v49 = __ldxr(v48);
                      while (__stxr(v49 + 1, v48));
                      v50 = v88;
                      v51 = (int)v89[0];
                      v52 = WORD2(v89[0]);
                      do
                        v53 = __ldxr(v48);
                      while (__stxr(v53 + 1, v48));
                    }
                    else
                    {
                      v50 = v88;
                      v51 = (int)v89[0];
                      v52 = WORD2(v89[0]);
                    }
                    isrc[1] = v46;
                    v74[0] = v47;
                    v74[1] = *((void **)&__p + 1);
                    v75 = (int)v87;
                    v77 = v50;
                    LODWORD(v78) = v51;
                    WORD2(v78) = v52;
                    if (v47)
                    {
                      v57 = (unint64_t *)&v47->__shared_owners_;
                      do
                        v58 = __ldaxr(v57);
                      while (__stlxr(v58 - 1, v57));
                      if (!v58)
                      {
                        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                        std::__shared_weak_count::__release_weak(v47);
                      }
                    }
                    sub_2242BE818(&v115, isrc);
                    v59 = (std::__shared_weak_count *)v74[0];
                    if (v74[0])
                    {
                      v60 = (unint64_t *)((char *)v74[0] + 8);
                      do
                        v61 = __ldaxr(v60);
                      while (__stlxr(v61 - 1, v60));
                      if (!v61)
                      {
                        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                        std::__shared_weak_count::__release_weak(v59);
                      }
                    }
                    *(_BYTE *)(a5 + 120) = 1;
                  }
                  else
                  {
                    *(_OWORD *)isrc = v85;
                    v54 = sub_22319FFBC(v74, &__p);
                    *(_OWORD *)a5 = *(_OWORD *)isrc;
                    *(_BYTE *)(a5 + 16) = 0;
                    *(_BYTE *)(a5 + 112) = 0;
                    if (!v84)
                    {
                      *(_BYTE *)(a5 + 120) = 0;
                      if (v96)
                        goto LABEL_128;
                      goto LABEL_134;
                    }
                    *(_BYTE *)(a5 + 40) = 0;
                    v55 = v77;
                    if ((_BYTE)v77)
                    {
                      *(_OWORD *)(a5 + 16) = *(_OWORD *)v54;
                      *(_QWORD *)(a5 + 32) = *((_QWORD *)v54 + 2);
                      *((_QWORD *)v54 + 1) = 0;
                      *((_QWORD *)v54 + 2) = 0;
                      *(_QWORD *)v54 = 0;
                      *(_BYTE *)(a5 + 40) = 1;
                    }
                    *(_BYTE *)(a5 + 48) = 0;
                    *(_BYTE *)(a5 + 104) = 0;
                    if (v83)
                    {
                      v56 = v80;
                      *(_QWORD *)(a5 + 64) = v79;
                      *(_OWORD *)(a5 + 48) = v78;
                      v78 = 0uLL;
                      *(_QWORD *)(a5 + 72) = v56;
                      *(_OWORD *)(a5 + 80) = v81;
                      *(_QWORD *)(a5 + 96) = v82;
                      v79 = 0;
                      v81 = 0uLL;
                      v82 = 0;
                      *(_BYTE *)(a5 + 104) = 1;
                    }
                    *(_BYTE *)(a5 + 112) = 1;
                    *(_BYTE *)(a5 + 120) = 0;
                    if (v55 && v76 < 0)
                    {
                      operator delete(v74[0]);
                      if (v96)
                      {
LABEL_128:
                        v62 = (std::__shared_weak_count *)__p;
                        if ((_QWORD)__p)
                        {
                          v63 = (unint64_t *)(__p + 8);
                          do
                            v64 = __ldaxr(v63);
                          while (__stlxr(v64 - 1, v63));
                          if (!v64)
                          {
                            ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                            std::__shared_weak_count::__release_weak(v62);
                          }
                        }
                        goto LABEL_143;
                      }
LABEL_134:
                      if (v95)
                      {
                        if (v94)
                        {
                          if (SHIBYTE(v93) < 0)
                            operator delete(v92[0]);
                          if (SHIBYTE(v90) < 0)
                            operator delete(v89[0]);
                        }
                        if ((_BYTE)v88 && SHIBYTE(v87) < 0)
                          operator delete((void *)__p);
                      }
LABEL_143:
                      if (!v110 && v109)
                      {
                        if (v108)
                        {
                          if (SHIBYTE(v107) < 0)
                            operator delete(v106[0]);
                          if (SHIBYTE(v104) < 0)
                            operator delete(v103[0]);
                        }
                        if (v102 && SHIBYTE(callbacks.releaseInfo) < 0)
                          operator delete(callbacks.skipForward);
                      }
                      if (SHIBYTE(v114) < 0)
                        operator delete((void *)v113);
                      v65 = (std::__shared_weak_count *)getBytes;
                      if (!getBytes)
                        goto LABEL_150;
                      v66 = (unint64_t *)((char *)getBytes + 8);
                      do
                        v67 = __ldaxr(v66);
                      while (__stlxr(v67 - 1, v66));
                      if (!v67)
                      {
                        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                        std::__shared_weak_count::__release_weak(v65);
                        v68 = v118;
                        if (v118)
                          goto LABEL_151;
                      }
                      else
                      {
LABEL_150:
                        v68 = v118;
                        if (v118)
                        {
LABEL_151:
                          v69 = (unint64_t *)&v68->__shared_owners_;
                          do
                            v70 = __ldaxr(v69);
                          while (__stlxr(v70 - 1, v69));
                          if (!v70)
                          {
                            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                            std::__shared_weak_count::__release_weak(v68);
                            if (v129)
                              goto LABEL_155;
                            goto LABEL_173;
                          }
                        }
                      }
LABEL_154:
                      if (v129)
                        goto LABEL_155;
                      goto LABEL_173;
                    }
                  }
                  if (v96)
                    goto LABEL_128;
                  goto LABEL_134;
                }
LABEL_114:
                *(_BYTE *)(a5 + 120) = 0;
                *(_OWORD *)a5 = *(_OWORD *)&callbacks.version;
                sub_22319FFBC((_BYTE *)(a5 + 16), (__int128 *)&callbacks.skipForward);
                goto LABEL_143;
              }
LABEL_113:
              operator delete((void *)v99);
              if (v110)
                goto LABEL_93;
              goto LABEL_114;
            }
            goto LABEL_112;
          }
          break;
        default:
          sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/ImageIO/src/Apple.cpp", 118, (uint64_t)"", 0, (uint64_t)"should not be reached", 21, (void (*)(void **))sub_22457406C);
          abort();
      }
      if (LODWORD(provider[0]) != a3)
      {
        sub_22415EA1C(a3, provider[0], (uint64_t)&v85);
        *(_OWORD *)&callbacks.version = v85;
        LOBYTE(callbacks.skipForward) = 0;
        v109 = 0;
        if (v95)
        {
          v102 = 0;
          v45 = v88;
          if (!(_BYTE)v88)
            goto LABEL_86;
          goto LABEL_85;
        }
LABEL_112:
        v110 = 0;
        if ((SHIBYTE(v100) & 0x80000000) == 0)
          goto LABEL_92;
        goto LABEL_113;
      }
    }
    v110 = 1;
    if ((SHIBYTE(v100) & 0x80000000) == 0)
      goto LABEL_92;
    goto LABEL_113;
  }
  *(_OWORD *)&callbacks.version = v119;
  v42 = sub_22319FFBC(&callbacks.skipForward, &v120);
  *(_OWORD *)a5 = *(_OWORD *)&callbacks.version;
  *(_BYTE *)(a5 + 16) = 0;
  *(_BYTE *)(a5 + 112) = 0;
  if (v109)
  {
    *(_BYTE *)(a5 + 40) = 0;
    v43 = v102;
    if (v102)
    {
      *(_OWORD *)(a5 + 16) = *(_OWORD *)v42;
      *(_QWORD *)(a5 + 32) = *((_QWORD *)v42 + 2);
      *((_QWORD *)v42 + 1) = 0;
      *((_QWORD *)v42 + 2) = 0;
      *(_QWORD *)v42 = 0;
      *(_BYTE *)(a5 + 40) = 1;
    }
    *(_BYTE *)(a5 + 48) = 0;
    *(_BYTE *)(a5 + 104) = 0;
    if (v108)
    {
      v44 = v105;
      *(_QWORD *)(a5 + 64) = v104;
      *(_OWORD *)(a5 + 48) = *(_OWORD *)v103;
      v103[0] = 0;
      v103[1] = 0;
      *(_QWORD *)(a5 + 72) = v44;
      *(_OWORD *)(a5 + 80) = *(_OWORD *)v106;
      *(_QWORD *)(a5 + 96) = v107;
      v104 = 0;
      v106[0] = 0;
      v106[1] = 0;
      v107 = 0;
      *(_BYTE *)(a5 + 104) = 1;
    }
    *(_BYTE *)(a5 + 112) = 1;
    *(_BYTE *)(a5 + 120) = 0;
    if (!v43 || (SHIBYTE(callbacks.releaseInfo) & 0x80000000) == 0)
      goto LABEL_154;
    operator delete(callbacks.skipForward);
    if (v129)
      goto LABEL_155;
  }
  else
  {
    *(_BYTE *)(a5 + 120) = 0;
    if (v129)
      goto LABEL_155;
  }
LABEL_173:
  if (v128)
  {
    if (v127)
    {
      if (v126 < 0)
        operator delete(v125);
      if (v124 < 0)
        operator delete(v123);
    }
    if (v122)
    {
      if (v121 < 0)
        operator delete((void *)v120);
    }
  }
LABEL_155:
  result = v132;
  if (v132 == v131)
  {
    v72 = 4;
    result = v131;
  }
  else
  {
    if (!v132)
      return result;
    v72 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v72))();
}

void sub_22415C7E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a71;
  char a72;
  uint64_t v72;
  uint64_t v74;

  sub_22415D028((uint64_t)&a25);
  sub_223197D38((uint64_t)&a47);
  if (a71 < 0)
    operator delete(__p);
  sub_223167354((uint64_t)&a72);
  sub_223167354(v72 - 256);
  sub_223197D38(v72 - 240);
  v74 = *(_QWORD *)(v72 - 80);
  if (v74 == v72 - 104)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(v72 - 104) + 32))(v72 - 104);
    _Unwind_Resume(a1);
  }
  if (!v74)
    _Unwind_Resume(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v74 + 40))(v74);
  _Unwind_Resume(a1);
}

void sub_22415C814(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (a49 < 0)
    operator delete(__p);
  JUMPOUT(0x22415C8F8);
}

void sub_22415C82C()
{
  JUMPOUT(0x22415C908);
}

void sub_22415C838()
{
  JUMPOUT(0x22415C908);
}

void sub_22415C840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  uint64_t v63;

  sub_223167354((uint64_t)&a25);
  sub_223167354((uint64_t)&a63);
  sub_223167354((uint64_t)&a9);
  sub_223167354((uint64_t)&a41);
  sub_223167354(v63 - 256);
  sub_223197D38(v63 - 240);
  if (*(_QWORD *)(v63 - 80) == v63 - 104)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(v63 - 104) + 32))(v63 - 104);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x22415C988);
}

void sub_22415C89C(void *a1, int a2)
{
  const void *v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    if (v2)
      CFRelease(v2);
    __cxa_rethrow();
  }
  JUMPOUT(0x22415C98CLL);
}

void sub_22415C8C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  __cxa_end_catch();
  sub_223167354((uint64_t)&a41);
  JUMPOUT(0x22415C918);
}

void sub_22415C954(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  sub_223197D38(v1 - 240);
  v3 = *(_QWORD *)(v1 - 80);
  if (v3 != v1 - 104)
  {
    if (!v3)
      _Unwind_Resume(a1);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x22415C938);
}

void sub_22415C974()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 - 80) != v0 - 104)
    JUMPOUT(0x22415C988);
  JUMPOUT(0x22415C938);
}

void sub_22415C9AC(char *info@<X1>, uint64_t a2@<X0>, int a3@<W2>, uint64_t a4@<X8>)
{
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  _BYTE *v9;
  int v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  void *__p;
  char v17;
  unsigned __int8 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  char v25;
  __int128 v26;
  __int128 v27;
  char v28;
  char v29;
  void *v30;
  char v31;
  void *v32;
  char v33;
  char v34;
  char v35;
  char v36;

  sub_22415FB4C(info, a3, (uint64_t)&v26);
  if (!v36)
  {
    v15 = v26;
    v9 = sub_22319FFBC(&__p, &v27);
    *(_OWORD *)a4 = v15;
    *(_BYTE *)(a4 + 16) = 0;
    *(_BYTE *)(a4 + 112) = 0;
    if (!v25)
    {
      *(_BYTE *)(a4 + 120) = 0;
      if (!v36)
        goto LABEL_24;
      goto LABEL_17;
    }
    *(_BYTE *)(a4 + 40) = 0;
    v10 = v18;
    if (v18)
    {
      *(_OWORD *)(a4 + 16) = *(_OWORD *)v9;
      *(_QWORD *)(a4 + 32) = *((_QWORD *)v9 + 2);
      *((_QWORD *)v9 + 1) = 0;
      *((_QWORD *)v9 + 2) = 0;
      *(_QWORD *)v9 = 0;
      *(_BYTE *)(a4 + 40) = 1;
    }
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 104) = 0;
    if (v24)
    {
      v11 = v21;
      *(_QWORD *)(a4 + 64) = v20;
      *(_OWORD *)(a4 + 48) = v19;
      v19 = 0uLL;
      *(_QWORD *)(a4 + 72) = v11;
      *(_OWORD *)(a4 + 80) = v22;
      *(_QWORD *)(a4 + 96) = v23;
      v20 = 0;
      v22 = 0uLL;
      v23 = 0;
      *(_BYTE *)(a4 + 104) = 1;
    }
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (v10 && v17 < 0)
      operator delete(__p);
LABEL_16:
    if (!v36)
      goto LABEL_24;
    goto LABEL_17;
  }
  sub_22415E1AC(&v15, (const void *)v26, *((std::__shared_weak_count **)&v26 + 1));
  sub_22415D6DC(a4, a2, (uint64_t)&v15);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (!*((_QWORD *)&v15 + 1))
    goto LABEL_16;
  v7 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    goto LABEL_16;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  if (!v36)
  {
LABEL_24:
    if (v35)
    {
      if (v34)
      {
        if (v33 < 0)
          operator delete(v32);
        if (v31 < 0)
          operator delete(v30);
      }
      if (v29)
      {
        if (v28 < 0)
          operator delete((void *)v27);
      }
    }
    return;
  }
LABEL_17:
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
  if (*((_QWORD *)&v26 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_22415CBE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,char a47,int a48,__int16 a49,char a50,char a51,int a52,__int16 a53,char a54,char a55)
{
  if (!(_BYTE)a53)
  {
    if ((_BYTE)a49)
    {
      if (a47)
      {
        if (a46 < 0)
          operator delete(__p);
        if (a39 < 0)
          operator delete(a34);
      }
      if (a33)
      {
        if (a32 < 0)
          operator delete(a27);
      }
    }
    _Unwind_Resume(exception_object);
  }
  sub_223167354((uint64_t)&a25);
  _Unwind_Resume(exception_object);
}

void sub_22415CC68(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22415CC8C(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_22415CCAC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIP13CGImageSourceEC1ES4_EUlS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIP13CGImageSourceEC1ES4_EUlS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIP13CGImageSourceEC1ES4_EUlS4_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIP13CGImageSourceEC1ES4_EUlS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_22415CD20(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22415CD44(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_22415CD64(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIP7CGImageEC1ES4_EUlS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIP7CGImageEC1ES4_EUlS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIP7CGImageEC1ES4_EUlS4_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIP7CGImageEC1ES4_EUlS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_QWORD *sub_22415CDD4(_QWORD *a1, uint64_t a2)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v4 = *(const void **)a2;
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v17 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_22415CEE4(&v18, v4);
  v8 = v19;
  *a1 = v18;
  a1[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = v19;
    if (v19)
    {
      v12 = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (!v17)
    return a1;
  v14 = (unint64_t *)&v17->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_22415CED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_22415CEE4(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24EC6D190;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_22415CF44(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_22415CF5C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_22415CF74(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22415CF98(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_22415CFB8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIP14CGDataProviderEC1ES4_EUlS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIP14CGDataProviderEC1ES4_EUlS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIP14CGDataProviderEC1ES4_EUlS4_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIP14CGDataProviderEC1ES4_EUlS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_22415D028(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (!*(_BYTE *)(a1 + 120))
  {
    if (!*(_BYTE *)(a1 + 112))
      return a1;
    if (!*(_BYTE *)(a1 + 104))
      goto LABEL_11;
    if (*(char *)(a1 + 103) < 0)
    {
      operator delete(*(void **)(a1 + 80));
      if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      {
LABEL_11:
        if (!*(_BYTE *)(a1 + 40))
          return a1;
        goto LABEL_12;
      }
    }
    else if ((*(char *)(a1 + 71) & 0x80000000) == 0)
    {
      goto LABEL_11;
    }
    operator delete(*(void **)(a1 + 48));
    if (!*(_BYTE *)(a1 + 40))
      return a1;
LABEL_12:
    if (*(char *)(a1 + 39) < 0)
    {
      operator delete(*(void **)(a1 + 16));
      return a1;
    }
    return a1;
  }
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22415D104(unsigned int a1@<W0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t v6;
  void *v7[2];
  char v8;
  char v9;
  void *v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  char v15;
  __int128 v16;
  __int128 __p;
  uint64_t v18;
  unsigned __int8 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  char v26;

  sub_22319FFBC(v7, a2);
  sub_22415D27C((uint64_t)&v16, a1, (__int128 *)v7);
  *(_OWORD *)a3 = v16;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (v26)
  {
    *(_BYTE *)(a3 + 40) = 0;
    v5 = v19;
    if (v19)
    {
      *(_OWORD *)(a3 + 16) = __p;
      *(_QWORD *)(a3 + 32) = v18;
      v18 = 0;
      __p = 0uLL;
      *(_BYTE *)(a3 + 40) = 1;
    }
    *(_BYTE *)(a3 + 48) = 0;
    *(_BYTE *)(a3 + 104) = 0;
    if (v25)
    {
      v6 = v22;
      *(_QWORD *)(a3 + 64) = v21;
      *(_OWORD *)(a3 + 48) = v20;
      v20 = 0uLL;
      *(_QWORD *)(a3 + 72) = v6;
      *(_OWORD *)(a3 + 80) = v23;
      *(_QWORD *)(a3 + 96) = v24;
      v21 = 0;
      v23 = 0uLL;
      v24 = 0;
      *(_BYTE *)(a3 + 104) = 1;
    }
    *(_BYTE *)(a3 + 112) = 1;
    if (v5 && SHIBYTE(v18) < 0)
      operator delete((void *)__p);
  }
  if (v15)
  {
    if (!v14)
      goto LABEL_13;
    if (v13 < 0)
    {
      operator delete(v12);
      if ((v11 & 0x80000000) == 0)
      {
LABEL_13:
        if (!v9)
          return;
        goto LABEL_14;
      }
    }
    else if ((v11 & 0x80000000) == 0)
    {
      goto LABEL_13;
    }
    operator delete(v10);
    if (!v9)
      return;
LABEL_14:
    if (v8 < 0)
      operator delete(v7[0]);
  }
}

void sub_22415D268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319FD28((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_22415D27C(uint64_t a1, unsigned int a2, __int128 *a3)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  unsigned int v9;
  __int128 *v10;
  void *__dst[2];
  uint64_t v12;
  char v13;
  void *v14[2];
  uint64_t v15;
  uint64_t v16;
  void *__p[2];
  uint64_t v18;
  char v19;
  char v20;

  v4 = atomic_load((unsigned __int8 *)&qword_255795300);
  if ((v4 & 1) == 0)
  {
    v10 = a3;
    v9 = a2;
    v8 = __cxa_guard_acquire(&qword_255795300);
    a2 = v9;
    a3 = v10;
    if (v8)
    {
      __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_2540CA618, &dword_22314D000);
      __cxa_guard_release(&qword_255795300);
      a2 = v9;
      a3 = v10;
    }
  }
  v5 = a2;
  sub_22319FFBC(__dst, a3);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = &off_2540CA618;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (!v20)
    return a1;
  *(_BYTE *)(a1 + 40) = 0;
  if (v13)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)__dst;
    *(_QWORD *)(a1 + 32) = v12;
    __dst[1] = 0;
    v12 = 0;
    __dst[0] = 0;
    *(_BYTE *)(a1 + 40) = 1;
  }
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  if (!v19)
  {
    *(_BYTE *)(a1 + 112) = 1;
    if (!v13)
      return a1;
    goto LABEL_14;
  }
  v6 = v16;
  *(_QWORD *)(a1 + 64) = v15;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)v14;
  v14[0] = 0;
  v14[1] = 0;
  *(_QWORD *)(a1 + 72) = v6;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 96) = v18;
  __p[1] = 0;
  v18 = 0;
  v15 = 0;
  __p[0] = 0;
  *(_BYTE *)(a1 + 104) = 1;
  *(_BYTE *)(a1 + 112) = 1;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v15) & 0x80000000) == 0)
      goto LABEL_8;
LABEL_13:
    operator delete(v14[0]);
    if (!v13)
      return a1;
    goto LABEL_14;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v15) < 0)
    goto LABEL_13;
LABEL_8:
  if (!v13)
    return a1;
LABEL_14:
  if ((SHIBYTE(v12) & 0x80000000) == 0)
    return a1;
  operator delete(__dst[0]);
  return a1;
}

void sub_22415D428(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_223195210(v5);
  v21[0] = v5;
  sub_2231813E8((_QWORD *)(v5 + 16), (uint64_t)(&off_24EC6D380)[2 * *a3], (uint64_t)(&off_24EC6D380)[2 * *a3 + 1]);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_22316DBC0();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v14 + 128);
    MEMORY[0x227684CE8](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_22316DD70();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24EC6D0E8[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_22415D688(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_22415D6AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22415D6C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22456E764((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_22415D6DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  CGImageDestinationRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  int v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  int v25;
  __int16 v26;
  int v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  BOOL v37;
  BOOL v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  void *v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  void *v51[2];
  char v52;
  char v53;
  void *v54;
  char v55;
  void *v56;
  char v57;
  char v58;
  char v59;
  CGImageRef image;
  std::__shared_weak_count *v61;
  void *v62[2];
  uint64_t v63;
  void *__dst[2];
  uint64_t v65;
  char v66;
  void *v67;
  char v68;
  void *v69;
  char v70;
  char v71;
  char v72;
  unsigned int v73;
  _QWORD v74[2];
  char v75;
  char v76;
  void *v77;
  char v78;
  void *__p;
  char v80;
  char v81;
  char v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  char v92;
  char v93;
  char v94;
  _QWORD v95[3];
  int v96;
  _QWORD **v97;
  const char *v98;
  _QWORD *v99;
  const char *v100;
  const char *v101;
  _QWORD *v102;

  v7 = *(CGImageDestinationRef *)a3;
  v6 = *(std::__shared_weak_count **)(a3 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (v7)
      goto LABEL_7;
  }
  else
  {
LABEL_6:
    if (v7)
    {
LABEL_7:
      v73 = *(_DWORD *)(a2 + 48);
      v11 = (char *)&v89;
      v12 = v73 - 1;
      if (v73 - 1 <= 0x27 && ((0xF1F1F0000FuLL >> v12) & 1) != 0)
        v11 = (char *)&v83 + 4 * qword_22469C998[v12];
      if (v11 - (char *)&v83 == 72)
      {
        v96 = 0;
        sub_2231B0F48(v95, "Invalid image format. Format ");
        sub_2231A0B14((uint64_t)&v94, (uint64_t)v95, &v73);
        v97 = (_QWORD **)v95;
        v98 = " can't be saved with CoreGraphics.";
        v99 = v95;
        v100 = " can't be saved with CoreGraphics.";
        v101 = " can't be saved with CoreGraphics.";
        if (v96 == -1)
          sub_22316DD70();
        v102 = &v97;
        ((void (*)(_QWORD **, _QWORD *))off_24EC6D118[v96])(&v102, v95);
        if (v96 == -1)
          sub_22316DD70();
        v97 = &v102;
        ((void (*)(void **__return_ptr, _QWORD ***, _QWORD *))off_24EC6D100[v96])(v62, &v97, v95);
        if (v96 != -1)
          ((void (*)(_QWORD ***, _QWORD *))off_24EC6D0D0[v96])(&v97, v95);
        if (SHIBYTE(v63) < 0)
        {
          sub_223197FA4(__dst, v62[0], (unint64_t)v62[1]);
        }
        else
        {
          *(_OWORD *)__dst = *(_OWORD *)v62;
          v65 = v63;
        }
        v66 = 1;
        LOBYTE(v67) = 0;
        v71 = 0;
        v72 = 1;
        sub_22454BC28((uint64_t)__dst, (uint64_t)&v83);
        *(_OWORD *)a1 = v83;
        *(_BYTE *)(a1 + 16) = 0;
        *(_BYTE *)(a1 + 112) = 0;
        if (v93)
        {
          *(_BYTE *)(a1 + 40) = 0;
          v43 = v86;
          if ((_BYTE)v86)
          {
            *(_OWORD *)(a1 + 16) = v84;
            *(_QWORD *)(a1 + 32) = v85;
            v85 = 0;
            v84 = 0uLL;
            *(_BYTE *)(a1 + 40) = 1;
          }
          *(_BYTE *)(a1 + 48) = 0;
          *(_BYTE *)(a1 + 104) = 0;
          if (v92)
          {
            v44 = v89;
            *(_QWORD *)(a1 + 64) = v88;
            *(_OWORD *)(a1 + 48) = v87;
            v87 = 0uLL;
            *(_QWORD *)(a1 + 72) = v44;
            *(_OWORD *)(a1 + 80) = v90;
            *(_QWORD *)(a1 + 96) = v91;
            v88 = 0;
            v90 = 0uLL;
            v91 = 0;
            *(_BYTE *)(a1 + 104) = 1;
          }
          *(_BYTE *)(a1 + 112) = 1;
          *(_BYTE *)(a1 + 120) = 0;
          if (v43 && SHIBYTE(v85) < 0)
            operator delete((void *)v84);
          if (!v72)
          {
LABEL_94:
            if (SHIBYTE(v63) < 0)
            {
              v42 = v62[0];
              goto LABEL_96;
            }
            return;
          }
        }
        else
        {
          *(_BYTE *)(a1 + 120) = 0;
          if (!v72)
            goto LABEL_94;
        }
        if (v71)
        {
          if (v70 < 0)
            operator delete(v69);
          if (v68 < 0)
            operator delete(v67);
        }
        if (v66)
        {
          if (SHIBYTE(v65) < 0)
            operator delete(__dst[0]);
        }
        goto LABEL_94;
      }
      v13 = *(_QWORD *)(a2 + 8);
      if (!v13)
        goto LABEL_44;
      v14 = *(std::__shared_weak_count **)(a2 + 16);
      if (v14)
      {
        v15 = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
        do
          v17 = __ldaxr(v15);
        while (__stlxr(v17 - 1, v15));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
        v13 = *(_QWORD *)(a2 + 8);
        v18 = *(std::__shared_weak_count **)(a2 + 16);
        if (v18)
        {
          v19 = (unint64_t *)&v18->__shared_owners_;
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 1, v19));
          do
            v21 = __ldaxr(v19);
          while (__stlxr(v21 - 1, v19));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
      }
      if (*(_BYTE *)(a2 + 53))
      {
        (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(v95, v13, 0);
        *(_QWORD *)&v83 = &off_24EC1F8C8;
        v22 = *(_QWORD *)(a2 + 8);
        v23 = *(std::__shared_weak_count **)(a2 + 16);
        if (!v23)
        {
LABEL_32:
          v24 = *(_QWORD *)(a2 + 40);
          v25 = *(_DWORD *)(a2 + 48);
          v26 = *(_WORD *)(a2 + 52);
          goto LABEL_49;
        }
      }
      else
      {
LABEL_44:
        v95[0] = 0;
        *(_QWORD *)&v83 = &off_24EC1F8C8;
        v22 = *(_QWORD *)(a2 + 8);
        v23 = *(std::__shared_weak_count **)(a2 + 16);
        if (!v23)
          goto LABEL_32;
      }
      v29 = (unint64_t *)&v23->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      v24 = *(_QWORD *)(a2 + 40);
      v25 = *(_DWORD *)(a2 + 48);
      v26 = *(_WORD *)(a2 + 52);
      do
        v31 = __ldxr(v29);
      while (__stxr(v31 + 1, v29));
LABEL_49:
      *((_QWORD *)&v83 + 1) = v22;
      *(_QWORD *)&v84 = v23;
      *((_QWORD *)&v84 + 1) = *(_QWORD *)(a2 + 24);
      LODWORD(v85) = *(_DWORD *)(a2 + 32);
      v86 = v24;
      LODWORD(v87) = v25;
      WORD2(v87) = v26;
      if (v23)
      {
        v32 = (unint64_t *)&v23->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      sub_2242BDA4C((uint64_t)&v83);
      v34 = (std::__shared_weak_count *)v84;
      if ((_QWORD)v84)
      {
        v35 = (unint64_t *)(v84 + 8);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      sub_22415E010(&image, (uint64_t)&v97);
      CGImageDestinationAddImage(*(CGImageDestinationRef *)a3, image, 0);
      v37 = CGImageDestinationFinalize(*(CGImageDestinationRef *)a3);
      v38 = v37;
      v39 = v61;
      if (!v61)
        goto LABEL_63;
      v40 = (unint64_t *)&v61->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
        if (v38)
          goto LABEL_64;
      }
      else
      {
LABEL_63:
        if (v37)
        {
LABEL_64:
          *(_BYTE *)(a1 + 120) = 1;
LABEL_116:
          v47 = (std::__shared_weak_count *)v98;
          if (v98)
          {
            v48 = (unint64_t *)(v98 + 8);
            do
              v49 = __ldaxr(v48);
            while (__stlxr(v49 - 1, v48));
            if (!v49)
            {
              ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
              std::__shared_weak_count::__release_weak(v47);
            }
          }
          v50 = v95[0];
          v95[0] = 0;
          if (v50)
            (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
          return;
        }
      }
      sub_223208674(v51, "Failed to save image to destination.");
      v59 = 1;
      sub_2231A958C(5u, (__int128 *)v51, (uint64_t)&v83);
      *(_OWORD *)a1 = v83;
      *(_BYTE *)(a1 + 16) = 0;
      *(_BYTE *)(a1 + 112) = 0;
      if (v93)
      {
        *(_BYTE *)(a1 + 40) = 0;
        v45 = v86;
        if ((_BYTE)v86)
        {
          *(_OWORD *)(a1 + 16) = v84;
          *(_QWORD *)(a1 + 32) = v85;
          v85 = 0;
          v84 = 0uLL;
          *(_BYTE *)(a1 + 40) = 1;
        }
        *(_BYTE *)(a1 + 48) = 0;
        *(_BYTE *)(a1 + 104) = 0;
        if (v92)
        {
          v46 = v89;
          *(_QWORD *)(a1 + 64) = v88;
          *(_OWORD *)(a1 + 48) = v87;
          v87 = 0uLL;
          *(_QWORD *)(a1 + 72) = v46;
          *(_OWORD *)(a1 + 80) = v90;
          *(_QWORD *)(a1 + 96) = v91;
          v88 = 0;
          v90 = 0uLL;
          v91 = 0;
          *(_BYTE *)(a1 + 104) = 1;
        }
        *(_BYTE *)(a1 + 112) = 1;
        *(_BYTE *)(a1 + 120) = 0;
        if (v45 && SHIBYTE(v85) < 0)
          operator delete((void *)v84);
      }
      else
      {
        *(_BYTE *)(a1 + 120) = 0;
      }
      if (v59)
      {
        if (v58)
        {
          if (v57 < 0)
            operator delete(v56);
          if (v55 < 0)
            operator delete(v54);
        }
        if (v53 && v52 < 0)
          operator delete(v51[0]);
      }
      goto LABEL_116;
    }
  }
  sub_223208674(v74, "Unsupported format");
  v82 = 1;
  sub_22454BC28((uint64_t)v74, (uint64_t)&v83);
  *(_OWORD *)a1 = v83;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (v93)
  {
    *(_BYTE *)(a1 + 40) = 0;
    v27 = v86;
    if ((_BYTE)v86)
    {
      *(_OWORD *)(a1 + 16) = v84;
      *(_QWORD *)(a1 + 32) = v85;
      v85 = 0;
      v84 = 0uLL;
      *(_BYTE *)(a1 + 40) = 1;
    }
    *(_BYTE *)(a1 + 48) = 0;
    *(_BYTE *)(a1 + 104) = 0;
    if (v92)
    {
      v28 = v89;
      *(_QWORD *)(a1 + 64) = v88;
      *(_OWORD *)(a1 + 48) = v87;
      v87 = 0uLL;
      *(_QWORD *)(a1 + 72) = v28;
      *(_OWORD *)(a1 + 80) = v90;
      *(_QWORD *)(a1 + 96) = v91;
      v88 = 0;
      v90 = 0uLL;
      v91 = 0;
      *(_BYTE *)(a1 + 104) = 1;
    }
    *(_BYTE *)(a1 + 112) = 1;
    *(_BYTE *)(a1 + 120) = 0;
    if (v27 && SHIBYTE(v85) < 0)
      operator delete((void *)v84);
    if (!v82)
      return;
  }
  else
  {
    *(_BYTE *)(a1 + 120) = 0;
    if (!v82)
      return;
  }
  if (v81)
  {
    if (v80 < 0)
      operator delete(__p);
    if (v78 < 0)
      operator delete(v77);
  }
  if (v76 && v75 < 0)
  {
    v42 = (void *)v74[0];
LABEL_96:
    operator delete(v42);
  }
}

void sub_22415DF14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  if (a29 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_22415E010(_QWORD *a1, uint64_t a2)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v4 = *(const void **)a2;
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v17 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_22415E120(&v18, v4);
  v8 = v19;
  *a1 = v18;
  a1[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = v19;
    if (v19)
    {
      v12 = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (!v17)
    return a1;
  v14 = (unint64_t *)&v17->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_22415E10C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_22415E120(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24EC6D140;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_22415E180(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_22415E198(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_22415E1AC(_QWORD *a1, const void *a2, std::__shared_weak_count *a3)
{
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v16;
  std::__shared_weak_count *v17;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  sub_22415E2B0(&v16, a2);
  v6 = v17;
  *a1 = v16;
  a1[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    v9 = v17;
    if (v17)
    {
      v10 = (unint64_t *)&v17->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  if (!a3)
    return a1;
  v12 = (unint64_t *)&a3->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (v13)
    return a1;
  ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
  std::__shared_weak_count::__release_weak(a3);
  return a1;
}

void sub_22415E29C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_22415E2B0(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24EC6D1E0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_22415E310(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_22415E328(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_22415E340(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22415E364(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_22415E384(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIP18CGImageDestinationEC1ES4_EUlS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIP18CGImageDestinationEC1ES4_EUlS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIP18CGImageDestinationEC1ES4_EUlS4_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIP18CGImageDestinationEC1ES4_EUlS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

const char *sub_22415E3F8()
{
  return "ImageIO";
}

uint64_t sub_22415E404(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  int v7;
  size_t v8;
  void **v9;
  unint64_t v10;
  unint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  _BYTE v20[24];
  int v21;
  void *__dst[2];
  unint64_t v23;
  _QWORD v24[5];
  _QWORD *v25;

  v21 = 0;
  v3 = operator new();
  *(_QWORD *)(v3 + 272) = 0;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)v3 = 0u;
  sub_223195210(v3);
  v24[0] = v3;
  if (a2 > 7)
  {
    v5 = "unknown error code";
    v6 = 18;
  }
  else
  {
    v4 = (int)a2;
    v5 = off_24EC6D340[v4];
    v6 = *(_QWORD *)((char *)&unk_22469CB00 + v4 * 8);
  }
  sub_2231813E8((_QWORD *)(v3 + 16), (uint64_t)v5, v6);
  v7 = *(_DWORD *)(v3 + 120);
  if ((v7 & 0x10) != 0)
  {
    v10 = *(_QWORD *)(v3 + 112);
    v11 = *(_QWORD *)(v3 + 72);
    if (v10 < v11)
    {
      *(_QWORD *)(v3 + 112) = v11;
      v10 = v11;
    }
    v12 = *(const void **)(v3 + 64);
    v8 = v10 - (_QWORD)v12;
    if (v10 - (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_29;
  }
  else
  {
    if ((v7 & 8) == 0)
    {
      v8 = 0;
      HIBYTE(v23) = 0;
      v9 = __dst;
      goto LABEL_17;
    }
    v12 = *(const void **)(v3 + 40);
    v8 = *(_QWORD *)(v3 + 56) - (_QWORD)v12;
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
LABEL_29:
      sub_22316DBC0();
  }
  if (v8 >= 0x17)
  {
    v13 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v13 = v8 | 7;
    v14 = v13 + 1;
    v9 = (void **)operator new(v13 + 1);
    __dst[1] = (void *)v8;
    v23 = v14 | 0x8000000000000000;
    __dst[0] = v9;
    goto LABEL_16;
  }
  HIBYTE(v23) = v8;
  v9 = __dst;
  if (v8)
LABEL_16:
    memmove(v9, v12, v8);
LABEL_17:
  *((_BYTE *)v9 + v8) = 0;
  v15 = v24[0];
  if (v24[0])
  {
    v16 = MEMORY[0x24BEDB7F0];
    v17 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v24[0] = *MEMORY[0x24BEDB7F0];
    v18 = *(_QWORD *)(v16 + 72);
    *(_QWORD *)(v15 + *(_QWORD *)(v17 - 24)) = *(_QWORD *)(v16 + 64);
    *(_QWORD *)(v15 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v15 + 16) = v18;
    if (*(char *)(v15 + 111) < 0)
      operator delete(*(void **)(v15 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v15 + 128);
    MEMORY[0x227684CE8](v15, 0x10B2C40EED050F3);
  }
  v24[0] = v20;
  v24[1] = __dst;
  v24[2] = v20;
  v24[3] = __dst;
  v24[4] = __dst;
  if (v21 == -1)
    sub_22316DD70();
  v25 = v24;
  ((void (*)(_QWORD **, _BYTE *))off_24EC6D280[v21])(&v25, v20);
  if (SHIBYTE(v23) < 0)
    operator delete(__dst[0]);
  if (v21 == -1)
    sub_22316DD70();
  v24[0] = __dst;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC6D2B0[v21])(v24, v20);
  if (v21 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC6D298[v21])(v24, v20);
  return result;
}

void sub_22415E6D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  uint64_t v24;

  MEMORY[0x227684CE8](v24, 0x10B2C40EED050F3);
  if (a12 != -1)
    ((void (*)(char *, uint64_t *))off_24EC6D298[a12])(&a17, &a9);
  _Unwind_Resume(a1);
}

void sub_22415E754(uint64_t a1, int a2, int a3)
{
  void *v4[2];
  uint64_t v5;
  void *__p[2];
  uint64_t v7;
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  char v13;
  char v14;
  int v15;
  int v16;
  char v17;
  char v18;
  _DWORD v19[6];
  int v20;
  _QWORD **v21;
  const char *v22;
  _DWORD *v23;
  const char *v24;
  const char *v25;
  _QWORD *v26;

  v15 = a3;
  v16 = a2;
  v20 = 0;
  sub_223C84FFC(v19, "Requested to load ");
  sub_22415D428((uint64_t)&v18, (uint64_t)v19, &v16);
  v21 = (_QWORD **)v19;
  v22 = " format, but file contains ";
  v23 = v19;
  v24 = " format, but file contains ";
  v25 = " format, but file contains ";
  if (v20 == -1)
    sub_22316DD70();
  v26 = &v21;
  ((void (*)(_QWORD **, _DWORD *))off_24EC6D2C8[v20])(&v26, v19);
  sub_22415D428((uint64_t)&v17, (uint64_t)v19, &v15);
  v21 = (_QWORD **)v19;
  v22 = " data.";
  v23 = v19;
  v24 = " data.";
  v25 = " data.";
  if (v20 == -1)
    sub_22316DD70();
  v26 = &v21;
  ((void (*)(_QWORD **, _DWORD *))off_24EC6D2E0[v20])(&v26, v19);
  if (v20 == -1)
    sub_22316DD70();
  v21 = &v26;
  ((void (*)(void **__return_ptr, _QWORD ***, _DWORD *))off_24EC6D2B0[v20])(v4, &v21, v19);
  if (v20 != -1)
    ((void (*)(_QWORD ***, _DWORD *))off_24EC6D298[v20])(&v21, v19);
  if (SHIBYTE(v5) < 0)
  {
    sub_223197FA4(__p, v4[0], (unint64_t)v4[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v4;
    v7 = v5;
  }
  v8 = 1;
  LOBYTE(v9) = 0;
  v13 = 0;
  v14 = 1;
  sub_22415D104(1u, (__int128 *)__p, a1);
  if (v14)
  {
    if (!v13)
      goto LABEL_13;
    if (v12 < 0)
    {
      operator delete(v11);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_13:
        if (!v8)
          goto LABEL_16;
LABEL_14:
        if (SHIBYTE(v7) < 0)
          operator delete(__p[0]);
        goto LABEL_16;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_13;
    }
    operator delete(v9);
    if (!v8)
      goto LABEL_16;
    goto LABEL_14;
  }
LABEL_16:
  if (SHIBYTE(v5) < 0)
    operator delete(v4[0]);
}

void sub_22415E974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22415E9A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22319B964(v1 - 112);
  _Unwind_Resume(a1);
}

void sub_22415E9B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22319B964(v1 - 112);
  _Unwind_Resume(a1);
}

void sub_22415E9CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22319B964(v1 - 112);
  _Unwind_Resume(a1);
}

void sub_22415E9E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22319B964(v1 - 112);
  _Unwind_Resume(a1);
}

void sub_22415E9F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22319B964(v1 - 112);
  _Unwind_Resume(a1);
}

void sub_22415EA08(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22319B964(v1 - 112);
  _Unwind_Resume(a1);
}

void sub_22415EA1C(unsigned int a1@<W0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  void *v4[2];
  uint64_t v5;
  void *__p[2];
  uint64_t v7;
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  char v13;
  char v14;
  unsigned int v15;
  unsigned int v16;

  v15 = a2;
  v16 = a1;
  sub_22415EB60("Desired image format is ", &v16, (uint64_t)" but file contains ", &v15, (uint64_t)".");
  if (SHIBYTE(v5) < 0)
  {
    sub_223197FA4(__p, v4[0], (unint64_t)v4[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v4;
    v7 = v5;
  }
  v8 = 1;
  LOBYTE(v9) = 0;
  v13 = 0;
  v14 = 1;
  sub_22415D104(2u, (__int128 *)__p, a3);
  if (!v14)
    goto LABEL_11;
  if (v13)
  {
    if ((v12 & 0x80000000) == 0)
    {
      if ((v10 & 0x80000000) == 0)
        goto LABEL_8;
LABEL_14:
      operator delete(v9);
      if (!v8)
        goto LABEL_11;
      goto LABEL_9;
    }
    operator delete(v11);
    if (v10 < 0)
      goto LABEL_14;
  }
LABEL_8:
  if (!v8)
    goto LABEL_11;
LABEL_9:
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
LABEL_11:
  if (SHIBYTE(v5) < 0)
    operator delete(v4[0]);
}

void sub_22415EB34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_22415EB60(char *__s, unsigned int *a2, uint64_t a3, unsigned int *a4, uint64_t a5)
{
  uint64_t result;
  char v10;
  char v11;
  _DWORD v12[6];
  int v13;
  _QWORD **v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v13 = 0;
  sub_2231A0C08(v12, __s);
  sub_2231A0B14((uint64_t)&v11, (uint64_t)v12, a2);
  v14 = (_QWORD **)v12;
  v15 = a3;
  v16 = v12;
  v17 = a3;
  v18 = a3;
  if (v13 == -1)
    sub_22316DD70();
  v19 = &v14;
  ((void (*)(_QWORD **, _DWORD *))off_24EC6D2F8[v13])(&v19, v12);
  sub_2231A0B14((uint64_t)&v10, (uint64_t)v12, a4);
  v14 = (_QWORD **)v12;
  v15 = a5;
  v16 = v12;
  v17 = a5;
  v18 = a5;
  if (v13 == -1)
    sub_22316DD70();
  v19 = &v14;
  ((void (*)(_QWORD **, _DWORD *))off_24EC6D310[v13])(&v19, v12);
  if (v13 == -1)
    sub_22316DD70();
  v14 = &v19;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24EC6D2B0[v13])(&v14, v12);
  if (v13 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24EC6D298[v13])(&v14, v12);
  return result;
}

void sub_22415ECBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22415ECD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22415ECE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22415ECF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22415ED0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22415ED20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22415ED34(unsigned int a1@<W0>, int a2@<W1>, uint64_t a3@<X8>)
{
  void *v4[2];
  uint64_t v5;
  void *__p[2];
  uint64_t v7;
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  char v13;
  char v14;
  int v15;
  unsigned int v16;

  v15 = a2;
  v16 = a1;
  sub_22415EE78("Requested to load format ", &v16, (uint64_t)", but is not supported by ", &v15, (uint64_t)".");
  if (SHIBYTE(v5) < 0)
  {
    sub_223197FA4(__p, v4[0], (unint64_t)v4[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v4;
    v7 = v5;
  }
  v8 = 1;
  LOBYTE(v9) = 0;
  v13 = 0;
  v14 = 1;
  sub_22415D104(3u, (__int128 *)__p, a3);
  if (!v14)
    goto LABEL_11;
  if (v13)
  {
    if ((v12 & 0x80000000) == 0)
    {
      if ((v10 & 0x80000000) == 0)
        goto LABEL_8;
LABEL_14:
      operator delete(v9);
      if (!v8)
        goto LABEL_11;
      goto LABEL_9;
    }
    operator delete(v11);
    if (v10 < 0)
      goto LABEL_14;
  }
LABEL_8:
  if (!v8)
    goto LABEL_11;
LABEL_9:
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
LABEL_11:
  if (SHIBYTE(v5) < 0)
    operator delete(v4[0]);
}

void sub_22415EE4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_22415EE78(char *__s, unsigned int *a2, uint64_t a3, int *a4, uint64_t a5)
{
  uint64_t result;
  char v10;
  char v11;
  _DWORD v12[6];
  int v13;
  _QWORD **v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v13 = 0;
  sub_223627410(v12, __s);
  sub_2231A0B14((uint64_t)&v11, (uint64_t)v12, a2);
  v14 = (_QWORD **)v12;
  v15 = a3;
  v16 = v12;
  v17 = a3;
  v18 = a3;
  if (v13 == -1)
    sub_22316DD70();
  v19 = &v14;
  ((void (*)(_QWORD **, _DWORD *))off_24EC6D328[v13])(&v19, v12);
  sub_22415D428((uint64_t)&v10, (uint64_t)v12, a4);
  v14 = (_QWORD **)v12;
  v15 = a5;
  v16 = v12;
  v17 = a5;
  v18 = a5;
  if (v13 == -1)
    sub_22316DD70();
  v19 = &v14;
  ((void (*)(_QWORD **, _DWORD *))off_24EC6D310[v13])(&v19, v12);
  if (v13 == -1)
    sub_22316DD70();
  v14 = &v19;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24EC6D2B0[v13])(&v14, v12);
  if (v13 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24EC6D298[v13])(&v14, v12);
  return result;
}

void sub_22415EFD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22415EFE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22415EFFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22415F010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22415F024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22415F038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22415F04C(int a1@<W0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v4;
  size_t v5;
  void *v6;
  unint64_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  void *v18;
  void *v19;
  int64_t v20;
  std::string v21;
  std::string __dst;
  char v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  char v28;
  char v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  unsigned __int8 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  char v40;
  __int128 v41;
  void *v42[2];
  const char *v43;
  uint64_t v44;
  __int128 v45;
  const void *v46;
  unint64_t v47;
  void *__p[2];
  uint64_t v49;
  char v50;
  char v51;
  unint64_t v52;
  int v53;
  _QWORD v54[20];

  v54[19] = *MEMORY[0x24BDAC8D0];
  if (a2 != 255)
  {
    if (a2 == 137)
    {
      if (a1 == 3 || !a1)
      {
        v4 = 3;
LABEL_16:
        *(_DWORD *)a3 = v4;
        *(_BYTE *)(a3 + 120) = 1;
        return;
      }
      sub_22415E754((uint64_t)&v41, a1, 3);
      goto LABEL_59;
    }
    if ((a2 & 0xFFFFFFFB) == 0x49)
    {
      if (a1 == 5 || !a1)
      {
        v4 = 5;
        goto LABEL_16;
      }
      sub_22415E754((uint64_t)&v41, a1, 5);
      goto LABEL_59;
    }
    sub_223195210((uint64_t)&v41);
    *(_DWORD *)((char *)&v42[1] + *((_QWORD *)v42[0] - 3)) = *(_DWORD *)((_BYTE *)&v42[1] + *((_QWORD *)v42[0] - 3)) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<();
    if ((v53 & 0x10) != 0)
    {
      v7 = v52;
      if (v52 < v47)
      {
        v52 = v47;
        v7 = v47;
      }
      v8 = v46;
      v5 = v7 - (_QWORD)v46;
      if (v7 - (unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
        goto LABEL_70;
    }
    else
    {
      if ((v53 & 8) == 0)
      {
        v5 = 0;
        HIBYTE(v20) = 0;
        v6 = &v18;
        goto LABEL_28;
      }
      v8 = (const void *)v44;
      v5 = *((_QWORD *)&v45 + 1) - v44;
      if ((unint64_t)(*((_QWORD *)&v45 + 1) - v44) >= 0x7FFFFFFFFFFFFFF8)
LABEL_70:
        sub_22316DBC0();
    }
    if (v5 >= 0x17)
    {
      v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v9 = v5 | 7;
      v10 = v9 + 1;
      v6 = operator new(v9 + 1);
      v19 = (void *)v5;
      v20 = v10 | 0x8000000000000000;
      v18 = v6;
    }
    else
    {
      HIBYTE(v20) = v5;
      v6 = &v18;
      if (!v5)
      {
LABEL_28:
        *((_BYTE *)v6 + v5) = 0;
        *(_QWORD *)&v41 = *MEMORY[0x24BEDB7F0];
        v11 = *(void **)(MEMORY[0x24BEDB7F0] + 72);
        *(void **)((char *)&v42[-2] + *(_QWORD *)(v41 - 24)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
        v42[0] = v11;
        v42[1] = (void *)(MEMORY[0x24BEDB848] + 16);
        if (v51 < 0)
          operator delete(__p[1]);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x227684BE0](v54);
        *(_QWORD *)&v41 = "Found file format of unsupported format signature byte '0x";
        *((_QWORD *)&v41 + 1) = 58;
        v12 = (void *)HIBYTE(v20);
        v13 = &v18;
        if (v20 < 0)
        {
          v13 = v18;
          v12 = v19;
        }
        v42[0] = v13;
        v42[1] = v12;
        v43 = "'.";
        v44 = 2;
        sub_2231A9820((uint64_t)&v41, (uint64_t)&v45, 0, 0, &v21);
        if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
          sub_223197FA4(&__dst, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
        else
          __dst = v21;
        v23 = 1;
        LOBYTE(v24) = 0;
        v28 = 0;
        v29 = 1;
        sub_22415D104(1u, (__int128 *)&__dst, (uint64_t)&v30);
        *(_OWORD *)a3 = v30;
        *(_BYTE *)(a3 + 16) = 0;
        *(_BYTE *)(a3 + 112) = 0;
        if (v40)
        {
          *(_BYTE *)(a3 + 40) = 0;
          v14 = v33;
          if (v33)
          {
            *(_OWORD *)(a3 + 16) = v31;
            *(_QWORD *)(a3 + 32) = v32;
            v32 = 0;
            v31 = 0uLL;
            *(_BYTE *)(a3 + 40) = 1;
          }
          *(_BYTE *)(a3 + 48) = 0;
          *(_BYTE *)(a3 + 104) = 0;
          if (v39)
          {
            v15 = v36;
            *(_QWORD *)(a3 + 64) = v35;
            *(_OWORD *)(a3 + 48) = v34;
            v34 = 0uLL;
            *(_QWORD *)(a3 + 72) = v15;
            *(_OWORD *)(a3 + 80) = v37;
            *(_QWORD *)(a3 + 96) = v38;
            v35 = 0;
            v37 = 0uLL;
            v38 = 0;
            *(_BYTE *)(a3 + 104) = 1;
          }
          *(_BYTE *)(a3 + 112) = 1;
          *(_BYTE *)(a3 + 120) = 0;
          if (v14 && SHIBYTE(v32) < 0)
            operator delete((void *)v31);
        }
        else
        {
          *(_BYTE *)(a3 + 120) = 0;
        }
        if (v29)
        {
          if (v28)
          {
            if (v27 < 0)
              operator delete(v26);
            if (v25 < 0)
              operator delete(v24);
          }
          if (v23 && SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v21.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v20) & 0x80000000) == 0)
            return;
        }
        else if ((SHIBYTE(v20) & 0x80000000) == 0)
        {
          return;
        }
        operator delete(v18);
        return;
      }
    }
    memmove(v6, v8, v5);
    goto LABEL_28;
  }
  if ((a1 & 0xFFFFFFFB) == 0)
  {
    v4 = 4;
    goto LABEL_16;
  }
  sub_22415E754((uint64_t)&v41, a1, 4);
LABEL_59:
  *(_OWORD *)a3 = v41;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if ((_BYTE)v52)
  {
    *(_BYTE *)(a3 + 40) = 0;
    v16 = v44;
    if ((_BYTE)v44)
    {
      *(_OWORD *)(a3 + 16) = *(_OWORD *)v42;
      *(_QWORD *)(a3 + 32) = v43;
      v42[1] = 0;
      v43 = 0;
      v42[0] = 0;
      *(_BYTE *)(a3 + 40) = 1;
    }
    *(_BYTE *)(a3 + 48) = 0;
    *(_BYTE *)(a3 + 104) = 0;
    if (v50)
    {
      v17 = v47;
      *(_QWORD *)(a3 + 64) = v46;
      *(_OWORD *)(a3 + 48) = v45;
      v45 = 0uLL;
      *(_QWORD *)(a3 + 72) = v17;
      *(_OWORD *)(a3 + 80) = *(_OWORD *)__p;
      *(_QWORD *)(a3 + 96) = v49;
      v46 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v49 = 0;
      *(_BYTE *)(a3 + 104) = 1;
    }
    *(_BYTE *)(a3 + 112) = 1;
    *(_BYTE *)(a3 + 120) = 0;
    if (v16)
    {
      if (SHIBYTE(v43) < 0)
        operator delete(v42[0]);
    }
  }
  else
  {
    *(_BYTE *)(a3 + 120) = 0;
  }
}

void sub_22415F5A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_22415F60C(std::error_category *a1)
{
  std::error_category::~error_category(a1);
  JUMPOUT(0x227684CE8);
}

_DWORD *sub_22415F630(_DWORD ***a1)
{
  return sub_223895054(**a1, (char *)(*a1)[1]);
}

void sub_22415F63C(uint64_t a1, uint64_t a2)
{
  sub_22415F64C((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

void sub_22415F64C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24EC6D298[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_22319BD1C((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_22415F800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_22415F844(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_22415F93C((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_22415F934(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_22415F93C(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_22415FB38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319C040((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22415FB4C(char *info@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count_vtbl *v5;
  CGImageDestinationRef v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *v20[2];
  uint64_t v21;
  void *__dst[2];
  uint64_t v23;
  char v24;
  void *v25;
  char v26;
  void *v27;
  char v28;
  char v29;
  char v30;
  CGDataConsumerCallbacks cbks;
  __int128 __p;
  uint64_t v33;
  unsigned __int8 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  char v41;
  CFStringRef v42;
  std::__shared_weak_count *v43;
  char v44;
  std::__shared_weak_count_vtbl *v45;
  std::__shared_weak_count *v46;
  int v47;
  _DWORD v48[6];
  int v49;
  char v50;
  char *v51;

  v47 = a2;
  if (*(_DWORD *)&info[*(_QWORD *)(*(_QWORD *)info - 24) + 32]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/ImageIO/src/ImageDestinationRef.cpp", 71, (uint64_t)"file.good()", 11, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  cbks = (CGDataConsumerCallbacks)xmmword_24EC71EA0;
  v5 = (std::__shared_weak_count_vtbl *)CGDataConsumerCreate(info, &cbks);
  sub_2242BC010(&v45, v5, 0);
  sub_22415FFB8((uint64_t)&v42, v47);
  if (v44)
  {
    v6 = CGImageDestinationCreateWithDataConsumer((CGDataConsumerRef)v45, v42, 1uLL, 0);
    v7 = (std::__shared_weak_count *)operator new();
    v8 = v7;
    v7->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6D1E0;
    v7->__shared_weak_owners_ = 0;
    v7[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v8);
    }
    *(_QWORD *)a3 = v6;
    *(_QWORD *)(a3 + 8) = v8;
    *(_BYTE *)(a3 + 120) = 1;
    v12 = v43;
    if (v43)
    {
      v13 = (unint64_t *)&v43->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    goto LABEL_41;
  }
  v49 = 0;
  sub_223C8F720(v48, "ImageDestinationRef does not (yet) support format ");
  sub_22415D428((uint64_t)&v51, (uint64_t)v48, &v47);
  if (v49 == -1)
    sub_22316DD70();
  v51 = &v50;
  ((void (*)(void **__return_ptr, char **, _DWORD *))off_24EC6D3F8[v49])(v20, &v51, v48);
  if (v49 != -1)
    ((void (*)(char **, _DWORD *))off_24EC6D3E0[v49])(&v51, v48);
  if (SHIBYTE(v21) < 0)
  {
    sub_223197FA4(__dst, v20[0], (unint64_t)v20[1]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)v20;
    v23 = v21;
  }
  v24 = 1;
  LOBYTE(v25) = 0;
  v29 = 0;
  v30 = 1;
  sub_22454BD5C((uint64_t)__dst, (uint64_t)&cbks);
  *(CGDataConsumerCallbacks *)a3 = cbks;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (v41)
  {
    *(_BYTE *)(a3 + 40) = 0;
    v15 = v34;
    if (v34)
    {
      *(_OWORD *)(a3 + 16) = __p;
      *(_QWORD *)(a3 + 32) = v33;
      v33 = 0;
      __p = 0uLL;
      *(_BYTE *)(a3 + 40) = 1;
    }
    *(_BYTE *)(a3 + 48) = 0;
    *(_BYTE *)(a3 + 104) = 0;
    if (v40)
    {
      v16 = v37;
      *(_QWORD *)(a3 + 64) = v36;
      *(_OWORD *)(a3 + 48) = v35;
      v35 = 0uLL;
      *(_QWORD *)(a3 + 72) = v16;
      *(_OWORD *)(a3 + 80) = v38;
      *(_QWORD *)(a3 + 96) = v39;
      v36 = 0;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(a3 + 104) = 1;
    }
    *(_BYTE *)(a3 + 112) = 1;
    *(_BYTE *)(a3 + 120) = 0;
    if (v15 && SHIBYTE(v33) < 0)
      operator delete((void *)__p);
    if (!v30)
      goto LABEL_39;
    goto LABEL_31;
  }
  *(_BYTE *)(a3 + 120) = 0;
  if (v30)
  {
LABEL_31:
    if (v29)
    {
      if (v28 < 0)
        operator delete(v27);
      if (v26 < 0)
        operator delete(v25);
    }
    if (v24 && SHIBYTE(v23) < 0)
      operator delete(__dst[0]);
  }
LABEL_39:
  if (SHIBYTE(v21) < 0)
    operator delete(v20[0]);
LABEL_41:
  v17 = v46;
  if (v46)
  {
    v18 = (unint64_t *)&v46->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_22415FF18(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  __break(1u);
}

void sub_22415FF68()
{
  __cxa_end_catch();
  JUMPOUT(0x22415FF8CLL);
}

void sub_22415FF78()
{
  JUMPOUT(0x22415FF8CLL);
}

void sub_22415FFA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1 - 104);
  _Unwind_Resume(a1);
}

void sub_22415FFB8(uint64_t a1, int a2)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  switch(a2)
  {
    case 5:
      v3 = (std::__shared_weak_count *)operator new();
      v3->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      v3->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6D470;
      v3->__shared_weak_owners_ = 0;
      v3[1].__vftable = (std::__shared_weak_count_vtbl *)CFSTR("public.tiff");
      *(_QWORD *)a1 = CFSTR("public.tiff");
      *(_QWORD *)(a1 + 8) = v3;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      *(_BYTE *)(a1 + 16) = 1;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      break;
    case 4:
      v3 = (std::__shared_weak_count *)operator new();
      v3->__shared_owners_ = 0;
      v7 = (unint64_t *)&v3->__shared_owners_;
      v3->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6D470;
      v3->__shared_weak_owners_ = 0;
      v3[1].__vftable = (std::__shared_weak_count_vtbl *)CFSTR("public.jpeg");
      *(_QWORD *)a1 = CFSTR("public.jpeg");
      *(_QWORD *)(a1 + 8) = v3;
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
      *(_BYTE *)(a1 + 16) = 1;
      do
        v6 = __ldaxr(v7);
      while (__stlxr(v6 - 1, v7));
      break;
    case 3:
      v3 = (std::__shared_weak_count *)operator new();
      v3->__shared_owners_ = 0;
      v4 = (unint64_t *)&v3->__shared_owners_;
      v3->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6D470;
      v3->__shared_weak_owners_ = 0;
      v3[1].__vftable = (std::__shared_weak_count_vtbl *)CFSTR("public.png");
      *(_QWORD *)a1 = CFSTR("public.png");
      *(_QWORD *)(a1 + 8) = v3;
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 1, v4));
      *(_BYTE *)(a1 + 16) = 1;
      do
        v6 = __ldaxr(v4);
      while (__stlxr(v6 - 1, v4));
      break;
    default:
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 16) = 0;
      return;
  }
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_224160164(void *a1)
{
  __cxa_begin_catch(a1);
  CFRelease(CFSTR("public.png"));
  __cxa_rethrow();
}

void sub_224160178()
{
  __break(1u);
}

void sub_2241601CC()
{
  __cxa_end_catch();
  JUMPOUT(0x2241601D4);
}

std::__shared_weak_count_vtbl **sub_2241601E0(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;

  if (a3)
  {
    sub_2241603A0(&v12, cf);
    v5 = v13;
    *a1 = v12;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
    if (!v5)
      return a1;
  }
  else
  {
    v12 = cf;
    v5 = (std::__shared_weak_count *)operator new();
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6D420;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = cf;
    v13 = v5;
    *a1 = cf;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  v9 = v13;
  if (!v13)
    return a1;
  v10 = (unint64_t *)&v13->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_2241602BC(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_2241602D4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2241602EC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_224160310(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_224160330(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPK10__CFStringEC1ES5_EUlS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPK10__CFStringEC1ES5_EUlS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPK10__CFStringEC1ES5_EUlS5_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPK10__CFStringEC1ES5_EUlS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_QWORD *sub_2241603A0(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24EC6D420;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_224160400(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_224160418(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_224160430(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_224160454(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_224160474(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPK7__CFURLEC1ES5_EUlS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPK7__CFURLEC1ES5_EUlS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPK7__CFURLEC1ES5_EUlS5_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPK7__CFURLEC1ES5_EUlS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_2241604E4(_QWORD *a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  void *size;
  void *v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  __int128 *v25;
  uint64_t v26;
  __int128 *v27;
  uint64_t v28;
  __int128 *v29;
  uint64_t v30;
  std::string v31;
  std::string v32;
  _DWORD v33[2];
  void *__dst[2];
  _BYTE v35[7];
  char v36;
  char v37;
  void *v38;
  char v39;
  void *v40;
  char v41;
  char v42;
  char v43;
  int v44;
  _BYTE v45[24];
  int v46;
  char v47;
  char *v48;
  __int128 v49;
  __int128 __p;
  uint64_t v51;
  unsigned __int8 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  char v58;
  char v59;
  _QWORD v60[3];
  _QWORD *v61;
  _QWORD v62[3];
  _QWORD *v63;
  _QWORD v64[3];
  _QWORD *v65;
  _BYTE v66[24];
  _BYTE *v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  v44 = a4;
  switch(a4)
  {
    case 1:
    case 2:
      v8 = (_QWORD *)a1[3];
      if (v8)
      {
        if (v8 == a1)
        {
          v67 = v66;
          (*(void (**)(_QWORD *, _BYTE *))(*a1 + 24))(a1, v66);
        }
        else
        {
          v67 = (_BYTE *)(*(uint64_t (**)(_QWORD))(*v8 + 16))(a1[3]);
        }
      }
      else
      {
        v67 = 0;
      }
      sub_2241618F8((uint64_t)v66, a3, a2, a5);
      v21 = v67;
      if (v67 != v66)
        goto LABEL_87;
      v22 = 4;
      v21 = v66;
      goto LABEL_89;
    case 3:
      v11 = (_QWORD *)a1[3];
      if (v11)
      {
        if (v11 != a1)
        {
          v12 = (_QWORD *)(*(uint64_t (**)(_QWORD))(*v11 + 16))(a1[3]);
          v65 = v12;
          if (!v12)
            goto LABEL_69;
LABEL_67:
          if (v12 != v64)
          {
            v12 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
            goto LABEL_69;
          }
          *((_QWORD *)&__p + 1) = &v49;
          (*(void (**)(_QWORD *, __int128 *))(v64[0] + 24))(v64, &v49);
LABEL_70:
          sub_22415BBF4(&v49, a3, a2, 3, a5);
          v27 = (__int128 *)*((_QWORD *)&__p + 1);
          if (*((__int128 **)&__p + 1) == &v49)
          {
            v28 = 4;
            v27 = &v49;
          }
          else
          {
            if (!*((_QWORD *)&__p + 1))
              goto LABEL_75;
            v28 = 5;
          }
          (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_75:
          v21 = v65;
          if (v65 == v64)
          {
            v22 = 4;
            v21 = v64;
            goto LABEL_89;
          }
          goto LABEL_87;
        }
        v65 = v64;
        (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v64);
        v12 = v65;
        if (v65)
          goto LABEL_67;
      }
      else
      {
        v12 = 0;
        v65 = 0;
      }
LABEL_69:
      *((_QWORD *)&__p + 1) = v12;
      goto LABEL_70;
    case 4:
      v13 = (_QWORD *)a1[3];
      if (v13)
      {
        if (v13 != a1)
        {
          v14 = (_QWORD *)(*(uint64_t (**)(_QWORD))(*v13 + 16))(a1[3]);
          v63 = v14;
          if (!v14)
            goto LABEL_80;
LABEL_78:
          if (v14 != v62)
          {
            v14 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v14 + 16))(v14);
            goto LABEL_80;
          }
          *((_QWORD *)&__p + 1) = &v49;
          (*(void (**)(_QWORD *, __int128 *))(v62[0] + 24))(v62, &v49);
LABEL_81:
          sub_22415BBF4(&v49, a3, a2, 4, a5);
          v29 = (__int128 *)*((_QWORD *)&__p + 1);
          if (*((__int128 **)&__p + 1) == &v49)
          {
            v30 = 4;
            v29 = &v49;
          }
          else
          {
            if (!*((_QWORD *)&__p + 1))
              goto LABEL_86;
            v30 = 5;
          }
          (*(void (**)(void))(*(_QWORD *)v29 + 8 * v30))();
LABEL_86:
          v21 = v63;
          if (v63 == v62)
          {
            v22 = 4;
            v21 = v62;
            goto LABEL_89;
          }
          goto LABEL_87;
        }
        v63 = v62;
        (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v62);
        v14 = v63;
        if (v63)
          goto LABEL_78;
      }
      else
      {
        v14 = 0;
        v63 = 0;
      }
LABEL_80:
      *((_QWORD *)&__p + 1) = v14;
      goto LABEL_81;
    case 5:
      v9 = (_QWORD *)a1[3];
      if (v9)
      {
        if (v9 != a1)
        {
          v10 = (_QWORD *)(*(uint64_t (**)(_QWORD))(*v9 + 16))(a1[3]);
          v61 = v10;
          if (!v10)
            goto LABEL_58;
LABEL_56:
          if (v10 != v60)
          {
            v10 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v10 + 16))(v10);
            goto LABEL_58;
          }
          *((_QWORD *)&__p + 1) = &v49;
          (*(void (**)(_QWORD *, __int128 *))(v60[0] + 24))(v60, &v49);
LABEL_59:
          sub_22415BBF4(&v49, a3, a2, 5, a5);
          v25 = (__int128 *)*((_QWORD *)&__p + 1);
          if (*((__int128 **)&__p + 1) == &v49)
          {
            v26 = 4;
            v25 = &v49;
          }
          else
          {
            if (!*((_QWORD *)&__p + 1))
              goto LABEL_64;
            v26 = 5;
          }
          (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_64:
          v21 = v61;
          if (v61 == v60)
          {
            v22 = 4;
            v21 = v60;
LABEL_89:
            (*(void (**)(void))(*v21 + 8 * v22))();
            return;
          }
LABEL_87:
          if (!v21)
            return;
          v22 = 5;
          goto LABEL_89;
        }
        v61 = v60;
        (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v60);
        v10 = v61;
        if (v61)
          goto LABEL_56;
      }
      else
      {
        v10 = 0;
        v61 = 0;
      }
LABEL_58:
      *((_QWORD *)&__p + 1) = v10;
      goto LABEL_59;
    default:
      v46 = 0;
      sub_22415D428((uint64_t)&v48, (uint64_t)v45, &v44);
      if (v46 == -1)
        sub_22316DD70();
      v48 = &v47;
      ((void (*)(std::string *__return_ptr, char **, _BYTE *))off_24EC6D4C8[v46])(&v31, &v48, v45);
      if (v46 != -1)
        ((void (*)(char **, _BYTE *))off_24EC6D4B0[v46])(&v48, v45);
      v15 = std::string::insert(&v31, 0, "No known method to load file of ", 0x20uLL);
      v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v32.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      v17 = std::string::append(&v32, " format.", 8uLL);
      v19 = (void *)v17->__r_.__value_.__r.__words[0];
      size = (void *)v17->__r_.__value_.__l.__size_;
      v33[0] = v17->__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)v33 + 3) = *(_DWORD *)((char *)&v17->__r_.__value_.__r.__words[2] + 3);
      v20 = SHIBYTE(v17->__r_.__value_.__r.__words[2]);
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      if (v20 < 0)
      {
        sub_223197FA4(__dst, v19, (unint64_t)size);
      }
      else
      {
        __dst[0] = v19;
        __dst[1] = size;
        *(_DWORD *)v35 = v33[0];
        *(_DWORD *)&v35[3] = *(_DWORD *)((char *)v33 + 3);
        v36 = v20;
      }
      v37 = 1;
      LOBYTE(v38) = 0;
      v42 = 0;
      v43 = 1;
      sub_22454BD5C((uint64_t)__dst, (uint64_t)&v49);
      *(_OWORD *)a5 = v49;
      *(_BYTE *)(a5 + 16) = 0;
      *(_BYTE *)(a5 + 112) = 0;
      if (v59)
      {
        *(_BYTE *)(a5 + 40) = 0;
        v23 = v52;
        if (v52)
        {
          *(_OWORD *)(a5 + 16) = __p;
          *(_QWORD *)(a5 + 32) = v51;
          v51 = 0;
          __p = 0uLL;
          *(_BYTE *)(a5 + 40) = 1;
        }
        *(_BYTE *)(a5 + 48) = 0;
        *(_BYTE *)(a5 + 104) = 0;
        if (v58)
        {
          v24 = v55;
          *(_QWORD *)(a5 + 64) = v54;
          *(_OWORD *)(a5 + 48) = v53;
          v53 = 0uLL;
          *(_QWORD *)(a5 + 72) = v24;
          *(_OWORD *)(a5 + 80) = v56;
          *(_QWORD *)(a5 + 96) = v57;
          v54 = 0;
          v56 = 0uLL;
          v57 = 0;
          *(_BYTE *)(a5 + 104) = 1;
        }
        *(_BYTE *)(a5 + 112) = 1;
        *(_BYTE *)(a5 + 120) = 0;
        if (v23 && SHIBYTE(v51) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a5 + 120) = 0;
      }
      if (v43)
      {
        if (v42)
        {
          if (v41 < 0)
            operator delete(v40);
          if (v39 < 0)
            operator delete(v38);
        }
        if (v37 && v36 < 0)
          operator delete(__dst[0]);
      }
      if (v20 < 0)
      {
        operator delete(v19);
        if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_50:
          if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            return;
          goto LABEL_54;
        }
      }
      else if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_50;
      }
      operator delete(v32.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_54:
      operator delete(v31.__r_.__value_.__l.__data_);
      return;
  }
}

void sub_224160B6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  void *v46;

  operator delete(v46);
  if (a21 < 0)
  {
    operator delete(__p);
    if (a15 < 0)
    {
LABEL_5:
      operator delete(a10);
      _Unwind_Resume(a1);
    }
  }
  else if (a15 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_224160DA0(int a1, uint64_t a2, uint64_t a3)
{
  int v4;
  _QWORD v5[2];

  v5[0] = a2;
  v5[1] = a3;
  v4 = a1;
  return sub_224160DE4("Failure during ", (uint64_t)v5, (uint64_t)" from stream with file format ", &v4, (uint64_t)": ");
}

uint64_t sub_224160DE4(char *__s, uint64_t a2, uint64_t a3, int *a4, uint64_t a5)
{
  uint64_t result;
  char v10;
  char v11;
  _DWORD v12[6];
  int v13;
  _QWORD **v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v13 = 0;
  sub_223894774(v12, __s);
  sub_223663638((uint64_t)&v11, (uint64_t)v12, a2);
  v14 = (_QWORD **)v12;
  v15 = a3;
  v16 = v12;
  v17 = a3;
  v18 = a3;
  if (v13 == -1)
    sub_22316DD70();
  v19 = &v14;
  ((void (*)(_QWORD **, _DWORD *))off_24EC6D4E0[v13])(&v19, v12);
  sub_22415D428((uint64_t)&v10, (uint64_t)v12, a4);
  v14 = (_QWORD **)v12;
  v15 = a5;
  v16 = v12;
  v17 = a5;
  v18 = a5;
  if (v13 == -1)
    sub_22316DD70();
  v19 = &v14;
  ((void (*)(_QWORD **, _DWORD *))off_24EC6D4F8[v13])(&v19, v12);
  if (v13 == -1)
    sub_22316DD70();
  v14 = &v19;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24EC6D4C8[v13])(&v14, v12);
  if (v13 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24EC6D4B0[v13])(&v14, v12);
  return result;
}

void sub_224160F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_224160F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_224160F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_224160F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_224160F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_224160FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_224160FB8(_DWORD *a1@<X0>, char *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  void *v9[2];
  uint64_t v10;
  void *__dst[2];
  uint64_t v12;
  char v13;
  void *v14;
  char v15;
  void *__p;
  char v17;
  char v18;
  char v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  unsigned __int8 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  _DWORD v32[6];
  int v33;
  _QWORD **v34;
  const char *v35;
  _DWORD *v36;
  const char *v37;
  const char *v38;
  _QWORD *v39;

  switch(a3)
  {
    case 0:
      v8 = 0;
      v33 = 0;
      sub_2231A0D14(v32, "Format ");
      sub_22415D428((uint64_t)&v31, (uint64_t)v32, &v8);
      v34 = (_QWORD **)v32;
      v35 = " invalid. ";
      v36 = v32;
      v37 = " invalid. ";
      v38 = " invalid. ";
      if (v33 == -1)
        sub_22316DD70();
      v39 = &v34;
      ((void (*)(_QWORD **, _DWORD *))off_24EC6D510[v33])(&v39, v32);
      v34 = (_QWORD **)v32;
      v35 = "Must choose format to save.";
      v36 = v32;
      v37 = "Must choose format to save.";
      v38 = "Must choose format to save.";
      if (v33 == -1)
        sub_22316DD70();
      v39 = &v34;
      ((void (*)(_QWORD **, _DWORD *))off_24EC6D528[v33])(&v39, v32);
      if (v33 == -1)
        sub_22316DD70();
      v34 = &v39;
      ((void (*)(void **__return_ptr, _QWORD ***, _DWORD *))off_24EC6D4C8[v33])(v9, &v34, v32);
      if (v33 != -1)
        ((void (*)(_QWORD ***, _DWORD *))off_24EC6D4B0[v33])(&v34, v32);
      if (SHIBYTE(v10) < 0)
      {
        sub_223197FA4(__dst, v9[0], (unint64_t)v9[1]);
      }
      else
      {
        *(_OWORD *)__dst = *(_OWORD *)v9;
        v12 = v10;
      }
      v13 = 1;
      LOBYTE(v14) = 0;
      v18 = 0;
      v19 = 1;
      sub_22454BC28((uint64_t)__dst, (uint64_t)&v20);
      *(_OWORD *)a4 = v20;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v30)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v6 = v23;
        if (v23)
        {
          *(_OWORD *)(a4 + 16) = v21;
          *(_QWORD *)(a4 + 32) = v22;
          v22 = 0;
          v21 = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v29)
        {
          v7 = v26;
          *(_QWORD *)(a4 + 64) = v25;
          *(_OWORD *)(a4 + 48) = v24;
          v25 = 0;
          v24 = 0uLL;
          *(_QWORD *)(a4 + 72) = v7;
          *(_OWORD *)(a4 + 80) = v27;
          *(_QWORD *)(a4 + 96) = v28;
          v27 = 0uLL;
          v28 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v6 && SHIBYTE(v22) < 0)
          operator delete((void *)v21);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (v19)
      {
        if (v18)
        {
          if (v17 < 0)
            operator delete(__p);
          if (v15 < 0)
            operator delete(v14);
        }
        if (v13 && SHIBYTE(v12) < 0)
          operator delete(__dst[0]);
      }
      if (SHIBYTE(v10) < 0)
        operator delete(v9[0]);
      return;
    case 1:
    case 2:
      sub_2241642EC(a1, a2, 1, a3, a4);
      return;
    case 3:
      v5 = 3;
      goto LABEL_4;
    case 4:
      v5 = 4;
      goto LABEL_4;
    case 5:
      v5 = 5;
LABEL_4:
      sub_22415C9AC(a2, (uint64_t)a1, v5, a4);
      return;
    default:
      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/ImageIO/src/ImageIO.cpp", 204, (uint64_t)"", 0, (uint64_t)"should not be reached", 21, (void (*)(void **))sub_22457406C);
      abort();
  }
}

void sub_224161348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_224161378(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22319B964(v1 - 112);
  _Unwind_Resume(a1);
}

void sub_22416138C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22319B964(v1 - 112);
  _Unwind_Resume(a1);
}

void sub_2241613A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22319B964(v1 - 112);
  _Unwind_Resume(a1);
}

void sub_2241613B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22319B964(v1 - 112);
  _Unwind_Resume(a1);
}

void sub_2241613C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22319B964(v1 - 112);
  _Unwind_Resume(a1);
}

_DWORD *sub_2241613DC(_DWORD ***a1)
{
  return sub_2232CFAFC(**a1, (char *)(*a1)[1]);
}

void sub_2241613E8(uint64_t a1, uint64_t a2)
{
  sub_2241613F8((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

void sub_2241613F8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24EC6D4B0[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_22319BD1C((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_2241615AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_2241615F0(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_2241616E8((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_2241616E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_2241616E8(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_2241618E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319C040((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2241618F8(uint64_t a1@<X0>, _QWORD *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v4;
  char *v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  uint64_t v11;
  void *v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  void *v16;
  void *v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  std::string::size_type v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  void **v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  void *v40;
  void *v41;
  int v42;
  _BYTE *v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  std::string::size_type v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  int v58;
  std::string::size_type size;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int8x16_t *v72;
  __int128 v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  int v77;
  int v78;
  unint64_t v79;
  unint64_t v80;
  int8x16_t *v81;
  int8x16_t *v82;
  unint64_t v83;
  int8x16_t *v84;
  int8x16_t v85;
  unsigned int v86;
  uint64_t v87;
  int8x16_t *v88;
  __int128 v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  unsigned int v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  int8x16_t *v97;
  __int128 v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  int v102;
  uint64_t v103;
  std::string::size_type v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t v112;
  std::string::size_type v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t v121;
  std::string::size_type v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  int8x16_t *v132;
  __int128 v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  unsigned __int8 *v139;
  unsigned __int8 v140;
  unsigned __int8 v141;
  uint64_t v142;
  int v143;
  unint64_t v145;
  unint64_t v146;
  int64_t v147;
  std::string::size_type v148;
  size_t v149;
  std::string::size_type v150;
  std::string::size_type v151;
  std::string::size_type v152;
  unsigned __int8 *v153;
  _BYTE *v154;
  char v155;
  unint64_t v156;
  _OWORD *v157;
  __int128 *v158;
  unint64_t v159;
  __int128 v160;
  unsigned __int8 *v161;
  uint64_t *v162;
  unint64_t v163;
  uint64_t v164;
  std::string::size_type v165;
  unint64_t v166;
  int64_t v167;
  std::string::size_type v168;
  size_t v169;
  int64_t v170;
  std::string::size_type v171;
  unsigned __int8 *v172;
  _BYTE *v173;
  char v174;
  unsigned int v175;
  unint64_t v176;
  _OWORD *v177;
  __int128 *v178;
  unint64_t v179;
  __int128 v180;
  unsigned __int8 *v181;
  uint64_t *v182;
  unint64_t v183;
  uint64_t v184;
  void *v185;
  uint64_t v186;
  uint64_t v187;
  int8x16_t *v188;
  __int128 v189;
  unint64_t *v190;
  unint64_t v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  int8x16_t *v195;
  _QWORD *v196;
  uint64_t v197;
  int8x16_t *v198;
  unsigned int v199;
  unsigned int v200;
  unsigned int v201;
  void *v202;
  std::__shared_weak_count *v203;
  uint64_t v204;
  unint64_t *v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  int8x16_t *v209;
  __int128 v210;
  unint64_t *v211;
  unint64_t v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  int8x16_t *v216;
  uint64_t v217;
  int8x16_t *v218;
  unsigned int v219;
  void *v220;
  unint64_t *v221;
  unint64_t v222;
  int8x16_t *v223;
  unint64_t v224;
  int8x16_t *v225;
  unint64_t v226;
  int8x16_t v227;
  uint64_t v228;
  unint64_t *v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  _QWORD *v236;
  _QWORD *v237;
  _QWORD *exception;
  int8x16_t *v239;
  uint64_t v240;
  int8x16_t *v241;
  uint64_t v243;
  int8x16_t *v244;
  std::string v245;
  _BYTE v246[30];
  std::string v247;
  _BYTE v248[32];
  char v249;
  void *v250;
  char v251;
  char v252;
  char v253;
  char v254;
  void *v255[2];
  unsigned __int8 v256;
  _DWORD v257[2];
  void *v258[2];
  _BYTE v259[7];
  char v260;
  char v261;
  void *v262;
  char v263;
  void *v264;
  char v265;
  char v266;
  char v267;
  void *__dst[2];
  _BYTE v269[7];
  char v270;
  char v271;
  void *v272;
  char v273;
  void *__p;
  char v275;
  char v276;
  char v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  char v281;
  char v282;
  void *v283;
  char v284;
  void *v285;
  char v286;
  char v287;
  char v288;
  char v289;
  unsigned int v290;
  char v291;
  char *v292;
  std::string v293;
  int8x16_t *v294;
  uint64_t v295;
  unsigned int v296;
  unsigned int v297;
  unsigned int v298;
  unsigned int v299;
  uint64_t v300;
  char v301;
  char v302;
  std::string v303;
  _BYTE v304[24];
  unsigned int v305;
  __int128 v306;
  __int128 v307;
  uint64_t v308;
  unsigned __int8 v309;
  __int128 v310;
  uint64_t v311;
  uint64_t v312;
  __int128 v313;
  uint64_t v314;
  char v315;
  char v316;
  uint64_t v317;

  v4 = a3;
  v317 = *MEMORY[0x24BDAC8D0];
  v290 = a3;
  sub_224163BA8((uint64_t)&v279, a2);
  if (!v289)
  {
    v306 = v279;
    v9 = sub_22319FFBC(&v307, &v280);
    *(_OWORD *)a4 = v306;
    *(_BYTE *)(a4 + 16) = 0;
    *(_BYTE *)(a4 + 112) = 0;
    if (v316)
    {
      *(_BYTE *)(a4 + 40) = 0;
      v10 = v309;
      if (v309)
      {
        *(_OWORD *)(a4 + 16) = *(_OWORD *)v9;
        *(_QWORD *)(a4 + 32) = *((_QWORD *)v9 + 2);
        *((_QWORD *)v9 + 1) = 0;
        *((_QWORD *)v9 + 2) = 0;
        *(_QWORD *)v9 = 0;
        *(_BYTE *)(a4 + 40) = 1;
      }
      *(_BYTE *)(a4 + 48) = 0;
      *(_BYTE *)(a4 + 104) = 0;
      if (v315)
      {
        v11 = v312;
        *(_QWORD *)(a4 + 64) = v311;
        *(_OWORD *)(a4 + 48) = v310;
        v310 = 0uLL;
        *(_QWORD *)(a4 + 72) = v11;
        *(_OWORD *)(a4 + 80) = v313;
        *(_QWORD *)(a4 + 96) = v314;
        v311 = 0;
        v313 = 0uLL;
        v314 = 0;
        *(_BYTE *)(a4 + 104) = 1;
      }
      *(_BYTE *)(a4 + 112) = 1;
      *(_BYTE *)(a4 + 120) = 0;
      if (v10 && SHIBYTE(v308) < 0)
      {
        v12 = (void *)v307;
LABEL_487:
        operator delete(v12);
        goto LABEL_488;
      }
    }
    else
    {
      *(_BYTE *)(a4 + 120) = 0;
    }
    goto LABEL_488;
  }
  v278 = v279;
  v7 = &jpt_22416B320;
  v8 = 0;
  switch(v4)
  {
    case 0u:
      v4 = DWORD1(v278);
      goto LABEL_23;
    case 1u:
      goto LABEL_15;
    case 2u:
      v8 = 1;
      goto LABEL_15;
    case 0x15u:
      v8 = 2;
LABEL_15:
      v7 = (char *)&unk_22469CC8C + 4 * v8;
      break;
    default:
      break;
  }
  if (v7 - (char *)&unk_22469CC8C != 12)
  {
    if (DWORD1(v278) == v4)
    {
LABEL_23:
      LODWORD(v306) = v4;
      v19 = *(_QWORD *)(a1 + 24);
      if (!v19)
        sub_223198474();
      (*(void (**)(std::string *__return_ptr, uint64_t, char *, __int128 *))(*(_QWORD *)v19 + 48))(&v247, v19, (char *)&v278 + 8, &v306);
      if (!v254)
      {
        v306 = *(_OWORD *)&v247.__r_.__value_.__l.__data_;
        v43 = sub_22319FFBC(&v307, (__int128 *)&v247.__r_.__value_.__r.__words[2]);
        *(_OWORD *)a4 = v306;
        *(_BYTE *)(a4 + 16) = 0;
        *(_BYTE *)(a4 + 112) = 0;
        if (v316)
        {
          *(_BYTE *)(a4 + 40) = 0;
          v44 = v309;
          if (v309)
          {
            *(_OWORD *)(a4 + 16) = *(_OWORD *)v43;
            *(_QWORD *)(a4 + 32) = *((_QWORD *)v43 + 2);
            *((_QWORD *)v43 + 1) = 0;
            *((_QWORD *)v43 + 2) = 0;
            *(_QWORD *)v43 = 0;
            *(_BYTE *)(a4 + 40) = 1;
          }
          *(_BYTE *)(a4 + 48) = 0;
          *(_BYTE *)(a4 + 104) = 0;
          if (v315)
          {
            v45 = v312;
            *(_QWORD *)(a4 + 64) = v311;
            *(_OWORD *)(a4 + 48) = v310;
            v310 = 0uLL;
            *(_QWORD *)(a4 + 72) = v45;
            *(_OWORD *)(a4 + 80) = v313;
            *(_QWORD *)(a4 + 96) = v314;
            v311 = 0;
            v313 = 0uLL;
            v314 = 0;
            *(_BYTE *)(a4 + 104) = 1;
          }
          *(_BYTE *)(a4 + 112) = 1;
          *(_BYTE *)(a4 + 120) = 0;
          if (v44 && SHIBYTE(v308) < 0)
            operator delete((void *)v307);
        }
        else
        {
          *(_BYTE *)(a4 + 120) = 0;
        }
LABEL_472:
        if (v254)
        {
          v233 = (std::__shared_weak_count *)v247.__r_.__value_.__r.__words[2];
          if (v247.__r_.__value_.__r.__words[2])
          {
            v234 = (unint64_t *)(v247.__r_.__value_.__r.__words[2] + 8);
            do
              v235 = __ldaxr(v234);
            while (__stlxr(v235 - 1, v234));
            if (!v235)
            {
              ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
              std::__shared_weak_count::__release_weak(v233);
            }
          }
        }
        else if (v253)
        {
          if (v252)
          {
            if (v251 < 0)
              operator delete(v250);
            if (v249 < 0)
              operator delete(*(void **)&v248[24]);
          }
          if (v248[16] && (v248[15] & 0x80000000) != 0)
          {
            v12 = (void *)v247.__r_.__value_.__r.__words[2];
            goto LABEL_487;
          }
        }
        goto LABEL_488;
      }
      v245.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC20EB8;
      *(_OWORD *)&v245.__r_.__value_.__r.__words[1] = *(_OWORD *)&v247.__r_.__value_.__r.__words[1];
      *(_OWORD *)&v247.__r_.__value_.__r.__words[1] = 0uLL;
      *(_OWORD *)&v246[14] = *(_OWORD *)&v248[14];
      *(_OWORD *)v246 = *(_OWORD *)v248;
      v20 = *(_QWORD *)&v248[22] >> 16;
      if (v20 != DWORD1(v278))
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/ImageIO/src/Pnm.cpp", 274, (uint64_t)"image_dynamic.RuntimeFormat() == color_format", 45, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_505;
        }
        v20 = DWORD1(v278);
      }
      if (v20 == 21)
      {
        v58 = v278;
        v293.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC232F0;
        sub_2232972C4((uint64_t)&v245, (uint64_t)&v293.__r_.__value_.__l.__size_);
        if (v58)
        {
          if (((v300 * (unint64_t)v298) & 0x8000000000000000) != 0)
          {
            exception = __cxa_allocate_exception(8uLL);
            *exception = &off_24EC7AC38;
            __cxa_throw(exception, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
          }
          size = v293.__r_.__value_.__l.__size_;
          if (!v293.__r_.__value_.__l.__size_)
            goto LABEL_187;
          v60 = (std::__shared_weak_count *)v293.__r_.__value_.__r.__words[2];
          if (v293.__r_.__value_.__r.__words[2])
          {
            v61 = (unint64_t *)(v293.__r_.__value_.__r.__words[2] + 8);
            do
              v62 = __ldxr(v61);
            while (__stxr(v62 + 1, v61));
            do
              v63 = __ldaxr(v61);
            while (__stlxr(v63 - 1, v61));
            if (!v63)
            {
              ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
              std::__shared_weak_count::__release_weak(v60);
            }
            v64 = (std::__shared_weak_count *)v293.__r_.__value_.__r.__words[2];
            size = v293.__r_.__value_.__l.__size_;
            if (v293.__r_.__value_.__r.__words[2])
            {
              v65 = (unint64_t *)(v293.__r_.__value_.__r.__words[2] + 8);
              do
                v66 = __ldxr(v65);
              while (__stxr(v66 + 1, v65));
              do
                v67 = __ldaxr(v65);
              while (__stlxr(v67 - 1, v65));
              if (!v67)
              {
                ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                std::__shared_weak_count::__release_weak(v64);
              }
            }
          }
          if (v302)
            (*(void (**)(__int128 *__return_ptr, std::string::size_type, uint64_t))(*(_QWORD *)size + 96))(&v306, size, 1);
          else
LABEL_187:
            *(_QWORD *)&v306 = 0;
          if ((_DWORD)v295)
          {
            if (HIDWORD(v295))
            {
              v86 = v296;
              if (v296)
              {
                v87 = v299;
                v88 = v294;
                if (v301 && v294)
                {
                  v89 = *(_OWORD *)&v293.__r_.__value_.__r.__words[1];
                  if (v293.__r_.__value_.__r.__words[2])
                  {
                    v90 = (unint64_t *)(v293.__r_.__value_.__r.__words[2] + 8);
                    do
                      v91 = __ldxr(v90);
                    while (__stxr(v91 + 1, v90));
                    do
                      v92 = __ldaxr(v90);
                    while (__stlxr(v92 - 1, v90));
                    if (!v92)
                    {
                      (*(void (**)(_QWORD))(**((_QWORD **)&v89 + 1) + 16))(*((_QWORD *)&v89 + 1));
                      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v89 + 1));
                    }
                  }
                  (*(void (**)(_QWORD, uint64_t, const char *))(*(_QWORD *)v89 + 88))(v89, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
                  v88 = v294;
                }
                v93 = v86 - 1;
                if (v86 != 1)
                {
                  do
                  {
                    std::istream::read();
                    v88 = (int8x16_t *)((char *)v88 + v87);
                    --v93;
                  }
                  while (v93);
                }
                std::istream::read();
              }
            }
          }
          v94 = v306;
          *(_QWORD *)&v306 = 0;
          if (v94)
            (*(void (**)(uint64_t))(*(_QWORD *)v94 + 8))(v94);
        }
        else
        {
          memset(&v303, 0, sizeof(v303));
          v113 = v293.__r_.__value_.__l.__size_;
          if (!v293.__r_.__value_.__l.__size_)
            goto LABEL_373;
          v114 = (std::__shared_weak_count *)v293.__r_.__value_.__r.__words[2];
          if (v293.__r_.__value_.__r.__words[2])
          {
            v115 = (unint64_t *)(v293.__r_.__value_.__r.__words[2] + 8);
            do
              v116 = __ldxr(v115);
            while (__stxr(v116 + 1, v115));
            do
              v117 = __ldaxr(v115);
            while (__stlxr(v117 - 1, v115));
            if (!v117)
            {
              ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
              std::__shared_weak_count::__release_weak(v114);
            }
            v118 = (std::__shared_weak_count *)v293.__r_.__value_.__r.__words[2];
            v113 = v293.__r_.__value_.__l.__size_;
            if (v293.__r_.__value_.__r.__words[2])
            {
              v119 = (unint64_t *)(v293.__r_.__value_.__r.__words[2] + 8);
              do
                v120 = __ldxr(v119);
              while (__stxr(v120 + 1, v119));
              do
                v121 = __ldaxr(v119);
              while (__stlxr(v121 - 1, v119));
              if (!v121)
              {
                ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                std::__shared_weak_count::__release_weak(v118);
              }
            }
          }
          if (v302)
            (*(void (**)(void **__return_ptr, std::string::size_type, uint64_t))(*(_QWORD *)v113 + 96))(v255, v113, 1);
          else
LABEL_373:
            v255[0] = 0;
          v186 = v299;
          v187 = v300;
          v188 = v294;
          if (v301 && v294)
          {
            v189 = *(_OWORD *)&v293.__r_.__value_.__r.__words[1];
            if (v293.__r_.__value_.__r.__words[2])
            {
              v190 = (unint64_t *)(v293.__r_.__value_.__r.__words[2] + 8);
              do
                v191 = __ldxr(v190);
              while (__stxr(v191 + 1, v190));
              do
                v192 = __ldaxr(v190);
              while (__stlxr(v192 - 1, v190));
              if (!v192)
              {
                (*(void (**)(_QWORD))(**((_QWORD **)&v189 + 1) + 16))(*((_QWORD *)&v189 + 1));
                std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v189 + 1));
              }
            }
            (*(void (**)(_QWORD, uint64_t, const char *))(*(_QWORD *)v189 + 88))(v189, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
            v188 = v294;
          }
          v193 = (v186 * HIDWORD(v187));
          if ((_DWORD)v193)
          {
            v194 = (3 * v187);
            if (3 * (_DWORD)v187)
            {
              v195 = (int8x16_t *)((char *)v188 + v193);
              v196 = a2 + 4;
              v197 = MEMORY[0x24BDAC740];
              do
              {
                v198 = v188;
                do
                {
                  v198->i8[0] = sub_224167490((uint64_t)&v303, a2);
                  std::istream::tellg();
                  while ((*((_BYTE *)v196 + *(_QWORD *)(*a2 - 24)) & 2) == 0)
                  {
                    v199 = std::istream::peek();
                    if (v199 <= 0x7F)
                    {
                      if ((*(_DWORD *)(v197 + 4 * v199 + 60) & 0x4000) == 0)
                        break;
                    }
                    else if (!__maskrune(v199, 0x4000uLL))
                    {
                      break;
                    }
                    std::istream::seekg();
                  }
                  std::istream::tellg();
                  v198->i8[1] = sub_224167490((uint64_t)&v303, a2);
                  std::istream::tellg();
                  while ((*((_BYTE *)v196 + *(_QWORD *)(*a2 - 24)) & 2) == 0)
                  {
                    v200 = std::istream::peek();
                    if (v200 <= 0x7F)
                    {
                      if ((*(_DWORD *)(v197 + 4 * v200 + 60) & 0x4000) == 0)
                        break;
                    }
                    else if (!__maskrune(v200, 0x4000uLL))
                    {
                      break;
                    }
                    std::istream::seekg();
                  }
                  std::istream::tellg();
                  v198->i8[2] = sub_224167490((uint64_t)&v303, a2);
                  std::istream::tellg();
                  while ((*((_BYTE *)v196 + *(_QWORD *)(*a2 - 24)) & 2) == 0)
                  {
                    v201 = std::istream::peek();
                    if (v201 <= 0x7F)
                    {
                      if ((*(_DWORD *)(v197 + 4 * v201 + 60) & 0x4000) == 0)
                        break;
                    }
                    else if (!__maskrune(v201, 0x4000uLL))
                    {
                      break;
                    }
                    std::istream::seekg();
                  }
                  std::istream::tellg();
                  v198 = (int8x16_t *)((char *)v198 + 3);
                }
                while (v198 != (int8x16_t *)&v188->i8[v194]);
                v188 = (int8x16_t *)((char *)v188 + v186);
              }
              while (v188 != v195);
            }
          }
          v202 = v255[0];
          v255[0] = 0;
          if (v202)
            (*(void (**)(void *))(*(_QWORD *)v202 + 8))(v202);
          if (v303.__r_.__value_.__r.__words[0])
          {
            v303.__r_.__value_.__l.__size_ = v303.__r_.__value_.__r.__words[0];
            operator delete(v303.__r_.__value_.__l.__data_);
          }
        }
        v203 = (std::__shared_weak_count *)v293.__r_.__value_.__r.__words[2];
        v204 = a4;
        if (!v293.__r_.__value_.__r.__words[2])
          goto LABEL_467;
        v205 = (unint64_t *)(v293.__r_.__value_.__r.__words[2] + 8);
        do
          v206 = __ldaxr(v205);
        while (__stlxr(v206 - 1, v205));
        goto LABEL_465;
      }
      if (v20 != 2)
      {
        if (v20 == 1)
        {
          v21 = v278;
          v293.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC22138;
          sub_2232966C4((uint64_t)&v245, (uint64_t)&v293.__r_.__value_.__l.__size_);
          if (v21)
          {
            if (((v295 * (unint64_t)v296) & 0x8000000000000000) != 0)
            {
              v236 = __cxa_allocate_exception(8uLL);
              *v236 = &off_24EC7AC38;
              __cxa_throw(v236, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
            }
            v22 = v293.__r_.__value_.__l.__size_;
            if (!v293.__r_.__value_.__l.__size_)
              goto LABEL_205;
            v23 = (std::__shared_weak_count *)v293.__r_.__value_.__r.__words[2];
            if (v293.__r_.__value_.__r.__words[2])
            {
              v24 = (unint64_t *)(v293.__r_.__value_.__r.__words[2] + 8);
              do
                v25 = __ldxr(v24);
              while (__stxr(v25 + 1, v24));
              do
                v26 = __ldaxr(v24);
              while (__stlxr(v26 - 1, v24));
              if (!v26)
              {
                ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
                std::__shared_weak_count::__release_weak(v23);
              }
              v27 = (std::__shared_weak_count *)v293.__r_.__value_.__r.__words[2];
              v22 = v293.__r_.__value_.__l.__size_;
              if (v293.__r_.__value_.__r.__words[2])
              {
                v28 = (unint64_t *)(v293.__r_.__value_.__r.__words[2] + 8);
                do
                  v29 = __ldxr(v28);
                while (__stxr(v29 + 1, v28));
                do
                  v30 = __ldaxr(v28);
                while (__stlxr(v30 - 1, v28));
                if (!v30)
                {
                  ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
                  std::__shared_weak_count::__release_weak(v27);
                }
              }
            }
            if (BYTE1(v298))
              (*(void (**)(__int128 *__return_ptr, std::string::size_type, uint64_t))(*(_QWORD *)v22 + 96))(&v306, v22, 1);
            else
LABEL_205:
              *(_QWORD *)&v306 = 0;
            if ((_DWORD)v295)
            {
              v95 = HIDWORD(v295);
              if (HIDWORD(v295))
              {
                v96 = v297;
                v97 = v294;
                if ((_BYTE)v298 && v294)
                {
                  v98 = *(_OWORD *)&v293.__r_.__value_.__r.__words[1];
                  if (v293.__r_.__value_.__r.__words[2])
                  {
                    v99 = (unint64_t *)(v293.__r_.__value_.__r.__words[2] + 8);
                    do
                      v100 = __ldxr(v99);
                    while (__stxr(v100 + 1, v99));
                    do
                      v101 = __ldaxr(v99);
                    while (__stlxr(v101 - 1, v99));
                    if (!v101)
                    {
                      (*(void (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1));
                      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v98 + 1));
                    }
                  }
                  (*(void (**)(_QWORD, uint64_t, const char *))(*(_QWORD *)v98 + 88))(v98, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
                  v97 = v294;
                }
                v102 = v95 - 1;
                if (v95 != 1)
                {
                  do
                  {
                    std::istream::read();
                    v97 = (int8x16_t *)((char *)v97 + v96);
                    --v102;
                  }
                  while (v102);
                }
                std::istream::read();
              }
            }
            v103 = v306;
            *(_QWORD *)&v306 = 0;
            if (v103)
              (*(void (**)(uint64_t))(*(_QWORD *)v103 + 8))(v103);
          }
          else
          {
            memset(&v303, 0, sizeof(v303));
            v122 = v293.__r_.__value_.__l.__size_;
            if (!v293.__r_.__value_.__l.__size_)
              goto LABEL_418;
            v123 = (std::__shared_weak_count *)v293.__r_.__value_.__r.__words[2];
            if (v293.__r_.__value_.__r.__words[2])
            {
              v124 = (unint64_t *)(v293.__r_.__value_.__r.__words[2] + 8);
              do
                v125 = __ldxr(v124);
              while (__stxr(v125 + 1, v124));
              do
                v126 = __ldaxr(v124);
              while (__stlxr(v126 - 1, v124));
              if (!v126)
              {
                ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
                std::__shared_weak_count::__release_weak(v123);
              }
              v127 = (std::__shared_weak_count *)v293.__r_.__value_.__r.__words[2];
              v122 = v293.__r_.__value_.__l.__size_;
              if (v293.__r_.__value_.__r.__words[2])
              {
                v128 = (unint64_t *)(v293.__r_.__value_.__r.__words[2] + 8);
                do
                  v129 = __ldxr(v128);
                while (__stxr(v129 + 1, v128));
                do
                  v130 = __ldaxr(v128);
                while (__stlxr(v130 - 1, v128));
                if (!v130)
                {
                  ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
                  std::__shared_weak_count::__release_weak(v127);
                }
              }
            }
            if (BYTE1(v298))
              (*(void (**)(void **__return_ptr, std::string::size_type, uint64_t))(*(_QWORD *)v122 + 96))(v255, v122, 1);
            else
LABEL_418:
              v255[0] = 0;
            v207 = v297;
            v208 = v295;
            v209 = v294;
            if ((_BYTE)v298 && v294)
            {
              v210 = *(_OWORD *)&v293.__r_.__value_.__r.__words[1];
              if (v293.__r_.__value_.__r.__words[2])
              {
                v211 = (unint64_t *)(v293.__r_.__value_.__r.__words[2] + 8);
                do
                  v212 = __ldxr(v211);
                while (__stxr(v212 + 1, v211));
                do
                  v213 = __ldaxr(v211);
                while (__stlxr(v213 - 1, v211));
                if (!v213)
                {
                  (*(void (**)(_QWORD))(**((_QWORD **)&v210 + 1) + 16))(*((_QWORD *)&v210 + 1));
                  std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v210 + 1));
                }
              }
              (*(void (**)(_QWORD, uint64_t, const char *))(*(_QWORD *)v210 + 88))(v210, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
              v209 = v294;
            }
            v214 = (v207 * HIDWORD(v208));
            if ((_DWORD)v214)
            {
              v215 = v208;
              if ((_DWORD)v208)
              {
                v216 = (int8x16_t *)((char *)v209 + v214);
                v217 = MEMORY[0x24BDAC740];
                do
                {
                  v218 = v209;
                  do
                  {
                    v218->i8[0] = sub_224167490((uint64_t)&v303, a2);
                    std::istream::tellg();
                    while ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 2) == 0)
                    {
                      v219 = std::istream::peek();
                      if (v219 <= 0x7F)
                      {
                        if ((*(_DWORD *)(v217 + 4 * v219 + 60) & 0x4000) == 0)
                          break;
                      }
                      else if (!__maskrune(v219, 0x4000uLL))
                      {
                        break;
                      }
                      std::istream::seekg();
                    }
                    std::istream::tellg();
                    v218 = (int8x16_t *)((char *)v218 + 1);
                  }
                  while (v218 != (int8x16_t *)&v209->i8[v215]);
                  v209 = (int8x16_t *)((char *)v209 + v207);
                }
                while (v209 != v216);
              }
            }
            v220 = v255[0];
            v255[0] = 0;
            if (v220)
              (*(void (**)(void *))(*(_QWORD *)v220 + 8))(v220);
            if (v303.__r_.__value_.__r.__words[0])
            {
              v303.__r_.__value_.__l.__size_ = v303.__r_.__value_.__r.__words[0];
              operator delete(v303.__r_.__value_.__l.__data_);
            }
          }
          v203 = (std::__shared_weak_count *)v293.__r_.__value_.__r.__words[2];
          v204 = a4;
          if (!v293.__r_.__value_.__r.__words[2])
            goto LABEL_467;
          v221 = (unint64_t *)(v293.__r_.__value_.__r.__words[2] + 8);
          do
            v206 = __ldaxr(v221);
          while (__stlxr(v206 - 1, v221));
          goto LABEL_465;
        }
        sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/ImageIO/src/Pnm.cpp", 283, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_22457406C);
LABEL_505:
        abort();
      }
      v48 = v278;
      v293.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC22278;
      sub_224167894((uint64_t)&v245, (uint64_t)&v293.__r_.__value_.__l.__size_);
      if (v48)
      {
        v243 = v295;
        if (((2 * v296 * (unint64_t)v295) & 0x8000000000000000) != 0)
        {
          v237 = __cxa_allocate_exception(8uLL);
          *v237 = &off_24EC7AC38;
          __cxa_throw(v237, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
        }
        v49 = v293.__r_.__value_.__l.__size_;
        if (!v293.__r_.__value_.__l.__size_)
          goto LABEL_163;
        v50 = (std::__shared_weak_count *)v293.__r_.__value_.__r.__words[2];
        if (v293.__r_.__value_.__r.__words[2])
        {
          v51 = (unint64_t *)(v293.__r_.__value_.__r.__words[2] + 8);
          do
            v52 = __ldxr(v51);
          while (__stxr(v52 + 1, v51));
          do
            v53 = __ldaxr(v51);
          while (__stlxr(v53 - 1, v51));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
          v54 = (std::__shared_weak_count *)v293.__r_.__value_.__r.__words[2];
          v49 = v293.__r_.__value_.__l.__size_;
          if (v293.__r_.__value_.__r.__words[2])
          {
            v55 = (unint64_t *)(v293.__r_.__value_.__r.__words[2] + 8);
            do
              v56 = __ldxr(v55);
            while (__stxr(v56 + 1, v55));
            do
              v57 = __ldaxr(v55);
            while (__stlxr(v57 - 1, v55));
            if (!v57)
            {
              ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
              std::__shared_weak_count::__release_weak(v54);
            }
          }
        }
        if (BYTE1(v298))
          (*(void (**)(__int128 *__return_ptr, std::string::size_type, uint64_t))(*(_QWORD *)v49 + 96))(&v306, v49, 1);
        else
LABEL_163:
          *(_QWORD *)&v306 = 0;
        if (!(_DWORD)v295)
          goto LABEL_460;
        v70 = HIDWORD(v295);
        if (!HIDWORD(v295))
          goto LABEL_460;
        v71 = v297;
        v72 = v294;
        if ((_BYTE)v298 && v294)
        {
          v73 = *(_OWORD *)&v293.__r_.__value_.__r.__words[1];
          if (v293.__r_.__value_.__r.__words[2])
          {
            v74 = (unint64_t *)(v293.__r_.__value_.__r.__words[2] + 8);
            do
              v75 = __ldxr(v74);
            while (__stxr(v75 + 1, v74));
            do
              v76 = __ldaxr(v74);
            while (__stlxr(v76 - 1, v74));
            if (!v76)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v73 + 1) + 16))(*((_QWORD *)&v73 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v73 + 1));
            }
          }
          (*(void (**)(_QWORD, uint64_t, const char *))(*(_QWORD *)v73 + 88))(v73, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
          v72 = v294;
        }
        v77 = v70 - 1;
        if (v70 != 1)
        {
          if ((_DWORD)v243)
          {
            v78 = 0;
            v79 = (v243 - 1) & 0x7FFFFFFFFFFFFFFFLL;
            v80 = (v79 + 1) & 0xFFFFFFFFFFFFFFF0;
            v81 = v72 + 1;
            while (1)
            {
              std::istream::read();
              if (!v72
                && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
              {
                break;
              }
              v82 = v72;
              if (v79 < 0xF)
                goto LABEL_511;
              v82 = (int8x16_t *)((char *)v72 + 2 * v80);
              v83 = (v79 + 1) & 0xFFFFFFFFFFFFFFF0;
              v84 = v81;
              do
              {
                v85 = vrev16q_s8(*v84);
                v84[-1] = vrev16q_s8(v84[-1]);
                *v84 = v85;
                v84 += 2;
                v83 -= 16;
              }
              while (v83);
              if (v79 + 1 != v80)
              {
LABEL_511:
                do
                {
                  v82->i16[0] = bswap32(v82->u16[0]) >> 16;
                  v82 = (int8x16_t *)((char *)v82 + 2);
                }
                while (v82 != (int8x16_t *)((char *)v72 + 2 * v243));
              }
              v72 = (int8x16_t *)((char *)v72 + 2 * v71);
              ++v78;
              v81 = (int8x16_t *)((char *)v81 + 2 * v71);
              if (v78 == v77)
                goto LABEL_450;
            }
LABEL_453:
            abort();
          }
          do
          {
            std::istream::read();
            v72 = (int8x16_t *)((char *)v72 + 2 * v71);
            --v77;
          }
          while (v77);
        }
LABEL_450:
        std::istream::read();
        if (!(_DWORD)v243 || v72)
        {
          if (!(_DWORD)v243)
          {
LABEL_460:
            v228 = v306;
            *(_QWORD *)&v306 = 0;
            if (v228)
              (*(void (**)(uint64_t))(*(_QWORD *)v228 + 8))(v228);
LABEL_462:
            v203 = (std::__shared_weak_count *)v293.__r_.__value_.__r.__words[2];
            v204 = a4;
            if (!v293.__r_.__value_.__r.__words[2])
            {
LABEL_467:
              *(_BYTE *)(v204 + 120) = 1;
              v230 = (std::__shared_weak_count *)v245.__r_.__value_.__r.__words[2];
              if (v245.__r_.__value_.__r.__words[2])
              {
                v231 = (unint64_t *)(v245.__r_.__value_.__r.__words[2] + 8);
                do
                  v232 = __ldaxr(v231);
                while (__stlxr(v232 - 1, v231));
                if (!v232)
                {
                  ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
                  std::__shared_weak_count::__release_weak(v230);
                }
              }
              goto LABEL_472;
            }
            v229 = (unint64_t *)(v293.__r_.__value_.__r.__words[2] + 8);
            do
              v206 = __ldaxr(v229);
            while (__stlxr(v206 - 1, v229));
LABEL_465:
            if (!v206)
            {
              ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
              std::__shared_weak_count::__release_weak(v203);
              v204 = a4;
            }
            goto LABEL_467;
          }
        }
        else if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_453;
        }
        v222 = (v243 - 1) & 0x7FFFFFFFFFFFFFFFLL;
        v223 = v72;
        if (v222 < 0xF)
          goto LABEL_512;
        v224 = v222 + 1;
        v223 = (int8x16_t *)((char *)v72 + 2 * (v224 & 0xFFFFFFFFFFFFFFF0));
        v225 = v72 + 1;
        v226 = v224 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v227 = vrev16q_s8(*v225);
          v225[-1] = vrev16q_s8(v225[-1]);
          *v225 = v227;
          v225 += 2;
          v226 -= 16;
        }
        while (v226);
        if (v224 != (v224 & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_512:
          do
          {
            v223->i16[0] = bswap32(v223->u16[0]) >> 16;
            v223 = (int8x16_t *)((char *)v223 + 2);
          }
          while (v223 != (int8x16_t *)((char *)v72 + 2 * v243));
        }
        goto LABEL_460;
      }
      memset(&v303, 0, sizeof(v303));
      v104 = v293.__r_.__value_.__l.__size_;
      if (!v293.__r_.__value_.__l.__size_)
        goto LABEL_267;
      v105 = (std::__shared_weak_count *)v293.__r_.__value_.__r.__words[2];
      if (v293.__r_.__value_.__r.__words[2])
      {
        v106 = (unint64_t *)(v293.__r_.__value_.__r.__words[2] + 8);
        do
          v107 = __ldxr(v106);
        while (__stxr(v107 + 1, v106));
        do
          v108 = __ldaxr(v106);
        while (__stlxr(v108 - 1, v106));
        if (!v108)
        {
          ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
          std::__shared_weak_count::__release_weak(v105);
        }
        v109 = (std::__shared_weak_count *)v293.__r_.__value_.__r.__words[2];
        v104 = v293.__r_.__value_.__l.__size_;
        if (v293.__r_.__value_.__r.__words[2])
        {
          v110 = (unint64_t *)(v293.__r_.__value_.__r.__words[2] + 8);
          do
            v111 = __ldxr(v110);
          while (__stxr(v111 + 1, v110));
          do
            v112 = __ldaxr(v110);
          while (__stlxr(v112 - 1, v110));
          if (!v112)
          {
            ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
            std::__shared_weak_count::__release_weak(v109);
          }
        }
      }
      if (BYTE1(v298))
        (*(void (**)(void **__return_ptr, std::string::size_type, uint64_t))(*(_QWORD *)v104 + 96))(v255, v104, 1);
      else
LABEL_267:
        v255[0] = 0;
      v240 = v297;
      v131 = v295;
      v132 = v294;
      if ((_BYTE)v298 && v294)
      {
        v133 = *(_OWORD *)&v293.__r_.__value_.__r.__words[1];
        if (v293.__r_.__value_.__r.__words[2])
        {
          v134 = (unint64_t *)(v293.__r_.__value_.__r.__words[2] + 8);
          do
            v135 = __ldxr(v134);
          while (__stxr(v135 + 1, v134));
          do
            v136 = __ldaxr(v134);
          while (__stlxr(v136 - 1, v134));
          if (!v136)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v133 + 1) + 16))(*((_QWORD *)&v133 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v133 + 1));
          }
        }
        (*(void (**)(_QWORD, uint64_t, const char *))(*(_QWORD *)v133 + 88))(v133, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
        v132 = v294;
      }
      if (!((_DWORD)v240 * HIDWORD(v131)) || !(_DWORD)v131)
      {
LABEL_369:
        v185 = v255[0];
        v255[0] = 0;
        if (v185)
          (*(void (**)(void *))(*(_QWORD *)v185 + 8))(v185);
        if (v303.__r_.__value_.__r.__words[0])
          operator delete(v303.__r_.__value_.__l.__data_);
        goto LABEL_462;
      }
      v137 = a2 + 4;
      v138 = v303.__r_.__value_.__l.__size_;
      v139 = (unsigned __int8 *)v303.__r_.__value_.__r.__words[0];
      v239 = (int8x16_t *)((char *)v132 + 2 * (v240 * HIDWORD(v131)));
LABEL_281:
      v244 = (int8x16_t *)((char *)v132 + 2 * v131);
      v241 = v132;
      while (1)
      {
        if ((unsigned __int8 *)v138 != v139)
          v303.__r_.__value_.__l.__size_ = (std::string::size_type)v139;
        v140 = std::istream::peek();
        if ((*((_BYTE *)v137 + *(_QWORD *)(*a2 - 24)) & 2) == 0)
        {
          v141 = v140;
          while (1)
          {
            v142 = 0;
            strcpy((char *)&v306, "0123456789");
            BYTE7(v307) = 10;
            do
              v143 = *((unsigned __int8 *)&v306 + v142);
            while (v143 != v141 && v142++ != 9);
            if (v143 != v141)
              goto LABEL_329;
            if ((unint64_t)v139 >= v303.__r_.__value_.__r.__words[2])
              break;
            *v139++ = v141;
LABEL_313:
            v303.__r_.__value_.__l.__size_ = (std::string::size_type)v139;
            std::istream::seekg();
            v141 = std::istream::peek();
            if ((*((_BYTE *)v137 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
              goto LABEL_329;
          }
          v145 = v303.__r_.__value_.__r.__words[0];
          v146 = (unint64_t)&v139[-v303.__r_.__value_.__r.__words[0]];
          v147 = (int64_t)&v139[-v303.__r_.__value_.__r.__words[0] + 1];
          if (v147 < 0)
            goto LABEL_499;
          v148 = v303.__r_.__value_.__r.__words[2] - v303.__r_.__value_.__r.__words[0];
          if (2 * (v303.__r_.__value_.__r.__words[2] - v303.__r_.__value_.__r.__words[0]) > v147)
            v147 = 2 * v148;
          if (v148 >= 0x3FFFFFFFFFFFFFFFLL)
            v149 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v149 = v147;
          if (v149)
          {
            v150 = (std::string::size_type)operator new(v149);
            v151 = v150 + v146;
            *(_BYTE *)(v150 + v146) = v141;
            v152 = v150 + v146 + 1;
            if (v139 != (unsigned __int8 *)v145)
            {
LABEL_303:
              if (v146 < 8
                || v150 + v146 - 1 - (unint64_t)&v139[~v145] > v150 + v146 - 1
                || v145 > (unint64_t)(v139 - 1)
                || v145 - v150 < 0x20)
              {
                v153 = v139;
              }
              else if (v146 >= 0x20)
              {
                v156 = v146 & 0xFFFFFFFFFFFFFFE0;
                v157 = (_OWORD *)(v150 + v146 - 16);
                v158 = (__int128 *)(v139 - 16);
                v159 = v146 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v160 = *v158;
                  *(v157 - 1) = *(v158 - 1);
                  *v157 = v160;
                  v157 -= 2;
                  v158 -= 2;
                  v159 -= 32;
                }
                while (v159);
                if (v146 == v156)
                  goto LABEL_307;
                if ((v146 & 0x18) != 0)
                  goto LABEL_324;
                v151 -= v156;
                v153 = &v139[-v156];
              }
              else
              {
                v156 = 0;
LABEL_324:
                v153 = &v139[-(v146 & 0xFFFFFFFFFFFFFFF8)];
                v151 -= v146 & 0xFFFFFFFFFFFFFFF8;
                v161 = &v139[-v156 - v145 - 8 + v150];
                v162 = (uint64_t *)&v139[-v156 - 8];
                v163 = v156 - (v146 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  v164 = *v162--;
                  *(_QWORD *)v161 = v164;
                  v161 -= 8;
                  v163 += 8;
                }
                while (v163);
                if (v146 == (v146 & 0xFFFFFFFFFFFFFFF8))
                {
LABEL_307:
                  v139 = (unsigned __int8 *)v303.__r_.__value_.__r.__words[0];
                  v303.__r_.__value_.__r.__words[0] = v150;
                  v303.__r_.__value_.__l.__size_ = v152;
                  v303.__r_.__value_.__r.__words[2] = v150 + v149;
                  if (!v139)
                    goto LABEL_312;
LABEL_311:
                  operator delete(v139);
LABEL_312:
                  v139 = (unsigned __int8 *)v152;
                  goto LABEL_313;
                }
              }
              v154 = (_BYTE *)(v151 - 1);
              do
              {
                v155 = *--v153;
                *v154-- = v155;
              }
              while (v153 != (unsigned __int8 *)v145);
              goto LABEL_307;
            }
          }
          else
          {
            v150 = 0;
            v151 = (std::string::size_type)&v139[-v303.__r_.__value_.__r.__words[0]];
            *(_BYTE *)v146 = v141;
            v152 = v146 + 1;
            if (v139 != (unsigned __int8 *)v145)
              goto LABEL_303;
          }
          v303.__r_.__value_.__r.__words[0] = v151;
          v303.__r_.__value_.__l.__size_ = v152;
          v303.__r_.__value_.__r.__words[2] = v150 + v149;
          if (v139)
            goto LABEL_311;
          goto LABEL_312;
        }
LABEL_329:
        if ((unint64_t)v139 < v303.__r_.__value_.__r.__words[2])
        {
          *v139 = 10;
          v138 = (uint64_t)(v139 + 1);
          goto LABEL_349;
        }
        v165 = v303.__r_.__value_.__r.__words[0];
        v166 = (unint64_t)&v139[-v303.__r_.__value_.__r.__words[0]];
        v167 = (int64_t)&v139[-v303.__r_.__value_.__r.__words[0] + 1];
        if (v167 < 0)
LABEL_499:
          sub_22316E078();
        v168 = v303.__r_.__value_.__r.__words[2] - v303.__r_.__value_.__r.__words[0];
        if (2 * (v303.__r_.__value_.__r.__words[2] - v303.__r_.__value_.__r.__words[0]) > v167)
          v167 = 2 * v168;
        if (v168 >= 0x3FFFFFFFFFFFFFFFLL)
          v169 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v169 = v167;
        if (v169)
        {
          v170 = (int64_t)operator new(v169);
          v171 = v170 + v166;
          *(_BYTE *)(v170 + v166) = 10;
          v138 = v170 + v166 + 1;
          if (v139 == (unsigned __int8 *)v165)
            goto LABEL_347;
        }
        else
        {
          v170 = 0;
          v171 = (std::string::size_type)&v139[-v303.__r_.__value_.__r.__words[0]];
          *(_BYTE *)v166 = 10;
          v138 = v166 + 1;
          if (v139 == (unsigned __int8 *)v165)
          {
LABEL_347:
            v303.__r_.__value_.__r.__words[0] = v171;
            v303.__r_.__value_.__l.__size_ = v138;
            v303.__r_.__value_.__r.__words[2] = v170 + v169;
            if (!v139)
              goto LABEL_349;
LABEL_348:
            operator delete(v139);
            goto LABEL_349;
          }
        }
        if (v166 < 8 || v165 - v170 < 0x20)
        {
          v172 = v139;
          goto LABEL_342;
        }
        if (v166 >= 0x20)
        {
          v176 = v166 & 0xFFFFFFFFFFFFFFE0;
          v177 = (_OWORD *)(v170 + v166 - 16);
          v178 = (__int128 *)(v139 - 16);
          v179 = v166 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v180 = *v178;
            *(v177 - 1) = *(v178 - 1);
            *v177 = v180;
            v177 -= 2;
            v178 -= 2;
            v179 -= 32;
          }
          while (v179);
          if (v166 == v176)
            goto LABEL_344;
          if ((v166 & 0x18) == 0)
          {
            v171 -= v176;
            v172 = &v139[-v176];
LABEL_342:
            v173 = (_BYTE *)(v171 - 1);
            do
            {
              v174 = *--v172;
              *v173-- = v174;
            }
            while (v172 != (unsigned __int8 *)v165);
            goto LABEL_344;
          }
        }
        else
        {
          v176 = 0;
        }
        v172 = &v139[-(v166 & 0xFFFFFFFFFFFFFFF8)];
        v171 -= v166 & 0xFFFFFFFFFFFFFFF8;
        v181 = &v139[-v176 - v165 - 8 + v170];
        v182 = (uint64_t *)&v139[-v176 - 8];
        v183 = v176 - (v166 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v184 = *v182--;
          *(_QWORD *)v181 = v184;
          v181 -= 8;
          v183 += 8;
        }
        while (v183);
        if (v166 != (v166 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_342;
LABEL_344:
        v139 = (unsigned __int8 *)v303.__r_.__value_.__r.__words[0];
        v303.__r_.__value_.__r.__words[0] = v170;
        v303.__r_.__value_.__l.__size_ = v138;
        v303.__r_.__value_.__r.__words[2] = v170 + v169;
        if (v139)
          goto LABEL_348;
LABEL_349:
        v303.__r_.__value_.__l.__size_ = v138;
        v139 = (unsigned __int8 *)v303.__r_.__value_.__r.__words[0];
        v132->i16[0] = atoi(v303.__r_.__value_.__l.__data_);
        std::istream::tellg();
        while ((*((_BYTE *)v137 + *(_QWORD *)(*a2 - 24)) & 2) == 0)
        {
          v175 = std::istream::peek();
          if (v175 <= 0x7F)
          {
            if ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v175 + 60) & 0x4000) == 0)
              break;
          }
          else if (!__maskrune(v175, 0x4000uLL))
          {
            break;
          }
          std::istream::seekg();
        }
        std::istream::tellg();
        v132 = (int8x16_t *)((char *)v132 + 2);
        if (v132 == v244)
        {
          v132 = (int8x16_t *)((char *)v241 + 2 * v240);
          if (v132 == v239)
            goto LABEL_369;
          goto LABEL_281;
        }
      }
    }
    v305 = 0;
    sub_2231A0B14((uint64_t)v255, (uint64_t)v304, &v290);
    if (v305 == -1)
      sub_22316DD70();
    v255[0] = &v292;
    ((void (*)(std::string *__return_ptr, void **, _BYTE *))*(&off_24EC6D5A0 + v305))(&v303, v255, v304);
    if (v305 != -1)
      ((void (*)(void **, _BYTE *))off_24EC6D540[v305])(v255, v304);
    v31 = std::string::insert(&v303, 0, "Requested format ", 0x11uLL);
    v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v245.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v245.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    v33 = std::string::append(&v245, " but pnm file contains ", 0x17uLL);
    v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v293.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v293.__r_.__value_.__l.__data_ = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    v305 = 0;
    sub_2231A0B14((uint64_t)&v292, (uint64_t)v304, (unsigned int *)&v278 + 1);
    if (v305 == -1)
      sub_22316DD70();
    v292 = &v291;
    ((void (*)(void **__return_ptr, char **, _BYTE *))*(&off_24EC6D5A0 + v305))(v255, &v292, v304);
    if (v305 != -1)
      ((void (*)(char **, _BYTE *))off_24EC6D540[v305])(&v292, v304);
    if ((v256 & 0x80u) == 0)
      v35 = v255;
    else
      v35 = (void **)v255[0];
    if ((v256 & 0x80u) == 0)
      v36 = v256;
    else
      v36 = (std::string::size_type)v255[1];
    v37 = std::string::append(&v293, (const std::string::value_type *)v35, v36);
    v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    v247.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v247.__r_.__value_.__l.__data_ = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    v39 = std::string::append(&v247, ".", 1uLL);
    v41 = (void *)v39->__r_.__value_.__r.__words[0];
    v40 = (void *)v39->__r_.__value_.__l.__size_;
    v257[0] = v39->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v257 + 3) = *(_DWORD *)((char *)&v39->__r_.__value_.__r.__words[2] + 3);
    v42 = SHIBYTE(v39->__r_.__value_.__r.__words[2]);
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    if (v42 < 0)
    {
      sub_223197FA4(v258, v41, (unint64_t)v40);
    }
    else
    {
      v258[0] = v41;
      v258[1] = v40;
      *(_DWORD *)v259 = v257[0];
      *(_DWORD *)&v259[3] = *(_DWORD *)((char *)v257 + 3);
      v260 = v42;
    }
    v261 = 1;
    LOBYTE(v262) = 0;
    v266 = 0;
    v267 = 1;
    sub_22454BC28((uint64_t)v258, (uint64_t)&v306);
    *(_OWORD *)a4 = v306;
    *(_BYTE *)(a4 + 16) = 0;
    *(_BYTE *)(a4 + 112) = 0;
    if (v316)
    {
      *(_BYTE *)(a4 + 40) = 0;
      v68 = v309;
      if (v309)
      {
        *(_OWORD *)(a4 + 16) = v307;
        *(_QWORD *)(a4 + 32) = v308;
        v308 = 0;
        v307 = 0uLL;
        *(_BYTE *)(a4 + 40) = 1;
      }
      *(_BYTE *)(a4 + 48) = 0;
      *(_BYTE *)(a4 + 104) = 0;
      if (v315)
      {
        v69 = v312;
        *(_QWORD *)(a4 + 64) = v311;
        *(_OWORD *)(a4 + 48) = v310;
        v310 = 0uLL;
        *(_QWORD *)(a4 + 72) = v69;
        *(_OWORD *)(a4 + 80) = v313;
        *(_QWORD *)(a4 + 96) = v314;
        v311 = 0;
        v313 = 0uLL;
        v314 = 0;
        *(_BYTE *)(a4 + 104) = 1;
      }
      *(_BYTE *)(a4 + 112) = 1;
      *(_BYTE *)(a4 + 120) = 0;
      if (v68 && SHIBYTE(v308) < 0)
        operator delete((void *)v307);
    }
    else
    {
      *(_BYTE *)(a4 + 120) = 0;
    }
    if (v267)
    {
      if (v266)
      {
        if (v265 < 0)
          operator delete(v264);
        if (v263 < 0)
          operator delete(v262);
      }
      if (v261 && v260 < 0)
        operator delete(v258[0]);
    }
    if (v42 < 0)
    {
      operator delete(v41);
      if ((SHIBYTE(v247.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_151:
        if (((char)v256 & 0x80000000) == 0)
          goto LABEL_152;
        goto LABEL_158;
      }
    }
    else if ((SHIBYTE(v247.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_151;
    }
    operator delete(v247.__r_.__value_.__l.__data_);
    if (((char)v256 & 0x80000000) == 0)
    {
LABEL_152:
      if ((SHIBYTE(v293.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_153;
      goto LABEL_159;
    }
LABEL_158:
    operator delete(v255[0]);
    if ((SHIBYTE(v293.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_153:
      if ((SHIBYTE(v245.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_154;
      goto LABEL_160;
    }
LABEL_159:
    operator delete(v293.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v245.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_154:
      if ((SHIBYTE(v303.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_488;
LABEL_161:
      v12 = (void *)v303.__r_.__value_.__r.__words[0];
      goto LABEL_487;
    }
LABEL_160:
    operator delete(v245.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v303.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_488;
    goto LABEL_161;
  }
  v305 = 0;
  sub_2231A0B14((uint64_t)&v245, (uint64_t)v304, &v290);
  if (v305 == -1)
    sub_22316DD70();
  v245.__r_.__value_.__r.__words[0] = (std::string::size_type)v255;
  ((void (*)(std::string *__return_ptr, std::string *, _BYTE *))*(&off_24EC6D5A0 + v305))(&v293, &v245, v304);
  if (v305 != -1)
    ((void (*)(std::string *, _BYTE *))off_24EC6D540[v305])(&v245, v304);
  v13 = std::string::insert(&v293, 0, "Format ", 7uLL);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v247.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v247.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v15 = std::string::append(&v247, " is not a valid pnm format.", 0x1BuLL);
  v17 = (void *)v15->__r_.__value_.__r.__words[0];
  v16 = (void *)v15->__r_.__value_.__l.__size_;
  LODWORD(v303.__r_.__value_.__l.__data_) = v15->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v303.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v15->__r_.__value_.__r.__words[2] + 3);
  v18 = SHIBYTE(v15->__r_.__value_.__r.__words[2]);
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (v18 < 0)
  {
    sub_223197FA4(__dst, v17, (unint64_t)v16);
  }
  else
  {
    __dst[0] = v17;
    __dst[1] = v16;
    *(_DWORD *)v269 = v303.__r_.__value_.__l.__data_;
    *(_DWORD *)&v269[3] = *(_DWORD *)((char *)v303.__r_.__value_.__r.__words + 3);
    v270 = v18;
  }
  v271 = 1;
  LOBYTE(v272) = 0;
  v276 = 0;
  v277 = 1;
  sub_22454BC28((uint64_t)__dst, (uint64_t)&v306);
  *(_OWORD *)a4 = v306;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (v316)
  {
    *(_BYTE *)(a4 + 40) = 0;
    v46 = v309;
    if (v309)
    {
      *(_OWORD *)(a4 + 16) = v307;
      *(_QWORD *)(a4 + 32) = v308;
      v308 = 0;
      v307 = 0uLL;
      *(_BYTE *)(a4 + 40) = 1;
    }
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 104) = 0;
    if (v315)
    {
      v47 = v312;
      *(_QWORD *)(a4 + 64) = v311;
      *(_OWORD *)(a4 + 48) = v310;
      v310 = 0uLL;
      *(_QWORD *)(a4 + 72) = v47;
      *(_OWORD *)(a4 + 80) = v313;
      *(_QWORD *)(a4 + 96) = v314;
      v311 = 0;
      v313 = 0uLL;
      v314 = 0;
      *(_BYTE *)(a4 + 104) = 1;
    }
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (v46 && SHIBYTE(v308) < 0)
      operator delete((void *)v307);
  }
  else
  {
    *(_BYTE *)(a4 + 120) = 0;
  }
  if (v277)
  {
    if (v276)
    {
      if (v275 < 0)
        operator delete(__p);
      if (v273 < 0)
        operator delete(v272);
    }
    if (v271 && v270 < 0)
      operator delete(__dst[0]);
  }
  if (v18 < 0)
  {
    operator delete(v17);
    if ((SHIBYTE(v247.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_91:
      if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_95;
      goto LABEL_488;
    }
  }
  else if ((SHIBYTE(v247.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_91;
  }
  operator delete(v247.__r_.__value_.__l.__data_);
  if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_95:
    v12 = (void *)v293.__r_.__value_.__r.__words[0];
    goto LABEL_487;
  }
LABEL_488:
  if (!v289 && v288)
  {
    if (v287)
    {
      if (v286 < 0)
        operator delete(v285);
      if (v284 < 0)
        operator delete(v283);
    }
    if (v282)
    {
      if (v281 < 0)
        operator delete((void *)v280);
    }
  }
}

void sub_224163804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;
  void *v72;

  v72 = (void *)STACK[0x2D0];
  if (STACK[0x2D0])
  {
    STACK[0x2D8] = (unint64_t)v72;
    operator delete(v72);
  }
  sub_2231DE1B4((uint64_t)&STACK[0x280]);
  sub_2231B4CC8((uint64_t)&a15);
  sub_22415D028((uint64_t)&a23);
  sub_223197D38((uint64_t)&a71);
  _Unwind_Resume(a1);
}

void sub_224163BA8(uint64_t a1, _QWORD *a2)
{
  size_t v4;
  size_t v5;
  const void **p_dst;
  int v7;
  uint64_t v8;
  const void **v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  size_t v16;
  const void **v17;
  int v18;
  int v19;
  uint64_t v20;
  size_t v21;
  const void **v22;
  __int128 *v23;
  int v24;
  __int128 v25[6];
  char v26;
  __int128 v27[6];
  char v28;
  const void **__dst;
  size_t v30;
  int64_t v31;
  __int128 __s;
  __int128 __p;
  uint64_t v34;
  unsigned __int8 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  char v42;
  _QWORD *v43;
  __int128 v44;
  char v45;
  char v46;
  void *v47;
  char v48;
  void *v49;
  char v50;
  char v51;
  char v52;

  v43 = a2;
  if (sub_224165ABC(&v43))
  {
    BYTE2(__s) = 0;
    LOWORD(__s) = 0;
    std::istream::read();
    v4 = strlen((const char *)&__s);
    if (v4 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v5 = v4;
    if (v4 >= 0x17)
    {
      v10 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17)
        v10 = v4 | 7;
      v11 = v10 + 1;
      p_dst = (const void **)operator new(v10 + 1);
      v30 = v5;
      v31 = v11 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v31) = v4;
      p_dst = (const void **)&__dst;
      if (!v4)
        goto LABEL_25;
    }
    memcpy(p_dst, &__s, v5);
LABEL_25:
    *((_BYTE *)p_dst + v5) = 0;
    if (sub_224165ABC(&v43))
    {
      v12 = sub_224165C7C(a2);
      if (sub_224165ABC(&v43))
      {
        v13 = sub_224165C7C(a2);
        if (sub_224165ABC(&v43))
        {
          v14 = sub_224165C7C(a2);
          if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 2) == 0)
          {
            v15 = v14;
            v16 = HIBYTE(v31);
            if (v31 < 0)
              v16 = v30;
            if (v16 != 2)
              goto LABEL_37;
            v17 = (const void **)&__dst;
            if (v31 < 0)
              v17 = __dst;
            if (*(_WORD *)v17 == 12880 || *(_WORD *)v17 == 13136)
            {
              v18 = 0;
            }
            else
            {
LABEL_37:
              if (!sub_224112A10((const void **)&__dst, "P5") && !sub_224112A10((const void **)&__dst, "P6"))
              {
                sub_223208674(v27, "Invalid pnm file. Format magic number not recognized.");
                v28 = 1;
                sub_22415D104(5u, v27, (uint64_t)&__s);
                sub_22319718C(a1, (uint64_t)&__s);
                sub_22319723C((uint64_t)&__s);
                v23 = v27;
                goto LABEL_85;
              }
              v18 = 1;
            }
            v21 = HIBYTE(v31);
            if (v31 < 0)
              v21 = v30;
            if (v21 != 2)
              goto LABEL_97;
            v22 = (const void **)&__dst;
            if (v31 < 0)
              v22 = __dst;
            if (*(_WORD *)v22 == 12880 || *(_WORD *)v22 == 13648)
            {
              if (v15 == 255)
              {
                v24 = 1;
              }
              else
              {
                if (v15 != 0xFFFF)
                  goto LABEL_93;
                v24 = 2;
              }
            }
            else
            {
LABEL_97:
              if (sub_224112A10((const void **)&__dst, "P3") || sub_224112A10((const void **)&__dst, "P6"))
              {
                if (v15 != 255)
                {
                  if (v15 == 0xFFFF)
                  {
                    sub_223208674(v25, "Unsupported pnm format. Loader does not support Rgb16u (.pbm) loading yet.");
                    v26 = 1;
                    sub_22415D104(5u, v25, (uint64_t)&__s);
                    sub_22319718C(a1, (uint64_t)&__s);
                    sub_22319723C((uint64_t)&__s);
                    v23 = v25;
LABEL_85:
                    sub_22319FD28((uint64_t)v23);
LABEL_61:
                    if ((SHIBYTE(v31) & 0x80000000) == 0)
                      return;
                    v9 = __dst;
                    goto LABEL_63;
                  }
LABEL_93:
                  sub_224166104((uint64_t)&__s, v15);
                  sub_22319718C(a1, (uint64_t)&__s);
                  sub_22319723C((uint64_t)&__s);
                  goto LABEL_61;
                }
                v24 = 21;
              }
              else
              {
                v24 = 0;
              }
            }
            LOBYTE(__s) = 0;
            std::istream::read();
            if (__s == 13)
            {
              LOBYTE(__s) = 0;
              std::istream::read();
            }
            *(_DWORD *)a1 = v18;
            *(_DWORD *)(a1 + 4) = v24;
            *(_DWORD *)(a1 + 8) = v12;
            *(_DWORD *)(a1 + 12) = v13;
            *(_BYTE *)(a1 + 120) = 1;
            goto LABEL_61;
          }
        }
      }
    }
    sub_223208674(&v44, "Invalid pnm file. Unexpected end of file in header.");
    v52 = 1;
    sub_2231A958C(5u, &v44, (uint64_t)&__s);
    if (!v52)
      goto LABEL_52;
    if (!v51)
      goto LABEL_49;
    if (v50 < 0)
    {
      operator delete(v49);
      if ((v48 & 0x80000000) == 0)
      {
LABEL_49:
        if (v46)
          goto LABEL_50;
        goto LABEL_52;
      }
    }
    else if ((v48 & 0x80000000) == 0)
    {
      goto LABEL_49;
    }
    operator delete(v47);
    if (v46)
    {
LABEL_50:
      if (v45 < 0)
        operator delete((void *)v44);
    }
LABEL_52:
    *(_OWORD *)a1 = __s;
    *(_BYTE *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 112) = 0;
    if (v42)
    {
      *(_BYTE *)(a1 + 40) = 0;
      v19 = v35;
      if (v35)
      {
        *(_OWORD *)(a1 + 16) = __p;
        *(_QWORD *)(a1 + 32) = v34;
        v34 = 0;
        __p = 0uLL;
        *(_BYTE *)(a1 + 40) = 1;
      }
      *(_BYTE *)(a1 + 48) = 0;
      *(_BYTE *)(a1 + 104) = 0;
      if (v41)
      {
        v20 = v38;
        *(_QWORD *)(a1 + 64) = v37;
        *(_OWORD *)(a1 + 48) = v36;
        v36 = 0uLL;
        *(_QWORD *)(a1 + 72) = v20;
        *(_OWORD *)(a1 + 80) = v39;
        *(_QWORD *)(a1 + 96) = v40;
        v37 = 0;
        v39 = 0uLL;
        v40 = 0;
        *(_BYTE *)(a1 + 104) = 1;
      }
      *(_BYTE *)(a1 + 112) = 1;
      *(_BYTE *)(a1 + 120) = 0;
      if (v19 && SHIBYTE(v34) < 0)
        operator delete((void *)__p);
    }
    else
    {
      *(_BYTE *)(a1 + 120) = 0;
    }
    goto LABEL_61;
  }
  sub_223208674(&v44, "Invalid pnm file. Unexpected end of file in header.");
  v52 = 1;
  sub_2231A958C(5u, &v44, (uint64_t)&__s);
  if (v52)
  {
    if (!v51)
      goto LABEL_10;
    if (v50 < 0)
    {
      operator delete(v49);
      if ((v48 & 0x80000000) == 0)
      {
LABEL_10:
        if (!v46)
          goto LABEL_13;
LABEL_11:
        if (v45 < 0)
          operator delete((void *)v44);
        goto LABEL_13;
      }
    }
    else if ((v48 & 0x80000000) == 0)
    {
      goto LABEL_10;
    }
    operator delete(v47);
    if (!v46)
      goto LABEL_13;
    goto LABEL_11;
  }
LABEL_13:
  *(_OWORD *)a1 = __s;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (!v42)
  {
    *(_BYTE *)(a1 + 120) = 0;
    return;
  }
  *(_BYTE *)(a1 + 40) = 0;
  v7 = v35;
  if (v35)
  {
    *(_OWORD *)(a1 + 16) = __p;
    *(_QWORD *)(a1 + 32) = v34;
    v34 = 0;
    __p = 0uLL;
    *(_BYTE *)(a1 + 40) = 1;
  }
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  if (v41)
  {
    v8 = v38;
    *(_QWORD *)(a1 + 64) = v37;
    *(_OWORD *)(a1 + 48) = v36;
    v36 = 0uLL;
    *(_QWORD *)(a1 + 72) = v8;
    *(_OWORD *)(a1 + 80) = v39;
    *(_QWORD *)(a1 + 96) = v40;
    v37 = 0;
    v39 = 0uLL;
    v40 = 0;
    *(_BYTE *)(a1 + 104) = 1;
  }
  *(_BYTE *)(a1 + 112) = 1;
  *(_BYTE *)(a1 + 120) = 0;
  if (v7 && SHIBYTE(v34) < 0)
  {
    v9 = (const void **)__p;
LABEL_63:
    operator delete(v9);
  }
}

void sub_224164250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2241642EC(_DWORD *a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  unsigned int v9;
  unsigned int v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  void *size;
  void *v15;
  int v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  void **v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  void *v26;
  void *v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  const char *v31;
  const char *v32;
  int v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  int v38;
  _BYTE *v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  int v54;
  uint64_t v55;
  std::string *v56;
  __int128 v57;
  std::string *v58;
  unint64_t v59;
  void *v60;
  int v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  _BYTE *v81;
  int v82;
  int v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  std::string::size_type v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t v108;
  int v109;
  std::string::size_type v110;
  unint64_t *v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t v118;
  int v119;
  std::string::size_type v120;
  unint64_t *v121;
  __int128 v122;
  __int128 __p;
  uint64_t v124;
  unsigned __int8 v125;
  void *v126[2];
  uint64_t v127;
  uint64_t v128;
  void *v129[2];
  uint64_t v130;
  char v131;
  unsigned __int8 v132;
  char v133;
  void *v134[2];
  unsigned __int8 v135;
  unsigned int v136[2];
  void *v137[2];
  _BYTE v138[7];
  char v139;
  char v140;
  void *v141;
  char v142;
  void *v143;
  char v144;
  char v145;
  char v146;
  void *__dst[2];
  _BYTE v148[7];
  char v149;
  char v150;
  void *v151;
  char v152;
  void *v153;
  char v154;
  char v155;
  char v156;
  unsigned int v157;
  int v158;
  char *v159;
  std::string v160;
  std::string v161;
  std::string v162;
  char v163;
  void *v164;
  char v165;
  void *v166;
  char v167;
  char v168;
  char v169;
  _BYTE v170[32];
  uint64_t v171;
  int v172;
  unsigned int v173;
  __int128 v174;
  uint64_t v175;
  _BYTE *v176;
  __int128 v177;
  uint64_t v178;
  char v179;
  unsigned __int8 v180;
  std::string v181;
  unsigned int v182;
  char v183;

  v158 = a4;
  v9 = a1[12];
  v157 = v9;
  v10 = v9 - 1;
  if (v9 != 1 && v9 != 21 && v9 != 2 && &jpt_22416B320 - (char *)&unk_22469CC8C == 12)
  {
    *(_DWORD *)&v170[24] = 0;
    sub_2231A0B14((uint64_t)&v161, (uint64_t)v170, &v157);
    if (*(_DWORD *)&v170[24] == -1)
      sub_22316DD70();
    v161.__r_.__value_.__r.__words[0] = (std::string::size_type)v134;
    ((void (*)(std::string *__return_ptr, std::string *, _BYTE *))*(&off_24EC6D5A0
                                                                             + *(unsigned int *)&v170[24]))(&v181, &v161, v170);
    if (*(_DWORD *)&v170[24] != -1)
      ((void (*)(std::string *, _BYTE *))off_24EC6D540[*(unsigned int *)&v170[24]])(&v161, v170);
    v11 = std::string::insert(&v181, 0, "Image is of format ", 0x13uLL);
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v162.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v162.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    v13 = std::string::append(&v162, " but must be 8-bit Gray or Rgb to save as pnm.", 0x2EuLL);
    v15 = (void *)v13->__r_.__value_.__r.__words[0];
    size = (void *)v13->__r_.__value_.__l.__size_;
    LODWORD(v160.__r_.__value_.__l.__data_) = v13->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v160.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v13->__r_.__value_.__r.__words[2] + 3);
    v16 = SHIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (v16 < 0)
    {
      sub_223197FA4(__dst, v15, (unint64_t)size);
    }
    else
    {
      __dst[0] = v15;
      __dst[1] = size;
      *(_DWORD *)v148 = v160.__r_.__value_.__l.__data_;
      *(_DWORD *)&v148[3] = *(_DWORD *)((char *)v160.__r_.__value_.__r.__words + 3);
      v149 = v16;
    }
    v150 = 1;
    LOBYTE(v151) = 0;
    v155 = 0;
    v156 = 1;
    sub_22454BC28((uint64_t)__dst, (uint64_t)&v122);
    *(_OWORD *)a5 = v122;
    *(_BYTE *)(a5 + 16) = 0;
    *(_BYTE *)(a5 + 112) = 0;
    if (v132)
    {
      *(_BYTE *)(a5 + 40) = 0;
      v33 = v125;
      if (v125)
      {
        *(_OWORD *)(a5 + 16) = __p;
        *(_QWORD *)(a5 + 32) = v124;
        v124 = 0;
        __p = 0uLL;
        *(_BYTE *)(a5 + 40) = 1;
      }
      *(_BYTE *)(a5 + 48) = 0;
      *(_BYTE *)(a5 + 104) = 0;
      if (v131)
      {
        v34 = v128;
        *(_QWORD *)(a5 + 64) = v127;
        *(_OWORD *)(a5 + 48) = *(_OWORD *)v126;
        v126[0] = 0;
        v126[1] = 0;
        *(_QWORD *)(a5 + 72) = v34;
        *(_OWORD *)(a5 + 80) = *(_OWORD *)v129;
        *(_QWORD *)(a5 + 96) = v130;
        v127 = 0;
        v129[0] = 0;
        v129[1] = 0;
        v130 = 0;
        *(_BYTE *)(a5 + 104) = 1;
      }
      *(_BYTE *)(a5 + 112) = 1;
      *(_BYTE *)(a5 + 120) = 0;
      if (v33 && SHIBYTE(v124) < 0)
        operator delete((void *)__p);
      if (!v156)
      {
LABEL_52:
        if (v16 < 0)
        {
          operator delete(v15);
          if ((SHIBYTE(v162.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_54:
            if ((SHIBYTE(v181.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              return;
LABEL_58:
            v35 = (void *)v181.__r_.__value_.__r.__words[0];
LABEL_309:
            operator delete(v35);
            return;
          }
        }
        else if ((SHIBYTE(v162.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_54;
        }
        operator delete(v162.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v181.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        goto LABEL_58;
      }
    }
    else
    {
      *(_BYTE *)(a5 + 120) = 0;
      if (!v156)
        goto LABEL_52;
    }
    if (!v155)
      goto LABEL_49;
    if (v154 < 0)
    {
      operator delete(v153);
      if ((v152 & 0x80000000) == 0)
      {
LABEL_49:
        if (!v150)
          goto LABEL_52;
LABEL_50:
        if (v149 < 0)
          operator delete(__dst[0]);
        goto LABEL_52;
      }
    }
    else if ((v152 & 0x80000000) == 0)
    {
      goto LABEL_49;
    }
    operator delete(v151);
    if (!v150)
      goto LABEL_52;
    goto LABEL_50;
  }
  if (a4 && (a4 == 1 && v10 > 1 || a4 == 2 && v9 != 21))
  {
    *(_DWORD *)&v170[24] = 0;
    sub_22415D428((uint64_t)v134, (uint64_t)v170, &v158);
    if (*(_DWORD *)&v170[24] == -1)
      sub_22316DD70();
    v134[0] = &v159;
    ((void (*)(std::string *__return_ptr, void **, _BYTE *))*(&off_24EC6D5A0 + *(unsigned int *)&v170[24]))(&v160, v134, v170);
    if (*(_DWORD *)&v170[24] != -1)
      ((void (*)(void **, _BYTE *))off_24EC6D540[*(unsigned int *)&v170[24]])(v134, v170);
    v17 = std::string::insert(&v160, 0, "Requested io-format ", 0x14uLL);
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v161.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v161.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v19 = std::string::append(&v161, " but image is of color format ", 0x1EuLL);
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v181.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v181.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    *(_DWORD *)&v170[24] = 0;
    sub_2231A0B14((uint64_t)&v159, (uint64_t)v170, &v157);
    if (*(_DWORD *)&v170[24] == -1)
      sub_22316DD70();
    v159 = &v183;
    ((void (*)(void **__return_ptr, char **, _BYTE *))*(&off_24EC6D5A0 + *(unsigned int *)&v170[24]))(v134, &v159, v170);
    if (*(_DWORD *)&v170[24] != -1)
      ((void (*)(char **, _BYTE *))off_24EC6D540[*(unsigned int *)&v170[24]])(&v159, v170);
    if ((v135 & 0x80u) == 0)
      v21 = v134;
    else
      v21 = (void **)v134[0];
    if ((v135 & 0x80u) == 0)
      v22 = v135;
    else
      v22 = (std::string::size_type)v134[1];
    v23 = std::string::append(&v181, (const std::string::value_type *)v21, v22);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v162.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v162.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = std::string::append(&v162, " incompatible with pnm.", 0x17uLL);
    v27 = (void *)v25->__r_.__value_.__r.__words[0];
    v26 = (void *)v25->__r_.__value_.__l.__size_;
    v136[0] = v25->__r_.__value_.__r.__words[2];
    *(unsigned int *)((char *)v136 + 3) = *(_DWORD *)((char *)&v25->__r_.__value_.__r.__words[2] + 3);
    v28 = SHIBYTE(v25->__r_.__value_.__r.__words[2]);
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if (v28 < 0)
    {
      sub_223197FA4(v137, v27, (unint64_t)v26);
    }
    else
    {
      v137[0] = v27;
      v137[1] = v26;
      *(_DWORD *)v138 = v136[0];
      *(_DWORD *)&v138[3] = *(unsigned int *)((char *)v136 + 3);
      v139 = v28;
    }
    v140 = 1;
    LOBYTE(v141) = 0;
    v145 = 0;
    v146 = 1;
    sub_22454BC28((uint64_t)v137, (uint64_t)&v122);
    *(_OWORD *)a5 = v122;
    *(_BYTE *)(a5 + 16) = 0;
    *(_BYTE *)(a5 + 112) = 0;
    if (v132)
    {
      *(_BYTE *)(a5 + 40) = 0;
      v54 = v125;
      if (v125)
      {
        *(_OWORD *)(a5 + 16) = __p;
        *(_QWORD *)(a5 + 32) = v124;
        v124 = 0;
        __p = 0uLL;
        *(_BYTE *)(a5 + 40) = 1;
      }
      *(_BYTE *)(a5 + 48) = 0;
      *(_BYTE *)(a5 + 104) = 0;
      if (v131)
      {
        v55 = v128;
        *(_QWORD *)(a5 + 64) = v127;
        *(_OWORD *)(a5 + 48) = *(_OWORD *)v126;
        v126[0] = 0;
        v126[1] = 0;
        *(_QWORD *)(a5 + 72) = v55;
        *(_OWORD *)(a5 + 80) = *(_OWORD *)v129;
        *(_QWORD *)(a5 + 96) = v130;
        v127 = 0;
        v129[0] = 0;
        v129[1] = 0;
        v130 = 0;
        *(_BYTE *)(a5 + 104) = 1;
      }
      *(_BYTE *)(a5 + 112) = 1;
      *(_BYTE *)(a5 + 120) = 0;
      if (v54 && SHIBYTE(v124) < 0)
        operator delete((void *)__p);
    }
    else
    {
      *(_BYTE *)(a5 + 120) = 0;
    }
    if (v146)
    {
      if (v145)
      {
        if (v144 < 0)
          operator delete(v143);
        if (v142 < 0)
          operator delete(v141);
      }
      if (v140)
      {
        if (v139 < 0)
          operator delete(v137[0]);
      }
    }
    if (v28 < 0)
    {
      operator delete(v27);
      if ((SHIBYTE(v162.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_134:
        if (((char)v135 & 0x80000000) == 0)
          goto LABEL_135;
        goto LABEL_141;
      }
    }
    else if ((SHIBYTE(v162.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_134;
    }
    operator delete(v162.__r_.__value_.__l.__data_);
    if (((char)v135 & 0x80000000) == 0)
    {
LABEL_135:
      if ((SHIBYTE(v181.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_136;
      goto LABEL_142;
    }
LABEL_141:
    operator delete(v134[0]);
    if ((SHIBYTE(v181.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_136:
      if ((SHIBYTE(v161.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_137;
      goto LABEL_143;
    }
LABEL_142:
    operator delete(v181.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v161.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_137:
      if ((SHIBYTE(v160.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_144:
      v35 = (void *)v160.__r_.__value_.__r.__words[0];
      goto LABEL_309;
    }
LABEL_143:
    operator delete(v161.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v160.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    goto LABEL_144;
  }
  v30 = a1[6];
  v29 = a1[7];
  v136[0] = v9;
  if (v10 <= 1)
  {
    v31 = "P2\n";
    v32 = "P5\n";
    goto LABEL_61;
  }
  if (v9 != 21)
  {
    v182 = 0;
    sub_2231A0B14((uint64_t)v134, (uint64_t)&v181, v136);
    if (v182 == -1)
      sub_22316DD70();
    v134[0] = &v183;
    ((void (*)(std::string *__return_ptr, void **, std::string *))*(&off_24EC6D5A0 + v182))(&v160, v134, &v181);
    if (v182 != -1)
      ((void (*)(void **, std::string *))off_24EC6D540[v182])(v134, &v181);
    v56 = std::string::insert(&v160, 0, "Image is of format ", 0x13uLL);
    v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
    v161.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v161.__r_.__value_.__l.__data_ = v57;
    v56->__r_.__value_.__l.__size_ = 0;
    v56->__r_.__value_.__r.__words[2] = 0;
    v56->__r_.__value_.__r.__words[0] = 0;
    v58 = std::string::append(&v161, " but must be 8-bit Gray or Rgb to save as pnm.", 0x2EuLL);
    v60 = (void *)v58->__r_.__value_.__r.__words[0];
    v59 = v58->__r_.__value_.__l.__size_;
    LODWORD(v159) = v58->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)&v159 + 3) = *(_DWORD *)((char *)&v58->__r_.__value_.__r.__words[2] + 3);
    v61 = SHIBYTE(v58->__r_.__value_.__r.__words[2]);
    v58->__r_.__value_.__l.__size_ = 0;
    v58->__r_.__value_.__r.__words[2] = 0;
    v58->__r_.__value_.__r.__words[0] = 0;
    if (v61 < 0)
    {
      sub_223197FA4(&v162, v60, v59);
    }
    else
    {
      v162.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
      v162.__r_.__value_.__l.__size_ = v59;
      LODWORD(v162.__r_.__value_.__r.__words[2]) = (_DWORD)v159;
      *(_DWORD *)((char *)&v162.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)&v159 + 3);
      *((_BYTE *)&v162.__r_.__value_.__s + 23) = v61;
    }
    v163 = 1;
    LOBYTE(v164) = 0;
    v168 = 0;
    v169 = 1;
    v81 = v170;
    sub_22454BC28((uint64_t)&v162, (uint64_t)v170);
    v122 = *(_OWORD *)v170;
    LOBYTE(__p) = 0;
    v82 = v180;
    if (!v180)
    {
      v85 = 0;
      v84 = 0;
      v83 = 0;
      goto LABEL_282;
    }
    v125 = 0;
    if ((_BYTE)v172)
    {
      __p = *(_OWORD *)&v170[16];
      v124 = v171;
      *(_QWORD *)&v170[24] = 0;
      v171 = 0;
      *(_QWORD *)&v170[16] = 0;
      v83 = 1;
      v125 = 1;
      LOBYTE(v126[0]) = 0;
      v131 = 0;
      if (v179)
      {
LABEL_207:
        v81 = v176;
        v127 = v175;
        *(_OWORD *)v126 = v174;
        v174 = 0uLL;
        *(_OWORD *)v129 = v177;
        v130 = v178;
        v175 = 0;
        v177 = 0uLL;
        v178 = 0;
        v84 = 1;
        v131 = 1;
LABEL_279:
        v85 = 1;
        if ((_BYTE)v172 && SHIBYTE(v171) < 0)
          operator delete(*(void **)&v170[16]);
LABEL_282:
        if (v169)
        {
          if (v168)
          {
            if (v167 < 0)
              operator delete(v166);
            if (v165 < 0)
              operator delete(v164);
          }
          if (v163 && SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v162.__r_.__value_.__l.__data_);
        }
        if (v61 < 0)
        {
          operator delete(v60);
          if ((SHIBYTE(v161.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_293:
            if ((SHIBYTE(v160.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_294;
LABEL_313:
            operator delete(v160.__r_.__value_.__l.__data_);
LABEL_294:
            *(_BYTE *)(a5 + 120) = 0;
            *(_OWORD *)a5 = v122;
            *(_BYTE *)(a5 + 16) = 0;
            *(_BYTE *)(a5 + 112) = 0;
            if (v82)
            {
              *(_BYTE *)(a5 + 40) = 0;
              if (v83)
              {
                *(_OWORD *)(a5 + 16) = __p;
                *(_QWORD *)(a5 + 32) = v124;
                v124 = 0;
                __p = 0uLL;
                *(_BYTE *)(a5 + 40) = 1;
              }
              *(_BYTE *)(a5 + 48) = 0;
              *(_BYTE *)(a5 + 104) = 0;
              if (v84)
              {
                *(_OWORD *)(a5 + 48) = *(_OWORD *)v126;
                *(_QWORD *)(a5 + 64) = v127;
                v126[0] = 0;
                v126[1] = 0;
                *(_QWORD *)(a5 + 72) = v81;
                *(_OWORD *)(a5 + 80) = *(_OWORD *)v129;
                *(_QWORD *)(a5 + 96) = v130;
                v127 = 0;
                v129[0] = 0;
                v129[1] = 0;
                v130 = 0;
                *(_BYTE *)(a5 + 104) = 1;
              }
              *(_BYTE *)(a5 + 112) = 1;
            }
            goto LABEL_300;
          }
        }
        else if ((SHIBYTE(v161.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_293;
        }
        operator delete(v161.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v160.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_294;
        goto LABEL_313;
      }
    }
    else
    {
      v83 = 0;
      LOBYTE(v126[0]) = 0;
      v131 = 0;
      if (v179)
        goto LABEL_207;
    }
    v84 = 0;
    goto LABEL_279;
  }
  v31 = "P3\n";
  v32 = "P6\n";
LABEL_61:
  if (a3 == 1)
    v36 = (uint64_t)v32;
  else
    v36 = (uint64_t)v31;
  sub_2231813E8(a2, v36, 3);
  if (v9 == 21 || v9 == 1)
    v38 = 255;
  else
    v38 = 0xFFFF;
  std::to_string((std::string *)v170, v30);
  if (v170[23] >= 0)
    v39 = v170;
  else
    v39 = *(_BYTE **)v170;
  if (v170[23] >= 0)
    v40 = v170[23];
  else
    v40 = *(_QWORD *)&v170[8];
  sub_2231813E8(a2, (uint64_t)v39, v40);
  if ((v170[23] & 0x80000000) != 0)
    operator delete(*(void **)v170);
  sub_2231813E8(a2, (uint64_t)" ", 1);
  std::to_string((std::string *)v170, v29);
  if (v170[23] >= 0)
    v41 = v170;
  else
    v41 = *(_BYTE **)v170;
  if (v170[23] >= 0)
    v42 = v170[23];
  else
    v42 = *(_QWORD *)&v170[8];
  sub_2231813E8(a2, (uint64_t)v41, v42);
  if ((v170[23] & 0x80000000) != 0)
    operator delete(*(void **)v170);
  sub_2231813E8(a2, (uint64_t)"\n", 1);
  std::to_string((std::string *)v170, v38);
  if (v170[23] >= 0)
    v43 = v170;
  else
    v43 = *(_BYTE **)v170;
  if (v170[23] >= 0)
    v44 = v170[23];
  else
    v44 = *(_QWORD *)&v170[8];
  sub_2231813E8(a2, (uint64_t)v43, v44);
  if ((v170[23] & 0x80000000) != 0)
    operator delete(*(void **)v170);
  sub_2231813E8(a2, (uint64_t)"\n", 1);
  v133 = 1;
  switch(v157)
  {
    case 0x15u:
      *(_QWORD *)v170 = &off_24EC57DE8;
      sub_224166E5C((uint64_t)a1, (uint64_t)&v170[8]);
      if (a3 == 1)
      {
        v71 = *(_QWORD *)&v170[8];
        if (!*(_QWORD *)&v170[8])
          goto LABEL_231;
        v72 = *(std::__shared_weak_count **)&v170[16];
        if (*(_QWORD *)&v170[16])
        {
          v73 = (unint64_t *)(*(_QWORD *)&v170[16] + 8);
          do
            v74 = __ldxr(v73);
          while (__stxr(v74 + 1, v73));
          do
            v75 = __ldaxr(v73);
          while (__stlxr(v75 - 1, v73));
          if (!v75)
          {
            ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
            std::__shared_weak_count::__release_weak(v72);
          }
          v76 = *(std::__shared_weak_count **)&v170[16];
          v71 = *(_QWORD *)&v170[8];
          if (*(_QWORD *)&v170[16])
          {
            v77 = (unint64_t *)(*(_QWORD *)&v170[16] + 8);
            do
              v78 = __ldxr(v77);
            while (__stxr(v78 + 1, v77));
            do
              v79 = __ldaxr(v77);
            while (__stlxr(v79 - 1, v77));
            if (!v79)
            {
              ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
              std::__shared_weak_count::__release_weak(v76);
            }
          }
        }
        if (BYTE1(v176))
          (*(void (**)(std::string *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v71 + 96))(&v162, v71, 0);
        else
LABEL_231:
          v162.__r_.__value_.__r.__words[0] = 0;
        if ((_DWORD)v171)
        {
          if (HIDWORD(v171))
          {
            v102 = v172;
            if (v172)
            {
              v103 = DWORD1(v174);
              v104 = *(_QWORD *)&v170[24];
              if ((_BYTE)v176 && *(_QWORD *)&v170[24])
              {
                v105 = *(_OWORD *)&v170[8];
                if (*(_QWORD *)&v170[16])
                {
                  v106 = (unint64_t *)(*(_QWORD *)&v170[16] + 8);
                  do
                    v107 = __ldxr(v106);
                  while (__stxr(v107 + 1, v106));
                  do
                    v108 = __ldaxr(v106);
                  while (__stlxr(v108 - 1, v106));
                  if (!v108)
                  {
                    (*(void (**)(_QWORD))(**((_QWORD **)&v105 + 1) + 16))(*((_QWORD *)&v105 + 1));
                    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v105 + 1));
                  }
                }
                (*(void (**)(_QWORD, _QWORD, const char *))(*(_QWORD *)v105 + 88))(v105, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
                v104 = *(_QWORD *)&v170[24];
              }
              v109 = v102 - 1;
              if (v102 != 1)
              {
                do
                {
                  std::ostream::write();
                  v104 += v103;
                  --v109;
                }
                while (v109);
              }
              std::ostream::write();
            }
          }
        }
        v110 = v162.__r_.__value_.__r.__words[0];
        v162.__r_.__value_.__r.__words[0] = 0;
        if (v110)
          (*(void (**)(std::string::size_type))(*(_QWORD *)v110 + 8))(v110);
      }
      else
      {
        v181.__r_.__value_.__r.__words[0] = 16;
        v181.__r_.__value_.__l.__size_ = 0x1000000008;
        v181.__r_.__value_.__r.__words[2] = 14;
        v80 = operator new(0x18uLL);
        *(_OWORD *)v80 = xmmword_24EC6D5B8;
        v80[2] = "\n";
        v162.__r_.__value_.__r.__words[0] = (std::string::size_type)v80;
        v162.__r_.__value_.__l.__size_ = (std::string::size_type)(v80 + 3);
        v162.__r_.__value_.__r.__words[2] = (std::string::size_type)(v80 + 3);
        v163 = 1;
        sub_224169C5C((uint64_t)&v181, a2, (uint64_t)v170, (uint64_t)&v162);
        if (v163 && v162.__r_.__value_.__r.__words[0])
        {
          v162.__r_.__value_.__l.__size_ = v162.__r_.__value_.__r.__words[0];
          operator delete(v162.__r_.__value_.__l.__data_);
        }
        if (DWORD2(v174) && HIDWORD(v174))
          sub_2231813E8(a2, (uint64_t)"\n", 1);
      }
      v99 = *(std::__shared_weak_count **)&v170[16];
      if (!*(_QWORD *)&v170[16])
        goto LABEL_275;
      v111 = (unint64_t *)(*(_QWORD *)&v170[16] + 8);
      do
        v101 = __ldaxr(v111);
      while (__stlxr(v101 - 1, v111));
      break;
    case 2u:
      *(_QWORD *)v170 = &off_24EC5EEF8;
      sub_2241668A8((uint64_t)a1, (uint64_t)&v170[8]);
      if (a3 == 1)
      {
        v62 = *(_QWORD *)&v170[8];
        if (!*(_QWORD *)&v170[8])
          goto LABEL_209;
        v63 = *(std::__shared_weak_count **)&v170[16];
        if (*(_QWORD *)&v170[16])
        {
          v64 = (unint64_t *)(*(_QWORD *)&v170[16] + 8);
          do
            v65 = __ldxr(v64);
          while (__stxr(v65 + 1, v64));
          do
            v66 = __ldaxr(v64);
          while (__stlxr(v66 - 1, v64));
          if (!v66)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
          v67 = *(std::__shared_weak_count **)&v170[16];
          v62 = *(_QWORD *)&v170[8];
          if (*(_QWORD *)&v170[16])
          {
            v68 = (unint64_t *)(*(_QWORD *)&v170[16] + 8);
            do
              v69 = __ldxr(v68);
            while (__stxr(v69 + 1, v68));
            do
              v70 = __ldaxr(v68);
            while (__stlxr(v70 - 1, v68));
            if (!v70)
            {
              ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
              std::__shared_weak_count::__release_weak(v67);
            }
          }
        }
        if (BYTE1(v174))
          (*(void (**)(std::string *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v62 + 96))(&v162, v62, 0);
        else
LABEL_209:
          v162.__r_.__value_.__r.__words[0] = 0;
        v86 = v173;
        v87 = *(_QWORD *)&v170[24];
        v88 = v171;
        if ((_BYTE)v174 && *(_QWORD *)&v170[24])
        {
          v89 = *(_OWORD *)&v170[8];
          if (*(_QWORD *)&v170[16])
          {
            v90 = (unint64_t *)(*(_QWORD *)&v170[16] + 8);
            do
              v91 = __ldxr(v90);
            while (__stxr(v91 + 1, v90));
            do
              v92 = __ldaxr(v90);
            while (__stlxr(v92 - 1, v90));
            if (!v92)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v89 + 1) + 16))(*((_QWORD *)&v89 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v89 + 1));
            }
          }
          (*(void (**)(_QWORD, _QWORD, const char *))(*(_QWORD *)v89 + 88))(v89, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
          v87 = *(_QWORD *)&v170[24];
        }
        v93 = v86 * HIDWORD(v88);
        if ((_DWORD)v86 * HIDWORD(v88) && (_DWORD)v88)
        {
          v94 = 2 * v88;
          v95 = 2 * v86;
          v96 = v87 + 2 * v93;
          do
          {
            v97 = 0;
            do
            {
              LOWORD(v181.__r_.__value_.__l.__data_) = bswap32(*(unsigned __int16 *)(v87 + v97)) >> 16;
              std::ostream::write();
              v97 += 2;
            }
            while (v94 != v97);
            v87 += v95;
          }
          while (v87 != v96);
        }
        v98 = v162.__r_.__value_.__r.__words[0];
        v162.__r_.__value_.__r.__words[0] = 0;
        if (v98)
          (*(void (**)(std::string::size_type))(*(_QWORD *)v98 + 8))(v98);
      }
      else
      {
        v181.__r_.__value_.__r.__words[0] = 16;
        v181.__r_.__value_.__l.__size_ = 0x1000000008;
        v181.__r_.__value_.__r.__words[2] = 14;
        v162.__r_.__value_.__s.__data_[0] = 0;
        v163 = 0;
        sub_224168DD4((uint64_t)&v181, a2, (uint64_t)v170, (uint64_t)&v162);
        if (v163 && v162.__r_.__value_.__r.__words[0])
        {
          v162.__r_.__value_.__l.__size_ = v162.__r_.__value_.__r.__words[0];
          operator delete(v162.__r_.__value_.__l.__data_);
        }
        if ((_DWORD)v171 && HIDWORD(v171))
          sub_2231813E8(a2, (uint64_t)"\n", 1);
      }
      v99 = *(std::__shared_weak_count **)&v170[16];
      if (!*(_QWORD *)&v170[16])
        goto LABEL_275;
      v100 = (unint64_t *)(*(_QWORD *)&v170[16] + 8);
      do
        v101 = __ldaxr(v100);
      while (__stlxr(v101 - 1, v100));
      break;
    case 1u:
      *(_QWORD *)v170 = &off_24EC21420;
      sub_2241665B4((uint64_t)a1, (uint64_t)&v170[8]);
      if (a3 == 1)
      {
        v45 = *(_QWORD *)&v170[8];
        if (!*(_QWORD *)&v170[8])
          goto LABEL_253;
        v46 = *(std::__shared_weak_count **)&v170[16];
        if (*(_QWORD *)&v170[16])
        {
          v47 = (unint64_t *)(*(_QWORD *)&v170[16] + 8);
          do
            v48 = __ldxr(v47);
          while (__stxr(v48 + 1, v47));
          do
            v49 = __ldaxr(v47);
          while (__stlxr(v49 - 1, v47));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
          v50 = *(std::__shared_weak_count **)&v170[16];
          v45 = *(_QWORD *)&v170[8];
          if (*(_QWORD *)&v170[16])
          {
            v51 = (unint64_t *)(*(_QWORD *)&v170[16] + 8);
            do
              v52 = __ldxr(v51);
            while (__stxr(v52 + 1, v51));
            do
              v53 = __ldaxr(v51);
            while (__stlxr(v53 - 1, v51));
            if (!v53)
            {
              ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
              std::__shared_weak_count::__release_weak(v50);
            }
          }
        }
        if (BYTE1(v174))
          (*(void (**)(std::string *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v45 + 96))(&v162, v45, 0);
        else
LABEL_253:
          v162.__r_.__value_.__r.__words[0] = 0;
        if ((_DWORD)v171)
        {
          v112 = HIDWORD(v171);
          if (HIDWORD(v171))
          {
            v113 = v173;
            v114 = *(_QWORD *)&v170[24];
            if ((_BYTE)v174 && *(_QWORD *)&v170[24])
            {
              v115 = *(_OWORD *)&v170[8];
              if (*(_QWORD *)&v170[16])
              {
                v116 = (unint64_t *)(*(_QWORD *)&v170[16] + 8);
                do
                  v117 = __ldxr(v116);
                while (__stxr(v117 + 1, v116));
                do
                  v118 = __ldaxr(v116);
                while (__stlxr(v118 - 1, v116));
                if (!v118)
                {
                  (*(void (**)(_QWORD))(**((_QWORD **)&v115 + 1) + 16))(*((_QWORD *)&v115 + 1));
                  std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v115 + 1));
                }
              }
              (*(void (**)(_QWORD, _QWORD, const char *))(*(_QWORD *)v115 + 88))(v115, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
              v114 = *(_QWORD *)&v170[24];
            }
            v119 = v112 - 1;
            if (v112 != 1)
            {
              do
              {
                std::ostream::write();
                v114 += v113;
                --v119;
              }
              while (v119);
            }
            std::ostream::write();
          }
        }
        v120 = v162.__r_.__value_.__r.__words[0];
        v162.__r_.__value_.__r.__words[0] = 0;
        if (v120)
          (*(void (**)(std::string::size_type))(*(_QWORD *)v120 + 8))(v120);
      }
      else
      {
        v181.__r_.__value_.__r.__words[0] = 16;
        v181.__r_.__value_.__l.__size_ = 0x1000000008;
        v181.__r_.__value_.__r.__words[2] = 14;
        v162.__r_.__value_.__s.__data_[0] = 0;
        v163 = 0;
        sub_224167DBC((uint64_t)&v181, a2, (uint64_t)v170, (uint64_t)&v162);
        if (v163 && v162.__r_.__value_.__r.__words[0])
        {
          v162.__r_.__value_.__l.__size_ = v162.__r_.__value_.__r.__words[0];
          operator delete(v162.__r_.__value_.__l.__data_);
        }
        if ((_DWORD)v171 && HIDWORD(v171))
          sub_2231813E8(a2, (uint64_t)"\n", 1);
      }
      v99 = *(std::__shared_weak_count **)&v170[16];
      if (!*(_QWORD *)&v170[16])
        goto LABEL_275;
      v121 = (unint64_t *)(*(_QWORD *)&v170[16] + 8);
      do
        v101 = __ldaxr(v121);
      while (__stlxr(v101 - 1, v121));
      break;
    default:
      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/ImageIO/src/Pnm.cpp", 440, (uint64_t)"", 0, (uint64_t)"not implemented", 15, (void (*)(void **))sub_22457406C);
      abort();
  }
  if (!v101)
  {
    ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
    std::__shared_weak_count::__release_weak(v99);
  }
LABEL_275:
  *(_BYTE *)(a5 + 120) = 1;
  if (v133)
    return;
  v85 = v132;
LABEL_300:
  if (v85)
  {
    if (v131)
    {
      if (SHIBYTE(v130) < 0)
        operator delete(v129[0]);
      if (SHIBYTE(v127) < 0)
        operator delete(v126[0]);
    }
    if (v125 && SHIBYTE(v124) < 0)
    {
      v35 = (void *)__p;
      goto LABEL_309;
    }
  }
}

void sub_2241656AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,uint64_t a63)
{
  void *a65;
  uint64_t v65;
  void *v67;

  v67 = a65;
  a65 = 0;
  if (v67)
    (*(void (**)(void *))(*(_QWORD *)v67 + 8))(v67);
  sub_223AA8BF8(v65 - 248);
  sub_223197D38((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_224165ABC(_QWORD **a1)
{
  uint64_t v2;
  _QWORD *v3;
  unsigned int v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;

  v2 = MEMORY[0x24BDAC740];
  while (1)
  {
    v3 = *a1;
    std::istream::tellg();
    while ((*((_BYTE *)v3 + *(_QWORD *)(*v3 - 24) + 32) & 2) == 0)
    {
      v4 = std::istream::peek();
      if (v4 <= 0x7F)
      {
        if ((*(_DWORD *)(v2 + 4 * v4 + 60) & 0x4000) == 0)
          break;
      }
      else if (!__maskrune(v4, 0x4000uLL))
      {
        break;
      }
      std::istream::seekg();
    }
    std::istream::tellg();
    if (v9 == v8)
    {
      v5 = *a1;
      std::istream::tellg();
      v6 = v5 + 4;
      while ((*((_BYTE *)v6 + *(_QWORD *)(*v5 - 24)) & 2) == 0)
      {
        if (std::istream::peek() != 35 || (*((_BYTE *)v6 + *(_QWORD *)(*v5 - 24)) & 2) != 0)
          break;
        while (std::istream::peek() != 10)
        {
          std::istream::seekg();
          if ((*((_BYTE *)v6 + *(_QWORD *)(*v5 - 24)) & 2) != 0)
            goto LABEL_2;
        }
      }
LABEL_2:
      std::istream::tellg();
      if (v9 == v8)
        return (*((_BYTE *)*a1 + *(_QWORD *)(**a1 - 24) + 32) & 2) == 0;
    }
  }
}

uint64_t sub_224165C7C(_QWORD *a1)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  char *v4;
  unint64_t v5;
  void **v6;
  char *v7;
  int v8;
  BOOL v9;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  size_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char v21;
  unint64_t v22;
  char *v23;
  __int128 *v24;
  unint64_t v25;
  __int128 v26;
  char *v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  size_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  char v39;
  uint64_t v40;
  unint64_t v42;
  __int128 *v43;
  char *v44;
  unint64_t v45;
  __int128 v46;
  char *v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  char *__p;
  char *v52;
  void *v53[2];
  unsigned __int8 v54;

  __p = 0;
  v52 = 0;
  v2 = std::istream::peek();
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 2) != 0)
  {
    v4 = 0;
    v11 = 0;
    goto LABEL_59;
  }
  v3 = v2;
  v4 = 0;
  do
  {
    sub_2241664A4("0123456789", (uint64_t)v53);
    v5 = v54;
    if ((v54 & 0x80u) == 0)
      v6 = v53;
    else
      v6 = (void **)v53[0];
    if ((v54 & 0x80u) != 0)
      v5 = (unint64_t)v53[1];
    if (v5)
    {
      v7 = (char *)(v5 - 1);
      do
      {
        v8 = *(unsigned __int8 *)v6;
        v6 = (void **)((char *)v6 + 1);
        v9 = v8 == v3;
      }
      while (v8 != v3 && v7-- != 0);
      if (((char)v54 & 0x80000000) == 0)
      {
LABEL_16:
        v11 = (unint64_t)v52;
        if (!v9)
          goto LABEL_57;
        goto LABEL_20;
      }
    }
    else
    {
      v9 = 0;
      if (((char)v54 & 0x80000000) == 0)
        goto LABEL_16;
    }
    operator delete(v53[0]);
    v11 = (unint64_t)v52;
    if (!v9)
      goto LABEL_57;
LABEL_20:
    if ((unint64_t)v4 < v11)
    {
      *v4++ = v3;
      goto LABEL_40;
    }
    v12 = v4 - __p;
    v13 = v4 - __p + 1;
    if (v13 < 0)
      goto LABEL_93;
    v14 = v11 - (_QWORD)__p;
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (!v15)
    {
      v16 = 0;
      v17 = (char *)(v4 - __p);
      *(_BYTE *)v12 = v3;
      v18 = v12 + 1;
      if (v4 == __p)
        goto LABEL_37;
LABEL_30:
      if (v12 < 8 || v16 > &v16[v4 - __p - 1] || __p > v4 - 1 || (unint64_t)(__p - v16) < 0x20)
      {
        v19 = v4;
        goto LABEL_32;
      }
      if (v12 >= 0x20)
      {
        v22 = v12 & 0xFFFFFFFFFFFFFFE0;
        v23 = &v16[v12 - 16];
        v24 = (__int128 *)(v4 - 16);
        v25 = v12 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v26 = *v24;
          *((_OWORD *)v23 - 1) = *(v24 - 1);
          *(_OWORD *)v23 = v26;
          v23 -= 32;
          v24 -= 2;
          v25 -= 32;
        }
        while (v25);
        if (v12 == v22)
        {
LABEL_34:
          v4 = __p;
          __p = v16;
          v52 = &v16[v15];
          if (!v4)
            goto LABEL_39;
LABEL_38:
          operator delete(v4);
          goto LABEL_39;
        }
        if ((v12 & 0x18) == 0)
        {
          v17 -= v22;
          v19 = &v4[-v22];
          goto LABEL_32;
        }
      }
      else
      {
        v22 = 0;
      }
      v19 = &v4[-(v12 & 0xFFFFFFFFFFFFFFF8)];
      v17 -= v12 & 0xFFFFFFFFFFFFFFF8;
      v27 = &v16[&v4[-v22] - __p - 8];
      v28 = (uint64_t *)&v4[-v22 - 8];
      v29 = v22 - (v12 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v30 = *v28--;
        *(_QWORD *)v27 = v30;
        v27 -= 8;
        v29 += 8;
      }
      while (v29);
      if (v12 == (v12 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_34;
LABEL_32:
      v20 = v17 - 1;
      do
      {
        v21 = *--v19;
        *v20-- = v21;
      }
      while (v19 != __p);
      goto LABEL_34;
    }
    v16 = (char *)operator new(v15);
    v17 = &v16[v12];
    v16[v12] = v3;
    v18 = (uint64_t)&v16[v12 + 1];
    if (v4 != __p)
      goto LABEL_30;
LABEL_37:
    __p = v17;
    v52 = &v16[v15];
    if (v4)
      goto LABEL_38;
LABEL_39:
    v4 = (char *)v18;
LABEL_40:
    std::istream::seekg();
    v3 = std::istream::peek();
  }
  while ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 2) == 0);
  v11 = (unint64_t)v52;
LABEL_57:
  if ((unint64_t)v4 < v11)
  {
    *v4 = 10;
    goto LABEL_78;
  }
LABEL_59:
  v31 = v4 - __p;
  v32 = v4 - __p + 1;
  if (v32 < 0)
LABEL_93:
    sub_22316E078();
  v33 = v11 - (_QWORD)__p;
  if (2 * v33 > v32)
    v32 = 2 * v33;
  if (v33 >= 0x3FFFFFFFFFFFFFFFLL)
    v34 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v34 = v32;
  if (v34)
    v35 = (char *)operator new(v34);
  else
    v35 = 0;
  v36 = &v35[v31];
  v35[v31] = 10;
  if (v4 == __p)
  {
    v35 += v31;
    __p = v36;
    if (!v4)
      goto LABEL_79;
    goto LABEL_77;
  }
  if (v31 < 8 || (unint64_t)(__p - v35) < 0x20)
  {
    v37 = v4;
    goto LABEL_72;
  }
  if (v31 >= 0x20)
  {
    v42 = v31 & 0xFFFFFFFFFFFFFFE0;
    v43 = (__int128 *)(v4 - 16);
    v44 = &v35[v4 - 16 - __p];
    v45 = v31 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v46 = *v43;
      *((_OWORD *)v44 - 1) = *(v43 - 1);
      *(_OWORD *)v44 = v46;
      v44 -= 32;
      v43 -= 2;
      v45 -= 32;
    }
    while (v45);
    if (v31 != v42)
    {
      if ((v31 & 0x18) == 0)
      {
        v36 -= v42;
        v37 = &v4[-v42];
        goto LABEL_72;
      }
      goto LABEL_88;
    }
  }
  else
  {
    v42 = 0;
LABEL_88:
    v37 = &v4[-(v31 & 0xFFFFFFFFFFFFFFF8)];
    v36 -= v31 & 0xFFFFFFFFFFFFFFF8;
    v47 = &v4[-v42 - 8];
    v48 = &v35[v47 - __p];
    v49 = v42 - (v31 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v50 = *(_QWORD *)v47;
      v47 -= 8;
      *(_QWORD *)v48 = v50;
      v48 -= 8;
      v49 += 8;
    }
    while (v49);
    if (v31 != (v31 & 0xFFFFFFFFFFFFFFF8))
    {
LABEL_72:
      v38 = v36 - 1;
      do
      {
        v39 = *--v37;
        *v38-- = v39;
      }
      while (v37 != __p);
    }
  }
  v4 = __p;
  __p = v35;
  if (v4)
  {
LABEL_77:
    operator delete(v4);
LABEL_78:
    v35 = __p;
  }
LABEL_79:
  v40 = atoi(v35);
  if (v35)
    operator delete(v35);
  return v40;
}

void sub_2241660E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_224166104(uint64_t a1, int a2)
{
  int v4;
  void *v5[2];
  uint64_t v6;
  void *__p[2];
  uint64_t v8;
  char v9;
  void *v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  char v15;
  char *v16;
  __int128 v17;
  unsigned int v18;
  std::string v19;
  std::string **v20;
  std::string *v21;
  std::string *v22;
  char **v23;
  std::string *v24;
  std::string *v25;

  if (a2 >= 255)
    v4 = 0xFFFF;
  else
    v4 = 255;
  v16 = (char *)operator new(0x68uLL);
  v17 = xmmword_2245CBD50;
  strcpy(v16, "Unsupported pnm format. Loader does not support intensity scaling. File specifies maximum intensity ");
  v18 = 1;
  std::to_string(&v19, a2);
  v21 = (std::string *)&v16;
  v22 = &v19;
  v23 = &v16;
  v24 = &v19;
  v25 = &v19;
  v20 = &v21;
  sub_22319BA34((uint64_t)&v20, (uint64_t)&v16);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  v21 = (std::string *)&v16;
  v22 = (std::string *)" but should be ";
  v23 = &v16;
  v24 = (std::string *)" but should be ";
  v25 = (std::string *)" but should be ";
  if (v18 == -1)
    sub_22316DD70();
  v19.__r_.__value_.__r.__words[0] = (std::string::size_type)&v21;
  ((void (*)(std::string *, char **))off_24EC6D570[v18])(&v19, &v16);
  std::to_string(&v19, v4);
  v21 = (std::string *)&v16;
  v22 = &v19;
  v23 = &v16;
  v24 = &v19;
  v25 = &v19;
  if (v18 == -1)
    sub_22316DD70();
  v20 = &v21;
  ((void (*)(std::string ***, char **))off_24EC6D558[v18])(&v20, &v16);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  v21 = (std::string *)&v16;
  v22 = (std::string *)".";
  v23 = &v16;
  v24 = (std::string *)".";
  v25 = (std::string *)".";
  if (v18 == -1)
    sub_22316DD70();
  v19.__r_.__value_.__r.__words[0] = (std::string::size_type)&v21;
  ((void (*)(std::string *, char **))off_24EC6D588[v18])(&v19, &v16);
  if (v18 == -1)
    sub_22316DD70();
  v21 = &v19;
  ((void (*)(void **__return_ptr, std::string **, char **))*(&off_24EC6D5A0 + v18))(v5, &v21, &v16);
  if (v18 != -1)
    ((void (*)(std::string **, char **))off_24EC6D540[v18])(&v21, &v16);
  if (SHIBYTE(v6) < 0)
  {
    sub_223197FA4(__p, v5[0], (unint64_t)v5[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v5;
    v8 = v6;
  }
  v9 = 1;
  LOBYTE(v10) = 0;
  v14 = 0;
  v15 = 1;
  sub_22415D104(5u, (__int128 *)__p, a1);
  if (v15)
  {
    if (!v14)
      goto LABEL_21;
    if (v13 < 0)
    {
      operator delete(v12);
      if ((v11 & 0x80000000) == 0)
      {
LABEL_21:
        if (!v9)
          goto LABEL_24;
LABEL_22:
        if (SHIBYTE(v8) < 0)
          operator delete(__p[0]);
        goto LABEL_24;
      }
    }
    else if ((v11 & 0x80000000) == 0)
    {
      goto LABEL_21;
    }
    operator delete(v10);
    if (!v9)
      goto LABEL_24;
    goto LABEL_22;
  }
LABEL_24:
  if (SHIBYTE(v6) < 0)
    operator delete(v5[0]);
}

void sub_224166424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_224166454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_22319B964((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_2241664A4(const char *a1@<X0>, uint64_t a2@<X8>)
{
  size_t v4;
  size_t v5;
  __int128 *p_dst;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  __int128 __dst;
  unint64_t v11;

  v4 = strlen(a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    p_dst = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&__dst + 1) = v5;
    v11 = v8 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
LABEL_9:
    memcpy(p_dst, a1, v5);
    *((_BYTE *)p_dst + v5) = 0;
    if ((SHIBYTE(v11) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
  HIBYTE(v11) = v4;
  p_dst = &__dst;
  if (v4)
    goto LABEL_9;
  LOBYTE(__dst) = 0;
  if ((SHIBYTE(v11) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(_QWORD *)(a2 + 16) = v11;
    return;
  }
LABEL_10:
  v9 = (void *)__dst;
  sub_223197FA4((_BYTE *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  operator delete(v9);
}

void sub_2241665A0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2241665B4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  _BOOL4 v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __int16 v17;
  std::__shared_weak_count *size;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  std::logic_error *exception;
  std::string v23;

  if (*(_DWORD *)(a1 + 48) != 1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_224166830(a1);
    std::logic_error::logic_error(exception, &v23);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v23.__r_.__value_.__r.__words[0] = v4;
      v23.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v4;
    }
  }
  else
  {
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_DWORD *)(a1 + 24);
  v12 = v11 != 0;
  v13 = v11 == 0;
  if (!*(_DWORD *)(a1 + 28))
    v13 = 1;
  if (v13)
    v14 = 0;
  else
    v14 = (unint64_t)*(unsigned int *)(a1 + 32) << 32;
  if (v13)
    v15 = 0;
  else
    v15 = *(_QWORD *)(a1 + 24);
  if (HIDWORD(v15) * HIDWORD(v14) == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v16 = v14 | v12;
  v17 = *(_WORD *)(a1 + 52);
  size = (std::__shared_weak_count *)v23.__r_.__value_.__l.__size_;
  if (v23.__r_.__value_.__l.__size_)
  {
    v19 = (unint64_t *)(v23.__r_.__value_.__l.__size_ + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    *(_QWORD *)a2 = v23.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 8) = size;
    *(_QWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v16;
    *(_WORD *)(a2 + 40) = v17;
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  else
  {
    *(_OWORD *)a2 = v23.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v16;
    *(_WORD *)(a2 + 40) = v17;
  }
}

void sub_2241667E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_224166830(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_223C73BF8();
  v3 = sub_2231A29BC();
  v5 = *(_DWORD *)(a1 + 48);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

void sub_2241668A8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  _BOOL4 v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __int16 v17;
  std::__shared_weak_count *size;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  std::logic_error *exception;
  std::string v23;

  if (*(_DWORD *)(a1 + 48) != 2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_224166B28(a1);
    std::logic_error::logic_error(exception, &v23);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v23.__r_.__value_.__r.__words[0] = v4;
      v23.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v4;
    }
  }
  else
  {
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_DWORD *)(a1 + 24);
  v12 = v11 != 0;
  v13 = v11 == 0;
  if (!*(_DWORD *)(a1 + 28))
    v13 = 1;
  if (v13)
    v14 = 0;
  else
    v14 = ((unint64_t)*(unsigned int *)(a1 + 32) << 31) & 0x7FFFFFFF00000000;
  if (v13)
    v15 = 0;
  else
    v15 = *(_QWORD *)(a1 + 24);
  if (HIDWORD(v15) * HIDWORD(v14) == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v16 = v14 | v12;
  v17 = *(_WORD *)(a1 + 52);
  size = (std::__shared_weak_count *)v23.__r_.__value_.__l.__size_;
  if (v23.__r_.__value_.__l.__size_)
  {
    v19 = (unint64_t *)(v23.__r_.__value_.__l.__size_ + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    *(_QWORD *)a2 = v23.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 8) = size;
    *(_QWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v16;
    *(_WORD *)(a2 + 40) = v17;
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  else
  {
    *(_OWORD *)a2 = v23.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v16;
    *(_WORD *)(a2 + 40) = v17;
  }
}

void sub_224166ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_224166B28(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_224166BA0();
  v3 = sub_2231A29BC();
  v5 = *(_DWORD *)(a1 + 48);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_224166BA0()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_255790FC0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255790FC0))
  {
    sub_223174DE4(v7, "ConstImageView");
    v2 = sub_2231DF428();
    sub_224166DA4((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2231A27C0();
    sub_224166DA4((uint64_t)v3, (uint64_t)&__p);
    sub_22319BD1C(v6, (uint64_t)v9, 2uLL);
    sub_2245730F4((char *)v7, (uint64_t *)v6, &stru_255790FA8, v4, v5);
    sub_22319BB48(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_255790FA8, &dword_22314D000);
          __cxa_guard_release(&qword_255790FC0);
          return &stru_255790FA8;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_255790FA8;
}

